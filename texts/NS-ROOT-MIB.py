#
# PySNMP MIB module NS-ROOT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/citrix/NS-MIB-SMIV2-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 11:38:02 2024
# On host fv-az842-370 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, IpAddress, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Bits, TimeTicks, Counter32, Gauge32, NotificationType, ModuleIdentity, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "IpAddress", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Bits", "TimeTicks", "Counter32", "Gauge32", "NotificationType", "ModuleIdentity", "iso", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
netScaler = ModuleIdentity((1, 3, 6, 1, 4, 1, 5951))
if mibBuilder.loadTexts: netScaler.setLastUpdated('201609250000Z')
if mibBuilder.loadTexts: netScaler.setOrganization('Citrix Systems, Inc.')
if mibBuilder.loadTexts: netScaler.setContactInfo('Citrix Technical Assistance Center\n\t\t\tPostal: Citrix Systems, Inc.\n\t\t\t\t851 West Cypress Creek Road\n\t\t\t\tFort Lauderdale, Florida  33309\n\t\t\t\tUnited States\n\t\t\tTel: +1-800-4-CITRIX (+1-800-424-8749)\n\t\t\tE-mail: customercare@citrix.com')
if mibBuilder.loadTexts: netScaler.setDescription('The enterprise specific MIB for Netscaler NS11.1.')
nsRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1))
netScalerEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 1))
wsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 2))
sysStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1))
totalClientConnections = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalClientConnections.setStatus('obsolete')
if mibBuilder.loadTexts: totalClientConnections.setDescription('The Total Client Connections made from system start.\n\n\tThis object is obsolete.')
curClientConnections = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curClientConnections.setStatus('obsolete')
if mibBuilder.loadTexts: curClientConnections.setDescription('The Current Client Connections.\n\n\tThis object is obsolete.It can be measured through nsTcpStatsGroup.tcpCurClientConn.')
totalServerConnections = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalServerConnections.setStatus('obsolete')
if mibBuilder.loadTexts: totalServerConnections.setDescription('The Total Server Connections made from system start.\n\n\tThis object is obsolete.')
curServerConnections = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curServerConnections.setStatus('obsolete')
if mibBuilder.loadTexts: curServerConnections.setDescription('The Current Server Connections.\n\n\tThis object is obsolete.It can be measured through nsTcpStatsGroup.tcpCurServerConn.')
clientConnRefused = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientConnRefused.setStatus('obsolete')
if mibBuilder.loadTexts: clientConnRefused.setDescription('Client connections added the SurgeQ, and blocked from initiating a server connection to control op/s.\n\n\tThis object is obsolete.')
reuseHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reuseHit.setStatus('obsolete')
if mibBuilder.loadTexts: reuseHit.setDescription('Total no of client transactions used the server connection in the reuse-pool.\n\n\tThis object is obsolete.It can be measured through nsTcpStatsGroup.tcpReuseHit.')
reuseMiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reuseMiss.setStatus('obsolete')
if mibBuilder.loadTexts: reuseMiss.setDescription('The total new Connections made, when server connection\n         unavailable in reuse pool...OBSOLETE')
totClientDontReuse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totClientDontReuse.setStatus('obsolete')
if mibBuilder.loadTexts: totClientDontReuse.setDescription('The total client connection with Dont Reuse flag set...OBSOLETE')
totServerDontReuse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totServerDontReuse.setStatus('obsolete')
if mibBuilder.loadTexts: totServerDontReuse.setDescription('The total server connection with Dont Reuse set...OBSOLETE')
curPhysicalServers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curPhysicalServers.setStatus('obsolete')
if mibBuilder.loadTexts: curPhysicalServers.setDescription('The number of physical servers that WS has open connections with.\n\n\tThis object is obsolete.It can be measured through nsTcpStatsGroup.tcpCurPhysicalServers.')
totPhysicalServers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totPhysicalServers.setStatus('obsolete')
if mibBuilder.loadTexts: totPhysicalServers.setDescription('The total number of physical servers that WS opened connections \n         to from the last reboot.\n\n\tThis object is obsolete.')
cookiePacketSeqReject = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cookiePacketSeqReject.setStatus('obsolete')
if mibBuilder.loadTexts: cookiePacketSeqReject.setDescription('The number of tcp connections rejected because of syn cookie sequence number mismatch.\n\n\tThis object is obsolete.It can be measured through nsTcpStatsGroup.tcpErrCookiePktSeqReject.')
cookieSignatureReject = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cookieSignatureReject.setStatus('obsolete')
if mibBuilder.loadTexts: cookieSignatureReject.setDescription('The number of tcp connections rejected because of syn cookie mismatch.\n\n\tThis object is obsolete.It can be measured through nsTcpStatsGroup.tcpErrCookiePktSigReject.')
cpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUsage.setStatus('obsolete')
if mibBuilder.loadTexts: cpuUsage.setDescription('The CPU Utilization.\n\n\tThis object is obsolete.')
unackSyn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unackSyn.setStatus('obsolete')
if mibBuilder.loadTexts: unackSyn.setDescription('The number of un-acknowledged SYNs NS has received so far.\n\n\tThis object is obsolete.It can be calculated as (tcpTotSyn - tcpTotClientConnOpened).')
curClientEstablishedConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curClientEstablishedConn.setStatus('obsolete')
if mibBuilder.loadTexts: curClientEstablishedConn.setDescription('The number of currently established client connections.\n\n\tThis object is obsolete.It can be measured through nsTcpStatsGroup.tcpCurClientConnEstablished.')
curServerEstablishedConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curServerEstablishedConn.setStatus('obsolete')
if mibBuilder.loadTexts: curServerEstablishedConn.setDescription('The number of currently established server connections.\n\n\tThis object is obsolete.It can be measured through nsTcpStatsGroup.tcpCurServerConnEstablished.')
wsHttpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18))
totalRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRequests.setStatus('obsolete')
if mibBuilder.loadTexts: totalRequests.setDescription('The total HTTP Requests.')
totalGets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalGets.setStatus('obsolete')
if mibBuilder.loadTexts: totalGets.setDescription('The total HTTP GETs.')
totalRequests1_0 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 3), Counter32()).setLabel("totalRequests1-0").setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRequests1_0.setStatus('obsolete')
if mibBuilder.loadTexts: totalRequests1_0.setDescription('The total HTTP 1.0 Requests.')
totalPosts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPosts.setStatus('obsolete')
if mibBuilder.loadTexts: totalPosts.setDescription('The total HTTP Posts.')
totalResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalResponses.setStatus('obsolete')
if mibBuilder.loadTexts: totalResponses.setDescription('The total HTTP Responses.')
totalResponses1_0 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 6), Counter32()).setLabel("totalResponses1-0").setMaxAccess("readonly")
if mibBuilder.loadTexts: totalResponses1_0.setStatus('obsolete')
if mibBuilder.loadTexts: totalResponses1_0.setDescription('The total HTTP 1.0 Responses.')
totalContentLenResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalContentLenResponses.setStatus('obsolete')
if mibBuilder.loadTexts: totalContentLenResponses.setDescription('The total HTTP Responses with Content Length.')
totalChunkedResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalChunkedResponses.setStatus('obsolete')
if mibBuilder.loadTexts: totalChunkedResponses.setDescription('The total HTTP Chunked Responses.')
totalMultiPartResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalMultiPartResponses.setStatus('obsolete')
if mibBuilder.loadTexts: totalMultiPartResponses.setDescription('The total HTTP Multi-part Responses.')
totalIncompleteHeaders = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIncompleteHeaders.setStatus('obsolete')
if mibBuilder.loadTexts: totalIncompleteHeaders.setDescription('The total HTTP Incomplete headers.')
totalIncompleteRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIncompleteRequests.setStatus('obsolete')
if mibBuilder.loadTexts: totalIncompleteRequests.setDescription('The total Incomplete Requests.')
totalIncompleteResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIncompleteResponses.setStatus('obsolete')
if mibBuilder.loadTexts: totalIncompleteResponses.setDescription('The total Incomplete Responses.')
totalPipeLinedRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPipeLinedRequests.setStatus('obsolete')
if mibBuilder.loadTexts: totalPipeLinedRequests.setDescription('The total pipe-lined Requests.')
serverBusyErrs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 18, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverBusyErrs.setStatus('obsolete')
if mibBuilder.loadTexts: serverBusyErrs.setDescription('The total HTTP Server Busy Errors.')
wsIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19), )
if mibBuilder.loadTexts: wsIfStatsTable.setStatus('obsolete')
if mibBuilder.loadTexts: wsIfStatsTable.setDescription('The Raw bandwidth usage of all the interfaces.\n\n\tThis Table is obsolete.Instead of this table use nsSysGroup.nsIfStatsTable.')
wsIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1), ).setIndexNames((0, "NS-ROOT-MIB", "index"))
if mibBuilder.loadTexts: wsIfStatsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: wsIfStatsEntry.setDescription('The Raw bandwidth usage of all the interfaces.\n\n\tThis Entry is obsolete.Instead of this entry use nsSysGroup.nsIfStatsEntry.')
index = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: index.setStatus('obsolete')
if mibBuilder.loadTexts: index.setDescription('The distinguishing Id for each physical interface.\n\n\tThis object is obsolete.')
wsIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIfName.setStatus('obsolete')
if mibBuilder.loadTexts: wsIfName.setDescription('The name of the Interface.\n\n\tThis object is obsolete.It can be measured through nsIfStatsTable.ifName.')
wsIfMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIfMedia.setStatus('obsolete')
if mibBuilder.loadTexts: wsIfMedia.setDescription('The media type of the Interface.\n\n\tThis object is obsolete.It can be measured through nsIfStatsTable.ifMedia.')
rxRawBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxRawBandwidthUsage.setStatus('obsolete')
if mibBuilder.loadTexts: rxRawBandwidthUsage.setDescription('The received raw bandwidth on interface in bitsps\n         since the last time this variable was \n         retrieved using SNMP.\n\n\tThis object is obsolete.')
rxAveragePacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxAveragePacketRate.setStatus('obsolete')
if mibBuilder.loadTexts: rxAveragePacketRate.setDescription('The average number of packets received on the \n         interface since the system start.\n\n\tThis object is obsolete.It can be measured through nsIfStatsTable.ifRxAvgPacketRate.')
rxCurrentPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxCurrentPacketRate.setStatus('obsolete')
if mibBuilder.loadTexts: rxCurrentPacketRate.setDescription('The packet rate on the interface since the last\n         time the variable was retrieved with using SNMP.\n\n\tThis object is obsolete.')
rxAveragePacketsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxAveragePacketsSize.setStatus('obsolete')
if mibBuilder.loadTexts: rxAveragePacketsSize.setDescription('The average size of the packet received on the \n         interface since the system start.\n\n\t This object is obsolete.')
rxFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFrameErrors.setStatus('obsolete')
if mibBuilder.loadTexts: rxFrameErrors.setDescription('A Counter for the number of frame errors received\n         on the interface.\n\n\tThis object is obsolete.It can be measured through nsIfStatsTable.ifRxFrameErrors.')
rxCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxCrcErrors.setStatus('obsolete')
if mibBuilder.loadTexts: rxCrcErrors.setDescription('A Counter for the number of Crc errors received on\n         the interface.\n\n\tThis object is obsolete.It can be measured through nsIfStatsTable.ifRxCRCErrors.')
rxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxAlignmentErrors.setStatus('obsolete')
if mibBuilder.loadTexts: rxAlignmentErrors.setDescription('A Counter to indicate the number of Alignment errors\n         received on the interface.\n\n\tThis object is obsolete.It can be measured through nsIfStatsTable.ifRxAlignmentErrors.')
txRawBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txRawBandwidthUsage.setStatus('obsolete')
if mibBuilder.loadTexts: txRawBandwidthUsage.setDescription('The transmit raw bandwidth on interface in bitsps\n         from the last time this variable was retrieved.\n\n\tThis object is obsolete.')
txAveragePacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txAveragePacketRate.setStatus('obsolete')
if mibBuilder.loadTexts: txAveragePacketRate.setDescription('The average number of packets transmitted on the \n         the interface since the system start.\n\n\tThis object is obsolete.It can be measured through nsIfStatsTable.ifTxAvgPacketRate.')
txCurrentPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txCurrentPacketRate.setStatus('obsolete')
if mibBuilder.loadTexts: txCurrentPacketRate.setDescription('The packet rate on the interface since the last\n         time this variable was retrieved using SNMP.\n\n\tThis object is obsolete.')
txAveragePacketsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txAveragePacketsSize.setStatus('obsolete')
if mibBuilder.loadTexts: txAveragePacketsSize.setDescription('The average size of the packet received on the \n         interface since the system start.\n\n\tThis object is obsolete.')
txExcessCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExcessCollisions.setStatus('obsolete')
if mibBuilder.loadTexts: txExcessCollisions.setDescription('A Counter to indicate excess collisions detected in\n         transmission on the interface.\n\n\tThis object is obsolete.It can be measured through nsIfStatsTable.ifTxExcessCollisions.')
txLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txLateCollisions.setStatus('obsolete')
if mibBuilder.loadTexts: txLateCollisions.setDescription('A Counter to indicate late collisions detected in\n         transmission on the interface.\n\n\tThis object is obsolete.It can be measured through nsIfStatsTable.ifTxLateCollisions.')
txCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txCollisions.setStatus('obsolete')
if mibBuilder.loadTexts: txCollisions.setDescription('A Counter to indicate total collision Errors detected \n         in transmission on the interface.\n\n\tThis object is obsolete.It can be measured through nsIfStatsTable.ifTxCollisions.')
txMultiCollisionsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMultiCollisionsErrors.setStatus('obsolete')
if mibBuilder.loadTexts: txMultiCollisionsErrors.setDescription('A Counter to indicate Multi collision Errors detected \n         in transmission on the interface.\n\n\tThis object is obsolete.It can be measured through nsIfStatsTable.ifTxMultiCollisionsErrors.')
txCarrierErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 19, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txCarrierErrors.setStatus('obsolete')
if mibBuilder.loadTexts: txCarrierErrors.setDescription('A Counter to indicate Carrier Errors detected in \n         transmission on the interface.\n\n\tThis object is obsolete.It can be measured through nsIfStatsTable.ifTxCarrierErrors.')
wsudpgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 20))
totudpsessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 20, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totudpsessions.setStatus('obsolete')
if mibBuilder.loadTexts: totudpsessions.setDescription('Total number of udp sessions since the start of the system')
currudpsessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 1, 20, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currudpsessions.setStatus('obsolete')
if mibBuilder.loadTexts: currudpsessions.setDescription('Total number of current udp sessions ')
sysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2))
wsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: wsIpAddress.setDescription('The primary IP address of the netscaler.\n\n\tThis object is obsolete.It can be measured through nsSysGroup.sysIpAdress.')
wsNetmask = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNetmask.setStatus('obsolete')
if mibBuilder.loadTexts: wsNetmask.setDescription('The netmask for the IP address of the netscaler.\n\n\tThis object is obsolete.It can be measured through nsSysGroup.sysNetmask.')
wsMappedIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMappedIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: wsMappedIpAddress.setDescription('The Mapped IP address of the netscaler.')
wsLastMappedIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLastMappedIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: wsLastMappedIpAddress.setDescription('The last Mapped IP address of the netscaler.')
wsMappedIpAddressRange = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMappedIpAddressRange.setStatus('obsolete')
if mibBuilder.loadTexts: wsMappedIpAddressRange.setDescription('The range of mapped IP addresses on the netscaler.')
wsFailOver = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsFailOver.setStatus('obsolete')
if mibBuilder.loadTexts: wsFailOver.setDescription('Is Fail Over enabled on the netscaler.\n\n\tThis object is obsolete.')
wsPriority = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPriority.setStatus('obsolete')
if mibBuilder.loadTexts: wsPriority.setDescription('The priority of the netscaler.')
wsMaxClientList = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMaxClientList.setStatus('obsolete')
if mibBuilder.loadTexts: wsMaxClientList.setDescription('The Maximum number of server connections that NS can open to the server.\n\n\tThis object is obsolete.')
wsClientIp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsClientIp.setStatus('obsolete')
if mibBuilder.loadTexts: wsClientIp.setDescription('Enable Client IP in the HTTP Request to the Server.\n\t\n\tThis object is obsolete.')
wsFailoverTime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsFailoverTime.setStatus('obsolete')
if mibBuilder.loadTexts: wsFailoverTime.setDescription('The time in seconds after which the secondary takes over as \n         primary, if there is no response from primary.')
wsMaxRequestsPerConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMaxRequestsPerConn.setStatus('obsolete')
if mibBuilder.loadTexts: wsMaxRequestsPerConn.setDescription('The Maximum number of requests per connection on a server-connection.\n\n\tThis object is obsolete.')
wsSmoothConnection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSmoothConnection.setStatus('obsolete')
if mibBuilder.loadTexts: wsSmoothConnection.setDescription('Smooth Connection Feature on the netscaler.\n\n\tThis object is obsolete.')
loadBalancing = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 3))
lbStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1), )
if mibBuilder.loadTexts: lbStatisticsTable.setStatus('obsolete')
if mibBuilder.loadTexts: lbStatisticsTable.setDescription('The Virtual Service Information for each of the entities.\n\n\tThis Table is obsolete.Instead of this table use nsVserverGroup.vserverTable.')
lbStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsId"), (0, "NS-ROOT-MIB", "psId"))
if mibBuilder.loadTexts: lbStatisticsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: lbStatisticsEntry.setDescription('The Virtual Service Information for each of the entities.\n\n\tThis Entry is obsolete.Instead of this entry use nsVserverGroup.vserverEntry.')
vsId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsId.setStatus('obsolete')
if mibBuilder.loadTexts: vsId.setDescription('The distinguishing Id for each Virtual Service inside\n         a NetScaler.\n\n\tThis object is obsolete.')
psId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psId.setStatus('obsolete')
if mibBuilder.loadTexts: psId.setDescription('The distinguishing Id for each Physical Service inside\n         a NetScaler.\n\n\tThis object is obsolete.')
vsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: vsIpAddress.setDescription('The IP address in the Virtual Service.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrIpAddress.')
vsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsPort.setStatus('obsolete')
if mibBuilder.loadTexts: vsPort.setDescription('The port in the Virtual Service.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrPort.')
psIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: psIpAddress.setDescription('The IP address in the Physical Service.\n\n\tThis object is obsolete.It can be measured through serviceTable.svcIpAddress.')
psPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPort.setStatus('obsolete')
if mibBuilder.loadTexts: psPort.setDescription('The port in the Physical Service.\n\n\tThis object is obsolete.It can be measured through serviceTable.svcPort.')
protocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("http", 0), ("ftp", 1), ("tcp", 2), ("udp", 3), ("sslBridge", 4), ("monitor", 5), ("monitorUdp", 6), ("nntp", 7), ("httpserver", 8), ("httpclient", 9), ("rpcserver", 10), ("rpcclient", 11), ("ssf", 12), ("nat", 13), ("any", 14), ("ssl", 15), ("dns", 16), ("adns", 17), ("snmp", 18), ("ha", 19), ("monitorPing", 20), ("serviceUnknown", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolType.setStatus('obsolete')
if mibBuilder.loadTexts: protocolType.setDescription('The protocol type in the Virtual Service.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrType.')
lbMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("weightedRoundRobin", 1), ("leastConnections", 2), ("leastResponse", 3), ("asynchronousMAC", 4), ("urlHashed", 5), ("domainHashed", 6), ("destinationIPHashed", 7), ("sourceIPHashed", 8), ("leastBandwidth", 9), ("leastPackets", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbMethod.setStatus('obsolete')
if mibBuilder.loadTexts: lbMethod.setDescription('The Policy used for Load Balancing.\n\n\t\t\tThis object is obsolete.It can be measured through lbvserverTable.lbvsvrLBMethod.')
serviceHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceHits.setStatus('obsolete')
if mibBuilder.loadTexts: serviceHits.setDescription('The total hits on the physical service.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrTotalRequests.')
latency = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latency.setStatus('obsolete')
if mibBuilder.loadTexts: latency.setDescription('The latency in responding to gets from the \n         physical server.\n\n\tThis object is obsolete.It can be measured through lbvserverTable.lbvsvrAvgSvrTTFB.')
connections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connections.setStatus('obsolete')
if mibBuilder.loadTexts: connections.setDescription('The number of active connections on the \n\t\t physical Server.\n\n\t\tThis object is obsolete.It can be measured through lbvserverTable.lbvsvrActiveConn.')
lbConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2))
virServiceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1), )
if mibBuilder.loadTexts: virServiceTable.setStatus('obsolete')
if mibBuilder.loadTexts: virServiceTable.setDescription('The table that has all the configuration information \n         for each virtual service.\n\n\tThis Table is obsolete.Instead of this table use nsVserverGroup.vserverTable.\t')
virServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vserId"))
if mibBuilder.loadTexts: virServiceEntry.setStatus('obsolete')
if mibBuilder.loadTexts: virServiceEntry.setDescription('The Virtual Service Information for each of the entities.\n\n\tThis Entry is obsolete.Instead of this entry use nsVserverGroup.vserverEntry.')
vserId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserId.setStatus('obsolete')
if mibBuilder.loadTexts: vserId.setDescription('The distinguishing Id for each Virtual Service inside\n         a NetScaler.\n\n\tThis object is obsolete.')
ipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddress.setStatus('obsolete')
if mibBuilder.loadTexts: ipAddress.setDescription('The IP address in the Virtual Service.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrIpAddress.\t')
port = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: port.setStatus('obsolete')
if mibBuilder.loadTexts: port.setDescription('The port in the Virtual Service.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrPort.')
vsProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("http", 0), ("ftp", 1), ("tcp", 2), ("udp", 3), ("sslBridge", 4), ("monitor", 5), ("monitorUdp", 6), ("nntp", 7), ("httpserver", 8), ("httpclient", 9), ("rpcserver", 10), ("rpcclient", 11), ("ssf", 12), ("nat", 13), ("any", 14), ("ssl", 15), ("dns", 16), ("adns", 17), ("snmp", 18), ("ha", 19), ("monitorPing", 20), ("serviceUnknown", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsProtocolType.setStatus('obsolete')
if mibBuilder.loadTexts: vsProtocolType.setDescription('The protocol type in the Virtual Service.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrType.')
name = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: name.setStatus('obsolete')
if mibBuilder.loadTexts: name.setDescription('The name of the Virtual Service.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrName.')
vsLbMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("weightedRoundRobin", 1), ("leastConnections", 2), ("leastResponse", 3), ("asynchronousMAC", 4), ("urlHashed", 5), ("domainHashed", 6), ("destinationIPHashed", 7), ("sourceIPHashed", 8), ("leastBandwidth", 9), ("leastPackets", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsLbMethod.setStatus('obsolete')
if mibBuilder.loadTexts: vsLbMethod.setDescription('The Policy used for Load Balancing.\n\n\t\tThis object is obsolete.It can be measured through lbvserverTable.lbvsvrLBMethod.')
persistanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sourceIp", 1), ("cookieInsert", 2), ("cookieDelete", 3), ("cookieRead", 4), ("cookieHash", 5), ("sessionId", 6), ("server", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistanceType.setStatus('obsolete')
if mibBuilder.loadTexts: persistanceType.setDescription('The type of persistence used.\n\n\t\tThis object is obsolete.It can be measured through lbvserverTable.lbvsvrPersistanceType.')
persistanceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistanceTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: persistanceTimeout.setDescription('The timeout set for persistence.\n\n\tThis object is obsolete.It can be measured through lbvserverTable.lbvsvrPersistanceTimeOut. ')
state = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 0), ("down", 1), ("unknown", 2), ("busy", 3), ("outOfService", 4), ("transitionToOutOfService", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: state.setStatus('obsolete')
if mibBuilder.loadTexts: state.setDescription('The State of the virtual Service.\n\n\t\tThis object is obsolete.It can be measured through vserverTable.vsvrState.')
phyServiceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2), )
if mibBuilder.loadTexts: phyServiceTable.setStatus('obsolete')
if mibBuilder.loadTexts: phyServiceTable.setDescription('The table that has all the configuration information \n         for each physical service.\n\n\tThis Table is obsolete.Instead of this table use nsSvcGroup.serviceTable.')
phyServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "pserId"))
if mibBuilder.loadTexts: phyServiceEntry.setStatus('obsolete')
if mibBuilder.loadTexts: phyServiceEntry.setDescription('The Physical Service Information for each of the entities.\n\n\tThis Entry is obsolete.Instead of this entry use nsSvcGroup.serviceEntry.')
pserId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pserId.setStatus('obsolete')
if mibBuilder.loadTexts: pserId.setDescription('The distinguishing Id for each Physical Service inside\n         a NetScaler.\n\n\tThis object is obsolete.')
pserIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pserIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: pserIpAddress.setDescription('The IP address in the Physical Service.\n\n\tThis object is obsolete.It can be measured through serviceTable.svcIpAddress.')
pserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pserPort.setStatus('obsolete')
if mibBuilder.loadTexts: pserPort.setDescription('The port in the Physical Service.\n\n\tThis object is obsolete.It can be measured through serviceTable.svcPort.')
psProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("http", 0), ("ftp", 1), ("tcp", 2), ("udp", 3), ("sslBridge", 4), ("monitor", 5), ("monitorUdp", 6), ("nntp", 7), ("httpserver", 8), ("httpclient", 9), ("rpcserver", 10), ("rpcclient", 11), ("ssf", 12), ("nat", 13), ("any", 14), ("ssl", 15), ("dns", 16), ("adns", 17), ("snmp", 18), ("ha", 19), ("monitorPing", 20), ("serviceUnknown", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psProtocolType.setStatus('obsolete')
if mibBuilder.loadTexts: psProtocolType.setDescription('The protocol type in the Physical Service.\n\n\tThis object is obsolete.It can be measured through serviceTable.svcServiceType.')
psName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psName.setStatus('obsolete')
if mibBuilder.loadTexts: psName.setDescription('The name of the Physical Service.\n\n\tThis object is obsolete.It can be measured through serviceTable.svcServiceName.')
psState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psState.setStatus('obsolete')
if mibBuilder.loadTexts: psState.setDescription('The state of the Physical Service.\n\n\t\tThis object is obsolete.It can be measured through serviceTable.svcState.')
weight = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: weight.setStatus('obsolete')
if mibBuilder.loadTexts: weight.setDescription('The weight assigned to the Physical Service.\n\n\tThis object is obsolete.It can be measured through vserverServiceTable.serviceWeight.')
psVsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVsIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: psVsIpAddress.setDescription('The IP address in the Virtual Service to which this\n         physical service is bound.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrIpAddress.')
psVsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVsPort.setStatus('obsolete')
if mibBuilder.loadTexts: psVsPort.setDescription('The port in the Virtual Service.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrPort.')
sureConnect = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 4))
scStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1))
scperServiceStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1), )
if mibBuilder.loadTexts: scperServiceStatisticsTable.setStatus('obsolete')
if mibBuilder.loadTexts: scperServiceStatisticsTable.setDescription('The Internet On Hold Statistics for each of the entities.\n\n\tThis Table is obsolete.')
scperServiceStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "devno"))
if mibBuilder.loadTexts: scperServiceStatisticsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: scperServiceStatisticsEntry.setDescription('The Internet On Hold Statistics for each of the entities.\n\n\tThis Entry is obsolete.')
devno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devno.setStatus('obsolete')
if mibBuilder.loadTexts: devno.setDescription('The distinguishing Id for each physical Service inside\n         a NetScaler.\n\n\tThis object is obsolete.')
phyIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: phyIpAddress.setDescription('The IP address in the Physical Service.\n\n\tThis object is obsolete.It can be measured through serviceScpolicyTable.svcscpolicyDestIpAddress or vserverScpolicyTable.svcscpolicyDestIpAddress.')
phyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyPort.setStatus('obsolete')
if mibBuilder.loadTexts: phyPort.setDescription('The port in the Physical Service.\n\n\tThis object is obsolete.It can be measured through serviceScpolicyTable.svcscpolicyDestIpPort or vserverScpolicyTable.svcscpolicyDestIpPort.')
scProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("http", 0), ("ftp", 1), ("tcp", 2), ("udp", 3), ("sslBridge", 4), ("monitor", 5), ("monitorUdp", 6), ("nntp", 7), ("httpserver", 8), ("httpclient", 9), ("rpcserver", 10), ("rpcclient", 11), ("ssf", 12), ("nat", 13), ("any", 14), ("ssl", 15), ("dns", 16), ("adns", 17), ("snmp", 18), ("ha", 19), ("monitorPing", 20), ("serviceUnknown", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scProtocolType.setStatus('obsolete')
if mibBuilder.loadTexts: scProtocolType.setDescription('The protocol type in the Physical Service.\n\n\tThis object is obsolete.')
currentDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDelay.setStatus('obsolete')
if mibBuilder.loadTexts: currentDelay.setDescription('The current Delay on the physical Service.\n\n\tThis object is obsolete.')
avgTxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgTxTime.setStatus('obsolete')
if mibBuilder.loadTexts: avgTxTime.setDescription('The average transaction time.\n\n\tThis object is obsolete.It can be measured through serviceTable.svcAvgSvrTTFB.')
surgeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: surgeCount.setStatus('obsolete')
if mibBuilder.loadTexts: surgeCount.setDescription('The count of number of times the surge occurred.\n\n\tThis object is obsolete.It can be measured through serviceTable.svcSurgeCount.')
iohCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iohCount.setStatus('obsolete')
if mibBuilder.loadTexts: iohCount.setDescription('The number of client requests, after having put on hold\n         couldnt still access the physical server.\n\n\tThis object is obsolete.')
scperPolicyStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2), )
if mibBuilder.loadTexts: scperPolicyStatisticsTable.setStatus('obsolete')
if mibBuilder.loadTexts: scperPolicyStatisticsTable.setDescription('The Internet On Hold Statistics for each of the entities.\n\n\tThis Table is obsolete.Instead of this table use nsSvcGroup.serviceScpolicyTable or nsVserverGroup.vserverScpolicyTable.')
scperPolicyStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "policydevno"))
if mibBuilder.loadTexts: scperPolicyStatisticsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: scperPolicyStatisticsEntry.setDescription('The Internet On Hold Statistics for each of the entities.\n\n\tThis Entry is obsolete.Instead of this entry use nsSvcGroup.serviceScpolicyEntry or nsVserverGroup.vserverScpolicyEntry.')
policydevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policydevno.setStatus('obsolete')
if mibBuilder.loadTexts: policydevno.setDescription('The distinguishing Id for each physical Service inside\n         a NetScaler.\n\n\tThis object is obsolete.')
primaryserviceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryserviceIp.setStatus('obsolete')
if mibBuilder.loadTexts: primaryserviceIp.setDescription(' ip address of primary service.\n\n\tThis object is obsolete.It can be measured through serviceScpolicyTable.svcscpolicyPrimaryIPAddress.')
primaryserviceport = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryserviceport.setStatus('obsolete')
if mibBuilder.loadTexts: primaryserviceport.setDescription(' port number of primary service.\n\t\n\tThis object is obsolete.It can be measured through serviceScpolicyTable.svcscpolicyPrimaryPort or vserverScpolicyTable.vsvrscpolicyPrimaryPort.')
destserviceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destserviceIp.setStatus('obsolete')
if mibBuilder.loadTexts: destserviceIp.setDescription(' ip address of destination physical service.\n\n\tThis object is obsolete.It can be measured through serviceScpolicyTable.svcscpolicyDesIpAddress or vserverScpolicyTable.vsvrscpolicyDesIpAddress.')
destserviceport = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destserviceport.setStatus('obsolete')
if mibBuilder.loadTexts: destserviceport.setDescription(' port number of destination physical service.\n\n\tThis object is obsolete.It can be measured through serviceScpolicyTable.svcscpolicyDestPort or vserverScpolicyTable.vsvrscpolicyDestPort.')
transactiontime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactiontime.setStatus('obsolete')
if mibBuilder.loadTexts: transactiontime.setDescription(' transaction time.\n\n\tThis object is obsolete.It can be measured through serviceScpolicyTable.svcscpolicyAvgServerTransactionTime or vserverScpolicyTable.vsvrscpolicyAvgServerTransactionTime.')
totaltransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totaltransaction.setStatus('obsolete')
if mibBuilder.loadTexts: totaltransaction.setDescription(' total number of transactions .\n\n\tThis object is obsolete.It can be measured through serviceScpolicyTable.svcscpolicyTotClientTransaction or vserverScpolicyTable.vsvrscpolicyTotClientTransaction.')
totalopenconnection = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalopenconnection.setStatus('obsolete')
if mibBuilder.loadTexts: totalopenconnection.setDescription(' total number of open connections for this policy .\n\n\tThis object is obsolete.It can be measured through serviceScpolicyTable.svcscpolicyTotOpenConn or vserverScpolicyTable.vsvrscpolicyTotOpenConn.')
scGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3))
scUrlHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scUrlHits.setStatus('obsolete')
if mibBuilder.loadTexts: scUrlHits.setDescription('this Counter gives the  number of times we matched an\n         incoming request with a Configured sureconnect  policy .\n\n\tThis object is obsolete.It can be measured through scPolicyStatistics.scPolicyUrlHits.')
popUps = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popUps.setStatus('obsolete')
if mibBuilder.loadTexts: popUps.setDescription('this Counter gives the number of times  we served the\n\t\tin-memory java script which throws up the pop up window.\n\n\t\tThis object is obsolete.It can be measured through scPolicyStatistics.scPopUps.')
altContUrls = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: altContUrls.setStatus('obsolete')
if mibBuilder.loadTexts: altContUrls.setDescription('this Counter gives the total  number of requests which\n\t\tcame with the onhold cookie. So, this gives the number requests\n \t\twhich  are required to load the alternate content in the pop up\n \t\twindow.\n\n\t\tThis object is obsolete.It can be measured through scPolicyStatistics.scAltContUrls.')
sessReqs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessReqs.setStatus('obsolete')
if mibBuilder.loadTexts: sessReqs.setDescription('this Counter gives the number requests which came in a\n\t\tSureConnect session. \n\n\t\tThis object is obsolete.It can be measured through scPolicyStatistics.scSessionReqs.')
postReqs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postReqs.setStatus('obsolete')
if mibBuilder.loadTexts: postReqs.setDescription('this Counter gives the number of times a post request\n\t\ttriggered  SureConnect.\n\n\t\tThis object is obsolete.It can be measured through scPolicyStatistics.scPostReqs.')
thresholdFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdFail.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdFail.setDescription(' this Counter gives the number of times we did not serve the\n\t\tin-memory response because  the  thresholds conditions had failed.\n\n\t\tThis object is obsolete.It can be measured through scPolicyStatistics.scThresholdFail. ')
faultyCookies = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultyCookies.setStatus('obsolete')
if mibBuilder.loadTexts: faultyCookies.setDescription('this Counter gives the number of times we encountered\n\t\tcorrupted SureConnect Cookies.\n\n\tThis object is obsolete.It can be measured through scPolicyStatistics.scFaultyCookies.')
unSupBrow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unSupBrow.setStatus('obsolete')
if mibBuilder.loadTexts: unSupBrow.setDescription('this Counter gives the number of times requests came from\n\t\tunsupported browsers. For a list of  browsers supported by\n\t\tSureConnect, please check the Functional Spec.\n\n\tThis object is obsolete.It can be measured through scPolicyStatistics.scUnSupBrow.')
resetStats = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 4, 1, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resetStats.setStatus('obsolete')
if mibBuilder.loadTexts: resetStats.setDescription('This gives the number of times delay stats were reset.\n\t\tDelay stats are reset when there is no traffic to the configured\n\t\turl for more than 10 minutes.\n\n\tThis object is obsolete.It can be measured through scPolicyStatistics.scResetStats.')
scConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2))
scPolicyconfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1), )
if mibBuilder.loadTexts: scPolicyconfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: scPolicyconfigTable.setDescription('The Internet On Hold Statistics for each of the entities.\n\n\tThis Table is obsolete.Instead of this table use nsScPolicyGroup.scPolicyConfigTable.\t')
scPolicyconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "policyIndex"))
if mibBuilder.loadTexts: scPolicyconfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: scPolicyconfigEntry.setDescription('The Internet On Hold Statistics for each of the entities.\n\n\tThis Entry is obsolete.Instead of this entry use nsScPolicyGroup.scPolicyConfigEntry.')
policyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyIndex.setStatus('obsolete')
if mibBuilder.loadTexts: policyIndex.setDescription('The distinguishing Id for each On Hold Policy inside\n         a NetScaler.\n\n\tThis object is obsolete.')
policyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyName.setStatus('obsolete')
if mibBuilder.loadTexts: policyName.setDescription('The name of the Physical Service.\n\n\tThis object is obsolete.It can be measured through scPolicyConfigTable.scPolicyName.')
scPolicyUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPolicyUrl.setStatus('obsolete')
if mibBuilder.loadTexts: scPolicyUrl.setDescription('The URL in the IOH Policy.\n\t\t\n\tThis object is obsolete.It can be measured through scPolicyConfigTable.scPolUrl.')
delayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("notconfigured", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: delayThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: delayThreshold.setDescription('The delay threshold.\n\n\tThis object is obsolete.It can be measured through scPolicyConfigTable.scDelayThreshold.')
maxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("notconfigured", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxConnections.setStatus('obsolete')
if mibBuilder.loadTexts: maxConnections.setDescription('The max connections.\n\n\tThis object is obsolete.It can be measured through scPolicyConfigTable.scMaxConnections.')
actionType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("ns", 0), ("acs", 1), ("noAction", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionType.setStatus('obsolete')
if mibBuilder.loadTexts: actionType.setDescription('The type of action that NetScaler takes when initiating on-hold.\n\n\tThis object is obsolete.It can be measured through scPolicyConfigTable.scActionType.')
alternatecontentServicename = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alternatecontentServicename.setStatus('obsolete')
if mibBuilder.loadTexts: alternatecontentServicename.setDescription('The alternate service name for the content.\n\n\tThis object is obsolete.It can be measured through scPolicyConfigTable.scAlternateContentServiceName. ')
ruleName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleName.setStatus('obsolete')
if mibBuilder.loadTexts: ruleName.setDescription(' Rule Name .\n\n\tThis object is obsolete.It can be measured through scPolicyConfigTable.scRuleName.')
alternatecontentPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 4, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alternatecontentPath.setStatus('obsolete')
if mibBuilder.loadTexts: alternatecontentPath.setDescription('The alternate path for the content.\n\n\tThis object is obsolete.It can be measured through scPolicyConfigTable.scAlternateContentPath. ')
contentSwitching = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 5))
cswStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1), )
if mibBuilder.loadTexts: cswStatisticsTable.setStatus('obsolete')
if mibBuilder.loadTexts: cswStatisticsTable.setDescription('The Content Switching Statistics for each of the entities.\n\n\tThis Table is obsolete.Instead of this table use nsVserverGroup.vserverTable.')
cswStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cswIndex"))
if mibBuilder.loadTexts: cswStatisticsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cswStatisticsEntry.setDescription('The Content Switching Statistics for each of the entities.\n\n\tThis Entry is obsolete.Instead of this entry use nsVserverGroup.vserverEntry.')
cswIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cswIndex.setDescription('The distinguishing Id for each virtual Service inside\n         a NetScaler.\n\n\tThis object is obsolete.')
cswVsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswVsIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: cswVsIpAddress.setDescription('The IP address in the Virtual Service.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrIpAddress.')
cswVsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswVsPort.setStatus('obsolete')
if mibBuilder.loadTexts: cswVsPort.setDescription('The port in the Virtual Service.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrPort.')
cswProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("http", 0), ("ftp", 1), ("tcp", 2), ("udp", 3), ("sslBridge", 4), ("monitor", 5), ("monitorUdp", 6), ("nntp", 7), ("httpserver", 8), ("httpclient", 9), ("rpcserver", 10), ("rpcclient", 11), ("ssf", 12), ("nat", 13), ("any", 14), ("ssl", 15), ("dns", 16), ("adns", 17), ("snmp", 18), ("ha", 19), ("monitorPing", 20), ("serviceUnknown", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswProtocolType.setStatus('obsolete')
if mibBuilder.loadTexts: cswProtocolType.setDescription('The protocol type of the Virtual Server.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrType.')
virServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virServiceName.setStatus('obsolete')
if mibBuilder.loadTexts: virServiceName.setDescription('The name of the CSW Virtual server.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrName. ')
vsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsHits.setStatus('obsolete')
if mibBuilder.loadTexts: vsHits.setDescription('The total hits on all the policies bound to this virtual server.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrTotalRequests.')
vsMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsMiss.setStatus('obsolete')
if mibBuilder.loadTexts: vsMiss.setDescription('The total Miss on all the policies bound to this virtual server.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrTotalMiss.')
cswConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2), )
if mibBuilder.loadTexts: cswConfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: cswConfigTable.setDescription('The CSW configuration information for each of the entities.\n\n\tThis Table is obsolete.Instead of this table use nsVserverGroup.vserverCspolicyTable.')
cswConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cswVsId"), (0, "NS-ROOT-MIB", "policyId"))
if mibBuilder.loadTexts: cswConfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cswConfigEntry.setDescription('The CSW configuration information for each of the entities.\n\n\tThis Entry is obsolete.Instead of this entry use nsVserverGroup.vserverCspolicyEntry.')
cswVsId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswVsId.setStatus('obsolete')
if mibBuilder.loadTexts: cswVsId.setDescription('The distinguishing Id for each CSW Vserver inside\n         a NetScaler.\n\n\tThis object is obsolete.')
policyId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyId.setStatus('obsolete')
if mibBuilder.loadTexts: policyId.setDescription('The distinguishing Id for each CSW Policy inside\n         a NetScaler.\n\n\tThis object is obsolete.')
vServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vServerName.setStatus('obsolete')
if mibBuilder.loadTexts: vServerName.setDescription('The name of the CSW Virtual Server.\n\n\tThis object is obsolete.')
policyname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyname.setStatus('obsolete')
if mibBuilder.loadTexts: policyname.setDescription('The name of the policy binding to a Virtual Server.\n\n\tThis object is obsolete.It can be measured through vserverCspolicyTable.cspolicyName.')
policyvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyvalue.setStatus('obsolete')
if mibBuilder.loadTexts: policyvalue.setDescription('The value of the policy.\n\n\t This object is obsolete.')
policyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyHits.setStatus('obsolete')
if mibBuilder.loadTexts: policyHits.setDescription('The hits on the Policy in the Virtual Service.\n\n\tThis object is obsolete.It can be measured through vserverCspolicyTable.cspolicyHits.')
domain = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 5, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domain.setStatus('obsolete')
if mibBuilder.loadTexts: domain.setDescription('The domain hosted by the CSW vserver.\n\n\tThis object is obsolete.')
cacheRedirection = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 6))
crStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1), )
if mibBuilder.loadTexts: crStatisticsTable.setStatus('obsolete')
if mibBuilder.loadTexts: crStatisticsTable.setDescription('The Cache Redirection Statistics for each of the entities.\n\n\tThis Table is obsolete.Instead of this table use nsVserverGroup.vserverTable.')
crStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "crVsIndex"))
if mibBuilder.loadTexts: crStatisticsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: crStatisticsEntry.setDescription('The Cache Redirection Statistics for each of the entities.\n\n\tThis Entry is obsolete.Instead of this entry use nsVserverGroup.vserverEntry.')
crVsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crVsIndex.setStatus('obsolete')
if mibBuilder.loadTexts: crVsIndex.setDescription('The distinguishing Id for each virtual Service inside\n         a NetScaler.\n\n\tThis object is obsolete.')
crVsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crVsIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: crVsIpAddress.setDescription('The IP address in the Virtual Service.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrIpAddress.')
crVsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crVsPort.setStatus('obsolete')
if mibBuilder.loadTexts: crVsPort.setDescription('The port in the Virtual Service.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrPort.')
crProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("http", 0), ("ftp", 1), ("tcp", 2), ("udp", 3), ("sslBridge", 4), ("monitor", 5), ("monitorUdp", 6), ("nntp", 7), ("httpserver", 8), ("httpclient", 9), ("rpcserver", 10), ("rpcclient", 11), ("ssf", 12), ("nat", 13), ("any", 14), ("ssl", 15), ("dns", 16), ("adns", 17), ("snmp", 18), ("ha", 19), ("monitorPing", 20), ("serviceUnknown", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crProtocolType.setStatus('obsolete')
if mibBuilder.loadTexts: crProtocolType.setDescription('The protocol type in the Physical Service.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrType.')
crVirServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crVirServiceName.setStatus('obsolete')
if mibBuilder.loadTexts: crVirServiceName.setDescription('The name of the CSW Virtual server.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrName. ')
crVsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crVsHits.setStatus('obsolete')
if mibBuilder.loadTexts: crVsHits.setDescription('The total hits on the policies.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrTotalRequests.')
crVsMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crVsMiss.setStatus('obsolete')
if mibBuilder.loadTexts: crVsMiss.setDescription('The total Miss on the policy.\n\n\tThis object is obsolete.It can be measured through vserverTable.vsvrTotMiss.')
crConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2))
crPolBindConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 1), )
if mibBuilder.loadTexts: crPolBindConfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: crPolBindConfigTable.setDescription('The CR policy binding configuration information for each of the entry.\n\n\tThis Table is obsolete.Instead of this table use nsVserverGroup.vserverCrpolicyTable.')
crPolBindConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "bindId"))
if mibBuilder.loadTexts: crPolBindConfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: crPolBindConfigEntry.setDescription('The CR policy binding configuration information for each of the entry.\n\n\tThis Entry is obsolete.Instead of this entry use nsVserverGroup.vserverCrpolicyEntry.')
bindId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bindId.setStatus('obsolete')
if mibBuilder.loadTexts: bindId.setDescription('The unique binding Id for each CR Policy inside\n         a NetScaler.\n\n\tThis object is obsolete.')
crbVServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crbVServerName.setStatus('obsolete')
if mibBuilder.loadTexts: crbVServerName.setDescription('The name of the CR Virtual Server.\n\n\tThis object is obsolete.')
crbPolicyname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crbPolicyname.setStatus('obsolete')
if mibBuilder.loadTexts: crbPolicyname.setDescription('The name of the policy binding to a Virtual Server.\n\n\tThis object is obsolete.It can be measured through vserverCrpolicyTable.crpolicyName.')
crbPolicyvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crbPolicyvalue.setStatus('obsolete')
if mibBuilder.loadTexts: crbPolicyvalue.setDescription('The value of the policy.\n\n\tThis object is obsolete.')
crbPolicyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crbPolicyHits.setStatus('obsolete')
if mibBuilder.loadTexts: crbPolicyHits.setDescription('The hits on the Policy in the Virtual Service.\n\n\tThis object is obsolete.It can be measured through vserverCrpolicyTable.crpolicyHits.')
crMapBindConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 2), )
if mibBuilder.loadTexts: crMapBindConfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: crMapBindConfigTable.setDescription('The CR map policy binding configuration information for each of the entry.\n\n\tThis Table is obsolete.')
crMapBindConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "mapbindId"))
if mibBuilder.loadTexts: crMapBindConfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: crMapBindConfigEntry.setDescription('The CR map policy binding configuration information for each of the entry.\n\n\tThis Entry is obsolete.')
mapbindId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mapbindId.setStatus('obsolete')
if mibBuilder.loadTexts: mapbindId.setDescription('The unique binding Id for each CR Map Policy inside\n         a NetScaler.\n\n\tThis object is obsolete.')
mapName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mapName.setStatus('obsolete')
if mibBuilder.loadTexts: mapName.setDescription('The name of the map policy bound to CR Virtual Server.\n\n\tThis object is obsolete.')
mapHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mapHits.setStatus('obsolete')
if mibBuilder.loadTexts: mapHits.setDescription('The hits on the Map Policy in the Virtual Service.\n\n\tThis object is obsolete.')
vserverName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverName.setStatus('obsolete')
if mibBuilder.loadTexts: vserverName.setDescription('The name of the CR vserver.\n\n\tThis object is obsolete.')
crMapConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3), )
if mibBuilder.loadTexts: crMapConfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: crMapConfigTable.setDescription('The CR map configuration information for each of the entry.\n\n\tThis Table is obsolete.Instead of this table use nsSysGroup.crConfigGroup.crPolicyMapConfigTable.')
crMapConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3, 1), ).setIndexNames((0, "NS-ROOT-MIB", "crmIndex"))
if mibBuilder.loadTexts: crMapConfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: crMapConfigEntry.setDescription('The CR map configuration information for each of the entry.\n\n\tThis Entry is obsolete.Instead of this entry use nsSysGroup.crConfigGroup.crPolicyMapConfigEntry.')
crmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmIndex.setStatus('obsolete')
if mibBuilder.loadTexts: crmIndex.setDescription('The unique Id for each CR Map inside\n         a NetScaler.\n\n\tThis object is obsolete.')
crmMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmMapName.setStatus('obsolete')
if mibBuilder.loadTexts: crmMapName.setDescription('The name of the map policy.\n\n\tThis object is obsolete.It can be measured through crPolicyMapConfigTable.crMapName.')
srcDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srcDomain.setStatus('obsolete')
if mibBuilder.loadTexts: srcDomain.setDescription('The name of the source domain hosted by the map.\n\n\tThis object is obsolete.It can be measured through crPolicyMapConfigTable.crMapSrcName.')
dstDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstDomain.setStatus('obsolete')
if mibBuilder.loadTexts: dstDomain.setDescription('The name of the destination domain after the mapping is applied.\n\n\tThis object is obsolete.It can be measured through crPolicyMapConfigTable.crMapDstName.')
srcUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srcUrl.setStatus('obsolete')
if mibBuilder.loadTexts: srcUrl.setDescription('The Url to be modified under the given source domain.\n\n\tThis object is obsolete.It can be measured through crPolicyMapConfigTable.crMapSrcUrl.')
dstUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 6, 2, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstUrl.setStatus('obsolete')
if mibBuilder.loadTexts: dstUrl.setDescription('The Url after mapping.\n\n\tThis object is obsolete.It can be measured through crPolicyMapConfigTable.crMapDstUrl.')
compression = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 7))
compressionStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1))
cmpTotRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpTotRequests.setStatus('obsolete')
if mibBuilder.loadTexts: cmpTotRequests.setDescription(' Number of compression requests done')
cmpTotTxbytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpTotTxbytes.setStatus('obsolete')
if mibBuilder.loadTexts: cmpTotTxbytes.setDescription(' Number of compressed bytes transmitted')
cmpTotRxbytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpTotRxbytes.setStatus('obsolete')
if mibBuilder.loadTexts: cmpTotRxbytes.setDescription(' Number of compressible bytes received')
cmpTotTxpkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpTotTxpkts.setStatus('obsolete')
if mibBuilder.loadTexts: cmpTotTxpkts.setDescription(' Number of compressed packets transmitted')
cmpTotRxpkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpTotRxpkts.setStatus('obsolete')
if mibBuilder.loadTexts: cmpTotRxpkts.setDescription(' Number of compressible packets received')
compressionRatio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressionRatio.setStatus('obsolete')
if mibBuilder.loadTexts: compressionRatio.setDescription(' ratio of compressible data received vs compressed data transmitted')
totalDataCompressionRatio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 7, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalDataCompressionRatio.setStatus('obsolete')
if mibBuilder.loadTexts: totalDataCompressionRatio.setDescription(' ratio of total data received to total data transmitted')
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 8))
vlanstatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1), )
if mibBuilder.loadTexts: vlanstatsTable.setStatus('obsolete')
if mibBuilder.loadTexts: vlanstatsTable.setDescription('The Vlan Statistics for each of the entities.')
vlanstatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vlansDevno"))
if mibBuilder.loadTexts: vlanstatsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: vlanstatsEntry.setDescription('The Vlan Statistics for each of the entities.')
vlansDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlansDevno.setStatus('obsolete')
if mibBuilder.loadTexts: vlansDevno.setDescription('The distinguishing Id for each vlan inside\n         netscaler')
totalrxpkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalrxpkts.setStatus('obsolete')
if mibBuilder.loadTexts: totalrxpkts.setDescription('Total Number of packets received in this vlan ')
totaltxpkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totaltxpkts.setStatus('obsolete')
if mibBuilder.loadTexts: totaltxpkts.setDescription('Total Number of packets transmitted in this vlan')
totalrxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalrxbytes.setStatus('obsolete')
if mibBuilder.loadTexts: totalrxbytes.setDescription('Total Number of bytes received in this vlan ')
totaltxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totaltxbytes.setStatus('obsolete')
if mibBuilder.loadTexts: totaltxbytes.setDescription('Total Number of bytes transmitted in this vlan')
totaldroppedpkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totaldroppedpkts.setStatus('obsolete')
if mibBuilder.loadTexts: totaldroppedpkts.setDescription('Total Number of dropped packets in this vlan')
totalbroadcastpackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalbroadcastpackets.setStatus('obsolete')
if mibBuilder.loadTexts: totalbroadcastpackets.setDescription('Total Number of broadcasted packets in this vlan')
vlanconfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2), )
if mibBuilder.loadTexts: vlanconfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: vlanconfigTable.setDescription('The Vlan config Statistics for each of the entities.\n\n\tThis Table is obsolete.Instead of this table use nsSysGroup.vlanTable.')
vlanconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vlancDevno"))
if mibBuilder.loadTexts: vlanconfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: vlanconfigEntry.setDescription('The Vlan config Statistics for each of the entities.\n\n\tThis Entry is obsolete.Instead of this entry use nsSysGroup.vlanEntry.')
vlancDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlancDevno.setStatus('obsolete')
if mibBuilder.loadTexts: vlancDevno.setDescription('The distinguishing Id for each vlan inside\n         netscaler.\n\n\tThis object is obsolete.')
tagId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tagId.setStatus('obsolete')
if mibBuilder.loadTexts: tagId.setDescription('The unique tag Id for each vlan inside\n         NetScaler.\n\n\tThis object is obsolete.It can be measured through vlanTable.vlanId.')
vlancInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlancInterfaces.setStatus('obsolete')
if mibBuilder.loadTexts: vlancInterfaces.setDescription('The port number associated to each vlan inside\n         netscaler.\n\t\n\tThis object is obsolete.It can be measured through vlanTable.vlanMemberInterfaces.')
ipaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipaddress.setStatus('obsolete')
if mibBuilder.loadTexts: ipaddress.setDescription('The ipaddress for each vlan inside\n         netscaler.\n\n\tThis object is obsolete.It can be measured through vlanTable.vlanBindIpAddress.')
netmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmask.setStatus('obsolete')
if mibBuilder.loadTexts: netmask.setDescription('The netmask corresponding to ipaddress for each vlan inside\n         netscaler.\n\n\tThis object is obsolete.It can be measured through vlanTable.vlanBindIpNetmask.')
tagging = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 8, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tagging.setStatus('obsolete')
if mibBuilder.loadTexts: tagging.setDescription('Tagged member interfaces of this vlan.\n\n\tThis object is obsolete.')
domainNameService = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 9))
dnsServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1))
dnsServerStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1))
totQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totQueries.setStatus('obsolete')
if mibBuilder.loadTexts: totQueries.setDescription('this Counter gives the  number of times NetScaler as a \n         name server received a query for any kind of DNS Record.\n\n\tThis object is obsolete.It can be measured through nsDomainServiceName.dnsTotQueries.  ')
totAnswers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totAnswers.setStatus('obsolete')
if mibBuilder.loadTexts: totAnswers.setDescription('this Counter gives the  number of times NetScaler as a \n         name server received a query for a name server Record.\n\n\tThis object is obsolete.It can be measured through nsDomainServiceName.dnsTotAnswers. ')
totAuthAns = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totAuthAns.setStatus('obsolete')
if mibBuilder.loadTexts: totAuthAns.setDescription('Number of queries which were authoritatively answered.\n\n\tThis object is obsolete.It can be measured through nsDomainServiceName.dnsTotAuthAns.')
totAuthNoNames = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totAuthNoNames.setStatus('obsolete')
if mibBuilder.loadTexts: totAuthNoNames.setDescription("Number of queries for which `authoritative no such name'\n         responses were made.\n\n\tThis object is obsolete.It can be measured through nsDomainServiceName.dnsTotAuthNoNames.")
totAuthNoDataResps = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totAuthNoDataResps.setStatus('obsolete')
if mibBuilder.loadTexts: totAuthNoDataResps.setDescription("Number of queries for which `authoritative no such data'\n         (empty answer) responses were made.\n\n\tThis object is obsolete.It can be measured through nsDomainServiceName.dnsTotAuthNoDataResps.")
totNonAuthDatas = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totNonAuthDatas.setStatus('obsolete')
if mibBuilder.loadTexts: totNonAuthDatas.setDescription('Number of queries which were non-authoritatively\n         answered (cached data).\n\n\t This object is obsolete.It can be measured through nsDomainServiceName.dnsTotStrayAnswer.')
totNonAuthNoDatas = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totNonAuthNoDatas.setStatus('obsolete')
if mibBuilder.loadTexts: totNonAuthNoDatas.setDescription('Number of queries which were non-authoritatively\n         answered with no data (empty answer).\n\n\tThis object is obsolete.It can be measured through nsDomainServiceName.dnsTotNonAuthNoDatas.')
totReqRefusals = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totReqRefusals.setStatus('obsolete')
if mibBuilder.loadTexts: totReqRefusals.setDescription('Number of DNS requests refused by the server.\n\n\tThis object is obsolete.It can be measured through nsDomainServiceName.dnsTotReqRefusals.')
totReqUnparses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totReqUnparses.setStatus('obsolete')
if mibBuilder.loadTexts: totReqUnparses.setDescription('Number of requests received which were unparseable.\n\n\tThis object is obsolete.')
totOtherErrors = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totOtherErrors.setStatus('obsolete')
if mibBuilder.loadTexts: totOtherErrors.setDescription('Number of requests which were aborted for other (local)\n         server errors.\n\n\tThis object is obsolete.It can be measured through nsDomainServiceName.dnsTotOtherErrors.')
aRecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aRecQueries.setStatus('obsolete')
if mibBuilder.loadTexts: aRecQueries.setDescription('this Counter gives the  number of times NetScaler as a \n         name server received a query for an Address Record.\n\n\tThis object is obsolete.It can be measured through nsDomainServiceName.dnsTotArecQueries. ')
nsRecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsRecQueries.setStatus('obsolete')
if mibBuilder.loadTexts: nsRecQueries.setDescription('this Counter gives the  number of times NetScaler as a \n         name server received a query for a name server Record. \n\n\tThis object is obsolete.It can be measured through nsDomainServiceName.dnsTotNSrecQueries.')
mxRecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mxRecQueries.setStatus('obsolete')
if mibBuilder.loadTexts: mxRecQueries.setDescription('this Counter gives the  number of times NetScaler as a \n         name server received a query for an mail exchanger Record. \n\n\tThis object is obsolete.It can be measured through nsDomainServiceName.dnsTotMXrecQueries.')
soaRecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: soaRecQueries.setStatus('obsolete')
if mibBuilder.loadTexts: soaRecQueries.setDescription('this Counter gives the  number of times NetScaler as a \n         name server received a query for an SOA Record. \n\n\tThis object is obsolete.It can be measured through nsDomainServiceName.dnsTotSOArecQueries.')
cnameRecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnameRecQueries.setStatus('obsolete')
if mibBuilder.loadTexts: cnameRecQueries.setDescription('this Counter gives the  number of times NetScaler as a \n         name server received a query for an CNAME Record.\n\n\tThis object is obsolete.It can be measured through nsDomainServiceName.dnsTotCNAMErecQueries. ')
totUnsupportedQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totUnsupportedQueries.setStatus('obsolete')
if mibBuilder.loadTexts: totUnsupportedQueries.setDescription('this Counter gives the  number of times NetScaler as a \n         name server received a query for an unsupported Record type. \n\n\tThis object is obsolete.It can be measured through nsDomainServiceName.dnsTotUnsupportedQueries.')
dnsServerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 2))
dnsServerRecursion = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("available", 1), ("restricted", 2), ("unavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsServerRecursion.setStatus('obsolete')
if mibBuilder.loadTexts: dnsServerRecursion.setDescription('This represents the recursion services offered by this\n         name server.  The values that can be read are:\n         \n         available(1) - performs recursion on requests from\n         clients.\n         \n         restricted(2) - recursion is performed on requests only\n         from certain clients, for example; clients on an access\n         control list.\n         \n         unavailable(3) - recursion is not available.\n\n\tThis object is obsolete.')
dnsServerZoneTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 2, 2), )
if mibBuilder.loadTexts: dnsServerZoneTable.setStatus('obsolete')
if mibBuilder.loadTexts: dnsServerZoneTable.setDescription('The table that has the configuration information \n         for each zone for which NetScaler is authoritative.\n\n\tThis Table is obsolete.')
dnsServerZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "zoneIndex"))
if mibBuilder.loadTexts: dnsServerZoneEntry.setStatus('obsolete')
if mibBuilder.loadTexts: dnsServerZoneEntry.setDescription('The Zone information for each domain as an entry.\n\n\tThis Entry is obsolete.')
zoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneIndex.setStatus('obsolete')
if mibBuilder.loadTexts: zoneIndex.setDescription('The distinguishing Id for each zone on NetScaler.\n\n\tThis object is obsolete.')
zoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 9, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneName.setStatus('obsolete')
if mibBuilder.loadTexts: zoneName.setDescription('The domain name.\n\n\tThis object is obsolete.')
globalServerLB = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 10))
gslbStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 10, 1))
gslbDomainStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 10, 1, 1), )
if mibBuilder.loadTexts: gslbDomainStatsTable.setStatus('obsolete')
if mibBuilder.loadTexts: gslbDomainStatsTable.setDescription('The table that has statistics for each gslb domain \n         on netscaler.OBSOLETE')
gslbDomainStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 10, 1, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "gslbDomainIndex"))
if mibBuilder.loadTexts: gslbDomainStatsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: gslbDomainStatsEntry.setDescription('The gslb statistics table entry. OBSOLETE')
gslbDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbDomainIndex.setStatus('obsolete')
if mibBuilder.loadTexts: gslbDomainIndex.setDescription('The distinguishing Id for each gslb Domain on NetScaler. OBSOLETE')
domainname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 10, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainname.setStatus('obsolete')
if mibBuilder.loadTexts: domainname.setDescription('The domain name that has gslb feature enabled. OBSOLETE')
gslbDomainQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 10, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbDomainQueries.setStatus('obsolete')
if mibBuilder.loadTexts: gslbDomainQueries.setDescription('number of times a dns query against this gslb domain\n         was received by the netscaler. OBSOLETE')
gslbConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 10, 2))
gslbDomainConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 10, 2, 1), )
if mibBuilder.loadTexts: gslbDomainConfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: gslbDomainConfigTable.setDescription('The table that has configuration for each gslb domain \n         on netscaler.OBSOLETE')
gslbDomainConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 10, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "gslbcDomainIndex"))
if mibBuilder.loadTexts: gslbDomainConfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: gslbDomainConfigEntry.setDescription('The gslb statistics table entry. OBSOLETE')
gslbcDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbcDomainIndex.setStatus('obsolete')
if mibBuilder.loadTexts: gslbcDomainIndex.setDescription('The distinguishing Id for each gslb Domain on NetScaler.OBSOLETE')
gslbcDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 10, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbcDomainName.setStatus('obsolete')
if mibBuilder.loadTexts: gslbcDomainName.setDescription('The domain name that has gslb feature enabled.OBSOLETE')
gslbVipName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 10, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbVipName.setStatus('obsolete')
if mibBuilder.loadTexts: gslbVipName.setDescription('The LB VIP thats bound to the gslb domain name. All the \n         IP addresses for the gslb domain are bound to this VIP.\n         The characteristics for this VIP should be found in the \n         LoadBalancing Group Mib. OBSOLETE')
reOrderInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 10, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reOrderInterval.setStatus('obsolete')
if mibBuilder.loadTexts: reOrderInterval.setDescription('The interval in which metrics are exchanged among the \n         NetScalers and a decision made about which is the best\n         IP address at that point for the gslb domain name. OBSOLETE')
pq = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 11))
pqstatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1))
pqStatsperLBVipTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 1), )
if mibBuilder.loadTexts: pqStatsperLBVipTable.setStatus('obsolete')
if mibBuilder.loadTexts: pqStatsperLBVipTable.setDescription('The table that has statistics for each LB Vip \n         on netscaler.\n\n\tThis Table is obsolete.')
pqStatsperLBVipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "pqDevno"))
if mibBuilder.loadTexts: pqStatsperLBVipEntry.setStatus('obsolete')
if mibBuilder.loadTexts: pqStatsperLBVipEntry.setDescription('The PQ statistics per Load Balancing VIP entry.\n\n\tThis Entry is obsolete.')
pqDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqDevno.setStatus('obsolete')
if mibBuilder.loadTexts: pqDevno.setDescription('The distinguishing id for the LoadBalancing Vserver.\n\n\tThis object is obsolete.')
totclienttransactiontime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totclienttransactiontime.setStatus('obsolete')
if mibBuilder.loadTexts: totclienttransactiontime.setDescription('Total client transaction time.\n\n\tThis object is obsolete. ')
totclienttransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totclienttransaction.setStatus('obsolete')
if mibBuilder.loadTexts: totclienttransaction.setDescription('Total number of client transaction.\n\n\tThis object is obsolete. ')
dropped = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dropped.setStatus('obsolete')
if mibBuilder.loadTexts: dropped.setDescription('Number of dropped transactions.\n\n\tThis object is obsolete. ')
qdepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qdepth.setStatus('obsolete')
if mibBuilder.loadTexts: qdepth.setDescription('Number of waiting clients .\n\n\tThis object is obsolete.')
pqStatsperpqpolicyandperLBVipTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2), )
if mibBuilder.loadTexts: pqStatsperpqpolicyandperLBVipTable.setStatus('obsolete')
if mibBuilder.loadTexts: pqStatsperpqpolicyandperLBVipTable.setDescription('The table that has statistics for each LB Vip \n         on netscaler.\n\n\tThis Table is obsolete.Instead of this table use nsVserverGroup.vserverPqpolicyTable.')
pqStatsperpqpolicyandperLBVipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "pqvsdevno"), (0, "NS-ROOT-MIB", "pqpoldevno"))
if mibBuilder.loadTexts: pqStatsperpqpolicyandperLBVipEntry.setStatus('obsolete')
if mibBuilder.loadTexts: pqStatsperpqpolicyandperLBVipEntry.setDescription('The PQ statistics per Load Balancing VIP entry.\n\n\tThis Entry is obsolete.Instead of this entry use nsVserverGroup.vserverPqpolicyEntry.')
pqvsdevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqvsdevno.setStatus('obsolete')
if mibBuilder.loadTexts: pqvsdevno.setDescription('The distinguishing id for the LoadBalancing Vservice.\n\n\tThis object is obsolete.')
pqpoldevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpoldevno.setStatus('obsolete')
if mibBuilder.loadTexts: pqpoldevno.setDescription('The distinguishing id for the PQ policy.\n\n\tThis object is obsolete.')
pqtotclienttransactiontime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqtotclienttransactiontime.setStatus('obsolete')
if mibBuilder.loadTexts: pqtotclienttransactiontime.setDescription('Total client transaction time.\n\n\tThis object is obsolete.It can be measured through vserverPqpolicyTable.pqpolicyTotClientTransactionTime. ')
pqtotclienttransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqtotclienttransaction.setStatus('obsolete')
if mibBuilder.loadTexts: pqtotclienttransaction.setDescription('Total number of client transaction.\n\n\tThis object is obsolete.It can be measured through vserverPqpolicyTable.pqpolicyTotClientTransactions. ')
pqDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqDropped.setStatus('obsolete')
if mibBuilder.loadTexts: pqDropped.setDescription('Number of dropped transactions.\n\t\n\tThis object is obsolete.It can be measured through vserverPqpolicyTable.pqpolicyDropped. ')
pqQdepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqQdepth.setStatus('obsolete')
if mibBuilder.loadTexts: pqQdepth.setDescription('Number of waiting clients.\n\n\tThis object is obsolete.It can be measured through vserverPqpolicyTable.pqpolicyQdepth. ')
pqconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2))
pqpolicyconfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1), )
if mibBuilder.loadTexts: pqpolicyconfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: pqpolicyconfigTable.setDescription('The table that has configuration statistics for each PQ\n         policy on netscaler.\n\n\tThis Table is obsolete.Instead of this table use nsPqPolicyGroup.pqPolicyConfigTable.')
pqpolicyconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "pqPolDevno"))
if mibBuilder.loadTexts: pqpolicyconfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: pqpolicyconfigEntry.setDescription('The PQ config statistics per policy.\n\n\tThis Entry is obsolete.Instead of this entry use nsPqPolicyGroup.pqPolicyConfigEntry.')
pqPolDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPolDevno.setStatus('obsolete')
if mibBuilder.loadTexts: pqPolDevno.setDescription('The distinguishing id for the policy.\n\n\tThis object is obsolete.')
pqpolicyname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicyname.setStatus('obsolete')
if mibBuilder.loadTexts: pqpolicyname.setDescription('The name for PQ policyi.\n\n\tThis object is obsolete.It can be measured through pqPolicyConfigTable.pqName.')
rulename = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rulename.setStatus('obsolete')
if mibBuilder.loadTexts: rulename.setDescription('The rule name.\n\n\tThis object is obsolete.It can be measured through pqPolicyConfigTable.pqRuleName.')
qdepthThreshval = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qdepthThreshval.setStatus('obsolete')
if mibBuilder.loadTexts: qdepthThreshval.setDescription('The threshold value for qdepth.\n\n\tThis object is obsolete.It can be measured through pqPolicyConfigTable.pqQdepthThreshval.')
polqdepthThreshval = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polqdepthThreshval.setStatus('obsolete')
if mibBuilder.loadTexts: polqdepthThreshval.setDescription('The threshold value for policyqdepth.\n\n\tThis object is obsolete.It can be measured through pqPolicyConfigTable.pqPolQdepthThreshval.')
priority = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priority.setStatus('obsolete')
if mibBuilder.loadTexts: priority.setDescription('The priority for this pq policy.\n\n\tThis object is obsolete.It can be measured through pqPolicyConfigTable.pqPriority.')
pqPolWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 11, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPolWeight.setStatus('obsolete')
if mibBuilder.loadTexts: pqPolWeight.setDescription('The weight for the priority.\n\n\tThis object is obsolete.It can be measured through pqPolicyConfigTable.pqPolicyWeight.')
dos = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 12))
dosstatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 12, 1))
dosservicestatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 12, 1, 1), )
if mibBuilder.loadTexts: dosservicestatsTable.setStatus('obsolete')
if mibBuilder.loadTexts: dosservicestatsTable.setDescription('The table that has statistics for each LB Vip.\n\n\tThis Table is obsolete.Instead of this table use nsSvcGroup.serviceTable.')
dosservicestatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 12, 1, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "dosDevno"))
if mibBuilder.loadTexts: dosservicestatsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: dosservicestatsEntry.setDescription('The DOS service statistics per Load Balancing VIP entry.\n\n\tThis Entry is obsolete.Instead of this entry use nsSvcGroup.serviceEntry.')
dosDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 12, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosDevno.setStatus('obsolete')
if mibBuilder.loadTexts: dosDevno.setDescription('The distinguishing id for the LoadBalancing Vserver.\n\n\tThis object is obsolete.')
surgecnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 12, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: surgecnt.setStatus('obsolete')
if mibBuilder.loadTexts: surgecnt.setDescription('The qdepth on this service.\n\n\tThis object is obsolete.It can be measured through serviceTable.svcSurgeCount.')
dosqdepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 12, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosqdepth.setStatus('obsolete')
if mibBuilder.loadTexts: dosqdepth.setDescription('The number of genuine clients on this service.\n\n\tThis object is obsolete.It can be measured through serviceTable.svcdosQDepth.')
totaljstransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 12, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totaljstransaction.setStatus('obsolete')
if mibBuilder.loadTexts: totaljstransaction.setDescription('The total number of javascripts sent to genuine clients.\n\n\tThis object is obsolete.It can be measured through serviceTable.svctotalJsTransaction. ')
dosconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 12, 2))
dospolicyconfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 12, 2, 1), )
if mibBuilder.loadTexts: dospolicyconfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: dospolicyconfigTable.setDescription('The table that has statistics for each policy \n         on netscaler.\n\n\tThis Table is obsolete.Instead of this table use nsDosPolicyGroup.dosPolicyTable.')
dospolicyconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 12, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "dosPolDevno"))
if mibBuilder.loadTexts: dospolicyconfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: dospolicyconfigEntry.setDescription('The entry for DOS policy configuration.\n\t\n\tThis Entry is obsolete.Instead of this entry use nsDosPolicyGroup.dosPolicyEntry.')
dosPolDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 12, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosPolDevno.setStatus('obsolete')
if mibBuilder.loadTexts: dosPolDevno.setDescription('The distinguishing id for the configured DOS policies.\n\n\tThis object is obsolete.')
dospolicyname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 12, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dospolicyname.setStatus('obsolete')
if mibBuilder.loadTexts: dospolicyname.setDescription('The name of the DOS policy.\n\n\tThis object is obsolete.It can be measured through dosPolicyTable.dosPolicyName.')
thresholdvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 12, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdvalue.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdvalue.setDescription('The value of qdepth at which DOS protection gets triggered.\n\n\tThis object is obsolete.It can be measured through dosPolicyTable.thresholdValue.')
ssloffloading = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 13))
sslstatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1))
sslglobalstats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1))
currSPS = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currSPS.setStatus('obsolete')
if mibBuilder.loadTexts: currSPS.setDescription('SSL session/second between client and NetScaler')
sslV2TxCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslV2TxCount.setStatus('obsolete')
if mibBuilder.loadTexts: sslV2TxCount.setDescription('Total number of SSL v2 Transactions')
sslV3TxCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslV3TxCount.setStatus('obsolete')
if mibBuilder.loadTexts: sslV3TxCount.setDescription('Total number of SSL v3 Transactions')
tlsV1TxCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsV1TxCount.setStatus('obsolete')
if mibBuilder.loadTexts: tlsV1TxCount.setDescription('Total number of TLS v1 Transactions')
keyExRSA512 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyExRSA512.setStatus('obsolete')
if mibBuilder.loadTexts: keyExRSA512.setDescription('Total number of 512 bit RSA key exchange')
keyExRSA1024 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyExRSA1024.setStatus('obsolete')
if mibBuilder.loadTexts: keyExRSA1024.setDescription('Total number of 1024 bit RSA key exchange')
keyExDH512 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyExDH512.setStatus('obsolete')
if mibBuilder.loadTexts: keyExDH512.setDescription('Total number of 512 bit DH key exchange')
keyExDH1024 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyExDH1024.setStatus('obsolete')
if mibBuilder.loadTexts: keyExDH1024.setDescription('Total number of 1024 bit DH key exchange')
authRSA = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authRSA.setStatus('obsolete')
if mibBuilder.loadTexts: authRSA.setDescription('Total number of RSA authentication')
authDH = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authDH.setStatus('obsolete')
if mibBuilder.loadTexts: authDH.setDescription('Total number of DH authentication')
authDS = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authDS.setStatus('obsolete')
if mibBuilder.loadTexts: authDS.setDescription('Total number of DS authentication')
cipher40BitRC4 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher40BitRC4.setStatus('obsolete')
if mibBuilder.loadTexts: cipher40BitRC4.setDescription('Total number of RC4-40 cipher used')
cipher56BitRC4 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher56BitRC4.setStatus('obsolete')
if mibBuilder.loadTexts: cipher56BitRC4.setDescription('Total number of RC4-56 cipher used')
cipher64BitRC4 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher64BitRC4.setStatus('obsolete')
if mibBuilder.loadTexts: cipher64BitRC4.setDescription('Total number of RC4-64 cipher used')
cipher128BitRC4 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher128BitRC4.setStatus('obsolete')
if mibBuilder.loadTexts: cipher128BitRC4.setDescription('Total number of RC4-128 cipher used')
cipher40BitDES = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher40BitDES.setStatus('obsolete')
if mibBuilder.loadTexts: cipher40BitDES.setDescription('Total number of DES-40 cipher used')
cipher56BitDES = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher56BitDES.setStatus('obsolete')
if mibBuilder.loadTexts: cipher56BitDES.setDescription('Total number of DES-56 cipher used')
cipher168Bit3DES = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher168Bit3DES.setStatus('obsolete')
if mibBuilder.loadTexts: cipher168Bit3DES.setDescription('Total number of 3DES-168 cipher used')
cipher40BitRC2 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher40BitRC2.setStatus('obsolete')
if mibBuilder.loadTexts: cipher40BitRC2.setDescription('Total number of RC2-40 cipher used')
cipher56BitRC2 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher56BitRC2.setStatus('obsolete')
if mibBuilder.loadTexts: cipher56BitRC2.setDescription('Total number of RC2-56 cipher used')
cipher128BitRC2 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher128BitRC2.setStatus('obsolete')
if mibBuilder.loadTexts: cipher128BitRC2.setDescription('Total number of RC2-128 cipher used')
cipher128BitIDEA = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipher128BitIDEA.setStatus('obsolete')
if mibBuilder.loadTexts: cipher128BitIDEA.setDescription('Total number of IDEA-128 cipher used')
hashMD5 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hashMD5.setStatus('obsolete')
if mibBuilder.loadTexts: hashMD5.setDescription('Total number of HASH-MD5 hash used')
hashSHA = MibScalar((1, 3, 6, 1, 4, 1, 5951, 1, 13, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hashSHA.setStatus('obsolete')
if mibBuilder.loadTexts: hashSHA.setDescription('Total number of HASH_SHA hash used')
sslConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2))
certKeyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 1), )
if mibBuilder.loadTexts: certKeyTable.setStatus('obsolete')
if mibBuilder.loadTexts: certKeyTable.setDescription('The table that has all the configuration information for \n         each certificate key pair.\n\n\tThis Table is obsolete.Instead of this table use nsSslConfigGroup.sslCertKeyTable.')
certKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "certKeyId"))
if mibBuilder.loadTexts: certKeyEntry.setStatus('obsolete')
if mibBuilder.loadTexts: certKeyEntry.setDescription('The certificate key pair information for each entry.\n\n\tThis Entry is obsolete.Instead of this entry use nsSslConfigGroup.sslCertKeyEntry.')
certKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certKeyId.setStatus('obsolete')
if mibBuilder.loadTexts: certKeyId.setDescription('The Distinguish ID for each certificate key pair in NetScaler.\n\n\tThis object is obsolete.')
certKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certKeyName.setStatus('obsolete')
if mibBuilder.loadTexts: certKeyName.setDescription('The certificate key pair Name.\n\n\tThis object is obsolete.It can be measured through sslCertKeyTable.sslCertKeyName.')
certPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certPath.setStatus('obsolete')
if mibBuilder.loadTexts: certPath.setDescription('The certificate path.\n\n\tThis object is obsolete.It can be measured through sslCertKeyTable.sslCertPath.')
keyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyPath.setStatus('obsolete')
if mibBuilder.loadTexts: keyPath.setDescription('The private key path.\n\n\tThis object is obsolete.It can be measured through sslCertKeyTable.sslKeyPath.')
inputFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("der", 1), ("pem", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputFormat.setStatus('obsolete')
if mibBuilder.loadTexts: inputFormat.setDescription('The input format of the certificate key pair.\n\n\tThis object is obsolete.It can be measured through sslCertKeyTable.sslInputFormat.')
crlTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 2), )
if mibBuilder.loadTexts: crlTable.setStatus('obsolete')
if mibBuilder.loadTexts: crlTable.setDescription('The table that has all the configuration \n         information for each CRL in NetScaler.\n\n\tThis Table is obsolete.Instead of this table use nsSslConfigGroup.sslCrlTable.')
crlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "crlId"))
if mibBuilder.loadTexts: crlEntry.setStatus('obsolete')
if mibBuilder.loadTexts: crlEntry.setDescription('The CRL information for each entry.\n\n\tThis Entry is obsolete.Instead of this entry use nsSslConfigGroup.sslCrlEntry.')
crlId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crlId.setStatus('obsolete')
if mibBuilder.loadTexts: crlId.setDescription('The Distinguish ID for each CRL in NetScaler.\n\n\tThis object is obsolete.')
crlName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crlName.setStatus('obsolete')
if mibBuilder.loadTexts: crlName.setDescription('The name of CRL.\n\n\tThis object is obsolete.It can be measured through sslCrlTable.sslCrlName.')
crlPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crlPath.setStatus('obsolete')
if mibBuilder.loadTexts: crlPath.setDescription('The CRL path.\n\n\tThis object is obsolete.It can be measured through sslCrlTable.sslCrlPath.')
crlInputFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("der", 1), ("pem", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crlInputFormat.setStatus('obsolete')
if mibBuilder.loadTexts: crlInputFormat.setDescription('The input format of CRL.\n\n\tThis object is obsolete.It can be measured through sslCrlTable.sslCrlInputFormat.')
cipherGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 3), )
if mibBuilder.loadTexts: cipherGroupTable.setStatus('obsolete')
if mibBuilder.loadTexts: cipherGroupTable.setDescription('The table that has all the configuration information\n         for each cipher group in NetScaler.\n\n\tThis Table is obsolete.Instead of this table use nsSslConfigGroup.sslCipherGroupTable.')
cipherGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 3, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cipherGroupId"), (0, "NS-ROOT-MIB", "cipherId"))
if mibBuilder.loadTexts: cipherGroupEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cipherGroupEntry.setDescription('The Cipher group information for each entry.\n\n\tThis Entry is obsolete.Instead of this entry use sslCipherGroupTable.sslCipherGroupEntry.')
cipherGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherGroupId.setStatus('obsolete')
if mibBuilder.loadTexts: cipherGroupId.setDescription('The Distinguish ID for each Cipher group in NetScaler.\n\n\tThis object is obsolete.')
cipherId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherId.setStatus('obsolete')
if mibBuilder.loadTexts: cipherId.setDescription('The Distinguish ID for each Cipher in NetScaler.\n\n\tThis object is obsolete.')
cipherGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherGroupName.setStatus('obsolete')
if mibBuilder.loadTexts: cipherGroupName.setDescription('The Cipher group name.\n\n\tThis object is obsolete.It can not be measured through sslCipherGroupTable.sslCipherGroupName.\t')
cipherName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherName.setStatus('obsolete')
if mibBuilder.loadTexts: cipherName.setDescription('The Cipher name.\n\n\tThis object is obsolete.It can not be measured through sslCipherGroupTable.sslCipherName.')
cipherDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherDesc.setStatus('obsolete')
if mibBuilder.loadTexts: cipherDesc.setDescription('The Cipher description.\n\n\tThis object is obsolete.It can not be measured through sslCipherGroupTable.sslCipherDesc.')
advanceSSLConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4), )
if mibBuilder.loadTexts: advanceSSLConfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: advanceSSLConfigTable.setDescription('The table that has all the advance SSL configuration\n         information for each  virtual/physical service in NetScaler.\n\n\tThis Table is obsolete.Instead of this table use nsSvcGroup.serviceAdvanceSslConfigTable or nsVserverGroup.vserverAdvanceSslConfigTable.')
advanceSSLConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1), ).setIndexNames((0, "NS-ROOT-MIB", "id"))
if mibBuilder.loadTexts: advanceSSLConfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: advanceSSLConfigEntry.setDescription('The advance SSL configuration for each entry.\n\n\tThis Entry is obsolete.Instead of this entry use nsSvcGroup.serviceAdvanceSslConfigEntry or nsVserverGroup.vserverAdvanceSslConfigEntry.')
id = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: id.setStatus('obsolete')
if mibBuilder.loadTexts: id.setDescription('The Distinguish ID for each SSL virtual/physical service in NetScaler.\n\n\tThis object is obsolete.')
serviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceName.setStatus('obsolete')
if mibBuilder.loadTexts: serviceName.setDescription('The service name.\n\n\tThis object is obsolete.It can be measured.')
dh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh.setStatus('obsolete')
if mibBuilder.loadTexts: dh.setDescription('Whether DH is enabled/disabled.\n\n\tThis object is obsolete.It can be measured through serviceAdvanceSslConfigTable.svcSslDH or vserverAdvanceSslConfigTable.vsvrSslDH.')
dhCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhCount.setStatus('obsolete')
if mibBuilder.loadTexts: dhCount.setDescription('The DH refresh count to re-generate public/private key.\n\n\tThis object is obsolete.It can be measured through serviceAdvanceSslConfigTable.svcSslDHCount or vserverAdvanceSslConfigTable.vsvrSslDHCount.')
dhFile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhFile.setStatus('obsolete')
if mibBuilder.loadTexts: dhFile.setDescription('The DH file path name.\n\n\tThis object is obsolete.It can be measured through serviceAdvanceSslConfigTable.svcSslDHFilePath or vserverAdvanceSslConfigTable.vsvrSslDHFilePath.')
eRSA = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRSA.setStatus('obsolete')
if mibBuilder.loadTexts: eRSA.setDescription('The ephimeral RSA support for service.\n\n\tThis object is obsolete.It can be measured through serviceAdvanceSslConfigTable.svcSsleRSA or vserverAdvanceSslConfigTable.vsvrSsleRSA.')
eRSACount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRSACount.setStatus('obsolete')
if mibBuilder.loadTexts: eRSACount.setDescription('The eRSA refresh count to re-generate RSA temporary key.\n\n\tThis object is obsolete.It can be measured through serviceAdvanceSslConfigTable.svcSsleRSACount or vserverAdvanceSslConfigTable.vsvrSsleRSACount.')
certHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: certHeader.setStatus('obsolete')
if mibBuilder.loadTexts: certHeader.setDescription('The certificate insertion in HTTP request.\n\n\tThis object is obsolete.It can be measured through serviceAdvanceSslConfigTable.svcSslCertHeader or vserverAdvanceSslConfigTable.vsvrSslCertHeader.')
certHeaderTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certHeaderTag.setStatus('obsolete')
if mibBuilder.loadTexts: certHeaderTag.setDescription('The certificate tag name in HTTP request.\n\n\tThis object is obsolete.It can be measured through serviceAdvanceSslConfigTable.svcSslCertHeaderTag or vserverAdvanceSslConfigTable.vsvrSslCertHeaderTag.')
sessHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessHeader.setStatus('obsolete')
if mibBuilder.loadTexts: sessHeader.setDescription('The session id insertion in HTTP request.\n\n\tThis object is obsolete.It can be measured through serviceAdvanceSslConfigTable.svcSslSessionHeader or vserverAdvanceSslConfigTable.vsvrSslSessionHeader.')
sessHeaderTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessHeaderTag.setStatus('obsolete')
if mibBuilder.loadTexts: sessHeaderTag.setDescription('The session id tag name in HTTP request.\n\n\tThis object is obsolete.It can be measured through serviceAdvanceSslConfigTable.svcSslSessionHeaderTag or vserverAdvanceSslConfigTable.vsvrSslSessionHeaderTag.')
sslv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslv2.setStatus('obsolete')
if mibBuilder.loadTexts: sslv2.setDescription('The support for SSLv2 protocol for service.\n\n\tThis object is obsolete.It can be measured through serviceAdvanceSslConfigTable.svcSslv2Protocol or vserverAdvanceSslConfigTable.vsvrSslv2Protocol.')
sslv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslv3.setStatus('obsolete')
if mibBuilder.loadTexts: sslv3.setDescription('The support for SSLv3 protocol for service.\n\n\tThis object is obsolete.It can be measured through serviceAdvanceSslConfigTable.svcSslv3Protocol or vserverAdvanceSslConfigTable.vsvrSslv3Protocol.')
tlsv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsv1.setStatus('obsolete')
if mibBuilder.loadTexts: tlsv1.setDescription('The support for TLSv1 protocol for service.\n\n\tThis object is obsolete.It can be measured through serviceAdvanceSslConfigTable.svcSslTLSv1Protocol or vserverAdvanceSslConfigTable.vsvrSslTLSv1Protocol.')
owaSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owaSupport.setStatus('obsolete')
if mibBuilder.loadTexts: owaSupport.setDescription('The support for outlook web access for service.\n\n\tThis object is obsolete.It can be measured through serviceAdvanceSslConfigTable.svcSsloutlookSupport or vserverAdvanceSslConfigTable.vsvrSsloutlookSupport.')
sslRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslRedirect.setStatus('obsolete')
if mibBuilder.loadTexts: sslRedirect.setDescription('The support for ssl redirect for service.\n\n\tThis object is obsolete.It can be measured through serviceAdvanceSslConfigTable.svcSslRedirectSupport or vserverAdvanceSslConfigTable.vsvrSslRedirectSupport.')
clearTextPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clearTextPort.setStatus('obsolete')
if mibBuilder.loadTexts: clearTextPort.setDescription('The clear text port on the backend webserver.\n\n\tThis object is obsolete.It can be measured through serviceAdvanceSslConfigTable.svcSslClearTextPort or vserverAdvanceSslConfigTable.vsvrSslClearTextPort.')
serviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("virtualserver", 0), ("physicalservice", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceType.setStatus('obsolete')
if mibBuilder.loadTexts: serviceType.setDescription('The type of the service virtual/ real.\n\n\tThis object is obsolete.')
certBindingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5), )
if mibBuilder.loadTexts: certBindingConfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: certBindingConfigTable.setDescription('The table that has all the certificate configuration \n         for each  service in NetScaler.\n\n\tThis Table is obsolete.')
certBindingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5, 1), ).setIndexNames((0, "NS-ROOT-MIB", "certBindId"), (0, "NS-ROOT-MIB", "certKeyID"), (0, "NS-ROOT-MIB", "certType"))
if mibBuilder.loadTexts: certBindingConfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: certBindingConfigEntry.setDescription('The certificate bindings for each entry.\n\n\tThis Entry is obsolete.')
certBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certBindId.setStatus('obsolete')
if mibBuilder.loadTexts: certBindId.setDescription('The Distinguish ID for each SSL virtual/real service in NetScaler.\n\n\tThis object is obsolete.')
certKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certKeyID.setStatus('obsolete')
if mibBuilder.loadTexts: certKeyID.setDescription('The Distinguish ID for each certificate key pair in NetScaler.\n\n\tThis object is obsolete.')
certType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serverCertificate", 1), ("caCertificate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: certType.setStatus('obsolete')
if mibBuilder.loadTexts: certType.setDescription('Whether certificate key pair is CA or not.\n\n\tThis object is obsolete.')
certBindServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certBindServiceName.setStatus('obsolete')
if mibBuilder.loadTexts: certBindServiceName.setDescription('The service name.\n\n\tThis object is obsolete.')
certBindKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certBindKeyName.setStatus('obsolete')
if mibBuilder.loadTexts: certBindKeyName.setDescription('The certificate key pair name.\n\n\tThis object is obsolete.')
certBindServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("virtualserver", 0), ("physicalservice", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: certBindServiceType.setStatus('obsolete')
if mibBuilder.loadTexts: certBindServiceType.setDescription('The type of the service virtual/ real.\n\n\tThis object is obsolete.')
cipherBindingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6), )
if mibBuilder.loadTexts: cipherBindingConfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: cipherBindingConfigTable.setDescription('The table that has all the cipher configuration for\n         each  service in NetScaler.\n\n\tThis Table is obsolete.Instead of this table use nsSvcGroup.serviceCipherBindingTable or nsVserverGroup.vserverCipherBindingTable.')
cipherBindingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cipherBindId"), (0, "NS-ROOT-MIB", "cipherID"))
if mibBuilder.loadTexts: cipherBindingConfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cipherBindingConfigEntry.setDescription('The cipher bindings for each entry.\n\n\tThis Entry is obsolete.Instead of this entry use nsSvcGroup.serviceCipherBindingEntry or nsVserverGroup.vserverCipherBindingEntry.')
cipherBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherBindId.setStatus('obsolete')
if mibBuilder.loadTexts: cipherBindId.setDescription('The distinguishing ID for each SSL virtual/real service in NetScaler.\n\n\tThis object is obsolete.')
cipherID = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherID.setStatus('obsolete')
if mibBuilder.loadTexts: cipherID.setDescription('The distinguishing ID for each cipher in NetScaler.\n\n\tThis object is obsolete.')
cipherBindServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherBindServiceName.setStatus('obsolete')
if mibBuilder.loadTexts: cipherBindServiceName.setDescription('The name of the physical or virtual service.\n\n\tThis object is obsolete.')
cipherbName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherbName.setStatus('obsolete')
if mibBuilder.loadTexts: cipherbName.setDescription('The cipher name.\n\n\tThis object is obsolete.It can be measured through serviceCipherBindingTable.svcSslCipherBindName or vserverCipherBindingTable.vsvrSslCipherBindName.')
cipherbDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherbDesc.setStatus('obsolete')
if mibBuilder.loadTexts: cipherbDesc.setDescription('The cipher description.\n\n\tThis object is obsolete.It can be measured through serviceCipherBindingTable.svcSslCipherBindDesc or vserverCipherBindingTable.vsvrSslCipherBindDesc.')
cipherBindServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 13, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("virtualserver", 0), ("physicalservice", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipherBindServiceType.setStatus('obsolete')
if mibBuilder.loadTexts: cipherBindServiceType.setDescription('The type of the service virtual/ real.\n\n\tThis object is obsolete.')
cpe = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 14))
cpestatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1))
cpestatspolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 1), )
if mibBuilder.loadTexts: cpestatspolicyTable.setStatus('obsolete')
if mibBuilder.loadTexts: cpestatspolicyTable.setDescription('The table that has all the policy stats for\n         each  virtual service in NetScaler.')
cpestatspolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cpesDevno"))
if mibBuilder.loadTexts: cpestatspolicyEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cpestatspolicyEntry.setDescription('The policy items for each entry.')
cpesDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpesDevno.setStatus('obsolete')
if mibBuilder.loadTexts: cpesDevno.setDescription(' The unique identifier for the policy')
cpesPolicyname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpesPolicyname.setStatus('obsolete')
if mibBuilder.loadTexts: cpesPolicyname.setDescription(' The name of the policy ')
cpesPolicyhits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpesPolicyhits.setStatus('obsolete')
if mibBuilder.loadTexts: cpesPolicyhits.setDescription('Number of times that the policy condition has been met by NetScaler')
cpestatsactionTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 2), )
if mibBuilder.loadTexts: cpestatsactionTable.setStatus('obsolete')
if mibBuilder.loadTexts: cpestatsactionTable.setDescription('The table that has all the action stats for\n         each  virtual service in NetScaler.')
cpestatsactionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cpeaDevno"))
if mibBuilder.loadTexts: cpestatsactionEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cpestatsactionEntry.setDescription('The action items for each entry.')
cpeaDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeaDevno.setStatus('obsolete')
if mibBuilder.loadTexts: cpeaDevno.setDescription(' The unique identifier for the action')
actionname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionname.setStatus('obsolete')
if mibBuilder.loadTexts: actionname.setDescription(' The name of the action ')
actionhits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionhits.setStatus('obsolete')
if mibBuilder.loadTexts: actionhits.setDescription('Number of times that the action has been made by NetScaler')
cpeconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2))
cpeconfigpolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 1), )
if mibBuilder.loadTexts: cpeconfigpolicyTable.setStatus('obsolete')
if mibBuilder.loadTexts: cpeconfigpolicyTable.setDescription('The table that has all the policy stats for\n         each  virtual service in NetScaler.')
cpeconfigpolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cpecDevno"))
if mibBuilder.loadTexts: cpeconfigpolicyEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cpeconfigpolicyEntry.setDescription('The policy items for each entry.')
cpecDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpecDevno.setStatus('obsolete')
if mibBuilder.loadTexts: cpecDevno.setDescription(' The unique identifier for the policy')
cpecPolicyname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpecPolicyname.setStatus('obsolete')
if mibBuilder.loadTexts: cpecPolicyname.setDescription(' The name of the policy ')
reqrule = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqrule.setStatus('obsolete')
if mibBuilder.loadTexts: reqrule.setDescription('user defined request rule for the policy from client to NetScaler')
reqaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqaction.setStatus('obsolete')
if mibBuilder.loadTexts: reqaction.setDescription('user defined request action for the policy from client to NetScaler')
cpeconfigactionTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2), )
if mibBuilder.loadTexts: cpeconfigactionTable.setStatus('obsolete')
if mibBuilder.loadTexts: cpeconfigactionTable.setDescription('The table that has all the action configurations for\n         each  virtual service in NetScaler.')
cpeconfigactionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cpecaDevno"))
if mibBuilder.loadTexts: cpeconfigactionEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cpeconfigactionEntry.setDescription('The action items for each entry.')
cpecaDevno = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpecaDevno.setStatus('obsolete')
if mibBuilder.loadTexts: cpecaDevno.setDescription(' The unique identifier for the action')
cpecaActionname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpecaActionname.setStatus('obsolete')
if mibBuilder.loadTexts: cpecaActionname.setDescription(' The name of the action ')
directive = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 0), ("reset", 1), ("drop", 2), ("httpec", 3), ("cmp", 4), ("add", 5), ("mod", 6), ("del", 7), ("cor", 8), ("forward", 9), ("noComparison", 10), ("last", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: directive.setStatus('obsolete')
if mibBuilder.loadTexts: directive.setDescription(' The name of the directive associated with this action ')
qualifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("http", 1), ("header", 2), ("query", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qualifier.setStatus('obsolete')
if mibBuilder.loadTexts: qualifier.setDescription(' The name of the qualifier associated with this action ')
value = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: value.setStatus('obsolete')
if mibBuilder.loadTexts: value.setDescription(' The value associated with this action . The value depends on \n         the directive . If the directive is RESPONSE , then the \n         value returned is status. Similarly , if the directive is\n         either ADD or MOD or DEL , then the value returned is header.\n         If the directive is RST or CMP, then NULL is returned')
page = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: page.setStatus('obsolete')
if mibBuilder.loadTexts: page.setDescription(' The value of this depends on the value of directive. If value of\n         directive is  RESPONSE  , then the page is returned, and if directive\n         is MOD , then the header is returned , \n         otherwise NULL is returned')
server = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 2, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: server.setStatus('obsolete')
if mibBuilder.loadTexts: server.setDescription(' The server name associated with this action based on the directive.\n         If the directive is FORWARD , then the server returns the name of the\n          service , otherwise returns empty string')
cpeExprConfigStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3), )
if mibBuilder.loadTexts: cpeExprConfigStatsTable.setStatus('obsolete')
if mibBuilder.loadTexts: cpeExprConfigStatsTable.setDescription('This table contains configuration information for each of \n         the expressions on the Netscaler   \n\n\tThis Table is obsolete.Instead of this table use nsSysGroup.nsExpressionTable.')
cpeExprConfigStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cpeeIndex"))
if mibBuilder.loadTexts: cpeExprConfigStatsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cpeExprConfigStatsEntry.setDescription('This table contains configuration information for each of \n         the expressions on the Netscaler   \n\n\tThis Entry is obsolete.Instead of this entry use nsSysGroup.nsExpressionEntry.')
cpeeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeeIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cpeeIndex.setDescription('The distinguishing Id for expression.\n\n\tThis object is obsolete.')
exprName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exprName.setStatus('obsolete')
if mibBuilder.loadTexts: exprName.setDescription('The name of the expression.\n\n\tThis object is obsolete.It can be measured through nsExpressionTable.expressionName.')
cpeeQualifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknownQualifier", -1), ("method", 0), ("urlPrefix", 1), ("urlSuffix", 2), ("urlTokens", 3), ("version", 4), ("header", 5), ("urlQuery", 6), ("url", 7), ("urllen", 8), ("urlquerylen", 9), ("domain", 10), ("sourceIp", 11), ("sourcePort", 12), ("destinationIp", 13), ("destinationPort", 14), ("compoundExpression", 15), ("evaluatePredefined", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeeQualifier.setStatus('obsolete')
if mibBuilder.loadTexts: cpeeQualifier.setDescription('The qualifier of the expression.')
operator = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("and", 0), ("or", 1), ("not", 2), ("equal", 3), ("notEqual", 4), ("greaterThan", 5), ("lessThan", 6), ("greaterThanOrEqualTo", 7), ("lessThanOrEqualTo", 8), ("exists", 9), ("notExists", 10), ("contains", 11), ("notContains", 12), ("contents", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operator.setStatus('obsolete')
if mibBuilder.loadTexts: operator.setDescription('The operator in the expression.')
hdrName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdrName.setStatus('obsolete')
if mibBuilder.loadTexts: hdrName.setDescription('The http header in the expression when the \n         value of qualifier is HEADER , otherwise empty string')
cpeeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeeValue.setStatus('obsolete')
if mibBuilder.loadTexts: cpeeValue.setDescription('The value of the expression.\n\n\tThis object is obsolete.It can be measured through nsExpressionTable.expressionValue.')
length = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: length.setStatus('obsolete')
if mibBuilder.loadTexts: length.setDescription('The length , which is an optional value , used in \n         the expression . This has value only when the qualifier is\n         CONTAINS or CONTENTS')
offset = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: offset.setStatus('obsolete')
if mibBuilder.loadTexts: offset.setDescription('The offset , which is an optional value , used in \n         the expression . This has value only when the qualifier is\n         CONTAINS or CONTENTS')
cpeeNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 1, 14, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpeeNetmask.setStatus('obsolete')
if mibBuilder.loadTexts: cpeeNetmask.setDescription('The netmask , which is an optional value , used in \n         the expression . This has value only when the qualifier is\n         SOURCEIP')
class EntityProtocolType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 39, 40, 41, 48, 49, 50, 52, 53, 54, 55, 61, 62, 63, 73, 74, 75, 90, 91, 92, 95, 96, 99))
    namedValues = NamedValues(("http", 0), ("ftp", 1), ("tcp", 2), ("udp", 3), ("sslBridge", 4), ("monitor", 5), ("monitorUdp", 6), ("nntp", 7), ("httpserver", 8), ("httpclient", 9), ("rpcserver", 10), ("rpcclient", 11), ("nat", 12), ("any", 13), ("ssl", 14), ("dns", 16), ("adns", 17), ("snmp", 18), ("ha", 19), ("monitorPing", 20), ("sslOtherTcp", 21), ("aaa", 22), ("secureMonitor", 23), ("sslvpnUdp", 24), ("rip", 25), ("dnsClient", 26), ("rpcServer", 27), ("rpcClient", 28), ("dhcrpa", 36), ("sipudp", 39), ("siptcp", 40), ("siptls", 41), ("dnstcp", 48), ("adnstcp", 49), ("rtsp", 50), ("push", 52), ("sslPush", 53), ("dhcpClient", 54), ("radius", 55), ("rdp", 61), ("mysql", 62), ("mssql", 63), ("diameter", 73), ("sslDiameter", 74), ("tftp", 75), ("tftp", 90), ("pptp", 91), ("gre", 92), ("fix", 95), ("sslFix", 96), ("serviceUnknown", 99))

class EntityState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8))
    namedValues = NamedValues(("down", 1), ("unknown", 2), ("busy", 3), ("outOfService", 4), ("transitionToOutOfService", 5), ("up", 7), ("transitionToOutOfServiceDown", 8))

class MepStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("mepDown", 0), ("mepUp", 1))

class SiteType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("localSite", 1), ("remoteSite", 2))

class MetricExchange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4))
    namedValues = NamedValues(("disabled", 3), ("enabled", 4))

class AdminStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2))

class HAMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("standalone", 0), ("primary", 1), ("secondary", 2), ("unknown", 3))

class HAState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("unknown", 0), ("init", 1), ("down", 2), ("up", 3), ("partialFail", 4), ("monitorFail", 5), ("monitorOk", 6), ("completeFail", 7), ("dumb", 8), ("disabled", 9), ("partialFailSsl", 10), ("routemonitorFail", 11))

class HAON(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("no", 0), ("yes", 1))

class ClusterAdminState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("active", 1), ("spare", 2), ("passive", 3))

class ClusterMasterState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("inactive", 0), ("active", 1), ("unknown", 2))

class ClusterCurHealth(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14))
    namedValues = NamedValues(("unknown", 0), ("init", 1), ("down", 2), ("up", 3), ("partialFail", 4), ("completeFail", 5), ("partialFailSsl", 6), ("routemonitorFail", 7), ("lbStateSyncInprog", 8), ("bkplaneFail", 9), ("clagFail", 10), ("dhtSyncInprog", 11), ("syncookieSyncInprog", 12), ("unkwnBadHlth", 14))

class ClusterEffHealth(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("up", 1), ("notup", 2), ("unknown", 3), ("init", 4))

class ClusterSyncState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("enabled", 1), ("success", 2), ("inprog", 3), ("failure", 4), ("incsyncdisabled", 5), ("disabled", 6), ("unknown", 7))

class FeatureStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notLicensed", 0), ("licensedButDisabled", 1), ("licensedAndEnabled", 2))

class FeaturePlatform(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("ns", 0), ("agee", 1), ("nsva", 2))

class ModeStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class LbPolicy(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("weightedRoundRobin", 1), ("leastConnections", 2), ("leastResponse", 3), ("asynchronousMAC", 4), ("urlHashed", 5), ("domainHashed", 6), ("destinationIPHashed", 7), ("sourceIPHashed", 8), ("leastBandwidth", 9), ("leastPackets", 10), ("customLoad", 11), ("token", 12), ("staticProximity", 13), ("rdp", 14), ("leastreq", 15), ("rtt", 16), ("sourceIPDestinationIPHashed", 17), ("sourceIPSourcePort", 18), ("lrtm", 19), ("callIDHashed", 20))

class PersistanceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("none", 0), ("sourceIp", 1), ("cookieInsert", 2), ("cookieDelete", 3), ("cookieRead", 4), ("cookieHash", 5), ("sessionId", 6), ("server", 7), ("rule", 8), ("urlPassive", 9), ("customServerID", 10), ("groupSourceID", 11), ("groupCookieInsert", 12), ("groupRule", 13), ("destinationIP", 14), ("spillOver", 15), ("sourceIPdestinationIP", 16), ("callerID", 17), ("gslbBackup", 18), ("rtspSessionID", 19), ("diameter", 20), ("fixSession", 21))

class ActionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ns", 1), ("acs", 2), ("noAction", 3))

class InputFormat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3))
    namedValues = NamedValues(("der", 1), ("pem", 3))

class IpAddressType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 2048))
    namedValues = NamedValues(("netScalerIp", 1), ("mappedIp", 2), ("subnetIp", 4), ("vserverIp", 8), ("clusterIp", 2048))

class IpAddressMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("passive", 2))

class AuthorizationStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("authorized", 1), ("notAuthorized", 2))

class CommandExecutionStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("failed", 1), ("successful", 2))

class MonitorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 52, 53))
    namedValues = NamedValues(("ping", 1), ("tcp", 2), ("http", 3), ("tcpEcv", 4), ("httpEcv", 5), ("udpEcv", 6), ("dns", 7), ("ftp", 8), ("https", 9), ("tcps", 10), ("ldnsPing", 11), ("ldnsTcp", 12), ("ldnsDns", 13), ("radius", 14), ("dbsResolver", 15), ("user", 16), ("httpInline", 17), ("sipUdp", 18), ("sipTcp", 19), ("ftpExtended", 20), ("smtp", 21), ("snmp", 22), ("nntp", 23), ("mysql", 24), ("ldap", 25), ("pop3", 26), ("load", 27), ("citrixXmlService", 28), ("citrixWebInterface", 29), ("citrixStaService", 30), ("citrixStaServiceNhop", 31), ("dnsTcp", 32), ("rtsp", 33), ("arp", 34), ("citrixAg", 35), ("citrixAacLoginPage", 36), ("citrixAacLas", 37), ("citrixXdDdc", 38), ("nd6", 39), ("mysqlEcv", 40), ("mssqlEcv", 41), ("citrixWiExtended", 42), ("diameter", 44), ("radiusaccounting", 46), ("storeFront", 47), ("tftpExtended", 48), ("appc", 49), ("smpp", 50), ("citrixXncEcv", 52), ("citrixXdm", 53))

class MonitorState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 7))
    namedValues = NamedValues(("monitorStateNotProbed", 0), ("monitorStateDown", 1), ("monitorStateUnknown", 2), ("monitorStateDisabled", 6), ("monitorStateUp", 7))

class ServiceGroupState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class VServerType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("loadbalancing", 1), ("loadbalancinggroup", 2), ("sslvpn", 3), ("contentswitching", 4), ("cacheredirection", 5))

class SvcEntityType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("service", 0), ("serviceGroupMember", 1))

class ActiveActiveState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("active", 1), ("backup", 2))

nsProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4))
rs9000 = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1))
nsSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1))
sysBuildVersion = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBuildVersion.setStatus('current')
if mibBuilder.loadTexts: sysBuildVersion.setDescription('This shows the version of the kernel build running on the netscaler.')
sysIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpAddress.setStatus('current')
if mibBuilder.loadTexts: sysIpAddress.setDescription('This shows the configured ipaddress of the NetScaler')
sysNetmask = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysNetmask.setStatus('current')
if mibBuilder.loadTexts: sysNetmask.setDescription('This shows the configured netmask of the NetScaler')
sysMappedIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMappedIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: sysMappedIpAddress.setDescription('The mapped IP address of the system. This object is now obsolete. All mapped IPs configured on the system are available in the nsIpAddrTable.')
sysMappedIpAddressRange = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMappedIpAddressRange.setStatus('obsolete')
if mibBuilder.loadTexts: sysMappedIpAddressRange.setDescription('...OBSOLETE')
sysHighAvailabilityMode = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 6), HAMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHighAvailabilityMode.setStatus('current')
if mibBuilder.loadTexts: sysHighAvailabilityMode.setDescription('This shows whether NetScaler is in standalone mode or whether it is primary or secondary in case of failover mode.')
sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGateway.setStatus('current')
if mibBuilder.loadTexts: sysGateway.setDescription('This represents the default gateway configured on the NetScaler')
sysCurMappedIpCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCurMappedIpCount.setStatus('current')
if mibBuilder.loadTexts: sysCurMappedIpCount.setDescription('This represents the number of Mapped IPs currently configured on the NetScaler system')
sysCustomID = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCustomID.setStatus('current')
if mibBuilder.loadTexts: sysCustomID.setDescription('Configurable Identifier for the system')
sysHardwareVersionId = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersionId.setStatus('current')
if mibBuilder.loadTexts: sysHardwareVersionId.setDescription('The hardware version ID of the NetScaler system')
sysHardwareVersionDesc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersionDesc.setStatus('current')
if mibBuilder.loadTexts: sysHardwareVersionDesc.setDescription('The hardware version description of the NetScaler system')
sysTotConfigChanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTotConfigChanges.setStatus('current')
if mibBuilder.loadTexts: sysTotConfigChanges.setDescription('The number of times a configuration change was made on the NetScaler appliance.')
sysTotSaveConfigs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTotSaveConfigs.setStatus('current')
if mibBuilder.loadTexts: sysTotSaveConfigs.setDescription('Number of times the system configuration was saved on the NetScaler appliance.')
sysHardwareSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sysHardwareSerialNumber.setDescription('The serial number of the NetScaler system.')
sysHardwareEncodedSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareEncodedSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sysHardwareEncodedSerialNumber.setDescription('The encoded serial no of the NetScaler system.')
sysModelId = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModelId.setStatus('current')
if mibBuilder.loadTexts: sysModelId.setDescription('The model ID is populated if the system is such that it is license controlled.  If the system does not support license based models, then the model id will be zero.')
nsFeatureInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20))
featureWebLogging = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 1), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureWebLogging.setStatus('current')
if mibBuilder.loadTexts: featureWebLogging.setDescription('This represents whether webLogging feature is enabled or disabled on NetScaler.')
featureSurgeProtection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 2), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureSurgeProtection.setStatus('current')
if mibBuilder.loadTexts: featureSurgeProtection.setDescription('This represents whether surgeProtection feature is enabled or disabled on NetScaler.')
featureLoadBalancing = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 3), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureLoadBalancing.setStatus('current')
if mibBuilder.loadTexts: featureLoadBalancing.setDescription('This represents whether LoadBalancing feature is enabled or disabled on NetScaler.')
featureContentSwitching = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 4), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureContentSwitching.setStatus('current')
if mibBuilder.loadTexts: featureContentSwitching.setDescription('This represents whether contentSwitching feature is enabled or disabled on NetScaler.')
featureCacheRedirection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 5), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureCacheRedirection.setStatus('current')
if mibBuilder.loadTexts: featureCacheRedirection.setDescription('This represents whether cacheRedirection feature is enabled or disabled on NetScaler.')
featureSureConnect = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 6), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureSureConnect.setStatus('current')
if mibBuilder.loadTexts: featureSureConnect.setDescription('This represents whether sureConnect feature is enabled or disabled on NetScaler.')
featureCompression = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 7), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureCompression.setStatus('current')
if mibBuilder.loadTexts: featureCompression.setDescription('This represents whether compression feature is enabled or disabled on NetScaler.')
featurePriorityQueuing = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 8), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featurePriorityQueuing.setStatus('current')
if mibBuilder.loadTexts: featurePriorityQueuing.setDescription('This represents whether priorityQueuing feature is enabled or disabled on NetScaler.')
featureSslOffloading = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 9), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureSslOffloading.setStatus('current')
if mibBuilder.loadTexts: featureSslOffloading.setDescription('This represents whether sslOffloading feature is enabled or disabled on NetScaler.')
featureGslb = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 10), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureGslb.setStatus('current')
if mibBuilder.loadTexts: featureGslb.setDescription('This represents whether gslb feature is enabled or disabled on NetScaler.')
featureHttpDosProtection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 11), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureHttpDosProtection.setStatus('current')
if mibBuilder.loadTexts: featureHttpDosProtection.setDescription('This represents whether httpDosProtection feature is enabled or disabled on NetScaler.')
featureDynamicRouting = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 12), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureDynamicRouting.setStatus('obsolete')
if mibBuilder.loadTexts: featureDynamicRouting.setDescription('...OBSOLETE')
featureContentFiltering = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 13), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureContentFiltering.setStatus('current')
if mibBuilder.loadTexts: featureContentFiltering.setDescription('This represents whether contentFiltering feature is enabled or disabled on NetScaler.')
featureInternalCaching = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 14), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureInternalCaching.setStatus('current')
if mibBuilder.loadTexts: featureInternalCaching.setDescription('This represents whether internalCaching feature is enabled or disabled on NetScaler.')
featureSSLVPN = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 15), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureSSLVPN.setStatus('current')
if mibBuilder.loadTexts: featureSSLVPN.setDescription('This represents whether SSL VPN feature is enabled or disabled on NetScaler.')
featureOSPF = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 16), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureOSPF.setStatus('current')
if mibBuilder.loadTexts: featureOSPF.setDescription('This represents whether OSPF feature is enabled or disabled on NetScaler.')
featureRIP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 17), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureRIP.setStatus('current')
if mibBuilder.loadTexts: featureRIP.setDescription('This represents whether RIP feature is enabled or disabled on NetScaler.')
featureBGP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 18), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureBGP.setStatus('current')
if mibBuilder.loadTexts: featureBGP.setDescription('This represents whether BGP feature is enabled or disabled on NetScaler.')
featureRewrite = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 19), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureRewrite.setStatus('current')
if mibBuilder.loadTexts: featureRewrite.setDescription('This represents whether Rewrite feature is enabled or disabled on NetScaler.')
featureDeltaCompression = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 20), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureDeltaCompression.setStatus('current')
if mibBuilder.loadTexts: featureDeltaCompression.setDescription('This represents whether Delta Compression feature is enabled or disabled on NetScaler.')
featureGSLBProximity = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 21), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureGSLBProximity.setStatus('current')
if mibBuilder.loadTexts: featureGSLBProximity.setDescription('This represents whether GSLB Proximity feature is enabled or disabled on NetScaler.')
featureIPv6ProtocolTranslation = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 22), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureIPv6ProtocolTranslation.setStatus('current')
if mibBuilder.loadTexts: featureIPv6ProtocolTranslation.setDescription('This represents whether IPv6 Protocol Translation feature is enabled or disabled on NetScaler.')
featureApplicationFirewall = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 23), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureApplicationFirewall.setStatus('current')
if mibBuilder.loadTexts: featureApplicationFirewall.setDescription('This represents whether Application Firewall feature is enabled or disabled on NetScaler.')
featureResponder = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 24), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureResponder.setStatus('current')
if mibBuilder.loadTexts: featureResponder.setDescription('This represents whether Responder feature is enabled or disabled on NetScaler.')
featureHtmlInjection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 25), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureHtmlInjection.setStatus('current')
if mibBuilder.loadTexts: featureHtmlInjection.setDescription('This represents whether Html Injection feature is enabled or disabled on Netscaler.')
featureAGEE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 50), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureAGEE.setStatus('current')
if mibBuilder.loadTexts: featureAGEE.setDescription('This represents whether AGEE feature of SSLVPN is enabled or disabled on Netscaler.')
featureAAA = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 51), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureAAA.setStatus('current')
if mibBuilder.loadTexts: featureAAA.setDescription('This represents whether Authentication, Authorization and Auditing features for Traffic Management vservers are enabled or disabled on NetScaler.')
featurePLATFORM = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 60), FeaturePlatform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featurePLATFORM.setStatus('current')
if mibBuilder.loadTexts: featurePLATFORM.setDescription('This gives platform information AGEE 1 NSVA 2 etc')
featureAPPFLOW = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 61), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureAPPFLOW.setStatus('current')
if mibBuilder.loadTexts: featureAPPFLOW.setDescription('This represents whether APPFLOW feature is enabled or disable on NetScaler.')
featureISIS = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 62), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureISIS.setStatus('current')
if mibBuilder.loadTexts: featureISIS.setDescription('This represents whether ISIS feature is enabled or disabled on NetScaler.')
featureContentAdapation = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 20, 63), FeatureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureContentAdapation.setStatus('current')
if mibBuilder.loadTexts: featureContentAdapation.setDescription('This represents whether ContentAccelerator feature is enabled or disabled on NetScaler.')
nsModeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21))
modeFastRamp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 1), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeFastRamp.setStatus('current')
if mibBuilder.loadTexts: modeFastRamp.setDescription('This represents whether fastRamp mode is enabled or disabled on NetScaler.')
l2Mode = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 2), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2Mode.setStatus('current')
if mibBuilder.loadTexts: l2Mode.setDescription('This represents whether l2Mode mode is enabled or disabled on NetScaler.')
modeUseSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 3), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeUseSrcIp.setStatus('current')
if mibBuilder.loadTexts: modeUseSrcIp.setDescription('This represents whether useSrcIp mode is enabled or disabled on NetScaler.')
modeClientKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 4), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeClientKeepAlive.setStatus('current')
if mibBuilder.loadTexts: modeClientKeepAlive.setDescription('This represents whether clientKeepAlive mode is enabled or disabled on NetScaler.')
modeTcpBuffering = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 5), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeTcpBuffering.setStatus('current')
if mibBuilder.loadTexts: modeTcpBuffering.setDescription('This represents whether tcpBuffering mode is enabled or disabled on NetScaler.')
modeMacBasedForwarding = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 6), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeMacBasedForwarding.setStatus('current')
if mibBuilder.loadTexts: modeMacBasedForwarding.setDescription('This represents whether macBasedForwarding mode is enabled or disabled on NetScaler.')
modeUseSubnetIp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 7), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeUseSubnetIp.setStatus('current')
if mibBuilder.loadTexts: modeUseSubnetIp.setDescription('This represents whether Use Subnet IP mode is enabled or disabled on NetScaler.')
modeEdgeConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 8), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeEdgeConfiguration.setStatus('current')
if mibBuilder.loadTexts: modeEdgeConfiguration.setDescription('This represents whether Edge Configuration mode is enabled or disabled on NetScaler.')
l3mode = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 9), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3mode.setStatus('current')
if mibBuilder.loadTexts: l3mode.setDescription('This represents whether l3 mode (ip forwarding) is enabled or disabled on NetScaler.')
modePathMTUDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 10), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modePathMTUDiscovery.setStatus('current')
if mibBuilder.loadTexts: modePathMTUDiscovery.setDescription('This represents whether path MTU discovery mode is enabled or disabled on NetScaler.')
modeStaticRouteAdv = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 11), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeStaticRouteAdv.setStatus('current')
if mibBuilder.loadTexts: modeStaticRouteAdv.setDescription('This represents whether static route advertisement mode is enabled or disabled on NetScaler.')
modeDirectRouteAdv = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 12), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeDirectRouteAdv.setStatus('current')
if mibBuilder.loadTexts: modeDirectRouteAdv.setDescription('This represents whether direct route advertisement mode is enabled or disabled on NetScaler.')
modeIntranetRouteAdv = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 13), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeIntranetRouteAdv.setStatus('current')
if mibBuilder.loadTexts: modeIntranetRouteAdv.setDescription('This represents whether intranet route advertisement mode is enabled or disabled on NetScaler.')
brgBpdu = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 14), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgBpdu.setStatus('current')
if mibBuilder.loadTexts: brgBpdu.setDescription('This represents whether Bridging of BPDU is enabled or disabled on NetScaler.')
modeIpv6StaticRouteAdv = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 15), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeIpv6StaticRouteAdv.setStatus('current')
if mibBuilder.loadTexts: modeIpv6StaticRouteAdv.setDescription('This represents whether Ipv6 static route advertisement mode is enabled or disabled on NetScaler.')
modeIpv6DirectRouteAdv = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 16), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modeIpv6DirectRouteAdv.setStatus('current')
if mibBuilder.loadTexts: modeIpv6DirectRouteAdv.setDescription('This represents whether Ipv6 direct route advertisement mode is enabled or disabled on NetScaler.')
mediaclassification = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 21, 17), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaclassification.setStatus('current')
if mibBuilder.loadTexts: mediaclassification.setDescription('This represents whether mediaclassification mode is enabled or disabled on NetScaler.')
nsFiltersGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22))
aclStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1))
aclTotPktsBridgedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsBridgedLow.setStatus('obsolete')
if mibBuilder.loadTexts: aclTotPktsBridgedLow.setDescription('...OBSOLETE')
aclTotPktsBridgedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsBridgedHigh.setStatus('obsolete')
if mibBuilder.loadTexts: aclTotPktsBridgedHigh.setDescription('...OBSOLETE')
aclTotPktsDeniedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsDeniedLow.setStatus('obsolete')
if mibBuilder.loadTexts: aclTotPktsDeniedLow.setDescription('...OBSOLETE')
aclTotPktsDeniedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsDeniedHigh.setStatus('obsolete')
if mibBuilder.loadTexts: aclTotPktsDeniedHigh.setDescription('...OBSOLETE')
aclTotPktsAllowedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsAllowedLow.setStatus('obsolete')
if mibBuilder.loadTexts: aclTotPktsAllowedLow.setDescription('...OBSOLETE')
aclTotPktsAllowedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsAllowedHigh.setStatus('obsolete')
if mibBuilder.loadTexts: aclTotPktsAllowedHigh.setDescription('...OBSOLETE')
aclTotPktsReusedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsReusedLow.setStatus('obsolete')
if mibBuilder.loadTexts: aclTotPktsReusedLow.setDescription('...OBSOLETE')
aclTotPktsReusedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsReusedHigh.setStatus('obsolete')
if mibBuilder.loadTexts: aclTotPktsReusedHigh.setDescription('...OBSOLETE')
aclTotPktsBridged = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsBridged.setStatus('current')
if mibBuilder.loadTexts: aclTotPktsBridged.setDescription('Packets matching a bridge ACL, which is in transparent mode and bypasses service processing.')
aclTotPktsDenied = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsDenied.setStatus('current')
if mibBuilder.loadTexts: aclTotPktsDenied.setDescription('Packets dropped because they match ACLs with processing mode set to DENY.')
aclTotPktsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsAllowed.setStatus('current')
if mibBuilder.loadTexts: aclTotPktsAllowed.setDescription('Packets matching ACLs with processing mode set to ALLOW. NetScaler processes these packets.')
aclTotHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotHits.setStatus('current')
if mibBuilder.loadTexts: aclTotHits.setDescription('Packets matching an ACL.')
aclTotMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotMisses.setStatus('current')
if mibBuilder.loadTexts: aclTotMisses.setDescription('Packets not matching any ACL.')
aclTotPktsNAT = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotPktsNAT.setStatus('current')
if mibBuilder.loadTexts: aclTotPktsNAT.setDescription('Packets matching a NAT ACL, resulting in a NAT session.')
nsAclTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 20), )
if mibBuilder.loadTexts: nsAclTable.setStatus('current')
if mibBuilder.loadTexts: nsAclTable.setDescription('This table contains all the ACLs configured')
nsAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 20, 1), ).setIndexNames((0, "NS-ROOT-MIB", "aclName"))
if mibBuilder.loadTexts: nsAclEntry.setStatus('current')
if mibBuilder.loadTexts: nsAclEntry.setDescription('...')
aclName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 20, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclName.setStatus('current')
if mibBuilder.loadTexts: aclName.setDescription('The name of the ACL')
aclPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclPriority.setStatus('current')
if mibBuilder.loadTexts: aclPriority.setDescription('The priority of the ACL')
aclHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 20, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclHits.setStatus('obsolete')
if mibBuilder.loadTexts: aclHits.setDescription('...OBSOLETE')
aclperHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 20, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclperHits.setStatus('current')
if mibBuilder.loadTexts: aclperHits.setDescription('Number of times the acl was hit')
aclFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 20, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclFullName.setStatus('current')
if mibBuilder.loadTexts: aclFullName.setDescription('The full name of the ACL')
aclTotCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclTotCount.setStatus('current')
if mibBuilder.loadTexts: aclTotCount.setDescription('Total number of ACL rules configured.')
contentFiltersTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 2), )
if mibBuilder.loadTexts: contentFiltersTable.setStatus('obsolete')
if mibBuilder.loadTexts: contentFiltersTable.setDescription('...OBSOLETE')
contentFiltersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "contentFilterName"))
if mibBuilder.loadTexts: contentFiltersEntry.setStatus('obsolete')
if mibBuilder.loadTexts: contentFiltersEntry.setDescription('...OBSOLETE')
contentFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contentFilterName.setStatus('obsolete')
if mibBuilder.loadTexts: contentFilterName.setDescription('...OBSOLETE')
contentFilterHitsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contentFilterHitsLow.setStatus('obsolete')
if mibBuilder.loadTexts: contentFilterHitsLow.setDescription('...OBSOLETE')
contentFilterHitsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contentFilterHitsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: contentFilterHitsHigh.setDescription('...OBSOLETE')
contentFilterHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contentFilterHits.setStatus('obsolete')
if mibBuilder.loadTexts: contentFilterHits.setDescription('...OBSOLETE')
saclStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 3))
saclTotPktsBridged = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saclTotPktsBridged.setStatus('current')
if mibBuilder.loadTexts: saclTotPktsBridged.setDescription('Total packets that matched a SimpleACL with action BRIDGE and got bridged by NetScaler.')
saclTotPktsDenied = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saclTotPktsDenied.setStatus('current')
if mibBuilder.loadTexts: saclTotPktsDenied.setDescription('Packets dropped because they match SimpleACL (Access Control List) with processing mode set to DENY.')
saclTotPktsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saclTotPktsAllowed.setStatus('current')
if mibBuilder.loadTexts: saclTotPktsAllowed.setDescription('Total packets that matched a SimpleACL with action ALLOW and got consumed by NetScaler.')
saclTotHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saclTotHits.setStatus('current')
if mibBuilder.loadTexts: saclTotHits.setDescription('Packets matching a SimpleACL.')
saclTotMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saclTotMisses.setStatus('current')
if mibBuilder.loadTexts: saclTotMisses.setDescription('Packets not matching any SimpleACL.')
saclsCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saclsCount.setStatus('current')
if mibBuilder.loadTexts: saclsCount.setDescription('Number of SimpleACLs configured.')
acl6StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4))
nsAcl6Table = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 20), )
if mibBuilder.loadTexts: nsAcl6Table.setStatus('current')
if mibBuilder.loadTexts: nsAcl6Table.setDescription('This table contains all the ACLs6 configured')
nsAcl6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 20, 1), ).setIndexNames((0, "NS-ROOT-MIB", "acAclName"))
if mibBuilder.loadTexts: nsAcl6Entry.setStatus('current')
if mibBuilder.loadTexts: nsAcl6Entry.setDescription('...')
acAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 20, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAclName.setStatus('current')
if mibBuilder.loadTexts: acAclName.setDescription('The name of the ACL6')
acl6Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6Priority.setStatus('current')
if mibBuilder.loadTexts: acl6Priority.setDescription('The priority of the ACL6')
acl6perHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 20, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6perHits.setStatus('current')
if mibBuilder.loadTexts: acl6perHits.setDescription('Number of times the acl6 was hit')
acl6FullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 20, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6FullName.setStatus('current')
if mibBuilder.loadTexts: acl6FullName.setDescription('The full name of the ACL6')
acl6TotPktsBridged = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotPktsBridged.setStatus('current')
if mibBuilder.loadTexts: acl6TotPktsBridged.setDescription('Packets matching a bridge IPv6 ACL, which is in transparent mode and bypasses service processing.')
acl6TotPktsDenied = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotPktsDenied.setStatus('current')
if mibBuilder.loadTexts: acl6TotPktsDenied.setDescription('Packets dropped because they match IPv6 ACLs with processing mode set to DENY.')
acl6TotPktsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotPktsAllowed.setStatus('current')
if mibBuilder.loadTexts: acl6TotPktsAllowed.setDescription('Packets matching IPv6 ACLs with processing mode set to ALLOW. NetScaler processes these packets.')
acl6TotPktsNAT = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotPktsNAT.setStatus('current')
if mibBuilder.loadTexts: acl6TotPktsNAT.setDescription('Packets matching a NAT ACL6, resulting in a NAT session.')
acl6TotHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotHits.setStatus('current')
if mibBuilder.loadTexts: acl6TotHits.setDescription('Packets matching an IPv6 ACL.')
acl6TotMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotMisses.setStatus('current')
if mibBuilder.loadTexts: acl6TotMisses.setDescription('Packets not matching any IPv6 ACL.')
acl6TotPktsNAT64 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotPktsNAT64.setStatus('current')
if mibBuilder.loadTexts: acl6TotPktsNAT64.setDescription('Packets matching a NAT64 ACL6, resulting in a NAT64 translation.')
acl6TotCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 4, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acl6TotCount.setStatus('current')
if mibBuilder.loadTexts: acl6TotCount.setDescription('Total number of ACL6 rules configured.')
pbrStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5))
nsPbrTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 20), )
if mibBuilder.loadTexts: nsPbrTable.setStatus('current')
if mibBuilder.loadTexts: nsPbrTable.setDescription('This table contains all the PBRs configured')
nsPbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 20, 1), ).setIndexNames((0, "NS-ROOT-MIB", "pbrName"))
if mibBuilder.loadTexts: nsPbrEntry.setStatus('current')
if mibBuilder.loadTexts: nsPbrEntry.setDescription('...')
pbrName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 20, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrName.setStatus('current')
if mibBuilder.loadTexts: pbrName.setDescription('The name of the PBR')
pbrFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 20, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrFullName.setStatus('current')
if mibBuilder.loadTexts: pbrFullName.setDescription('The Full name of the PBR')
pbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrPriority.setStatus('current')
if mibBuilder.loadTexts: pbrPriority.setDescription('The priority of the PBR')
pbrperHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 20, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrperHits.setStatus('current')
if mibBuilder.loadTexts: pbrperHits.setDescription('Number of times the pbr was hit')
pbrTotPktsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrTotPktsAllowed.setStatus('current')
if mibBuilder.loadTexts: pbrTotPktsAllowed.setDescription('Total packets that matched the PBR (Policy-Based Routes) with action ALLOW ')
pbrTotPktsDenied = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrTotPktsDenied.setStatus('current')
if mibBuilder.loadTexts: pbrTotPktsDenied.setDescription('Total packets that matched the PBR with action DENY ')
pbrTotHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrTotHits.setStatus('current')
if mibBuilder.loadTexts: pbrTotHits.setDescription('Total packets that matched one of the configured PBR')
pbrTotMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrTotMisses.setStatus('current')
if mibBuilder.loadTexts: pbrTotMisses.setDescription('Total packets that did not match any PBR')
pbrTotNullDrop = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 5, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbrTotNullDrop.setStatus('current')
if mibBuilder.loadTexts: pbrTotNullDrop.setDescription('Total packets that are dropped due to null nexthop')
sacl6StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 6))
sacl6TotPktsBridged = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 6, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sacl6TotPktsBridged.setStatus('current')
if mibBuilder.loadTexts: sacl6TotPktsBridged.setDescription('Total packets that matched a SimpleACL6 with action BRIDGE and got bridged by NetScaler.')
sacl6TotPktsDenied = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 6, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sacl6TotPktsDenied.setStatus('current')
if mibBuilder.loadTexts: sacl6TotPktsDenied.setDescription('Packets dropped because they match SimpleACL6 with processing mode set to DENY.')
sacl6TotPktsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 6, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sacl6TotPktsAllowed.setStatus('current')
if mibBuilder.loadTexts: sacl6TotPktsAllowed.setDescription('Total packets that matched a SimpleACL6 with action ALLOW and got consumed by NetScaler.')
sacl6TotHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 6, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sacl6TotHits.setStatus('current')
if mibBuilder.loadTexts: sacl6TotHits.setDescription('Packets matching a SimpleACL6.')
sacl6TotMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 6, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sacl6TotMisses.setStatus('current')
if mibBuilder.loadTexts: sacl6TotMisses.setDescription('Packets not matching any SimpleACL6.')
sacl6sCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 6, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sacl6sCount.setStatus('current')
if mibBuilder.loadTexts: sacl6sCount.setDescription('Number of SimpleACL6s configured.')
pbr6StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7))
nsPbr6Table = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 20), )
if mibBuilder.loadTexts: nsPbr6Table.setStatus('current')
if mibBuilder.loadTexts: nsPbr6Table.setDescription('This table contains all the PBRs configured')
nsPbr6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 20, 1), ).setIndexNames((0, "NS-ROOT-MIB", "acPbrName"))
if mibBuilder.loadTexts: nsPbr6Entry.setStatus('current')
if mibBuilder.loadTexts: nsPbr6Entry.setDescription('...')
acPbrName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 20, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPbrName.setStatus('current')
if mibBuilder.loadTexts: acPbrName.setDescription('The name of the PBR6')
pbr6FullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 20, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6FullName.setStatus('current')
if mibBuilder.loadTexts: pbr6FullName.setDescription('The full name of the PBR6')
pbr6Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6Priority.setStatus('current')
if mibBuilder.loadTexts: pbr6Priority.setDescription('The priority of the PBR6')
pbr6perHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 20, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6perHits.setStatus('current')
if mibBuilder.loadTexts: pbr6perHits.setDescription('Number of times the pbr6 was hit')
pbr6TotPktsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6TotPktsAllowed.setStatus('current')
if mibBuilder.loadTexts: pbr6TotPktsAllowed.setDescription('Total packets that matched the PBR6 with action ALLOW ')
pbr6TotPktsDenied = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6TotPktsDenied.setStatus('current')
if mibBuilder.loadTexts: pbr6TotPktsDenied.setDescription('Total packets that matched PBR6 with action DENY ')
pbr6TotHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6TotHits.setStatus('current')
if mibBuilder.loadTexts: pbr6TotHits.setDescription('Total packets that matched one of the configured PBR6')
pbr6TotMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6TotMisses.setStatus('current')
if mibBuilder.loadTexts: pbr6TotMisses.setDescription('Total packets that did not match any PBR6')
pbr6TotNullDrop = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 22, 7, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbr6TotNullDrop.setStatus('current')
if mibBuilder.loadTexts: pbr6TotNullDrop.setDescription('Total packets that are dropped due to null next hop')
nsHighAvailabilityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23))
haPeerId = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPeerId.setStatus('current')
if mibBuilder.loadTexts: haPeerId.setDescription('The unique identifier to represent the failover peer NetScaler')
haPeerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: haPeerIpAddress.setDescription('This represents the ipaddress of the failover peer NetScaler(Only for HA over IPv4). For HA over IPv6 (as well as IPv4) haPeerInetAddr will contain this information.')
haPeerState = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 3), HAMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPeerState.setStatus('current')
if mibBuilder.loadTexts: haPeerState.setDescription('This represents the state of the failover peer NetScaler whether Primary or Secondary')
haTotStateTransitions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haTotStateTransitions.setStatus('current')
if mibBuilder.loadTexts: haTotStateTransitions.setDescription('Total number of master state changes that the NetScaler appliance has made from primary to secondary and vice-versa.')
haTimeofLastStateTransition = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haTimeofLastStateTransition.setStatus('current')
if mibBuilder.loadTexts: haTimeofLastStateTransition.setDescription('This represents the time since the NetScaler underwent a state change from primary to secondary or vice-versa')
haTotStateFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haTotStateFail.setStatus('current')
if mibBuilder.loadTexts: haTotStateFail.setDescription('Number of times state changed to PARTIAL_FAIL/PARTIAL_FAIL_SSL/ROUTEMONITOR_FAIL/COMPLETE_FAIL.')
haErrSyncFailure = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrSyncFailure.setStatus('current')
if mibBuilder.loadTexts: haErrSyncFailure.setDescription('Number of times the configuration of the primary and secondary nodes failed to synchronize since that last transition. A synchronization failure results in mismatched configuration. It can be caused by a mismatch in the Remote Procedural Call (RPC) password on the two nodes forming the high availability pair.')
haErrTotNodeDown = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrTotNodeDown.setStatus('current')
if mibBuilder.loadTexts: haErrTotNodeDown.setDescription('Total number of heart-beats missed while the peer node was DOWN.')
haErrPropMemFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrPropMemFail.setStatus('current')
if mibBuilder.loadTexts: haErrPropMemFail.setDescription('Total number of times memory allocation failed during command propagation.')
haErrNsbMemFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrNsbMemFail.setStatus('current')
if mibBuilder.loadTexts: haErrNsbMemFail.setDescription('Total number of times memory allocation failed while sending heartbeats.')
haErrPortSilent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrPortSilent.setStatus('current')
if mibBuilder.loadTexts: haErrPortSilent.setDescription('Total number of times heartbeat packets were not received on any enabled interface for the duration of the Dead Interval.')
haTotTimerRecoveries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haTotTimerRecoveries.setStatus('current')
if mibBuilder.loadTexts: haTotTimerRecoveries.setDescription('Total number of times HA engine recovered from tight loops. (i.e., Total number of times HA timers are not called for MAX down time).')
haErrSwMonitorFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrSwMonitorFail.setStatus('obsolete')
if mibBuilder.loadTexts: haErrSwMonitorFail.setDescription('...OBSOLETE')
haNicsMonitorFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haNicsMonitorFailed.setStatus('current')
if mibBuilder.loadTexts: haNicsMonitorFailed.setDescription('Interfaces on which HA heartbeats are not being seen')
haLastMasterStateTransitionReason = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haLastMasterStateTransitionReason.setStatus('current')
if mibBuilder.loadTexts: haLastMasterStateTransitionReason.setDescription('The reason for the last master state transition. This gives the conditions under which this node assumed the current state. The current state         is available at the oid sysHighAvailabilityMode.0')
haPeerSystemState = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 16), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: haPeerSystemState.setStatus('current')
if mibBuilder.loadTexts: haPeerSystemState.setDescription('HA peer system state')
haErrPropTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrPropTimeout.setStatus('current')
if mibBuilder.loadTexts: haErrPropTimeout.setDescription('Number of times propagation timed out.')
haCurDerivedInc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haCurDerivedInc.setStatus('current')
if mibBuilder.loadTexts: haCurDerivedInc.setDescription('Derived incarnation based on IOCTLs received.')
haCurPeerInc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haCurPeerInc.setStatus('current')
if mibBuilder.loadTexts: haCurPeerInc.setDescription("The peer's incarnation as seen from heartbeats.")
haErrMasterDispute = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haErrMasterDispute.setStatus('current')
if mibBuilder.loadTexts: haErrMasterDispute.setDescription('Number of HA master disputes.')
haTotPktTx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haTotPktTx.setStatus('current')
if mibBuilder.loadTexts: haTotPktTx.setDescription('Number of heartbeat packets sent to the peer node. Heartbeats are sent at regular intervals (default is 200 milliseconds) to determine the state of the peer node.')
haTotPktRx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haTotPktRx.setStatus('current')
if mibBuilder.loadTexts: haTotPktRx.setDescription('Number of heartbeat packets received from the peer node. Heartbeats are sent at regular intervals (default is 200 milliseconds) to determine the state of the peer node.')
haCurStatus = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 23), HAON()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haCurStatus.setStatus('current')
if mibBuilder.loadTexts: haCurStatus.setDescription('Whether a NetScaler appliance is configured for high availability. Possible values are YES and NO. If the value is NO, the high availability statistics below are invalid.')
haCurState = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 24), HAState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haCurState.setStatus('current')
if mibBuilder.loadTexts: haCurState.setDescription('State of the HA node, based on its health, in a high availability setup. Possible values are: \nUP  Indicates that the node is accessible and can function as either a primary or secondary node.\nDISABLED  Indicates that the high availability status of the node has been manually disabled. Synchronization and propagation cannot take place between the peer nodes.\nINIT  Indicates that the node is in the process of becoming part of the high availability configuration. \nPARTIALFAIL  Indicates that one of the high availability monitored interfaces has failed because of a card or link failure. This state triggers a failover.\nCOMPLETEFAIL  Indicates that all the interfaces of the node are unusable, because the interfaces on which high availability monitoring is enabled are not connected or are manually disabled. This state triggers a failover.\nDUMB  Indicates that the node is in listening mode. It does not participate in high availability transitions or transfer configuration from the peer node. This is a configured value, not a statistic.\nPARTIALFAILSSL  Indicates that the SSL card has failed. This state triggers a failover.\nROUTEMONITORFAIL  Indicates that the route monitor has failed. This state triggers a failover.')
haPeerInetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 25), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPeerInetAddrType.setStatus('current')
if mibBuilder.loadTexts: haPeerInetAddrType.setDescription('The address type of haPeerInetAddr')
haPeerInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 26), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPeerInetAddr.setStatus('current')
if mibBuilder.loadTexts: haPeerInetAddr.setDescription('This represents the Internet Address of the failover peer NetScaler')
haNicMonitorSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 27), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: haNicMonitorSucceeded.setStatus('current')
if mibBuilder.loadTexts: haNicMonitorSucceeded.setDescription('Heartbeat succeeded on this nic.')
haLastNicMonitorFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 23, 28), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: haLastNicMonitorFailed.setStatus('current')
if mibBuilder.loadTexts: haLastNicMonitorFailed.setDescription('Heartbeat failed on this nic.')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
if mibBuilder.loadTexts: vlanTable.setDescription('The vlan related statistics Table.')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vlanId"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
if mibBuilder.loadTexts: vlanEntry.setDescription('...')
vlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanId.setStatus('current')
if mibBuilder.loadTexts: vlanId.setDescription('This represents the unique id of the vlan')
vlanMemberInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMemberInterfaces.setStatus('current')
if mibBuilder.loadTexts: vlanMemberInterfaces.setDescription('This represents the list of interfaces on the NetScaler that are members of the vlan ')
vlanTaggedInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTaggedInterfaces.setStatus('current')
if mibBuilder.loadTexts: vlanTaggedInterfaces.setDescription('This represents the list of interfaces on the NetScaler that are members of the vlan that carry tagged packets')
vlanTotRxPktsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotRxPktsLow.setStatus('obsolete')
if mibBuilder.loadTexts: vlanTotRxPktsLow.setDescription('...OBSOLETE')
vlanTotRxPktsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotRxPktsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: vlanTotRxPktsHigh.setDescription('...OBSOLETE')
vlanTotRxBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotRxBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: vlanTotRxBytesLow.setDescription('...OBSOLETE')
vlanTotRxBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotRxBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: vlanTotRxBytesHigh.setDescription('...OBSOLETE')
vlanTotTxPktsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotTxPktsLow.setStatus('obsolete')
if mibBuilder.loadTexts: vlanTotTxPktsLow.setDescription('...OBSOLETE')
vlanTotTxPktsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotTxPktsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: vlanTotTxPktsHigh.setDescription('...OBSOLETE')
vlanTotTxBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotTxBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: vlanTotTxBytesLow.setDescription('...OBSOLETE')
vlanTotTxBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotTxBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: vlanTotTxBytesHigh.setDescription('...OBSOLETE')
vlanTotDroppedPktsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotDroppedPktsLow.setStatus('obsolete')
if mibBuilder.loadTexts: vlanTotDroppedPktsLow.setDescription('...OBSOLETE')
vlanTotDroppedPktsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotDroppedPktsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: vlanTotDroppedPktsHigh.setDescription('...OBSOLETE')
vlanTotBroadcastPktsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotBroadcastPktsLow.setStatus('obsolete')
if mibBuilder.loadTexts: vlanTotBroadcastPktsLow.setDescription('...OBSOLETE')
vlanTotBroadcastPktsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotBroadcastPktsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: vlanTotBroadcastPktsHigh.setDescription('...OBSOLETE')
vlanTotRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotRxPkts.setStatus('current')
if mibBuilder.loadTexts: vlanTotRxPkts.setDescription('Packets received on the VLAN.')
vlanTotRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotRxBytes.setStatus('current')
if mibBuilder.loadTexts: vlanTotRxBytes.setDescription('Bytes of data received on the VLAN.')
vlanTotTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotTxPkts.setStatus('current')
if mibBuilder.loadTexts: vlanTotTxPkts.setDescription('Packets transmitted on the VLAN.')
vlanTotTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotTxBytes.setStatus('current')
if mibBuilder.loadTexts: vlanTotTxBytes.setDescription('Bytes of data transmitted on the VLAN.')
vlanTotDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: vlanTotDroppedPkts.setDescription('Inbound packets dropped by the VLAN upon reception.')
vlanTotBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: vlanTotBroadcastPkts.setDescription('Broadcast packets sent and received on the VLAN.')
vlanBindIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanBindIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: vlanBindIpAddress.setDescription('...OBSOLETE')
vlanBindIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanBindIpNetmask.setStatus('obsolete')
if mibBuilder.loadTexts: vlanBindIpNetmask.setDescription('...OBSOLETE')
vlanBridgeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanBridgeGroup.setStatus('current')
if mibBuilder.loadTexts: vlanBridgeGroup.setDescription('This represents the bridge group to which this vlan is bound.')
vlanAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 24, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanAliasName.setStatus('current')
if mibBuilder.loadTexts: vlanAliasName.setDescription('This is vlan alias name if configured')
nsIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26), )
if mibBuilder.loadTexts: nsIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: nsIpAddrTable.setDescription('This table contains information about the IP addresses configured on the NetScaler.')
nsIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1), ).setIndexNames((0, "NS-ROOT-MIB", "ipAddr"))
if mibBuilder.loadTexts: nsIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: nsIpAddrEntry.setDescription('...')
ipAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddr.setStatus('current')
if mibBuilder.loadTexts: ipAddr.setDescription('This represents an IP address configured on the NetScaler')
ipNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNetmask.setStatus('current')
if mibBuilder.loadTexts: ipNetmask.setDescription('This represents the Netmask')
ipType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 3), IpAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipType.setStatus('current')
if mibBuilder.loadTexts: ipType.setDescription('This represents the IP address type')
ipMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 4), IpAddressMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMode.setStatus('current')
if mibBuilder.loadTexts: ipMode.setDescription('This represents the IP address mode')
ipFreePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFreePorts.setStatus('current')
if mibBuilder.loadTexts: ipFreePorts.setDescription('This represents the number of unused ports free on this IP')
ipVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipVlan.setStatus('current')
if mibBuilder.loadTexts: ipVlan.setDescription('The vlan to which this ip address is bound.')
ipBridgeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipBridgeGroup.setStatus('current')
if mibBuilder.loadTexts: ipBridgeGroup.setDescription('The bridge group to which this ip address is bound.')
ipVxlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 26, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipVxlan.setStatus('current')
if mibBuilder.loadTexts: ipVxlan.setDescription('The vxlan to which this ip address is bound.')
nsResourceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41))
resCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resCpuUsage.setStatus('current')
if mibBuilder.loadTexts: resCpuUsage.setDescription('CPU utilization percentage.')
resMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resMemUsage.setStatus('current')
if mibBuilder.loadTexts: resMemUsage.setDescription('Percentage of memory utilization on NetScaler.')
numCPUs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numCPUs.setStatus('current')
if mibBuilder.loadTexts: numCPUs.setDescription('The number of active CPUs.')
memSizeMB = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSizeMB.setStatus('current')
if mibBuilder.loadTexts: memSizeMB.setDescription('Total amount of system memory, in megabytes.')
numSSLCards = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numSSLCards.setStatus('current')
if mibBuilder.loadTexts: numSSLCards.setDescription('Number of SSL Cards on the system')
nsCPUTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 6), )
if mibBuilder.loadTexts: nsCPUTable.setStatus('current')
if mibBuilder.loadTexts: nsCPUTable.setDescription('This table contains information about each CPU in NetScaler.')
nsCPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 6, 1), ).setIndexNames((0, "NS-ROOT-MIB", "nsCPUname"))
if mibBuilder.loadTexts: nsCPUEntry.setStatus('current')
if mibBuilder.loadTexts: nsCPUEntry.setDescription('...')
nsCPUname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 6, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCPUname.setStatus('current')
if mibBuilder.loadTexts: nsCPUname.setDescription('The name of the CPU.')
nsCPUusage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCPUusage.setStatus('current')
if mibBuilder.loadTexts: nsCPUusage.setDescription('CPU utilization percentage.')
nsSysHealthTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 7), )
if mibBuilder.loadTexts: nsSysHealthTable.setStatus('current')
if mibBuilder.loadTexts: nsSysHealthTable.setDescription('This table contains information about the System Health status of the NetScaler.')
nsSysHealthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 7, 1), ).setIndexNames((0, "NS-ROOT-MIB", "sysHealthCounterName"))
if mibBuilder.loadTexts: nsSysHealthEntry.setStatus('current')
if mibBuilder.loadTexts: nsSysHealthEntry.setDescription('...')
sysHealthCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 7, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHealthCounterName.setStatus('current')
if mibBuilder.loadTexts: sysHealthCounterName.setDescription("This is the health counter name. The counter name is composed with the type of the counter and what it is intended to carry. All voltage counters stats with 'v', fan counters starts with 'fan' and temperature counters starts with 't'. Eg:'v50p' is a voltage counter that carries the value of the +5v counter.")
sysHealthCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHealthCounterValue.setStatus('current')
if mibBuilder.loadTexts: sysHealthCounterValue.setDescription("The health counters value. The units are 'mv', RPM and degrees Celsius for voltage, fan and temperatures respectively.")
nsSysHealthDiskTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 8), )
if mibBuilder.loadTexts: nsSysHealthDiskTable.setStatus('current')
if mibBuilder.loadTexts: nsSysHealthDiskTable.setDescription('This table contains information about the disk space of the NetScaler.')
nsSysHealthDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 8, 1), ).setIndexNames((0, "NS-ROOT-MIB", "sysHealthDiskName"))
if mibBuilder.loadTexts: nsSysHealthDiskEntry.setStatus('current')
if mibBuilder.loadTexts: nsSysHealthDiskEntry.setDescription('...')
sysHealthDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 8, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHealthDiskName.setStatus('current')
if mibBuilder.loadTexts: sysHealthDiskName.setDescription("The disk name. Disk name always starts with the 'disk' keyword. Eg: disk0, disk1. Currently disk0 is mapped to /flash and disk1 mapped to /var partitions.")
sysHealthDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHealthDiskSize.setStatus('current')
if mibBuilder.loadTexts: sysHealthDiskSize.setDescription('The total disk space in MBytes (includes available and used spaces also).')
sysHealthDiskAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHealthDiskAvail.setStatus('current')
if mibBuilder.loadTexts: sysHealthDiskAvail.setDescription('The total disk space available in MBytes.')
sysHealthDiskUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHealthDiskUsed.setStatus('current')
if mibBuilder.loadTexts: sysHealthDiskUsed.setDescription('The total disk space used in MBytes.')
sysHealthDiskPerusage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHealthDiskPerusage.setStatus('current')
if mibBuilder.loadTexts: sysHealthDiskPerusage.setDescription('The Percentage of the disk space used.')
cpuSpeedMHz = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuSpeedMHz.setStatus('current')
if mibBuilder.loadTexts: cpuSpeedMHz.setDescription('CPU speed in MHz.')
numPEs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPEs.setStatus('current')
if mibBuilder.loadTexts: numPEs.setDescription('The Netscaler number of PEs running')
sysStatisticsTime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 41, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatisticsTime.setStatus('current')
if mibBuilder.loadTexts: sysStatisticsTime.setDescription('This gives the timestamp of the statistics returned by SNMP counter values. This can be used for calculating the rate of increments for Counter and Counter64 type of OIDs.')
nsIpStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43))
ipTotRxPktsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxPktsLow.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotRxPktsLow.setDescription('...OBSOLETE')
ipTotRxPktsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxPktsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotRxPktsHigh.setDescription('...OBSOLETE')
ipTotRxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotRxBytesLow.setDescription('...OBSOLETE')
ipTotRxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotRxBytesHigh.setDescription('...OBSOLETE')
ipTotRxMbitsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxMbitsLow.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotRxMbitsLow.setDescription('...OBSOLETE')
ipTotRxMbitsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxMbitsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotRxMbitsHigh.setDescription('...OBSOLETE')
ipTotTxPktsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxPktsLow.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotTxPktsLow.setDescription('...OBSOLETE')
ipTotTxPktsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxPktsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotTxPktsHigh.setDescription('...OBSOLETE')
ipTotTxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotTxBytesLow.setDescription('...OBSOLETE')
ipTotTxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotTxBytesHigh.setDescription('...OBSOLETE')
ipTotTxMbitsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxMbitsLow.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotTxMbitsLow.setDescription('...OBSOLETE')
ipTotTxMbitsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxMbitsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotTxMbitsHigh.setDescription('...OBSOLETE')
ipTotFragmentsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotFragmentsLow.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotFragmentsLow.setDescription('...OBSOLETE')
ipTotFragmentsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotFragmentsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotFragmentsHigh.setDescription('...OBSOLETE')
ipTotBadlensLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadlensLow.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotBadlensLow.setDescription('...OBSOLETE')
ipTotBadlensHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadlensHigh.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotBadlensHigh.setDescription('...OBSOLETE')
ipTotBadMacAddrsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadMacAddrsLow.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotBadMacAddrsLow.setDescription('...OBSOLETE')
ipTotBadMacAddrsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadMacAddrsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotBadMacAddrsHigh.setDescription('...OBSOLETE')
ipTotMaxClientsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotMaxClientsLow.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotMaxClientsLow.setDescription('...OBSOLETE')
ipTotMaxClientsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotMaxClientsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotMaxClientsHigh.setDescription('...OBSOLETE')
ipTotUnknownSvcsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotUnknownSvcsLow.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotUnknownSvcsLow.setDescription('...OBSOLETE')
ipTotUnknownSvcsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotUnknownSvcsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotUnknownSvcsHigh.setDescription('...OBSOLETE')
ipTotLandattacksLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotLandattacksLow.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotLandattacksLow.setDescription('...OBSOLETE')
ipTotLandattacksHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotLandattacksHigh.setStatus('obsolete')
if mibBuilder.loadTexts: ipTotLandattacksHigh.setDescription('...OBSOLETE')
ipTotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxPkts.setStatus('current')
if mibBuilder.loadTexts: ipTotRxPkts.setDescription('IP packets received.')
ipTotRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxBytes.setStatus('current')
if mibBuilder.loadTexts: ipTotRxBytes.setDescription('Bytes of IP data received.')
ipTotRxMbits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotRxMbits.setStatus('current')
if mibBuilder.loadTexts: ipTotRxMbits.setDescription('Megabits of IP data received.')
ipTotTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxPkts.setStatus('current')
if mibBuilder.loadTexts: ipTotTxPkts.setDescription('IP packets transmitted.')
ipTotTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxBytes.setStatus('current')
if mibBuilder.loadTexts: ipTotTxBytes.setDescription('Bytes of IP data transmitted.')
ipTotTxMbits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTxMbits.setStatus('current')
if mibBuilder.loadTexts: ipTotTxMbits.setDescription('Megabits of IP data transmitted.')
ipTotFragments = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotFragments.setStatus('current')
if mibBuilder.loadTexts: ipTotFragments.setDescription('IP fragments received.')
ipTotBadlens = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadlens.setStatus('current')
if mibBuilder.loadTexts: ipTotBadlens.setDescription('Packets received with a length greater than the normal maximum transmission unit of 1514 bytes.')
ipTotBadMacAddrs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadMacAddrs.setStatus('current')
if mibBuilder.loadTexts: ipTotBadMacAddrs.setDescription('IP packets transmitted with a bad MAC address.')
ipTotMaxClients = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotMaxClients.setStatus('current')
if mibBuilder.loadTexts: ipTotMaxClients.setDescription('Attempts to open a new connection to a service for which the maximum limit has been exceeded. Default value, 0, applies no limit.')
ipTotUnknownSvcs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotUnknownSvcs.setStatus('current')
if mibBuilder.loadTexts: ipTotUnknownSvcs.setDescription('Packets received on a port or service that is not configured.')
ipTotLandattacks = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotLandattacks.setStatus('current')
if mibBuilder.loadTexts: ipTotLandattacks.setDescription('Land-attack packets received. The source and destination addresses are the same.')
ipTotBadChecksums = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadChecksums.setStatus('current')
if mibBuilder.loadTexts: ipTotBadChecksums.setDescription('Packets received with an IP checksum error.')
ipTotReassemblyAttempt = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotReassemblyAttempt.setStatus('current')
if mibBuilder.loadTexts: ipTotReassemblyAttempt.setDescription('IP packets that the NetScaler attempts to reassemble. If one of the fragments is missing, the whole packet is dropped.')
ipTotSuccReassembly = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotSuccReassembly.setStatus('current')
if mibBuilder.loadTexts: ipTotSuccReassembly.setDescription('Fragmented IP packets successfully reassembled on the NetScaler.')
ipTotUnsuccReassembly = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotUnsuccReassembly.setStatus('current')
if mibBuilder.loadTexts: ipTotUnsuccReassembly.setDescription('Packets received that could not be reassembled. This can occur when there is a checksum failure, an identification field mismatch, or when one of the fragments is missing.')
ipTotTooBig = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTooBig.setStatus('current')
if mibBuilder.loadTexts: ipTotTooBig.setDescription('Packets received for which the reassembled data exceeds the Ethernet packet data length of 1500 bytes.')
ipTotZeroFragmentLen = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotZeroFragmentLen.setStatus('current')
if mibBuilder.loadTexts: ipTotZeroFragmentLen.setDescription('Packets received with a fragment length of 0 bytes.')
ipTotDupFragments = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotDupFragments.setStatus('current')
if mibBuilder.loadTexts: ipTotDupFragments.setDescription('Duplicate IP fragments received. This can occur when the acknowledgement was not received within the expected time.')
ipTotOutOfOrderFrag = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotOutOfOrderFrag.setStatus('current')
if mibBuilder.loadTexts: ipTotOutOfOrderFrag.setDescription('Fragments received that are out of order.')
ipTotUnknownDstRcvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotUnknownDstRcvd.setStatus('current')
if mibBuilder.loadTexts: ipTotUnknownDstRcvd.setDescription('Packets received in which the destination IP address was not reachable or not owned by the NetScaler.')
ipTotBadTransport = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotBadTransport.setStatus('current')
if mibBuilder.loadTexts: ipTotBadTransport.setDescription('Packets received in which the protocol specified in the IP header is unknown to the NetScaler.')
ipTotVIPDown = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotVIPDown.setStatus('current')
if mibBuilder.loadTexts: ipTotVIPDown.setDescription('Packets received for which the VIP is down. This can occur when all the services bound to the VIP are down or the VIP is manually disabled.')
ipTotFixHeaderFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotFixHeaderFail.setStatus('current')
if mibBuilder.loadTexts: ipTotFixHeaderFail.setDescription('Packets received that contain an error in one or more components of the IP header.')
ipTotAddrLookup = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotAddrLookup.setStatus('current')
if mibBuilder.loadTexts: ipTotAddrLookup.setDescription('IP address lookups performed by the NetScaler. When a packet is received on a non-established session, the NetScaler checks if the destination IP address is one of the NetScaler owned IP addresses.')
ipTotAddrLookupFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotAddrLookupFail.setStatus('current')
if mibBuilder.loadTexts: ipTotAddrLookupFail.setDescription('IP address lookups performed by the NetScaler that have failed because the destination IP address of the packet does not match any of the NetScaler owned IP addresses.')
ipTotUDPfragmentsFwd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotUDPfragmentsFwd.setStatus('current')
if mibBuilder.loadTexts: ipTotUDPfragmentsFwd.setDescription('UDP fragments forwarded to the client or the server.')
ipTotTCPfragmentsFwd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTCPfragmentsFwd.setStatus('current')
if mibBuilder.loadTexts: ipTotTCPfragmentsFwd.setDescription('TCP fragments forwarded to the client or the server.')
ipTotFragPktsGen = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotFragPktsGen.setStatus('current')
if mibBuilder.loadTexts: ipTotFragPktsGen.setDescription('Fragmented packets created by the NetScaler.')
ipTotInvalidHeaderSz = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotInvalidHeaderSz.setStatus('current')
if mibBuilder.loadTexts: ipTotInvalidHeaderSz.setDescription('Packets received in which an invalid data length is specified, or the value in the length field and the actual data length do not match. The range for the Ethernet packet data length is 0-1500 bytes.')
ipTotInvalidPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotInvalidPacketSize.setStatus('current')
if mibBuilder.loadTexts: ipTotInvalidPacketSize.setDescription('Total number of packets received by NetScaler with invalid IP packet size.')
ipTotTruncatedPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTruncatedPackets.setStatus('current')
if mibBuilder.loadTexts: ipTotTruncatedPackets.setDescription('Truncated IP packets received. An overflow in the routers along the path can truncate IP packets.')
ipTotZeroNextHop = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotZeroNextHop.setStatus('current')
if mibBuilder.loadTexts: ipTotZeroNextHop.setDescription('Packets received that contain a 0 value in the next hop field. These packets are dropped.')
ipTotTtlExpired = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTotTtlExpired.setStatus('current')
if mibBuilder.loadTexts: ipTotTtlExpired.setDescription('Packets for which the time-to-live (TTL) expired during transit. These packets are dropped.')
nonIpTotTruncatedPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 43, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nonIpTotTruncatedPackets.setStatus('current')
if mibBuilder.loadTexts: nonIpTotTruncatedPackets.setDescription('Truncated non-IP packets received.')
nsIcmpStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44))
icmpTotRxPktsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxPktsLow.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotRxPktsLow.setDescription('...OBSOLETE')
icmpTotRxPktsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxPktsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotRxPktsHigh.setDescription('...OBSOLETE')
icmpTotRxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotRxBytesLow.setDescription('...OBSOLETE')
icmpTotRxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotRxBytesHigh.setDescription('...OBSOLETE')
icmpTotTxPktsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxPktsLow.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotTxPktsLow.setDescription('...OBSOLETE')
icmpTotTxPktsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxPktsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotTxPktsHigh.setDescription('...OBSOLETE')
icmpTotTxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotTxBytesLow.setDescription('...OBSOLETE')
icmpTotTxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotTxBytesHigh.setDescription('...OBSOLETE')
icmpTotRxEchoReplyLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxEchoReplyLow.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotRxEchoReplyLow.setDescription('...OBSOLETE')
icmpTotRxEchoReplyHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxEchoReplyHigh.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotRxEchoReplyHigh.setDescription('...OBSOLETE')
icmpTotTxEchoReplyLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxEchoReplyLow.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotTxEchoReplyLow.setDescription('...OBSOLETE')
icmpTotTxEchoReplyHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxEchoReplyHigh.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotTxEchoReplyHigh.setDescription('...OBSOLETE')
icmpTotRxEchoLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxEchoLow.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotRxEchoLow.setDescription('...OBSOLETE')
icmpTotRxEchoHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxEchoHigh.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotRxEchoHigh.setDescription('...OBSOLETE')
icmpTotPktsDroppedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotPktsDroppedLow.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotPktsDroppedLow.setDescription('...OBSOLETE')
icmpTotPktsDroppedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotPktsDroppedHigh.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotPktsDroppedHigh.setDescription('...OBSOLETE')
icmpCurRateThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpCurRateThreshold.setStatus('current')
if mibBuilder.loadTexts: icmpCurRateThreshold.setDescription('Limit for ICMP packets handled every 10 milliseconds. Default value, 0, applies no limit.\nThis is a configurable value using the set rateControl command.\n ')
icmpCurRateThresholdInterval = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpCurRateThresholdInterval.setStatus('obsolete')
if mibBuilder.loadTexts: icmpCurRateThresholdInterval.setDescription('...OBSOLETE')
icmpCurRateCounter = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpCurRateCounter.setStatus('obsolete')
if mibBuilder.loadTexts: icmpCurRateCounter.setDescription('...OBSOLETE')
icmpTotThresholdExceedsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotThresholdExceedsLow.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotThresholdExceedsLow.setDescription('...OBSOLETE')
icmpTotThresholdExceedsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotThresholdExceedsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: icmpTotThresholdExceedsHigh.setDescription('...OBSOLETE')
icmpTotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxPkts.setStatus('current')
if mibBuilder.loadTexts: icmpTotRxPkts.setDescription('ICMP packets received.')
icmpTotRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxBytes.setStatus('current')
if mibBuilder.loadTexts: icmpTotRxBytes.setDescription('Bytes of ICMP data received.')
icmpTotTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxPkts.setStatus('current')
if mibBuilder.loadTexts: icmpTotTxPkts.setDescription('ICMP packets transmitted.')
icmpTotTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxBytes.setStatus('current')
if mibBuilder.loadTexts: icmpTotTxBytes.setDescription('Bytes of ICMP data transmitted.')
icmpTotRxEchoReply = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxEchoReply.setStatus('current')
if mibBuilder.loadTexts: icmpTotRxEchoReply.setDescription('ICMP Ping echo replies received.')
icmpTotTxEchoReply = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotTxEchoReply.setStatus('current')
if mibBuilder.loadTexts: icmpTotTxEchoReply.setDescription('ICMP Ping echo replies transmitted.')
icmpTotRxEcho = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotRxEcho.setStatus('current')
if mibBuilder.loadTexts: icmpTotRxEcho.setDescription('ICMP Ping Echo Request and Echo Reply packets received.')
icmpTotPktsDropped = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotPktsDropped.setStatus('current')
if mibBuilder.loadTexts: icmpTotPktsDropped.setDescription('ICMP packets dropped because the rate threshold has been exceeded.')
icmpTotThresholdExceeds = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotThresholdExceeds.setStatus('current')
if mibBuilder.loadTexts: icmpTotThresholdExceeds.setDescription('Times the ICMP rate threshold is exceeded. If this counter continuously increases, first make sure the ICMP packets received are genuine. If they are, increase the current rate threshold.')
icmpTotPortUnreachableRx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotPortUnreachableRx.setStatus('current')
if mibBuilder.loadTexts: icmpTotPortUnreachableRx.setDescription('ICMP Port Unreachable error messages received. This error is generated when there is no service is running on the port.')
icmpTotPortUnreachableTx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotPortUnreachableTx.setStatus('current')
if mibBuilder.loadTexts: icmpTotPortUnreachableTx.setDescription('ICMP Port Unreachable error messages generated. This error is generated when there is no service is running on the port.')
icmpTotBadChecksum = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotBadChecksum.setStatus('current')
if mibBuilder.loadTexts: icmpTotBadChecksum.setDescription('ICMP Fragmentation Needed error messages received with an ICMP checksum error.')
icmpTotNeedFragRx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotNeedFragRx.setStatus('current')
if mibBuilder.loadTexts: icmpTotNeedFragRx.setDescription("ICMP Fragmentation Needed error messages received for packets that need to be fragmented but for which Don't Fragment is specified the header.")
icmpTotNonFirstIpFrag = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotNonFirstIpFrag.setStatus('current')
if mibBuilder.loadTexts: icmpTotNonFirstIpFrag.setDescription('ICMP Fragmentation Needed error messages received that were generated by an IP fragment other than the first one.')
icmpTotInvalidBodyLen = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotInvalidBodyLen.setStatus('current')
if mibBuilder.loadTexts: icmpTotInvalidBodyLen.setDescription('ICMP Fragmentation Needed error messages received that specified an invalid body length.')
icmpTotNoTcpConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotNoTcpConn.setStatus('current')
if mibBuilder.loadTexts: icmpTotNoTcpConn.setDescription('ICMP Need Fragmentation error messages received for TCP packets. The state of the connection for these packets is not maintained on the NetScaler.')
icmpTotNoUdpConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotNoUdpConn.setStatus('current')
if mibBuilder.loadTexts: icmpTotNoUdpConn.setDescription('ICMP Need Fragmentation error messages received for UDP packets. The state of the connection for these packets is not maintained on the NetScaler.')
icmpTotInvalidTcpSeqno = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotInvalidTcpSeqno.setStatus('current')
if mibBuilder.loadTexts: icmpTotInvalidTcpSeqno.setDescription('ICMP Fragmentation Needed error messages received for packets that contain an invalid TCP address.')
icmpTotInvalidNextMTUval = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotInvalidNextMTUval.setStatus('current')
if mibBuilder.loadTexts: icmpTotInvalidNextMTUval.setDescription('ICMP Fragmentation Needed error messages received in which the Maximum Transmission Unit (MTU) for the next hop is out of range. The range for the MTU is 576-1500.')
icmpTotDstIpLookup = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotDstIpLookup.setStatus('current')
if mibBuilder.loadTexts: icmpTotDstIpLookup.setDescription('Total number of MTU lookup on destination IP info received on a need fragmentation ICMP error message failed.')
icmpTotBigNextMTU = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotBigNextMTU.setStatus('current')
if mibBuilder.loadTexts: icmpTotBigNextMTU.setDescription('ICMP Fragmentation Needed error messages received in which the value for the next MTU is higher than that of the current MTU.')
icmpTotInvalidProtocol = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotInvalidProtocol.setStatus('current')
if mibBuilder.loadTexts: icmpTotInvalidProtocol.setDescription('ICMP Fragmentation Needed error messages received that contain a protocol other than TCP and UDP.')
icmpTotBadPMTUIpChecksum = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotBadPMTUIpChecksum.setStatus('current')
if mibBuilder.loadTexts: icmpTotBadPMTUIpChecksum.setDescription('ICMP Fragmentation Needed error messages received with an IP checksum error.')
icmpTotPMTUnoLink = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotPMTUnoLink.setStatus('current')
if mibBuilder.loadTexts: icmpTotPMTUnoLink.setDescription('ICMP Fragmentation Needed error messages received on a Protocol Control Block (PCB) with no link. The PCB maintains the state of the connection.')
icmpTotPMTUDiscoveryDisabled = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 44, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpTotPMTUDiscoveryDisabled.setStatus('current')
if mibBuilder.loadTexts: icmpTotPMTUDiscoveryDisabled.setDescription('ICMP Need Fragmentation error messages received when the PMTU Discovery mode is not enabled.')
nsUdpStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45))
udpTotUnknownSvcPktsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotUnknownSvcPktsLow.setStatus('obsolete')
if mibBuilder.loadTexts: udpTotUnknownSvcPktsLow.setDescription('...OBSOLETE')
udpTotUnknownSvcPktsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotUnknownSvcPktsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: udpTotUnknownSvcPktsHigh.setDescription('...OBSOLETE')
udpTotRxPktsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotRxPktsLow.setStatus('obsolete')
if mibBuilder.loadTexts: udpTotRxPktsLow.setDescription('...OBSOLETE')
udpTotRxPktsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotRxPktsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: udpTotRxPktsHigh.setDescription('...OBSOLETE')
udpTotRxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotRxBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: udpTotRxBytesLow.setDescription('...OBSOLETE')
udpTotRxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotRxBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: udpTotRxBytesHigh.setDescription('...OBSOLETE')
udpTotTxPktsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotTxPktsLow.setStatus('obsolete')
if mibBuilder.loadTexts: udpTotTxPktsLow.setDescription('...OBSOLETE')
udpTotTxPktsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotTxPktsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: udpTotTxPktsHigh.setDescription('...OBSOLETE')
udpTotTxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotTxBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: udpTotTxBytesLow.setDescription('...OBSOLETE')
udpTotTxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotTxBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: udpTotTxBytesHigh.setDescription('...OBSOLETE')
udpCurRateThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpCurRateThreshold.setStatus('current')
if mibBuilder.loadTexts: udpCurRateThreshold.setDescription('Limit for UDP packets handled every 10 milliseconds. Default value, 0, applies no limit.\nThis is a configurable value using the set rateControl command.\n ')
udpRateInterval = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpRateInterval.setStatus('obsolete')
if mibBuilder.loadTexts: udpRateInterval.setDescription('...OBSOLETE')
udpCurRateCounter = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpCurRateCounter.setStatus('obsolete')
if mibBuilder.loadTexts: udpCurRateCounter.setDescription('...OBSOLETE')
udpCurRateThresholdExceedsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpCurRateThresholdExceedsLow.setStatus('obsolete')
if mibBuilder.loadTexts: udpCurRateThresholdExceedsLow.setDescription('...OBSOLETE')
udpCurRateThresholdExceedsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpCurRateThresholdExceedsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: udpCurRateThresholdExceedsHigh.setDescription('...OBSOLETE')
udpTotUnknownSvcPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotUnknownSvcPkts.setStatus('current')
if mibBuilder.loadTexts: udpTotUnknownSvcPkts.setDescription('Stray UDP packets dropped due to no configured listening  service.')
udpTotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotRxPkts.setStatus('current')
if mibBuilder.loadTexts: udpTotRxPkts.setDescription('Total number of UDP packets received.')
udpTotRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotRxBytes.setStatus('current')
if mibBuilder.loadTexts: udpTotRxBytes.setDescription('Total number of UDP data received in bytes.')
udpTotTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotTxPkts.setStatus('current')
if mibBuilder.loadTexts: udpTotTxPkts.setDescription('Total number of UDP packets transmitted.')
udpTotTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTotTxBytes.setStatus('current')
if mibBuilder.loadTexts: udpTotTxBytes.setDescription('Total number of UDP data transmitted in bytes.')
udpCurRateThresholdExceeds = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpCurRateThresholdExceeds.setStatus('current')
if mibBuilder.loadTexts: udpCurRateThresholdExceeds.setDescription('Number of times the UDP rate threshold is exceeded. If this counter continuously increases, first make sure the UDP packets received are genuine. \n\tIf they are, increase the current rate threshold. This is a configurable value using the set rateControl command.\n\t')
udpBadChecksum = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 45, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBadChecksum.setStatus('current')
if mibBuilder.loadTexts: udpBadChecksum.setDescription('Packets received with a UDP checksum error.')
nsTcpStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46))
tcpCurServerConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurServerConn.setStatus('current')
if mibBuilder.loadTexts: tcpCurServerConn.setDescription('Server connections, including connections in the Opening, Established, and Closing state.')
tcpCurClientConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurClientConn.setStatus('current')
if mibBuilder.loadTexts: tcpCurClientConn.setDescription('Client connections, including connections in the Opening, Established, and Closing state.')
tcpCurPendingConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurPendingConn.setStatus('obsolete')
if mibBuilder.loadTexts: tcpCurPendingConn.setDescription('...OBSOLETE')
tcpCurResetCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurResetCount.setStatus('obsolete')
if mibBuilder.loadTexts: tcpCurResetCount.setDescription('...OBSOLETE')
tcpMaxServerConnections = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpMaxServerConnections.setStatus('obsolete')
if mibBuilder.loadTexts: tcpMaxServerConnections.setDescription('...OBSOLETE')
tcpMaxReqsperConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpMaxReqsperConn.setStatus('obsolete')
if mibBuilder.loadTexts: tcpMaxReqsperConn.setDescription('...OBSOLETE')
tcpMaxPerSrvrReusePool = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpMaxPerSrvrReusePool.setStatus('obsolete')
if mibBuilder.loadTexts: tcpMaxPerSrvrReusePool.setDescription('...OBSOLETE')
tcpActiveServerConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpActiveServerConn.setStatus('current')
if mibBuilder.loadTexts: tcpActiveServerConn.setDescription('Connections to a server currently responding to requests.')
tcpCurClientConnClosing = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurClientConnClosing.setStatus('current')
if mibBuilder.loadTexts: tcpCurClientConnClosing.setDescription('Client connections in the Closing state, which indicates that the connection termination process has initiated but is not complete.')
tcpCurServerConnEstablished = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurServerConnEstablished.setStatus('current')
if mibBuilder.loadTexts: tcpCurServerConnEstablished.setDescription('Current server connections in the Established state, which indicates that data transfer can occur between the NetScaler and the server.')
tcpCurClientConnOpening = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurClientConnOpening.setStatus('current')
if mibBuilder.loadTexts: tcpCurClientConnOpening.setDescription('Client connections in the Opening state, which indicates that the handshakes are not yet complete.')
tcpCurClientConnEstablished = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurClientConnEstablished.setStatus('current')
if mibBuilder.loadTexts: tcpCurClientConnEstablished.setDescription('Current client connections in the Established state, which indicates that data transfer can occur between the NetScaler and the client.')
tcpCurServerConnClosing = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurServerConnClosing.setStatus('current')
if mibBuilder.loadTexts: tcpCurServerConnClosing.setDescription('Server connections in the Closing state, which indicates that the connection termination process has initiated but is not complete.')
tcpSpareConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpSpareConn.setStatus('current')
if mibBuilder.loadTexts: tcpSpareConn.setDescription('Spare connections available. To save time and resources in establishing another connection for a new client, the connection on the server is not closed after completing the request from the first client and is available for serving future requests.')
tcpSurgeQueueLen = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpSurgeQueueLen.setStatus('current')
if mibBuilder.loadTexts: tcpSurgeQueueLen.setDescription('Connections in the surge queue. When the NetScaler cannot open a connection to the server, for example when maximum connections have been reached, the NetScaler queues these requests.')
tcpCurServerConnOpening = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurServerConnOpening.setStatus('current')
if mibBuilder.loadTexts: tcpCurServerConnOpening.setDescription('Server connections in the Opening state, which indicates that the handshakes are not yet complete.')
tcpTotServerConnOpened = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotServerConnOpened.setStatus('current')
if mibBuilder.loadTexts: tcpTotServerConnOpened.setDescription('Server connections initiated by the NetScaler since startup. This counter is reset when the NetScaler is restarted.')
tcpTotServerConnClosed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotServerConnClosed.setStatus('current')
if mibBuilder.loadTexts: tcpTotServerConnClosed.setDescription('Total number of closed server connections')
tcpTotClientConnOpened = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotClientConnOpened.setStatus('current')
if mibBuilder.loadTexts: tcpTotClientConnOpened.setDescription('Client connections opened by the NetScaler since startup (after three-way handshake). This counter is reset when the NetScaler is restarted.')
tcpTotClientConnClosed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotClientConnClosed.setStatus('current')
if mibBuilder.loadTexts: tcpTotClientConnClosed.setDescription('Total number of closed client connections')
tcpTotSyn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotSyn.setStatus('current')
if mibBuilder.loadTexts: tcpTotSyn.setDescription('SYN packets received')
tcpTotSynProbe = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotSynProbe.setStatus('current')
if mibBuilder.loadTexts: tcpTotSynProbe.setDescription('Probes from the NetScaler to a server. The NetScaler sends a SYN packet to the server to check its availability and expects a SYN_ACK packet from the server before a specified response timeout.')
tcpTotSvrFin = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotSvrFin.setStatus('current')
if mibBuilder.loadTexts: tcpTotSvrFin.setDescription('FIN packets received from the server.')
tcpTotCltFin = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotCltFin.setStatus('current')
if mibBuilder.loadTexts: tcpTotCltFin.setDescription('FIN packets received from the clients.')
tcpWaitToSyn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpWaitToSyn.setStatus('current')
if mibBuilder.loadTexts: tcpWaitToSyn.setDescription('SYN packets (packets used to initiate a TCP connection) received on connections that are in the TIME_WAIT state. Packets cannot be transferred on a connection in this state.')
tcpTotZombieCltConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombieCltConnFlushed.setStatus('current')
if mibBuilder.loadTexts: tcpTotZombieCltConnFlushed.setDescription('Client connections that are flushed because the client has been idle for some time.')
tcpTotZombieSvrConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombieSvrConnFlushed.setStatus('current')
if mibBuilder.loadTexts: tcpTotZombieSvrConnFlushed.setDescription('Server connections that are flushed because there have been no client requests in the queue for some time.')
tcpTotZombieHalfOpenCltConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombieHalfOpenCltConnFlushed.setStatus('current')
if mibBuilder.loadTexts: tcpTotZombieHalfOpenCltConnFlushed.setDescription('Half-opened client connections that are flushed because the three-way handshakes are not complete.')
tcpTotZombieHalfOpenSvrConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombieHalfOpenSvrConnFlushed.setStatus('current')
if mibBuilder.loadTexts: tcpTotZombieHalfOpenSvrConnFlushed.setDescription('Half-opened server connections that are flushed because the three-way handshakes are not complete.')
tcpTotZombieActiveHalfCloseCltConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombieActiveHalfCloseCltConnFlushed.setStatus('current')
if mibBuilder.loadTexts: tcpTotZombieActiveHalfCloseCltConnFlushed.setDescription('Active half-closed client connections that are flushed because the client has closed the connection and there has been no activity on the connection.')
tcpTotZombieActiveHalfCloseSvrConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombieActiveHalfCloseSvrConnFlushed.setStatus('current')
if mibBuilder.loadTexts: tcpTotZombieActiveHalfCloseSvrConnFlushed.setDescription('Active half-closed server connections that are flushed because the server has closed the connection and there has been no activity on the connection.')
tcpTotZombiePassiveHalfCloseCltConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombiePassiveHalfCloseCltConnFlushed.setStatus('current')
if mibBuilder.loadTexts: tcpTotZombiePassiveHalfCloseCltConnFlushed.setDescription('Passive half-closed client connections that are flushed because the NetScaler has closed the connection and there has been no activity on the connection.')
tcpTotZombiePassiveHalfCloseSrvConnFlushed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotZombiePassiveHalfCloseSrvConnFlushed.setStatus('current')
if mibBuilder.loadTexts: tcpTotZombiePassiveHalfCloseSrvConnFlushed.setDescription('Passive half-closed server connections that are flushed because the NetScaler has closed the connection and there has been no activity on the connection.')
tcpErrBadCheckSum = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrBadCheckSum.setStatus('current')
if mibBuilder.loadTexts: tcpErrBadCheckSum.setDescription('Packets received with a TCP checksum error.')
tcpErrSynInSynRcvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSynInSynRcvd.setStatus('current')
if mibBuilder.loadTexts: tcpErrSynInSynRcvd.setDescription('SYN packets received on a connection that is in the SYN_RCVD state. A connection goes into the SYN_RCVD state after receiving a SYN packet.')
tcpErrSynInEst = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSynInEst.setStatus('current')
if mibBuilder.loadTexts: tcpErrSynInEst.setDescription('SYN packets received on a connection that is in the ESTABLISHED state. A SYN packet is not expected on an ESTABLISHED connection.')
tcpErrSynGiveUp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSynGiveUp.setStatus('current')
if mibBuilder.loadTexts: tcpErrSynGiveUp.setDescription('Attempts to establish a connection on the NetScaler that timed out.')
tcpErrSynSentBadAck = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSynSentBadAck.setStatus('current')
if mibBuilder.loadTexts: tcpErrSynSentBadAck.setDescription('Incorrect ACK packets received on a connection that is in the SYN_SENT state. An incorrect ACK packet is the third packet in the three-way handshake that has an incorrect sequence number.')
tcpErrSynRetry = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSynRetry.setStatus('current')
if mibBuilder.loadTexts: tcpErrSynRetry.setDescription('SYN packets resent to a server.')
tcpErrFinRetry = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrFinRetry.setStatus('current')
if mibBuilder.loadTexts: tcpErrFinRetry.setDescription('FIN packets resent to a server or a client.')
tcpErrFinGiveUp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrFinGiveUp.setStatus('current')
if mibBuilder.loadTexts: tcpErrFinGiveUp.setDescription('Connections that were timed out by the NetScaler because of not receiving the ACK packet after retransmitting the FIN packet four times.')
tcpErrFinDup = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrFinDup.setStatus('current')
if mibBuilder.loadTexts: tcpErrFinDup.setDescription('Number of duplicate FIN packets recieved')
tcpErrRst = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrRst.setStatus('current')
if mibBuilder.loadTexts: tcpErrRst.setDescription('Reset packets received from a client or a server.')
tcpErrRstNonEst = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrRstNonEst.setStatus('current')
if mibBuilder.loadTexts: tcpErrRstNonEst.setDescription('Reset packets received on a connection that is not in the ESTABLISHED state.')
tcpErrRstOutOfWindow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrRstOutOfWindow.setStatus('current')
if mibBuilder.loadTexts: tcpErrRstOutOfWindow.setDescription('Reset packets received on a connection that is out of the current TCP window.')
tcpErrRstInTimewait = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrRstInTimewait.setStatus('current')
if mibBuilder.loadTexts: tcpErrRstInTimewait.setDescription('Reset packets received on a connection that is in the TIME_WAIT state. Packets cannot be transferred on a connection in the TIME_WAIT state.')
tcpErrSvrRetrasmit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSvrRetrasmit.setStatus('current')
if mibBuilder.loadTexts: tcpErrSvrRetrasmit.setDescription('Packets retransmitted by a server. This usually occurs because the acknowledgement from the NetScaler has not reached the server.')
tcpErrCltRetrasmit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrCltRetrasmit.setStatus('current')
if mibBuilder.loadTexts: tcpErrCltRetrasmit.setDescription('Packets retransmitted by a client. This usually occurs because the acknowledgement from the NetScaler has not reached the client.')
tcpErrFullRetrasmit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrFullRetrasmit.setStatus('current')
if mibBuilder.loadTexts: tcpErrFullRetrasmit.setDescription('Full packets retransmitted by the client or the server.')
tcpErrPartialRetrasmit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrPartialRetrasmit.setStatus('current')
if mibBuilder.loadTexts: tcpErrPartialRetrasmit.setDescription('Partial packet retransmits by a client or server due to congestion on the connection. This usually occurs because the window advertised by the NetScaler is not big enough to hold the full packet.')
tcpErrSvrOutOfOrder = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSvrOutOfOrder.setStatus('current')
if mibBuilder.loadTexts: tcpErrSvrOutOfOrder.setDescription('Out of order TCP packets received from a server. ')
tcpErrCltOutOfOrder = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrCltOutOfOrder.setStatus('current')
if mibBuilder.loadTexts: tcpErrCltOutOfOrder.setDescription('Out of order TCP packets received from a client.')
tcpErrCltHole = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrCltHole.setStatus('current')
if mibBuilder.loadTexts: tcpErrCltHole.setDescription('TCP holes created on a client connection. When out of order packets are received from a client, a hole is created on the NetScaler for each group of missing packets.')
tcpErrSvrHole = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSvrHole.setStatus('current')
if mibBuilder.loadTexts: tcpErrSvrHole.setDescription('TCP holes created on a server connection. When out of order packets are received from a server, a hole is created on the NetScaler for each group of missing packets.')
tcpErrCookiePktSeqReject = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrCookiePktSeqReject.setStatus('current')
if mibBuilder.loadTexts: tcpErrCookiePktSeqReject.setDescription('SYN cookie packets rejected because they contain an incorrect sequence number.')
tcpErrCookiePktSigReject = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrCookiePktSigReject.setStatus('current')
if mibBuilder.loadTexts: tcpErrCookiePktSigReject.setDescription('SYN cookie packets rejected because they contain an incorrect signature.')
tcpErrCookiePktSeqDrop = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrCookiePktSeqDrop.setStatus('current')
if mibBuilder.loadTexts: tcpErrCookiePktSeqDrop.setDescription('SYN cookie packets dropped because the sequence number specified in the packets is outside the current window.')
tcpErrCookiePktMssReject = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrCookiePktMssReject.setStatus('current')
if mibBuilder.loadTexts: tcpErrCookiePktMssReject.setDescription('SYN cookie packets rejected because the maximum segment size (MSS) specified in the packets is incorrect.')
tcpErrRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrRetransmit.setStatus('current')
if mibBuilder.loadTexts: tcpErrRetransmit.setDescription('TCP packets retransmitted. The NetScaler attempts to retransmit the packet up to seven times, after which it resets the other half of the TCP connection.')
tcpErrRetransmitGiveUp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrRetransmitGiveUp.setStatus('current')
if mibBuilder.loadTexts: tcpErrRetransmitGiveUp.setDescription("Number of times NetScaler terminates a connection after retransmitting the packet seven times on that connection.Retrasnmission happens when recieving end doesn't acknowledges the packet.")
tcpTotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotRxPkts.setStatus('current')
if mibBuilder.loadTexts: tcpTotRxPkts.setDescription('TCP packets received.')
tcpTotRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotRxBytes.setStatus('current')
if mibBuilder.loadTexts: tcpTotRxBytes.setDescription('Bytes of TCP data received.')
tcpTotTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotTxPkts.setStatus('current')
if mibBuilder.loadTexts: tcpTotTxPkts.setDescription('TCP packets transmitted.')
tcpTotTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotTxBytes.setStatus('current')
if mibBuilder.loadTexts: tcpTotTxBytes.setDescription('Bytes of TCP data transmitted.')
pcbTotZombieCall = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcbTotZombieCall.setStatus('current')
if mibBuilder.loadTexts: pcbTotZombieCall.setDescription('Times the Zombie cleanup function is called. Every time a connection is flushed, it is marked for cleanup. The Zombie cleanup function clears all these connections at predefined intervals.')
tcpTotSynHeld = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotSynHeld.setStatus('current')
if mibBuilder.loadTexts: tcpTotSynHeld.setDescription('SYN packets held on the NetScaler that are waiting for a server connection.')
tcpTotSynFlush = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotSynFlush.setStatus('current')
if mibBuilder.loadTexts: tcpTotSynFlush.setDescription('SYN packets flushed on the NetScaler because of no response from the server for three or more seconds.')
tcpTotFinWaitClosed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotFinWaitClosed.setStatus('current')
if mibBuilder.loadTexts: tcpTotFinWaitClosed.setDescription('Connections closed on the NetScaler because the number of connections in the TIME_WAIT state has exceeded the default value of 7000.')
tcpErrAnyPortFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrAnyPortFail.setStatus('current')
if mibBuilder.loadTexts: tcpErrAnyPortFail.setDescription('Port allocations that have failed on a mapped IP address because the maximum limit of 65536 has been exceeded.')
tcpErrIpPortFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrIpPortFail.setStatus('current')
if mibBuilder.loadTexts: tcpErrIpPortFail.setDescription('Port allocations that have failed on a subnet IP address or vserver IP address because the maximum limit of 65536 has been exceeded.')
tcpErrSentRst = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSentRst.setStatus('current')
if mibBuilder.loadTexts: tcpErrSentRst.setDescription('Reset packets sent to a client or a server.')
tcpErrBadStateConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrBadStateConn.setStatus('current')
if mibBuilder.loadTexts: tcpErrBadStateConn.setDescription('Connections that are not in a valid TCP state.')
tcpErrFastRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrFastRetransmissions.setStatus('current')
if mibBuilder.loadTexts: tcpErrFastRetransmissions.setDescription('TCP packets on which the NetScaler performs a fast retransmission in response to three duplicate acknowledgements or a partial acknowledgement.  The NetScaler assumes that the packet is lost and retransmits the packet before its time-out.')
tcpErrFirstRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrFirstRetransmissions.setStatus('current')
if mibBuilder.loadTexts: tcpErrFirstRetransmissions.setDescription('Packets retransmitted once by the NetScaler.')
tcpErrSecondRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSecondRetransmissions.setStatus('current')
if mibBuilder.loadTexts: tcpErrSecondRetransmissions.setDescription('Packets retransmitted twice by the NetScaler.')
tcpErrThirdRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrThirdRetransmissions.setStatus('current')
if mibBuilder.loadTexts: tcpErrThirdRetransmissions.setDescription('Packets retransmitted three times by the NetScaler.')
tcpErrForthRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrForthRetransmissions.setStatus('current')
if mibBuilder.loadTexts: tcpErrForthRetransmissions.setDescription('Packets retransmitted four times by the NetScaler.')
tcpErrFifthRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrFifthRetransmissions.setStatus('current')
if mibBuilder.loadTexts: tcpErrFifthRetransmissions.setDescription('Packets retransmitted five times by the NetScaler.')
tcpErrSixthRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSixthRetransmissions.setStatus('current')
if mibBuilder.loadTexts: tcpErrSixthRetransmissions.setDescription('Packets retransmitted six times by the NetScaler.')
tcpErrSeventhRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSeventhRetransmissions.setStatus('current')
if mibBuilder.loadTexts: tcpErrSeventhRetransmissions.setDescription('Packets retransmitted seven times by the NetScaler. If this fails, the NetScaler terminates the connection.')
tcpErrDataAfterFin = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrDataAfterFin.setStatus('current')
if mibBuilder.loadTexts: tcpErrDataAfterFin.setDescription('Packets received following a connection termination request. This error is usually caused by a reordering of packets during transmission.')
tcpErrRstThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrRstThreshold.setStatus('current')
if mibBuilder.loadTexts: tcpErrRstThreshold.setDescription('Reset packets dropped because the default threshold of 100 resets per 10 milliseconds has been exceeded. This is a configurable value using the set rateControl command.')
tcpErrOutOfWindowPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrOutOfWindowPkts.setStatus('current')
if mibBuilder.loadTexts: tcpErrOutOfWindowPkts.setDescription('Packets received that are out of the current advertised window.')
tcpErrSynDroppedCongestion = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrSynDroppedCongestion.setStatus('current')
if mibBuilder.loadTexts: tcpErrSynDroppedCongestion.setDescription('SYN packets dropped because of network congestion.')
tcpCurPhysicalServers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 85), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurPhysicalServers.setStatus('current')
if mibBuilder.loadTexts: tcpCurPhysicalServers.setDescription('The number of physical servers that Netscaler has open connections with.')
tcpReuseHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpReuseHit.setStatus('current')
if mibBuilder.loadTexts: tcpReuseHit.setDescription('Total number of client transactions found the server connection in the reuse-pool.')
tcpWaitToData = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpWaitToData.setStatus('current')
if mibBuilder.loadTexts: tcpWaitToData.setDescription('Bytes of data received on connections that are in the TIME_WAIT state. Data cannot be transferred on a connection that is in this state.')
tcpErrStrayPkt = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpErrStrayPkt.setStatus('current')
if mibBuilder.loadTexts: tcpErrStrayPkt.setDescription('Number of stray or misrouted packets.')
tcpTotClientConnOpenRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 89), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotClientConnOpenRate.setStatus('current')
if mibBuilder.loadTexts: tcpTotClientConnOpenRate.setDescription('Rate at which connections are opened in the system per second.')
tcpCurRateThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 90), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurRateThreshold.setStatus('current')
if mibBuilder.loadTexts: tcpCurRateThreshold.setDescription('Current threshold for TCP rate control. By default, there is no rate control for TCP.')
freeConnHalfClosed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeConnHalfClosed.setStatus('current')
if mibBuilder.loadTexts: freeConnHalfClosed.setDescription('Number of half-closed connections that were freed.')
freeConnFlushMarked = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeConnFlushMarked.setStatus('current')
if mibBuilder.loadTexts: freeConnFlushMarked.setDescription('Number of connections freed that were already marked for flush.')
freeConnEstd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeConnEstd.setStatus('current')
if mibBuilder.loadTexts: freeConnEstd.setDescription('Number of established and active connections freed.')
flushThresReached = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flushThresReached.setStatus('current')
if mibBuilder.loadTexts: flushThresReached.setDescription('Number of times we reached connection flush threshold.')
memFailFlushTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFailFlushTrigger.setStatus('current')
if mibBuilder.loadTexts: memFailFlushTrigger.setDescription('Number of flushes triggered through memory failure.')
mptcpCurMpcapableSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 96), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpCurMpcapableSessions.setStatus('current')
if mibBuilder.loadTexts: mptcpCurMpcapableSessions.setDescription('The number of current mptcp sessions.')
mptcpCurSFConnections = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 97), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpCurSFConnections.setStatus('current')
if mibBuilder.loadTexts: mptcpCurSFConnections.setDescription('The number of current mptcp subflow connections.')
mptcpCurPendingJoin = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 98), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpCurPendingJoin.setStatus('current')
if mibBuilder.loadTexts: mptcpCurPendingJoin.setDescription('The number of current mptcp subflow connections in pending state.')
mptcpErrInvalCookie = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrInvalCookie.setStatus('current')
if mibBuilder.loadTexts: mptcpErrInvalCookie.setDescription('MPTCP invalid cookie received on mp capable final ack.')
mptcpErrUnknownToken = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrUnknownToken.setStatus('current')
if mibBuilder.loadTexts: mptcpErrUnknownToken.setDescription('MPTCP invalid token received on mp join request.')
mptcpErrAddridExist = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrAddridExist.setStatus('current')
if mibBuilder.loadTexts: mptcpErrAddridExist.setDescription('MPTCP Mp join request on existing address id.')
mptcpErrMaxSF = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrMaxSF.setStatus('current')
if mibBuilder.loadTexts: mptcpErrMaxSF.setDescription('MPTCP new mp join request after maximum configured subflows are established.')
mptcpErrInvalMAC = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrInvalMAC.setStatus('current')
if mibBuilder.loadTexts: mptcpErrInvalMAC.setDescription('MPTCP invalid MAC on mp join final ack.')
mptcpErrBadCksum = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrBadCksum.setStatus('current')
if mibBuilder.loadTexts: mptcpErrBadCksum.setDescription('MPTCP checksum failed. Connection will fallback to regular tcp.')
mptcpErrAddrId0 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrAddrId0.setStatus('current')
if mibBuilder.loadTexts: mptcpErrAddrId0.setDescription('MPTCP Mp join request on address id 0.')
mptcpErrfastclose = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrfastclose.setStatus('current')
if mibBuilder.loadTexts: mptcpErrfastclose.setDescription('MPTCP FAST CLOSE sent.')
mptcpErrJoinThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrJoinThreshold.setStatus('current')
if mibBuilder.loadTexts: mptcpErrJoinThreshold.setDescription('MPTCP Global pending mp join threshold limit is reached, new mp join request will be dropped sending RST')
mptcpErrInvalOpts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrInvalOpts.setStatus('current')
if mibBuilder.loadTexts: mptcpErrInvalOpts.setDescription('MPTCP invalid mptcp option is received and is dropped.')
mptcpErrInvalRemAddr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrInvalRemAddr.setStatus('current')
if mibBuilder.loadTexts: mptcpErrInvalRemAddr.setDescription('MPTCP remove address request received on invalid/unknown address id.')
mptcpErrVersionNotSupported = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrVersionNotSupported.setStatus('current')
if mibBuilder.loadTexts: mptcpErrVersionNotSupported.setDescription('MPTCP Mp capable request from unsupported mptcp client.')
mptcpErrCryptoNotSupported = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 111), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrCryptoNotSupported.setStatus('current')
if mibBuilder.loadTexts: mptcpErrCryptoNotSupported.setDescription('MPTCP client crypto algorithm not supported.')
mptcpErrExtnFlagSet = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 112), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrExtnFlagSet.setStatus('current')
if mibBuilder.loadTexts: mptcpErrExtnFlagSet.setDescription('MPTCP Mp capable extension flag is set on mp capable request.')
mptcpErrResFlagSet = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 113), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrResFlagSet.setStatus('current')
if mibBuilder.loadTexts: mptcpErrResFlagSet.setDescription('MPTCP One or more reserved bits are set on mp capable request.')
mptcpErrJoinAfterFallback = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 114), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrJoinAfterFallback.setStatus('current')
if mibBuilder.loadTexts: mptcpErrJoinAfterFallback.setDescription('MPTCP New join request received after fallback to regular tcp.')
mptcpErrDataFinpassive = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 115), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrDataFinpassive.setStatus('current')
if mibBuilder.loadTexts: mptcpErrDataFinpassive.setDescription('MPTCP Data FIN received on passive subflow')
mptcpErrFastClosepassive = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 116), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrFastClosepassive.setStatus('current')
if mibBuilder.loadTexts: mptcpErrFastClosepassive.setDescription('MPTCP Fast close received on passive subflow.')
mptcpErrFastClose = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 117), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrFastClose.setStatus('current')
if mibBuilder.loadTexts: mptcpErrFastClose.setDescription('MPTCP Fast close received on a subflow.')
mptcpErrFastCloseKey = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 118), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpErrFastCloseKey.setStatus('current')
if mibBuilder.loadTexts: mptcpErrFastCloseKey.setDescription('MPTCP Fast close received with invalid key and the packet is dropped.')
mptcpPlainackFallback = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 119), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpPlainackFallback.setStatus('current')
if mibBuilder.loadTexts: mptcpPlainackFallback.setDescription('MPTCP Fallback to regular tcp on receiving plain ack for DSS.')
mptcpPlainackRST = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 120), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpPlainackRST.setStatus('current')
if mibBuilder.loadTexts: mptcpPlainackRST.setDescription('MPTCP Sent RST on receiving plain ack for DSS.')
mptcpMPFailSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 121), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpMPFailSent.setStatus('current')
if mibBuilder.loadTexts: mptcpMPFailSent.setDescription('MPTCP Total mp fail sent due to checksum failure.')
mptcpMPFailRecvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 122), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpMPFailRecvd.setStatus('current')
if mibBuilder.loadTexts: mptcpMPFailRecvd.setDescription('MPTCP Total mpfail received and fallback to regular tcp.')
mptcpInfiniteMapRecvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 123), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpInfiniteMapRecvd.setStatus('current')
if mibBuilder.loadTexts: mptcpInfiniteMapRecvd.setDescription('MPTCP Received and set infinite map and fallen back to regular tcp.')
mptcpTotMpCapSyn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 124), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpTotMpCapSyn.setStatus('current')
if mibBuilder.loadTexts: mptcpTotMpCapSyn.setDescription('MPTCP total mpcapable syn received')
mptcpTotMpJoinSyn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 125), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpTotMpJoinSyn.setStatus('current')
if mibBuilder.loadTexts: mptcpTotMpJoinSyn.setDescription('MPTCP total mpjoin syn received')
mptcpTotMpcapSession = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 126), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpTotMpcapSession.setStatus('current')
if mibBuilder.loadTexts: mptcpTotMpcapSession.setDescription('MPTCP total mpcapable session created')
mptcpTotSFConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 127), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpTotSFConn.setStatus('current')
if mibBuilder.loadTexts: mptcpTotSFConn.setDescription('MPTCP total mpjoin connections created')
mptcpTotEstSFReplaced = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 128), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpTotEstSFReplaced.setStatus('current')
if mibBuilder.loadTexts: mptcpTotEstSFReplaced.setDescription('MPTCP Total established subflows replaced due to new join.')
mptcpTotPendSFReplaced = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 129), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpTotPendSFReplaced.setStatus('current')
if mibBuilder.loadTexts: mptcpTotPendSFReplaced.setDescription('MPTCP Total pending subflows replaced due to new join.')
mptcpCurSessWithoutSFs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 130), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptcpCurSessWithoutSFs.setStatus('current')
if mibBuilder.loadTexts: mptcpCurSessWithoutSFs.setDescription('Current Multipath TCP sessions without any subflows')
tcpOptimizationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 131), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOptimizationEnabled.setStatus('current')
if mibBuilder.loadTexts: tcpOptimizationEnabled.setDescription('Total number of connections with TCP optimzation.')
tcpOptimizationBypassed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 46, 132), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOptimizationBypassed.setStatus('current')
if mibBuilder.loadTexts: tcpOptimizationBypassed.setDescription('Total number of connections that bypassed TCP optimzation.')
nsSslStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47))
sslCardStatus = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCardStatus.setStatus('current')
if mibBuilder.loadTexts: sslCardStatus.setDescription('Status of the SSL card(s). The value should be interpreted in binary form, with each set bit indicates a card as UP.')
sslEngineStatus = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslEngineStatus.setStatus('current')
if mibBuilder.loadTexts: sslEngineStatus.setDescription('State of the SSL Engine (1=UP/0=DOWN). This state is decided based on SSL Feature/License status and minimum number of cards UP.')
sslSessionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionsPerSec.setStatus('current')
if mibBuilder.loadTexts: sslSessionsPerSec.setDescription('SSL sessions per second between client and NetScaler appliance.')
sslTotTransactionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTransactionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotTransactionsLow.setDescription('...OBSOLETE')
sslTotTransactionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTransactionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotTransactionsHigh.setDescription('...OBSOLETE')
sslTotSSLv2TransactionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2TransactionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv2TransactionsLow.setDescription('...OBSOLETE')
sslTotSSLv2TransactionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2TransactionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv2TransactionsHigh.setDescription('...OBSOLETE')
sslTotSSLv3TransactionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3TransactionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv3TransactionsLow.setDescription('...OBSOLETE')
sslTotSSLv3TransactionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3TransactionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv3TransactionsHigh.setDescription('...OBSOLETE')
sslTotTLSv1TransactionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1TransactionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotTLSv1TransactionsLow.setDescription('...OBSOLETE')
sslTotTLSv1TransactionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1TransactionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotTLSv1TransactionsHigh.setDescription('...OBSOLETE')
sslTotSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSessionsLow.setDescription('...OBSOLETE')
sslTotSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSessionsHigh.setDescription('...OBSOLETE')
sslTotSSLv2SessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2SessionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv2SessionsLow.setDescription('...OBSOLETE')
sslTotSSLv2SessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2SessionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv2SessionsHigh.setDescription('...OBSOLETE')
sslTotSSLv3SessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3SessionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv3SessionsLow.setDescription('...OBSOLETE')
sslTotSSLv3SessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3SessionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv3SessionsHigh.setDescription('...OBSOLETE')
sslTotTLSv1SessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1SessionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotTLSv1SessionsLow.setDescription('...OBSOLETE')
sslTotTLSv1SessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1SessionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotTLSv1SessionsHigh.setDescription('...OBSOLETE')
sslTotExpiredSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotExpiredSessionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotExpiredSessionsLow.setDescription('...OBSOLETE')
sslTotExpiredSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotExpiredSessionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotExpiredSessionsHigh.setDescription('...OBSOLETE')
sslTotNewSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNewSessionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotNewSessionsLow.setDescription('...OBSOLETE')
sslTotNewSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNewSessionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotNewSessionsHigh.setDescription('...OBSOLETE')
sslTotSessionHitsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionHitsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSessionHitsLow.setDescription('...OBSOLETE')
sslTotSessionHitsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionHitsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSessionHitsHigh.setDescription('...OBSOLETE')
sslTotSessionMissLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionMissLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSessionMissLow.setDescription('...OBSOLETE')
sslTotSessionMissHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionMissHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSessionMissHigh.setDescription('...OBSOLETE')
sslTotRenegSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRenegSessionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotRenegSessionsLow.setDescription('...OBSOLETE')
sslTotRenegSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRenegSessionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotRenegSessionsHigh.setDescription('...OBSOLETE')
sslTotSSLv3RenegSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3RenegSessionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv3RenegSessionsLow.setDescription('...OBSOLETE')
sslTotSSLv3RenegSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3RenegSessionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv3RenegSessionsHigh.setDescription('...OBSOLETE')
sslTotTLSv1RenegSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1RenegSessionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotTLSv1RenegSessionsLow.setDescription('...OBSOLETE')
sslTotTLSv1RenegSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1RenegSessionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotTLSv1RenegSessionsHigh.setDescription('...OBSOLETE')
sslTotSSLv2HandshakesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2HandshakesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv2HandshakesLow.setDescription('...OBSOLETE')
sslTotSSLv2HandshakesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2HandshakesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv2HandshakesHigh.setDescription('...OBSOLETE')
sslTotSSLv3HandshakesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3HandshakesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv3HandshakesLow.setDescription('...OBSOLETE')
sslTotSSLv3HandshakesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3HandshakesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv3HandshakesHigh.setDescription('...OBSOLETE')
sslTotTLSv1HandshakesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1HandshakesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotTLSv1HandshakesLow.setDescription('...OBSOLETE')
sslTotTLSv1HandshakesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1HandshakesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotTLSv1HandshakesHigh.setDescription('...OBSOLETE')
sslTotSSLv2ClientAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2ClientAuthenticationsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv2ClientAuthenticationsLow.setDescription('...OBSOLETE')
sslTotSSLv2ClientAuthenticationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2ClientAuthenticationsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv2ClientAuthenticationsHigh.setDescription('...OBSOLETE')
sslTotSSLv3ClientAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3ClientAuthenticationsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv3ClientAuthenticationsLow.setDescription('...OBSOLETE')
sslTotSSLv3ClientAuthenticationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3ClientAuthenticationsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSSLv3ClientAuthenticationsHigh.setDescription('...OBSOLETE')
sslTotTLSv1ClientAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1ClientAuthenticationsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotTLSv1ClientAuthenticationsLow.setDescription('...OBSOLETE')
sslTotTLSv1ClientAuthenticationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1ClientAuthenticationsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotTLSv1ClientAuthenticationsHigh.setDescription('...OBSOLETE')
sslTotRSA512keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA512keyExchangesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotRSA512keyExchangesLow.setDescription('...OBSOLETE')
sslTotRSA512keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA512keyExchangesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotRSA512keyExchangesHigh.setDescription('...OBSOLETE')
sslTotRSA1024keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA1024keyExchangesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotRSA1024keyExchangesLow.setDescription('...OBSOLETE')
sslTotRSA1024keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA1024keyExchangesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotRSA1024keyExchangesHigh.setDescription('...OBSOLETE')
sslTotRSA2048keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA2048keyExchangesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotRSA2048keyExchangesLow.setDescription('...OBSOLETE')
sslTotRSA2048keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA2048keyExchangesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotRSA2048keyExchangesHigh.setDescription('...OBSOLETE')
sslTotDH512keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH512keyExchangesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotDH512keyExchangesLow.setDescription('...OBSOLETE')
sslTotDH512keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH512keyExchangesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotDH512keyExchangesHigh.setDescription('...OBSOLETE')
sslTotDH1024keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH1024keyExchangesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotDH1024keyExchangesLow.setDescription('...OBSOLETE')
sslTotDH1024keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH1024keyExchangesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotDH1024keyExchangesHigh.setDescription('...OBSOLETE')
sslTotDH2048keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH2048keyExchangesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotDH2048keyExchangesLow.setDescription('...OBSOLETE')
sslTotDH2048keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH2048keyExchangesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotDH2048keyExchangesHigh.setDescription('...OBSOLETE')
sslTotRSAAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSAAuthorizationsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotRSAAuthorizationsLow.setDescription('...OBSOLETE')
sslTotRSAAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSAAuthorizationsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotRSAAuthorizationsHigh.setDescription('...OBSOLETE')
sslTotDHAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDHAuthorizationsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotDHAuthorizationsLow.setDescription('...OBSOLETE')
sslTotDHAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDHAuthorizationsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotDHAuthorizationsHigh.setDescription('...OBSOLETE')
sslTotDSSAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDSSAuthorizationsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotDSSAuthorizationsLow.setDescription('...OBSOLETE')
sslTotDSSAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDSSAuthorizationsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotDSSAuthorizationsHigh.setDescription('...OBSOLETE')
sslTotNULLAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNULLAuthorizationsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotNULLAuthorizationsLow.setDescription('...OBSOLETE')
sslTotNULLAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNULLAuthorizationsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotNULLAuthorizationsHigh.setDescription('...OBSOLETE')
sslTot40BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitRC4CiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot40BitRC4CiphersLow.setDescription('...OBSOLETE')
sslTot40BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitRC4CiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot40BitRC4CiphersHigh.setDescription('...OBSOLETE')
sslTot56BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitRC4CiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot56BitRC4CiphersLow.setDescription('...OBSOLETE')
sslTot56BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitRC4CiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot56BitRC4CiphersHigh.setDescription('...OBSOLETE')
sslTot64BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot64BitRC4CiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot64BitRC4CiphersLow.setDescription('...OBSOLETE')
sslTot64BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot64BitRC4CiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot64BitRC4CiphersHigh.setDescription('...OBSOLETE')
sslTot128BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitRC4CiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot128BitRC4CiphersLow.setDescription('...OBSOLETE')
sslTot128BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitRC4CiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot128BitRC4CiphersHigh.setDescription('...OBSOLETE')
sslTot40BitDESCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitDESCiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot40BitDESCiphersLow.setDescription('...OBSOLETE')
sslTot40BitDESCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitDESCiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot40BitDESCiphersHigh.setDescription('...OBSOLETE')
sslTot56BitDESCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitDESCiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot56BitDESCiphersLow.setDescription('...OBSOLETE')
sslTot56BitDESCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitDESCiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot56BitDESCiphersHigh.setDescription('...OBSOLETE')
sslTot168Bit3DESCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot168Bit3DESCiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot168Bit3DESCiphersLow.setDescription('...OBSOLETE')
sslTot168Bit3DESCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot168Bit3DESCiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot168Bit3DESCiphersHigh.setDescription('...OBSOLETE')
sslTot40BitRC2CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitRC2CiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot40BitRC2CiphersLow.setDescription('...OBSOLETE')
sslTot40BitRC2CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitRC2CiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot40BitRC2CiphersHigh.setDescription('...OBSOLETE')
sslTot56BitRC2CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitRC2CiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot56BitRC2CiphersLow.setDescription('...OBSOLETE')
sslTot56BitRC2CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitRC2CiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot56BitRC2CiphersHigh.setDescription('...OBSOLETE')
sslTot128BitRC2CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitRC2CiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot128BitRC2CiphersLow.setDescription('...OBSOLETE')
sslTot128BitRC2CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitRC2CiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot128BitRC2CiphersHigh.setDescription('...OBSOLETE')
sslTot128BitIDEACiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitIDEACiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot128BitIDEACiphersLow.setDescription('...OBSOLETE')
sslTot128BitIDEACiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitIDEACiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTot128BitIDEACiphersHigh.setDescription('...OBSOLETE')
sslTotNULLCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNULLCiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotNULLCiphersLow.setDescription('...OBSOLETE')
sslTotNULLCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNULLCiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotNULLCiphersHigh.setDescription('...OBSOLETE')
sslTotMD5MacLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotMD5MacLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotMD5MacLow.setDescription('...OBSOLETE')
sslTotMD5MacHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotMD5MacHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotMD5MacHigh.setDescription('...OBSOLETE')
sslTotSHAMacLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSHAMacLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSHAMacLow.setDescription('...OBSOLETE')
sslTotSHAMacHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSHAMacHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotSHAMacHigh.setDescription('...OBSOLETE')
sslTotOffloadBulkDESLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadBulkDESLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotOffloadBulkDESLow.setDescription('...OBSOLETE')
sslTotOffloadBulkDESHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadBulkDESHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotOffloadBulkDESHigh.setDescription('...OBSOLETE')
sslTotOffloadRSAKeyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadRSAKeyExchangesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotOffloadRSAKeyExchangesLow.setDescription('...OBSOLETE')
sslTotOffloadRSAKeyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadRSAKeyExchangesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotOffloadRSAKeyExchangesHigh.setDescription('...OBSOLETE')
sslTotOffloadDHKeyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadDHKeyExchangesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotOffloadDHKeyExchangesLow.setDescription('...OBSOLETE')
sslTotOffloadDHKeyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadDHKeyExchangesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotOffloadDHKeyExchangesHigh.setDescription('...OBSOLETE')
sslTotOffloadSignRSALow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadSignRSALow.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotOffloadSignRSALow.setDescription('...OBSOLETE')
sslTotOffloadSignRSAHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadSignRSAHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslTotOffloadSignRSAHigh.setDescription('...OBSOLETE')
sslBeTotSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSessionsLow.setDescription('...OBSOLETE')
sslBeTotSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 121), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSessionsHigh.setDescription('...OBSOLETE')
sslBeTotSSLv3SessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 122), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3SessionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSSLv3SessionsLow.setDescription('...OBSOLETE')
sslBeTotSSLv3SessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 123), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3SessionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSSLv3SessionsHigh.setDescription('...OBSOLETE')
sslBeTotTLSv1SessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 124), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1SessionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotTLSv1SessionsLow.setDescription('...OBSOLETE')
sslBeTotTLSv1SessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 125), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1SessionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotTLSv1SessionsHigh.setDescription('...OBSOLETE')
sslBeExpiredSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 126), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeExpiredSessionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeExpiredSessionsLow.setDescription('...OBSOLETE')
sslBeTotExpiredSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 127), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotExpiredSessionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotExpiredSessionsHigh.setDescription('...OBSOLETE')
sslBeTotSessionMultiplexAttemptsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 128), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptsLow.setDescription('...OBSOLETE')
sslBeTotSessionMultiplexAttemptsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 129), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptsHigh.setDescription('...OBSOLETE')
sslBeTotSessionMultiplexAttemptSuccessLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 130), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptSuccessLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptSuccessLow.setDescription('...OBSOLETE')
sslBeTotSessionMultiplexAttemptSuccessHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 131), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptSuccessHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptSuccessHigh.setDescription('...OBSOLETE')
sslBeTotSessionMultiplexAttemptFailsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 132), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptFailsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptFailsLow.setDescription('...OBSOLETE')
sslBeTotSessionMultiplexAttemptFailsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 133), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptFailsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptFailsHigh.setDescription('...OBSOLETE')
sslBeMaxMultiplexedSessionsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 134), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeMaxMultiplexedSessionsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeMaxMultiplexedSessionsLow.setDescription('...OBSOLETE')
sslBeMaxMultiplexedSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 135), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeMaxMultiplexedSessionsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeMaxMultiplexedSessionsHigh.setDescription('...OBSOLETE')
sslBeSessionsReplacedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 136), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeSessionsReplacedLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeSessionsReplacedLow.setDescription('...OBSOLETE')
sslBeSessionsReplacedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 137), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeSessionsReplacedHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeSessionsReplacedHigh.setDescription('...OBSOLETE')
sslBeTotSSLv3HandshakesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 138), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3HandshakesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSSLv3HandshakesLow.setDescription('...OBSOLETE')
sslBeTotSSLv3HandshakesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 139), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3HandshakesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSSLv3HandshakesHigh.setDescription('...OBSOLETE')
sslBeTotTLSv1HandshakesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 140), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1HandshakesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotTLSv1HandshakesLow.setDescription('...OBSOLETE')
sslBeTotTLSv1HandshakesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 141), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1HandshakesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotTLSv1HandshakesHigh.setDescription('...OBSOLETE')
sslBeTotSSLv3ClientAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 142), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3ClientAuthenticationsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSSLv3ClientAuthenticationsLow.setDescription('...OBSOLETE')
sslBeTotSSLv3ClientAuthenticationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 143), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3ClientAuthenticationsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSSLv3ClientAuthenticationsHigh.setDescription('...OBSOLETE')
sslBeTotTLSv1ClientAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 144), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1ClientAuthenticationsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotTLSv1ClientAuthenticationsLow.setDescription('...OBSOLETE')
sslBeTotTLSv1ClientAuthenticationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 145), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1ClientAuthenticationsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotTLSv1ClientAuthenticationsHigh.setDescription('...OBSOLETE')
sslBeTotRSA512keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 146), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA512keyExchangesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotRSA512keyExchangesLow.setDescription('...OBSOLETE')
sslBeTotRSA512keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 147), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA512keyExchangesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotRSA512keyExchangesHigh.setDescription('...OBSOLETE')
sslBeTotRSA1024keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 148), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA1024keyExchangesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotRSA1024keyExchangesLow.setDescription('...OBSOLETE')
sslBeTotRSA1024keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 149), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA1024keyExchangesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotRSA1024keyExchangesHigh.setDescription('...OBSOLETE')
sslBeTotRSA2048keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 150), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA2048keyExchangesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotRSA2048keyExchangesLow.setDescription('...OBSOLETE')
sslBeTotRSA2048keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 151), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA2048keyExchangesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotRSA2048keyExchangesHigh.setDescription('...OBSOLETE')
sslBeTotDH512keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 152), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH512keyExchangesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotDH512keyExchangesLow.setDescription('...OBSOLETE')
sslBeTotDH512keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 153), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH512keyExchangesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotDH512keyExchangesHigh.setDescription('...OBSOLETE')
sslBeTotDH1024keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 154), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH1024keyExchangesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotDH1024keyExchangesLow.setDescription('...OBSOLETE')
sslBeTotDH1024keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 155), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH1024keyExchangesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotDH1024keyExchangesHigh.setDescription('...OBSOLETE')
sslBeTotDH2048keyExchangesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 156), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH2048keyExchangesLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotDH2048keyExchangesLow.setDescription('...OBSOLETE')
sslBeTotDH2048keyExchangesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 157), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH2048keyExchangesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotDH2048keyExchangesHigh.setDescription('...OBSOLETE')
sslBeTotRSAAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 158), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSAAuthorizationsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotRSAAuthorizationsLow.setDescription('...OBSOLETE')
sslBeTotRSAAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 159), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSAAuthorizationsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotRSAAuthorizationsHigh.setDescription('...OBSOLETE')
sslBeTotDHAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 160), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDHAuthorizationsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotDHAuthorizationsLow.setDescription('...OBSOLETE')
sslBeTotDHAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 161), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDHAuthorizationsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotDHAuthorizationsHigh.setDescription('...OBSOLETE')
sslBeTotDSSAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 162), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDSSAuthorizationsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotDSSAuthorizationsLow.setDescription('...OBSOLETE')
sslBeTotDSSAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 163), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDSSAuthorizationsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotDSSAuthorizationsHigh.setDescription('...OBSOLETE')
sslBeTotNULLAuthorizationsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 164), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotNULLAuthorizationsLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotNULLAuthorizationsLow.setDescription('...OBSOLETE')
sslBeTotNULLAuthorizationsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 165), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotNULLAuthorizationsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotNULLAuthorizationsHigh.setDescription('...OBSOLETE')
sslBeTot40BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 166), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitRC4CiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot40BitRC4CiphersLow.setDescription('...OBSOLETE')
sslBeTot40BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 167), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitRC4CiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot40BitRC4CiphersHigh.setDescription('...OBSOLETE')
sslBeTot56BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 168), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitRC4CiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot56BitRC4CiphersLow.setDescription('...OBSOLETE')
sslBeTot56BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 169), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitRC4CiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot56BitRC4CiphersHigh.setDescription('...OBSOLETE')
sslBeTot64BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 170), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot64BitRC4CiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot64BitRC4CiphersLow.setDescription('...OBSOLETE')
sslBeTot64BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 171), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot64BitRC4CiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot64BitRC4CiphersHigh.setDescription('...OBSOLETE')
sslBeTot128BitRC4CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 172), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitRC4CiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot128BitRC4CiphersLow.setDescription('...OBSOLETE')
sslBeTot128BitRC4CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 173), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitRC4CiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot128BitRC4CiphersHigh.setDescription('...OBSOLETE')
sslBeTot40BitDESCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 174), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitDESCiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot40BitDESCiphersLow.setDescription('...OBSOLETE')
sslBeTot40BitDESCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 175), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitDESCiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot40BitDESCiphersHigh.setDescription('...OBSOLETE')
sslBeTot56BitDESCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 176), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitDESCiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot56BitDESCiphersLow.setDescription('...OBSOLETE')
sslBeTot56BitDESCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 177), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitDESCiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot56BitDESCiphersHigh.setDescription('...OBSOLETE')
sslBeTot168Bit3DESCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 178), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot168Bit3DESCiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot168Bit3DESCiphersLow.setDescription('...OBSOLETE')
sslBeTot168Bit3DESCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 179), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot168Bit3DESCiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot168Bit3DESCiphersHigh.setDescription('...OBSOLETE')
sslBeTot40BitRC2CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 180), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitRC2CiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot40BitRC2CiphersLow.setDescription('...OBSOLETE')
sslBeTot40BitRC2CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 181), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitRC2CiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot40BitRC2CiphersHigh.setDescription('...OBSOLETE')
sslBeTot56BitRC2CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 182), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitRC2CiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot56BitRC2CiphersLow.setDescription('...OBSOLETE')
sslBeTot56BitRC2CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 183), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitRC2CiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot56BitRC2CiphersHigh.setDescription('...OBSOLETE')
sslBeTot128BitRC2CiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 184), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitRC2CiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot128BitRC2CiphersLow.setDescription('...OBSOLETE')
sslBeTot128BitRC2CiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 185), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitRC2CiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot128BitRC2CiphersHigh.setDescription('...OBSOLETE')
sslBeTot128BitIDEACiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 186), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitIDEACiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot128BitIDEACiphersLow.setDescription('...OBSOLETE')
sslBeTot128BitIDEACiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 187), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitIDEACiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTot128BitIDEACiphersHigh.setDescription('...OBSOLETE')
sslBeTotNULLCiphersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 188), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotNULLCiphersLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotNULLCiphersLow.setDescription('...OBSOLETE')
sslBeTotNULLCiphersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 189), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotNULLCiphersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotNULLCiphersHigh.setDescription('...OBSOLETE')
sslBeTotMD5MacLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 190), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotMD5MacLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotMD5MacLow.setDescription('...OBSOLETE')
sslBeTotMD5MacHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 191), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotMD5MacHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotMD5MacHigh.setDescription('...OBSOLETE')
sslBeTotSHAMacLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 192), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSHAMacLow.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSHAMacLow.setDescription('...OBSOLETE')
sslBeTotSHAMacHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 193), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSHAMacHigh.setStatus('obsolete')
if mibBuilder.loadTexts: sslBeTotSHAMacHigh.setDescription('...OBSOLETE')
sslTotTransactions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 200), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTransactions.setStatus('current')
if mibBuilder.loadTexts: sslTotTransactions.setDescription('Number of SSL transactions on the NetScaler appliance.')
sslTotSSLv2Transactions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 201), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2Transactions.setStatus('current')
if mibBuilder.loadTexts: sslTotSSLv2Transactions.setDescription('Number of SSLv2 transactions on the NetScaler appliance.')
sslTotSSLv3Transactions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 202), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3Transactions.setStatus('current')
if mibBuilder.loadTexts: sslTotSSLv3Transactions.setDescription('Total number of SSLv3 transactions on the NetScaler appliance.')
sslTotTLSv1Transactions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 203), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1Transactions.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv1Transactions.setDescription('Number of TLSv1 transactions on the NetScaler appliance.')
sslTotSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 204), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessions.setStatus('current')
if mibBuilder.loadTexts: sslTotSessions.setDescription('Number of SSL sessions on the NetScaler appliance.')
sslTotSSLv2Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 205), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2Sessions.setStatus('current')
if mibBuilder.loadTexts: sslTotSSLv2Sessions.setDescription('Number of SSLv2 sessions on the NetScaler appliance.')
sslTotSSLv3Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 206), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3Sessions.setStatus('current')
if mibBuilder.loadTexts: sslTotSSLv3Sessions.setDescription('Number of SSLv3 sessions on the NetScaler appliance.')
sslTotTLSv1Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 207), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1Sessions.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv1Sessions.setDescription('Number of TLSv1 sessions on the NetScaler appliance.')
sslTotExpiredSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 208), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotExpiredSessions.setStatus('current')
if mibBuilder.loadTexts: sslTotExpiredSessions.setDescription('Total number of expired SSL sessions on the NetScaler appliance.')
sslTotNewSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 209), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNewSessions.setStatus('current')
if mibBuilder.loadTexts: sslTotNewSessions.setDescription('Number of new SSL sessions created on the NetScaler appliance.')
sslTotSessionHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 210), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionHits.setStatus('current')
if mibBuilder.loadTexts: sslTotSessionHits.setDescription('Number of SSL session reuse hits on the NetScaler appliance.')
sslTotSessionMiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 211), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSessionMiss.setStatus('current')
if mibBuilder.loadTexts: sslTotSessionMiss.setDescription('Number of SSL session reuse misses on the NetScaler appliance.')
sslTotRenegSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 212), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRenegSessions.setStatus('current')
if mibBuilder.loadTexts: sslTotRenegSessions.setDescription('Number of SSL session renegotiations on the NetScaler appliance.')
sslTotSSLv3RenegSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 213), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3RenegSessions.setStatus('current')
if mibBuilder.loadTexts: sslTotSSLv3RenegSessions.setDescription('Number of session renegotiations done on SSLv3.')
sslTotTLSv1RenegSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 214), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1RenegSessions.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv1RenegSessions.setDescription('Number of SSL session renegotiations done on TLSv1.')
sslTotSSLv2Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 215), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2Handshakes.setStatus('current')
if mibBuilder.loadTexts: sslTotSSLv2Handshakes.setDescription('Number of handshakes on SSLv2 on the NetScaler appliance.')
sslTotSSLv3Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 216), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3Handshakes.setStatus('current')
if mibBuilder.loadTexts: sslTotSSLv3Handshakes.setDescription('Number of handshakes on SSLv3 on the NetScaler appliance.')
sslTotTLSv1Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 217), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1Handshakes.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv1Handshakes.setDescription('Number of SSL handshakes on TLSv1 on the NetScaler appliance.')
sslTotSSLv2ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 218), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2ClientAuthentications.setStatus('current')
if mibBuilder.loadTexts: sslTotSSLv2ClientAuthentications.setDescription('Number of client authentications done on SSLv2.')
sslTotSSLv3ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 219), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3ClientAuthentications.setStatus('current')
if mibBuilder.loadTexts: sslTotSSLv3ClientAuthentications.setDescription('Number of client authentications done on SSLv3.')
sslTotTLSv1ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 220), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1ClientAuthentications.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv1ClientAuthentications.setDescription('Number of client authentications done on TLSv1.')
sslTotRSA512keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 221), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA512keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslTotRSA512keyExchanges.setDescription('Number of RSA 512-bit key exchanges on the NetScaler appliance.')
sslTotRSA1024keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 222), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA1024keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslTotRSA1024keyExchanges.setDescription('Number of RSA 1024-bit key exchanges on the NetScaler appliance.')
sslTotRSA2048keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 223), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA2048keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslTotRSA2048keyExchanges.setDescription('Number of RSA 2048-bit key exchanges on the NetScaler appliance.')
sslTotDH512keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 224), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH512keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslTotDH512keyExchanges.setDescription('Number of Diffie-Helman 512-bit key exchanges on the NetScaler appliance.')
sslTotDH1024keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 225), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH1024keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslTotDH1024keyExchanges.setDescription('Number of Diffie-Helman 1024-bit key exchanges on the NetScaler appliance.')
sslTotDH2048keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 226), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDH2048keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslTotDH2048keyExchanges.setDescription('Number of Diffie-Helman 2048-bit key exchanges on the NetScaler appliance.')
sslTotRSAAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 227), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSAAuthorizations.setStatus('current')
if mibBuilder.loadTexts: sslTotRSAAuthorizations.setDescription('Number of RSA authentications on the NetScaler appliance.')
sslTotDHAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 228), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDHAuthorizations.setStatus('current')
if mibBuilder.loadTexts: sslTotDHAuthorizations.setDescription('Number of Diffie-Helman authentications on the NetScaler appliance.')
sslTotDSSAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 229), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDSSAuthorizations.setStatus('current')
if mibBuilder.loadTexts: sslTotDSSAuthorizations.setDescription('Total number of times DSS authorization is used on the NetScaler appliance.')
sslTotNULLAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 230), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNULLAuthorizations.setStatus('current')
if mibBuilder.loadTexts: sslTotNULLAuthorizations.setDescription('Number of Null authentications on the NetScaler appliance.')
sslTot40BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 231), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitRC4Ciphers.setStatus('current')
if mibBuilder.loadTexts: sslTot40BitRC4Ciphers.setDescription('Number of RC4 40-bit cipher encryptions on the NetScaler appliance.')
sslTot56BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 232), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitRC4Ciphers.setStatus('current')
if mibBuilder.loadTexts: sslTot56BitRC4Ciphers.setDescription('Number of RC4 56-bit cipher encryptions on the NetScaler appliance.')
sslTot64BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 233), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot64BitRC4Ciphers.setStatus('current')
if mibBuilder.loadTexts: sslTot64BitRC4Ciphers.setDescription('Number of RC4 64-bit cipher encryptions on the NetScaler appliance.')
sslTot128BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 234), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitRC4Ciphers.setStatus('current')
if mibBuilder.loadTexts: sslTot128BitRC4Ciphers.setDescription('Number of RC4 128-bit cipher encryptions on the NetScaler appliance.')
sslTot40BitDESCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 235), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitDESCiphers.setStatus('current')
if mibBuilder.loadTexts: sslTot40BitDESCiphers.setDescription('Number of DES 40-bit cipher encryptions on the NetScaler appliance.')
sslTot56BitDESCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 236), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitDESCiphers.setStatus('current')
if mibBuilder.loadTexts: sslTot56BitDESCiphers.setDescription('Number of DES 56-bit cipher encryptions on the NetScaler appliance.')
sslTot168Bit3DESCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 237), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot168Bit3DESCiphers.setStatus('current')
if mibBuilder.loadTexts: sslTot168Bit3DESCiphers.setDescription('Number of DES 168-bit cipher encryptions on the NetScaler appliance.')
sslTot40BitRC2Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 238), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot40BitRC2Ciphers.setStatus('current')
if mibBuilder.loadTexts: sslTot40BitRC2Ciphers.setDescription('Number of RC2 40-bit cipher encryptions on the NetScaler appliance.')
sslTot56BitRC2Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 239), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot56BitRC2Ciphers.setStatus('current')
if mibBuilder.loadTexts: sslTot56BitRC2Ciphers.setDescription('Number of RC2 56-bit cipher encryptions on the NetScaler appliance.')
sslTot128BitRC2Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 240), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitRC2Ciphers.setStatus('current')
if mibBuilder.loadTexts: sslTot128BitRC2Ciphers.setDescription('Number of RC2 128-bit cipher encryptions on the NetScaler appliance.')
sslTot128BitIDEACiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 241), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitIDEACiphers.setStatus('current')
if mibBuilder.loadTexts: sslTot128BitIDEACiphers.setDescription('Number of IDEA 128-bit cipher encryptions on the NetScaler appliance.')
sslTotNULLCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 242), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotNULLCiphers.setStatus('current')
if mibBuilder.loadTexts: sslTotNULLCiphers.setDescription('Number of Null cipher encryptions on the NetScaler appliance.')
sslTotMD5Mac = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 243), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotMD5Mac.setStatus('current')
if mibBuilder.loadTexts: sslTotMD5Mac.setDescription('Number of MD5 hashes on the NetScaler appliance.')
sslTotSHAMac = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 244), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSHAMac.setStatus('current')
if mibBuilder.loadTexts: sslTotSHAMac.setDescription('Number of SHA hashes on the NetScaler appliance.')
sslTotOffloadBulkDES = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 245), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadBulkDES.setStatus('current')
if mibBuilder.loadTexts: sslTotOffloadBulkDES.setDescription('Number of DES encryptions offloaded to the cryptography card.')
sslTotOffloadRSAKeyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 246), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadRSAKeyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslTotOffloadRSAKeyExchanges.setDescription('Number of RSA key exchanges offloaded to the cryptography card.')
sslTotOffloadDHKeyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 247), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadDHKeyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslTotOffloadDHKeyExchanges.setDescription('Number of DH key exchanges offloaded to the cryptography card.d')
sslTotOffloadSignRSA = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 248), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadSignRSA.setStatus('current')
if mibBuilder.loadTexts: sslTotOffloadSignRSA.setDescription('Number of RSA sign operations offloaded to the cryptography card.')
sslBeTotSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 260), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessions.setStatus('current')
if mibBuilder.loadTexts: sslBeTotSessions.setDescription('Number of back-end SSL sessions on the NetScaler appliance.')
sslBeTotSSLv3Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 261), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3Sessions.setStatus('current')
if mibBuilder.loadTexts: sslBeTotSSLv3Sessions.setDescription('Number of back-end SSLv3 sessions on the NetScaler appliance.')
sslBeTotTLSv1Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 262), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1Sessions.setStatus('current')
if mibBuilder.loadTexts: sslBeTotTLSv1Sessions.setDescription('Number of back-end TLSv1 sessions on the NetScaler appliance.')
sslBeExpiredSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 263), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeExpiredSessions.setStatus('current')
if mibBuilder.loadTexts: sslBeExpiredSessions.setDescription('Number of back-end export sessions on the NetScaler appliance.')
sslBeTotSessionMultiplexAttempts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 264), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttempts.setStatus('current')
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttempts.setDescription('Number of back-end SSL session multiplex attempts on the NetScaler appliance.')
sslBeTotSessionMultiplexAttemptSuccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 265), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptSuccess.setStatus('current')
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptSuccess.setDescription('Number of back-end SSL session multiplex successes on the NetScaler appliance.')
sslBeTotSessionMultiplexAttemptFails = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 266), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptFails.setStatus('current')
if mibBuilder.loadTexts: sslBeTotSessionMultiplexAttemptFails.setDescription('Number of back-end SSL session multiplex failures on the NetScaler appliance.')
sslBeMaxMultiplexedSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 267), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeMaxMultiplexedSessions.setStatus('current')
if mibBuilder.loadTexts: sslBeMaxMultiplexedSessions.setDescription('Number of back-end SSL sessions reused on the NetScaler appliance.')
sslBeTotSSLv3Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 268), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3Handshakes.setStatus('current')
if mibBuilder.loadTexts: sslBeTotSSLv3Handshakes.setDescription('Number of back-end SSLv3 handshakes on the NetScaler appliance.')
sslBeTotTLSv1Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 269), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1Handshakes.setStatus('current')
if mibBuilder.loadTexts: sslBeTotTLSv1Handshakes.setDescription('Number of back-end TLSv1 handshakes on the NetScaler appliance.')
sslBeTotSSLv3ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 270), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSSLv3ClientAuthentications.setStatus('current')
if mibBuilder.loadTexts: sslBeTotSSLv3ClientAuthentications.setDescription('Number of back-end SSLv3 client authentications on the NetScaler appliance.')
sslBeTotTLSv1ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 271), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv1ClientAuthentications.setStatus('current')
if mibBuilder.loadTexts: sslBeTotTLSv1ClientAuthentications.setDescription('Number of back-end TLSv1 client authentications on the NetScaler appliance.')
sslBeTotRSA512keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 272), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA512keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslBeTotRSA512keyExchanges.setDescription('Number of back-end RSA 512-bit key exchanges on the NetScaler appliance.')
sslBeTotRSA1024keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 273), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA1024keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslBeTotRSA1024keyExchanges.setDescription('Number of back-end RSA 1024-bit key exchanges on the NetScaler appliance.')
sslBeTotRSA2048keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 274), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSA2048keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslBeTotRSA2048keyExchanges.setDescription('Number of back-end RSA 2048-bit key exchanges on the NetScaler appliance.')
sslBeTotDH512keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 275), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH512keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslBeTotDH512keyExchanges.setDescription('Number of back-end DH 512-bit key exchanges on the NetScaler appliance.')
sslBeTotDH1024keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 276), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH1024keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslBeTotDH1024keyExchanges.setDescription('Number of back-end DH 1024-bit key exchanges on the NetScaler appliance.')
sslBeTotDH2048keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 277), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDH2048keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslBeTotDH2048keyExchanges.setDescription('Number of back-end DH 2048-bit key exchanges on the NetScaler appliance.')
sslBeTotRSAAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 278), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotRSAAuthorizations.setStatus('current')
if mibBuilder.loadTexts: sslBeTotRSAAuthorizations.setDescription('Number of back-end RSA authentications on the NetScaler appliance.')
sslBeTotDHAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 279), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDHAuthorizations.setStatus('current')
if mibBuilder.loadTexts: sslBeTotDHAuthorizations.setDescription('Number of back-end DH authentications on the NetScaler appliance.')
sslBeTotDSSAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 280), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotDSSAuthorizations.setStatus('current')
if mibBuilder.loadTexts: sslBeTotDSSAuthorizations.setDescription('Number of back-end DSS authentications on the NetScaler appliance.')
sslBeTotNULLAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 281), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotNULLAuthorizations.setStatus('current')
if mibBuilder.loadTexts: sslBeTotNULLAuthorizations.setDescription('Number of back-end null authentications on the NetScaler appliance.')
sslBeTot40BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 282), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitRC4Ciphers.setStatus('current')
if mibBuilder.loadTexts: sslBeTot40BitRC4Ciphers.setDescription('Number of back-end RC4 40-bit cipher encryptions on the NetScaler appliance.')
sslBeTot56BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 283), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitRC4Ciphers.setStatus('current')
if mibBuilder.loadTexts: sslBeTot56BitRC4Ciphers.setDescription('Number of back-end RC4 56-bit cipher encryptions on the NetScaler appliance.')
sslBeTot64BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 284), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot64BitRC4Ciphers.setStatus('current')
if mibBuilder.loadTexts: sslBeTot64BitRC4Ciphers.setDescription('Number of back-end RC4 64-bit cipher encryptions on the NetScaler appliance.')
sslBeTot128BitRC4Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 285), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitRC4Ciphers.setStatus('current')
if mibBuilder.loadTexts: sslBeTot128BitRC4Ciphers.setDescription('Number of back-end RC4 128-bit cipher encryptions on the NetScaler appliance.')
sslBeTot40BitDESCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 286), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitDESCiphers.setStatus('current')
if mibBuilder.loadTexts: sslBeTot40BitDESCiphers.setDescription('Number of back-end DES 40-bit cipher encryptions on the NetScaler appliance.')
sslBeTot56BitDESCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 287), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitDESCiphers.setStatus('current')
if mibBuilder.loadTexts: sslBeTot56BitDESCiphers.setDescription('Number of back-end DES 56-bit cipher encryptions on the NetScaler appliance.')
sslBeTot168Bit3DESCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 288), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot168Bit3DESCiphers.setStatus('current')
if mibBuilder.loadTexts: sslBeTot168Bit3DESCiphers.setDescription('Number of back-end 3DES 168-bit cipher encryptions on the NetScaler appliance.')
sslBeTot40BitRC2Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 289), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot40BitRC2Ciphers.setStatus('current')
if mibBuilder.loadTexts: sslBeTot40BitRC2Ciphers.setDescription('Number of back-end RC2 40-bit cipher encryptions on the NetScaler appliance.')
sslBeTot56BitRC2Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 290), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot56BitRC2Ciphers.setStatus('current')
if mibBuilder.loadTexts: sslBeTot56BitRC2Ciphers.setDescription('Number of back-end RC2 56-bit cipher encryptions on the NetScaler appliance.')
sslBeTot128BitRC2Ciphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 291), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitRC2Ciphers.setStatus('current')
if mibBuilder.loadTexts: sslBeTot128BitRC2Ciphers.setDescription('Number of back-end RC2 128-bit cipher encryptions on the NetScaler appliance.')
sslBeTot128BitIDEACiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 292), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTot128BitIDEACiphers.setStatus('current')
if mibBuilder.loadTexts: sslBeTot128BitIDEACiphers.setDescription('Number of back-end IDEA 128-bit cipher encryptions on the NetScaler appliance.')
sslBeTotNULLCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 293), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotNULLCiphers.setStatus('current')
if mibBuilder.loadTexts: sslBeTotNULLCiphers.setDescription('Number of back-end null cipher encryptions on the NetScaler appliance.')
sslBeTotMD5Mac = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 294), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotMD5Mac.setStatus('current')
if mibBuilder.loadTexts: sslBeTotMD5Mac.setDescription('Number of back-end MD5 hashes on the NetScaler appliance.')
sslBeTotSHAMac = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 295), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotSHAMac.setStatus('current')
if mibBuilder.loadTexts: sslBeTotSHAMac.setDescription('Number of back-end SHA hashes on the NetScaler appliance.')
sslCurSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 296), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCurSessions.setStatus('current')
if mibBuilder.loadTexts: sslCurSessions.setDescription('Number of active SSL sessions on the NetScaler appliance.')
sslTotOffloadBulkAES = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 297), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadBulkAES.setStatus('current')
if mibBuilder.loadTexts: sslTotOffloadBulkAES.setDescription('Number of AES encryptions offloaded to the cryptography card.')
sslTotOffloadBulkRC4 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 298), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadBulkRC4.setStatus('current')
if mibBuilder.loadTexts: sslTotOffloadBulkRC4.setDescription('Number of RC4 encryptions offloaded to the cryptography card.')
sslNumCardsUP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 299), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslNumCardsUP.setStatus('current')
if mibBuilder.loadTexts: sslNumCardsUP.setDescription('Number of SSL cards that are UP. If the number of cards UP is lower than a threshold, a failover is initiated.')
sslCards = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 300), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCards.setStatus('current')
if mibBuilder.loadTexts: sslCards.setDescription('Number of SSL crypto cards present on the NetScaler appliance.')
sslTotBkendSessionReNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 301), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotBkendSessionReNegotiate.setStatus('current')
if mibBuilder.loadTexts: sslTotBkendSessionReNegotiate.setDescription('Number of back-end SSL session renegotiations on the NetScaler appliance.')
sslTotCipherAES128 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 302), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotCipherAES128.setStatus('current')
if mibBuilder.loadTexts: sslTotCipherAES128.setDescription('Number of AES 128-bit cipher encryptions on the NetScaler appliance.')
sslTotBkendSslV3Renego = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 303), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotBkendSslV3Renego.setStatus('current')
if mibBuilder.loadTexts: sslTotBkendSslV3Renego.setDescription('Number of back-end SSLv3 session renegotiations on the NetScaler appliance.')
sslTotBkendTlSvlRenego = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 304), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotBkendTlSvlRenego.setStatus('current')
if mibBuilder.loadTexts: sslTotBkendTlSvlRenego.setDescription('Number of back-end TLSv1 session renegotiations on the NetScaler appliance.')
sslTotCipherAES256 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 305), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotCipherAES256.setStatus('current')
if mibBuilder.loadTexts: sslTotCipherAES256.setDescription('Number of AES 256-bit cipher encryptions on the NetScaler appliance.')
sslTotBkendCipherAES128 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 306), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotBkendCipherAES128.setStatus('current')
if mibBuilder.loadTexts: sslTotBkendCipherAES128.setDescription('Back-end AES 128-bit cipher encryptions on the NetScaler appliance.')
sslTotBkendCipherAES256 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 307), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotBkendCipherAES256.setStatus('current')
if mibBuilder.loadTexts: sslTotBkendCipherAES256.setDescription('Back-end AES 256-bit cipher encryptions on the NetScaler appliance.')
sslTotHwEncBE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 308), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotHwEncBE.setStatus('current')
if mibBuilder.loadTexts: sslTotHwEncBE.setDescription('Number of bytes encrypted in hardware on the back end.')
sslTotDec = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 309), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDec.setStatus('current')
if mibBuilder.loadTexts: sslTotDec.setDescription('Number of bytes decrypted on the NetScaler appliance.')
sslTotSwEncFE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 310), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSwEncFE.setStatus('current')
if mibBuilder.loadTexts: sslTotSwEncFE.setDescription('Number of bytes encrypted in software on the front end.')
sslTotEncFE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 311), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotEncFE.setStatus('current')
if mibBuilder.loadTexts: sslTotEncFE.setDescription('Number of bytes encrypted on the front end.')
sslTotEnc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 312), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotEnc.setStatus('current')
if mibBuilder.loadTexts: sslTotEnc.setDescription('Number of bytes encrypted on the NetScaler appliance.')
sslTotDecHw = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 313), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDecHw.setStatus('current')
if mibBuilder.loadTexts: sslTotDecHw.setDescription('Number of bytes decrypted in hardware.')
sslTotSwDecBE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 314), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSwDecBE.setStatus('current')
if mibBuilder.loadTexts: sslTotSwDecBE.setDescription('Number of bytes decrypted in software on back-end')
sslTotHwDecFE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 315), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotHwDecFE.setStatus('current')
if mibBuilder.loadTexts: sslTotHwDecFE.setDescription('Number of bytes decrypted in hardware on the front end.')
sslTotEncHw = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 316), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotEncHw.setStatus('current')
if mibBuilder.loadTexts: sslTotEncHw.setDescription('Number of bytes encrypted in hardware.')
sslTotDecSw = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 317), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDecSw.setStatus('current')
if mibBuilder.loadTexts: sslTotDecSw.setDescription('Number of bytes decrypted in software.')
sslTotSwEncBE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 318), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSwEncBE.setStatus('current')
if mibBuilder.loadTexts: sslTotSwEncBE.setDescription('Number of bytes encrypted in software on the back end.')
sslTotEncSw = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 319), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotEncSw.setStatus('current')
if mibBuilder.loadTexts: sslTotEncSw.setDescription('Number of bytes encrypted in software.')
sslTotSwDecFE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 320), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSwDecFE.setStatus('current')
if mibBuilder.loadTexts: sslTotSwDecFE.setDescription('Number of bytes decrypted in software on the front end.')
sslTotEncBE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 321), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotEncBE.setStatus('current')
if mibBuilder.loadTexts: sslTotEncBE.setDescription('Number of bytes encrypted on the back end.')
sslTotDecBE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 322), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDecBE.setStatus('current')
if mibBuilder.loadTexts: sslTotDecBE.setDescription('Number of bytes decrypted on the back end.')
sslTotHwDecBE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 323), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotHwDecBE.setStatus('current')
if mibBuilder.loadTexts: sslTotHwDecBE.setDescription('Number of bytes decrypted in hardware on the back end.')
sslTotDecFE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 324), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotDecFE.setStatus('current')
if mibBuilder.loadTexts: sslTotDecFE.setDescription('Number of bytes decrypted on the front end.')
sslTotHwEncFE = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 325), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotHwEncFE.setStatus('current')
if mibBuilder.loadTexts: sslTotHwEncFE.setDescription('Number of bytes encrypted in hardware on the front end.')
sslTotRSA4096keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 326), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotRSA4096keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslTotRSA4096keyExchanges.setDescription('Number of RSA 4096-bit key exchanges on the NetScaler appliance.')
sslCurQSize = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 327), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCurQSize.setStatus('current')
if mibBuilder.loadTexts: sslCurQSize.setDescription('Current queue size')
sslChipReinitCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 328), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslChipReinitCount.setStatus('current')
if mibBuilder.loadTexts: sslChipReinitCount.setDescription('Count of all reinitialize event for all SSL crypto chips.')
sslTotECDHE224keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 329), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotECDHE224keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslTotECDHE224keyExchanges.setDescription('Number of 224 Elliptical Curve Diffie-Helman on the NetScaler appliance.')
sslTotECDHE256keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 330), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotECDHE256keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslTotECDHE256keyExchanges.setDescription('Number of 256 Elliptical Curve Diffie-Helman on the NetScaler appliance.')
sslTotECDHE384keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 331), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotECDHE384keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslTotECDHE384keyExchanges.setDescription('Number of 384 Elliptical Curve Diffie-Helman on the NetScaler appliance.')
sslTotECDHE521keyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 332), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotECDHE521keyExchanges.setStatus('current')
if mibBuilder.loadTexts: sslTotECDHE521keyExchanges.setDescription('Number of 521 Elliptical Curve Diffie-Helman on the NetScaler appliance.')
sslTotTransactionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 333), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTransactionsRate.setStatus('current')
if mibBuilder.loadTexts: sslTotTransactionsRate.setDescription('SSL Transactions rate per second.')
sslTotSSLv2TransactionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 334), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv2TransactionsRate.setStatus('current')
if mibBuilder.loadTexts: sslTotSSLv2TransactionsRate.setDescription('SSLv2 Transactions rate per second.')
sslTotSSLv3TransactionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 335), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotSSLv3TransactionsRate.setStatus('current')
if mibBuilder.loadTexts: sslTotSSLv3TransactionsRate.setDescription('SSLv3 Transactions rate per second.')
sslTotTLSv1TransactionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 336), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv1TransactionsRate.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv1TransactionsRate.setDescription('TLSv1 Transactions rate per second.')
sslBeTotEcdheCurve521 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 337), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotEcdheCurve521.setStatus('current')
if mibBuilder.loadTexts: sslBeTotEcdheCurve521.setDescription('Number of back-end ECDHE 521 curve Key exchanges  on the NetScaler appliance.')
sslBeTotEcdheCurve384 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 338), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotEcdheCurve384.setStatus('current')
if mibBuilder.loadTexts: sslBeTotEcdheCurve384.setDescription('Number of back-end ECDHE 384 curve Key exchanges  on the NetScaler appliance.')
sslBeTotEcdheCurve256 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 339), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotEcdheCurve256.setStatus('current')
if mibBuilder.loadTexts: sslBeTotEcdheCurve256.setDescription('Number of back-end ECDHE 256 curve Key exchanges  on the NetScaler appliance.')
sslBeTotEcdheCurve224 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 340), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotEcdheCurve224.setStatus('current')
if mibBuilder.loadTexts: sslBeTotEcdheCurve224.setDescription('Number of back-end ECDHE 224 curve Key exchanges  on the NetScaler appliance.')
sslTotTLSv11Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 341), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv11Handshakes.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv11Handshakes.setDescription('Number of SSL handshakes on TLSv1.1 on the NetScaler appliance.')
sslTotTLSv12Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 342), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv12Handshakes.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv12Handshakes.setDescription('Number of SSL handshakes on TLSv1.2 on the NetScaler appliance.')
sslTotTLSv11Transactions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 343), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv11Transactions.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv11Transactions.setDescription('Number of TLSv1.1 transactions on the NetScaler appliance.')
sslTotTLSv12Transactions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 344), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv12Transactions.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv12Transactions.setDescription('Number of TLSv1.2 transactions on the NetScaler appliance.')
sslTotTLSv11Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 345), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv11Sessions.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv11Sessions.setDescription('Number of TLSv1.1 sessions on the NetScaler appliance.')
sslTotTLSv12Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 346), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv12Sessions.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv12Sessions.setDescription('Number of TLSv1.2 sessions on the NetScaler appliance.')
sslTotTLSv11RenegSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 347), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv11RenegSessions.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv11RenegSessions.setDescription('Number of SSL session renegotiations done on TLSv1.1.')
sslTotTLSv12RenegSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 348), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv12RenegSessions.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv12RenegSessions.setDescription('Number of SSL session renegotiations done on TLSv1.2.')
sslTotTLSv11ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 349), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv11ClientAuthentications.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv11ClientAuthentications.setDescription('Number of client authentications done on TLSv1.1.')
sslTotTLSv12ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 350), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv12ClientAuthentications.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv12ClientAuthentications.setDescription('Number of client authentications done on TLSv1.2.')
sslTotTLSv11TransactionRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 351), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv11TransactionRate.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv11TransactionRate.setDescription('TLSv1.1 Transactions rate per second.')
sslTotTLSv12TransactionRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 352), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotTLSv12TransactionRate.setStatus('current')
if mibBuilder.loadTexts: sslTotTLSv12TransactionRate.setDescription('TLSv1.2 Transactions rate per second.')
sslTot128BitAESGCMCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 353), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot128BitAESGCMCiphers.setStatus('current')
if mibBuilder.loadTexts: sslTot128BitAESGCMCiphers.setDescription('Number of AEC-GCM 128-bit cipher encryptions on the NetScaler appliance.')
sslTot256BitAESGCMCiphers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 354), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTot256BitAESGCMCiphers.setStatus('current')
if mibBuilder.loadTexts: sslTot256BitAESGCMCiphers.setDescription('Number of AEC-GCM 256-bit cipher encryptions on the NetScaler appliance.')
sslTotOffloadBulkAESGCM128 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 355), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadBulkAESGCM128.setStatus('current')
if mibBuilder.loadTexts: sslTotOffloadBulkAESGCM128.setDescription('Number of AES-GCM 128-bit encryptions offloaded to the cryptography card.')
sslTotOffloadBulkAESGCM256 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 356), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotOffloadBulkAESGCM256.setStatus('current')
if mibBuilder.loadTexts: sslTotOffloadBulkAESGCM256.setDescription('Number of AES-GCM 256-bit encryptions offloaded to the cryptography card.')
sslBeTotTLSv11Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 357), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv11Sessions.setStatus('current')
if mibBuilder.loadTexts: sslBeTotTLSv11Sessions.setDescription('Number of back-end TLSv1.1 sessions on the NetScaler appliance.')
sslBeTotTLSv12Sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 358), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv12Sessions.setStatus('current')
if mibBuilder.loadTexts: sslBeTotTLSv12Sessions.setDescription('Number of back-end TLSv1.2 sessions on the NetScaler appliance.')
sslBeTotTLSv11Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 359), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv11Handshakes.setStatus('current')
if mibBuilder.loadTexts: sslBeTotTLSv11Handshakes.setDescription('Number of back-end TLSv1.1 handshakes on the NetScaler appliance.')
sslBeTotTLSv12Handshakes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 360), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv12Handshakes.setStatus('current')
if mibBuilder.loadTexts: sslBeTotTLSv12Handshakes.setDescription('Number of back-end TLSv1.2 handshakes on the NetScaler appliance.')
sslBeTotTLSv11ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 361), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv11ClientAuthentications.setStatus('current')
if mibBuilder.loadTexts: sslBeTotTLSv11ClientAuthentications.setDescription('Number of back-end TLSv1.1 client authentications on the NetScaler appliance.')
sslBeTotTLSv12ClientAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 362), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslBeTotTLSv12ClientAuthentications.setStatus('current')
if mibBuilder.loadTexts: sslBeTotTLSv12ClientAuthentications.setDescription('Number of back-end TLSv1.2 client authentications on the NetScaler appliance.')
sslTotBkendTlSv11Renego = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 363), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotBkendTlSv11Renego.setStatus('current')
if mibBuilder.loadTexts: sslTotBkendTlSv11Renego.setDescription('Number of back-end TLSv1.1 session renegotiations on the NetScaler appliance.')
sslTotBkendTlSv12Renego = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 364), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotBkendTlSv12Renego.setStatus('current')
if mibBuilder.loadTexts: sslTotBkendTlSv12Renego.setDescription('Number of back-end TLSv1.2 session renegotiations on the NetScaler appliance.')
sslCryptoUtilization = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 365), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCryptoUtilization.setStatus('current')
if mibBuilder.loadTexts: sslCryptoUtilization.setDescription('Utilization of the hardware crypto resource. Only valid values are 0-100%. Only works for platform with N3 chips A value of 4294967295 is displayed for a platform without a N3 chip')
sslTotECDSAAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 47, 366), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTotECDSAAuthorizations.setStatus('current')
if mibBuilder.loadTexts: sslTotECDSAAuthorizations.setDescription('Total number of times ECDSA authorization is used on the NetScaler appliance.')
nsHttpStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48))
httpTotGetsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotGetsLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotGetsLow.setDescription('...OBSOLETE')
httpTotGetsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotGetsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotGetsHigh.setDescription('...OBSOLETE')
httpTotPostsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotPostsLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotPostsLow.setDescription('...OBSOLETE')
httpTotPostsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotPostsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotPostsHigh.setDescription('...OBSOLETE')
httpTotOthersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotOthersLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotOthersLow.setDescription('...OBSOLETE')
httpTotOthersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotOthersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotOthersHigh.setDescription('...OBSOLETE')
httpTotRxRequestBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRxRequestBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotRxRequestBytesLow.setDescription('...OBSOLETE')
httpTotRxRequestBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRxRequestBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotRxRequestBytesHigh.setDescription('...OBSOLETE')
httpTotRxResponseBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRxResponseBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotRxResponseBytesLow.setDescription('...OBSOLETE')
httpTotRxResponseBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRxResponseBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotRxResponseBytesHigh.setDescription('...OBSOLETE')
httpTotTxRequestBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotTxRequestBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotTxRequestBytesLow.setDescription('...OBSOLETE')
httpTotTxRequestBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotTxRequestBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotTxRequestBytesHigh.setDescription('...OBSOLETE')
httpTotTxResponseBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotTxResponseBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotTxResponseBytesLow.setDescription('...OBSOLETE')
httpTotTxResponseBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotTxResponseBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotTxResponseBytesHigh.setDescription('...OBSOLETE')
httpTotHTTP10reqLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotHTTP10reqLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotHTTP10reqLow.setDescription('...OBSOLETE')
httpTotHTTP10reqHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotHTTP10reqHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotHTTP10reqHigh.setDescription('...OBSOLETE')
httpTotResponsesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotResponsesLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotResponsesLow.setDescription('...OBSOLETE')
httpTotResponsesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotResponsesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotResponsesHigh.setDescription('...OBSOLETE')
httpTot10ResponsesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTot10ResponsesLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpTot10ResponsesLow.setDescription('...OBSOLETE')
httpTot10ResponsesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTot10ResponsesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpTot10ResponsesHigh.setDescription('...OBSOLETE')
httpTotClenResponsesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotClenResponsesLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotClenResponsesLow.setDescription('...OBSOLETE')
httpTotClenResponsesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotClenResponsesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotClenResponsesHigh.setDescription('...OBSOLETE')
httpTotChunkedResponsesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotChunkedResponsesLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotChunkedResponsesLow.setDescription('...OBSOLETE')
httpTotChunkedResponsesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotChunkedResponsesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotChunkedResponsesHigh.setDescription('...OBSOLETE')
httpErrIncompleteRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteRequestsLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrIncompleteRequestsLow.setDescription('...OBSOLETE')
httpErrIncompleteRequestsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteRequestsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrIncompleteRequestsHigh.setDescription('...OBSOLETE')
httpErrIncompleteResponsesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteResponsesLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrIncompleteResponsesLow.setDescription('...OBSOLETE')
httpErrIncompleteResponsesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteResponsesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrIncompleteResponsesHigh.setDescription('...OBSOLETE')
httpErrPipelinedRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrPipelinedRequestsLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrPipelinedRequestsLow.setDescription('...OBSOLETE')
httpErrPipelinedRequestsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrPipelinedRequestsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrPipelinedRequestsHigh.setDescription('...OBSOLETE')
httpErrIncompleteHeadersLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteHeadersLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrIncompleteHeadersLow.setDescription('...OBSOLETE')
httpErrIncompleteHeadersHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteHeadersHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrIncompleteHeadersHigh.setDescription('...OBSOLETE')
httpErrServerBusyLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrServerBusyLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrServerBusyLow.setDescription('...OBSOLETE')
httpErrServerBusyHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrServerBusyHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrServerBusyHigh.setDescription('...OBSOLETE')
httpTotChunkedReqLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotChunkedReqLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotChunkedReqLow.setDescription('...OBSOLETE')
httpTotChunkedReqHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotChunkedReqHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotChunkedReqHigh.setDescription('...OBSOLETE')
httpTotClenReqLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotClenReqLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotClenReqLow.setDescription('...OBSOLETE')
httpTotClenReqHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotClenReqHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpTotClenReqHigh.setDescription('...OBSOLETE')
httpErrLargeContentLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeContentLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrLargeContentLow.setDescription('...OBSOLETE')
httpErrLargeContentHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeContentHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrLargeContentHigh.setDescription('...OBSOLETE')
httpErrLargeCtlenLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeCtlenLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrLargeCtlenLow.setDescription('...OBSOLETE')
httpErrLargeCtlenHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeCtlenHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrLargeCtlenHigh.setDescription('...OBSOLETE')
httpErrLargeChunkLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeChunkLow.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrLargeChunkLow.setDescription('...OBSOLETE')
httpErrLargeChunkHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeChunkHigh.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrLargeChunkHigh.setDescription('...OBSOLETE')
httpTotGets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotGets.setStatus('current')
if mibBuilder.loadTexts: httpTotGets.setDescription('Total number of HTTP requests received with the GET method.')
httpTotPosts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotPosts.setStatus('current')
if mibBuilder.loadTexts: httpTotPosts.setDescription('Total number of HTTP requests received with the POST method.')
httpTotOthers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotOthers.setStatus('current')
if mibBuilder.loadTexts: httpTotOthers.setDescription('Total number of HTTP requests received with methods other than GET and POST. Some of the other well-defined HTTP methods are HEAD, PUT, DELETE, OPTIONS, and TRACE. User-defined methods are also allowed.')
httpTotRxRequestBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRxRequestBytes.setStatus('current')
if mibBuilder.loadTexts: httpTotRxRequestBytes.setDescription('Total number of bytes of HTTP request data received.')
httpTotRxResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRxResponseBytes.setStatus('current')
if mibBuilder.loadTexts: httpTotRxResponseBytes.setDescription('Total number of bytes of HTTP response data received.')
httpTotTxRequestBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotTxRequestBytes.setStatus('current')
if mibBuilder.loadTexts: httpTotTxRequestBytes.setDescription('Total number of bytes of HTTP request data transmitted.')
httpTotTxResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotTxResponseBytes.setStatus('current')
if mibBuilder.loadTexts: httpTotTxResponseBytes.setDescription('Total number of bytes of HTTP response data transmitted.')
httpTot10Requests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTot10Requests.setStatus('current')
if mibBuilder.loadTexts: httpTot10Requests.setDescription('Total number of HTTP/1.0 requests received.')
httpTotResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotResponses.setStatus('current')
if mibBuilder.loadTexts: httpTotResponses.setDescription('Total number of HTTP responses sent.')
httpTot10Responses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTot10Responses.setStatus('current')
if mibBuilder.loadTexts: httpTot10Responses.setDescription('Total number of HTTP/1.0 responses sent.')
httpTotClenResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotClenResponses.setStatus('current')
if mibBuilder.loadTexts: httpTotClenResponses.setDescription('Total number of HTTP responses sent in which the Content-length field of the HTTP header has been set. Content-length specifies the length of the content, in bytes, in the associated HTTP body.')
httpTotChunkedResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotChunkedResponses.setStatus('current')
if mibBuilder.loadTexts: httpTotChunkedResponses.setDescription('Total number of HTTP responses sent in which the Transfer-Encoding field of the HTTP header has been set to chunked. This setting is used when the server wants to start sending the response before knowing its total length. The server breaks the response into chunks and sends them in sequence, inserting the length of each chunk before the actual data. The message ends with a chunk of size zero.')
httpErrIncompleteRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteRequests.setStatus('current')
if mibBuilder.loadTexts: httpErrIncompleteRequests.setDescription('Total number of HTTP requests received in which the header spans more than one packet.')
httpErrIncompleteResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteResponses.setStatus('current')
if mibBuilder.loadTexts: httpErrIncompleteResponses.setDescription('Total number of HTTP responses received in which the header spans more than one packet.')
httpErrPipelinedRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrPipelinedRequests.setStatus('obsolete')
if mibBuilder.loadTexts: httpErrPipelinedRequests.setDescription('...OBSOLETE')
httpErrIncompleteHeaders = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrIncompleteHeaders.setStatus('current')
if mibBuilder.loadTexts: httpErrIncompleteHeaders.setDescription('Total number of HTTP requests and responses received in which the HTTP header spans more than one packet.')
httpErrServerBusy = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrServerBusy.setStatus('current')
if mibBuilder.loadTexts: httpErrServerBusy.setDescription('Total number of HTTP error responses received. Some of the error responses are: \n500 \tInternal Server Error\n501 \tNot Implemented\n502 \tBad Gateway\n503 \tService Unavailable\n504 \tGateway Timeout\n505 \tHTTP Version Not Supported')
httpTotChunkedRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotChunkedRequests.setStatus('current')
if mibBuilder.loadTexts: httpTotChunkedRequests.setDescription('Total number of HTTP requests in which the Transfer-Encoding field of the HTTP header has been set to chunked.')
httpTotClenRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotClenRequests.setStatus('current')
if mibBuilder.loadTexts: httpTotClenRequests.setDescription('Total number of HTTP requests in which the Content-length field of the HTTP header has been set. Content-length specifies the length of the content, in bytes, in the associated HTTP body.')
httpErrLargeContent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeContent.setStatus('current')
if mibBuilder.loadTexts: httpErrLargeContent.setDescription('Total number of requests and responses received with large body.')
httpErrLargeCtlen = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeCtlen.setStatus('current')
if mibBuilder.loadTexts: httpErrLargeCtlen.setDescription('Total number of requests received with large content, in which the Content-length field of the HTTP header has been set. Content-length specifies the length of the content, in bytes, in the associated HTTP body.')
httpErrLargeChunk = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrLargeChunk.setStatus('current')
if mibBuilder.loadTexts: httpErrLargeChunk.setDescription('Total number of requests received with large chunk size, in which the Transfer-Encoding field of the HTTP header has been set to chunked.')
httpTotRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRequests.setStatus('current')
if mibBuilder.loadTexts: httpTotRequests.setDescription('Total number of HTTP requests received.')
httpTot11Requests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTot11Requests.setStatus('current')
if mibBuilder.loadTexts: httpTot11Requests.setDescription('Total number of HTTP/1.1 requests received.')
httpTot11Responses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTot11Responses.setStatus('current')
if mibBuilder.loadTexts: httpTot11Responses.setDescription('Total number of HTTP/1.1 responses sent.')
httpTotNoClenChunkResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotNoClenChunkResponses.setStatus('current')
if mibBuilder.loadTexts: httpTotNoClenChunkResponses.setDescription('Total number of FIN-terminated responses sent. In FIN-terminated responses, the server finishes sending the data and closes the connection.')
httpErrNoreuseMultipart = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpErrNoreuseMultipart.setStatus('current')
if mibBuilder.loadTexts: httpErrNoreuseMultipart.setDescription('Total number of HTTP multi-part responses sent. In multi-part responses, one or more entities are encapsulated within the body of a single message.')
spdy2TotStreams = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdy2TotStreams.setStatus('obsolete')
if mibBuilder.loadTexts: spdy2TotStreams.setDescription('This object has been obsoleted. Can be obtained from spdyTotStreams.')
spdyTotStreams = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdyTotStreams.setStatus('current')
if mibBuilder.loadTexts: spdyTotStreams.setDescription('Total number of requests received over SPDYv2 and SPDYv3')
spdyv2TotStreams = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdyv2TotStreams.setStatus('current')
if mibBuilder.loadTexts: spdyv2TotStreams.setDescription('Total number of requests received over SPDYv2')
spdyv3TotStreams = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdyv3TotStreams.setStatus('current')
if mibBuilder.loadTexts: spdyv3TotStreams.setDescription('Total number of requests received over SPDYv3')
httpTotRequestsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotRequestsRate.setStatus('current')
if mibBuilder.loadTexts: httpTotRequestsRate.setDescription('Rate at which HTTP Requests are received in the system per second.')
httpTotResposesRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 48, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTotResposesRate.setStatus('current')
if mibBuilder.loadTexts: httpTotResposesRate.setDescription('Rate at which HTTP Responses are received in the system per second.')
nsCacheStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49))
cacheMaxMemoryKB = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMaxMemoryKB.setStatus('current')
if mibBuilder.loadTexts: cacheMaxMemoryKB.setDescription('Largest amount of memory the NetScaler can dedicate to caching, up to 50% of available memory. A 0 value disables caching, but the caching module continues to run. ')
cacheUtilizedMemoryKB = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheUtilizedMemoryKB.setStatus('current')
if mibBuilder.loadTexts: cacheUtilizedMemoryKB.setDescription('Amount of memory the integrated cache is currently using.')
cacheNumCached = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheNumCached.setStatus('current')
if mibBuilder.loadTexts: cacheNumCached.setDescription('Responses currently in integrated cache. Includes responses fully downloaded, in the process of being downloaded, and expired or flushed but not yet removed.')
cacheErrMemAllocLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrMemAllocLow.setStatus('obsolete')
if mibBuilder.loadTexts: cacheErrMemAllocLow.setDescription('...OBSOLETE')
cacheErrMemAllocHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrMemAllocHigh.setStatus('obsolete')
if mibBuilder.loadTexts: cacheErrMemAllocHigh.setDescription('...OBSOLETE')
cacheTotRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotRequestsLow.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotRequestsLow.setDescription('...OBSOLETE')
cacheTotRequestsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotRequestsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotRequestsHigh.setDescription('...OBSOLETE')
cacheTotHitsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotHitsLow.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotHitsLow.setDescription('...OBSOLETE')
cacheTotHitsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotHitsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotHitsHigh.setDescription('...OBSOLETE')
cacheTotMissesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotMissesLow.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotMissesLow.setDescription('...OBSOLETE')
cacheTotMissesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotMissesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotMissesHigh.setDescription('...OBSOLETE')
cachePercentHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercentHit.setStatus('current')
if mibBuilder.loadTexts: cachePercentHit.setDescription('Cache hits as percentage of the total number of requests')
cacheRecentPercentHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRecentPercentHit.setStatus('current')
if mibBuilder.loadTexts: cacheRecentPercentHit.setDescription('Recently recorded cache hit ratio expressed as percentage')
cacheCurHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurHits.setStatus('current')
if mibBuilder.loadTexts: cacheCurHits.setDescription('This number should be close to the number of hits being served currently.')
cacheCurMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCurMisses.setStatus('current')
if mibBuilder.loadTexts: cacheCurMisses.setDescription('Responses fetched from the origin and served from the cache. Should approximate storable misses. Does not include non-storable misses.')
cacheTot304HitsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTot304HitsLow.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTot304HitsLow.setDescription('...OBSOLETE')
cacheTot304HitsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTot304HitsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTot304HitsHigh.setDescription('...OBSOLETE')
cacheTotNon304HitsLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotNon304HitsLow.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotNon304HitsLow.setDescription('...OBSOLETE')
cacheTotNon304HitsHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotNon304HitsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotNon304HitsHigh.setDescription('...OBSOLETE')
cachePercent304Hits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercent304Hits.setStatus('current')
if mibBuilder.loadTexts: cachePercent304Hits.setDescription('304 responses as a percentage of all responses that the NetScaler served.')
cacheRecentPercent304Hits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRecentPercent304Hits.setStatus('current')
if mibBuilder.loadTexts: cacheRecentPercent304Hits.setDescription('Recently recorded ratio of 304 hits to all hits expressed as percentage')
cacheTotStoreAbleMissesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotStoreAbleMissesLow.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotStoreAbleMissesLow.setDescription('...OBSOLETE')
cacheTotStoreAbleMissesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotStoreAbleMissesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotStoreAbleMissesHigh.setDescription('...OBSOLETE')
cacheTotNonStoreAbleMissesLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotNonStoreAbleMissesLow.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotNonStoreAbleMissesLow.setDescription('...OBSOLETE')
cacheTotNonStoreAbleMissesHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotNonStoreAbleMissesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotNonStoreAbleMissesHigh.setDescription('...OBSOLETE')
cachePercentStoreAbleMiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercentStoreAbleMiss.setStatus('current')
if mibBuilder.loadTexts: cachePercentStoreAbleMiss.setDescription('Responses that were fetched from the origin, stored in the cache, and then served to the client, as a percentage of all cache misses.')
cacheRecentPercentStoreAbleMiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRecentPercentStoreAbleMiss.setStatus('current')
if mibBuilder.loadTexts: cacheRecentPercentStoreAbleMiss.setDescription('Recently recorded ratio of store-able misses to all misses expressed as percentage.')
cacheTotRevalidationMissLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotRevalidationMissLow.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotRevalidationMissLow.setDescription('...OBSOLETE')
cacheTotRevalidationMissHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotRevalidationMissHigh.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotRevalidationMissHigh.setDescription('...OBSOLETE')
cacheTotFullToConditionalRequestLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotFullToConditionalRequestLow.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotFullToConditionalRequestLow.setDescription('...OBSOLETE')
cacheTotFullToConditionalRequestHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotFullToConditionalRequestHigh.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotFullToConditionalRequestHigh.setDescription('...OBSOLETE')
cacheTotSuccessfulRevalidationLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotSuccessfulRevalidationLow.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotSuccessfulRevalidationLow.setDescription('...OBSOLETE')
cacheTotSuccessfulRevalidationHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotSuccessfulRevalidationHigh.setStatus('obsolete')
if mibBuilder.loadTexts: cacheTotSuccessfulRevalidationHigh.setDescription('...OBSOLETE')
cachePercentSuccessfulRevalidation = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercentSuccessfulRevalidation.setStatus('current')
if mibBuilder.loadTexts: cachePercentSuccessfulRevalidation.setDescription('Percentage of times stored content was successfully revalidated by a 304 (Object Not Modifed) response rather than by a full response')
cacheRecentPercentSuccessfulRevalidation = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRecentPercentSuccessfulRevalidation.setStatus('current')
if mibBuilder.loadTexts: cacheRecentPercentSuccessfulRevalidation.setDescription('Recently recorded percentage of times stored content was successfully revalidated by a 304 response rather than by a full response')
cacheBytesServedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBytesServedLow.setStatus('obsolete')
if mibBuilder.loadTexts: cacheBytesServedLow.setDescription('...OBSOLETE')
cacheBytesServedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBytesServedHigh.setStatus('obsolete')
if mibBuilder.loadTexts: cacheBytesServedHigh.setDescription('...OBSOLETE')
cacheCompressedBytesServedLow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCompressedBytesServedLow.setStatus('obsolete')
if mibBuilder.loadTexts: cacheCompressedBytesServedLow.setDescription('...OBSOLETE')
cacheCompressedBytesServedHigh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCompressedBytesServedHigh.setStatus('obsolete')
if mibBuilder.loadTexts: cacheCompressedBytesServedHigh.setDescription('...OBSOLETE')
cachePercentByteHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercentByteHit.setStatus('current')
if mibBuilder.loadTexts: cachePercentByteHit.setDescription('Bytes served from the cache divided by total bytes served to the client. If compression is On in the NetScaler, this ratio may not reflect the bytes served by the compression module. If the compression is Off, this ratio is the same as cachePercentOriginBandwidthSaved.')
cacheRecentPercentByteHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRecentPercentByteHit.setStatus('current')
if mibBuilder.loadTexts: cacheRecentPercentByteHit.setDescription("Recently recorded cache byte hit ratio expressed as percentage. Here we define byte hit ratio as ((number of bytes served from the cache)/(total number of bytes served to the client)). This is the standard definition of Byte Hit Ratio. If compression is turned ON in NS then this ratio doesn't mean much. This might under or over estimate the origin-to-cache bandwidth saving (depending upon whether bytes served by CMP in NetScaler are more or less than compressed bytes served from the cache). If CMP is turned OFF in NS then this ratio is same as cacheRecentPercentOriginBandwidthSaved.")
cachePercentOriginBandwidthSaved = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercentOriginBandwidthSaved.setStatus('current')
if mibBuilder.loadTexts: cachePercentOriginBandwidthSaved.setDescription('Percentage of origin bandwidth saved, expressed as number of bytes served from the integrated cache divided by all bytes served. The assumption is that all compression is done in the NetScaler.')
cacheRecentPercentOriginBandwidthSaved = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRecentPercentOriginBandwidthSaved.setStatus('current')
if mibBuilder.loadTexts: cacheRecentPercentOriginBandwidthSaved.setDescription('Bytes served from cache divided by total bytes served to client. This ratio can be greater than 1 because of the assumption that all compression has been done in the NetScaler.')
cacheErrMemAlloc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrMemAlloc.setStatus('current')
if mibBuilder.loadTexts: cacheErrMemAlloc.setDescription('Total number of times the cache failed to allocate memory to store responses.')
cacheTotRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotRequests.setStatus('current')
if mibBuilder.loadTexts: cacheTotRequests.setDescription('Total cache hits plus total cache misses.')
cacheTotHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotHits.setStatus('current')
if mibBuilder.loadTexts: cacheTotHits.setDescription('Responses served from the integrated cache. These responses match a policy with a CACHE action.')
cacheTotMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotMisses.setStatus('current')
if mibBuilder.loadTexts: cacheTotMisses.setDescription('Intercepted HTTP requests requiring fetches from origin server.')
cacheTot304Hits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTot304Hits.setStatus('current')
if mibBuilder.loadTexts: cacheTot304Hits.setDescription('Object not modified responses served from the cache. (Status code 304 served instead of the full response.)')
cacheTotNon304Hits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotNon304Hits.setStatus('current')
if mibBuilder.loadTexts: cacheTotNon304Hits.setDescription('Total number of full (non-304) responses served from the cache. A 304 status code indicates that a response has not been modified since the last time it was served')
cacheTotStoreAbleMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotStoreAbleMisses.setStatus('current')
if mibBuilder.loadTexts: cacheTotStoreAbleMisses.setDescription('Cache misses for which the fetched response is stored in the cache before serving it to the client. Storable misses conform to a built-in or user-defined caching policy that contains a CACHE action.')
cacheTotNonStoreAbleMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotNonStoreAbleMisses.setStatus('current')
if mibBuilder.loadTexts: cacheTotNonStoreAbleMisses.setDescription('Cache misses for which the fetched response is not stored in the cache. These responses match policies with a NOCACHE action or are affected by Poll Every Time.')
cacheTotRevalidationMiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotRevalidationMiss.setStatus('current')
if mibBuilder.loadTexts: cacheTotRevalidationMiss.setDescription('Responses that an intervening cache revalidated with the integrated cache before serving, as determined by a Cache-Control: Max-Age header configurable in the integrated cache')
cacheTotFullToConditionalRequest = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotFullToConditionalRequest.setStatus('current')
if mibBuilder.loadTexts: cacheTotFullToConditionalRequest.setDescription('Number of user-agent requests for a cached  Poll Every Time (PET) response that were sent to the origin server as conditional requests. ')
cacheTotSuccessfulRevalidation = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotSuccessfulRevalidation.setStatus('current')
if mibBuilder.loadTexts: cacheTotSuccessfulRevalidation.setDescription('Total number of times stored content was successfully revalidated by a 304 Not Modified response from the origin.')
cacheTotResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotResponseBytes.setStatus('current')
if mibBuilder.loadTexts: cacheTotResponseBytes.setDescription('Total number of HTTP response bytes served by NetScaler from both the origin and the cache')
cacheBytesServed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBytesServed.setStatus('current')
if mibBuilder.loadTexts: cacheBytesServed.setDescription('Total number of bytes served from the integrated cache')
cacheCompressedBytesServed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCompressedBytesServed.setStatus('current')
if mibBuilder.loadTexts: cacheCompressedBytesServed.setDescription('Number of compressed bytes served from the cache')
cacheTotPetRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotPetRequests.setStatus('current')
if mibBuilder.loadTexts: cacheTotPetRequests.setDescription('Requests that triggered a search of a content group that has Poll Every Time (PET) enabled (always consult the origin server before serving cached data).')
cacheTotPetHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotPetHits.setStatus('current')
if mibBuilder.loadTexts: cacheTotPetHits.setDescription('Number of times a cache hit was found during a search of a content group that has Poll Every Time enabled.')
cachePercentPetHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercentPetHits.setStatus('current')
if mibBuilder.loadTexts: cachePercentPetHits.setDescription('Percentage of cache hits in content groups that have Poll Every Time enabled, relative to all searches of content groups with Poll Every Time enabled. ')
cacheTotParameterizedRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotParameterizedRequests.setStatus('current')
if mibBuilder.loadTexts: cacheTotParameterizedRequests.setDescription('Total number of requests where the content group has hit and invalidation parameters or selectors.')
cacheTotParameterizedHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotParameterizedHits.setStatus('current')
if mibBuilder.loadTexts: cacheTotParameterizedHits.setDescription('Parameterized requests resulting in either a 304 or non-304 hit.')
cacheTotParameterizedNon304Hits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotParameterizedNon304Hits.setStatus('current')
if mibBuilder.loadTexts: cacheTotParameterizedNon304Hits.setDescription('Parameterized requests resulting in a full response (not status code 304: Object Not Updated) served from the cache.')
cacheTotParameterized304Hits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotParameterized304Hits.setStatus('current')
if mibBuilder.loadTexts: cacheTotParameterized304Hits.setDescription('Parameterized requests resulting in an object not modified (status code 304) response. ')
cachePercentParameterized304Hits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachePercentParameterized304Hits.setStatus('current')
if mibBuilder.loadTexts: cachePercentParameterized304Hits.setDescription('Percentage of parameterized 304 hits relative to all parameterized hits.')
cacheRecentPercentParameterizedHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheRecentPercentParameterizedHits.setStatus('current')
if mibBuilder.loadTexts: cacheRecentPercentParameterizedHits.setDescription('Recently recorded ratio of parameterized 304 hits to all parameterized hits expressed as a percentage')
cacheTotInvalidationRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotInvalidationRequests.setStatus('current')
if mibBuilder.loadTexts: cacheTotInvalidationRequests.setDescription('Requests that match an invalidation policy and result in expiration of specific cached responses or entire content groups.')
cacheTotNonParameterizedInvalidationRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotNonParameterizedInvalidationRequests.setStatus('current')
if mibBuilder.loadTexts: cacheTotNonParameterizedInvalidationRequests.setDescription('Requests that match an invalidation policy where the invalGroups parameter is configured and expires one or more content groups.')
cacheTotParameterizedInvalidationRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotParameterizedInvalidationRequests.setStatus('current')
if mibBuilder.loadTexts: cacheTotParameterizedInvalidationRequests.setDescription('Requests matching a policy with an invalidation (INVAL) action and a content group that uses an invalidation selector or parameters.')
cacheLargestResponseReceived = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheLargestResponseReceived.setStatus('current')
if mibBuilder.loadTexts: cacheLargestResponseReceived.setDescription('Size, in bytes, of largest response sent to client from the cache or the origin server.')
cacheTotFlashcacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotFlashcacheMisses.setStatus('current')
if mibBuilder.loadTexts: cacheTotFlashcacheMisses.setDescription('Number of requests to a content group with flash cache enabled that were cache misses. Flash cache distributes the response to all the clients in aqueue.')
cacheTotFlashcacheHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotFlashcacheHits.setStatus('current')
if mibBuilder.loadTexts: cacheTotFlashcacheHits.setDescription('Number of requests to a content group with flash cache enabled that were cache hits. The flash cache setting queues requests that arrive simultaneously and distributes the response to all the clients in the queue.')
cacheTotExpireAtLastByte = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotExpireAtLastByte.setStatus('current')
if mibBuilder.loadTexts: cacheTotExpireAtLastByte.setDescription('Instances of content expiring immediately after receiving the last body byte due to the Expire at Last Byte setting for the content group.')
cacheNumMarker = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheNumMarker.setStatus('current')
if mibBuilder.loadTexts: cacheNumMarker.setDescription('Marker objects created when a response exceeds the maximum or minimum size for entries in its content group or has not yet received the minimum number of hits required for items in its content group.')
cacheMaxMemoryActiveKB = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMaxMemoryActiveKB.setStatus('current')
if mibBuilder.loadTexts: cacheMaxMemoryActiveKB.setDescription('Currently active value of maximum memory')
cache64MaxMemoryKB = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cache64MaxMemoryKB.setStatus('current')
if mibBuilder.loadTexts: cache64MaxMemoryKB.setDescription('Largest amount of memory the NetScaler can dedicate to caching, up to 50% of available memory. A 0 value disables caching, but the caching module continues to run. ')
cacheNumObjSavedOnDisk = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheNumObjSavedOnDisk.setStatus('current')
if mibBuilder.loadTexts: cacheNumObjSavedOnDisk.setDescription('Cached responses currently saved on disk. Includes responses fully saved to disk, and expired or flushed but not yet removed.')
cacheNumMBSavedOnDisk = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheNumMBSavedOnDisk.setStatus('current')
if mibBuilder.loadTexts: cacheNumMBSavedOnDisk.setDescription('Size (MB) of cached responses currently saved on disk. Includes responses fully saved to disk, and expired or flushed but not yet removed.')
cacheNumMBReadFromDisk = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheNumMBReadFromDisk.setStatus('current')
if mibBuilder.loadTexts: cacheNumMBReadFromDisk.setDescription('Total Number of MB read from disk since last reboot.')
cacheNumMBWrittenToDisk = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheNumMBWrittenToDisk.setStatus('current')
if mibBuilder.loadTexts: cacheNumMBWrittenToDisk.setDescription('Total Number of MB written to disk since last reboot.')
cacheTotSqlHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 49, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotSqlHits.setStatus('current')
if mibBuilder.loadTexts: cacheTotSqlHits.setDescription('sql response served from cache')
nsCompressionStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50))
compTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTotalRequests.setStatus('current')
if mibBuilder.loadTexts: compTotalRequests.setDescription('Number of HTTP compression requests the NetScaler receives for which the response is successfully compressed. For example, after you enable compression and configure services, if you send HTTP requests to the NetScaler using a HTTP client that supports compression, and NetScaler compresses the corresponding response, this counter is incremented.')
compTotalTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTotalTxBytes.setStatus('current')
if mibBuilder.loadTexts: compTotalTxBytes.setDescription('Number of bytes the NetScaler sends to the client after compressing the response from the server.')
compTotalRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTotalRxBytes.setStatus('current')
if mibBuilder.loadTexts: compTotalRxBytes.setDescription('Number of bytes that can be compressed, which the NetScaler receives from the server. This gives the content length of the response that the NetScaler receives from server.')
compTotalTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTotalTxPackets.setStatus('current')
if mibBuilder.loadTexts: compTotalTxPackets.setDescription('Number of HTTP packets that the NetScaler sends to the client after compressing the response from the server.')
compTotalRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTotalRxPackets.setStatus('current')
if mibBuilder.loadTexts: compTotalRxPackets.setDescription('Number of HTTP packets that can be compressed, which the NetScaler receives from the server.')
compRatio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compRatio.setStatus('current')
if mibBuilder.loadTexts: compRatio.setDescription('Ratio of compressible data received to compressed data transmitted expressed as percentage.')
compTotalDataCompressionRatio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTotalDataCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: compTotalDataCompressionRatio.setDescription('Ratio of total HTTP data received to total HTTP data transmitted expressed as percentage.')
compTcpTotalTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalTxBytes.setStatus('current')
if mibBuilder.loadTexts: compTcpTotalTxBytes.setDescription('Number of bytes that the NetScaler sends to the client after compressing the response from the server.')
compTcpTotalRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalRxBytes.setStatus('current')
if mibBuilder.loadTexts: compTcpTotalRxBytes.setDescription('Number of bytes that can be compressed, which the NetScaler receives from the server. This gives the content length of the response that the NetScaler receives from server.')
compTcpTotalTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalTxPackets.setStatus('current')
if mibBuilder.loadTexts: compTcpTotalTxPackets.setDescription('Number of TCP packets that the NetScaler sends to the client after compressing the response from the server.')
compTcpTotalRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalRxPackets.setStatus('current')
if mibBuilder.loadTexts: compTcpTotalRxPackets.setDescription('Total number of compressible packets received by NetScaler.')
compTcpTotalQuantum = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalQuantum.setStatus('current')
if mibBuilder.loadTexts: compTcpTotalQuantum.setDescription('Number of times the NetScaler compresses a quantum of data.  NetScaler buffers the data received from the server till it reaches the quantum size and then compresses the buffered data and transmits to the client.')
compTcpTotalPush = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalPush.setStatus('current')
if mibBuilder.loadTexts: compTcpTotalPush.setDescription('Number of times the NetScaler compresses data on receiving a TCP PUSH flag from the server. The PUSH flag ensures that data is compressed immediately without waiting for the buffered data size to reach the quantum size.')
compTcpTotalEoi = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalEoi.setStatus('current')
if mibBuilder.loadTexts: compTcpTotalEoi.setDescription('Number of times the NetScaler compresses data on receiving End Of Input (FIN packet).  When the NetScaler receives End Of Input (FIN packet), it compresses the buffered data immediately without waiting for the buffered data size to reach the quantum size.')
compTcpTotalTimer = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpTotalTimer.setStatus('current')
if mibBuilder.loadTexts: compTcpTotalTimer.setDescription('Number of times the NetScaler compresses data on expiration of data accumulation timer. The timer expires if the server response is very slow and consequently, the NetScaler does not receive response for a certain amount of time.  Under such a condition, the NetScaler compresses the buffered data immediately without waiting for the buffered data size to reach the quantum size.')
compTcpRatio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpRatio.setStatus('current')
if mibBuilder.loadTexts: compTcpRatio.setDescription('Ratio of compressible data received to compressed data transmitted expressed as percentage.')
compTcpBandwidthSaving = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTcpBandwidthSaving.setStatus('current')
if mibBuilder.loadTexts: compTcpBandwidthSaving.setDescription('Bandwidth saving from TCP compression expressed as percentage.')
deCompTcpRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpRxPackets.setStatus('current')
if mibBuilder.loadTexts: deCompTcpRxPackets.setDescription('Total number of compressed packets received by NetScaler.')
deCompTcpTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpTxPackets.setStatus('current')
if mibBuilder.loadTexts: deCompTcpTxPackets.setDescription('Total number of decompressed packets transmitted by NetScaler.')
deCompTcpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpRxBytes.setStatus('current')
if mibBuilder.loadTexts: deCompTcpRxBytes.setDescription('Total number of compressed bytes received by NetScaler.')
deCompTcpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpTxBytes.setStatus('current')
if mibBuilder.loadTexts: deCompTcpTxBytes.setDescription('Total number of decompressed bytes transmitted by NetScaler.')
deCompTcpErrData = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpErrData.setStatus('current')
if mibBuilder.loadTexts: deCompTcpErrData.setDescription('Number of data errors encountered while decompressing.')
deCompTcpErrLessData = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpErrLessData.setStatus('current')
if mibBuilder.loadTexts: deCompTcpErrLessData.setDescription('Number of times NetScaler received less data than declared by protocol.')
deCompTcpErrMoreData = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpErrMoreData.setStatus('current')
if mibBuilder.loadTexts: deCompTcpErrMoreData.setDescription('Number of times NetScaler received more data than declared by protocol.')
deCompTcpErrMemory = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpErrMemory.setStatus('current')
if mibBuilder.loadTexts: deCompTcpErrMemory.setDescription('Number of times memory failures occurred while decompressing.')
deCompTcpErrUnknown = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpErrUnknown.setStatus('current')
if mibBuilder.loadTexts: deCompTcpErrUnknown.setDescription('Number of times unknown errors occurred while decompressing.')
deCompTcpRatio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpRatio.setStatus('current')
if mibBuilder.loadTexts: deCompTcpRatio.setDescription('Ratio of decompressed data transmitted to compressed data received expressed as percentage.')
deCompTcpBandwidthSaving = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deCompTcpBandwidthSaving.setStatus('current')
if mibBuilder.loadTexts: deCompTcpBandwidthSaving.setDescription('Bandwidth saving from compression expressed as percentage.')
delCompTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompTotalRequests.setStatus('current')
if mibBuilder.loadTexts: delCompTotalRequests.setDescription('Total number of delta compression requests received by NetScaler.')
delCompFirstAccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompFirstAccess.setStatus('current')
if mibBuilder.loadTexts: delCompFirstAccess.setDescription('Total number of delta compression first accesses.')
delCompDone = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompDone.setStatus('current')
if mibBuilder.loadTexts: delCompDone.setDescription('Total number of delta compressions done by NetScaler.')
delCompTcpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompTcpRxBytes.setStatus('current')
if mibBuilder.loadTexts: delCompTcpRxBytes.setDescription('Total number of delta-compressible bytes received by NetScaler.')
delCompTcpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompTcpTxBytes.setStatus('current')
if mibBuilder.loadTexts: delCompTcpTxBytes.setDescription('Total number of delta-compressed bytes transmitted by NetScaler.')
delCompTcpRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompTcpRxPackets.setStatus('current')
if mibBuilder.loadTexts: delCompTcpRxPackets.setDescription('Number of delta-compressible packets received.')
delCompTcpTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompTcpTxPackets.setStatus('current')
if mibBuilder.loadTexts: delCompTcpTxPackets.setDescription('Total number of delta-compressed packets transmitted by NetScaler.')
delCompBaseServed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompBaseServed.setStatus('current')
if mibBuilder.loadTexts: delCompBaseServed.setDescription('Total number of basefile requests served by NetScaler.')
delCompBaseTcpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompBaseTcpTxBytes.setStatus('current')
if mibBuilder.loadTexts: delCompBaseTcpTxBytes.setDescription('Number of basefile bytes transmitted by NetScaler.')
delCompErrBypassed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompErrBypassed.setStatus('current')
if mibBuilder.loadTexts: delCompErrBypassed.setDescription('Number of times delta-compression bypassed by NetScaler.')
delCompErrBFileWHdrFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompErrBFileWHdrFailed.setStatus('current')
if mibBuilder.loadTexts: delCompErrBFileWHdrFailed.setDescription('Number of times basefile could not be updated in NetScaler cache.')
delCompErrNostoreMiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompErrNostoreMiss.setStatus('current')
if mibBuilder.loadTexts: delCompErrNostoreMiss.setDescription('Number of times basefile was not found in NetScaler cache.')
delCompErrReqinfoToobig = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompErrReqinfoToobig.setStatus('current')
if mibBuilder.loadTexts: delCompErrReqinfoToobig.setDescription('Number of times basefile request URL was too large.')
delCompErrReqinfoAllocfail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompErrReqinfoAllocfail.setStatus('current')
if mibBuilder.loadTexts: delCompErrReqinfoAllocfail.setDescription('Number of times requested basefile could not be allocated.')
delCompErrSessallocFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCompErrSessallocFail.setStatus('current')
if mibBuilder.loadTexts: delCompErrSessallocFail.setDescription('Number of times delta compression session could not be allocated.')
delCmpRatio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delCmpRatio.setStatus('current')
if mibBuilder.loadTexts: delCmpRatio.setDescription('Ratio of compressible data received to compressed data transmitted expressed as percentage.')
delBwSaving = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delBwSaving.setStatus('current')
if mibBuilder.loadTexts: delBwSaving.setDescription('Bandwidth saving from delta compression expressed as percentage.')
compHttpBandwidthSaving = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 50, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compHttpBandwidthSaving.setStatus('current')
if mibBuilder.loadTexts: compHttpBandwidthSaving.setDescription('Bandwidth saving from TCP compression expressed as percentage.')
nsGslbGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51))
gslbGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 1))
customEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customEntries.setStatus('current')
if mibBuilder.loadTexts: customEntries.setDescription('This is the number of custom locations')
staticEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticEntries.setStatus('current')
if mibBuilder.loadTexts: staticEntries.setDescription('This is the number of static locations')
gslbGlobalInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2))
gslbSitesTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1), )
if mibBuilder.loadTexts: gslbSitesTable.setStatus('current')
if mibBuilder.loadTexts: gslbSitesTable.setDescription('This table contains gslb sites information')
gslbSitesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "siteName"))
if mibBuilder.loadTexts: gslbSitesEntry.setStatus('current')
if mibBuilder.loadTexts: gslbSitesEntry.setDescription('...')
siteName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteName.setStatus('current')
if mibBuilder.loadTexts: siteName.setDescription('This is the name of the gslb site')
siteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteIp.setStatus('current')
if mibBuilder.loadTexts: siteIp.setDescription('The private IP address of this GSLB site.')
siteType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 3), SiteType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteType.setStatus('current')
if mibBuilder.loadTexts: siteType.setDescription('Indicates whether this GSLB site is local or remote.')
siteMetricExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 4), MetricExchange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteMetricExchange.setStatus('current')
if mibBuilder.loadTexts: siteMetricExchange.setDescription('Indicates whether metric exchange is enabled or disabled at this GSLB site.')
siteMepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 5), MepStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteMepStatus.setStatus('obsolete')
if mibBuilder.loadTexts: siteMepStatus.setDescription('...OBSOLETE')
sitePublicIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sitePublicIp.setStatus('current')
if mibBuilder.loadTexts: sitePublicIp.setDescription('The public IP address of this GSLB site.')
siteTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteTotalRequests.setStatus('current')
if mibBuilder.loadTexts: siteTotalRequests.setDescription('Total number of requests received by the virtual servers represented by all GSLB services associated with this GSLB site.')
siteTotalRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteTotalRequestBytes.setStatus('current')
if mibBuilder.loadTexts: siteTotalRequestBytes.setDescription('Total number of request bytes received by the virtual servers represented by all GSLB services associated with this GSLB site.')
siteTotalResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteTotalResponses.setStatus('current')
if mibBuilder.loadTexts: siteTotalResponses.setDescription('Number of responses received by the virtual servers represented by all GSLB services associated with this GSLB site.')
siteTotalResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteTotalResponseBytes.setStatus('current')
if mibBuilder.loadTexts: siteTotalResponseBytes.setDescription('Number of response bytes received by the virtual servers represented by all GSLB services associated with this GSLB site.')
siteCurSrvrConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteCurSrvrConnections.setStatus('current')
if mibBuilder.loadTexts: siteCurSrvrConnections.setDescription('Number of current connections to the real servers behind the virtual servers represented by all GSLB services associated with this GSLB site.')
siteCurClntConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteCurClntConnections.setStatus('current')
if mibBuilder.loadTexts: siteCurClntConnections.setDescription('Number of current client connections to the virtual servers represented by all GSLB services associated with this GSLB site.')
siteMetricMepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 13), MepStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteMetricMepStatus.setStatus('current')
if mibBuilder.loadTexts: siteMetricMepStatus.setDescription('Indicates the status of the site metric Metric Exchange connection at this GSLB site. ')
nwMetricMepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 14), MepStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwMetricMepStatus.setStatus('current')
if mibBuilder.loadTexts: nwMetricMepStatus.setDescription('Indicates the status of the network metric Metric Exchange connection at this GSLB site. ')
nwMetricExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 15), MetricExchange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwMetricExchange.setStatus('current')
if mibBuilder.loadTexts: nwMetricExchange.setDescription('Indicates whether network metric exchange is enabled or disabled at this GSLB site.')
persExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 16), MetricExchange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persExchange.setStatus('current')
if mibBuilder.loadTexts: persExchange.setDescription('Indicates whether Persistence entries exchange is enabled or disabled at this GSLB site.')
gslbSiteInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbSiteInetAddressType.setStatus('current')
if mibBuilder.loadTexts: gslbSiteInetAddressType.setDescription('The address type of gslbSiteInetAddress')
gslbSiteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbSiteInetAddress.setStatus('current')
if mibBuilder.loadTexts: gslbSiteInetAddress.setDescription('The internet address of the gslb site.')
gslbSitePublicInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 19), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbSitePublicInetAddressType.setStatus('current')
if mibBuilder.loadTexts: gslbSitePublicInetAddressType.setDescription('The address type of gslbSitePublicInetAddress')
gslbSitePublicInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 1, 1, 20), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbSitePublicInetAddress.setStatus('current')
if mibBuilder.loadTexts: gslbSitePublicInetAddress.setDescription('The internet address of the gslb site public IP.')
gslbPoliciesTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 2), )
if mibBuilder.loadTexts: gslbPoliciesTable.setStatus('obsolete')
if mibBuilder.loadTexts: gslbPoliciesTable.setDescription('This object is now obsolete as the gslb command is not supported')
gslbPoliciesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "gslbPolicyName"))
if mibBuilder.loadTexts: gslbPoliciesEntry.setStatus('obsolete')
if mibBuilder.loadTexts: gslbPoliciesEntry.setDescription('...OBSOLETE')
gslbPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbPolicyName.setStatus('obsolete')
if mibBuilder.loadTexts: gslbPolicyName.setDescription('This object is now obsolete as the gslb command is not supported.')
totalHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalHits.setStatus('obsolete')
if mibBuilder.loadTexts: totalHits.setDescription('This object is now obsolete as the gslb command is not supported..')
gslbDomainStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 3))
nsDomainTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 3, 1), )
if mibBuilder.loadTexts: nsDomainTable.setStatus('current')
if mibBuilder.loadTexts: nsDomainTable.setDescription('This table contains information about the Hits on the Domains.')
nsDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 3, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "domainName"))
if mibBuilder.loadTexts: nsDomainEntry.setStatus('current')
if mibBuilder.loadTexts: nsDomainEntry.setDescription('...')
domainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 3, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainName.setStatus('current')
if mibBuilder.loadTexts: domainName.setDescription('The domain name')
dnsTotalQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotalQueries.setStatus('current')
if mibBuilder.loadTexts: dnsTotalQueries.setDescription('Total number of DNS queries received.')
domainNameFull = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 51, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainNameFull.setStatus('current')
if mibBuilder.loadTexts: domainNameFull.setDescription('Full Domain name string')
nsPolicyEngineGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52))
nsPolicyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52, 1), )
if mibBuilder.loadTexts: nsPolicyStatsTable.setStatus('current')
if mibBuilder.loadTexts: nsPolicyStatsTable.setDescription('This table contains the statistics for all policies')
nsPolicyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "pengPolicyName"))
if mibBuilder.loadTexts: nsPolicyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nsPolicyStatsEntry.setDescription('...')
pengPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pengPolicyName.setStatus('current')
if mibBuilder.loadTexts: pengPolicyName.setDescription('Encoded name of the policy')
pengPolicyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pengPolicyHits.setStatus('current')
if mibBuilder.loadTexts: pengPolicyHits.setDescription('Total policy hits count')
pengBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pengBytesIn.setStatus('current')
if mibBuilder.loadTexts: pengBytesIn.setDescription('Input traffic of a compression policy')
pengBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pengBytesOut.setStatus('current')
if mibBuilder.loadTexts: pengBytesOut.setDescription('Output traffic of a compression policy')
pengPolicyFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 52, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pengPolicyFullName.setStatus('current')
if mibBuilder.loadTexts: pengPolicyFullName.setDescription('Full name of the policy')
nsDomainNameServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53))
nsDnsServerStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1))
dnsTotQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotQueries.setStatus('current')
if mibBuilder.loadTexts: dnsTotQueries.setDescription('Total number of DNS queries received.')
dnsTotAnswers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAnswers.setStatus('current')
if mibBuilder.loadTexts: dnsTotAnswers.setDescription('Total number of DNS responses received.')
dnsTotArecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotArecQueries.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotArecQueries.setDescription('...OBSOLETE')
dnsTotAresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAresponse.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotAresponse.setDescription('...OBSOLETE')
dnsTotNSrecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotNSrecQueries.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotNSrecQueries.setDescription('...OBSOLETE')
dnsTotNSresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotNSresponse.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotNSresponse.setDescription('...OBSOLETE')
dnsTotMXrecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotMXrecQueries.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotMXrecQueries.setDescription('...OBSOLETE')
dnsTotMXresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotMXresponse.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotMXresponse.setDescription('...OBSOLETE')
dnsTotSOArecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSOArecQueries.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotSOArecQueries.setDescription('...OBSOLETE')
dnsTotSOAresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSOAresponse.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotSOAresponse.setDescription('...OBSOLETE')
dnsTotCNAMErecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotCNAMErecQueries.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotCNAMErecQueries.setDescription('...OBSOLETE')
dnsTotCNAMEresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotCNAMEresponse.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotCNAMEresponse.setDescription('...OBSOLETE')
dnsTotUnsupportedResponseClass = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotUnsupportedResponseClass.setStatus('current')
if mibBuilder.loadTexts: dnsTotUnsupportedResponseClass.setDescription('Total number of responses for which response types were unsupported.')
dnsTotUnsupportedResponseType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotUnsupportedResponseType.setStatus('current')
if mibBuilder.loadTexts: dnsTotUnsupportedResponseType.setDescription('Total number of responses for which response type requested was unsupported.')
dnsTotUnsupportedQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotUnsupportedQueries.setStatus('current')
if mibBuilder.loadTexts: dnsTotUnsupportedQueries.setDescription('Total number of requests for which query type requested was unsupported.')
dnsTotUnsupportedQueryClass = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotUnsupportedQueryClass.setStatus('current')
if mibBuilder.loadTexts: dnsTotUnsupportedQueryClass.setDescription('Total number of queries for which query class was unsupported.')
dnsTotInvalidQueryFormat = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotInvalidQueryFormat.setStatus('current')
if mibBuilder.loadTexts: dnsTotInvalidQueryFormat.setDescription('Total number of queries whose format was invalid.')
dnsTotNonAuthNoDatas = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotNonAuthNoDatas.setStatus('current')
if mibBuilder.loadTexts: dnsTotNonAuthNoDatas.setDescription('Total number of responses for which there was a format error.')
dnsTotMultiQuery = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotMultiQuery.setStatus('current')
if mibBuilder.loadTexts: dnsTotMultiQuery.setDescription('Total number of Multi Query request received.')
dnsTotStrayAnswer = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotStrayAnswer.setStatus('current')
if mibBuilder.loadTexts: dnsTotStrayAnswer.setDescription('Total number of stray answers.')
dnsTotCacheFlush = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotCacheFlush.setStatus('current')
if mibBuilder.loadTexts: dnsTotCacheFlush.setDescription('Total number of times cache was flushed.')
dnsTotCacheEntriesFlush = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotCacheEntriesFlush.setStatus('current')
if mibBuilder.loadTexts: dnsTotCacheEntriesFlush.setDescription('Total number of cache entries flushed.')
dnsTotServerQuery = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotServerQuery.setStatus('current')
if mibBuilder.loadTexts: dnsTotServerQuery.setDescription('Total number of Server queries sent.')
dnsTotServerResponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotServerResponse.setStatus('current')
if mibBuilder.loadTexts: dnsTotServerResponse.setDescription('Total number of Server responses received.')
dnsTotArecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotArecFailed.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotArecFailed.setDescription('...OBSOLETE')
dnsTotNSrecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotNSrecFailed.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotNSrecFailed.setDescription('...OBSOLETE')
dnsTotMXrecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotMXrecFailed.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotMXrecFailed.setDescription('...OBSOLETE')
dnsTotCNAMErecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotCNAMErecFailed.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotCNAMErecFailed.setDescription('...OBSOLETE')
dnsTotArecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotArecUpdate.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotArecUpdate.setDescription('...OBSOLETE')
dnsTotNSrecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotNSrecUpdate.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotNSrecUpdate.setDescription('...OBSOLETE')
dnsTotMXrecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotMXrecUpdate.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotMXrecUpdate.setDescription('...OBSOLETE')
dnsTotSOArecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSOArecUpdate.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotSOArecUpdate.setDescription('...OBSOLETE')
dnsTotCNAMErecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotCNAMErecUpdate.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotCNAMErecUpdate.setDescription('...OBSOLETE')
dnsTotRecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotRecUpdate.setStatus('current')
if mibBuilder.loadTexts: dnsTotRecUpdate.setDescription('Total number of record updates.')
dnsTotMultiQueryDisableError = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotMultiQueryDisableError.setStatus('current')
if mibBuilder.loadTexts: dnsTotMultiQueryDisableError.setDescription('Total number of times a multi query was disabled and received a multi query.')
dnsCurArecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurArecord.setStatus('obsolete')
if mibBuilder.loadTexts: dnsCurArecord.setDescription('...OBSOLETE')
dnsCurNSrecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurNSrecord.setStatus('obsolete')
if mibBuilder.loadTexts: dnsCurNSrecord.setDescription('...OBSOLETE')
dnsCurMXrecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurMXrecord.setStatus('obsolete')
if mibBuilder.loadTexts: dnsCurMXrecord.setDescription('...OBSOLETE')
dnsCurSOArecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurSOArecord.setStatus('obsolete')
if mibBuilder.loadTexts: dnsCurSOArecord.setDescription('...OBSOLETE')
dnsCurCNAMErecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCNAMErecord.setStatus('obsolete')
if mibBuilder.loadTexts: dnsCurCNAMErecord.setDescription('...OBSOLETE')
dnsCurAuthEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurAuthEntries.setStatus('current')
if mibBuilder.loadTexts: dnsCurAuthEntries.setDescription('Total number of authoritative entries.')
dnsCurNoAuthEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurNoAuthEntries.setStatus('current')
if mibBuilder.loadTexts: dnsCurNoAuthEntries.setDescription('Total number of non-authoritative entries.')
dnsTotAuthAns = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAuthAns.setStatus('current')
if mibBuilder.loadTexts: dnsTotAuthAns.setDescription('Number of queries which were authoritatively answered.')
dnsTotAuthNoNames = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAuthNoNames.setStatus('current')
if mibBuilder.loadTexts: dnsTotAuthNoNames.setDescription('Number of queries for which no record was found.')
dnsTotNoDataResps = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotNoDataResps.setStatus('current')
if mibBuilder.loadTexts: dnsTotNoDataResps.setDescription('Number of DNS responses received without answer.')
dnsTotResponseBadLen = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotResponseBadLen.setStatus('current')
if mibBuilder.loadTexts: dnsTotResponseBadLen.setDescription('Number of DNS responses received with invalid resoure data length.')
dnsTotReqRefusals = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotReqRefusals.setStatus('current')
if mibBuilder.loadTexts: dnsTotReqRefusals.setDescription('Number of DNS requests refused.')
dnsTotOtherErrors = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotOtherErrors.setStatus('current')
if mibBuilder.loadTexts: dnsTotOtherErrors.setDescription('Total number of other errors. ')
dnsTotPTRrecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotPTRrecQueries.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotPTRrecQueries.setDescription('...OBSOLETE')
dnsTotPTRresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotPTRresponse.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotPTRresponse.setDescription('...OBSOLETE')
dnsTotPTRrecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotPTRrecUpdate.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotPTRrecUpdate.setDescription('...OBSOLETE')
dnsTotPTRrecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotPTRrecFailed.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotPTRrecFailed.setDescription('...OBSOLETE')
dnsCurPTRrecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurPTRrecord.setStatus('obsolete')
if mibBuilder.loadTexts: dnsCurPTRrecord.setDescription('...OBSOLETE')
dnsTotSRVrecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSRVrecQueries.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotSRVrecQueries.setDescription('...OBSOLETE')
dnsTotSRVresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSRVresponse.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotSRVresponse.setDescription('...OBSOLETE')
dnsTotSRVrecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSRVrecUpdate.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotSRVrecUpdate.setDescription('...OBSOLETE')
dnsTotSRVrecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSRVrecFailed.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotSRVrecFailed.setDescription('...OBSOLETE')
dnsCurSRVrecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurSRVrecord.setStatus('obsolete')
if mibBuilder.loadTexts: dnsCurSRVrecord.setDescription('...OBSOLETE')
dnsTotAAAArecQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAAAArecQueries.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotAAAArecQueries.setDescription('...OBSOLETE')
dnsTotAAAAresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAAAAresponse.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotAAAAresponse.setDescription('...OBSOLETE')
dnsTotAAAArecUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAAAArecUpdate.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotAAAArecUpdate.setDescription('...OBSOLETE')
dnsTotAAAArecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotAAAArecFailed.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotAAAArecFailed.setDescription('...OBSOLETE')
dnsCurAAAArecord = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurAAAArecord.setStatus('obsolete')
if mibBuilder.loadTexts: dnsCurAAAArecord.setDescription('...OBSOLETE')
dnsTotANYqueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotANYqueries.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotANYqueries.setDescription('...OBSOLETE')
dnsTotANYresponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotANYresponse.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotANYresponse.setDescription('...OBSOLETE')
dnsTotANYrecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotANYrecFailed.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotANYrecFailed.setDescription('...OBSOLETE')
dnsTotSOArecFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotSOArecFailed.setStatus('obsolete')
if mibBuilder.loadTexts: dnsTotSOArecFailed.setDescription('...OBSOLETE')
dns64TotQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns64TotQueries.setStatus('current')
if mibBuilder.loadTexts: dns64TotQueries.setDescription('Total number of DNS64 queries recieved.')
dns64TotAnswers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns64TotAnswers.setStatus('current')
if mibBuilder.loadTexts: dns64TotAnswers.setDescription('Total number of DNS64 answers served.')
dns64TotsvrAQueries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns64TotsvrAQueries.setStatus('current')
if mibBuilder.loadTexts: dns64TotsvrAQueries.setDescription('Total number of Queries sent by DNS64 module to backend.')
dnsErrNullAttack = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsErrNullAttack.setStatus('current')
if mibBuilder.loadTexts: dnsErrNullAttack.setDescription('Total number of queries received where all the counts are 0.')
nsdnsRegisterTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2), )
if mibBuilder.loadTexts: nsdnsRegisterTable.setStatus('current')
if mibBuilder.loadTexts: nsdnsRegisterTable.setDescription('This table contains statistics about each DNS record type')
nsdnsRegisterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "dnsRecordType"))
if mibBuilder.loadTexts: nsdnsRegisterEntry.setStatus('current')
if mibBuilder.loadTexts: nsdnsRegisterEntry.setDescription('...')
dnsRecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsRecordType.setStatus('current')
if mibBuilder.loadTexts: dnsRecordType.setDescription('DNS record type')
dnsTotEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotEntries.setStatus('current')
if mibBuilder.loadTexts: dnsTotEntries.setDescription('Total number of DNS record entries')
dnsTotUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotUpdates.setStatus('current')
if mibBuilder.loadTexts: dnsTotUpdates.setDescription('Total number of DNS proactive updates')
dnsTotResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotResponses.setStatus('current')
if mibBuilder.loadTexts: dnsTotResponses.setDescription('Total number of DNS server responses')
dnsTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotRequests.setStatus('current')
if mibBuilder.loadTexts: dnsTotRequests.setDescription('Total number of DNS queries recieved')
dnsTotErrLimits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotErrLimits.setStatus('current')
if mibBuilder.loadTexts: dnsTotErrLimits.setDescription('Total number of times we have recieved dns record with more entries than we support')
dnsTotErrRespForm = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotErrRespForm.setStatus('current')
if mibBuilder.loadTexts: dnsTotErrRespForm.setDescription('Total number of times we have recieved malformed responses from the backend')
dnsTotErrAliasEx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotErrAliasEx.setStatus('current')
if mibBuilder.loadTexts: dnsTotErrAliasEx.setDescription('Total number of times we have recieved non-cname record for a domain for which an alias exists')
dnsTotErrNoDomains = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsTotErrNoDomains.setStatus('current')
if mibBuilder.loadTexts: dnsTotErrNoDomains.setDescription('Total number of cache misses')
dnsCurEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurEntries.setStatus('current')
if mibBuilder.loadTexts: dnsCurEntries.setDescription('Current number of DNS entries')
dnsCurRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 53, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurRecords.setStatus('current')
if mibBuilder.loadTexts: dnsCurRecords.setDescription('Current number of DNS Records')
nsIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54), )
if mibBuilder.loadTexts: nsIfStatsTable.setStatus('current')
if mibBuilder.loadTexts: nsIfStatsTable.setDescription('The interface related statistics Table.')
nsIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1), ).setIndexNames((0, "NS-ROOT-MIB", "ifName"))
if mibBuilder.loadTexts: nsIfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nsIfStatsEntry.setDescription('...')
ifName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifName.setStatus('current')
if mibBuilder.loadTexts: ifName.setDescription('The name of the interface.')
ifMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMedia.setStatus('current')
if mibBuilder.loadTexts: ifMedia.setDescription('The media type of the interface.')
ifTotRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotRxBytes.setStatus('current')
if mibBuilder.loadTexts: ifTotRxBytes.setDescription('Number of bytes received by an interface since the NetScaler appliance was started or the interface statistics were cleared.')
ifRxAvgBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifRxAvgBandwidthUsage.setStatus('current')
if mibBuilder.loadTexts: ifRxAvgBandwidthUsage.setDescription('The average bandwidth, in bits per second, at which the specified interface has been receiving packets since the NetScaler appliance was started or the interface statistics were cleared.')
ifTotRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotRxPkts.setStatus('current')
if mibBuilder.loadTexts: ifTotRxPkts.setDescription('Number of packets received by an interface since the NetScaler appliance was started or the interface statistics were cleared.')
ifRxAvgPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifRxAvgPacketRate.setStatus('current')
if mibBuilder.loadTexts: ifRxAvgPacketRate.setDescription('Average rate, in packets per second, of incoming packets on the specified interface since the NetScaler appliance was started or the interface statistics were cleared.')
ifTotTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotTxBytes.setStatus('current')
if mibBuilder.loadTexts: ifTotTxBytes.setDescription('Number of bytes transmitted by an interface since the NetScaler appliance was started or the interface statistics were cleared.')
ifTxAvgBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTxAvgBandwidthUsage.setStatus('current')
if mibBuilder.loadTexts: ifTxAvgBandwidthUsage.setDescription('The average bandwidth, in bits per second, at which the specified interface has been transmitting packets since the NetScaler appliance was started or the interface statistics were cleared.')
ifTotTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotTxPkts.setStatus('current')
if mibBuilder.loadTexts: ifTotTxPkts.setDescription('Number of packets transmitted by an interface since the NetScaler appliance was started or the interface statistics were cleared.')
ifTxAvgPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTxAvgPacketRate.setStatus('current')
if mibBuilder.loadTexts: ifTxAvgPacketRate.setDescription('Average rate, in packets per second, of outgoing packets on the specified interface since the NetScaler appliance was started or the interface statistics were cleared.')
ifRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifRxCRCErrors.setStatus('current')
if mibBuilder.loadTexts: ifRxCRCErrors.setDescription('Number of packets received with the wrong checksum by the specified interface since the NetScaler appliance was started or the interface statistics were cleared. This indicates the number of Jabber frames received instead of CRC errors on the 10G data ports of NetScaler 12000-10G platform and the data ports of NetScaler MPX 15000 and 17000 platforms.')
ifRxFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifRxFrameErrors.setStatus('current')
if mibBuilder.loadTexts: ifRxFrameErrors.setDescription('Number of Jumbo frames(frame size greater than 1518 bytes) received by the specified interface since the NetScaler appliance was started or the interface statistics were cleared.')
ifRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifRxAlignmentErrors.setStatus('current')
if mibBuilder.loadTexts: ifRxAlignmentErrors.setDescription('Number of packets received with an alignment error (an error that occurs when the total number of bits of a received frame is not divisible by eight) by the specified interface. Since the NetScaler appliance was started or the interface statistics were cleared.')
ifTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTxCollisions.setStatus('obsolete')
if mibBuilder.loadTexts: ifTxCollisions.setDescription('This object is now obsolete')
ifTxExcessCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTxExcessCollisions.setStatus('obsolete')
if mibBuilder.loadTexts: ifTxExcessCollisions.setDescription('This object is now obsolete')
ifTxLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTxLateCollisions.setStatus('obsolete')
if mibBuilder.loadTexts: ifTxLateCollisions.setDescription('This object is now obsolete')
ifTxMultiCollisionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTxMultiCollisionErrors.setStatus('obsolete')
if mibBuilder.loadTexts: ifTxMultiCollisionErrors.setDescription('This object is now obsolete')
ifTxCarrierError = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTxCarrierError.setStatus('current')
if mibBuilder.loadTexts: ifTxCarrierError.setDescription("Number of Carrier Sense errors that occur when an interface\tattempts to transmit a frame but is unable to do so as no carrier is detected. This statistic is applicable only to half-duplex transmissions and is available only on 1G data ports of the NetScaler 12000 platform and management ports of NetScaler MPX 15000 and 17000 platforms.\n\t\t\t    (1) Loop back interface (LO) of all platforms indicates PE fails to send packets to BSD stack because of lack of resources in BSD stack.\n\t\t\t    (2) Number of non Cisco Heart beat packet drop on internal interface. Applicable for internal interface(which is used to communicate between NXOS-NSVSB) of VPX's running on Cisco Nexus platform")
ifTotRxMbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotRxMbits.setStatus('current')
if mibBuilder.loadTexts: ifTotRxMbits.setDescription('The total data, in megabits, received by an interface since the NetScaler appliance was started or the interface statistics were cleared. This statistic also includes the Ethernet overhead bytes, i.e. preamble, inter-packet gap, and CRC.')
ifTotTxMbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotTxMbits.setStatus('current')
if mibBuilder.loadTexts: ifTotTxMbits.setDescription('The total data, in megabits, transmitted by an interface since the NetScaler appliance was started or the interface statistics were cleared. This statistic also includes the Ethernet overhead bytes, i.e. preamble, inter-packet gap, and CRC.')
ifTotNetScalerPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotNetScalerPkts.setStatus('current')
if mibBuilder.loadTexts: ifTotNetScalerPkts.setDescription('Number of packets, destined to the NetScaler, received by an interface since the NetScaler appliance was started or the interface statistics were cleared. The packets destined to NetScaler are those that have the same MAC address as that of an interface or a VMAC address owned by the NetScaler.')
ifErrDroppedRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrDroppedRxPkts.setStatus('current')
if mibBuilder.loadTexts: ifErrDroppedRxPkts.setDescription('Number of inbound packets dropped by the specified interface. Commonly dropped packets are multicast frames, spanning tree BPDUs, packets destined to a MAC not owned by the NetScaler when L2 mode is disabled, or packets tagged for a VLAN that is not bound to the interface.  This statistic will increment in most healthy networks at a steady rate regardless of traffic load.  If a sharp spike in dropped packets occurs, it generally indicates an issue with connected L2 switches, such as a forwarding database overflow resulting in packets being broadcast on all ports.')
ifErrLinkHangs = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrLinkHangs.setStatus('current')
if mibBuilder.loadTexts: ifErrLinkHangs.setDescription('Number of times the specified interface detected hangs in the transmit and receive paths since the NetScaler appliance was started or the interface statistics were cleared.')
ifLinkReinits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLinkReinits.setStatus('current')
if mibBuilder.loadTexts: ifLinkReinits.setDescription('Number of times the link has been re-initialized. A re-initialization occurs due to link state change, configuration parameter change, or administrative reset operation.')
ifErrDuplexMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrDuplexMismatch.setStatus('current')
if mibBuilder.loadTexts: ifErrDuplexMismatch.setDescription('Number of times duplex mismatches were detected on the specified interface since the NetScaler appliance was started or the interface statistics were cleared. A mismatch will occur if the duplex mode is not identically set on both ends of the link. This statistic is only available on the NetScaler Classic edition.')
ifErrCongestedPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrCongestedPktsDrops.setStatus('current')
if mibBuilder.loadTexts: ifErrCongestedPktsDrops.setDescription('Number of outbound packets dropped from the normal and low-priority transmit (Tx) overflow queues, during congestion on the specified interface, since the NetScaler appliance was started or the interface statistics were cleared. This could be caused by one of the following: \n\t\t\t1) Packets that have been in the overflow queue for more than 10 milliseconds. \n\t\t\t2) Shortage of free receive buffers on the NetScaler.')
ifErrCongestionLimitPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrCongestionLimitPktDrops.setStatus('current')
if mibBuilder.loadTexts: ifErrCongestionLimitPktDrops.setDescription('Number of transmit (Tx) packets dropped from normal and low-priority transmit overflow queues, during congestion on the specified interface, since the NetScaler appliance was started or the interface statistics were cleared. This is caused when the overflow queue limits are exceeded.')
ifErrPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrPktRx.setStatus('current')
if mibBuilder.loadTexts: ifErrPktRx.setDescription('Number of inbound packets dropped by the hardware on a specified interface once the NetScaler appliance starts or the interface statistics are cleared. This happens due to following reasons:\n\t\t\t1)\tThe hardware receives packets at a rate higher rate than that at which the software is processing packets. In this case, the hardware FIFO overruns and starts dropping the packets .\n\t\t\t2)\tThe specified interface fails to receive inbound packets from the appliance because of insufficient memory.\n\t\t\t3)\tThe specified interface receives packets with CRC errors (Alignment or Frame Check Sequence).\n\t\t\t4)\tThe specified interface receives overly long packets.\n\t\t\t5)\tThe specified interface receives packets with alignment errors.\n\t\t\t6)\tThe software does less buffering because it is running out of available memory. When hardware detects that there is no space into which to push newly arrived packets, it starts dropping them.\n\t\t\t7)\tThe specified interface receives packets with Frame Check Sequence (FCS) errors.\n\t\t\t8)\tThe specified interface receives packets smaller than 64 bytes.\n\t\t\t9)\tThe specified interface discards error-free inbound packets because of insufficient resources. For example: NIC buffers.\n\t\t\t10)\tPackets are missed because of collision detection, link lost, physical decoding error, or MAC abort.')
ifErrRxFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrRxFIFO.setStatus('current')
if mibBuilder.loadTexts: ifErrRxFIFO.setDescription('Number packet drops due to insufficient space in the receive queue, on the specified interface, since the NetScaler appliance was started or the interface statistics were cleared. This statistic is only available on the data ports of the NetScaler 12000 platform and the NetScaler MPX 15000 and 17000 platforms.')
ifErrRxNoBuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrRxNoBuffs.setStatus('current')
if mibBuilder.loadTexts: ifErrRxNoBuffs.setDescription('Number of times the NIC hardware reported an error, due to packets drops caused by lack of buffers. This statistic is available on:\n\t\t\t(1)\tAll ports except management ports on NetScaler MPX 15000 and 17000 platforms. \n\t\t\t(2)\tAll 1G ports on NetScaler MPX 7500, 9500, 10500, 12500, 15500, 17500, 19500, and 21500 platforms.')
ifErrTxNoNSB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrTxNoNSB.setStatus('obsolete')
if mibBuilder.loadTexts: ifErrTxNoNSB.setDescription('This object has been obsoleted. This was wrongly included as snmp object  for nic_err_rx_nonsb counter.')
ifErrRxFCS = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrRxFCS.setStatus('current')
if mibBuilder.loadTexts: ifErrRxFCS.setDescription('Number of packets received with Frame Check Sequence(FCS) errors, on the specified interface, since the NetScaler appliance was started or the interface statistics were cleared. This statistic is available only on data ports of the NetScaler 12000 platform and NetScaler MPX 15000 and 17000 platforms.')
ifErrPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrPktTx.setStatus('current')
if mibBuilder.loadTexts: ifErrPktTx.setDescription('Number of outbound packets dropped by the hardware on a specified interface since the NetScaler appliance was started or the interface statistics were cleared. This could happen due to length (undersize or oversize) errors and lack of resources. This statistic is available only for: \n\t\t\t(1) Loop back interface (LO) of all platforms.\n\t\t\t(2) All data ports on the NetScaler 12000 platform.\n\t\t\t(3) Management ports on the MPX 15000 and 17000 platforms.')
ifErrTxFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrTxFIFO.setStatus('current')
if mibBuilder.loadTexts: ifErrTxFIFO.setDescription('Number of times the hardware reported an error in accumulating packets for transmission on the specified interface. This statistic is only available on 10G ports of the NetScaler 12000-10G platform and data ports of the NetScaler MPX 15000 and 17000 platforms.\n\t\t\t    (1) Loop back interfaces (LO) of all platform indicates packets crossed allowed limit, which is 10K PPS on LO interface')
ifErrTxHeartBeat = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrTxHeartBeat.setStatus('current')
if mibBuilder.loadTexts: ifErrTxHeartBeat.setDescription('Number of 10Mb link heartbeats on the specified interface. This counter is deprecated now. (Informational - 10MbMb half-duplex only)')
ifErrTxOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrTxOverflow.setStatus('current')
if mibBuilder.loadTexts: ifErrTxOverflow.setDescription('Number of packets that have passed through the overflow queues, during transmission on the specified interface, since the NetScaler appliance was started or the interface statistics were cleared. This gets incremented only on congested ports.')
ifErrTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrTxDeferred.setStatus('obsolete')
if mibBuilder.loadTexts: ifErrTxDeferred.setDescription('This object is now obsolete')
ifErrDroppedTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrDroppedTxPkts.setStatus('current')
if mibBuilder.loadTexts: ifErrDroppedTxPkts.setDescription('Number of packets dropped in transmission by the specified interface due to one of the following reasons.\n\t\t\t(1) VLAN mismatch.\n\t\t\t(2) Oversized packets.\n\t\t\t(3) Interface congestion.  \n\t\t\t(4) Loopback packets sent on non loop back interface.')
ifTotRxXonPause = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotRxXonPause.setStatus('current')
if mibBuilder.loadTexts: ifTotRxXonPause.setDescription('Number of Pause frames received on the specified interface with pause time set to zero. This statistic is not available on 10G ports of the NetScaler 12000-10G platform and data ports of the NetScaler MPX 15000 and 17000 platforms.')
ifTotRxXoffPause = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotRxXoffPause.setStatus('current')
if mibBuilder.loadTexts: ifTotRxXoffPause.setDescription('Number of Pause frames received by the specified interface with the pause time greater than zero. This statistic is only available on 10G ports of the NetScaler 12000-10G platform and data ports of the NetScaler MPX 15000 and 17000 platforms.')
ifTotXoffStateEntered = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotXoffStateEntered.setStatus('current')
if mibBuilder.loadTexts: ifTotXoffStateEntered.setDescription('Number of times transmission was stopped on the specified interface due to the receipt of Pause frames. This statistic is only available on 10G ports of the NetScaler 12000-10G platform and data ports of the NetScaler MPX 15000 and 17000 platforms.')
ifTotXonSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotXonSent.setStatus('current')
if mibBuilder.loadTexts: ifTotXonSent.setDescription('Number of pause frames, sent by the specified interface, with pause time set to zero to restart transmission. This statistic is not available on 10G ports of the NetScaler 12000-10G platform and data ports of the NetScaler MPX 15000 and 17000 platforms.')
ifTotXoffSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTotXoffSent.setStatus('current')
if mibBuilder.loadTexts: ifTotXoffSent.setDescription('Number of Pause frames sent by the specified interface with the pause time greater than zero. This statistic is only available on 10G ports of the NetScaler 12000-10G platform and data ports of the NetScaler MPX 15000 and 17000 platforms. This statistic also includes the Pause frames with pause time equal to zero.')
ifnicStsStalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifnicStsStalls.setStatus('current')
if mibBuilder.loadTexts: ifnicStsStalls.setDescription('Number of times the status updates for a specified interface were stalled since the NetScaler appliance was started or the interface statistics were cleared. A status stall is detected when the status of the interface is not updated by the NIC hardware within 0.8 seconds of the last update.')
ifnicTxStalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifnicTxStalls.setStatus('current')
if mibBuilder.loadTexts: ifnicTxStalls.setDescription('Number of times the interface stalled, when transmitting packets, since the NetScaler appliance was started or the interface statistics were cleared. Transmit (Tx) stalls are detected when a packet posted for transmission is not transmitted in 4 seconds.')
ifnicRxStalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifnicRxStalls.setStatus('current')
if mibBuilder.loadTexts: ifnicRxStalls.setDescription('Number of times the interface stalled, when receiving packets, since the NetScaler appliance was started or the interface statistics were cleared. Receive (Rx) stalls are detected when the following conditions are met:\n\t\t\t(1)The link is up for more than 10 minutes. \n\t\t\t(2)Packets are transmitted, but no packets is received for 16 seconds.')
ifnicErrDisables = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifnicErrDisables.setStatus('current')
if mibBuilder.loadTexts: ifnicErrDisables.setDescription('Number of times the specified interface is disabled by the NetScaler, due to continuous Receive (Rx) or Transmit (Tx) stalls, since the NetScaler appliance was started or the interface statistics were cleared. The NetScaler disables an interface when one of the following conditions is met:\n\t\t\t(1) Three consecutive transmit stalls occurs with at most gap of 10 seconds between any two stalls.\n\t\t\t(2) Three consecutive receive stalls occurs with at most gap of 120 seconds between any two stalls.')
ifThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifThroughput.setStatus('current')
if mibBuilder.loadTexts: ifThroughput.setDescription('Interface throughput in Mbps')
ifMinThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMinThroughput.setStatus('current')
if mibBuilder.loadTexts: ifMinThroughput.setDescription('Interface minimum throughput in Mbps')
ifErrDroppedRxPktsRl = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrDroppedRxPktsRl.setStatus('current')
if mibBuilder.loadTexts: ifErrDroppedRxPktsRl.setDescription('Number of packets dropped due to license limit on the specified interface.')
ifErrRxNoNSB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifErrRxNoNSB.setStatus('current')
if mibBuilder.loadTexts: ifErrRxNoNSB.setDescription('Number of times the NetScaler failed to allocate  buffers, for inbound packets, for the specified interface since the NetScaler appliance was started or the interface statistics were cleared.')
ifInterfaceAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 54, 1, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInterfaceAlias.setStatus('current')
if mibBuilder.loadTexts: ifInterfaceAlias.setDescription('Alias Name for the Interface')
nsScPolicyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55))
scPolicyStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1))
scPolicyUrlHits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPolicyUrlHits.setStatus('current')
if mibBuilder.loadTexts: scPolicyUrlHits.setDescription('Total number of incoming requests that matched configured sureconnect policies.')
scPopUps = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPopUps.setStatus('current')
if mibBuilder.loadTexts: scPopUps.setDescription('Total number of in-memory java script  served which throws the pop-up window.')
scAltContUrls = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAltContUrls.setStatus('current')
if mibBuilder.loadTexts: scAltContUrls.setDescription('Total number of alternate content served which throws the pop-up window.')
scSessionReqs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scSessionReqs.setStatus('current')
if mibBuilder.loadTexts: scSessionReqs.setDescription('Total number of requests that were  handled in a single SureConnect session.')
scPostReqs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPostReqs.setStatus('current')
if mibBuilder.loadTexts: scPostReqs.setDescription('Total number of   HTTP POST requests that triggered SureConnect feature.')
scThresholdFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scThresholdFail.setStatus('current')
if mibBuilder.loadTexts: scThresholdFail.setDescription('Total number of times SureConnect was not triggered because the thresholds conditions failed.')
scFaultyCookies = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scFaultyCookies.setStatus('current')
if mibBuilder.loadTexts: scFaultyCookies.setDescription('Total number of corrupted SureConnect cookies.')
scUnSupBrow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scUnSupBrow.setStatus('current')
if mibBuilder.loadTexts: scUnSupBrow.setDescription('Total number of requests that came from all unsupported browsers.')
scResetStats = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scResetStats.setStatus('current')
if mibBuilder.loadTexts: scResetStats.setDescription('Toal number of times that SureConnect statistics were reset.')
scTotCondTriggered = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scTotCondTriggered.setStatus('current')
if mibBuilder.loadTexts: scTotCondTriggered.setDescription('Number of times that SureConnect conditions were triggered.')
scTotReissuedRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scTotReissuedRequests.setStatus('current')
if mibBuilder.loadTexts: scTotReissuedRequests.setDescription('Total number of reissued SureConnect requests.')
scPolicyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2))
scPolicyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1), )
if mibBuilder.loadTexts: scPolicyConfigTable.setStatus('current')
if mibBuilder.loadTexts: scPolicyConfigTable.setDescription('The sure connect policy configuration table')
scPolicyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "scPolicyName"))
if mibBuilder.loadTexts: scPolicyConfigEntry.setStatus('current')
if mibBuilder.loadTexts: scPolicyConfigEntry.setDescription('...')
scPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPolicyName.setStatus('current')
if mibBuilder.loadTexts: scPolicyName.setDescription('The name of Sure Connect policy.')
scPolUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPolUrl.setStatus('current')
if mibBuilder.loadTexts: scPolUrl.setDescription('The URL in the IOH Policy.')
scDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDelayThreshold.setStatus('current')
if mibBuilder.loadTexts: scDelayThreshold.setDescription('The delay threshold for sc policy.')
scMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scMaxConnections.setStatus('current')
if mibBuilder.loadTexts: scMaxConnections.setDescription('The max connections for sc policy.')
scActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 5), ActionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scActionType.setStatus('current')
if mibBuilder.loadTexts: scActionType.setDescription('The type of action that NetScaler takes when initiating on-hold.')
scAlternateContentServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlternateContentServiceName.setStatus('current')
if mibBuilder.loadTexts: scAlternateContentServiceName.setDescription('The alternate service name for the content.')
scRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scRuleName.setStatus('current')
if mibBuilder.loadTexts: scRuleName.setDescription('The rule that the NetScaler matches with the incoming request.')
scAlternateContentPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 55, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scAlternateContentPath.setStatus('current')
if mibBuilder.loadTexts: scAlternateContentPath.setDescription('The alternate path for the content.')
nsSslConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56))
sslCertKeyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 1), )
if mibBuilder.loadTexts: sslCertKeyTable.setStatus('current')
if mibBuilder.loadTexts: sslCertKeyTable.setDescription('The ssl  certificate key pair configuration information')
sslCertKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "sslCertKeyName"))
if mibBuilder.loadTexts: sslCertKeyEntry.setStatus('current')
if mibBuilder.loadTexts: sslCertKeyEntry.setDescription('...')
sslCertKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCertKeyName.setStatus('current')
if mibBuilder.loadTexts: sslCertKeyName.setDescription('The certificate key pair Name.')
sslCertPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCertPath.setStatus('current')
if mibBuilder.loadTexts: sslCertPath.setDescription('The certificate path.')
sslKeyPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslKeyPath.setStatus('current')
if mibBuilder.loadTexts: sslKeyPath.setDescription('The private key path.')
sslInputFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 1, 1, 4), InputFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslInputFormat.setStatus('current')
if mibBuilder.loadTexts: sslInputFormat.setDescription('The input format of the certificate key pair.')
sslDaysToExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslDaysToExpire.setStatus('current')
if mibBuilder.loadTexts: sslDaysToExpire.setDescription('Number of days remaining for the certificate to expire.')
sslCrlTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 2), )
if mibBuilder.loadTexts: sslCrlTable.setStatus('current')
if mibBuilder.loadTexts: sslCrlTable.setDescription('The ssl CRL configuration information')
sslCrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "sslCrlName"))
if mibBuilder.loadTexts: sslCrlEntry.setStatus('current')
if mibBuilder.loadTexts: sslCrlEntry.setDescription('...')
sslCrlName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCrlName.setStatus('current')
if mibBuilder.loadTexts: sslCrlName.setDescription('The name of CRL.')
sslCrlPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCrlPath.setStatus('current')
if mibBuilder.loadTexts: sslCrlPath.setDescription('The CRL path.')
sslCrlInputFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 2, 1, 3), InputFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCrlInputFormat.setStatus('current')
if mibBuilder.loadTexts: sslCrlInputFormat.setDescription('The input format of CRL.')
sslCipherGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 3), )
if mibBuilder.loadTexts: sslCipherGroupTable.setStatus('current')
if mibBuilder.loadTexts: sslCipherGroupTable.setDescription('The Cipher group configuration information')
sslCipherGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 3, 1), ).setIndexNames((0, "NS-ROOT-MIB", "sslCipherGroupName"), (0, "NS-ROOT-MIB", "sslCipherName"))
if mibBuilder.loadTexts: sslCipherGroupEntry.setStatus('current')
if mibBuilder.loadTexts: sslCipherGroupEntry.setDescription('...')
sslCipherGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherGroupName.setStatus('current')
if mibBuilder.loadTexts: sslCipherGroupName.setDescription('The Cipher group name.')
sslCipherName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherName.setStatus('current')
if mibBuilder.loadTexts: sslCipherName.setDescription('The Cipher name.')
sslCipherDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 56, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDesc.setStatus('current')
if mibBuilder.loadTexts: sslCipherDesc.setDescription('The Cipher description.')
nsDosPolicyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57))
dosPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 1), )
if mibBuilder.loadTexts: dosPolicyTable.setStatus('current')
if mibBuilder.loadTexts: dosPolicyTable.setDescription('The dos policy configuration table')
dosPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "dosPolicyName"))
if mibBuilder.loadTexts: dosPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: dosPolicyEntry.setDescription('...')
dosPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosPolicyName.setStatus('current')
if mibBuilder.loadTexts: dosPolicyName.setDescription('Name of the policy')
thresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdValue.setStatus('current')
if mibBuilder.loadTexts: thresholdValue.setDescription('Threshold surge count to detect an attack, for this DosPolicy')
dosPolicyStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 2))
dosTotConditionTriggered = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosTotConditionTriggered.setStatus('current')
if mibBuilder.loadTexts: dosTotConditionTriggered.setDescription('Number of times the NetScaler appliance triggered the DOS JavaScript due to a condition match.')
dosTotValidCookies = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosTotValidCookies.setStatus('current')
if mibBuilder.loadTexts: dosTotValidCookies.setDescription('Number of clients from whom the NetScaler appliance received a valid DOS cookie.')
dosTotDosPriorityClients = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosTotDosPriorityClients.setStatus('current')
if mibBuilder.loadTexts: dosTotDosPriorityClients.setDescription('Number of valid clients that were given DOS priority.')
dosAvgValidClients = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosAvgValidClients.setStatus('current')
if mibBuilder.loadTexts: dosAvgValidClients.setDescription('Average number of DOS clients that returned a valid DOS cookie.')
dosAvgDospriClients = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 57, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosAvgDospriClients.setStatus('current')
if mibBuilder.loadTexts: dosAvgDospriClients.setDescription('Average number of clients that were given DOS priority.')
nsExpressionTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 58), )
if mibBuilder.loadTexts: nsExpressionTable.setStatus('current')
if mibBuilder.loadTexts: nsExpressionTable.setDescription('Expression related configuration')
nsExpressionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 58, 1), ).setIndexNames((0, "NS-ROOT-MIB", "expressionName"))
if mibBuilder.loadTexts: nsExpressionEntry.setStatus('current')
if mibBuilder.loadTexts: nsExpressionEntry.setDescription('...')
expressionName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 58, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressionName.setStatus('current')
if mibBuilder.loadTexts: expressionName.setDescription('Name of the expression.')
expressionTotalHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 58, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressionTotalHits.setStatus('current')
if mibBuilder.loadTexts: expressionTotalHits.setDescription('Total number of hits to this expression. ')
nsPqPolicyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59))
pqPolicyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1), )
if mibBuilder.loadTexts: pqPolicyConfigTable.setStatus('current')
if mibBuilder.loadTexts: pqPolicyConfigTable.setDescription('The priority queuing policy configuration table')
pqPolicyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "pqName"))
if mibBuilder.loadTexts: pqPolicyConfigEntry.setStatus('current')
if mibBuilder.loadTexts: pqPolicyConfigEntry.setDescription('...')
pqName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqName.setStatus('current')
if mibBuilder.loadTexts: pqName.setDescription('The name of the PQ policy bound to Load Balancing vserver.')
pqRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqRuleName.setStatus('current')
if mibBuilder.loadTexts: pqRuleName.setDescription('The Rule Name configuration for PQ policy.')
pqQdepthThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqQdepthThreshold.setStatus('current')
if mibBuilder.loadTexts: pqQdepthThreshold.setDescription('The vip threshold value for qdepth in PQ policy.')
pqPolQdepthThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPolQdepthThreshold.setStatus('current')
if mibBuilder.loadTexts: pqPolQdepthThreshold.setDescription('The policy threshold value for qdepth in PQ policy.')
pqPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPriority.setStatus('current')
if mibBuilder.loadTexts: pqPriority.setDescription('The priority of this PQ policy.')
pqPolicyWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPolicyWeight.setStatus('current')
if mibBuilder.loadTexts: pqPolicyWeight.setDescription('The weight of this PQ policy.')
pqPolicyStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 2))
pqTotalPolicyMatches = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqTotalPolicyMatches.setStatus('current')
if mibBuilder.loadTexts: pqTotalPolicyMatches.setDescription('Number of times the Netscaler appliance matched an incoming request using any priority queuing policy.')
pqTotalThresholdFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqTotalThresholdFailed.setStatus('current')
if mibBuilder.loadTexts: pqTotalThresholdFailed.setDescription('Number of times the Netscaler appliance failed to match an incoming request to any of priority queing policy.')
pqPriority1Requests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPriority1Requests.setStatus('current')
if mibBuilder.loadTexts: pqPriority1Requests.setDescription('Number of priority 1 requests that the Netscaler appliance received.')
pqPriority2Requests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPriority2Requests.setStatus('current')
if mibBuilder.loadTexts: pqPriority2Requests.setDescription('Number of priority 2 requests that the Netscaler appliance received.')
pqPriority3Requests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 59, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqPriority3Requests.setStatus('current')
if mibBuilder.loadTexts: pqPriority3Requests.setDescription('Number of priority 3 requests that the Netscaler appliance received.')
crConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60))
crPolicyMapConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60, 1), )
if mibBuilder.loadTexts: crPolicyMapConfigTable.setStatus('current')
if mibBuilder.loadTexts: crPolicyMapConfigTable.setDescription('The CR map configuration information ')
crPolicyMapConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "crMapName"))
if mibBuilder.loadTexts: crPolicyMapConfigEntry.setStatus('current')
if mibBuilder.loadTexts: crPolicyMapConfigEntry.setDescription('...')
crMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crMapName.setStatus('current')
if mibBuilder.loadTexts: crMapName.setDescription('The name of the map policy.')
crMapSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crMapSrcName.setStatus('current')
if mibBuilder.loadTexts: crMapSrcName.setDescription('The name of the source domain hosted by the map.')
crMapDstName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crMapDstName.setStatus('current')
if mibBuilder.loadTexts: crMapDstName.setDescription('The name of the destination domain hosted by the map.')
crMapSrcUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crMapSrcUrl.setStatus('current')
if mibBuilder.loadTexts: crMapSrcUrl.setDescription('The Url to be modified under the given source domain.')
crMapDstUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 60, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crMapDstUrl.setStatus('current')
if mibBuilder.loadTexts: crMapDstUrl.setDescription('The Url after mapping.')
monitorCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorCount.setStatus('current')
if mibBuilder.loadTexts: monitorCount.setDescription('Number of monitors defined on this NetScaler appliance.')
monitorBindCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorBindCount.setStatus('current')
if mibBuilder.loadTexts: monitorBindCount.setDescription('Number of monitor bindings defined on this NetScaler appliance.')
htmlInjectionStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 63))
htmlInjectedBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 63, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htmlInjectedBytes.setStatus('current')
if mibBuilder.loadTexts: htmlInjectedBytes.setDescription('Number of bytes injected during HTML injection.')
htmlInjectionSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 63, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htmlInjectionSessions.setStatus('obsolete')
if mibBuilder.loadTexts: htmlInjectionSessions.setDescription('...OBSOLETE')
htmlInjectionTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 63, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htmlInjectionTotalSessions.setStatus('obsolete')
if mibBuilder.loadTexts: htmlInjectionTotalSessions.setDescription('...OBSOLETE')
htmlInjectMemAllocFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 63, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htmlInjectMemAllocFailed.setStatus('current')
if mibBuilder.loadTexts: htmlInjectMemAllocFailed.setDescription('Number of times memory allocation failed during configuration of HTML injection.')
htmlInitFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 63, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htmlInitFailed.setStatus('obsolete')
if mibBuilder.loadTexts: htmlInitFailed.setDescription('...OBSOLETE')
appFirewallGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64))
appFirewallStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1))
appFirewallRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallRequests.setStatus('current')
if mibBuilder.loadTexts: appFirewallRequests.setDescription('HTTP/HTTPS requests sent to your protected web servers via the Application Firewall.')
appFirewallResponses = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallResponses.setStatus('current')
if mibBuilder.loadTexts: appFirewallResponses.setDescription('HTTP/HTTPS responses sent by your protected web servers via the Application Firewall.')
appFirewallAborts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallAborts.setStatus('current')
if mibBuilder.loadTexts: appFirewallAborts.setDescription('Incomplete HTTP/HTTPS requests aborted by the client before the Application Firewall could finish processing them.')
appFirewallRedirects = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallRedirects.setStatus('current')
if mibBuilder.loadTexts: appFirewallRedirects.setDescription('HTTP/HTTPS requests redirected by the Application Firewall to a different Web page or web server. (HTTP 302)')
appFirewallViolStartURL = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolStartURL.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolStartURL.setDescription('Number of Start URL security check violations seen by the Application Firewall.')
appFirewallViolDenyURL = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolDenyURL.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolDenyURL.setDescription('Number of Deny URL security check violations seen by the Application Firewall.')
appFirewallViolBufferOverflow = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolBufferOverflow.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolBufferOverflow.setDescription('Number of Buffer Overflow security check violations seen by the Application Firewall.')
appFirewallViolCookie = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolCookie.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolCookie.setDescription('Number of Cookie Consistency security check violations seen by the Application Firewall.')
appFirewallViolXSS = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolXSS.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolXSS.setDescription('Number of HTML Cross-Site Scripting security check violations seen by the Application Firewall.')
appFirewallViolSQL = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolSQL.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolSQL.setDescription('Number of HTML SQL Injection security check violations seen by the Application Firewall.')
appFirewallViolFieldformat = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolFieldformat.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolFieldformat.setDescription('Number of Field Format security check violations seen by the Application Firewall.')
appFirewallViolFieldConsistency = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolFieldConsistency.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolFieldConsistency.setDescription('Number of Field Consistency security check violations seen by the Application Firewall.')
appFirewallViolCreditCard = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolCreditCard.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolCreditCard.setDescription('Number of Credit Card security check violations seen by the Application Firewall.')
appFirewallViolSafeObject = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolSafeObject.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolSafeObject.setDescription('Number of Safe Object security check violations seen by the Application Firewall.')
appFirewallTotalViol = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallTotalViol.setStatus('current')
if mibBuilder.loadTexts: appFirewallTotalViol.setDescription('Total number of security check violations seen by the Application Firewall.')
appFirewallViolWellformednessViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolWellformednessViolations.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolWellformednessViolations.setDescription('Number of XML Format security check violations seen by the Application Firewall.')
appFirewallViolXdosViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolXdosViolations.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolXdosViolations.setDescription('Number of XML Denial-of-Service security check violations seen by the Application Firewall.')
appFirewallViolMsgValViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolMsgValViolations.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolMsgValViolations.setDescription('Number of XML Message Validation security check violations seen by the Application Firewall.')
appFirewallViolWSIViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolWSIViolations.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolWSIViolations.setDescription('Number of Web Services Interoperability (WS-I) security check violations seen by the Application Firewall.')
appFirewallViolXmlSqlViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolXmlSqlViolations.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolXmlSqlViolations.setDescription('Number of XML SQL Injection security check violations seen by the Application Firewall.')
appFirewallViolXmlXssViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolXmlXssViolations.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolXmlXssViolations.setDescription('Number of XML Cross-Site Scripting (XSS) security check violations seen by the Application Firewall.')
appFirewallViolXmlAttachmentViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolXmlAttachmentViolations.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolXmlAttachmentViolations.setDescription('Number of XML Attachment security check violations seen by the Application Firewall.')
appFirewallViolCSRFtag = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolCSRFtag.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolCSRFtag.setDescription('Number of Cross Site Request Forgery form tag security check violations seen by the Application Firewall.')
appFirewallViolRefererHeader = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolRefererHeader.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolRefererHeader.setDescription('Number of Referer Header security check violations seen by the Application Firewall.')
appFirewallViolXmlSoapFaultViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolXmlSoapFaultViolations.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolXmlSoapFaultViolations.setDescription('Number of requests returning soap:fault from the backend server')
appFirewallRet4xx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallRet4xx.setStatus('current')
if mibBuilder.loadTexts: appFirewallRet4xx.setDescription('Number of requests returning HTTP 4xx from the backend server')
appFirewallRet5xx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallRet5xx.setStatus('current')
if mibBuilder.loadTexts: appFirewallRet5xx.setDescription('Number of requests returning HTTP 5xx from the backend server')
appFirewallReqBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallReqBytes.setStatus('current')
if mibBuilder.loadTexts: appFirewallReqBytes.setDescription('Number of bytes transfered for requests')
appFirewallResBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallResBytes.setStatus('current')
if mibBuilder.loadTexts: appFirewallResBytes.setDescription('Number of bytes transfered for responses')
appFirewallLongAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallLongAvgRespTime.setStatus('current')
if mibBuilder.loadTexts: appFirewallLongAvgRespTime.setDescription('Average backend response time in milliseconds since reboot')
appFirewallShortAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallShortAvgRespTime.setStatus('current')
if mibBuilder.loadTexts: appFirewallShortAvgRespTime.setDescription('Average backend response time in milliseconds over the last 7 seconds')
appFirewallViolXmlGenViolations = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolXmlGenViolations.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolXmlGenViolations.setDescription('Number of requests returning XML generic error from the backend server')
appFirewallViolSignature = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallViolSignature.setStatus('current')
if mibBuilder.loadTexts: appFirewallViolSignature.setDescription('Number of Signature violations seen by the Application Firewall.')
appFirewallTrapsDropped = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appFirewallTrapsDropped.setStatus('current')
if mibBuilder.loadTexts: appFirewallTrapsDropped.setDescription('AppFirewall SNMP traps dropped due to time limit.')
appfwProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2), )
if mibBuilder.loadTexts: appfwProfileTable.setStatus('current')
if mibBuilder.loadTexts: appfwProfileTable.setDescription('')
appfwProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "appfwprofileName"))
if mibBuilder.loadTexts: appfwProfileEntry.setStatus('current')
if mibBuilder.loadTexts: appfwProfileEntry.setDescription('...')
appfwprofileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwprofileName.setStatus('current')
if mibBuilder.loadTexts: appfwprofileName.setDescription('The name of the Application Firewall profile')
appfwappFirewallRequestsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallRequestsPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallRequestsPerProfile.setDescription('HTTP/HTTPS requests sent to your protected web servers via the Application Firewall.')
appfwappFirewallResponsesPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallResponsesPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallResponsesPerProfile.setDescription('HTTP/HTTPS responses sent by your protected web servers via the Application Firewall.')
appfwappFirewallAbortsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallAbortsPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallAbortsPerProfile.setDescription('Incomplete HTTP/HTTPS requests aborted by the client before the Application Firewall could finish processing them.')
appfwappFirewallRedirectsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallRedirectsPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallRedirectsPerProfile.setDescription('HTTP/HTTPS requests redirected by the Application Firewall to a different Web page or web server. (HTTP 302)')
appfwappFirewallViolStartURLPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolStartURLPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolStartURLPerProfile.setDescription('Number of Start URL security check violations seen by the Application Firewall.')
appfwappFirewallViolDenyURLPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolDenyURLPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolDenyURLPerProfile.setDescription('Number of Deny URL security check violations seen by the Application Firewall.')
appfwappFirewallViolRefererHeaderPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolRefererHeaderPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolRefererHeaderPerProfile.setDescription('Number of Referer Header security check violations seen by the Application Firewall.')
appfwappFirewallViolBufferOverflowPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolBufferOverflowPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolBufferOverflowPerProfile.setDescription('Number of Buffer Overflow security check violations seen by the Application Firewall.')
appfwappFirewallViolCSRFtagPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolCSRFtagPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolCSRFtagPerProfile.setDescription('Number of Cross Site Request Forgery form tag security check violations seen by the Application Firewall.')
appfwappFirewallViolCookiePerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolCookiePerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolCookiePerProfile.setDescription('Number of Cookie Consistency security check violations seen by the Application Firewall.')
appfwappFirewallViolXSSPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolXSSPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolXSSPerProfile.setDescription('Number of HTML Cross-Site Scripting security check violations seen by the Application Firewall.')
appfwappFirewallViolSQLPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolSQLPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolSQLPerProfile.setDescription('Number of HTML SQL Injection security check violations seen by the Application Firewall.')
appfwappFirewallViolFieldformatPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolFieldformatPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolFieldformatPerProfile.setDescription('Number of Field Format security check violations seen by the Application Firewall.')
appfwappFirewallViolFieldConsistencyPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolFieldConsistencyPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolFieldConsistencyPerProfile.setDescription('Number of Field Consistency security check violations seen by the Application Firewall.')
appfwappFirewallViolCreditCardPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolCreditCardPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolCreditCardPerProfile.setDescription('Number of Credit Card security check violations seen by the Application Firewall.')
appfwappFirewallViolSafeObjectPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolSafeObjectPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolSafeObjectPerProfile.setDescription('Number of Safe Object security check violations seen by the Application Firewall.')
appfwappFirewallViolWellformednessViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolWellformednessViolationsPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolWellformednessViolationsPerProfile.setDescription('Number of XML Format security check violations seen by the Application Firewall.')
appfwappFirewallViolXdosViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolXdosViolationsPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolXdosViolationsPerProfile.setDescription('Number of XML Denial-of-Service security check violations seen by the Application Firewall.')
appfwappFirewallViolMsgValViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolMsgValViolationsPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolMsgValViolationsPerProfile.setDescription('Number of XML Message Validation security check violations seen by the Application Firewall.')
appfwappFirewallViolWSIViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolWSIViolationsPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolWSIViolationsPerProfile.setDescription('Number of Web Services Interoperability (WS-I) security check violations seen by the Application Firewall.')
appfwappFirewallViolXmlSqlViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolXmlSqlViolationsPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolXmlSqlViolationsPerProfile.setDescription('Number of XML SQL Injection security check violations seen by the Application Firewall.')
appfwappFirewallViolXmlXssViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolXmlXssViolationsPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolXmlXssViolationsPerProfile.setDescription('Number of XML Cross-Site Scripting (XSS) security check violations seen by the Application Firewall.')
appfwappFirewallViolXmlAttachmentViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolXmlAttachmentViolationsPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolXmlAttachmentViolationsPerProfile.setDescription('Number of XML Attachment security check violations seen by the Application Firewall.')
appfwappFirewallTotalViolPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallTotalViolPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallTotalViolPerProfile.setDescription('Number of violations seen by the application firewall on per profile basis')
appfwappFirewallRet4xxPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallRet4xxPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallRet4xxPerProfile.setDescription('Number of requests returning HTTP 4xx from the backend server')
appfwappFirewallRet5xxPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallRet5xxPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallRet5xxPerProfile.setDescription('Number of requests returning HTTP 5xx from the backend server')
appfwappFirewallViolXmlSoapFaultViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolXmlSoapFaultViolationsPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolXmlSoapFaultViolationsPerProfile.setDescription('Number of requests returning soap:fault from the backend server')
appfwappFirewallReqBytesPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallReqBytesPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallReqBytesPerProfile.setDescription('Number of bytes transfered for requests')
appfwappFirewallResBytesPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallResBytesPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallResBytesPerProfile.setDescription('Number of bytes transfered for responses')
appfwappFirewallLongAvgRespTimePerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallLongAvgRespTimePerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallLongAvgRespTimePerProfile.setDescription('Average backend response time in milliseconds since reboot')
appfwappFirewallShortAvgRespTimePerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallShortAvgRespTimePerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallShortAvgRespTimePerProfile.setDescription('Average backend response time in milliseconds over the last 7 seconds')
appfwappFirewallViolXmlGenericViolationsPerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolXmlGenericViolationsPerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolXmlGenericViolationsPerProfile.setDescription('Number of requests returning XML generic violation from the backend server')
appfwappFirewallViolSignaturePerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 64, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appfwappFirewallViolSignaturePerProfile.setStatus('current')
if mibBuilder.loadTexts: appfwappFirewallViolSignaturePerProfile.setDescription('Number of Signature violations seen by the Application Firewall.')
nsRnatStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65))
nsRnatGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 1))
rnatTotRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnatTotRxBytes.setStatus('current')
if mibBuilder.loadTexts: rnatTotRxBytes.setDescription('Bytes received during RNAT sessions.')
rnatTotTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnatTotTxBytes.setStatus('current')
if mibBuilder.loadTexts: rnatTotTxBytes.setDescription('Bytes sent during RNAT sessions.')
rnatTotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnatTotRxPkts.setStatus('current')
if mibBuilder.loadTexts: rnatTotRxPkts.setDescription('Packets received during RNAT sessions.')
rnatTotTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnatTotTxPkts.setStatus('current')
if mibBuilder.loadTexts: rnatTotTxPkts.setDescription('Packets sent during RNAT sessions.')
rnatTotTxSyn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnatTotTxSyn.setStatus('current')
if mibBuilder.loadTexts: rnatTotTxSyn.setDescription('Requests for connections sent during RNAT sessions.')
rnatCurSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnatCurSessions.setStatus('current')
if mibBuilder.loadTexts: rnatCurSessions.setDescription('Currently active RNAT sessions.')
nsRnatPerIPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2), )
if mibBuilder.loadTexts: nsRnatPerIPStatsTable.setStatus('current')
if mibBuilder.loadTexts: nsRnatPerIPStatsTable.setDescription('This table contains statistics related to rnat for the natip')
nsRnatPerIPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "ipAddr"))
if mibBuilder.loadTexts: nsRnatPerIPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nsRnatPerIPStatsEntry.setDescription('...')
ipRnatTotRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRnatTotRxBytes.setStatus('current')
if mibBuilder.loadTexts: ipRnatTotRxBytes.setDescription('Bytes received on this IP address during RNAT sessions.')
ipRnatTotTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRnatTotTxBytes.setStatus('current')
if mibBuilder.loadTexts: ipRnatTotTxBytes.setDescription('Bytes sent from this IP address during RNAT sessions.')
ipRnatTotRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRnatTotRxPkts.setStatus('current')
if mibBuilder.loadTexts: ipRnatTotRxPkts.setDescription('Packets received on this IP address during RNAT sessions.')
ipRnatTotTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRnatTotTxPkts.setStatus('current')
if mibBuilder.loadTexts: ipRnatTotTxPkts.setDescription('Packets sent from this IP address during RNAT sessions.')
ipRnatTotTxSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRnatTotTxSyn.setStatus('current')
if mibBuilder.loadTexts: ipRnatTotTxSyn.setDescription('Requests for connections sent from this IP address during RNAT sessions.')
ipRnatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 65, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRnatCurSessions.setStatus('current')
if mibBuilder.loadTexts: ipRnatCurSessions.setDescription('Currently active RNAT sessions started from this IP address.')
nsSslVpnStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66))
indexHtmlHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: indexHtmlHit.setStatus('current')
if mibBuilder.loadTexts: indexHtmlHit.setDescription('Number of requests for VPN login page.')
indexHtmlNoServed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: indexHtmlNoServed.setStatus('current')
if mibBuilder.loadTexts: indexHtmlNoServed.setDescription('Number of failures to display VPN login page.')
cfgHtmlServed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgHtmlServed.setStatus('current')
if mibBuilder.loadTexts: cfgHtmlServed.setDescription('Number of client configuration requests received by VPN server.')
dnsReqHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsReqHit.setStatus('current')
if mibBuilder.loadTexts: dnsReqHit.setDescription('Number of DNS queries resolved by VPN server.')
winsRequestHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsRequestHit.setStatus('current')
if mibBuilder.loadTexts: winsRequestHit.setDescription('Number of WINS queries resolved by VPN server.')
csRequestHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRequestHit.setStatus('current')
if mibBuilder.loadTexts: csRequestHit.setDescription('Number of SSL VPN tunnels formed between VPN server and client.')
csNonHttpProbeHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csNonHttpProbeHit.setStatus('current')
if mibBuilder.loadTexts: csNonHttpProbeHit.setDescription('Number of probes from VPN to back-end non-HTTP servers that have been accessed by the VPN client.')
csHttpProbeHit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csHttpProbeHit.setStatus('current')
if mibBuilder.loadTexts: csHttpProbeHit.setDescription('Number of probes from VPN to back-end HTTP servers that have been accessed by the VPN client.')
totalCsConnSucc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCsConnSucc.setStatus('current')
if mibBuilder.loadTexts: totalCsConnSucc.setDescription('Number of successful probes to all back-end servers.')
totalFsRequest = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalFsRequest.setStatus('current')
if mibBuilder.loadTexts: totalFsRequest.setDescription('Number of file system requests received by VPN server.')
iipDisabledMIPdisabled = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iipDisabledMIPdisabled.setStatus('current')
if mibBuilder.loadTexts: iipDisabledMIPdisabled.setDescription('Both IIP and SNIP is disabled.')
iipFailedMIPdisabled = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iipFailedMIPdisabled.setStatus('current')
if mibBuilder.loadTexts: iipFailedMIPdisabled.setDescription('Number of times IIP assignment failed and SNIP is disabled.')
iipDisabledMIPused = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iipDisabledMIPused.setStatus('current')
if mibBuilder.loadTexts: iipDisabledMIPused.setDescription('Number of times SNIP is used as IIP is disabled.')
iipFailedMIPused = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iipFailedMIPused.setStatus('current')
if mibBuilder.loadTexts: iipFailedMIPused.setDescription('Number of times SNIP is used as IIP assignment failed.')
socksMethReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksMethReqRcvd.setStatus('current')
if mibBuilder.loadTexts: socksMethReqRcvd.setDescription('Number of received SOCKS method request.')
socksMethReqSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksMethReqSent.setStatus('current')
if mibBuilder.loadTexts: socksMethReqSent.setDescription('Number of sent SOCKS method request.')
socksMethRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksMethRespRcvd.setStatus('current')
if mibBuilder.loadTexts: socksMethRespRcvd.setDescription('Number of received SOCKS method response.')
socksMethRespSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksMethRespSent.setStatus('current')
if mibBuilder.loadTexts: socksMethRespSent.setDescription('Number of sent SOCKS method response.')
socksConnReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksConnReqRcvd.setStatus('current')
if mibBuilder.loadTexts: socksConnReqRcvd.setDescription('Number of received SOCKS connect request.')
socksConnReqSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksConnReqSent.setStatus('current')
if mibBuilder.loadTexts: socksConnReqSent.setDescription('Number of sent SOCKS connect request.')
socksConnRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksConnRespRcvd.setStatus('current')
if mibBuilder.loadTexts: socksConnRespRcvd.setDescription('Number of received SOCKS connect response.')
socksConnRespSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksConnRespSent.setStatus('current')
if mibBuilder.loadTexts: socksConnRespSent.setDescription('Number of sent SOCKS connect response.')
socksServerError = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksServerError.setStatus('current')
if mibBuilder.loadTexts: socksServerError.setDescription('Number of SOCKS server error.')
socksClientError = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: socksClientError.setStatus('current')
if mibBuilder.loadTexts: socksClientError.setDescription('Number of SOCKS client error.')
staConnSuccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnSuccess.setStatus('current')
if mibBuilder.loadTexts: staConnSuccess.setDescription('Number of STA connection success.')
staConnFailure = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staConnFailure.setStatus('current')
if mibBuilder.loadTexts: staConnFailure.setDescription('Number of STA connection failure.')
cpsConnSuccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsConnSuccess.setStatus('current')
if mibBuilder.loadTexts: cpsConnSuccess.setDescription('Number of CPS connection success.')
cpsConnFailure = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsConnFailure.setStatus('current')
if mibBuilder.loadTexts: cpsConnFailure.setDescription('Number of CPS connection failure.')
staRequestSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRequestSent.setStatus('current')
if mibBuilder.loadTexts: staRequestSent.setDescription('Number of STA request sent.')
staResponseRecvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staResponseRecvd.setStatus('current')
if mibBuilder.loadTexts: staResponseRecvd.setDescription('Number of STA response received.')
icaLicenseFailure = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icaLicenseFailure.setStatus('current')
if mibBuilder.loadTexts: icaLicenseFailure.setDescription('Number of ICA license failure.')
staRenewSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRenewSent.setStatus('current')
if mibBuilder.loadTexts: staRenewSent.setDescription('Number of STA renew requests sent.')
staRenewRecvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRenewRecvd.setStatus('current')
if mibBuilder.loadTexts: staRenewRecvd.setDescription('Number of STA renew response received.')
staReassErr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staReassErr.setStatus('current')
if mibBuilder.loadTexts: staReassErr.setDescription('Number of STA response reassembly errors.')
staRnewNoClnt = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRnewNoClnt.setStatus('current')
if mibBuilder.loadTexts: staRnewNoClnt.setDescription('Number of STA renew repsonse for missing clients.')
staRenewNoRfsh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staRenewNoRfsh.setStatus('current')
if mibBuilder.loadTexts: staRenewNoRfsh.setDescription('Number of STA renew response missing refesh values.')
staValidNoClnt = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staValidNoClnt.setStatus('current')
if mibBuilder.loadTexts: staValidNoClnt.setDescription('Number of STA validate response for clients that have already closed.')
staValidNoEst = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staValidNoEst.setStatus('current')
if mibBuilder.loadTexts: staValidNoEst.setDescription('Number of STA validate responses for clients not in TCP ESTABLISHED state.')
staMonSent = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staMonSent.setStatus('current')
if mibBuilder.loadTexts: staMonSent.setDescription('Number of STA monitor requests sent.')
staMonRcvd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staMonRcvd.setStatus('current')
if mibBuilder.loadTexts: staMonRcvd.setDescription('Number of STA monitor responses recieved.')
staMonSucc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staMonSucc.setStatus('current')
if mibBuilder.loadTexts: staMonSucc.setDescription('Number of STA monitor successful responses.')
staMonFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staMonFail.setStatus('current')
if mibBuilder.loadTexts: staMonFail.setDescription('Number of STA monitor failed responses.')
iipSpilloverMIPused = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iipSpilloverMIPused.setStatus('current')
if mibBuilder.loadTexts: iipSpilloverMIPused.setDescription('Number of times SNIP is used on IIP Spillover.')
iPv6tov4FindIPv6MapErr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPv6tov4FindIPv6MapErr.setStatus('current')
if mibBuilder.loadTexts: iPv6tov4FindIPv6MapErr.setDescription('Number of IPv6toIPv4 find IPv6 mapping errors.')
iPv6toV4MapInsertErr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPv6toV4MapInsertErr.setStatus('current')
if mibBuilder.loadTexts: iPv6toV4MapInsertErr.setDescription('Number of Ipv6 to Ipv4 mapping Insert Errors.')
parseIPv6AddressErr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parseIPv6AddressErr.setStatus('current')
if mibBuilder.loadTexts: parseIPv6AddressErr.setDescription('Errors in parsing for Ipv6 address from address string.')
dtlsStaValidation = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtlsStaValidation.setStatus('current')
if mibBuilder.loadTexts: dtlsStaValidation.setDescription('Number of STA validation requests on DTLS')
dtlsStaValidationError = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtlsStaValidationError.setStatus('current')
if mibBuilder.loadTexts: dtlsStaValidationError.setDescription('Number of STA validation request errors on DTLS')
dtlsStaReconnectTktReq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtlsStaReconnectTktReq.setStatus('current')
if mibBuilder.loadTexts: dtlsStaReconnectTktReq.setDescription('Number of STA Reconnet ticket requests on DTLS')
dtlsStaPostResponseSuccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtlsStaPostResponseSuccess.setStatus('current')
if mibBuilder.loadTexts: dtlsStaPostResponseSuccess.setDescription('Number of Successfull STA Validations done on DTLS')
dtlsStaPostResponseError = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 66, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtlsStaPostResponseError.setStatus('current')
if mibBuilder.loadTexts: dtlsStaPostResponseError.setDescription('Number of errors during STA Validations on DTLS')
nsAaaStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67))
aaaAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaAuthFail.setStatus('current')
if mibBuilder.loadTexts: aaaAuthFail.setDescription('Count of authentication failures.')
aaaAuthSuccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: aaaAuthSuccess.setDescription('Count of authentication successes.')
aaaAuthNonHttpFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaAuthNonHttpFail.setStatus('current')
if mibBuilder.loadTexts: aaaAuthNonHttpFail.setDescription('Count of non HTTP connections that failed authorization.')
aaaAuthOnlyHttpFail = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaAuthOnlyHttpFail.setStatus('current')
if mibBuilder.loadTexts: aaaAuthOnlyHttpFail.setDescription('Count of HTTP connections that failed authorization.')
aaaAuthNonHttpSuccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaAuthNonHttpSuccess.setStatus('current')
if mibBuilder.loadTexts: aaaAuthNonHttpSuccess.setDescription('Count of non HTTP connections that succeeded authorization.')
aaaAuthOnlyHttpSuccess = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaAuthOnlyHttpSuccess.setStatus('current')
if mibBuilder.loadTexts: aaaAuthOnlyHttpSuccess.setDescription('Count of HTTP connections that succeeded authorization.')
aaaTotSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaTotSessions.setStatus('current')
if mibBuilder.loadTexts: aaaTotSessions.setDescription('Count of all AAA sessions.')
aaaTotSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaTotSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: aaaTotSessionTimeout.setDescription('Count of AAA sessions that have timed out.')
aaaCurSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaCurSessions.setStatus('current')
if mibBuilder.loadTexts: aaaCurSessions.setDescription('Count of current AAA sessions.')
aaaCurICASessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaCurICASessions.setStatus('current')
if mibBuilder.loadTexts: aaaCurICASessions.setDescription('Count of current ICA only sessions.')
aaaCurTMSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaCurTMSessions.setStatus('current')
if mibBuilder.loadTexts: aaaCurTMSessions.setDescription('Count of current AAATM sessions.')
aaaTotTMSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaTotTMSessions.setStatus('current')
if mibBuilder.loadTexts: aaaTotTMSessions.setDescription('Count of all AAATM sessions.')
aaaCurICAOnlyConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaCurICAOnlyConn.setStatus('current')
if mibBuilder.loadTexts: aaaCurICAOnlyConn.setDescription('Count of current ICA only connections.')
aaaCurICAConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 67, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaCurICAConn.setStatus('current')
if mibBuilder.loadTexts: aaaCurICAConn.setDescription('Count of current ICA connections.')
nsGlobalConfigSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68))
webServerHttpPorts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerHttpPorts.setStatus('current')
if mibBuilder.loadTexts: webServerHttpPorts.setDescription('The HTTP ports on the Web server. System performs  connection off-load for any client request that has a destination port matching one of these configured  ports. ')
maxTcpConnections = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxTcpConnections.setStatus('current')
if mibBuilder.loadTexts: maxTcpConnections.setDescription('The maximum number of connections that will be made from the system to the web server(s) attached to it. This value is applied globally to all attached servers.')
maxReqPerConnection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxReqPerConnection.setStatus('current')
if mibBuilder.loadTexts: maxReqPerConnection.setDescription('The maximum number of requests that the system can pass on a particular connection between the system and a server attached to it. If the Value is zero, then it allows an unlimited number of requests to be passed.')
cipInsertionStatus = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 4), ModeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipInsertionStatus.setStatus('current')
if mibBuilder.loadTexts: cipInsertionStatus.setDescription('This represents the option  to control (enable or disable) the insertion of the actual client IP address into the  HTTP  header  request  passed from  the  client  to  any of the servers attached to the system. The passed address can then be accessed through a minor  modification to the server. If cipHeader is specified, it will be used as the client IP header. If it is not specified, then the value that has been set by the  set  ns  config  CLI  command will be used as the client IP header.')
cipInsertionHeader = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipInsertionHeader.setStatus('current')
if mibBuilder.loadTexts: cipInsertionHeader.setDescription('This represents the text that will be used as the client IP header.')
cookieVersionInserted = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cookieVersionInserted.setStatus('current')
if mibBuilder.loadTexts: cookieVersionInserted.setDescription('The version of the cookie inserted by the system.')
minPathMTU = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minPathMTU.setStatus('current')
if mibBuilder.loadTexts: minPathMTU.setDescription('The minimum Path MTU of the system.')
mtuEntryTimeoutValue = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtuEntryTimeoutValue.setStatus('current')
if mibBuilder.loadTexts: mtuEntryTimeoutValue.setDescription('The timeout value of MTU entries.')
ftpPortRange = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 68, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpPortRange.setStatus('current')
if mibBuilder.loadTexts: ftpPortRange.setDescription('The Port range configured for FTP services.')
nsPolicyInfrastructureGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 69))
piPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 69, 1), )
if mibBuilder.loadTexts: piPolicyTable.setStatus('current')
if mibBuilder.loadTexts: piPolicyTable.setDescription('The policy relationship table')
piPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 69, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "piPolName"))
if mibBuilder.loadTexts: piPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: piPolicyEntry.setDescription('...')
piPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 69, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piPolName.setStatus('current')
if mibBuilder.loadTexts: piPolName.setDescription('Encoded name of the PI policy')
piPolicyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 69, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piPolicyHits.setStatus('current')
if mibBuilder.loadTexts: piPolicyHits.setDescription('Number of hits on the policy')
piPolicyUndefHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 69, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piPolicyUndefHits.setStatus('current')
if mibBuilder.loadTexts: piPolicyUndefHits.setDescription('Number of undef hits on the policy')
piPolFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 69, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piPolFullName.setStatus('current')
if mibBuilder.loadTexts: piPolFullName.setDescription('Full name of the PI policy')
nsInetAddressTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70), )
if mibBuilder.loadTexts: nsInetAddressTable.setStatus('current')
if mibBuilder.loadTexts: nsInetAddressTable.setDescription('This table contains information about the IPv6 addresses configured on the NetScaler.')
nsInetAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1), ).setIndexNames((0, "NS-ROOT-MIB", "nsInetAddressType"), (0, "NS-ROOT-MIB", "nsInetAddress"))
if mibBuilder.loadTexts: nsInetAddressEntry.setStatus('current')
if mibBuilder.loadTexts: nsInetAddressEntry.setDescription('...')
nsInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetAddressType.setStatus('current')
if mibBuilder.loadTexts: nsInetAddressType.setDescription('The address type of nsInetAddress')
nsInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetAddress.setStatus('current')
if mibBuilder.loadTexts: nsInetAddress.setDescription('This represents an IPv4/v6 address configured on the NetScaler')
nsInetMaskLenth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetMaskLenth.setStatus('current')
if mibBuilder.loadTexts: nsInetMaskLenth.setDescription('This represents netmask length.')
nsInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 4), IpAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetType.setStatus('current')
if mibBuilder.loadTexts: nsInetType.setDescription('This represents the IP address type')
nsInetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 5), IpAddressMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetMode.setStatus('current')
if mibBuilder.loadTexts: nsInetMode.setDescription('This represents the IP address mode')
nsInetFreePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetFreePorts.setStatus('current')
if mibBuilder.loadTexts: nsInetFreePorts.setDescription('This represents the number of unused ports free on this IP')
nsInetVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetVlan.setStatus('current')
if mibBuilder.loadTexts: nsInetVlan.setDescription('The vlan to which this ip address is bound.')
nsInetBridgeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetBridgeGroup.setStatus('current')
if mibBuilder.loadTexts: nsInetBridgeGroup.setDescription('The bridge group to which this ip address is bound.')
nsInetVxlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 70, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInetVxlan.setStatus('current')
if mibBuilder.loadTexts: nsInetVxlan.setDescription('The vxlan to which this ip address is bound.')
nsNicStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 71))
allNicTotRxMbits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 71, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allNicTotRxMbits.setStatus('current')
if mibBuilder.loadTexts: allNicTotRxMbits.setDescription('Number of megabits received by the NetScaler appliance.')
allNicTotTxMbits = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 71, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allNicTotTxMbits.setStatus('current')
if mibBuilder.loadTexts: allNicTotTxMbits.setDescription('Number of megabits transmitted by the NetScaler appliance.')
clusterTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72), )
if mibBuilder.loadTexts: clusterTable.setStatus('current')
if mibBuilder.loadTexts: clusterTable.setDescription('The cluster table.')
clusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1), ).setIndexNames((0, "NS-ROOT-MIB", "clnodeID"))
if mibBuilder.loadTexts: clusterEntry.setStatus('current')
if mibBuilder.loadTexts: clusterEntry.setDescription('...')
clnodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clnodeID.setStatus('current')
if mibBuilder.loadTexts: clnodeID.setDescription('This represents the unique id of the cluster node')
clPeerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clPeerIP.setStatus('current')
if mibBuilder.loadTexts: clPeerIP.setDescription('This represents the IP address of the cluster node ')
clNodeIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clNodeIP.setStatus('current')
if mibBuilder.loadTexts: clNodeIP.setDescription('This represents the ip of the cluster node for which notification is being sent')
clAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 4), ClusterAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clAdminState.setStatus('current')
if mibBuilder.loadTexts: clAdminState.setDescription('Admin State of the node in the cluster.')
clMasterState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 5), ClusterMasterState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMasterState.setStatus('current')
if mibBuilder.loadTexts: clMasterState.setDescription('Operational state of the cluster node.')
clNodeHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 6), ClusterCurHealth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clNodeHealth.setStatus('current')
if mibBuilder.loadTexts: clNodeHealth.setDescription('Health of the node in the cluster.')
clNodeEffectiveHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 7), ClusterEffHealth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clNodeEffectiveHealth.setStatus('current')
if mibBuilder.loadTexts: clNodeEffectiveHealth.setDescription('Health of the cluster node.')
clSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 8), ClusterSyncState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clSyncState.setStatus('current')
if mibBuilder.loadTexts: clSyncState.setDescription('Sync state of the cluster node.')
clNodeViewQuorum = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 9), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clNodeViewQuorum.setStatus('current')
if mibBuilder.loadTexts: clNodeViewQuorum.setDescription('This represents whether the node view of cluster has quorum or not')
clNodeHealthReason = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 72, 1, 10), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clNodeHealthReason.setStatus('current')
if mibBuilder.loadTexts: clNodeHealthReason.setDescription('This represents the reason for bad health of the cluster node')
nsClusterStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 73))
clViewLeader = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 73, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clViewLeader.setStatus('current')
if mibBuilder.loadTexts: clViewLeader.setDescription('NSIP address of the Configuration Coordinator of the cluster.')
nsInatStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74))
nsInatGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1))
nat46TotTcp46 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotTcp46.setStatus('current')
if mibBuilder.loadTexts: nat46TotTcp46.setDescription('Total TCP packets translated (V4->v6).')
nat46TotUdp46 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotUdp46.setStatus('current')
if mibBuilder.loadTexts: nat46TotUdp46.setDescription('Total UDP packets translated (V4->v6).')
nat46TotIcmp46 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotIcmp46.setStatus('current')
if mibBuilder.loadTexts: nat46TotIcmp46.setDescription('Total ICMP packets translated (V4->v6).')
nat46TotDrop46 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotDrop46.setStatus('current')
if mibBuilder.loadTexts: nat46TotDrop46.setDescription('Total IPV4 packets dropped.')
nat46TotTcp64 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotTcp64.setStatus('current')
if mibBuilder.loadTexts: nat46TotTcp64.setDescription('Total TCP packets translated (V6->v4).')
nat46TotUdp64 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotUdp64.setStatus('current')
if mibBuilder.loadTexts: nat46TotUdp64.setDescription('Total UDP packets translated (V6->v4).')
nat46TotIcmp64 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotIcmp64.setStatus('current')
if mibBuilder.loadTexts: nat46TotIcmp64.setDescription('Total ICMP packets translated (V6->v4).')
nat46TotDrop64 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat46TotDrop64.setStatus('current')
if mibBuilder.loadTexts: nat46TotDrop64.setDescription('Total IPV6 packets dropped.')
nsInatPerNat46StatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2), )
if mibBuilder.loadTexts: nsInatPerNat46StatsTable.setStatus('current')
if mibBuilder.loadTexts: nsInatPerNat46StatsTable.setDescription('This provides statistics related to per nat46 rule')
nsInatPerNat46StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "inatname"))
if mibBuilder.loadTexts: nsInatPerNat46StatsEntry.setStatus('current')
if mibBuilder.loadTexts: nsInatPerNat46StatsEntry.setDescription('...')
inatname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatname.setStatus('current')
if mibBuilder.loadTexts: inatname.setDescription('The name of the INAT')
inatNat46Tcp46 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Tcp46.setStatus('current')
if mibBuilder.loadTexts: inatNat46Tcp46.setDescription('TCP packets translated (V4->v6).')
inatNat46Udp46 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Udp46.setStatus('current')
if mibBuilder.loadTexts: inatNat46Udp46.setDescription('UDP packets translated (V4->v6).')
inatNat46Icmp46 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Icmp46.setStatus('current')
if mibBuilder.loadTexts: inatNat46Icmp46.setDescription('ICMP packets translated (V4->v6).')
inatNat46Drop46 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Drop46.setStatus('current')
if mibBuilder.loadTexts: inatNat46Drop46.setDescription('IPV4 packets dropped.')
inatNat46Tcp64 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Tcp64.setStatus('current')
if mibBuilder.loadTexts: inatNat46Tcp64.setDescription('TCP packets translated (V6->v4).')
inatNat46Udp64 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Udp64.setStatus('current')
if mibBuilder.loadTexts: inatNat46Udp64.setDescription('UDP packets translated (V6->v4).')
inatNat46Icmp64 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Icmp64.setStatus('current')
if mibBuilder.loadTexts: inatNat46Icmp64.setDescription('ICMP packets translated (V6->v4).')
inatNat46Drop64 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatNat46Drop64.setStatus('current')
if mibBuilder.loadTexts: inatNat46Drop64.setDescription('IPV6 packets dropped.')
nsInatPerNatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3), )
if mibBuilder.loadTexts: nsInatPerNatStatsTable.setStatus('current')
if mibBuilder.loadTexts: nsInatPerNatStatsTable.setDescription('This provides statistics related to per inat session')
nsInatPerNatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1), ).setIndexNames((0, "NS-ROOT-MIB", "inat44name"))
if mibBuilder.loadTexts: nsInatPerNatStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nsInatPerNatStatsEntry.setDescription('...')
inat44name = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inat44name.setStatus('current')
if mibBuilder.loadTexts: inat44name.setDescription('The name of the INAT')
inatTotHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatTotHits.setStatus('current')
if mibBuilder.loadTexts: inatTotHits.setDescription('INAT total sessions')
inatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatCurSessions.setStatus('current')
if mibBuilder.loadTexts: inatCurSessions.setDescription('INAT current sessions')
inatTotReceiveBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatTotReceiveBytes.setStatus('current')
if mibBuilder.loadTexts: inatTotReceiveBytes.setDescription('INAT total Received Bytes')
inatTotSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatTotSentBytes.setStatus('current')
if mibBuilder.loadTexts: inatTotSentBytes.setDescription('INAT total Sent Bytes')
inatTotpktreceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatTotpktreceived.setStatus('current')
if mibBuilder.loadTexts: inatTotpktreceived.setDescription('INAT total Packets Received')
inatTotpktsent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 74, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inatTotpktsent.setStatus('current')
if mibBuilder.loadTexts: inatTotpktsent.setDescription('INAT total Packets Sent')
nsNat64StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 75))
nsNat64GlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 75, 1))
nat64TotUdpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 75, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat64TotUdpSessions.setStatus('current')
if mibBuilder.loadTexts: nat64TotUdpSessions.setDescription('Total number of UDP sessions created by NAT64.')
nat64TotTcpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 75, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat64TotTcpSessions.setStatus('current')
if mibBuilder.loadTexts: nat64TotTcpSessions.setDescription('Total number of TCP sessions created by NAT64.')
nat64TotSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 75, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat64TotSessions.setStatus('current')
if mibBuilder.loadTexts: nat64TotSessions.setDescription('Total number of sessions created by NAT64.')
nat64TotIcmpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 75, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nat64TotIcmpSessions.setStatus('current')
if mibBuilder.loadTexts: nat64TotIcmpSessions.setDescription('Total number of ICMP sessions created by NAT64.')
nsIp6StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76))
ipv6TotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotRxPkts.setStatus('current')
if mibBuilder.loadTexts: ipv6TotRxPkts.setDescription('IPv6 packets received.')
ipv6TotTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotTxPkts.setStatus('current')
if mibBuilder.loadTexts: ipv6TotTxPkts.setDescription('IPv6 packets transmitted')
ipv6TotRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotRxBytes.setStatus('current')
if mibBuilder.loadTexts: ipv6TotRxBytes.setDescription('Bytes of IPv6 data received.')
ipv6TotTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotTxBytes.setStatus('current')
if mibBuilder.loadTexts: ipv6TotTxBytes.setDescription('Bytes of IPv6 data transmitted.')
ipv6FragTotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6FragTotRxPkts.setStatus('current')
if mibBuilder.loadTexts: ipv6FragTotRxPkts.setDescription('IPv6 fragments received.')
ipv6FragTotPktsForward = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6FragTotPktsForward.setStatus('current')
if mibBuilder.loadTexts: ipv6FragTotPktsForward.setDescription('IPv6 fragments forwarded to the client or server without reassembly.')
ipv6FragTotPktsProcessNoReass = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6FragTotPktsProcessNoReass.setStatus('current')
if mibBuilder.loadTexts: ipv6FragTotPktsProcessNoReass.setDescription('IPv6 fragments processed without reassembly.')
ipv6ErrHdr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6ErrHdr.setStatus('current')
if mibBuilder.loadTexts: ipv6ErrHdr.setDescription('Packets received that contain an error in one or more components of the IPv6 header.')
ipv6LandAttack = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6LandAttack.setStatus('current')
if mibBuilder.loadTexts: ipv6LandAttack.setDescription('Land-attack packets received. The source and destination addresses are the same. If not dropped, these packets can lock up the appliance.')
ipv6FragZeroLenPkt = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6FragZeroLenPkt.setStatus('current')
if mibBuilder.loadTexts: ipv6FragZeroLenPkt.setDescription('Packets received with a fragment length of 0 bytes.')
ipv6TotIcmpFragPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotIcmpFragPkts.setStatus('current')
if mibBuilder.loadTexts: ipv6TotIcmpFragPkts.setDescription('Number of ICMPV6 fragmented packets.')
ipv6TotLookupDone = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotLookupDone.setStatus('current')
if mibBuilder.loadTexts: ipv6TotLookupDone.setDescription('Total number of nd6 lookup done.')
ipv6TotLookupFailed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotLookupFailed.setStatus('current')
if mibBuilder.loadTexts: ipv6TotLookupFailed.setDescription('Total number of nd6 lookup failed.')
ipv6TotStaticRoutes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotStaticRoutes.setStatus('current')
if mibBuilder.loadTexts: ipv6TotStaticRoutes.setDescription('Total number of static ipv6 routes.')
ipv6TotDynamicRoutes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotDynamicRoutes.setStatus('current')
if mibBuilder.loadTexts: ipv6TotDynamicRoutes.setDescription('Total number of dynamic ipv6 routes.')
ipv6TotNeigborDiscovered = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotNeigborDiscovered.setStatus('current')
if mibBuilder.loadTexts: ipv6TotNeigborDiscovered.setDescription('Total number of nd6 entries both dynamic and static.')
ipv6TotIpv6To4Conversions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotIpv6To4Conversions.setStatus('current')
if mibBuilder.loadTexts: ipv6TotIpv6To4Conversions.setDescription('Total number of ipv6 to v4 conversion done.')
ipv6TotIpv4To6Conversions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotIpv4To6Conversions.setStatus('current')
if mibBuilder.loadTexts: ipv6TotIpv4To6Conversions.setDescription('Total number of ipv4 to v6 conversion done.')
ipv6TotTcpConnection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotTcpConnection.setStatus('current')
if mibBuilder.loadTexts: ipv6TotTcpConnection.setDescription('TCP connections over IPv6.')
ipv6TotNonTcpConnection = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 76, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6TotNonTcpConnection.setStatus('current')
if mibBuilder.loadTexts: ipv6TotNonTcpConnection.setDescription('Non TCP connections over IPv6.')
nsTdInetAddressTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77), )
if mibBuilder.loadTexts: nsTdInetAddressTable.setStatus('current')
if mibBuilder.loadTexts: nsTdInetAddressTable.setDescription('This table contains information about the non-default Td IP Addresses configured on the NetScaler.')
nsTdInetAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1), ).setIndexNames((0, "NS-ROOT-MIB", "nsTdInetId"), (0, "NS-ROOT-MIB", "nsTdInetAddressType"), (0, "NS-ROOT-MIB", "nsTdInetAddress"))
if mibBuilder.loadTexts: nsTdInetAddressEntry.setStatus('current')
if mibBuilder.loadTexts: nsTdInetAddressEntry.setDescription('...')
nsTdInetId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetId.setStatus('current')
if mibBuilder.loadTexts: nsTdInetId.setDescription('This represents a traffic domain ID')
nsTdInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetAddressType.setStatus('current')
if mibBuilder.loadTexts: nsTdInetAddressType.setDescription('The address type of nsTdInetAddress')
nsTdInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetAddress.setStatus('current')
if mibBuilder.loadTexts: nsTdInetAddress.setDescription('This represents an IPv4/v6 address configured on the NetScaler')
nsTdInetMaskLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetMaskLength.setStatus('current')
if mibBuilder.loadTexts: nsTdInetMaskLength.setDescription('This represents netmask length.')
nsTdInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 5), IpAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetType.setStatus('current')
if mibBuilder.loadTexts: nsTdInetType.setDescription('This represents the IP address type')
nsTdInetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 6), IpAddressMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetMode.setStatus('current')
if mibBuilder.loadTexts: nsTdInetMode.setDescription('This represents the IP address mode')
nsTdInetFreePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetFreePorts.setStatus('current')
if mibBuilder.loadTexts: nsTdInetFreePorts.setDescription('This represents the number of unused ports free on this IP')
nsTdInetVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetVlan.setStatus('current')
if mibBuilder.loadTexts: nsTdInetVlan.setDescription('The vlan to which this ip address is bound.')
nsTdInetBridgeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetBridgeGroup.setStatus('current')
if mibBuilder.loadTexts: nsTdInetBridgeGroup.setDescription('The bridge group to which this ip address is bound.')
nsTdInetVxlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 77, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTdInetVxlan.setStatus('current')
if mibBuilder.loadTexts: nsTdInetVxlan.setDescription('The vxlan to which this ip address is bound.')
nsCaStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78))
caTotaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotaudio.setStatus('current')
if mibBuilder.loadTexts: caTotaudio.setDescription('')
caTotgetobjreq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotgetobjreq.setStatus('current')
if mibBuilder.loadTexts: caTotgetobjreq.setDescription('')
caTotlookuphit = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotlookuphit.setStatus('current')
if mibBuilder.loadTexts: caTotlookuphit.setDescription('This number should be close to the number of hits being served currently.')
caTotlookupnostoremiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotlookupnostoremiss.setStatus('current')
if mibBuilder.loadTexts: caTotlookupnostoremiss.setDescription('')
caTotRequests = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotRequests.setStatus('current')
if mibBuilder.loadTexts: caTotRequests.setDescription('')
caTotlookupstoremiss = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotlookupstoremiss.setStatus('current')
if mibBuilder.loadTexts: caTotlookupstoremiss.setDescription('')
caTotobjstored = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotobjstored.setStatus('current')
if mibBuilder.loadTexts: caTotobjstored.setDescription('')
caTotvideo = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotvideo.setStatus('current')
if mibBuilder.loadTexts: caTotvideo.setDescription('')
caTotother = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotother.setStatus('current')
if mibBuilder.loadTexts: caTotother.setDescription('')
caTotputobjreq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotputobjreq.setStatus('current')
if mibBuilder.loadTexts: caTotputobjreq.setDescription('')
caTotrespbytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caTotrespbytes.setStatus('current')
if mibBuilder.loadTexts: caTotrespbytes.setDescription('')
caMsftSmthStrmVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMsftSmthStrmVid.setStatus('current')
if mibBuilder.loadTexts: caMsftSmthStrmVid.setDescription('This tells the total number of MicrosoftSmoothStreaming requests served by NS')
cacMsftSmthStrmVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacMsftSmthStrmVid.setStatus('current')
if mibBuilder.loadTexts: cacMsftSmthStrmVid.setDescription('This tells the total number of MicrosoftSmoothStreaming requests served from cache')
caMsftSmthStrmVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMsftSmthStrmVidBytes.setStatus('current')
if mibBuilder.loadTexts: caMsftSmthStrmVidBytes.setDescription('This tells the total number of MicrosoftSmoothStreaming bytes served by NS ')
caMicrosoftSmoothStreamingVidCacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMicrosoftSmoothStreamingVidCacheBytes.setStatus('current')
if mibBuilder.loadTexts: caMicrosoftSmoothStreamingVidCacheBytes.setDescription('This tells the total number of MicrosoftSmoothStreaming bytes served from cache.')
caMsftSmthStrVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMsftSmthStrVid.setStatus('current')
if mibBuilder.loadTexts: caMsftSmthStrVid.setDescription('This tells the total number of MicrosoftSmoothStreaming Playlist requests served by NS')
cacMsftSmthStrmPlVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacMsftSmthStrmPlVid.setStatus('current')
if mibBuilder.loadTexts: cacMsftSmthStrmPlVid.setDescription('This tells the total number of MicrosoftSmoothStreaming Playlist requests served from cache')
caMsftSmthStrmPlVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMsftSmthStrmPlVidBytes.setStatus('current')
if mibBuilder.loadTexts: caMsftSmthStrmPlVidBytes.setDescription('This tells the total number of MicrosoftSmoothStreaming Playlist bytes served by NS ')
caMicrosoftSmoothStreamingPlaylistVidcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMicrosoftSmoothStreamingPlaylistVidcacheBytes.setStatus('current')
if mibBuilder.loadTexts: caMicrosoftSmoothStreamingPlaylistVidcacheBytes.setDescription('This tells the total number of MicrosoftSmoothStreaming Playlist bytes served from cache')
cacApleLiveStrmngVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacApleLiveStrmngVid.setStatus('current')
if mibBuilder.loadTexts: cacApleLiveStrmngVid.setDescription('This tells the total number of AppleLive requests served by NS')
cacAppleLiveStreamingVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacAppleLiveStreamingVid.setStatus('current')
if mibBuilder.loadTexts: cacAppleLiveStreamingVid.setDescription('This tells the total number of AppleLive requests served from cache')
caAppleLiveStreamingVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAppleLiveStreamingVidBytes.setStatus('current')
if mibBuilder.loadTexts: caAppleLiveStreamingVidBytes.setDescription('This tells the total number of AppleLive bytes served by NS ')
caAppleLiveStreamingVidcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAppleLiveStreamingVidcacheBytes.setStatus('current')
if mibBuilder.loadTexts: caAppleLiveStreamingVidcacheBytes.setDescription('This tells the total number of AppleLive bytes served from cache')
cacAppleLiveStrmngVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacAppleLiveStrmngVid.setStatus('current')
if mibBuilder.loadTexts: cacAppleLiveStrmngVid.setDescription('This tells the total number of AppleLive Playlist requests served by NS')
cacAppleLiveStreamingPlaylistVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacAppleLiveStreamingPlaylistVid.setStatus('current')
if mibBuilder.loadTexts: cacAppleLiveStreamingPlaylistVid.setDescription('This tells the total number of AppleLive Playlist requests served from cache')
caAppleLiveStreamingPlaylistVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAppleLiveStreamingPlaylistVidBytes.setStatus('current')
if mibBuilder.loadTexts: caAppleLiveStreamingPlaylistVidBytes.setDescription('This tells the total number of AppleLive Playlist bytes served by NS ')
caAppleLiveStreamingPlaylistVidcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAppleLiveStreamingPlaylistVidcacheBytes.setStatus('current')
if mibBuilder.loadTexts: caAppleLiveStreamingPlaylistVidcacheBytes.setDescription('This tells the total number of AppleLive Playlist bytes served from cache')
caADTSaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caADTSaudio.setStatus('current')
if mibBuilder.loadTexts: caADTSaudio.setDescription('This tells the total number of ADTS requests served by NS')
cacADTSaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacADTSaudio.setStatus('current')
if mibBuilder.loadTexts: cacADTSaudio.setDescription('This tells the total number of ADTS requests served from cache')
caADTSaudioBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caADTSaudioBytes.setStatus('current')
if mibBuilder.loadTexts: caADTSaudioBytes.setDescription('This tells the total number of ADTS bytes served by NS ')
caADTSaudiocacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caADTSaudiocacheBytes.setStatus('current')
if mibBuilder.loadTexts: caADTSaudiocacheBytes.setDescription('This tells the total number of ADTS bytes served from cache')
caAACaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAACaudio.setStatus('current')
if mibBuilder.loadTexts: caAACaudio.setDescription('This tells the total number of AAC requests served by NS')
cacAACaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacAACaudio.setStatus('current')
if mibBuilder.loadTexts: cacAACaudio.setDescription('This tells the total number of AAC requests served from cache')
caAACaudiobytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAACaudiobytes.setStatus('current')
if mibBuilder.loadTexts: caAACaudiobytes.setDescription('This tells the total number of AAC bytes served by NS ')
caAACaudiocachebytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAACaudiocachebytes.setStatus('current')
if mibBuilder.loadTexts: caAACaudiocachebytes.setDescription('This tells the total number of AAC bytes served from cache')
caFLVVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caFLVVid.setStatus('current')
if mibBuilder.loadTexts: caFLVVid.setDescription('This tells the total number of FLV requests served by NS')
cacFLVVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacFLVVid.setStatus('current')
if mibBuilder.loadTexts: cacFLVVid.setDescription('This tells the total number of FLV requests served from cache')
caFLVVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caFLVVidBytes.setStatus('current')
if mibBuilder.loadTexts: caFLVVidBytes.setDescription('This tells the total number of FLV bytes served by NS ')
caFLVVidcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caFLVVidcacheBytes.setStatus('current')
if mibBuilder.loadTexts: caFLVVidcacheBytes.setDescription('This tells the total number of FLV bytes served from cache')
caMP4Vid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMP4Vid.setStatus('current')
if mibBuilder.loadTexts: caMP4Vid.setDescription('This tells the total number of MP4 requests served by NS')
cacMP4Vid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacMP4Vid.setStatus('current')
if mibBuilder.loadTexts: cacMP4Vid.setDescription('This tells the total number of MP4 requests served from cache')
caMP4VidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMP4VidBytes.setStatus('current')
if mibBuilder.loadTexts: caMP4VidBytes.setDescription('This tells the total number of MP4 bytes served by NS ')
caMP4VidcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMP4VidcacheBytes.setStatus('current')
if mibBuilder.loadTexts: caMP4VidcacheBytes.setDescription('This tells the total number of MP4 bytes served from cache')
ca3PVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ca3PVid.setStatus('current')
if mibBuilder.loadTexts: ca3PVid.setDescription('This tells the total number of 3GP requests served by NS')
ca3GPVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ca3GPVid.setStatus('current')
if mibBuilder.loadTexts: ca3GPVid.setDescription('This tells the hit ratio of 3GP requests served from cache')
ca3GPVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ca3GPVidBytes.setStatus('current')
if mibBuilder.loadTexts: ca3GPVidBytes.setDescription('This tells the total number of 3GP bytes served by NS ')
ca3GPVidcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ca3GPVidcacheBytes.setStatus('current')
if mibBuilder.loadTexts: ca3GPVidcacheBytes.setDescription('This tells the total number of 3GP bytes served from cache')
caMsftSmthStrmVidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMsftSmthStrmVidHR.setStatus('current')
if mibBuilder.loadTexts: caMsftSmthStrmVidHR.setDescription('This tells the hit ratio of MicrosoftSmoothStreaming requests')
cacMsftSmthStrmPlVidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacMsftSmthStrmPlVidHR.setStatus('current')
if mibBuilder.loadTexts: cacMsftSmthStrmPlVidHR.setDescription('This tells the hit ratio of MicrosoftSmoothStreaming Playlist requests')
cacAppleLiveStreamingVidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacAppleLiveStreamingVidHR.setStatus('current')
if mibBuilder.loadTexts: cacAppleLiveStreamingVidHR.setDescription('This tells the hit ratio of AppleLive requests')
cacAppleLiveStreamingPlaylistVidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacAppleLiveStreamingPlaylistVidHR.setStatus('current')
if mibBuilder.loadTexts: cacAppleLiveStreamingPlaylistVidHR.setDescription('This tells the hit ratio of AppleLive Playlist requests')
cacADTSaudioHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacADTSaudioHR.setStatus('current')
if mibBuilder.loadTexts: cacADTSaudioHR.setDescription('This tells the Hit Ratio of ADTS requests')
cacAACaudioHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacAACaudioHR.setStatus('current')
if mibBuilder.loadTexts: cacAACaudioHR.setDescription('This tells the hit ratio of AAC requests')
cacFLVVidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacFLVVidHR.setStatus('current')
if mibBuilder.loadTexts: cacFLVVidHR.setDescription('This tells the hit ratio of FLV requests')
cacMP4VidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacMP4VidHR.setStatus('current')
if mibBuilder.loadTexts: cacMP4VidHR.setDescription('This tells the hit ratio of MP4 requests')
ca3GPVidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ca3GPVidHR.setStatus('current')
if mibBuilder.loadTexts: ca3GPVidHR.setDescription('This tells the total number of 3GP requests')
caMsftSmthStrmngVidCaBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMsftSmthStrmngVidCaBytesHR.setStatus('current')
if mibBuilder.loadTexts: caMsftSmthStrmngVidCaBytesHR.setDescription('This tells the Bytes hit ratio of MicrosoftSmoothStreaming bytes .')
caMsftSmthStrmngPlVidcaBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMsftSmthStrmngPlVidcaBytesHR.setStatus('current')
if mibBuilder.loadTexts: caMsftSmthStrmngPlVidcaBytesHR.setDescription('This tells the byte hit ratio of MicrosoftSmoothStreaming Playlist bytes ')
caAppleLiveStrmngVidcacheBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAppleLiveStrmngVidcacheBytesHR.setStatus('current')
if mibBuilder.loadTexts: caAppleLiveStrmngVidcacheBytesHR.setDescription('This tells the total number of AppleLive bytes ')
caApleLiveStrmngPlVidcacheBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caApleLiveStrmngPlVidcacheBytesHR.setStatus('current')
if mibBuilder.loadTexts: caApleLiveStrmngPlVidcacheBytesHR.setDescription('This tells the byte hit ratio of AppleLive Playlist bytes ')
caADTSaudiocacheBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caADTSaudiocacheBytesHR.setStatus('current')
if mibBuilder.loadTexts: caADTSaudiocacheBytesHR.setDescription('This tells the byte hit ratio of ADTS bytes ')
caAACaudiocachebytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAACaudiocachebytesHR.setStatus('current')
if mibBuilder.loadTexts: caAACaudiocachebytesHR.setDescription('This tells the hit ratio AAC bytes served')
caFLVVidcacheBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caFLVVidcacheBytesHR.setStatus('current')
if mibBuilder.loadTexts: caFLVVidcacheBytesHR.setDescription('This tells the hit ratio of FLV bytes')
caMP4VidcacheBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caMP4VidcacheBytesHR.setStatus('current')
if mibBuilder.loadTexts: caMP4VidcacheBytesHR.setDescription('This tells the hit ratio of MP4 bytes')
ca3GPVidcacheBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ca3GPVidcacheBytesHR.setStatus('current')
if mibBuilder.loadTexts: ca3GPVidcacheBytesHR.setDescription('This tells the hit ratio of 3GP bytes')
caAndroid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAndroid.setStatus('current')
if mibBuilder.loadTexts: caAndroid.setDescription('Total number of android requests to netscaler')
caLaptopDesktp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caLaptopDesktp.setStatus('current')
if mibBuilder.loadTexts: caLaptopDesktp.setDescription('Total number of laptop/desktop requests to netscaler')
caIos = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caIos.setStatus('current')
if mibBuilder.loadTexts: caIos.setDescription('Total number of iOs requests to netscaler')
caOther = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caOther.setStatus('current')
if mibBuilder.loadTexts: caOther.setDescription('Total number of other mobile device requests to netscaler')
caUnidentified = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caUnidentified.setStatus('current')
if mibBuilder.loadTexts: caUnidentified.setDescription('Total number of unidentified requests to netscaler')
caAndroidcache = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAndroidcache.setStatus('current')
if mibBuilder.loadTexts: caAndroidcache.setDescription('This tells android requests served from cache')
caIoscache = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caIoscache.setStatus('current')
if mibBuilder.loadTexts: caIoscache.setDescription('This tells iOS requests served from cache')
caOthercache = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caOthercache.setStatus('current')
if mibBuilder.loadTexts: caOthercache.setDescription('This tells Other device requests served from cache')
calaptopDesktpcache = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calaptopDesktpcache.setStatus('current')
if mibBuilder.loadTexts: calaptopDesktpcache.setDescription('This tells laptop/desktop requests served from cache')
caUnidentifiedcache = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caUnidentifiedcache.setStatus('current')
if mibBuilder.loadTexts: caUnidentifiedcache.setDescription('This tells unidentified device requests served from cache')
caAndroidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAndroidBytes.setStatus('current')
if mibBuilder.loadTexts: caAndroidBytes.setDescription('This tells the total number of Android bytes served by NS ')
caIosBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caIosBytes.setStatus('current')
if mibBuilder.loadTexts: caIosBytes.setDescription('This tells the total number of IOS bytes served by NS ')
caOtherBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caOtherBytes.setStatus('current')
if mibBuilder.loadTexts: caOtherBytes.setDescription('This tells the total number of Other mobile device bytes served by NS ')
caAlptopDsktpBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAlptopDsktpBytes.setStatus('current')
if mibBuilder.loadTexts: caAlptopDsktpBytes.setDescription('This tells the total number of Laptop/desktop bytes served by NS ')
caUnidentifiedBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caUnidentifiedBytes.setStatus('current')
if mibBuilder.loadTexts: caUnidentifiedBytes.setDescription('This tells the total number of unidentified device bytes served by NS ')
caAndroididcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAndroididcacheBytes.setStatus('current')
if mibBuilder.loadTexts: caAndroididcacheBytes.setDescription('This tells the total number of Android bytes served from cache')
caIosidcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caIosidcacheBytes.setStatus('current')
if mibBuilder.loadTexts: caIosidcacheBytes.setDescription('This tells the total number of IOS bytes served from cache')
caOtherididcacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caOtherididcacheBytes.setStatus('current')
if mibBuilder.loadTexts: caOtherididcacheBytes.setDescription('This tells the total number of other device bytes served from cache')
caLaptpdektpBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caLaptpdektpBytes.setStatus('current')
if mibBuilder.loadTexts: caLaptpdektpBytes.setDescription('This tells the total number of Laptop/desktop bytes served from cache')
caAunindentifiedBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAunindentifiedBytes.setStatus('current')
if mibBuilder.loadTexts: caAunindentifiedBytes.setDescription('This tells the total number of unindentified device bytes served from cache')
caAndroidHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 86), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAndroidHR.setStatus('current')
if mibBuilder.loadTexts: caAndroidHR.setDescription('This tells the hit ratio of android requests ')
calaptopDesktpHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 87), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calaptopDesktpHR.setStatus('current')
if mibBuilder.loadTexts: calaptopDesktpHR.setDescription('This tells the hit ratio of laptop/desktop requests')
caotherHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 88), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caotherHR.setStatus('current')
if mibBuilder.loadTexts: caotherHR.setDescription('This tells the hit ratio of other mobile device requests ')
caIosHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 89), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caIosHR.setStatus('current')
if mibBuilder.loadTexts: caIosHR.setDescription('This tells the hit ratio of ios requests')
caUnidentifiedHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 90), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caUnidentifiedHR.setStatus('current')
if mibBuilder.loadTexts: caUnidentifiedHR.setDescription('This tells the hit ratio of android requests')
caAndroidBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 91), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAndroidBytesHR.setStatus('current')
if mibBuilder.loadTexts: caAndroidBytesHR.setDescription('This tells the hit ratio of 3GP bytes')
caLaptpdsktpBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 92), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caLaptpdsktpBytesHR.setStatus('current')
if mibBuilder.loadTexts: caLaptpdsktpBytesHR.setDescription('This tells the hit ratio of laptop_desktop bytes')
caotherBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 93), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caotherBytesHR.setStatus('current')
if mibBuilder.loadTexts: caotherBytesHR.setDescription('This tells the hit ratio of Other device')
caiosBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 94), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caiosBytesHR.setStatus('current')
if mibBuilder.loadTexts: caiosBytesHR.setDescription('This tells the hit ratio of IOS bytes')
caAunindentifiedBytesHR = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 78, 95), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caAunindentifiedBytesHR.setStatus('current')
if mibBuilder.loadTexts: caAunindentifiedBytesHR.setDescription('This tells the hit ratio of unindentified bytes')
nsvPathStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79))
vPathTotL2DataRx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotL2DataRx.setStatus('current')
if mibBuilder.loadTexts: vPathTotL2DataRx.setDescription('Total number of non-fragmented vPath data packets decapsulated in L2 adjacency')
vPathTotL3DataRx = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotL3DataRx.setStatus('current')
if mibBuilder.loadTexts: vPathTotL3DataRx.setDescription('Total number of non-fragmented vPath data packets decapsulated in L3 adjacency')
vPathTotL2CntrlPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotL2CntrlPkts.setStatus('current')
if mibBuilder.loadTexts: vPathTotL2CntrlPkts.setDescription('Total number of vPath control packets received in L2 adjacency')
vPathTotL3CntrlPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotL3CntrlPkts.setStatus('current')
if mibBuilder.loadTexts: vPathTotL3CntrlPkts.setDescription('Total number of vPath control packets received in L3 adjacency')
vPathTotFragPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotFragPkts.setStatus('current')
if mibBuilder.loadTexts: vPathTotFragPkts.setDescription('Total number of vPath fragments received')
vPathTotL2EncapPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotL2EncapPkts.setStatus('current')
if mibBuilder.loadTexts: vPathTotL2EncapPkts.setDescription('Total number of L2 vPath encapsulated packets injected to VEM')
vPathTotL3EncapPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotL3EncapPkts.setStatus('current')
if mibBuilder.loadTexts: vPathTotL3EncapPkts.setDescription('Total number of L3 vPath encapsulated packets injected to VEM')
vPathTotFragEncapPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotFragEncapPkts.setStatus('current')
if mibBuilder.loadTexts: vPathTotFragEncapPkts.setDescription('Number of fragmented vPath packets transmitted')
vPathTotOffload = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 79, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPathTotOffload.setStatus('current')
if mibBuilder.loadTexts: vPathTotOffload.setDescription('Number of offloaded vPath packets transmitted')
nsLLDPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80))
nsLLDPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 1))
lldpMessageTxInterval = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMessageTxInterval.setStatus('current')
if mibBuilder.loadTexts: lldpMessageTxInterval.setDescription('TIme interval at which lldp packets will be sent.')
lldpMessageTxHoldMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMessageTxHoldMultiplier.setStatus('current')
if mibBuilder.loadTexts: lldpMessageTxHoldMultiplier.setDescription('The time-to-live value expressed as a multiple of the lldpMessageTxInterval and lldpMessageTxHoldMultiplier.')
nsLLDPStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2))
nsLLDPStatsTxPortTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 1), )
if mibBuilder.loadTexts: nsLLDPStatsTxPortTable.setStatus('current')
if mibBuilder.loadTexts: nsLLDPStatsTxPortTable.setDescription('This table contains information about statistics of LLDP packets transmission. ')
nsLLDPStatsTxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "lldpStatsTxPortNum"))
if mibBuilder.loadTexts: nsLLDPStatsTxPortEntry.setStatus('current')
if mibBuilder.loadTexts: nsLLDPStatsTxPortEntry.setDescription('...')
lldpStatsTxPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsTxPortNum.setStatus('current')
if mibBuilder.loadTexts: lldpStatsTxPortNum.setDescription('Interface number')
lldpStatsTxPortFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsTxPortFramesTotal.setStatus('current')
if mibBuilder.loadTexts: lldpStatsTxPortFramesTotal.setDescription('Total LLDP Packets transmitted')
nsLLDPStatsRxPortTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 2), )
if mibBuilder.loadTexts: nsLLDPStatsRxPortTable.setStatus('current')
if mibBuilder.loadTexts: nsLLDPStatsRxPortTable.setDescription('This table contains information about statistics of recieved LLDP packets. ')
nsLLDPStatsRxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "lldpStatsRxPortNum"))
if mibBuilder.loadTexts: nsLLDPStatsRxPortEntry.setStatus('current')
if mibBuilder.loadTexts: nsLLDPStatsRxPortEntry.setDescription('...')
lldpStatsRxPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortNum.setStatus('current')
if mibBuilder.loadTexts: lldpStatsRxPortNum.setDescription('Interface number')
lldpStatsRxPortTLVsDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortTLVsDiscardedTotal.setStatus('current')
if mibBuilder.loadTexts: lldpStatsRxPortTLVsDiscardedTotal.setDescription('Total discarded LLDP packets.')
lldpStatsRxPortFramesErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortFramesErrors.setStatus('current')
if mibBuilder.loadTexts: lldpStatsRxPortFramesErrors.setDescription('Total errors in LLDP packets.')
lldpStatsRxPortFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortFramesTotal.setStatus('current')
if mibBuilder.loadTexts: lldpStatsRxPortFramesTotal.setDescription('Total LLDP Packets received.')
lldpStatsRxPortTLVsUnrecognizedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortTLVsUnrecognizedTotal.setStatus('current')
if mibBuilder.loadTexts: lldpStatsRxPortTLVsUnrecognizedTotal.setDescription('Total TLVs not Recognised.')
lldpStatsRemTablesLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: lldpStatsRemTablesLastChangeTime.setDescription('Time stamp at which last change in Remote table seen.')
lldpStatsRemTablesInserts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesInserts.setStatus('current')
if mibBuilder.loadTexts: lldpStatsRemTablesInserts.setDescription('Total inserts in Remote LLDP table.')
lldpStatsRemTablesDeletes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesDeletes.setStatus('current')
if mibBuilder.loadTexts: lldpStatsRemTablesDeletes.setDescription('Total deletes in Remote LLDP table.')
lldpStatsRemTablesAgeouts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesAgeouts.setStatus('current')
if mibBuilder.loadTexts: lldpStatsRemTablesAgeouts.setDescription('Total Aged out entries in Remote LLDP table.')
nsLLDPLocSystemsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3))
nsLLDPLocPortTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 1), )
if mibBuilder.loadTexts: nsLLDPLocPortTable.setStatus('current')
if mibBuilder.loadTexts: nsLLDPLocPortTable.setDescription('This Table contains LLDP information of local port. ')
nsLLDPLocPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "lldpLocPortNum"))
if mibBuilder.loadTexts: nsLLDPLocPortEntry.setStatus('current')
if mibBuilder.loadTexts: nsLLDPLocPortEntry.setDescription('...')
lldpLocPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocPortNum.setStatus('current')
if mibBuilder.loadTexts: lldpLocPortNum.setDescription('Interface Number')
lldpLocPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocPortIdSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpLocPortIdSubtype.setDescription('Local port id sub type')
lldpLocPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocPortId.setStatus('current')
if mibBuilder.loadTexts: lldpLocPortId.setDescription('Local port id')
nsLLDPLocManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 2), )
if mibBuilder.loadTexts: nsLLDPLocManAddrTable.setStatus('current')
if mibBuilder.loadTexts: nsLLDPLocManAddrTable.setDescription('This Table contains LLDP information of local management address. ')
nsLLDPLocManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "lldpLocManAddrSubtype"))
if mibBuilder.loadTexts: nsLLDPLocManAddrEntry.setStatus('current')
if mibBuilder.loadTexts: nsLLDPLocManAddrEntry.setDescription('...')
lldpLocManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpLocManAddrSubtype.setDescription('Management address subtype of Remote System')
lldpLocManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddr.setStatus('current')
if mibBuilder.loadTexts: lldpLocManAddr.setDescription('Management address of Local System')
lldpLocManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrIfSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpLocManAddrIfSubtype.setDescription('Interface subtype')
lldpLocManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrIfId.setStatus('current')
if mibBuilder.loadTexts: lldpLocManAddrIfId.setDescription('interface id')
lldpLocManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrOID.setStatus('current')
if mibBuilder.loadTexts: lldpLocManAddrOID.setDescription('Management address OID')
lldpLocChassisIdSubtype = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocChassisIdSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpLocChassisIdSubtype.setDescription('Local chassis Id type')
lldpLocChassisId = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocChassisId.setStatus('current')
if mibBuilder.loadTexts: lldpLocChassisId.setDescription('Local chassis Id')
lldpLocSysName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocSysName.setStatus('current')
if mibBuilder.loadTexts: lldpLocSysName.setDescription('Local Sytem Name')
lldpLocSysDesc = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocSysDesc.setStatus('current')
if mibBuilder.loadTexts: lldpLocSysDesc.setDescription('Sytem description')
lldpLocSysCapSupported = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocSysCapSupported.setStatus('current')
if mibBuilder.loadTexts: lldpLocSysCapSupported.setDescription('Capabilities supported by local system')
lldpLocSysCapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocSysCapEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpLocSysCapEnabled.setDescription('Capabilities enabled on local system')
nsLLDPRemSystemsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4))
nsLLDPRemTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1), )
if mibBuilder.loadTexts: nsLLDPRemTable.setStatus('current')
if mibBuilder.loadTexts: nsLLDPRemTable.setDescription('This table contains lldp information of neighbors. ')
nsLLDPRemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "lldpRemLocalPortNum"))
if mibBuilder.loadTexts: nsLLDPRemEntry.setStatus('current')
if mibBuilder.loadTexts: nsLLDPRemEntry.setDescription('...')
lldpRemTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemTimeMark.setStatus('current')
if mibBuilder.loadTexts: lldpRemTimeMark.setDescription('Time mark when lldp info recieved')
lldpRemLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemLocalPortNum.setStatus('current')
if mibBuilder.loadTexts: lldpRemLocalPortNum.setDescription('local nic no')
lldpRemChassisIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemChassisIdSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpRemChassisIdSubtype.setDescription('ChassisId subtype of remote system')
lldpRemChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemChassisId.setStatus('current')
if mibBuilder.loadTexts: lldpRemChassisId.setDescription('Chassiss id of remote system')
lldpRemPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemPortIdSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpRemPortIdSubtype.setDescription('port id subtype of remote system')
lldpRemPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemPortId.setStatus('current')
if mibBuilder.loadTexts: lldpRemPortId.setDescription('port id of remote system')
lldpRemPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemPortDesc.setStatus('current')
if mibBuilder.loadTexts: lldpRemPortDesc.setDescription('port description of remote system')
lldpRemSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysName.setStatus('current')
if mibBuilder.loadTexts: lldpRemSysName.setDescription('remote system name')
lldpRemSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysDesc.setStatus('current')
if mibBuilder.loadTexts: lldpRemSysDesc.setDescription('remote system description')
lldpRemSysCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysCapSupported.setStatus('current')
if mibBuilder.loadTexts: lldpRemSysCapSupported.setDescription('remote system capabilities')
lldpRemSysCapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysCapEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpRemSysCapEnabled.setDescription('enabled capabilities of system')
nsLLDPRemManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 2), )
if mibBuilder.loadTexts: nsLLDPRemManAddrTable.setStatus('current')
if mibBuilder.loadTexts: nsLLDPRemManAddrTable.setDescription('This table contains LLDP information about management address of neighbors. ')
nsLLDPRemManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "lldpRemLocalPortNum"), (0, "NS-ROOT-MIB", "lldpRemManAddr"))
if mibBuilder.loadTexts: nsLLDPRemManAddrEntry.setStatus('current')
if mibBuilder.loadTexts: nsLLDPRemManAddrEntry.setDescription('...')
lldpRemManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpRemManAddrSubtype.setDescription('Management address subtype of Remote System')
lldpRemManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddr.setStatus('current')
if mibBuilder.loadTexts: lldpRemManAddr.setDescription('Management address of Remote System')
lldpRemManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrIfSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpRemManAddrIfSubtype.setDescription('Interface subtype')
lldpRemManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrIfId.setStatus('current')
if mibBuilder.loadTexts: lldpRemManAddrIfId.setDescription('interface id')
lldpRemManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 80, 4, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrOID.setStatus('current')
if mibBuilder.loadTexts: lldpRemManAddrOID.setDescription('Management address OID')
vxlanTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 81), )
if mibBuilder.loadTexts: vxlanTable.setStatus('current')
if mibBuilder.loadTexts: vxlanTable.setDescription('The vxlan related statistics table.')
vxlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 81, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vxlanVNId"))
if mibBuilder.loadTexts: vxlanEntry.setStatus('current')
if mibBuilder.loadTexts: vxlanEntry.setDescription('...')
vxlanVNId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 81, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxlanVNId.setStatus('current')
if mibBuilder.loadTexts: vxlanVNId.setDescription('This represents the VNID of the vxlan')
vxlanTotRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 81, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxlanTotRxPkts.setStatus('current')
if mibBuilder.loadTexts: vxlanTotRxPkts.setDescription('Packets received on the VXLAN.')
vxlanTotRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 81, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxlanTotRxBytes.setStatus('current')
if mibBuilder.loadTexts: vxlanTotRxBytes.setDescription('Bytes of data received on the VXLAN.')
vxlanTotTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 81, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxlanTotTxPkts.setStatus('current')
if mibBuilder.loadTexts: vxlanTotTxPkts.setDescription('Packets transmitted on the VXLAN.')
vxlanTotTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 81, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxlanTotTxBytes.setStatus('current')
if mibBuilder.loadTexts: vxlanTotTxBytes.setDescription('Bytes of data transmitted on the VXLAN.')
cacheGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82), )
if mibBuilder.loadTexts: cacheGroupTable.setStatus('current')
if mibBuilder.loadTexts: cacheGroupTable.setDescription('Content Group Table')
cacheGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1), ).setIndexNames((0, "NS-ROOT-MIB", "cachegroupName"))
if mibBuilder.loadTexts: cacheGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cacheGroupEntry.setDescription('...')
cachegroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachegroupName.setStatus('current')
if mibBuilder.loadTexts: cachegroupName.setDescription('Encoded name of the cache group')
groupnon304hit = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupnon304hit.setStatus('current')
if mibBuilder.loadTexts: groupnon304hit.setDescription('Non304 hits for ContentGroup')
group304hit = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: group304hit.setStatus('current')
if mibBuilder.loadTexts: group304hit.setDescription('304 hits for ContentGroup')
totcell = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totcell.setStatus('current')
if mibBuilder.loadTexts: totcell.setDescription('Number of objects in contentgroup')
totmarkercell = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totmarkercell.setStatus('current')
if mibBuilder.loadTexts: totmarkercell.setDescription('Number of marker objects in contentgroup')
timesflushed = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timesflushed.setStatus('current')
if mibBuilder.loadTexts: timesflushed.setDescription('Number of times contentgroup is flushed')
totmemory = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totmemory.setStatus('current')
if mibBuilder.loadTexts: totmemory.setDescription('current memory usage')
maxmemory = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 82, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxmemory.setStatus('current')
if mibBuilder.loadTexts: maxmemory.setDescription('maximum memory usage limit')
nsLsnStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83))
nsLsnGlobalStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1))
lsnTotRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotRxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotRxPkts.setDescription('Current number of LSN rx pkts.')
lsnTotRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotRxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotRxBytes.setDescription('Current number of LSN rx bytes.')
lsnTotTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotTxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotTxPkts.setDescription('Current number of LSN tx pkts.')
lsnTotTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotTxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotTxBytes.setDescription('Current number of LSN tx bytess.')
lsnCurSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurSessions.setStatus('current')
if mibBuilder.loadTexts: lsnCurSessions.setDescription('Current number of LSN sessions.')
lsnCurSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurSubscribers.setStatus('current')
if mibBuilder.loadTexts: lsnCurSubscribers.setDescription('Current number of LSN subscribers.')
lsnTotTcpRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotTcpRxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotTcpRxPkts.setDescription('Number of LSN TCP Received packets.')
lsnTotTcpTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotTcpTxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotTcpTxPkts.setDescription('Number of LSN TCP Transmitted packets.')
lsnTotUdpRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotUdpRxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotUdpRxPkts.setDescription('Number of LSN UDP Received packets.')
lsnTotUdpTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotUdpTxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotUdpTxPkts.setDescription('Number of LSN UDP Transmitted packets.')
lsnTotIcmpRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotIcmpRxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotIcmpRxPkts.setDescription('Number of LSN ICMP Received packets.')
lsnTotIcmpTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotIcmpTxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotIcmpTxPkts.setDescription('Number of LSN ICMP Transmitted packets.')
lsnTotTcpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotTcpRxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotTcpRxBytes.setDescription('Number of LSN TCP Received bytes.')
lsnTotTcpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotTcpTxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotTcpTxBytes.setDescription('Number of LSN TCP Transmitted bytes.')
lsnTotUdpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotUdpRxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotUdpRxBytes.setDescription('Number of LSN UDP Received bytes.')
lsnTotUdpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotUdpTxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotUdpTxBytes.setDescription('Number of LSN UDP Transmitted bytes.')
lsnTotIcmpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotIcmpRxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotIcmpRxBytes.setDescription('Number of LSN ICMP Received bytes.')
lsnTotIcmpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotIcmpTxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotIcmpTxBytes.setDescription('Number of LSN ICMP Transmitted bytes.')
lsnTotDrpPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotDrpPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotDrpPkts.setDescription('Tot number of LSN Dropped packets.')
lsnTotTcpDrpPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotTcpDrpPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotTcpDrpPkts.setDescription('Number of LSN TCP Dropped packets.')
lsnTotUdpDrpPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotUdpDrpPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotUdpDrpPkts.setDescription('Number of LSN UDP Dropped packets.')
lsnTotIcmpDrpPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotIcmpDrpPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotIcmpDrpPkts.setDescription('Number of LSN ICMP Dropped packets.')
lsnCurTcpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurTcpSessions.setStatus('current')
if mibBuilder.loadTexts: lsnCurTcpSessions.setDescription('Number of LSN TCP Current Sessions.')
lsnCurUdpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurUdpSessions.setStatus('current')
if mibBuilder.loadTexts: lsnCurUdpSessions.setDescription('Number of LSN UDP Current Sessions.')
lsnCurIcmpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurIcmpSessions.setStatus('current')
if mibBuilder.loadTexts: lsnCurIcmpSessions.setDescription('Number of LSN ICMP Current Sessions.')
lsnSessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnSessionsRate.setStatus('current')
if mibBuilder.loadTexts: lsnSessionsRate.setDescription('Rate at which total LSN sessions are opened per second.')
lsnTcpSessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTcpSessionsRate.setStatus('current')
if mibBuilder.loadTexts: lsnTcpSessionsRate.setDescription('Rate at which total LSN sessions are opened per second.')
lsnUdpSessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnUdpSessionsRate.setStatus('current')
if mibBuilder.loadTexts: lsnUdpSessionsRate.setDescription('Rate at which total LSN sessions are opened per second.')
lsnIcmpSessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnIcmpSessionsRate.setStatus('current')
if mibBuilder.loadTexts: lsnIcmpSessionsRate.setDescription('Rate at which total LSN sessions are opened per second.')
nsLsnGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2), )
if mibBuilder.loadTexts: nsLsnGroupTable.setStatus('current')
if mibBuilder.loadTexts: nsLsnGroupTable.setDescription('This table contains statistics related to LSN group')
nsLsnGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "lsnGrpName"))
if mibBuilder.loadTexts: nsLsnGroupEntry.setStatus('current')
if mibBuilder.loadTexts: nsLsnGroupEntry.setDescription('...')
lsnGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpName.setStatus('current')
if mibBuilder.loadTexts: lsnGrpName.setDescription('The name of the LSN Group')
lsnGrpTotTranslPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotTranslPkts.setStatus('current')
if mibBuilder.loadTexts: lsnGrpTotTranslPkts.setDescription('Number of Translated Pkts for LSN group')
lsnGrpTotTranslBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotTranslBytes.setStatus('current')
if mibBuilder.loadTexts: lsnGrpTotTranslBytes.setDescription('Number of Translated Bytes for LSN group')
lsnGrpCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpCurSessions.setStatus('current')
if mibBuilder.loadTexts: lsnGrpCurSessions.setDescription('Number of Current Sessions for LSN group')
lsnGrpCurSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpCurSubscribers.setStatus('current')
if mibBuilder.loadTexts: lsnGrpCurSubscribers.setDescription('Number of ICMP Current Sessions for LSN group')
lsnGrpTotTcpTranslPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotTcpTranslPkts.setStatus('current')
if mibBuilder.loadTexts: lsnGrpTotTcpTranslPkts.setDescription('Number of TCP Translated Pkts for LSN group')
lsnGrpTotUdpTranslPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotUdpTranslPkts.setStatus('current')
if mibBuilder.loadTexts: lsnGrpTotUdpTranslPkts.setDescription('Number of UDP Translated Pkts for LSN group')
lsnGrpTotIcmpTranslPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotIcmpTranslPkts.setStatus('current')
if mibBuilder.loadTexts: lsnGrpTotIcmpTranslPkts.setDescription('Number of ICMP Translated Pkts for LSN group')
lsnGrpTotTcpTranslBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotTcpTranslBytes.setStatus('current')
if mibBuilder.loadTexts: lsnGrpTotTcpTranslBytes.setDescription('Number of TCP Translated Bytes for LSN group')
lsnGrpTotUdpTranslBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotUdpTranslBytes.setStatus('current')
if mibBuilder.loadTexts: lsnGrpTotUdpTranslBytes.setDescription('Number of UDP Translated Bytes for LSN group')
lsnGrpTotIcmpTranslBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotIcmpTranslBytes.setStatus('current')
if mibBuilder.loadTexts: lsnGrpTotIcmpTranslBytes.setDescription('Number of ICMP Translated Bytes for LSN group')
lsnGrpTotTcpDrpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotTcpDrpPkts.setStatus('current')
if mibBuilder.loadTexts: lsnGrpTotTcpDrpPkts.setDescription('Number of TCP Dropped Pkts for LSN group')
lsnGrpTotUdpDrpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotUdpDrpPkts.setStatus('current')
if mibBuilder.loadTexts: lsnGrpTotUdpDrpPkts.setDescription('Number of UDP Dropped Pkts for LSN group')
lsnGrpTotIcmpDrpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotIcmpDrpPkts.setStatus('current')
if mibBuilder.loadTexts: lsnGrpTotIcmpDrpPkts.setDescription('Number of ICMP Dropped Pkts for LSN group')
lsnGrpTotTcpDrpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotTcpDrpBytes.setStatus('current')
if mibBuilder.loadTexts: lsnGrpTotTcpDrpBytes.setDescription('Number of TCP Dropped Bytes for LSN group')
lsnGrpTotUdpDrpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotUdpDrpBytes.setStatus('current')
if mibBuilder.loadTexts: lsnGrpTotUdpDrpBytes.setDescription('Number of UDP Dropped Bytes for LSN group')
lsnGrpTotIcmpDrpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTotIcmpDrpBytes.setStatus('current')
if mibBuilder.loadTexts: lsnGrpTotIcmpDrpBytes.setDescription('Number of ICMP Dropped Bytes for LSN group')
lsnGrpCurTcpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpCurTcpSessions.setStatus('current')
if mibBuilder.loadTexts: lsnGrpCurTcpSessions.setDescription('Number of TCP Current Sessions for LSN group')
lsnGrpCurUdpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpCurUdpSessions.setStatus('current')
if mibBuilder.loadTexts: lsnGrpCurUdpSessions.setDescription('Number of UDP Current Sessions for LSN group')
lsnGrpCurIcmpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpCurIcmpSessions.setStatus('current')
if mibBuilder.loadTexts: lsnGrpCurIcmpSessions.setDescription('Number of ICMP Current Sessions for LSN group')
lsnGrpSessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpSessRate.setStatus('current')
if mibBuilder.loadTexts: lsnGrpSessRate.setDescription('Rate at which LSN sessions of group are opened per second.')
lsnGrpTcpSessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpTcpSessRate.setStatus('current')
if mibBuilder.loadTexts: lsnGrpTcpSessRate.setDescription('Rate at which LSN TCP sessions of group are opened per second.')
lsnGrpUdpSessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpUdpSessRate.setStatus('current')
if mibBuilder.loadTexts: lsnGrpUdpSessRate.setDescription('Rate at which LSN UDP sessions of group are opened per second.')
lsnGrpIcmpSessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnGrpIcmpSessRate.setStatus('current')
if mibBuilder.loadTexts: lsnGrpIcmpSessRate.setDescription('Rate at which LSN ICMP sessions of group are opened per second.')
nsPPTPStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3))
pptpCurCtrlSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpCurCtrlSessions.setStatus('current')
if mibBuilder.loadTexts: pptpCurCtrlSessions.setDescription('Total number of currrent PPTP control sessions.')
pptpTotCtrlSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpTotCtrlSessions.setStatus('current')
if mibBuilder.loadTexts: pptpTotCtrlSessions.setDescription('Total number of PPTP control sessions.')
pptpTotGRESessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpTotGRESessions.setStatus('current')
if mibBuilder.loadTexts: pptpTotGRESessions.setDescription('Total number of PPTP GRE sessions.')
pptpCurGRESessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpCurGRESessions.setStatus('current')
if mibBuilder.loadTexts: pptpCurGRESessions.setDescription('Total number of current PPTP GRE sessions.')
pptpStrtCtrlConnReply = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpStrtCtrlConnReply.setStatus('current')
if mibBuilder.loadTexts: pptpStrtCtrlConnReply.setDescription('Number of PPTP start control connection replies.')
pptpStpCtrlConnReply = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpStpCtrlConnReply.setStatus('current')
if mibBuilder.loadTexts: pptpStpCtrlConnReply.setDescription('Number of PPTP stop control connection replies.')
pptpOutCallReply = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpOutCallReply.setStatus('current')
if mibBuilder.loadTexts: pptpOutCallReply.setDescription('Number of PPTP out call replies.')
pptpCtlErrNoCallidMap = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpCtlErrNoCallidMap.setStatus('current')
if mibBuilder.loadTexts: pptpCtlErrNoCallidMap.setDescription('Number of PPTP control no callid map.')
pptpInCallReq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpInCallReq.setStatus('current')
if mibBuilder.loadTexts: pptpInCallReq.setDescription('Number of PPTP in call request.')
pptpInCallConn = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpInCallConn.setStatus('current')
if mibBuilder.loadTexts: pptpInCallConn.setDescription('Number of PPTP in call connected.')
pptpCallDisNotify = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpCallDisNotify.setStatus('current')
if mibBuilder.loadTexts: pptpCallDisNotify.setDescription('Number of PPTP call disconnect notification.')
pptpWanErrNotify = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpWanErrNotify.setStatus('current')
if mibBuilder.loadTexts: pptpWanErrNotify.setDescription('Number of PPTP WAN Error notification.')
pptpSetLinkInfo = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpSetLinkInfo.setStatus('current')
if mibBuilder.loadTexts: pptpSetLinkInfo.setDescription('Number of PPTP set link information.')
pptpEchoReq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpEchoReq.setStatus('current')
if mibBuilder.loadTexts: pptpEchoReq.setDescription('Number of PPTP echo request.')
pptpEchoRep = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpEchoRep.setStatus('current')
if mibBuilder.loadTexts: pptpEchoRep.setDescription('Number of PPTP echo reply.')
pptpStrtCtrlConnReq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpStrtCtrlConnReq.setStatus('current')
if mibBuilder.loadTexts: pptpStrtCtrlConnReq.setDescription('Number of PPTP start Control Connection request.')
pptpStpCtrlConnReq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpStpCtrlConnReq.setStatus('current')
if mibBuilder.loadTexts: pptpStpCtrlConnReq.setDescription('Number of PPTP stop Control Connection request.')
pptpOutCallReq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpOutCallReq.setStatus('current')
if mibBuilder.loadTexts: pptpOutCallReq.setDescription('Number of PPTP out call request.')
pptpInCallRep = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpInCallRep.setStatus('current')
if mibBuilder.loadTexts: pptpInCallRep.setDescription('Number of PPTP in call reply.')
pptpCallClrReq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpCallClrReq.setStatus('current')
if mibBuilder.loadTexts: pptpCallClrReq.setDescription('Number of PPTP call Clear request.')
pptpCntlOcreq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpCntlOcreq.setStatus('current')
if mibBuilder.loadTexts: pptpCntlOcreq.setDescription('Number of PPTP control ocreq error create callid map.')
pptpCntlIcreq = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pptpCntlIcreq.setStatus('current')
if mibBuilder.loadTexts: pptpCntlIcreq.setDescription('Number of PPTP icreq control error create callid map.')
nsLsnDSLiteGlobalStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 4))
lsnTotDSLiteRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotDSLiteRxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotDSLiteRxPkts.setDescription('Total number of LSN DS-Lite rx pkts.')
lsnTotDSLiteRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotDSLiteRxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotDSLiteRxBytes.setDescription('Total number of LSN DS-Lite rx bytes.')
lsnTotDSLiteTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotDSLiteTxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotDSLiteTxPkts.setDescription('Total number of LSN DS-Lite tx pkts.')
lsnTotDSLiteTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotDSLiteTxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotDSLiteTxBytes.setDescription('Total number of LSN DS-Lite tx bytes.')
lsnCurDSLiteSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurDSLiteSessions.setStatus('current')
if mibBuilder.loadTexts: lsnCurDSLiteSessions.setDescription('Current number of LSN DS-Lite sessions.')
lsnDSLiteCurSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnDSLiteCurSubscribers.setStatus('current')
if mibBuilder.loadTexts: lsnDSLiteCurSubscribers.setDescription('Current number of LSN DS-Lite subscribers.')
nsLsnLogStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5))
nsLsnMappingLogStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1))
lsnLogTotMappingCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotMappingCreateEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotMappingCreateEntries.setDescription('Total create-mapping entires logged.')
lsnLogTotMappingDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotMappingDeleteEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotMappingDeleteEntries.setDescription('Total delete-mapping entires logged.')
lsnLogTotAPDMappingCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotAPDMappingCreateEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotAPDMappingCreateEntries.setDescription('Total create-mappings of addrport dependent logged.')
lsnLogTotAPDMappingDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotAPDMappingDeleteEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotAPDMappingDeleteEntries.setDescription('Total no of delete-mappings of address port dependent type logged.')
lsnLogTotADMappingCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotADMappingCreateEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotADMappingCreateEntries.setDescription('Total create-mappings of Address dependent type logged.')
lsnLogTotADMappingDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotADMappingDeleteEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotADMappingDeleteEntries.setDescription('Total no of delete-mappings of Address dependent type logged.')
lsnLogTotEIMappingCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotEIMappingCreateEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotEIMappingCreateEntries.setDescription('Total create-mappings of Endpoint-Independent type logged.')
lsnLogTotEIMappingDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotEIMappingDeleteEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotEIMappingDeleteEntries.setDescription('Total no of delete-mappings of Endpoint Independent type logged.')
lsnLogTotTcpMappingCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotTcpMappingCreateEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotTcpMappingCreateEntries.setDescription('Total create-mappings for TCP logged.')
lsnLogTotTcpMappingDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotTcpMappingDeleteEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotTcpMappingDeleteEntries.setDescription('Total delete-mappings for TCP logged.')
lsnLogTotUdpMappingCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotUdpMappingCreateEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotUdpMappingCreateEntries.setDescription('Total create-mappings for UDP logged.')
lsnLogTotUdpMappingDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotUdpMappingDeleteEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotUdpMappingDeleteEntries.setDescription('Total delete-mappings for UDP logged.')
lsnLogTotIcmpMappingCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotIcmpMappingCreateEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotIcmpMappingCreateEntries.setDescription('Total create-mappings for ICMP logged.')
lsnLogTotIcmpMappingDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotIcmpMappingDeleteEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotIcmpMappingDeleteEntries.setDescription('Total delete-mappings for ICMP logged.')
lsnLogTotWrongMappingFlagEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotWrongMappingFlagEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotWrongMappingFlagEntries.setDescription('Total number of time wrong mapping-type was encountered while logging.')
nsLsnSessionLogStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2))
lsnLogTotSessionCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotSessionCreateEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotSessionCreateEntries.setDescription('Total no of create-sessions logged.')
lsnLogTotSessionDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotSessionDeleteEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotSessionDeleteEntries.setDescription('Total no of delete-sessions logged.')
lsnLogTotTcpSessionCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotTcpSessionCreateEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotTcpSessionCreateEntries.setDescription('Total create-sessions for TCP logged.')
lsnLogTotTcpSessionDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotTcpSessionDeleteEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotTcpSessionDeleteEntries.setDescription('Total delete-sessions for TCP logged.')
lsnLogTotUdpSessionCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotUdpSessionCreateEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotUdpSessionCreateEntries.setDescription('Total create-sessions for UDP logged.')
lsnLogTotUdpSessionDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotUdpSessionDeleteEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotUdpSessionDeleteEntries.setDescription('Total delete-sessions for UDP logged.')
lsnLogTotIcmpSessionCreateEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotIcmpSessionCreateEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotIcmpSessionCreateEntries.setDescription('Total create-sessions for ICMP logged.')
lsnLogTotIcmpSessionDeleteEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotIcmpSessionDeleteEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotIcmpSessionDeleteEntries.setDescription('Total delete-sessions for ICMP logged.')
lsnLogTotEntries = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotEntries.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotEntries.setDescription('Total session/mapping entries logged.')
lsnLogTotDeterministicAllocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotDeterministicAllocs.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotDeterministicAllocs.setDescription('Total deterministic NAT allocations logged.')
lsnLogTotDeterministicDeallocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotDeterministicDeallocs.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotDeterministicDeallocs.setDescription('Total determistic NAT deletions logged')
lsnLogTotPortblockAllocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotPortblockAllocs.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotPortblockAllocs.setDescription('Total portblock NAT allocations logged.')
lsnLogTotPortblockDeallocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotPortblockDeallocs.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotPortblockDeallocs.setDescription('Total portblock NAT deallocations logged.')
lsnLogTotTcpPortblockAllocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotTcpPortblockAllocs.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotTcpPortblockAllocs.setDescription('Total portblock NAT allocations for tcp logged.')
lsnLogTotTcpPortblockDeallocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotTcpPortblockDeallocs.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotTcpPortblockDeallocs.setDescription('Total portblock NAT deallocations for tcp logged.')
lsnLogTotNontcpPortblockAllocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotNontcpPortblockAllocs.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotNontcpPortblockAllocs.setDescription('Total portblock NAT allocations for udp and icmp logged.')
lsnLogTotNontcpPortblockDeallocs = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotNontcpPortblockDeallocs.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotNontcpPortblockDeallocs.setDescription('Total portblock NAT deallocations for udp and icmp logged.')
lsnLogTotWrongFlags = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotWrongFlags.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotWrongFlags.setDescription('Total no of times incorrect flag(neither create nor delete) encountered while logging.')
lsnLogTotWrongProtocols = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 5, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnLogTotWrongProtocols.setStatus('current')
if mibBuilder.loadTexts: lsnLogTotWrongProtocols.setDescription('Wrong protocol popped up in logentry.')
nsLsnNAT64GlobalStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6))
lsnTotNAT64RxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64RxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64RxPkts.setDescription('Total number of LSN NAT64 rx pkts.')
lsnTotNAT64RxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64RxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64RxBytes.setDescription('Total number of LSN NAT64 rx bytes.')
lsnTotNAT64TxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64TxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64TxPkts.setDescription('Total number of LSN NAT64 tx pkts.')
lsnTotNAT64TxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64TxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64TxBytes.setDescription('Total number of LSN NAT64 tx bytes.')
lsnCurNAT64sessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurNAT64sessions.setStatus('current')
if mibBuilder.loadTexts: lsnCurNAT64sessions.setDescription('Current number of LSN NAT64 sessions.')
lsnNAT64CurSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnNAT64CurSubscribers.setStatus('current')
if mibBuilder.loadTexts: lsnNAT64CurSubscribers.setDescription('Current number of LSN NAT64 subscribers.')
lsnTotNAT64TcpRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64TcpRxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64TcpRxPkts.setDescription('Number of LSN NAT64 TCP Received packets.')
lsnTotNAT64TcpTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64TcpTxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64TcpTxPkts.setDescription('Number of LSN NAT64 TCP Transmitted packets.')
lsnTotNAT64UdpRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64UdpRxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64UdpRxPkts.setDescription('Number of LSN NAT64 UDP Received packets.')
lsnTotNAT64UdpTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64UdpTxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64UdpTxPkts.setDescription('Number of LSN NAT64 UDP Transmitted packets.')
lsnTotNAT64IcmpRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64IcmpRxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64IcmpRxPkts.setDescription('Number of LSN NAT64 ICMP Received packets.')
lsnTotNAT64IcmpTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64IcmpTxPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64IcmpTxPkts.setDescription('Number of LSN NAT64 ICMP Transmitted packets.')
lsnTotNAT64TcpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64TcpRxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64TcpRxBytes.setDescription('Number of LSN NAT64 TCP Received bytes.')
lsnTotNAT64TcpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64TcpTxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64TcpTxBytes.setDescription('Number of LSN NAT64 TCP Transmitted bytes.')
lsnTotNAT64UdpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64UdpRxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64UdpRxBytes.setDescription('Number of LSN NAT64 UDP Received bytes.')
lsnTotNAT64UdpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64UdpTxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64UdpTxBytes.setDescription('Number of LSN NAT64 UDP Transmitted bytes.')
lsnTotNAT64IcmpRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64IcmpRxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64IcmpRxBytes.setDescription('Number of LSN NAT64 ICMP Received bytes.')
lsnTotNAT64IcmpTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64IcmpTxBytes.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64IcmpTxBytes.setDescription('Number of LSN NAT64 ICMP Transmitted bytes.')
lsnTotNAT64TcpDrpPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64TcpDrpPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64TcpDrpPkts.setDescription('Number of LSN NAT64 TCP Dropped packets.')
lsnTotNAT64UdpDrpPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotNAT64UdpDrpPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotNAT64UdpDrpPkts.setDescription('Number of LSN NAT64 UDP Dropped packets.')
lsnTotnat64IcmpDrpPkts = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnTotnat64IcmpDrpPkts.setStatus('current')
if mibBuilder.loadTexts: lsnTotnat64IcmpDrpPkts.setDescription('Number of LSN NAT64 ICMP Dropped packets.')
lsnCurNAT64TcpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurNAT64TcpSessions.setStatus('current')
if mibBuilder.loadTexts: lsnCurNAT64TcpSessions.setDescription('Number of LSN NAT64 TCP Current Sessions.')
lsnCurNAT64UdpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurNAT64UdpSessions.setStatus('current')
if mibBuilder.loadTexts: lsnCurNAT64UdpSessions.setDescription('Number of LSN NAT64 UDP Current Sessions.')
lsnCurNAT64IcmpSessions = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnCurNAT64IcmpSessions.setStatus('current')
if mibBuilder.loadTexts: lsnCurNAT64IcmpSessions.setDescription('Number of LSN NAT64 ICMP Current Sessions.')
lsnNAT64SessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnNAT64SessionsRate.setStatus('current')
if mibBuilder.loadTexts: lsnNAT64SessionsRate.setDescription('Rate at which total LSN NAT64 sessions are opened per second.')
lsnNAT64TcpSessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnNAT64TcpSessionsRate.setStatus('current')
if mibBuilder.loadTexts: lsnNAT64TcpSessionsRate.setDescription('Rate at which total LSN NAT64 sessions are opened per second.')
lsnNAT64UdpSessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnNAT64UdpSessionsRate.setStatus('current')
if mibBuilder.loadTexts: lsnNAT64UdpSessionsRate.setDescription('Rate at which total LSN NAT64 sessions are opened per second.')
lsnNAT64IcmpSessionsRate = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 83, 6, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsnNAT64IcmpSessionsRate.setStatus('current')
if mibBuilder.loadTexts: lsnNAT64IcmpSessionsRate.setDescription('Rate at which total LSN sessions are opened per second.')
nsmcStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84))
mcTotaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTotaudio.setStatus('current')
if mibBuilder.loadTexts: mcTotaudio.setDescription('')
mcTotvideo = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTotvideo.setStatus('current')
if mibBuilder.loadTexts: mcTotvideo.setDescription('')
mcTotother = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTotother.setStatus('current')
if mibBuilder.loadTexts: mcTotother.setDescription('')
mcMsSmthStrmVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcMsSmthStrmVid.setStatus('current')
if mibBuilder.loadTexts: mcMsSmthStrmVid.setDescription('This tells the total number of Microsoft SmoothStreaming videos served by NS')
mcMsSmthStrmVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcMsSmthStrmVidBytes.setStatus('current')
if mibBuilder.loadTexts: mcMsSmthStrmVidBytes.setDescription('This tells the total number of Microsoft SmoothStreaming video bytes served by NS ')
mcMsSmthStrVidpl = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcMsSmthStrVidpl.setStatus('current')
if mibBuilder.loadTexts: mcMsSmthStrVidpl.setDescription('This tells the total number of Microsoft SmoothStreaming playlist served by NS')
mcMsSmthStrmPlVidBytespl = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcMsSmthStrmPlVidBytespl.setStatus('current')
if mibBuilder.loadTexts: mcMsSmthStrmPlVidBytespl.setDescription('This tells the total number of Microsoft SmoothStreaming playlist bytes served by NS ')
mccApleLiveStrmngVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mccApleLiveStrmngVid.setStatus('current')
if mibBuilder.loadTexts: mccApleLiveStrmngVid.setDescription('This tells the total number of AppleLive videos served by NS')
mcAppleLiveStreamingVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcAppleLiveStreamingVidBytes.setStatus('current')
if mibBuilder.loadTexts: mcAppleLiveStreamingVidBytes.setDescription('This tells the total number of AppleLive video bytes served by NS ')
mccAppleLiveStrmngVidpl = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mccAppleLiveStrmngVidpl.setStatus('current')
if mibBuilder.loadTexts: mccAppleLiveStrmngVidpl.setDescription('This tells the total number of AppleLive Playlist served by NS')
mcAppleLiveStreamingPlaylistVidBytespl = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcAppleLiveStreamingPlaylistVidBytespl.setStatus('current')
if mibBuilder.loadTexts: mcAppleLiveStreamingPlaylistVidBytespl.setDescription('This tells the total number of AppleLive Playlist bytes served by NS ')
mcADTSaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcADTSaudio.setStatus('current')
if mibBuilder.loadTexts: mcADTSaudio.setDescription('This tells the total number of ADTS audios served by NS')
mcADTSaudioBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcADTSaudioBytes.setStatus('current')
if mibBuilder.loadTexts: mcADTSaudioBytes.setDescription('This tells the total number of ADTS audio bytes served by NS ')
mcAACaudio = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcAACaudio.setStatus('current')
if mibBuilder.loadTexts: mcAACaudio.setDescription('This tells the total number of AAC audios served by NS')
mcAACaudiobytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcAACaudiobytes.setStatus('current')
if mibBuilder.loadTexts: mcAACaudiobytes.setDescription('This tells the total number of AAC bytes served by NS ')
mcFLVVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcFLVVid.setStatus('current')
if mibBuilder.loadTexts: mcFLVVid.setDescription('This tells the total number of FLV videos served by NS')
mcFLVVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcFLVVidBytes.setStatus('current')
if mibBuilder.loadTexts: mcFLVVidBytes.setDescription('This tells the total number of FLV bytes served by NS ')
mcMP4Vid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcMP4Vid.setStatus('current')
if mibBuilder.loadTexts: mcMP4Vid.setDescription('This tells the total number of MP4 videos served by NS')
mcMP4VidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcMP4VidBytes.setStatus('current')
if mibBuilder.loadTexts: mcMP4VidBytes.setDescription('This tells the total number of MP4 video bytes served by NS ')
mc3PVid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mc3PVid.setStatus('current')
if mibBuilder.loadTexts: mc3PVid.setDescription('This tells the total number of 3GP videos served by NS')
mc3GPVidBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mc3GPVidBytes.setStatus('current')
if mibBuilder.loadTexts: mc3GPVidBytes.setDescription('This tells the total number of 3GP bytes served by NS ')
mcTotResponse = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcTotResponse.setStatus('current')
if mibBuilder.loadTexts: mcTotResponse.setDescription('')
mcAndroid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcAndroid.setStatus('current')
if mibBuilder.loadTexts: mcAndroid.setDescription('Total number of android requests to netscaler')
mcLaptopDesktp = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcLaptopDesktp.setStatus('current')
if mibBuilder.loadTexts: mcLaptopDesktp.setDescription('Total number of laptop/desktop requests to netscaler')
mcIos = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcIos.setStatus('current')
if mibBuilder.loadTexts: mcIos.setDescription('Total number of IOS requests to netscaler')
mcUnidentified = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcUnidentified.setStatus('current')
if mibBuilder.loadTexts: mcUnidentified.setDescription('Total number of unidentified requests to netscaler')
mcOther = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcOther.setStatus('current')
if mibBuilder.loadTexts: mcOther.setDescription('Total number of other mobile device requests to netscaler')
mcYoutubedash = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcYoutubedash.setStatus('current')
if mibBuilder.loadTexts: mcYoutubedash.setDescription('This tells the total number of YouTube DASH served by NS')
mcYoutubedashBytes = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcYoutubedashBytes.setStatus('current')
if mibBuilder.loadTexts: mcYoutubedashBytes.setDescription('This tells the total number of YouTube DASH bytes served by NS ')
mcEncVideo = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEncVideo.setStatus('current')
if mibBuilder.loadTexts: mcEncVideo.setDescription('Total number of encrypted video streams')
mcEncHls = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEncHls.setStatus('current')
if mibBuilder.loadTexts: mcEncHls.setDescription('Total number of encrypted AppleLive video streams')
mcEncDASH = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEncDASH.setStatus('current')
if mibBuilder.loadTexts: mcEncDASH.setDescription('Total number of encrypted Youtube DASH video streams')
mcEncOthStream = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEncOthStream.setStatus('current')
if mibBuilder.loadTexts: mcEncOthStream.setDescription('Total number of non-AppleLive, non-DASH encrypted streams')
mcEncAndroid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEncAndroid.setStatus('current')
if mibBuilder.loadTexts: mcEncAndroid.setDescription('Total number of encrypted video streams requested by Android devices')
mcEncIos = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEncIos.setStatus('current')
if mibBuilder.loadTexts: mcEncIos.setDescription('Total number of encrypted video streams requested by IOS devices')
mcEncOther = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 1, 84, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcEncOther.setStatus('current')
if mibBuilder.loadTexts: mcEncOther.setDescription('Total number of encrypted video streams requested by non-Android and non-IOS devices')
nsSvcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2))
serviceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1), )
if mibBuilder.loadTexts: serviceTable.setStatus('current')
if mibBuilder.loadTexts: serviceTable.setDescription('The netscaler services table')
serviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcServiceName"))
if mibBuilder.loadTexts: serviceEntry.setStatus('current')
if mibBuilder.loadTexts: serviceEntry.setDescription('...')
svcServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcServiceName.setStatus('current')
if mibBuilder.loadTexts: svcServiceName.setDescription('The name of the service.')
svcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIpAddress.setStatus('current')
if mibBuilder.loadTexts: svcIpAddress.setDescription('The ip address at which the service is running.')
svcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPort.setStatus('current')
if mibBuilder.loadTexts: svcPort.setDescription('The port at which the service is running.')
svcServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 4), EntityProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcServiceType.setStatus('current')
if mibBuilder.loadTexts: svcServiceType.setDescription('The protocol type of the service')
svcState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 5), EntityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcState.setStatus('current')
if mibBuilder.loadTexts: svcState.setDescription('Current state of the server. Possible values are UP, DOWN, UNKNOWN, OFS(Out of Service), TROFS(Transition Out of Service), TROFS_DOWN(Down When going Out of Service)')
svcMaxReqPerConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMaxReqPerConn.setStatus('current')
if mibBuilder.loadTexts: svcMaxReqPerConn.setDescription('Maximum requests per connection allowed on this service. ')
svcAvgTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAvgTransactionTime.setStatus('current')
if mibBuilder.loadTexts: svcAvgTransactionTime.setDescription('Average transaction time in microseconds between netscaler and the service behind it.')
svcEstablishedConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEstablishedConn.setStatus('current')
if mibBuilder.loadTexts: svcEstablishedConn.setDescription('Total number of connections in ESTABLISHED state.')
svcActiveConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcActiveConn.setStatus('current')
if mibBuilder.loadTexts: svcActiveConn.setDescription('Number of connections that are currently active. ')
svcSurgeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSurgeCount.setStatus('current')
if mibBuilder.loadTexts: svcSurgeCount.setDescription('Number of requests in the surge queue.')
svcTotalRequestsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalRequestsLow.setStatus('obsolete')
if mibBuilder.loadTexts: svcTotalRequestsLow.setDescription('...OBSOLETE')
svcTotalRequestsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalRequestsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: svcTotalRequestsHigh.setDescription('...OBSOLETE')
svcTotalRequestBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalRequestBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: svcTotalRequestBytesLow.setDescription('...OBSOLETE')
svcTotalRequestBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalRequestBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: svcTotalRequestBytesHigh.setDescription('...OBSOLETE')
svcTotalResponsesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalResponsesLow.setStatus('obsolete')
if mibBuilder.loadTexts: svcTotalResponsesLow.setDescription('...OBSOLETE')
svcTotalResponsesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalResponsesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: svcTotalResponsesHigh.setDescription('...OBSOLETE')
svcTotalResponseBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalResponseBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: svcTotalResponseBytesLow.setDescription('...OBSOLETE')
svcTotalResponseBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalResponseBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: svcTotalResponseBytesHigh.setDescription('...OBSOLETE')
svcTotalPktsRecvdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalPktsRecvdLow.setStatus('obsolete')
if mibBuilder.loadTexts: svcTotalPktsRecvdLow.setDescription('...OBSOLETE')
svcTotalPktsRecvdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalPktsRecvdHigh.setStatus('obsolete')
if mibBuilder.loadTexts: svcTotalPktsRecvdHigh.setDescription('...OBSOLETE')
svcTotalPktsSentLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalPktsSentLow.setStatus('obsolete')
if mibBuilder.loadTexts: svcTotalPktsSentLow.setDescription('...OBSOLETE')
svcTotalPktsSentHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalPktsSentHigh.setStatus('obsolete')
if mibBuilder.loadTexts: svcTotalPktsSentHigh.setDescription('...OBSOLETE')
svcTotalSynsRecvdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalSynsRecvdLow.setStatus('obsolete')
if mibBuilder.loadTexts: svcTotalSynsRecvdLow.setDescription('...OBSOLETE')
svcTotalSynsRecvdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalSynsRecvdHigh.setStatus('obsolete')
if mibBuilder.loadTexts: svcTotalSynsRecvdHigh.setDescription('...OBSOLETE')
svcTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalRequests.setStatus('current')
if mibBuilder.loadTexts: svcTotalRequests.setDescription('Total number of requests received on this service or virtual server. (This applies to HTTP/SSL services and servers.)')
svcTotalRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalRequestBytes.setStatus('current')
if mibBuilder.loadTexts: svcTotalRequestBytes.setDescription('Total number of request bytes received on this service or virtual server.')
svcTotalResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalResponses.setStatus('current')
if mibBuilder.loadTexts: svcTotalResponses.setDescription('Number of responses received on this service or virtual server. (This applies to HTTP/SSL services and servers.)')
svcTotalResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalResponseBytes.setStatus('current')
if mibBuilder.loadTexts: svcTotalResponseBytes.setDescription('Number of response bytes received by this service or virtual server.')
svcTotalPktsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalPktsRecvd.setStatus('current')
if mibBuilder.loadTexts: svcTotalPktsRecvd.setDescription('Total number of packets received by this service or virtual server.')
svcTotalPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalPktsSent.setStatus('current')
if mibBuilder.loadTexts: svcTotalPktsSent.setDescription('Total number of packets sent.')
svcTotalSynsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalSynsRecvd.setStatus('current')
if mibBuilder.loadTexts: svcTotalSynsRecvd.setDescription('Total number of SYN packets received from clients on this service (only when directly accessed) or virtual server.')
svcGslbSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGslbSiteName.setStatus('current')
if mibBuilder.loadTexts: svcGslbSiteName.setDescription('The name of the gslb site on which this service is defined.')
svcAvgSvrTTFB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAvgSvrTTFB.setStatus('current')
if mibBuilder.loadTexts: svcAvgSvrTTFB.setDescription('Average TTFB between the NetScaler appliance and the server.TTFB is the time interval between sending the request packet to a service and receiving the first response from the service')
svctotalJsTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svctotalJsTransactions.setStatus('current')
if mibBuilder.loadTexts: svctotalJsTransactions.setDescription('Total number of javascripts sent to geniune clients.')
svcdosQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdosQDepth.setStatus('current')
if mibBuilder.loadTexts: svcdosQDepth.setDescription('Number of clients waiting currently in priority queue')
svcCurClntConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcCurClntConnections.setStatus('current')
if mibBuilder.loadTexts: svcCurClntConnections.setDescription('Number of current client connections.')
svcRequestRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRequestRate.setStatus('current')
if mibBuilder.loadTexts: svcRequestRate.setDescription('Request rate in requests per second for this service or virtual server.')
svcRxBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRxBytesRate.setStatus('current')
if mibBuilder.loadTexts: svcRxBytesRate.setDescription('Request rate in bytes per second fot this service or virtual server.')
svcTxBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTxBytesRate.setStatus('current')
if mibBuilder.loadTexts: svcTxBytesRate.setDescription('Response rate in bytes per second for this service or virtual server.')
svcSynfloodRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSynfloodRate.setStatus('current')
if mibBuilder.loadTexts: svcSynfloodRate.setDescription('Rate of unacknowledged SYN packets for this service or virtual server.')
svcTicksSinceLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 47), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTicksSinceLastStateChange.setStatus('current')
if mibBuilder.loadTexts: svcTicksSinceLastStateChange.setDescription('Time (in 10 milliseconds) since the last state change.')
svcTotalClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalClients.setStatus('current')
if mibBuilder.loadTexts: svcTotalClients.setDescription('Total number of established client connections.')
svcTotalServers = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalServers.setStatus('current')
if mibBuilder.loadTexts: svcTotalServers.setDescription('Total number of established server connections.')
svcMaxClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMaxClients.setStatus('current')
if mibBuilder.loadTexts: svcMaxClients.setDescription('Maximum open connections allowed on this service.')
svcActiveTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcActiveTransactions.setStatus('current')
if mibBuilder.loadTexts: svcActiveTransactions.setDescription('Number of active transactions handled by this service. (Including those in the surge queue.)\n    Active Transaction means number of transactions currently served by the server including those waiting in the SurgeQ')
svcServiceFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 54), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcServiceFullName.setStatus('current')
if mibBuilder.loadTexts: svcServiceFullName.setDescription('The name of the service.')
svcInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 55), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcInetAddressType.setStatus('current')
if mibBuilder.loadTexts: svcInetAddressType.setDescription('The address type of svcInetAddress')
svcInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 56), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcInetAddress.setStatus('current')
if mibBuilder.loadTexts: svcInetAddress.setDescription('The Internet address at which the service is running.')
svcTdId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTdId.setStatus('current')
if mibBuilder.loadTexts: svcTdId.setDescription('Traffic Domain ID of this service.')
svcGslbState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 58), EntityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGslbState.setStatus('current')
if mibBuilder.loadTexts: svcGslbState.setDescription('Effective state of the gslb service. Possible values are UP, DOWN, UNKNOWN, OFS(Out of Service), TROFS(Transition Out of Service), TROFS_DOWN(Down When going Out of Service)')
svcCurSrvrConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 1, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcCurSrvrConnections.setStatus('current')
if mibBuilder.loadTexts: svcCurSrvrConnections.setDescription('Number of current connections to the actual servers behind the virtual server.')
serverTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2), )
if mibBuilder.loadTexts: serverTable.setStatus('current')
if mibBuilder.loadTexts: serverTable.setDescription('The servers table.')
serverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "serverName"))
if mibBuilder.loadTexts: serverEntry.setStatus('current')
if mibBuilder.loadTexts: serverEntry.setDescription('...')
serverName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverName.setStatus('current')
if mibBuilder.loadTexts: serverName.setDescription('The name of the server.')
serverIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIpAddress.setStatus('current')
if mibBuilder.loadTexts: serverIpAddress.setDescription('The IP address of the server.')
serverState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 3), EntityState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverState.setStatus('current')
if mibBuilder.loadTexts: serverState.setDescription('The state of the server.')
serverDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverDelay.setStatus('current')
if mibBuilder.loadTexts: serverDelay.setDescription('Specifies time in seconds after which all services in this server are brought down.')
serverFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverFullName.setStatus('current')
if mibBuilder.loadTexts: serverFullName.setDescription('The name of the server.')
serverInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverInetAddressType.setStatus('current')
if mibBuilder.loadTexts: serverInetAddressType.setDescription('The address type of serverInetAddress')
serverInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverInetAddress.setStatus('current')
if mibBuilder.loadTexts: serverInetAddress.setDescription('The Internet address of the server.')
serverTdId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTdId.setStatus('current')
if mibBuilder.loadTexts: serverTdId.setDescription('Traffic Domain ID of this server.')
serviceScpolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3), )
if mibBuilder.loadTexts: serviceScpolicyTable.setStatus('current')
if mibBuilder.loadTexts: serviceScpolicyTable.setDescription('The service sure connect policy relationship table')
serviceScpolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcServiceName"), (0, "NS-ROOT-MIB", "scPolicyName"))
if mibBuilder.loadTexts: serviceScpolicyEntry.setStatus('current')
if mibBuilder.loadTexts: serviceScpolicyEntry.setDescription('...')
svcscpolicyPrimaryIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyPrimaryIPAddress.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyPrimaryIPAddress.setDescription('The IP address of the service or virtual server to which the policy is bound.')
svcscpolicyPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyPrimaryPort.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyPrimaryPort.setDescription('The port of the service or virtual server to which the policy is bound.')
svcscpolicyDesIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyDesIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: svcscpolicyDesIpAddress.setDescription('...OBSOLETE')
svcscpolicyDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyDestPort.setStatus('obsolete')
if mibBuilder.loadTexts: svcscpolicyDestPort.setDescription('...OBSOLETE')
svcscpolicyAvgServerTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyAvgServerTransactionTime.setStatus('obsolete')
if mibBuilder.loadTexts: svcscpolicyAvgServerTransactionTime.setDescription('...OBSOLETE')
svcscpolicyTotClientTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyTotClientTransaction.setStatus('obsolete')
if mibBuilder.loadTexts: svcscpolicyTotClientTransaction.setDescription('...OBSOLETE')
svcscpolicyTotOpenConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyTotOpenConn.setStatus('obsolete')
if mibBuilder.loadTexts: svcscpolicyTotOpenConn.setDescription('...OBSOLETE')
svcscpolicydesIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicydesIpAddress.setStatus('current')
if mibBuilder.loadTexts: svcscpolicydesIpAddress.setDescription('IP address of the destination service.')
svcscpolicydestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicydestPort.setStatus('current')
if mibBuilder.loadTexts: svcscpolicydestPort.setDescription('Port number of the destination service.')
svcscpolicyavgServerTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyavgServerTransactionTime.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyavgServerTransactionTime.setDescription('Average server transaction time in seconds for this SureConnect Policy.')
svcscpolicytotClientTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicytotClientTransaction.setStatus('current')
if mibBuilder.loadTexts: svcscpolicytotClientTransaction.setDescription('Total number of client transactions processed by this SureConnect policy.')
svcscpolicytotOpenConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicytotOpenConn.setStatus('current')
if mibBuilder.loadTexts: svcscpolicytotOpenConn.setDescription('Current number of open connections to the servers matching this policy.')
svcscpolicyscPhysicalServiceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscPhysicalServiceIP.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscPhysicalServiceIP.setDescription('IP address of the service for which these statistics are maintained.')
svcscpolicyscPhysicalServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscPhysicalServicePort.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscPhysicalServicePort.setDescription('Port of the service for which these statistics are maintained.')
svcscpolicyscCurrentWaitingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscCurrentWaitingTime.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscCurrentWaitingTime.setDescription('Value of the currently estimated waiting time in seconds for the configured URL.')
svcscpolicyscCurrentClientConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscCurrentClientConnections.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscCurrentClientConnections.setDescription('Number of clients currently  allowed a server connection by this SureConnect policy.')
svcscpolicyscTotalClientConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalClientConnections.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscTotalClientConnections.setDescription('Total number of clients that were allowed a server connection by this SureConnect policy.')
svcscpolicyscTotalServerConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalServerConnections.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscTotalServerConnections.setDescription('Total number of server connections that were established through this SureConnect policy.')
svcscpolicyscTotalRequestsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscTotalRequestsReceived.setDescription('Total number of requests received by this SureConnect policy.')
svcscpolicyscTotalRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalRequestBytes.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscTotalRequestBytes.setDescription('Total number of request bytes received by this SureConnect policy.')
svcscpolicyscTotalResponsesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalResponsesReceived.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscTotalResponsesReceived.setDescription('Total number of server responses received by this SureConnect policy.')
svcscpolicyscTotalResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalResponseBytes.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscTotalResponseBytes.setDescription('Total number of response bytes received by this SureConnect policy.')
svcscpolicyscCurrentSurgeQClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscCurrentSurgeQClients.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscCurrentSurgeQClients.setDescription('Number of clients currently matching  the SureConnect policy, but are in the surge queue.')
svcscpolicyscCurrentWaitingClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscCurrentWaitingClients.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscCurrentWaitingClients.setDescription('Current number of SureConnect priority clients that are waiting for a server connection.')
svcscpolicyscTotalServerTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalServerTransactions.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscTotalServerTransactions.setDescription('Number of 200 OK responses received from the web server by this SureConnect policy.')
svcscpolicyscTotalServerTTFBTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalServerTTFBTransactions.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscTotalServerTTFBTransactions.setDescription('Number of Time-To-First-Byte transcations from the web server for this SureConnect policy.')
svcscpolicyscTotalServerTTLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalServerTTLB.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscTotalServerTTLB.setDescription('Server Time-To-Last-Byte in seconds calculated for this SureConnect policy.')
svcscpolicyscTotalClientTTLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalClientTTLB.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscTotalClientTTLB.setDescription('Client Time-To-Last-Byte in seconds calculated for this SureConnect policy.')
svcscpolicyscTotalServerTTFB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscTotalServerTTFB.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscTotalServerTTFB.setDescription('Server Time-To-First-Byte in seconds calculated for this SureConnect policy.')
svcscpolicyscAverageClientTTLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscAverageClientTTLB.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscAverageClientTTLB.setDescription('Average value of the client Time-To-Last-Byte in seconds for this SureConnect policy.')
svcscpolicyscAverageServerTTFB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 3, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcscpolicyscAverageServerTTFB.setStatus('current')
if mibBuilder.loadTexts: svcscpolicyscAverageServerTTFB.setDescription('Average value of the server Time-To-First-Byte in  seconds for this SureConnect policy.')
serviceAdvanceSslConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4), )
if mibBuilder.loadTexts: serviceAdvanceSslConfigTable.setStatus('current')
if mibBuilder.loadTexts: serviceAdvanceSslConfigTable.setDescription('The service advance SSL configuration')
serviceAdvanceSslConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcServiceName"))
if mibBuilder.loadTexts: serviceAdvanceSslConfigEntry.setStatus('current')
if mibBuilder.loadTexts: serviceAdvanceSslConfigEntry.setDescription('...')
svcSslDH = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 1), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslDH.setStatus('current')
if mibBuilder.loadTexts: svcSslDH.setDescription('Whether DH is enabled/disabled.')
svcSslDHCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslDHCount.setStatus('current')
if mibBuilder.loadTexts: svcSslDHCount.setDescription('The DH refresh count to re-generate public/private key.')
svcSslDHFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslDHFilePath.setStatus('current')
if mibBuilder.loadTexts: svcSslDHFilePath.setDescription('The DH file path name.')
svcSsleRSA = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 4), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSsleRSA.setStatus('current')
if mibBuilder.loadTexts: svcSsleRSA.setDescription('The ephimeral RSA support for service.')
svcSsleRSACount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSsleRSACount.setStatus('current')
if mibBuilder.loadTexts: svcSsleRSACount.setDescription('The eRSA refresh count to re-generate RSA temporary key.')
svcSslv2Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 6), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslv2Protocol.setStatus('current')
if mibBuilder.loadTexts: svcSslv2Protocol.setDescription('The support for SSLv2 protocol for service.')
svcSslv3Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 7), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslv3Protocol.setStatus('current')
if mibBuilder.loadTexts: svcSslv3Protocol.setDescription('The support for SSLv3 protocol for service.')
svcSslTLSv1Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 8), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslTLSv1Protocol.setStatus('current')
if mibBuilder.loadTexts: svcSslTLSv1Protocol.setDescription('The support for  TLSv1 protocol for service.')
svcSslRedirectSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 9), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslRedirectSupport.setStatus('current')
if mibBuilder.loadTexts: svcSslRedirectSupport.setDescription('The support for ssl redirect for service.')
svcSslClearTextPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslClearTextPort.setStatus('current')
if mibBuilder.loadTexts: svcSslClearTextPort.setDescription('The clear text port on the backend webserver.')
serviceCipherBindingTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 5), )
if mibBuilder.loadTexts: serviceCipherBindingTable.setStatus('current')
if mibBuilder.loadTexts: serviceCipherBindingTable.setDescription('The service cipher bindings')
serviceCipherBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 5, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcServiceName"), (0, "NS-ROOT-MIB", "svcSslCipherBindName"))
if mibBuilder.loadTexts: serviceCipherBindingEntry.setStatus('current')
if mibBuilder.loadTexts: serviceCipherBindingEntry.setDescription('...')
svcSslCipherBindName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslCipherBindName.setStatus('current')
if mibBuilder.loadTexts: svcSslCipherBindName.setDescription('The cipher name bound to this service.')
svcSslCipherBindDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSslCipherBindDesc.setStatus('current')
if mibBuilder.loadTexts: svcSslCipherBindDesc.setDescription('The Cipher description.')
serviceGlobalStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6))
svcCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcCount.setStatus('current')
if mibBuilder.loadTexts: svcCount.setDescription('Number of services defined on this NetScaler appliance.')
serverCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCount.setStatus('current')
if mibBuilder.loadTexts: serverCount.setDescription('Number of servers defined on this NetScaler appliance.')
svcgroupCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcgroupCount.setStatus('current')
if mibBuilder.loadTexts: svcgroupCount.setDescription('Number of service groups defined on this NetScaler appliance.')
svcgroupmemCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcgroupmemCount.setStatus('current')
if mibBuilder.loadTexts: svcgroupmemCount.setDescription('Number of service group members defined on this NetScaler appliance.')
syssvcCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syssvcCount.setStatus('current')
if mibBuilder.loadTexts: syssvcCount.setDescription('Number of services configured on this NetScaler appliance.')
sysupsvcCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysupsvcCount.setStatus('current')
if mibBuilder.loadTexts: sysupsvcCount.setDescription('Number of configured services which are up on this NetScaler appliance.')
sysupsvcitmCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysupsvcitmCount.setStatus('current')
if mibBuilder.loadTexts: sysupsvcitmCount.setDescription('Number of configured service items which are up on this NetScaler appliance.')
serviceGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7), )
if mibBuilder.loadTexts: serviceGroupMemberTable.setStatus('current')
if mibBuilder.loadTexts: serviceGroupMemberTable.setDescription('The service group member bindings')
serviceGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcGrpMemberGroupName"), (0, "NS-ROOT-MIB", "svcGrpMemberName"))
if mibBuilder.loadTexts: serviceGroupMemberEntry.setStatus('current')
if mibBuilder.loadTexts: serviceGroupMemberEntry.setDescription('...')
svcGrpMemberGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberGroupName.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberGroupName.setDescription('The name of the service Group')
svcGrpMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberName.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberName.setDescription('The name of the service group member')
svcGrpMemberPrimaryIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberPrimaryIPAddress.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberPrimaryIPAddress.setDescription('The IP address on which the service is running.')
svcGrpMemberPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberPrimaryPort.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberPrimaryPort.setDescription('The port on which the service is running.')
svcGrpMemberServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 5), EntityProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberServiceType.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberServiceType.setDescription('The service type of this service.Possible values are ADNS, DNS, MYSQL, RTSP, SSL_DIAMETER, ADNS_TCP, DNS_TCP, NNTP, SIP_UDP, SSL_TCP, ANY, FTP, RADIUS, SNMP, TCP, DHCPRA, HTTP, RDP, SSL, TFTP, DIAMETER, MSSQL, RPCSVR, SSL_BRIDGE, UDP')
svcGrpMemberState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 6), EntityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberState.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberState.setDescription('Current state of the server. Possible values are UP, DOWN, UNKNOWN, OFS(Out of Service), TROFS(Transition Out of Service), TROFS_DOWN(Down When going Out of Service)')
svcGrpMemberWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcGrpMemberWeight.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberWeight.setDescription('The weight of the service group member tied to the vserver.')
svcGrpMemberMaxReqPerConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberMaxReqPerConn.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberMaxReqPerConn.setDescription('Maximum requests per connection allowed on this service. ')
svcGrpMemberAvgTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberAvgTransactionTime.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberAvgTransactionTime.setDescription('Average transaction time in microseconds between netscaler and the service behind it.')
svcGrpMemberEstablishedConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberEstablishedConn.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberEstablishedConn.setDescription('Total number of connections in ESTABLISHED state.')
svcGrpMemberActiveConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberActiveConn.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberActiveConn.setDescription('Number of connections that are currently active. ')
svcGrpMemberSurgeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberSurgeCount.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberSurgeCount.setDescription('Number of requests in the surge queue.')
svcGrpMemberTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTotalRequests.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberTotalRequests.setDescription('Total number of requests received on this service or virtual server. (This applies to HTTP/SSL services and servers.)')
svcGrpMemberTotalRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTotalRequestBytes.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberTotalRequestBytes.setDescription('Total number of request bytes received on this service or virtual server.')
svcGrpMemberTotalResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTotalResponses.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberTotalResponses.setDescription('Number of responses received on this service or virtual server. (This applies to HTTP/SSL services and servers.)')
svcGrpMemberTotalResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTotalResponseBytes.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberTotalResponseBytes.setDescription('Number of response bytes received by this service or virtual server.')
svcGrpMemberTotalPktsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTotalPktsRecvd.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberTotalPktsRecvd.setDescription('Total number of packets received by this service or virtual server.')
svcGrpMemberTotalPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTotalPktsSent.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberTotalPktsSent.setDescription('Total number of packets sent.')
svcGrpMemberTotalSynsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTotalSynsRecvd.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberTotalSynsRecvd.setDescription('Total number of SYN packets received from clients on this service (only when directly accessed) or virtual server.')
svcGrpMemberGslbSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberGslbSiteName.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberGslbSiteName.setDescription('The name of the gslb site on which this service is defined.')
svcGrpMemberAvgSvrTTFB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberAvgSvrTTFB.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberAvgSvrTTFB.setDescription('Average TTFB between the NetScaler appliance and the server.TTFB is the time interval between sending the request packet to a service and receiving the first response from the service')
svcGrpMembertotalJsTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMembertotalJsTransactions.setStatus('current')
if mibBuilder.loadTexts: svcGrpMembertotalJsTransactions.setDescription('Total number of javascripts sent to geniune clients.')
svcGrpMemberdosQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberdosQDepth.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberdosQDepth.setDescription('Number of clients waiting currently in priority queue')
svcGrpMemberCurClntConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberCurClntConnections.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberCurClntConnections.setDescription('Number of current client connections.')
svcGrpMemberRequestRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberRequestRate.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberRequestRate.setDescription('Request rate in requests per second for this service or virtual server.')
svcGrpMemberRxBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberRxBytesRate.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberRxBytesRate.setDescription('Request rate in bytes per second fot this service or virtual server.')
svcGrpMemberTxBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTxBytesRate.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberTxBytesRate.setDescription('Response rate in bytes per second for this service or virtual server.')
svcGrpMemberSynfloodRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberSynfloodRate.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberSynfloodRate.setDescription('Rate of unacknowledged SYN packets for this service or virtual server.')
svcGrpMemberTicksSinceLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 31), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTicksSinceLastStateChange.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberTicksSinceLastStateChange.setDescription('Time (in 10 milliseconds) since the last state change.')
svcGrpMemberGroupFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberGroupFullName.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberGroupFullName.setDescription('The name of the service Group')
svcGrpMemberFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberFullName.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberFullName.setDescription('The name of the service group member')
svcGrpMemberPrimaryInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 34), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberPrimaryInetAddressType.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberPrimaryInetAddressType.setDescription('The address type of svcGrpMemberPrimaryInetAddress')
svcGrpMemberPrimaryInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 35), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberPrimaryInetAddress.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberPrimaryInetAddress.setDescription('The Internet address at which the service is running.')
svcGrpMemberServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberServerName.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberServerName.setDescription('The name of the server of the servicegroup member')
svcGrpMemberTdId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 7, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcGrpMemberTdId.setStatus('current')
if mibBuilder.loadTexts: svcGrpMemberTdId.setDescription('Traffic Domain ID of this service group member.')
serviceDospolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8), )
if mibBuilder.loadTexts: serviceDospolicyTable.setStatus('current')
if mibBuilder.loadTexts: serviceDospolicyTable.setDescription('The service DOS policy relationship table')
serviceDospolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcServiceName"), (0, "NS-ROOT-MIB", "dosPolicyName"))
if mibBuilder.loadTexts: serviceDospolicyEntry.setStatus('current')
if mibBuilder.loadTexts: serviceDospolicyEntry.setDescription('...')
svcdospolicydosTotJSSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosTotJSSent.setStatus('current')
if mibBuilder.loadTexts: svcdospolicydosTotJSSent.setDescription('Total number of DoS JavaScript transactions performed for this policy.')
svcdospolicydosTotJSBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosTotJSBytesSent.setStatus('current')
if mibBuilder.loadTexts: svcdospolicydosTotJSBytesSent.setDescription('Total number of DoS JavaScript bytes sent for this policy.')
svcdospolicydosTotJSRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosTotJSRefused.setStatus('current')
if mibBuilder.loadTexts: svcdospolicydosTotJSRefused.setDescription('Number of times the DoS JavaScript was not sent because the set JavaScript rate was not met for this policy.')
svcdospolicydosTotNonGetPostRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosTotNonGetPostRequests.setStatus('current')
if mibBuilder.loadTexts: svcdospolicydosTotNonGetPostRequests.setDescription('Number of non-GET and non-POST requests for which DOS JavaScript was sent.')
svcdospolicydosPhysicalServiceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosPhysicalServiceIP.setStatus('current')
if mibBuilder.loadTexts: svcdospolicydosPhysicalServiceIP.setDescription('IP address of the service to which this policy is bound.')
svcdospolicydosPhysicalServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosPhysicalServicePort.setStatus('current')
if mibBuilder.loadTexts: svcdospolicydosPhysicalServicePort.setDescription('Port address of the service to which this policy is bound.')
svcdospolicydosCurrentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosCurrentQueueSize.setStatus('current')
if mibBuilder.loadTexts: svcdospolicydosCurrentQueueSize.setDescription('Current queue size of the server to which this policy is bound.')
svcdospolicydosCurrentJSRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosCurrentJSRate.setStatus('current')
if mibBuilder.loadTexts: svcdospolicydosCurrentJSRate.setDescription('Current rate at which JavaScript is being sent in response to client requests.')
svcdospolicydosTotValidClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosTotValidClients.setStatus('current')
if mibBuilder.loadTexts: svcdospolicydosTotValidClients.setDescription('Total number of valid DoS cookies received for this policy.')
svcdospolicydosCurServerRespRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcdospolicydosCurServerRespRate.setStatus('current')
if mibBuilder.loadTexts: svcdospolicydosCurServerRespRate.setDescription('Current rate at which the server to which this policy is bound is responding.')
monitorMemberTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9), )
if mibBuilder.loadTexts: monitorMemberTable.setStatus('current')
if mibBuilder.loadTexts: monitorMemberTable.setDescription('The monitor table')
monitorMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1), ).setIndexNames((0, "NS-ROOT-MIB", "monitorName"))
if mibBuilder.loadTexts: monitorMemberEntry.setStatus('current')
if mibBuilder.loadTexts: monitorMemberEntry.setDescription('...')
monitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorName.setStatus('current')
if mibBuilder.loadTexts: monitorName.setDescription('Monitor name')
responseTimeoutThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: responseTimeoutThreshold.setStatus('current')
if mibBuilder.loadTexts: responseTimeoutThreshold.setDescription('Monitor Response timeout threshold, above which snmp trap will be fired.It is expressed in milliseconds.')
monitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 3), MonitorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorType.setStatus('current')
if mibBuilder.loadTexts: monitorType.setDescription('Type of the monitor.')
monitorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorInterval.setStatus('current')
if mibBuilder.loadTexts: monitorInterval.setDescription('Interval between monitoring probes.It is expressed in milliseconds.')
monitorResponseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorResponseTimeout.setStatus('current')
if mibBuilder.loadTexts: monitorResponseTimeout.setDescription('Maximum time a monitor probe can take to respond.It is expressed in milliseconds.')
monitorDowntime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDowntime.setStatus('current')
if mibBuilder.loadTexts: monitorDowntime.setDescription('Time for which the monitor probes are not fired once it is down.It is expressed in milliseconds.')
monitorRetrys = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRetrys.setStatus('current')
if mibBuilder.loadTexts: monitorRetrys.setDescription('Number of failed attempts to make server DOWN.')
destinationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destinationIP.setStatus('current')
if mibBuilder.loadTexts: destinationIP.setDescription('Destination IP address that is used for monitoring.')
destinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destinationPort.setStatus('current')
if mibBuilder.loadTexts: destinationPort.setDescription('Destination port that is used for monitoring.')
drtmDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drtmDeviation.setStatus('current')
if mibBuilder.loadTexts: drtmDeviation.setDescription('Tolerable Deviation of response time for DRTM.It is expressed in milliseconds.')
drtmActiveMonitors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drtmActiveMonitors.setStatus('current')
if mibBuilder.loadTexts: drtmActiveMonitors.setDescription('Number of monitors contributing to DRTM average.')
drtmCumResponseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drtmCumResponseTimeout.setStatus('current')
if mibBuilder.loadTexts: drtmCumResponseTimeout.setDescription('Total cumulative response time of all active DRTM monitors.It is expressed in milliseconds.')
alarmProbeFailedRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmProbeFailedRetries.setStatus('current')
if mibBuilder.loadTexts: alarmProbeFailedRetries.setDescription('Number of failed attempts to generate snmp trap.')
destinationInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destinationInetAddressType.setStatus('current')
if mibBuilder.loadTexts: destinationInetAddressType.setDescription('The address type of destinationInetAddress')
destinationInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 9, 1, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destinationInetAddress.setStatus('current')
if mibBuilder.loadTexts: destinationInetAddress.setDescription('Destination Internet address that is used for monitoring.')
monServiceMemberTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10), )
if mibBuilder.loadTexts: monServiceMemberTable.setStatus('current')
if mibBuilder.loadTexts: monServiceMemberTable.setDescription('The moninfo table, bindings of monitors to services.')
monServiceMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1), ).setIndexNames((0, "NS-ROOT-MIB", "monServiceName"), (0, "NS-ROOT-MIB", "monitorName"))
if mibBuilder.loadTexts: monServiceMemberEntry.setStatus('current')
if mibBuilder.loadTexts: monServiceMemberEntry.setDescription('...')
monServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monServiceName.setStatus('current')
if mibBuilder.loadTexts: monServiceName.setDescription('The name of the service to which the monitor is bound.')
monitorRTO = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRTO.setStatus('current')
if mibBuilder.loadTexts: monitorRTO.setDescription('Response time in micro-seconds. (Calculated using LRTM.)')
monitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 3), MonitorState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorState.setStatus('current')
if mibBuilder.loadTexts: monitorState.setDescription('State of the specified monitor.  Possible states are UP, OUT OF SERVICE, DOWN, GOING OUT OF SERVICE, and DOWN WHEN GOING OUT OF SERVICE.')
drtmRTO = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drtmRTO.setStatus('current')
if mibBuilder.loadTexts: drtmRTO.setDescription('Monitor probe time in milli-seconds for DRTM monitors. (Round trip time)')
drtmLearningProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drtmLearningProbes.setStatus('current')
if mibBuilder.loadTexts: drtmLearningProbes.setDescription('Current number of pending DRTM monitoring probes.')
monitorCurFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorCurFailedCount.setStatus('current')
if mibBuilder.loadTexts: monitorCurFailedCount.setDescription('Current, continuous monitoring probe failure count.  (Reset on success only.)')
monitorWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorWeight.setStatus('current')
if mibBuilder.loadTexts: monitorWeight.setDescription('Weight assigned to the monitor binding.')
alarmMonrespto = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 8), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmMonrespto.setStatus('current')
if mibBuilder.loadTexts: alarmMonrespto.setDescription('This is the response time taken for the current monitor probe.')
monitorProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorProbes.setStatus('current')
if mibBuilder.loadTexts: monitorProbes.setDescription('Number of monitoring probes sent.')
monitorFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailed.setStatus('current')
if mibBuilder.loadTexts: monitorFailed.setDescription('Number of failed monitoring probes.')
monitorMaxClient = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorMaxClient.setStatus('current')
if mibBuilder.loadTexts: monitorMaxClient.setDescription('Number of monitoring probes that were not sent due to MaxClients.')
monitorFailedCon = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedCon.setStatus('current')
if mibBuilder.loadTexts: monitorFailedCon.setDescription('Number of failed monitoring probes due to failed connections.')
monitorFailedCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedCode.setStatus('current')
if mibBuilder.loadTexts: monitorFailedCode.setDescription('Number of failed monitoring probes due to improper response code.')
monitorFailedStr = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedStr.setStatus('current')
if mibBuilder.loadTexts: monitorFailedStr.setDescription('Number of failed monitoring probes due to invalid response string.')
monitorFailedTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedTimeout.setStatus('current')
if mibBuilder.loadTexts: monitorFailedTimeout.setDescription('Number of failed monitoring probes due to timeout.')
monitorFailedSend = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedSend.setStatus('current')
if mibBuilder.loadTexts: monitorFailedSend.setDescription('Number of failed monitoring probes due to inability to send the data.')
monitorFailedFTP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedFTP.setStatus('current')
if mibBuilder.loadTexts: monitorFailedFTP.setDescription('Number of failed monitoring probes due to ftp protocol violation.')
monitorFailedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedPort.setStatus('current')
if mibBuilder.loadTexts: monitorFailedPort.setDescription('Number of failed monitoring probes due to port unreachable response.')
monitorFailedResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedResponse.setStatus('current')
if mibBuilder.loadTexts: monitorFailedResponse.setDescription('Number of failed monitoring probes due to invalid response.')
monitorFailedId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFailedId.setStatus('current')
if mibBuilder.loadTexts: monitorFailedId.setDescription('Number of failed monitoring probes due to response id mismatch.')
monitorProbesNoChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorProbesNoChange.setStatus('current')
if mibBuilder.loadTexts: monitorProbesNoChange.setDescription('Number of monitoring probes which did not change the state.')
monitorResponseTimeoutThreshExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorResponseTimeoutThreshExceed.setStatus('current')
if mibBuilder.loadTexts: monitorResponseTimeoutThreshExceed.setDescription(' Number of times the response time has exceeded the configured threshold.')
serviceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 11), )
if mibBuilder.loadTexts: serviceGroupTable.setStatus('current')
if mibBuilder.loadTexts: serviceGroupTable.setDescription('The netscaler services group table')
serviceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 11, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcgrpSvcGroupName"))
if mibBuilder.loadTexts: serviceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: serviceGroupEntry.setDescription('...')
svcgrpSvcGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 11, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcgrpSvcGroupName.setStatus('current')
if mibBuilder.loadTexts: svcgrpSvcGroupName.setDescription('The name of the service Group')
svcgrpSvcGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 11, 1, 2), EntityProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcgrpSvcGroupType.setStatus('current')
if mibBuilder.loadTexts: svcgrpSvcGroupType.setDescription('The type of the service Group.')
svcgrpSvcGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 11, 1, 3), ServiceGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcgrpSvcGroupState.setStatus('current')
if mibBuilder.loadTexts: svcgrpSvcGroupState.setDescription('The state of the service Group')
svcgrpSvcGroupFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 11, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcgrpSvcGroupFullName.setStatus('current')
if mibBuilder.loadTexts: svcgrpSvcGroupFullName.setDescription('The full name of the service Group')
svcgrpTdId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 2, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcgrpTdId.setStatus('current')
if mibBuilder.loadTexts: svcgrpTdId.setDescription('Traffic Domain ID of this service group.')
nsVserverGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3))
vserverTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1), )
if mibBuilder.loadTexts: vserverTable.setStatus('current')
if mibBuilder.loadTexts: vserverTable.setDescription('The vservers table')
vserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"))
if mibBuilder.loadTexts: vserverEntry.setStatus('current')
if mibBuilder.loadTexts: vserverEntry.setDescription('...')
vsvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrName.setStatus('current')
if mibBuilder.loadTexts: vsvrName.setDescription('The name of the vserver')
vsvrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrIpAddress.setStatus('current')
if mibBuilder.loadTexts: vsvrIpAddress.setDescription('IP address of the vserver')
vsvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrPort.setStatus('current')
if mibBuilder.loadTexts: vsvrPort.setDescription('the port of the vserver')
vsvrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 4), EntityProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrType.setStatus('current')
if mibBuilder.loadTexts: vsvrType.setDescription('Protocol associated with the vserver')
vsvrState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 5), EntityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrState.setStatus('current')
if mibBuilder.loadTexts: vsvrState.setDescription('Current state of the server. Possible values are UP, DOWN, UNKNOWN, OFS(Out of Service), TROFS(Transition Out of Service), TROFS_DOWN(Down When going Out of Service)')
vsvrMaxReqPerConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrMaxReqPerConn.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrMaxReqPerConn.setDescription('...OBSOLETE')
vsvrCurClntConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurClntConnections.setStatus('current')
if mibBuilder.loadTexts: vsvrCurClntConnections.setDescription('Number of current client connections.')
vsvrCurSrvrConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurSrvrConnections.setStatus('current')
if mibBuilder.loadTexts: vsvrCurSrvrConnections.setDescription('Number of current connections to the actual servers behind the virtual server.')
vsvrAvgTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrAvgTransactionTime.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrAvgTransactionTime.setDescription('...OBSOLETE')
vsvrSurgeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSurgeCount.setStatus('current')
if mibBuilder.loadTexts: vsvrSurgeCount.setDescription('Number of requests in the surge queue.')
vsvrTotalRequestsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalRequestsLow.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrTotalRequestsLow.setDescription('...OBSOLETE')
vsvrTotalRequestsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalRequestsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrTotalRequestsHigh.setDescription('...OBSOLETE')
vsvrTotalRequestBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalRequestBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrTotalRequestBytesLow.setDescription('...OBSOLETE')
vsvrTotalRequestBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalRequestBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrTotalRequestBytesHigh.setDescription('...OBSOLETE')
vsvrTotalResponsesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalResponsesLow.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrTotalResponsesLow.setDescription('...OBSOLETE')
vsvrTotalResponsesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalResponsesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrTotalResponsesHigh.setDescription('...OBSOLETE')
vsvrTotalResponseBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalResponseBytesLow.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrTotalResponseBytesLow.setDescription('...OBSOLETE')
vsvrTotalResponseBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalResponseBytesHigh.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrTotalResponseBytesHigh.setDescription('...OBSOLETE')
vsvrTotalPktsRecvdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalPktsRecvdLow.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrTotalPktsRecvdLow.setDescription('...OBSOLETE')
vsvrTotalPktsRecvdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalPktsRecvdHigh.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrTotalPktsRecvdHigh.setDescription('...OBSOLETE')
vsvrTotalPktsSentLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalPktsSentLow.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrTotalPktsSentLow.setDescription('...OBSOLETE')
vsvrTotalPktsSentHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalPktsSentHigh.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrTotalPktsSentHigh.setDescription('...OBSOLETE')
vsvrTotalSynsRecvdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalSynsRecvdLow.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrTotalSynsRecvdLow.setDescription('...OBSOLETE')
vsvrTotalSynsRecvdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalSynsRecvdHigh.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrTotalSynsRecvdHigh.setDescription('...OBSOLETE')
vsvrTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalRequests.setStatus('current')
if mibBuilder.loadTexts: vsvrTotalRequests.setDescription('Total number of requests received on this service or virtual server. (This applies to HTTP/SSL services and servers.)')
vsvrTotalRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalRequestBytes.setStatus('current')
if mibBuilder.loadTexts: vsvrTotalRequestBytes.setDescription('Total number of request bytes received on this service or virtual server.')
vsvrTotalResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalResponses.setStatus('current')
if mibBuilder.loadTexts: vsvrTotalResponses.setDescription('Number of responses received on this service or virtual server. (This applies to HTTP/SSL services and servers.)')
vsvrTotalResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalResponseBytes.setStatus('current')
if mibBuilder.loadTexts: vsvrTotalResponseBytes.setDescription('Number of response bytes received by this service or virtual server.')
vsvrTotalPktsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalPktsRecvd.setStatus('current')
if mibBuilder.loadTexts: vsvrTotalPktsRecvd.setDescription('Total number of packets received by this service or virtual server.')
vsvrTotalPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalPktsSent.setStatus('current')
if mibBuilder.loadTexts: vsvrTotalPktsSent.setDescription('Total number of packets sent.')
vsvrTotalSynsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalSynsRecvd.setStatus('current')
if mibBuilder.loadTexts: vsvrTotalSynsRecvd.setDescription('Total number of SYN packets received from clients on this service (only when directly accessed) or virtual server.')
vsvrCurServicesDown = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurServicesDown.setStatus('current')
if mibBuilder.loadTexts: vsvrCurServicesDown.setDescription("The current number of services which are bound to this vserver and are in the state 'down'.")
vsvrCurServicesUnKnown = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurServicesUnKnown.setStatus('current')
if mibBuilder.loadTexts: vsvrCurServicesUnKnown.setDescription("The current number of services which are bound to this vserver and are in the state 'unKnown'.")
vsvrCurServicesOutOfSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurServicesOutOfSvc.setStatus('current')
if mibBuilder.loadTexts: vsvrCurServicesOutOfSvc.setDescription("The current number of services which are bound to this vserver and are in the state 'outOfService'.")
vsvrCurServicesTransToOutOfSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurServicesTransToOutOfSvc.setStatus('current')
if mibBuilder.loadTexts: vsvrCurServicesTransToOutOfSvc.setDescription("The current number of services which are bound to this vserver and are in the state 'transitionToOutOfService'.")
vsvrCurServicesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurServicesUp.setStatus('current')
if mibBuilder.loadTexts: vsvrCurServicesUp.setDescription("The current number of services which are bound to this vserver and are in the state 'up'.")
vsvrTotMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotMiss.setStatus('current')
if mibBuilder.loadTexts: vsvrTotMiss.setDescription('Total vserver misses')
vsvrRequestRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrRequestRate.setStatus('current')
if mibBuilder.loadTexts: vsvrRequestRate.setDescription('Request rate in requests per second for this service or virtual server.')
vsvrRxBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrRxBytesRate.setStatus('current')
if mibBuilder.loadTexts: vsvrRxBytesRate.setDescription('Request rate in bytes per second fot this service or virtual server.')
vsvrTxBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTxBytesRate.setStatus('current')
if mibBuilder.loadTexts: vsvrTxBytesRate.setDescription('Response rate in bytes per second for this service or virtual server.')
vsvrSynfloodRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSynfloodRate.setStatus('current')
if mibBuilder.loadTexts: vsvrSynfloodRate.setDescription('Rate of unacknowledged SYN packets for this service or virtual server.')
vsvrIp6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 47), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrIp6Address.setStatus('current')
if mibBuilder.loadTexts: vsvrIp6Address.setDescription('IPv6 address of the v server')
vsvrTotHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotHits.setStatus('current')
if mibBuilder.loadTexts: vsvrTotHits.setDescription('Total vserver hits')
vsvrTotSpillOvers = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotSpillOvers.setStatus('current')
if mibBuilder.loadTexts: vsvrTotSpillOvers.setDescription('Number of times vserver experienced spill over.')
vsvrTotalClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalClients.setStatus('current')
if mibBuilder.loadTexts: vsvrTotalClients.setDescription('Total number of established client connections.')
vsvrClientConnOpenRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 58), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrClientConnOpenRate.setStatus('current')
if mibBuilder.loadTexts: vsvrClientConnOpenRate.setDescription('Rate at which connections are opened for this virtual server per second.')
vsvrFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 59), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrFullName.setStatus('current')
if mibBuilder.loadTexts: vsvrFullName.setDescription('The name of the vserver')
vsvrCurSslVpnUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurSslVpnUsers.setStatus('current')
if mibBuilder.loadTexts: vsvrCurSslVpnUsers.setDescription('Number of aaa sessions on this vserver')
vsvrTotalServicesBound = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalServicesBound.setStatus('current')
if mibBuilder.loadTexts: vsvrTotalServicesBound.setDescription('The current number of services which are bound to this vserver.')
vsvrHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrHealth.setStatus('current')
if mibBuilder.loadTexts: vsvrHealth.setDescription('The percentage of UP services bound to this vserver.')
vsvrTicksSinceLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 63), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTicksSinceLastStateChange.setStatus('current')
if mibBuilder.loadTexts: vsvrTicksSinceLastStateChange.setDescription('Time (in 10 milliseconds) since the last state change.')
vsvrEntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 64), VServerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrEntityType.setStatus('current')
if mibBuilder.loadTexts: vsvrEntityType.setDescription('The type of the vserver.')
vsvrTotalServers = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTotalServers.setStatus('current')
if mibBuilder.loadTexts: vsvrTotalServers.setDescription('Total number of established server connections.')
vsvrActiveActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 66), ActiveActiveState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrActiveActiveState.setStatus('current')
if mibBuilder.loadTexts: vsvrActiveActiveState.setDescription('The state of the vserver based on ActiveActive configuration.')
vsvrInvalidRequestResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrInvalidRequestResponse.setStatus('current')
if mibBuilder.loadTexts: vsvrInvalidRequestResponse.setDescription('Number invalid requests/responses on this vserver')
vsvrInvalidRequestResponseDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrInvalidRequestResponseDropped.setStatus('current')
if mibBuilder.loadTexts: vsvrInvalidRequestResponseDropped.setDescription('Number invalid requests/responses dropped on this vserver')
vsvrTdId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrTdId.setStatus('current')
if mibBuilder.loadTexts: vsvrTdId.setDescription('Traffic Domain of the vserver')
vsvrSoThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSoThreshold.setStatus('current')
if mibBuilder.loadTexts: vsvrSoThreshold.setDescription('Spill Over Threshold set on the VServer.')
vsvrEstablishedConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrEstablishedConn.setStatus('current')
if mibBuilder.loadTexts: vsvrEstablishedConn.setDescription('Number of client connections in ESTABLISHED state.')
vsvrCurTotalVpnUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurTotalVpnUsers.setStatus('current')
if mibBuilder.loadTexts: vsvrCurTotalVpnUsers.setDescription('Number of total users on this vserver')
vsvrCurMptcpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurMptcpSessions.setStatus('current')
if mibBuilder.loadTexts: vsvrCurMptcpSessions.setDescription('Current Multipath TCP sessions')
vsvrCursubflowConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCursubflowConn.setStatus('current')
if mibBuilder.loadTexts: vsvrCursubflowConn.setDescription('Current Multipath TCP subflows')
vsvrCurEffState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 1, 1, 75), EntityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrCurEffState.setStatus('current')
if mibBuilder.loadTexts: vsvrCurEffState.setDescription('Current Effective state of vserver')
vserverServiceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2), )
if mibBuilder.loadTexts: vserverServiceTable.setStatus('current')
if mibBuilder.loadTexts: vserverServiceTable.setDescription('The vserver service relationship table')
vserverServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"), (0, "NS-ROOT-MIB", "vsvrServiceName"))
if mibBuilder.loadTexts: vserverServiceEntry.setStatus('current')
if mibBuilder.loadTexts: vserverServiceEntry.setDescription('...')
serviceHitsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceHitsLow.setStatus('obsolete')
if mibBuilder.loadTexts: serviceHitsLow.setDescription('...OBSOLETE')
serviceHitsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceHitsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: serviceHitsHigh.setDescription('...OBSOLETE')
servicePersistentHitsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servicePersistentHitsLow.setStatus('obsolete')
if mibBuilder.loadTexts: servicePersistentHitsLow.setDescription('...OBSOLETE')
servicePersistentHitsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servicePersistentHitsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: servicePersistentHitsHigh.setDescription('...OBSOLETE')
vsvrServiceHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrServiceHits.setStatus('current')
if mibBuilder.loadTexts: vsvrServiceHits.setDescription('Number of times that the service has been provided.')
servicePersistentHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servicePersistentHits.setStatus('current')
if mibBuilder.loadTexts: servicePersistentHits.setDescription('Total number of persistent hits.')
serviceWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceWeight.setStatus('current')
if mibBuilder.loadTexts: serviceWeight.setDescription('The weight of the service tied to the vserver.')
vsvrServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrServiceName.setStatus('current')
if mibBuilder.loadTexts: vsvrServiceName.setDescription('The name of the service to which the vserver is bound.')
vsvrServiceFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrServiceFullName.setStatus('current')
if mibBuilder.loadTexts: vsvrServiceFullName.setDescription('The Full name of the service to which the vserver is bound.')
vserverFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverFullName.setStatus('current')
if mibBuilder.loadTexts: vserverFullName.setDescription('The full name of the vserver.')
vsvrServiceEntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 2, 1, 11), SvcEntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrServiceEntityType.setStatus('current')
if mibBuilder.loadTexts: vsvrServiceEntityType.setDescription('The entity type of the service: service group member or service.')
vserverCspolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3), )
if mibBuilder.loadTexts: vserverCspolicyTable.setStatus('current')
if mibBuilder.loadTexts: vserverCspolicyTable.setDescription('The vserver content switching policy relationship table for PE CS Policy')
vserverCspolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"), (0, "NS-ROOT-MIB", "cspolicyName"))
if mibBuilder.loadTexts: vserverCspolicyEntry.setStatus('current')
if mibBuilder.loadTexts: vserverCspolicyEntry.setDescription('...')
cspolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspolicyName.setStatus('current')
if mibBuilder.loadTexts: cspolicyName.setDescription('This represents the name of the CS PE policy bound to content switching vserver ')
cspolicyDestVserverName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspolicyDestVserverName.setStatus('current')
if mibBuilder.loadTexts: cspolicyDestVserverName.setDescription('This represents the name of the destination vserver to which the request has to be directed to if the content switching policy evaluates to true.')
cspolicyHitsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspolicyHitsLow.setStatus('obsolete')
if mibBuilder.loadTexts: cspolicyHitsLow.setDescription('...OBSOLETE')
cspolicyHitsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspolicyHitsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: cspolicyHitsHigh.setDescription('...OBSOLETE')
cspolicyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspolicyHits.setStatus('current')
if mibBuilder.loadTexts: cspolicyHits.setDescription('The number of hits on this content switching policy.')
csIndexVserverFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIndexVserverFullName.setStatus('current')
if mibBuilder.loadTexts: csIndexVserverFullName.setDescription('The full name of the cs vserver to which this policy belongs.')
vserverCrpolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 4), )
if mibBuilder.loadTexts: vserverCrpolicyTable.setStatus('current')
if mibBuilder.loadTexts: vserverCrpolicyTable.setDescription('The vserver cache redirection policy relationship table')
vserverCrpolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 4, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"), (0, "NS-ROOT-MIB", "crpolicyName"))
if mibBuilder.loadTexts: vserverCrpolicyEntry.setStatus('current')
if mibBuilder.loadTexts: vserverCrpolicyEntry.setDescription('...')
crpolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crpolicyName.setStatus('current')
if mibBuilder.loadTexts: crpolicyName.setDescription('This represents the name of the policy bound to cache-redirection vserver ')
crpolicyHitsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crpolicyHitsLow.setStatus('obsolete')
if mibBuilder.loadTexts: crpolicyHitsLow.setDescription('...OBSOLETE')
crpolicyHitsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crpolicyHitsHigh.setStatus('obsolete')
if mibBuilder.loadTexts: crpolicyHitsHigh.setDescription('...OBSOLETE')
crpolicyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crpolicyHits.setStatus('current')
if mibBuilder.loadTexts: crpolicyHits.setDescription('Hits on the cache redirection policy.')
crIndexVserverFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crIndexVserverFullName.setStatus('current')
if mibBuilder.loadTexts: crIndexVserverFullName.setDescription('The full name of the cr vserver to which this policy belongs.')
vserverGlobalStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 5))
curConfigVservers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curConfigVservers.setStatus('current')
if mibBuilder.loadTexts: curConfigVservers.setDescription('Total number of vservers configured on the NetScaler.')
vsvrBindCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrBindCount.setStatus('current')
if mibBuilder.loadTexts: vsvrBindCount.setDescription('Number of virtual server bindings on this NetScaler appliance.')
vsvrSvcGrpBindCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSvcGrpBindCount.setStatus('current')
if mibBuilder.loadTexts: vsvrSvcGrpBindCount.setDescription('Number of virtual server, service group bindings on this NetScaler appliance.')
curConfigLbVservers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curConfigLbVservers.setStatus('current')
if mibBuilder.loadTexts: curConfigLbVservers.setDescription('Total number of LB vservers configured on the NetScaler.')
curConfigGslbVservers = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curConfigGslbVservers.setStatus('current')
if mibBuilder.loadTexts: curConfigGslbVservers.setDescription('Total number of GSLB vservers configured on the NetScaler.')
totSpilloverCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 5, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totSpilloverCount.setStatus('current')
if mibBuilder.loadTexts: totSpilloverCount.setDescription('Total count of spillovers.')
lbvserverTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6), )
if mibBuilder.loadTexts: lbvserverTable.setStatus('current')
if mibBuilder.loadTexts: lbvserverTable.setDescription('Table for LB specific configuration')
lbvserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"))
if mibBuilder.loadTexts: lbvserverEntry.setStatus('current')
if mibBuilder.loadTexts: lbvserverEntry.setDescription('...')
lbvsvrLBMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6, 1, 1), LbPolicy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbvsvrLBMethod.setStatus('current')
if mibBuilder.loadTexts: lbvsvrLBMethod.setDescription('The Policy used for Load Balancing.')
lbvsvrPersistanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6, 1, 2), PersistanceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbvsvrPersistanceType.setStatus('current')
if mibBuilder.loadTexts: lbvsvrPersistanceType.setDescription('The type of persistence used.')
lbvsvrPersistenceTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbvsvrPersistenceTimeOut.setStatus('current')
if mibBuilder.loadTexts: lbvsvrPersistenceTimeOut.setDescription('The timeout set for persistence.')
lbvsvrActiveConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbvsvrActiveConn.setStatus('current')
if mibBuilder.loadTexts: lbvsvrActiveConn.setDescription('Number of connections that are currently active. ')
lbvsvrAvgSvrTTFB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbvsvrAvgSvrTTFB.setStatus('current')
if mibBuilder.loadTexts: lbvsvrAvgSvrTTFB.setDescription('Average TTFB between the NetScaler appliance and the server.TTFB is the time interval between sending the request packet to a service and receiving the first response from the service')
lbvsvrRdpCookieParsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbvsvrRdpCookieParsed.setStatus('current')
if mibBuilder.loadTexts: lbvsvrRdpCookieParsed.setDescription('Number of times MSTS RDP Cookie got parsed on this vserver')
vserverPqpolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7), )
if mibBuilder.loadTexts: vserverPqpolicyTable.setStatus('current')
if mibBuilder.loadTexts: vserverPqpolicyTable.setDescription('The vserver priority queuing policy relationship table')
vserverPqpolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"), (0, "NS-ROOT-MIB", "pqName"))
if mibBuilder.loadTexts: vserverPqpolicyEntry.setStatus('current')
if mibBuilder.loadTexts: vserverPqpolicyEntry.setDescription('...')
pqpolicyTotClientTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicyTotClientTransactionTime.setStatus('obsolete')
if mibBuilder.loadTexts: pqpolicyTotClientTransactionTime.setDescription('...OBSOLETE')
pqpolicyTotClientTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicyTotClientTransactions.setStatus('obsolete')
if mibBuilder.loadTexts: pqpolicyTotClientTransactions.setDescription('...OBSOLETE')
pqpolicyDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicyDropped.setStatus('obsolete')
if mibBuilder.loadTexts: pqpolicyDropped.setDescription('...OBSOLETE')
pqpolicyQdepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicyQdepth.setStatus('obsolete')
if mibBuilder.loadTexts: pqpolicyQdepth.setDescription('...OBSOLETE')
pqpolicytotClientTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicytotClientTransactionTime.setStatus('current')
if mibBuilder.loadTexts: pqpolicytotClientTransactionTime.setDescription('Total client transaction time in micro-seconds for this priority queuing policy. ')
pqpolicytotClientTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicytotClientTransactions.setStatus('current')
if mibBuilder.loadTexts: pqpolicytotClientTransactions.setDescription('Total number of client transactions for this priority queuing policy.')
pqpolicypqDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqDropped.setStatus('current')
if mibBuilder.loadTexts: pqpolicypqDropped.setDescription('Total number of dropped transactions for this priority queuing policy.')
pqpolicypqQdepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqQdepth.setStatus('current')
if mibBuilder.loadTexts: pqpolicypqQdepth.setDescription('Number of clients waiting currently for this priority queuing policy.')
pqpolicypqAvgClientTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqAvgClientTransactionTime.setStatus('current')
if mibBuilder.loadTexts: pqpolicypqAvgClientTransactionTime.setDescription('Average time taken by a priority queuing client to complete its transaction for this priority queuing policy.')
pqpolicypqVserverIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqVserverIP.setStatus('current')
if mibBuilder.loadTexts: pqpolicypqVserverIP.setDescription('IP address of the virtual server to which this priority queuing policy is bound.')
pqpolicypqVserverPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqVserverPort.setStatus('current')
if mibBuilder.loadTexts: pqpolicypqVserverPort.setDescription('Port number of the virtual server to which this priority queuing policy is bound.')
pqpolicypqCurrentClientConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqCurrentClientConnections.setStatus('current')
if mibBuilder.loadTexts: pqpolicypqCurrentClientConnections.setDescription('Current number of server connections established for serving clients for this priority queuing policy.')
pqpolicypqTotQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqTotQueueDepth.setStatus('current')
if mibBuilder.loadTexts: pqpolicypqTotQueueDepth.setDescription('Total number of waiting clients for this priority queuing policy.')
pqpolicypqTotClientConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqTotClientConnections.setStatus('current')
if mibBuilder.loadTexts: pqpolicypqTotClientConnections.setDescription('Total number of server connections established for serving clients for this priority queuing policy.')
pqpolicypqTotQueueWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqTotQueueWaitTime.setStatus('current')
if mibBuilder.loadTexts: pqpolicypqTotQueueWaitTime.setDescription('Amount of time spent by priority queuing clients waiting in the priority queue.')
pqpolicypqTotAvgQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqTotAvgQueueDepth.setStatus('current')
if mibBuilder.loadTexts: pqpolicypqTotAvgQueueDepth.setDescription('Average number of waiting clients for this priority queuing policy.')
pqpolicypqTotAvgQueueWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqTotAvgQueueWaitTime.setStatus('current')
if mibBuilder.loadTexts: pqpolicypqTotAvgQueueWaitTime.setDescription('Average wait time for clients for this priority queuing policy.')
pqpolicytotClientTransactionTimems = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicytotClientTransactionTimems.setStatus('current')
if mibBuilder.loadTexts: pqpolicytotClientTransactionTimems.setDescription('Total client transaction time in microsec for this priority queuing policy.')
pqpolicypqAvgClientTransactionTimems = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 7, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pqpolicypqAvgClientTransactionTimems.setStatus('current')
if mibBuilder.loadTexts: pqpolicypqAvgClientTransactionTimems.setDescription('Average time taken by a priority queuing client to complete its transaction for this  priority queuing policy.')
vserverScpolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8), )
if mibBuilder.loadTexts: vserverScpolicyTable.setStatus('current')
if mibBuilder.loadTexts: vserverScpolicyTable.setDescription('The vserver sure connect policy relationship table')
vserverScpolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1), ).setIndexNames((0, "NS-ROOT-MIB", "svcServiceName"), (0, "NS-ROOT-MIB", "scPolicyName"))
if mibBuilder.loadTexts: vserverScpolicyEntry.setStatus('current')
if mibBuilder.loadTexts: vserverScpolicyEntry.setDescription('...')
vsvrscpolicyPrimaryIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyPrimaryIPAddress.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyPrimaryIPAddress.setDescription('The IP address of the service or virtual server to which the policy is bound.')
vsvrscpolicyPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyPrimaryPort.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyPrimaryPort.setDescription('The port of the service or virtual server to which the policy is bound.')
vsvrscpolicyDesIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyDesIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrscpolicyDesIpAddress.setDescription('...OBSOLETE')
vsvrscpolicyDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyDestPort.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrscpolicyDestPort.setDescription('...OBSOLETE')
vsvrscpolicyAvgServerTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyAvgServerTransactionTime.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrscpolicyAvgServerTransactionTime.setDescription('...OBSOLETE')
vsvrscpolicyTotClientTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyTotClientTransaction.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrscpolicyTotClientTransaction.setDescription('...OBSOLETE')
vsvrscpolicyTotOpenConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyTotOpenConn.setStatus('obsolete')
if mibBuilder.loadTexts: vsvrscpolicyTotOpenConn.setDescription('...OBSOLETE')
vsvrscpolicydesIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicydesIpAddress.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicydesIpAddress.setDescription('IP address of the destination service.')
vsvrscpolicydestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicydestPort.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicydestPort.setDescription('Port number of the destination service.')
vsvrscpolicyavgServerTransactionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyavgServerTransactionTime.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyavgServerTransactionTime.setDescription('Average server transaction time in seconds for this SureConnect Policy.')
vsvrscpolicytotClientTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicytotClientTransaction.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicytotClientTransaction.setDescription('Total number of client transactions processed by this SureConnect policy.')
vsvrscpolicytotOpenConn = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicytotOpenConn.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicytotOpenConn.setDescription('Current number of open connections to the servers matching this policy.')
vsvrscpolicyscPhysicalServiceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscPhysicalServiceIP.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscPhysicalServiceIP.setDescription('IP address of the service for which these statistics are maintained.')
vsvrscpolicyscPhysicalServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscPhysicalServicePort.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscPhysicalServicePort.setDescription('Port of the service for which these statistics are maintained.')
vsvrscpolicyscCurrentWaitingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscCurrentWaitingTime.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscCurrentWaitingTime.setDescription('Value of the currently estimated waiting time in seconds for the configured URL.')
vsvrscpolicyscCurrentClientConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscCurrentClientConnections.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscCurrentClientConnections.setDescription('Number of clients currently  allowed a server connection by this SureConnect policy.')
vsvrscpolicyscTotalClientConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalClientConnections.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscTotalClientConnections.setDescription('Total number of clients that were allowed a server connection by this SureConnect policy.')
vsvrscpolicyscTotalServerConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalServerConnections.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscTotalServerConnections.setDescription('Total number of server connections that were established through this SureConnect policy.')
vsvrscpolicyscTotalRequestsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscTotalRequestsReceived.setDescription('Total number of requests received by this SureConnect policy.')
vsvrscpolicyscTotalRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalRequestBytes.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscTotalRequestBytes.setDescription('Total number of request bytes received by this SureConnect policy.')
vsvrscpolicyscTotalResponsesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalResponsesReceived.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscTotalResponsesReceived.setDescription('Total number of server responses received by this SureConnect policy.')
vsvrscpolicyscTotalResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalResponseBytes.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscTotalResponseBytes.setDescription('Total number of response bytes received by this SureConnect policy.')
vsvrscpolicyscCurrentSurgeQClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscCurrentSurgeQClients.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscCurrentSurgeQClients.setDescription('Number of clients currently matching  the SureConnect policy, but are in the surge queue.')
vsvrscpolicyscCurrentWaitingClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscCurrentWaitingClients.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscCurrentWaitingClients.setDescription('Current number of SureConnect priority clients that are waiting for a server connection.')
vsvrscpolicyscTotalServerTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalServerTransactions.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscTotalServerTransactions.setDescription('Number of 200 OK responses received from the web server by this SureConnect policy.')
vsvrscpolicyscTotalServerTTFBTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalServerTTFBTransactions.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscTotalServerTTFBTransactions.setDescription('Number of Time-To-First-Byte transcations from the web server for this SureConnect policy.')
vsvrscpolicyscTotalServerTTLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalServerTTLB.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscTotalServerTTLB.setDescription('Server Time-To-Last-Byte in seconds calculated for this SureConnect policy.')
vsvrscpolicyscTotalClientTTLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalClientTTLB.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscTotalClientTTLB.setDescription('Client Time-To-Last-Byte in seconds calculated for this SureConnect policy.')
vsvrscpolicyscTotalServerTTFB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscTotalServerTTFB.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscTotalServerTTFB.setDescription('Server Time-To-First-Byte in seconds calculated for this SureConnect policy.')
vsvrscpolicyscAverageClientTTLB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscAverageClientTTLB.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscAverageClientTTLB.setDescription('Average value of the client Time-To-Last-Byte in seconds for this SureConnect policy.')
vsvrscpolicyscAverageServerTTFB = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 8, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrscpolicyscAverageServerTTFB.setStatus('current')
if mibBuilder.loadTexts: vsvrscpolicyscAverageServerTTFB.setDescription('Average value of the server Time-To-First-Byte in  seconds for this SureConnect policy.')
vserverAdvanceSslConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9), )
if mibBuilder.loadTexts: vserverAdvanceSslConfigTable.setStatus('current')
if mibBuilder.loadTexts: vserverAdvanceSslConfigTable.setDescription('The vserver advance SSL configuration')
vserverAdvanceSslConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"))
if mibBuilder.loadTexts: vserverAdvanceSslConfigEntry.setStatus('current')
if mibBuilder.loadTexts: vserverAdvanceSslConfigEntry.setDescription('...')
vsvrSslDH = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 1), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslDH.setStatus('current')
if mibBuilder.loadTexts: vsvrSslDH.setDescription('Whether DH is enabled/disabled.')
vsvrSslDHCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslDHCount.setStatus('current')
if mibBuilder.loadTexts: vsvrSslDHCount.setDescription('The DH refresh count to re-generate public/private key.')
vsvrSslDHFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslDHFilePath.setStatus('current')
if mibBuilder.loadTexts: vsvrSslDHFilePath.setDescription('The DH file path name.')
vsvrSsleRSA = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 4), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSsleRSA.setStatus('current')
if mibBuilder.loadTexts: vsvrSsleRSA.setDescription('The ephimeral RSA support for service.')
vsvrSsleRSACount = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSsleRSACount.setStatus('current')
if mibBuilder.loadTexts: vsvrSsleRSACount.setDescription('The eRSA refresh count to re-generate RSA temporary key.')
vsvrSslv2Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 6), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslv2Protocol.setStatus('current')
if mibBuilder.loadTexts: vsvrSslv2Protocol.setDescription('The support for SSLv2 protocol for service.')
vsvrSslv3Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 7), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslv3Protocol.setStatus('current')
if mibBuilder.loadTexts: vsvrSslv3Protocol.setDescription('The support for SSLv3 protocol for service.')
vsvrSslTLSv1Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 8), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslTLSv1Protocol.setStatus('current')
if mibBuilder.loadTexts: vsvrSslTLSv1Protocol.setDescription('The support for  TLSv1 protocol for service.')
vsvrSslRedirectSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 9), AdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslRedirectSupport.setStatus('current')
if mibBuilder.loadTexts: vsvrSslRedirectSupport.setDescription('The support for ssl redirect for service.')
vsvrSslClearTextPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslClearTextPort.setStatus('current')
if mibBuilder.loadTexts: vsvrSslClearTextPort.setDescription('The clear text port on the backend webserver.')
vserverCipherBindingTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 10), )
if mibBuilder.loadTexts: vserverCipherBindingTable.setStatus('current')
if mibBuilder.loadTexts: vserverCipherBindingTable.setDescription('The vserver cipher bindings table')
vserverCipherBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 10, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"), (0, "NS-ROOT-MIB", "vsvrSslCipherBindName"))
if mibBuilder.loadTexts: vserverCipherBindingEntry.setStatus('current')
if mibBuilder.loadTexts: vserverCipherBindingEntry.setDescription('...')
vsvrSslCipherBindName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 10, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslCipherBindName.setStatus('current')
if mibBuilder.loadTexts: vsvrSslCipherBindName.setDescription('The cipher name bound to this service.')
vsvrSslCipherBindDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 10, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvrSslCipherBindDesc.setStatus('current')
if mibBuilder.loadTexts: vsvrSslCipherBindDesc.setDescription('The Cipher description.')
vserverCsPiPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 11), )
if mibBuilder.loadTexts: vserverCsPiPolicyTable.setStatus('current')
if mibBuilder.loadTexts: vserverCsPiPolicyTable.setDescription('The vserver content switching policy relationship table for PI CS Policy')
vserverCsPiPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 11, 1), ).setIndexNames((0, "NS-ROOT-MIB", "vsvrName"), (0, "NS-ROOT-MIB", "csPipolicyName"))
if mibBuilder.loadTexts: vserverCsPiPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: vserverCsPiPolicyEntry.setDescription('...')
csPipolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 11, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPipolicyName.setStatus('current')
if mibBuilder.loadTexts: csPipolicyName.setDescription('This represents the name of the CS PI policy bound to content switching vserver ')
csPipolicyDestVserverName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPipolicyDestVserverName.setStatus('current')
if mibBuilder.loadTexts: csPipolicyDestVserverName.setDescription('This represents the name of the destination vserver to which the request has to be directed to if the content switching policy evaluates to true.')
piPolicyBindingHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 11, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piPolicyBindingHits.setStatus('current')
if mibBuilder.loadTexts: piPolicyBindingHits.setDescription('Number of hits on the policy on this binding')
csPiIndexVserverFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 11, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPiIndexVserverFullName.setStatus('current')
if mibBuilder.loadTexts: csPiIndexVserverFullName.setDescription('The full name of the cs vserver to which this policy belongs.')
cspolicyActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 4, 1, 3, 11, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspolicyActionName.setStatus('current')
if mibBuilder.loadTexts: cspolicyActionName.setDescription('The name of the CS PI policy action.')
nsSnmpEventsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10))
snmpTrapVarBindOidsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2))
alarmHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 1), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmHighThreshold.setStatus('current')
if mibBuilder.loadTexts: alarmHighThreshold.setDescription('This is the high threshold value configured for this alarm. When this threshold is crossed an SNMP alarm is generated.')
alarmNormalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 2), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmNormalThreshold.setStatus('current')
if mibBuilder.loadTexts: alarmNormalThreshold.setDescription('This is the normal threshold configured for this alarm which triggers the return-to-normal alarm.')
entityName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: entityName.setStatus('current')
if mibBuilder.loadTexts: entityName.setDescription('This represents the name of the entity whose state has changed.')
nsUserName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 4), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsUserName.setStatus('current')
if mibBuilder.loadTexts: nsUserName.setDescription('This represents the name of the system user.')
configurationCmd = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 5), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: configurationCmd.setStatus('current')
if mibBuilder.loadTexts: configurationCmd.setDescription('This represents the configuartion command that was issued.')
authorizationStatus = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 6), AuthorizationStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: authorizationStatus.setStatus('current')
if mibBuilder.loadTexts: authorizationStatus.setDescription('This represents the authorization status for an attempted configuration change.')
commandExecutionStatus = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 7), CommandExecutionStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: commandExecutionStatus.setStatus('current')
if mibBuilder.loadTexts: commandExecutionStatus.setDescription('This represents the command execution status for the attempted configuration change.')
unackSynCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 8), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: unackSynCount.setStatus('current')
if mibBuilder.loadTexts: unackSynCount.setDescription('The number of un-acknowledged SYNs NetScaler has received in the past synFlood time-interval.')
alarmLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 9), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmLowThreshold.setStatus('current')
if mibBuilder.loadTexts: alarmLowThreshold.setDescription('This is the low threshold value configured for this alarm. When this threshold is crossed an SNMP alarm is generated.')
alarmProbeFailedErrorString = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 10), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmProbeFailedErrorString.setStatus('current')
if mibBuilder.loadTexts: alarmProbeFailedErrorString.setDescription('This string represents the error occured on the last monitor probe failure.')
alarmVipRhiIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 11), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmVipRhiIpAddr.setStatus('current')
if mibBuilder.loadTexts: alarmVipRhiIpAddr.setDescription('This represents the VIP whose RHI state has changed.')
alarmVipRhiState = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 12), EntityState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmVipRhiState.setStatus('current')
if mibBuilder.loadTexts: alarmVipRhiState.setDescription('This represents the changed RHI state of the VIP.')
alarmRateLmtThresholdExceeded = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 13), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmRateLmtThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: alarmRateLmtThresholdExceeded.setDescription('This specifies the name of the rate limit identifier that exceeded the threshold.')
ipAddressGathered = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 14), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipAddressGathered.setStatus('current')
if mibBuilder.loadTexts: ipAddressGathered.setDescription('This specifies the list of ip addresses that may have been gathered during the expression evaluation.')
stringComputed = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 15), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stringComputed.setStatus('current')
if mibBuilder.loadTexts: stringComputed.setDescription('This contains the string computed during the expression evaluation.')
alarmEntityCurState = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 16), EntityState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmEntityCurState.setStatus('current')
if mibBuilder.loadTexts: alarmEntityCurState.setDescription('This represents the state of vserver, physicalservice or servicegroup.')
sysHealthPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 17), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sysHealthPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: sysHealthPowerSupplyStatus.setDescription('This text represents the status of power supply unit')
alarmCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 18), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmCurrentValue.setStatus('current')
if mibBuilder.loadTexts: alarmCurrentValue.setDescription('This is the current value of the entity when high or normal threshold trap is sent.')
alarmVipRhiInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 19), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmVipRhiInetAddressType.setStatus('current')
if mibBuilder.loadTexts: alarmVipRhiInetAddressType.setDescription('The address type of alarmVipRhiInetAddress')
alarmVipRhiInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 20), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmVipRhiInetAddress.setStatus('current')
if mibBuilder.loadTexts: alarmVipRhiInetAddress.setDescription('This represents the VIP whose RHI state has changed.')
alarmVsvrOldName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 21), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmVsvrOldName.setStatus('obsolete')
if mibBuilder.loadTexts: alarmVsvrOldName.setDescription('...OBSOLETE')
alarmVsvrNewName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 22), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmVsvrNewName.setStatus('obsolete')
if mibBuilder.loadTexts: alarmVsvrNewName.setDescription('...OBSOLETE')
nsClientIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 23), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsClientIPAddr.setStatus('current')
if mibBuilder.loadTexts: nsClientIPAddr.setDescription('This represents the IP Address of the machine trying to access / connected to Netscaler.')
ipConflictAddr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 24), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipConflictAddr.setStatus('current')
if mibBuilder.loadTexts: ipConflictAddr.setDescription('The IP configured in netscaler conflicting in the network.')
appfwLogMsg = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 25), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: appfwLogMsg.setStatus('current')
if mibBuilder.loadTexts: appfwLogMsg.setDescription('This represents the log message of appfw check violation.')
dnskeyName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 26), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dnskeyName.setStatus('current')
if mibBuilder.loadTexts: dnskeyName.setDescription('The name of the DNS key that is due for expiry.')
dnskeyTimeToExpire = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 27), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dnskeyTimeToExpire.setStatus('current')
if mibBuilder.loadTexts: dnskeyTimeToExpire.setDescription('The amount of time for the key to expire')
dnskeyUnitsOfExpiry = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 28), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dnskeyUnitsOfExpiry.setStatus('current')
if mibBuilder.loadTexts: dnskeyUnitsOfExpiry.setDescription('the units of the time of expiry')
entityNewName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 29), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: entityNewName.setStatus('current')
if mibBuilder.loadTexts: entityNewName.setDescription('This represents the entity newName after name was changed.')
entityOldName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 30), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: entityOldName.setStatus('current')
if mibBuilder.loadTexts: entityOldName.setDescription('This represents the entity Name before name was changed.')
platformRateLimitPacketDropCount = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 31), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: platformRateLimitPacketDropCount.setStatus('current')
if mibBuilder.loadTexts: platformRateLimitPacketDropCount.setDescription('This counter has the number of packets dropped due to platform rate limiting since the last check.')
haLicenseMatchState = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 32), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: haLicenseMatchState.setStatus('current')
if mibBuilder.loadTexts: haLicenseMatchState.setDescription('the state of HA License check')
sslCardStatusMsg = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 33), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sslCardStatusMsg.setStatus('current')
if mibBuilder.loadTexts: sslCardStatusMsg.setDescription('This represents the interpretation details of sslCardStatus.')
callHomeUploadEventStatusMsg = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 34), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: callHomeUploadEventStatusMsg.setStatus('current')
if mibBuilder.loadTexts: callHomeUploadEventStatusMsg.setDescription('This represents the status of CallHome Upload Event.')
oldCCOIP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 35), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldCCOIP.setStatus('current')
if mibBuilder.loadTexts: oldCCOIP.setDescription('This represents the old Configuration Coordinator IP.')
newCCOIP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 36), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: newCCOIP.setStatus('current')
if mibBuilder.loadTexts: newCCOIP.setDescription('This represents the new Configuration Coordinator IP.')
oldOVS = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 37), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldOVS.setStatus('current')
if mibBuilder.loadTexts: oldOVS.setDescription('This represents the old cluster Operational View Set.')
newOVS = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 38), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: newOVS.setStatus('current')
if mibBuilder.loadTexts: newOVS.setDescription('This represents the new Cluster Operational View Set.')
qosdVersion = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 39), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: qosdVersion.setStatus('current')
if mibBuilder.loadTexts: qosdVersion.setDescription('This counter tells the QOSD version')
brVersion = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 40), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: brVersion.setStatus('current')
if mibBuilder.loadTexts: brVersion.setDescription('This counter tells the BR version')
sslChipName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 41), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sslChipName.setStatus('current')
if mibBuilder.loadTexts: sslChipName.setDescription('This represents the name of a Crypto device .')
vrid = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 42), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vrid.setStatus('current')
if mibBuilder.loadTexts: vrid.setDescription('This represents the VRID.')
vridBoundVIP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 43), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vridBoundVIP.setStatus('current')
if mibBuilder.loadTexts: vridBoundVIP.setDescription('This represents the VRID bound VIP.')
newVridPriority = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 44), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: newVridPriority.setStatus('current')
if mibBuilder.loadTexts: newVridPriority.setDescription('This represents the new priority of VRID')
oldVridPriority = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 45), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldVridPriority.setStatus('obsolete')
if mibBuilder.loadTexts: oldVridPriority.setDescription('This object has been obsoleted. This was wrongly added assuming that vridStatChange trap will also send old VRID priority, but it wont. It will send effective VRID priority')
effectiveVridPriority = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 46), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: effectiveVridPriority.setStatus('current')
if mibBuilder.loadTexts: effectiveVridPriority.setDescription('This represents the effective priority of VRID')
dstip = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 47), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dstip.setStatus('current')
if mibBuilder.loadTexts: dstip.setDescription('This is the dstip for which the port allocation has failed.')
platformLicensedThroughput = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 48), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: platformLicensedThroughput.setStatus('current')
if mibBuilder.loadTexts: platformLicensedThroughput.setDescription('This represents the platform licensed throughput.')
platformLicensedPPS = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 49), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: platformLicensedPPS.setStatus('current')
if mibBuilder.loadTexts: platformLicensedPPS.setDescription('This represents the platform licensed packets per seconds.')
commandFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 50), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: commandFailureReason.setStatus('current')
if mibBuilder.loadTexts: commandFailureReason.setDescription('This is the error string displayed in cli when the command fails.')
nsIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 51), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsIPAddressType.setStatus('current')
if mibBuilder.loadTexts: nsIPAddressType.setDescription('The address type of nsIPAddress')
nsIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 52), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsIPAddress.setStatus('current')
if mibBuilder.loadTexts: nsIPAddress.setDescription('This represents the IPV6 or IPV4 address.')
lsnSubscrIP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 53), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lsnSubscrIP.setStatus('current')
if mibBuilder.loadTexts: lsnSubscrIP.setDescription('This represents the LSN Subscriber IP.')
lsnSubscrTD = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 54), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lsnSubscrTD.setStatus('current')
if mibBuilder.loadTexts: lsnSubscrTD.setDescription('This represents the LSN Subscriber TD.')
protocol = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 55), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: protocol.setStatus('current')
if mibBuilder.loadTexts: protocol.setDescription('This represents the IP Protocol.')
vsvrCurSoValue = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 56), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vsvrCurSoValue.setStatus('current')
if mibBuilder.loadTexts: vsvrCurSoValue.setDescription('vserver spillover value.')
vsvrSoMethod = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 57), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vsvrSoMethod.setStatus('current')
if mibBuilder.loadTexts: vsvrSoMethod.setDescription('vserver spillover method.')
vsvrSoThresh = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 58), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vsvrSoThresh.setStatus('current')
if mibBuilder.loadTexts: vsvrSoThresh.setDescription('vserver spillover threshold.')
lsnSessLimitExceededBy = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 59), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lsnSessLimitExceededBy.setStatus('current')
if mibBuilder.loadTexts: lsnSessLimitExceededBy.setDescription('This represents the entity(group/subscriber) which has exceeded the quota.')
nsPartitionName = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 60), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nsPartitionName.setStatus('current')
if mibBuilder.loadTexts: nsPartitionName.setDescription('This is the partition name of the source of the trap')
operation = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 61), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: operation.setStatus('current')
if mibBuilder.loadTexts: operation.setDescription('This represents the operation like add,remove etc')
fromPartition = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 62), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fromPartition.setStatus('current')
if mibBuilder.loadTexts: fromPartition.setDescription('This represents the partition name from where switch happened')
toPartition = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 63), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: toPartition.setStatus('current')
if mibBuilder.loadTexts: toPartition.setDescription('This represents the partition name to where switch happened')
clPeerID = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 64), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clPeerID.setStatus('current')
if mibBuilder.loadTexts: clPeerID.setDescription('This represents the unique ids of the cluster nodes from where heartbeats are not received on backplane')
lsnDSLiteB4Address = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 65), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lsnDSLiteB4Address.setStatus('current')
if mibBuilder.loadTexts: lsnDSLiteB4Address.setDescription('This represents the IPv6 address of the B4 device in DS-Lite environment.')
ipConflictMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 66), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipConflictMacAddr.setStatus('current')
if mibBuilder.loadTexts: ipConflictMacAddr.setDescription('The MAC address of the machine having the conflicting IP configured in the network.')
gslbSite = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 67), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: gslbSite.setStatus('current')
if mibBuilder.loadTexts: gslbSite.setDescription('This represents the GSLB site name.')
siteIP = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 68), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: siteIP.setStatus('current')
if mibBuilder.loadTexts: siteIP.setDescription('This represents the GSLB site IP Address.')
lsnNAT64SubscrIPV6 = MibScalar((1, 3, 6, 1, 4, 1, 5951, 4, 1, 10, 2, 69), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lsnNAT64SubscrIPV6.setStatus('current')
if mibBuilder.loadTexts: lsnNAT64SubscrIPV6.setDescription('This represents the LSN Subscriber IPV6 address.')
netScalerEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0))
if mibBuilder.loadTexts: netScalerEventsV2.setStatus('current')
if mibBuilder.loadTexts: netScalerEventsV2.setDescription('The events for NetScaler')
changeToPrimary = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 1)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: changeToPrimary.setStatus('current')
if mibBuilder.loadTexts: changeToPrimary.setDescription('This trap indicates that the netscaler is now operating in the primary mode.')
changeToSecondary = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 2)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: changeToSecondary.setStatus('current')
if mibBuilder.loadTexts: changeToSecondary.setDescription('This trap indicates that the netscaler is now operating in the Secondary mode.')
cpuUtilization = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 3)).setObjects(("NS-ROOT-MIB", "nsCPUusage"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: cpuUtilization.setStatus('current')
if mibBuilder.loadTexts: cpuUtilization.setDescription('This trap indicates that the CPU utilization has exceeded the high threshold')
linkUp = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 4))
if mibBuilder.loadTexts: linkUp.setStatus('obsolete')
if mibBuilder.loadTexts: linkUp.setDescription('OBSOLETE...')
linkDown = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 5))
if mibBuilder.loadTexts: linkDown.setStatus('obsolete')
if mibBuilder.loadTexts: linkDown.setDescription('OBSOLETE...')
discoverFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 6))
if mibBuilder.loadTexts: discoverFailure.setStatus('obsolete')
if mibBuilder.loadTexts: discoverFailure.setDescription('OBSOLETE...')
memUtilization = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 7))
if mibBuilder.loadTexts: memUtilization.setStatus('obsolete')
if mibBuilder.loadTexts: memUtilization.setDescription('OBSOLETE...')
entitydown = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 8)).setObjects(("NS-ROOT-MIB", "entityName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: entitydown.setStatus('current')
if mibBuilder.loadTexts: entitydown.setDescription('This trap is sent when the state of entities such as an interface, vserver, physicalservice or servicegroup changes to DOWN')
entityup = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 9)).setObjects(("NS-ROOT-MIB", "entityName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: entityup.setStatus('current')
if mibBuilder.loadTexts: entityup.setDescription('This trap is sent when the state of entities such as an interface, vserver, physicalservice or servicegroup changes to UP')
synflood = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 10)).setObjects(("NS-ROOT-MIB", "unackSynCount"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: synflood.setStatus('current')
if mibBuilder.loadTexts: synflood.setDescription('This trap is sent when the rate at which unacknowledged SYNs are received cross a threshold value')
cpuUtilizationNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 11)).setObjects(("NS-ROOT-MIB", "nsCPUusage"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: cpuUtilizationNormal.setStatus('current')
if mibBuilder.loadTexts: cpuUtilizationNormal.setDescription('This trap indicates that the CPU utilization has come back to normal')
synfloodNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 12)).setObjects(("NS-ROOT-MIB", "unackSynCount"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: synfloodNormal.setStatus('current')
if mibBuilder.loadTexts: synfloodNormal.setDescription('This trap is sent when the rate at which unacknowledged SYNs are received returns to normal')
memoryUtilization = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 13)).setObjects(("NS-ROOT-MIB", "resMemUsage"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: memoryUtilization.setStatus('current')
if mibBuilder.loadTexts: memoryUtilization.setDescription('This trap is sent when the memory utilization of the system exceeds the threshold value')
memoryUtilizationNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 14)).setObjects(("NS-ROOT-MIB", "resMemUsage"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: memoryUtilizationNormal.setStatus('current')
if mibBuilder.loadTexts: memoryUtilizationNormal.setDescription('This trap is sent when the memory utilization of the system returns to normal')
vServerRequestRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 15)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrRequestRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vServerRequestRate.setStatus('current')
if mibBuilder.loadTexts: vServerRequestRate.setDescription('This trap is sent when the request rate on a vServer exceeds a threshold value')
vServerRequestRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 16)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrRequestRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vServerRequestRateNormal.setStatus('current')
if mibBuilder.loadTexts: vServerRequestRateNormal.setDescription('This trap is sent when the request rate on a vServer returns to normal')
serviceRequestRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 17)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcRequestRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceRequestRate.setStatus('current')
if mibBuilder.loadTexts: serviceRequestRate.setDescription('This trap is sent when the request rate on a service exceeds a threshold value')
serviceRequestRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 18)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcRequestRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceRequestRateNormal.setStatus('current')
if mibBuilder.loadTexts: serviceRequestRateNormal.setDescription('This trap is sent when the request rate on a service returns to normal')
entityRxRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 19))
if mibBuilder.loadTexts: entityRxRate.setStatus('obsolete')
if mibBuilder.loadTexts: entityRxRate.setDescription('OBSOLETE...')
entityRxRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 20))
if mibBuilder.loadTexts: entityRxRateNormal.setStatus('obsolete')
if mibBuilder.loadTexts: entityRxRateNormal.setDescription('OBSOLETE...')
entityTxRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 21))
if mibBuilder.loadTexts: entityTxRate.setStatus('obsolete')
if mibBuilder.loadTexts: entityTxRate.setDescription('OBSOLETE...')
entityTxRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 22))
if mibBuilder.loadTexts: entityTxRateNormal.setStatus('obsolete')
if mibBuilder.loadTexts: entityTxRateNormal.setDescription('OBSOLETE...')
entitySynflood = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 23))
if mibBuilder.loadTexts: entitySynflood.setStatus('obsolete')
if mibBuilder.loadTexts: entitySynflood.setDescription('OBSOLETE...')
entitySynfloodNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 24))
if mibBuilder.loadTexts: entitySynfloodNormal.setStatus('obsolete')
if mibBuilder.loadTexts: entitySynfloodNormal.setDescription('OBSOLETE...')
netScalerConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 25)).setObjects(("NS-ROOT-MIB", "nsUserName"), ("NS-ROOT-MIB", "configurationCmd"), ("NS-ROOT-MIB", "authorizationStatus"), ("NS-ROOT-MIB", "commandExecutionStatus"), ("NS-ROOT-MIB", "nsClientIPAddr"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: netScalerConfigChange.setStatus('current')
if mibBuilder.loadTexts: netScalerConfigChange.setDescription('This trap is sent when the configuration on the NetScaler is changed.')
maxClients = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 26)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcEstablishedConn"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: maxClients.setStatus('current')
if mibBuilder.loadTexts: maxClients.setDescription('This trap is sent when the number of clients hits the maxClients value for a service')
maxClientsNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 27)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcEstablishedConn"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: maxClientsNormal.setStatus('current')
if mibBuilder.loadTexts: maxClientsNormal.setDescription('This trap is sent when the number of clients falls below 70% of maxClients value for a service.')
netScalerConfigSave = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 28)).setObjects(("NS-ROOT-MIB", "nsUserName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: netScalerConfigSave.setStatus('current')
if mibBuilder.loadTexts: netScalerConfigSave.setDescription('This trap is sent when the configuration on the NetScaler is saved.')
serviceRxBytesRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 29)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcRxBytesRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceRxBytesRate.setStatus('current')
if mibBuilder.loadTexts: serviceRxBytesRate.setDescription('This trap is sent when the request bytes/s of a service exceeds a threshold value.')
serviceRxBytesRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 30)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcRxBytesRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceRxBytesRateNormal.setStatus('current')
if mibBuilder.loadTexts: serviceRxBytesRateNormal.setDescription('This trap is sent when the request bytes/s of a service returns to normal.')
vserverRxBytesRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 31)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrRxBytesRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverRxBytesRate.setStatus('current')
if mibBuilder.loadTexts: vserverRxBytesRate.setDescription('This trap is sent when the request bytes/s of a vserver exceeds a threshold value.')
vserverRxBytesRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 32)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrRxBytesRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverRxBytesRateNormal.setStatus('current')
if mibBuilder.loadTexts: vserverRxBytesRateNormal.setDescription('This trap is sent when the request bytes/s of a vServer returns to normal.')
serviceTxBytesRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 33)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcTxBytesRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceTxBytesRate.setStatus('current')
if mibBuilder.loadTexts: serviceTxBytesRate.setDescription('This trap is sent when the response bytes/s of a service exceeds a threshold value.')
serviceTxBytesRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 34)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcTxBytesRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceTxBytesRateNormal.setStatus('current')
if mibBuilder.loadTexts: serviceTxBytesRateNormal.setDescription('This trap is sent when the response bytes/s of a service returns to normal.')
vserverTxBytesRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 35)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrTxBytesRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverTxBytesRate.setStatus('current')
if mibBuilder.loadTexts: vserverTxBytesRate.setDescription('This trap is sent when the response bytes/s of a vserver exceeds a threshold value.')
vserverTxBytesRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 36)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrTxBytesRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverTxBytesRateNormal.setStatus('current')
if mibBuilder.loadTexts: vserverTxBytesRateNormal.setDescription('This trap is sent when the response bytes/s of a vServer returns to normal.')
serviceSynfloodRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 37)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcSynfloodRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceSynfloodRate.setStatus('current')
if mibBuilder.loadTexts: serviceSynfloodRate.setDescription('This trap is sent when the number of unacknowledged syns for a service exceeds a threshold value.')
serviceSynfloodNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 38)).setObjects(("NS-ROOT-MIB", "svcServiceName"), ("NS-ROOT-MIB", "svcSynfloodRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcServiceFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: serviceSynfloodNormal.setStatus('current')
if mibBuilder.loadTexts: serviceSynfloodNormal.setDescription('This trap is sent when the number of unacknowledged syns for a service returns to normal.')
vserverSynfloodRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 39)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrSynfloodRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverSynfloodRate.setStatus('current')
if mibBuilder.loadTexts: vserverSynfloodRate.setDescription('This trap is sent when the number of unacknowledged syns for a vserver exceeds a threshold value.')
vserverSynfloodNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 40)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrSynfloodRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverSynfloodNormal.setStatus('current')
if mibBuilder.loadTexts: vserverSynfloodNormal.setDescription('This trap is sent when the number of unacknowledged syns for a vserver returns to normal.')
svcGroupMemberRequestRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 41)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberRequestRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberRequestRate.setStatus('current')
if mibBuilder.loadTexts: svcGroupMemberRequestRate.setDescription('This trap is sent when the request rate on a service group member exceeds a threshold value')
svcGroupMemberRequestRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 42)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberRequestRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberRequestRateNormal.setStatus('current')
if mibBuilder.loadTexts: svcGroupMemberRequestRateNormal.setDescription('This trap is sent when the request rate on a service group member returns to normal')
svcGroupMemberRxBytesRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 43)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberRxBytesRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberRxBytesRate.setStatus('current')
if mibBuilder.loadTexts: svcGroupMemberRxBytesRate.setDescription('This trap is sent when the request bytes/s of a service group exceeds a threshold value.')
svcGroupMemberRxBytesRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 44)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberRxBytesRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberRxBytesRateNormal.setStatus('current')
if mibBuilder.loadTexts: svcGroupMemberRxBytesRateNormal.setDescription('This trap is sent when the request bytes/s of a service group returns to normal.')
svcGroupMemberTxBytesRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 45)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberTxBytesRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberTxBytesRate.setStatus('current')
if mibBuilder.loadTexts: svcGroupMemberTxBytesRate.setDescription('This trap is sent when the response bytes/s of a service group exceeds a threshold value.')
svcGroupMemberTxBytesRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 46)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberTxBytesRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberTxBytesRateNormal.setStatus('current')
if mibBuilder.loadTexts: svcGroupMemberTxBytesRateNormal.setDescription('This trap is sent when the response bytes/s of a service group returns to normal.')
svcGroupMemberSynfloodRate = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 47)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberSynfloodRate"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberSynfloodRate.setStatus('current')
if mibBuilder.loadTexts: svcGroupMemberSynfloodRate.setDescription('This trap is sent when the number of unacknowledged syns for a service group exceeds a threshold value.')
svcGroupMemberSynfloodNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 48)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberSynfloodRate"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberSynfloodNormal.setStatus('current')
if mibBuilder.loadTexts: svcGroupMemberSynfloodNormal.setDescription('This trap is sent when the number of unacknowledged syns for a service group returns to normal.')
svcGroupMemberMaxClients = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 49)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberEstablishedConn"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberMaxClients.setStatus('current')
if mibBuilder.loadTexts: svcGroupMemberMaxClients.setDescription('This trap is sent when the number of clients hits the maxClients value for a service group member')
svcGroupMemberMaxClientsNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 50)).setObjects(("NS-ROOT-MIB", "svcGrpMemberName"), ("NS-ROOT-MIB", "svcGrpMemberEstablishedConn"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "svcGrpMemberFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: svcGroupMemberMaxClientsNormal.setStatus('current')
if mibBuilder.loadTexts: svcGroupMemberMaxClientsNormal.setDescription('This trap is sent when the number of clients falls below 70% of maxClients value for a service group member.')
averageCpuUtilization = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 51)).setObjects(("NS-ROOT-MIB", "resCpuUsage"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: averageCpuUtilization.setStatus('current')
if mibBuilder.loadTexts: averageCpuUtilization.setDescription('This trap indicates that the average CPU usage in the multi-processor NetScaler system has exceeded the high threshold.')
averageCpuUtilizationNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 52)).setObjects(("NS-ROOT-MIB", "resCpuUsage"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: averageCpuUtilizationNormal.setStatus('current')
if mibBuilder.loadTexts: averageCpuUtilizationNormal.setDescription('This trap indicates that the average CPU usage in the multi-processor NetScaler system has come back to normal.')
monRespTimeoutAboveThresh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 53)).setObjects(("NS-ROOT-MIB", "monServiceName"), ("NS-ROOT-MIB", "monitorName"), ("NS-ROOT-MIB", "responseTimeoutThreshold"), ("NS-ROOT-MIB", "alarmMonrespto"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: monRespTimeoutAboveThresh.setStatus('current')
if mibBuilder.loadTexts: monRespTimeoutAboveThresh.setDescription('This trap is sent when the response timeout for a monitor probe exceeds the configured threshold.')
monRespTimeoutBelowThresh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 54)).setObjects(("NS-ROOT-MIB", "monServiceName"), ("NS-ROOT-MIB", "monitorName"), ("NS-ROOT-MIB", "responseTimeoutThreshold"), ("NS-ROOT-MIB", "alarmMonrespto"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: monRespTimeoutBelowThresh.setStatus('current')
if mibBuilder.loadTexts: monRespTimeoutBelowThresh.setDescription('This trap is sent when the response timeout for a monitor probe comes back to normal, less than the threshold set.')
netScalerLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 55)).setObjects(("NS-ROOT-MIB", "nsUserName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: netScalerLoginFailure.setStatus('current')
if mibBuilder.loadTexts: netScalerLoginFailure.setDescription('This trap is sent when a login attempt to the NetScaler fails.')
sslCertificateExpiry = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 56)).setObjects(("NS-ROOT-MIB", "sslCertKeyName"), ("NS-ROOT-MIB", "sslDaysToExpire"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: sslCertificateExpiry.setStatus('current')
if mibBuilder.loadTexts: sslCertificateExpiry.setDescription('This trap is sent as an advance notification when an SSL certificate is due to expire.')
fanSpeedLow = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 57)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmLowThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: fanSpeedLow.setStatus('current')
if mibBuilder.loadTexts: fanSpeedLow.setDescription('This trap indicates that a fan speed has gone below an alarm threshold.')
fanSpeedNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 58)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: fanSpeedNormal.setStatus('current')
if mibBuilder.loadTexts: fanSpeedNormal.setDescription('This trap indicates that a fan speed has returned to normal.')
voltageLow = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 59)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmLowThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: voltageLow.setStatus('current')
if mibBuilder.loadTexts: voltageLow.setDescription('This trap indicates that a voltage has gone low.')
voltageNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 60)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: voltageNormal.setStatus('current')
if mibBuilder.loadTexts: voltageNormal.setDescription('This trap indicates that a voltage has returned to normal.')
voltageHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 61)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: voltageHigh.setStatus('current')
if mibBuilder.loadTexts: voltageHigh.setDescription('This trap indicates that a voltage has gone high.')
temperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 62)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: temperatureHigh.setStatus('current')
if mibBuilder.loadTexts: temperatureHigh.setDescription('This trap indicates that a temperature has gone high.')
temperatureNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 63)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: temperatureNormal.setStatus('current')
if mibBuilder.loadTexts: temperatureNormal.setDescription('This trap indicates that a temperature has returned to normal.')
diskUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 64)).setObjects(("NS-ROOT-MIB", "sysHealthDiskName"), ("NS-ROOT-MIB", "sysHealthDiskPerusage"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: diskUsageHigh.setStatus('current')
if mibBuilder.loadTexts: diskUsageHigh.setDescription('This trap indicates that disk usage has gone high.')
diskUsageNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 65)).setObjects(("NS-ROOT-MIB", "sysHealthDiskName"), ("NS-ROOT-MIB", "sysHealthDiskPerusage"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: diskUsageNormal.setStatus('current')
if mibBuilder.loadTexts: diskUsageNormal.setDescription('This trap indicates that disk usage has returned to normal.')
interfaceThroughputLow = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 66)).setObjects(("NS-ROOT-MIB", "ifName"), ("NS-ROOT-MIB", "ifThroughput"), ("NS-ROOT-MIB", "ifMinThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: interfaceThroughputLow.setStatus('current')
if mibBuilder.loadTexts: interfaceThroughputLow.setDescription('This trap indicates that interface throughput is low.')
interfaceThroughputNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 67)).setObjects(("NS-ROOT-MIB", "ifName"), ("NS-ROOT-MIB", "ifThroughput"), ("NS-ROOT-MIB", "ifMinThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: interfaceThroughputNormal.setStatus('current')
if mibBuilder.loadTexts: interfaceThroughputNormal.setDescription('This trap indicates that interface throughput has returned to normal.')
haVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 68)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haVersionMismatch.setStatus('current')
if mibBuilder.loadTexts: haVersionMismatch.setDescription('This trap indicates that there is a mismatch in the OS version of the netscalers participating in HA. ')
haSyncFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 69)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haSyncFailure.setStatus('current')
if mibBuilder.loadTexts: haSyncFailure.setDescription('This trap indicates that config synchronization has failed on secondary. ')
haNoHeartbeats = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 70)).setObjects(("NS-ROOT-MIB", "haNicsMonitorFailed"), ("NS-ROOT-MIB", "haLastNicMonitorFailed"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haNoHeartbeats.setStatus('current')
if mibBuilder.loadTexts: haNoHeartbeats.setDescription('This trap indicates that HA heartbeats are not received from the secondary. ')
haBadSecState = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 71)).setObjects(("NS-ROOT-MIB", "haPeerSystemState"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haBadSecState.setStatus('current')
if mibBuilder.loadTexts: haBadSecState.setDescription('This trap indicates that the secondary is in DOWN/UNKNOWN/STAY SECONDARY state. ')
interfaceBWUseHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 72)).setObjects(("NS-ROOT-MIB", "ifName"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: interfaceBWUseHigh.setStatus('current')
if mibBuilder.loadTexts: interfaceBWUseHigh.setDescription('This trap is sent when the bandwidth usage of any of the interfaces of the system exceeds the threshold value (configured in Mbits/second)')
interfaceBWUseNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 73)).setObjects(("NS-ROOT-MIB", "ifName"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: interfaceBWUseNormal.setStatus('current')
if mibBuilder.loadTexts: interfaceBWUseNormal.setDescription('This trap is sent when the bandwidth usage of any of the interfaces of the system returns to normal')
aggregateBWUseHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 74)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: aggregateBWUseHigh.setStatus('current')
if mibBuilder.loadTexts: aggregateBWUseHigh.setDescription('This trap is sent when the aggregate bandwidth usage of the system exceeds the threshold value (configured in Mbits/second) ')
aggregateBWUseNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 75)).setObjects(("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: aggregateBWUseNormal.setStatus('current')
if mibBuilder.loadTexts: aggregateBWUseNormal.setDescription('This trap is sent when the aggregate bandwidth usage of the system returns to normal.')
vserverRhiStateChange = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 76)).setObjects(("NS-ROOT-MIB", "alarmVipRhiState"), ("NS-ROOT-MIB", "alarmVipRhiInetAddressType"), ("NS-ROOT-MIB", "alarmVipRhiInetAddress"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverRhiStateChange.setStatus('current')
if mibBuilder.loadTexts: vserverRhiStateChange.setDescription('This trap is sent when the vserver RHI state changes.')
rateLmtThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 77)).setObjects(("NS-ROOT-MIB", "alarmRateLmtThresholdExceeded"), ("NS-ROOT-MIB", "ipAddressGathered"), ("NS-ROOT-MIB", "stringComputed"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: rateLmtThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: rateLmtThresholdExceed.setDescription('This trap is sent when the client exceeds the ratelimit threshold. ')
monProbeFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 78)).setObjects(("NS-ROOT-MIB", "monServiceName"), ("NS-ROOT-MIB", "monitorName"), ("NS-ROOT-MIB", "alarmProbeFailedRetries"), ("NS-ROOT-MIB", "monitorRetrys"), ("NS-ROOT-MIB", "alarmProbeFailedErrorString"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: monProbeFailed.setStatus('current')
if mibBuilder.loadTexts: monProbeFailed.setDescription('This trap is sent when the monitor probe fails for configured number of retries in given max retries attempts.')
temperatureCpuHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 79)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: temperatureCpuHigh.setStatus('current')
if mibBuilder.loadTexts: temperatureCpuHigh.setDescription('This trap indicates that a CPU temperature has gone high.')
temperatureCpuNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 80)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: temperatureCpuNormal.setStatus('current')
if mibBuilder.loadTexts: temperatureCpuNormal.setDescription('This trap indicates that a CPU temperature has returned to normal.')
entityofs = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 81)).setObjects(("NS-ROOT-MIB", "entityName"), ("NS-ROOT-MIB", "alarmEntityCurState"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: entityofs.setStatus('current')
if mibBuilder.loadTexts: entityofs.setDescription('This trap is sent when the state of entities such as vserver, physicalservice or servicegroup changes to OUT OF SERVICE')
powerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 82)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "sysHealthPowerSupplyStatus"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: powerSupplyFailed.setStatus('current')
if mibBuilder.loadTexts: powerSupplyFailed.setDescription('This trap is sent when power supply has failed or disconnected from the system')
powerSupplyNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 83)).setObjects(("NS-ROOT-MIB", "sysHealthCounterName"), ("NS-ROOT-MIB", "sysHealthCounterValue"), ("NS-ROOT-MIB", "sysHealthPowerSupplyStatus"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: powerSupplyNormal.setStatus('current')
if mibBuilder.loadTexts: powerSupplyNormal.setDescription('This trap is sent when power supply status returned back to normal')
entityNameChanged = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 84)).setObjects(("NS-ROOT-MIB", "entityName"), ("NS-ROOT-MIB", "entityOldName"), ("NS-ROOT-MIB", "entityNewName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: entityNameChanged.setStatus('current')
if mibBuilder.loadTexts: entityNameChanged.setDescription('This trap is sent when vserver/service/sgroup/lbgroup/server entity is renamed')
haPropFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 85)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haPropFailure.setStatus('current')
if mibBuilder.loadTexts: haPropFailure.setDescription('This trap indicates that config propagation has failed on secondary. ')
ipConflict = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 86)).setObjects(("NS-ROOT-MIB", "ipConflictAddr"), ("NS-ROOT-MIB", "ipConflictMacAddr"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: ipConflict.setStatus('current')
if mibBuilder.loadTexts: ipConflict.setDescription('This trap indicates that ip conflict is present with another device in the network. ')
appfwStartUrl = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 87)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwStartUrl.setStatus('current')
if mibBuilder.loadTexts: appfwStartUrl.setDescription('This trap indicates that AppFirewall Start URL violation occurred.')
appfwDenyUrl = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 88)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwDenyUrl.setStatus('current')
if mibBuilder.loadTexts: appfwDenyUrl.setDescription('This trap indicates that AppFirewall Deny URL violation occurred.')
appfwRefererHeader = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 89)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwRefererHeader.setStatus('current')
if mibBuilder.loadTexts: appfwRefererHeader.setDescription('This trap indicates that AppFirewall Referer Header violation occurred.')
appfwCSRFTag = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 90)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwCSRFTag.setStatus('current')
if mibBuilder.loadTexts: appfwCSRFTag.setDescription('This trap indicates that AppFirewall CSRF Tag violation occurred.')
appfwCookie = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 91)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwCookie.setStatus('current')
if mibBuilder.loadTexts: appfwCookie.setDescription('This trap indicates that AppFirewall Cookie violation occurred.')
appfwFieldConsistency = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 92)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwFieldConsistency.setStatus('current')
if mibBuilder.loadTexts: appfwFieldConsistency.setDescription('This trap indicates that AppFirewall Field Consistency violation occurred.')
appfwBufferOverflow = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 93)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwBufferOverflow.setStatus('current')
if mibBuilder.loadTexts: appfwBufferOverflow.setDescription('This trap indicates that AppFirewall Buffer Overflow violation occurred.')
appfwFieldFormat = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 94)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwFieldFormat.setStatus('current')
if mibBuilder.loadTexts: appfwFieldFormat.setDescription('This trap indicates that AppFirewall Field Format violation occurred.')
appfwSafeCommerce = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 95)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwSafeCommerce.setStatus('current')
if mibBuilder.loadTexts: appfwSafeCommerce.setDescription('This trap indicates that AppFirewall Safe Commerce violation occurred.')
appfwSafeObject = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 96)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwSafeObject.setStatus('current')
if mibBuilder.loadTexts: appfwSafeObject.setDescription('This trap indicates that AppFirewall Safe Object violation occurred.')
appfwPolicyHit = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 97)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwPolicyHit.setStatus('current')
if mibBuilder.loadTexts: appfwPolicyHit.setDescription('This trap indicates that AppFirewall Policy Hit occurred.')
appfwXSS = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 98)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXSS.setStatus('current')
if mibBuilder.loadTexts: appfwXSS.setDescription('This trap indicates that AppFirewall Cross Site Scripting violation occurred.')
appfwXMLXSS = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 99)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLXSS.setStatus('current')
if mibBuilder.loadTexts: appfwXMLXSS.setDescription('This trap indicates that AppFirewall XML Cross Site Scripting violation occurred.')
appfwSQL = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 100)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwSQL.setStatus('current')
if mibBuilder.loadTexts: appfwSQL.setDescription('This trap indicates that AppFirewall SQL violation occurred.')
appfwXMLSQL = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 101)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLSQL.setStatus('current')
if mibBuilder.loadTexts: appfwXMLSQL.setDescription('This trap indicates that AppFirewall XML SQL violation occurred.')
appfwXMLAttachment = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 102)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLAttachment.setStatus('current')
if mibBuilder.loadTexts: appfwXMLAttachment.setDescription('This trap indicates that AppFirewall XML Attachment violation occurred.')
appfwXMLDos = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 103)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLDos.setStatus('current')
if mibBuilder.loadTexts: appfwXMLDos.setDescription('This trap indicates that AppFirewall XML DoS violation occurred.')
appfwXMLValidation = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 104)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLValidation.setStatus('current')
if mibBuilder.loadTexts: appfwXMLValidation.setDescription('This trap indicates that AppFirewall XML Validation violation occurred.')
appfwXMLWSI = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 105)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLWSI.setStatus('current')
if mibBuilder.loadTexts: appfwXMLWSI.setDescription('This trap indicates that AppFirewall XML WSI violation occurred.')
appfwXMLSchemaCompile = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 106)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLSchemaCompile.setStatus('current')
if mibBuilder.loadTexts: appfwXMLSchemaCompile.setDescription('This trap indicates that AppFirewall XML Schema Compile violation occurred.')
appfwXMLSoapFault = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 107)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwXMLSoapFault.setStatus('current')
if mibBuilder.loadTexts: appfwXMLSoapFault.setDescription('This trap indicates that AppFirewall XML Soap Fault violation occurred.')
dnskeyExpiry = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 108)).setObjects(("NS-ROOT-MIB", "dnskeyName"), ("NS-ROOT-MIB", "dnskeyTimeToExpire"), ("NS-ROOT-MIB", "dnskeyUnitsOfExpiry"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: dnskeyExpiry.setStatus('current')
if mibBuilder.loadTexts: dnskeyExpiry.setDescription('This trap is sent as an advance notification when an DNSKEY is due to expire.')
platformRateLimitThresholdHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 109)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: platformRateLimitThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: platformRateLimitThresholdHigh.setDescription('This trap indicates that the platform rate limit (in Mbps) has exceeded the threshold')
platformRateLimitThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 110)).setObjects(("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: platformRateLimitThresholdNormal.setStatus('current')
if mibBuilder.loadTexts: platformRateLimitThresholdNormal.setDescription('This trap indicates that the platform rate limit (in Mbps) has come back to normal')
platformPpsLimitThresholdHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 111)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedPPS"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: platformPpsLimitThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: platformPpsLimitThresholdHigh.setDescription('This trap indicates that the platform packets per second (pps) limit has exceeded the threshold')
platformPpsLimitThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 112)).setObjects(("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "platformLicensedPPS"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: platformPpsLimitThresholdNormal.setStatus('current')
if mibBuilder.loadTexts: platformPpsLimitThresholdNormal.setDescription('This trap indicates that the platform packets per second (pps) limit has come back to normal')
platformRateLimitPktDrop = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 113)).setObjects(("NS-ROOT-MIB", "platformRateLimitPacketDropCount"), ("NS-ROOT-MIB", "platformLicensedThroughput"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: platformRateLimitPktDrop.setStatus('current')
if mibBuilder.loadTexts: platformRateLimitPktDrop.setDescription('This trap is sent when packets are dropped due to platform rate limit (in Mbps) being reached')
platformPpsLimitPktDrop = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 114)).setObjects(("NS-ROOT-MIB", "platformRateLimitPacketDropCount"), ("NS-ROOT-MIB", "platformLicensedPPS"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: platformPpsLimitPktDrop.setStatus('current')
if mibBuilder.loadTexts: platformPpsLimitPktDrop.setDescription('This trap is sent when packets are dropped due to platform packets per second (pps) limit being reached')
DataStreamRateLimitHit = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 115))
if mibBuilder.loadTexts: DataStreamRateLimitHit.setStatus('obsolete')
if mibBuilder.loadTexts: DataStreamRateLimitHit.setDescription('DateStream Rate-Limiting is Removed. So, this trap is not required.')
haLicenseCheck = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 116)).setObjects(("NS-ROOT-MIB", "haLicenseMatchState"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haLicenseCheck.setStatus('current')
if mibBuilder.loadTexts: haLicenseCheck.setDescription('This trap is sent when the NetScaler comes up and tells the state HA license check whether it is matched or mismatched')
sslCardFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 117)).setObjects(("NS-ROOT-MIB", "sslCardStatusMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: sslCardFailed.setStatus('current')
if mibBuilder.loadTexts: sslCardFailed.setDescription('This trap is sent when SSL Card has failed')
sslCardNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 118)).setObjects(("NS-ROOT-MIB", "sslCardStatusMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: sslCardNormal.setStatus('current')
if mibBuilder.loadTexts: sslCardNormal.setDescription('This trap is sent when SSL Card status returned back to normal')
warmRestartEvent = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 119)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: warmRestartEvent.setStatus('current')
if mibBuilder.loadTexts: warmRestartEvent.setDescription('This trap is sent when a Warm Restart Event occurred')
hardDiskDriveErrors = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 120)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: hardDiskDriveErrors.setStatus('current')
if mibBuilder.loadTexts: hardDiskDriveErrors.setDescription('This trap is sent when Hard Disk Drive Errors are seen on the system')
compactFlashErrors = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 121)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: compactFlashErrors.setStatus('current')
if mibBuilder.loadTexts: compactFlashErrors.setDescription('This trap is sent when Compact Flash Errors are seen on the system')
callHomeUploadEvent = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 122)).setObjects(("NS-ROOT-MIB", "callHomeUploadEventStatusMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: callHomeUploadEvent.setStatus('current')
if mibBuilder.loadTexts: callHomeUploadEvent.setDescription('This trap is sent when an attempt to upload Show Tech Support Archive has been made')
rsa1024KeyExThresholdHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 123)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: rsa1024KeyExThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: rsa1024KeyExThresholdHigh.setDescription('This trap is sent when RSA 1024 key exchange limit has exceeded the threshold')
rsa1024KeyExThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 124)).setObjects(("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: rsa1024KeyExThresholdNormal.setStatus('current')
if mibBuilder.loadTexts: rsa1024KeyExThresholdNormal.setDescription('This trap is sent when RSA 1024 key exchange limit returns back to normal')
rsa2048KeyExThresholdHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 125)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: rsa2048KeyExThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: rsa2048KeyExThresholdHigh.setDescription('This trap is sent when RSA 2048 key exchange rate limit has exceeded the threshold')
rsa2048KeyExThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 126)).setObjects(("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: rsa2048KeyExThresholdNormal.setStatus('current')
if mibBuilder.loadTexts: rsa2048KeyExThresholdNormal.setDescription('This trap is sent when RSA 2048 key exchange rate limit returns back to normal')
rsa4096KeyExThresholdHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 127)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: rsa4096KeyExThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: rsa4096KeyExThresholdHigh.setDescription('This trap is sent when RSA 4096 key exchange rate limit has exceeded the threshold')
rsa4096KeyExThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 128)).setObjects(("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: rsa4096KeyExThresholdNormal.setStatus('current')
if mibBuilder.loadTexts: rsa4096KeyExThresholdNormal.setDescription('This trap is sent when RSA 4096 key exchange rate limit returns back to normal')
sslCurSessionInUseHigh = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 129)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: sslCurSessionInUseHigh.setStatus('current')
if mibBuilder.loadTexts: sslCurSessionInUseHigh.setDescription('This trap is sent when SSL current session in use has exceeded the threshold')
sslCurSessionInUseNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 130)).setObjects(("NS-ROOT-MIB", "alarmNormalThreshold"), ("NS-ROOT-MIB", "alarmCurrentValue"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: sslCurSessionInUseNormal.setStatus('current')
if mibBuilder.loadTexts: sslCurSessionInUseNormal.setDescription('This trap is sent when SSL current session in use returns back to normal')
clusterNodeHealth = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 131)).setObjects(("NS-ROOT-MIB", "clNodeIP"), ("NS-ROOT-MIB", "clNodeEffectiveHealth"), ("NS-ROOT-MIB", "clNodeHealthReason"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterNodeHealth.setStatus('current')
if mibBuilder.loadTexts: clusterNodeHealth.setDescription('This trap is sent by all cluster nodes when their health state changes. This trap is also sent when a peer node goes down.')
clusterNodeQuorum = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 132)).setObjects(("NS-ROOT-MIB", "clNodeViewQuorum"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterNodeQuorum.setStatus('current')
if mibBuilder.loadTexts: clusterNodeQuorum.setDescription('This trap indicates whether the node view of cluster has quorum or not.')
clusterVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 133)).setObjects(("NS-ROOT-MIB", "clNodeIP"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterVersionMismatch.setStatus('current')
if mibBuilder.loadTexts: clusterVersionMismatch.setDescription('This trap is sent when there is a version mismatch among the cluster nodes.')
clusterCCOChange = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 134)).setObjects(("NS-ROOT-MIB", "oldCCOIP"), ("NS-ROOT-MIB", "newCCOIP"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterCCOChange.setStatus('current')
if mibBuilder.loadTexts: clusterCCOChange.setDescription('This trap is sent when the Configuration Coordinator of the cluster changes.')
clusterOVSChange = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 135)).setObjects(("NS-ROOT-MIB", "oldOVS"), ("NS-ROOT-MIB", "newOVS"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterOVSChange.setStatus('current')
if mibBuilder.loadTexts: clusterOVSChange.setDescription('This trap is sent when cluster operational view set(OVS) changes.')
clusterSyncFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 136)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterSyncFailure.setStatus('current')
if mibBuilder.loadTexts: clusterSyncFailure.setDescription('This trap is sent by cluster nodes when there is a sync failure.')
clusterPropFailure = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 137)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterPropFailure.setStatus('current')
if mibBuilder.loadTexts: clusterPropFailure.setDescription('This trap is sent when cluster propagation of configurations fails/times out.')
stickyPrimary = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 138)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: stickyPrimary.setStatus('current')
if mibBuilder.loadTexts: stickyPrimary.setDescription('This trap is sent when max flips are completed and we do not give up primary ownership inspite of route monitor failure.')
inbandProtocolVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 139)).setObjects(("NS-ROOT-MIB", "qosdVersion"), ("NS-ROOT-MIB", "brVersion"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: inbandProtocolVersionMismatch.setStatus('current')
if mibBuilder.loadTexts: inbandProtocolVersionMismatch.setDescription('This trap is sent when there is inband protocol mismatch between Qosd and BR. ')
sslChipReinit = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 140)).setObjects(("NS-ROOT-MIB", "sslChipName"), ("NS-ROOT-MIB", "sslChipReinitCount"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: sslChipReinit.setStatus('current')
if mibBuilder.loadTexts: sslChipReinit.setDescription('This trap is sent when a SSL chip reinitialize occurs.')
appfwViolations = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 141)).setObjects(("NS-ROOT-MIB", "appfwLogMsg"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: appfwViolations.setStatus('current')
if mibBuilder.loadTexts: appfwViolations.setDescription('This trap indicates that AppFirewall Unknow Content-Type  violation occurred.')
vridStateChange = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 142)).setObjects(("NS-ROOT-MIB", "vrid"), ("NS-ROOT-MIB", "vridBoundVIP"), ("NS-ROOT-MIB", "newVridPriority"), ("NS-ROOT-MIB", "effectiveVridPriority"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vridStateChange.setStatus('current')
if mibBuilder.loadTexts: vridStateChange.setDescription('This trap is sent when the state of VRID changes in ACTIVE/ACTIVE setup')
portAllocFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 143)).setObjects(("NS-ROOT-MIB", "dstip"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: portAllocFailed.setStatus('current')
if mibBuilder.loadTexts: portAllocFailed.setDescription('This trap is sent on port allocation failure')
lldpRemTablesChange = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 144)).setObjects(("NS-ROOT-MIB", "lldpRemLocalPortNum"), ("NS-ROOT-MIB", "lldpRemChassisId"), ("NS-ROOT-MIB", "lldpRemPortId"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: lldpRemTablesChange.setStatus('current')
if mibBuilder.loadTexts: lldpRemTablesChange.setDescription('This trap is sent on any insert/delete in lldpRemManAddrTable')
ipv6AddressDuplicated = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 145)).setObjects(("NS-ROOT-MIB", "nsIPAddressType"), ("NS-ROOT-MIB", "nsIPAddress"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: ipv6AddressDuplicated.setStatus('current')
if mibBuilder.loadTexts: ipv6AddressDuplicated.setDescription('This trap indicates that ipv6 address got duplicated in the network. ')
lsnPortAllocFailed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 146)).setObjects(("NS-ROOT-MIB", "lsnGrpName"), ("NS-ROOT-MIB", "lsnSubscrTD"), ("NS-ROOT-MIB", "protocol"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: lsnPortAllocFailed.setStatus('current')
if mibBuilder.loadTexts: lsnPortAllocFailed.setDescription('This trap is sent when a LSN Subscriber is unable to allocate port')
lsnPortQuotaExceed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 147)).setObjects(("NS-ROOT-MIB", "lsnGrpName"), ("NS-ROOT-MIB", "lsnSubscrTD"), ("NS-ROOT-MIB", "protocol"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: lsnPortQuotaExceed.setStatus('current')
if mibBuilder.loadTexts: lsnPortQuotaExceed.setDescription('This trap is sent when a LSN Subscriber exceeds its Port Quota')
lsnSessionQuotaExceed = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 148)).setObjects(("NS-ROOT-MIB", "lsnGrpName"), ("NS-ROOT-MIB", "lsnSubscrTD"), ("NS-ROOT-MIB", "protocol"), ("NS-ROOT-MIB", "lsnSessLimitExceededBy"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: lsnSessionQuotaExceed.setStatus('current')
if mibBuilder.loadTexts: lsnSessionQuotaExceed.setDescription('This trap is sent when a LSN Subscriber exceeds its Session Quota')
haVersionMatched = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 149)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haVersionMatched.setStatus('current')
if mibBuilder.loadTexts: haVersionMatched.setDescription('This trap indicates that the mismatched OS version of the netscalers in HA has been corrected.')
haSyncSucceded = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 150)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haSyncSucceded.setStatus('current')
if mibBuilder.loadTexts: haSyncSucceded.setDescription('This trap indicates that config synchronization has succeded on secondary.')
haSecondaryStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 151)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haSecondaryStateNormal.setStatus('current')
if mibBuilder.loadTexts: haSecondaryStateNormal.setDescription('This trap indicates that the secondary has come back to normal UP state.')
haHeartbeatsRecvd = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 152)).setObjects(("NS-ROOT-MIB", "haNicMonitorSucceeded"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haHeartbeatsRecvd.setStatus('current')
if mibBuilder.loadTexts: haHeartbeatsRecvd.setDescription('This trap indicates that Heartbeats have been received on the specified interface.')
vserverSpillOver = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 153)).setObjects(("NS-ROOT-MIB", "vsvrName"), ("NS-ROOT-MIB", "vsvrCurSoValue"), ("NS-ROOT-MIB", "vsvrSoMethod"), ("NS-ROOT-MIB", "vsvrSoThresh"), ("NS-ROOT-MIB", "vsvrFullName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: vserverSpillOver.setStatus('current')
if mibBuilder.loadTexts: vserverSpillOver.setDescription('This trap is sent when the entity(client connections,health,bandwidth etc.) corresponding to the configured spillover method hits the spillover threshold on a vserver')
haPropSuccess = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 154)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: haPropSuccess.setStatus('current')
if mibBuilder.loadTexts: haPropSuccess.setDescription('This trap indicates that config propagation has succeeded on secondary after a previous failure. ')
partitionConfigEvent = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 155)).setObjects(("NS-ROOT-MIB", "nsPartitionName"), ("NS-ROOT-MIB", "operation"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: partitionConfigEvent.setStatus('current')
if mibBuilder.loadTexts: partitionConfigEvent.setDescription('This trap is sent on partition addition or removal')
partitionSwitched = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 156)).setObjects(("NS-ROOT-MIB", "fromPartition"), ("NS-ROOT-MIB", "toPartition"), ("NS-ROOT-MIB", "nsUserName"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: partitionSwitched.setStatus('current')
if mibBuilder.loadTexts: partitionSwitched.setDescription('This trap is sent on partition switching')
partitionCONNLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 157)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: partitionCONNLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: partitionCONNLimitExceeded.setDescription('This trap indicates that the current connection count for the partition has exceeded the configured limit.')
partitionCONNLimitNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 158)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: partitionCONNLimitNormal.setStatus('current')
if mibBuilder.loadTexts: partitionCONNLimitNormal.setDescription('This trap indicates that the partition can now accept a new connection as per configured limit.')
partitionBWLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 159)).setObjects(("NS-ROOT-MIB", "alarmHighThreshold"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: partitionBWLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: partitionBWLimitExceeded.setDescription('This trap is sent when the bandwidth usage of the partition exceeds the configured limit.')
clusterBackplaneHBMissing = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 160)).setObjects(("NS-ROOT-MIB", "clPeerID"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: clusterBackplaneHBMissing.setStatus('current')
if mibBuilder.loadTexts: clusterBackplaneHBMissing.setDescription('This trap is sent when heartbeat is missing on backplane of cluster node')
pooledLicenseGraceStarted = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 161)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: pooledLicenseGraceStarted.setStatus('current')
if mibBuilder.loadTexts: pooledLicenseGraceStarted.setDescription('This trap is sent when pooled license is running on grace')
pooledLicenseGraceNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 162)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: pooledLicenseGraceNormal.setStatus('current')
if mibBuilder.loadTexts: pooledLicenseGraceNormal.setDescription("This trap is sent when pooled license was running on grace and now it's normal")
pooledLicenseGracePeriodOver = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 163)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: pooledLicenseGracePeriodOver.setStatus('current')
if mibBuilder.loadTexts: pooledLicenseGracePeriodOver.setDescription("This trap is sent when pooled license was running on grace and it's time period is over")
pooledLicenseCapacityPartial = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 164)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: pooledLicenseCapacityPartial.setStatus('current')
if mibBuilder.loadTexts: pooledLicenseCapacityPartial.setDescription('This trap is sent when system is running on partial capacity')
pooledLicenseCapacityNormal = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 165)).setObjects(("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: pooledLicenseCapacityNormal.setStatus('current')
if mibBuilder.loadTexts: pooledLicenseCapacityNormal.setDescription('This trap is sent when system was running on partial capacity and now it has returned to normal')
gslbSiteMEPflap = NotificationType((1, 3, 6, 1, 4, 1, 5951, 1, 1, 0, 166)).setObjects(("NS-ROOT-MIB", "gslbSite"), ("NS-ROOT-MIB", "siteIP"), ("NS-ROOT-MIB", "sysIpAddress"))
if mibBuilder.loadTexts: gslbSiteMEPflap.setStatus('current')
if mibBuilder.loadTexts: gslbSiteMEPflap.setDescription('This trap is sent when the GSLB site MEP flaps.')
mibBuilder.exportSymbols("NS-ROOT-MIB", contentSwitching=contentSwitching, sslv2=sslv2, ifErrTxOverflow=ifErrTxOverflow, sslCrlPath=sslCrlPath, icmpCurRateThresholdInterval=icmpCurRateThresholdInterval, cacheTotNon304HitsHigh=cacheTotNon304HitsHigh, lldpRemSysCapEnabled=lldpRemSysCapEnabled, DataStreamRateLimitHit=DataStreamRateLimitHit, cpesPolicyhits=cpesPolicyhits, certKeyTable=certKeyTable, gslbSiteInetAddress=gslbSiteInetAddress, vsvrTotalResponses=vsvrTotalResponses, ifTxCollisions=ifTxCollisions, cacheGroupEntry=cacheGroupEntry, sslTot64BitRC4CiphersLow=sslTot64BitRC4CiphersLow, sslBeTotSSLv3Sessions=sslBeTotSSLv3Sessions, htmlInjectionTotalSessions=htmlInjectionTotalSessions, sslTotRenegSessions=sslTotRenegSessions, lsnLogTotADMappingDeleteEntries=lsnLogTotADMappingDeleteEntries, svcTotalRequestBytesHigh=svcTotalRequestBytesHigh, sslTotOffloadBulkAES=sslTotOffloadBulkAES, maxReqPerConnection=maxReqPerConnection, pqpolicypqTotQueueWaitTime=pqpolicypqTotQueueWaitTime, ifErrPktTx=ifErrPktTx, priority=priority, mcFLVVid=mcFLVVid, aRecQueries=aRecQueries, sslTotNULLCiphersLow=sslTotNULLCiphersLow, appfwappFirewallViolDenyURLPerProfile=appfwappFirewallViolDenyURLPerProfile, iipSpilloverMIPused=iipSpilloverMIPused, siteType=siteType, caMsftSmthStrmVidBytes=caMsftSmthStrmVidBytes, sslTotSessionMiss=sslTotSessionMiss, lsnLogTotUdpSessionCreateEntries=lsnLogTotUdpSessionCreateEntries, lsnTotNAT64UdpDrpPkts=lsnTotNAT64UdpDrpPkts, piPolicyBindingHits=piPolicyBindingHits, lsnGrpName=lsnGrpName, vsvrInvalidRequestResponseDropped=vsvrInvalidRequestResponseDropped, faultyCookies=faultyCookies, pqpolicyconfigTable=pqpolicyconfigTable, dnsTotPTRrecFailed=dnsTotPTRrecFailed, dnsTotNSrecUpdate=dnsTotNSrecUpdate, featureSslOffloading=featureSslOffloading, sslTot40BitRC2CiphersHigh=sslTot40BitRC2CiphersHigh, vlanTotDroppedPktsLow=vlanTotDroppedPktsLow, spdy2TotStreams=spdy2TotStreams, nsCaStatsGroup=nsCaStatsGroup, tcpErrSynInEst=tcpErrSynInEst, dhFile=dhFile, webServerHttpPorts=webServerHttpPorts, caFLVVidcacheBytes=caFLVVidcacheBytes, clusterPropFailure=clusterPropFailure, appfwXSS=appfwXSS, cipher40BitDES=cipher40BitDES, vsvrType=vsvrType, inatTotReceiveBytes=inatTotReceiveBytes, vsvrTotalResponsesHigh=vsvrTotalResponsesHigh, interfaceThroughputLow=interfaceThroughputLow, delBwSaving=delBwSaving, sslTotMD5MacLow=sslTotMD5MacLow, tcpErrSynGiveUp=tcpErrSynGiveUp, svcTotalRequestBytes=svcTotalRequestBytes, nsSnmpEventsGroup=nsSnmpEventsGroup, dnsTotCNAMErecFailed=dnsTotCNAMErecFailed, svcscpolicyDestPort=svcscpolicyDestPort, sslTotSSLv3RenegSessionsHigh=sslTotSSLv3RenegSessionsHigh, netScalerEventsV2=netScalerEventsV2, lldpRemManAddrOID=lldpRemManAddrOID, cipherBindingConfigTable=cipherBindingConfigTable, lsnLogTotSessionDeleteEntries=lsnLogTotSessionDeleteEntries, sslDaysToExpire=sslDaysToExpire, udpCurRateThreshold=udpCurRateThreshold, lsnGrpTotIcmpDrpBytes=lsnGrpTotIcmpDrpBytes, totServerDontReuse=totServerDontReuse, appfwappFirewallViolFieldformatPerProfile=appfwappFirewallViolFieldformatPerProfile, gslbDomainConfigTable=gslbDomainConfigTable, icmpTotBigNextMTU=icmpTotBigNextMTU, monServiceName=monServiceName, netScalerConfigSave=netScalerConfigSave, ipVxlan=ipVxlan, pqName=pqName, svcRequestRate=svcRequestRate, dnsCurSOArecord=dnsCurSOArecord, svcAvgTransactionTime=svcAvgTransactionTime, cpeconfigpolicyEntry=cpeconfigpolicyEntry, svcRxBytesRate=svcRxBytesRate, acl6TotMisses=acl6TotMisses, htmlInjectMemAllocFailed=htmlInjectMemAllocFailed, entityRxRate=entityRxRate, nat46TotDrop46=nat46TotDrop46, vsvrTotalClients=vsvrTotalClients, tagId=tagId, cachePercentParameterized304Hits=cachePercentParameterized304Hits, icmpTotRxEchoHigh=icmpTotRxEchoHigh, sslTotTLSv12Sessions=sslTotTLSv12Sessions, pqPriority1Requests=pqPriority1Requests, sslTotOffloadRSAKeyExchanges=sslTotOffloadRSAKeyExchanges, monitorState=monitorState, htmlInjectedBytes=htmlInjectedBytes, lsnGrpTotTcpDrpBytes=lsnGrpTotTcpDrpBytes, mxRecQueries=mxRecQueries, sysHealthDiskAvail=sysHealthDiskAvail, sslBeTotEcdheCurve521=sslBeTotEcdheCurve521, sslCertKeyTable=sslCertKeyTable, fanSpeedNormal=fanSpeedNormal, caiosBytesHR=caiosBytesHR, clusterOVSChange=clusterOVSChange, lsnTotUdpTxPkts=lsnTotUdpTxPkts, brgBpdu=brgBpdu, svcGrpMemberTxBytesRate=svcGrpMemberTxBytesRate, ipTotLandattacksHigh=ipTotLandattacksHigh, compTcpRatio=compTcpRatio, wsMaxRequestsPerConn=wsMaxRequestsPerConn, featureCompression=featureCompression, pqvsdevno=pqvsdevno, cpeaDevno=cpeaDevno, httpTotHTTP10reqLow=httpTotHTTP10reqLow, vsvrServiceName=vsvrServiceName, sslTotSSLv2HandshakesLow=sslTotSSLv2HandshakesLow, lsnLogTotIcmpSessionCreateEntries=lsnLogTotIcmpSessionCreateEntries, compTcpTotalTxBytes=compTcpTotalTxBytes, csPiIndexVserverFullName=csPiIndexVserverFullName, tcpCurServerConnClosing=tcpCurServerConnClosing, alternatecontentServicename=alternatecontentServicename, sslTot40BitRC4CiphersLow=sslTot40BitRC4CiphersLow, ipRnatTotRxBytes=ipRnatTotRxBytes, deCompTcpRatio=deCompTcpRatio, haPeerSystemState=haPeerSystemState, nonIpTotTruncatedPackets=nonIpTotTruncatedPackets, clnodeID=clnodeID, compTcpTotalQuantum=compTcpTotalQuantum, haLastMasterStateTransitionReason=haLastMasterStateTransitionReason, caLaptopDesktp=caLaptopDesktp, appfwFieldConsistency=appfwFieldConsistency, nsInetFreePorts=nsInetFreePorts, ifErrLinkHangs=ifErrLinkHangs, dnsTotUnsupportedResponseClass=dnsTotUnsupportedResponseClass, cacMsftSmthStrmVid=cacMsftSmthStrmVid, sslTotTLSv1SessionsLow=sslTotTLSv1SessionsLow, vsvrSoThreshold=vsvrSoThreshold, appfwXMLWSI=appfwXMLWSI, vserverSpillOver=vserverSpillOver, linkDown=linkDown, nsLLDPLocManAddrEntry=nsLLDPLocManAddrEntry, certPath=certPath, ipTotUnknownSvcsHigh=ipTotUnknownSvcsHigh, MetricExchange=MetricExchange, globalServerLB=globalServerLB, httpTotGetsLow=httpTotGetsLow, group304hit=group304hit, totReqRefusals=totReqRefusals, inbandProtocolVersionMismatch=inbandProtocolVersionMismatch, svcMaxReqPerConn=svcMaxReqPerConn, svcGrpMemberTotalResponses=svcGrpMemberTotalResponses, sslTotBkendTlSvlRenego=sslTotBkendTlSvlRenego, svcSsleRSA=svcSsleRSA, nsCPUEntry=nsCPUEntry, delCompTotalRequests=delCompTotalRequests, sslTotRenegSessionsLow=sslTotRenegSessionsLow, sslTotNewSessions=sslTotNewSessions, rxRawBandwidthUsage=rxRawBandwidthUsage, svcActiveTransactions=svcActiveTransactions, mptcpErrInvalRemAddr=mptcpErrInvalRemAddr, cacAppleLiveStreamingVid=cacAppleLiveStreamingVid, crVsIpAddress=crVsIpAddress, svcscpolicyscTotalRequestBytes=svcscpolicyscTotalRequestBytes, aclTotPktsDeniedLow=aclTotPktsDeniedLow, sysTotConfigChanges=sysTotConfigChanges, sslBeTot128BitRC4CiphersLow=sslBeTot128BitRC4CiphersLow, polqdepthThreshval=polqdepthThreshval, caTotother=caTotother, pptpCtlErrNoCallidMap=pptpCtlErrNoCallidMap, mcOther=mcOther, sslBeTotDH2048keyExchangesLow=sslBeTotDH2048keyExchangesLow, sslTotSwDecFE=sslTotSwDecFE, nsExpressionEntry=nsExpressionEntry, totAuthNoNames=totAuthNoNames, piPolicyUndefHits=piPolicyUndefHits, httpTotRxRequestBytesLow=httpTotRxRequestBytesLow, vsHits=vsHits, svcTotalResponseBytes=svcTotalResponseBytes, dosTotDosPriorityClients=dosTotDosPriorityClients, advanceSSLConfigEntry=advanceSSLConfigEntry, alarmProbeFailedErrorString=alarmProbeFailedErrorString, pqPolWeight=pqPolWeight, tcpErrIpPortFail=tcpErrIpPortFail, lsnLogTotPortblockDeallocs=lsnLogTotPortblockDeallocs, vsvrServiceHits=vsvrServiceHits, serviceTxBytesRate=serviceTxBytesRate, svcTotalResponsesLow=svcTotalResponsesLow, rxAlignmentErrors=rxAlignmentErrors, vsvrIpAddress=vsvrIpAddress, serviceHitsLow=serviceHitsLow, aaaAuthNonHttpSuccess=aaaAuthNonHttpSuccess, sysHealthCounterValue=sysHealthCounterValue, svcGroupMemberSynfloodNormal=svcGroupMemberSynfloodNormal, svcGrpMemberAvgSvrTTFB=svcGrpMemberAvgSvrTTFB, lbvsvrAvgSvrTTFB=lbvsvrAvgSvrTTFB, lsnTotNAT64TxPkts=lsnTotNAT64TxPkts, nsInetMode=nsInetMode, cpecaDevno=cpecaDevno, caMicrosoftSmoothStreamingPlaylistVidcacheBytes=caMicrosoftSmoothStreamingPlaylistVidcacheBytes, ipaddress=ipaddress, sslBeTotSessionMultiplexAttemptSuccessLow=sslBeTotSessionMultiplexAttemptSuccessLow, sslBeTotDH2048keyExchanges=sslBeTotDH2048keyExchanges, totclienttransactiontime=totclienttransactiontime, nsAcl6Table=nsAcl6Table, domainNameFull=domainNameFull, scFaultyCookies=scFaultyCookies, vsvrSslv3Protocol=vsvrSslv3Protocol, htmlInjectionSessions=htmlInjectionSessions, nsLLDPLocPortTable=nsLLDPLocPortTable, serverIpAddress=serverIpAddress, pqpolicypqVserverPort=pqpolicypqVserverPort, httpErrServerBusy=httpErrServerBusy, totmemory=totmemory, tlsv1=tlsv1, httpTotOthersLow=httpTotOthersLow, mptcpErrAddrId0=mptcpErrAddrId0, cacheErrMemAlloc=cacheErrMemAlloc, lsnLogTotMappingDeleteEntries=lsnLogTotMappingDeleteEntries, icmpTotTxEchoReplyHigh=icmpTotTxEchoReplyHigh, lsnTotUdpRxPkts=lsnTotUdpRxPkts, vxlanTable=vxlanTable, tcpErrCltRetrasmit=tcpErrCltRetrasmit, sslBeTotDSSAuthorizationsLow=sslBeTotDSSAuthorizationsLow, certKeyId=certKeyId, lbvserverTable=lbvserverTable, nsSysHealthDiskTable=nsSysHealthDiskTable, haErrNsbMemFail=haErrNsbMemFail, zoneName=zoneName, acPbrName=acPbrName, sslBeTot128BitIDEACiphers=sslBeTot128BitIDEACiphers, lsnTotNAT64RxBytes=lsnTotNAT64RxBytes, dosconfig=dosconfig, pqStatsperpqpolicyandperLBVipEntry=pqStatsperpqpolicyandperLBVipEntry, cacAppleLiveStreamingPlaylistVidHR=cacAppleLiveStreamingPlaylistVidHR, vlanTotTxBytesLow=vlanTotTxBytesLow, svcscpolicytotClientTransaction=svcscpolicytotClientTransaction, ipv6LandAttack=ipv6LandAttack, rxAveragePacketsSize=rxAveragePacketsSize, cacheCompressedBytesServed=cacheCompressedBytesServed, lsnTcpSessionsRate=lsnTcpSessionsRate, caIos=caIos, calaptopDesktpHR=calaptopDesktpHR, staticEntries=staticEntries, vxlanTotTxPkts=vxlanTotTxPkts, dnsTotSRVrecUpdate=dnsTotSRVrecUpdate, dosservicestatsTable=dosservicestatsTable, sslTot40BitRC4Ciphers=sslTot40BitRC4Ciphers, sslTotTLSv12ClientAuthentications=sslTotTLSv12ClientAuthentications, platformPpsLimitThresholdNormal=platformPpsLimitThresholdNormal, tcpErrForthRetransmissions=tcpErrForthRetransmissions, sslTotBkendSslV3Renego=sslTotBkendSslV3Renego)
mibBuilder.exportSymbols("NS-ROOT-MIB", icmpTotRxBytesLow=icmpTotRxBytesLow, SiteType=SiteType, txExcessCollisions=txExcessCollisions, vsvrCurServicesDown=vsvrCurServicesDown, icmpTotPktsDropped=icmpTotPktsDropped, numSSLCards=numSSLCards, sslBeTot40BitRC4CiphersLow=sslBeTot40BitRC4CiphersLow, ipv6TotIpv6To4Conversions=ipv6TotIpv6To4Conversions, crlPath=crlPath, sslTotNULLAuthorizationsLow=sslTotNULLAuthorizationsLow, ipRnatTotTxPkts=ipRnatTotTxPkts, mcAACaudiobytes=mcAACaudiobytes, compTcpTotalPush=compTcpTotalPush, keyExDH1024=keyExDH1024, ipTotTxBytesLow=ipTotTxBytesLow, nsPbrEntry=nsPbrEntry, appfwappFirewallResponsesPerProfile=appfwappFirewallResponsesPerProfile, iipDisabledMIPdisabled=iipDisabledMIPdisabled, authDS=authDS, piPolicyTable=piPolicyTable, svcAvgSvrTTFB=svcAvgSvrTTFB, lsnTotDSLiteTxPkts=lsnTotDSLiteTxPkts, cacheCurMisses=cacheCurMisses, ifnicStsStalls=ifnicStsStalls, vsvrscpolicyscTotalServerTransactions=vsvrscpolicyscTotalServerTransactions, caMsftSmthStrmngVidCaBytesHR=caMsftSmthStrmngVidCaBytesHR, cachePercentOriginBandwidthSaved=cachePercentOriginBandwidthSaved, vsvrTotMiss=vsvrTotMiss, vlanTotBroadcastPktsHigh=vlanTotBroadcastPktsHigh, serviceRxBytesRateNormal=serviceRxBytesRateNormal, cpestatsactionTable=cpestatsactionTable, dnsTotMXrecFailed=dnsTotMXrecFailed, sessHeaderTag=sessHeaderTag, tcpSpareConn=tcpSpareConn, lsnUdpSessionsRate=lsnUdpSessionsRate, lsnCurNAT64TcpSessions=lsnCurNAT64TcpSessions, vsvrscpolicyPrimaryPort=vsvrscpolicyPrimaryPort, mcLaptopDesktp=mcLaptopDesktp, dnsServerRecursion=dnsServerRecursion, inatCurSessions=inatCurSessions, appFirewallViolMsgValViolations=appFirewallViolMsgValViolations, caMsftSmthStrmngPlVidcaBytesHR=caMsftSmthStrmngPlVidcaBytesHR, ipv6TotNonTcpConnection=ipv6TotNonTcpConnection, cacheTotResponseBytes=cacheTotResponseBytes, destinationInetAddressType=destinationInetAddressType, inatNat46Tcp46=inatNat46Tcp46, sysHardwareVersionDesc=sysHardwareVersionDesc, totalIncompleteRequests=totalIncompleteRequests, dh=dh, featureRewrite=featureRewrite, appFirewallTrapsDropped=appFirewallTrapsDropped, httpTotChunkedResponses=httpTotChunkedResponses, synfloodNormal=synfloodNormal, tcpErrRstNonEst=tcpErrRstNonEst, dnsTotArecFailed=dnsTotArecFailed, cachePercentSuccessfulRevalidation=cachePercentSuccessfulRevalidation, sslTotSwEncFE=sslTotSwEncFE, crbPolicyvalue=crbPolicyvalue, svcgrpSvcGroupType=svcgrpSvcGroupType, alarmProbeFailedRetries=alarmProbeFailedRetries, sslBeTotDH1024keyExchangesHigh=sslBeTotDH1024keyExchangesHigh, primaryserviceIp=primaryserviceIp, crMapBindConfigTable=crMapBindConfigTable, svcscpolicyscAverageServerTTFB=svcscpolicyscAverageServerTTFB, pqpolicypqTotAvgQueueDepth=pqpolicypqTotAvgQueueDepth, monitorCurFailedCount=monitorCurFailedCount, sslConfig=sslConfig, lsnSubscrTD=lsnSubscrTD, name=name, ipv6TotTxBytes=ipv6TotTxBytes, vsvrscpolicytotOpenConn=vsvrscpolicytotOpenConn, nsLLDPRemSystemsGroup=nsLLDPRemSystemsGroup, nsLsnDSLiteGlobalStatsGroup=nsLsnDSLiteGlobalStatsGroup, lldpStatsRemTablesDeletes=lldpStatsRemTablesDeletes, cspolicyActionName=cspolicyActionName, lsnSubscrIP=lsnSubscrIP, lbStatisticsTable=lbStatisticsTable, scAlternateContentPath=scAlternateContentPath, nsLLDPRemManAddrTable=nsLLDPRemManAddrTable, PersistanceType=PersistanceType, svcTotalRequestBytesLow=svcTotalRequestBytesLow, icmpTotRxEchoReplyLow=icmpTotRxEchoReplyLow, tcpErrFullRetrasmit=tcpErrFullRetrasmit, nsAclEntry=nsAclEntry, dnsTotStrayAnswer=dnsTotStrayAnswer, lsnGrpCurSessions=lsnGrpCurSessions, gslbcDomainName=gslbcDomainName, weight=weight, nsIfStatsTable=nsIfStatsTable, EntityProtocolType=EntityProtocolType, lsnTotNAT64TcpRxBytes=lsnTotNAT64TcpRxBytes, svcTotalRequestsLow=svcTotalRequestsLow, sslTotTransactionsHigh=sslTotTransactionsHigh, serviceScpolicyTable=serviceScpolicyTable, httpTotNoClenChunkResponses=httpTotNoClenChunkResponses, staMonFail=staMonFail, tcpErrFinDup=tcpErrFinDup, tcpErrThirdRetransmissions=tcpErrThirdRetransmissions, httpErrLargeContentHigh=httpErrLargeContentHigh, scActionType=scActionType, svcServiceType=svcServiceType, memoryUtilizationNormal=memoryUtilizationNormal, sslTotDSSAuthorizationsHigh=sslTotDSSAuthorizationsHigh, gslbSiteInetAddressType=gslbSiteInetAddressType, caADTSaudioBytes=caADTSaudioBytes, vsvrscpolicyscTotalServerTTFBTransactions=vsvrscpolicyscTotalServerTTFBTransactions, totalPosts=totalPosts, appFirewallViolXmlXssViolations=appFirewallViolXmlXssViolations, sslBeTot168Bit3DESCiphersLow=sslBeTot168Bit3DESCiphersLow, destserviceIp=destserviceIp, cacheTotFullToConditionalRequestHigh=cacheTotFullToConditionalRequestHigh, appFirewallViolXmlGenViolations=appFirewallViolXmlGenViolations, iipFailedMIPdisabled=iipFailedMIPdisabled, cipherDesc=cipherDesc, udpTotUnknownSvcPktsHigh=udpTotUnknownSvcPktsHigh, httpErrLargeContentLow=httpErrLargeContentLow, sslBeTotSessionMultiplexAttemptFails=sslBeTotSessionMultiplexAttemptFails, svcSslDHCount=svcSslDHCount, appfwappFirewallResBytesPerProfile=appfwappFirewallResBytesPerProfile, monitorProbes=monitorProbes, nsIcmpStatsGroup=nsIcmpStatsGroup, appfwappFirewallViolSafeObjectPerProfile=appfwappFirewallViolSafeObjectPerProfile, contentFilterName=contentFilterName, haPeerId=haPeerId, mptcpErrMaxSF=mptcpErrMaxSF, currSPS=currSPS, svcTotalPktsSentLow=svcTotalPktsSentLow, sslTotDH512keyExchangesHigh=sslTotDH512keyExchangesHigh, ipv6TotStaticRoutes=ipv6TotStaticRoutes, appfwappFirewallViolXdosViolationsPerProfile=appfwappFirewallViolXdosViolationsPerProfile, vPathTotFragPkts=vPathTotFragPkts, monRespTimeoutBelowThresh=monRespTimeoutBelowThresh, MepStatus=MepStatus, dnsTotNSresponse=dnsTotNSresponse, sslTotTLSv11Transactions=sslTotTLSv11Transactions, caUnidentifiedBytes=caUnidentifiedBytes, svcGrpMemberTotalResponseBytes=svcGrpMemberTotalResponseBytes, dnsTotNSrecQueries=dnsTotNSrecQueries, udpCurRateThresholdExceedsLow=udpCurRateThresholdExceedsLow, mcYoutubedash=mcYoutubedash, caTotRequests=caTotRequests, wsPriority=wsPriority, lsnTotDrpPkts=lsnTotDrpPkts, ipTotTruncatedPackets=ipTotTruncatedPackets, vxlanEntry=vxlanEntry, sslTotTLSv1Sessions=sslTotTLSv1Sessions, nsTdInetMaskLength=nsTdInetMaskLength, vsvrTotSpillOvers=vsvrTotSpillOvers, dnsTotSRVrecFailed=dnsTotSRVrecFailed, state=state, featureHttpDosProtection=featureHttpDosProtection, haCurState=haCurState, svcscpolicyTotClientTransaction=svcscpolicyTotClientTransaction, lldpLocChassisIdSubtype=lldpLocChassisIdSubtype, sslBeTot56BitDESCiphersLow=sslBeTot56BitDESCiphersLow, cacheTotRequests=cacheTotRequests, vsvrscpolicyscAverageClientTTLB=vsvrscpolicyscAverageClientTTLB, changeToSecondary=changeToSecondary, sslTotOffloadSignRSAHigh=sslTotOffloadSignRSAHigh, aaaTotTMSessions=aaaTotTMSessions, svcscpolicyavgServerTransactionTime=svcscpolicyavgServerTransactionTime, svcCurSrvrConnections=svcCurSrvrConnections, lsnNAT64SubscrIPV6=lsnNAT64SubscrIPV6, oldOVS=oldOVS, nsInetAddressType=nsInetAddressType, caTotaudio=caTotaudio, acl6TotPktsDenied=acl6TotPktsDenied, crMapConfigTable=crMapConfigTable, svcTotalPktsRecvd=svcTotalPktsRecvd, cipherbName=cipherbName, lsnTotNAT64IcmpTxPkts=lsnTotNAT64IcmpTxPkts, lldpLocManAddrOID=lldpLocManAddrOID, sslBeTotSSLv3SessionsLow=sslBeTotSSLv3SessionsLow, sslTotECDHE521keyExchanges=sslTotECDHE521keyExchanges, sslBeTotExpiredSessionsHigh=sslBeTotExpiredSessionsHigh, pqtotclienttransaction=pqtotclienttransaction, nsRnatPerIPStatsTable=nsRnatPerIPStatsTable, tcpCurClientConnClosing=tcpCurClientConnClosing, aclStatsGroup=aclStatsGroup, vsvrTotalSynsRecvdHigh=vsvrTotalSynsRecvdHigh, sacl6sCount=sacl6sCount, appfwappFirewallRet4xxPerProfile=appfwappFirewallRet4xxPerProfile, lsnPortAllocFailed=lsnPortAllocFailed, haHeartbeatsRecvd=haHeartbeatsRecvd, sslBeTot64BitRC4Ciphers=sslBeTot64BitRC4Ciphers, tcpErrDataAfterFin=tcpErrDataAfterFin, sslTotTLSv11Handshakes=sslTotTLSv11Handshakes, rulename=rulename, svcSslRedirectSupport=svcSslRedirectSupport, crlInputFormat=crlInputFormat, contentFiltersTable=contentFiltersTable, nsInetVxlan=nsInetVxlan, sslTotDecSw=sslTotDecSw, httpTotRxResponseBytesLow=httpTotRxResponseBytesLow, nsTdInetVxlan=nsTdInetVxlan, sacl6TotPktsBridged=sacl6TotPktsBridged, platformLicensedThroughput=platformLicensedThroughput, sslTotOffloadDHKeyExchangesLow=sslTotOffloadDHKeyExchangesLow, serviceCipherBindingTable=serviceCipherBindingTable, serverInetAddress=serverInetAddress, nsInatStatsGroup=nsInatStatsGroup, sslTotSSLv3HandshakesLow=sslTotSSLv3HandshakesLow, nsPPTPStatsGroup=nsPPTPStatsGroup, svcscpolicyscTotalServerTTFB=svcscpolicyscTotalServerTTFB, haTimeofLastStateTransition=haTimeofLastStateTransition, caOther=caOther, temperatureCpuHigh=temperatureCpuHigh, cacheRecentPercent304Hits=cacheRecentPercent304Hits, dnsServerStatistics=dnsServerStatistics, svcTotalResponsesHigh=svcTotalResponsesHigh, sslTotSHAMacLow=sslTotSHAMacLow, ifRxAlignmentErrors=ifRxAlignmentErrors, cacApleLiveStrmngVid=cacApleLiveStrmngVid, httpTotHTTP10reqHigh=httpTotHTTP10reqHigh, length=length, cpesPolicyname=cpesPolicyname, mptcpErrJoinAfterFallback=mptcpErrJoinAfterFallback, hardDiskDriveErrors=hardDiskDriveErrors, pqpolicytotClientTransactionTimems=pqpolicytotClientTransactionTimems, sslBeTot40BitRC2CiphersHigh=sslBeTot40BitRC2CiphersHigh, icmpTotPktsDroppedLow=icmpTotPktsDroppedLow, siteName=siteName, lsnTotRxPkts=lsnTotRxPkts, ifRxAvgPacketRate=ifRxAvgPacketRate, pptpCallDisNotify=pptpCallDisNotify, mptcpCurMpcapableSessions=mptcpCurMpcapableSessions, mptcpErrInvalMAC=mptcpErrInvalMAC, svcdospolicydosTotValidClients=svcdospolicydosTotValidClients, serviceTxBytesRateNormal=serviceTxBytesRateNormal, haSecondaryStateNormal=haSecondaryStateNormal, dtlsStaPostResponseError=dtlsStaPostResponseError, pbrPriority=pbrPriority, vsvrBindCount=vsvrBindCount, rsa2048KeyExThresholdHigh=rsa2048KeyExThresholdHigh, socksMethRespSent=socksMethRespSent, netScalerEvents=netScalerEvents, clusterTable=clusterTable, lsnTotIcmpRxBytes=lsnTotIcmpRxBytes, lsnTotUdpRxBytes=lsnTotUdpRxBytes, inatTotpktreceived=inatTotpktreceived, caIoscache=caIoscache, ipTotLandattacks=ipTotLandattacks, nsLLDPStatsTxPortTable=nsLLDPStatsTxPortTable, svcGrpMemberCurClntConnections=svcGrpMemberCurClntConnections, ipTotUnknownSvcs=ipTotUnknownSvcs, cipher56BitRC2=cipher56BitRC2, aaaAuthOnlyHttpFail=aaaAuthOnlyHttpFail, caAACaudiocachebytesHR=caAACaudiocachebytesHR, policyName=policyName, sslTotNULLCiphersHigh=sslTotNULLCiphersHigh, tcpSurgeQueueLen=tcpSurgeQueueLen, tcpWaitToData=tcpWaitToData, csPipolicyDestVserverName=csPipolicyDestVserverName, certHeader=certHeader)
mibBuilder.exportSymbols("NS-ROOT-MIB", vlanTotRxBytesLow=vlanTotRxBytesLow, cacheMaxMemoryKB=cacheMaxMemoryKB, haNoHeartbeats=haNoHeartbeats, sslTotRSAAuthorizations=sslTotRSAAuthorizations, scperServiceStatisticsEntry=scperServiceStatisticsEntry, cacheTotNonParameterizedInvalidationRequests=cacheTotNonParameterizedInvalidationRequests, delCompErrReqinfoToobig=delCompErrReqinfoToobig, vserverTable=vserverTable, sslTotSSLv3Transactions=sslTotSSLv3Transactions, svcSsleRSACount=svcSsleRSACount, ifTotTxPkts=ifTotTxPkts, alarmLowThreshold=alarmLowThreshold, totPhysicalServers=totPhysicalServers, monServiceMemberTable=monServiceMemberTable, icmpTotTxBytes=icmpTotTxBytes, modeIntranetRouteAdv=modeIntranetRouteAdv, pooledLicenseCapacityNormal=pooledLicenseCapacityNormal, vserverTxBytesRateNormal=vserverTxBytesRateNormal, lsnLogTotNontcpPortblockAllocs=lsnLogTotNontcpPortblockAllocs, dstUrl=dstUrl, sslTot128BitIDEACiphers=sslTot128BitIDEACiphers, pptpStrtCtrlConnReply=pptpStrtCtrlConnReply, pqQdepth=pqQdepth, owaSupport=owaSupport, sslChipName=sslChipName, nsdnsRegisterTable=nsdnsRegisterTable, entityNewName=entityNewName, svcGrpMemberTicksSinceLastStateChange=svcGrpMemberTicksSinceLastStateChange, sslTot128BitRC4CiphersLow=sslTot128BitRC4CiphersLow, lsnGrpTotIcmpTranslBytes=lsnGrpTotIcmpTranslBytes, vsvrServiceFullName=vsvrServiceFullName, ifMinThroughput=ifMinThroughput, sysupsvcCount=sysupsvcCount, appfwappFirewallViolSignaturePerProfile=appfwappFirewallViolSignaturePerProfile, nsPqPolicyGroup=nsPqPolicyGroup, mcEncOther=mcEncOther, serviceName=serviceName, caAppleLiveStreamingVidcacheBytes=caAppleLiveStreamingVidcacheBytes, dns64TotAnswers=dns64TotAnswers, vsvrTotalPktsSentLow=vsvrTotalPktsSentLow, sslTot168Bit3DESCiphersLow=sslTot168Bit3DESCiphersLow, vsvrCurSoValue=vsvrCurSoValue, staRequestSent=staRequestSent, serverBusyErrs=serverBusyErrs, sslBeTotTLSv1ClientAuthentications=sslBeTotTLSv1ClientAuthentications, sysHardwareEncodedSerialNumber=sysHardwareEncodedSerialNumber, ipTotTxBytesHigh=ipTotTxBytesHigh, mcTotaudio=mcTotaudio, caAndroidcache=caAndroidcache, ifTxAvgBandwidthUsage=ifTxAvgBandwidthUsage, dns64TotsvrAQueries=dns64TotsvrAQueries, vsvrSslCipherBindDesc=vsvrSslCipherBindDesc, nat46TotTcp46=nat46TotTcp46, pqpolicytotClientTransactions=pqpolicytotClientTransactions, lsnGrpTcpSessRate=lsnGrpTcpSessRate, sslBeTotSessionMultiplexAttemptSuccess=sslBeTotSessionMultiplexAttemptSuccess, caAppleLiveStrmngVidcacheBytesHR=caAppleLiveStrmngVidcacheBytesHR, FeatureStatus=FeatureStatus, ifTotTxBytes=ifTotTxBytes, svcSurgeCount=svcSurgeCount, keyPath=keyPath, vsvrscpolicyDesIpAddress=vsvrscpolicyDesIpAddress, ifnicErrDisables=ifnicErrDisables, txCarrierErrors=txCarrierErrors, modeUseSrcIp=modeUseSrcIp, nsLLDPLocManAddrTable=nsLLDPLocManAddrTable, sslTotDSSAuthorizationsLow=sslTotDSSAuthorizationsLow, udpTotRxPktsLow=udpTotRxPktsLow, sslTotTLSv1RenegSessionsLow=sslTotTLSv1RenegSessionsLow, dnsTotRecUpdate=dnsTotRecUpdate, caFLVVidcacheBytesHR=caFLVVidcacheBytesHR, nsSvcGroup=nsSvcGroup, linkUp=linkUp, caADTSaudio=caADTSaudio, sslTotHwEncBE=sslTotHwEncBE, pqStatsperLBVipEntry=pqStatsperLBVipEntry, mptcpPlainackRST=mptcpPlainackRST, dnsTotAAAArecQueries=dnsTotAAAArecQueries, ifName=ifName, caLaptpdsktpBytesHR=caLaptpdsktpBytesHR, vsvrCurServicesUp=vsvrCurServicesUp, connections=connections, nsDosPolicyGroup=nsDosPolicyGroup, ipTotBadlens=ipTotBadlens, vserId=vserId, nsPolicyStatsTable=nsPolicyStatsTable, svcInetAddress=svcInetAddress, sslBeTot40BitRC4Ciphers=sslBeTot40BitRC4Ciphers, piPolicyHits=piPolicyHits, tcpErrSynInSynRcvd=tcpErrSynInSynRcvd, totalHits=totalHits, sslBeTotSessions=sslBeTotSessions, svcTxBytesRate=svcTxBytesRate, haCurDerivedInc=haCurDerivedInc, vsvrEstablishedConn=vsvrEstablishedConn, ipTotReassemblyAttempt=ipTotReassemblyAttempt, icmpTotPMTUnoLink=icmpTotPMTUnoLink, entityRxRateNormal=entityRxRateNormal, tcpCurClientConnOpening=tcpCurClientConnOpening, protocolType=protocolType, tcpTotRxPkts=tcpTotRxPkts, ActionType=ActionType, pptpStrtCtrlConnReq=pptpStrtCtrlConnReq, serviceGroupMemberTable=serviceGroupMemberTable, platformRateLimitPktDrop=platformRateLimitPktDrop, vlanTotTxPkts=vlanTotTxPkts, nsAcl6Entry=nsAcl6Entry, httpErrLargeContent=httpErrLargeContent, cacFLVVidHR=cacFLVVidHR, vserverTxBytesRate=vserverTxBytesRate, dnsCurCNAMErecord=dnsCurCNAMErecord, crProtocolType=crProtocolType, vsvrTotalServicesBound=vsvrTotalServicesBound, monitorWeight=monitorWeight, svcTotalResponseBytesHigh=svcTotalResponseBytesHigh, monitorRTO=monitorRTO, cacheTotParameterizedRequests=cacheTotParameterizedRequests, ipTotSuccReassembly=ipTotSuccReassembly, dnsServerConfig=dnsServerConfig, sslNumCardsUP=sslNumCardsUP, nsGlobalConfigSettings=nsGlobalConfigSettings, nsUdpStatsGroup=nsUdpStatsGroup, clNodeViewQuorum=clNodeViewQuorum, pbrperHits=pbrperHits, mc3PVid=mc3PVid, lsnGrpTotIcmpDrpPkts=lsnGrpTotIcmpDrpPkts, sslCipherGroupName=sslCipherGroupName, scPolicyConfig=scPolicyConfig, nsGslbGroup=nsGslbGroup, httpTotRxRequestBytesHigh=httpTotRxRequestBytesHigh, HAMode=HAMode, featurePriorityQueuing=featurePriorityQueuing, tcpReuseHit=tcpReuseHit, dnsTotInvalidQueryFormat=dnsTotInvalidQueryFormat, httpTotChunkedReqLow=httpTotChunkedReqLow, httpErrIncompleteHeaders=httpErrIncompleteHeaders, deCompTcpErrUnknown=deCompTcpErrUnknown, dnsTotErrRespForm=dnsTotErrRespForm, mapHits=mapHits, cpeExprConfigStatsEntry=cpeExprConfigStatsEntry, dnsTotQueries=dnsTotQueries, ifTotNetScalerPkts=ifTotNetScalerPkts, lsnTotTcpRxBytes=lsnTotTcpRxBytes, pqRuleName=pqRuleName, nsInatPerNatStatsEntry=nsInatPerNatStatsEntry, vsvrName=vsvrName, pq=pq, sslTotRSAAuthorizationsHigh=sslTotRSAAuthorizationsHigh, socksMethRespRcvd=socksMethRespRcvd, acl6perHits=acl6perHits, sysConfig=sysConfig, sslTot128BitRC4Ciphers=sslTot128BitRC4Ciphers, svcdospolicydosCurrentJSRate=svcdospolicydosCurrentJSRate, voltageLow=voltageLow, dosservicestatsEntry=dosservicestatsEntry, nsFiltersGroup=nsFiltersGroup, monitorFailedCode=monitorFailedCode, sysModelId=sysModelId, sslBeTot56BitRC2CiphersLow=sslBeTot56BitRC2CiphersLow, ca3PVid=ca3PVid, cipher40BitRC2=cipher40BitRC2, policyId=policyId, clViewLeader=clViewLeader, haTotStateTransitions=haTotStateTransitions, sslBeTotRSA512keyExchangesLow=sslBeTotRSA512keyExchangesLow, serverTable=serverTable, curServerConnections=curServerConnections, httpTotClenReqLow=httpTotClenReqLow, nsHttpStatsGroup=nsHttpStatsGroup, aclTotPktsAllowedHigh=aclTotPktsAllowedHigh, lldpStatsRemTablesInserts=lldpStatsRemTablesInserts, cacheTotRevalidationMiss=cacheTotRevalidationMiss, scStatistics=scStatistics, featureDeltaCompression=featureDeltaCompression, sslTotDec=sslTotDec, vserverCrpolicyEntry=vserverCrpolicyEntry, freeConnFlushMarked=freeConnFlushMarked, tcpCurServerConn=tcpCurServerConn, reuseMiss=reuseMiss, saclTotMisses=saclTotMisses, nsSysHealthDiskEntry=nsSysHealthDiskEntry, pbrStatsGroup=pbrStatsGroup, wsIpAddress=wsIpAddress, sslTotTLSv1RenegSessions=sslTotTLSv1RenegSessions, spdyTotStreams=spdyTotStreams, sslTotTLSv11Sessions=sslTotTLSv11Sessions, sslTotEnc=sslTotEnc, nsInetMaskLenth=nsInetMaskLenth, svcGroupMemberRequestRateNormal=svcGroupMemberRequestRateNormal, lsnTotRxBytes=lsnTotRxBytes, aclTotPktsDeniedHigh=aclTotPktsDeniedHigh, mcTotResponse=mcTotResponse, haErrPropTimeout=haErrPropTimeout, crbPolicyname=crbPolicyname, ipv6FragTotPktsProcessNoReass=ipv6FragTotPktsProcessNoReass, crbVServerName=crbVServerName, delCmpRatio=delCmpRatio, iohCount=iohCount, value=value, tcpCurResetCount=tcpCurResetCount, cpestatsactionEntry=cpestatsactionEntry, cpestatspolicyEntry=cpestatspolicyEntry, srcUrl=srcUrl, actionhits=actionhits, cacheTotPetRequests=cacheTotPetRequests, sslTot40BitRC2CiphersLow=sslTot40BitRC2CiphersLow, pserId=pserId, sslTotSwDecBE=sslTotSwDecBE, svcCurClntConnections=svcCurClntConnections, svcSslCipherBindName=svcSslCipherBindName, lldpRemManAddr=lldpRemManAddr, pqPolicyConfigEntry=pqPolicyConfigEntry, caAndroid=caAndroid, cipherBindServiceName=cipherBindServiceName, scPolicyConfigTable=scPolicyConfigTable, cacheTotNon304HitsLow=cacheTotNon304HitsLow, ifTotRxPkts=ifTotRxPkts, nat46TotUdp46=nat46TotUdp46, pengBytesIn=pengBytesIn, nsSysHealthTable=nsSysHealthTable, vsvrscpolicyscAverageServerTTFB=vsvrscpolicyscAverageServerTTFB, icmpTotBadPMTUIpChecksum=icmpTotBadPMTUIpChecksum, sslTotTLSv11RenegSessions=sslTotTLSv11RenegSessions, ifErrRxFCS=ifErrRxFCS, nsIpStatsGroup=nsIpStatsGroup, rnatTotTxBytes=rnatTotTxBytes, ipRnatCurSessions=ipRnatCurSessions, totNonAuthNoDatas=totNonAuthNoDatas, totReqUnparses=totReqUnparses, gslbGlobalStats=gslbGlobalStats, stringComputed=stringComputed, dnsTotArecUpdate=dnsTotArecUpdate, gslbGlobalInfo=gslbGlobalInfo, InputFormat=InputFormat, cacADTSaudioHR=cacADTSaudioHR, sslTotSessionsHigh=sslTotSessionsHigh, sslTot56BitDESCiphersLow=sslTot56BitDESCiphersLow, tcpTotSynProbe=tcpTotSynProbe, svcdospolicydosTotJSBytesSent=svcdospolicydosTotJSBytesSent, vsvrscpolicyscCurrentSurgeQClients=vsvrscpolicyscCurrentSurgeQClients, serviceDospolicyTable=serviceDospolicyTable, sslTotSSLv2TransactionsRate=sslTotSSLv2TransactionsRate, serviceRxBytesRate=serviceRxBytesRate, indexHtmlNoServed=indexHtmlNoServed, hashSHA=hashSHA, lsnCurTcpSessions=lsnCurTcpSessions, pbrName=pbrName, tcpTotClientConnClosed=tcpTotClientConnClosed, icmpTotTxPktsHigh=icmpTotTxPktsHigh, scGlobalStats=scGlobalStats, appfwappFirewallTotalViolPerProfile=appfwappFirewallTotalViolPerProfile, nsLLDPStatsTxPortEntry=nsLLDPStatsTxPortEntry, svcGroupMemberSynfloodRate=svcGroupMemberSynfloodRate, caMsftSmthStrmPlVidBytes=caMsftSmthStrmPlVidBytes)
mibBuilder.exportSymbols("NS-ROOT-MIB", lsnTotTcpTxPkts=lsnTotTcpTxPkts, dosPolDevno=dosPolDevno, portAllocFailed=portAllocFailed, nsRecQueries=nsRecQueries, domainname=domainname, destserviceport=destserviceport, callHomeUploadEvent=callHomeUploadEvent, totaltxpkts=totaltxpkts, nat64TotSessions=nat64TotSessions, sysStatistics=sysStatistics, ClusterAdminState=ClusterAdminState, tcpErrSixthRetransmissions=tcpErrSixthRetransmissions, sslTotHwDecFE=sslTotHwDecFE, pqstatistics=pqstatistics, nsPartitionName=nsPartitionName, pooledLicenseCapacityPartial=pooledLicenseCapacityPartial, sslTotSessionHits=sslTotSessionHits, policyname=policyname, svcTotalPktsRecvdLow=svcTotalPktsRecvdLow, sysHighAvailabilityMode=sysHighAvailabilityMode, aclTotHits=aclTotHits, mcIos=mcIos, tcpTotServerConnClosed=tcpTotServerConnClosed, vsvrscpolicyscTotalServerTTLB=vsvrscpolicyscTotalServerTTLB, lldpLocChassisId=lldpLocChassisId, pbrTotHits=pbrTotHits, pqpolicypqVserverIP=pqpolicypqVserverIP, monitorType=monitorType, httpTotClenRequests=httpTotClenRequests, lldpLocSysDesc=lldpLocSysDesc, lsnLogTotDeterministicDeallocs=lsnLogTotDeterministicDeallocs, vserverScpolicyEntry=vserverScpolicyEntry, mptcpCurSFConnections=mptcpCurSFConnections, appfwSQL=appfwSQL, aaaCurICAConn=aaaCurICAConn, aaaAuthOnlyHttpSuccess=aaaAuthOnlyHttpSuccess, ipTotMaxClientsLow=ipTotMaxClientsLow, scMaxConnections=scMaxConnections, csIndexVserverFullName=csIndexVserverFullName, mcMP4VidBytes=mcMP4VidBytes, sslTotSessionMissHigh=sslTotSessionMissHigh, sslBeMaxMultiplexedSessionsHigh=sslBeMaxMultiplexedSessionsHigh, sslTot40BitDESCiphersLow=sslTot40BitDESCiphersLow, rsa2048KeyExThresholdNormal=rsa2048KeyExThresholdNormal, nsInetType=nsInetType, ipv6TotNeigborDiscovered=ipv6TotNeigborDiscovered, cipher40BitRC4=cipher40BitRC4, sslBeTotTLSv1HandshakesHigh=sslBeTotTLSv1HandshakesHigh, ipTotUnsuccReassembly=ipTotUnsuccReassembly, sslBeTotSessionMultiplexAttemptsHigh=sslBeTotSessionMultiplexAttemptsHigh, vsvrTotalResponsesLow=vsvrTotalResponsesLow, appFirewallShortAvgRespTime=appFirewallShortAvgRespTime, cspolicyDestVserverName=cspolicyDestVserverName, caLaptpdektpBytes=caLaptpdektpBytes, appFirewallViolFieldformat=appFirewallViolFieldformat, ifTotXoffSent=ifTotXoffSent, sslTot56BitRC2CiphersLow=sslTot56BitRC2CiphersLow, compTcpTotalRxPackets=compTcpTotalRxPackets, svcGrpMemberActiveConn=svcGrpMemberActiveConn, cipherID=cipherID, vsvrSoThresh=vsvrSoThresh, sslTotNULLCiphers=sslTotNULLCiphers, scPolicyconfigEntry=scPolicyconfigEntry, gslbSitePublicInetAddressType=gslbSitePublicInetAddressType, cipherBindingConfigEntry=cipherBindingConfigEntry, inputFormat=inputFormat, dtlsStaPostResponseSuccess=dtlsStaPostResponseSuccess, nsLsnMappingLogStatsGroup=nsLsnMappingLogStatsGroup, vsvrCurTotalVpnUsers=vsvrCurTotalVpnUsers, clusterSyncFailure=clusterSyncFailure, sslTotDH512keyExchangesLow=sslTotDH512keyExchangesLow, staValidNoClnt=staValidNoClnt, lldpLocManAddrSubtype=lldpLocManAddrSubtype, monitorFailedStr=monitorFailedStr, vsvrSslTLSv1Protocol=vsvrSslTLSv1Protocol, serverEntry=serverEntry, vsvrscpolicyscTotalRequestBytes=vsvrscpolicyscTotalRequestBytes, mcMsSmthStrmPlVidBytespl=mcMsSmthStrmPlVidBytespl, nsCompressionStatsGroup=nsCompressionStatsGroup, sacl6TotHits=sacl6TotHits, domainNameService=domainNameService, nsPolicyEngineGroup=nsPolicyEngineGroup, sslTotTLSv12TransactionRate=sslTotTLSv12TransactionRate, vsPort=vsPort, sslV2TxCount=sslV2TxCount, appfwappFirewallViolXSSPerProfile=appfwappFirewallViolXSSPerProfile, ipTotFixHeaderFail=ipTotFixHeaderFail, dnsTotErrNoDomains=dnsTotErrNoDomains, psProtocolType=psProtocolType, soaRecQueries=soaRecQueries, sslTotRSA512keyExchangesHigh=sslTotRSA512keyExchangesHigh, sslBeTotSSLv3HandshakesLow=sslBeTotSSLv3HandshakesLow, netScalerLoginFailure=netScalerLoginFailure, svcGrpMemberTotalPktsRecvd=svcGrpMemberTotalPktsRecvd, sslTotMD5MacHigh=sslTotMD5MacHigh, nsLsnGlobalStatsGroup=nsLsnGlobalStatsGroup, vserverServiceTable=vserverServiceTable, cacheTotInvalidationRequests=cacheTotInvalidationRequests, cipher56BitDES=cipher56BitDES, ipTotDupFragments=ipTotDupFragments, scPostReqs=scPostReqs, hdrName=hdrName, icmpTotPortUnreachableRx=icmpTotPortUnreachableRx, vsvrSslCipherBindName=vsvrSslCipherBindName, cacheMaxMemoryActiveKB=cacheMaxMemoryActiveKB, cpecaActionname=cpecaActionname, sslTotRSA512keyExchangesLow=sslTotRSA512keyExchangesLow, httpTotPostsHigh=httpTotPostsHigh, loadBalancing=loadBalancing, dtlsStaReconnectTktReq=dtlsStaReconnectTktReq, svcServiceFullName=svcServiceFullName, clMasterState=clMasterState, netmask=netmask, ifLinkReinits=ifLinkReinits, clusterEntry=clusterEntry, appFirewallRet4xx=appFirewallRet4xx, phyServiceTable=phyServiceTable, dnsCurArecord=dnsCurArecord, caMP4VidcacheBytes=caMP4VidcacheBytes, sslTotMD5Mac=sslTotMD5Mac, scThresholdFail=scThresholdFail, platformRateLimitPacketDropCount=platformRateLimitPacketDropCount, featureApplicationFirewall=featureApplicationFirewall, ipv6TotLookupFailed=ipv6TotLookupFailed, acl6StatsGroup=acl6StatsGroup, crStatisticsEntry=crStatisticsEntry, sslTot128BitIDEACiphersHigh=sslTot128BitIDEACiphersHigh, dnsTotANYresponse=dnsTotANYresponse, ifMedia=ifMedia, appFirewallViolWSIViolations=appFirewallViolWSIViolations, lldpRemTablesChange=lldpRemTablesChange, newOVS=newOVS, vlanId=vlanId, servicePersistentHitsHigh=servicePersistentHitsHigh, sslEngineStatus=sslEngineStatus, dnsTotNoDataResps=dnsTotNoDataResps, sslCipherDesc=sslCipherDesc, vServerName=vServerName, dnsTotEntries=dnsTotEntries, wsMappedIpAddressRange=wsMappedIpAddressRange, reOrderInterval=reOrderInterval, sslTotSwEncBE=sslTotSwEncBE, appFirewallViolXmlSqlViolations=appFirewallViolXmlSqlViolations, dnsTotCNAMEresponse=dnsTotCNAMEresponse, nat64TotIcmpSessions=nat64TotIcmpSessions, vserverSynfloodRate=vserverSynfloodRate, sslBeTotSHAMac=sslBeTotSHAMac, inatNat46Udp64=inatNat46Udp64, sslBeTot168Bit3DESCiphers=sslBeTot168Bit3DESCiphers, lsnLogTotNontcpPortblockDeallocs=lsnLogTotNontcpPortblockDeallocs, cacheTotNonStoreAbleMisses=cacheTotNonStoreAbleMisses, dnsServer=dnsServer, dos=dos, sslTotDecBE=sslTotDecBE, dosTotConditionTriggered=dosTotConditionTriggered, vxlanTotTxBytes=vxlanTotTxBytes, lsnGrpIcmpSessRate=lsnGrpIcmpSessRate, averageCpuUtilization=averageCpuUtilization, alarmNormalThreshold=alarmNormalThreshold, siteMetricMepStatus=siteMetricMepStatus, vsvrSynfloodRate=vsvrSynfloodRate, serviceHits=serviceHits, aclTotPktsBridged=aclTotPktsBridged, sslBeTotTLSv1HandshakesLow=sslBeTotTLSv1HandshakesLow, haSyncSucceded=haSyncSucceded, udpTotTxPktsHigh=udpTotTxPktsHigh, cipher128BitRC2=cipher128BitRC2, sslBeTot128BitIDEACiphersLow=sslBeTot128BitIDEACiphersLow, nsDomainTable=nsDomainTable, httpTotResponsesLow=httpTotResponsesLow, dnsCurNSrecord=dnsCurNSrecord, appfwPolicyHit=appfwPolicyHit, mptcpTotMpcapSession=mptcpTotMpcapSession, nsTcpStatsGroup=nsTcpStatsGroup, lsnLogTotDeterministicAllocs=lsnLogTotDeterministicAllocs, destinationPort=destinationPort, sslRedirect=sslRedirect, crpolicyHitsLow=crpolicyHitsLow, appFirewallViolCSRFtag=appFirewallViolCSRFtag, aclTotPktsBridgedHigh=aclTotPktsBridgedHigh, contentFilterHits=contentFilterHits, persExchange=persExchange, monitorName=monitorName, monRespTimeoutAboveThresh=monRespTimeoutAboveThresh, cacheTotSuccessfulRevalidationHigh=cacheTotSuccessfulRevalidationHigh, pptpEchoReq=pptpEchoReq, certBindId=certBindId, sslCipherName=sslCipherName, pqpolicypqCurrentClientConnections=pqpolicypqCurrentClientConnections, modePathMTUDiscovery=modePathMTUDiscovery, cspolicyHits=cspolicyHits, aaaTotSessions=aaaTotSessions, mptcpTotPendSFReplaced=mptcpTotPendSFReplaced, certHeaderTag=certHeaderTag, netScalerConfigChange=netScalerConfigChange, sslTotRSA1024keyExchangesLow=sslTotRSA1024keyExchangesLow, crIndexVserverFullName=crIndexVserverFullName, sslTotOffloadBulkDESLow=sslTotOffloadBulkDESLow, cipherBindId=cipherBindId, domain=domain, vlanconfigTable=vlanconfigTable, pqpolicypqDropped=pqpolicypqDropped, sslTotSSLv2ClientAuthenticationsLow=sslTotSSLv2ClientAuthenticationsLow, tcpTotZombieActiveHalfCloseCltConnFlushed=tcpTotZombieActiveHalfCloseCltConnFlushed, rxCurrentPacketRate=rxCurrentPacketRate, sslTot40BitRC2Ciphers=sslTot40BitRC2Ciphers, sslTotSessionHitsLow=sslTotSessionHitsLow, sysHealthDiskSize=sysHealthDiskSize, lsnLogTotAPDMappingDeleteEntries=lsnLogTotAPDMappingDeleteEntries, txAveragePacketsSize=txAveragePacketsSize, haPeerIpAddress=haPeerIpAddress, tlsV1TxCount=tlsV1TxCount, serviceRequestRate=serviceRequestRate, allNicTotTxMbits=allNicTotTxMbits, tcpTotZombieHalfOpenCltConnFlushed=tcpTotZombieHalfOpenCltConnFlushed, tcpErrSeventhRetransmissions=tcpErrSeventhRetransmissions, dnsReqHit=dnsReqHit, nsInatPerNat46StatsEntry=nsInatPerNat46StatsEntry, lsnLogTotIcmpMappingCreateEntries=lsnLogTotIcmpMappingCreateEntries, cpsConnFailure=cpsConnFailure, svcdospolicydosTotNonGetPostRequests=svcdospolicydosTotNonGetPostRequests, deCompTcpErrMemory=deCompTcpErrMemory, alarmCurrentValue=alarmCurrentValue, dnsTotAuthAns=dnsTotAuthAns, socksServerError=socksServerError, svcSslDHFilePath=svcSslDHFilePath, cacheTotRevalidationMissLow=cacheTotRevalidationMissLow, appfwCookie=appfwCookie, tcpCurPendingConn=tcpCurPendingConn, tcpErrFastRetransmissions=tcpErrFastRetransmissions, csRequestHit=csRequestHit, caTotputobjreq=caTotputobjreq, compTotalDataCompressionRatio=compTotalDataCompressionRatio, ipTotBadlensHigh=ipTotBadlensHigh, appFirewallResponses=appFirewallResponses, featurePLATFORM=featurePLATFORM, lldpRemChassisId=lldpRemChassisId, nsCPUusage=nsCPUusage, nsvPathStatsGroup=nsvPathStatsGroup, appfwXMLSoapFault=appfwXMLSoapFault, dnsCurPTRrecord=dnsCurPTRrecord, vServerRequestRateNormal=vServerRequestRateNormal, sslBeTotRSAAuthorizations=sslBeTotRSAAuthorizations, acl6FullName=acl6FullName, udpRateInterval=udpRateInterval, wsudpgroup=wsudpgroup, sslTotTransactions=sslTotTransactions, appFirewallViolXmlAttachmentViolations=appFirewallViolXmlAttachmentViolations, psName=psName, ipTotZeroFragmentLen=ipTotZeroFragmentLen, mptcpErrDataFinpassive=mptcpErrDataFinpassive, sslBeTotTLSv12ClientAuthentications=sslBeTotTLSv12ClientAuthentications, dnsTotCNAMErecQueries=dnsTotCNAMErecQueries, interfaceBWUseHigh=interfaceBWUseHigh)
mibBuilder.exportSymbols("NS-ROOT-MIB", mptcpCurSessWithoutSFs=mptcpCurSessWithoutSFs, txRawBandwidthUsage=txRawBandwidthUsage, haTotPktRx=haTotPktRx, sslTotOffloadBulkDES=sslTotOffloadBulkDES, svcscpolicyAvgServerTransactionTime=svcscpolicyAvgServerTransactionTime, lldpStatsRxPortFramesErrors=lldpStatsRxPortFramesErrors, authRSA=authRSA, svcTotalSynsRecvd=svcTotalSynsRecvd, ifErrRxFIFO=ifErrRxFIFO, lsnGrpTotTcpTranslPkts=lsnGrpTotTcpTranslPkts, dosstatistics=dosstatistics, dosqdepth=dosqdepth, latency=latency, clPeerIP=clPeerIP, lldpRemSysDesc=lldpRemSysDesc, svcscpolicyscCurrentWaitingClients=svcscpolicyscCurrentWaitingClients, icmpTotRxEchoReplyHigh=icmpTotRxEchoReplyHigh, svcState=svcState, mptcpInfiniteMapRecvd=mptcpInfiniteMapRecvd, psIpAddress=psIpAddress, ClusterCurHealth=ClusterCurHealth, cookieVersionInserted=cookieVersionInserted, certBindingConfigTable=certBindingConfigTable, ifErrTxFIFO=ifErrTxFIFO, lsnTotNAT64UdpTxBytes=lsnTotNAT64UdpTxBytes, siteIP=siteIP, tcpErrStrayPkt=tcpErrStrayPkt, sslTotSSLv3TransactionsHigh=sslTotSSLv3TransactionsHigh, httpTot10Requests=httpTot10Requests, sslTot40BitDESCiphers=sslTot40BitDESCiphers, caotherBytesHR=caotherBytesHR, dnsTotAnswers=dnsTotAnswers, ifnicTxStalls=ifnicTxStalls, svcTicksSinceLastStateChange=svcTicksSinceLastStateChange, reqaction=reqaction, tcpErrRetransmitGiveUp=tcpErrRetransmitGiveUp, dnskeyExpiry=dnskeyExpiry, crmMapName=crmMapName, entityNameChanged=entityNameChanged, lldpRemManAddrIfSubtype=lldpRemManAddrIfSubtype, sessReqs=sessReqs, sslBeTotSSLv3ClientAuthentications=sslBeTotSSLv3ClientAuthentications, inatNat46Drop46=inatNat46Drop46, rxCrcErrors=rxCrcErrors, dnsTotErrAliasEx=dnsTotErrAliasEx, newCCOIP=newCCOIP, actionType=actionType, sslBeTotTLSv1ClientAuthenticationsHigh=sslBeTotTLSv1ClientAuthenticationsHigh, dnsTotOtherErrors=dnsTotOtherErrors, reqrule=reqrule, lsnTotNAT64IcmpRxPkts=lsnTotNAT64IcmpRxPkts, icmpTotNeedFragRx=icmpTotNeedFragRx, sslTot168Bit3DESCiphers=sslTot168Bit3DESCiphers, lbvsvrPersistanceType=lbvsvrPersistanceType, ipTotRxMbitsHigh=ipTotRxMbitsHigh, tcpTotZombieCltConnFlushed=tcpTotZombieCltConnFlushed, sslTotSSLv2TransactionsLow=sslTotSSLv2TransactionsLow, icmpTotInvalidTcpSeqno=icmpTotInvalidTcpSeqno, lldpRemPortId=lldpRemPortId, httpTotTxRequestBytesHigh=httpTotTxRequestBytesHigh, pqPriority2Requests=pqPriority2Requests, delCompTcpTxPackets=delCompTcpTxPackets, dnsTotPTRrecQueries=dnsTotPTRrecQueries, drtmCumResponseTimeout=drtmCumResponseTimeout, temperatureCpuNormal=temperatureCpuNormal, entityup=entityup, sslTotTLSv1HandshakesLow=sslTotTLSv1HandshakesLow, piPolName=piPolName, sslBeSessionsReplacedLow=sslBeSessionsReplacedLow, inatNat46Tcp64=inatNat46Tcp64, vPathTotL3CntrlPkts=vPathTotL3CntrlPkts, tcpWaitToSyn=tcpWaitToSyn, sslBeMaxMultiplexedSessions=sslBeMaxMultiplexedSessions, tcpErrSynRetry=tcpErrSynRetry, dnsErrNullAttack=dnsErrNullAttack, tcpErrRstThreshold=tcpErrRstThreshold, svcscpolicyscTotalRequestsReceived=svcscpolicyscTotalRequestsReceived, modeClientKeepAlive=modeClientKeepAlive, crPolBindConfigTable=crPolBindConfigTable, appFirewallRequests=appFirewallRequests, featureContentSwitching=featureContentSwitching, sslBeTotSSLv3Handshakes=sslBeTotSSLv3Handshakes, vsvrFullName=vsvrFullName, stickyPrimary=stickyPrimary, sslTotTLSv1RenegSessionsHigh=sslTotTLSv1RenegSessionsHigh, clNodeEffectiveHealth=clNodeEffectiveHealth, lsnLogTotUdpSessionDeleteEntries=lsnLogTotUdpSessionDeleteEntries, svcTotalRequests=svcTotalRequests, sslTotOffloadSignRSALow=sslTotOffloadSignRSALow, haNicMonitorSucceeded=haNicMonitorSucceeded, vserverCipherBindingEntry=vserverCipherBindingEntry, virServiceName=virServiceName, ipv6TotLookupDone=ipv6TotLookupDone, caTotrespbytes=caTotrespbytes, nat46TotIcmp46=nat46TotIcmp46, sslTotTLSv12Transactions=sslTotTLSv12Transactions, wsIfStatsTable=wsIfStatsTable, cacheTotSqlHits=cacheTotSqlHits, svcTdId=svcTdId, totalRequests=totalRequests, ifTxMultiCollisionErrors=ifTxMultiCollisionErrors, ipv6FragTotRxPkts=ipv6FragTotRxPkts, cacheTotNon304Hits=cacheTotNon304Hits, lbMethod=lbMethod, appFirewallViolCreditCard=appFirewallViolCreditCard, cacheRecentPercentSuccessfulRevalidation=cacheRecentPercentSuccessfulRevalidation, httpTotChunkedResponsesHigh=httpTotChunkedResponsesHigh, svcMaxClients=svcMaxClients, sslBeTot56BitDESCiphersHigh=sslBeTot56BitDESCiphersHigh, acAclName=acAclName, lldpStatsRxPortTLVsDiscardedTotal=lldpStatsRxPortTLVsDiscardedTotal, httpErrServerBusyHigh=httpErrServerBusyHigh, icmpTotNonFirstIpFrag=icmpTotNonFirstIpFrag, tcpErrAnyPortFail=tcpErrAnyPortFail, svcscpolicyPrimaryIPAddress=svcscpolicyPrimaryIPAddress, saclsCount=saclsCount, piPolFullName=piPolFullName, sslBeTotRSAAuthorizationsLow=sslBeTotRSAAuthorizationsLow, nat46TotTcp64=nat46TotTcp64, nsPbr6Entry=nsPbr6Entry, aclHits=aclHits, lsnTotDSLiteRxPkts=lsnTotDSLiteRxPkts, interfaceBWUseNormal=interfaceBWUseNormal, crbPolicyHits=crbPolicyHits, eRSACount=eRSACount, modeStaticRouteAdv=modeStaticRouteAdv, cmpTotRequests=cmpTotRequests, featureGslb=featureGslb, sslTotEncHw=sslTotEncHw, pqpolicyQdepth=pqpolicyQdepth, sysHardwareVersionId=sysHardwareVersionId, cacheTotParameterizedHits=cacheTotParameterizedHits, serverFullName=serverFullName, nsCPUname=nsCPUname, vsvrscpolicyscTotalServerTTFB=vsvrscpolicyscTotalServerTTFB, cswConfigEntry=cswConfigEntry, lsnGrpCurSubscribers=lsnGrpCurSubscribers, ca3GPVidHR=ca3GPVidHR, svcGrpMemberGroupName=svcGrpMemberGroupName, totalopenconnection=totalopenconnection, contentFiltersEntry=contentFiltersEntry, svcscpolicyscPhysicalServicePort=svcscpolicyscPhysicalServicePort, lsnGrpTotTranslPkts=lsnGrpTotTranslPkts, rnatTotTxPkts=rnatTotTxPkts, virServiceEntry=virServiceEntry, cpecDevno=cpecDevno, sslBeTotSessionMultiplexAttemptFailsHigh=sslBeTotSessionMultiplexAttemptFailsHigh, siteMetricExchange=siteMetricExchange, httpTot11Responses=httpTot11Responses, nsLsnNAT64GlobalStatsGroup=nsLsnNAT64GlobalStatsGroup, pqpolicyconfigEntry=pqpolicyconfigEntry, port=port, lsnLogTotTcpPortblockDeallocs=lsnLogTotTcpPortblockDeallocs, vsvrSvcGrpBindCount=vsvrSvcGrpBindCount, acl6TotPktsNAT64=acl6TotPktsNAT64, lldpRemLocalPortNum=lldpRemLocalPortNum, lldpStatsRemTablesAgeouts=lldpStatsRemTablesAgeouts, oldVridPriority=oldVridPriority, lsnNAT64IcmpSessionsRate=lsnNAT64IcmpSessionsRate, servicePersistentHits=servicePersistentHits, svcscpolicyTotOpenConn=svcscpolicyTotOpenConn, vxlanTotRxBytes=vxlanTotRxBytes, acl6Priority=acl6Priority, lsnTotNAT64IcmpTxBytes=lsnTotNAT64IcmpTxBytes, cipherName=cipherName, nsScPolicyGroup=nsScPolicyGroup, tcpMaxReqsperConn=tcpMaxReqsperConn, txAveragePacketRate=txAveragePacketRate, mcMsSmthStrVidpl=mcMsSmthStrVidpl, svcTotalResponses=svcTotalResponses, ifErrTxDeferred=ifErrTxDeferred, scRuleName=scRuleName, ipRnatTotTxSyn=ipRnatTotTxSyn, newVridPriority=newVridPriority, svcdosQDepth=svcdosQDepth, lbvserverEntry=lbvserverEntry, dnsTotCacheFlush=dnsTotCacheFlush, appfwappFirewallViolWSIViolationsPerProfile=appfwappFirewallViolWSIViolationsPerProfile, ipTotRxBytesHigh=ipTotRxBytesHigh, sslCertKeyEntry=sslCertKeyEntry, vsvrState=vsvrState, vserverCsPiPolicyEntry=vserverCsPiPolicyEntry, udpTotRxPkts=udpTotRxPkts, cipherId=cipherId, serviceHitsHigh=serviceHitsHigh, partitionCONNLimitNormal=partitionCONNLimitNormal, pqPolicyConfigTable=pqPolicyConfigTable, appfwappFirewallViolRefererHeaderPerProfile=appfwappFirewallViolRefererHeaderPerProfile, vsvrscpolicyscTotalResponsesReceived=vsvrscpolicyscTotalResponsesReceived, featureSSLVPN=featureSSLVPN, persistanceType=persistanceType, tcpTotZombieActiveHalfCloseSvrConnFlushed=tcpTotZombieActiveHalfCloseSvrConnFlushed, nsTdInetBridgeGroup=nsTdInetBridgeGroup, nsLsnSessionLogStatsGroup=nsLsnSessionLogStatsGroup, txMultiCollisionsErrors=txMultiCollisionsErrors, cacheRecentPercentStoreAbleMiss=cacheRecentPercentStoreAbleMiss, pqpolicytotClientTransactionTime=pqpolicytotClientTransactionTime, sslTotDH1024keyExchangesHigh=sslTotDH1024keyExchangesHigh, aclTotPktsReusedHigh=aclTotPktsReusedHigh, featureGSLBProximity=featureGSLBProximity, inatTotHits=inatTotHits, sslTotTLSv1TransactionsRate=sslTotTLSv1TransactionsRate, maxConnections=maxConnections, lsnGrpTotUdpDrpBytes=lsnGrpTotUdpDrpBytes, rnatTotTxSyn=rnatTotTxSyn, sysHealthDiskPerusage=sysHealthDiskPerusage, scperPolicyStatisticsEntry=scperPolicyStatisticsEntry, sslTotTLSv1Handshakes=sslTotTLSv1Handshakes, tcpCurServerConnEstablished=tcpCurServerConnEstablished, sslBeTotDH1024keyExchangesLow=sslBeTotDH1024keyExchangesLow, txCurrentPacketRate=txCurrentPacketRate, sslTot64BitRC4Ciphers=sslTot64BitRC4Ciphers, scResetStats=scResetStats, monitorMaxClient=monitorMaxClient, udpTotUnknownSvcPktsLow=udpTotUnknownSvcPktsLow, oldCCOIP=oldCCOIP, mptcpErrInvalCookie=mptcpErrInvalCookie, vlanAliasName=vlanAliasName, dnsTotPTRrecUpdate=dnsTotPTRrecUpdate, featureHtmlInjection=featureHtmlInjection, deCompTcpRxBytes=deCompTcpRxBytes, sslTotSHAMacHigh=sslTotSHAMacHigh, lsnLogTotPortblockAllocs=lsnLogTotPortblockAllocs, crMapName=crMapName, ipConflict=ipConflict, totalContentLenResponses=totalContentLenResponses, compactFlashErrors=compactFlashErrors, svcdospolicydosPhysicalServicePort=svcdospolicydosPhysicalServicePort, udpTotRxPktsHigh=udpTotRxPktsHigh, sysHealthPowerSupplyStatus=sysHealthPowerSupplyStatus, svcIpAddress=svcIpAddress, dnsTotNonAuthNoDatas=dnsTotNonAuthNoDatas, nsLLDPLocPortEntry=nsLLDPLocPortEntry, svcdospolicydosCurServerRespRate=svcdospolicydosCurServerRespRate, psId=psId, mptcpErrFastClose=mptcpErrFastClose, wsIfMedia=wsIfMedia, vsvrscpolicyscCurrentClientConnections=vsvrscpolicyscCurrentClientConnections, psVsIpAddress=psVsIpAddress, tcpActiveServerConn=tcpActiveServerConn, crMapSrcName=crMapSrcName, authorizationStatus=authorizationStatus, svcGroupMemberTxBytesRate=svcGroupMemberTxBytesRate, sslBeTot40BitRC2CiphersLow=sslBeTot40BitRC2CiphersLow, svcGroupMemberTxBytesRateNormal=svcGroupMemberTxBytesRateNormal, EntityState=EntityState, phyServiceEntry=phyServiceEntry, crVsMiss=crVsMiss, dospolicyconfigEntry=dospolicyconfigEntry, ipTotFragments=ipTotFragments, ipMode=ipMode, dnsTotSRVrecQueries=dnsTotSRVrecQueries, nsLsnGroupTable=nsLsnGroupTable, dnsTotMultiQuery=dnsTotMultiQuery)
mibBuilder.exportSymbols("NS-ROOT-MIB", svcGrpMembertotalJsTransactions=svcGrpMembertotalJsTransactions, cipInsertionHeader=cipInsertionHeader, caMP4Vid=caMP4Vid, scDelayThreshold=scDelayThreshold, mccApleLiveStrmngVid=mccApleLiveStrmngVid, cacheCompressedBytesServedLow=cacheCompressedBytesServedLow, monitorMemberEntry=monitorMemberEntry, dosDevno=dosDevno, appFirewallViolSafeObject=appFirewallViolSafeObject, caOtherBytes=caOtherBytes, vsvrTotalServers=vsvrTotalServers, appfwXMLDos=appfwXMLDos, lsnTotDSLiteRxBytes=lsnTotDSLiteRxBytes, appfwappFirewallViolSQLPerProfile=appfwappFirewallViolSQLPerProfile, vlancDevno=vlancDevno, nsSysGroup=nsSysGroup, sslCertPath=sslCertPath, httpErrIncompleteHeadersHigh=httpErrIncompleteHeadersHigh, icmpTotTxPktsLow=icmpTotTxPktsLow, customEntries=customEntries, lsnTotTxPkts=lsnTotTxPkts, sslTotSSLv2Handshakes=sslTotSSLv2Handshakes, gslbSitesTable=gslbSitesTable, deCompTcpBandwidthSaving=deCompTcpBandwidthSaving, tcpTotTxBytes=tcpTotTxBytes, crpolicyName=crpolicyName, aaaTotSessionTimeout=aaaTotSessionTimeout, vlancInterfaces=vlancInterfaces, vlanTotDroppedPktsHigh=vlanTotDroppedPktsHigh, haLicenseCheck=haLicenseCheck, expressionName=expressionName, dnsTotUpdates=dnsTotUpdates, sslBeTotNULLAuthorizationsLow=sslBeTotNULLAuthorizationsLow, httpTotPosts=httpTotPosts, svcGrpMemberTotalPktsSent=svcGrpMemberTotalPktsSent, cipInsertionStatus=cipInsertionStatus, gslbVipName=gslbVipName, icmpTotRxPkts=icmpTotRxPkts, featureResponder=featureResponder, sslTotSSLv3TransactionsLow=sslTotSSLv3TransactionsLow, mptcpErrFastCloseKey=mptcpErrFastCloseKey, cachePercentStoreAbleMiss=cachePercentStoreAbleMiss, server=server, vlanTotTxBytes=vlanTotTxBytes, tcpTotZombieHalfOpenSvrConnFlushed=tcpTotZombieHalfOpenSvrConnFlushed, sslTot128BitRC4CiphersHigh=sslTot128BitRC4CiphersHigh, sslBeTot64BitRC4CiphersLow=sslBeTot64BitRC4CiphersLow, nsLLDPStatsGroup=nsLLDPStatsGroup, lsnLogTotEIMappingDeleteEntries=lsnLogTotEIMappingDeleteEntries, cacheNumMBSavedOnDisk=cacheNumMBSavedOnDisk, vsvrTotalPktsSent=vsvrTotalPktsSent, lsnGrpTotUdpDrpPkts=lsnGrpTotUdpDrpPkts, svcscpolicyscCurrentSurgeQClients=svcscpolicyscCurrentSurgeQClients, tcpErrSentRst=tcpErrSentRst, totaltransaction=totaltransaction, serviceDospolicyEntry=serviceDospolicyEntry, cpuSpeedMHz=cpuSpeedMHz, httpErrServerBusyLow=httpErrServerBusyLow, dnsTotAAAArecFailed=dnsTotAAAArecFailed, svcSslCipherBindDesc=svcSslCipherBindDesc, iipDisabledMIPused=iipDisabledMIPused, maxTcpConnections=maxTcpConnections, pooledLicenseGraceStarted=pooledLicenseGraceStarted, certBindServiceType=certBindServiceType, scPolicyStatistics=scPolicyStatistics, vlanTotRxPktsHigh=vlanTotRxPktsHigh, sslCrlName=sslCrlName, delCompFirstAccess=delCompFirstAccess, scAltContUrls=scAltContUrls, vserverAdvanceSslConfigTable=vserverAdvanceSslConfigTable, crPolBindConfigEntry=crPolBindConfigEntry, svcGrpMemberServiceType=svcGrpMemberServiceType, lldpRemPortIdSubtype=lldpRemPortIdSubtype, curPhysicalServers=curPhysicalServers, appFirewallLongAvgRespTime=appFirewallLongAvgRespTime, voltageHigh=voltageHigh, aclName=aclName, cipherGroupName=cipherGroupName, mptcpTotMpJoinSyn=mptcpTotMpJoinSyn, ifThroughput=ifThroughput, dnsTotAAAArecUpdate=dnsTotAAAArecUpdate, svcgroupCount=svcgroupCount, svcTotalPktsSent=svcTotalPktsSent, icmpTotRxBytes=icmpTotRxBytes, sslBeTotTLSv11Sessions=sslBeTotTLSv11Sessions, modeTcpBuffering=modeTcpBuffering, httpErrLargeChunk=httpErrLargeChunk, appFirewallStatistics=appFirewallStatistics, certKeyID=certKeyID, groupnon304hit=groupnon304hit, memoryUtilization=memoryUtilization, cacheTotHits=cacheTotHits, vsvrCursubflowConn=vsvrCursubflowConn, sslBeTot56BitRC4CiphersHigh=sslBeTot56BitRC4CiphersHigh, cacheBytesServed=cacheBytesServed, haBadSecState=haBadSecState, vsvrCurServicesTransToOutOfSvc=vsvrCurServicesTransToOutOfSvc, lldpRemPortDesc=lldpRemPortDesc, mcEncOthStream=mcEncOthStream, ipConflictAddr=ipConflictAddr, MonitorType=MonitorType, ipv6FragZeroLenPkt=ipv6FragZeroLenPkt, sslTotSHAMac=sslTotSHAMac, cspolicyHitsLow=cspolicyHitsLow, sslCertificateExpiry=sslCertificateExpiry, ifTotRxMbits=ifTotRxMbits, nsNat64StatsGroup=nsNat64StatsGroup, sslTotDHAuthorizationsHigh=sslTotDHAuthorizationsHigh, sslTotRenegSessionsHigh=sslTotRenegSessionsHigh, caTotlookupstoremiss=caTotlookupstoremiss, lsnCurSubscribers=lsnCurSubscribers, drtmActiveMonitors=drtmActiveMonitors, dnsTotMXresponse=dnsTotMXresponse, lsnTotTxBytes=lsnTotTxBytes, httpTot10Responses=httpTot10Responses, compTcpTotalTxPackets=compTcpTotalTxPackets, deCompTcpTxPackets=deCompTcpTxPackets, serviceAdvanceSslConfigTable=serviceAdvanceSslConfigTable, iipFailedMIPused=iipFailedMIPused, lldpLocSysCapEnabled=lldpLocSysCapEnabled, maxClients=maxClients, mcADTSaudio=mcADTSaudio, delCompBaseTcpTxBytes=delCompBaseTcpTxBytes, cookieSignatureReject=cookieSignatureReject, vserverEntry=vserverEntry, sslCurQSize=sslCurQSize, totalDataCompressionRatio=totalDataCompressionRatio, mcAppleLiveStreamingPlaylistVidBytespl=mcAppleLiveStreamingPlaylistVidBytespl, cacheNumMBWrittenToDisk=cacheNumMBWrittenToDisk, cipherbDesc=cipherbDesc, vserverCspolicyTable=vserverCspolicyTable, appfwCSRFTag=appfwCSRFTag, vlanstatsEntry=vlanstatsEntry, lbvsvrActiveConn=lbvsvrActiveConn, ca3GPVidcacheBytesHR=ca3GPVidcacheBytesHR, cacheErrMemAllocHigh=cacheErrMemAllocHigh, bindId=bindId, powerSupplyNormal=powerSupplyNormal, sslCardFailed=sslCardFailed, appfwprofileName=appfwprofileName, tcpTotSvrFin=tcpTotSvrFin, sslTotECDHE224keyExchanges=sslTotECDHE224keyExchanges, cacheTotParameterizedInvalidationRequests=cacheTotParameterizedInvalidationRequests, cswIndex=cswIndex, lsnGrpCurUdpSessions=lsnGrpCurUdpSessions, cacheUtilizedMemoryKB=cacheUtilizedMemoryKB, icmpTotPortUnreachableTx=icmpTotPortUnreachableTx, cacheTot304Hits=cacheTot304Hits, sslTot256BitAESGCMCiphers=sslTot256BitAESGCMCiphers, pbrTotPktsAllowed=pbrTotPktsAllowed, caApleLiveStrmngPlVidcacheBytesHR=caApleLiveStrmngPlVidcacheBytesHR, svcTotalSynsRecvdHigh=svcTotalSynsRecvdHigh, vsvrCurEffState=vsvrCurEffState, vserverCsPiPolicyTable=vserverCsPiPolicyTable, alarmVipRhiInetAddressType=alarmVipRhiInetAddressType, nsLLDPStatsRxPortTable=nsLLDPStatsRxPortTable, entityTxRate=entityTxRate, svcGroupMemberRxBytesRateNormal=svcGroupMemberRxBytesRateNormal, sslTotECDHE384keyExchanges=sslTotECDHE384keyExchanges, sslCrlInputFormat=sslCrlInputFormat, dospolicyconfigTable=dospolicyconfigTable, reuseHit=reuseHit, serverTdId=serverTdId, ruleName=ruleName, totAuthAns=totAuthAns, nsdnsRegisterEntry=nsdnsRegisterEntry, pbr6Priority=pbr6Priority, featureBGP=featureBGP, nat46TotDrop64=nat46TotDrop64, ipTotBadlensLow=ipTotBadlensLow, svcgrpSvcGroupFullName=svcgrpSvcGroupFullName, ifErrTxHeartBeat=ifErrTxHeartBeat, ipTotBadChecksums=ipTotBadChecksums, vridBoundVIP=vridBoundVIP, sslBeTotSessionMultiplexAttemptFailsLow=sslBeTotSessionMultiplexAttemptFailsLow, vsvrTotalSynsRecvd=vsvrTotalSynsRecvd, lsnPortQuotaExceed=lsnPortQuotaExceed, sslTotEncFE=sslTotEncFE, wsFailOver=wsFailOver, haPeerState=haPeerState, tcpErrFinRetry=tcpErrFinRetry, sysHardwareSerialNumber=sysHardwareSerialNumber, sacl6StatsGroup=sacl6StatsGroup, dnsTotAuthNoNames=dnsTotAuthNoNames, acl6TotPktsAllowed=acl6TotPktsAllowed, lsnTotNAT64IcmpRxBytes=lsnTotNAT64IcmpRxBytes, udpCurRateThresholdExceedsHigh=udpCurRateThresholdExceedsHigh, pbr6TotNullDrop=pbr6TotNullDrop, lsnGrpCurIcmpSessions=lsnGrpCurIcmpSessions, sslTotTLSv1HandshakesHigh=sslTotTLSv1HandshakesHigh, flushThresReached=flushThresReached, nsPolicyInfrastructureGroup=nsPolicyInfrastructureGroup, cpestatspolicyTable=cpestatspolicyTable, actionname=actionname, dnsTotPTRresponse=dnsTotPTRresponse, udpTotTxBytesHigh=udpTotTxBytesHigh, lsnTotIcmpTxPkts=lsnTotIcmpTxPkts, nsRoot=nsRoot, vserverPqpolicyTable=vserverPqpolicyTable, rsa1024KeyExThresholdHigh=rsa1024KeyExThresholdHigh, cipher168Bit3DES=cipher168Bit3DES, rxFrameErrors=rxFrameErrors, svcGrpMemberTotalRequests=svcGrpMemberTotalRequests, svcGrpMemberTotalSynsRecvd=svcGrpMemberTotalSynsRecvd, sslTotSSLv3TransactionsRate=sslTotSSLv3TransactionsRate, crVirServiceName=crVirServiceName, svcGrpMemberServerName=svcGrpMemberServerName, sslBeTotTLSv1SessionsLow=sslBeTotTLSv1SessionsLow, totUnsupportedQueries=totUnsupportedQueries, svcTotalRequestsHigh=svcTotalRequestsHigh, nsTdInetType=nsTdInetType, sslBeTotRSA1024keyExchangesLow=sslBeTotRSA1024keyExchangesLow, sslCardStatus=sslCardStatus, sslCurSessions=sslCurSessions, totalIncompleteResponses=totalIncompleteResponses, svcscpolicyscCurrentClientConnections=svcscpolicyscCurrentClientConnections, dnsServerZoneEntry=dnsServerZoneEntry, vPathTotL3DataRx=vPathTotL3DataRx, netScaler=netScaler, nsPbrTable=nsPbrTable, svcGrpMemberTdId=svcGrpMemberTdId, dnsTotCNAMErecUpdate=dnsTotCNAMErecUpdate, sslTot56BitRC4CiphersHigh=sslTot56BitRC4CiphersHigh, lldpStatsRxPortFramesTotal=lldpStatsRxPortFramesTotal, lldpLocManAddr=lldpLocManAddr, freeConnEstd=freeConnEstd, cacheNumCached=cacheNumCached, svcSslv2Protocol=svcSslv2Protocol, sslBeTotDH512keyExchangesLow=sslBeTotDH512keyExchangesLow, l2Mode=l2Mode, vsvrTotalRequestsLow=vsvrTotalRequestsLow, sslTotSessionsLow=sslTotSessionsLow, icmpTotRxEcho=icmpTotRxEcho, delCompErrNostoreMiss=delCompErrNostoreMiss, qosdVersion=qosdVersion, tcpTotSynFlush=tcpTotSynFlush, ifTxLateCollisions=ifTxLateCollisions, maxClientsNormal=maxClientsNormal, tcpTotTxPkts=tcpTotTxPkts, sslTotNewSessionsHigh=sslTotNewSessionsHigh, vsvrCurMptcpSessions=vsvrCurMptcpSessions, nsRnatStatsGroup=nsRnatStatsGroup, sslBeTot40BitDESCiphersHigh=sslBeTot40BitDESCiphersHigh, scUrlHits=scUrlHits, caOthercache=caOthercache, cpeconfigactionEntry=cpeconfigactionEntry, dnsCurMXrecord=dnsCurMXrecord, alarmRateLmtThresholdExceeded=alarmRateLmtThresholdExceeded, mcAppleLiveStreamingVidBytes=mcAppleLiveStreamingVidBytes, pengPolicyName=pengPolicyName, sslTotTransactionsRate=sslTotTransactionsRate, svcscpolicyscTotalServerTransactions=svcscpolicyscTotalServerTransactions, lsnCurIcmpSessions=lsnCurIcmpSessions, featureAPPFLOW=featureAPPFLOW)
mibBuilder.exportSymbols("NS-ROOT-MIB", sslTotSSLv2Transactions=sslTotSSLv2Transactions, appfwBufferOverflow=appfwBufferOverflow, delCompErrSessallocFail=delCompErrSessallocFail, cpsConnSuccess=cpsConnSuccess, caAppleLiveStreamingPlaylistVidBytes=caAppleLiveStreamingPlaylistVidBytes, altContUrls=altContUrls, rsa1024KeyExThresholdNormal=rsa1024KeyExThresholdNormal, sslBeTot128BitRC2CiphersHigh=sslBeTot128BitRC2CiphersHigh, sslBeTotDH512keyExchanges=sslBeTotDH512keyExchanges, dnskeyUnitsOfExpiry=dnskeyUnitsOfExpiry, cacFLVVid=cacFLVVid, vsvrCurSrvrConnections=vsvrCurSrvrConnections, svcGrpMemberGroupFullName=svcGrpMemberGroupFullName, ipTotRxPkts=ipTotRxPkts, cipher128BitRC4=cipher128BitRC4, compRatio=compRatio, cpuUtilization=cpuUtilization, caMP4VidcacheBytesHR=caMP4VidcacheBytesHR, svcGroupMemberMaxClientsNormal=svcGroupMemberMaxClientsNormal, vsMiss=vsMiss, sslTotDH2048keyExchangesLow=sslTotDH2048keyExchangesLow, sslBeTotDHAuthorizationsLow=sslBeTotDHAuthorizationsLow, cacheTotStoreAbleMissesHigh=cacheTotStoreAbleMissesHigh, appfwappFirewallViolCreditCardPerProfile=appfwappFirewallViolCreditCardPerProfile, averageCpuUtilizationNormal=averageCpuUtilizationNormal, cswVsIpAddress=cswVsIpAddress, nsPbr6Table=nsPbr6Table, serverInetAddressType=serverInetAddressType, dnsCurNoAuthEntries=dnsCurNoAuthEntries, sslV3TxCount=sslV3TxCount, ca3GPVid=ca3GPVid, vsvrTotalPktsRecvd=vsvrTotalPktsRecvd, svcTotalResponseBytesLow=svcTotalResponseBytesLow, vserverServiceEntry=vserverServiceEntry, appfwStartUrl=appfwStartUrl, nsInetVlan=nsInetVlan, httpTotOthersHigh=httpTotOthersHigh, mptcpMPFailRecvd=mptcpMPFailRecvd, nsTdInetFreePorts=nsTdInetFreePorts, vsvrCurSslVpnUsers=vsvrCurSslVpnUsers, tcpErrFirstRetransmissions=tcpErrFirstRetransmissions, delCompTcpTxBytes=delCompTcpTxBytes, tcpErrSvrOutOfOrder=tcpErrSvrOutOfOrder, staValidNoEst=staValidNoEst, haSyncFailure=haSyncFailure, sslTotExpiredSessionsLow=sslTotExpiredSessionsLow, sslBeTotSessionsHigh=sslBeTotSessionsHigh, nsIPAddressType=nsIPAddressType, mcEncAndroid=mcEncAndroid, dtlsStaValidationError=dtlsStaValidationError, nsVserverGroup=nsVserverGroup, tcpErrPartialRetrasmit=tcpErrPartialRetrasmit, lsnCurDSLiteSessions=lsnCurDSLiteSessions, vsvrSsleRSA=vsvrSsleRSA, vlanTaggedInterfaces=vlanTaggedInterfaces, memFailFlushTrigger=memFailFlushTrigger, lsnLogTotIcmpMappingDeleteEntries=lsnLogTotIcmpMappingDeleteEntries, lsnTotNAT64UdpRxPkts=lsnTotNAT64UdpRxPkts, aggregateBWUseHigh=aggregateBWUseHigh, phyIpAddress=phyIpAddress, sslBeTot128BitRC2Ciphers=sslBeTot128BitRC2Ciphers, ipFreePorts=ipFreePorts, dnsTotResponses=dnsTotResponses, sslTotOffloadSignRSA=sslTotOffloadSignRSA, cacheBytesServedHigh=cacheBytesServedHigh, pptpWanErrNotify=pptpWanErrNotify, lsnTotNAT64TcpTxPkts=lsnTotNAT64TcpTxPkts, icmpCurRateCounter=icmpCurRateCounter, featureAGEE=featureAGEE, httpTotClenResponsesLow=httpTotClenResponsesLow, pptpStpCtrlConnReply=pptpStpCtrlConnReply, vlanTotRxPktsLow=vlanTotRxPktsLow, httpTotTxResponseBytesLow=httpTotTxResponseBytesLow, sslTotSSLv3ClientAuthenticationsHigh=sslTotSSLv3ClientAuthenticationsHigh, svcGrpMemberSurgeCount=svcGrpMemberSurgeCount, saclTotPktsBridged=saclTotPktsBridged, totNonAuthDatas=totNonAuthDatas, httpErrLargeCtlenLow=httpErrLargeCtlenLow, ca3GPVidcacheBytes=ca3GPVidcacheBytes, vlanstatsTable=vlanstatsTable, staRenewSent=staRenewSent, clNodeHealthReason=clNodeHealthReason, alarmVsvrNewName=alarmVsvrNewName, gslbSiteMEPflap=gslbSiteMEPflap, totalPipeLinedRequests=totalPipeLinedRequests, lsnTotUdpDrpPkts=lsnTotUdpDrpPkts, gslbPoliciesTable=gslbPoliciesTable, indexHtmlHit=indexHtmlHit, sslTot56BitRC4Ciphers=sslTot56BitRC4Ciphers, vsvrscpolicyscTotalServerConnections=vsvrscpolicyscTotalServerConnections, thresholdValue=thresholdValue, lsnTotNAT64TcpRxPkts=lsnTotNAT64TcpRxPkts, ipTotRxMbits=ipTotRxMbits, haErrSwMonitorFail=haErrSwMonitorFail, pbrTotPktsDenied=pbrTotPktsDenied, httpTotPostsLow=httpTotPostsLow, lsnTotNAT64UdpRxBytes=lsnTotNAT64UdpRxBytes, svcGrpMemberState=svcGrpMemberState, pqPolicyStatistics=pqPolicyStatistics, entitySynflood=entitySynflood, lsnCurNAT64IcmpSessions=lsnCurNAT64IcmpSessions, ipNetmask=ipNetmask, lsnTotNAT64UdpTxPkts=lsnTotNAT64UdpTxPkts, mptcpErrfastclose=mptcpErrfastclose, popUps=popUps, policyvalue=policyvalue, icmpTotTxBytesHigh=icmpTotTxBytesHigh, pptpTotGRESessions=pptpTotGRESessions, svcCount=svcCount, sslTot40BitRC4CiphersHigh=sslTot40BitRC4CiphersHigh, crPolicyMapConfigEntry=crPolicyMapConfigEntry, entityofs=entityofs, pqpolicypqAvgClientTransactionTimems=pqpolicypqAvgClientTransactionTimems, hashMD5=hashMD5, destinationIP=destinationIP, vserverCipherBindingTable=vserverCipherBindingTable, vlanTotRxBytesHigh=vlanTotRxBytesHigh, ifTotXonSent=ifTotXonSent, lldpMessageTxInterval=lldpMessageTxInterval, nsTdInetMode=nsTdInetMode, dnsTotMultiQueryDisableError=dnsTotMultiQueryDisableError, offset=offset, icmpTotTxEchoReplyLow=icmpTotTxEchoReplyLow, pptpCurGRESessions=pptpCurGRESessions, haErrMasterDispute=haErrMasterDispute, vsvrscpolicyTotClientTransaction=vsvrscpolicyTotClientTransaction, lsnTotTcpDrpPkts=lsnTotTcpDrpPkts, tcpCurClientConnEstablished=tcpCurClientConnEstablished, inatTotSentBytes=inatTotSentBytes, vsvrSurgeCount=vsvrSurgeCount, sslCurSessionInUseNormal=sslCurSessionInUseNormal, serviceScpolicyEntry=serviceScpolicyEntry, aclTotPktsDenied=aclTotPktsDenied, wsClientIp=wsClientIp, appfwappFirewallRet5xxPerProfile=appfwappFirewallRet5xxPerProfile, cacMsftSmthStrmPlVidHR=cacMsftSmthStrmPlVidHR, lldpLocManAddrIfId=lldpLocManAddrIfId, haTotStateFail=haTotStateFail, ipTotTxPktsHigh=ipTotTxPktsHigh, sslBeTot128BitIDEACiphersHigh=sslBeTot128BitIDEACiphersHigh, entitydown=entitydown, mcEncHls=mcEncHls, unackSynCount=unackSynCount, ipBridgeGroup=ipBridgeGroup, haErrPortSilent=haErrPortSilent, dnsTotUnsupportedQueries=dnsTotUnsupportedQueries, pqPolicyWeight=pqPolicyWeight, pqpolicypqTotAvgQueueWaitTime=pqpolicypqTotAvgQueueWaitTime, lldpRemManAddrSubtype=lldpRemManAddrSubtype, deCompTcpErrMoreData=deCompTcpErrMoreData, sslTotNULLAuthorizationsHigh=sslTotNULLAuthorizationsHigh, wsFailoverTime=wsFailoverTime, sslTotHwEncFE=sslTotHwEncFE, ipTotRxBytesLow=ipTotRxBytesLow, maxmemory=maxmemory, AdminStatus=AdminStatus, vxlanTotRxPkts=vxlanTotRxPkts, icmpTotThresholdExceedsLow=icmpTotThresholdExceedsLow, sslTotTLSv12Handshakes=sslTotTLSv12Handshakes, totaldroppedpkts=totaldroppedpkts, cswProtocolType=cswProtocolType, lsnLogTotEIMappingCreateEntries=lsnLogTotEIMappingCreateEntries, appFirewallViolSQL=appFirewallViolSQL, vserverRxBytesRate=vserverRxBytesRate, delCompTcpRxPackets=delCompTcpRxPackets, vsvrClientConnOpenRate=vsvrClientConnOpenRate, ipTotMaxClientsHigh=ipTotMaxClientsHigh, sslTotSSLv3Sessions=sslTotSSLv3Sessions, svcGrpMemberGslbSiteName=svcGrpMemberGslbSiteName, synflood=synflood, allNicTotRxMbits=allNicTotRxMbits, svcGrpMemberRxBytesRate=svcGrpMemberRxBytesRate, sslTot128BitRC2Ciphers=sslTot128BitRC2Ciphers, icmpTotTxBytesLow=icmpTotTxBytesLow, inatNat46Icmp64=inatNat46Icmp64, nsTdInetAddressEntry=nsTdInetAddressEntry, dnsTotMXrecQueries=dnsTotMXrecQueries, policyIndex=policyIndex, ftpPortRange=ftpPortRange, monitorFailedResponse=monitorFailedResponse, cacheNumObjSavedOnDisk=cacheNumObjSavedOnDisk, curConfigGslbVservers=curConfigGslbVservers, appFirewallAborts=appFirewallAborts, ipTotTxMbitsHigh=ipTotTxMbitsHigh, ipTotZeroNextHop=ipTotZeroNextHop, sslBeExpiredSessionsLow=sslBeExpiredSessionsLow, ipRnatTotTxBytes=ipRnatTotTxBytes, sslBeTot40BitDESCiphers=sslBeTot40BitDESCiphers, cacheTotRevalidationMissHigh=cacheTotRevalidationMissHigh, lldpLocSysCapSupported=lldpLocSysCapSupported, appfwXMLValidation=appfwXMLValidation, sslBeTotSessionMultiplexAttempts=sslBeTotSessionMultiplexAttempts, ifErrRxNoNSB=ifErrRxNoNSB, vsvrTotalRequestBytes=vsvrTotalRequestBytes, snmpTrapVarBindOidsGroup=snmpTrapVarBindOidsGroup, lsnTotIcmpRxPkts=lsnTotIcmpRxPkts, lsnLogTotUdpMappingCreateEntries=lsnLogTotUdpMappingCreateEntries, haNicsMonitorFailed=haNicsMonitorFailed, caAndroididcacheBytes=caAndroididcacheBytes, vsvrTotalResponseBytesLow=vsvrTotalResponseBytesLow, pqTotalThresholdFailed=pqTotalThresholdFailed, vsvrTotalResponseBytesHigh=vsvrTotalResponseBytesHigh, pqpolicypqQdepth=pqpolicypqQdepth, pbrTotMisses=pbrTotMisses, warmRestartEvent=warmRestartEvent, curClientEstablishedConn=curClientEstablishedConn, ipTotTxPkts=ipTotTxPkts, httpTotChunkedReqHigh=httpTotChunkedReqHigh, icmpTotThresholdExceeds=icmpTotThresholdExceeds, sslTotExpiredSessionsHigh=sslTotExpiredSessionsHigh, cacheTotNonStoreAbleMissesHigh=cacheTotNonStoreAbleMissesHigh, piPolicyEntry=piPolicyEntry, nsTdInetAddress=nsTdInetAddress, monitorFailedFTP=monitorFailedFTP, curConfigLbVservers=curConfigLbVservers, sslBeTotDH512keyExchangesHigh=sslBeTotDH512keyExchangesHigh, cpuUsage=cpuUsage, ifErrCongestedPktsDrops=ifErrCongestedPktsDrops, cacMsftSmthStrmPlVid=cacMsftSmthStrmPlVid, vsvrTotalPktsRecvdLow=vsvrTotalPktsRecvdLow, crMapConfigEntry=crMapConfigEntry, aclTotCount=aclTotCount, configurationCmd=configurationCmd, deCompTcpTxBytes=deCompTcpTxBytes, surgecnt=surgecnt, HAState=HAState, haErrTotNodeDown=haErrTotNodeDown, sslBeTot56BitRC2Ciphers=sslBeTot56BitRC2Ciphers, appfwappFirewallViolXmlSoapFaultViolationsPerProfile=appfwappFirewallViolXmlSoapFaultViolationsPerProfile, platformRateLimitThresholdHigh=platformRateLimitThresholdHigh, sslTot40BitDESCiphersHigh=sslTot40BitDESCiphersHigh, monitorResponseTimeoutThreshExceed=monitorResponseTimeoutThreshExceed, pbr6perHits=pbr6perHits, sslTotSSLv3ClientAuthentications=sslTotSSLv3ClientAuthentications, nsLsnLogStatsGroup=nsLsnLogStatsGroup, lsnLogTotTcpPortblockAllocs=lsnLogTotTcpPortblockAllocs, appFirewallTotalViol=appFirewallTotalViol, cacheTotSuccessfulRevalidationLow=cacheTotSuccessfulRevalidationLow, vsvrscpolicyTotOpenConn=vsvrscpolicyTotOpenConn, sslBeTotRSA1024keyExchangesHigh=sslBeTotRSA1024keyExchangesHigh, vsProtocolType=vsProtocolType, mapName=mapName, appFirewallViolStartURL=appFirewallViolStartURL, cspolicyHitsHigh=cspolicyHitsHigh, vsvrHealth=vsvrHealth, changeToPrimary=changeToPrimary, httpErrLargeChunkLow=httpErrLargeChunkLow, sslTotRSA1024keyExchangesHigh=sslTotRSA1024keyExchangesHigh, alternatecontentPath=alternatecontentPath, caTotlookuphit=caTotlookuphit, dnsTotServerResponse=dnsTotServerResponse, pptpOutCallReq=pptpOutCallReq, scProtocolType=scProtocolType, discoverFailure=discoverFailure)
mibBuilder.exportSymbols("NS-ROOT-MIB", sslTotSSLv3RenegSessionsLow=sslTotSSLv3RenegSessionsLow, caIosidcacheBytes=caIosidcacheBytes, pbr6TotPktsDenied=pbr6TotPktsDenied, sslTotRSA2048keyExchangesHigh=sslTotRSA2048keyExchangesHigh, staMonRcvd=staMonRcvd, pqpolicyname=pqpolicyname, lldpStatsRemTablesLastChangeTime=lldpStatsRemTablesLastChangeTime, rsa4096KeyExThresholdHigh=rsa4096KeyExThresholdHigh, lldpLocManAddrIfSubtype=lldpLocManAddrIfSubtype, cswStatisticsTable=cswStatisticsTable, mptcpTotEstSFReplaced=mptcpTotEstSFReplaced, totSpilloverCount=totSpilloverCount, cswVsId=cswVsId, gslbDomainConfigEntry=gslbDomainConfigEntry, vlanTotDroppedPkts=vlanTotDroppedPkts, serverCount=serverCount, nsCacheStatsGroup=nsCacheStatsGroup, dnsTotAresponse=dnsTotAresponse, appFirewallViolXdosViolations=appFirewallViolXdosViolations, nsLLDPConfigGroup=nsLLDPConfigGroup, modeFastRamp=modeFastRamp, primaryserviceport=primaryserviceport, ipConflictMacAddr=ipConflictMacAddr, mapbindId=mapbindId, sslBeTotSSLv3ClientAuthenticationsHigh=sslBeTotSSLv3ClientAuthenticationsHigh, sacl6TotPktsDenied=sacl6TotPktsDenied, sslTotTLSv12RenegSessions=sslTotTLSv12RenegSessions, cacheCurHits=cacheCurHits, crlName=crlName, nsInetBridgeGroup=nsInetBridgeGroup, vlanTotRxPkts=vlanTotRxPkts, sacl6TotMisses=sacl6TotMisses, cacheTot304HitsHigh=cacheTot304HitsHigh, svcgrpSvcGroupName=svcgrpSvcGroupName, caOtherididcacheBytes=caOtherididcacheBytes, certType=certType, nsLsnStatsGroup=nsLsnStatsGroup, sysStatisticsTime=sysStatisticsTime, sslTotDH1024keyExchanges=sslTotDH1024keyExchanges, tcpTotCltFin=tcpTotCltFin, sslTotOffloadBulkAESGCM256=sslTotOffloadBulkAESGCM256, cacheTotSuccessfulRevalidation=cacheTotSuccessfulRevalidation, pqPriority=pqPriority, monitorProbesNoChange=monitorProbesNoChange, svcGroupMemberRxBytesRate=svcGroupMemberRxBytesRate, ipTotInvalidPacketSize=ipTotInvalidPacketSize, certBindKeyName=certBindKeyName, icmpTotInvalidProtocol=icmpTotInvalidProtocol, dnsTotArecQueries=dnsTotArecQueries, ipTotAddrLookupFail=ipTotAddrLookupFail, haPropSuccess=haPropSuccess, vsvrTotalRequests=vsvrTotalRequests, tcpErrSvrHole=tcpErrSvrHole, mptcpTotMpCapSyn=mptcpTotMpCapSyn, sslTotDSSAuthorizations=sslTotDSSAuthorizations, svcGrpMemberPrimaryInetAddressType=svcGrpMemberPrimaryInetAddressType, featureSurgeProtection=featureSurgeProtection, sslTotRSA2048keyExchanges=sslTotRSA2048keyExchanges, platformPpsLimitThresholdHigh=platformPpsLimitThresholdHigh, pptpCurCtrlSessions=pptpCurCtrlSessions, alarmEntityCurState=alarmEntityCurState, lbStatisticsEntry=lbStatisticsEntry, unackSyn=unackSyn, appFirewallViolXSS=appFirewallViolXSS, compTotalRequests=compTotalRequests, clNodeIP=clNodeIP, caADTSaudiocacheBytes=caADTSaudiocacheBytes, powerSupplyFailed=powerSupplyFailed, cmpTotTxpkts=cmpTotTxpkts, ipTotBadTransport=ipTotBadTransport, tcpMaxPerSrvrReusePool=tcpMaxPerSrvrReusePool, siteCurSrvrConnections=siteCurSrvrConnections, tcpTotServerConnOpened=tcpTotServerConnOpened, nsAclTable=nsAclTable, lsnIcmpSessionsRate=lsnIcmpSessionsRate, totalRequests1_0=totalRequests1_0, pqStatsperpqpolicyandperLBVipTable=pqStatsperpqpolicyandperLBVipTable, cachePercentHit=cachePercentHit, siteTotalResponses=siteTotalResponses, temperatureHigh=temperatureHigh, svcscpolicyscPhysicalServiceIP=svcscpolicyscPhysicalServiceIP, cacheTotFlashcacheHits=cacheTotFlashcacheHits, drtmLearningProbes=drtmLearningProbes, sslTotSSLv2ClientAuthentications=sslTotSSLv2ClientAuthentications, haVersionMatched=haVersionMatched, delCompErrReqinfoAllocfail=delCompErrReqinfoAllocfail, icmpTotRxPktsLow=icmpTotRxPktsLow, cpestatistics=cpestatistics, spdyv3TotStreams=spdyv3TotStreams, sysCurMappedIpCount=sysCurMappedIpCount, ipTotMaxClients=ipTotMaxClients, ipTotLandattacksLow=ipTotLandattacksLow, httpTot10ResponsesHigh=httpTot10ResponsesHigh, nsRnatGlobalStats=nsRnatGlobalStats, callHomeUploadEventStatusMsg=callHomeUploadEventStatusMsg, caTotvideo=caTotvideo, ActiveActiveState=ActiveActiveState, clientConnRefused=clientConnRefused, vsvrscpolicyscTotalRequestsReceived=vsvrscpolicyscTotalRequestsReceived, totaljstransaction=totaljstransaction, udpTotTxBytesLow=udpTotTxBytesLow, dnsTotMXrecUpdate=dnsTotMXrecUpdate, caTotobjstored=caTotobjstored, vsvrRequestRate=vsvrRequestRate, entityOldName=entityOldName, appfwappFirewallViolXmlAttachmentViolationsPerProfile=appfwappFirewallViolXmlAttachmentViolationsPerProfile, freeConnHalfClosed=freeConnHalfClosed, tcpErrFinGiveUp=tcpErrFinGiveUp, gslbSite=gslbSite, vserverCspolicyEntry=vserverCspolicyEntry, dnsTotErrLimits=dnsTotErrLimits, appfwSafeObject=appfwSafeObject, sysMappedIpAddressRange=sysMappedIpAddressRange, featureDynamicRouting=featureDynamicRouting, udpTotUnknownSvcPkts=udpTotUnknownSvcPkts, sslTotSSLv3Handshakes=sslTotSSLv3Handshakes, deCompTcpErrData=deCompTcpErrData, nsNicStatsGroup=nsNicStatsGroup, caFLVVidBytes=caFLVVidBytes, nsLLDPLocSystemsGroup=nsLLDPLocSystemsGroup, udpTotTxPkts=udpTotTxPkts, lsnTotDSLiteTxBytes=lsnTotDSLiteTxBytes, vserverRhiStateChange=vserverRhiStateChange, cpuUtilizationNormal=cpuUtilizationNormal, caUnidentified=caUnidentified, svcdospolicydosCurrentQueueSize=svcdospolicydosCurrentQueueSize, lsnCurUdpSessions=lsnCurUdpSessions, svcSynfloodRate=svcSynfloodRate, svcGroupMemberMaxClients=svcGroupMemberMaxClients, fanSpeedLow=fanSpeedLow, udpTotRxBytes=udpTotRxBytes, rsa4096KeyExThresholdNormal=rsa4096KeyExThresholdNormal, sslTotSSLv3SessionsHigh=sslTotSSLv3SessionsHigh, httpTotRxResponseBytesHigh=httpTotRxResponseBytesHigh, aclperHits=aclperHits, appfwappFirewallRequestsPerProfile=appfwappFirewallRequestsPerProfile, acl6TotHits=acl6TotHits, effectiveVridPriority=effectiveVridPriority, sslTotSSLv2Sessions=sslTotSSLv2Sessions, vPathTotL2EncapPkts=vPathTotL2EncapPkts, lsnGrpTotTcpTranslBytes=lsnGrpTotTcpTranslBytes, pqpolicypqTotClientConnections=pqpolicypqTotClientConnections, clusterCCOChange=clusterCCOChange, appfwappFirewallViolWellformednessViolationsPerProfile=appfwappFirewallViolWellformednessViolationsPerProfile, mcAACaudio=mcAACaudio, mcTotvideo=mcTotvideo, appFirewallViolXmlSoapFaultViolations=appFirewallViolXmlSoapFaultViolations, sslTotDecFE=sslTotDecFE, saclStatsGroup=saclStatsGroup, dnsTotUnsupportedResponseType=dnsTotUnsupportedResponseType, featureISIS=featureISIS, crMapSrcUrl=crMapSrcUrl, drtmRTO=drtmRTO, sslTotOffloadRSAKeyExchangesLow=sslTotOffloadRSAKeyExchangesLow, staRenewRecvd=staRenewRecvd, sslTotRSA4096keyExchanges=sslTotRSA4096keyExchanges, appfwappFirewallViolStartURLPerProfile=appfwappFirewallViolStartURLPerProfile, staReassErr=staReassErr, rnatTotRxBytes=rnatTotRxBytes, svcGrpMemberPrimaryPort=svcGrpMemberPrimaryPort, pptpInCallConn=pptpInCallConn, sslBeTotSSLv3HandshakesHigh=sslBeTotSSLv3HandshakesHigh, tcpTotZombiePassiveHalfCloseCltConnFlushed=tcpTotZombiePassiveHalfCloseCltConnFlushed, lsnNAT64UdpSessionsRate=lsnNAT64UdpSessionsRate, vsvrscpolicyPrimaryIPAddress=vsvrscpolicyPrimaryIPAddress, totalrxpkts=totalrxpkts, platformLicensedPPS=platformLicensedPPS, mptcpTotSFConn=mptcpTotSFConn, sslTotBkendCipherAES128=sslTotBkendCipherAES128, caAndroidHR=caAndroidHR, vsvrscpolicyscTotalResponseBytes=vsvrscpolicyscTotalResponseBytes, ipTotTxBytes=ipTotTxBytes, mptcpPlainackFallback=mptcpPlainackFallback, featureIPv6ProtocolTranslation=featureIPv6ProtocolTranslation, txLateCollisions=txLateCollisions, lsnSessionQuotaExceed=lsnSessionQuotaExceed, svcscpolicyscTotalServerTTFBTransactions=svcscpolicyscTotalServerTTFBTransactions, vsvrTotalRequestBytesLow=vsvrTotalRequestBytesLow, svcServiceName=svcServiceName, serviceGlobalStatsGroup=serviceGlobalStatsGroup, tcpErrRstInTimewait=tcpErrRstInTimewait, scPolicyConfigEntry=scPolicyConfigEntry, nsCPUTable=nsCPUTable, tcpOptimizationBypassed=tcpOptimizationBypassed, pengBytesOut=pengBytesOut, vsvrSslRedirectSupport=vsvrSslRedirectSupport, partitionCONNLimitExceeded=partitionCONNLimitExceeded, cacheTot304HitsLow=cacheTot304HitsLow, svcGrpMemberdosQDepth=svcGrpMemberdosQDepth, destinationInetAddress=destinationInetAddress, featureCacheRedirection=featureCacheRedirection, tcpErrCookiePktMssReject=tcpErrCookiePktMssReject, compTotalRxBytes=compTotalRxBytes, inatTotpktsent=inatTotpktsent, compressionRatio=compressionRatio, svcSslTLSv1Protocol=svcSslTLSv1Protocol, monitorInterval=monitorInterval, crlTable=crlTable, nsLLDPRemEntry=nsLLDPRemEntry, crStatisticsTable=crStatisticsTable, scPolicyconfigTable=scPolicyconfigTable, crpolicyHitsHigh=crpolicyHitsHigh, sslTotEncBE=sslTotEncBE, crmIndex=crmIndex, icaLicenseFailure=icaLicenseFailure, sslBeTotTLSv1Handshakes=sslBeTotTLSv1Handshakes, lsnSessLimitExceededBy=lsnSessLimitExceededBy, caAppleLiveStreamingPlaylistVidcacheBytes=caAppleLiveStreamingPlaylistVidcacheBytes, sslBeTotEcdheCurve384=sslBeTotEcdheCurve384, sslTotSSLv2TransactionsHigh=sslTotSSLv2TransactionsHigh, haLastNicMonitorFailed=haLastNicMonitorFailed, tcpErrSvrRetrasmit=tcpErrSvrRetrasmit, totAnswers=totAnswers, cacheTotParameterizedNon304Hits=cacheTotParameterizedNon304Hits, lsnLogTotWrongProtocols=lsnLogTotWrongProtocols, vsvrMaxReqPerConn=vsvrMaxReqPerConn, curConfigVservers=curConfigVservers, sslTot64BitRC4CiphersHigh=sslTot64BitRC4CiphersHigh, tcpErrRst=tcpErrRst, sslKeyPath=sslKeyPath, wsLastMappedIpAddress=wsLastMappedIpAddress, wsHttpGroup=wsHttpGroup, gslbSitePublicInetAddress=gslbSitePublicInetAddress, sslTotSSLv3RenegSessions=sslTotSSLv3RenegSessions, pptpInCallReq=pptpInCallReq, appfwProfileEntry=appfwProfileEntry, vsvrscpolicyscTotalClientTTLB=vsvrscpolicyscTotalClientTTLB, entityName=entityName, monitorBindCount=monitorBindCount, caAppleLiveStreamingVidBytes=caAppleLiveStreamingVidBytes, mcEncIos=mcEncIos, dnsCurAAAArecord=dnsCurAAAArecord, caMP4VidBytes=caMP4VidBytes, sslBeTotNULLCiphersLow=sslBeTotNULLCiphersLow, vsvrscpolicydesIpAddress=vsvrscpolicydesIpAddress, svcdospolicydosTotJSRefused=svcdospolicydosTotJSRefused, htmlInitFailed=htmlInitFailed, lbvsvrRdpCookieParsed=lbvsvrRdpCookieParsed, cipherGroupEntry=cipherGroupEntry, sslTot128BitIDEACiphersLow=sslTot128BitIDEACiphersLow, pserPort=pserPort, IpAddressType=IpAddressType, delCompErrBFileWHdrFailed=delCompErrBFileWHdrFailed, certBindingConfigEntry=certBindingConfigEntry, socksConnRespRcvd=socksConnRespRcvd, staConnSuccess=staConnSuccess, monitorFailedTimeout=monitorFailedTimeout, cmpTotRxpkts=cmpTotRxpkts, qualifier=qualifier, sslBeTotSessionMultiplexAttemptSuccessHigh=sslBeTotSessionMultiplexAttemptSuccessHigh, sslTot128BitRC2CiphersLow=sslTot128BitRC2CiphersLow, responseTimeoutThreshold=responseTimeoutThreshold, vsvrAvgTransactionTime=vsvrAvgTransactionTime, appfwFieldFormat=appfwFieldFormat)
mibBuilder.exportSymbols("NS-ROOT-MIB", vlanTotTxPktsLow=vlanTotTxPktsLow, dnsTotCacheEntriesFlush=dnsTotCacheEntriesFlush, sslglobalstats=sslglobalstats, pbr6TotMisses=pbr6TotMisses, sacl6TotPktsAllowed=sacl6TotPktsAllowed, sslBeTotTLSv1SessionsHigh=sslBeTotTLSv1SessionsHigh, lsnCurNAT64UdpSessions=lsnCurNAT64UdpSessions, alarmMonrespto=alarmMonrespto, tcpTotFinWaitClosed=tcpTotFinWaitClosed, cpesDevno=cpesDevno, dnskeyName=dnskeyName, sslBeSessionsReplacedHigh=sslBeSessionsReplacedHigh, ClusterMasterState=ClusterMasterState, mcYoutubedashBytes=mcYoutubedashBytes, serverState=serverState, staMonSent=staMonSent, scPolicyName=scPolicyName, cpecPolicyname=cpecPolicyname, cacheTotFullToConditionalRequest=cacheTotFullToConditionalRequest, cacheTotMisses=cacheTotMisses, mcFLVVidBytes=mcFLVVidBytes, icmpTotNoUdpConn=icmpTotNoUdpConn, cachePercentPetHits=cachePercentPetHits, sslTotSSLv2ClientAuthenticationsHigh=sslTotSSLv2ClientAuthenticationsHigh, cacheNumMarker=cacheNumMarker, nsLLDPStatsRxPortEntry=nsLLDPStatsRxPortEntry, mcEncVideo=mcEncVideo, aaaCurTMSessions=aaaCurTMSessions, scAlternateContentServiceName=scAlternateContentServiceName, staConnFailure=staConnFailure, expressionTotalHits=expressionTotalHits, pqpolicyTotClientTransactionTime=pqpolicyTotClientTransactionTime, sslBeTotNULLCiphersHigh=sslBeTotNULLCiphersHigh, parseIPv6AddressErr=parseIPv6AddressErr, serverName=serverName, sslTotSessions=sslTotSessions, featureSureConnect=featureSureConnect, sslTotSSLv2SessionsHigh=sslTotSSLv2SessionsHigh, sysCustomID=sysCustomID, ipTotFragPktsGen=ipTotFragPktsGen, keyExRSA512=keyExRSA512, ipAddressGathered=ipAddressGathered, caTotgetobjreq=caTotgetobjreq, tcpOptimizationEnabled=tcpOptimizationEnabled, httpErrLargeCtlen=httpErrLargeCtlen, vsvrscpolicyscCurrentWaitingClients=vsvrscpolicyscCurrentWaitingClients, mptcpErrResFlagSet=mptcpErrResFlagSet, lsnLogTotADMappingCreateEntries=lsnLogTotADMappingCreateEntries, crVsHits=crVsHits, httpTotGets=httpTotGets, icmpTotPktsDroppedHigh=icmpTotPktsDroppedHigh, delayThreshold=delayThreshold, svcGrpMemberTotalRequestBytes=svcGrpMemberTotalRequestBytes, sslv3=sslv3, policyHits=policyHits, sslBeTotRSA1024keyExchanges=sslBeTotRSA1024keyExchanges, calaptopDesktpcache=calaptopDesktpcache, nsInetAddressTable=nsInetAddressTable, saclTotHits=saclTotHits, vsvrSslDHFilePath=vsvrSslDHFilePath, alarmHighThreshold=alarmHighThreshold, FeaturePlatform=FeaturePlatform, pbr6TotHits=pbr6TotHits, pqpolicyTotClientTransactions=pqpolicyTotClientTransactions, vPathTotOffload=vPathTotOffload, sslBeTotDSSAuthorizations=sslBeTotDSSAuthorizations, thresholdvalue=thresholdvalue, pooledLicenseGraceNormal=pooledLicenseGraceNormal, staMonSucc=staMonSucc, sslBeTot40BitRC4CiphersHigh=sslBeTot40BitRC4CiphersHigh, appfwappFirewallRedirectsPerProfile=appfwappFirewallRedirectsPerProfile, serviceType=serviceType, clusterNodeQuorum=clusterNodeQuorum, dnsTotSOArecUpdate=dnsTotSOArecUpdate, scSessionReqs=scSessionReqs, ipv6TotTcpConnection=ipv6TotTcpConnection, cacAACaudioHR=cacAACaudioHR, haVersionMismatch=haVersionMismatch, vlanTotBroadcastPktsLow=vlanTotBroadcastPktsLow, cacheTotExpireAtLastByte=cacheTotExpireAtLastByte, sslTotOffloadBulkAESGCM128=sslTotOffloadBulkAESGCM128, wsNetmask=wsNetmask, crMapBindConfigEntry=crMapBindConfigEntry, cacheTotFullToConditionalRequestLow=cacheTotFullToConditionalRequestLow, partitionSwitched=partitionSwitched, vlanTotBroadcastPkts=vlanTotBroadcastPkts, icmpTotRxEchoReply=icmpTotRxEchoReply, monitorFailedSend=monitorFailedSend, sslCrlEntry=sslCrlEntry, mcEncDASH=mcEncDASH, cacheTotRequestsHigh=cacheTotRequestsHigh, siteMepStatus=siteMepStatus, mcMP4Vid=mcMP4Vid, avgTxTime=avgTxTime, vsvrSoMethod=vsvrSoMethod, curServerEstablishedConn=curServerEstablishedConn, sysHealthDiskUsed=sysHealthDiskUsed, sslBeMaxMultiplexedSessionsLow=sslBeMaxMultiplexedSessionsLow, cacheRecentPercentByteHit=cacheRecentPercentByteHit, sslCipherGroupEntry=sslCipherGroupEntry, lldpRemChassisIdSubtype=lldpRemChassisIdSubtype, mcADTSaudioBytes=mcADTSaudioBytes, svcdospolicydosTotJSSent=svcdospolicydosTotJSSent, qdepthThreshval=qdepthThreshval, totalMultiPartResponses=totalMultiPartResponses, caADTSaudiocacheBytesHR=caADTSaudiocacheBytesHR, ifErrRxNoBuffs=ifErrRxNoBuffs, dnsTotRequests=dnsTotRequests, ipv6FragTotPktsForward=ipv6FragTotPktsForward, sslTotRSAAuthorizationsLow=sslTotRSAAuthorizationsLow, vsvrscpolicyDestPort=vsvrscpolicyDestPort, dnsTotSOArecQueries=dnsTotSOArecQueries, directive=directive, cacheTotHitsHigh=cacheTotHitsHigh, sslTotBkendCipherAES256=sslTotBkendCipherAES256, dstDomain=dstDomain, compression=compression, ipTotFragmentsLow=ipTotFragmentsLow, svcscpolicyscTotalServerConnections=svcscpolicyscTotalServerConnections, mcTotother=mcTotother, clearTextPort=clearTextPort, totalIncompleteHeaders=totalIncompleteHeaders, appfwappFirewallViolMsgValViolationsPerProfile=appfwappFirewallViolMsgValViolationsPerProfile, lldpRemTimeMark=lldpRemTimeMark, dhCount=dhCount, aclTotPktsBridgedLow=aclTotPktsBridgedLow, icmpTotInvalidNextMTUval=icmpTotInvalidNextMTUval, l3mode=l3mode, gslbDomainStatsEntry=gslbDomainStatsEntry, sslTot56BitRC2Ciphers=sslTot56BitRC2Ciphers, ifTotRxXoffPause=ifTotRxXoffPause, ipv6TotRxBytes=ipv6TotRxBytes, pooledLicenseGracePeriodOver=pooledLicenseGracePeriodOver, gslbConfig=gslbConfig, appfwRefererHeader=appfwRefererHeader, clSyncState=clSyncState, cacheGroupTable=cacheGroupTable, exprName=exprName, curClientConnections=curClientConnections, appFirewallResBytes=appFirewallResBytes, caIosHR=caIosHR, tcpCurServerConnOpening=tcpCurServerConnOpening, vPathTotL2DataRx=vPathTotL2DataRx, svcTotalServers=svcTotalServers, saclTotPktsDenied=saclTotPktsDenied, saclTotPktsAllowed=saclTotPktsAllowed, udpTotRxBytesLow=udpTotRxBytesLow, vserverCrpolicyTable=vserverCrpolicyTable, sslBeTotRSA512keyExchangesHigh=sslBeTotRSA512keyExchangesHigh, certBindServiceName=certBindServiceName, clusterNodeHealth=clusterNodeHealth, compTcpTotalTimer=compTcpTotalTimer, deCompTcpErrLessData=deCompTcpErrLessData, scPopUps=scPopUps, clPeerID=clPeerID, vsvrscpolicyscTotalClientConnections=vsvrscpolicyscTotalClientConnections, pserIpAddress=pserIpAddress, keyExRSA1024=keyExRSA1024, mptcpErrJoinThreshold=mptcpErrJoinThreshold, ifnicRxStalls=ifnicRxStalls, sslTotOffloadDHKeyExchangesHigh=sslTotOffloadDHKeyExchangesHigh, vsvrscpolicyscPhysicalServicePort=vsvrscpolicyscPhysicalServicePort, totcell=totcell, totaltxbytes=totaltxbytes, resCpuUsage=resCpuUsage, appfwLogMsg=appfwLogMsg, sslTotExpiredSessions=sslTotExpiredSessions, sslBeTotMD5MacLow=sslBeTotMD5MacLow, featureContentAdapation=featureContentAdapation, vlanTotTxPktsHigh=vlanTotTxPktsHigh, cipher64BitRC4=cipher64BitRC4, vsvrSslv2Protocol=vsvrSslv2Protocol, lldpStatsRxPortTLVsUnrecognizedTotal=lldpStatsRxPortTLVsUnrecognizedTotal, tcpTotClientConnOpened=tcpTotClientConnOpened, httpErrPipelinedRequestsHigh=httpErrPipelinedRequestsHigh, dnsTotServerQuery=dnsTotServerQuery, socksConnReqRcvd=socksConnReqRcvd, sslBeTotTLSv12Handshakes=sslBeTotTLSv12Handshakes, appFirewallReqBytes=appFirewallReqBytes, ipv6AddressDuplicated=ipv6AddressDuplicated, appfwappFirewallAbortsPerProfile=appfwappFirewallAbortsPerProfile, appfwappFirewallViolXmlSqlViolationsPerProfile=appfwappFirewallViolXmlSqlViolationsPerProfile, serviceGroupEntry=serviceGroupEntry, caAACaudiocachebytes=caAACaudiocachebytes, dnsCurSRVrecord=dnsCurSRVrecord, svcGrpMemberPrimaryIPAddress=svcGrpMemberPrimaryIPAddress, modeIpv6StaticRouteAdv=modeIpv6StaticRouteAdv, sslTotBkendSessionReNegotiate=sslTotBkendSessionReNegotiate, icmpTotDstIpLookup=icmpTotDstIpLookup, svcscpolicyscTotalServerTTLB=svcscpolicyscTotalServerTTLB, ifErrCongestionLimitPktDrops=ifErrCongestionLimitPktDrops, tcpTotSyn=tcpTotSyn, sslBeTotRSA2048keyExchangesHigh=sslBeTotRSA2048keyExchangesHigh, tcpErrBadCheckSum=tcpErrBadCheckSum, cpeeNetmask=cpeeNetmask, wsSmoothConnection=wsSmoothConnection, cacheRedirection=cacheRedirection, httpTotGetsHigh=httpTotGetsHigh, psVsPort=psVsPort, httpTotOthers=httpTotOthers, sslBeTotTLSv11ClientAuthentications=sslBeTotTLSv11ClientAuthentications, svcSslv3Protocol=svcSslv3Protocol, sslTotEncSw=sslTotEncSw, modeIpv6DirectRouteAdv=modeIpv6DirectRouteAdv, sslTotDH2048keyExchanges=sslTotDH2048keyExchanges, unSupBrow=unSupBrow, aclTotPktsReusedLow=aclTotPktsReusedLow, httpErrLargeCtlenHigh=httpErrLargeCtlenHigh, tcpErrOutOfWindowPkts=tcpErrOutOfWindowPkts, vlansDevno=vlansDevno, vsvrPort=vsvrPort, srcDomain=srcDomain, vPathTotL2CntrlPkts=vPathTotL2CntrlPkts, sysHealthCounterName=sysHealthCounterName, monitorFailed=monitorFailed, deCompTcpRxPackets=deCompTcpRxPackets, icmpTotTxPkts=icmpTotTxPkts, sysGateway=sysGateway, lsnTotnat64IcmpDrpPkts=lsnTotnat64IcmpDrpPkts, httpTotTxResponseBytesHigh=httpTotTxResponseBytesHigh, wsSystem=wsSystem, rnatCurSessions=rnatCurSessions, timesflushed=timesflushed, lsnDSLiteB4Address=lsnDSLiteB4Address, eRSA=eRSA, lsnCurSessions=lsnCurSessions, cipherBindServiceType=cipherBindServiceType, httpErrIncompleteHeadersLow=httpErrIncompleteHeadersLow, appfwappFirewallViolXmlXssViolationsPerProfile=appfwappFirewallViolXmlXssViolationsPerProfile, nsModeInfo=nsModeInfo, nsDomainNameServiceGroup=nsDomainNameServiceGroup, icmpTotNoTcpConn=icmpTotNoTcpConn, iPv6tov4FindIPv6MapErr=iPv6tov4FindIPv6MapErr, svcGrpMemberAvgTransactionTime=svcGrpMemberAvgTransactionTime, platformPpsLimitPktDrop=platformPpsLimitPktDrop, dnsTotSOAresponse=dnsTotSOAresponse, dnsTotAAAAresponse=dnsTotAAAAresponse, commandExecutionStatus=commandExecutionStatus, sslChipReinitCount=sslChipReinitCount, httpErrPipelinedRequestsLow=httpErrPipelinedRequestsLow, svcGrpMemberEstablishedConn=svcGrpMemberEstablishedConn, lsnGrpTotUdpTranslBytes=lsnGrpTotUdpTranslBytes, nsSslVpnStatsGroup=nsSslVpnStatsGroup, sslBeTotDH1024keyExchanges=sslBeTotDH1024keyExchanges, cacheTotNonStoreAbleMissesLow=cacheTotNonStoreAbleMissesLow, sslBeTotSessionsLow=sslBeTotSessionsLow, httpErrIncompleteRequests=httpErrIncompleteRequests, tcpErrCookiePktSeqDrop=tcpErrCookiePktSeqDrop, appFirewallViolWellformednessViolations=appFirewallViolWellformednessViolations, pqtotclienttransactiontime=pqtotclienttransactiontime, scPolicyUrl=scPolicyUrl, sslTotNewSessionsLow=sslTotNewSessionsLow, ClusterEffHealth=ClusterEffHealth, aaaCurICAOnlyConn=aaaCurICAOnlyConn)
mibBuilder.exportSymbols("NS-ROOT-MIB", cacheTotPetHits=cacheTotPetHits, vsvrEntityType=vsvrEntityType, icmpTotTxEchoReply=icmpTotTxEchoReply, nsUserName=nsUserName, lsnLogTotTcpSessionCreateEntries=lsnLogTotTcpSessionCreateEntries, mptcpErrUnknownToken=mptcpErrUnknownToken, scperServiceStatisticsTable=scperServiceStatisticsTable, pptpInCallRep=pptpInCallRep, ipTotTooBig=ipTotTooBig, svcGrpMemberMaxReqPerConn=svcGrpMemberMaxReqPerConn, vsvrInvalidRequestResponse=vsvrInvalidRequestResponse, nat46TotIcmp64=nat46TotIcmp64, sslTotTransactionsLow=sslTotTransactionsLow, pptpStpCtrlConnReq=pptpStpCtrlConnReq, sslTot56BitRC4CiphersLow=sslTot56BitRC4CiphersLow, pptpEchoRep=pptpEchoRep, pbr6StatsGroup=pbr6StatsGroup, ipType=ipType, nsAaaStatsGroup=nsAaaStatsGroup, svcSslClearTextPort=svcSslClearTextPort, cspolicyName=cspolicyName, httpTotRxResponseBytes=httpTotRxResponseBytes, sslInputFormat=sslInputFormat, caMsftSmthStrmVidHR=caMsftSmthStrmVidHR, pqDropped=pqDropped, monitorRetrys=monitorRetrys, pqPolDevno=pqPolDevno, haLicenseMatchState=haLicenseMatchState, cacheTotStoreAbleMissesLow=cacheTotStoreAbleMissesLow, sslTotTLSv1ClientAuthentications=sslTotTLSv1ClientAuthentications, index=index, mptcpErrFastClosepassive=mptcpErrFastClosepassive, siteIp=siteIp, staRenewNoRfsh=staRenewNoRfsh, tcpErrCltOutOfOrder=tcpErrCltOutOfOrder, tcpErrCookiePktSigReject=tcpErrCookiePktSigReject, sysupsvcitmCount=sysupsvcitmCount, haTotPktTx=haTotPktTx, compTcpTotalEoi=compTcpTotalEoi, vsvrscpolicyscCurrentWaitingTime=vsvrscpolicyscCurrentWaitingTime, nsExpressionTable=nsExpressionTable, ifTotRxBytes=ifTotRxBytes, iPv6toV4MapInsertErr=iPv6toV4MapInsertErr, serverDelay=serverDelay, cacheTotStoreAbleMisses=cacheTotStoreAbleMisses, staResponseRecvd=staResponseRecvd, caUnidentifiedHR=caUnidentifiedHR, gslbSitesEntry=gslbSitesEntry, nsNat64GlobalStats=nsNat64GlobalStats, syssvcCount=syssvcCount, totClientDontReuse=totClientDontReuse, cnameRecQueries=cnameRecQueries, MonitorState=MonitorState, delCompBaseServed=delCompBaseServed, dosTotValidCookies=dosTotValidCookies, mptcpMPFailSent=mptcpMPFailSent, nsDomainEntry=nsDomainEntry, svcscpolicytotOpenConn=svcscpolicytotOpenConn, pengPolicyHits=pengPolicyHits, memSizeMB=memSizeMB, drtmDeviation=drtmDeviation, interfaceThroughputNormal=interfaceThroughputNormal, gslbPoliciesEntry=gslbPoliciesEntry, CommandExecutionStatus=CommandExecutionStatus, mediaclassification=mediaclassification, totalServerConnections=totalServerConnections, nsTdInetId=nsTdInetId, sslTotDHAuthorizations=sslTotDHAuthorizations, haErrPropMemFail=haErrPropMemFail, sslTotSSLv3SessionsLow=sslTotSSLv3SessionsLow, sysNetmask=sysNetmask, lsnLogTotTcpMappingCreateEntries=lsnLogTotTcpMappingCreateEntries, cpeconfig=cpeconfig, IpAddressMode=IpAddressMode, dstip=dstip, pqStatsperLBVipTable=pqStatsperLBVipTable, currudpsessions=currudpsessions, ServiceGroupState=ServiceGroupState, cacheTotParameterized304Hits=cacheTotParameterized304Hits, mccAppleLiveStrmngVidpl=mccAppleLiveStrmngVidpl, tcpCurPhysicalServers=tcpCurPhysicalServers, featureLoadBalancing=featureLoadBalancing, vsvrCurClntConnections=vsvrCurClntConnections, crConfig=crConfig, LbPolicy=LbPolicy, gslbDomainIndex=gslbDomainIndex, ipv6TotRxPkts=ipv6TotRxPkts, ifInterfaceAlias=ifInterfaceAlias, udpBadChecksum=udpBadChecksum, nsPolicyStatsEntry=nsPolicyStatsEntry, sslBeTot128BitRC2CiphersLow=sslBeTot128BitRC2CiphersLow, svcTotalPktsRecvdHigh=svcTotalPktsRecvdHigh, spdyv2TotStreams=spdyv2TotStreams, lsnLogTotEntries=lsnLogTotEntries, svcGrpMemberName=svcGrpMemberName, nsInatGlobalStats=nsInatGlobalStats, totalCsConnSucc=totalCsConnSucc, nsHighAvailabilityGroup=nsHighAvailabilityGroup, serviceSynfloodRate=serviceSynfloodRate, aaaCurSessions=aaaCurSessions, nsInatPerNat46StatsTable=nsInatPerNat46StatsTable, mcAndroid=mcAndroid, svcscpolicyDesIpAddress=svcscpolicyDesIpAddress, cacADTSaudio=cacADTSaudio, pcbTotZombieCall=pcbTotZombieCall, modeEdgeConfiguration=modeEdgeConfiguration, vsvrscpolicydestPort=vsvrscpolicydestPort, ifErrDroppedRxPkts=ifErrDroppedRxPkts, httpTotRxRequestBytes=httpTotRxRequestBytes, sslTotRSA1024keyExchanges=sslTotRSA1024keyExchanges, serviceWeight=serviceWeight, ModeStatus=ModeStatus, lldpRemManAddrIfId=lldpRemManAddrIfId, scTotReissuedRequests=scTotReissuedRequests, httpTotTxRequestBytesLow=httpTotTxRequestBytesLow, vlanTable=vlanTable, cachePercent304Hits=cachePercent304Hits, appfwXMLSchemaCompile=appfwXMLSchemaCompile, vsvrSslDHCount=vsvrSslDHCount, PYSNMP_MODULE_ID=netScaler, svcscpolicyscTotalClientConnections=svcscpolicyscTotalClientConnections, mptcpErrInvalOpts=mptcpErrInvalOpts, ipAddress=ipAddress, monProbeFailed=monProbeFailed, ipv6TotDynamicRoutes=ipv6TotDynamicRoutes, svcTotalPktsSentHigh=svcTotalPktsSentHigh, featureOSPF=featureOSPF, pqpolicypqAvgClientTransactionTime=pqpolicypqAvgClientTransactionTime, vsvrTxBytesRate=vsvrTxBytesRate, ipTotTCPfragmentsFwd=ipTotTCPfragmentsFwd, ifTxExcessCollisions=ifTxExcessCollisions, serviceGroupTable=serviceGroupTable, vsId=vsId, inat44name=inat44name, lsnGrpTotIcmpTranslPkts=lsnGrpTotIcmpTranslPkts, ipTotFragmentsHigh=ipTotFragmentsHigh, ifTotTxMbits=ifTotTxMbits, vlanBindIpNetmask=vlanBindIpNetmask, nsIfStatsEntry=nsIfStatsEntry, httpErrIncompleteResponses=httpErrIncompleteResponses, sysMappedIpAddress=sysMappedIpAddress, aclTotPktsAllowedLow=aclTotPktsAllowedLow, pqconfig=pqconfig, ipTotInvalidHeaderSz=ipTotInvalidHeaderSz, cswVsPort=cswVsPort, vlanBridgeGroup=vlanBridgeGroup, pbr6TotPktsAllowed=pbr6TotPktsAllowed, ifErrDroppedTxPkts=ifErrDroppedTxPkts, dosPolicyStatistics=dosPolicyStatistics, ipTotRxPktsHigh=ipTotRxPktsHigh, lldpStatsRxPortNum=lldpStatsRxPortNum, vsvrActiveActiveState=vsvrActiveActiveState, ifErrTxNoNSB=ifErrTxNoNSB, ifErrDroppedRxPktsRl=ifErrDroppedRxPktsRl, caAACaudiobytes=caAACaudiobytes, sslTotDH1024keyExchangesLow=sslTotDH1024keyExchangesLow, sysIpAddress=sysIpAddress, sslTotSSLv2SessionsLow=sslTotSSLv2SessionsLow, serviceGroupMemberEntry=serviceGroupMemberEntry, sslBeTotDH2048keyExchangesHigh=sslBeTotDH2048keyExchangesHigh, sslTotDHAuthorizationsLow=sslTotDHAuthorizationsLow, sslTotSSLv3HandshakesHigh=sslTotSSLv3HandshakesHigh, totQueries=totQueries, ipTotRxPktsLow=ipTotRxPktsLow, aaaAuthSuccess=aaaAuthSuccess, sslCurSessionInUseHigh=sslCurSessionInUseHigh, dnsTotNSrecFailed=dnsTotNSrecFailed, svcGroupMemberRequestRate=svcGroupMemberRequestRate, siteTotalRequestBytes=siteTotalRequestBytes, svcGslbState=svcGslbState, compTotalTxPackets=compTotalTxPackets, totalResponses=totalResponses, rnatTotRxPkts=rnatTotRxPkts, protocol=protocol, sslCrlTable=sslCrlTable, thresholdFail=thresholdFail, haErrSyncFailure=haErrSyncFailure, caFLVVid=caFLVVid, vserverAdvanceSslConfigEntry=vserverAdvanceSslConfigEntry, udpCurRateCounter=udpCurRateCounter, sslBeTotTLSv1Sessions=sslBeTotTLSv1Sessions, httpErrNoreuseMultipart=httpErrNoreuseMultipart, sysBuildVersion=sysBuildVersion, cacheTotFlashcacheMisses=cacheTotFlashcacheMisses, httpTotClenResponsesHigh=httpTotClenResponsesHigh, lsnTotIcmpTxBytes=lsnTotIcmpTxBytes, pqpolicyDropped=pqpolicyDropped, nsResourceGroup=nsResourceGroup, brVersion=brVersion, socksConnRespSent=socksConnRespSent, udpTotRxBytesHigh=udpTotRxBytesHigh, gslbcDomainIndex=gslbcDomainIndex, tcpErrCltHole=tcpErrCltHole, mcMsSmthStrmVidBytes=mcMsSmthStrmVidBytes, vsvrCurServicesOutOfSvc=vsvrCurServicesOutOfSvc, aclTotPktsAllowed=aclTotPktsAllowed, dosPolicyTable=dosPolicyTable, icmpTotRxBytesHigh=icmpTotRxBytesHigh, ifTxCarrierError=ifTxCarrierError, dnsTotalQueries=dnsTotalQueries, htmlInjectionStatsGroup=htmlInjectionStatsGroup, HAON=HAON, sslTotBkendTlSv11Renego=sslTotBkendTlSv11Renego, alarmVipRhiInetAddress=alarmVipRhiInetAddress, operator=operator, pqPriority3Requests=pqPriority3Requests, ipTotTxMbits=ipTotTxMbits, delCompDone=delCompDone, sslTotTLSv1ClientAuthenticationsLow=sslTotTLSv1ClientAuthenticationsLow, delCompErrBypassed=delCompErrBypassed, compHttpBandwidthSaving=compHttpBandwidthSaving, socksMethReqRcvd=socksMethReqRcvd, cswConfigTable=cswConfigTable, sslCertKeyName=sslCertKeyName, winsRequestHit=winsRequestHit, vsvrTotalRequestBytesHigh=vsvrTotalRequestBytesHigh, cpeeIndex=cpeeIndex, featureWebLogging=featureWebLogging, sslBeTotNULLAuthorizationsHigh=sslBeTotNULLAuthorizationsHigh, sslTotTLSv11ClientAuthentications=sslTotTLSv11ClientAuthentications, lldpLocSysName=lldpLocSysName, appfwappFirewallViolXmlGenericViolationsPerProfile=appfwappFirewallViolXmlGenericViolationsPerProfile, icmpTotThresholdExceedsHigh=icmpTotThresholdExceedsHigh, cookiePacketSeqReject=cookiePacketSeqReject, lldpRemSysCapSupported=lldpRemSysCapSupported, cswStatisticsEntry=cswStatisticsEntry, lldpMessageTxHoldMultiplier=lldpMessageTxHoldMultiplier, inatNat46Icmp46=inatNat46Icmp46, numPEs=numPEs, lsnLogTotTcpMappingDeleteEntries=lsnLogTotTcpMappingDeleteEntries, sslBeTotTLSv12Sessions=sslBeTotTLSv12Sessions, sslCipherGroupTable=sslCipherGroupTable, lsnDSLiteCurSubscribers=lsnDSLiteCurSubscribers, nsInatPerNatStatsTable=nsInatPerNatStatsTable, dospolicyname=dospolicyname, cipherGroupTable=cipherGroupTable, vsvrTotalPktsRecvdHigh=vsvrTotalPktsRecvdHigh, vserverScpolicyTable=vserverScpolicyTable, lldpLocPortId=lldpLocPortId, lsnTotIcmpDrpPkts=lsnTotIcmpDrpPkts, lbvsvrPersistenceTimeOut=lbvsvrPersistenceTimeOut, staRnewNoClnt=staRnewNoClnt, cipher56BitRC4=cipher56BitRC4, cfgHtmlServed=cfgHtmlServed, partitionConfigEvent=partitionConfigEvent, sslBeTotMD5MacHigh=sslBeTotMD5MacHigh, gslbStatistics=gslbStatistics, pptpSetLinkInfo=pptpSetLinkInfo, svcGslbSiteName=svcGslbSiteName, contentFilterHitsHigh=contentFilterHitsHigh, mptcpErrBadCksum=mptcpErrBadCksum, caUnidentifiedcache=caUnidentifiedcache, appfwappFirewallReqBytesPerProfile=appfwappFirewallReqBytesPerProfile, totalClientConnections=totalClientConnections)
mibBuilder.exportSymbols("NS-ROOT-MIB", aaaAuthFail=aaaAuthFail, txCollisions=txCollisions, numCPUs=numCPUs, diskUsageNormal=diskUsageNormal, sslBeTot56BitDESCiphers=sslBeTot56BitDESCiphers, tcpTotClientConnOpenRate=tcpTotClientConnOpenRate, contentFilterHitsLow=contentFilterHitsLow, sslCryptoUtilization=sslCryptoUtilization, acl6TotPktsBridged=acl6TotPktsBridged, vserverRxBytesRateNormal=vserverRxBytesRateNormal, totOtherErrors=totOtherErrors, inatNat46Udp46=inatNat46Udp46, sslTotECDHE256keyExchanges=sslTotECDHE256keyExchanges, policydevno=policydevno, icmpTotPMTUDiscoveryDisabled=icmpTotPMTUDiscoveryDisabled, sslBeTotTLSv1ClientAuthenticationsLow=sslBeTotTLSv1ClientAuthenticationsLow, ifTotXoffStateEntered=ifTotXoffStateEntered, crMapDstName=crMapDstName, resMemUsage=resMemUsage, sslBeTotSSLv3ClientAuthenticationsLow=sslBeTotSSLv3ClientAuthenticationsLow, httpTotTxResponseBytes=httpTotTxResponseBytes, httpErrPipelinedRequests=httpErrPipelinedRequests, currentDelay=currentDelay, ipAddr=ipAddr, sslTotSSLv3ClientAuthenticationsLow=sslTotSSLv3ClientAuthenticationsLow, lbvsvrLBMethod=lbvsvrLBMethod, wsMappedIpAddress=wsMappedIpAddress, lsnTotNAT64TcpTxBytes=lsnTotNAT64TcpTxBytes, sslBeTotSHAMacHigh=sslBeTotSHAMacHigh, dnsServerZoneTable=dnsServerZoneTable, wsMaxClientList=wsMaxClientList, monitorDowntime=monitorDowntime, tcpErrRstOutOfWindow=tcpErrRstOutOfWindow, vsvrTotalSynsRecvdLow=vsvrTotalSynsRecvdLow, vlan=vlan, sslTotOffloadRSAKeyExchangesHigh=sslTotOffloadRSAKeyExchangesHigh, ifTxAvgPacketRate=ifTxAvgPacketRate, pqTotalPolicyMatches=pqTotalPolicyMatches, vsvrSsleRSACount=vsvrSsleRSACount, AuthorizationStatus=AuthorizationStatus, httpTotRequests=httpTotRequests, lsnSessionsRate=lsnSessionsRate, vlanTotRxBytes=vlanTotRxBytes, sslBeTotDHAuthorizationsHigh=sslBeTotDHAuthorizationsHigh, svcgroupmemCount=svcgroupmemCount, vserverFullName=vserverFullName, VServerType=VServerType, appfwappFirewallViolBufferOverflowPerProfile=appfwappFirewallViolBufferOverflowPerProfile, vsLbMethod=vsLbMethod, dnsTotSOArecFailed=dnsTotSOArecFailed, httpTotTxRequestBytes=httpTotTxRequestBytes, nsSslStatsGroup=nsSslStatsGroup, pptpCallClrReq=pptpCallClrReq, dnsRecordType=dnsRecordType, cpeconfigactionTable=cpeconfigactionTable, totalFsRequest=totalFsRequest, appFirewallViolSignature=appFirewallViolSignature, clusterBackplaneHBMissing=clusterBackplaneHBMissing, icmpTotRxPktsHigh=icmpTotRxPktsHigh, ipRnatTotRxPkts=ipRnatTotRxPkts, dnsCurRecords=dnsCurRecords, cacheLargestResponseReceived=cacheLargestResponseReceived, appFirewallViolBufferOverflow=appFirewallViolBufferOverflow, ifErrDuplexMismatch=ifErrDuplexMismatch, svcSslDH=svcSslDH, appFirewallViolDenyURL=appFirewallViolDenyURL, nsSslConfigGroup=nsSslConfigGroup, ipv6TotIcmpFragPkts=ipv6TotIcmpFragPkts, mcMsSmthStrmVid=mcMsSmthStrmVid, nsIpAddrEntry=nsIpAddrEntry, sureConnect=sureConnect, voltageNormal=voltageNormal, ssloffloading=ssloffloading, dnsCurAuthEntries=dnsCurAuthEntries, cacMP4Vid=cacMP4Vid, svcscpolicyPrimaryPort=svcscpolicyPrimaryPort, vsvrscpolicytotClientTransaction=vsvrscpolicytotClientTransaction, vsvrTotalPktsSentHigh=vsvrTotalPktsSentHigh, vlanEntry=vlanEntry, nsTdInetVlan=nsTdInetVlan, sslTotTLSv11TransactionRate=sslTotTLSv11TransactionRate, ipTotUDPfragmentsFwd=ipTotUDPfragmentsFwd, sslTot56BitRC2CiphersHigh=sslTot56BitRC2CiphersHigh, scPolUrl=scPolUrl, udpTotTxPktsLow=udpTotTxPktsLow, modeDirectRouteAdv=modeDirectRouteAdv, pptpTotCtrlSessions=pptpTotCtrlSessions, httpTotChunkedRequests=httpTotChunkedRequests, cmpTotTxbytes=cmpTotTxbytes, ipTotAddrLookup=ipTotAddrLookup, icmpCurRateThreshold=icmpCurRateThreshold, sslTotCipherAES256=sslTotCipherAES256, vsvrSslClearTextPort=vsvrSslClearTextPort, cacheNumMBReadFromDisk=cacheNumMBReadFromDisk, vserverName=vserverName, virServiceTable=virServiceTable, sitePublicIp=sitePublicIp, tcpMaxServerConnections=tcpMaxServerConnections, acl6TotCount=acl6TotCount, pengPolicyFullName=pengPolicyFullName, dnsTotSRVresponse=dnsTotSRVresponse, sslTot128BitAESGCMCiphers=sslTot128BitAESGCMCiphers, cacAppleLiveStreamingPlaylistVid=cacAppleLiveStreamingPlaylistVid, totalChunkedResponses=totalChunkedResponses, scUnSupBrow=scUnSupBrow, svcscpolicyscTotalResponsesReceived=svcscpolicyscTotalResponsesReceived, cacheTotMissesHigh=cacheTotMissesHigh, tcpTotSynHeld=tcpTotSynHeld, monitorResponseTimeout=monitorResponseTimeout, svcscpolicyscAverageClientTTLB=svcscpolicyscAverageClientTTLB, ipv6TotTxPkts=ipv6TotTxPkts, pptpCntlOcreq=pptpCntlOcreq, sslTot168Bit3DESCiphersHigh=sslTot168Bit3DESCiphersHigh, gslbDomainQueries=gslbDomainQueries, totalGets=totalGets, certKeyName=certKeyName, pptpOutCallReply=pptpOutCallReply, delCompTcpRxBytes=delCompTcpRxBytes, tcpErrSecondRetransmissions=tcpErrSecondRetransmissions, cache64MaxMemoryKB=cache64MaxMemoryKB, caAACaudio=caAACaudio, svcgrpSvcGroupState=svcgrpSvcGroupState, ipTotTtlExpired=ipTotTtlExpired, sslBeTot56BitRC4CiphersLow=sslBeTot56BitRC4CiphersLow, sslCardNormal=sslCardNormal, operation=operation, pqPolQdepthThreshold=pqPolQdepthThreshold, lsnGrpSessRate=lsnGrpSessRate, sslTot56BitDESCiphersHigh=sslTot56BitDESCiphersHigh, compressionStats=compressionStats, authDH=authDH, certKeyEntry=certKeyEntry, SvcEntityType=SvcEntityType, featureRIP=featureRIP, vlanTotTxBytesHigh=vlanTotTxBytesHigh, sslBeTotSessionMultiplexAttemptsLow=sslBeTotSessionMultiplexAttemptsLow, aaaAuthNonHttpFail=aaaAuthNonHttpFail, dnsTotReqRefusals=dnsTotReqRefusals, caAlptopDsktpBytes=caAlptopDsktpBytes, clNodeHealth=clNodeHealth, nat64TotUdpSessions=nat64TotUdpSessions, serviceRequestRateNormal=serviceRequestRateNormal, tcpTotZombieSvrConnFlushed=tcpTotZombieSvrConnFlushed, pbrTotNullDrop=pbrTotNullDrop, lsnLogTotUdpMappingDeleteEntries=lsnLogTotUdpMappingDeleteEntries, svcscpolicyscTotalResponseBytes=svcscpolicyscTotalResponseBytes, phyPort=phyPort, cpeeValue=cpeeValue, sslTotNULLAuthorizations=sslTotNULLAuthorizations, lsnTotNAT64RxPkts=lsnTotNAT64RxPkts, page=page, sslTotDH2048keyExchangesHigh=sslTotDH2048keyExchangesHigh, haPeerInetAddrType=haPeerInetAddrType, gslbPolicyName=gslbPolicyName, servicePersistentHitsLow=servicePersistentHitsLow, aclPriority=aclPriority, lsnGrpCurTcpSessions=lsnGrpCurTcpSessions, psState=psState, tcpCurRateThreshold=tcpCurRateThreshold, tcpErrFifthRetransmissions=tcpErrFifthRetransmissions, sslTotDH512keyExchanges=sslTotDH512keyExchanges, nsLsnGroupEntry=nsLsnGroupEntry, ipTotVIPDown=ipTotVIPDown, appFirewallRet5xx=appFirewallRet5xx, lsnLogTotMappingCreateEntries=lsnLogTotMappingCreateEntries, dosAvgValidClients=dosAvgValidClients, dtlsStaValidation=dtlsStaValidation, ipVlan=ipVlan, lsnLogTotIcmpSessionDeleteEntries=lsnLogTotIcmpSessionDeleteEntries, appFirewallRedirects=appFirewallRedirects, tcpErrBadStateConn=tcpErrBadStateConn, udpTotTxBytes=udpTotTxBytes, serviceTable=serviceTable, sslBeTotMD5Mac=sslBeTotMD5Mac, lsnLogTotAPDMappingCreateEntries=lsnLogTotAPDMappingCreateEntries, pqpolicypqTotQueueDepth=pqpolicypqTotQueueDepth, aclTotMisses=aclTotMisses, mptcpErrCryptoNotSupported=mptcpErrCryptoNotSupported, ifErrPktRx=ifErrPktRx, appfwappFirewallViolCSRFtagPerProfile=appfwappFirewallViolCSRFtagPerProfile, cmpTotRxbytes=cmpTotRxbytes, sslBeTotDSSAuthorizationsHigh=sslBeTotDSSAuthorizationsHigh, crVsIndex=crVsIndex, sslTotHwDecBE=sslTotHwDecBE, mc3GPVidBytes=mc3GPVidBytes, nsmcStatsGroup=nsmcStatsGroup, svcscpolicydestPort=svcscpolicydestPort, lsnNAT64CurSubscribers=lsnNAT64CurSubscribers, pqpoldevno=pqpoldevno, socksClientError=socksClientError, caAunindentifiedBytesHR=caAunindentifiedBytesHR, lsnLogTotSessionCreateEntries=lsnLogTotSessionCreateEntries, svctotalJsTransactions=svctotalJsTransactions, featureAAA=featureAAA, vxlanVNId=vxlanVNId, ipTotBadMacAddrsLow=ipTotBadMacAddrsLow, sslTotTLSv1TransactionsHigh=sslTotTLSv1TransactionsHigh, advanceSSLConfigTable=advanceSSLConfigTable, sslBeTotNULLAuthorizations=sslBeTotNULLAuthorizations, inatNat46Drop64=inatNat46Drop64, httpErrIncompleteRequestsHigh=httpErrIncompleteRequestsHigh, vsvrTotalResponseBytes=vsvrTotalResponseBytes, haPropFailure=haPropFailure, crVsPort=crVsPort, sysTotSaveConfigs=sysTotSaveConfigs, vrid=vrid, sslBeTotEcdheCurve224=sslBeTotEcdheCurve224, sslBeTotRSAAuthorizationsHigh=sslBeTotRSAAuthorizationsHigh, caTotlookupnostoremiss=caTotlookupnostoremiss, serviceCipherBindingEntry=serviceCipherBindingEntry, nsIPAddress=nsIPAddress, vsvrIp6Address=vsvrIp6Address, cacAppleLiveStrmngVid=cacAppleLiveStrmngVid, vsvrTotHits=vsvrTotHits, dnsCurEntries=dnsCurEntries, sslBeTot56BitRC2CiphersHigh=sslBeTot56BitRC2CiphersHigh, svcGrpMemberSynfloodRate=svcGrpMemberSynfloodRate, featureInternalCaching=featureInternalCaching, totalrxbytes=totalrxbytes, sslBeTot128BitRC4CiphersHigh=sslBeTot128BitRC4CiphersHigh, cacheErrMemAllocLow=cacheErrMemAllocLow, fromPartition=fromPartition, dnsTotUnsupportedQueryClass=dnsTotUnsupportedQueryClass, sslBeTot64BitRC4CiphersHigh=sslBeTot64BitRC4CiphersHigh, lldpRemSysName=lldpRemSysName, nsSysHealthEntry=nsSysHealthEntry, vPathTotL3EncapPkts=vPathTotL3EncapPkts, appfwViolations=appfwViolations, sslstatistics=sslstatistics, ipTotTxPktsLow=ipTotTxPktsLow, lsnCurNAT64sessions=lsnCurNAT64sessions, sslCards=sslCards, domainName=domainName, svcGrpMemberFullName=svcGrpMemberFullName, vlanconfigEntry=vlanconfigEntry, sslTotTLSv1SessionsHigh=sslTotTLSv1SessionsHigh, resetStats=resetStats, crMapDstUrl=crMapDstUrl, ipTotBadMacAddrsHigh=ipTotBadMacAddrsHigh, alarmVsvrOldName=alarmVsvrOldName, mptcpErrExtnFlagSet=mptcpErrExtnFlagSet, ca3GPVidBytes=ca3GPVidBytes, nsFeatureInfo=nsFeatureInfo, sslTotBkendTlSv12Renego=sslTotBkendTlSv12Renego, cacheRecentPercentHit=cacheRecentPercentHit, lsnNAT64TcpSessionsRate=lsnNAT64TcpSessionsRate, mcUnidentified=mcUnidentified, svcscpolicydesIpAddress=svcscpolicydesIpAddress, zoneIndex=zoneIndex, tcpTotRxBytes=tcpTotRxBytes, httpErrIncompleteResponsesLow=httpErrIncompleteResponsesLow, scperPolicyStatisticsTable=scperPolicyStatisticsTable, ipv6TotIpv4To6Conversions=ipv6TotIpv4To6Conversions, totclienttransaction=totclienttransaction)
mibBuilder.exportSymbols("NS-ROOT-MIB", cacheCompressedBytesServedHigh=cacheCompressedBytesServedHigh, udpCurRateThresholdExceeds=udpCurRateThresholdExceeds, appfwappFirewallLongAvgRespTimePerProfile=appfwappFirewallLongAvgRespTimePerProfile, sslTot128BitRC2CiphersHigh=sslTot128BitRC2CiphersHigh, memUtilization=memUtilization, nsTdInetAddressType=nsTdInetAddressType, cacAACaudio=cacAACaudio, dnsTotResponseBadLen=dnsTotResponseBadLen, lsnTotNAT64TcpDrpPkts=lsnTotNAT64TcpDrpPkts, compTotalRxPackets=compTotalRxPackets, appfwDenyUrl=appfwDenyUrl, mptcpErrAddridExist=mptcpErrAddridExist, cachegroupName=cachegroupName, nat64TotTcpSessions=nat64TotTcpSessions, cipher128BitIDEA=cipher128BitIDEA, vPathTotFragEncapPkts=vPathTotFragEncapPkts, sslBeTot40BitDESCiphersLow=sslBeTot40BitDESCiphersLow, ipTotUnknownSvcsLow=ipTotUnknownSvcsLow, sslTotOffloadBulkRC4=sslTotOffloadBulkRC4, sslBeTotDHAuthorizations=sslBeTotDHAuthorizations, modeUseSubnetIp=modeUseSubnetIp, lsnGrpTotTranslBytes=lsnGrpTotTranslBytes, lbConfig=lbConfig, id=id, svcscpolicyscTotalClientTTLB=svcscpolicyscTotalClientTTLB, pqDevno=pqDevno, sslTotTLSv1Transactions=sslTotTLSv1Transactions, lsnTotTcpRxPkts=lsnTotTcpRxPkts, sslTotECDSAAuthorizations=sslTotECDSAAuthorizations, dropped=dropped, socksConnReqSent=socksConnReqSent, ifRxCRCErrors=ifRxCRCErrors, caMsftSmthStrmVid=caMsftSmthStrmVid, aaaCurICASessions=aaaCurICASessions, ifTotRxXonPause=ifTotRxXonPause, lldpStatsTxPortNum=lldpStatsTxPortNum, httpTot11Requests=httpTot11Requests, vlanMemberInterfaces=vlanMemberInterfaces, pbr6FullName=pbr6FullName, httpTotResposesRate=httpTotResposesRate, vridStateChange=vridStateChange, ipTotOutOfOrderFrag=ipTotOutOfOrderFrag, sslBeTotTLSv11Handshakes=sslBeTotTLSv11Handshakes, appfwappFirewallShortAvgRespTimePerProfile=appfwappFirewallShortAvgRespTimePerProfile, vsvrServiceEntityType=vsvrServiceEntityType, cacheTotHitsLow=cacheTotHitsLow, svcInetAddressType=svcInetAddressType, cipherGroupId=cipherGroupId, crConfigGroup=crConfigGroup, haTotTimerRecoveries=haTotTimerRecoveries, monitorFailedId=monitorFailedId, cacAppleLiveStreamingVidHR=cacAppleLiveStreamingVidHR, appfwXMLSQL=appfwXMLSQL, vsvrTicksSinceLastStateChange=vsvrTicksSinceLastStateChange, sslTotSessionHitsHigh=sslTotSessionHitsHigh, httpErrLargeChunkHigh=httpErrLargeChunkHigh, pbrFullName=pbrFullName, svcTotalSynsRecvdLow=svcTotalSynsRecvdLow, httpTotChunkedResponsesLow=httpTotChunkedResponsesLow, cacheRecentPercentParameterizedHits=cacheRecentPercentParameterizedHits, ipTotBadMacAddrs=ipTotBadMacAddrs, appfwProfileTable=appfwProfileTable, vsvrTotalRequestsHigh=vsvrTotalRequestsHigh, totalResponses1_0=totalResponses1_0, nsLLDPRemTable=nsLLDPRemTable, svcdospolicydosPhysicalServiceIP=svcdospolicydosPhysicalServiceIP, scPolicyUrlHits=scPolicyUrlHits, mptcpCurPendingJoin=mptcpCurPendingJoin, httpTot10ResponsesLow=httpTot10ResponsesLow, crlId=crlId, vServerRequestRate=vServerRequestRate, pptpCntlIcreq=pptpCntlIcreq, dosPolicyEntry=dosPolicyEntry, monitorMemberTable=monitorMemberTable, postReqs=postReqs, httpTotClenReqHigh=httpTotClenReqHigh, alarmVipRhiIpAddr=alarmVipRhiIpAddr, appfwXMLAttachment=appfwXMLAttachment, cacheBytesServedLow=cacheBytesServedLow, lsnTotNAT64TxBytes=lsnTotNAT64TxBytes, ipTotTxMbitsLow=ipTotTxMbitsLow, lsnGrpUdpSessRate=lsnGrpUdpSessRate, monitorFailedPort=monitorFailedPort, appfwXMLXSS=appfwXMLXSS, monitorFailedCon=monitorFailedCon, sslTotSSLv2HandshakesHigh=sslTotSSLv2HandshakesHigh, svcscpolicyscCurrentWaitingTime=svcscpolicyscCurrentWaitingTime, sslTotTLSv1TransactionsLow=sslTotTLSv1TransactionsLow, appFirewallGroup=appFirewallGroup, lsnTotUdpTxBytes=lsnTotUdpTxBytes, sslBeTot56BitRC4Ciphers=sslBeTot56BitRC4Ciphers, temperatureNormal=temperatureNormal, nsProducts=nsProducts, sslBeTotRSA2048keyExchanges=sslBeTotRSA2048keyExchanges, lsnNAT64SessionsRate=lsnNAT64SessionsRate, totAuthNoDataResps=totAuthNoDataResps, sslBeTotRSA512keyExchanges=sslBeTotRSA512keyExchanges, lsnTotTcpTxBytes=lsnTotTcpTxBytes, svcActiveConn=svcActiveConn, ipTotUnknownDstRcvd=ipTotUnknownDstRcvd, sslTotRSA512keyExchanges=sslTotRSA512keyExchanges, ClusterSyncState=ClusterSyncState, sslTotRSA2048keyExchangesLow=sslTotRSA2048keyExchangesLow, featureContentFiltering=featureContentFiltering, dnsTotANYrecFailed=dnsTotANYrecFailed, icmpTotInvalidBodyLen=icmpTotInvalidBodyLen, svcEstablishedConn=svcEstablishedConn, lldpLocPortIdSubtype=lldpLocPortIdSubtype, dosPolicyName=dosPolicyName, totudpsessions=totudpsessions, serviceSynfloodNormal=serviceSynfloodNormal, sslBeTot168Bit3DESCiphersHigh=sslBeTot168Bit3DESCiphersHigh, csPipolicyName=csPipolicyName, tcpErrSynDroppedCongestion=tcpErrSynDroppedCongestion, haCurStatus=haCurStatus, ipTotRxMbitsLow=ipTotRxMbitsLow, cachePercentByteHit=cachePercentByteHit, keyExDH512=keyExDH512, sslSessionsPerSec=sslSessionsPerSec, vsvrscpolicyavgServerTransactionTime=vsvrscpolicyavgServerTransactionTime, appFirewallViolFieldConsistency=appFirewallViolFieldConsistency, qdepth=qdepth, svcGrpMemberRequestRate=svcGrpMemberRequestRate, nat46TotUdp64=nat46TotUdp64, lsnLogTotTcpSessionDeleteEntries=lsnLogTotTcpSessionDeleteEntries, vserverPqpolicyEntry=vserverPqpolicyEntry, gslbDomainStatsTable=gslbDomainStatsTable, nsIpAddrTable=nsIpAddrTable, appFirewallViolCookie=appFirewallViolCookie, ipTotRxBytes=ipTotRxBytes, pqQdepthThreshold=pqQdepthThreshold, nsTdInetAddressTable=nsTdInetAddressTable, serviceAdvanceSslConfigEntry=serviceAdvanceSslConfigEntry, tcpCurClientConn=tcpCurClientConn, httpTotClenResponses=httpTotClenResponses, totalbroadcastpackets=totalbroadcastpackets, mtuEntryTimeoutValue=mtuEntryTimeoutValue, sslTotDecHw=sslTotDecHw, httpTotResponsesHigh=httpTotResponsesHigh, inatname=inatname, dosAvgDospriClients=dosAvgDospriClients, tcpErrSynSentBadAck=tcpErrSynSentBadAck, aclFullName=aclFullName, httpErrIncompleteResponsesHigh=httpErrIncompleteResponsesHigh, csNonHttpProbeHit=csNonHttpProbeHit, caMicrosoftSmoothStreamingVidCacheBytes=caMicrosoftSmoothStreamingVidCacheBytes, lsnLogTotWrongFlags=lsnLogTotWrongFlags, scTotCondTriggered=scTotCondTriggered, dns64TotQueries=dns64TotQueries, modeMacBasedForwarding=modeMacBasedForwarding, sslChipReinit=sslChipReinit, compTcpTotalRxBytes=compTcpTotalRxBytes, svcGrpMemberWeight=svcGrpMemberWeight, tcpErrCookiePktSeqReject=tcpErrCookiePktSeqReject, aclTotPktsNAT=aclTotPktsNAT, caotherHR=caotherHR, sslBeTot128BitRC4Ciphers=sslBeTot128BitRC4Ciphers, appfwappFirewallViolFieldConsistencyPerProfile=appfwappFirewallViolFieldConsistencyPerProfile, cpe=cpe, sslBeTotEcdheCurve256=sslBeTotEcdheCurve256, transactiontime=transactiontime, mptcpErrVersionNotSupported=mptcpErrVersionNotSupported, appfwSafeCommerce=appfwSafeCommerce, siteTotalRequests=siteTotalRequests, sslTot56BitDESCiphers=sslTot56BitDESCiphers, compTcpBandwidthSaving=compTcpBandwidthSaving, svcgrpTdId=svcgrpTdId, httpErrIncompleteRequestsLow=httpErrIncompleteRequestsLow, cpeconfigpolicyTable=cpeconfigpolicyTable, icmpTotRxEchoLow=icmpTotRxEchoLow, lsnGrpTotUdpTranslPkts=lsnGrpTotUdpTranslPkts, svcPort=svcPort, cpeeQualifier=cpeeQualifier, lldpLocPortNum=lldpLocPortNum, gslbDomainStats=gslbDomainStats, sessHeader=sessHeader, totmarkercell=totmarkercell, sslBeTotNULLCiphers=sslBeTotNULLCiphers, nsClusterStatsGroup=nsClusterStatsGroup, cacMP4VidHR=cacMP4VidHR, svcTotalClients=svcTotalClients, ifRxFrameErrors=ifRxFrameErrors, sslTotSessionMissLow=sslTotSessionMissLow, toPartition=toPartition, rateLmtThresholdExceed=rateLmtThresholdExceed, crPolicyMapConfigTable=crPolicyMapConfigTable, appfwappFirewallViolCookiePerProfile=appfwappFirewallViolCookiePerProfile, sslCardStatusMsg=sslCardStatusMsg, caAndroidBytes=caAndroidBytes, commandFailureReason=commandFailureReason, sslBeTot40BitRC2Ciphers=sslBeTot40BitRC2Ciphers, sslTotTLSv1ClientAuthenticationsHigh=sslTotTLSv1ClientAuthenticationsHigh, cacheRecentPercentOriginBandwidthSaved=cacheRecentPercentOriginBandwidthSaved, caAunindentifiedBytes=caAunindentifiedBytes, nsClientIPAddr=nsClientIPAddr, csHttpProbeHit=csHttpProbeHit, clAdminState=clAdminState, lsnLogTotWrongMappingFlagEntries=lsnLogTotWrongMappingFlagEntries, wsIfStatsEntry=wsIfStatsEntry, platformRateLimitThresholdNormal=platformRateLimitThresholdNormal, surgeCount=surgeCount, appFirewallViolRefererHeader=appFirewallViolRefererHeader, nsInetAddressEntry=nsInetAddressEntry, haPeerInetAddr=haPeerInetAddr, icmpTotBadChecksum=icmpTotBadChecksum, nsInetAddress=nsInetAddress, ipv6ErrHdr=ipv6ErrHdr, rs9000=rs9000, vsIpAddress=vsIpAddress, entityTxRateNormal=entityTxRateNormal, siteCurClntConnections=siteCurClntConnections, nsDnsServerStatsGroup=nsDnsServerStatsGroup, dnskeyTimeToExpire=dnskeyTimeToExpire, monServiceMemberEntry=monServiceMemberEntry, sslBeTotSHAMacLow=sslBeTotSHAMacLow, nsLLDPGroup=nsLLDPGroup, sslBeTotRSA2048keyExchangesLow=sslBeTotRSA2048keyExchangesLow, vserverGlobalStatsGroup=vserverGlobalStatsGroup, vlanBindIpAddress=vlanBindIpAddress, cpeExprConfigStatsTable=cpeExprConfigStatsTable, caMsftSmthStrVid=caMsftSmthStrVid, alarmVipRhiState=alarmVipRhiState, vsvrSslDH=vsvrSslDH, crpolicyHits=crpolicyHits, psPort=psPort, lsnGrpTotTcpDrpPkts=lsnGrpTotTcpDrpPkts, cacheTotRequestsLow=cacheTotRequestsLow, serviceEntry=serviceEntry, vsvrscpolicyscPhysicalServiceIP=vsvrscpolicyscPhysicalServiceIP, aggregateBWUseNormal=aggregateBWUseNormal, sslBeExpiredSessions=sslBeExpiredSessions, httpTotRequestsRate=httpTotRequestsRate, caAndroidBytesHR=caAndroidBytesHR, dnsTotANYqueries=dnsTotANYqueries, sslTotCipherAES128=sslTotCipherAES128, compTotalTxBytes=compTotalTxBytes, nwMetricExchange=nwMetricExchange, ifRxAvgBandwidthUsage=ifRxAvgBandwidthUsage, lldpStatsTxPortFramesTotal=lldpStatsTxPortFramesTotal, vsvrTdId=vsvrTdId, vsvrscpolicyAvgServerTransactionTime=vsvrscpolicyAvgServerTransactionTime, sslBeTotSSLv3SessionsHigh=sslBeTotSSLv3SessionsHigh, caIosBytes=caIosBytes, diskUsageHigh=diskUsageHigh, persistanceTimeout=persistanceTimeout, siteTotalResponseBytes=siteTotalResponseBytes, tcpErrRetransmit=tcpErrRetransmit, haCurPeerInc=haCurPeerInc, wsIfName=wsIfName, sslTotOffloadDHKeyExchanges=sslTotOffloadDHKeyExchanges, rxAveragePacketRate=rxAveragePacketRate, nwMetricMepStatus=nwMetricMepStatus, nsLLDPRemManAddrEntry=nsLLDPRemManAddrEntry, vserverSynfloodNormal=vserverSynfloodNormal)
mibBuilder.exportSymbols("NS-ROOT-MIB", clusterVersionMismatch=clusterVersionMismatch, nsIp6StatsGroup=nsIp6StatsGroup, tagging=tagging, vsvrRxBytesRate=vsvrRxBytesRate, entitySynfloodNormal=entitySynfloodNormal, scConfig=scConfig, crlEntry=crlEntry, sysHealthDiskName=sysHealthDiskName, svcGrpMemberPrimaryInetAddress=svcGrpMemberPrimaryInetAddress, partitionBWLimitExceeded=partitionBWLimitExceeded, httpTotResponses=httpTotResponses, socksMethReqSent=socksMethReqSent, tcpTotZombiePassiveHalfCloseSrvConnFlushed=tcpTotZombiePassiveHalfCloseSrvConnFlushed, minPathMTU=minPathMTU, cacheTotMissesLow=cacheTotMissesLow, monitorCount=monitorCount, acl6TotPktsNAT=acl6TotPktsNAT, vsvrCurServicesUnKnown=vsvrCurServicesUnKnown, nsRnatPerIPStatsEntry=nsRnatPerIPStatsEntry, sslTotOffloadBulkDESHigh=sslTotOffloadBulkDESHigh, devno=devno)
