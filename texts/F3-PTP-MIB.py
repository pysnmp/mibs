#
# PySNMP MIB module F3-PTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-PTP-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 09:33:40 2024
# On host fv-az1766-730 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
IpPriorityMapMode, CmPmBinAction, OperationalState, SecondaryState, PerfCounter64, IpVersion, AdminState, CmPmIntervalType, F3DisplayString, FlowSecState = mibBuilder.importSymbols("CM-COMMON-MIB", "IpPriorityMapMode", "CmPmBinAction", "OperationalState", "SecondaryState", "PerfCounter64", "IpVersion", "AdminState", "CmPmIntervalType", "F3DisplayString", "FlowSecState")
neIndex, slotIndex, shelfIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "neIndex", "slotIndex", "shelfIndex")
cmEthernetNetPortIndex, cmEthernetNetPortEntry, cmEthernetAccPortIndex, cmEthernetAccPortEntry, cmEthernetTrafficPortEntry, cmEthernetTrafficPortIndex = mibBuilder.importSymbols("CM-FACILITY-MIB", "cmEthernetNetPortIndex", "cmEthernetNetPortEntry", "cmEthernetAccPortIndex", "cmEthernetAccPortEntry", "cmEthernetTrafficPortEntry", "cmEthernetTrafficPortIndex")
CmGenPgSwitchoverReason, = mibBuilder.importSymbols("CM-REDUNDANCY-MIB", "CmGenPgSwitchoverReason")
HoldoverAccuracy, TimeSource, SSMQualityLevel = mibBuilder.importSymbols("F3-SYNC-MIB", "HoldoverAccuracy", "TimeSource", "SSMQualityLevel")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, Gauge32, iso, MibIdentifier, Integer32, Unsigned32, Counter32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "Gauge32", "iso", "MibIdentifier", "Integer32", "Unsigned32", "Counter32", "ModuleIdentity", "NotificationType")
TextualConvention, RowStatus, VariablePointer, StorageType, DateAndTime, TruthValue, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "VariablePointer", "StorageType", "DateAndTime", "TruthValue", "DisplayString", "MacAddress")
f3PtpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18))
f3PtpMIB.setRevisions(('2020-02-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3PtpMIB.setRevisionsDescriptions(('\n          Notes from release 202002100000Z,\n           (1) Added new tables:\n                f3PtpL3PTPPortStatsTable,\n                f3PtpL3PTPPortHistoryTable,\n                f3PtpL3PTPPortThresholdTable\n           (2) Added new notification:\n                f3PtpL3PTPPortCrossingAlert\n\n          Notes from release 202002100000Z,\n           (1) Added new literal to PTPClockProfile:\n                power-c37-238-2011(3)\n                     \n          Notes from release 201912310000Z,\n           (1) Added to f3PtpL3PTPPortEntry: \n                f3PtpL3PTPPortIndex,\n                f3PtpL3PTPPortAdminState,\n                f3PtpL3PTPPortAlias,          \n                f3PtpL3PTPPortOperationalState,  \n                f3PtpL3PTPPortSecondaryState,\n                f3PtpL3PTPPortPortIdentity,    \n                f3PtpL3PTPPortLocalPriority,         \n                f3PtpL3PTPPortPtpFlowPointEid,         \n                f3PtpL3PTPPortSyncMessageRate,   \n                f3PtpL3PTPPortDelayReqRespMsgRate,\n                f3PtpL3PTPPortAnnounceMsgRate,\n                f3PtpL3PTPPortAnnounceReceiptTimeout,                            \n                f3PtpL3PTPPortSyncReceiptTimeout,                            \n                f3PtpL3PTPPortDelayRespTimeout,  \n                f3PtpL3PTPPortPortState,\n                f3PtpL3PTPPortBmcaDecisionCode, \n                f3PtpL3PTPPortPeerClockClass, \n                f3PtpL3PTPPortMinimumExpectedClockClass,\n                f3PtpL3PTPPortIpProtocol,\n                f3PtpL3PTPPortIfName,\n                f3PtpL3PTPPortIpPriorityMapMode,\n                f3PtpL3PTPPortIpPriority,\n                f3PtpL3PTPPortIpV4Address,\n                f3PtpL3PTPPortIpV4SubnetMask,\n                f3PtpL3PTPPortIpV6Address,             \n                f3PtpL3PTPPortIpV6AddrPrefixLength,\n                f3PtpL3PTPPortDefaultGatewayControl,\n                f3PtpL3PTPPortGateway,\n                f3PtpL3PTPPortIpV6Gateway,\n                f3PtpL3PTPPortUnicastMessageNegEnabled,\n                f3PtpL3PTPPortTransmitDuration,\n                f3PtpL3PTPPortRequestUnicastTimeout,\n                f3PtpL3PTPPortRequestUnicastRestartTimer,\n                f3PtpL3PTPPortMasterIpV4Address,\n                f3PtpL3PTPPortMasterIpV6Address,\n                f3PtpL3PTPPortDelayAsymmetryComp,\n                f3PtpL3PTPPortAutoAsymmetryCompStatus,\n                f3PtpL3PTPPortDelayAsymmetry,\n                f3PtpL3PTPPortStorageType,\n                f3PtpL3PTPPortRowStatus\n        \n          Notes from release 201912020000Z,\n           (1) Added to f3PtpPTPPortEntry: \n                 f3PtpPTPPortTimeTraceable\n                 f3PtpPTPPortFrequencyTraceable\n\n          Notes from release 201911280000Z,\n           (1) Added to f3PtpPTPPortEntry: \n                 f3PtpPTPPortDelayResponderType\n                 \n          Notes from release 201909090000Z,\n           (1) Added to f3PtpPTPPortEntry: \n                 f3PtpPTPPortVirtualPortCtrl\n                Notes from release 201907080000Z,\n           (1) Added new TEXTUAL-CONVENTION to PTPClockProfile\n                     - c37-238-2011, c37-238-2017 and iec-61850-9-3\n           (2) Added f3PtpPTPClockGrandMasterID, f3PtpPTPClockTimeInaccuracy, f3PtpPTPClockNetworkTimeInaccuracy\n           (3) Added f3PtpMasterClockSmpteSystemFrameRateNumerator, f3PtpMasterClockSmpteSystemFrameRateDenominator, \n                     f3PtpMasterClockSmpteTimeAddressFlags\n           (4) Added f3PtpSOOCAlgorithmPtpAware\n\n          Notes from release 201906180000Z,\n           (1) Deprecated f3PtpPTPPortClockClass in favor of\n               f3PtpPTPPortPeerClockClass\n\n          Notes from release 201903140000Z,\n           (1) Added new table:\n                 f3PtpTrafficPortFlowPointExtTable to augment\n                   f3PtpTrafficPortFlowPointTable with BufferSize\n\n          Notes from release 201901310000Z,\n           (1) Added to F3PtpSOOCEntry: \n                 f3PtpSOOCDefaultGatewayControl\n                 f3PtpSOOCGateway              \n                 f3PtpSOOCIpV6Gateway          \n\n           (2) Added to F3PtpMCIEntry: \n                 f3PtpMCIDefaultGatewayControl \n                 f3PtpMCIGateway               \n                 f3PtpMCIIpV6Gateway           \n\n          Notes from release 201901240000Z,\n           (1) Added table indices: \n                f3PtpMCIProtGroupIndex in f3PtpMCIProtMemberEntry\n                \n          Notes from release 201807300000Z,\n           (1) New tables:\n                 f3PtpMCIProtGroupTable,\n                 f3PtpMCIProtMemberTable  \n          Notes from release 201901070000Z\n           (1) Added TEXTUAL-CONVENTION:: SlaveMode\n           (2) Added f3PtpSOOCMasterMessageMode\n           (3) Added f3PtpMasterClockServiceAvailableTime, \n                     f3PtpMasterClockServiceUnavailableTime, and \n                     f3PtpMasterClockServiceAvailablePercentage\n           (4) Added f3PtpPTPClockServiceAvailableTime,\n                     f3PtpPTPClockServiceUnavailableTime,\n                     f3PtpPTPClockServiceAvailablePercentage\n           (5) Added f3PtpPTPPortDelayAsymmetryComp,\n                     f3PtpPTPPortAutoAsymmetryCompStatus, and\n                     f3PtpPTPPortDelayAsymmetry\n\n          Notes from release 201602170000Z\n             a) add f3PtpBCPhysicalEntityIndex to f3PtpBCTable and adjust the index\n          Notes from release 201601200000Z\n             a) remove f3PtpPTPPortPTPPortType that is not supported and not in other products\n          Notes from release 201512180000Z\n             a) add f3PtpDynamicRemoteSlavePortIdentity and f3PtpDynamicRemoteSlavePeerMacAddress\n             b) remove f3PtpMediationL2DynamicRemoteSlaveTable\n\n          Notes from release 201512090000Z\n           (1) add holdoverOutOfSpec, holdoverInSpec to ClockRecoveryState and PhaseRecoveryState\n           (2) add f3PtpPTPClockClockClass to F3PtpPTPClockEntry\n           (3) add PTPClockStats tables for PM on PTPClock\n\n          Notes from release 201511160000Z\n           (1) add f3PtpMCIPtpRemoteSlaveAgingTimeout to f3PtpMCITable\n\n          Notes from release 201510290000Z\n             (1) f3PtpMediationL2DynamicRemoteSlaveTable to support mediation version\n\n          Notes from release 201510280000Z\n             (1) added a new table (uncommented) f3PtpL2DynamicRemoteSlaveTable\n\n          Notes from release 201510200000Z\n             (1) removed  f3PtpAccPortFlowPointEIRLo, f3PtpAccPortFlowPointEIRHi, f3PtpPTPPortMaxExpectedL2Slaves\n\n             (2) added f3PtpMCIPtpTransport, f3PtpMCIPtpTransportMode, f3PtpBCMediationControl\n\n\n          Notes from release 201309240000Z,\n           (1) Added the following object\n                f3PtpDynamicRemoteSlaveRowStatus\n                    \n          Notes from release 201304240000Z,\n           (1) New tables: f3PtpMasterClockTable\n                    \n          Notes from release 201301170000Z,\n           (1) New tables: f3PtpBCTable, f3PtpMCITable, f3PtpMasterVirtualPortTable,\n                           f3PtpRemoteSlaveTable,\n                           f3PtpMCIStatsTable, f3PtpMCIHistoryTable, \n                           f3PtpMCIThresholdTable,\n                           f3PtpRemoteSlaveStatsTable, f3PtpRemoteSlaveHistoryTable\n                           f3PtpRemoteSlaveThresholdTable\n           (2) New notifications: f3PtpMCICrossingAlert, f3PtpRemoteSlaveCrossingAlert  \n\n          Notes from release 201207190000Z,\n           (1) New tables: f3PtpEthernetAccPortExtTable, f3PtpEthernetNetPortExtTable  \n\n          Notes from release 201206130000Z\n            (i)Added the following objects\n                f3PtpTSClockSyncEEnabled, f3PtpTSClockQLModeEnabled,\n                f3PtpTSClockExpectedQL, f3PtpTSClockAssumedQL,\n                f3PtpTSClockReceivedQL, \n\n          Notes from release 201205180000Z\n            (i)INDEX objects are made not-accessible\n\n          Notes from release 201105060000Z\n            (i)f3PtpAccPortFlowPointService and f3PtpNetPortFlowPointService are\n                    read-create instead of read-only\n           (ii)Threshold Crossing Notifications are now defined\n                f3PtpAccPortFlowPointThresholdCrossingAlert,\n                f3PtpNetPortFlowPointThresholdCrossingAlert,\n                f3PtpSOOCCrossingAlert \n\n          Notes from release 201104040000Z\n          Initial version of the MIB, now with Performance Objects.',))
if mibBuilder.loadTexts: f3PtpMIB.setLastUpdated('202002100000Z')
if mibBuilder.loadTexts: f3PtpMIB.setOrganization('ADVA Optical Networking SE')
if mibBuilder.loadTexts: f3PtpMIB.setContactInfo('Web URL: http://adva.com/\n        E-mail:  support@adva.com\n        Postal:  ADVA Optical Networking SE\n             Campus Martinsried\n             Fraunhoferstrasse 9a\n             82152 Martinsried/Munich\n             Germany\n        Phone: +49 089 89 06 65 0\n        Fax:  +49 089 89 06 65 199 ')
if mibBuilder.loadTexts: f3PtpMIB.setDescription('This module defines the 1588 PTP MIB definitions used by \n             the F3 (FSP150CM/CC) product lines.  \n             Copyright (C) ADVA.')
f3PtpConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1))
f3PtpPerformanceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2))
f3PtpPerformanceNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 3))
f3PtpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 4))
f3PtpStatusChangeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 5))
class SlaveMode(TextualConvention, Integer32):
    description = 'Describes the PTP slave mode on OSA540X.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("unicast", 1), ("multicast", 2), ("hybrid", 3))

class PtpFlowPointType(TextualConvention, Integer32):
    description = 'Enumerations for PTP Flow Point Type.\n             transparent - represents the 1588 Transparent clock type,\n             oc-slave - represents a 1588 Ordinary Clock Slave clock type,\n             monitoring - represents monitoring Flow Point,\n             oc-master - represents a 1588 Ordinary Clock master clock type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("transparent", 1), ("oc-slave", 2), ("monitoring", 3), ("oc-master", 4), ("eth-multicast", 5))

class PtpPortState(TextualConvention, Integer32):
    description = 'Enumerations for PTP Port State.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("initializing", 1), ("faulty", 2), ("disabled", 3), ("listening", 4), ("uncalibrated", 5), ("slave", 6), ("premaster", 7), ("master", 8), ("passive", 9), ("na", 10))

class MasterClockType(TextualConvention, Integer32):
    description = 'Enumerations for Master Clock Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("one-step", 2), ("two-step", 3))

class PTPPortType(TextualConvention, Integer32):
    description = 'Enumerations for PTP Port Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("master", 1), ("slave", 2))

class DelayMechanism(TextualConvention, Integer32):
    description = 'Enumerations for Delay Mechanism.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("end-to-end", 1))

class ClockIdentity(TextualConvention, OctetString):
    description = '1588 Clock Identity.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class PortIdentity(TextualConvention, OctetString):
    description = '1588 Port Identity.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(10, 10)
    fixedLength = 10

class ClockRecoveryMode(TextualConvention, Integer32):
    description = 'Enumerations for 1588 Clock Recovery Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("one-way", 1), ("two-way", 2))

class ClockRecoveryState(TextualConvention, Integer32):
    description = 'Enumerations for 1588 Clock Recovery State.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("not-applicable", 0), ("start", 1), ("normal", 2), ("freerun", 3), ("holdover", 4), ("acquisition", 5), ("transient", 6), ("none", 7), ("holdoverOutOfSpec", 8), ("holdoverInSpec", 9))

class AnnounceMsgRate(TextualConvention, Integer32):
    description = 'Enumerations for 1588 Announce Message Rate.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("not-applicable", 0), ("pkt1per16secs", 1), ("pkt1per8secs", 2), ("pkt1per4secs", 3), ("pkt1per2secs", 4), ("pkt1per1sec", 5), ("pkts2per1sec", 6), ("pkts4per1sec", 7), ("pkts8per1sec", 8), ("none", 9))

class SyncMsgRate(TextualConvention, Integer32):
    description = 'Enumerations for 1588 Sync Message Rate.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("not-applicable", 0), ("pkt1persec", 1), ("pkts2persec", 2), ("pkts4persec", 3), ("pkts8persec", 4), ("pkts16persec", 5), ("pkts32persec", 6), ("pkts64persec", 7), ("pkts128persec", 8), ("none", 9))

class DelayRespMsgRate(TextualConvention, Integer32):
    description = 'Enumerations for 1588 Delay Response Message Rate.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("not-applicable", 0), ("pkt1persec", 1), ("pkts2persec", 2), ("pkts4persec", 3), ("pkts8persec", 4), ("pkts16persec", 5), ("pkts32persec", 6), ("pkts64persec", 7), ("pkts128persec", 8), ("none", 9), ("na", 10), ("pkts0persec", 11))

class DelayReqMsgRate(TextualConvention, Integer32):
    description = 'Enumerations for 1588 Delay Request Message Rate.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("not-applicable", 0), ("pkt1persec", 1), ("pkts2persec", 2), ("pkts4persec", 3), ("pkts8persec", 4), ("pkts16persec", 5), ("pkts32persec", 6), ("pkts64persec", 7), ("pkts128persec", 8))

class FreqRecoveryTarget(TextualConvention, Integer32):
    description = 'Enumerations for Frequency Recovery Target.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("traffic-mask", 1), ("sync-mask", 2), ("traffic-sync-mask", 3))

class ScaledNanoseconds(TextualConvention, Counter64):
    description = "Definition of scaled nanoseconds as specified by 1588v2.\n           The most significant 48 bits represent nanoseconds and \n           the least signifcant 16-bits represent sub-nanoseconds.\n           The currently supported granularity is nanoseconds and\n           the least significant 16 bits will always be 0.\n           The 48-bits representing nanoseconds supports the range\n           of [-2^47..2^47-1].\n           Negative values of nanonseconds are interpreted\n           as two's complement."
    status = 'current'

class RemoteSlaveType(TextualConvention, Integer32):
    description = 'Enumerations for Remote Slave Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dynamic", 1), ("static", 2))

class TimeScale(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ptp", 1), ("arb", 2))

class PhaseRecoveryState(TextualConvention, Integer32):
    description = 'Enumerations for Phase Recovery State.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("not-applicable", 0), ("freerun", 1), ("holdover", 2), ("normal", 3), ("start", 4), ("acquisition", 5), ("transient", 6), ("none", 7), ("holdoverOutOfSpec", 8), ("holdoverInSpec", 9))

class PTPProtectionState(TextualConvention, Integer32):
    description = 'Enumerations for PTP Protection State.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("standby", 2))

class CompensationMode(TextualConvention, Integer32):
    description = 'Enumerations for Compensation Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("automatic", 2), ("manual", 3))

class CompensationStatus(TextualConvention, Integer32):
    description = 'Enumerations for Compensation Status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("operational", 1), ("failed", 2), ("not-available", 3), ("manual", 4), ("initializing", 5))

class PTPClockProfile(TextualConvention, Integer32):
    description = 'Enumerations for PTP Clock Profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("g8275-1", 1), ("ieee-1588-2008-annex-f", 2), ("ieee-1588-2008", 3), ("power-c37-238-2011", 4), ("power-c37-238-2017", 5), ("utility-iec-61850-9-3", 6), ("g8275-2", 7), ("gptp-802-1as-2011", 8))

class PTPClockType(TextualConvention, Integer32):
    description = 'Enumerations for PTP Clock Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("master-only", 1), ("slave-only", 2), ("dynamic", 3), ("boundaryclock", 4), ("static-bc", 5))

class PTPClockOperMode(TextualConvention, Integer32):
    description = 'Enumerations for PTP Clock Oper Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("t-gm", 1), ("t-tsc", 2), ("idle", 3), ("t-bc", 4), ("gm", 5))

class DestMacAddrType(TextualConvention, Integer32):
    description = 'Enumerations for Dest Mac Addr Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("forwardable", 1), ("non-forwardable", 2))

class AnnounceMessageRate(TextualConvention, Integer32):
    description = 'Enumerations for g8275.1 Announce Message Rate.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("not-applicable", 0), ("pkt1per16secs", 1), ("pkt1per8secs", 2), ("pkt1per4secs", 3), ("pkt1per2secs", 4), ("pkt1per1sec", 5), ("pkts2per1sec", 6), ("pkts4per1sec", 7), ("pkts8per1sec", 8), ("none", 9))

class DelayReqMessageRate(TextualConvention, Integer32):
    description = 'Enumerations for g8275.1 Delay Req Message Rate.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("not-applicable", 0), ("pkt1persec", 1), ("pkts2persec", 2), ("pkts4persec", 3), ("pkts8persec", 4), ("pkts16persec", 5), ("pkts32persec", 6), ("pkts64persec", 7), ("pkts128persec", 8), ("none", 9), ("na", 10))

class SyncMessageRate(TextualConvention, Integer32):
    description = 'Enumerations for g8275.1 Sync Message Rate.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("not-applicable", 0), ("pkt1persec", 1), ("pkts2persec", 2), ("pkts4persec", 3), ("pkts8persec", 4), ("pkts16persec", 5), ("pkts32persec", 6), ("pkts64persec", 7), ("pkts128persec", 8), ("none", 9))

class BMCARole(TextualConvention, Integer32):
    description = 'Enumerations for g8275.1 BMCA Role.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("m1", 1), ("m2", 2), ("m3", 3), ("s1", 4), ("p1", 5), ("p2", 6), ("na", 7))

class ClockClassProfile(TextualConvention, Integer32):
    description = 'Enumerations for Master Clock Interface the Clock Class Profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("g82651", 1), ("ieee-1588-2008", 2), ("ptp-enterprise", 3), ("na", 4), ("g82752", 5), ("ptp-enterprise-and-ieee-1588-2008", 6))

class PTPProfile(TextualConvention, Integer32):
    description = 'Enumerations for Master Clock PTP Profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("g82651", 1), ("ptp-enterprise", 2), ("ieee-1588-2008", 3), ("g82752", 4), ("aes67-media", 5), ("smpte-st-2059-2", 6))

class PTPTransport(TextualConvention, Integer32):
    description = 'Enumerations for Master Clock Interface PTP Transport Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ethernet", 1), ("udp-over-ipv4", 2), ("udp-over-ipv6", 3))

class PTPTransportMode(TextualConvention, Integer32):
    description = 'Enumerations for Master Clock Interface PTP Transport mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unicast", 1), ("multicast", 2))

class ToggleValue(TextualConvention, Integer32):
    description = 'Enumerations for functionality that can be enabled or disabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2), ("not-available", 3))

f3PtpTCTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 1), )
if mibBuilder.loadTexts: f3PtpTCTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCTable.setDescription('A list of entries corresponding to the PTP Transparent Clock entities.')
f3PtpTCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpTCIndex"))
if mibBuilder.loadTexts: f3PtpTCEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCEntry.setDescription('An entry containing information applicable to a particular\n           Transparent Clock Entity.')
f3PtpTCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpTCIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCIndex.setDescription('Unique index value associated with the Transparent Clock Entity.')
f3PtpTCAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTCAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the Transparent Clock entity.')
f3PtpTCAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 1, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTCAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCAdminState.setDescription('This object represents the Administrative State of the Transparent Clock.')
f3PtpTCOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 1, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTCOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCOperationalState.setDescription('This object represents the Operational State of the Transparent Clock.')
f3PtpTCSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 1, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTCSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCSecondaryState.setDescription('This object represents the Secondary State of the Transparent Clock.')
f3PtpTCServiceFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 1, 1, 6), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTCServiceFlow.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCServiceFlow.setDescription('This object represents the Service(Traffic) Flow associated\n             with the Transparent Clock.')
f3PtpTCDelayMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 1, 1, 7), DelayMechanism()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTCDelayMechanism.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCDelayMechanism.setDescription('This object  represents the Delay Mechanism of the Transparent \n             Clock.')
f3PtpTCSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 1, 1, 8), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTCSync.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCSync.setDescription('This object provides the entry from the f3SyncTable, which is\n          used as frequency clock for this Transparent Clock.')
f3PtpTCClockIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 1, 1, 9), ClockIdentity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTCClockIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCClockIdentity.setDescription('This object specifies the Clock Identity of the PTP Transparent Clock.')
f3PtpTCStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 1, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTCStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCStorageType.setDescription('The type of storage configured for this entry.')
f3PtpTCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTCRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpTCRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpTCRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpTCRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpTCPtpProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 1, 1, 12), PTPClockProfile()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTCPtpProfile.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCPtpProfile.setDescription('This object represents whether Tc or T-Tc.')
f3PtpTCVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 2), )
if mibBuilder.loadTexts: f3PtpTCVirtualPortTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCVirtualPortTable.setDescription('A list of entries corresponding to the PTP Transparent \n          Clock Virtual Ports.')
f3PtpTCVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpTCIndex"), (0, "F3-PTP-MIB", "f3PtpTCVirtualPortIndex"))
if mibBuilder.loadTexts: f3PtpTCVirtualPortEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCVirtualPortEntry.setDescription('An entry containing information applicable to a particular\n           PTP TC Virtual Port Entity.')
f3PtpTCVirtualPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpTCVirtualPortIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCVirtualPortIndex.setDescription('Unique index value associated with the PTP Transparent Clock\n          Virtual Port index.')
f3PtpTCVirtualPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTCVirtualPortAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCVirtualPortAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the PTP TC Virtual Port entity.')
f3PtpTCVirtualPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 2, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTCVirtualPortAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCVirtualPortAdminState.setDescription('This object represents the Administrative State of the TC Virtual \n             Port.')
f3PtpTCVirtualPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 2, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTCVirtualPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCVirtualPortOperationalState.setDescription('This object represents the Operational State of the TC Virtual \n             Port.')
f3PtpTCVirtualPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 2, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTCVirtualPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCVirtualPortSecondaryState.setDescription('This object represents the Secondary State of the TC Virtual Port.')
f3PtpTCVirtualPortIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 2, 1, 6), PortIdentity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTCVirtualPortIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCVirtualPortIdentity.setDescription('This object represents the PTP Port Identity of the TC Virtual Port.')
f3PtpTCVirtualPortFlowPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 2, 1, 7), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTCVirtualPortFlowPoint.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCVirtualPortFlowPoint.setDescription('This object associates the PTP Flow Point with the \n          Transparent Clock.')
f3PtpTCVirtualPortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 2, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTCVirtualPortStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCVirtualPortStorageType.setDescription('The type of storage configured for this entry.')
f3PtpTCVirtualPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTCVirtualPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpTCVirtualPortRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpTCVirtualPortRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpTCVirtualPortRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpTCVirtualPortRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpTSTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3), )
if mibBuilder.loadTexts: f3PtpTSTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSTable.setDescription('A list of entries corresponding to the PTP Telecom Slave entities.')
f3PtpTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpTSIndex"))
if mibBuilder.loadTexts: f3PtpTSEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSEntry.setDescription('An entry containing information applicable to a particular\n           Telecom Slave Entity.')
f3PtpTSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpTSIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSIndex.setDescription('Unique index value associated with the Telecom Slave Entity.')
f3PtpTSAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTSAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the Telecom Slave entity.')
f3PtpTSAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTSAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSAdminState.setDescription('This object represents the Administrative State of the Telecom Slave.')
f3PtpTSOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSOperationalState.setDescription('This object represents the Operational State of the Telecom Slave.')
f3PtpTSSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSSecondaryState.setDescription('This object represents the Secondary State of the Telecom Slave.')
f3PtpTSClockIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 6), ClockIdentity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTSClockIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSClockIdentity.setDescription('This object specifies the Clock Identity of the PTP Telecom Slave.')
f3PtpTSDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTSDomainNumber.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSDomainNumber.setDescription('This object allows specification of the PTP domain number of the\n          Telecom Slave.')
f3PtpTSSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 8), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTSSync.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSSync.setDescription('This object provides the entry from the f3SyncTable, which is\n          used as frequency for this Telecom Slave.')
f3PtpTSCurrentTOD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSCurrentTOD.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSCurrentTOD.setDescription('This object allows specification of the Telecom Slave Current\n          Time of Day.')
f3PtpTSSelectedPacketClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 10), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSSelectedPacketClock.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSSelectedPacketClock.setDescription('This object provides the Slave Only Ordinary Clock selected\n          as the best source of Time Of Day.')
f3PtpTSClockRecoveryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 11), ClockRecoveryMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTSClockRecoveryMode.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSClockRecoveryMode.setDescription('This object allows specification of whether the Clock Recovery Mode\n          is one-way or two-way.  In one-way mode, only Sync messages are\n          used for frequency recovery.  In two-way mode, both Sync and \n          Delay Request-Response messages are used for measuring the mean path delay.')
f3PtpTSClockRecoveryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 12), ClockRecoveryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSClockRecoveryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSClockRecoveryState.setDescription("This object provides the Telecom Slave's clock recovery state.")
f3PtpTSClockSyncEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTSClockSyncEEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSClockSyncEEnabled.setDescription("This object allows to specify whether the Telecom Slave \n          can be enabled/disabled for Synchronous Ethernet. \n          When enabled, on receive side \n            -telecom slave can extract the frequency \n             and pass the recovered clock to the system clock\n            -QL is extracted (when QL is enabled) from the selected SOOC's clock class\n            -telecom slave is eligible to be selected as a system clock reference\n          When disabled, on receive side,\n            -telecom slave does not pass the recovered clock to the system clock \n            -telecom slave does not process the QL from selected SOOC's clock class \n            -telecom slave is not eligible to be selected as a \n                     system clock reference.")
f3PtpTSClockQLModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTSClockQLModeEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSClockQLModeEnabled.setDescription("This object allows to specify whether the Telecom Slave \n          can be enabled/disabled for QL Mode.  \n          When enabled, on receive side \n            -telecom slave can extract the QL from selected SOOC's clock class \n          When disabled, on receive side,\n            -telecom slave does not process the QL from selected SOOC's clock class.")
f3PtpTSClockExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 15), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTSClockExpectedQL.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSClockExpectedQL.setDescription("This object allows to specify the expected QL when the \n          Telecom Slave is enabled for QL Mode.  This is applicable \n          when f3PtpTSClockQLModeEnabled is set to true.\n          This object allows the user to set a minimum\n          expected received Quality Level on the Telecom Slave. \n          The valid values depend upon the SYNC entity's Network Clock Type. \n          A value of None represents that a minimum Quality Level is not expected. \n          The default value shall be None.")
f3PtpTSClockAssumedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 16), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTSClockAssumedQL.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSClockAssumedQL.setDescription("This object allows to specify the assumed QL on the \n          Telecom Slave.  The Assumed QL is only meaningful if the Network Clock Type\n          (see fsp150cm-sync.mib) is option1 and the \n          telecom slave's QL Mode is disabled and the telecom slave is being used as \n          an input reference source. Under these conditions,\n          the specified QL value is assumed to be the Quality Level of the\n          non-failed reference.")
f3PtpTSClockReceivedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 17), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSClockReceivedQL.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSClockReceivedQL.setDescription("This object provides the Received QL value for the Telecom Slave. \n          If the Telecom Slave's QL Mode is disabled, then the received \n          QL value is not applicable.")
f3PtpTSStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 18), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTSStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSStorageType.setDescription('The type of storage configured for this entry.')
f3PtpTSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTSRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpTSRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpTSRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpTSRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpTSTimeTraceabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSTimeTraceabilityStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSTimeTraceabilityStatus.setDescription('This object provides the Time traceability status of the\n            Telecom Slave.')
f3PtpTSTimeSinceTimeTraceabilityChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSTimeSinceTimeTraceabilityChanged.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSTimeSinceTimeTraceabilityChanged.setDescription('This object provides the time in seconds since the Time traceability \n            changed on the Telecom Slave.')
f3PtpTSFreqTraceabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSFreqTraceabilityStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSFreqTraceabilityStatus.setDescription('This object provides the Frequency traceability status of the\n            Telecom Slave.')
f3PtpTSTimeSinceFreqTraceabilityChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSTimeSinceFreqTraceabilityChanged.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSTimeSinceFreqTraceabilityChanged.setDescription('This object provides the time in seconds since the Frequency traceability \n            changed on the Telecom Slave.')
f3PtpTSFreqRecoveryTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 24), FreqRecoveryTarget()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTSFreqRecoveryTarget.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSFreqRecoveryTarget.setDescription('This object provides the frequency recovery target.')
f3PtpTSCurrentCRScore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSCurrentCRScore.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSCurrentCRScore.setDescription('This object provides the current Clock Recovery Score.')
f3PtpTSTimeLastCRScore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSTimeLastCRScore.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSTimeLastCRScore.setDescription('This object provides the time of the last Clock Recovery Score.')
f3PtpTSTargetPhaseRecoveryAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTSTargetPhaseRecoveryAccuracy.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSTargetPhaseRecoveryAccuracy.setDescription('This object allows specification of the expected Time of Day accuracy\n            in nanoseconds.')
f3PtpTSCurrentPRScore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSCurrentPRScore.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSCurrentPRScore.setDescription('This object provides the current Phase Recovery Score.')
f3PtpTSTimeLastPRScore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSTimeLastPRScore.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSTimeLastPRScore.setDescription('This object provides the time of the last Phase Recovery Score.')
f3PtpTSClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSClockClass.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpTSClockClass.setDescription('This object specify Telecome Slave clock class.')
f3PtpTSClockAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSClockAccuracy.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSClockAccuracy.setDescription('This object specify Telecome Slave clock accuracy.')
f3PtpTSTimeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 32), TimeSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSTimeSource.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSTimeSource.setDescription('This object specify Telecome Slave time source.')
f3PtpTSPhaseRecoveryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 33), PhaseRecoveryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSPhaseRecoveryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSPhaseRecoveryState.setDescription('This object specify the phase recovery state.')
f3PtpTSTimeHoldoverAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 34), HoldoverAccuracy()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTSTimeHoldoverAccuracy.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSTimeHoldoverAccuracy.setDescription('This object specify the time hold over accuracy.')
f3PtpTSWtrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTSWtrTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSWtrTime.setDescription('This object should allow configuration of Wait To Restore timeout in minutes.\n           The range of this object should be 0-12.')
f3PtpSOOCTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4), )
if mibBuilder.loadTexts: f3PtpSOOCTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCTable.setDescription('A list of entries corresponding to the Slave Only Ordinary Clocks.')
f3PtpSOOCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpTSIndex"), (0, "F3-PTP-MIB", "f3PtpSOOCIndex"))
if mibBuilder.loadTexts: f3PtpSOOCEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCEntry.setDescription('An entry containing information applicable to a particular\n           Slave Only Ordinary Clock Entity.')
f3PtpSOOCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpSOOCIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCIndex.setDescription('Unique index value associated with the Slave Only Ordinary Clock.')
f3PtpSOOCName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCName.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCName.setDescription('This object allows SNMP management entities to provide a\n          name to the Slave Only Ordinary Clock.  This is used\n          for creation of the underlying IP Interface associated \n          with the SOOC.')
f3PtpSOOCAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the Slave Only Ordinary Clock.')
f3PtpSOOCAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCAdminState.setDescription('This object represents the Administrative State of the Slave Only \n             Ordinary Clock.')
f3PtpSOOCOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCOperationalState.setDescription('This object represents the Operational State of the Slave Only \n             Ordinary Clock.')
f3PtpSOOCSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCSecondaryState.setDescription('This object represents the Secondary State of the Slave Only\n            Ordinary Clock.')
f3PtpSOOCServiceFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 7), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCServiceFlow.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCServiceFlow.setDescription('Traffic Flow or SHG associated with the Slave Only Ordinary Clock.')
f3PtpSOOCMasterClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 8), MasterClockType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCMasterClockType.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterClockType.setDescription('This object must be used to specify the type of the Master Clock.')
f3PtpSOOCUnicastMessageNegEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCUnicastMessageNegEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCUnicastMessageNegEnabled.setDescription('This object must be used to specify whether Unicast Message\n          Negotiation is enabled for the Master Clock.')
f3PtpSOOCMasterDelayMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 10), DelayMechanism()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCMasterDelayMechanism.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterDelayMechanism.setDescription('This object allows specification of the delay mechanism.')
f3PtpSOOCMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCMasterPriority.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterPriority.setDescription('This object allows specification of the OC Master Priority.')
f3PtpSOOCMasterIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 12), IpVersion()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCMasterIpProtocol.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterIpProtocol.setDescription('This object allows specification of the IP Protocol to\n          communicate with the OC Master.  Only ipv4 is supported.')
f3PtpSOOCSlaveIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCSlaveIpV4Address.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCSlaveIpV4Address.setDescription('This object allows specification of the IPv4 Address of\n          the Slave Only Ordinary Clock.')
f3PtpSOOCSlaveIpV4SubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCSlaveIpV4SubnetMask.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCSlaveIpV4SubnetMask.setDescription('This object allows specification of the IPv4 Subnet Mask of\n          the Slave Only Ordinary Clock.')
f3PtpSOOCMasterIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCMasterIpV4Address.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterIpV4Address.setDescription('This object allows specification of the IPv4 Address of\n          the OC Master.')
f3PtpSOOCIpPriorityMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 16), IpPriorityMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCIpPriorityMapMode.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCIpPriorityMapMode.setDescription('This object enables specification of Priority Mapping Mode for\n          the Slave Only Ordinary Clock.')
f3PtpSOOCIpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCIpPriority.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCIpPriority.setDescription('This object enables specification of Priority Value for\n          f3PtpSOOCIpPriorityMapMode as priomap-tos,priomap-dscp.')
f3PtpSOOCMasterLeaseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCMasterLeaseDuration.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterLeaseDuration.setDescription('This object allows specification of the lease Duration for Announce and Sync\n         messages.')
f3PtpSOOCMasterAnnounceMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 19), AnnounceMsgRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCMasterAnnounceMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterAnnounceMsgRate.setDescription('This object allows specification of the PTP Announce Message Rate.')
f3PtpSOOCMasterAnnounceMsgReceiptTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCMasterAnnounceMsgReceiptTimeout.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterAnnounceMsgReceiptTimeout.setDescription('This object allows specification of the PTP Announce Message \n         Receipt Timeout.')
f3PtpSOOCMasterSyncMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 21), SyncMsgRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCMasterSyncMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterSyncMsgRate.setDescription('This object allows specification of the PTP Sync \n         Message Rate.')
f3PtpSOOCMasterSyncReceiptTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 22), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCMasterSyncReceiptTimeout.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterSyncReceiptTimeout.setDescription('This object allows specification of the PTP Sync Message \n         Receipt Timeout.')
f3PtpSOOCMasterDelayRspMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 23), DelayRespMsgRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCMasterDelayRspMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterDelayRspMsgRate.setDescription('This object allows specification of the PTP Delay Response \n         Message Rate.')
f3PtpSOOCMasterDelayRspReceiptTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCMasterDelayRspReceiptTimeout.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterDelayRspReceiptTimeout.setDescription('This object allows specification of the PTP Delay Response \n         Message Receipt Timeout.')
f3PtpSOOCMasterRequestUnicastTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCMasterRequestUnicastTimeout.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterRequestUnicastTimeout.setDescription('This object allows specification of the Request Unicast \n         Timeout in seconds.  Unicast transmission is termed as\n         failed when this timeout occurs.')
f3PtpSOOCMasterRequestUnicastRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCMasterRequestUnicastRestartTimer.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterRequestUnicastRestartTimer.setDescription('This object allows specification of the time (in seconds) to wait\n         to restart the Request Unicast signalling.')
f3PtpSOOCCurrentOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 27), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCCurrentOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCCurrentOffsetFromMaster.setDescription('This object provides the current Offset From Master.\n         The value provided is in nanoseconds.')
f3PtpSOOCAnnounceMsgClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCAnnounceMsgClockClass.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpSOOCAnnounceMsgClockClass.setDescription('This object provides the Clock Class obtained in the\n         Announce Message.')
f3PtpSOOCLastReceivedAnnounceMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCLastReceivedAnnounceMsg.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCLastReceivedAnnounceMsg.setDescription('This object provides the Last Received  \n         Announce Message.')
f3PtpSOOCLastReceivedSyncMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCLastReceivedSyncMsg.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCLastReceivedSyncMsg.setDescription('This object provides the Last Received  \n         Sync Message.')
f3PtpSOOCLastReceivedDelayRspMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCLastReceivedDelayRspMsg.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCLastReceivedDelayRspMsg.setDescription('This object provides the Last Received  \n         Delay Response Message.')
f3PtpSOOCRecentMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 32), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCRecentMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCRecentMeanPathDelay.setDescription('This object provides the most recent \n         mean path delay.')
f3PtpSOOCRecentSyncPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 33), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCRecentSyncPDV.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCRecentSyncPDV.setDescription('This object provides the Sync messages \n         packet delay variation.')
f3PtpSOOCStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 34), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStorageType.setDescription('The type of storage configured for this entry.')
f3PtpSOOCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 35), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpSOOCRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpSOOCRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpSOOCRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpSOOCRecentSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 36), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCRecentSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCRecentSyncPathDelay.setDescription('This object provides the Sync messages \n         packet delay.')
f3PtpSOOCSoocProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 37), PTPProtectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCSoocProtectionState.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCSoocProtectionState.setDescription('This object indicates whether the Sooc is used by \n        the Telecom Slave for the clock recovery.')
f3PtpSOOCSoocWtr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 38), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCSoocWtr.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCSoocWtr.setDescription('This object provides WTR protection state of the Sooc.')
f3PtpSOOCSoocClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCSoocClockClass.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCSoocClockClass.setDescription('This object provides the Clock Class of the Sooc.')
f3PtpSOOCSoocClockRecoveryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 40), ClockRecoveryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCSoocClockRecoveryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCSoocClockRecoveryState.setDescription('This object provides the frequency recovery state\n        of the Sooc.')
f3PtpSOOCSoocPhaseRecoveryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 41), PhaseRecoveryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCSoocPhaseRecoveryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCSoocPhaseRecoveryState.setDescription('This object provides the Phase recovery state\n        of the Sooc.')
f3PtpSOOCE2eDelayAsymmetryComp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 42), CompensationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCE2eDelayAsymmetryComp.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCE2eDelayAsymmetryComp.setDescription('This object allows configuration of end to end asymmetry \n        delay compensation mode.')
f3PtpSOOCE2eAutoAsymmetryCompStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 43), CompensationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCE2eAutoAsymmetryCompStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCE2eAutoAsymmetryCompStatus.setDescription('This object provides the automatic end to end delay asymmetry \n        status.')
f3PtpSOOCE2eDelayAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCE2eDelayAsymmetry.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCE2eDelayAsymmetry.setDescription('This object is used for manual configuration of end to end \n        delay asymmetry in ns if end to end delay asymmetry compensation is Manual.\n        Or for indication of the measured delay asymmetry if\n        end to end delay asymmetry compensation is automatic.')
f3PtpSOOCSoocLockOutControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 45), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCSoocLockOutControl.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCSoocLockOutControl.setDescription('This object is used to specify whether Sooc\n          Lockout operation is enabled for the Sooc.')
f3PtpSOOCSlaveIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 46), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCSlaveIpV6Address.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCSlaveIpV6Address.setDescription('This object allows specification of the unicast IPv6 Address of\n          the Slave Only Ordinary Clock.')
f3PtpSOOCSlaveIpV6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCSlaveIpV6AddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCSlaveIpV6AddrPrefixLength.setDescription('This object allows specification of the unicast IPv6 Address prefix length of\n          the Slave Only Ordinary Clock.')
f3PtpSOOCMasterIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 48), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCMasterIpV6Address.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterIpV6Address.setDescription('This object allows specification of the unicast IPv6 Address of\n          the OC Master.')
f3PtpSOOCMinimumExpectedClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCMinimumExpectedClockClass.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMinimumExpectedClockClass.setDescription('This object allows setting the minimum expected clock class value,\n     which setes the minimum threshold for receiving packets.\n     if the received clock clock class is greater than the expected\n     clock class value, the packets for the grandmaster or boundary clock that\n     are sending this clock class are dropped.\n     In addition, an alarm called clock-class-mismatch is generated. The default is 247.')
f3PtpSOOCMasterMessageMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 50), SlaveMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCMasterMessageMode.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCMasterMessageMode.setDescription('Describes the PTP slave mode on OSA540X.')
f3PtpSOOCDefaultGatewayControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 51), ToggleValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCDefaultGatewayControl.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCDefaultGatewayControl.setDescription('This attribute control Gatwaye address for Slave Only Ordinary Clock.')
f3PtpSOOCGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 52), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCGateway.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCGateway.setDescription('This object allows specification of the IPv4 Gateway Address of\n          Slave Only Ordinary Clock.')
f3PtpSOOCIpV6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 53), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpSOOCIpV6Gateway.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCIpV6Gateway.setDescription('This object allows specification of the IPv6 Gateway Address of\n          Slave Only Ordinary Clock.')
f3PtpSOOCAlgorithmPtpAware = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 4, 1, 54), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCAlgorithmPtpAware.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCAlgorithmPtpAware.setDescription('This object allows specification of the slave algorithm mode - PTP aware or unaware.')
f3PtpOCSlaveVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 5), )
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortTable.setDescription('A list of entries corresponding to the PTP Transparent \n          Clock Virtual Ports.')
f3PtpOCSlaveVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpTSIndex"), (0, "F3-PTP-MIB", "f3PtpSOOCIndex"), (0, "F3-PTP-MIB", "f3PtpOCSlaveVirtualPortIndex"))
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortEntry.setDescription('An entry containing information applicable to a particular\n           PTP OCSlave Virtual Port Entity.')
f3PtpOCSlaveVirtualPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortIndex.setDescription('Unique index value associated with the PTP OC Slave \n          Virtual Port index.')
f3PtpOCSlaveVirtualPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the OC Slave Virtual Port entity.')
f3PtpOCSlaveVirtualPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 5, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortAdminState.setDescription('This object represents the Administrative State of the \n             OC Slave Virtual Port.')
f3PtpOCSlaveVirtualPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 5, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortOperationalState.setDescription('This object represents the Operational State of the OC Slave \n             Virtual Port.')
f3PtpOCSlaveVirtualPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 5, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortSecondaryState.setDescription('This object represents the Secondary State of the OC Slave\n            Virtual Port.')
f3PtpOCSlaveVirtualPortIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 5, 1, 6), PortIdentity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortIdentity.setDescription('This object represents the PTP Port Identity of the \n                       OC Slave Virtual Port.')
f3PtpOCSlaveVirtualPortFlowPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 5, 1, 7), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortFlowPoint.setStatus('current')
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortFlowPoint.setDescription('This object associates the PTP Flow Point with the \n          Slave Only Ordinary Clock.')
f3PtpOCSlaveVirtualPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 5, 1, 8), PtpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortState.setStatus('current')
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortState.setDescription('This object provides the PTP state of the OC Slave Virtual Port.')
f3PtpOCSlaveVirtualPortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 5, 1, 9), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortStorageType.setDescription('The type of storage configured for this entry.')
f3PtpOCSlaveVirtualPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 5, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpOCSlaveVirtualPortRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpOCSlaveVirtualPortRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpOCSlaveVirtualPortRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpOCSlaveVirtualPortRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpAccPortFlowPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6), )
if mibBuilder.loadTexts: f3PtpAccPortFlowPointTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointTable.setDescription('A list of entries corresponding to the PTP Access Port Flow Point\n        entities.')
f3PtpAccPortFlowPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-PTP-MIB", "f3PtpAccPortFlowPointIndex"))
if mibBuilder.loadTexts: f3PtpAccPortFlowPointEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointEntry.setDescription('An entry containing information applicable to a particular\n           Access Port Flow Point Entity.')
f3PtpAccPortFlowPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpAccPortFlowPointIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointIndex.setDescription('Unique index value associated with the Access Port PTP Flow Point.')
f3PtpAccPortFlowPointAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the Access Port PTP Flow Point.')
f3PtpAccPortFlowPointAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointAdminState.setDescription('This object represents the Administrative State of the \n             PTP Flow Point.')
f3PtpAccPortFlowPointOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointOperationalState.setDescription('This object represents the Operational State of the PTP Flow \n             Point.')
f3PtpAccPortFlowPointSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointSecondaryState.setDescription('This object represents the Secondary State of the PTP Flow Point.')
f3PtpAccPortFlowPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 6), PtpFlowPointType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointType.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointType.setDescription('This object represents the PTP Flow Point Type, i.e. whether\n             it is an Transparent Clock or an OC Slave.')
f3PtpAccPortFlowPointClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 7), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointClock.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointClock.setDescription('This object points to the Transparent Clock or Slave Only\n             Ordinary Clock instance which is associated with this\n             PTP Flow Point.')
f3PtpAccPortFlowPointService = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 8), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointService.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointService.setDescription('This object points to the associated Traffic Service Flow.')
f3PtpAccPortFlowPointOuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointOuterVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointOuterVlanEtherType.setDescription('This object allows specification of the Outer VLAN Ether Type\n             of the PTP Flow.')
f3PtpAccPortFlowPointOuterVlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointOuterVlanMemberList.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointOuterVlanMemberList.setDescription('This object allows specification of the Outer VLAN(s) \n             of the PTP Flow.')
f3PtpAccPortFlowPointOuterUntaggedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointOuterUntaggedEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointOuterUntaggedEnabled.setDescription('This object allows specification of whether the Outer VLAN\n             exists or not.')
f3PtpAccPortFlowPointInner1VlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointInner1VlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointInner1VlanEtherType.setDescription('This object allows specification of the Inner1 VLAN Ether Type\n             of the PTP Flow.')
f3PtpAccPortFlowPointInner1VlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointInner1VlanMemberList.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointInner1VlanMemberList.setDescription('This object allows specification of the Inner1 VLAN(s) \n             of the PTP Flow.')
f3PtpAccPortFlowPointInner1UntaggedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointInner1UntaggedEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointInner1UntaggedEnabled.setDescription('This object allows specification of whether the Inner1 VLAN\n             exists or not.')
f3PtpAccPortFlowPointInner2VlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointInner2VlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointInner2VlanEtherType.setDescription('This object allows specification of the Inner2 VLAN Ether Type\n             of the PTP Flow.')
f3PtpAccPortFlowPointInner2VlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 16), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointInner2VlanMemberList.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointInner2VlanMemberList.setDescription('This object allows specification of the Inner2 VLAN(s) \n             of the PTP Flow.')
f3PtpAccPortFlowPointInner2UntaggedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointInner2UntaggedEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointInner2UntaggedEnabled.setDescription('This object allows specification of whether the Inner1 VLAN\n             exists or not.')
f3PtpAccPortFlowPointStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 18), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStorageType.setDescription('The type of storage configured for this entry.')
f3PtpAccPortFlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpAccPortFlowPointRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpAccPortFlowPointRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpAccPortFlowPointRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpAccPortFlowPointCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointCOS.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointCOS.setDescription('This object allows specification of Class of Service of the PTP traffic\n             associated with this Flow Point.')
f3PtpAccPortFlowPointCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointCIRLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointCIRLo.setDescription('This object allows specification of Committed Information Rate of the \n             PTP traffic associated with this Flow Point.\n             The CIR value is in bits-per-second units. The value of this object\n             represents the lower 32 bits of the total CIR value.')
f3PtpAccPortFlowPointCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointCIRHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointCIRHi.setDescription('This object allows specification of Committed Information Rate of the \n             PTP traffic associated with this Flow Point.\n             The CIR value is in bits-per-second units. The value of this object\n             represents the higher 32 bits of the total CIR value.')
f3PtpAccPortFlowPointEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointEIRLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointEIRLo.setDescription('This object allows specification of Excess Information Rate of the \n             PTP traffic associated with this Flow Point.\n             The EIR value is in bits-per-second units. The value of this object\n             represents the lower 32 bits of the total EIR value.')
f3PtpAccPortFlowPointEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointEIRHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointEIRHi.setDescription('This object allows specification of Excess Information Rate of the \n             PTP traffic associated with this Flow Point.\n             The EIR value is in bits-per-second units. The value of this object\n             represents the higher 32 bits of the total EIR value.')
f3PtpAccPortFlowPointBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 25), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointBufferSize.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointBufferSize.setDescription('This object allows specification the Buffer Size of the queue associated\n             with this Flow Point.')
f3PtpAccPortFlowPointLoopAvoidance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 26), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointLoopAvoidance.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointLoopAvoidance.setDescription('This object allows specify OID of this associated Loop Avoidance protocol entity.')
f3PtpAccPortFlowPointRefConnectGuardFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 27), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointRefConnectGuardFlow.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointRefConnectGuardFlow.setDescription('This object specifies Mac Sec flow object OID.')
f3PtpAccPortFlowPointSecureState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 28), FlowSecState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointSecureState.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointSecureState.setDescription('This object specifies the secure state of this flow.')
f3PtpAccPortFlowPointSecureBlockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 6, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointSecureBlockingEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointSecureBlockingEnabled.setDescription('This object can be used to enable/disable secure block.')
f3PtpNetPortFlowPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7), )
if mibBuilder.loadTexts: f3PtpNetPortFlowPointTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointTable.setDescription('A list of entries corresponding to the PTP Network Port Flow Point\n        entities.')
f3PtpNetPortFlowPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-PTP-MIB", "f3PtpNetPortFlowPointIndex"))
if mibBuilder.loadTexts: f3PtpNetPortFlowPointEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointEntry.setDescription('An entry containing information applicable to a particular\n           Network Port Flow Point Entity.')
f3PtpNetPortFlowPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpNetPortFlowPointIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointIndex.setDescription('Unique index value associated with the Network Port PTP Flow Point.')
f3PtpNetPortFlowPointAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the Network Port Flow Point entity.')
f3PtpNetPortFlowPointAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointAdminState.setDescription('This object represents the Administrative State of the \n             PTP Flow Point.')
f3PtpNetPortFlowPointOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointOperationalState.setDescription('This object represents the Operational State of the PTP Flow \n             Point.')
f3PtpNetPortFlowPointSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointSecondaryState.setDescription('This object represents the Secondary State of the PTP Flow Point.')
f3PtpNetPortFlowPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 6), PtpFlowPointType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointType.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointType.setDescription('This object represents the PTP Flow Point Type, i.e. whether\n             it is an Transparent Clock or an OC Slave.')
f3PtpNetPortFlowPointClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 7), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointClock.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointClock.setDescription('This object points to the Transparent Clock or Slave Only\n             Ordinary Clock instance which is associated with this\n             PTP Flow Point.')
f3PtpNetPortFlowPointService = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 8), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointService.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointService.setDescription('This object points to the associated Traffic Service Flow.')
f3PtpNetPortFlowPointOuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointOuterVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointOuterVlanEtherType.setDescription('This object allows specification of the Outer VLAN Ether Type\n             of the PTP Flow.')
f3PtpNetPortFlowPointOuterVlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointOuterVlanMemberList.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointOuterVlanMemberList.setDescription('This object allows specification of the Outer VLAN(s) \n             of the PTP Flow.')
f3PtpNetPortFlowPointOuterUntaggedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointOuterUntaggedEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointOuterUntaggedEnabled.setDescription('This object allows specification of whether the Outer VLAN\n             exists or not.')
f3PtpNetPortFlowPointInner1VlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointInner1VlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointInner1VlanEtherType.setDescription('This object allows specification of the Inner1 VLAN Ether Type\n             of the PTP Flow.')
f3PtpNetPortFlowPointInner1VlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointInner1VlanMemberList.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointInner1VlanMemberList.setDescription('This object allows specification of the Inner1 VLAN(s) \n             of the PTP Flow.')
f3PtpNetPortFlowPointInner1UntaggedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointInner1UntaggedEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointInner1UntaggedEnabled.setDescription('This object allows specification of whether the Inner1 VLAN\n             exists or not.')
f3PtpNetPortFlowPointInner2VlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointInner2VlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointInner2VlanEtherType.setDescription('This object allows specification of the Inner2 VLAN Ether Type\n             of the PTP Flow.')
f3PtpNetPortFlowPointInner2VlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 16), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointInner2VlanMemberList.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointInner2VlanMemberList.setDescription('This object allows specification of the Inner2 VLAN(s) \n             of the PTP Flow.')
f3PtpNetPortFlowPointInner2UntaggedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointInner2UntaggedEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointInner2UntaggedEnabled.setDescription('This object allows specification of whether the Inner1 VLAN\n             exists or not.')
f3PtpNetPortFlowPointStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 18), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStorageType.setDescription('The type of storage configured for this entry.')
f3PtpNetPortFlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpNetPortFlowPointRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpNetPortFlowPointRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpNetPortFlowPointRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpNetPortFlowPointCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointCOS.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointCOS.setDescription('This object allows specification of Class of Service of the PTP traffic\n             associated with this Flow Point.')
f3PtpNetPortFlowPointCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointCIRLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointCIRLo.setDescription('This object allows specification of Committed Information Rate of the \n             PTP traffic associated with this Flow Point.\n             The CIR value is in bits-per-second units. The value of this object\n             represents the lower 32 bits of the total CIR value.')
f3PtpNetPortFlowPointCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointCIRHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointCIRHi.setDescription('This object allows specification of Committed Information Rate of the \n             PTP traffic associated with this Flow Point.\n             The CIR value is in bits-per-second units. The value of this object\n             represents the higher 32 bits of the total CIR value.')
f3PtpNetPortFlowPointEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointEIRLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointEIRLo.setDescription('This object allows specification of Excess Information Rate of the \n             PTP traffic associated with this Flow Point.\n             The EIR value is in bits-per-second units. The value of this object\n             represents the lower 32 bits of the total EIR value.')
f3PtpNetPortFlowPointEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointEIRHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointEIRHi.setDescription('This object allows specification of Excess Information Rate of the \n             PTP traffic associated with this Flow Point.\n             The EIR value is in bits-per-second units. The value of this object\n             represents the higher 32 bits of the total EIR value.')
f3PtpNetPortFlowPointBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 25), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointBufferSize.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointBufferSize.setDescription('This object allows specification the Buffer Size of the queue associated\n             with this Flow Point.')
f3PtpNetPortFlowPointLoopAvoidance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 26), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointLoopAvoidance.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointLoopAvoidance.setDescription('This object allows specify OID of this associated Loop Avoidance protocol entity.')
f3PtpNetPortFlowPointRefConnectGuardFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 27), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointRefConnectGuardFlow.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointRefConnectGuardFlow.setDescription('This object specifies Mac Sec flow object OID.')
f3PtpNetPortFlowPointSecureState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 28), FlowSecState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointSecureState.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointSecureState.setDescription('This object specifies the secure state of this flow.')
f3PtpNetPortFlowPointSecureBlockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 7, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointSecureBlockingEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointSecureBlockingEnabled.setDescription('This object can be used to enable/disable secure block.')
f3PtpEthernetAccPortExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 8), )
if mibBuilder.loadTexts: f3PtpEthernetAccPortExtTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpEthernetAccPortExtTable.setDescription('This table extends cmEthernetAccPortTable by adding PTP related parameters.')
f3PtpEthernetAccPortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 8, 1), )
cmEthernetAccPortEntry.registerAugmentions(("F3-PTP-MIB", "f3PtpEthernetAccPortExtEntry"))
f3PtpEthernetAccPortExtEntry.setIndexNames(*cmEthernetAccPortEntry.getIndexNames())
if mibBuilder.loadTexts: f3PtpEthernetAccPortExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpEthernetAccPortExtEntry.setDescription('A conceptual row in the f3PtpEthernetAccPortExtTable.')
f3PtpEthernetAccPortDelayAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpEthernetAccPortDelayAsymmetry.setStatus('current')
if mibBuilder.loadTexts: f3PtpEthernetAccPortDelayAsymmetry.setDescription('This object allows configuring Delay Asymmetry in nanoseconds on \n          the Ethernet Access Port. The default value is 0.')
f3PtpEthernetNetPortExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 9), )
if mibBuilder.loadTexts: f3PtpEthernetNetPortExtTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpEthernetNetPortExtTable.setDescription('This table extends cmEthernetNetPortTable by adding PTP related parameters.')
f3PtpEthernetNetPortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 9, 1), )
cmEthernetNetPortEntry.registerAugmentions(("F3-PTP-MIB", "f3PtpEthernetNetPortExtEntry"))
f3PtpEthernetNetPortExtEntry.setIndexNames(*cmEthernetNetPortEntry.getIndexNames())
if mibBuilder.loadTexts: f3PtpEthernetNetPortExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpEthernetNetPortExtEntry.setDescription('A conceptual row in the f3PtpEthernetNetPortExtTable.')
f3PtpEthernetNetPortDelayAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 9, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpEthernetNetPortDelayAsymmetry.setStatus('current')
if mibBuilder.loadTexts: f3PtpEthernetNetPortDelayAsymmetry.setDescription('This object allows configuring Delay Asymmetry in nanoseconds on \n          the Ethernet Network Port. The default value is 0.')
f3PtpConfigScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 10))
f3PtpSysTimeOfDayClock = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 10, 1), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSysTimeOfDayClock.setStatus('current')
if mibBuilder.loadTexts: f3PtpSysTimeOfDayClock.setDescription("This objects allows configuing PTP Telecom Slave object to be used as \n             clock source for System Time of Day. \n             This object is applicable when sysTimeOfDayType object is set to 'ptp' and \n             points to f3PtpTSAlias.\n             When sysTimeOfDayType is set to value other than 'ptp' this object should\n             return zeroDotZero.")
f3PtpBCTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 11), )
if mibBuilder.loadTexts: f3PtpBCTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpBCTable.setDescription('A list of entries corresponding to the PTP Boundary Clock entities.')
f3PtpBCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpBCIndex"))
if mibBuilder.loadTexts: f3PtpBCEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpBCEntry.setDescription('An entry containing information applicable to a particular\n           Boundary Clock Entity.')
f3PtpBCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpBCIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpBCIndex.setDescription('Unique index value associated with the Boundary Clock Entity.')
f3PtpBCAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpBCAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpBCAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the Boundary Clock entity.')
f3PtpBCAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 11, 1, 3), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpBCAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpBCAdminState.setDescription('This object represents the Administrative State of the Boundary Clock.')
f3PtpBCOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 11, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpBCOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpBCOperationalState.setDescription('This object represents the Operational State of the Boundary Clock.')
f3PtpBCSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 11, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpBCSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpBCSecondaryState.setDescription('This object represents the Secondary State of the Boundary Clock.')
f3PtpBCClockIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 11, 1, 6), ClockIdentity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpBCClockIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpBCClockIdentity.setDescription('This object specifies the Clock Identity of the PTP Boundary Clock.')
f3PtpBCTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 11, 1, 7), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpBCTimingSource.setStatus('current')
if mibBuilder.loadTexts: f3PtpBCTimingSource.setDescription('This object provides the entry from the f3PtpTSTable, which is\n          used as frequency and time of day source this Boundary Clock.')
f3PtpBCClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 11, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpBCClockClass.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpBCClockClass.setDescription('This object provides the entry from the f3PtpTSTable, which is\n          used as frequency and time of day source this Boundary Clock.')
f3PtpBCDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 11, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpBCDomainNumber.setStatus('current')
if mibBuilder.loadTexts: f3PtpBCDomainNumber.setDescription('This object provides the entry from the f3PtpTSTable, which is\n          used as frequency and time of day source this Boundary Clock.')
f3PtpBCStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 11, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpBCStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpBCStorageType.setDescription('The type of storage configured for this entry.')
f3PtpBCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 11, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpBCRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpBCRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpBCRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpBCRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpBCRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpBCPhysicalEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 11, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpBCPhysicalEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpBCPhysicalEntityIndex.setDescription('Populated with index into the physEntityTable (always point to left card slot in case of protection)')
f3PtpBCMediationControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 11, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpBCMediationControl.setStatus('current')
if mibBuilder.loadTexts: f3PtpBCMediationControl.setDescription('Enable/disable BC Mediation Control')
f3PtpMasterClockTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12), )
if mibBuilder.loadTexts: f3PtpMasterClockTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockTable.setDescription('A list of entries corresponding to the PTP Master Clock entities.')
f3PtpMasterClockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpMasterClockIndex"))
if mibBuilder.loadTexts: f3PtpMasterClockEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockEntry.setDescription('An entry containing information applicable to a particular\n           Master Clock Entity.')
f3PtpMasterClockIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpMasterClockIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockIndex.setDescription('Unique index value associated with the Boundary Clock Entity.')
f3PtpMasterClockAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterClockAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the Master Clock entity.')
f3PtpMasterClockAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 3), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterClockAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockAdminState.setDescription('This object represents the Administrative State of the Master Clock.')
f3PtpMasterClockOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMasterClockOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockOperationalState.setDescription('This object represents the Operational State of the Master Clock.')
f3PtpMasterClockSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMasterClockSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockSecondaryState.setDescription('This object represents the Secondary State of the Master Clock.')
f3PtpMasterClockClockIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 6), ClockIdentity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterClockClockIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockClockIdentity.setDescription('This object specifies the Clock Identity of the PTP Boundary Clock.')
f3PtpMasterClockTimeClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 7), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterClockTimeClock.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockTimeClock.setDescription('This object provides the entry from the f3TimeClockTable, which is\n          used as frequency and time of day source this Master Clock.')
f3PtpMasterClockDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterClockDomainNumber.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockDomainNumber.setDescription('This object allows specification of the PTP domain number of the\n           Master Clock .')
f3PtpMasterClockPriority1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterClockPriority1.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockPriority1.setDescription('')
f3PtpMasterClockPriority2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterClockPriority2.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockPriority2.setDescription('')
f3PtpMasterClockClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMasterClockClockClass.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpMasterClockClockClass.setDescription('This object provides the Time Clock Clock Class')
f3PtpMasterClockClockAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMasterClockClockAccuracy.setStatus('obsolete')
if mibBuilder.loadTexts: f3PtpMasterClockClockAccuracy.setDescription('This object indicates Clock accuracy of the clock')
f3PtpMasterClockTimeScale = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 13), TimeScale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMasterClockTimeScale.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockTimeScale.setDescription('')
f3PtpMasterClockUtcOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMasterClockUtcOffset.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockUtcOffset.setDescription('Seconds offset between TAI and UTC')
f3PtpMasterClockStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 15), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterClockStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockStorageType.setDescription('The type of storage configured for this entry.')
f3PtpMasterClockRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterClockRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpMasterClockRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpMasterClockRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpMasterClockRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpMasterClockActiveTimeRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 17), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMasterClockActiveTimeRef.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockActiveTimeRef.setDescription('This object specifies timig reference of the Master Clock.')
f3PtpMasterClockPTPProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 18), PTPProfile()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterClockPTPProfile.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockPTPProfile.setDescription('This object describe the Master Clock PTP Profile.')
f3PtpMasterClockPhysicalEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterClockPhysicalEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockPhysicalEntityIndex.setDescription('Populated with index into the physEntityTable (always point to left card slot in case of protection)')
f3PtpMasterClockActiveGrantsAnnounceService = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMasterClockActiveGrantsAnnounceService.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockActiveGrantsAnnounceService.setDescription('Report number of active grants announce service.')
f3PtpMasterClockActiveGrantsSyncService = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMasterClockActiveGrantsSyncService.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockActiveGrantsSyncService.setDescription('Report number of active grants sync service.')
f3PtpMasterClockActiveGrantsDelayRequestService = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMasterClockActiveGrantsDelayRequestService.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockActiveGrantsDelayRequestService.setDescription('Report number of active grants delay-request service.')
f3PtpMasterClockServiceAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMasterClockServiceAvailableTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockServiceAvailableTime.setDescription('This object allows to manage service available time (seconds) for PTP.')
f3PtpMasterClockServiceUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMasterClockServiceUnavailableTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockServiceUnavailableTime.setDescription('This object allows to manage service unavailable  time (seconds) for PTP.')
f3PtpMasterClockServiceAvailablePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMasterClockServiceAvailablePercentage.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockServiceAvailablePercentage.setDescription('This object allows to manage service available in percentage [XXX.YY%] for PTP.')
f3PtpMasterClockSmpteSystemFrameRateNumerator = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpMasterClockSmpteSystemFrameRateNumerator.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockSmpteSystemFrameRateNumerator.setDescription('This object allows to manage the frame rate (Numerator) for PTP Broadcast Profile.')
f3PtpMasterClockSmpteSystemFrameRateDenominator = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpMasterClockSmpteSystemFrameRateDenominator.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockSmpteSystemFrameRateDenominator.setDescription('This object allows to manage the frame rate (Denominator) for PTP Broadcast Profile.')
f3PtpMasterClockSmpteTimeAddressFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 12, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpMasterClockSmpteTimeAddressFlags.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockSmpteTimeAddressFlags.setDescription('This object allows to manage the flags for PTP Broadcast Profile.')
f3PtpMCITable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13), )
if mibBuilder.loadTexts: f3PtpMCITable.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCITable.setDescription('A list of entries corresponding to the PTP Master Clock Interface entities.')
f3PtpMCIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpBCIndex"), (0, "F3-PTP-MIB", "f3PtpMCIIndex"))
if mibBuilder.loadTexts: f3PtpMCIEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIEntry.setDescription('An entry containing information applicable to a particular\n           Master Clock Interface Entity.')
f3PtpMCIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpMCIIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIIndex.setDescription('Unique index value associated with the Master Clock Interface.')
f3PtpMCIAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the Master Clock Interface entity.')
f3PtpMCIAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 3), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIAdminState.setDescription('This object represents the Administrative State of the Master Clock Interface.')
f3PtpMCIOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIOperationalState.setDescription('This object represents the Operational State of the Master Clock Interface.')
f3PtpMCISecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCISecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCISecondaryState.setDescription('This object represents the Secondary State of the Master Clock Interface.')
f3PtpMCIPortIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 6), PortIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIPortIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIPortIdentity.setDescription('This object represents the PTP Port Identity of the Master Clock Interface.')
f3PtpMCIDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpMCIDomainNumber.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIDomainNumber.setDescription('This object allows specification of the PTP domain number of the\n           Master Clock Interface.')
f3PtpMCIClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 8), MasterClockType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIClockType.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIClockType.setDescription('This object must be used to specify the type of the Master Clock Interface.')
f3PtpMCIDelayMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 9), DelayMechanism()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIDelayMechanism.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIDelayMechanism.setDescription('This object  represents the Delay Mechanism of the  Master Clock Interface.')
f3PtpMCIIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIIfName.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIIfName.setDescription('This object allows SNMP management entities to provide a\n          name to the Slave Only Ordinary Clock.  This is used\n          for creation of the underlying IP Interface associated \n          with the Master Clock Interface.')
f3PtpMCIIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 11), IpVersion()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIIpProtocol.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIIpProtocol.setDescription('This object allows specification of the IP Protocol to\n          communicate with Remote Slaves. Only ipv4 is supported.')
f3PtpMCIMasterIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIMasterIpV4Address.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIMasterIpV4Address.setDescription('This object allows specification of the IPv4 Address of\n          the PTP Master.')
f3PtpMCIMasterIpV4SubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIMasterIpV4SubnetMask.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIMasterIpV4SubnetMask.setDescription('This object allows specification of the IPv4 Subnet Mask of\n          the PTP Master.')
f3PtpMCIIpPriorityMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 14), IpPriorityMapMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIIpPriorityMapMode.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIIpPriorityMapMode.setDescription('This object enables specification of Priority Mapping Mode for\n          the  Master Clock Interface.')
f3PtpMCIIpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIIpPriority.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIIpPriority.setDescription('This object enables specification of Priority Value for\n          f3PtpMCIIpPriorityMapMode as priomap-tos,priomap-dscp.')
f3PtpMCIMaxLeaseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIMaxLeaseDuration.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIMaxLeaseDuration.setDescription('This enables specification of maximum lease duration for granted announce, \n          Sync and Delay Response service in seconds.')
f3PtpMCIMaxSlavesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpMCIMaxSlavesSupported.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIMaxSlavesSupported.setDescription('This attribute specifies maximum total number of Static and Dynamic\n          Remote Slaves supported by the Master Clock Interface.')
f3PtpMCIMaxStaticSlavesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpMCIMaxStaticSlavesSupported.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIMaxStaticSlavesSupported.setDescription('This attribute specifies maximum  total number of Static\n          Remote Slaves supported by the Master Clock Interface.')
f3PtpMCIMaxSyncMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 19), SyncMsgRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIMaxSyncMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIMaxSyncMsgRate.setDescription('This attribute specifies maximum allowed negotiated Sync Messages rate per \n          remote Slave Clock with UMN enabled of default Sync Messages rate per \n          remote Slave Clock with UMN disabled.')
f3PtpMCIMaxDelayRespMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 20), DelayRespMsgRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIMaxDelayRespMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIMaxDelayRespMsgRate.setDescription('This attribute specifies maximum allowed negotiated Delay_Resp Messages rate \n          per remote Slave Clock with UMN enabled of default Delay_Resp Messages rate \n          per remote Slave Clock with UMN disabled.')
f3PtpMCIMaxAnnounceMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 21), AnnounceMsgRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIMaxAnnounceMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIMaxAnnounceMsgRate.setDescription('This attribute specifies maximum allowed negotiated Delay_Req Messages rate \n          per remote Slave Clock with UMN enabled of default Delay_Req Messages rate \n          per remote Slave Clock with UMN disabled.')
f3PtpMCIStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 22), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStorageType.setDescription('The type of storage configured for this entry.')
f3PtpMCIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpMCIRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpMCIRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpMCIRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpMCIServiceFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 24), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpMCIServiceFlow.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIServiceFlow.setDescription('This object describe the associated service flow.')
f3PtpMCIClockClassProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 25), ClockClassProfile()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIClockClassProfile.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIClockClassProfile.setDescription('This object describe the Clock Class Profile.')
f3PtpMCIClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIClockClass.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIClockClass.setDescription('This object provides the MCI Clock Class')
f3PtpMCIAnnounceExtTLVEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 27), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIAnnounceExtTLVEnable.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIAnnounceExtTLVEnable.setDescription('This object determines whether the announce message has a TLV extension')
f3PtpMCIPtpTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 28), PTPTransport()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIPtpTransport.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIPtpTransport.setDescription('This object specifies the PTP transport')
f3PtpMCIPtpTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 29), PTPTransportMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIPtpTransportMode.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIPtpTransportMode.setDescription('This object specifies the PTP transport mode')
f3PtpMCIPtpRemoteSlaveAgingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIPtpRemoteSlaveAgingTimeout.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIPtpRemoteSlaveAgingTimeout.setDescription('This attribute (in seconds) specifies the aging timeout for inactive dynamic remote slaves.\n          The value 0 means it is never aged.\n          Note that this attribute is not applicable to static slaves.')
f3PtpMCIMasterIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 31), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIMasterIpV6Address.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIMasterIpV6Address.setDescription('This object allows specification of the unicast ipv6 Address of\n          the PTP Master.')
f3PtpMCIMasterIpV6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIMasterIpV6AddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIMasterIpV6AddrPrefixLength.setDescription('This object allows specification of the unicast IPv6 address prefix length of\n          the PTP Master.')
f3PtpMCIDefaultGatewayControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 33), ToggleValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIDefaultGatewayControl.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIDefaultGatewayControl.setDescription('This attribute control Gatwaye address for PTP Master.')
f3PtpMCIGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 34), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIGateway.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIGateway.setDescription('This object allows specification of the IPv4 Gateway Address of\n          the PTP Master.')
f3PtpMCIIpV6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 13, 1, 35), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIIpV6Gateway.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIIpV6Gateway.setDescription('This object allows specification of the IPv6 Gateway Address of\n          the PTP Master.')
f3PtpMasterVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 14), )
if mibBuilder.loadTexts: f3PtpMasterVirtualPortTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterVirtualPortTable.setDescription('A list of entries corresponding to the PTP Master Clock Interface \n        Virtual Port entities.')
f3PtpMasterVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 14, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpBCIndex"), (0, "F3-PTP-MIB", "f3PtpMCIIndex"), (0, "F3-PTP-MIB", "f3PtpMasterVirtualPortIndex"))
if mibBuilder.loadTexts: f3PtpMasterVirtualPortEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterVirtualPortEntry.setDescription('An entry containing information applicable to a particular\n           Master Clock Interface Virtual Port entity.')
f3PtpMasterVirtualPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 14, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpMasterVirtualPortIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterVirtualPortIndex.setDescription('Unique index value associated with the Master Virtual Port entity.')
f3PtpMasterVirtualPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterVirtualPortAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterVirtualPortAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the Master Virtual Port entity.')
f3PtpMasterVirtualPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 14, 1, 3), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterVirtualPortAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterVirtualPortAdminState.setDescription('This object represents the Administrative State of the Master Virtual Port.')
f3PtpMasterVirtualPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 14, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMasterVirtualPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterVirtualPortOperationalState.setDescription('This object represents the Operational State of the Master Virtual Port.')
f3PtpMasterVirtualPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 14, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMasterVirtualPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterVirtualPortSecondaryState.setDescription('This object represents the Secondary State of the Master Virtual Port.')
f3PtpMasterVirtualPortFlowPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 14, 1, 6), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterVirtualPortFlowPoint.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterVirtualPortFlowPoint.setDescription('This object associates the PTP Flow Point with the Master Virtual Port.')
f3PtpMasterVirtualPortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 14, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterVirtualPortStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterVirtualPortStorageType.setDescription('The type of storage configured for this entry.')
f3PtpMasterVirtualPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 14, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMasterVirtualPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterVirtualPortRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpMasterVirtualPortRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpMasterVirtualPortRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpMasterVirtualPortRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpStaticRemoteSlaveTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15), )
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveTable.setDescription('A list of entries corresponding to the PTP Remote Slave entities.')
f3PtpStaticRemoteSlaveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpBCIndex"), (0, "F3-PTP-MIB", "f3PtpMCIIndex"), (0, "F3-PTP-MIB", "f3PtpStaticRemoteSlaveIndex"))
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveEntry.setDescription('An entry containing information applicable to a particular\n           Static Remote Slave entity.')
f3PtpStaticRemoteSlaveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveIndex.setDescription('Unique index value associated with the Remote Slave.')
f3PtpStaticRemoteSlaveAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the Remote Slave.')
f3PtpStaticRemoteSlaveAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 3), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveAdminState.setDescription('This object represents the Administrative State of the Remote Slave.')
f3PtpStaticRemoteSlaveOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveOperationalState.setDescription('This object represents the Operational State of the Remote Slave.')
f3PtpStaticRemoteSlaveSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveSecondaryState.setDescription('This object represents the Secondary State of the Remote Slave.')
f3PtpStaticRemoteSlaveClockIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 6), ClockIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveClockIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveClockIdentity.setDescription('This object represents the Clock Identity of the Remote Slave.')
f3PtpStaticRemoteSlaveIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveIpV4Address.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveIpV4Address.setDescription('This object allows specification of the IPv4 Address of\n          the Remote Slave.')
f3PtpStaticRemoteSlaveTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveTimeCreated.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveTimeCreated.setDescription('This object presents time when this Remote Slave entity was created.')
f3PtpStaticRemoteSlaveSyncMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 9), SyncMsgRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveSyncMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveSyncMsgRate.setDescription('This attribute specifies Sync Message Rate of the Remote Slave.')
f3PtpStaticRemoteSlaveDelayRspMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 10), DelayRespMsgRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveDelayRspMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveDelayRspMsgRate.setDescription('This attribute specifies Delay Respone Message Rate of the Remote Slave.')
f3PtpStaticRemoteSlaveAnnounceMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 11), AnnounceMsgRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveAnnounceMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveAnnounceMsgRate.setDescription('This attribute specifies Announce Message Rate of the Remote Slave.')
f3PtpStaticRemoteSlaveNegSyncLeaseDur = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveNegSyncLeaseDur.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveNegSyncLeaseDur.setDescription('This attribute indicates Sync messages negotiated Lease Duration in seconds.')
f3PtpStaticRemoteSlaveNegDelayRspLeaseDur = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveNegDelayRspLeaseDur.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveNegDelayRspLeaseDur.setDescription('This attribute indicates Delay Response messages negotiated Lease \n          Duration in seconds.')
f3PtpStaticRemoteSlaveNegAnnounceLeaseDur = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveNegAnnounceLeaseDur.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveNegAnnounceLeaseDur.setDescription('This attribute indicates Announce messages negotiated Lease \n          Duration in seconds.')
f3PtpStaticRemoteSlaveSyncDurRemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveSyncDurRemTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveSyncDurRemTime.setDescription('This attribute indicates Remaining seconds of Lease Duration of Sync service.')
f3PtpStaticRemoteSlaveDelayRspDurRemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveDelayRspDurRemTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveDelayRspDurRemTime.setDescription('This attribute indicates Remaining seconds of Lease Duration of Delay Response \n          service.')
f3PtpStaticRemoteSlaveAnnounceDurRemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveAnnounceDurRemTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveAnnounceDurRemTime.setDescription('This attribute indicates Remaining seconds of Lease Duration of Announce \n          service.')
f3PtpStaticRemoteSlaveUmnControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 18), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveUmnControl.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveUmnControl.setDescription('This attribute controls UMN for the static remote slave.')
f3PtpStaticRemoteSlaveStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 19), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveStorageType.setDescription('The type of storage configured for this entry.')
f3PtpStaticRemoteSlaveRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpStaticRemoteSlaveRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpStaticRemoteSlaveRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpStaticRemoteSlaveRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpStaticRemoteSlaveIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 15, 1, 21), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveIpV6Address.setStatus('current')
if mibBuilder.loadTexts: f3PtpStaticRemoteSlaveIpV6Address.setDescription('This object allows specification of the unicast IPv6 Address of\n          the Remote Slave.')
f3PtpDynamicRemoteSlaveTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16), )
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveTable.setDescription('A list of entries corresponding to the PTP Remote Slave entities.')
f3PtpDynamicRemoteSlaveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpBCIndex"), (0, "F3-PTP-MIB", "f3PtpMCIIndex"), (0, "F3-PTP-MIB", "f3PtpDynamicRemoteSlaveIndex"))
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveEntry.setDescription('An entry containing information applicable to a particular\n           Dynamic Remote Slave entity.')
f3PtpDynamicRemoteSlaveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveIndex.setDescription('Unique index value associated with the Remote Slave.')
f3PtpDynamicRemoteSlaveAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the Remote Slave.')
f3PtpDynamicRemoteSlaveAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveAdminState.setDescription('This object represents the Administrative State of the Remote Slave.')
f3PtpDynamicRemoteSlaveOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveOperationalState.setDescription('This object represents the Operational State of the Remote Slave.')
f3PtpDynamicRemoteSlaveSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveSecondaryState.setDescription('This object represents the Secondary State of the Remote Slave.')
f3PtpDynamicRemoteSlaveClockIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 6), ClockIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveClockIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveClockIdentity.setDescription('This object represents the Clock Identity of the Remote Slave.')
f3PtpDynamicRemoteSlaveIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveIpV4Address.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveIpV4Address.setDescription('This object allows specification of the IPv4 Address of\n          the Remote Slave.')
f3PtpDynamicRemoteSlaveTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveTimeCreated.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveTimeCreated.setDescription('This object presents time when this Remote Slave entity was created.')
f3PtpDynamicRemoteSlaveSyncMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 9), SyncMsgRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveSyncMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveSyncMsgRate.setDescription('This attribute specifies Sync Message Rate of the Remote Slave.')
f3PtpDynamicRemoteSlaveDelayRspMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 10), DelayRespMsgRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveDelayRspMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveDelayRspMsgRate.setDescription('This attribute specifies Delay Respone Message Rate of the Remote Slave.')
f3PtpDynamicRemoteSlaveAnnounceMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 11), AnnounceMsgRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveAnnounceMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveAnnounceMsgRate.setDescription('This attribute specifies Announce Message Rate of the Remote Slave.')
f3PtpDynamicRemoteSlaveNegSyncLeaseDur = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveNegSyncLeaseDur.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveNegSyncLeaseDur.setDescription('This attribute indicates Sync messages negotiated Lease Duration in seconds.')
f3PtpDynamicRemoteSlaveNegDelayRspLeaseDur = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveNegDelayRspLeaseDur.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveNegDelayRspLeaseDur.setDescription('This attribute indicates Delay Response messages negotiated Lease \n          Duration in seconds.')
f3PtpDynamicRemoteSlaveNegAnnounceLeaseDur = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveNegAnnounceLeaseDur.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveNegAnnounceLeaseDur.setDescription('This attribute indicates Announce messages negotiated Lease \n          Duration in seconds.')
f3PtpDynamicRemoteSlaveSyncDurRemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveSyncDurRemTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveSyncDurRemTime.setDescription('This attribute indicates Remaining seconds of Lease Duration of Sync service.')
f3PtpDynamicRemoteSlaveDelayRspDurRemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveDelayRspDurRemTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveDelayRspDurRemTime.setDescription('This attribute indicates Remaining seconds of Lease Duration of Delay Response \n          service.')
f3PtpDynamicRemoteSlaveAnnounceDurRemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveAnnounceDurRemTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveAnnounceDurRemTime.setDescription('This attribute indicates Remaining seconds of Lease Duration of Announce \n          service.')
f3PtpDynamicRemoteSlaveRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpDynamicRemoteSlaveRowStatus supported is\n            destroy(6).  \n\n            The f3PtpDynamicRemoteSlaveRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpDynamicRemoteSlaveStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 19), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveStorageType.setDescription('The type of storage configured for this entry.')
f3PtpDynamicRemoteSlavePortIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 20), PortIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlavePortIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlavePortIdentity.setDescription('The port identity of the remote slave')
f3PtpDynamicRemoteSlavePeerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 21), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlavePeerMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlavePeerMacAddress.setDescription('The port identity of the remote slave')
f3PtpDynamicRemoteSlaveIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 16, 1, 22), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveIpV6Address.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveIpV6Address.setDescription('This object allows specification of the unicast IPv6 Address of\n          the Remote Slave.')
f3PtpTrafficPortFlowPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17), )
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointTable.setDescription('A list of entries corresponding to the PTP Access Port Flow Point\n        entities.')
f3PtpTrafficPortFlowPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "F3-PTP-MIB", "f3PtpTrafficPortFlowPointIndex"))
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointEntry.setDescription('An entry containing information applicable to a particular\n           Traffic Port Flow Point Entity.')
f3PtpTrafficPortFlowPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointIndex.setDescription('Unique index value associated with the Traffic Port PTP Flow Point.')
f3PtpTrafficPortFlowPointAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the Traffic Port PTP Flow Point.')
f3PtpTrafficPortFlowPointAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointAdminState.setDescription('This object represents the Administrative State of the \n             PTP Flow Point.')
f3PtpTrafficPortFlowPointOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointOperationalState.setDescription('This object represents the Operational State of the PTP Flow \n             Point.')
f3PtpTrafficPortFlowPointSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointSecondaryState.setDescription('This object represents the Secondary State of the PTP Flow Point.')
f3PtpTrafficPortFlowPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 6), PtpFlowPointType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointType.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointType.setDescription('This object represents the PTP Flow Point Type, i.e. whether\n             it is an Transparent Clock or an OC Slave.')
f3PtpTrafficPortFlowPointClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 7), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointClock.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointClock.setDescription('This object points to the Transparent Clock or Slave Only\n             Ordinary Clock instance which is associated with this\n             PTP Flow Point.')
f3PtpTrafficPortFlowPointService = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 8), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointService.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointService.setDescription('This object points to the associated Traffic Service Flow.')
f3PtpTrafficPortFlowPointOuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointOuterVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointOuterVlanEtherType.setDescription('This object allows specification of the Outer VLAN Ether Type\n             of the PTP Flow.')
f3PtpTrafficPortFlowPointOuterVlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointOuterVlanMemberList.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointOuterVlanMemberList.setDescription('This object allows specification of the Outer VLAN(s) \n             of the PTP Flow.')
f3PtpTrafficPortFlowPointOuterUntaggedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointOuterUntaggedEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointOuterUntaggedEnabled.setDescription('This object allows specification of whether the Outer VLAN\n             exists or not.')
f3PtpTrafficPortFlowPointInner1VlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointInner1VlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointInner1VlanEtherType.setDescription('This object allows specification of the Inner1 VLAN Ether Type\n             of the PTP Flow.')
f3PtpTrafficPortFlowPointInner1VlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointInner1VlanMemberList.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointInner1VlanMemberList.setDescription('This object allows specification of the Inner1 VLAN(s) \n             of the PTP Flow.')
f3PtpTrafficPortFlowPointInner1UntaggedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointInner1UntaggedEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointInner1UntaggedEnabled.setDescription('This object allows specification of whether the Inner1 VLAN\n             exists or not.')
f3PtpTrafficPortFlowPointInner2VlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointInner2VlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointInner2VlanEtherType.setDescription('This object allows specification of the Inner2 VLAN Ether Type\n             of the PTP Flow.')
f3PtpTrafficPortFlowPointInner2VlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 16), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointInner2VlanMemberList.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointInner2VlanMemberList.setDescription('This object allows specification of the Inner2 VLAN(s) \n             of the PTP Flow.')
f3PtpTrafficPortFlowPointInner2UntaggedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointInner2UntaggedEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointInner2UntaggedEnabled.setDescription('This object allows specification of whether the Inner1 VLAN\n             exists or not.')
f3PtpTrafficPortFlowPointStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 18), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStorageType.setDescription('The type of storage configured for this entry.')
f3PtpTrafficPortFlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpTrafficPortFlowPointRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpTrafficPortFlowPointRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpTrafficPortFlowPointRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpTrafficPortFlowPointCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointCOS.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointCOS.setDescription('This object allows specification of Class of Service of the PTP traffic\n             associated with this Flow Point.')
f3PtpTrafficPortFlowPointCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointCIRLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointCIRLo.setDescription('This object allows specification of Committed Information Rate of the \n             PTP traffic associated with this Flow Point.\n             The CIR value is in bits-per-second units. The value of this object\n             represents the lower 32 bits of the total CIR value.')
f3PtpTrafficPortFlowPointCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointCIRHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointCIRHi.setDescription('This object allows specification of Committed Information Rate of the \n             PTP traffic associated with this Flow Point.\n             The CIR value is in bits-per-second units. The value of this object\n             represents the higher 32 bits of the total CIR value.')
f3PtpTrafficPortFlowPointEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointEIRLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointEIRLo.setDescription('This object allows specification of Excess Information Rate of the \n             PTP traffic associated with this Flow Point.\n             The EIR value is in bits-per-second units. The value of this object\n             represents the lower 32 bits of the total EIR value.')
f3PtpTrafficPortFlowPointEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointEIRHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointEIRHi.setDescription('This object allows specification of Excess Information Rate of the \n             PTP traffic associated with this Flow Point.\n             The EIR value is in bits-per-second units. The value of this object\n             represents the higher 32 bits of the total EIR value.')
f3PtpTrafficPortFlowPointAssociatedQueueProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 25), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointAssociatedQueueProfile.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointAssociatedQueueProfile.setDescription('This object allows specification of the related queue profile.')
f3PtpTrafficPortFlowPointLoopAvoidance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 17, 1, 26), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointLoopAvoidance.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointLoopAvoidance.setDescription('This object allows specify OID of this associated Loop Avoidance protocol entity.')
f3PtpEthernetTrafficPortExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 18), )
if mibBuilder.loadTexts: f3PtpEthernetTrafficPortExtTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpEthernetTrafficPortExtTable.setDescription('This table extends cmEthernetTrafficPortTable by adding PTP related parameters.')
f3PtpEthernetTrafficPortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 18, 1), )
cmEthernetTrafficPortEntry.registerAugmentions(("F3-PTP-MIB", "f3PtpEthernetTrafficPortExtEntry"))
f3PtpEthernetTrafficPortExtEntry.setIndexNames(*cmEthernetTrafficPortEntry.getIndexNames())
if mibBuilder.loadTexts: f3PtpEthernetTrafficPortExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpEthernetTrafficPortExtEntry.setDescription('A conceptual row in the f3PtpEthernetTrafficPortExtTable.')
f3PtpEthernetTrafficPortDelayAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 18, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpEthernetTrafficPortDelayAsymmetry.setStatus('current')
if mibBuilder.loadTexts: f3PtpEthernetTrafficPortDelayAsymmetry.setDescription('This object allows configuring Delay Asymmetry in nanoseconds on \n          the Ethernet Traffic Port. The default value is 0.')
f3PtpPTPClockTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19), )
if mibBuilder.loadTexts: f3PtpPTPClockTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockTable.setDescription('A list of entries corresponding to the PTP PTP Clock entities.')
f3PtpPTPClockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockIndex"))
if mibBuilder.loadTexts: f3PtpPTPClockEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockEntry.setDescription('An entry containing information applicable to a particular\n           PTP Clock Entity.')
f3PtpPTPClockIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpPTPClockIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockIndex.setDescription('Unique index value associated with the PTP Clock Entity.')
f3PtpPTPClockAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockAdminState.setDescription('This object represents the Administrative State of the PTP Clock.')
f3PtpPTPClockAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the PTP Clock entity.')
f3PtpPTPClockOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockOperationalState.setDescription('This object represents the Operational State of the PTP Clock.')
f3PtpPTPClockSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockSecondaryState.setDescription('This object represents the Secondary State of the PTP Clock.')
f3PtpPTPClockProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 6), PTPClockProfile()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPClockProfile.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockProfile.setDescription('This object represents the Secondary State of the PTP Clock.')
f3PtpPTPClockClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 7), PTPClockType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPClockClockType.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockClockType.setDescription('This object provides the entry from the f3TimeClockTable, which is\n          used as frequency and time of day source this Master Clock.')
f3PtpPTPClockOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 8), PTPClockOperMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockOperationalMode.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockOperationalMode.setDescription('This object provides the entry from the f3TimeClockTable, which is\n          used as frequency and time of day source this Master Clock.')
f3PtpPTPClockClockIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 9), ClockIdentity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPClockClockIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockClockIdentity.setDescription('This object specifies the Clock Identity of the PTP Clock.')
f3PtpPTPClockDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPClockDomainNumber.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockDomainNumber.setDescription('This object allows specification of the PTP domain number of the\n           Master Clock .')
f3PtpPTPClockTimeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 11), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockTimeSource.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockTimeSource.setDescription('This object specify PTP Clock time source.')
f3PtpPTPClockPriority1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockPriority1.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockPriority1.setDescription('')
f3PtpPTPClockPriority2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockPriority2.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockPriority2.setDescription('')
f3PtpPTPClockLocalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockLocalPriority.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockLocalPriority.setDescription('This object allows configuration of  local priority used by the PTP Clock.')
f3PtpPTPClockClockAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockClockAccuracy.setStatus('obsolete')
if mibBuilder.loadTexts: f3PtpPTPClockClockAccuracy.setDescription('This object indicates Clock accuracy of the clock')
f3PtpPTPClockScaledLogVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockScaledLogVariance.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockScaledLogVariance.setDescription('')
f3PtpPTPClockSyncEid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 17), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockSyncEid.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockSyncEid.setDescription('This object provides the entry from the f3SyncTable, which is\n          used as frequency for this PTP Clock.')
f3PtpPTPClockCurrentTimeOfDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockCurrentTimeOfDay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockCurrentTimeOfDay.setDescription('This object allows specification of the PTP Clock Current\n          Time of Day.')
f3PtpPTPClockActiveSlavePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 19), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockActiveSlavePort.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockActiveSlavePort.setDescription('This object specifies Active Slave Port of the PTP Clock.')
f3PtpPTPClockClockRecoveryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 20), ClockRecoveryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockClockRecoveryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockClockRecoveryState.setDescription("This object provides the TPTP Clock's clock recovery state.")
f3PtpPTPClockPhaseRecoveryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 21), PhaseRecoveryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockPhaseRecoveryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockPhaseRecoveryState.setDescription('This object specify the phase recovery state.')
f3PtpPTPClockTimeTraceabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockTimeTraceabilityStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockTimeTraceabilityStatus.setDescription('This object provides the Time traceability status of the\n            PTP Clock.')
f3PtpPTPClockTimeSinceTimeTraceabilityChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockTimeSinceTimeTraceabilityChanged.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockTimeSinceTimeTraceabilityChanged.setDescription('This object provides the time in seconds since the Time traceability \n            changed on the PTP Clock.')
f3PtpPTPClockFreqTraceabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockFreqTraceabilityStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockFreqTraceabilityStatus.setDescription('This object provides the Frequency traceability status of the\n            PTP Clock.')
f3PtpPTPClockTimeSinceFreqTraceabilityChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockTimeSinceFreqTraceabilityChanged.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockTimeSinceFreqTraceabilityChanged.setDescription('This object provides the time in seconds since the Frequency traceability \n            changed on the PTP Clock.')
f3PtpPTPClockClockSyncEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockClockSyncEEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockClockSyncEEnabled.setDescription("This object allows to specify whether the Telecom Slave \n          can be enabled/disabled for Synchronous Ethernet. \n          When enabled, on receive side \n            -telecom slave can extract the frequency \n             and pass the recovered clock to the system clock\n            -QL is extracted (when QL is enabled) from the selected SOOC's clock class\n            -telecom slave is eligible to be selected as a system clock reference\n          When disabled, on receive side,\n            -telecom slave does not pass the recovered clock to the system clock \n            -telecom slave does not process the QL from selected SOOC's clock class \n            -telecom slave is not eligible to be selected as a \n                     system clock reference.")
f3PtpPTPClockClockQLModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockClockQLModeEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockClockQLModeEnabled.setDescription("This object allows to specify whether the Telecom Slave \n          can be enabled/disabled for QL Mode.  \n          When enabled, on receive side \n            -telecom slave can extract the QL from selected SOOC's clock class \n          When disabled, on receive side,\n            -telecom slave does not process the QL from selected SOOC's clock class.")
f3PtpPTPClockClockExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 28), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockClockExpectedQL.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockClockExpectedQL.setDescription("This object allows to specify the expected QL when the \n          Telecom Slave is enabled for QL Mode.  This is applicable \n          when f3PtpPTPClockClockQLModeEnabled is set to true.\n          This object allows the user to set a minimum\n          expected received Quality Level on the Telecom Slave. \n          The valid values depend upon the SYNC entity's Network Clock Type. \n          A value of None represents that a minimum Quality Level is not expected. \n          The default value shall be None.")
f3PtpPTPClockClockAssumedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 29), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockClockAssumedQL.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockClockAssumedQL.setDescription("This object allows to specify the assumed QL on the \n          Telecom Slave.  The Assumed QL is only meaningful if the Network Clock Type\n          (see fsp150cm-sync.mib) is option1 and the \n          telecom slave's QL Mode is disabled and the telecom slave is being used as \n          an input reference source. Under these conditions,\n          the specified QL value is assumed to be the Quality Level of the\n          non-failed reference.")
f3PtpPTPClockClockReceivedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 30), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockClockReceivedQL.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockClockReceivedQL.setDescription("This object provides the Received QL value for the Telecom Slave. \n          If the Telecom Slave's QL Mode is disabled, then the received \n          QL value is not applicable.")
f3PtpPTPClockStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 31), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPClockStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStorageType.setDescription('The type of storage configured for this entry.')
f3PtpPTPClockRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 32), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPClockRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpPTPClockRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpPTPClockRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpPTPClockRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpPTPClockCurrentOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockCurrentOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockCurrentOffsetFromMaster.setDescription('This object provides the value for current offset from master.\n          Note: the SYNTAX should be ScaledNanoseconds.')
f3PtpPTPClockRecentMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 34), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockRecentMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockRecentMeanPathDelay.setDescription('This object provides recent mean path delay.\n          Note: the SYNTAX should be ScaledNanoseconds.')
f3PtpPTPClockRecentSyncPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockRecentSyncPDV.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockRecentSyncPDV.setDescription('This object provides the recent Sync messages packet delay variation.\n          Note: the SYNTAX should be ScaledNanoseconds.')
f3PtpPTPClockClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockClockClass.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockClockClass.setDescription('This object specify PTP Clock class')
f3PtpPTPClockPhysicalEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockPhysicalEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockPhysicalEntityIndex.setDescription('Populated with index into the physEntityTable (always point to left card slot in case of protection)')
f3PtpPTPClockActiveGrantsAnnounceService = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockActiveGrantsAnnounceService.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockActiveGrantsAnnounceService.setDescription('Report number of active grants announce service.')
f3PtpPTPClockActiveGrantsSyncService = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockActiveGrantsSyncService.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockActiveGrantsSyncService.setDescription('Report number of active grants sync service.')
f3PtpPTPClockActiveGrantsDelayRequestService = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockActiveGrantsDelayRequestService.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockActiveGrantsDelayRequestService.setDescription('Report number of active grants delay-request service.')
f3PtpPTPClockMaxStepRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockMaxStepRemoved.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockMaxStepRemoved.setDescription('Local PTP Clock only qualify the announce message with the value less than configured.')
f3PtpPTPClockServiceAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockServiceAvailableTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockServiceAvailableTime.setDescription('This object allows to manage service available time (seconds) for PTP.')
f3PtpPTPClockServiceUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockServiceUnavailableTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockServiceUnavailableTime.setDescription('This object allows to manage service unavailable  time (seconds) for PTP.')
f3PtpPTPClockServiceAvailablePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockServiceAvailablePercentage.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockServiceAvailablePercentage.setDescription('This object allows to manage service available in percentage [XXX.YY%] for PTP.')
f3PtpPTPClockGrandMasterID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockGrandMasterID.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockGrandMasterID.setDescription('Grandmaster Identity to be transmitted in IEEE_C37_238 TLV (2 bytes). Most significant byte is reserved and shall be 0.\n             Configurable for grandmaster-capable devices only. Note: the range for c37-238-2011 is (3..254)')
f3PtpPTPClockTimeInaccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 46), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockTimeInaccuracy.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockTimeInaccuracy.setDescription('networkTimeInaccuracy to be transmitted in IEEE_C37_238 TLV. This value is set at the grandmaster-capable clocks.')
f3PtpPTPClockNetworkTimeInaccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 19, 1, 47), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockNetworkTimeInaccuracy.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockNetworkTimeInaccuracy.setDescription('Maximum TimeInaccuracy that the device contributes to the networkTimeInaccuracy.')
f3PtpPTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20), )
if mibBuilder.loadTexts: f3PtpPTPPortTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortTable.setDescription('A list of entries corresponding to the PTP PTP Port entities.')
f3PtpPTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockIndex"), (0, "F3-PTP-MIB", "f3PtpPTPPortIndex"))
if mibBuilder.loadTexts: f3PtpPTPPortEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortEntry.setDescription('An entry containing information applicable to a particular\n           PTP Port Entity.')
f3PtpPTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpPTPPortIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortIndex.setDescription('Unique index value associated with the PTP Port Entity.')
f3PtpPTPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPPortAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortAdminState.setDescription('This object represents the Administrative State of the PTP Port.')
f3PtpPTPPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPPortAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the PTP Port entity.')
f3PtpPTPPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortOperationalState.setDescription('This object represents the Operational State of the PTP Port.')
f3PtpPTPPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortSecondaryState.setDescription('This object represents the Secondary State of the PTP Port.')
f3PtpPTPPortPeerPortIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 6), PortIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortPeerPortIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortPeerPortIdentity.setDescription('This object specifies the Peer Port Identity of the PTP Port.')
f3PtpPTPPortLocalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPPortLocalPriority.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortLocalPriority.setDescription('This object allows configuration of  local priority used by the PTP Port.')
f3PtpPTPPortPtpFlowPointEid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 8), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPPortPtpFlowPointEid.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortPtpFlowPointEid.setDescription('This object associates the PTP Flow Point Eid.')
f3PtpPTPPortNotSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPPortNotSlave.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpPTPPortNotSlave.setDescription('This object indicate if PTP Port is slave.')
f3PtpPTPPortTxDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 10), DestMacAddrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPPortTxDestMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortTxDestMacAddress.setDescription('This object specifies the Mac address of the PTP Port.')
f3PtpPTPPortSyncMessageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 11), SyncMessageRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPPortSyncMessageRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortSyncMessageRate.setDescription('This object allows specification of the PTP Port Sync \n         Message Rate.')
f3PtpPTPPortmDelayReqRespMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 12), DelayReqMessageRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPPortmDelayReqRespMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortmDelayReqRespMsgRate.setDescription('This object allows specification of the PTP Port Delay Response \n         Message Rate.')
f3PtpPTPPortmAnnounceMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 13), AnnounceMessageRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPPortmAnnounceMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortmAnnounceMsgRate.setDescription('This object allows specification of the PTP Port Announce Message Rate.')
f3PtpPTPPortAnnounceReceiptTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPPortAnnounceReceiptTimeout.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortAnnounceReceiptTimeout.setDescription('This object allows specification of the PTP Port Announce Message \n         Receipt Timeout.')
f3PtpPTPPortSyncReceiptTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPPortSyncReceiptTimeout.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortSyncReceiptTimeout.setDescription('This object allows specification of the PTP Port Sync Message \n         Receipt Timeout.')
f3PtpPTPPortDelayRespTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPPortDelayRespTimeout.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortDelayRespTimeout.setDescription('This object allows specification of the PTP Port Delay Response \n         Message Receipt Timeout.')
f3PtpPTPPortPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 17), PtpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortPortState.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortPortState.setDescription('This object provides the PTP Port state.')
f3PtpPTPPortBmcaDecisionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 18), BMCARole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortBmcaDecisionCode.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortBmcaDecisionCode.setDescription('This object provides the PTP Port BMCA Role')
f3PtpPTPPortClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortClockClass.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortClockClass.setDescription('This object specify PTP Port class.')
f3PtpPTPPortPeerPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 20), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortPeerPortMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortPeerPortMacAddress.setDescription('This attribute description PTP Port Mac Address.')
f3PtpPTPPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpPTPPortRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpPTPPortRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpPTPPortRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpPTPPortPortIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 22), PortIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortPortIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortPortIdentity.setDescription('This object specifies the Port Identity of the PTP Port.')
f3PtpPTPPortMaxExpectedL2Slaves = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPPortMaxExpectedL2Slaves.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortMaxExpectedL2Slaves.setDescription('This object specifies the max number of l2 slaves of the PTP Port.')
f3PtpPTPPortMasterClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 24), MasterClockType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPPortMasterClockType.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortMasterClockType.setDescription('This object allows specification of the Master Clock Type of the \n           PTP Port.')
f3PtpPTPPortLastRcvdAnnounceMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 25), F3DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortLastRcvdAnnounceMsg.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortLastRcvdAnnounceMsg.setDescription('This object specifies the last recieved announce message.')
f3PtpPTPPortLastRcvdSyncMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 26), F3DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortLastRcvdSyncMsg.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortLastRcvdSyncMsg.setDescription('This object specifies the last recieved sync message.')
f3PtpPTPPortLastRcvdDelayReqMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 27), F3DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortLastRcvdDelayReqMsg.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortLastRcvdDelayReqMsg.setDescription('This object specifies the last recieved delay request message.')
f3PtpPTPPortLastRcvdDelayRspMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 28), F3DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortLastRcvdDelayRspMsg.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortLastRcvdDelayRspMsg.setDescription('This object specifies the last recieved response message.')
f3PtpPTPPortMasterOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 29), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPPortMasterOnly.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortMasterOnly.setDescription('This object indicate if PTP Port is master only.')
f3PtpPTPPortIsProbingSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 30), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPPortIsProbingSlave.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortIsProbingSlave.setDescription('This object indicate if PTP Port is probing slave.')
f3PtpPTPPortPeerClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortPeerClockClass.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortPeerClockClass.setDescription('This object specify PTP Port peer clock class.')
f3PtpPTPPortMinimumExpectedClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPPortMinimumExpectedClockClass.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortMinimumExpectedClockClass.setDescription('Note: This value is only applicable for a dynamic or slave port that is \n     related to a PTP clock, either a boundary clock or slave clock. \n     Otherwise, this field is not applicable (N/A) and cannot be configured.  \n\n     This object allows setting the minimum expected clock class value,\n     which setes the minimum threshold for receiving packets.\n     if the received clock clock class is greater than the expected\n     clock class value, the packets for the grandmaster or boundary clock that\n     are sending this clock class are dropped.\n     In addition, an alarm called clock-class-mismatch is generated. The default is 247.')
f3PtpPTPPortDelayAsymmetryComp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 33), CompensationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPPortDelayAsymmetryComp.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortDelayAsymmetryComp.setDescription('This object allows configuration of asymmetry delay\n        compensation mode for L2 PTP slave on OSA540X.')
f3PtpPTPPortAutoAsymmetryCompStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 34), CompensationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortAutoAsymmetryCompStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortAutoAsymmetryCompStatus.setDescription('This object provides the automatic delay asymmetry \n        compensation status for L2 PTP slave on OSA540X.')
f3PtpPTPPortDelayAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPPortDelayAsymmetry.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortDelayAsymmetry.setDescription('This object is used for manual configuration of delay asymmetry\n        in ns if delay asymmetry compensation is Manual.\n        Or for indication of the measured delay asymmetry if\n        delay asymmetry compensation is automatic.')
f3PtpPTPPortVirtualPortCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 36), ToggleValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPPortVirtualPortCtrl.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortVirtualPortCtrl.setDescription('This object indicate if PTP Port is virtual.')
f3PtpPTPPortDelayResponderType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 37), MasterClockType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpPTPPortDelayResponderType.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortDelayResponderType.setDescription('This object allows specification of the Delay Responder Type for the \n           PTP Port.')
f3PtpPTPPortTimeTraceable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 38), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortTimeTraceable.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortTimeTraceable.setDescription('This object indicate the Time Traceable for the \n           PTP Port.')
f3PtpPTPPortFrequencyTraceable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 20, 1, 39), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortFrequencyTraceable.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortFrequencyTraceable.setDescription('This object indicate the Frequency Traceable for the \n           PTP Port.')
f3PtpL2DynamicRemoteSlaveTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 21), )
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlaveTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlaveTable.setDescription('A list of entries corresponding L2 dynamic remote slaves.')
f3PtpL2DynamicRemoteSlaveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 21, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockIndex"), (0, "F3-PTP-MIB", "f3PtpPTPPortIndex"), (0, "F3-PTP-MIB", "f3PtpL2DynamicRemoteSlaveIndex"))
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlaveEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlaveEntry.setDescription('An entry containing information applicable to a particular\n             L2 Dynamic Remote Slave entity.')
f3PtpL2DynamicRemoteSlaveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 21, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlaveIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlaveIndex.setDescription('Unique index value associated with the Remote Slave.')
f3PtpL2DynamicRemoteSlavePortIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 21, 1, 2), PortIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlavePortIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlavePortIdentity.setDescription('This object represents the Port Identity of the L2 Remote Slave.')
f3PtpL2DynamicRemoteSlaveMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 21, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlaveMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlaveMacAddress.setDescription('This object allows specification of the Mac Address of\n          the L2 Remote Slave.')
f3PtpL2DynamicRemoteSlaveRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 21, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlaveRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlaveRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpL2DynamicRemoteSlaveRowStatus supported is\n            destroy(6).  \n\n            The f3PtpL2DynamicRemoteSlaveRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpL2DynamicRemoteSlaveStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 21, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlaveStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlaveStorageType.setDescription('The type of storage configured for this entry.')
f3PtpL2DynamicRemoteSlaveClockIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 21, 1, 6), ClockIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlaveClockIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpL2DynamicRemoteSlaveClockIdentity.setDescription('L2 Dynamic Remote Slave Clock Identity for this entry.')
f3PtpMCIProtGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 22), )
if mibBuilder.loadTexts: f3PtpMCIProtGroupTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIProtGroupTable.setDescription('A list of entries corresponding to the MCI Protection Groups.\n             ')
f3PtpMCIProtGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 22, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpMCIProtGroupIndex"))
if mibBuilder.loadTexts: f3PtpMCIProtGroupEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIProtGroupEntry.setDescription('An entry containing information applicable to a PTP MCI\n             Protection Group.')
f3PtpMCIProtGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIProtGroupIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIProtGroupIndex.setDescription('Unique index value associated with the PTP MCI Protection Group\n          entity.')
f3PtpMCIProtGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 22, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpMCIProtGroupAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIProtGroupAdminState.setDescription('This object represents the Administrative State of the PTP MCI\n          Protection Group.')
f3PtpMCIProtGroupActiveMember = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 22, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIProtGroupActiveMember.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIProtGroupActiveMember.setDescription('The corresponding OID of the Active Member in the PTP MCI Protection Group.')
f3PtpMCIProtGroupLastSwitchOverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 22, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIProtGroupLastSwitchOverTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIProtGroupLastSwitchOverTime.setDescription('The value of sysUpTime when last switch over occurred.')
f3PtpMCIProtGroupLastSwitchOverReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 22, 1, 5), CmGenPgSwitchoverReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIProtGroupLastSwitchOverReason.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIProtGroupLastSwitchOverReason.setDescription('The reason for last switch over in the PTP MCI Protection Group.')
f3PtpMCIProtGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 22, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIProtGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIProtGroupStorageType.setDescription('The type of storage configured for this entry.')
f3PtpMCIProtGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 22, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIProtGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIProtGroupRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpMCIProtGroupRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpMCIProtGroupRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpMCIProtGroupRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpMCIProtMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 23), )
if mibBuilder.loadTexts: f3PtpMCIProtMemberTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIProtMemberTable.setDescription('A list of entries for the Ptp MCI Protection Group Members.')
f3PtpMCIProtMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 23, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpMCIProtGroupIndex"), (0, "F3-PTP-MIB", "f3PtpMCIProtMemberObject"))
if mibBuilder.loadTexts: f3PtpMCIProtMemberEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIProtMemberEntry.setDescription('A conceptual row in the f3PtpMCIProtMemberTable.')
f3PtpMCIProtMemberObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 23, 1, 1), VariablePointer())
if mibBuilder.loadTexts: f3PtpMCIProtMemberObject.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIProtMemberObject.setDescription('This object points to the Protection Group Member.')
f3PtpMCIProtMemberStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 23, 1, 2), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIProtMemberStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIProtMemberStorageType.setDescription('The type of storage configured for this entry.')
f3PtpMCIProtMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 23, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpMCIProtMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIProtMemberRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n    \n            The values of f3PtpMCIProtMemberRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpMCIProtMemberRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n    \n            The f3PtpMCIProtMemberRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpTrafficPortFlowPointExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 24), )
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointExtTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointExtTable.setDescription('This table extends f3PtpTrafficPortFlowPointTable.')
f3PtpTrafficPortFlowPointExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 24, 1), )
f3PtpTrafficPortFlowPointEntry.registerAugmentions(("F3-PTP-MIB", "f3PtpTrafficPortFlowPointExtEntry"))
f3PtpTrafficPortFlowPointExtEntry.setIndexNames(*f3PtpTrafficPortFlowPointEntry.getIndexNames())
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointExtEntry.setDescription('A conceptual row in the f3PtpTrafficPortFlowPointExtTable.')
f3PtpTrafficPortFlowPointBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 24, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointBufferSize.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointBufferSize.setDescription("This object allows configuring the buffer size for the\n         PTP FlowPoint's bandwidth profile. The default value is 16KB.")
f3PtpL3PTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25), )
if mibBuilder.loadTexts: f3PtpL3PTPPortTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortTable.setDescription('A list of entries corresponding to the L3 PTP Port entities.')
f3PtpL3PTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockIndex"), (0, "F3-PTP-MIB", "f3PtpL3PTPPortIndex"))
if mibBuilder.loadTexts: f3PtpL3PTPPortEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortEntry.setDescription('An entry containing information applicable to a particular\n           L3 PTP Port Entity.')
f3PtpL3PTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PtpL3PTPPortIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortIndex.setDescription('Unique index value associated with the L3 PTP Port Entity.')
f3PtpL3PTPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortAdminState.setDescription('This object represents the Administrative State of the L3 PTP Port.')
f3PtpL3PTPPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortAlias.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the L3 PTP Port entity.')
f3PtpL3PTPPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortOperationalState.setDescription('This object represents the Operational State of the L3 PTP Port.')
f3PtpL3PTPPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortSecondaryState.setDescription('This object represents the Secondary State of the L3 PTP Port.')
f3PtpL3PTPPortPortIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 6), PortIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortPortIdentity.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortPortIdentity.setDescription('This object specifies the Port Identity of the L3 PTP Port.')
f3PtpL3PTPPortLocalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortLocalPriority.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortLocalPriority.setDescription('This object allows configuration of  local priority used by the L3 PTP Port.')
f3PtpL3PTPPortPtpFlowPointEid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 8), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortPtpFlowPointEid.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortPtpFlowPointEid.setDescription('This object associates the PTP Flow Point Eid.')
f3PtpL3PTPPortSyncMessageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 9), SyncMessageRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortSyncMessageRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortSyncMessageRate.setDescription('This object allows specification of the L3 PTP Port Sync \n         Message Rate.')
f3PtpL3PTPPortDelayReqRespMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 10), DelayReqMessageRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortDelayReqRespMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortDelayReqRespMsgRate.setDescription('This object allows specification of the L3 PTP Port Delay Response \n         Message Rate.')
f3PtpL3PTPPortAnnounceMsgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 11), AnnounceMessageRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortAnnounceMsgRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortAnnounceMsgRate.setDescription('This object allows specification of the L3 PTP Port Announce Message Rate.')
f3PtpL3PTPPortAnnounceReceiptTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortAnnounceReceiptTimeout.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortAnnounceReceiptTimeout.setDescription('This object allows specification of the L3 PTP Port Announce Message \n         Receipt Timeout.')
f3PtpL3PTPPortSyncReceiptTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortSyncReceiptTimeout.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortSyncReceiptTimeout.setDescription('This object allows specification of the L3 PTP Port Sync Message \n         Receipt Timeout.')
f3PtpL3PTPPortDelayRespTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortDelayRespTimeout.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortDelayRespTimeout.setDescription('This object allows specification of the L3 PTP Port Delay Response \n         Message Receipt Timeout.')
f3PtpL3PTPPortPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 15), PtpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortPortState.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortPortState.setDescription('This object provides the L3 PTP Port state.')
f3PtpL3PTPPortBmcaDecisionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 16), BMCARole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortBmcaDecisionCode.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortBmcaDecisionCode.setDescription('This object provides the L3 PTP Port BMCA Role')
f3PtpL3PTPPortPeerClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortPeerClockClass.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortPeerClockClass.setDescription('This object specify L3 PTP Port class.')
f3PtpL3PTPPortMinimumExpectedClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortMinimumExpectedClockClass.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortMinimumExpectedClockClass.setDescription('Note: This value is only applicable for a dynamic or slave port that is \n     related to a PTP clock, either a boundary clock or slave clock. \n     Otherwise, this field is not applicable (N/A) and cannot be configured.  \n\n     This object allows setting the minimum expected clock class value,\n     which setes the minimum threshold for receiving packets.\n     if the received clock clock class is greater than the expected\n     clock class value, the packets for the grandmaster or boundary clock that\n     are sending this clock class are dropped.\n     In addition, an alarm called clock-class-mismatch is generated. The default is 247.')
f3PtpL3PTPPortIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 19), IpVersion()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortIpProtocol.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortIpProtocol.setDescription('This object allows specification of the IP Protocol of the L3 PTP Port.')
f3PtpL3PTPPortIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortIfName.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortIfName.setDescription('This object allows SNMP management entities to provide a\n          name to the L3 PTP Port IP interface.')
f3PtpL3PTPPortIpPriorityMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 21), IpPriorityMapMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortIpPriorityMapMode.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortIpPriorityMapMode.setDescription('This object enables specification of Priority Mapping Mode for\n          the  L3 PTP Port IP interface.')
f3PtpL3PTPPortIpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortIpPriority.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortIpPriority.setDescription('This object enables specification of Priority Value for the\n          L3 PTP Port IP interface.')
f3PtpL3PTPPortIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 23), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortIpV4Address.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortIpV4Address.setDescription('This object allows specification of the IPv4 Address of\n          the L3 PTP Port IP interface.')
f3PtpL3PTPPortIpV4SubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 24), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortIpV4SubnetMask.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortIpV4SubnetMask.setDescription('This object allows specification of the IPv4 Subnet Mask of\n          the L3 PTP Port IP interface.')
f3PtpL3PTPPortIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 25), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortIpV6Address.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortIpV6Address.setDescription('This object allows specification of the unicast ipv6 Address of\n          the L3 PTP Port IP interface.')
f3PtpL3PTPPortIpV6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 26), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortIpV6AddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortIpV6AddrPrefixLength.setDescription('This object allows specification of the unicast IPv6 address prefix length of\n          the L3 PTP Port IP interface.')
f3PtpL3PTPPortDefaultGatewayControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 27), ToggleValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortDefaultGatewayControl.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortDefaultGatewayControl.setDescription('This attribute control Gateway address for the L3 PTP Port IP interface.')
f3PtpL3PTPPortGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 28), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortGateway.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortGateway.setDescription('This object allows specification of the IPv4 Gateway Address of\n          the L3 PTP Port IP interface.')
f3PtpL3PTPPortIpV6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 29), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortIpV6Gateway.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortIpV6Gateway.setDescription('This object allows specification of the IPv6 Gateway Address of\n          the L3 PTP Port IP interface.')
f3PtpL3PTPPortUnicastMessageNegEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 30), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortUnicastMessageNegEnabled.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortUnicastMessageNegEnabled.setDescription('This object must be used to specify whether Unicast Message\n          Negotiation is enabled for the L3 PTP Port.')
f3PtpL3PTPPortTransmitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortTransmitDuration.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortTransmitDuration.setDescription('This object specifices Duration Field in the REQUEST_UNICAST_TRANSMISSION_TLV.')
f3PtpL3PTPPortRequestUnicastTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortRequestUnicastTimeout.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortRequestUnicastTimeout.setDescription('This object allows specification of the Request Unicast \n         Timeout in seconds.  Unicast transmission is termed as\n         failed when this timeout occurs.')
f3PtpL3PTPPortRequestUnicastRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortRequestUnicastRestartTimer.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortRequestUnicastRestartTimer.setDescription('This object allows specification of the time (in seconds) to wait\n         to restart the Request Unicast signalling.')
f3PtpL3PTPPortMasterIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 34), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortMasterIpV4Address.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortMasterIpV4Address.setDescription('This object allows specification of the IPv4 Address of\n          the PTP Master.')
f3PtpL3PTPPortMasterIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 35), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortMasterIpV6Address.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortMasterIpV6Address.setDescription('This object allows specification of the unicast ipv6 Address of\n          the PTP Master.')
f3PtpL3PTPPortDelayAsymmetryComp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 36), CompensationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortDelayAsymmetryComp.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortDelayAsymmetryComp.setDescription('This object allows configuration of asymmetry delay\n        compensation mode.')
f3PtpL3PTPPortAutoAsymmetryCompStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 37), CompensationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortAutoAsymmetryCompStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortAutoAsymmetryCompStatus.setDescription('This object provides the automatic delay asymmetry \n        compensation status.')
f3PtpL3PTPPortDelayAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000000, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortDelayAsymmetry.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortDelayAsymmetry.setDescription('This object is used for manual configuration of delay asymmetry\n        in ns if delay asymmetry compensation is Manual.\n        Or for indication of the measured delay asymmetry if\n        delay asymmetry compensation is automatic.')
f3PtpL3PTPPortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 39), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStorageType.setDescription('The type of storage configured for this entry.')
f3PtpL3PTPPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 1, 25, 1, 40), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PtpL3PTPPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3PtpPTPPortRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3PtpPTPPortRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3PtpPTPPortRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PtpAccPortFlowPointStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1), )
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsTable.setDescription('A collection of Access Port PTP Flow Point statistics.  \n             These reflect the current data.')
f3PtpAccPortFlowPointStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-PTP-MIB", "f3PtpAccPortFlowPointIndex"), (0, "F3-PTP-MIB", "f3PtpAccPortFlowPointStatsIndex"))
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsEntry.setDescription('A conceptual row in the f3PtpAccPortFlowPointStatsTable.\n             Entries exist in this table for each Access Port Flow Point.')
f3PtpAccPortFlowPointStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Access Port PTP Flow Point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3PtpAccPortFlowPointStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3PtpAccPortFlowPointStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsValid.setDescription('Indicates the validity of the bin.')
f3PtpAccPortFlowPointStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsAction.setDescription('Allows the Manager to clear the bin.')
f3PtpAccPortFlowPointStatsAnnouncesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsAnnouncesRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsAnnouncesRx.setDescription('Number of PTP Announce messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsAnnouncesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsAnnouncesTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsAnnouncesTx.setDescription('Number of Announce Messages transmitted on the PTP Flow Point.\n          This object is applicable for transparent clocks.')
f3PtpAccPortFlowPointStatsSyncsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsSyncsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsSyncsRx.setDescription('Number of Sync Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsSyncsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsSyncsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsSyncsTx.setDescription('Number of Sync Messages transmitted on the PTP Flow Point.\n          This object is applicable for transparent clocks.')
f3PtpAccPortFlowPointStatsFollowupsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsFollowupsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsFollowupsRx.setDescription('Number of Follow up Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsFollowupsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsFollowupsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsFollowupsTx.setDescription('Number of Follow up Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsDelayReqsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsDelayReqsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsDelayReqsRx.setDescription('Number of Delay Request Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsDelayReqsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsDelayReqsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsDelayReqsTx.setDescription('Number of Delay Request Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsDelayRspsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsDelayRspsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsDelayRspsRx.setDescription('Number of Delay Response Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsDelayRspsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsDelayRspsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsDelayRspsTx.setDescription('Number of Delay Response Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsPDelayReqsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPDelayReqsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPDelayReqsRx.setDescription('Number of Peer Delay Request Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsPDelayReqsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPDelayReqsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPDelayReqsTx.setDescription('Number of Peer Delay Request Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsPDelayRspsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPDelayRspsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPDelayRspsRx.setDescription('Number of Peer Delay Response Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsPDelayRspsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPDelayRspsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPDelayRspsTx.setDescription('Number of Peer Delay Response Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsPDelayRspFollowupsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPDelayRspFollowupsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPDelayRspFollowupsRx.setDescription('Number of Peer Delay Response Followup Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsPDelayRspFollowupsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPDelayRspFollowupsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPDelayRspFollowupsTx.setDescription('Number of Peer Delay Response Followup Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsSignalingRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsSignalingRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsSignalingRx.setDescription('Number of PTP Signaling Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsSignalingTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsSignalingTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsSignalingTx.setDescription('Number of PTP Signaling Messages Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsMgmtFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMgmtFramesRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMgmtFramesRx.setDescription('Number of PTP Management Frames received on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsMgmtFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMgmtFramesTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMgmtFramesTx.setDescription('Number of PTP Management Frames Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsPtpUnknownsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPtpUnknownsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPtpUnknownsRx.setDescription('Number of Unknown PTP Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsPtpUnknownsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPtpUnknownsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsPtpUnknownsTx.setDescription('Number of Unknown PTP Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointStatsMinSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMinSyncResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMinSyncResTime.setDescription('The minimum residence time for PTP Sync messages.')
f3PtpAccPortFlowPointStatsMaxSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMaxSyncResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMaxSyncResTime.setDescription('The maximum residence time for PTP Sync messages.')
f3PtpAccPortFlowPointStatsAvgSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsAvgSyncResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsAvgSyncResTime.setDescription('The average residence time for PTP Sync messages.')
f3PtpAccPortFlowPointStatsMinDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMinDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMinDelayReqResTime.setDescription('The minimum residence time for PTP Delay Request messages.')
f3PtpAccPortFlowPointStatsMaxDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMaxDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMaxDelayReqResTime.setDescription('The maximum residence time for PTP Delay Request messages.')
f3PtpAccPortFlowPointStatsAvgDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsAvgDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsAvgDelayReqResTime.setDescription('The average residence time for PTP Delay Request messages.')
f3PtpAccPortFlowPointStatsMinPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMinPDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMinPDelayReqResTime.setDescription('The minimum residence time for PTP Peer Delay Request messages.')
f3PtpAccPortFlowPointStatsMaxPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMaxPDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMaxPDelayReqResTime.setDescription('The maximum residence time for PTP Peer Delay Request messages.')
f3PtpAccPortFlowPointStatsAvgPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsAvgPDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsAvgPDelayReqResTime.setDescription('The average residence time for PTP Peer Delay Request messages.')
f3PtpAccPortFlowPointStatsMinPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMinPDelayRspResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMinPDelayRspResTime.setDescription('The minimum residence time for PTP Peer Delay Response messages.')
f3PtpAccPortFlowPointStatsMaxPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMaxPDelayRspResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsMaxPDelayRspResTime.setDescription('The maximum residence time for PTP Peer Delay Response messages.')
f3PtpAccPortFlowPointStatsAvgPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsAvgPDelayRspResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsAvgPDelayRspResTime.setDescription('The average residence time for PTP Peer Delay Response messages.')
f3PtpAccPortFlowPointStatsDestMciNoMatchDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 39), PerfCounter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsDestMciNoMatchDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsDestMciNoMatchDiscards.setDescription('The dest MCI no match discards messages.')
f3PtpAccPortFlowPointStatsTagNoMatchDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 1, 1, 40), PerfCounter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsTagNoMatchDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointStatsTagNoMatchDiscards.setDescription('The tag no match discards messages.')
f3PtpAccPortFlowPointHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2), )
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryTable.setDescription('A collection of Access Port PTP Flow Point history statistics.  \n             These reflect the history data.')
f3PtpAccPortFlowPointHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-PTP-MIB", "f3PtpAccPortFlowPointIndex"), (0, "F3-PTP-MIB", "f3PtpAccPortFlowPointStatsIndex"), (0, "F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryIndex"))
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryEntry.setDescription('A conceptual row in the f3PtpAccPortFlowPointHistoryTable.\n             Entries exist in this table for each Access Port Flow Point.')
f3PtpAccPortFlowPointHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Ethernet Access Port PTP Flow point PM history entry.')
f3PtpAccPortFlowPointHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryTime.setDescription('Indicates the time of history bin creation.')
f3PtpAccPortFlowPointHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryValid.setDescription('Indicates the validity of the bin.')
f3PtpAccPortFlowPointHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3PtpAccPortFlowPointHistoryAnnouncesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryAnnouncesRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryAnnouncesRx.setDescription('Number of PTP Announce messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryAnnouncesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryAnnouncesTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryAnnouncesTx.setDescription('Number of Announce Messages transmitted on the PTP Flow Point.\n          This object is applicable for transparent clocks.')
f3PtpAccPortFlowPointHistorySyncsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistorySyncsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistorySyncsRx.setDescription('Number of Sync Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointHistorySyncsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistorySyncsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistorySyncsTx.setDescription('Number of Sync Messages transmitted on the PTP Flow Point.\n          This object is applicable for transparent clocks.')
f3PtpAccPortFlowPointHistoryFollowupsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryFollowupsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryFollowupsRx.setDescription('Number of Follow up Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryFollowupsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryFollowupsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryFollowupsTx.setDescription('Number of Follow up Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryDelayReqsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryDelayReqsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryDelayReqsRx.setDescription('Number of Delay Request Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryDelayReqsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryDelayReqsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryDelayReqsTx.setDescription('Number of Delay Request Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryDelayRspsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryDelayRspsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryDelayRspsRx.setDescription('Number of Delay Response Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryDelayRspsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryDelayRspsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryDelayRspsTx.setDescription('Number of Delay Response Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryPDelayReqsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPDelayReqsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPDelayReqsRx.setDescription('Number of Peer Delay Request Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryPDelayReqsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPDelayReqsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPDelayReqsTx.setDescription('Number of Peer Delay Request Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryPDelayRspsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPDelayRspsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPDelayRspsRx.setDescription('Number of Peer Delay Response Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryPDelayRspsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPDelayRspsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPDelayRspsTx.setDescription('Number of Peer Delay Response Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryPDelayRspFollowupsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPDelayRspFollowupsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPDelayRspFollowupsRx.setDescription('Number of Peer Delay Response Followup Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryPDelayRspFollowupsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPDelayRspFollowupsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPDelayRspFollowupsTx.setDescription('Number of Peer Delay Response Followup Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointHistorySignalingRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistorySignalingRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistorySignalingRx.setDescription('Number of PTP Signaling Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointHistorySignalingTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistorySignalingTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistorySignalingTx.setDescription('Number of PTP Signaling Messages Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryMgmtFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMgmtFramesRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMgmtFramesRx.setDescription('Number of PTP Management Frames received on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryMgmtFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMgmtFramesTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMgmtFramesTx.setDescription('Number of PTP Management Frames Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryPtpUnknownsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPtpUnknownsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPtpUnknownsRx.setDescription('Number of Unknown PTP Messages received on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryPtpUnknownsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPtpUnknownsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryPtpUnknownsTx.setDescription('Number of Unknown PTP Messages transmitted on the PTP Flow Point.')
f3PtpAccPortFlowPointHistoryMinSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMinSyncResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMinSyncResTime.setDescription('The minimum residence time for PTP Sync messages.')
f3PtpAccPortFlowPointHistoryMaxSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMaxSyncResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMaxSyncResTime.setDescription('The maximum residence time for PTP Sync messages.')
f3PtpAccPortFlowPointHistoryAvgSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryAvgSyncResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryAvgSyncResTime.setDescription('The average residence time for PTP Sync messages.')
f3PtpAccPortFlowPointHistoryMinDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMinDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMinDelayReqResTime.setDescription('The minimum residence time for PTP Delay Request messages.')
f3PtpAccPortFlowPointHistoryMaxDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMaxDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMaxDelayReqResTime.setDescription('The maximum residence time for PTP Delay Request messages.')
f3PtpAccPortFlowPointHistoryAvgDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryAvgDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryAvgDelayReqResTime.setDescription('The average residence time for PTP Delay Request messages.')
f3PtpAccPortFlowPointHistoryMinPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMinPDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMinPDelayReqResTime.setDescription('The minimum residence time for PTP Peer Delay Request messages.')
f3PtpAccPortFlowPointHistoryMaxPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMaxPDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMaxPDelayReqResTime.setDescription('The maximum residence time for PTP Peer Delay Request messages.')
f3PtpAccPortFlowPointHistoryAvgPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryAvgPDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryAvgPDelayReqResTime.setDescription('The average residence time for PTP Peer Delay Request messages.')
f3PtpAccPortFlowPointHistoryMinPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMinPDelayRspResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMinPDelayRspResTime.setDescription('The minimum residence time for PTP Peer Delay Response messages.')
f3PtpAccPortFlowPointHistoryMaxPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMaxPDelayRspResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryMaxPDelayRspResTime.setDescription('The maximum residence time for PTP Peer Delay Response messages.')
f3PtpAccPortFlowPointHistoryAvgPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryAvgPDelayRspResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryAvgPDelayRspResTime.setDescription('The average residence time for PTP Peer Delay Response messages.')
f3PtpAccPortFlowPointHistoryDestMciNoMatchDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 39), PerfCounter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryDestMciNoMatchDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryDestMciNoMatchDiscards.setDescription('The dest MCI no match discards messages.')
f3PtpAccPortFlowPointHistoryTagNoMatchDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 2, 1, 40), PerfCounter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryTagNoMatchDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointHistoryTagNoMatchDiscards.setDescription('The tag no match discards messages.')
f3PtpAccPortFlowPointThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 3), )
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdTable.setDescription('A table of entries that allow manageability of Access Port PTP Flow Point\n             Thresholds.')
f3PtpAccPortFlowPointThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "F3-PTP-MIB", "f3PtpAccPortFlowPointIndex"), (0, "F3-PTP-MIB", "f3PtpAccPortFlowPointStatsIndex"), (0, "F3-PTP-MIB", "f3PtpAccPortFlowPointThresholdIndex"))
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdEntry.setDescription('A conceptual row in the f3PtpAccPortFlowPointThresholdTable.')
f3PtpAccPortFlowPointThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3PtpAccPortFlowPointThresholdTable.')
f3PtpAccPortFlowPointThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 3, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3PtpAccPortFlowPointThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 3, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3PtpAccPortFlowPointThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3PtpAccPortFlowPointThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3PtpAccPortFlowPointThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 3, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdMonValue.setDescription('Monitored value corresponding to f3PtpAccPortFlowPointThresholdVariable.')
f3PtpNetPortFlowPointStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4), )
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsTable.setDescription('A collection of Network Port PTP Flow Point statistics.  \n             These reflect the current data.')
f3PtpNetPortFlowPointStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-PTP-MIB", "f3PtpNetPortFlowPointIndex"), (0, "F3-PTP-MIB", "f3PtpNetPortFlowPointStatsIndex"))
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsEntry.setDescription('A conceptual row in the f3PtpNetPortFlowPointStatsTable.\n             Entries exist in this table for each Network Port Flow Point.')
f3PtpNetPortFlowPointStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Network Port PTP Flow Point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3PtpNetPortFlowPointStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3PtpNetPortFlowPointStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsValid.setDescription('Indicates the validity of the bin.')
f3PtpNetPortFlowPointStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsAction.setDescription('Allows the Manager to clear the bin.')
f3PtpNetPortFlowPointStatsAnnouncesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsAnnouncesRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsAnnouncesRx.setDescription('Number of PTP Announce messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsAnnouncesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsAnnouncesTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsAnnouncesTx.setDescription('Number of Announce Messages transmitted on the PTP Flow Point.\n          This object is applicable for transparent clocks.')
f3PtpNetPortFlowPointStatsSyncsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsSyncsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsSyncsRx.setDescription('Number of Sync Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsSyncsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsSyncsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsSyncsTx.setDescription('Number of Sync Messages transmitted on the PTP Flow Point.\n          This object is applicable for transparent clocks.')
f3PtpNetPortFlowPointStatsFollowupsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsFollowupsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsFollowupsRx.setDescription('Number of Follow up Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsFollowupsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsFollowupsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsFollowupsTx.setDescription('Number of Follow up Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsDelayReqsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsDelayReqsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsDelayReqsRx.setDescription('Number of Delay Request Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsDelayReqsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsDelayReqsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsDelayReqsTx.setDescription('Number of Delay Request Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsDelayRspsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsDelayRspsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsDelayRspsRx.setDescription('Number of Delay Response Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsDelayRspsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsDelayRspsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsDelayRspsTx.setDescription('Number of Delay Response Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsPDelayReqsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPDelayReqsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPDelayReqsRx.setDescription('Number of Peer Delay Request Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsPDelayReqsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPDelayReqsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPDelayReqsTx.setDescription('Number of Peer Delay Request Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsPDelayRspsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPDelayRspsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPDelayRspsRx.setDescription('Number of Peer Delay Response Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsPDelayRspsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPDelayRspsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPDelayRspsTx.setDescription('Number of Peer Delay Response Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsPDelayRspFollowupsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPDelayRspFollowupsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPDelayRspFollowupsRx.setDescription('Number of Peer Delay Response Followup Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsPDelayRspFollowupsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPDelayRspFollowupsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPDelayRspFollowupsTx.setDescription('Number of Peer Delay Response Followup Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsSignalingRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsSignalingRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsSignalingRx.setDescription('Number of PTP Signaling Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsSignalingTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsSignalingTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsSignalingTx.setDescription('Number of PTP Signaling Messages Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsMgmtFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMgmtFramesRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMgmtFramesRx.setDescription('Number of PTP Management Frames received on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsMgmtFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMgmtFramesTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMgmtFramesTx.setDescription('Number of PTP Management Frames Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsPtpUnknownsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPtpUnknownsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPtpUnknownsRx.setDescription('Number of Unknown PTP Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsPtpUnknownsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPtpUnknownsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsPtpUnknownsTx.setDescription('Number of Unknown PTP Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointStatsAvgSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsAvgSyncResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsAvgSyncResTime.setDescription('The average residence time for PTP Sync messages.')
f3PtpNetPortFlowPointStatsMinSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMinSyncResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMinSyncResTime.setDescription('The minimum residence time for PTP Sync messages.')
f3PtpNetPortFlowPointStatsMaxSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMaxSyncResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMaxSyncResTime.setDescription('The maximum residence time for PTP Sync messages.')
f3PtpNetPortFlowPointStatsAvgDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsAvgDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsAvgDelayReqResTime.setDescription('The average residence time for PTP Delay Request messages.')
f3PtpNetPortFlowPointStatsMinDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMinDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMinDelayReqResTime.setDescription('The minimum residence time for PTP Delay Request messages.')
f3PtpNetPortFlowPointStatsMaxDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMaxDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMaxDelayReqResTime.setDescription('The maximum residence time for PTP Delay Request messages.')
f3PtpNetPortFlowPointStatsMinPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMinPDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMinPDelayReqResTime.setDescription('The minimum residence time for PTP Peer Delay Request messages.')
f3PtpNetPortFlowPointStatsMaxPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMaxPDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMaxPDelayReqResTime.setDescription('The maximum residence time for PTP Peer Delay Request messages.')
f3PtpNetPortFlowPointStatsAvgPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsAvgPDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsAvgPDelayReqResTime.setDescription('The average residence time for PTP Peer Delay Request messages.')
f3PtpNetPortFlowPointStatsMinPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMinPDelayRspResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMinPDelayRspResTime.setDescription('The minimum residence time for PTP Peer Delay Response messages.')
f3PtpNetPortFlowPointStatsMaxPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMaxPDelayRspResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsMaxPDelayRspResTime.setDescription('The maximum residence time for PTP Peer Delay Response messages.')
f3PtpNetPortFlowPointStatsAvgPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsAvgPDelayRspResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsAvgPDelayRspResTime.setDescription('The average residence time for PTP Peer Delay Response messages.')
f3PtpNetPortFlowPointStatsDestMciNoMatchDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 39), PerfCounter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsDestMciNoMatchDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsDestMciNoMatchDiscards.setDescription('The dest MCI no match discards messages.')
f3PtpNetPortFlowPointStatsTagNoMatchDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 4, 1, 40), PerfCounter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsTagNoMatchDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointStatsTagNoMatchDiscards.setDescription('The tag no match discards messages.')
f3PtpNetPortFlowPointHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5), )
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryTable.setDescription('A collection of Network Port PTP Flow Point history statistics.  \n             These reflect the history data.')
f3PtpNetPortFlowPointHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-PTP-MIB", "f3PtpNetPortFlowPointIndex"), (0, "F3-PTP-MIB", "f3PtpNetPortFlowPointStatsIndex"), (0, "F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryIndex"))
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryEntry.setDescription('A conceptual row in the f3PtpNetPortFlowPointHistoryTable.\n             Entries exist in this table for each Network Port Flow Point.')
f3PtpNetPortFlowPointHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Ethernet Network Port PTP Flow point PM history entry.')
f3PtpNetPortFlowPointHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryTime.setDescription('Indicates the time of history bin creation.')
f3PtpNetPortFlowPointHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryValid.setDescription('Indicates the validity of the bin.')
f3PtpNetPortFlowPointHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3PtpNetPortFlowPointHistoryAnnouncesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryAnnouncesRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryAnnouncesRx.setDescription('Number of PTP Announce messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryAnnouncesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryAnnouncesTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryAnnouncesTx.setDescription('Number of Announce Messages transmitted on the PTP Flow Point.\n          This object is applicable for transparent clocks.')
f3PtpNetPortFlowPointHistorySyncsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistorySyncsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistorySyncsRx.setDescription('Number of Sync Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointHistorySyncsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistorySyncsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistorySyncsTx.setDescription('Number of Sync Messages transmitted on the PTP Flow Point.\n          This object is applicable for transparent clocks.')
f3PtpNetPortFlowPointHistoryFollowupsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryFollowupsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryFollowupsRx.setDescription('Number of Follow up Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryFollowupsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryFollowupsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryFollowupsTx.setDescription('Number of Follow up Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryDelayReqsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryDelayReqsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryDelayReqsRx.setDescription('Number of Delay Request Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryDelayReqsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryDelayReqsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryDelayReqsTx.setDescription('Number of Delay Request Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryDelayRspsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryDelayRspsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryDelayRspsRx.setDescription('Number of Delay Response Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryDelayRspsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryDelayRspsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryDelayRspsTx.setDescription('Number of Delay Response Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryPDelayReqsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPDelayReqsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPDelayReqsRx.setDescription('Number of Peer Delay Request Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryPDelayReqsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPDelayReqsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPDelayReqsTx.setDescription('Number of Peer Delay Request Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryPDelayRspsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPDelayRspsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPDelayRspsRx.setDescription('Number of Peer Delay Response Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryPDelayRspsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPDelayRspsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPDelayRspsTx.setDescription('Number of Peer Delay Response Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryPDelayRspFollowupsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPDelayRspFollowupsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPDelayRspFollowupsRx.setDescription('Number of Peer Delay Response Followup Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryPDelayRspFollowupsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPDelayRspFollowupsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPDelayRspFollowupsTx.setDescription('Number of Peer Delay Response Followup Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointHistorySignalingRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistorySignalingRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistorySignalingRx.setDescription('Number of PTP Signaling Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointHistorySignalingTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistorySignalingTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistorySignalingTx.setDescription('Number of PTP Signaling Messages Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryMgmtFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMgmtFramesRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMgmtFramesRx.setDescription('Number of PTP Management Frames received on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryMgmtFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMgmtFramesTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMgmtFramesTx.setDescription('Number of PTP Management Frames Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryPtpUnknownsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPtpUnknownsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPtpUnknownsRx.setDescription('Number of Unknown PTP Messages received on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryPtpUnknownsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPtpUnknownsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryPtpUnknownsTx.setDescription('Number of Unknown PTP Messages transmitted on the PTP Flow Point.')
f3PtpNetPortFlowPointHistoryAvgSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryAvgSyncResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryAvgSyncResTime.setDescription('The average residence time for PTP Sync messages.')
f3PtpNetPortFlowPointHistoryMinSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMinSyncResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMinSyncResTime.setDescription('The minimum residence time for PTP Sync messages.')
f3PtpNetPortFlowPointHistoryMaxSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMaxSyncResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMaxSyncResTime.setDescription('The maximum residence time for PTP Sync messages.')
f3PtpNetPortFlowPointHistoryAvgDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryAvgDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryAvgDelayReqResTime.setDescription('The average residence time for PTP Delay Request messages.')
f3PtpNetPortFlowPointHistoryMinDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMinDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMinDelayReqResTime.setDescription('The minimum residence time for PTP Delay Request messages.')
f3PtpNetPortFlowPointHistoryMaxDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMaxDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMaxDelayReqResTime.setDescription('The maximum residence time for PTP Delay Request messages.')
f3PtpNetPortFlowPointHistoryMinPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMinPDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMinPDelayReqResTime.setDescription('The minimum residence time for PTP Peer Delay Request messages.')
f3PtpNetPortFlowPointHistoryMaxPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMaxPDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMaxPDelayReqResTime.setDescription('The maximum residence time for PTP Peer Delay Request messages.')
f3PtpNetPortFlowPointHistoryAvgPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryAvgPDelayReqResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryAvgPDelayReqResTime.setDescription('The average residence time for PTP Peer Delay Request messages.')
f3PtpNetPortFlowPointHistoryMinPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMinPDelayRspResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMinPDelayRspResTime.setDescription('The minimum residence time for PTP Peer Delay Response messages.')
f3PtpNetPortFlowPointHistoryMaxPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMaxPDelayRspResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryMaxPDelayRspResTime.setDescription('The maximum residence time for PTP Peer Delay Response messages.')
f3PtpNetPortFlowPointHistoryAvgPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryAvgPDelayRspResTime.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryAvgPDelayRspResTime.setDescription('The average residence time for PTP Peer Delay Response messages.')
f3PtpNetPortFlowPointHistoryDestMciNoMatchDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 39), PerfCounter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryDestMciNoMatchDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryDestMciNoMatchDiscards.setDescription('The dest MCI no match discards messages.')
f3PtpNetPortFlowPointHistoryTagNoMatchDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 5, 1, 40), PerfCounter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryTagNoMatchDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointHistoryTagNoMatchDiscards.setDescription('The Tag no match discards messages.')
f3PtpNetPortFlowPointThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 6), )
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdTable.setDescription('A table of entries that allow manageability of Access Port PTP Flow Point\n             Thresholds.')
f3PtpNetPortFlowPointThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "F3-PTP-MIB", "f3PtpNetPortFlowPointIndex"), (0, "F3-PTP-MIB", "f3PtpNetPortFlowPointStatsIndex"), (0, "F3-PTP-MIB", "f3PtpNetPortFlowPointThresholdIndex"))
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdEntry.setDescription('A conceptual row in the f3PtpNetPortFlowPointThresholdTable.')
f3PtpNetPortFlowPointThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3PtpNetPortFlowPointThresholdTable.')
f3PtpNetPortFlowPointThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 6, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3PtpNetPortFlowPointThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 6, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3PtpNetPortFlowPointThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3PtpNetPortFlowPointThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 6, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3PtpNetPortFlowPointThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 6, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdMonValue.setDescription('Monitored value corresponding to f3PtpNetPortFlowPointThresholdVariable.')
f3PtpSOOCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7), )
if mibBuilder.loadTexts: f3PtpSOOCStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsTable.setDescription('A collection of Slave Only Ordinary Clock related statistics.  \n             These reflect the current data.')
f3PtpSOOCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpTSIndex"), (0, "F3-PTP-MIB", "f3PtpSOOCIndex"), (0, "F3-PTP-MIB", "f3PtpSOOCStatsIndex"))
if mibBuilder.loadTexts: f3PtpSOOCStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsEntry.setDescription('A conceptual row in the f3PtpSOOCStatsTable.\n             Entries exist in this table for each Slave Only Ordinary Clock.')
f3PtpSOOCStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3PtpSOOCStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Slave Only Ordinary Clock statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3PtpSOOCStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3PtpSOOCStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsValid.setDescription('Indicates the validity of the bin.')
f3PtpSOOCStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsAction.setDescription('Allows the Manager to clear the bin.')
f3PtpSOOCStatsMinOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 5), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsMinOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsMinOffsetFromMaster.setDescription('Minimum Offset from Master')
f3PtpSOOCStatsMaxOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 6), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsMaxOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsMaxOffsetFromMaster.setDescription('Maximum Offset from Master')
f3PtpSOOCStatsAvgOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 7), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsAvgOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsAvgOffsetFromMaster.setDescription('Average Offset from Master')
f3PtpSOOCStatsMinMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 8), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsMinMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsMinMeanPathDelay.setDescription('The minimum mean path delay at the SOOC.')
f3PtpSOOCStatsMaxMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 9), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsMaxMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsMaxMeanPathDelay.setDescription('The maximum mean path delay at the SOOC.')
f3PtpSOOCStatsAvgMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 10), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsAvgMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsAvgMeanPathDelay.setDescription('The average mean path delay at the SOOC.')
f3PtpSOOCStatsMinSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 11), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsMinSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsMinSyncPathDelay.setDescription('The minimum mean path delay of Sync messages at the SOOC.')
f3PtpSOOCStatsMaxSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 12), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsMaxSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsMaxSyncPathDelay.setDescription('The maximum mean path delay of Sync messages at the SOOC.')
f3PtpSOOCStatsAvgSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 13), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsAvgSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsAvgSyncPathDelay.setDescription('The average mean path delay of Sync messages at the SOOC.')
f3PtpSOOCStatsMinSyncPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 14), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsMinSyncPDV.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsMinSyncPDV.setDescription('The minimum Sync message path delay variation at the SOOC.')
f3PtpSOOCStatsMaxSyncPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 15), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsMaxSyncPDV.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsMaxSyncPDV.setDescription('The maximum Sync message path delay variation at the SOOC.')
f3PtpSOOCStatsAvgSyncPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 16), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsAvgSyncPDV.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsAvgSyncPDV.setDescription('The average Sync message packet delay variation at the SOOC.')
f3PtpSOOCStatsMgmtMsgsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsMgmtMsgsDiscarded.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsMgmtMsgsDiscarded.setDescription('The number of PTP management messages discarded at the SOOC.')
f3PtpSOOCStatsInvalidMsgLenDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsInvalidMsgLenDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsInvalidMsgLenDiscards.setDescription('The number of messages discarded due to invalid message length at the SOOC.')
f3PtpSOOCStatsUnknownMasterDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsUnknownMasterDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsUnknownMasterDiscards.setDescription('The number of messages discard due to unknown Master at the SOOC.')
f3PtpSOOCStatsUnknownDomainDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsUnknownDomainDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsUnknownDomainDiscards.setDescription('The number of messages discard due to unknown domain at the SOOC.')
f3PtpSOOCStatsMulticastAnnounceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsMulticastAnnounceDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsMulticastAnnounceDiscards.setDescription('The number of multicast Announce message discards at the SOOC.')
f3PtpSOOCStatsOutOfSeqAnnounceMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsOutOfSeqAnnounceMsgs.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsOutOfSeqAnnounceMsgs.setDescription('The number of out-of-sequence Announce message discards at the SOOC.')
f3PtpSOOCStatsMulticastSyncDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsMulticastSyncDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsMulticastSyncDiscards.setDescription('The number of Multicast Sync discards at the SOOC.')
f3PtpSOOCStatsTwoStepSyncDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsTwoStepSyncDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsTwoStepSyncDiscards.setDescription('The number of Two Step Sync discards at the SOOC.')
f3PtpSOOCStatsFollowupDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsFollowupDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsFollowupDiscards.setDescription('The number of Follow up discards at the SOOC.')
f3PtpSOOCStatsDelayReqDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsDelayReqDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsDelayReqDiscards.setDescription('The number of Delay Request discards at the SOOC.')
f3PtpSOOCStatsPDelayReqDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsPDelayReqDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsPDelayReqDiscards.setDescription('The number of P-Delay Request discards at the SOOC.')
f3PtpSOOCStatsPDelayRspDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsPDelayRspDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsPDelayRspDiscards.setDescription('The number of P-Delay Response discards at the SOOC.')
f3PtpSOOCStatsPDelayFollowupDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsPDelayFollowupDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsPDelayFollowupDiscards.setDescription('The number of P-Delay Followup discards at the SOOC.')
f3PtpSOOCStatsInvalidTLVLenDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsInvalidTLVLenDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsInvalidTLVLenDiscards.setDescription('The number of discards due to invalid TLV Length at the SOOC.')
f3PtpSOOCStatsInvalidTLVTypeDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCStatsInvalidTLVTypeDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsInvalidTLVTypeDiscards.setDescription('The number of discards due to invalid TLV type at the SOOC.')
f3PtpSOOCStatsMaxFwdFlowWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCStatsMaxFwdFlowWeight.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsMaxFwdFlowWeight.setDescription('The max forward flow weight for this entry.')
f3PtpSOOCStatsAvgFwdFlowWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCStatsAvgFwdFlowWeight.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsAvgFwdFlowWeight.setDescription('The average forward flow weight for this entry.')
f3PtpSOOCStatsMinRevFlowWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCStatsMinRevFlowWeight.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsMinRevFlowWeight.setDescription('The min reverted flow weight for this entry.')
f3PtpSOOCStatsMaxRevFlowWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCStatsMaxRevFlowWeight.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsMaxRevFlowWeight.setDescription('The max reverted flow weight for this entry.')
f3PtpSOOCStatsAvgRevFlowWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCStatsAvgRevFlowWeight.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsAvgRevFlowWeight.setDescription('The average reverted flow weight for this entry.')
f3PtpSOOCStatsNumClockRecTransients = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 7, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCStatsNumClockRecTransients.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCStatsNumClockRecTransients.setDescription('The number of clock recovery transients for this entry.')
f3PtpSOOCHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8), )
if mibBuilder.loadTexts: f3PtpSOOCHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryTable.setDescription('A collection of Slave Only Ordinary Clock related statistics.  \n             These reflect the current data.')
f3PtpSOOCHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpTSIndex"), (0, "F3-PTP-MIB", "f3PtpSOOCIndex"), (0, "F3-PTP-MIB", "f3PtpSOOCStatsIndex"), (0, "F3-PTP-MIB", "f3PtpSOOCHistoryIndex"))
if mibBuilder.loadTexts: f3PtpSOOCHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryEntry.setDescription('A conceptual row in the f3PtpSOOCHistoryTable.\n             Entries exist in this table for each Slave Only Ordinary Clock.')
f3PtpSOOCHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: f3PtpSOOCHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Slave Only Ordinary Clock statistics entry. \n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
f3PtpSOOCHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryTime.setDescription('Indicates the time of history bin creation.')
f3PtpSOOCHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryValid.setDescription('Indicates the validity of the bin.')
f3PtpSOOCHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3PtpSOOCHistoryMinOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 5), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryMinOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryMinOffsetFromMaster.setDescription('Minimum Offset from Master')
f3PtpSOOCHistoryMaxOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 6), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryMaxOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryMaxOffsetFromMaster.setDescription('Maximum Offset from Master')
f3PtpSOOCHistoryAvgOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 7), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryAvgOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryAvgOffsetFromMaster.setDescription('Average Offset from Master')
f3PtpSOOCHistoryMinMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 8), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryMinMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryMinMeanPathDelay.setDescription('The minimum mean path delay at the SOOC.')
f3PtpSOOCHistoryMaxMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 9), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryMaxMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryMaxMeanPathDelay.setDescription('The maximum mean path delay at the SOOC.')
f3PtpSOOCHistoryAvgMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 10), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryAvgMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryAvgMeanPathDelay.setDescription('The average mean path delay at the SOOC.')
f3PtpSOOCHistoryMinSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 11), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryMinSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryMinSyncPathDelay.setDescription('The minimum mean path delay of Sync messages at the SOOC.')
f3PtpSOOCHistoryMaxSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 12), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryMaxSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryMaxSyncPathDelay.setDescription('The maximum mean path delay of Sync messages at the SOOC.')
f3PtpSOOCHistoryAvgSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 13), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryAvgSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryAvgSyncPathDelay.setDescription('The average mean path delay of Sync messages at the SOOC.')
f3PtpSOOCHistoryMinSyncPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 14), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryMinSyncPDV.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryMinSyncPDV.setDescription('The minimum Sync message path delay variation at the SOOC.')
f3PtpSOOCHistoryMaxSyncPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 15), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryMaxSyncPDV.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryMaxSyncPDV.setDescription('The maximum Sync message path delay variation at the SOOC.')
f3PtpSOOCHistoryAvgSyncPDV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 16), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryAvgSyncPDV.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryAvgSyncPDV.setDescription('The average Sync message packet delay variation at the SOOC.')
f3PtpSOOCHistoryMgmtMsgsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryMgmtMsgsDiscarded.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryMgmtMsgsDiscarded.setDescription('The number of PTP management messages discarded at the SOOC.')
f3PtpSOOCHistoryInvalidMsgLenDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryInvalidMsgLenDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryInvalidMsgLenDiscards.setDescription('The number of messages discarded due to invalid message length at the SOOC.')
f3PtpSOOCHistoryUnknownMasterDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryUnknownMasterDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryUnknownMasterDiscards.setDescription('The number of messages discard due to unknown Master at the SOOC.')
f3PtpSOOCHistoryUnknownDomainDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryUnknownDomainDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryUnknownDomainDiscards.setDescription('The number of messages discard due to unknown domain at the SOOC.')
f3PtpSOOCHistoryMulticastAnnounceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryMulticastAnnounceDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryMulticastAnnounceDiscards.setDescription('The number of multicast Announce message discards at the SOOC.')
f3PtpSOOCHistoryOutOfSeqAnnounceMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryOutOfSeqAnnounceMsgs.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryOutOfSeqAnnounceMsgs.setDescription('The number of out-of-sequence Announce message discards at the SOOC.')
f3PtpSOOCHistoryMulticastSyncDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryMulticastSyncDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryMulticastSyncDiscards.setDescription('The number of Multicast Sync discards at the SOOC.')
f3PtpSOOCHistoryTwoStepSyncDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryTwoStepSyncDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryTwoStepSyncDiscards.setDescription('The number of Two Step Sync discards at the SOOC.')
f3PtpSOOCHistoryFollowupDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryFollowupDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryFollowupDiscards.setDescription('The number of Follow up discards at the SOOC.')
f3PtpSOOCHistoryDelayReqDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryDelayReqDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryDelayReqDiscards.setDescription('The number of Delay Request discards at the SOOC.')
f3PtpSOOCHistoryPDelayReqDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryPDelayReqDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryPDelayReqDiscards.setDescription('The number of P-Delay Request discards at the SOOC.')
f3PtpSOOCHistoryPDelayRspDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryPDelayRspDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryPDelayRspDiscards.setDescription('The number of P-Delay Response discards at the SOOC.')
f3PtpSOOCHistoryPDelayFollowupDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryPDelayFollowupDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryPDelayFollowupDiscards.setDescription('The number of P-Delay Followup discards at the SOOC.')
f3PtpSOOCHistoryInvalidTLVLenDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryInvalidTLVLenDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryInvalidTLVLenDiscards.setDescription('The number of discards due to invalid TLV Length at the SOOC.')
f3PtpSOOCHistoryInvalidTLVTypeDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCHistoryInvalidTLVTypeDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryInvalidTLVTypeDiscards.setDescription('The number of discards due to invalid TLV type at the SOOC.')
f3PtpSOOCHistoryMaxFwdFlowWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCHistoryMaxFwdFlowWeight.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryMaxFwdFlowWeight.setDescription('The max forward flow weight for this entry.')
f3PtpSOOCHistoryAvgFwdFlowWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCHistoryAvgFwdFlowWeight.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryAvgFwdFlowWeight.setDescription('The average forward flow weight for this entry.')
f3PtpSOOCHistoryMinRevFlowWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCHistoryMinRevFlowWeight.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryMinRevFlowWeight.setDescription('The min reverted flow weight for this entry.')
f3PtpSOOCHistoryMaxRevFlowWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCHistoryMaxRevFlowWeight.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryMaxRevFlowWeight.setDescription('The max reverted flow weight for this entry.')
f3PtpSOOCHistoryAvgRevFlowWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCHistoryAvgRevFlowWeight.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryAvgRevFlowWeight.setDescription('The average reverted flow weight for this entry.')
f3PtpSOOCHistoryNumClockRecTransients = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 8, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCHistoryNumClockRecTransients.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCHistoryNumClockRecTransients.setDescription('The number of clock recovery transients for this entry.')
f3PtpSOOCThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 9), )
if mibBuilder.loadTexts: f3PtpSOOCThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCThresholdTable.setDescription('A table of entries that allow manageability \n             of Slave Only Ordinary Clock Thresholds. \n             Below MonTypes should be treated as nanoseconds \n             despite being ScaledNanoseconds in Stats and History:\n             - f3PtpSOOCStatsMinOffsetFromMaster,\n             - f3PtpSOOCStatsMaxOffsetFromMaster,\n             - f3PtpSOOCStatsAvgOffsetFromMaster,\n             - f3PtpSOOCStatsMinMeanPathDelay,\n             - f3PtpSOOCStatsMaxMeanPathDelay,\n             - f3PtpSOOCStatsAvgMeanPathDelay,\n             - f3PtpSOOCStatsMinSyncPathDelay,\n             - f3PtpSOOCStatsMaxSyncPathDelay,\n             - f3PtpSOOCStatsAvgSyncPathDelay,\n             - f3PtpSOOCStatsMinSyncPDV,\n             - f3PtpSOOCStatsMaxSyncPDV,\n             - f3PtpSOOCStatsAvgSyncPDV')
f3PtpSOOCThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpTSIndex"), (0, "F3-PTP-MIB", "f3PtpSOOCIndex"), (0, "F3-PTP-MIB", "f3PtpSOOCStatsIndex"), (0, "F3-PTP-MIB", "f3PtpSOOCThresholdIndex"))
if mibBuilder.loadTexts: f3PtpSOOCThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCThresholdEntry.setDescription('A conceptual row in the f3PtpSOOCThresholdTable.')
f3PtpSOOCThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3PtpSOOCThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3PtpSOOCThresholdTable.')
f3PtpSOOCThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 9, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3PtpSOOCThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 9, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3PtpSOOCThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 9, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3PtpSOOCThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 9, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpSOOCThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3PtpSOOCThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 9, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpSOOCThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCThresholdMonValue.setDescription('Monitored value corresponding to f3PtpSOOCThresholdVariable.')
f3PtpTSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 10), )
if mibBuilder.loadTexts: f3PtpTSStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSStatsTable.setDescription('A collection of Telecom Slave related statistics.  \n             These reflect the current data.')
f3PtpTSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpTSIndex"), (0, "F3-PTP-MIB", "f3PtpTSStatsIndex"))
if mibBuilder.loadTexts: f3PtpTSStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSStatsEntry.setDescription('A conceptual row in the f3PtpTSStatsTable.\n             Entries exist in this table for each Telecom Slave.')
f3PtpTSStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3PtpTSStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Telecom Slave statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3PtpTSStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 10, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3PtpTSStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 10, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSStatsValid.setDescription('Indicates the validity of the bin.')
f3PtpTSStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 10, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTSStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSStatsAction.setDescription('Allows the Manager to clear the bin.')
f3PtpTSStatsTotalTimeCR5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSStatsTotalTimeCR5.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSStatsTotalTimeCR5.setDescription('Total Time in seconds Clock Recovery Score is 5.')
f3PtpTSStatsTotalTimeCR4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 10, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSStatsTotalTimeCR4.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSStatsTotalTimeCR4.setDescription('Total Time in seconds Clock Recovery Score is 4.')
f3PtpTSStatsTotalTimeCR3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 10, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSStatsTotalTimeCR3.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSStatsTotalTimeCR3.setDescription('Total Time in seconds Clock Recovery Score is 3.')
f3PtpTSStatsTotalTimePR5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 10, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSStatsTotalTimePR5.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSStatsTotalTimePR5.setDescription('Total Time in seconds Phase Recovery Score is 5.')
f3PtpTSStatsTotalTimePR4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 10, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSStatsTotalTimePR4.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSStatsTotalTimePR4.setDescription('Total Time in seconds Phase Recovery Score is 4.')
f3PtpTSStatsTotalTimePR3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 10, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSStatsTotalTimePR3.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSStatsTotalTimePR3.setDescription('Total Time in seconds Phase Recovery Score is 3.')
f3PtpTSHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 11), )
if mibBuilder.loadTexts: f3PtpTSHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSHistoryTable.setDescription('A collection of Telecom Slave related statistics.  \n             These reflect the historical data.')
f3PtpTSHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpTSIndex"), (0, "F3-PTP-MIB", "f3PtpTSStatsIndex"), (0, "F3-PTP-MIB", "f3PtpTSHistoryIndex"))
if mibBuilder.loadTexts: f3PtpTSHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSHistoryEntry.setDescription('A conceptual row in the f3PtpTSHistoryTable.\n             Entries exist in this table for each Telecom Slave.')
f3PtpTSHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: f3PtpTSHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Telecom Slave statistics entry. \n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
f3PtpTSHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 11, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSHistoryTime.setDescription('Indicates the time of history bin creation.')
f3PtpTSHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 11, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSHistoryValid.setDescription('Indicates the validity of the bin.')
f3PtpTSHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 11, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTSHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3PtpTSHistoryTotalTimeCR5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 11, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSHistoryTotalTimeCR5.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSHistoryTotalTimeCR5.setDescription('Total Time in seconds Clock Recovery Score is 5.')
f3PtpTSHistoryTotalTimeCR4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSHistoryTotalTimeCR4.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSHistoryTotalTimeCR4.setDescription('Total Time in seconds Clock Recovery Score is 4.')
f3PtpTSHistoryTotalTimeCR3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 11, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSHistoryTotalTimeCR3.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSHistoryTotalTimeCR3.setDescription('Total Time in seconds Clock Recovery Score is 3.')
f3PtpTSHistoryTotalTimePR5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 11, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSHistoryTotalTimePR5.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSHistoryTotalTimePR5.setDescription('Total Time in seconds Phase Recovery Score is 5.')
f3PtpTSHistoryTotalTimePR4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 11, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSHistoryTotalTimePR4.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSHistoryTotalTimePR4.setDescription('Total Time in seconds Phase Recovery Score is 4.')
f3PtpTSHistoryTotalTimePR3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 11, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSHistoryTotalTimePR3.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSHistoryTotalTimePR3.setDescription('Total Time in seconds Phase Recovery Score is 3.')
f3PtpTSThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 12), )
if mibBuilder.loadTexts: f3PtpTSThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSThresholdTable.setDescription('A table of entries that allow manageability of \n             Telecom Slave Thresholds.')
f3PtpTSThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 12, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpTSIndex"), (0, "F3-PTP-MIB", "f3PtpTSStatsIndex"), (0, "F3-PTP-MIB", "f3PtpTSThresholdIndex"))
if mibBuilder.loadTexts: f3PtpTSThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSThresholdEntry.setDescription('A conceptual row in the f3PtpTSThresholdTable.')
f3PtpTSThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3PtpTSThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3PtpTSThresholdTable.')
f3PtpTSThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 12, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3PtpTSThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 12, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3PtpTSThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 12, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTSThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3PtpTSThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 12, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTSThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3PtpTSThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 12, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTSThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSThresholdMonValue.setDescription('Monitored value corresponding to f3PtpTSThresholdVariable.')
f3PtpMCIStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 13), )
if mibBuilder.loadTexts: f3PtpMCIStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStatsTable.setDescription('A collection of Master Clock Interface related statistics.  \n             These reflect the current data.')
f3PtpMCIStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 13, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpBCIndex"), (0, "F3-PTP-MIB", "f3PtpMCIIndex"), (0, "F3-PTP-MIB", "f3PtpMCIStatsIndex"))
if mibBuilder.loadTexts: f3PtpMCIStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStatsEntry.setDescription('A conceptual row in the f3PtpMCIStatsTable.\n             Entries exist in this table for each Telecom Slave.')
f3PtpMCIStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3PtpMCIStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Master Clock Interface statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3PtpMCIStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 13, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3PtpMCIStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 13, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStatsValid.setDescription('Indicates the validity of the bin.')
f3PtpMCIStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 13, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpMCIStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStatsAction.setDescription('Allows the Manager to clear the bin.')
f3PtpMCIStatsPtpDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 13, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIStatsPtpDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStatsPtpDiscards.setDescription('Count of PTP messages that have been discarded by the MCI since either \n             Source IP, PTP Domain number, Port Identity did not match any \n             Remote Slave clock.')
f3PtpMCIStatsSyncDeniedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 13, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIStatsSyncDeniedEvents.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStatsSyncDeniedEvents.setDescription('Count of Sync service denied events.')
f3PtpMCIStatsDelayRspDeniedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 13, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIStatsDelayRspDeniedEvents.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStatsDelayRspDeniedEvents.setDescription('Count of Delay Response service denied events.')
f3PtpMCIStatsAnnounceDeniedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 13, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIStatsAnnounceDeniedEvents.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStatsAnnounceDeniedEvents.setDescription('Count of Announce service denied events.')
f3PtpMCIStatsSyncCancelledEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 13, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIStatsSyncCancelledEvents.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStatsSyncCancelledEvents.setDescription('Count of Sync service canceled events initiated by the Remote Slave Clocks.')
f3PtpMCIStatsDelayRspCancelledEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 13, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIStatsDelayRspCancelledEvents.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStatsDelayRspCancelledEvents.setDescription('Count of Delay Response service canceled events initiated by the \n             Remote Slave Clocks.')
f3PtpMCIStatsAnnounceCancelledEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 13, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIStatsAnnounceCancelledEvents.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStatsAnnounceCancelledEvents.setDescription('Count of Announce service canceled events initiated by the \n             Remote Slave Clocks.')
f3PtpMCIStatsDynamicSlavesLearnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 13, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIStatsDynamicSlavesLearnt.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStatsDynamicSlavesLearnt.setDescription('Count of Successfully learned Dynamic Slaves.')
f3PtpMCIStatsDynamicSlavesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 13, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIStatsDynamicSlavesDropped.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIStatsDynamicSlavesDropped.setDescription('Count of Dynamic Slaves removed from the Remote Slaves table due to \n             lease expired.')
f3PtpMCIHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 14), )
if mibBuilder.loadTexts: f3PtpMCIHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIHistoryTable.setDescription('A collection of Master Clock Interface related history data.  \n             These reflect the current data.')
f3PtpMCIHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 14, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpBCIndex"), (0, "F3-PTP-MIB", "f3PtpMCIIndex"), (0, "F3-PTP-MIB", "f3PtpMCIStatsIndex"), (0, "F3-PTP-MIB", "f3PtpMCIHistoryIndex"))
if mibBuilder.loadTexts: f3PtpMCIHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIHistoryEntry.setDescription('A conceptual row in the f3PtpMCIHistoryTable.\n             Entries exist in this table for each Master Clock Interface.')
f3PtpMCIHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: f3PtpMCIHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Master Clock Interface PM history entry.')
f3PtpMCIHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 14, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIHistoryTime.setDescription('Indicates the time of history bin creation.')
f3PtpMCIHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 14, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIHistoryValid.setDescription('Indicates the validity of the bin.')
f3PtpMCIHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 14, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpMCIHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3PtpMCIHistoryPtpDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 14, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIHistoryPtpDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIHistoryPtpDiscards.setDescription('Count of PTP messages that have been discarded by the MCI since either \n             Source IP, PTP Domain number, Port Identity did not match any \n             Remote Slave clock.')
f3PtpMCIHistorySyncDeniedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 14, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIHistorySyncDeniedEvents.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIHistorySyncDeniedEvents.setDescription('Count of Sync service denied events.')
f3PtpMCIHistoryDelayRspDeniedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 14, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIHistoryDelayRspDeniedEvents.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIHistoryDelayRspDeniedEvents.setDescription('Count of Delay Response service denied events.')
f3PtpMCIHistoryAnnounceDeniedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 14, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIHistoryAnnounceDeniedEvents.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIHistoryAnnounceDeniedEvents.setDescription('Count of Announce service denied events.')
f3PtpMCIHistorySyncCancelledEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 14, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIHistorySyncCancelledEvents.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIHistorySyncCancelledEvents.setDescription('Count of Sync service canceled events initiated by the Remote Slave Clocks.')
f3PtpMCIHistoryDelayRspCancelledEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 14, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIHistoryDelayRspCancelledEvents.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIHistoryDelayRspCancelledEvents.setDescription('Count of Delay Response service canceled events initiated by the \n             Remote Slave Clocks.')
f3PtpMCIHistoryAnnounceCancelledEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 14, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIHistoryAnnounceCancelledEvents.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIHistoryAnnounceCancelledEvents.setDescription('Count of Announce service canceled events initiated by the \n             Remote Slave Clocks.')
f3PtpMCIHistoryDynamicSlavesLearnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 14, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIHistoryDynamicSlavesLearnt.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIHistoryDynamicSlavesLearnt.setDescription('Count of Successfully learned Dynamic Slaves.')
f3PtpMCIHistoryDynamicSlavesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 14, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIHistoryDynamicSlavesDropped.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIHistoryDynamicSlavesDropped.setDescription('Count of Dynamic Slaves removed from the Remote Slaves table due to \n             lease expired.')
f3PtpMCIThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 15), )
if mibBuilder.loadTexts: f3PtpMCIThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIThresholdTable.setDescription('A table of entries that allow manageability of \n             Master Clock Interface Thresholds.')
f3PtpMCIThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 15, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpBCIndex"), (0, "F3-PTP-MIB", "f3PtpMCIIndex"), (0, "F3-PTP-MIB", "f3PtpMCIStatsIndex"), (0, "F3-PTP-MIB", "f3PtpMCIThresholdIndex"))
if mibBuilder.loadTexts: f3PtpMCIThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIThresholdEntry.setDescription('A conceptual row in the f3PtpMCIThresholdTable.')
f3PtpMCIThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3PtpMCIThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3PtpMCIThresholdTable.')
f3PtpMCIThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 15, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3PtpMCIThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 15, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3PtpMCIThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 15, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpMCIThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3PtpMCIThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 15, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpMCIThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3PtpMCIThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 15, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpMCIThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCIThresholdMonValue.setDescription('Monitored value corresponding to f3PtpMCIThresholdVariable.')
f3PtpRemoteSlaveStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16), )
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsTable.setDescription('A collection of Remote Slave related statistics.  \n             These reflect the current data.')
f3PtpRemoteSlaveStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpBCIndex"), (0, "F3-PTP-MIB", "f3PtpMCIIndex"), (0, "F3-PTP-MIB", "f3PtpRemoteSlaveStatsSlaveType"), (0, "F3-PTP-MIB", "f3PtpRemoteSlaveStatsSlaveIndex"), (0, "F3-PTP-MIB", "f3PtpRemoteSlaveStatsIndex"))
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsEntry.setDescription('A conceptual row in the f3PtpRemoteSlaveStatsTable.\n             Entries exist in this table for each Remote Slave.')
f3PtpRemoteSlaveStatsSlaveType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 1), RemoteSlaveType())
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsSlaveType.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsSlaveType.setDescription('This object indicates if this row referts to Static or Dynamic Remote Slave.')
f3PtpRemoteSlaveStatsSlaveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 2), Integer32())
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsSlaveIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsSlaveIndex.setDescription("Index of a Static or Dynamic Remote Slave.\n             When f3PtpRemoteSlaveStatsSlaveType is 'static' then this object referts to f3PtpStaticRemoteSlaveIndex.\n             When f3PtpRemoteSlaveStatsSlaveType is 'dynamic' then this object referts to f3PtpDynamicRemoteSlaveIndex.")
f3PtpRemoteSlaveStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Remote Slave statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3PtpRemoteSlaveStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 4), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3PtpRemoteSlaveStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsValid.setDescription('Indicates the validity of the bin.')
f3PtpRemoteSlaveStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 6), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsAction.setDescription('Allows the Manager to clear the bin.')
f3PtpRemoteSlaveStatsSyncMsgsGen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsSyncMsgsGen.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsSyncMsgsGen.setDescription('Total Sync messages generated.')
f3PtpRemoteSlaveStatsDelayRspMsgsGen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsDelayRspMsgsGen.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsDelayRspMsgsGen.setDescription('Total Delay Response messages generated.')
f3PtpRemoteSlaveStatsAnnounceMsgsGen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsAnnounceMsgsGen.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsAnnounceMsgsGen.setDescription('Total Announce messages generated.')
f3PtpRemoteSlaveStatsSignallingMsgsGen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsSignallingMsgsGen.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsSignallingMsgsGen.setDescription('Total Signalling messages generated.')
f3PtpRemoteSlaveStatsDelayReqMsgsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsDelayReqMsgsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsDelayReqMsgsRx.setDescription('Total Delay Request messages received.')
f3PtpRemoteSlaveStatsSignallingMsgsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsSignallingMsgsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsSignallingMsgsRx.setDescription('Total Signalling messages received.')
f3PtpRemoteSlaveStatsDelayReqMsgsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsDelayReqMsgsDropped.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsDelayReqMsgsDropped.setDescription('Total Delay Request messages dropped.')
f3PtpRemoteSlaveStatsInvalidTLVLenDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsInvalidTLVLenDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsInvalidTLVLenDiscards.setDescription('Total number of PTP messages discarded due to invalid PTP TLV length.')
f3PtpRemoteSlaveStatsInvalidTLVTypeDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsInvalidTLVTypeDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsInvalidTLVTypeDiscards.setDescription('Total number of PTP messages discarded due to invalid PTP TLV type.')
f3PtpRemoteSlaveStatsTimesSyncLeaseExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsTimesSyncLeaseExp.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsTimesSyncLeaseExp.setDescription('Count of Sync service lease duration expired events.')
f3PtpRemoteSlaveStatsTimesDelayRspLeaseExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsTimesDelayRspLeaseExp.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsTimesDelayRspLeaseExp.setDescription('Count of Delay Response service lease duration expired events.')
f3PtpRemoteSlaveStatsTimesAnnounceLeaseExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 16, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsTimesAnnounceLeaseExp.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveStatsTimesAnnounceLeaseExp.setDescription('Count of Announce service lease duration expired events.')
f3PtpRemoteSlaveHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17), )
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryTable.setDescription('A collection of Remote Slave related history.  \n             These reflect the current data.')
f3PtpRemoteSlaveHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpBCIndex"), (0, "F3-PTP-MIB", "f3PtpMCIIndex"), (0, "F3-PTP-MIB", "f3PtpRemoteSlaveStatsSlaveType"), (0, "F3-PTP-MIB", "f3PtpRemoteSlaveStatsSlaveIndex"), (0, "F3-PTP-MIB", "f3PtpRemoteSlaveStatsIndex"), (0, "F3-PTP-MIB", "f3PtpRemoteSlaveHistoryIndex"))
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryEntry.setDescription('A conceptual row in the f3PtpRemoteSlaveHistoryTable.\n             Entries exist in this table for each Remote Slave.')
f3PtpRemoteSlaveHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n             this Remote Slave PM history entry.')
f3PtpRemoteSlaveHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryTime.setDescription('Indicates the time of history bin creation.')
f3PtpRemoteSlaveHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryValid.setDescription('Indicates the validity of the bin.')
f3PtpRemoteSlaveHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3PtpRemoteSlaveHistorySyncMsgsGen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistorySyncMsgsGen.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistorySyncMsgsGen.setDescription('Total Sync messages generated.')
f3PtpRemoteSlaveHistoryDelayRspMsgsGen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryDelayRspMsgsGen.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryDelayRspMsgsGen.setDescription('Total Delay Response messages generated.')
f3PtpRemoteSlaveHistoryAnnounceMsgsGen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryAnnounceMsgsGen.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryAnnounceMsgsGen.setDescription('Total Announce messages generated.')
f3PtpRemoteSlaveHistorySignallingMsgsGen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistorySignallingMsgsGen.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistorySignallingMsgsGen.setDescription('Total Signalling messages generated.')
f3PtpRemoteSlaveHistoryDelayReqMsgsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryDelayReqMsgsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryDelayReqMsgsRx.setDescription('Total Delay Request messages received.')
f3PtpRemoteSlaveHistorySignallingMsgsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistorySignallingMsgsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistorySignallingMsgsRx.setDescription('Total Signalling messages received.')
f3PtpRemoteSlaveHistoryDelayReqMsgsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryDelayReqMsgsDropped.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryDelayReqMsgsDropped.setDescription('Total Delay Request messages dropped.')
f3PtpRemoteSlaveHistoryInvalidTLVLenDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryInvalidTLVLenDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryInvalidTLVLenDiscards.setDescription('Total number of PTP messages discarded due to invalid PTP TLV length.')
f3PtpRemoteSlaveHistoryInvalidTLVTypeDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryInvalidTLVTypeDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryInvalidTLVTypeDiscards.setDescription('Total number of PTP messages discarded due to invalid PTP TLV type.')
f3PtpRemoteSlaveHistoryTimesSyncLeaseExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryTimesSyncLeaseExp.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryTimesSyncLeaseExp.setDescription('Count of Sync service lease duration expired events.')
f3PtpRemoteSlaveHistoryTimesDelayRspLeaseExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryTimesDelayRspLeaseExp.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryTimesDelayRspLeaseExp.setDescription('Count of Delay Response service lease duration expired events.')
f3PtpRemoteSlaveHistoryTimesAnnounceLeaseExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 17, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryTimesAnnounceLeaseExp.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveHistoryTimesAnnounceLeaseExp.setDescription('Count of Announce service lease duration expired events.')
f3PtpRemoteSlaveThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 18), )
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdTable.setDescription('A table of entries that allow manageability of \n             Master Clock Interface Thresholds.')
f3PtpRemoteSlaveThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 18, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpBCIndex"), (0, "F3-PTP-MIB", "f3PtpMCIIndex"), (0, "F3-PTP-MIB", "f3PtpRemoteSlaveStatsSlaveType"), (0, "F3-PTP-MIB", "f3PtpRemoteSlaveStatsSlaveIndex"), (0, "F3-PTP-MIB", "f3PtpRemoteSlaveStatsIndex"), (0, "F3-PTP-MIB", "f3PtpRemoteSlaveThresholdIndex"))
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdEntry.setDescription('A conceptual row in the f3PtpRemoteSlaveThresholdTable.')
f3PtpRemoteSlaveThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3PtpRemoteSlaveThresholdTable.')
f3PtpRemoteSlaveThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 18, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3PtpRemoteSlaveThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 18, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3PtpRemoteSlaveThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 18, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3PtpRemoteSlaveThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 18, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3PtpRemoteSlaveThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 18, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveThresholdMonValue.setDescription('Monitored value corresponding to f3PtpRemoteSlaveThresholdVariable.')
f3PtpTrafficPortFlowPointStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19), )
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsTable.setDescription('A collection of Traffic Port PTP Flow Point statistics.  \n             These reflect the current data.')
f3PtpTrafficPortFlowPointStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "F3-PTP-MIB", "f3PtpTrafficPortFlowPointIndex"), (0, "F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsIndex"))
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsEntry.setDescription('A conceptual row in the f3PtpTrafficPortFlowPointStatsTable.\n             Entries exist in this table for each Traffic Port Flow Point.')
f3PtpTrafficPortFlowPointStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Traffic Port PTP Flow Point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3PtpTrafficPortFlowPointStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3PtpTrafficPortFlowPointStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsValid.setDescription('Indicates the validity of the bin.')
f3PtpTrafficPortFlowPointStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsAction.setDescription('Allows the Manager to clear the bin.')
f3PtpTrafficPortFlowPointStatsAnnouncesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsAnnouncesRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsAnnouncesRx.setDescription('Number of PTP Announce messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsAnnouncesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsAnnouncesTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsAnnouncesTx.setDescription('Number of Announce Messages transmitted on the PTP Flow Point.\n          This object is applicable for transparent clocks.')
f3PtpTrafficPortFlowPointStatsSyncsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsSyncsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsSyncsRx.setDescription('Number of Sync Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsSyncsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsSyncsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsSyncsTx.setDescription('Number of Sync Messages transmitted on the PTP Flow Point.\n          This object is applicable for transparent clocks.')
f3PtpTrafficPortFlowPointStatsFollowupsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsFollowupsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsFollowupsRx.setDescription('Number of Follow up Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsFollowupsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsFollowupsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsFollowupsTx.setDescription('Number of Follow up Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsDelayReqsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsDelayReqsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsDelayReqsRx.setDescription('Number of Delay Request Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsDelayReqsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsDelayReqsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsDelayReqsTx.setDescription('Number of Delay Request Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsDelayRspsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsDelayRspsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsDelayRspsRx.setDescription('Number of Delay Response Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsDelayRspsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsDelayRspsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsDelayRspsTx.setDescription('Number of Delay Response Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsPDelayReqsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPDelayReqsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPDelayReqsRx.setDescription('Number of Peer Delay Request Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsPDelayReqsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPDelayReqsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPDelayReqsTx.setDescription('Number of Peer Delay Request Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsPDelayRspsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPDelayRspsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPDelayRspsRx.setDescription('Number of Peer Delay Response Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsPDelayRspsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPDelayRspsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPDelayRspsTx.setDescription('Number of Peer Delay Response Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsPDelayRspFollowupsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPDelayRspFollowupsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPDelayRspFollowupsRx.setDescription('Number of Peer Delay Response Followup Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsPDelayRspFollowupsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPDelayRspFollowupsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPDelayRspFollowupsTx.setDescription('Number of Peer Delay Response Followup Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsSignalingRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsSignalingRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsSignalingRx.setDescription('Number of PTP Signaling Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsSignalingTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsSignalingTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsSignalingTx.setDescription('Number of PTP Signaling Messages Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsMgmtFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMgmtFramesRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMgmtFramesRx.setDescription('Number of PTP Management Frames received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsMgmtFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMgmtFramesTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMgmtFramesTx.setDescription('Number of PTP Management Frames Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsPtpUnknownsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPtpUnknownsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPtpUnknownsRx.setDescription('Number of Unknown PTP Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsPtpUnknownsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPtpUnknownsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsPtpUnknownsTx.setDescription('Number of Unknown PTP Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointStatsMinSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMinSyncResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMinSyncResTime.setDescription('The minimum residence time for PTP Sync messages.')
f3PtpTrafficPortFlowPointStatsMaxSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMaxSyncResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMaxSyncResTime.setDescription('The maximum residence time for PTP Sync messages.')
f3PtpTrafficPortFlowPointStatsAvgSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsAvgSyncResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsAvgSyncResTime.setDescription('The average residence time for PTP Sync messages.')
f3PtpTrafficPortFlowPointStatsMinDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMinDelayReqResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMinDelayReqResTime.setDescription('The minimum residence time for PTP Delay Request messages.')
f3PtpTrafficPortFlowPointStatsMaxDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMaxDelayReqResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMaxDelayReqResTime.setDescription('The maximum residence time for PTP Delay Request messages.')
f3PtpTrafficPortFlowPointStatsAvgDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsAvgDelayReqResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsAvgDelayReqResTime.setDescription('The average residence time for PTP Delay Request messages.')
f3PtpTrafficPortFlowPointStatsMinPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMinPDelayReqResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMinPDelayReqResTime.setDescription('The minimum residence time for PTP Peer Delay Request messages.')
f3PtpTrafficPortFlowPointStatsMaxPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMaxPDelayReqResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMaxPDelayReqResTime.setDescription('The maximum residence time for PTP Peer Delay Request messages.')
f3PtpTrafficPortFlowPointStatsAvgPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsAvgPDelayReqResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsAvgPDelayReqResTime.setDescription('The average residence time for PTP Peer Delay Request messages.')
f3PtpTrafficPortFlowPointStatsMinPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMinPDelayRspResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMinPDelayRspResTime.setDescription('The minimum residence time for PTP Peer Delay Response messages.')
f3PtpTrafficPortFlowPointStatsMaxPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMaxPDelayRspResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsMaxPDelayRspResTime.setDescription('The maximum residence time for PTP Peer Delay Response messages.')
f3PtpTrafficPortFlowPointStatsAvgPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsAvgPDelayRspResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsAvgPDelayRspResTime.setDescription('The average residence time for PTP Peer Delay Response messages.')
f3PtpTrafficPortFlowPointStatsDestMciNoMatchDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 39), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsDestMciNoMatchDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsDestMciNoMatchDiscards.setDescription('The dest MCI no match discards messages.')
f3PtpTrafficPortFlowPointStatsTagNoMatchDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 19, 1, 40), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsTagNoMatchDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointStatsTagNoMatchDiscards.setDescription('PTP frames discarded due to tag mismatch. For example, eth-multicast FP is tagged,\n         then untagged non-forwardable PTP frames shall be discarded.')
f3PtpTrafficPortFlowPointHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20), )
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryTable.setDescription('A collection of Traffic Port PTP Flow Point history statistics.  \n             These reflect the history data.')
f3PtpTrafficPortFlowPointHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "F3-PTP-MIB", "f3PtpTrafficPortFlowPointIndex"), (0, "F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsIndex"), (0, "F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryIndex"))
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryEntry.setDescription('A conceptual row in the f3PtpTrafficPortFlowPointHistoryTable.\n             Entries exist in this table for each Traffic Port Flow Point.')
f3PtpTrafficPortFlowPointHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Ethernet Traffic Port PTP Flow point PM history entry.')
f3PtpTrafficPortFlowPointHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryTime.setDescription('Indicates the time of history bin creation.')
f3PtpTrafficPortFlowPointHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryValid.setDescription('Indicates the validity of the bin.')
f3PtpTrafficPortFlowPointHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3PtpTrafficPortFlowPointHistoryAnnouncesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryAnnouncesRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryAnnouncesRx.setDescription('Number of PTP Announce messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryAnnouncesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryAnnouncesTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryAnnouncesTx.setDescription('Number of Announce Messages transmitted on the PTP Flow Point.\n          This object is applicable for transparent clocks.')
f3PtpTrafficPortFlowPointHistorySyncsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistorySyncsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistorySyncsRx.setDescription('Number of Sync Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistorySyncsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistorySyncsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistorySyncsTx.setDescription('Number of Sync Messages transmitted on the PTP Flow Point.\n          This object is applicable for transparent clocks.')
f3PtpTrafficPortFlowPointHistoryFollowupsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryFollowupsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryFollowupsRx.setDescription('Number of Follow up Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryFollowupsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryFollowupsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryFollowupsTx.setDescription('Number of Follow up Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryDelayReqsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryDelayReqsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryDelayReqsRx.setDescription('Number of Delay Request Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryDelayReqsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryDelayReqsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryDelayReqsTx.setDescription('Number of Delay Request Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryDelayRspsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryDelayRspsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryDelayRspsRx.setDescription('Number of Delay Response Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryDelayRspsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryDelayRspsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryDelayRspsTx.setDescription('Number of Delay Response Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryPDelayReqsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPDelayReqsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPDelayReqsRx.setDescription('Number of Peer Delay Request Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryPDelayReqsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPDelayReqsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPDelayReqsTx.setDescription('Number of Peer Delay Request Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryPDelayRspsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPDelayRspsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPDelayRspsRx.setDescription('Number of Peer Delay Response Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryPDelayRspsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPDelayRspsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPDelayRspsTx.setDescription('Number of Peer Delay Response Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryPDelayRspFollowupsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPDelayRspFollowupsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPDelayRspFollowupsRx.setDescription('Number of Peer Delay Response Followup Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryPDelayRspFollowupsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPDelayRspFollowupsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPDelayRspFollowupsTx.setDescription('Number of Peer Delay Response Followup Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistorySignalingRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistorySignalingRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistorySignalingRx.setDescription('Number of PTP Signaling Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistorySignalingTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistorySignalingTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistorySignalingTx.setDescription('Number of PTP Signaling Messages Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryMgmtFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMgmtFramesRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMgmtFramesRx.setDescription('Number of PTP Management Frames received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryMgmtFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMgmtFramesTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMgmtFramesTx.setDescription('Number of PTP Management Frames Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryPtpUnknownsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPtpUnknownsRx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPtpUnknownsRx.setDescription('Number of Unknown PTP Messages received on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryPtpUnknownsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPtpUnknownsTx.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryPtpUnknownsTx.setDescription('Number of Unknown PTP Messages transmitted on the PTP Flow Point.')
f3PtpTrafficPortFlowPointHistoryMinSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMinSyncResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMinSyncResTime.setDescription('The minimum residence time for PTP Sync messages.')
f3PtpTrafficPortFlowPointHistoryMaxSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMaxSyncResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMaxSyncResTime.setDescription('The maximum residence time for PTP Sync messages.')
f3PtpTrafficPortFlowPointHistoryAvgSyncResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryAvgSyncResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryAvgSyncResTime.setDescription('The average residence time for PTP Sync messages.')
f3PtpTrafficPortFlowPointHistoryMinDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMinDelayReqResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMinDelayReqResTime.setDescription('The minimum residence time for PTP Delay Request messages.')
f3PtpTrafficPortFlowPointHistoryMaxDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMaxDelayReqResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMaxDelayReqResTime.setDescription('The maximum residence time for PTP Delay Request messages.')
f3PtpTrafficPortFlowPointHistoryAvgDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryAvgDelayReqResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryAvgDelayReqResTime.setDescription('The average residence time for PTP Delay Request messages.')
f3PtpTrafficPortFlowPointHistoryMinPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMinPDelayReqResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMinPDelayReqResTime.setDescription('The minimum residence time for PTP Peer Delay Request messages.')
f3PtpTrafficPortFlowPointHistoryMaxPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMaxPDelayReqResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMaxPDelayReqResTime.setDescription('The maximum residence time for PTP Peer Delay Request messages.')
f3PtpTrafficPortFlowPointHistoryAvgPDelayReqResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryAvgPDelayReqResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryAvgPDelayReqResTime.setDescription('The average residence time for PTP Peer Delay Request messages.')
f3PtpTrafficPortFlowPointHistoryMinPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMinPDelayRspResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMinPDelayRspResTime.setDescription('The minimum residence time for PTP Peer Delay Response messages.')
f3PtpTrafficPortFlowPointHistoryMaxPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMaxPDelayRspResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryMaxPDelayRspResTime.setDescription('The maximum residence time for PTP Peer Delay Response messages.')
f3PtpTrafficPortFlowPointHistoryAvgPDelayRspResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryAvgPDelayRspResTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryAvgPDelayRspResTime.setDescription('The average residence time for PTP Peer Delay Response messages.')
f3PtpTrafficPortFlowPointHistoryDestMciNoMatchDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 39), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryDestMciNoMatchDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryDestMciNoMatchDiscards.setDescription('The dest MCI no match discards messages.')
f3PtpTrafficPortFlowPointHistoryTagNoMatchDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 20, 1, 40), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryTagNoMatchDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointHistoryTagNoMatchDiscards.setDescription('PTP frames discarded due to tag mismatch. For example, eth-multicast FP is tagged,\n         then untagged non-forwardable PTP frames shall be discarded.')
f3PtpTrafficPortFlowPointThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 21), )
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdTable.setDescription('A table of entries that allow manageability of Traffic Port PTP Flow Point\n             Thresholds.')
f3PtpTrafficPortFlowPointThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 21, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "F3-PTP-MIB", "f3PtpTrafficPortFlowPointIndex"), (0, "F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsIndex"), (0, "F3-PTP-MIB", "f3PtpTrafficPortFlowPointThresholdIndex"))
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdEntry.setDescription('A conceptual row in the f3PtpTrafficPortFlowPointThresholdTable.')
f3PtpTrafficPortFlowPointThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3PtpTrafficPortFlowPointThresholdTable.')
f3PtpTrafficPortFlowPointThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 21, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3PtpTrafficPortFlowPointThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 21, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3PtpTrafficPortFlowPointThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 21, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3PtpTrafficPortFlowPointThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 21, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3PtpTrafficPortFlowPointThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 21, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdMonValue.setDescription('Monitored value corresponding to f3PtpTrafficPortFlowPointThresholdVariable.')
f3PtpPTPPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22), )
if mibBuilder.loadTexts: f3PtpPTPPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsTable.setDescription('A collection of PTP Port related statistics.  \n             These reflect the current data.')
f3PtpPTPPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockIndex"), (0, "F3-PTP-MIB", "f3PtpPTPPortIndex"), (0, "F3-PTP-MIB", "f3PtpPTPPortStatsIndex"))
if mibBuilder.loadTexts: f3PtpPTPPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsEntry.setDescription('A conceptual row in the f3PtpPTPPortStatsTable.\n             Entries exist in this table for each PTP Port.')
f3PtpPTPPortStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3PtpPTPPortStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this PTP Port statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3PtpPTPPortStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3PtpPTPPortStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsValid.setDescription('Indicates the validity of the bin.')
f3PtpPTPPortStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPPortStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsAction.setDescription('Allows the Manager to clear the bin.')
f3PtpPTPPortStatsAvgAnnounceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsAvgAnnounceRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsAvgAnnounceRate.setDescription('Avg Announce Rate.')
f3PtpPTPPortStatsAvgSyncRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsAvgSyncRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsAvgSyncRate.setDescription('Avg Sync Rate.')
f3PtpPTPPortStatsAvgDelayReqRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsAvgDelayReqRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsAvgDelayReqRate.setDescription('Avg Delay Req Rate.')
f3PtpPTPPortStatsAvgDelayRespRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsAvgDelayRespRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsAvgDelayRespRate.setDescription('Avg Delay Resp Rate.')
f3PtpPTPPortStatsMismatchDomainDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsMismatchDomainDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsMismatchDomainDiscards.setDescription('Mismatch Domain Discards.')
f3PtpPTPPortStatsMessageWrongTypeDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsMessageWrongTypeDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsMessageWrongTypeDiscards.setDescription('Message Wrong Type Discards.')
f3PtpPTPPortStatsMessagesWrongLengthDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsMessagesWrongLengthDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsMessagesWrongLengthDiscards.setDescription('Messages Wrong Length Discards.')
f3PtpPTPPortStatsUnknownMasterDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsUnknownMasterDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpPTPPortStatsUnknownMasterDiscards.setDescription('Unknown Master Discards.')
f3PtpPTPPortStatsMinOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsMinOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsMinOffsetFromMaster.setDescription('Min Offset From Master.')
f3PtpPTPPortStatsMaxOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsMaxOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsMaxOffsetFromMaster.setDescription('Max Offset From Master.')
f3PtpPTPPortStatsAvgOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsAvgOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsAvgOffsetFromMaster.setDescription('Avg Offset From Master.')
f3PtpPTPPortStatsMinSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsMinSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsMinSyncPathDelay.setDescription('Min Sync Path Delay.')
f3PtpPTPPortStatsMaxSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsMaxSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsMaxSyncPathDelay.setDescription('Max Sync Path Delay.')
f3PtpPTPPortStatsAvgSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsAvgSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsAvgSyncPathDelay.setDescription('Avg Sync Path Delay.')
f3PtpPTPPortStatsMinMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsMinMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsMinMeanPathDelay.setDescription('Min Mean Path Delay.')
f3PtpPTPPortStatsMaxMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsMaxMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsMaxMeanPathDelay.setDescription('Max Mean Path Delay.')
f3PtpPTPPortStatsAvgMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsAvgMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortStatsAvgMeanPathDelay.setDescription('Avg Mean Path Delay.')
f3PtpPTPPortStatsMsgMiscDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 22, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortStatsMsgMiscDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpPTPPortStatsMsgMiscDiscards.setDescription('Number of received packets discarded due to miscellaneous reasons.')
f3PtpPTPPortHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23), )
if mibBuilder.loadTexts: f3PtpPTPPortHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryTable.setDescription('A collection of PTP Port related statistics.  \n             These reflect the current data.')
f3PtpPTPPortHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockIndex"), (0, "F3-PTP-MIB", "f3PtpPTPPortIndex"), (0, "F3-PTP-MIB", "f3PtpPTPPortStatsIndex"), (0, "F3-PTP-MIB", "f3PtpPTPPortHistoryIndex"))
if mibBuilder.loadTexts: f3PtpPTPPortHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryEntry.setDescription('A conceptual row in the f3PtpPTPPortHistoryTable.\n             Entries exist in this table for each PTP Port.')
f3PtpPTPPortHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3PtpPTPPortHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this PTP Port statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3PtpPTPPortHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryTime.setDescription('Indicates the time of history bin creation.')
f3PtpPTPPortHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryValid.setDescription('Indicates the validity of the bin.')
f3PtpPTPPortHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3PtpPTPPortHistoryAvgAnnounceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAvgAnnounceRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAvgAnnounceRate.setDescription('Avg Announce Rate.')
f3PtpPTPPortHistoryAvgSyncRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAvgSyncRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAvgSyncRate.setDescription('Avg Sync Rate.')
f3PtpPTPPortHistoryAvgDelayReqRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAvgDelayReqRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAvgDelayReqRate.setDescription('Avg Delay Req Rate.')
f3PtpPTPPortHistoryAvgDelayRespRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAvgDelayRespRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAvgDelayRespRate.setDescription('Avg Delay Resp Rate.')
f3PtpPTPPortHistoryMismatchDomainDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMismatchDomainDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMismatchDomainDiscards.setDescription('Mismatch Domain Discards.')
f3PtpPTPPortHistoryMessageWrongTypeDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMessageWrongTypeDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMessageWrongTypeDiscards.setDescription('Message Wrong Type Discards.')
f3PtpPTPPortHistoryMessagesWrongLengthDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMessagesWrongLengthDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMessagesWrongLengthDiscards.setDescription('Messages Wrong Length Discards.')
f3PtpPTPPortHistoryUnknownMasterDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryUnknownMasterDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryUnknownMasterDiscards.setDescription('Unknown Master Discards.')
f3PtpPTPPortHistoryMinOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMinOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMinOffsetFromMaster.setDescription('Min Offset From Master.')
f3PtpPTPPortHistoryMaxOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMaxOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMaxOffsetFromMaster.setDescription('Max Offset From Master.')
f3PtpPTPPortHistoryAvgOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAvgOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAvgOffsetFromMaster.setDescription('Avg Offset From Master.')
f3PtpPTPPortHistoryMinSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMinSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMinSyncPathDelay.setDescription('Min Sync Path Delay.')
f3PtpPTPPortHistoryMaxSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMaxSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMaxSyncPathDelay.setDescription('Max Sync Path Delay.')
f3PtpPTPPortHistoryAvgSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAvgSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAvgSyncPathDelay.setDescription('Avg Sync Path Delay.')
f3PtpPTPPortHistoryMinMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMinMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMinMeanPathDelay.setDescription('Min Mean Path Delay.')
f3PtpPTPPortHistoryMaxMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMaxMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMaxMeanPathDelay.setDescription('Max Mean Path Delay.')
f3PtpPTPPortHistoryAvgMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAvgMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryAvgMeanPathDelay.setDescription('Avg Mean Path Delay.')
f3PtpPTPPortHistoryMsgMiscDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 23, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMsgMiscDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpPTPPortHistoryMsgMiscDiscards.setDescription('Number of received packets discarded due to miscellaneous reasons.')
f3PtpPTPPortThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 24), )
if mibBuilder.loadTexts: f3PtpPTPPortThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortThresholdTable.setDescription('A table of entries that allow manageability of \n             PTP Port Thresholds.')
f3PtpPTPPortThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 24, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockIndex"), (0, "F3-PTP-MIB", "f3PtpPTPPortIndex"), (0, "F3-PTP-MIB", "f3PtpPTPPortStatsIndex"), (0, "F3-PTP-MIB", "f3PtpPTPPortThresholdIndex"))
if mibBuilder.loadTexts: f3PtpPTPPortThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortThresholdEntry.setDescription('A conceptual row in the f3PtpPTPPortThresholdTable.')
f3PtpPTPPortThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3PtpPTPPortThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3PtpPTPPortThresholdTable.')
f3PtpPTPPortThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 24, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3PtpPTPPortThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 24, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3PtpPTPPortThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 24, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPPortThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3PtpPTPPortThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 24, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPPortThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3PtpPTPPortThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 24, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPPortThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortThresholdMonValue.setDescription('Monitored value corresponding to f3PtpPTPPortThresholdVariable.')
f3PtpPTPClockStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 25), )
if mibBuilder.loadTexts: f3PtpPTPClockStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStatsTable.setDescription('A collection of PTP Clock related statistics.  \n             These reflect the current data.')
f3PtpPTPClockStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 25, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockStatsIndex"))
if mibBuilder.loadTexts: f3PtpPTPClockStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStatsEntry.setDescription('A conceptual row in the f3PtpPTPClockStatsTable.\n             Entries exist in this table for each PTP Port.')
f3PtpPTPClockStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3PtpPTPClockStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this PTP Port statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3PtpPTPClockStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 25, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3PtpPTPClockStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 25, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStatsValid.setDescription('Indicates the validity of the bin.')
f3PtpPTPClockStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 25, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStatsAction.setDescription('Allows the Manager to clear the bin.')
f3PtpPTPClockStatsMinOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 25, 1, 5), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockStatsMinOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStatsMinOffsetFromMaster.setDescription('Min Offset From Master.')
f3PtpPTPClockStatsMaxOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 25, 1, 6), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockStatsMaxOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStatsMaxOffsetFromMaster.setDescription('Max Offset From Master.')
f3PtpPTPClockStatsAvgOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 25, 1, 7), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockStatsAvgOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStatsAvgOffsetFromMaster.setDescription('Avg Offset From Master.')
f3PtpPTPClockStatsMinSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 25, 1, 8), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockStatsMinSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStatsMinSyncPathDelay.setDescription('Min Sync Path Delay.')
f3PtpPTPClockStatsMaxSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 25, 1, 9), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockStatsMaxSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStatsMaxSyncPathDelay.setDescription('Max Sync Path Delay.')
f3PtpPTPClockStatsAvgSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 25, 1, 10), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockStatsAvgSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStatsAvgSyncPathDelay.setDescription('Avg Sync Path Delay.')
f3PtpPTPClockStatsMinMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 25, 1, 11), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockStatsMinMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStatsMinMeanPathDelay.setDescription('Min Mean Path Delay.')
f3PtpPTPClockStatsMaxMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 25, 1, 12), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockStatsMaxMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStatsMaxMeanPathDelay.setDescription('Max Mean Path Delay.')
f3PtpPTPClockStatsAvgMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 25, 1, 13), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockStatsAvgMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockStatsAvgMeanPathDelay.setDescription('Avg Mean Path Delay.')
f3PtpPTPClockHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 26), )
if mibBuilder.loadTexts: f3PtpPTPClockHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockHistoryTable.setDescription('A collection of PTP Clock related statistics.  \n             These reflect the current data.')
f3PtpPTPClockHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 26, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockStatsIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockHistoryIndex"))
if mibBuilder.loadTexts: f3PtpPTPClockHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockHistoryEntry.setDescription('A conceptual row in the f3PtpPTPClockHistoryTable.\n             Entries exist in this table for each PTP Port.')
f3PtpPTPClockHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3PtpPTPClockHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this PTP Port statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3PtpPTPClockHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 26, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockHistoryTime.setDescription('Indicates the time of history bin creation.')
f3PtpPTPClockHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 26, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockHistoryValid.setDescription('Indicates the validity of the bin.')
f3PtpPTPClockHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 26, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3PtpPTPClockHistoryMinOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 26, 1, 5), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockHistoryMinOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockHistoryMinOffsetFromMaster.setDescription('Min Offset From Master.')
f3PtpPTPClockHistoryMaxOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 26, 1, 6), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockHistoryMaxOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockHistoryMaxOffsetFromMaster.setDescription('Max Offset From Master.')
f3PtpPTPClockHistoryAvgOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 26, 1, 7), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockHistoryAvgOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockHistoryAvgOffsetFromMaster.setDescription('Avg Offset From Master.')
f3PtpPTPClockHistoryMinSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 26, 1, 8), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockHistoryMinSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockHistoryMinSyncPathDelay.setDescription('Min Sync Path Delay.')
f3PtpPTPClockHistoryMaxSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 26, 1, 9), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockHistoryMaxSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockHistoryMaxSyncPathDelay.setDescription('Max Sync Path Delay.')
f3PtpPTPClockHistoryAvgSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 26, 1, 10), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockHistoryAvgSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockHistoryAvgSyncPathDelay.setDescription('Avg Sync Path Delay.')
f3PtpPTPClockHistoryMinMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 26, 1, 11), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockHistoryMinMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockHistoryMinMeanPathDelay.setDescription('Min Mean Path Delay.')
f3PtpPTPClockHistoryMaxMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 26, 1, 12), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockHistoryMaxMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockHistoryMaxMeanPathDelay.setDescription('Max Mean Path Delay.')
f3PtpPTPClockHistoryAvgMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 26, 1, 13), ScaledNanoseconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockHistoryAvgMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockHistoryAvgMeanPathDelay.setDescription('Avg Mean Path Delay.')
f3PtpPTPClockThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 27), )
if mibBuilder.loadTexts: f3PtpPTPClockThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockThresholdTable.setDescription('A table of entries that allow manageability of \n             PTP Clock Thresholds.')
f3PtpPTPClockThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 27, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockStatsIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockThresholdIndex"))
if mibBuilder.loadTexts: f3PtpPTPClockThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockThresholdEntry.setDescription('A conceptual row in the f3PtpPTPClockThresholdTable.')
f3PtpPTPClockThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3PtpPTPClockThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3PtpPTPClockThresholdTable.')
f3PtpPTPClockThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 27, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3PtpPTPClockThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 27, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3PtpPTPClockThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 27, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3PtpPTPClockThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 27, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpPTPClockThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3PtpPTPClockThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 27, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpPTPClockThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockThresholdMonValue.setDescription('Monitored value corresponding to f3PtpPTPClockThresholdVariable.')
f3PtpL3PTPPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28), )
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsTable.setDescription('A collection of PTP Port related statistics.  \n             These reflect the current data.')
f3PtpL3PTPPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockIndex"), (0, "F3-PTP-MIB", "f3PtpL3PTPPortIndex"), (0, "F3-PTP-MIB", "f3PtpL3PTPPortStatsIndex"))
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsEntry.setDescription('A conceptual row in the f3PtpL3PTPPortStatsTable.\n             Entries exist in this table for each L3 PTP Port.')
f3PtpL3PTPPortStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this PTP Port statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3PtpL3PTPPortStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             15 Min, 1 Day or rollover.')
f3PtpL3PTPPortStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsValid.setDescription('Indicates the validity of the bin.')
f3PtpL3PTPPortStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAction.setDescription('Allows the Manager to clear the bin.')
f3PtpL3PTPPortStatsAvgAnnounceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAvgAnnounceRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAvgAnnounceRate.setDescription('Avg Announce Rate.')
f3PtpL3PTPPortStatsAvgSyncRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAvgSyncRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAvgSyncRate.setDescription('Avg Sync Rate.')
f3PtpL3PTPPortStatsAvgDelayReqRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAvgDelayReqRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAvgDelayReqRate.setDescription('Avg Delay Req Rate.')
f3PtpL3PTPPortStatsAvgDelayRespRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAvgDelayRespRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAvgDelayRespRate.setDescription('Avg Delay Resp Rate.')
f3PtpL3PTPPortStatsMismatchDomainDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMismatchDomainDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMismatchDomainDiscards.setDescription('Mismatch Domain Discards.')
f3PtpL3PTPPortStatsMessageWrongTypeDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMessageWrongTypeDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMessageWrongTypeDiscards.setDescription('Message Wrong Type Discards.')
f3PtpL3PTPPortStatsMessagesWrongLengthDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMessagesWrongLengthDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMessagesWrongLengthDiscards.setDescription('Messages Wrong Length Discards.')
f3PtpL3PTPPortStatsUnknownMasterDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsUnknownMasterDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsUnknownMasterDiscards.setDescription('Unknown Master Discards.')
f3PtpL3PTPPortStatsMinOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMinOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMinOffsetFromMaster.setDescription('Min Offset From Master.')
f3PtpL3PTPPortStatsMaxOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMaxOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMaxOffsetFromMaster.setDescription('Max Offset From Master.')
f3PtpL3PTPPortStatsAvgOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAvgOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAvgOffsetFromMaster.setDescription('Avg Offset From Master.')
f3PtpL3PTPPortStatsMinSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMinSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMinSyncPathDelay.setDescription('Min Sync Path Delay.')
f3PtpL3PTPPortStatsMaxSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMaxSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMaxSyncPathDelay.setDescription('Max Sync Path Delay.')
f3PtpL3PTPPortStatsAvgSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAvgSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAvgSyncPathDelay.setDescription('Avg Sync Path Delay.')
f3PtpL3PTPPortStatsMinMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMinMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMinMeanPathDelay.setDescription('Min Mean Path Delay.')
f3PtpL3PTPPortStatsMaxMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMaxMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMaxMeanPathDelay.setDescription('Max Mean Path Delay.')
f3PtpL3PTPPortStatsAvgMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAvgMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsAvgMeanPathDelay.setDescription('Avg Mean Path Delay.')
f3PtpL3PTPPortStatsMsgMiscDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 28, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMsgMiscDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpL3PTPPortStatsMsgMiscDiscards.setDescription('Number of received packets discarded due to miscellaneous reasons.')
f3PtpL3PTPPortHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29), )
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryTable.setDescription('A collection of PTP Port related statistics.  \n             These reflect the current data.')
f3PtpL3PTPPortHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockIndex"), (0, "F3-PTP-MIB", "f3PtpL3PTPPortIndex"), (0, "F3-PTP-MIB", "f3PtpL3PTPPortStatsIndex"), (0, "F3-PTP-MIB", "f3PtpL3PTPPortHistoryIndex"))
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryEntry.setDescription('A conceptual row in the f3PtpL3PTPPortHistoryTable.\n             Entries exist in this table for each PTP Port.')
f3PtpL3PTPPortHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this PTP Port statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3PtpL3PTPPortHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryTime.setDescription('Indicates the time of history bin creation.')
f3PtpL3PTPPortHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryValid.setDescription('Indicates the validity of the bin.')
f3PtpL3PTPPortHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3PtpL3PTPPortHistoryAvgAnnounceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAvgAnnounceRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAvgAnnounceRate.setDescription('Avg Announce Rate.')
f3PtpL3PTPPortHistoryAvgSyncRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAvgSyncRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAvgSyncRate.setDescription('Avg Sync Rate.')
f3PtpL3PTPPortHistoryAvgDelayReqRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAvgDelayReqRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAvgDelayReqRate.setDescription('Avg Delay Req Rate.')
f3PtpL3PTPPortHistoryAvgDelayRespRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAvgDelayRespRate.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAvgDelayRespRate.setDescription('Avg Delay Resp Rate.')
f3PtpL3PTPPortHistoryMismatchDomainDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMismatchDomainDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMismatchDomainDiscards.setDescription('Mismatch Domain Discards.')
f3PtpL3PTPPortHistoryMessageWrongTypeDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMessageWrongTypeDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMessageWrongTypeDiscards.setDescription('Message Wrong Type Discards.')
f3PtpL3PTPPortHistoryMessagesWrongLengthDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMessagesWrongLengthDiscards.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMessagesWrongLengthDiscards.setDescription('Messages Wrong Length Discards.')
f3PtpL3PTPPortHistoryUnknownMasterDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryUnknownMasterDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryUnknownMasterDiscards.setDescription('Unknown Master Discards.')
f3PtpL3PTPPortHistoryMinOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMinOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMinOffsetFromMaster.setDescription('Min Offset From Master.')
f3PtpL3PTPPortHistoryMaxOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMaxOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMaxOffsetFromMaster.setDescription('Max Offset From Master.')
f3PtpL3PTPPortHistoryAvgOffsetFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAvgOffsetFromMaster.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAvgOffsetFromMaster.setDescription('Avg Offset From Master.')
f3PtpL3PTPPortHistoryMinSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMinSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMinSyncPathDelay.setDescription('Min Sync Path Delay.')
f3PtpL3PTPPortHistoryMaxSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMaxSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMaxSyncPathDelay.setDescription('Max Sync Path Delay.')
f3PtpL3PTPPortHistoryAvgSyncPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAvgSyncPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAvgSyncPathDelay.setDescription('Avg Sync Path Delay.')
f3PtpL3PTPPortHistoryMinMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMinMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMinMeanPathDelay.setDescription('Min Mean Path Delay.')
f3PtpL3PTPPortHistoryMaxMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMaxMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMaxMeanPathDelay.setDescription('Max Mean Path Delay.')
f3PtpL3PTPPortHistoryAvgMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAvgMeanPathDelay.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryAvgMeanPathDelay.setDescription('Avg Mean Path Delay.')
f3PtpL3PTPPortHistoryMsgMiscDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 29, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMsgMiscDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: f3PtpL3PTPPortHistoryMsgMiscDiscards.setDescription('Number of received packets discarded due to miscellaneous reasons.')
f3PtpL3PTPPortThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 30), )
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdTable.setDescription('A table of entries that allow manageability of \n             PTP Port Thresholds.')
f3PtpL3PTPPortThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 30, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-PTP-MIB", "f3PtpPTPClockIndex"), (0, "F3-PTP-MIB", "f3PtpL3PTPPortIndex"), (0, "F3-PTP-MIB", "f3PtpL3PTPPortStatsIndex"), (0, "F3-PTP-MIB", "f3PtpL3PTPPortThresholdIndex"))
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdEntry.setDescription('A conceptual row in the f3PtpL3PTPPortThresholdTable.')
f3PtpL3PTPPortThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3PtpL3PTPPortThresholdTable.')
f3PtpL3PTPPortThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 30, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3PtpL3PTPPortThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 30, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3PtpL3PTPPortThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 30, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3PtpL3PTPPortThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 30, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3PtpL3PTPPortThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 2, 30, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortThresholdMonValue.setDescription('Monitored value corresponding to f3PtpL3PTPPortThresholdVariable.')
f3PtpAccPortFlowPointThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 3, 1)).setObjects(("F3-PTP-MIB", "f3PtpAccPortFlowPointThresholdIndex"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointThresholdInterval"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointThresholdVariable"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointThresholdValueLo"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointThresholdValueHi"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointThresholdMonValue"))
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3PtpAccPortFlowPointThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an PTP Access Port Flow Point is crossed.')
f3PtpNetPortFlowPointThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 3, 2)).setObjects(("F3-PTP-MIB", "f3PtpNetPortFlowPointThresholdIndex"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointThresholdInterval"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointThresholdVariable"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointThresholdValueLo"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointThresholdValueHi"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointThresholdMonValue"))
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3PtpNetPortFlowPointThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an PTP Network Port Flow Point is crossed.')
f3PtpSOOCCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 3, 3)).setObjects(("F3-PTP-MIB", "f3PtpSOOCThresholdIndex"), ("F3-PTP-MIB", "f3PtpSOOCThresholdInterval"), ("F3-PTP-MIB", "f3PtpSOOCThresholdVariable"), ("F3-PTP-MIB", "f3PtpSOOCThresholdValueLo"), ("F3-PTP-MIB", "f3PtpSOOCThresholdValueHi"), ("F3-PTP-MIB", "f3PtpSOOCThresholdMonValue"))
if mibBuilder.loadTexts: f3PtpSOOCCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3PtpSOOCCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an PTP Slave Only Ordinary Clock is crossed.')
f3PtpTSCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 3, 4)).setObjects(("F3-PTP-MIB", "f3PtpTSThresholdIndex"), ("F3-PTP-MIB", "f3PtpTSThresholdInterval"), ("F3-PTP-MIB", "f3PtpTSThresholdVariable"), ("F3-PTP-MIB", "f3PtpTSThresholdValueLo"), ("F3-PTP-MIB", "f3PtpTSThresholdValueHi"), ("F3-PTP-MIB", "f3PtpTSThresholdMonValue"))
if mibBuilder.loadTexts: f3PtpTSCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an PTP Telecom Slave is crossed.')
f3PtpMCICrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 3, 5)).setObjects(("F3-PTP-MIB", "f3PtpMCIThresholdIndex"), ("F3-PTP-MIB", "f3PtpMCIThresholdInterval"), ("F3-PTP-MIB", "f3PtpMCIThresholdVariable"), ("F3-PTP-MIB", "f3PtpMCIThresholdValueLo"), ("F3-PTP-MIB", "f3PtpMCIThresholdValueHi"), ("F3-PTP-MIB", "f3PtpMCIThresholdMonValue"))
if mibBuilder.loadTexts: f3PtpMCICrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3PtpMCICrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an PTP Master Clock Interface is crossed.')
f3PtpRemoteSlaveCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 3, 6)).setObjects(("F3-PTP-MIB", "f3PtpRemoteSlaveThresholdIndex"), ("F3-PTP-MIB", "f3PtpRemoteSlaveThresholdInterval"), ("F3-PTP-MIB", "f3PtpRemoteSlaveThresholdVariable"), ("F3-PTP-MIB", "f3PtpRemoteSlaveThresholdValueLo"), ("F3-PTP-MIB", "f3PtpRemoteSlaveThresholdValueHi"), ("F3-PTP-MIB", "f3PtpRemoteSlaveThresholdMonValue"))
if mibBuilder.loadTexts: f3PtpRemoteSlaveCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3PtpRemoteSlaveCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an PTP Remote Slave is crossed.')
f3PtpTrafficPortFlowPointThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 3, 7)).setObjects(("F3-PTP-MIB", "f3PtpTrafficPortFlowPointThresholdIndex"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointThresholdInterval"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointThresholdVariable"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointThresholdValueLo"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointThresholdValueHi"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointThresholdMonValue"))
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3PtpTrafficPortFlowPointThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an PTP Traffic Port Flow Point is crossed.')
f3PtpPTPPortCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 3, 8)).setObjects(("F3-PTP-MIB", "f3PtpPTPPortThresholdIndex"), ("F3-PTP-MIB", "f3PtpPTPPortThresholdInterval"), ("F3-PTP-MIB", "f3PtpPTPPortThresholdVariable"), ("F3-PTP-MIB", "f3PtpPTPPortThresholdValueLo"), ("F3-PTP-MIB", "f3PtpPTPPortThresholdValueHi"), ("F3-PTP-MIB", "f3PtpPTPPortThresholdMonValue"))
if mibBuilder.loadTexts: f3PtpPTPPortCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPPortCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an PTP PTPPort is crossed.')
f3PtpPTPClockCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 3, 9)).setObjects(("F3-PTP-MIB", "f3PtpPTPClockThresholdIndex"), ("F3-PTP-MIB", "f3PtpPTPClockThresholdInterval"), ("F3-PTP-MIB", "f3PtpPTPClockThresholdVariable"), ("F3-PTP-MIB", "f3PtpPTPClockThresholdValueLo"), ("F3-PTP-MIB", "f3PtpPTPClockThresholdValueHi"), ("F3-PTP-MIB", "f3PtpPTPClockThresholdMonValue"))
if mibBuilder.loadTexts: f3PtpPTPClockCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3PtpPTPClockCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an PTP PTPClock is crossed.')
f3PtpL3PTPPortCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 3, 10)).setObjects(("F3-PTP-MIB", "f3PtpL3PTPPortThresholdIndex"), ("F3-PTP-MIB", "f3PtpL3PTPPortThresholdInterval"), ("F3-PTP-MIB", "f3PtpL3PTPPortThresholdVariable"), ("F3-PTP-MIB", "f3PtpL3PTPPortThresholdValueLo"), ("F3-PTP-MIB", "f3PtpL3PTPPortThresholdValueHi"), ("F3-PTP-MIB", "f3PtpL3PTPPortThresholdMonValue"))
if mibBuilder.loadTexts: f3PtpL3PTPPortCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3PtpL3PTPPortCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an L3 PTP Port is crossed.')
f3PtpTSStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 5, 1)).setObjects(("F3-PTP-MIB", "f3PtpTSAdminState"), ("F3-PTP-MIB", "f3PtpTSCurrentCRScore"), ("F3-PTP-MIB", "f3PtpTSCurrentPRScore"), ("F3-PTP-MIB", "f3PtpTSClockRecoveryState"), ("F3-PTP-MIB", "f3PtpTSSelectedPacketClock"))
if mibBuilder.loadTexts: f3PtpTSStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: f3PtpTSStatusChangeTrap.setDescription('This trap is sent there is a status change on the Telecom Slave.')
f3PtpMasterClockStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 5, 2)).setObjects(("F3-PTP-MIB", "f3PtpMasterClockClockClass"), ("F3-PTP-MIB", "f3PtpMasterClockUtcOffset"), ("F3-PTP-MIB", "f3PtpMasterClockActiveTimeRef"), ("F3-PTP-MIB", "f3PtpMasterClockPTPProfile"))
if mibBuilder.loadTexts: f3PtpMasterClockStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: f3PtpMasterClockStatusChangeTrap.setDescription('This trap is sent there is a status change on the Master Clock.')
f3PtpBCStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 5, 3)).setObjects(("F3-PTP-MIB", "f3PtpBCClockClass"))
if mibBuilder.loadTexts: f3PtpBCStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: f3PtpBCStatusChangeTrap.setDescription('This trap is sent there is a status change on the Boundary Clock.')
f3PtpDynamicRemoteSlaveStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 5, 4)).setObjects(("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveClockIdentity"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveIpV4Address"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveSyncMsgRate"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveDelayRspMsgRate"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveAnnounceMsgRate"))
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: f3PtpDynamicRemoteSlaveStatusChangeTrap.setDescription('This trap is sent there is a status change on the Dynamic Remote Slave.')
f3PtpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 4, 1))
f3PtpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 4, 2))
f3PtpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 4, 1, 1)).setObjects(("F3-PTP-MIB", "f3PtpObjectGroup"), ("F3-PTP-MIB", "f3PtpPerfObjectGroup"), ("F3-PTP-MIB", "f3PtpPerfNotifGroup"), ("F3-PTP-MIB", "f3PtpStatusChangeNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PtpCompliance = f3PtpCompliance.setStatus('current')
if mibBuilder.loadTexts: f3PtpCompliance.setDescription('Describes the requirements for conformance to the F3 PTP\n             group.')
f3PtpObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 4, 2, 1))
for _f3PtpObjectGroup_obj in [[("F3-PTP-MIB", "f3PtpTCIndex"), ("F3-PTP-MIB", "f3PtpTCAlias"), ("F3-PTP-MIB", "f3PtpTCAdminState"), ("F3-PTP-MIB", "f3PtpTCOperationalState"), ("F3-PTP-MIB", "f3PtpTCSecondaryState"), ("F3-PTP-MIB", "f3PtpTCServiceFlow"), ("F3-PTP-MIB", "f3PtpTCDelayMechanism"), ("F3-PTP-MIB", "f3PtpTCSync"), ("F3-PTP-MIB", "f3PtpTCClockIdentity"), ("F3-PTP-MIB", "f3PtpTCStorageType"), ("F3-PTP-MIB", "f3PtpTCRowStatus"), ("F3-PTP-MIB", "f3PtpTCPtpProfile"), ("F3-PTP-MIB", "f3PtpTCVirtualPortIndex"), ("F3-PTP-MIB", "f3PtpTCVirtualPortAlias"), ("F3-PTP-MIB", "f3PtpTCVirtualPortAdminState"), ("F3-PTP-MIB", "f3PtpTCVirtualPortOperationalState"), ("F3-PTP-MIB", "f3PtpTCVirtualPortSecondaryState"), ("F3-PTP-MIB", "f3PtpTCVirtualPortIdentity"), ("F3-PTP-MIB", "f3PtpTCVirtualPortFlowPoint"), ("F3-PTP-MIB", "f3PtpTCVirtualPortStorageType"), ("F3-PTP-MIB", "f3PtpTCVirtualPortRowStatus"), ("F3-PTP-MIB", "f3PtpTSIndex"), ("F3-PTP-MIB", "f3PtpTSAlias"), ("F3-PTP-MIB", "f3PtpTSAdminState"), ("F3-PTP-MIB", "f3PtpTSOperationalState"), ("F3-PTP-MIB", "f3PtpTSSecondaryState"), ("F3-PTP-MIB", "f3PtpTSClockIdentity"), ("F3-PTP-MIB", "f3PtpTSDomainNumber"), ("F3-PTP-MIB", "f3PtpTSSync"), ("F3-PTP-MIB", "f3PtpTSCurrentTOD"), ("F3-PTP-MIB", "f3PtpTSSelectedPacketClock"), ("F3-PTP-MIB", "f3PtpTSClockRecoveryMode"), ("F3-PTP-MIB", "f3PtpTSClockRecoveryState"), ("F3-PTP-MIB", "f3PtpTSClockSyncEEnabled"), ("F3-PTP-MIB", "f3PtpTSClockQLModeEnabled"), ("F3-PTP-MIB", "f3PtpTSClockExpectedQL"), ("F3-PTP-MIB", "f3PtpTSClockAssumedQL"), ("F3-PTP-MIB", "f3PtpTSClockReceivedQL"), ("F3-PTP-MIB", "f3PtpTSStorageType"), ("F3-PTP-MIB", "f3PtpTSRowStatus"), ("F3-PTP-MIB", "f3PtpTSTimeTraceabilityStatus"), ("F3-PTP-MIB", "f3PtpTSTimeSinceTimeTraceabilityChanged"), ("F3-PTP-MIB", "f3PtpTSFreqTraceabilityStatus"), ("F3-PTP-MIB", "f3PtpTSTimeSinceFreqTraceabilityChanged"), ("F3-PTP-MIB", "f3PtpTSFreqRecoveryTarget"), ("F3-PTP-MIB", "f3PtpTSCurrentCRScore"), ("F3-PTP-MIB", "f3PtpTSTimeLastCRScore"), ("F3-PTP-MIB", "f3PtpTSTargetPhaseRecoveryAccuracy"), ("F3-PTP-MIB", "f3PtpTSCurrentPRScore"), ("F3-PTP-MIB", "f3PtpTSTimeLastPRScore"), ("F3-PTP-MIB", "f3PtpTSClockClass"), ("F3-PTP-MIB", "f3PtpTSClockAccuracy"), ("F3-PTP-MIB", "f3PtpTSTimeSource"), ("F3-PTP-MIB", "f3PtpTSPhaseRecoveryState"), ("F3-PTP-MIB", "f3PtpTSTimeHoldoverAccuracy"), ("F3-PTP-MIB", "f3PtpSOOCIndex"), ("F3-PTP-MIB", "f3PtpSOOCName"), ("F3-PTP-MIB", "f3PtpSOOCAlias"), ("F3-PTP-MIB", "f3PtpSOOCAdminState"), ("F3-PTP-MIB", "f3PtpSOOCOperationalState"), ("F3-PTP-MIB", "f3PtpSOOCSecondaryState"), ("F3-PTP-MIB", "f3PtpSOOCServiceFlow"), ("F3-PTP-MIB", "f3PtpSOOCMasterClockType"), ("F3-PTP-MIB", "f3PtpSOOCUnicastMessageNegEnabled"), ("F3-PTP-MIB", "f3PtpSOOCMasterDelayMechanism"), ("F3-PTP-MIB", "f3PtpSOOCMasterPriority"), ("F3-PTP-MIB", "f3PtpSOOCMasterIpProtocol"), ("F3-PTP-MIB", "f3PtpSOOCSlaveIpV4Address"), ("F3-PTP-MIB", "f3PtpSOOCSlaveIpV4SubnetMask"), ("F3-PTP-MIB", "f3PtpSOOCMasterIpV4Address"), ("F3-PTP-MIB", "f3PtpSOOCIpPriorityMapMode"), ("F3-PTP-MIB", "f3PtpSOOCIpPriority"), ("F3-PTP-MIB", "f3PtpSOOCMasterLeaseDuration"), ("F3-PTP-MIB", "f3PtpSOOCMasterAnnounceMsgRate"), ("F3-PTP-MIB", "f3PtpSOOCMasterAnnounceMsgReceiptTimeout"), ("F3-PTP-MIB", "f3PtpSOOCMasterSyncMsgRate"), ("F3-PTP-MIB", "f3PtpSOOCMasterSyncReceiptTimeout"), ("F3-PTP-MIB", "f3PtpSOOCMasterDelayRspMsgRate"), ("F3-PTP-MIB", "f3PtpSOOCMasterDelayRspReceiptTimeout"), ("F3-PTP-MIB", "f3PtpSOOCMasterRequestUnicastTimeout"), ("F3-PTP-MIB", "f3PtpSOOCMasterRequestUnicastRestartTimer"), ("F3-PTP-MIB", "f3PtpSOOCCurrentOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpSOOCAnnounceMsgClockClass"), ("F3-PTP-MIB", "f3PtpSOOCLastReceivedAnnounceMsg"), ("F3-PTP-MIB", "f3PtpSOOCLastReceivedSyncMsg"), ("F3-PTP-MIB", "f3PtpSOOCLastReceivedDelayRspMsg"), ("F3-PTP-MIB", "f3PtpSOOCRecentMeanPathDelay"), ("F3-PTP-MIB", "f3PtpSOOCRecentSyncPDV"), ("F3-PTP-MIB", "f3PtpSOOCStorageType"), ("F3-PTP-MIB", "f3PtpSOOCRowStatus"), ("F3-PTP-MIB", "f3PtpSOOCRecentSyncPathDelay"), ("F3-PTP-MIB", "f3PtpSOOCSoocProtectionState"), ("F3-PTP-MIB", "f3PtpSOOCSoocWtr"), ("F3-PTP-MIB", "f3PtpSOOCSoocClockClass"), ("F3-PTP-MIB", "f3PtpSOOCSoocClockRecoveryState"), ("F3-PTP-MIB", "f3PtpSOOCSoocPhaseRecoveryState"), ("F3-PTP-MIB", "f3PtpSOOCE2eDelayAsymmetryComp"), ("F3-PTP-MIB", "f3PtpSOOCE2eAutoAsymmetryCompStatus"), ("F3-PTP-MIB", "f3PtpSOOCE2eDelayAsymmetry"), ("F3-PTP-MIB", "f3PtpSOOCSoocLockOutControl"), ("F3-PTP-MIB", "f3PtpSOOCSlaveIpV6Address"), ("F3-PTP-MIB", "f3PtpSOOCSlaveIpV6AddrPrefixLength"), ("F3-PTP-MIB", "f3PtpSOOCMasterIpV6Address"), ("F3-PTP-MIB", "f3PtpSOOCMinimumExpectedClockClass"), ("F3-PTP-MIB", "f3PtpSOOCMasterMessageMode"), ("F3-PTP-MIB", "f3PtpSOOCDefaultGatewayControl"), ("F3-PTP-MIB", "f3PtpSOOCGateway"), ("F3-PTP-MIB", "f3PtpSOOCIpV6Gateway"), ("F3-PTP-MIB", "f3PtpSOOCAlgorithmPtpAware"), ("F3-PTP-MIB", "f3PtpOCSlaveVirtualPortIndex"), ("F3-PTP-MIB", "f3PtpOCSlaveVirtualPortAlias"), ("F3-PTP-MIB", "f3PtpOCSlaveVirtualPortAdminState"), ("F3-PTP-MIB", "f3PtpOCSlaveVirtualPortOperationalState"), ("F3-PTP-MIB", "f3PtpOCSlaveVirtualPortSecondaryState"), ("F3-PTP-MIB", "f3PtpOCSlaveVirtualPortIdentity"), ("F3-PTP-MIB", "f3PtpOCSlaveVirtualPortFlowPoint"), ("F3-PTP-MIB", "f3PtpOCSlaveVirtualPortState"), ("F3-PTP-MIB", "f3PtpOCSlaveVirtualPortStorageType"), ("F3-PTP-MIB", "f3PtpOCSlaveVirtualPortRowStatus"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointIndex"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointAlias"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointAdminState"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointOperationalState"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointSecondaryState"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointType"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointClock"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointService"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointOuterVlanEtherType"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointOuterVlanMemberList"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointOuterUntaggedEnabled"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointInner1VlanEtherType"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointInner1VlanMemberList"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointInner1UntaggedEnabled"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointInner2VlanEtherType"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointInner2VlanMemberList"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointInner2UntaggedEnabled"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStorageType"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointRowStatus"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointCOS"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointCIRLo"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointCIRHi"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointEIRLo"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointEIRHi"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointBufferSize"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointLoopAvoidance"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointRefConnectGuardFlow"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointSecureState"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointSecureBlockingEnabled"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointIndex"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointAlias"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointAdminState"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointOperationalState"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointSecondaryState"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointType"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointClock"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointService"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointOuterVlanEtherType"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointOuterVlanMemberList"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointOuterUntaggedEnabled"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointInner1VlanEtherType"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointInner1VlanMemberList"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointInner1UntaggedEnabled"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointInner2VlanEtherType"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointInner2VlanMemberList"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointInner2UntaggedEnabled"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStorageType"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointRowStatus"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointCOS"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointCIRLo"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointCIRHi"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointEIRLo"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointEIRHi"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointBufferSize"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointLoopAvoidance"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointRefConnectGuardFlow"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointSecureState"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointSecureBlockingEnabled"), ("F3-PTP-MIB", "f3PtpEthernetAccPortDelayAsymmetry"), ("F3-PTP-MIB", "f3PtpEthernetNetPortDelayAsymmetry"), ("F3-PTP-MIB", "f3PtpSysTimeOfDayClock"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointIndex"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointAlias"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointAdminState"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointOperationalState"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointSecondaryState"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointType"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointClock"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointService"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointOuterVlanEtherType"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointOuterVlanMemberList"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointOuterUntaggedEnabled"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointInner1VlanEtherType"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointInner1VlanMemberList"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointInner1UntaggedEnabled"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointInner2VlanEtherType"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointInner2VlanMemberList"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointInner2UntaggedEnabled"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStorageType"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointRowStatus"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointCOS"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointCIRLo"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointCIRHi"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointEIRLo"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointEIRHi"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointAssociatedQueueProfile"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointLoopAvoidance"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointBufferSize"), ("F3-PTP-MIB", "f3PtpEthernetTrafficPortDelayAsymmetry"), ("F3-PTP-MIB", "f3PtpPTPClockIndex"), ("F3-PTP-MIB", "f3PtpPTPClockAdminState"), ("F3-PTP-MIB", "f3PtpPTPClockAlias"), ("F3-PTP-MIB", "f3PtpPTPClockOperationalState"), ("F3-PTP-MIB", "f3PtpPTPClockSecondaryState"), ("F3-PTP-MIB", "f3PtpPTPClockProfile"), ("F3-PTP-MIB", "f3PtpPTPClockClockType"), ("F3-PTP-MIB", "f3PtpPTPClockOperationalMode"), ("F3-PTP-MIB", "f3PtpPTPClockClockIdentity"), ("F3-PTP-MIB", "f3PtpPTPClockDomainNumber"), ("F3-PTP-MIB", "f3PtpPTPClockTimeSource"), ("F3-PTP-MIB", "f3PtpPTPClockPriority1"), ("F3-PTP-MIB", "f3PtpPTPClockPriority2"), ("F3-PTP-MIB", "f3PtpPTPClockLocalPriority"), ("F3-PTP-MIB", "f3PtpPTPClockClockAccuracy"), ("F3-PTP-MIB", "f3PtpPTPClockScaledLogVariance"), ("F3-PTP-MIB", "f3PtpPTPClockSyncEid"), ("F3-PTP-MIB", "f3PtpPTPClockCurrentTimeOfDay"), ("F3-PTP-MIB", "f3PtpPTPClockActiveSlavePort"), ("F3-PTP-MIB", "f3PtpPTPClockClockRecoveryState"), ("F3-PTP-MIB", "f3PtpPTPClockPhaseRecoveryState"), ("F3-PTP-MIB", "f3PtpPTPClockTimeTraceabilityStatus"), ("F3-PTP-MIB", "f3PtpPTPClockTimeSinceTimeTraceabilityChanged"), ("F3-PTP-MIB", "f3PtpPTPClockFreqTraceabilityStatus"), ("F3-PTP-MIB", "f3PtpPTPClockTimeSinceFreqTraceabilityChanged"), ("F3-PTP-MIB", "f3PtpPTPClockClockSyncEEnabled"), ("F3-PTP-MIB", "f3PtpPTPClockClockQLModeEnabled"), ("F3-PTP-MIB", "f3PtpPTPClockClockExpectedQL"), ("F3-PTP-MIB", "f3PtpPTPClockClockAssumedQL"), ("F3-PTP-MIB", "f3PtpPTPClockClockReceivedQL"), ("F3-PTP-MIB", "f3PtpPTPClockCurrentOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpPTPClockRecentMeanPathDelay"), ("F3-PTP-MIB", "f3PtpPTPClockRecentSyncPDV"), ("F3-PTP-MIB", "f3PtpPTPClockClockClass"), ("F3-PTP-MIB", "f3PtpPTPClockPhysicalEntityIndex"), ("F3-PTP-MIB", "f3PtpPTPClockActiveGrantsAnnounceService"), ("F3-PTP-MIB", "f3PtpPTPClockActiveGrantsSyncService"), ("F3-PTP-MIB", "f3PtpPTPClockActiveGrantsDelayRequestService"), ("F3-PTP-MIB", "f3PtpPTPClockMaxStepRemoved"), ("F3-PTP-MIB", "f3PtpPTPClockServiceAvailableTime"), ("F3-PTP-MIB", "f3PtpPTPClockServiceUnavailableTime"), ("F3-PTP-MIB", "f3PtpPTPClockServiceAvailablePercentage"), ("F3-PTP-MIB", "f3PtpPTPClockGrandMasterID"), ("F3-PTP-MIB", "f3PtpPTPClockTimeInaccuracy"), ("F3-PTP-MIB", "f3PtpPTPClockNetworkTimeInaccuracy"), ("F3-PTP-MIB", "f3PtpPTPClockStorageType"), ("F3-PTP-MIB", "f3PtpPTPClockRowStatus")], [("F3-PTP-MIB", "f3PtpPTPPortIndex"), ("F3-PTP-MIB", "f3PtpPTPPortAdminState"), ("F3-PTP-MIB", "f3PtpPTPPortAlias"), ("F3-PTP-MIB", "f3PtpPTPPortOperationalState"), ("F3-PTP-MIB", "f3PtpPTPPortSecondaryState"), ("F3-PTP-MIB", "f3PtpPTPPortPeerPortIdentity"), ("F3-PTP-MIB", "f3PtpPTPPortLocalPriority"), ("F3-PTP-MIB", "f3PtpPTPPortPtpFlowPointEid"), ("F3-PTP-MIB", "f3PtpPTPPortNotSlave"), ("F3-PTP-MIB", "f3PtpPTPPortTxDestMacAddress"), ("F3-PTP-MIB", "f3PtpPTPPortSyncMessageRate"), ("F3-PTP-MIB", "f3PtpPTPPortmDelayReqRespMsgRate"), ("F3-PTP-MIB", "f3PtpPTPPortmAnnounceMsgRate"), ("F3-PTP-MIB", "f3PtpPTPPortAnnounceReceiptTimeout"), ("F3-PTP-MIB", "f3PtpPTPPortSyncReceiptTimeout"), ("F3-PTP-MIB", "f3PtpPTPPortDelayRespTimeout"), ("F3-PTP-MIB", "f3PtpPTPPortPortState"), ("F3-PTP-MIB", "f3PtpPTPPortBmcaDecisionCode"), ("F3-PTP-MIB", "f3PtpPTPPortClockClass"), ("F3-PTP-MIB", "f3PtpPTPPortPeerPortMacAddress"), ("F3-PTP-MIB", "f3PtpPTPPortRowStatus"), ("F3-PTP-MIB", "f3PtpPTPPortPortIdentity"), ("F3-PTP-MIB", "f3PtpPTPPortMasterClockType"), ("F3-PTP-MIB", "f3PtpPTPPortLastRcvdAnnounceMsg"), ("F3-PTP-MIB", "f3PtpPTPPortLastRcvdSyncMsg"), ("F3-PTP-MIB", "f3PtpPTPPortLastRcvdDelayReqMsg"), ("F3-PTP-MIB", "f3PtpPTPPortLastRcvdDelayRspMsg"), ("F3-PTP-MIB", "f3PtpPTPPortMasterOnly"), ("F3-PTP-MIB", "f3PtpPTPPortPeerClockClass"), ("F3-PTP-MIB", "f3PtpPTPPortMinimumExpectedClockClass"), ("F3-PTP-MIB", "f3PtpPTPPortDelayAsymmetryComp"), ("F3-PTP-MIB", "f3PtpPTPPortAutoAsymmetryCompStatus"), ("F3-PTP-MIB", "f3PtpPTPPortDelayAsymmetry"), ("F3-PTP-MIB", "f3PtpPTPPortVirtualPortCtrl"), ("F3-PTP-MIB", "f3PtpPTPPortDelayResponderType"), ("F3-PTP-MIB", "f3PtpPTPPortTimeTraceable"), ("F3-PTP-MIB", "f3PtpPTPPortFrequencyTraceable"), ("F3-PTP-MIB", "f3PtpL2DynamicRemoteSlaveIndex"), ("F3-PTP-MIB", "f3PtpL2DynamicRemoteSlavePortIdentity"), ("F3-PTP-MIB", "f3PtpL2DynamicRemoteSlaveClockIdentity"), ("F3-PTP-MIB", "f3PtpL2DynamicRemoteSlaveMacAddress"), ("F3-PTP-MIB", "f3PtpL2DynamicRemoteSlaveRowStatus"), ("F3-PTP-MIB", "f3PtpL2DynamicRemoteSlaveStorageType"), ("F3-PTP-MIB", "f3PtpL3PTPPortIndex"), ("F3-PTP-MIB", "f3PtpL3PTPPortAdminState"), ("F3-PTP-MIB", "f3PtpL3PTPPortAlias"), ("F3-PTP-MIB", "f3PtpL3PTPPortOperationalState"), ("F3-PTP-MIB", "f3PtpL3PTPPortSecondaryState"), ("F3-PTP-MIB", "f3PtpL3PTPPortPortIdentity"), ("F3-PTP-MIB", "f3PtpL3PTPPortLocalPriority"), ("F3-PTP-MIB", "f3PtpL3PTPPortPtpFlowPointEid"), ("F3-PTP-MIB", "f3PtpL3PTPPortSyncMessageRate"), ("F3-PTP-MIB", "f3PtpL3PTPPortDelayReqRespMsgRate"), ("F3-PTP-MIB", "f3PtpL3PTPPortAnnounceMsgRate"), ("F3-PTP-MIB", "f3PtpL3PTPPortAnnounceReceiptTimeout"), ("F3-PTP-MIB", "f3PtpL3PTPPortSyncReceiptTimeout"), ("F3-PTP-MIB", "f3PtpL3PTPPortDelayRespTimeout"), ("F3-PTP-MIB", "f3PtpL3PTPPortPortState"), ("F3-PTP-MIB", "f3PtpL3PTPPortBmcaDecisionCode"), ("F3-PTP-MIB", "f3PtpL3PTPPortPeerClockClass"), ("F3-PTP-MIB", "f3PtpL3PTPPortMinimumExpectedClockClass"), ("F3-PTP-MIB", "f3PtpL3PTPPortIpProtocol"), ("F3-PTP-MIB", "f3PtpL3PTPPortIfName"), ("F3-PTP-MIB", "f3PtpL3PTPPortIpPriorityMapMode"), ("F3-PTP-MIB", "f3PtpL3PTPPortIpPriority"), ("F3-PTP-MIB", "f3PtpL3PTPPortIpV4Address"), ("F3-PTP-MIB", "f3PtpL3PTPPortIpV4SubnetMask"), ("F3-PTP-MIB", "f3PtpL3PTPPortIpV6Address"), ("F3-PTP-MIB", "f3PtpL3PTPPortIpV6AddrPrefixLength"), ("F3-PTP-MIB", "f3PtpL3PTPPortDefaultGatewayControl"), ("F3-PTP-MIB", "f3PtpL3PTPPortGateway"), ("F3-PTP-MIB", "f3PtpL3PTPPortIpV6Gateway"), ("F3-PTP-MIB", "f3PtpL3PTPPortUnicastMessageNegEnabled"), ("F3-PTP-MIB", "f3PtpL3PTPPortTransmitDuration"), ("F3-PTP-MIB", "f3PtpL3PTPPortRequestUnicastTimeout"), ("F3-PTP-MIB", "f3PtpL3PTPPortRequestUnicastRestartTimer"), ("F3-PTP-MIB", "f3PtpL3PTPPortMasterIpV4Address"), ("F3-PTP-MIB", "f3PtpL3PTPPortMasterIpV6Address"), ("F3-PTP-MIB", "f3PtpL3PTPPortDelayAsymmetryComp"), ("F3-PTP-MIB", "f3PtpL3PTPPortAutoAsymmetryCompStatus"), ("F3-PTP-MIB", "f3PtpL3PTPPortDelayAsymmetry"), ("F3-PTP-MIB", "f3PtpL3PTPPortStorageType"), ("F3-PTP-MIB", "f3PtpL3PTPPortRowStatus")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        f3PtpObjectGroup = f3PtpObjectGroup.setObjects(*_f3PtpObjectGroup_obj)
    else:
        f3PtpObjectGroup = f3PtpObjectGroup.setObjects(*_f3PtpObjectGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PtpObjectGroup = f3PtpObjectGroup.setStatus('current')
if mibBuilder.loadTexts: f3PtpObjectGroup.setDescription('A collection of objects used to manage the F3 PTP Configuration data.')
f3PtpPerfObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 4, 2, 2))
for _f3PtpPerfObjectGroup_obj in [[("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsIndex"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsIntervalType"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsValid"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsAction"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsAnnouncesRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsAnnouncesTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsSyncsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsSyncsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsFollowupsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsFollowupsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsDelayReqsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsDelayReqsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsDelayRspsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsDelayRspsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsPDelayReqsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsPDelayReqsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsPDelayRspsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsPDelayRspsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsPDelayRspFollowupsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsPDelayRspFollowupsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsSignalingRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsSignalingTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsMgmtFramesRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsMgmtFramesTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsPtpUnknownsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsPtpUnknownsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsAvgSyncResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsMinSyncResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsMaxSyncResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsAvgDelayReqResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsMinDelayReqResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsMaxDelayReqResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsMinPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsMaxPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsAvgPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsMinPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsMaxPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsAvgPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointStatsDestMciNoMatchDiscards"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryIndex"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryValid"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryAction"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryAnnouncesRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryAnnouncesTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistorySyncsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistorySyncsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryFollowupsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryFollowupsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryDelayReqsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryDelayReqsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryDelayRspsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryDelayRspsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryPDelayReqsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryPDelayReqsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryPDelayRspsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryPDelayRspsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryPDelayRspFollowupsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryPDelayRspFollowupsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistorySignalingRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistorySignalingTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryMgmtFramesRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryMgmtFramesTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryPtpUnknownsRx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryPtpUnknownsTx"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryAvgSyncResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryMinSyncResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryMaxSyncResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryAvgDelayReqResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryMinDelayReqResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryMaxDelayReqResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryMinPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryMaxPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryAvgPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryMinPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryMaxPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryAvgPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointHistoryDestMciNoMatchDiscards"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointThresholdIndex"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointThresholdInterval"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointThresholdVariable"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointThresholdValueLo"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointThresholdValueHi"), ("F3-PTP-MIB", "f3PtpAccPortFlowPointThresholdMonValue"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsIndex"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsIntervalType"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsValid"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsAction"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsAnnouncesRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsAnnouncesTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsSyncsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsSyncsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsFollowupsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsFollowupsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsDelayReqsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsDelayReqsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsDelayRspsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsDelayRspsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsPDelayReqsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsPDelayReqsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsPDelayRspsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsPDelayRspsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsPDelayRspFollowupsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsPDelayRspFollowupsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsSignalingRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsSignalingTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsMgmtFramesRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsMgmtFramesTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsPtpUnknownsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsPtpUnknownsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsAvgSyncResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsMinSyncResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsMaxSyncResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsAvgDelayReqResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsMinDelayReqResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsMaxDelayReqResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsMinPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsMaxPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsAvgPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsMinPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsMaxPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsAvgPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointStatsDestMciNoMatchDiscards"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryIndex"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryValid"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryAction"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryAnnouncesRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryAnnouncesTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistorySyncsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistorySyncsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryFollowupsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryFollowupsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryDelayReqsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryDelayReqsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryDelayRspsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryDelayRspsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryPDelayReqsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryPDelayReqsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryPDelayRspsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryPDelayRspsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryPDelayRspFollowupsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryPDelayRspFollowupsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistorySignalingRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistorySignalingTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryMgmtFramesRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryMgmtFramesTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryPtpUnknownsRx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryPtpUnknownsTx"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryAvgSyncResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryMinSyncResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryMaxSyncResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryAvgDelayReqResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryMinDelayReqResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryMaxDelayReqResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryMinPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryMaxPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryAvgPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryMinPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryMaxPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryAvgPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointHistoryDestMciNoMatchDiscards"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointThresholdIndex"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointThresholdInterval"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointThresholdVariable"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointThresholdValueLo"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointThresholdValueHi"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointThresholdMonValue"), ("F3-PTP-MIB", "f3PtpSOOCStatsIndex"), ("F3-PTP-MIB", "f3PtpSOOCStatsIntervalType"), ("F3-PTP-MIB", "f3PtpSOOCStatsValid"), ("F3-PTP-MIB", "f3PtpSOOCStatsAction"), ("F3-PTP-MIB", "f3PtpSOOCStatsMinOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpSOOCStatsMaxOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpSOOCStatsAvgOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpSOOCStatsMinMeanPathDelay"), ("F3-PTP-MIB", "f3PtpSOOCStatsMaxMeanPathDelay"), ("F3-PTP-MIB", "f3PtpSOOCStatsAvgMeanPathDelay"), ("F3-PTP-MIB", "f3PtpSOOCStatsMinSyncPathDelay"), ("F3-PTP-MIB", "f3PtpSOOCStatsMaxSyncPathDelay"), ("F3-PTP-MIB", "f3PtpSOOCStatsAvgSyncPathDelay"), ("F3-PTP-MIB", "f3PtpSOOCStatsMinSyncPDV"), ("F3-PTP-MIB", "f3PtpSOOCStatsMaxSyncPDV"), ("F3-PTP-MIB", "f3PtpSOOCStatsAvgSyncPDV"), ("F3-PTP-MIB", "f3PtpSOOCStatsMgmtMsgsDiscarded"), ("F3-PTP-MIB", "f3PtpSOOCStatsInvalidMsgLenDiscards"), ("F3-PTP-MIB", "f3PtpSOOCStatsUnknownMasterDiscards"), ("F3-PTP-MIB", "f3PtpSOOCStatsUnknownDomainDiscards"), ("F3-PTP-MIB", "f3PtpSOOCStatsMulticastAnnounceDiscards"), ("F3-PTP-MIB", "f3PtpSOOCStatsOutOfSeqAnnounceMsgs"), ("F3-PTP-MIB", "f3PtpSOOCStatsMulticastSyncDiscards"), ("F3-PTP-MIB", "f3PtpSOOCStatsTwoStepSyncDiscards"), ("F3-PTP-MIB", "f3PtpSOOCStatsFollowupDiscards"), ("F3-PTP-MIB", "f3PtpSOOCStatsDelayReqDiscards"), ("F3-PTP-MIB", "f3PtpSOOCStatsPDelayReqDiscards"), ("F3-PTP-MIB", "f3PtpSOOCStatsPDelayRspDiscards"), ("F3-PTP-MIB", "f3PtpSOOCStatsPDelayFollowupDiscards"), ("F3-PTP-MIB", "f3PtpSOOCStatsInvalidTLVLenDiscards"), ("F3-PTP-MIB", "f3PtpSOOCStatsInvalidTLVTypeDiscards"), ("F3-PTP-MIB", "f3PtpSOOCStatsMaxFwdFlowWeight"), ("F3-PTP-MIB", "f3PtpSOOCStatsAvgFwdFlowWeight"), ("F3-PTP-MIB", "f3PtpSOOCStatsMinRevFlowWeight"), ("F3-PTP-MIB", "f3PtpSOOCStatsMaxRevFlowWeight"), ("F3-PTP-MIB", "f3PtpSOOCStatsAvgRevFlowWeight"), ("F3-PTP-MIB", "f3PtpSOOCStatsNumClockRecTransients"), ("F3-PTP-MIB", "f3PtpSOOCHistoryIndex"), ("F3-PTP-MIB", "f3PtpSOOCHistoryTime"), ("F3-PTP-MIB", "f3PtpSOOCHistoryValid"), ("F3-PTP-MIB", "f3PtpSOOCHistoryAction"), ("F3-PTP-MIB", "f3PtpSOOCHistoryMinOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpSOOCHistoryMaxOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpSOOCHistoryAvgOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpSOOCHistoryMinMeanPathDelay"), ("F3-PTP-MIB", "f3PtpSOOCHistoryMaxMeanPathDelay"), ("F3-PTP-MIB", "f3PtpSOOCHistoryAvgMeanPathDelay"), ("F3-PTP-MIB", "f3PtpSOOCHistoryMinSyncPathDelay"), ("F3-PTP-MIB", "f3PtpSOOCHistoryMaxSyncPathDelay"), ("F3-PTP-MIB", "f3PtpSOOCHistoryAvgSyncPathDelay"), ("F3-PTP-MIB", "f3PtpSOOCHistoryMinSyncPDV"), ("F3-PTP-MIB", "f3PtpSOOCHistoryMaxSyncPDV"), ("F3-PTP-MIB", "f3PtpSOOCHistoryAvgSyncPDV"), ("F3-PTP-MIB", "f3PtpSOOCHistoryMgmtMsgsDiscarded"), ("F3-PTP-MIB", "f3PtpSOOCHistoryInvalidMsgLenDiscards"), ("F3-PTP-MIB", "f3PtpSOOCHistoryUnknownMasterDiscards"), ("F3-PTP-MIB", "f3PtpSOOCHistoryUnknownDomainDiscards"), ("F3-PTP-MIB", "f3PtpSOOCHistoryMulticastAnnounceDiscards"), ("F3-PTP-MIB", "f3PtpSOOCHistoryOutOfSeqAnnounceMsgs"), ("F3-PTP-MIB", "f3PtpSOOCHistoryMulticastSyncDiscards"), ("F3-PTP-MIB", "f3PtpSOOCHistoryTwoStepSyncDiscards"), ("F3-PTP-MIB", "f3PtpSOOCHistoryFollowupDiscards"), ("F3-PTP-MIB", "f3PtpSOOCHistoryDelayReqDiscards"), ("F3-PTP-MIB", "f3PtpSOOCHistoryPDelayReqDiscards"), ("F3-PTP-MIB", "f3PtpSOOCHistoryPDelayRspDiscards"), ("F3-PTP-MIB", "f3PtpSOOCHistoryPDelayFollowupDiscards"), ("F3-PTP-MIB", "f3PtpSOOCHistoryInvalidTLVLenDiscards"), ("F3-PTP-MIB", "f3PtpSOOCHistoryInvalidTLVTypeDiscards"), ("F3-PTP-MIB", "f3PtpSOOCHistoryMaxFwdFlowWeight"), ("F3-PTP-MIB", "f3PtpSOOCHistoryAvgFwdFlowWeight"), ("F3-PTP-MIB", "f3PtpSOOCHistoryMinRevFlowWeight"), ("F3-PTP-MIB", "f3PtpSOOCHistoryMaxRevFlowWeight"), ("F3-PTP-MIB", "f3PtpSOOCHistoryAvgRevFlowWeight"), ("F3-PTP-MIB", "f3PtpSOOCHistoryNumClockRecTransients"), ("F3-PTP-MIB", "f3PtpSOOCThresholdIndex"), ("F3-PTP-MIB", "f3PtpSOOCThresholdInterval"), ("F3-PTP-MIB", "f3PtpSOOCThresholdVariable"), ("F3-PTP-MIB", "f3PtpSOOCThresholdValueLo"), ("F3-PTP-MIB", "f3PtpSOOCThresholdValueHi"), ("F3-PTP-MIB", "f3PtpSOOCThresholdMonValue"), ("F3-PTP-MIB", "f3PtpTSStatsIndex"), ("F3-PTP-MIB", "f3PtpTSStatsIntervalType"), ("F3-PTP-MIB", "f3PtpTSStatsValid"), ("F3-PTP-MIB", "f3PtpTSStatsAction"), ("F3-PTP-MIB", "f3PtpTSStatsTotalTimeCR5"), ("F3-PTP-MIB", "f3PtpTSStatsTotalTimeCR4"), ("F3-PTP-MIB", "f3PtpTSStatsTotalTimeCR3")], [("F3-PTP-MIB", "f3PtpTSStatsTotalTimePR5"), ("F3-PTP-MIB", "f3PtpTSStatsTotalTimePR4"), ("F3-PTP-MIB", "f3PtpTSStatsTotalTimePR3"), ("F3-PTP-MIB", "f3PtpTSHistoryIndex"), ("F3-PTP-MIB", "f3PtpTSHistoryTime"), ("F3-PTP-MIB", "f3PtpTSHistoryValid"), ("F3-PTP-MIB", "f3PtpTSHistoryAction"), ("F3-PTP-MIB", "f3PtpTSHistoryTotalTimeCR5"), ("F3-PTP-MIB", "f3PtpTSHistoryTotalTimeCR4"), ("F3-PTP-MIB", "f3PtpTSHistoryTotalTimeCR3"), ("F3-PTP-MIB", "f3PtpTSHistoryTotalTimePR5"), ("F3-PTP-MIB", "f3PtpTSHistoryTotalTimePR4"), ("F3-PTP-MIB", "f3PtpTSHistoryTotalTimePR3"), ("F3-PTP-MIB", "f3PtpTSThresholdIndex"), ("F3-PTP-MIB", "f3PtpTSThresholdInterval"), ("F3-PTP-MIB", "f3PtpTSThresholdVariable"), ("F3-PTP-MIB", "f3PtpTSThresholdValueLo"), ("F3-PTP-MIB", "f3PtpTSThresholdValueHi"), ("F3-PTP-MIB", "f3PtpTSThresholdMonValue"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsIndex"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsIntervalType"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsValid"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsAction"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsAnnouncesRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsAnnouncesTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsSyncsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsSyncsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsFollowupsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsFollowupsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsDelayReqsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsDelayReqsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsDelayRspsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsDelayRspsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsPDelayReqsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsPDelayReqsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsPDelayRspsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsPDelayRspsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsPDelayRspFollowupsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsPDelayRspFollowupsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsSignalingRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsSignalingTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsMgmtFramesRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsMgmtFramesTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsPtpUnknownsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsPtpUnknownsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsMinSyncResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsMaxSyncResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsAvgSyncResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsMinDelayReqResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsMaxDelayReqResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsAvgDelayReqResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsMinPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsMaxPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsAvgPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsMinPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsMaxPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsAvgPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsDestMciNoMatchDiscards"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointStatsTagNoMatchDiscards"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryIndex"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryValid"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryAction"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryAnnouncesRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryAnnouncesTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistorySyncsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistorySyncsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryFollowupsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryFollowupsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryDelayReqsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryDelayReqsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryDelayRspsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryDelayRspsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryPDelayReqsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryPDelayReqsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryPDelayRspsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryPDelayRspsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryPDelayRspFollowupsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryPDelayRspFollowupsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistorySignalingRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistorySignalingTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryMgmtFramesRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryMgmtFramesTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryPtpUnknownsRx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryPtpUnknownsTx"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryMinSyncResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryMaxSyncResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryAvgSyncResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryMinDelayReqResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryMaxDelayReqResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryAvgDelayReqResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryMinPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryMaxPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryAvgPDelayReqResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryMinPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryMaxPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryAvgPDelayRspResTime"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryDestMciNoMatchDiscards"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointHistoryTagNoMatchDiscards"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointThresholdIndex"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointThresholdInterval"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointThresholdVariable"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointThresholdValueLo"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointThresholdValueHi"), ("F3-PTP-MIB", "f3PtpTrafficPortFlowPointThresholdMonValue"), ("F3-PTP-MIB", "f3PtpPTPPortStatsIndex"), ("F3-PTP-MIB", "f3PtpPTPPortStatsIntervalType"), ("F3-PTP-MIB", "f3PtpPTPPortStatsValid"), ("F3-PTP-MIB", "f3PtpPTPPortStatsAction"), ("F3-PTP-MIB", "f3PtpPTPPortStatsAvgAnnounceRate"), ("F3-PTP-MIB", "f3PtpPTPPortStatsAvgSyncRate"), ("F3-PTP-MIB", "f3PtpPTPPortStatsAvgDelayReqRate"), ("F3-PTP-MIB", "f3PtpPTPPortStatsAvgDelayRespRate"), ("F3-PTP-MIB", "f3PtpPTPPortStatsMismatchDomainDiscards"), ("F3-PTP-MIB", "f3PtpPTPPortStatsMessageWrongTypeDiscards"), ("F3-PTP-MIB", "f3PtpPTPPortStatsMessagesWrongLengthDiscards"), ("F3-PTP-MIB", "f3PtpPTPPortStatsUnknownMasterDiscards"), ("F3-PTP-MIB", "f3PtpPTPPortStatsMinOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpPTPPortStatsMaxOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpPTPPortStatsAvgOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpPTPPortStatsMinSyncPathDelay"), ("F3-PTP-MIB", "f3PtpPTPPortStatsMaxSyncPathDelay"), ("F3-PTP-MIB", "f3PtpPTPPortStatsAvgSyncPathDelay"), ("F3-PTP-MIB", "f3PtpPTPPortStatsMinMeanPathDelay"), ("F3-PTP-MIB", "f3PtpPTPPortStatsMaxMeanPathDelay"), ("F3-PTP-MIB", "f3PtpPTPPortStatsAvgMeanPathDelay"), ("F3-PTP-MIB", "f3PtpPTPPortStatsMsgMiscDiscards"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryIndex"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryTime"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryValid"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryAction"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryAvgAnnounceRate"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryAvgSyncRate"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryAvgDelayReqRate"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryAvgDelayRespRate"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryMismatchDomainDiscards"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryMessageWrongTypeDiscards"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryMessagesWrongLengthDiscards"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryUnknownMasterDiscards"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryMinOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryMaxOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryAvgOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryMinSyncPathDelay"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryMaxSyncPathDelay"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryAvgSyncPathDelay"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryMinMeanPathDelay"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryMaxMeanPathDelay"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryAvgMeanPathDelay"), ("F3-PTP-MIB", "f3PtpPTPPortHistoryMsgMiscDiscards"), ("F3-PTP-MIB", "f3PtpPTPPortThresholdIndex"), ("F3-PTP-MIB", "f3PtpPTPPortThresholdInterval"), ("F3-PTP-MIB", "f3PtpPTPPortThresholdVariable"), ("F3-PTP-MIB", "f3PtpPTPPortThresholdValueLo"), ("F3-PTP-MIB", "f3PtpPTPPortThresholdValueHi"), ("F3-PTP-MIB", "f3PtpPTPPortThresholdMonValue"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsIndex"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsIntervalType"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsValid"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsAction"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsAvgAnnounceRate"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsAvgSyncRate"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsAvgDelayReqRate"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsAvgDelayRespRate"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsMismatchDomainDiscards"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsMessageWrongTypeDiscards"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsMessagesWrongLengthDiscards"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsUnknownMasterDiscards"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsMinOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsMaxOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsAvgOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsMinSyncPathDelay"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsMaxSyncPathDelay"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsAvgSyncPathDelay"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsMinMeanPathDelay"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsMaxMeanPathDelay"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsAvgMeanPathDelay"), ("F3-PTP-MIB", "f3PtpL3PTPPortStatsMsgMiscDiscards"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryIndex"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryTime"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryValid"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryAction"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryAvgAnnounceRate"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryAvgSyncRate"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryAvgDelayReqRate"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryAvgDelayRespRate"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryMismatchDomainDiscards"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryMessageWrongTypeDiscards"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryMessagesWrongLengthDiscards"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryUnknownMasterDiscards"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryMinOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryMaxOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryAvgOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryMinSyncPathDelay"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryMaxSyncPathDelay"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryAvgSyncPathDelay"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryMinMeanPathDelay"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryMaxMeanPathDelay"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryAvgMeanPathDelay"), ("F3-PTP-MIB", "f3PtpL3PTPPortHistoryMsgMiscDiscards"), ("F3-PTP-MIB", "f3PtpL3PTPPortThresholdIndex"), ("F3-PTP-MIB", "f3PtpL3PTPPortThresholdInterval"), ("F3-PTP-MIB", "f3PtpL3PTPPortThresholdVariable"), ("F3-PTP-MIB", "f3PtpL3PTPPortThresholdValueLo"), ("F3-PTP-MIB", "f3PtpL3PTPPortThresholdValueHi"), ("F3-PTP-MIB", "f3PtpL3PTPPortThresholdMonValue"), ("F3-PTP-MIB", "f3PtpPTPClockStatsIndex"), ("F3-PTP-MIB", "f3PtpPTPClockStatsIntervalType"), ("F3-PTP-MIB", "f3PtpPTPClockStatsValid"), ("F3-PTP-MIB", "f3PtpPTPClockStatsAction"), ("F3-PTP-MIB", "f3PtpPTPClockStatsMinOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpPTPClockStatsMaxOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpPTPClockStatsAvgOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpPTPClockStatsMinSyncPathDelay"), ("F3-PTP-MIB", "f3PtpPTPClockStatsMaxSyncPathDelay"), ("F3-PTP-MIB", "f3PtpPTPClockStatsAvgSyncPathDelay"), ("F3-PTP-MIB", "f3PtpPTPClockStatsMinMeanPathDelay"), ("F3-PTP-MIB", "f3PtpPTPClockStatsMaxMeanPathDelay"), ("F3-PTP-MIB", "f3PtpPTPClockStatsAvgMeanPathDelay"), ("F3-PTP-MIB", "f3PtpPTPClockHistoryIndex"), ("F3-PTP-MIB", "f3PtpPTPClockHistoryTime"), ("F3-PTP-MIB", "f3PtpPTPClockHistoryValid"), ("F3-PTP-MIB", "f3PtpPTPClockHistoryAction"), ("F3-PTP-MIB", "f3PtpPTPClockHistoryMinOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpPTPClockHistoryMaxOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpPTPClockHistoryAvgOffsetFromMaster"), ("F3-PTP-MIB", "f3PtpPTPClockHistoryMinSyncPathDelay"), ("F3-PTP-MIB", "f3PtpPTPClockHistoryMaxSyncPathDelay"), ("F3-PTP-MIB", "f3PtpPTPClockHistoryAvgSyncPathDelay"), ("F3-PTP-MIB", "f3PtpPTPClockHistoryMinMeanPathDelay"), ("F3-PTP-MIB", "f3PtpPTPClockHistoryMaxMeanPathDelay"), ("F3-PTP-MIB", "f3PtpPTPClockHistoryAvgMeanPathDelay"), ("F3-PTP-MIB", "f3PtpPTPClockThresholdIndex"), ("F3-PTP-MIB", "f3PtpPTPClockThresholdInterval"), ("F3-PTP-MIB", "f3PtpPTPClockThresholdVariable"), ("F3-PTP-MIB", "f3PtpPTPClockThresholdValueLo"), ("F3-PTP-MIB", "f3PtpPTPClockThresholdValueHi"), ("F3-PTP-MIB", "f3PtpPTPClockThresholdMonValue")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        f3PtpPerfObjectGroup = f3PtpPerfObjectGroup.setObjects(*_f3PtpPerfObjectGroup_obj)
    else:
        f3PtpPerfObjectGroup = f3PtpPerfObjectGroup.setObjects(*_f3PtpPerfObjectGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PtpPerfObjectGroup = f3PtpPerfObjectGroup.setStatus('current')
if mibBuilder.loadTexts: f3PtpPerfObjectGroup.setDescription('A collection of objects used to manage the F3 PTP Performance data.')
f3PtpPerfNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 4, 2, 3)).setObjects(("F3-PTP-MIB", "f3PtpAccPortFlowPointThresholdCrossingAlert"), ("F3-PTP-MIB", "f3PtpNetPortFlowPointThresholdCrossingAlert"), ("F3-PTP-MIB", "f3PtpSOOCCrossingAlert"), ("F3-PTP-MIB", "f3PtpTSCrossingAlert"), ("F3-PTP-MIB", "f3PtpPTPClockCrossingAlert"), ("F3-PTP-MIB", "f3PtpPTPPortCrossingAlert"), ("F3-PTP-MIB", "f3PtpL3PTPPortCrossingAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PtpPerfNotifGroup = f3PtpPerfNotifGroup.setStatus('current')
if mibBuilder.loadTexts: f3PtpPerfNotifGroup.setDescription('A collection of notifications related to F3 PTP Threshold Crossing \n             Alerts.')
f3PtpStatusChangeNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 4, 2, 4)).setObjects(("F3-PTP-MIB", "f3PtpTSStatusChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PtpStatusChangeNotifGroup = f3PtpStatusChangeNotifGroup.setStatus('current')
if mibBuilder.loadTexts: f3PtpStatusChangeNotifGroup.setDescription('A collection of notifications related to F3 PTP Status Changes .')
f3PtpBoundaryClockObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 4, 2, 5)).setObjects(("F3-PTP-MIB", "f3PtpBCAlias"), ("F3-PTP-MIB", "f3PtpBCAdminState"), ("F3-PTP-MIB", "f3PtpBCOperationalState"), ("F3-PTP-MIB", "f3PtpBCSecondaryState"), ("F3-PTP-MIB", "f3PtpBCClockIdentity"), ("F3-PTP-MIB", "f3PtpBCTimingSource"), ("F3-PTP-MIB", "f3PtpBCClockClass"), ("F3-PTP-MIB", "f3PtpBCDomainNumber"), ("F3-PTP-MIB", "f3PtpBCStorageType"), ("F3-PTP-MIB", "f3PtpBCRowStatus"), ("F3-PTP-MIB", "f3PtpBCMediationControl"), ("F3-PTP-MIB", "f3PtpMasterClockIndex"), ("F3-PTP-MIB", "f3PtpMasterClockAlias"), ("F3-PTP-MIB", "f3PtpMasterClockAdminState"), ("F3-PTP-MIB", "f3PtpMasterClockOperationalState"), ("F3-PTP-MIB", "f3PtpMasterClockSecondaryState"), ("F3-PTP-MIB", "f3PtpMasterClockClockIdentity"), ("F3-PTP-MIB", "f3PtpMasterClockTimeClock"), ("F3-PTP-MIB", "f3PtpMasterClockClockClass"), ("F3-PTP-MIB", "f3PtpMasterClockDomainNumber"), ("F3-PTP-MIB", "f3PtpMasterClockPriority1"), ("F3-PTP-MIB", "f3PtpMasterClockPriority2"), ("F3-PTP-MIB", "f3PtpMasterClockClockAccuracy"), ("F3-PTP-MIB", "f3PtpMasterClockTimeScale"), ("F3-PTP-MIB", "f3PtpMasterClockUtcOffset"), ("F3-PTP-MIB", "f3PtpMasterClockStorageType"), ("F3-PTP-MIB", "f3PtpMasterClockRowStatus"), ("F3-PTP-MIB", "f3PtpMasterClockActiveTimeRef"), ("F3-PTP-MIB", "f3PtpMasterClockPTPProfile"), ("F3-PTP-MIB", "f3PtpMasterClockServiceAvailableTime"), ("F3-PTP-MIB", "f3PtpMasterClockServiceUnavailableTime"), ("F3-PTP-MIB", "f3PtpMasterClockServiceAvailablePercentage"), ("F3-PTP-MIB", "f3PtpMasterClockSmpteSystemFrameRateNumerator"), ("F3-PTP-MIB", "f3PtpMasterClockSmpteSystemFrameRateDenominator"), ("F3-PTP-MIB", "f3PtpMasterClockSmpteTimeAddressFlags"), ("F3-PTP-MIB", "f3PtpMCIAlias"), ("F3-PTP-MIB", "f3PtpMCIAdminState"), ("F3-PTP-MIB", "f3PtpMCIOperationalState"), ("F3-PTP-MIB", "f3PtpMCISecondaryState"), ("F3-PTP-MIB", "f3PtpMCIPortIdentity"), ("F3-PTP-MIB", "f3PtpMCIDomainNumber"), ("F3-PTP-MIB", "f3PtpMCIClockType"), ("F3-PTP-MIB", "f3PtpMCIDelayMechanism"), ("F3-PTP-MIB", "f3PtpMCIIfName"), ("F3-PTP-MIB", "f3PtpMCIIpProtocol"), ("F3-PTP-MIB", "f3PtpMCIMasterIpV4Address"), ("F3-PTP-MIB", "f3PtpMCIMasterIpV4SubnetMask"), ("F3-PTP-MIB", "f3PtpMCIIpPriorityMapMode"), ("F3-PTP-MIB", "f3PtpMCIIpPriority"), ("F3-PTP-MIB", "f3PtpMCIMaxLeaseDuration"), ("F3-PTP-MIB", "f3PtpMCIMaxSlavesSupported"), ("F3-PTP-MIB", "f3PtpMCIMaxStaticSlavesSupported"), ("F3-PTP-MIB", "f3PtpMCIMaxSyncMsgRate"), ("F3-PTP-MIB", "f3PtpMCIMaxDelayRespMsgRate"), ("F3-PTP-MIB", "f3PtpMCIMaxAnnounceMsgRate"), ("F3-PTP-MIB", "f3PtpMCIStorageType"), ("F3-PTP-MIB", "f3PtpMCIRowStatus"), ("F3-PTP-MIB", "f3PtpMCIServiceFlow"), ("F3-PTP-MIB", "f3PtpMCIClockClassProfile"), ("F3-PTP-MIB", "f3PtpMCIClockClass"), ("F3-PTP-MIB", "f3PtpMCIAnnounceExtTLVEnable"), ("F3-PTP-MIB", "f3PtpMCIPtpTransport"), ("F3-PTP-MIB", "f3PtpMCIPtpTransportMode"), ("F3-PTP-MIB", "f3PtpMCIPtpRemoteSlaveAgingTimeout"), ("F3-PTP-MIB", "f3PtpMCIMasterIpV6Address"), ("F3-PTP-MIB", "f3PtpMCIMasterIpV6AddrPrefixLength"), ("F3-PTP-MIB", "f3PtpMCIDefaultGatewayControl"), ("F3-PTP-MIB", "f3PtpMCIGateway"), ("F3-PTP-MIB", "f3PtpMCIIpV6Gateway"), ("F3-PTP-MIB", "f3PtpMasterVirtualPortAlias"), ("F3-PTP-MIB", "f3PtpMasterVirtualPortAdminState"), ("F3-PTP-MIB", "f3PtpMasterVirtualPortOperationalState"), ("F3-PTP-MIB", "f3PtpMasterVirtualPortSecondaryState"), ("F3-PTP-MIB", "f3PtpMasterVirtualPortFlowPoint"), ("F3-PTP-MIB", "f3PtpMasterVirtualPortStorageType"), ("F3-PTP-MIB", "f3PtpMasterVirtualPortRowStatus"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveAlias"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveAdminState"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveOperationalState"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveSecondaryState"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveClockIdentity"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveIpV4Address"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveTimeCreated"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveSyncMsgRate"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveDelayRspMsgRate"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveAnnounceMsgRate"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveNegSyncLeaseDur"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveNegDelayRspLeaseDur"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveNegAnnounceLeaseDur"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveSyncDurRemTime"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveDelayRspDurRemTime"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveAnnounceDurRemTime"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveUmnControl"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveStorageType"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveRowStatus"), ("F3-PTP-MIB", "f3PtpStaticRemoteSlaveIpV6Address"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveAlias"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveAdminState"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveOperationalState"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveSecondaryState"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveClockIdentity"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveIpV4Address"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveTimeCreated"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveSyncMsgRate"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveDelayRspMsgRate"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveAnnounceMsgRate"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveNegSyncLeaseDur"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveNegDelayRspLeaseDur"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveNegAnnounceLeaseDur"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveSyncDurRemTime"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveDelayRspDurRemTime"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveAnnounceDurRemTime"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveRowStatus"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveStorageType"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlavePortIdentity"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlavePeerMacAddress"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveIpV6Address"), ("F3-PTP-MIB", "f3PtpMCIStatsIntervalType"), ("F3-PTP-MIB", "f3PtpMCIStatsValid"), ("F3-PTP-MIB", "f3PtpMCIStatsAction"), ("F3-PTP-MIB", "f3PtpMCIStatsPtpDiscards"), ("F3-PTP-MIB", "f3PtpMCIStatsSyncDeniedEvents"), ("F3-PTP-MIB", "f3PtpMCIStatsDelayRspDeniedEvents"), ("F3-PTP-MIB", "f3PtpMCIStatsAnnounceDeniedEvents"), ("F3-PTP-MIB", "f3PtpMCIStatsSyncCancelledEvents"), ("F3-PTP-MIB", "f3PtpMCIStatsDelayRspCancelledEvents"), ("F3-PTP-MIB", "f3PtpMCIStatsAnnounceCancelledEvents"), ("F3-PTP-MIB", "f3PtpMCIStatsDynamicSlavesLearnt"), ("F3-PTP-MIB", "f3PtpMCIStatsDynamicSlavesDropped"), ("F3-PTP-MIB", "f3PtpMCIHistoryIndex"), ("F3-PTP-MIB", "f3PtpTSHistoryTime"), ("F3-PTP-MIB", "f3PtpMCIHistoryValid"), ("F3-PTP-MIB", "f3PtpMCIHistoryAction"), ("F3-PTP-MIB", "f3PtpMCIHistoryPtpDiscards"), ("F3-PTP-MIB", "f3PtpMCIHistorySyncDeniedEvents"), ("F3-PTP-MIB", "f3PtpMCIHistoryDelayRspDeniedEvents"), ("F3-PTP-MIB", "f3PtpMCIHistoryAnnounceDeniedEvents"), ("F3-PTP-MIB", "f3PtpMCIHistorySyncCancelledEvents"), ("F3-PTP-MIB", "f3PtpMCIHistoryDelayRspCancelledEvents"), ("F3-PTP-MIB", "f3PtpMCIHistoryAnnounceCancelledEvents"), ("F3-PTP-MIB", "f3PtpMCIHistoryDynamicSlavesLearnt"), ("F3-PTP-MIB", "f3PtpMCIHistoryDynamicSlavesDropped"), ("F3-PTP-MIB", "f3PtpMCIThresholdInterval"), ("F3-PTP-MIB", "f3PtpMCIThresholdVariable"), ("F3-PTP-MIB", "f3PtpMCIThresholdValueLo"), ("F3-PTP-MIB", "f3PtpMCIThresholdValueHi"), ("F3-PTP-MIB", "f3PtpMCIThresholdMonValue"), ("F3-PTP-MIB", "f3PtpRemoteSlaveStatsIntervalType"), ("F3-PTP-MIB", "f3PtpRemoteSlaveStatsValid"), ("F3-PTP-MIB", "f3PtpRemoteSlaveStatsAction"), ("F3-PTP-MIB", "f3PtpRemoteSlaveStatsSyncMsgsGen"), ("F3-PTP-MIB", "f3PtpRemoteSlaveStatsDelayRspMsgsGen"), ("F3-PTP-MIB", "f3PtpRemoteSlaveStatsAnnounceMsgsGen"), ("F3-PTP-MIB", "f3PtpRemoteSlaveStatsSignallingMsgsGen"), ("F3-PTP-MIB", "f3PtpRemoteSlaveStatsDelayReqMsgsRx"), ("F3-PTP-MIB", "f3PtpRemoteSlaveStatsSignallingMsgsRx"), ("F3-PTP-MIB", "f3PtpRemoteSlaveStatsDelayReqMsgsDropped"), ("F3-PTP-MIB", "f3PtpRemoteSlaveStatsInvalidTLVLenDiscards"), ("F3-PTP-MIB", "f3PtpRemoteSlaveStatsInvalidTLVTypeDiscards"), ("F3-PTP-MIB", "f3PtpRemoteSlaveStatsTimesSyncLeaseExp"), ("F3-PTP-MIB", "f3PtpRemoteSlaveStatsTimesDelayRspLeaseExp"), ("F3-PTP-MIB", "f3PtpRemoteSlaveStatsTimesAnnounceLeaseExp"), ("F3-PTP-MIB", "f3PtpRemoteSlaveHistoryTime"), ("F3-PTP-MIB", "f3PtpRemoteSlaveHistoryValid"), ("F3-PTP-MIB", "f3PtpRemoteSlaveHistoryAction"), ("F3-PTP-MIB", "f3PtpRemoteSlaveHistorySyncMsgsGen"), ("F3-PTP-MIB", "f3PtpRemoteSlaveHistoryDelayRspMsgsGen"), ("F3-PTP-MIB", "f3PtpRemoteSlaveHistoryAnnounceMsgsGen"), ("F3-PTP-MIB", "f3PtpRemoteSlaveHistorySignallingMsgsGen"), ("F3-PTP-MIB", "f3PtpRemoteSlaveHistoryDelayReqMsgsRx"), ("F3-PTP-MIB", "f3PtpRemoteSlaveHistorySignallingMsgsRx"), ("F3-PTP-MIB", "f3PtpRemoteSlaveHistoryDelayReqMsgsDropped"), ("F3-PTP-MIB", "f3PtpRemoteSlaveHistoryInvalidTLVLenDiscards"), ("F3-PTP-MIB", "f3PtpRemoteSlaveHistoryInvalidTLVTypeDiscards"), ("F3-PTP-MIB", "f3PtpRemoteSlaveHistoryTimesSyncLeaseExp"), ("F3-PTP-MIB", "f3PtpRemoteSlaveHistoryTimesDelayRspLeaseExp"), ("F3-PTP-MIB", "f3PtpRemoteSlaveHistoryTimesAnnounceLeaseExp"), ("F3-PTP-MIB", "f3PtpRemoteSlaveThresholdInterval"), ("F3-PTP-MIB", "f3PtpRemoteSlaveThresholdVariable"), ("F3-PTP-MIB", "f3PtpRemoteSlaveThresholdValueLo"), ("F3-PTP-MIB", "f3PtpRemoteSlaveThresholdValueHi"), ("F3-PTP-MIB", "f3PtpRemoteSlaveThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PtpBoundaryClockObjectGroup = f3PtpBoundaryClockObjectGroup.setStatus('current')
if mibBuilder.loadTexts: f3PtpBoundaryClockObjectGroup.setDescription('A collection of objects related to F3 PTP Boundary Clock feature.')
f3PtpBoundaryClockNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 4, 2, 6)).setObjects(("F3-PTP-MIB", "f3PtpMCICrossingAlert"), ("F3-PTP-MIB", "f3PtpRemoteSlaveCrossingAlert"), ("F3-PTP-MIB", "f3PtpMasterClockStatusChangeTrap"), ("F3-PTP-MIB", "f3PtpBCStatusChangeTrap"), ("F3-PTP-MIB", "f3PtpDynamicRemoteSlaveStatusChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PtpBoundaryClockNotifGroup = f3PtpBoundaryClockNotifGroup.setStatus('current')
if mibBuilder.loadTexts: f3PtpBoundaryClockNotifGroup.setDescription('A collection of notifications related to F3 PTP Boundary Clock feature.')
f3PtpProtObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 18, 4, 2, 7)).setObjects(("F3-PTP-MIB", "f3PtpMCIProtGroupIndex"), ("F3-PTP-MIB", "f3PtpMCIProtGroupAdminState"), ("F3-PTP-MIB", "f3PtpMCIProtGroupActiveMember"), ("F3-PTP-MIB", "f3PtpMCIProtGroupLastSwitchOverTime"), ("F3-PTP-MIB", "f3PtpMCIProtGroupLastSwitchOverReason"), ("F3-PTP-MIB", "f3PtpMCIProtGroupStorageType"), ("F3-PTP-MIB", "f3PtpMCIProtGroupRowStatus"), ("F3-PTP-MIB", "f3PtpMCIProtMemberObject"), ("F3-PTP-MIB", "f3PtpMCIProtMemberStorageType"), ("F3-PTP-MIB", "f3PtpMCIProtMemberRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PtpProtObjectGroup = f3PtpProtObjectGroup.setStatus('current')
if mibBuilder.loadTexts: f3PtpProtObjectGroup.setDescription('A collection of objects used to manage the Protection Object group.')
mibBuilder.exportSymbols("F3-PTP-MIB", f3PtpSOOCHistoryMaxRevFlowWeight=f3PtpSOOCHistoryMaxRevFlowWeight, f3PtpAccPortFlowPointEIRLo=f3PtpAccPortFlowPointEIRLo, f3PtpStaticRemoteSlaveIndex=f3PtpStaticRemoteSlaveIndex, f3PtpAccPortFlowPointHistoryEntry=f3PtpAccPortFlowPointHistoryEntry, f3PtpSOOCStatsAvgMeanPathDelay=f3PtpSOOCStatsAvgMeanPathDelay, f3PtpPTPClockStatsAvgOffsetFromMaster=f3PtpPTPClockStatsAvgOffsetFromMaster, f3PtpNetPortFlowPointHistoryFollowupsTx=f3PtpNetPortFlowPointHistoryFollowupsTx, f3PtpSOOCMasterIpProtocol=f3PtpSOOCMasterIpProtocol, f3PtpTrafficPortFlowPointIndex=f3PtpTrafficPortFlowPointIndex, f3PtpPTPClockTimeSinceTimeTraceabilityChanged=f3PtpPTPClockTimeSinceTimeTraceabilityChanged, f3PtpAccPortFlowPointHistoryFollowupsTx=f3PtpAccPortFlowPointHistoryFollowupsTx, f3PtpNetPortFlowPointStatsTagNoMatchDiscards=f3PtpNetPortFlowPointStatsTagNoMatchDiscards, f3PtpSOOCMasterClockType=f3PtpSOOCMasterClockType, f3PtpMCIStatsAnnounceCancelledEvents=f3PtpMCIStatsAnnounceCancelledEvents, f3PtpAccPortFlowPointStatsAvgSyncResTime=f3PtpAccPortFlowPointStatsAvgSyncResTime, f3PtpPTPPortStatsAvgMeanPathDelay=f3PtpPTPPortStatsAvgMeanPathDelay, f3PtpNetPortFlowPointHistoryEntry=f3PtpNetPortFlowPointHistoryEntry, f3PtpPTPPortHistoryUnknownMasterDiscards=f3PtpPTPPortHistoryUnknownMasterDiscards, f3PtpPTPClockStatsIndex=f3PtpPTPClockStatsIndex, f3PtpPTPClockThresholdValueHi=f3PtpPTPClockThresholdValueHi, f3PtpStaticRemoteSlaveTable=f3PtpStaticRemoteSlaveTable, f3PtpNetPortFlowPointEIRHi=f3PtpNetPortFlowPointEIRHi, f3PtpTrafficPortFlowPointHistoryDelayRspsRx=f3PtpTrafficPortFlowPointHistoryDelayRspsRx, f3PtpTCVirtualPortEntry=f3PtpTCVirtualPortEntry, f3PtpRemoteSlaveStatsSignallingMsgsRx=f3PtpRemoteSlaveStatsSignallingMsgsRx, f3PtpPTPPortHistoryAvgSyncRate=f3PtpPTPPortHistoryAvgSyncRate, f3PtpNetPortFlowPointHistorySyncsTx=f3PtpNetPortFlowPointHistorySyncsTx, f3PtpAccPortFlowPointStatsPtpUnknownsTx=f3PtpAccPortFlowPointStatsPtpUnknownsTx, f3PtpL3PTPPortStatsAvgDelayReqRate=f3PtpL3PTPPortStatsAvgDelayReqRate, f3PtpNetPortFlowPointHistoryAnnouncesTx=f3PtpNetPortFlowPointHistoryAnnouncesTx, f3PtpMasterVirtualPortStorageType=f3PtpMasterVirtualPortStorageType, f3PtpAccPortFlowPointStatsValid=f3PtpAccPortFlowPointStatsValid, f3PtpAccPortFlowPointHistorySyncsTx=f3PtpAccPortFlowPointHistorySyncsTx, CompensationStatus=CompensationStatus, f3PtpTrafficPortFlowPointInner2UntaggedEnabled=f3PtpTrafficPortFlowPointInner2UntaggedEnabled, f3PtpMCIMasterIpV4SubnetMask=f3PtpMCIMasterIpV4SubnetMask, f3PtpL3PTPPortHistoryUnknownMasterDiscards=f3PtpL3PTPPortHistoryUnknownMasterDiscards, f3PtpTrafficPortFlowPointStatsDelayRspsRx=f3PtpTrafficPortFlowPointStatsDelayRspsRx, f3PtpSOOCStatsMinOffsetFromMaster=f3PtpSOOCStatsMinOffsetFromMaster, f3PtpAccPortFlowPointStatsMinSyncResTime=f3PtpAccPortFlowPointStatsMinSyncResTime, f3PtpTCVirtualPortSecondaryState=f3PtpTCVirtualPortSecondaryState, f3PtpPTPClockStatsMaxOffsetFromMaster=f3PtpPTPClockStatsMaxOffsetFromMaster, f3PtpL3PTPPortThresholdVariable=f3PtpL3PTPPortThresholdVariable, f3PtpSOOCHistoryMulticastAnnounceDiscards=f3PtpSOOCHistoryMulticastAnnounceDiscards, f3PtpRemoteSlaveStatsIntervalType=f3PtpRemoteSlaveStatsIntervalType, CompensationMode=CompensationMode, DelayRespMsgRate=DelayRespMsgRate, f3PtpPTPClockRecentMeanPathDelay=f3PtpPTPClockRecentMeanPathDelay, f3PtpMIB=f3PtpMIB, f3PtpTSClockReceivedQL=f3PtpTSClockReceivedQL, f3PtpNetPortFlowPointHistoryPtpUnknownsRx=f3PtpNetPortFlowPointHistoryPtpUnknownsRx, f3PtpPTPPortDelayAsymmetryComp=f3PtpPTPPortDelayAsymmetryComp, f3PtpRemoteSlaveThresholdTable=f3PtpRemoteSlaveThresholdTable, f3PtpRemoteSlaveThresholdMonValue=f3PtpRemoteSlaveThresholdMonValue, f3PtpL3PTPPortHistoryAvgDelayRespRate=f3PtpL3PTPPortHistoryAvgDelayRespRate, f3PtpMasterClockUtcOffset=f3PtpMasterClockUtcOffset, f3PtpSOOCHistoryValid=f3PtpSOOCHistoryValid, f3PtpPTPClockHistoryTime=f3PtpPTPClockHistoryTime, f3PtpPTPClockTimeSinceFreqTraceabilityChanged=f3PtpPTPClockTimeSinceFreqTraceabilityChanged, f3PtpPTPPortLastRcvdSyncMsg=f3PtpPTPPortLastRcvdSyncMsg, f3PtpTrafficPortFlowPointStatsAvgPDelayRspResTime=f3PtpTrafficPortFlowPointStatsAvgPDelayRspResTime, f3PtpRemoteSlaveStatsTimesSyncLeaseExp=f3PtpRemoteSlaveStatsTimesSyncLeaseExp, ClockRecoveryMode=ClockRecoveryMode, f3PtpRemoteSlaveHistoryTimesDelayRspLeaseExp=f3PtpRemoteSlaveHistoryTimesDelayRspLeaseExp, f3PtpL3PTPPortHistoryMaxOffsetFromMaster=f3PtpL3PTPPortHistoryMaxOffsetFromMaster, f3PtpTSTimeSinceTimeTraceabilityChanged=f3PtpTSTimeSinceTimeTraceabilityChanged, f3PtpMasterClockSmpteSystemFrameRateNumerator=f3PtpMasterClockSmpteSystemFrameRateNumerator, f3PtpNetPortFlowPointThresholdCrossingAlert=f3PtpNetPortFlowPointThresholdCrossingAlert, f3PtpPTPClockStatsAction=f3PtpPTPClockStatsAction, f3PtpPTPPortVirtualPortCtrl=f3PtpPTPPortVirtualPortCtrl, f3PtpTrafficPortFlowPointThresholdCrossingAlert=f3PtpTrafficPortFlowPointThresholdCrossingAlert, f3PtpTCDelayMechanism=f3PtpTCDelayMechanism, f3PtpPTPClockRecentSyncPDV=f3PtpPTPClockRecentSyncPDV, f3PtpBoundaryClockObjectGroup=f3PtpBoundaryClockObjectGroup, f3PtpSOOCStatsAvgSyncPDV=f3PtpSOOCStatsAvgSyncPDV, f3PtpAccPortFlowPointStatsEntry=f3PtpAccPortFlowPointStatsEntry, f3PtpL3PTPPortStatsValid=f3PtpL3PTPPortStatsValid, f3PtpMasterVirtualPortSecondaryState=f3PtpMasterVirtualPortSecondaryState, f3PtpTrafficPortFlowPointStatsPDelayReqsTx=f3PtpTrafficPortFlowPointStatsPDelayReqsTx, f3PtpNetPortFlowPointStatsEntry=f3PtpNetPortFlowPointStatsEntry, f3PtpTrafficPortFlowPointStatsPDelayRspsRx=f3PtpTrafficPortFlowPointStatsPDelayRspsRx, f3PtpMasterClockSmpteTimeAddressFlags=f3PtpMasterClockSmpteTimeAddressFlags, f3PtpMCIPtpTransport=f3PtpMCIPtpTransport, f3PtpPTPClockThresholdValueLo=f3PtpPTPClockThresholdValueLo, f3PtpTrafficPortFlowPointThresholdVariable=f3PtpTrafficPortFlowPointThresholdVariable, f3PtpSOOCE2eAutoAsymmetryCompStatus=f3PtpSOOCE2eAutoAsymmetryCompStatus, f3PtpPTPPortLocalPriority=f3PtpPTPPortLocalPriority, f3PtpNetPortFlowPointStatsDelayRspsRx=f3PtpNetPortFlowPointStatsDelayRspsRx, f3PtpTrafficPortFlowPointStatsAnnouncesRx=f3PtpTrafficPortFlowPointStatsAnnouncesRx, f3PtpStaticRemoteSlaveIpV6Address=f3PtpStaticRemoteSlaveIpV6Address, f3PtpPerformanceObjects=f3PtpPerformanceObjects, f3PtpSOOCSlaveIpV6Address=f3PtpSOOCSlaveIpV6Address, f3PtpConfigScalars=f3PtpConfigScalars, f3PtpAccPortFlowPointHistoryPtpUnknownsRx=f3PtpAccPortFlowPointHistoryPtpUnknownsRx, f3PtpL3PTPPortAnnounceReceiptTimeout=f3PtpL3PTPPortAnnounceReceiptTimeout, f3PtpTrafficPortFlowPointLoopAvoidance=f3PtpTrafficPortFlowPointLoopAvoidance, f3PtpSOOCThresholdMonValue=f3PtpSOOCThresholdMonValue, f3PtpTSThresholdTable=f3PtpTSThresholdTable, DelayMechanism=DelayMechanism, f3PtpStaticRemoteSlaveTimeCreated=f3PtpStaticRemoteSlaveTimeCreated, f3PtpMCIHistoryTable=f3PtpMCIHistoryTable, f3PtpTSStatusChangeTrap=f3PtpTSStatusChangeTrap, f3PtpMCIGateway=f3PtpMCIGateway, f3PtpTrafficPortFlowPointInner1VlanEtherType=f3PtpTrafficPortFlowPointInner1VlanEtherType, f3PtpAccPortFlowPointStatsSignalingRx=f3PtpAccPortFlowPointStatsSignalingRx, f3PtpNetPortFlowPointHistoryMinPDelayReqResTime=f3PtpNetPortFlowPointHistoryMinPDelayReqResTime, f3PtpSOOCStatsTable=f3PtpSOOCStatsTable, f3PtpNetPortFlowPointThresholdValueLo=f3PtpNetPortFlowPointThresholdValueLo, f3PtpPTPClockHistoryAction=f3PtpPTPClockHistoryAction, f3PtpTrafficPortFlowPointSecondaryState=f3PtpTrafficPortFlowPointSecondaryState, f3PtpMCITable=f3PtpMCITable, f3PtpPTPClockPhaseRecoveryState=f3PtpPTPClockPhaseRecoveryState, f3PtpTSStatsAction=f3PtpTSStatsAction, f3PtpPTPPortHistoryEntry=f3PtpPTPPortHistoryEntry, f3PtpPTPClockStatsMinMeanPathDelay=f3PtpPTPClockStatsMinMeanPathDelay, f3PtpTrafficPortFlowPointHistoryFollowupsTx=f3PtpTrafficPortFlowPointHistoryFollowupsTx, f3PtpNetPortFlowPointInner2VlanMemberList=f3PtpNetPortFlowPointInner2VlanMemberList, PTPTransportMode=PTPTransportMode, f3PtpMCIStatsSyncCancelledEvents=f3PtpMCIStatsSyncCancelledEvents, f3PtpOCSlaveVirtualPortSecondaryState=f3PtpOCSlaveVirtualPortSecondaryState, f3PtpTrafficPortFlowPointStatsMgmtFramesRx=f3PtpTrafficPortFlowPointStatsMgmtFramesRx, f3PtpNetPortFlowPointHistoryPDelayRspsRx=f3PtpNetPortFlowPointHistoryPDelayRspsRx, f3PtpMasterClockClockClass=f3PtpMasterClockClockClass, f3PtpSOOCStatsDelayReqDiscards=f3PtpSOOCStatsDelayReqDiscards, f3PtpTrafficPortFlowPointStatsDelayReqsRx=f3PtpTrafficPortFlowPointStatsDelayReqsRx, f3PtpL3PTPPortAutoAsymmetryCompStatus=f3PtpL3PTPPortAutoAsymmetryCompStatus, f3PtpSOOCHistoryUnknownDomainDiscards=f3PtpSOOCHistoryUnknownDomainDiscards, f3PtpNetPortFlowPointType=f3PtpNetPortFlowPointType, f3PtpTSThresholdVariable=f3PtpTSThresholdVariable, f3PtpMCIIndex=f3PtpMCIIndex, f3PtpPTPClockClockIdentity=f3PtpPTPClockClockIdentity, f3PtpTSClockIdentity=f3PtpTSClockIdentity, f3PtpTSClockAccuracy=f3PtpTSClockAccuracy, f3PtpPTPPortHistoryMinSyncPathDelay=f3PtpPTPPortHistoryMinSyncPathDelay, f3PtpTCPtpProfile=f3PtpTCPtpProfile, f3PtpTSClockClass=f3PtpTSClockClass, f3PtpStaticRemoteSlaveIpV4Address=f3PtpStaticRemoteSlaveIpV4Address, f3PtpTSHistoryTotalTimePR5=f3PtpTSHistoryTotalTimePR5, f3PtpSOOCMasterLeaseDuration=f3PtpSOOCMasterLeaseDuration, f3PtpAccPortFlowPointStatsPDelayRspFollowupsRx=f3PtpAccPortFlowPointStatsPDelayRspFollowupsRx, f3PtpSOOCHistoryMaxSyncPathDelay=f3PtpSOOCHistoryMaxSyncPathDelay, f3PtpMCIStatsTable=f3PtpMCIStatsTable, f3PtpSOOCHistoryMinRevFlowWeight=f3PtpSOOCHistoryMinRevFlowWeight, f3PtpMCIStatsEntry=f3PtpMCIStatsEntry, f3PtpPTPPortNotSlave=f3PtpPTPPortNotSlave, f3PtpL3PTPPortStatsMaxOffsetFromMaster=f3PtpL3PTPPortStatsMaxOffsetFromMaster, f3PtpAccPortFlowPointStatsMaxPDelayReqResTime=f3PtpAccPortFlowPointStatsMaxPDelayReqResTime, f3PtpCompliances=f3PtpCompliances, f3PtpAccPortFlowPointHistoryDelayRspsTx=f3PtpAccPortFlowPointHistoryDelayRspsTx, f3PtpStaticRemoteSlaveEntry=f3PtpStaticRemoteSlaveEntry, f3PtpTSThresholdIndex=f3PtpTSThresholdIndex, f3PtpAccPortFlowPointThresholdIndex=f3PtpAccPortFlowPointThresholdIndex, f3PtpAccPortFlowPointEIRHi=f3PtpAccPortFlowPointEIRHi, f3PtpNetPortFlowPointStatsPDelayReqsRx=f3PtpNetPortFlowPointStatsPDelayReqsRx, f3PtpOCSlaveVirtualPortState=f3PtpOCSlaveVirtualPortState, f3PtpTrafficPortFlowPointExtTable=f3PtpTrafficPortFlowPointExtTable, f3PtpNetPortFlowPointHistoryTable=f3PtpNetPortFlowPointHistoryTable, f3PtpMasterVirtualPortEntry=f3PtpMasterVirtualPortEntry, DestMacAddrType=DestMacAddrType, f3PtpNetPortFlowPointHistoryPtpUnknownsTx=f3PtpNetPortFlowPointHistoryPtpUnknownsTx, f3PtpPTPPortThresholdInterval=f3PtpPTPPortThresholdInterval, f3PtpTSTimeSource=f3PtpTSTimeSource, f3PtpL3PTPPortRequestUnicastRestartTimer=f3PtpL3PTPPortRequestUnicastRestartTimer, f3PtpNetPortFlowPointStatsMinPDelayReqResTime=f3PtpNetPortFlowPointStatsMinPDelayReqResTime, f3PtpTrafficPortFlowPointEIRLo=f3PtpTrafficPortFlowPointEIRLo, f3PtpRemoteSlaveHistoryEntry=f3PtpRemoteSlaveHistoryEntry, f3PtpPTPPortIndex=f3PtpPTPPortIndex, f3PtpAccPortFlowPointStatsMinPDelayRspResTime=f3PtpAccPortFlowPointStatsMinPDelayRspResTime, f3PtpSOOCStatsMaxFwdFlowWeight=f3PtpSOOCStatsMaxFwdFlowWeight, f3PtpSOOCIndex=f3PtpSOOCIndex, f3PtpTrafficPortFlowPointInner1UntaggedEnabled=f3PtpTrafficPortFlowPointInner1UntaggedEnabled, f3PtpTrafficPortFlowPointHistoryPDelayReqsTx=f3PtpTrafficPortFlowPointHistoryPDelayReqsTx, f3PtpL3PTPPortStatsAvgSyncPathDelay=f3PtpL3PTPPortStatsAvgSyncPathDelay, f3PtpTrafficPortFlowPointHistoryAnnouncesTx=f3PtpTrafficPortFlowPointHistoryAnnouncesTx, f3PtpL3PTPPortStatsMinMeanPathDelay=f3PtpL3PTPPortStatsMinMeanPathDelay, f3PtpMasterVirtualPortAdminState=f3PtpMasterVirtualPortAdminState, f3PtpTCClockIdentity=f3PtpTCClockIdentity, f3PtpNetPortFlowPointStatsSignalingTx=f3PtpNetPortFlowPointStatsSignalingTx, f3PtpMasterClockServiceAvailableTime=f3PtpMasterClockServiceAvailableTime, f3PtpTrafficPortFlowPointHistoryMaxSyncResTime=f3PtpTrafficPortFlowPointHistoryMaxSyncResTime, f3PtpMCIEntry=f3PtpMCIEntry, f3PtpAccPortFlowPointStatsPDelayReqsRx=f3PtpAccPortFlowPointStatsPDelayReqsRx, f3PtpMCIProtMemberStorageType=f3PtpMCIProtMemberStorageType, f3PtpPTPPortTxDestMacAddress=f3PtpPTPPortTxDestMacAddress, PhaseRecoveryState=PhaseRecoveryState, f3PtpSOOCStatsIntervalType=f3PtpSOOCStatsIntervalType, f3PtpTSCurrentPRScore=f3PtpTSCurrentPRScore, f3PtpTSThresholdMonValue=f3PtpTSThresholdMonValue, f3PtpPTPPortBmcaDecisionCode=f3PtpPTPPortBmcaDecisionCode, f3PtpTrafficPortFlowPointInner2VlanMemberList=f3PtpTrafficPortFlowPointInner2VlanMemberList, f3PtpDynamicRemoteSlaveDelayRspDurRemTime=f3PtpDynamicRemoteSlaveDelayRspDurRemTime, f3PtpPTPClockClockClass=f3PtpPTPClockClockClass, f3PtpL3PTPPortThresholdValueLo=f3PtpL3PTPPortThresholdValueLo, f3PtpTrafficPortFlowPointAdminState=f3PtpTrafficPortFlowPointAdminState, f3PtpNetPortFlowPointHistoryAction=f3PtpNetPortFlowPointHistoryAction, f3PtpPTPClockThresholdTable=f3PtpPTPClockThresholdTable, f3PtpNetPortFlowPointHistoryMgmtFramesRx=f3PtpNetPortFlowPointHistoryMgmtFramesRx, f3PtpStaticRemoteSlaveUmnControl=f3PtpStaticRemoteSlaveUmnControl, f3PtpMCIProtMemberEntry=f3PtpMCIProtMemberEntry, f3PtpAccPortFlowPointStatsMinDelayReqResTime=f3PtpAccPortFlowPointStatsMinDelayReqResTime, f3PtpSOOCHistoryDelayReqDiscards=f3PtpSOOCHistoryDelayReqDiscards, f3PtpRemoteSlaveStatsTable=f3PtpRemoteSlaveStatsTable, f3PtpTrafficPortFlowPointStatsMaxSyncResTime=f3PtpTrafficPortFlowPointStatsMaxSyncResTime, f3PtpPTPPortThresholdTable=f3PtpPTPPortThresholdTable, f3PtpTSRowStatus=f3PtpTSRowStatus, f3PtpTrafficPortFlowPointStatsPDelayRspFollowupsRx=f3PtpTrafficPortFlowPointStatsPDelayRspFollowupsRx, f3PtpAccPortFlowPointThresholdCrossingAlert=f3PtpAccPortFlowPointThresholdCrossingAlert, f3PtpNetPortFlowPointInner1VlanEtherType=f3PtpNetPortFlowPointInner1VlanEtherType, f3PtpNetPortFlowPointStatsAvgDelayReqResTime=f3PtpNetPortFlowPointStatsAvgDelayReqResTime, f3PtpAccPortFlowPointStatsAnnouncesTx=f3PtpAccPortFlowPointStatsAnnouncesTx, f3PtpTCVirtualPortRowStatus=f3PtpTCVirtualPortRowStatus, f3PtpPTPPortHistoryValid=f3PtpPTPPortHistoryValid, f3PtpL3PTPPortStatsMaxMeanPathDelay=f3PtpL3PTPPortStatsMaxMeanPathDelay, f3PtpStaticRemoteSlaveAnnounceMsgRate=f3PtpStaticRemoteSlaveAnnounceMsgRate, f3PtpBCTable=f3PtpBCTable, f3PtpTrafficPortFlowPointStatsDelayRspsTx=f3PtpTrafficPortFlowPointStatsDelayRspsTx, f3PtpPTPPortStatsMessagesWrongLengthDiscards=f3PtpPTPPortStatsMessagesWrongLengthDiscards, f3PtpMCIStatsAction=f3PtpMCIStatsAction, f3PtpProtObjectGroup=f3PtpProtObjectGroup, f3PtpSOOCStatsMulticastAnnounceDiscards=f3PtpSOOCStatsMulticastAnnounceDiscards, f3PtpTrafficPortFlowPointStatsSignalingTx=f3PtpTrafficPortFlowPointStatsSignalingTx, f3PtpTCVirtualPortOperationalState=f3PtpTCVirtualPortOperationalState, f3PtpAccPortFlowPointStatsPDelayRspFollowupsTx=f3PtpAccPortFlowPointStatsPDelayRspFollowupsTx, f3PtpSOOCStatsAvgFwdFlowWeight=f3PtpSOOCStatsAvgFwdFlowWeight, f3PtpL3PTPPortPeerClockClass=f3PtpL3PTPPortPeerClockClass, ClockRecoveryState=ClockRecoveryState, f3PtpSOOCSoocClockClass=f3PtpSOOCSoocClockClass, f3PtpSOOCStatsMinMeanPathDelay=f3PtpSOOCStatsMinMeanPathDelay, f3PtpNetPortFlowPointStatsMgmtFramesRx=f3PtpNetPortFlowPointStatsMgmtFramesRx, f3PtpL3PTPPortAlias=f3PtpL3PTPPortAlias, f3PtpSOOCDefaultGatewayControl=f3PtpSOOCDefaultGatewayControl, f3PtpBCEntry=f3PtpBCEntry, f3PtpAccPortFlowPointStatsDelayReqsRx=f3PtpAccPortFlowPointStatsDelayReqsRx, f3PtpL3PTPPortPortState=f3PtpL3PTPPortPortState, f3PtpAccPortFlowPointStatsDestMciNoMatchDiscards=f3PtpAccPortFlowPointStatsDestMciNoMatchDiscards, f3PtpAccPortFlowPointHistoryMinPDelayRspResTime=f3PtpAccPortFlowPointHistoryMinPDelayRspResTime, f3PtpTrafficPortFlowPointHistoryMgmtFramesRx=f3PtpTrafficPortFlowPointHistoryMgmtFramesRx, f3PtpBCSecondaryState=f3PtpBCSecondaryState, f3PtpPTPPortDelayRespTimeout=f3PtpPTPPortDelayRespTimeout, f3PtpAccPortFlowPointStatsAvgPDelayRspResTime=f3PtpAccPortFlowPointStatsAvgPDelayRspResTime, f3PtpAccPortFlowPointThresholdMonValue=f3PtpAccPortFlowPointThresholdMonValue, f3PtpNetPortFlowPointStatsSyncsRx=f3PtpNetPortFlowPointStatsSyncsRx, f3PtpTrafficPortFlowPointHistoryPDelayRspFollowupsRx=f3PtpTrafficPortFlowPointHistoryPDelayRspFollowupsRx, f3PtpEthernetAccPortExtEntry=f3PtpEthernetAccPortExtEntry, f3PtpTrafficPortFlowPointHistoryAction=f3PtpTrafficPortFlowPointHistoryAction, f3PtpAccPortFlowPointThresholdInterval=f3PtpAccPortFlowPointThresholdInterval, f3PtpAccPortFlowPointSecureState=f3PtpAccPortFlowPointSecureState, f3PtpPTPPortClockClass=f3PtpPTPPortClockClass, f3PtpL3PTPPortPtpFlowPointEid=f3PtpL3PTPPortPtpFlowPointEid, f3PtpSOOCIpV6Gateway=f3PtpSOOCIpV6Gateway, f3PtpSOOCThresholdValueHi=f3PtpSOOCThresholdValueHi, f3PtpTrafficPortFlowPointHistoryMaxDelayReqResTime=f3PtpTrafficPortFlowPointHistoryMaxDelayReqResTime, f3PtpSOOCHistoryIndex=f3PtpSOOCHistoryIndex, f3PtpPTPPortStatsTable=f3PtpPTPPortStatsTable)
mibBuilder.exportSymbols("F3-PTP-MIB", f3PtpPTPClockStatsMaxSyncPathDelay=f3PtpPTPClockStatsMaxSyncPathDelay, f3PtpDynamicRemoteSlaveSyncDurRemTime=f3PtpDynamicRemoteSlaveSyncDurRemTime, f3PtpMCIStatsValid=f3PtpMCIStatsValid, f3PtpTSPhaseRecoveryState=f3PtpTSPhaseRecoveryState, f3PtpMCIAdminState=f3PtpMCIAdminState, f3PtpSOOCStatsMaxSyncPDV=f3PtpSOOCStatsMaxSyncPDV, f3PtpAccPortFlowPointIndex=f3PtpAccPortFlowPointIndex, f3PtpPTPClockTimeTraceabilityStatus=f3PtpPTPClockTimeTraceabilityStatus, f3PtpSOOCStatsIndex=f3PtpSOOCStatsIndex, f3PtpL3PTPPortOperationalState=f3PtpL3PTPPortOperationalState, f3PtpTrafficPortFlowPointStatsDestMciNoMatchDiscards=f3PtpTrafficPortFlowPointStatsDestMciNoMatchDiscards, f3PtpTrafficPortFlowPointInner2VlanEtherType=f3PtpTrafficPortFlowPointInner2VlanEtherType, f3PtpPTPClockPriority1=f3PtpPTPClockPriority1, f3PtpNetPortFlowPointEIRLo=f3PtpNetPortFlowPointEIRLo, f3PtpMasterClockServiceAvailablePercentage=f3PtpMasterClockServiceAvailablePercentage, f3PtpNetPortFlowPointCIRLo=f3PtpNetPortFlowPointCIRLo, f3PtpSOOCStorageType=f3PtpSOOCStorageType, f3PtpL3PTPPortHistoryMaxSyncPathDelay=f3PtpL3PTPPortHistoryMaxSyncPathDelay, f3PtpPTPPortStatsAvgSyncRate=f3PtpPTPPortStatsAvgSyncRate, f3PtpAccPortFlowPointService=f3PtpAccPortFlowPointService, f3PtpTrafficPortFlowPointHistoryPDelayRspsRx=f3PtpTrafficPortFlowPointHistoryPDelayRspsRx, f3PtpPTPPortStatsMaxOffsetFromMaster=f3PtpPTPPortStatsMaxOffsetFromMaster, f3PtpDynamicRemoteSlaveIndex=f3PtpDynamicRemoteSlaveIndex, f3PtpStaticRemoteSlaveNegSyncLeaseDur=f3PtpStaticRemoteSlaveNegSyncLeaseDur, f3PtpNetPortFlowPointStatsTable=f3PtpNetPortFlowPointStatsTable, f3PtpAccPortFlowPointStatsDelayReqsTx=f3PtpAccPortFlowPointStatsDelayReqsTx, f3PtpSOOCStatsMaxMeanPathDelay=f3PtpSOOCStatsMaxMeanPathDelay, f3PtpNetPortFlowPointStatsDelayRspsTx=f3PtpNetPortFlowPointStatsDelayRspsTx, f3PtpTrafficPortFlowPointStatsPDelayReqsRx=f3PtpTrafficPortFlowPointStatsPDelayReqsRx, f3PtpL3PTPPortThresholdMonValue=f3PtpL3PTPPortThresholdMonValue, f3PtpNetPortFlowPointHistoryAnnouncesRx=f3PtpNetPortFlowPointHistoryAnnouncesRx, f3PtpTrafficPortFlowPointCIRHi=f3PtpTrafficPortFlowPointCIRHi, f3PtpNetPortFlowPointHistoryAvgSyncResTime=f3PtpNetPortFlowPointHistoryAvgSyncResTime, f3PtpBCAlias=f3PtpBCAlias, f3PtpPTPClockPriority2=f3PtpPTPClockPriority2, f3PtpNetPortFlowPointLoopAvoidance=f3PtpNetPortFlowPointLoopAvoidance, f3PtpBCIndex=f3PtpBCIndex, f3PtpSOOCThresholdTable=f3PtpSOOCThresholdTable, f3PtpMCISecondaryState=f3PtpMCISecondaryState, f3PtpNetPortFlowPointThresholdMonValue=f3PtpNetPortFlowPointThresholdMonValue, f3PtpPTPPortmAnnounceMsgRate=f3PtpPTPPortmAnnounceMsgRate, f3PtpSOOCStatsPDelayReqDiscards=f3PtpSOOCStatsPDelayReqDiscards, f3PtpAccPortFlowPointRefConnectGuardFlow=f3PtpAccPortFlowPointRefConnectGuardFlow, f3PtpMCIThresholdInterval=f3PtpMCIThresholdInterval, f3PtpSOOCServiceFlow=f3PtpSOOCServiceFlow, f3PtpRemoteSlaveStatsAnnounceMsgsGen=f3PtpRemoteSlaveStatsAnnounceMsgsGen, f3PtpL3PTPPortHistoryTable=f3PtpL3PTPPortHistoryTable, f3PtpStaticRemoteSlaveClockIdentity=f3PtpStaticRemoteSlaveClockIdentity, f3PtpSOOCUnicastMessageNegEnabled=f3PtpSOOCUnicastMessageNegEnabled, f3PtpAccPortFlowPointHistoryPtpUnknownsTx=f3PtpAccPortFlowPointHistoryPtpUnknownsTx, f3PtpNetPortFlowPointHistoryMinSyncResTime=f3PtpNetPortFlowPointHistoryMinSyncResTime, f3PtpNetPortFlowPointHistoryMaxPDelayRspResTime=f3PtpNetPortFlowPointHistoryMaxPDelayRspResTime, f3PtpTrafficPortFlowPointStatsSyncsTx=f3PtpTrafficPortFlowPointStatsSyncsTx, f3PtpTrafficPortFlowPointStatsMaxPDelayRspResTime=f3PtpTrafficPortFlowPointStatsMaxPDelayRspResTime, f3PtpPTPPortmDelayReqRespMsgRate=f3PtpPTPPortmDelayReqRespMsgRate, f3PtpL3PTPPortIpV6AddrPrefixLength=f3PtpL3PTPPortIpV6AddrPrefixLength, f3PtpL3PTPPortStatsMessageWrongTypeDiscards=f3PtpL3PTPPortStatsMessageWrongTypeDiscards, f3PtpPTPClockTimeSource=f3PtpPTPClockTimeSource, f3PtpL3PTPPortThresholdIndex=f3PtpL3PTPPortThresholdIndex, f3PtpSOOCName=f3PtpSOOCName, f3PtpSOOCStatsInvalidMsgLenDiscards=f3PtpSOOCStatsInvalidMsgLenDiscards, f3PtpTrafficPortFlowPointHistorySyncsRx=f3PtpTrafficPortFlowPointHistorySyncsRx, f3PtpL3PTPPortStatsAvgAnnounceRate=f3PtpL3PTPPortStatsAvgAnnounceRate, f3PtpAccPortFlowPointStatsMaxPDelayRspResTime=f3PtpAccPortFlowPointStatsMaxPDelayRspResTime, f3PtpRemoteSlaveHistoryDelayRspMsgsGen=f3PtpRemoteSlaveHistoryDelayRspMsgsGen, f3PtpTSClockRecoveryMode=f3PtpTSClockRecoveryMode, f3PtpPTPClockStatsMinSyncPathDelay=f3PtpPTPClockStatsMinSyncPathDelay, f3PtpConformance=f3PtpConformance, f3PtpL3PTPPortHistoryMessageWrongTypeDiscards=f3PtpL3PTPPortHistoryMessageWrongTypeDiscards, f3PtpTrafficPortFlowPointHistoryAvgDelayReqResTime=f3PtpTrafficPortFlowPointHistoryAvgDelayReqResTime, f3PtpL3PTPPortHistoryMinMeanPathDelay=f3PtpL3PTPPortHistoryMinMeanPathDelay, f3PtpPTPClockHistoryMaxOffsetFromMaster=f3PtpPTPClockHistoryMaxOffsetFromMaster, f3PtpL3PTPPortHistoryAvgDelayReqRate=f3PtpL3PTPPortHistoryAvgDelayReqRate, f3PtpMasterVirtualPortAlias=f3PtpMasterVirtualPortAlias, f3PtpSOOCAlgorithmPtpAware=f3PtpSOOCAlgorithmPtpAware, f3PtpNetPortFlowPointStatsMaxPDelayRspResTime=f3PtpNetPortFlowPointStatsMaxPDelayRspResTime, f3PtpRemoteSlaveHistoryAnnounceMsgsGen=f3PtpRemoteSlaveHistoryAnnounceMsgsGen, f3PtpTrafficPortFlowPointStatsFollowupsTx=f3PtpTrafficPortFlowPointStatsFollowupsTx, f3PtpTrafficPortFlowPointHistoryTime=f3PtpTrafficPortFlowPointHistoryTime, f3PtpNetPortFlowPointHistoryAvgPDelayReqResTime=f3PtpNetPortFlowPointHistoryAvgPDelayReqResTime, f3PtpL3PTPPortTransmitDuration=f3PtpL3PTPPortTransmitDuration, f3PtpTCStorageType=f3PtpTCStorageType, f3PtpAccPortFlowPointStatsPDelayRspsRx=f3PtpAccPortFlowPointStatsPDelayRspsRx, f3PtpSOOCMinimumExpectedClockClass=f3PtpSOOCMinimumExpectedClockClass, f3PtpNetPortFlowPointSecondaryState=f3PtpNetPortFlowPointSecondaryState, f3PtpMasterClockAdminState=f3PtpMasterClockAdminState, f3PtpAccPortFlowPointHistorySignalingTx=f3PtpAccPortFlowPointHistorySignalingTx, f3PtpOCSlaveVirtualPortIndex=f3PtpOCSlaveVirtualPortIndex, f3PtpSOOCHistoryMinOffsetFromMaster=f3PtpSOOCHistoryMinOffsetFromMaster, f3PtpTCSecondaryState=f3PtpTCSecondaryState, f3PtpAccPortFlowPointHistoryPDelayRspsRx=f3PtpAccPortFlowPointHistoryPDelayRspsRx, f3PtpMCIHistoryValid=f3PtpMCIHistoryValid, f3PtpTrafficPortFlowPointHistorySyncsTx=f3PtpTrafficPortFlowPointHistorySyncsTx, f3PtpAccPortFlowPointThresholdValueHi=f3PtpAccPortFlowPointThresholdValueHi, f3PtpPTPPortThresholdEntry=f3PtpPTPPortThresholdEntry, f3PtpTrafficPortFlowPointThresholdValueHi=f3PtpTrafficPortFlowPointThresholdValueHi, f3PtpPTPClockClockAccuracy=f3PtpPTPClockClockAccuracy, f3PtpTrafficPortFlowPointHistoryMinPDelayRspResTime=f3PtpTrafficPortFlowPointHistoryMinPDelayRspResTime, ScaledNanoseconds=ScaledNanoseconds, f3PtpMasterClockPTPProfile=f3PtpMasterClockPTPProfile, f3PtpRemoteSlaveStatsInvalidTLVTypeDiscards=f3PtpRemoteSlaveStatsInvalidTLVTypeDiscards, f3PtpTSStatsTotalTimeCR4=f3PtpTSStatsTotalTimeCR4, f3PtpTrafficPortFlowPointHistoryMinPDelayReqResTime=f3PtpTrafficPortFlowPointHistoryMinPDelayReqResTime, f3PtpStatusChangeNotifications=f3PtpStatusChangeNotifications, f3PtpNetPortFlowPointOuterVlanEtherType=f3PtpNetPortFlowPointOuterVlanEtherType, f3PtpStaticRemoteSlaveAdminState=f3PtpStaticRemoteSlaveAdminState, f3PtpAccPortFlowPointThresholdTable=f3PtpAccPortFlowPointThresholdTable, f3PtpMCIIfName=f3PtpMCIIfName, f3PtpTrafficPortFlowPointHistorySignalingRx=f3PtpTrafficPortFlowPointHistorySignalingRx, f3PtpTrafficPortFlowPointHistoryMaxPDelayRspResTime=f3PtpTrafficPortFlowPointHistoryMaxPDelayRspResTime, f3PtpTSClockSyncEEnabled=f3PtpTSClockSyncEEnabled, f3PtpPTPClockLocalPriority=f3PtpPTPClockLocalPriority, f3PtpTrafficPortFlowPointStatsTagNoMatchDiscards=f3PtpTrafficPortFlowPointStatsTagNoMatchDiscards, f3PtpL3PTPPortStatsAvgDelayRespRate=f3PtpL3PTPPortStatsAvgDelayRespRate, f3PtpTSHistoryTotalTimePR3=f3PtpTSHistoryTotalTimePR3, f3PtpL3PTPPortSecondaryState=f3PtpL3PTPPortSecondaryState, f3PtpPTPPortSyncMessageRate=f3PtpPTPPortSyncMessageRate, f3PtpMCIMaxStaticSlavesSupported=f3PtpMCIMaxStaticSlavesSupported, f3PtpNetPortFlowPointRowStatus=f3PtpNetPortFlowPointRowStatus, f3PtpAccPortFlowPointOperationalState=f3PtpAccPortFlowPointOperationalState, f3PtpAccPortFlowPointStatsPDelayReqsTx=f3PtpAccPortFlowPointStatsPDelayReqsTx, f3PtpTrafficPortFlowPointHistoryMaxPDelayReqResTime=f3PtpTrafficPortFlowPointHistoryMaxPDelayReqResTime, f3PtpSOOCMasterMessageMode=f3PtpSOOCMasterMessageMode, f3PtpPTPPortThresholdIndex=f3PtpPTPPortThresholdIndex, f3PtpMCIServiceFlow=f3PtpMCIServiceFlow, PYSNMP_MODULE_ID=f3PtpMIB, f3PtpPTPPortHistoryAvgMeanPathDelay=f3PtpPTPPortHistoryAvgMeanPathDelay, f3PtpPTPPortHistoryMsgMiscDiscards=f3PtpPTPPortHistoryMsgMiscDiscards, f3PtpL3PTPPortHistoryAvgMeanPathDelay=f3PtpL3PTPPortHistoryAvgMeanPathDelay, f3PtpDynamicRemoteSlaveNegSyncLeaseDur=f3PtpDynamicRemoteSlaveNegSyncLeaseDur, f3PtpL3PTPPortHistoryAvgSyncRate=f3PtpL3PTPPortHistoryAvgSyncRate, f3PtpMCIHistoryDelayRspCancelledEvents=f3PtpMCIHistoryDelayRspCancelledEvents, f3PtpL3PTPPortIpV6Address=f3PtpL3PTPPortIpV6Address, f3PtpSOOCOperationalState=f3PtpSOOCOperationalState, f3PtpTrafficPortFlowPointCIRLo=f3PtpTrafficPortFlowPointCIRLo, f3PtpTSClockExpectedQL=f3PtpTSClockExpectedQL, f3PtpRemoteSlaveHistoryInvalidTLVLenDiscards=f3PtpRemoteSlaveHistoryInvalidTLVLenDiscards, f3PtpSOOCHistoryPDelayReqDiscards=f3PtpSOOCHistoryPDelayReqDiscards, f3PtpTCVirtualPortFlowPoint=f3PtpTCVirtualPortFlowPoint, f3PtpTCAlias=f3PtpTCAlias, f3PtpL3PTPPortSyncMessageRate=f3PtpL3PTPPortSyncMessageRate, f3PtpPTPClockHistoryMinSyncPathDelay=f3PtpPTPClockHistoryMinSyncPathDelay, f3PtpPTPPortAnnounceReceiptTimeout=f3PtpPTPPortAnnounceReceiptTimeout, f3PtpTSThresholdValueLo=f3PtpTSThresholdValueLo, f3PtpTSTimeSinceFreqTraceabilityChanged=f3PtpTSTimeSinceFreqTraceabilityChanged, f3PtpNetPortFlowPointHistoryDelayReqsRx=f3PtpNetPortFlowPointHistoryDelayReqsRx, f3PtpDynamicRemoteSlavePortIdentity=f3PtpDynamicRemoteSlavePortIdentity, f3PtpTCOperationalState=f3PtpTCOperationalState, f3PtpAccPortFlowPointHistorySyncsRx=f3PtpAccPortFlowPointHistorySyncsRx, f3PtpRemoteSlaveStatsTimesDelayRspLeaseExp=f3PtpRemoteSlaveStatsTimesDelayRspLeaseExp, f3PtpPTPClockStatsValid=f3PtpPTPClockStatsValid, f3PtpNetPortFlowPointStatsAvgPDelayRspResTime=f3PtpNetPortFlowPointStatsAvgPDelayRspResTime, f3PtpStaticRemoteSlaveSecondaryState=f3PtpStaticRemoteSlaveSecondaryState, f3PtpRemoteSlaveHistoryTimesAnnounceLeaseExp=f3PtpRemoteSlaveHistoryTimesAnnounceLeaseExp, f3PtpMasterClockTimeScale=f3PtpMasterClockTimeScale, f3PtpTrafficPortFlowPointHistorySignalingTx=f3PtpTrafficPortFlowPointHistorySignalingTx, f3PtpPTPClockHistoryEntry=f3PtpPTPClockHistoryEntry, f3PtpEthernetAccPortExtTable=f3PtpEthernetAccPortExtTable, f3PtpSOOCHistoryAvgRevFlowWeight=f3PtpSOOCHistoryAvgRevFlowWeight, f3PtpSOOCLastReceivedAnnounceMsg=f3PtpSOOCLastReceivedAnnounceMsg, f3PtpPTPPortHistoryAvgDelayRespRate=f3PtpPTPPortHistoryAvgDelayRespRate, f3PtpMCIProtMemberRowStatus=f3PtpMCIProtMemberRowStatus, f3PtpNetPortFlowPointStatsDelayReqsRx=f3PtpNetPortFlowPointStatsDelayReqsRx, f3PtpNetPortFlowPointHistoryMaxDelayReqResTime=f3PtpNetPortFlowPointHistoryMaxDelayReqResTime, ToggleValue=ToggleValue, f3PtpSOOCStatsAvgSyncPathDelay=f3PtpSOOCStatsAvgSyncPathDelay, f3PtpSOOCHistoryOutOfSeqAnnounceMsgs=f3PtpSOOCHistoryOutOfSeqAnnounceMsgs, DelayReqMsgRate=DelayReqMsgRate, f3PtpPTPPortMasterClockType=f3PtpPTPPortMasterClockType, f3PtpNetPortFlowPointAdminState=f3PtpNetPortFlowPointAdminState, f3PtpAccPortFlowPointStatsTagNoMatchDiscards=f3PtpAccPortFlowPointStatsTagNoMatchDiscards, f3PtpNetPortFlowPointHistoryMinDelayReqResTime=f3PtpNetPortFlowPointHistoryMinDelayReqResTime, f3PtpRemoteSlaveHistorySignallingMsgsGen=f3PtpRemoteSlaveHistorySignallingMsgsGen, MasterClockType=MasterClockType, f3PtpAccPortFlowPointHistoryMgmtFramesTx=f3PtpAccPortFlowPointHistoryMgmtFramesTx, f3PtpNetPortFlowPointStatsAnnouncesRx=f3PtpNetPortFlowPointStatsAnnouncesRx, f3PtpL3PTPPortIpV4Address=f3PtpL3PTPPortIpV4Address, f3PtpMCIProtGroupStorageType=f3PtpMCIProtGroupStorageType, f3PtpAccPortFlowPointStatsPDelayRspsTx=f3PtpAccPortFlowPointStatsPDelayRspsTx, f3PtpSOOCStatsInvalidTLVTypeDiscards=f3PtpSOOCStatsInvalidTLVTypeDiscards, f3PtpAccPortFlowPointCIRLo=f3PtpAccPortFlowPointCIRLo, f3PtpOCSlaveVirtualPortIdentity=f3PtpOCSlaveVirtualPortIdentity, f3PtpL3PTPPortRowStatus=f3PtpL3PTPPortRowStatus, f3PtpNetPortFlowPointStatsPtpUnknownsRx=f3PtpNetPortFlowPointStatsPtpUnknownsRx, f3PtpL3PTPPortHistoryMaxMeanPathDelay=f3PtpL3PTPPortHistoryMaxMeanPathDelay, f3PtpTCRowStatus=f3PtpTCRowStatus, f3PtpNetPortFlowPointHistoryValid=f3PtpNetPortFlowPointHistoryValid, f3PtpPTPPortHistoryAvgDelayReqRate=f3PtpPTPPortHistoryAvgDelayReqRate, f3PtpPTPClockActiveGrantsDelayRequestService=f3PtpPTPClockActiveGrantsDelayRequestService, f3PtpMasterClockPhysicalEntityIndex=f3PtpMasterClockPhysicalEntityIndex, f3PtpL3PTPPortRequestUnicastTimeout=f3PtpL3PTPPortRequestUnicastTimeout, f3PtpRemoteSlaveHistoryAction=f3PtpRemoteSlaveHistoryAction, f3PtpL3PTPPortStatsMinSyncPathDelay=f3PtpL3PTPPortStatsMinSyncPathDelay, f3PtpNetPortFlowPointCOS=f3PtpNetPortFlowPointCOS, f3PtpAccPortFlowPointOuterVlanEtherType=f3PtpAccPortFlowPointOuterVlanEtherType, f3PtpPTPClockTable=f3PtpPTPClockTable, f3PtpTrafficPortFlowPointStatsMinDelayReqResTime=f3PtpTrafficPortFlowPointStatsMinDelayReqResTime, f3PtpL3PTPPortStatsAvgMeanPathDelay=f3PtpL3PTPPortStatsAvgMeanPathDelay, SyncMessageRate=SyncMessageRate, f3PtpEthernetNetPortDelayAsymmetry=f3PtpEthernetNetPortDelayAsymmetry, f3PtpAccPortFlowPointStatsAnnouncesRx=f3PtpAccPortFlowPointStatsAnnouncesRx, f3PtpRemoteSlaveStatsInvalidTLVLenDiscards=f3PtpRemoteSlaveStatsInvalidTLVLenDiscards, f3PtpTrafficPortFlowPointThresholdTable=f3PtpTrafficPortFlowPointThresholdTable, f3PtpPTPPortStatsMismatchDomainDiscards=f3PtpPTPPortStatsMismatchDomainDiscards, f3PtpTSTimeLastCRScore=f3PtpTSTimeLastCRScore, f3PtpSOOCStatsInvalidTLVLenDiscards=f3PtpSOOCStatsInvalidTLVLenDiscards, f3PtpTrafficPortFlowPointStatsDelayReqsTx=f3PtpTrafficPortFlowPointStatsDelayReqsTx, f3PtpTrafficPortFlowPointHistoryPtpUnknownsTx=f3PtpTrafficPortFlowPointHistoryPtpUnknownsTx, f3PtpNetPortFlowPointHistoryPDelayRspFollowupsTx=f3PtpNetPortFlowPointHistoryPDelayRspFollowupsTx, f3PtpNetPortFlowPointHistoryPDelayReqsRx=f3PtpNetPortFlowPointHistoryPDelayReqsRx, f3PtpL3PTPPortHistoryMismatchDomainDiscards=f3PtpL3PTPPortHistoryMismatchDomainDiscards, f3PtpPTPClockAlias=f3PtpPTPClockAlias, f3PtpSOOCThresholdIndex=f3PtpSOOCThresholdIndex, f3PtpTrafficPortFlowPointHistoryTable=f3PtpTrafficPortFlowPointHistoryTable, f3PtpNetPortFlowPointStatsMinPDelayRspResTime=f3PtpNetPortFlowPointStatsMinPDelayRspResTime, f3PtpPerfNotifGroup=f3PtpPerfNotifGroup, f3PtpTSAdminState=f3PtpTSAdminState, f3PtpL3PTPPortStatsIntervalType=f3PtpL3PTPPortStatsIntervalType, f3PtpSOOCSoocProtectionState=f3PtpSOOCSoocProtectionState, f3PtpAccPortFlowPointSecondaryState=f3PtpAccPortFlowPointSecondaryState, f3PtpTrafficPortFlowPointStatsIndex=f3PtpTrafficPortFlowPointStatsIndex, f3PtpMCIDomainNumber=f3PtpMCIDomainNumber, f3PtpPTPPortCrossingAlert=f3PtpPTPPortCrossingAlert, f3PtpTrafficPortFlowPointHistoryDelayReqsRx=f3PtpTrafficPortFlowPointHistoryDelayReqsRx, f3PtpOCSlaveVirtualPortRowStatus=f3PtpOCSlaveVirtualPortRowStatus, f3PtpSOOCStatsUnknownMasterDiscards=f3PtpSOOCStatsUnknownMasterDiscards, f3PtpTrafficPortFlowPointStatsAvgDelayReqResTime=f3PtpTrafficPortFlowPointStatsAvgDelayReqResTime, f3PtpPTPPortStatsAvgDelayRespRate=f3PtpPTPPortStatsAvgDelayRespRate, PTPProtectionState=PTPProtectionState, f3PtpNetPortFlowPointStatsAnnouncesTx=f3PtpNetPortFlowPointStatsAnnouncesTx, ClockClassProfile=ClockClassProfile, f3PtpDynamicRemoteSlaveAlias=f3PtpDynamicRemoteSlaveAlias, f3PtpL3PTPPortIpV4SubnetMask=f3PtpL3PTPPortIpV4SubnetMask, f3PtpOCSlaveVirtualPortEntry=f3PtpOCSlaveVirtualPortEntry, f3PtpSOOCStatsTwoStepSyncDiscards=f3PtpSOOCStatsTwoStepSyncDiscards, f3PtpAccPortFlowPointStatsIndex=f3PtpAccPortFlowPointStatsIndex, f3PtpDynamicRemoteSlaveNegDelayRspLeaseDur=f3PtpDynamicRemoteSlaveNegDelayRspLeaseDur, f3PtpL3PTPPortStatsAvgOffsetFromMaster=f3PtpL3PTPPortStatsAvgOffsetFromMaster, f3PtpAccPortFlowPointHistoryTable=f3PtpAccPortFlowPointHistoryTable, f3PtpAccPortFlowPointCOS=f3PtpAccPortFlowPointCOS, f3PtpPTPPortStatsAvgAnnounceRate=f3PtpPTPPortStatsAvgAnnounceRate, f3PtpTrafficPortFlowPointHistoryDelayRspsTx=f3PtpTrafficPortFlowPointHistoryDelayRspsTx, f3PtpSOOCStatsPDelayRspDiscards=f3PtpSOOCStatsPDelayRspDiscards, f3PtpSOOCSoocPhaseRecoveryState=f3PtpSOOCSoocPhaseRecoveryState, f3PtpSOOCHistoryTable=f3PtpSOOCHistoryTable, f3PtpAccPortFlowPointStatsMaxSyncResTime=f3PtpAccPortFlowPointStatsMaxSyncResTime, f3PtpSOOCThresholdInterval=f3PtpSOOCThresholdInterval, f3PtpSOOCHistoryMaxFwdFlowWeight=f3PtpSOOCHistoryMaxFwdFlowWeight, f3PtpAccPortFlowPointHistoryPDelayRspsTx=f3PtpAccPortFlowPointHistoryPDelayRspsTx, f3PtpSOOCMasterSyncMsgRate=f3PtpSOOCMasterSyncMsgRate, f3PtpNetPortFlowPointInner1VlanMemberList=f3PtpNetPortFlowPointInner1VlanMemberList, f3PtpEthernetNetPortExtTable=f3PtpEthernetNetPortExtTable, f3PtpMCIProtGroupIndex=f3PtpMCIProtGroupIndex, f3PtpMCIHistoryIndex=f3PtpMCIHistoryIndex)
mibBuilder.exportSymbols("F3-PTP-MIB", f3PtpBCClockIdentity=f3PtpBCClockIdentity, f3PtpPTPClockThresholdMonValue=f3PtpPTPClockThresholdMonValue, f3PtpPTPPortHistoryMismatchDomainDiscards=f3PtpPTPPortHistoryMismatchDomainDiscards, f3PtpL3PTPPortMasterIpV4Address=f3PtpL3PTPPortMasterIpV4Address, f3PtpPTPClockServiceAvailablePercentage=f3PtpPTPClockServiceAvailablePercentage, f3PtpMCIStatsDelayRspCancelledEvents=f3PtpMCIStatsDelayRspCancelledEvents, f3PtpAccPortFlowPointAlias=f3PtpAccPortFlowPointAlias, f3PtpTSHistoryEntry=f3PtpTSHistoryEntry, f3PtpPTPPortEntry=f3PtpPTPPortEntry, f3PtpNetPortFlowPointStatsPDelayRspsTx=f3PtpNetPortFlowPointStatsPDelayRspsTx, f3PtpNetPortFlowPointEntry=f3PtpNetPortFlowPointEntry, PTPProfile=PTPProfile, f3PtpL3PTPPortEntry=f3PtpL3PTPPortEntry, f3PtpPTPPortStatsMaxMeanPathDelay=f3PtpPTPPortStatsMaxMeanPathDelay, f3PtpL3PTPPortStatsMinOffsetFromMaster=f3PtpL3PTPPortStatsMinOffsetFromMaster, f3PtpAccPortFlowPointStatsMinPDelayReqResTime=f3PtpAccPortFlowPointStatsMinPDelayReqResTime, f3PtpNetPortFlowPointStatsMaxPDelayReqResTime=f3PtpNetPortFlowPointStatsMaxPDelayReqResTime, f3PtpObjectGroup=f3PtpObjectGroup, f3PtpNetPortFlowPointHistoryMaxPDelayReqResTime=f3PtpNetPortFlowPointHistoryMaxPDelayReqResTime, f3PtpTrafficPortFlowPointThresholdValueLo=f3PtpTrafficPortFlowPointThresholdValueLo, f3PtpPTPClockHistoryAvgMeanPathDelay=f3PtpPTPClockHistoryAvgMeanPathDelay, f3PtpMCIMaxDelayRespMsgRate=f3PtpMCIMaxDelayRespMsgRate, f3PtpTrafficPortFlowPointStatsMgmtFramesTx=f3PtpTrafficPortFlowPointStatsMgmtFramesTx, f3PtpSOOCStatsValid=f3PtpSOOCStatsValid, f3PtpStaticRemoteSlaveSyncMsgRate=f3PtpStaticRemoteSlaveSyncMsgRate, f3PtpL3PTPPortHistoryIndex=f3PtpL3PTPPortHistoryIndex, f3PtpPTPPortIsProbingSlave=f3PtpPTPPortIsProbingSlave, f3PtpMCIRowStatus=f3PtpMCIRowStatus, f3PtpL3PTPPortAnnounceMsgRate=f3PtpL3PTPPortAnnounceMsgRate, f3PtpMasterVirtualPortTable=f3PtpMasterVirtualPortTable, f3PtpTrafficPortFlowPointExtEntry=f3PtpTrafficPortFlowPointExtEntry, f3PtpNetPortFlowPointHistorySyncsRx=f3PtpNetPortFlowPointHistorySyncsRx, f3PtpNetPortFlowPointHistoryPDelayReqsTx=f3PtpNetPortFlowPointHistoryPDelayReqsTx, f3PtpDynamicRemoteSlaveIpV4Address=f3PtpDynamicRemoteSlaveIpV4Address, f3PtpRemoteSlaveThresholdIndex=f3PtpRemoteSlaveThresholdIndex, f3PtpTrafficPortFlowPointStatsSignalingRx=f3PtpTrafficPortFlowPointStatsSignalingRx, f3PtpL3PTPPortStatsTable=f3PtpL3PTPPortStatsTable, f3PtpL3PTPPortHistoryAvgAnnounceRate=f3PtpL3PTPPortHistoryAvgAnnounceRate, f3PtpTSCrossingAlert=f3PtpTSCrossingAlert, f3PtpTCTable=f3PtpTCTable, f3PtpEthernetTrafficPortExtTable=f3PtpEthernetTrafficPortExtTable, TimeScale=TimeScale, f3PtpTSTable=f3PtpTSTable, f3PtpSOOCCurrentOffsetFromMaster=f3PtpSOOCCurrentOffsetFromMaster, f3PtpMCIProtGroupLastSwitchOverReason=f3PtpMCIProtGroupLastSwitchOverReason, f3PtpMCIClockClass=f3PtpMCIClockClass, f3PtpAccPortFlowPointInner2UntaggedEnabled=f3PtpAccPortFlowPointInner2UntaggedEnabled, f3PtpNetPortFlowPointAlias=f3PtpNetPortFlowPointAlias, f3PtpL3PTPPortDelayAsymmetry=f3PtpL3PTPPortDelayAsymmetry, f3PtpNetPortFlowPointHistoryPDelayRspFollowupsRx=f3PtpNetPortFlowPointHistoryPDelayRspFollowupsRx, f3PtpMCIThresholdEntry=f3PtpMCIThresholdEntry, f3PtpPTPPortThresholdMonValue=f3PtpPTPPortThresholdMonValue, f3PtpPTPClockSecondaryState=f3PtpPTPClockSecondaryState, f3PtpTrafficPortFlowPointHistoryAvgPDelayRspResTime=f3PtpTrafficPortFlowPointHistoryAvgPDelayRspResTime, f3PtpL3PTPPortHistoryAction=f3PtpL3PTPPortHistoryAction, f3PtpMCIMaxLeaseDuration=f3PtpMCIMaxLeaseDuration, f3PtpNetPortFlowPointSecureBlockingEnabled=f3PtpNetPortFlowPointSecureBlockingEnabled, f3PtpMasterClockServiceUnavailableTime=f3PtpMasterClockServiceUnavailableTime, f3PtpNetPortFlowPointThresholdVariable=f3PtpNetPortFlowPointThresholdVariable, f3PtpL3PTPPortHistoryTime=f3PtpL3PTPPortHistoryTime, f3PtpTrafficPortFlowPointStatsAvgPDelayReqResTime=f3PtpTrafficPortFlowPointStatsAvgPDelayReqResTime, f3PtpOCSlaveVirtualPortOperationalState=f3PtpOCSlaveVirtualPortOperationalState, f3PtpTrafficPortFlowPointThresholdIndex=f3PtpTrafficPortFlowPointThresholdIndex, f3PtpPTPClockHistoryValid=f3PtpPTPClockHistoryValid, f3PtpPTPPortStatsValid=f3PtpPTPPortStatsValid, DelayReqMessageRate=DelayReqMessageRate, f3PtpTSWtrTime=f3PtpTSWtrTime, f3PtpBCClockClass=f3PtpBCClockClass, f3PtpMCIIpV6Gateway=f3PtpMCIIpV6Gateway, f3PtpNetPortFlowPointHistoryDelayRspsTx=f3PtpNetPortFlowPointHistoryDelayRspsTx, f3PtpMCIProtGroupLastSwitchOverTime=f3PtpMCIProtGroupLastSwitchOverTime, f3PtpNetPortFlowPointHistoryIndex=f3PtpNetPortFlowPointHistoryIndex, f3PtpNetPortFlowPointOperationalState=f3PtpNetPortFlowPointOperationalState, f3PtpNetPortFlowPointStatsPtpUnknownsTx=f3PtpNetPortFlowPointStatsPtpUnknownsTx, f3PtpTSStatsIndex=f3PtpTSStatsIndex, f3PtpPTPClockCrossingAlert=f3PtpPTPClockCrossingAlert, f3PtpAccPortFlowPointHistoryTime=f3PtpAccPortFlowPointHistoryTime, f3PtpPTPClockClockType=f3PtpPTPClockClockType, f3PtpAccPortFlowPointHistoryMaxPDelayRspResTime=f3PtpAccPortFlowPointHistoryMaxPDelayRspResTime, f3PtpBCRowStatus=f3PtpBCRowStatus, f3PtpPTPClockCurrentOffsetFromMaster=f3PtpPTPClockCurrentOffsetFromMaster, f3PtpSOOCStatsMaxSyncPathDelay=f3PtpSOOCStatsMaxSyncPathDelay, BMCARole=BMCARole, f3PtpBoundaryClockNotifGroup=f3PtpBoundaryClockNotifGroup, f3PtpMCIAnnounceExtTLVEnable=f3PtpMCIAnnounceExtTLVEnable, f3PtpPTPPortThresholdValueLo=f3PtpPTPPortThresholdValueLo, f3PtpAccPortFlowPointEntry=f3PtpAccPortFlowPointEntry, f3PtpAccPortFlowPointThresholdValueLo=f3PtpAccPortFlowPointThresholdValueLo, f3PtpAccPortFlowPointAdminState=f3PtpAccPortFlowPointAdminState, f3PtpEthernetTrafficPortExtEntry=f3PtpEthernetTrafficPortExtEntry, f3PtpRemoteSlaveStatsSignallingMsgsGen=f3PtpRemoteSlaveStatsSignallingMsgsGen, f3PtpPTPPortPeerPortIdentity=f3PtpPTPPortPeerPortIdentity, f3PtpNetPortFlowPointInner2VlanEtherType=f3PtpNetPortFlowPointInner2VlanEtherType, f3PtpAccPortFlowPointHistoryMaxDelayReqResTime=f3PtpAccPortFlowPointHistoryMaxDelayReqResTime, f3PtpStaticRemoteSlaveSyncDurRemTime=f3PtpStaticRemoteSlaveSyncDurRemTime, f3PtpNetPortFlowPointHistoryDelayRspsRx=f3PtpNetPortFlowPointHistoryDelayRspsRx, f3PtpSOOCStatsAction=f3PtpSOOCStatsAction, f3PtpSOOCStatsMgmtMsgsDiscarded=f3PtpSOOCStatsMgmtMsgsDiscarded, f3PtpL3PTPPortThresholdEntry=f3PtpL3PTPPortThresholdEntry, f3PtpL2DynamicRemoteSlaveTable=f3PtpL2DynamicRemoteSlaveTable, f3PtpL3PTPPortIndex=f3PtpL3PTPPortIndex, f3PtpSOOCHistoryMaxSyncPDV=f3PtpSOOCHistoryMaxSyncPDV, f3PtpPTPClockStatsMaxMeanPathDelay=f3PtpPTPClockStatsMaxMeanPathDelay, f3PtpStaticRemoteSlaveRowStatus=f3PtpStaticRemoteSlaveRowStatus, f3PtpRemoteSlaveStatsAction=f3PtpRemoteSlaveStatsAction, f3PtpRemoteSlaveHistoryDelayReqMsgsRx=f3PtpRemoteSlaveHistoryDelayReqMsgsRx, f3PtpSOOCE2eDelayAsymmetryComp=f3PtpSOOCE2eDelayAsymmetryComp, f3PtpPTPClockClockQLModeEnabled=f3PtpPTPClockClockQLModeEnabled, f3PtpPTPPortHistoryMinMeanPathDelay=f3PtpPTPPortHistoryMinMeanPathDelay, f3PtpL3PTPPortIfName=f3PtpL3PTPPortIfName, f3PtpTrafficPortFlowPointHistoryPtpUnknownsRx=f3PtpTrafficPortFlowPointHistoryPtpUnknownsRx, f3PtpDynamicRemoteSlaveStatusChangeTrap=f3PtpDynamicRemoteSlaveStatusChangeTrap, f3PtpMCIMasterIpV4Address=f3PtpMCIMasterIpV4Address, f3PtpMCIThresholdMonValue=f3PtpMCIThresholdMonValue, f3PtpRemoteSlaveHistorySignallingMsgsRx=f3PtpRemoteSlaveHistorySignallingMsgsRx, f3PtpL3PTPPortIpPriorityMapMode=f3PtpL3PTPPortIpPriorityMapMode, f3PtpPTPPortHistoryIndex=f3PtpPTPPortHistoryIndex, f3PtpPTPClockStatsMinOffsetFromMaster=f3PtpPTPClockStatsMinOffsetFromMaster, f3PtpL3PTPPortIpProtocol=f3PtpL3PTPPortIpProtocol, f3PtpAccPortFlowPointTable=f3PtpAccPortFlowPointTable, f3PtpSOOCStatsMinSyncPathDelay=f3PtpSOOCStatsMinSyncPathDelay, f3PtpL3PTPPortIpPriority=f3PtpL3PTPPortIpPriority, f3PtpMasterClockClockAccuracy=f3PtpMasterClockClockAccuracy, f3PtpBCDomainNumber=f3PtpBCDomainNumber, f3PtpL3PTPPortIpV6Gateway=f3PtpL3PTPPortIpV6Gateway, f3PtpNetPortFlowPointHistorySignalingTx=f3PtpNetPortFlowPointHistorySignalingTx, f3PtpPTPPortStatsAvgSyncPathDelay=f3PtpPTPPortStatsAvgSyncPathDelay, f3PtpPTPPortHistoryTime=f3PtpPTPPortHistoryTime, f3PtpAccPortFlowPointStatsMaxDelayReqResTime=f3PtpAccPortFlowPointStatsMaxDelayReqResTime, f3PtpTrafficPortFlowPointType=f3PtpTrafficPortFlowPointType, f3PtpTrafficPortFlowPointTable=f3PtpTrafficPortFlowPointTable, f3PtpNetPortFlowPointThresholdTable=f3PtpNetPortFlowPointThresholdTable, f3PtpRemoteSlaveThresholdVariable=f3PtpRemoteSlaveThresholdVariable, f3PtpTrafficPortFlowPointBufferSize=f3PtpTrafficPortFlowPointBufferSize, f3PtpAccPortFlowPointInner1VlanEtherType=f3PtpAccPortFlowPointInner1VlanEtherType, f3PtpNetPortFlowPointStatsAction=f3PtpNetPortFlowPointStatsAction, f3PtpSOOCThresholdEntry=f3PtpSOOCThresholdEntry, f3PtpL3PTPPortThresholdTable=f3PtpL3PTPPortThresholdTable, f3PtpL3PTPPortStatsEntry=f3PtpL3PTPPortStatsEntry, f3PtpPTPClockDomainNumber=f3PtpPTPClockDomainNumber, f3PtpTrafficPortFlowPointStatsMaxPDelayReqResTime=f3PtpTrafficPortFlowPointStatsMaxPDelayReqResTime, f3PtpPTPClockHistoryAvgOffsetFromMaster=f3PtpPTPClockHistoryAvgOffsetFromMaster, f3PtpPTPClockHistoryAvgSyncPathDelay=f3PtpPTPClockHistoryAvgSyncPathDelay, f3PtpNetPortFlowPointStatsMinDelayReqResTime=f3PtpNetPortFlowPointStatsMinDelayReqResTime, f3PtpTrafficPortFlowPointStatsMinSyncResTime=f3PtpTrafficPortFlowPointStatsMinSyncResTime, f3PtpNetPortFlowPointBufferSize=f3PtpNetPortFlowPointBufferSize, f3PtpL3PTPPortLocalPriority=f3PtpL3PTPPortLocalPriority, f3PtpTSIndex=f3PtpTSIndex, f3PtpNetPortFlowPointCIRHi=f3PtpNetPortFlowPointCIRHi, f3PtpMasterClockTable=f3PtpMasterClockTable, f3PtpRemoteSlaveThresholdInterval=f3PtpRemoteSlaveThresholdInterval, f3PtpL3PTPPortDelayRespTimeout=f3PtpL3PTPPortDelayRespTimeout, f3PtpSOOCHistoryMgmtMsgsDiscarded=f3PtpSOOCHistoryMgmtMsgsDiscarded, f3PtpTrafficPortFlowPointStatsAnnouncesTx=f3PtpTrafficPortFlowPointStatsAnnouncesTx, f3PtpAccPortFlowPointHistoryDestMciNoMatchDiscards=f3PtpAccPortFlowPointHistoryDestMciNoMatchDiscards, f3PtpSOOCHistoryMinMeanPathDelay=f3PtpSOOCHistoryMinMeanPathDelay, f3PtpAccPortFlowPointHistoryAction=f3PtpAccPortFlowPointHistoryAction, f3PtpPTPPortPtpFlowPointEid=f3PtpPTPPortPtpFlowPointEid, f3PtpTrafficPortFlowPointStatsEntry=f3PtpTrafficPortFlowPointStatsEntry, f3PtpMasterVirtualPortIndex=f3PtpMasterVirtualPortIndex, f3PtpL2DynamicRemoteSlavePortIdentity=f3PtpL2DynamicRemoteSlavePortIdentity, f3PtpPerformanceNotifications=f3PtpPerformanceNotifications, f3PtpPTPClockScaledLogVariance=f3PtpPTPClockScaledLogVariance, f3PtpMCIProtGroupEntry=f3PtpMCIProtGroupEntry, f3PtpSOOCStatsMinSyncPDV=f3PtpSOOCStatsMinSyncPDV, f3PtpMCIStatsAnnounceDeniedEvents=f3PtpMCIStatsAnnounceDeniedEvents, f3PtpL3PTPPortStatsIndex=f3PtpL3PTPPortStatsIndex, f3PtpL3PTPPortAdminState=f3PtpL3PTPPortAdminState, PtpPortState=PtpPortState, f3PtpMCIHistoryEntry=f3PtpMCIHistoryEntry, f3PtpRemoteSlaveStatsDelayReqMsgsDropped=f3PtpRemoteSlaveStatsDelayReqMsgsDropped, f3PtpAccPortFlowPointHistoryPDelayReqsRx=f3PtpAccPortFlowPointHistoryPDelayReqsRx, f3PtpPTPClockThresholdEntry=f3PtpPTPClockThresholdEntry, f3PtpAccPortFlowPointStatsMgmtFramesTx=f3PtpAccPortFlowPointStatsMgmtFramesTx, f3PtpAccPortFlowPointThresholdVariable=f3PtpAccPortFlowPointThresholdVariable, f3PtpPTPPortHistoryMaxMeanPathDelay=f3PtpPTPPortHistoryMaxMeanPathDelay, f3PtpSOOCCrossingAlert=f3PtpSOOCCrossingAlert, f3PtpSOOCHistoryEntry=f3PtpSOOCHistoryEntry, f3PtpPTPClockNetworkTimeInaccuracy=f3PtpPTPClockNetworkTimeInaccuracy, f3PtpSOOCLastReceivedSyncMsg=f3PtpSOOCLastReceivedSyncMsg, f3PtpMasterClockStorageType=f3PtpMasterClockStorageType, f3PtpTSClockQLModeEnabled=f3PtpTSClockQLModeEnabled, f3PtpAccPortFlowPointHistoryMinSyncResTime=f3PtpAccPortFlowPointHistoryMinSyncResTime, f3PtpAccPortFlowPointStatsSyncsTx=f3PtpAccPortFlowPointStatsSyncsTx, f3PtpSOOCHistoryAvgFwdFlowWeight=f3PtpSOOCHistoryAvgFwdFlowWeight, f3PtpTSHistoryTotalTimePR4=f3PtpTSHistoryTotalTimePR4, f3PtpAccPortFlowPointBufferSize=f3PtpAccPortFlowPointBufferSize, f3PtpRemoteSlaveStatsEntry=f3PtpRemoteSlaveStatsEntry, f3PtpNetPortFlowPointStatsMaxSyncResTime=f3PtpNetPortFlowPointStatsMaxSyncResTime, f3PtpTCVirtualPortIndex=f3PtpTCVirtualPortIndex, f3PtpNetPortFlowPointStatsFollowupsTx=f3PtpNetPortFlowPointStatsFollowupsTx, f3PtpPTPPortStatsAvgDelayReqRate=f3PtpPTPPortStatsAvgDelayReqRate, f3PtpBCOperationalState=f3PtpBCOperationalState, f3PtpPTPClockClockSyncEEnabled=f3PtpPTPClockClockSyncEEnabled, f3PtpDynamicRemoteSlaveAnnounceDurRemTime=f3PtpDynamicRemoteSlaveAnnounceDurRemTime, f3PtpAccPortFlowPointType=f3PtpAccPortFlowPointType, f3PtpTSThresholdEntry=f3PtpTSThresholdEntry, f3PtpTrafficPortFlowPointHistoryIndex=f3PtpTrafficPortFlowPointHistoryIndex, f3PtpPTPPortHistoryAvgAnnounceRate=f3PtpPTPPortHistoryAvgAnnounceRate, f3PtpSOOCHistoryPDelayFollowupDiscards=f3PtpSOOCHistoryPDelayFollowupDiscards, f3PtpSOOCHistoryMulticastSyncDiscards=f3PtpSOOCHistoryMulticastSyncDiscards, f3PtpAccPortFlowPointStatsDelayRspsTx=f3PtpAccPortFlowPointStatsDelayRspsTx, f3PtpTSSync=f3PtpTSSync, f3PtpMCIProtMemberObject=f3PtpMCIProtMemberObject, f3PtpMCIThresholdValueHi=f3PtpMCIThresholdValueHi, f3PtpAccPortFlowPointHistoryDelayRspsRx=f3PtpAccPortFlowPointHistoryDelayRspsRx, f3PtpMCIIpProtocol=f3PtpMCIIpProtocol, f3PtpTrafficPortFlowPointStatsMinPDelayReqResTime=f3PtpTrafficPortFlowPointStatsMinPDelayReqResTime, f3PtpConfigObjects=f3PtpConfigObjects, f3PtpSOOCHistoryTime=f3PtpSOOCHistoryTime, f3PtpPTPPortStatsMinMeanPathDelay=f3PtpPTPPortStatsMinMeanPathDelay, f3PtpAccPortFlowPointHistoryPDelayRspFollowupsTx=f3PtpAccPortFlowPointHistoryPDelayRspFollowupsTx, f3PtpPTPPortHistoryAvgOffsetFromMaster=f3PtpPTPPortHistoryAvgOffsetFromMaster, f3PtpPTPPortDelayAsymmetry=f3PtpPTPPortDelayAsymmetry, f3PtpTSTimeHoldoverAccuracy=f3PtpTSTimeHoldoverAccuracy, f3PtpSOOCRecentSyncPDV=f3PtpSOOCRecentSyncPDV, f3PtpPTPPortAutoAsymmetryCompStatus=f3PtpPTPPortAutoAsymmetryCompStatus, f3PtpPTPPortStatsMinOffsetFromMaster=f3PtpPTPPortStatsMinOffsetFromMaster, f3PtpTSTimeTraceabilityStatus=f3PtpTSTimeTraceabilityStatus, f3PtpL3PTPPortHistoryValid=f3PtpL3PTPPortHistoryValid, f3PtpMCIPtpTransportMode=f3PtpMCIPtpTransportMode, f3PtpAccPortFlowPointInner1VlanMemberList=f3PtpAccPortFlowPointInner1VlanMemberList, f3PtpPTPPortMasterOnly=f3PtpPTPPortMasterOnly, f3PtpL3PTPPortThresholdValueHi=f3PtpL3PTPPortThresholdValueHi, f3PtpDynamicRemoteSlaveTable=f3PtpDynamicRemoteSlaveTable, f3PtpTCVirtualPortTable=f3PtpTCVirtualPortTable, f3PtpBCTimingSource=f3PtpBCTimingSource, PTPClockProfile=PTPClockProfile, f3PtpTSHistoryIndex=f3PtpTSHistoryIndex, f3PtpTSThresholdInterval=f3PtpTSThresholdInterval, f3PtpPTPPortDelayResponderType=f3PtpPTPPortDelayResponderType, f3PtpGroups=f3PtpGroups, f3PtpAccPortFlowPointHistoryDelayReqsRx=f3PtpAccPortFlowPointHistoryDelayReqsRx, f3PtpNetPortFlowPointRefConnectGuardFlow=f3PtpNetPortFlowPointRefConnectGuardFlow, f3PtpAccPortFlowPointThresholdEntry=f3PtpAccPortFlowPointThresholdEntry, f3PtpMCIIpPriorityMapMode=f3PtpMCIIpPriorityMapMode, f3PtpPTPClockStatsTable=f3PtpPTPClockStatsTable, f3PtpMCIThresholdValueLo=f3PtpMCIThresholdValueLo, f3PtpMCIHistoryAnnounceCancelledEvents=f3PtpMCIHistoryAnnounceCancelledEvents, f3PtpTrafficPortFlowPointHistoryAvgSyncResTime=f3PtpTrafficPortFlowPointHistoryAvgSyncResTime, f3PtpTrafficPortFlowPointInner1VlanMemberList=f3PtpTrafficPortFlowPointInner1VlanMemberList, f3PtpSysTimeOfDayClock=f3PtpSysTimeOfDayClock, f3PtpMCIStatsSyncDeniedEvents=f3PtpMCIStatsSyncDeniedEvents, f3PtpNetPortFlowPointStatsFollowupsRx=f3PtpNetPortFlowPointStatsFollowupsRx, f3PtpPTPPortLastRcvdDelayRspMsg=f3PtpPTPPortLastRcvdDelayRspMsg, f3PtpAccPortFlowPointStatsAvgPDelayReqResTime=f3PtpAccPortFlowPointStatsAvgPDelayReqResTime, PTPClockOperMode=PTPClockOperMode, f3PtpMasterClockActiveGrantsDelayRequestService=f3PtpMasterClockActiveGrantsDelayRequestService, f3PtpPTPPortStatsMessageWrongTypeDiscards=f3PtpPTPPortStatsMessageWrongTypeDiscards, f3PtpTCSync=f3PtpTCSync, f3PtpRemoteSlaveStatsSyncMsgsGen=f3PtpRemoteSlaveStatsSyncMsgsGen, f3PtpTrafficPortFlowPointThresholdMonValue=f3PtpTrafficPortFlowPointThresholdMonValue, f3PtpSOOCStatsUnknownDomainDiscards=f3PtpSOOCStatsUnknownDomainDiscards, f3PtpMCIDefaultGatewayControl=f3PtpMCIDefaultGatewayControl)
mibBuilder.exportSymbols("F3-PTP-MIB", f3PtpNetPortFlowPointThresholdValueHi=f3PtpNetPortFlowPointThresholdValueHi, f3PtpNetPortFlowPointHistoryAvgDelayReqResTime=f3PtpNetPortFlowPointHistoryAvgDelayReqResTime, f3PtpPTPPortHistoryMinOffsetFromMaster=f3PtpPTPPortHistoryMinOffsetFromMaster, f3PtpSOOCSlaveIpV6AddrPrefixLength=f3PtpSOOCSlaveIpV6AddrPrefixLength, f3PtpMCIPtpRemoteSlaveAgingTimeout=f3PtpMCIPtpRemoteSlaveAgingTimeout, f3PtpAccPortFlowPointRowStatus=f3PtpAccPortFlowPointRowStatus, f3PtpTSHistoryAction=f3PtpTSHistoryAction, f3PtpSOOCMasterIpV4Address=f3PtpSOOCMasterIpV4Address, f3PtpAccPortFlowPointStatsSyncsRx=f3PtpAccPortFlowPointStatsSyncsRx, f3PtpMCIMaxAnnounceMsgRate=f3PtpMCIMaxAnnounceMsgRate, f3PtpL2DynamicRemoteSlaveStorageType=f3PtpL2DynamicRemoteSlaveStorageType, f3PtpPTPClockHistoryMinOffsetFromMaster=f3PtpPTPClockHistoryMinOffsetFromMaster, f3PtpSOOCMasterAnnounceMsgReceiptTimeout=f3PtpSOOCMasterAnnounceMsgReceiptTimeout, f3PtpTCVirtualPortAdminState=f3PtpTCVirtualPortAdminState, f3PtpEthernetNetPortExtEntry=f3PtpEthernetNetPortExtEntry, f3PtpStaticRemoteSlaveAnnounceDurRemTime=f3PtpStaticRemoteSlaveAnnounceDurRemTime, f3PtpPTPClockServiceUnavailableTime=f3PtpPTPClockServiceUnavailableTime, f3PtpAccPortFlowPointStatsPtpUnknownsRx=f3PtpAccPortFlowPointStatsPtpUnknownsRx, f3PtpAccPortFlowPointHistoryPDelayRspFollowupsRx=f3PtpAccPortFlowPointHistoryPDelayRspFollowupsRx, f3PtpNetPortFlowPointService=f3PtpNetPortFlowPointService, f3PtpAccPortFlowPointHistoryMgmtFramesRx=f3PtpAccPortFlowPointHistoryMgmtFramesRx, f3PtpSOOCStatsPDelayFollowupDiscards=f3PtpSOOCStatsPDelayFollowupDiscards, f3PtpMCIThresholdTable=f3PtpMCIThresholdTable, f3PtpTrafficPortFlowPointHistoryDelayReqsTx=f3PtpTrafficPortFlowPointHistoryDelayReqsTx, f3PtpBCStorageType=f3PtpBCStorageType, f3PtpPTPClockHistoryIndex=f3PtpPTPClockHistoryIndex, f3PtpSOOCStatsNumClockRecTransients=f3PtpSOOCStatsNumClockRecTransients, f3PtpTrafficPortFlowPointAssociatedQueueProfile=f3PtpTrafficPortFlowPointAssociatedQueueProfile, SyncMsgRate=SyncMsgRate, f3PtpTSStatsTotalTimeCR5=f3PtpTSStatsTotalTimeCR5, f3PtpNetPortFlowPointStatsMaxDelayReqResTime=f3PtpNetPortFlowPointStatsMaxDelayReqResTime, f3PtpMCIThresholdIndex=f3PtpMCIThresholdIndex, f3PtpOCSlaveVirtualPortAlias=f3PtpOCSlaveVirtualPortAlias, f3PtpSOOCHistoryMaxMeanPathDelay=f3PtpSOOCHistoryMaxMeanPathDelay, f3PtpStaticRemoteSlaveDelayRspMsgRate=f3PtpStaticRemoteSlaveDelayRspMsgRate, ClockIdentity=ClockIdentity, PTPPortType=PTPPortType, f3PtpPTPPortAdminState=f3PtpPTPPortAdminState, f3PtpNetPortFlowPointStatsSyncsTx=f3PtpNetPortFlowPointStatsSyncsTx, f3PtpMCICrossingAlert=f3PtpMCICrossingAlert, f3PtpStaticRemoteSlaveNegDelayRspLeaseDur=f3PtpStaticRemoteSlaveNegDelayRspLeaseDur, f3PtpPTPClockRowStatus=f3PtpPTPClockRowStatus, f3PtpTSStatsValid=f3PtpTSStatsValid, f3PtpSOOCE2eDelayAsymmetry=f3PtpSOOCE2eDelayAsymmetry, f3PtpTrafficPortFlowPointStatsPtpUnknownsTx=f3PtpTrafficPortFlowPointStatsPtpUnknownsTx, f3PtpPTPPortHistoryMessageWrongTypeDiscards=f3PtpPTPPortHistoryMessageWrongTypeDiscards, f3PtpL2DynamicRemoteSlaveMacAddress=f3PtpL2DynamicRemoteSlaveMacAddress, f3PtpTSStatsEntry=f3PtpTSStatsEntry, f3PtpMasterClockActiveGrantsSyncService=f3PtpMasterClockActiveGrantsSyncService, f3PtpPTPClockClockReceivedQL=f3PtpPTPClockClockReceivedQL, f3PtpStaticRemoteSlaveDelayRspDurRemTime=f3PtpStaticRemoteSlaveDelayRspDurRemTime, f3PtpNetPortFlowPointStatsIntervalType=f3PtpNetPortFlowPointStatsIntervalType, f3PtpNetPortFlowPointStatsMinSyncResTime=f3PtpNetPortFlowPointStatsMinSyncResTime, f3PtpNetPortFlowPointStatsAvgPDelayReqResTime=f3PtpNetPortFlowPointStatsAvgPDelayReqResTime, f3PtpTrafficPortFlowPointStatsFollowupsRx=f3PtpTrafficPortFlowPointStatsFollowupsRx, f3PtpSOOCThresholdVariable=f3PtpSOOCThresholdVariable, f3PtpTrafficPortFlowPointHistoryMinSyncResTime=f3PtpTrafficPortFlowPointHistoryMinSyncResTime, f3PtpAccPortFlowPointStatsTable=f3PtpAccPortFlowPointStatsTable, f3PtpBCStatusChangeTrap=f3PtpBCStatusChangeTrap, f3PtpSOOCHistoryMinSyncPathDelay=f3PtpSOOCHistoryMinSyncPathDelay, f3PtpSOOCEntry=f3PtpSOOCEntry, SlaveMode=SlaveMode, f3PtpRemoteSlaveHistoryInvalidTLVTypeDiscards=f3PtpRemoteSlaveHistoryInvalidTLVTypeDiscards, f3PtpL3PTPPortMinimumExpectedClockClass=f3PtpL3PTPPortMinimumExpectedClockClass, f3PtpTrafficPortFlowPointStatsValid=f3PtpTrafficPortFlowPointStatsValid, f3PtpMCIProtMemberTable=f3PtpMCIProtMemberTable, f3PtpNetPortFlowPointHistorySignalingRx=f3PtpNetPortFlowPointHistorySignalingRx, f3PtpNetPortFlowPointThresholdIndex=f3PtpNetPortFlowPointThresholdIndex, f3PtpNetPortFlowPointHistoryTagNoMatchDiscards=f3PtpNetPortFlowPointHistoryTagNoMatchDiscards, f3PtpRemoteSlaveThresholdValueLo=f3PtpRemoteSlaveThresholdValueLo, f3PtpEthernetAccPortDelayAsymmetry=f3PtpEthernetAccPortDelayAsymmetry, f3PtpL3PTPPortDelayReqRespMsgRate=f3PtpL3PTPPortDelayReqRespMsgRate, f3PtpAccPortFlowPointInner2VlanEtherType=f3PtpAccPortFlowPointInner2VlanEtherType, f3PtpTrafficPortFlowPointAlias=f3PtpTrafficPortFlowPointAlias, f3PtpNetPortFlowPointOuterVlanMemberList=f3PtpNetPortFlowPointOuterVlanMemberList, f3PtpMasterClockPriority1=f3PtpMasterClockPriority1, f3PtpPTPClockClockAssumedQL=f3PtpPTPClockClockAssumedQL, f3PtpTSFreqTraceabilityStatus=f3PtpTSFreqTraceabilityStatus, f3PtpRemoteSlaveStatsSlaveType=f3PtpRemoteSlaveStatsSlaveType, f3PtpPTPClockThresholdIndex=f3PtpPTPClockThresholdIndex, f3PtpPTPPortStatsAction=f3PtpPTPPortStatsAction, f3PtpTCEntry=f3PtpTCEntry, f3PtpDynamicRemoteSlaveEntry=f3PtpDynamicRemoteSlaveEntry, f3PtpAccPortFlowPointStatsIntervalType=f3PtpAccPortFlowPointStatsIntervalType, f3PtpNetPortFlowPointStatsAvgSyncResTime=f3PtpNetPortFlowPointStatsAvgSyncResTime, f3PtpPerfObjectGroup=f3PtpPerfObjectGroup, f3PtpPTPClockStatsAvgSyncPathDelay=f3PtpPTPClockStatsAvgSyncPathDelay, f3PtpPTPClockClockExpectedQL=f3PtpPTPClockClockExpectedQL, f3PtpMCIProtGroupRowStatus=f3PtpMCIProtGroupRowStatus, f3PtpPTPPortRowStatus=f3PtpPTPPortRowStatus, f3PtpMCIHistoryTime=f3PtpMCIHistoryTime, f3PtpTSHistoryTime=f3PtpTSHistoryTime, f3PtpL2DynamicRemoteSlaveEntry=f3PtpL2DynamicRemoteSlaveEntry, f3PtpMasterVirtualPortFlowPoint=f3PtpMasterVirtualPortFlowPoint, f3PtpPTPPortMaxExpectedL2Slaves=f3PtpPTPPortMaxExpectedL2Slaves, f3PtpTSClockAssumedQL=f3PtpTSClockAssumedQL, f3PtpSOOCStatsMulticastSyncDiscards=f3PtpSOOCStatsMulticastSyncDiscards, f3PtpSOOCSoocLockOutControl=f3PtpSOOCSoocLockOutControl, f3PtpMCIClockType=f3PtpMCIClockType, f3PtpPTPPortStatsIndex=f3PtpPTPPortStatsIndex, f3PtpNetPortFlowPointTable=f3PtpNetPortFlowPointTable, f3PtpAccPortFlowPointStatsFollowupsRx=f3PtpAccPortFlowPointStatsFollowupsRx, f3PtpDynamicRemoteSlaveNegAnnounceLeaseDur=f3PtpDynamicRemoteSlaveNegAnnounceLeaseDur, f3PtpAccPortFlowPointHistorySignalingRx=f3PtpAccPortFlowPointHistorySignalingRx, f3PtpTrafficPortFlowPointHistoryPDelayRspsTx=f3PtpTrafficPortFlowPointHistoryPDelayRspsTx, f3PtpAccPortFlowPointHistoryMaxSyncResTime=f3PtpAccPortFlowPointHistoryMaxSyncResTime, f3PtpPTPPortMinimumExpectedClockClass=f3PtpPTPPortMinimumExpectedClockClass, f3PtpPTPClockFreqTraceabilityStatus=f3PtpPTPClockFreqTraceabilityStatus, f3PtpNetPortFlowPointHistoryMinPDelayRspResTime=f3PtpNetPortFlowPointHistoryMinPDelayRspResTime, f3PtpDynamicRemoteSlaveIpV6Address=f3PtpDynamicRemoteSlaveIpV6Address, f3PtpSOOCHistoryInvalidMsgLenDiscards=f3PtpSOOCHistoryInvalidMsgLenDiscards, f3PtpNetPortFlowPointStatsPDelayRspFollowupsRx=f3PtpNetPortFlowPointStatsPDelayRspFollowupsRx, f3PtpL3PTPPortThresholdInterval=f3PtpL3PTPPortThresholdInterval, f3PtpMasterClockPriority2=f3PtpMasterClockPriority2, f3PtpL3PTPPortHistoryAvgSyncPathDelay=f3PtpL3PTPPortHistoryAvgSyncPathDelay, f3PtpPTPPortThresholdVariable=f3PtpPTPPortThresholdVariable, f3PtpMCIMasterIpV6Address=f3PtpMCIMasterIpV6Address, f3PtpTrafficPortFlowPointCOS=f3PtpTrafficPortFlowPointCOS, f3PtpPTPPortStatsEntry=f3PtpPTPPortStatsEntry, AnnounceMessageRate=AnnounceMessageRate, f3PtpNetPortFlowPointThresholdEntry=f3PtpNetPortFlowPointThresholdEntry, f3PtpAccPortFlowPointSecureBlockingEnabled=f3PtpAccPortFlowPointSecureBlockingEnabled, f3PtpL3PTPPortCrossingAlert=f3PtpL3PTPPortCrossingAlert, f3PtpMasterClockSmpteSystemFrameRateDenominator=f3PtpMasterClockSmpteSystemFrameRateDenominator, RemoteSlaveType=RemoteSlaveType, f3PtpRemoteSlaveHistoryIndex=f3PtpRemoteSlaveHistoryIndex, f3PtpPTPPortHistoryAvgSyncPathDelay=f3PtpPTPPortHistoryAvgSyncPathDelay, f3PtpCompliance=f3PtpCompliance, f3PtpMasterClockIndex=f3PtpMasterClockIndex, f3PtpAccPortFlowPointHistoryAnnouncesRx=f3PtpAccPortFlowPointHistoryAnnouncesRx, f3PtpBCMediationControl=f3PtpBCMediationControl, f3PtpSOOCHistoryMaxOffsetFromMaster=f3PtpSOOCHistoryMaxOffsetFromMaster, f3PtpTrafficPortFlowPointStatsIntervalType=f3PtpTrafficPortFlowPointStatsIntervalType, f3PtpPTPClockOperationalMode=f3PtpPTPClockOperationalMode, f3PtpMasterClockTimeClock=f3PtpMasterClockTimeClock, f3PtpL3PTPPortHistoryMinOffsetFromMaster=f3PtpL3PTPPortHistoryMinOffsetFromMaster, f3PtpMasterClockRowStatus=f3PtpMasterClockRowStatus, f3PtpMCIProtGroupTable=f3PtpMCIProtGroupTable, f3PtpMCIIpPriority=f3PtpMCIIpPriority, f3PtpL3PTPPortHistoryMsgMiscDiscards=f3PtpL3PTPPortHistoryMsgMiscDiscards, f3PtpSOOCRecentMeanPathDelay=f3PtpSOOCRecentMeanPathDelay, f3PtpNetPortFlowPointOuterUntaggedEnabled=f3PtpNetPortFlowPointOuterUntaggedEnabled, f3PtpMCIPortIdentity=f3PtpMCIPortIdentity, f3PtpStaticRemoteSlaveAlias=f3PtpStaticRemoteSlaveAlias, f3PtpMasterClockAlias=f3PtpMasterClockAlias, f3PtpDynamicRemoteSlaveRowStatus=f3PtpDynamicRemoteSlaveRowStatus, f3PtpPTPPortStatsMinSyncPathDelay=f3PtpPTPPortStatsMinSyncPathDelay, f3PtpPTPPortSecondaryState=f3PtpPTPPortSecondaryState, f3PtpL2DynamicRemoteSlaveIndex=f3PtpL2DynamicRemoteSlaveIndex, f3PtpRemoteSlaveHistoryTime=f3PtpRemoteSlaveHistoryTime, f3PtpTrafficPortFlowPointStatsPDelayRspsTx=f3PtpTrafficPortFlowPointStatsPDelayRspsTx, f3PtpPTPClockStatsAvgMeanPathDelay=f3PtpPTPClockStatsAvgMeanPathDelay, f3PtpSOOCLastReceivedDelayRspMsg=f3PtpSOOCLastReceivedDelayRspMsg, f3PtpAccPortFlowPointOuterVlanMemberList=f3PtpAccPortFlowPointOuterVlanMemberList, f3PtpMasterClockDomainNumber=f3PtpMasterClockDomainNumber, f3PtpPTPClockGrandMasterID=f3PtpPTPClockGrandMasterID, f3PtpPTPClockMaxStepRemoved=f3PtpPTPClockMaxStepRemoved, f3PtpSOOCSecondaryState=f3PtpSOOCSecondaryState, f3PtpSOOCMasterDelayRspMsgRate=f3PtpSOOCMasterDelayRspMsgRate, f3PtpTrafficPortFlowPointStatsPDelayRspFollowupsTx=f3PtpTrafficPortFlowPointStatsPDelayRspFollowupsTx, f3PtpPTPPortStatsMsgMiscDiscards=f3PtpPTPPortStatsMsgMiscDiscards, f3PtpAccPortFlowPointStorageType=f3PtpAccPortFlowPointStorageType, f3PtpNetPortFlowPointSecureState=f3PtpNetPortFlowPointSecureState, f3PtpAccPortFlowPointHistoryValid=f3PtpAccPortFlowPointHistoryValid, f3PtpPTPClockStorageType=f3PtpPTPClockStorageType, f3PtpSOOCIpPriority=f3PtpSOOCIpPriority, f3PtpNetPortFlowPointStatsMgmtFramesTx=f3PtpNetPortFlowPointStatsMgmtFramesTx, f3PtpTCAdminState=f3PtpTCAdminState, f3PtpTrafficPortFlowPointClock=f3PtpTrafficPortFlowPointClock, f3PtpTSSecondaryState=f3PtpTSSecondaryState, f3PtpAccPortFlowPointHistoryTagNoMatchDiscards=f3PtpAccPortFlowPointHistoryTagNoMatchDiscards, f3PtpTrafficPortFlowPointHistoryTagNoMatchDiscards=f3PtpTrafficPortFlowPointHistoryTagNoMatchDiscards, f3PtpMCIProtGroupActiveMember=f3PtpMCIProtGroupActiveMember, f3PtpL3PTPPortTable=f3PtpL3PTPPortTable, f3PtpTSOperationalState=f3PtpTSOperationalState, f3PtpNetPortFlowPointStatsIndex=f3PtpNetPortFlowPointStatsIndex, f3PtpNetPortFlowPointThresholdInterval=f3PtpNetPortFlowPointThresholdInterval, f3PtpNetPortFlowPointHistoryFollowupsRx=f3PtpNetPortFlowPointHistoryFollowupsRx, f3PtpAccPortFlowPointHistoryMaxPDelayReqResTime=f3PtpAccPortFlowPointHistoryMaxPDelayReqResTime, f3PtpSOOCIpPriorityMapMode=f3PtpSOOCIpPriorityMapMode, f3PtpPTPClockHistoryMaxMeanPathDelay=f3PtpPTPClockHistoryMaxMeanPathDelay, f3PtpPTPClockSyncEid=f3PtpPTPClockSyncEid, f3PtpTSStorageType=f3PtpTSStorageType, f3PtpMasterClockSecondaryState=f3PtpMasterClockSecondaryState, f3PtpSOOCHistoryTwoStepSyncDiscards=f3PtpSOOCHistoryTwoStepSyncDiscards, f3PtpNetPortFlowPointStatsDelayReqsTx=f3PtpNetPortFlowPointStatsDelayReqsTx, f3PtpAccPortFlowPointHistoryAnnouncesTx=f3PtpAccPortFlowPointHistoryAnnouncesTx, f3PtpMCIStatsIntervalType=f3PtpMCIStatsIntervalType, f3PtpEthernetTrafficPortDelayAsymmetry=f3PtpEthernetTrafficPortDelayAsymmetry, f3PtpPTPPortPeerPortMacAddress=f3PtpPTPPortPeerPortMacAddress, f3PtpMCIOperationalState=f3PtpMCIOperationalState, f3PtpNetPortFlowPointHistoryAvgPDelayRspResTime=f3PtpNetPortFlowPointHistoryAvgPDelayRspResTime, f3PtpRemoteSlaveStatsDelayRspMsgsGen=f3PtpRemoteSlaveStatsDelayRspMsgsGen, f3PtpTrafficPortFlowPointOuterUntaggedEnabled=f3PtpTrafficPortFlowPointOuterUntaggedEnabled, f3PtpPTPClockHistoryTable=f3PtpPTPClockHistoryTable, f3PtpTCVirtualPortStorageType=f3PtpTCVirtualPortStorageType, f3PtpMCIMaxSlavesSupported=f3PtpMCIMaxSlavesSupported, f3PtpL3PTPPortPortIdentity=f3PtpL3PTPPortPortIdentity, f3PtpL3PTPPortDelayAsymmetryComp=f3PtpL3PTPPortDelayAsymmetryComp, f3PtpSOOCAlias=f3PtpSOOCAlias, f3PtpSOOCSlaveIpV4Address=f3PtpSOOCSlaveIpV4Address, f3PtpNetPortFlowPointIndex=f3PtpNetPortFlowPointIndex, f3PtpPTPPortSyncReceiptTimeout=f3PtpPTPPortSyncReceiptTimeout, f3PtpTrafficPortFlowPointHistoryMgmtFramesTx=f3PtpTrafficPortFlowPointHistoryMgmtFramesTx, f3PtpStaticRemoteSlaveNegAnnounceLeaseDur=f3PtpStaticRemoteSlaveNegAnnounceLeaseDur, f3PtpTSHistoryTotalTimeCR5=f3PtpTSHistoryTotalTimeCR5, f3PtpSOOCMasterRequestUnicastTimeout=f3PtpSOOCMasterRequestUnicastTimeout, f3PtpPTPClockHistoryMinMeanPathDelay=f3PtpPTPClockHistoryMinMeanPathDelay, f3PtpOCSlaveVirtualPortAdminState=f3PtpOCSlaveVirtualPortAdminState, f3PtpSOOCStatsEntry=f3PtpSOOCStatsEntry, f3PtpPTPPortStatsUnknownMasterDiscards=f3PtpPTPPortStatsUnknownMasterDiscards, f3PtpSOOCMasterSyncReceiptTimeout=f3PtpSOOCMasterSyncReceiptTimeout, f3PtpRemoteSlaveThresholdEntry=f3PtpRemoteSlaveThresholdEntry, f3PtpTrafficPortFlowPointOuterVlanMemberList=f3PtpTrafficPortFlowPointOuterVlanMemberList, f3PtpSOOCHistoryMinSyncPDV=f3PtpSOOCHistoryMinSyncPDV, f3PtpNetPortFlowPointStatsPDelayRspsRx=f3PtpNetPortFlowPointStatsPDelayRspsRx, f3PtpPTPClockActiveGrantsSyncService=f3PtpPTPClockActiveGrantsSyncService, f3PtpTSThresholdValueHi=f3PtpTSThresholdValueHi, f3PtpTrafficPortFlowPointRowStatus=f3PtpTrafficPortFlowPointRowStatus, f3PtpStatusChangeNotifGroup=f3PtpStatusChangeNotifGroup, f3PtpPTPPortStatsAvgOffsetFromMaster=f3PtpPTPPortStatsAvgOffsetFromMaster, f3PtpAccPortFlowPointHistoryAvgPDelayRspResTime=f3PtpAccPortFlowPointHistoryAvgPDelayRspResTime, f3PtpTSStatsTotalTimePR5=f3PtpTSStatsTotalTimePR5, f3PtpTSHistoryTable=f3PtpTSHistoryTable, f3PtpDynamicRemoteSlaveAnnounceMsgRate=f3PtpDynamicRemoteSlaveAnnounceMsgRate, f3PtpSOOCAnnounceMsgClockClass=f3PtpSOOCAnnounceMsgClockClass, f3PtpTrafficPortFlowPointStatsSyncsRx=f3PtpTrafficPortFlowPointStatsSyncsRx, f3PtpNetPortFlowPointHistoryTime=f3PtpNetPortFlowPointHistoryTime, f3PtpRemoteSlaveHistoryTimesSyncLeaseExp=f3PtpRemoteSlaveHistoryTimesSyncLeaseExp, f3PtpL3PTPPortDefaultGatewayControl=f3PtpL3PTPPortDefaultGatewayControl, f3PtpMasterClockActiveGrantsAnnounceService=f3PtpMasterClockActiveGrantsAnnounceService, f3PtpSOOCSoocClockRecoveryState=f3PtpSOOCSoocClockRecoveryState, f3PtpMCIHistoryDynamicSlavesLearnt=f3PtpMCIHistoryDynamicSlavesLearnt, f3PtpAccPortFlowPointInner1UntaggedEnabled=f3PtpAccPortFlowPointInner1UntaggedEnabled, f3PtpL3PTPPortStatsUnknownMasterDiscards=f3PtpL3PTPPortStatsUnknownMasterDiscards, f3PtpTrafficPortFlowPointHistoryAnnouncesRx=f3PtpTrafficPortFlowPointHistoryAnnouncesRx, f3PtpPTPClockPhysicalEntityIndex=f3PtpPTPClockPhysicalEntityIndex, f3PtpSOOCStatsAvgRevFlowWeight=f3PtpSOOCStatsAvgRevFlowWeight, f3PtpTrafficPortFlowPointHistoryEntry=f3PtpTrafficPortFlowPointHistoryEntry, f3PtpSOOCGateway=f3PtpSOOCGateway, f3PtpTSHistoryValid=f3PtpTSHistoryValid, AnnounceMsgRate=AnnounceMsgRate, f3PtpDynamicRemoteSlaveOperationalState=f3PtpDynamicRemoteSlaveOperationalState, f3PtpAccPortFlowPointStatsMgmtFramesRx=f3PtpAccPortFlowPointStatsMgmtFramesRx, f3PtpMCIStatsPtpDiscards=f3PtpMCIStatsPtpDiscards, f3PtpOCSlaveVirtualPortFlowPoint=f3PtpOCSlaveVirtualPortFlowPoint, f3PtpTrafficPortFlowPointEIRHi=f3PtpTrafficPortFlowPointEIRHi, f3PtpNetPortFlowPointInner1UntaggedEnabled=f3PtpNetPortFlowPointInner1UntaggedEnabled, f3PtpTrafficPortFlowPointStatsAvgSyncResTime=f3PtpTrafficPortFlowPointStatsAvgSyncResTime, f3PtpTrafficPortFlowPointOperationalState=f3PtpTrafficPortFlowPointOperationalState, f3PtpTrafficPortFlowPointHistoryDestMciNoMatchDiscards=f3PtpTrafficPortFlowPointHistoryDestMciNoMatchDiscards, f3PtpDynamicRemoteSlaveClockIdentity=f3PtpDynamicRemoteSlaveClockIdentity, FreqRecoveryTarget=FreqRecoveryTarget, f3PtpL3PTPPortHistoryMessagesWrongLengthDiscards=f3PtpL3PTPPortHistoryMessagesWrongLengthDiscards)
mibBuilder.exportSymbols("F3-PTP-MIB", f3PtpSOOCSlaveIpV4SubnetMask=f3PtpSOOCSlaveIpV4SubnetMask, f3PtpMasterClockStatusChangeTrap=f3PtpMasterClockStatusChangeTrap, f3PtpMCIAlias=f3PtpMCIAlias, f3PtpL3PTPPortHistoryAvgOffsetFromMaster=f3PtpL3PTPPortHistoryAvgOffsetFromMaster, f3PtpL3PTPPortUnicastMessageNegEnabled=f3PtpL3PTPPortUnicastMessageNegEnabled, f3PtpPTPPortTimeTraceable=f3PtpPTPPortTimeTraceable, f3PtpTSFreqRecoveryTarget=f3PtpTSFreqRecoveryTarget, f3PtpTSCurrentCRScore=f3PtpTSCurrentCRScore, f3PtpPTPClockTimeInaccuracy=f3PtpPTPClockTimeInaccuracy, f3PtpL3PTPPortBmcaDecisionCode=f3PtpL3PTPPortBmcaDecisionCode, f3PtpTrafficPortFlowPointStatsMinPDelayRspResTime=f3PtpTrafficPortFlowPointStatsMinPDelayRspResTime, f3PtpSOOCHistoryPDelayRspDiscards=f3PtpSOOCHistoryPDelayRspDiscards, f3PtpTSHistoryTotalTimeCR3=f3PtpTSHistoryTotalTimeCR3, f3PtpTSAlias=f3PtpTSAlias, f3PtpL3PTPPortGateway=f3PtpL3PTPPortGateway, f3PtpRemoteSlaveStatsSlaveIndex=f3PtpRemoteSlaveStatsSlaveIndex, f3PtpSOOCStatsMaxRevFlowWeight=f3PtpSOOCStatsMaxRevFlowWeight, f3PtpPTPPortThresholdValueHi=f3PtpPTPPortThresholdValueHi, f3PtpMCIHistoryDynamicSlavesDropped=f3PtpMCIHistoryDynamicSlavesDropped, f3PtpTSStatsTable=f3PtpTSStatsTable, f3PtpSOOCHistoryInvalidTLVTypeDiscards=f3PtpSOOCHistoryInvalidTLVTypeDiscards, f3PtpOCSlaveVirtualPortStorageType=f3PtpOCSlaveVirtualPortStorageType, f3PtpPTPClockServiceAvailableTime=f3PtpPTPClockServiceAvailableTime, f3PtpPTPPortStatsIntervalType=f3PtpPTPPortStatsIntervalType, f3PtpPTPPortTable=f3PtpPTPPortTable, f3PtpPTPPortLastRcvdAnnounceMsg=f3PtpPTPPortLastRcvdAnnounceMsg, f3PtpAccPortFlowPointStatsAvgDelayReqResTime=f3PtpAccPortFlowPointStatsAvgDelayReqResTime, f3PtpPTPPortHistoryAction=f3PtpPTPPortHistoryAction, f3PtpL3PTPPortSyncReceiptTimeout=f3PtpL3PTPPortSyncReceiptTimeout, f3PtpSOOCStatsFollowupDiscards=f3PtpSOOCStatsFollowupDiscards, f3PtpMCIHistorySyncCancelledEvents=f3PtpMCIHistorySyncCancelledEvents, f3PtpStaticRemoteSlaveOperationalState=f3PtpStaticRemoteSlaveOperationalState, f3PtpSOOCMasterRequestUnicastRestartTimer=f3PtpSOOCMasterRequestUnicastRestartTimer, f3PtpDynamicRemoteSlaveAdminState=f3PtpDynamicRemoteSlaveAdminState, f3PtpPTPPortPortIdentity=f3PtpPTPPortPortIdentity, f3PtpSOOCHistoryAvgOffsetFromMaster=f3PtpSOOCHistoryAvgOffsetFromMaster, f3PtpTSHistoryTotalTimeCR4=f3PtpTSHistoryTotalTimeCR4, f3PtpRemoteSlaveThresholdValueHi=f3PtpRemoteSlaveThresholdValueHi, f3PtpSOOCHistoryAvgSyncPDV=f3PtpSOOCHistoryAvgSyncPDV, f3PtpTrafficPortFlowPointStatsTable=f3PtpTrafficPortFlowPointStatsTable, f3PtpAccPortFlowPointCIRHi=f3PtpAccPortFlowPointCIRHi, f3PtpMCIStatsDynamicSlavesLearnt=f3PtpMCIStatsDynamicSlavesLearnt, f3PtpSOOCHistoryUnknownMasterDiscards=f3PtpSOOCHistoryUnknownMasterDiscards, f3PtpMCIStatsIndex=f3PtpMCIStatsIndex, f3PtpSOOCRecentSyncPathDelay=f3PtpSOOCRecentSyncPathDelay, f3PtpTrafficPortFlowPointHistoryPDelayReqsRx=f3PtpTrafficPortFlowPointHistoryPDelayReqsRx, f3PtpL3PTPPortStatsAction=f3PtpL3PTPPortStatsAction, f3PtpMasterClockOperationalState=f3PtpMasterClockOperationalState, f3PtpNetPortFlowPointHistoryMgmtFramesTx=f3PtpNetPortFlowPointHistoryMgmtFramesTx, f3PtpTCServiceFlow=f3PtpTCServiceFlow, f3PtpMCIStorageType=f3PtpMCIStorageType, f3PtpL3PTPPortStatsMismatchDomainDiscards=f3PtpL3PTPPortStatsMismatchDomainDiscards, f3PtpNetPortFlowPointHistoryDestMciNoMatchDiscards=f3PtpNetPortFlowPointHistoryDestMciNoMatchDiscards, f3PtpPTPClockStatsEntry=f3PtpPTPClockStatsEntry, f3PtpMasterVirtualPortOperationalState=f3PtpMasterVirtualPortOperationalState, f3PtpAccPortFlowPointHistoryAvgPDelayReqResTime=f3PtpAccPortFlowPointHistoryAvgPDelayReqResTime, f3PtpRemoteSlaveHistoryDelayReqMsgsDropped=f3PtpRemoteSlaveHistoryDelayReqMsgsDropped, f3PtpTrafficPortFlowPointHistoryAvgPDelayReqResTime=f3PtpTrafficPortFlowPointHistoryAvgPDelayReqResTime, f3PtpL3PTPPortStatsAvgSyncRate=f3PtpL3PTPPortStatsAvgSyncRate, f3PtpSOOCHistoryInvalidTLVLenDiscards=f3PtpSOOCHistoryInvalidTLVLenDiscards, f3PtpPTPClockActiveSlavePort=f3PtpPTPClockActiveSlavePort, f3PtpL3PTPPortStatsMaxSyncPathDelay=f3PtpL3PTPPortStatsMaxSyncPathDelay, f3PtpL3PTPPortHistoryEntry=f3PtpL3PTPPortHistoryEntry, f3PtpMasterClockClockIdentity=f3PtpMasterClockClockIdentity, f3PtpPTPPortOperationalState=f3PtpPTPPortOperationalState, f3PtpAccPortFlowPointHistoryDelayReqsTx=f3PtpAccPortFlowPointHistoryDelayReqsTx, f3PtpPTPClockClockRecoveryState=f3PtpPTPClockClockRecoveryState, f3PtpSOOCStatsOutOfSeqAnnounceMsgs=f3PtpSOOCStatsOutOfSeqAnnounceMsgs, f3PtpTSTimeLastPRScore=f3PtpTSTimeLastPRScore, f3PtpMCIMasterIpV6AddrPrefixLength=f3PtpMCIMasterIpV6AddrPrefixLength, f3PtpDynamicRemoteSlaveSyncMsgRate=f3PtpDynamicRemoteSlaveSyncMsgRate, f3PtpDynamicRemoteSlaveSecondaryState=f3PtpDynamicRemoteSlaveSecondaryState, f3PtpDynamicRemoteSlavePeerMacAddress=f3PtpDynamicRemoteSlavePeerMacAddress, f3PtpTSTargetPhaseRecoveryAccuracy=f3PtpTSTargetPhaseRecoveryAccuracy, f3PtpSOOCSoocWtr=f3PtpSOOCSoocWtr, f3PtpRemoteSlaveCrossingAlert=f3PtpRemoteSlaveCrossingAlert, f3PtpMCIHistoryAction=f3PtpMCIHistoryAction, f3PtpAccPortFlowPointHistoryIndex=f3PtpAccPortFlowPointHistoryIndex, f3PtpPTPPortHistoryMessagesWrongLengthDiscards=f3PtpPTPPortHistoryMessagesWrongLengthDiscards, f3PtpTSStatsIntervalType=f3PtpTSStatsIntervalType, f3PtpNetPortFlowPointStatsPDelayRspFollowupsTx=f3PtpNetPortFlowPointStatsPDelayRspFollowupsTx, f3PtpSOOCThresholdValueLo=f3PtpSOOCThresholdValueLo, f3PtpPTPPortHistoryMaxSyncPathDelay=f3PtpPTPPortHistoryMaxSyncPathDelay, f3PtpPTPClockStatsIntervalType=f3PtpPTPClockStatsIntervalType, f3PtpNetPortFlowPointHistoryPDelayRspsTx=f3PtpNetPortFlowPointHistoryPDelayRspsTx, f3PtpL3PTPPortMasterIpV6Address=f3PtpL3PTPPortMasterIpV6Address, f3PtpMCIClockClassProfile=f3PtpMCIClockClassProfile, f3PtpPTPClockAdminState=f3PtpPTPClockAdminState, f3PtpRemoteSlaveHistorySyncMsgsGen=f3PtpRemoteSlaveHistorySyncMsgsGen, f3PtpNetPortFlowPointStatsDestMciNoMatchDiscards=f3PtpNetPortFlowPointStatsDestMciNoMatchDiscards, f3PtpPTPPortPeerClockClass=f3PtpPTPPortPeerClockClass, f3PtpTrafficPortFlowPointStorageType=f3PtpTrafficPortFlowPointStorageType, f3PtpRemoteSlaveHistoryTable=f3PtpRemoteSlaveHistoryTable, f3PtpTCVirtualPortIdentity=f3PtpTCVirtualPortIdentity, f3PtpBCAdminState=f3PtpBCAdminState, f3PtpOCSlaveVirtualPortTable=f3PtpOCSlaveVirtualPortTable, f3PtpSOOCMasterDelayMechanism=f3PtpSOOCMasterDelayMechanism, f3PtpTrafficPortFlowPointThresholdInterval=f3PtpTrafficPortFlowPointThresholdInterval, f3PtpPTPClockCurrentTimeOfDay=f3PtpPTPClockCurrentTimeOfDay, f3PtpAccPortFlowPointHistoryFollowupsRx=f3PtpAccPortFlowPointHistoryFollowupsRx, f3PtpTrafficPortFlowPointThresholdEntry=f3PtpTrafficPortFlowPointThresholdEntry, f3PtpTrafficPortFlowPointHistoryPDelayRspFollowupsTx=f3PtpTrafficPortFlowPointHistoryPDelayRspFollowupsTx, PTPTransport=PTPTransport, f3PtpNetPortFlowPointStatsValid=f3PtpNetPortFlowPointStatsValid, f3PtpL3PTPPortHistoryMinSyncPathDelay=f3PtpL3PTPPortHistoryMinSyncPathDelay, f3PtpTrafficPortFlowPointHistoryValid=f3PtpTrafficPortFlowPointHistoryValid, f3PtpAccPortFlowPointHistoryMinPDelayReqResTime=f3PtpAccPortFlowPointHistoryMinPDelayReqResTime, f3PtpTSDomainNumber=f3PtpTSDomainNumber, f3PtpPTPPortPortState=f3PtpPTPPortPortState, f3PtpTrafficPortFlowPointStatsPtpUnknownsRx=f3PtpTrafficPortFlowPointStatsPtpUnknownsRx, f3PtpAccPortFlowPointHistoryAvgSyncResTime=f3PtpAccPortFlowPointHistoryAvgSyncResTime, f3PtpTrafficPortFlowPointHistoryMinDelayReqResTime=f3PtpTrafficPortFlowPointHistoryMinDelayReqResTime, f3PtpAccPortFlowPointStatsFollowupsTx=f3PtpAccPortFlowPointStatsFollowupsTx, f3PtpPTPClockEntry=f3PtpPTPClockEntry, f3PtpSOOCRowStatus=f3PtpSOOCRowStatus, f3PtpL3PTPPortStorageType=f3PtpL3PTPPortStorageType, f3PtpTrafficPortFlowPointStatsMaxDelayReqResTime=f3PtpTrafficPortFlowPointStatsMaxDelayReqResTime, f3PtpAccPortFlowPointHistoryMinDelayReqResTime=f3PtpAccPortFlowPointHistoryMinDelayReqResTime, f3PtpPTPPortHistoryMaxOffsetFromMaster=f3PtpPTPPortHistoryMaxOffsetFromMaster, f3PtpAccPortFlowPointOuterUntaggedEnabled=f3PtpAccPortFlowPointOuterUntaggedEnabled, f3PtpNetPortFlowPointStatsPDelayReqsTx=f3PtpNetPortFlowPointStatsPDelayReqsTx, f3PtpTSClockRecoveryState=f3PtpTSClockRecoveryState, f3PtpMCIHistoryDelayRspDeniedEvents=f3PtpMCIHistoryDelayRspDeniedEvents, f3PtpL3PTPPortStatsMsgMiscDiscards=f3PtpL3PTPPortStatsMsgMiscDiscards, f3PtpTSStatsTotalTimePR3=f3PtpTSStatsTotalTimePR3, f3PtpPTPClockThresholdInterval=f3PtpPTPClockThresholdInterval, f3PtpPTPClockOperationalState=f3PtpPTPClockOperationalState, PTPClockType=PTPClockType, f3PtpSOOCTable=f3PtpSOOCTable, f3PtpSOOCStatsMinRevFlowWeight=f3PtpSOOCStatsMinRevFlowWeight, f3PtpTSStatsTotalTimePR4=f3PtpTSStatsTotalTimePR4, f3PtpMCIStatsDelayRspDeniedEvents=f3PtpMCIStatsDelayRspDeniedEvents, f3PtpMCIHistoryPtpDiscards=f3PtpMCIHistoryPtpDiscards, f3PtpTrafficPortFlowPointHistoryFollowupsRx=f3PtpTrafficPortFlowPointHistoryFollowupsRx, f3PtpMCIDelayMechanism=f3PtpMCIDelayMechanism, f3PtpNetPortFlowPointInner2UntaggedEnabled=f3PtpNetPortFlowPointInner2UntaggedEnabled, f3PtpPTPPortAlias=f3PtpPTPPortAlias, f3PtpSOOCAdminState=f3PtpSOOCAdminState, f3PtpMasterClockActiveTimeRef=f3PtpMasterClockActiveTimeRef, f3PtpPTPPortFrequencyTraceable=f3PtpPTPPortFrequencyTraceable, f3PtpAccPortFlowPointStatsDelayRspsRx=f3PtpAccPortFlowPointStatsDelayRspsRx, f3PtpAccPortFlowPointStatsAction=f3PtpAccPortFlowPointStatsAction, f3PtpTCIndex=f3PtpTCIndex, f3PtpAccPortFlowPointLoopAvoidance=f3PtpAccPortFlowPointLoopAvoidance, f3PtpNetPortFlowPointStorageType=f3PtpNetPortFlowPointStorageType, f3PtpStaticRemoteSlaveStorageType=f3PtpStaticRemoteSlaveStorageType, f3PtpTCVirtualPortAlias=f3PtpTCVirtualPortAlias, f3PtpTrafficPortFlowPointService=f3PtpTrafficPortFlowPointService, f3PtpAccPortFlowPointHistoryAvgDelayReqResTime=f3PtpAccPortFlowPointHistoryAvgDelayReqResTime, f3PtpMCIHistoryAnnounceDeniedEvents=f3PtpMCIHistoryAnnounceDeniedEvents, f3PtpPTPClockHistoryMaxSyncPathDelay=f3PtpPTPClockHistoryMaxSyncPathDelay, f3PtpSOOCHistoryAction=f3PtpSOOCHistoryAction, f3PtpBCPhysicalEntityIndex=f3PtpBCPhysicalEntityIndex, f3PtpMasterVirtualPortRowStatus=f3PtpMasterVirtualPortRowStatus, f3PtpRemoteSlaveStatsDelayReqMsgsRx=f3PtpRemoteSlaveStatsDelayReqMsgsRx, f3PtpDynamicRemoteSlaveStorageType=f3PtpDynamicRemoteSlaveStorageType, f3PtpRemoteSlaveStatsValid=f3PtpRemoteSlaveStatsValid, PortIdentity=PortIdentity, f3PtpPTPClockProfile=f3PtpPTPClockProfile, f3PtpPTPPortLastRcvdDelayReqMsg=f3PtpPTPPortLastRcvdDelayReqMsg, f3PtpL2DynamicRemoteSlaveClockIdentity=f3PtpL2DynamicRemoteSlaveClockIdentity, f3PtpTSCurrentTOD=f3PtpTSCurrentTOD, f3PtpMCIThresholdVariable=f3PtpMCIThresholdVariable, f3PtpNetPortFlowPointStatsSignalingRx=f3PtpNetPortFlowPointStatsSignalingRx, f3PtpSOOCHistoryAvgSyncPathDelay=f3PtpSOOCHistoryAvgSyncPathDelay, f3PtpPTPClockActiveGrantsAnnounceService=f3PtpPTPClockActiveGrantsAnnounceService, f3PtpPTPPortHistoryTable=f3PtpPTPPortHistoryTable, f3PtpTrafficPortFlowPointEntry=f3PtpTrafficPortFlowPointEntry, f3PtpMCIStatsDynamicSlavesDropped=f3PtpMCIStatsDynamicSlavesDropped, f3PtpTrafficPortFlowPointOuterVlanEtherType=f3PtpTrafficPortFlowPointOuterVlanEtherType, f3PtpSOOCStatsMaxOffsetFromMaster=f3PtpSOOCStatsMaxOffsetFromMaster, f3PtpSOOCStatsAvgOffsetFromMaster=f3PtpSOOCStatsAvgOffsetFromMaster, f3PtpTSSelectedPacketClock=f3PtpTSSelectedPacketClock, f3PtpSOOCMasterDelayRspReceiptTimeout=f3PtpSOOCMasterDelayRspReceiptTimeout, f3PtpSOOCMasterIpV6Address=f3PtpSOOCMasterIpV6Address, f3PtpAccPortFlowPointInner2VlanMemberList=f3PtpAccPortFlowPointInner2VlanMemberList, f3PtpDynamicRemoteSlaveTimeCreated=f3PtpDynamicRemoteSlaveTimeCreated, f3PtpSOOCMasterAnnounceMsgRate=f3PtpSOOCMasterAnnounceMsgRate, f3PtpL2DynamicRemoteSlaveRowStatus=f3PtpL2DynamicRemoteSlaveRowStatus, f3PtpSOOCHistoryFollowupDiscards=f3PtpSOOCHistoryFollowupDiscards, PtpFlowPointType=PtpFlowPointType, f3PtpL3PTPPortStatsMessagesWrongLengthDiscards=f3PtpL3PTPPortStatsMessagesWrongLengthDiscards, f3PtpPTPPortStatsMaxSyncPathDelay=f3PtpPTPPortStatsMaxSyncPathDelay, f3PtpTrafficPortFlowPointStatsAction=f3PtpTrafficPortFlowPointStatsAction, f3PtpPTPClockIndex=f3PtpPTPClockIndex, f3PtpAccPortFlowPointClock=f3PtpAccPortFlowPointClock, f3PtpMCIMaxSyncMsgRate=f3PtpMCIMaxSyncMsgRate, f3PtpNetPortFlowPointHistoryMaxSyncResTime=f3PtpNetPortFlowPointHistoryMaxSyncResTime, f3PtpRemoteSlaveHistoryValid=f3PtpRemoteSlaveHistoryValid, f3PtpAccPortFlowPointStatsSignalingTx=f3PtpAccPortFlowPointStatsSignalingTx, f3PtpRemoteSlaveStatsIndex=f3PtpRemoteSlaveStatsIndex, f3PtpSOOCHistoryAvgMeanPathDelay=f3PtpSOOCHistoryAvgMeanPathDelay, f3PtpRemoteSlaveStatsTimesAnnounceLeaseExp=f3PtpRemoteSlaveStatsTimesAnnounceLeaseExp, f3PtpMCIProtGroupAdminState=f3PtpMCIProtGroupAdminState, f3PtpNetPortFlowPointHistoryDelayReqsTx=f3PtpNetPortFlowPointHistoryDelayReqsTx, f3PtpPTPClockThresholdVariable=f3PtpPTPClockThresholdVariable, f3PtpAccPortFlowPointHistoryPDelayReqsTx=f3PtpAccPortFlowPointHistoryPDelayReqsTx, f3PtpTSEntry=f3PtpTSEntry, f3PtpTSStatsTotalTimeCR3=f3PtpTSStatsTotalTimeCR3, f3PtpDynamicRemoteSlaveDelayRspMsgRate=f3PtpDynamicRemoteSlaveDelayRspMsgRate, f3PtpSOOCMasterPriority=f3PtpSOOCMasterPriority, f3PtpSOOCHistoryNumClockRecTransients=f3PtpSOOCHistoryNumClockRecTransients, f3PtpMasterClockEntry=f3PtpMasterClockEntry, f3PtpMCIHistorySyncDeniedEvents=f3PtpMCIHistorySyncDeniedEvents, f3PtpNetPortFlowPointClock=f3PtpNetPortFlowPointClock)
