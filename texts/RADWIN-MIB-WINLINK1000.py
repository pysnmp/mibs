#
# PySNMP MIB module RADWIN-MIB-WINLINK1000 (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/radwin/RADWIN-MIB-WINLINK1000
# Produced by pysmi-1.1.12 at Mon Jun  3 12:00:58 2024
# On host fv-az1530-743 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Counter64, Integer32, Bits, Gauge32, NotificationType, enterprises, Unsigned32, MibIdentifier, IpAddress, NotificationType, ModuleIdentity, ObjectIdentity, TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "Integer32", "Bits", "Gauge32", "NotificationType", "enterprises", "Unsigned32", "MibIdentifier", "IpAddress", "NotificationType", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
radwin = MibIdentifier((1, 3, 6, 1, 4, 1, 4458))
winlink1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000))
winlink1000Odu = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1))
winlink1000OduAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1))
winlink1000OduAdmProductType = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmProductType.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmProductType.setDescription('ODU configuration description.')
winlink1000OduAdmHwRev = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmHwRev.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmHwRev.setDescription('ODU Hardware Version.')
winlink1000OduAdmSwRev = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmSwRev.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmSwRev.setDescription('ODU Software Version.')
winlink1000OduAdmLinkName = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmLinkName.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmLinkName.setDescription('Link Name. A change is effective immediately.')
winlink1000OduAdmResetCmd = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmResetCmd.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmResetCmd.setDescription('Reset Command. \n\t\tA set command with a value of 3 will cause a device reset.\n\t\tHBS only: A set command with a value of 4 will cause a device reset for the entire sector.\n\t\tThe read value is always 0.')
winlink1000OduAdmAddres = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmAddres.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmAddres.setDescription('ODU IP address. A change is effective after reset.\n\t\t The parameter is kept for backward compatibility.\n\t\t Using the alternative parameter: winlink1000OduAdmIpParamsCnfg is recommended.')
winlink1000OduAdmMask = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmMask.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmMask.setDescription('ODU Subnet Mask. A change is effective after reset.\n\t\t The parameter is kept for backward compatibility.\n\t\t Using the alternative parameter: winlink1000OduAdmIpParamsCnfg is recommended.')
winlink1000OduAdmGateway = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmGateway.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmGateway.setDescription('ODU default gateway. A change is effective after reset.\n\t\t The parameter is kept for backward compatibility.\n\t\t Using the alternative parameter: winlink1000OduAdmIpParamsCnfg is recommended.')
winlink1000OduAdmBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmBroadcast.setDescription('This parameter is reserved for the Manager application provided with the product.')
winlink1000OduAdmHostsTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12), )
if mibBuilder.loadTexts: winlink1000OduAdmHostsTable.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmHostsTable.setDescription('Trap destinations table. Each trap destination is defined by an IP address and a UDP port.\n\t\tUp to 10 addresses can be configured.')
winlink1000OduAdmHostsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAdmHostsIndex"))
if mibBuilder.loadTexts: winlink1000OduAdmHostsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmHostsEntry.setDescription('Trap destinations table entry.')
winlink1000OduAdmHostsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmHostsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmHostsIndex.setDescription('Trap destinations table index.')
winlink1000OduAdmHostsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmHostsIp.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmHostsIp.setDescription('Trap destination IP address. A change is effective immediately.')
winlink1000OduAdmHostsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmHostsPort.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmHostsPort.setDescription('UDP port of the trap destination. A change is effective immediately.')
winlink1000OduAdmHostsSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("snmpv1", 1), ("snmpv3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmHostsSecurityModel.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmHostsSecurityModel.setDescription('Security model used for this trap generation.')
winlink1000OduAdmHostsUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmHostsUserName.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmHostsUserName.setDescription('User name used to generate the snmpv3 trap.')
winlink1000OduAdmHostsPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmHostsPassword.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmHostsPassword.setDescription('Password used to generate the snmpv3 trap.')
winlink1000OduAdmHostsIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmHostsIPv6.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmHostsIPv6.setDescription('Trap destination IPv6 address. A change is effective immediately.')
winlink1000OduBuzzerAdminState = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduBuzzerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduBuzzerAdminState.setDescription('This parameter controls the activation of the buzzer while the unit is in install mode.\n\t\tA change is effective immediately. The valid values are: disabled (0), enabledAuto (1), enabledConstantly(2), advancedAuto (3).')
winlink1000OduProductId = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduProductId.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduProductId.setDescription('This parameter is reserved for the Manager application provided with the product.')
winlink1000OduReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduReadCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduReadCommunity.setDescription('Read Community String. This parameter always returns ***** when retrieving its value.\n\t\tIt is used by the Manager application to change the Read Community String.\n\t\tThe SNMP agent accepts only encrypted values.')
winlink1000OduReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduReadWriteCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduReadWriteCommunity.setDescription('Read/Write Community String. This parameter always returns ***** when retrieving its value.\n\t\tIt is used by the Manager application to change the Read/Write Community String.\n\t\tThe SNMP agent accepts only encrypted values.')
winlink1000OduTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduTrapCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduTrapCommunity.setDescription('Trap Community String. This parameter is used by the Manager application to change the Trap Community String.\n\t\tThe SNMP agent accepts only encrypted values.')
winlink1000OduAdmSnmpAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmSnmpAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmSnmpAgentVersion.setDescription('Major version of the SNMP agent.')
winlink1000OduAdmRemoteSiteName = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmRemoteSiteName.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmRemoteSiteName.setDescription('Remote site name. Returns the same value as sysLocation parameter of the remote site.')
winlink1000OduAdmSnmpAgentMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmSnmpAgentMinorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmSnmpAgentMinorVersion.setDescription('Minor version of the SNMP agent.')
winlink1000OduAdmLinkPassword = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmLinkPassword.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmLinkPassword.setDescription('Link Password. This parameter always returns ***** when retrieving its value.\n\t\tIt is used by the Manager application to change the Link Password.\n\t\tThe SNMP agent accepts only encrypted values.')
winlink1000OduAdmSiteLinkPassword = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmSiteLinkPassword.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmSiteLinkPassword.setDescription('Site Link Password. This parameter always returns ***** when retrieving its value.\n\t\tIt is used by the Manager application to change the Link Password of the site.\n\t\tThe SNMP agent accepts only encrypted values.')
winlink1000OduAdmDefaultPassword = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("nonDefault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmDefaultPassword.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmDefaultPassword.setDescription('This parameter indicates if the current Link Password is the default password.')
winlink1000OduAdmConnectionType = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("directConnection", 1), ("indirectConnection", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmConnectionType.setDescription("This parameter indicates if the Manager application is connected to the local ODU\n\t\tor to the remote ODU over the air. A value of 'unknown' indicates community string mismatch.")
winlink1000OduAdmBackToFactorySettingsCmd = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("withIP", 1), ("withoutIP", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmBackToFactorySettingsCmd.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmBackToFactorySettingsCmd.setDescription('Back to factory settings Command. A change is effective after reset. \n\t\tThe read value is always 0.')
winlink1000OduAdmIpParamsCnfg = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmIpParamsCnfg.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmIpParamsCnfg.setDescription('ODU IP address Configuration. The format is: |||')
winlink1000OduAdmVlanID = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmVlanID.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmVlanID.setDescription('VLAN ID. Valid values are 1 to 4094.\n\t\tInitial value is 0 meaning VLAN unaware.')
winlink1000OduAdmVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmVlanPriority.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmVlanPriority.setDescription('VLAN Priority. 0 is lowest priority, 7 is highest priority.')
winlink1000OduAdmSN = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmSN.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmSN.setDescription('ODU Serial Number')
winlink1000OduAdmProductName = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmProductName.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmProductName.setDescription('This is the product name as it exists at EC')
winlink1000OduAdmActivationKey = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmActivationKey.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmActivationKey.setDescription('Activates a general key.')
winlink1000OduAdmRmtPermittedOduType = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmRmtPermittedOduType.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmRmtPermittedOduType.setDescription('Mobile Application: permitted partner OduType.')
winlink1000OduAdmCpuID = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmCpuID.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmCpuID.setDescription('CPU ID')
winlink1000OduAdmOvrdCmd = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmOvrdCmd.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmOvrdCmd.setDescription('Ability to perform special command in the ODU.')
winlink1000OduAdmLinkMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pmpHbs", 1), ("pmpHsu", 2), ("pmpHsuHyb", 3), ("pmpHbsHyb", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmLinkMode.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmLinkMode.setDescription('Unit PMP operation mode.')
winlink1000OduAdmActualConnectMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ptp", 2), ("ptmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmActualConnectMode.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmActualConnectMode.setDescription('Unit connected as part to ptp or ptmp.')
winlink1000OduAdmAES256Support = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmAES256Support.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmAES256Support.setDescription('AES-256 security support indication.')
winlink1000OduAdmAES256State = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmAES256State.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmAES256State.setDescription('Enable/Disable AES-256 security mode over the air link.')
winlink1000OduAdmAES256Status = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notOperating", 1), ("partiallyOperating", 2), ("operating", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmAES256Status.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmAES256Status.setDescription('AES256 operating status')
winlink1000OduAdmBatterySavingShutdownTime = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmBatterySavingShutdownTime.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmBatterySavingShutdownTime.setDescription('Battery Saving Shutdown Time in minutes, 0 till battery run out, -1 if not supported.')
winlink1000OduAdmWiFiPowerMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("powerON", 2), ("powerOFF", 3), ("alwaysON", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmWiFiPowerMode.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmWiFiPowerMode.setDescription('WIFI unit power mode.')
winlink1000OduAdmShutdownTimer = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmShutdownTimer.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmShutdownTimer.setDescription('Shutdown Timer in seconds.')
winlink1000OduAdmGPSState = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 1), ("notSynchronized", 2), ("fixed", 3), ("shortCircuit", 4), ("faulty", 5), ("synchronized", 6), ("synchronizedGlonass", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmGPSState.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmGPSState.setDescription('GPS state')
winlink1000OduAdmTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmTemperatureC.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmTemperatureC.setDescription('The temperature (Celsius) inside the Board.')
winlink1000OduAdmIPStackMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v4", 1), ("v6", 2), ("v4andv6", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmIPStackMode.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmIPStackMode.setDescription('The IP stack mode.')
winlink1000OduAdmIPv6ParamsCnfg = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmIPv6ParamsCnfg.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmIPv6ParamsCnfg.setDescription('ODU IPv6 address Configuration. The format is: |||')
winlink1000OduAdmIPv6Address = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmIPv6Address.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmIPv6Address.setDescription('ODU IPv6 address.')
winlink1000OduAdmIPv6Prefix = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmIPv6Prefix.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmIPv6Prefix.setDescription('ODU IPv6 subnet mask.')
winlink1000OduAdmIPv6DefaultGateWay = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmIPv6DefaultGateWay.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmIPv6DefaultGateWay.setDescription('ODU IPv6 default gateway.')
winlink1000OduAdmPowerConsumption = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmPowerConsumption.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmPowerConsumption.setDescription('Power Consumption (mWatt)')
winlink1000OduAdmWifi = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51))
winlink1000OduAdmWifiChannel = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmWifiChannel.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmWifiChannel.setDescription('Wifi Channel')
winlink1000OduAdmWifiTxPower = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(11, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmWifiTxPower.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmWifiTxPower.setDescription('Wifi TX Power')
winlink1000OduAdmWifiSSID = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmWifiSSID.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmWifiSSID.setDescription('Wifi SSID')
winlink1000OduAdmWifiSecurityType = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("wep", 2), ("wpa2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmWifiSecurityType.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmWifiSecurityType.setDescription('Wifi Security type')
winlink1000OduAdmWifiPassword = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmWifiPassword.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmWifiPassword.setDescription('Wifi Password')
winlink1000OduAdmWifiNetwork = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmWifiNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmWifiNetwork.setDescription('Wifi Network')
winlink1000OduAdmWifiRssi = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmWifiRssi.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmWifiRssi.setDescription('Wifi RSSI')
winlink1000OduAdmWifiStationMAC = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmWifiStationMAC.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmWifiStationMAC.setDescription('Wifi Station MAC')
winlink1000OduAdmWifiRestart = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmWifiRestart.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmWifiRestart.setDescription('A set command with a value of 1 will cause a Wifi restart.\n\t\tThe read value is always 0.')
winlink1000OduAdmWifiApStatus = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmWifiApStatus.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmWifiApStatus.setDescription('Wifi AP Status')
winlink1000OduAdmBsaOperationMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("hbsTracking", 2), ("hsuAlignment", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmBsaOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmBsaOperationMode.setDescription('BSA Operation Mode')
winlink1000OduAdmMngConnection = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmMngConnection.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmMngConnection.setDescription('Management Connection')
winlink1000OduAdm1588TCSupport = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdm1588TCSupport.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdm1588TCSupport.setDescription('Indicates that 1588TC license activated')
winlink1000OduAdmSyncESupport = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmSyncESupport.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmSyncESupport.setDescription('ndicates that SyncE license activated')
winlink1000OduAdmRadioRev = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 56), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmRadioRev.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmRadioRev.setDescription('Radio Revision')
winlink1000OduAdmProductRev = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 57), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmProductRev.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmProductRev.setDescription('Product Revision')
winlink1000OduAdmPMPSUSupport = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmPMPSUSupport.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmPMPSUSupport.setDescription('Indicates that PMP SU license is activated')
winlink1000OduAdmManagerDownloadURL = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 59), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAdmManagerDownloadURL.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmManagerDownloadURL.setDescription('This is the URL from which management tool can be downloaded')
winlink1000OduAdmAntennaDescription = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 60), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmAntennaDescription.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmAntennaDescription.setDescription('The is a description of the antenna connected to the ODU')
winlink1000OduAdmSwCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAdmSwCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAdmSwCapabilities.setDescription('This is used to describe which Software Capabilities the current ODU supports')
winlink1000OduService = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2))
winlink1000OduSrvMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("installMode", 1), ("normalMode", 2), ("slaveMode", 3), ("tempInstallMode", 4), ("inactiveMode", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvMode.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvMode.setDescription('System mode. The only values that can be set are installMode and slaveMode;\n\t\tnormalMode reserved to the Manager application provided with the product.\n\t\tA change is effective after link re-synchronization.')
winlink1000OduSrvBridging = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvBridging.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvBridging.setDescription('Bridging Mode. Valid values are: disabled (0), enabled (1).')
winlink1000OduServiceRingTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4))
winlink1000OduSrvRingLinkMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("independentLink", 1), ("nonRpl", 2), ("rpl", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvRingLinkMode.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvRingLinkMode.setDescription('Mode of the link regarding ring topology.')
winlink1000OduSrvRingTopologySupported = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvRingTopologySupported.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvRingTopologySupported.setDescription('Ring Topology, options are: supported, not supported')
winlink1000OduSrvRingVlanIdTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 3), )
if mibBuilder.loadTexts: winlink1000OduSrvRingVlanIdTable.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvRingVlanIdTable.setDescription('Ring VLAN IDs table.')
winlink1000OduSrvRingVlanIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 3, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduSrvRingVlanIdIndex"))
if mibBuilder.loadTexts: winlink1000OduSrvRingVlanIdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvRingVlanIdEntry.setDescription('VLAN ID of the internal ring messages. Valid values are 1 to 4094.\n\t\tInitial value is 0 meaning VLAN unaware.')
winlink1000OduSrvRingVlanIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvRingVlanIdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvRingVlanIdIndex.setDescription('Index of VLAN ID of the internal ring messages.')
winlink1000OduSrvRingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvRingVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvRingVlanId.setDescription('VLAN ID of the internal ring messages. Valid values are 1 to 4094.\n\t\tInitial value is 0 meaning VLAN unaware.')
winlink1000OduSrvRingEthStatus = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unblocked", 1), ("blocked", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvRingEthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvRingEthStatus.setDescription('Represents the Ethernet service blocking state of a Rings link')
winlink1000OduSrvRingMaxAllowedTimeFromLastRpm = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvRingMaxAllowedTimeFromLastRpm.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvRingMaxAllowedTimeFromLastRpm.setDescription('Defines the minimal time (in ms) required for determination of ring failure.')
winlink1000OduSrvRingWTR = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvRingWTR.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvRingWTR.setDescription('Defines the minimal time (in ms) required for ring recovery.')
winlink1000OduServiceQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5))
winlink1000OduSrvQoSMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("notActive", 2), ("classVlan", 3), ("classDiffserv", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvQoSMode.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvQoSMode.setDescription('Mode of QoS feature.')
winlink1000OduSrvQoSConfTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2), )
if mibBuilder.loadTexts: winlink1000OduSrvQoSConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvQoSConfTable.setDescription('QoS configuration table.')
winlink1000OduSrvQoSConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduSrvQoSConfIndex"))
if mibBuilder.loadTexts: winlink1000OduSrvQoSConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvQoSConfEntry.setDescription('QoS configuration table.')
winlink1000OduSrvQoSConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvQoSConfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvQoSConfIndex.setDescription('Index of QoS Configuration.')
winlink1000OduSrvConfVlanQGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvConfVlanQGroups.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvConfVlanQGroups.setDescription('Frames classification according to VLAN Priority IDs.')
winlink1000OduSrvConfDiffservQGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvConfDiffservQGroups.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvConfDiffservQGroups.setDescription('Frames classification according to Diffserv.')
winlink1000OduSrvConfQueMir = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvConfQueMir.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvConfQueMir.setDescription('Desired Private MIR.')
winlink1000OduSrvConfQueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvConfQueWeight.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvConfQueWeight.setDescription("QoS queueu's weights in percent.")
winlink1000OduSrvQoSVlanQGroupsSetStr = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvQoSVlanQGroupsSetStr.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvQoSVlanQGroupsSetStr.setDescription('Frames classification according to VLAN IDs string for set.')
winlink1000OduSrvQoSDiffservQGroupsSetStr = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvQoSDiffservQGroupsSetStr.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvQoSDiffservQGroupsSetStr.setDescription('Frames classification according to Diffserv IDs string for set.')
winlink1000OduSrvQoSMaxRTQuePercent = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvQoSMaxRTQuePercent.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvQoSMaxRTQuePercent.setDescription('Maximal percent for RT & NRT queues.')
winlink1000OduServiceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6))
winlink1000OduSrvVlanSupport = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2), ("available", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduSrvVlanSupport.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvVlanSupport.setDescription('ODU Ethernet port VLAN support and configuration availability indication.\n\t\t\t1 - ODU VLAN Functionality Not Supported\n\t\t\t2 - ODU VLAN Functionality Supported\n\t\t\t3 - ODU VLAN Functionality Supported and Available')
winlink1000OduSrvVlanIngressMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transparent", 1), ("untagAll", 2), ("filter", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvVlanIngressMode.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvVlanIngressMode.setDescription('ODU Ethernet port ingress VLAN mode.')
winlink1000OduSrvVlanEgressMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transparent", 1), ("tag", 2), ("provider", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvVlanEgressMode.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvVlanEgressMode.setDescription('ODU Ethernet port egress VLAN mode.')
winlink1000OduSrvEgressTag = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40947))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvEgressTag.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvEgressTag.setDescription('ODU ethernet port egress VLAN tag.\n\t\t\tRight most digit is Vlan priority (0-7), \n\t\t\tother digits compose Vlan Id (2-4094)')
winlink1000OduSrvEgressProviderTag = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40947))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvEgressProviderTag.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvEgressProviderTag.setDescription('ODU ethernet port egress Provider VLAN tag.\n\t\t\tRight most digit is Vlan priority (0-7), \n\t\t\tother digits compose Vlan Id (2-4094)')
winlink1000OduSrvVlanIngressAllowedVIDs = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvVlanIngressAllowedVIDs.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvVlanIngressAllowedVIDs.setDescription('ODU ethernet port VLAN IDs that will not be filtered on ingress.\n\t\t\tw|w|w|w|w|w|w|w| ( where w = {0-4094} and w != 1 )')
winlink1000OduSrvVlanDisable = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduSrvVlanDisable.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduSrvVlanDisable.setDescription('Disable VLAN functionality. The following values can be set:\n\t\t\t3 - Disable ODU & IDU VLAN Configurations.')
winlink1000OduServiceVlanProviderListTPIDstr = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduServiceVlanProviderListTPIDstr.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduServiceVlanProviderListTPIDstr.setDescription('Holds the possible Provider TPIDs.')
winlink1000OduEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3))
winlink1000OduEthernetRemainingRate = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetRemainingRate.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduEthernetRemainingRate.setDescription('Current Ethernet bandwidth in bps.')
winlink1000OduEthernetIfTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2), )
if mibBuilder.loadTexts: winlink1000OduEthernetIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduEthernetIfTable.setDescription('ODU Ethernet Interface table.')
winlink1000OduEthernetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduEthernetIfIndex"))
if mibBuilder.loadTexts: winlink1000OduEthernetIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduEthernetIfEntry.setDescription('ODU Ethernet Interface table entry.')
winlink1000OduEthernetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduEthernetIfIndex.setDescription('ODU Ethernet Interface Index.')
winlink1000OduEthernetIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetIfAddress.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduEthernetIfAddress.setDescription('ODU MAC address.')
winlink1000OduEthernetIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 10, 11, 15, 16, 21, 254, 255))).clone(namedValues=NamedValues(("portAutoSense", 1), ("portAutoSense100Mbps", 5), ("forceHalfDuplex10Mbps", 10), ("forceFullDuplex10Mbps", 11), ("forceHalfDuplex100Mbps", 15), ("forceFullDuplex100Mbps", 16), ("forceFullDuplex1000Mbps", 21), ("disablePoePort", 254), ("disablePort", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduEthernetIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduEthernetIfAdminStatus.setDescription('Required state of the interface.')
winlink1000OduEthernetIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 11, 15, 16, 20, 21, 65535))).clone(namedValues=NamedValues(("notConnected", 1), ("connectedHalfDuplex10Mbps", 10), ("connectedFullDuplex10Mbps", 11), ("connectedHalfDuplex100Mbps", 15), ("connectedFullDuplex100Mbps", 16), ("connectedHalfDuplex1000Mbps", 20), ("connectedFullDuplex1000Mbps", 21), ("unknown", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduEthernetIfOperStatus.setDescription('Current operational state of the interface.')
winlink1000OduEthernetIfFailAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 11, 255))).clone(namedValues=NamedValues(("faNoAction", 1), ("faForceHalfDuplex10Mbps", 10), ("faForceFullDuplex10Mbps", 11), ("faDisablePort", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduEthernetIfFailAction.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduEthernetIfFailAction.setDescription('Failure action of the interface.')
winlink1000OduEthernetIf1588v2PTPEventRXRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetIf1588v2PTPEventRXRate.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduEthernetIf1588v2PTPEventRXRate.setDescription('For debug use')
winlink1000OduEthernetIf1588v2PTPEventTXRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetIf1588v2PTPEventTXRate.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduEthernetIf1588v2PTPEventTXRate.setDescription('For debug use')
winlink1000OduEthernetNumOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetNumOfPorts.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduEthernetNumOfPorts.setDescription('Number of ODU network interfaces.')
winlink1000OduEthernetGbeSupported = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetGbeSupported.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduEthernetGbeSupported.setDescription('Supported Giga bit Ethernet in ODU.')
winlink1000OduEthernetSfpProperties = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduEthernetSfpProperties.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduEthernetSfpProperties.setDescription('Sfp port properties.')
winlink1000OduBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4))
winlink1000OduBridgeBase = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 1))
winlink1000OduBridgeBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 1, 4), )
if mibBuilder.loadTexts: winlink1000OduBridgeBasePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduBridgeBasePortTable.setDescription('ODU Bridge Ports table.')
winlink1000OduBridgeBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 1, 4, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduBridgeBasePortIndex"))
if mibBuilder.loadTexts: winlink1000OduBridgeBasePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduBridgeBasePortEntry.setDescription('ODU Bridge Ports table entry.')
winlink1000OduBridgeBasePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeBasePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduBridgeBasePortIndex.setDescription('ODU Bridge Port Number.')
winlink1000OduBridgeBaseIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeBaseIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduBridgeBaseIfIndex.setDescription('IfIndex corresponding to ODU Bridge port.')
winlink1000OduBridgeTp = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4))
winlink1000OduBridgeTpMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 101), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduBridgeTpMode.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduBridgeTpMode.setDescription('ODU bridge mode. \n\t\tA change is effective after reset. Valid values: hubMode (0), bridgeMode (1).')
winlink1000OduBridgeTpPortTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3), )
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortTable.setDescription('ODU Transparent Bridge Ports table.')
winlink1000OduBridgeTpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduBridgeTpPortIndex"))
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortEntry.setDescription('ODU Transparent Bridge Ports table entry.')
winlink1000OduBridgeTpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortIndex.setDescription('ODU Transparent Bridge Port Number.')
winlink1000OduBridgeTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortInFrames.setDescription('Number of frames received by this port.')
winlink1000OduBridgeTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortOutFrames.setDescription('Number of frames transmitted by this port.')
winlink1000OduBridgeTpPortInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortInBytes.setDescription('Number of bytes received by this port.')
winlink1000OduBridgeTpPortOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduBridgeTpPortOutBytes.setDescription('Number of bytes transmitted by this port.')
winlink1000OduBridgeConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduBridgeConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduBridgeConfigMode.setDescription('ODU bridge configuration mode')
winlink1000OduAir = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5))
winlink1000OduAirFreq = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirFreq.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirFreq.setDescription('Installation Center Frequency. Valid values are product dependent. A change is effective after link re-synchronization.')
winlink1000OduAirDesiredRate = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirDesiredRate.setStatus('deprecated')
if mibBuilder.loadTexts: winlink1000OduAirDesiredRate.setDescription('Deprecated parameter, actual behavior is read-only. \n\t\tRequired Air Rate. For Channel Bandwidth of 20, 10, 5 MHz divide the value by 1, 2, 4 respectively.')
winlink1000OduAirSSID = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirSSID.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirSSID.setDescription('Reserved for the Manager application provided with the product.\n\t\t The Sector ID in Point-To-Multi-Point systems.')
winlink1000OduAirTxPower = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirTxPower.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirTxPower.setDescription('Required Transmit power in dBm . This is a nominal value while the actual transmit power includes additional attenuation.\n\t\tThe min and max values are product specific. A change is effective immediately.')
winlink1000OduAirSesState = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("sessionDown", 1), ("basicRate", 2), ("active", 3), ("installation", 4), ("scanning", 5), ("probing", 6), ("transmitting", 7), ("activeWithDefaultEncryptionKey", 8), ("installationWithDefaultEncryptionKey", 9), ("bitFailed", 10), ("activeWithVersionsMismatch", 11), ("installationWithVersionsMismatch", 12), ("inactive", 13), ("iduIncompatible", 14), ("spectrumAnalysis", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirSesState.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirSesState.setDescription('Current Link State. The value is active (3) during normal operation.')
winlink1000OduAirMstrSlv = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMstrSlv.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirMstrSlv.setDescription('This parameter indicates if the device was automatically selected into the radio link master or slave. \n\t\tThe value is undefined if there is no link.\n\t\tThe value is relevant only for point to point systems.')
winlink1000OduAirResync = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirResync.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirResync.setDescription('Setting this parameter to 1 will cause the link to restart the synchronization process.')
winlink1000OduAirPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9))
winlink1000OduAirRxPower = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirRxPower.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirRxPower.setDescription('Received Signal Strength in dBm. Relevant only for point to point systems.')
winlink1000OduAirTotalFrames = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirTotalFrames.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirTotalFrames.setDescription('Total number of radio frames.')
winlink1000OduAirBadFrames = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirBadFrames.setDescription('Total number of received radio frames with CRC error. The value is relevant only for point to point systems .')
winlink1000OduAirCurrentRate = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirCurrentRate.setStatus('deprecated')
if mibBuilder.loadTexts: winlink1000OduAirCurrentRate.setDescription('Deprecated parameter. Actual rate of the air interface in Mbps. \n\t\tFor Channel Bandwidth of 20, 10, 5 MHz divide the value by 1, 2, 4 respectively.')
winlink1000OduAirCurrentRateIdx = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirCurrentRateIdx.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirCurrentRateIdx.setDescription('Index of current air rate.')
winlink1000OduAirChainsRxPower = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChainsRxPower.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChainsRxPower.setDescription('Received Signal Strength of Cpe chains in dBm.\n\t\tChain 1 RSS: (1 Byte)\n\t\tChain 2 RSS: (1 Byte)\n\t\tChain 3 RSS: (1 Byte)')
winlink1000OduAirCurrentRateCBW = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirCurrentRateCBW.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirCurrentRateCBW.setDescription('CBW of current air rate.')
winlink1000OduAirCurrentRateGI = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirCurrentRateGI.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirCurrentRateGI.setDescription('GI of current air rate.')
winlink1000OduAirTxPower36 = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirTxPower36.setStatus('deprecated')
if mibBuilder.loadTexts: winlink1000OduAirTxPower36.setDescription('Deprecated parameter. Actual behavior is read-only.')
winlink1000OduAirTxPower48 = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirTxPower48.setStatus('deprecated')
if mibBuilder.loadTexts: winlink1000OduAirTxPower48.setDescription('Deprecated parameter. Actual behavior is read-only.')
winlink1000OduAirCurrentTxPower = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirCurrentTxPower.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirCurrentTxPower.setDescription('Current Transmit Power in dBm. This is a nominal value while the actual transmit power includes additional attenuation.')
winlink1000OduAirMinFrequency = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMinFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirMinFrequency.setDescription('Minimum center frequency in MHz.')
winlink1000OduAirMaxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMaxFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirMaxFrequency.setDescription('Maximum center frequency in MHz.')
winlink1000OduAirFreqResolution = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirFreqResolution.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirFreqResolution.setDescription('Center Frequency resolution. \n\t\tMeasured in MHz if value < 100, otherwise in KHz.')
winlink1000OduAirCurrentFreq = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirCurrentFreq.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirCurrentFreq.setDescription('Current Center Frequency.\n\t\tMeasured in MHz if center frequency resolution value < 100, otherwise in KHz.')
winlink1000OduAirNumberOfChannels = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirNumberOfChannels.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirNumberOfChannels.setDescription('Number of channels that can be used.')
winlink1000OduAirChannelsTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18), )
if mibBuilder.loadTexts: winlink1000OduAirChannelsTable.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelsTable.setDescription('Table of channels used by automatic channels selection (ACS).')
winlink1000OduAirChannelsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirChannelsIndex"))
if mibBuilder.loadTexts: winlink1000OduAirChannelsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelsEntry.setDescription('ACS channels table entry.')
winlink1000OduAirChannelsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelsIndex.setDescription('Channel Index.')
winlink1000OduAirChannelsFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelsFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelsFrequency.setDescription('Channel frequency in MHz.')
winlink1000OduAirChannelsOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirChannelsOperState.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelsOperState.setDescription('Channel state. Can be set by the user. \n\t\t Automatic Channel Selection uses channels that are AirChannelsOperState enabled and AirChannelsAvail enabled. \n\t\t A change is effective after link re-synchronization. Valid values: disabled (0), enabled (1).\n\t\t Rewriteable only in Point-To-Point products.')
winlink1000OduAirChannelsAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelsAvail.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelsAvail.setDescription('Channel state. Product specific and cannot be changed by the user. \n\t\tAutomatic Channel Selection uses channels that are AirChannelsOperState enabled and AirChannelsAvail enabled. \n\t\tValid values: disabled (0), enabled (1).')
winlink1000OduAirChannelsDefaultFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelsDefaultFreq.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelsDefaultFreq.setDescription("Default channel's availability for all CBWs.\n\t\tThe valid values are: forbidden (0), available (1).")
winlink1000OduAirDfsState = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirDfsState.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirDfsState.setDescription('Radar detection state. Valid values: disabled (0), enabled (1).')
winlink1000OduAirAutoChannelSelectionState = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirAutoChannelSelectionState.setStatus('deprecated')
if mibBuilder.loadTexts: winlink1000OduAirAutoChannelSelectionState.setDescription('Deprecated parameter. Indicating Automatic Channel Selection availability at current channel bandwidth. \n\t\tValid values: disabled (0), enabled (1).')
winlink1000OduAirEnableTxPower = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirEnableTxPower.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirEnableTxPower.setDescription('Indicating Transmit power configuration enabled or disabled.')
winlink1000OduAirMinTxPower = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMinTxPower.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirMinTxPower.setDescription('Minimum Transmit power in dBm.')
winlink1000OduAirMaxTxPowerTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 23), )
if mibBuilder.loadTexts: winlink1000OduAirMaxTxPowerTable.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirMaxTxPowerTable.setDescription('Table of Maximum transmit power per air rate, in dBm.')
winlink1000OduAirMaxTxPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 23, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirMaxTxPowerIndex"))
if mibBuilder.loadTexts: winlink1000OduAirMaxTxPowerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirMaxTxPowerEntry.setDescription('Maximum Transmit power table entry.')
winlink1000OduAirMaxTxPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMaxTxPowerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirMaxTxPowerIndex.setDescription('Air interface rate index.')
winlink1000OduAirMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 23, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMaxTxPower.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirMaxTxPower.setDescription('Maximum Transmit power in dBm.')
winlink1000OduAirChannelBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirChannelBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelBandwidth.setDescription('Channel bandwidth in KHz. A change is effective after reset.')
winlink1000OduAirChannelBWTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25), )
if mibBuilder.loadTexts: winlink1000OduAirChannelBWTable.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelBWTable.setDescription('Channel Bandwidths table.')
winlink1000OduAirChannelBWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirChannelBWIndex"))
if mibBuilder.loadTexts: winlink1000OduAirChannelBWEntry.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelBWEntry.setDescription('Channel Bandwidth table entry.')
winlink1000OduAirChannelBWIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("channelBW5MHz", 1), ("channelBW10MHz", 2), ("channelBW20MHz", 3), ("channelBW40MHz", 4), ("channelBW80MHz", 5), ("channelBW7MHz", 6), ("channelBW14MHz", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelBWIndex.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelBWIndex.setDescription('Channel Bandwidth index.')
winlink1000OduAirChannelBWAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("supportedManual", 2), ("supportedWithACS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelBWAvail.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelBWAvail.setDescription('Channel Bandwidth availability, product specific.\n\t\tOptions are: Not supported, supported with manual channel selection, supported with Automatic Channel Selection.')
winlink1000OduAirChannelsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelsAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelsAdminState.setDescription("Channels' availability per CBW.")
winlink1000OduAirChannelBWHSSATDDConflictPerCBW = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noConflict", 1), ("conflictSingle", 2), ("conflictDual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelBWHSSATDDConflictPerCBW.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelBWHSSATDDConflictPerCBW.setDescription('Indication for possible Link drop per CBW due to conflict between HSS and ATDD.')
winlink1000OduAirChannelBWMinRatioForSupporting = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelBWMinRatioForSupporting.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelBWMinRatioForSupporting.setDescription('Minimal TX ratio that may be used by the HSM and still enable proper operation of the aforementioned CBW.')
winlink1000OduAirChannelBWMaxRatioForSupporting = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirChannelBWMaxRatioForSupporting.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirChannelBWMaxRatioForSupporting.setDescription('Maximal TX ratio that may be used by the HSM and still enable proper operation of the aforementioned CBW.')
winlink1000OduAirRFD = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirRFD.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirRFD.setDescription('Current radio frame duration in microseconds.')
winlink1000OduAirRatesTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 27), )
if mibBuilder.loadTexts: winlink1000OduAirRatesTable.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirRatesTable.setDescription('Air Rate indexes table for current channel bandwidth.')
winlink1000OduAirRatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 27, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirRatesIndex"))
if mibBuilder.loadTexts: winlink1000OduAirRatesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirRatesEntry.setDescription('Air Rate indexes table entry.')
winlink1000OduAirRatesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirRatesIndex.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirRatesIndex.setDescription('Air Rate index.')
winlink1000OduAirRatesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rateNotAvailable", 1), ("rateAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirRatesAvail.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirRatesAvail.setDescription('Air Rate availability, depending on air interface conditions.')
winlink1000OduAirDesiredRateIdx = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirDesiredRateIdx.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirDesiredRateIdx.setDescription('Required Air Rate index. 0 reserved for Adaptive Rate.\n\t\tA change is effective immediately after Set operation to the master side\n\t\twhile the link is up.')
winlink1000OduAirLinkDistance = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirLinkDistance.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirLinkDistance.setDescription('Link distance in meters. \n\t\tA value of -1 indicates an illegal value and is also used when a link is not established.')
winlink1000OduAirLinkWorkingMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("fullCompatibilityRemoteUpgradeAvailable", 3), ("fullCompatibilityLocalUpgradeAvailable", 4), ("restrictedCompatibilityRemoteUpgradeRecomended", 5), ("restrictedCompatibilityLocalUpgradeRecomended", 6), ("softwareUpgradeRemoteUpgradeRequired", 7), ("softwareUpgradeLocalUpgradeRequired", 8), ("versionsIncompatibilityRemoteUpgradeRequired", 9), ("versionsIncompatibilityLocalUpgradeRequired", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirLinkWorkingMode.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirLinkWorkingMode.setDescription('Link working mode as a result of comparing versions of both sides of the link. \n\t\tPossible modes are: Unknown - no link, Normal - versions on both sides are identical with full compatibility, \n\t\twith restricted compatibility, or versions on both sides are different with software upgrade or versions incompatibility.')
winlink1000OduAirMajorLinkIfVersion = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMajorLinkIfVersion.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirMajorLinkIfVersion.setDescription('Major link interface version')
winlink1000OduAirMinorLinkIfVersion = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirMinorLinkIfVersion.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirMinorLinkIfVersion.setDescription('Minor link interface version')
winlink1000OduAirHss = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40))
winlink1000OduAirHssDesiredOpState = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notSupported", 1), ("independentUnit", 2), ("hubSyncMaster", 3), ("hubSyncClientContinueTx", 4), ("hubSyncClientDisableTx", 5), ("gpsSync", 6), ("independentSyncUnit-ISU", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssDesiredOpState.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssDesiredOpState.setDescription('Required Hub Site Synchronization operating state.\n\t\tFor HssSyncUnits : \tFor hssISU :[2,7] ,For hssGSU :[2,6]\n\t\tFor HBS:\t\t\t[2,3,4,5]')
winlink1000OduAirHssCurrentOpState = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notSupported", 1), ("independentUnit", 2), ("hubSyncMaster", 3), ("hubSyncClientContinueTx", 4), ("hubSyncClientDisableTx", 5), ("gpsSync", 6), ("independentSyncUnit-ISU", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssCurrentOpState.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssCurrentOpState.setDescription('Current Hub Site Synchronization operating state.')
winlink1000OduAirHssSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("notSynchronized", 2), ("synchronized", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssSyncStatus.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssSyncStatus.setDescription('Hub Site Synchronization sync status.')
winlink1000OduAirHssExtPulseStatus = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notDetected", 1), ("generating", 2), ("generatingAndDetected", 3), ("generatingAndImproperDetected", 4), ("detected", 5), ("improperDetected", 6), ("multipleSourcesDetected", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssExtPulseStatus.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssExtPulseStatus.setDescription('Hub Site Synchronization external pulse detection status.\n\t\tIn GSS mode: \n\t\tif generating then 1PSP is auto generated by the GSS Unit.\n\t\tif generatingAndDetecting then 1PSP is generated by GPS satellites signal.')
winlink1000OduAirHssExtPulseType = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("typeA", 2), ("typeB", 3), ("typeC", 4), ("typeD", 5), ("typeE", 6), ("typeF", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssExtPulseType.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssExtPulseType.setDescription('Hub Site Synchronization external pulse type.')
winlink1000OduAirHssDesiredExtPulseType = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("typeA", 2), ("typeB", 3), ("typeC", 4), ("typeD", 5), ("typeE", 6), ("typeF", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssDesiredExtPulseType.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssDesiredExtPulseType.setDescription('Hub Site Synchronization required external pulse type. Valid values for read write:\n\t\t {typeA(2),typeB(3),typeC(4),typeD(5),typeE(6),typeF(7)}. Valid value for read only:\n\t\t {notApplicable(1)}.')
winlink1000OduAirHssRfpTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7), )
if mibBuilder.loadTexts: winlink1000OduAirHssRfpTable.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpTable.setDescription('ODU Radio Frame Patterns (RFP) Table.')
winlink1000OduAirHssRfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirHssRfpIndex"))
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEntry.setDescription('ODU RFP Table entry.')
winlink1000OduAirHssRfpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpIndex.setDescription('ODU RFP Table index. The index represent the Radio Frame Pattern:\n\t\t typeA(2), typeB(3), typeC(4), typeD(5),typeE(6),typeF(7).')
winlink1000OduAirHssRfpEthChannelBW5MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW5MHz.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW5MHz.setDescription('Represents the compatibility of Ethernet service under Channel BW of 5MHz \n\t\t in the specific Radio Frame Pattern.')
winlink1000OduAirHssRfpTdmChannelBW5MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpTdmChannelBW5MHz.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpTdmChannelBW5MHz.setDescription('Represents the compatibility of TDM service under Channel BW of 5MHz \n\t\t in the specific Radio Frame Pattern.')
winlink1000OduAirHssRfpEthChannelBW10MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW10MHz.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW10MHz.setDescription('Represents the compatibility of Ethernet service under Channel BW of 10MHz \n\t\t in the specific Radio Frame Pattern.')
winlink1000OduAirHssRfpTdmChannelBW10MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpTdmChannelBW10MHz.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpTdmChannelBW10MHz.setDescription('Represents the compatibility of TDM service under Channel BW of 10MHz \n\t\t in the specific Radio Frame Pattern.')
winlink1000OduAirHssRfpEthChannelBW20MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW20MHz.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW20MHz.setDescription('Represents the compatibility of Ethernet service under Channel BW of 20MHz \n\t\t in the specific Radio Frame Pattern.')
winlink1000OduAirHssRfpTdmChannelBW20MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpTdmChannelBW20MHz.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpTdmChannelBW20MHz.setDescription('Represents the compatibility of TDM service under Channel BW of 20MHz \n\t\t in the specific Radio Frame Pattern.')
winlink1000OduAirHssRfpEthChannelBW40MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW40MHz.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW40MHz.setDescription('Represents the compatibility of Ethernet service under Channel BW of 40MHz \n\t\t in the specific Radio Frame Pattern.')
winlink1000OduAirHssRfpTdmChannelBW40MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpTdmChannelBW40MHz.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpTdmChannelBW40MHz.setDescription('Represents the compatibility of TDM service under Channel BW of 40MHz \n\t\t in the specific Radio Frame Pattern.')
winlink1000OduAirHssRfpEthChannelBW80MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW80MHz.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW80MHz.setDescription('Represents the compatibility of Ethernet service under Channel BW of 80MHz \n\t\t in the specific Radio Frame Pattern.')
winlink1000OduAirHssRfpEthChannelBW7MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW7MHz.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW7MHz.setDescription('Represents the compatibility of Ethernet service under Channel BW of 7MHz \n\t\t in the specific Radio Frame Pattern.')
winlink1000OduAirHssRfpEthChannelBW14MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestFit", 1), ("nonOptimal", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW14MHz.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpEthChannelBW14MHz.setDescription('Represents the compatibility of Ethernet service under Channel BW of 14MHz \n\t\t in the specific Radio Frame Pattern.')
winlink1000OduAirHssRfpStr = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpStr.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpStr.setDescription('Hub Site Synchronization supported patterns')
winlink1000OduAirHssHsmID = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssHsmID.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssHsmID.setDescription('A  unique ID which is common to the HSM and all its collocated ODUs')
winlink1000OduAirHssTime = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssTime.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssTime.setDescription('Hub Site Synchronization GPS time')
winlink1000OduAirHssLatitude = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssLatitude.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssLatitude.setDescription('Hub Site Synchronization GPS Latitude')
winlink1000OduAirHssNSIndicator = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssNSIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssNSIndicator.setDescription('Hub Site Synchronization GPS N/S Indicator')
winlink1000OduAirHssLongitude = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssLongitude.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssLongitude.setDescription('Hub Site Synchronization GPS Longitude')
winlink1000OduAirHssEWIndicator = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssEWIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssEWIndicator.setDescription('Hub Site Synchronization GPS E/W Indicator')
winlink1000OduAirHssNumSatellites = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssNumSatellites.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssNumSatellites.setDescription('Hub Site Synchronization GPS Number of satellites')
winlink1000OduAirHssAltitude = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssAltitude.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssAltitude.setDescription('Hub Site Synchronization GPS Altitude')
winlink1000OduAirHssRfpPhase = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfpNormalPhase", 1), ("rfpShiftedPhase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssRfpPhase.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssRfpPhase.setDescription('Hub Site Synchronization GPS RFP phase')
winlink1000OduAirHssInterSiteSynchronizationMode = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("independent", 1), ("synchronized", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssInterSiteSynchronizationMode.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssInterSiteSynchronizationMode.setDescription('Inter-Site Synchronization Mode - independent / synchronized')
winlink1000OduAirHssInterSiteSynchronizationAvailability = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notAvailable", 1), ("available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssInterSiteSynchronizationAvailability.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssInterSiteSynchronizationAvailability.setDescription('Inter-Site Synchronization Availability')
winlink1000OduAirHssSatellitesSatSyncRequired = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notRequired", 1), ("required", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssSatellitesSatSyncRequired.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssSatellitesSatSyncRequired.setDescription('Satellites Synchronization Is Required')
winlink1000OduAirHssDomainID = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssDomainID.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssDomainID.setDescription('EHSS domain. Indentify set of CUs with same HSS synchronization')
winlink1000OduAirHssSupportedSynchronizationProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("serialOnly", 1), ("ethOnly", 2), ("both", 3), ("ghssAndEth", 4), ("ghssEthSerial", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssSupportedSynchronizationProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssSupportedSynchronizationProtocol.setDescription('Supported Synchronization Protocols')
winlink1000OduAirHssDesiredSynchronizationProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serialOnly", 1), ("ethOnly", 2), ("both", 3), ("ghssOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssDesiredSynchronizationProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssDesiredSynchronizationProtocol.setDescription('Desired Synchronization Protocols')
winlink1000OduAirHssDiscover = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("startAll", 1), ("startAllMstr", 2), ("startMyDmn", 3), ("startMyMstr", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssDiscover.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssDiscover.setDescription('Initiate Discovery process of ODUs on the network.')
winlink1000OduAirHssNumberOfDiscoveredODUs = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssNumberOfDiscoveredODUs.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssNumberOfDiscoveredODUs.setDescription('Number OF Discovered ODUs in network.')
winlink1000OduAirHssDiscoverTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 26), )
if mibBuilder.loadTexts: winlink1000OduAirHssDiscoverTable.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssDiscoverTable.setDescription('HSS Discover Table.')
winlink1000OduAirHssDiscoverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 26, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirHssDiscoverIndex"))
if mibBuilder.loadTexts: winlink1000OduAirHssDiscoverEntry.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssDiscoverEntry.setDescription('ODU Discover Table entry.')
winlink1000OduAirHssDiscoverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssDiscoverIndex.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssDiscoverIndex.setDescription('HSS Discover Table Index.')
winlink1000OduAirHssDiscoverODUDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 26, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssDiscoverODUDescription.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssDiscoverODUDescription.setDescription('Hold ODU HSS status in compress format:\n\t\tDomain,IP,HSS Role,Hss support,\n\t\tEnabled HSS protocol,Sync Status,\n\t\tLocation, IPv6.')
winlink1000OduAirHssMasterSlaveCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("compatible", 1), ("notCompatible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssMasterSlaveCompatibility.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssMasterSlaveCompatibility.setDescription('EHSM version compatibility. Relevant to Ethernet HSS Clients only.')
winlink1000OduAirHssNumberOfAssociatedCU = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssNumberOfAssociatedCU.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssNumberOfAssociatedCU.setDescription('Number of associated Ethernet HSS Clients. Relevant to Ethernet HSS Masters only')
winlink1000OduAirHssAssociatedCUTable = MibTable((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 29), )
if mibBuilder.loadTexts: winlink1000OduAirHssAssociatedCUTable.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssAssociatedCUTable.setDescription('Associated Ethernet HSS Clients Table. Releant for Ethernet HSS Masters only.')
winlink1000OduAirHssAssociatedCUTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 29, 1), ).setIndexNames((0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirHssAssociatedCUIndex"))
if mibBuilder.loadTexts: winlink1000OduAirHssAssociatedCUTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssAssociatedCUTableEntry.setDescription('Associated Ethernet HSS Clients Table Entry. Releant for Ethernet HSS Masters only.')
winlink1000OduAirHssAssociatedCUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssAssociatedCUIndex.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssAssociatedCUIndex.setDescription('Associated Ethernet HSS Clients Table Index. Releant for Ethernet HSS Masters only.')
winlink1000OduAirHssAssociatedCUDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 29, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssAssociatedCUDescription.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssAssociatedCUDescription.setDescription('Holds Associated Ethernet HSS Clients Description in compress format:\n\t\tIP,Delay,Compatibility,Ethernet Speed, Ethernet Rx rate, IPv6')
winlink1000OduAirHssSyncStatusEth = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("notSynchronized", 2), ("goodSynchronizationLevel", 3), ("mediumSynchronizationLevel", 4), ("badSynchronizationLevel", 5), ("startSynchronization", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssSyncStatusEth.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssSyncStatusEth.setDescription('Ethernet HSS Client Synchronization Level')
winlink1000OduAirHssEthVLANTag = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40947))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssEthVLANTag.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssEthVLANTag.setDescription('Ethernet HSS VLan Tag: \n\t\tThe least significate decimal digit is the VLan Priority(0-6) \n\t\tand the rest of the digits represents VLan ID (2-4094)')
winlink1000OduAirHssHSMIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 32), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssHSMIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssHSMIPAddress.setDescription('HSMs IP address. Relevant for HSC synchronized over Ethernet.')
winlink1000OduAirHssDelayToHSM = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssDelayToHSM.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssDelayToHSM.setDescription('Delay in microseconds to HSM. Relevant for HSC synchronized over Ethernet.')
winlink1000OduAirHssSyncAcquisitionSeconds = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirHssSyncAcquisitionSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssSyncAcquisitionSeconds.setDescription('Accumulated quantity of seconds in clock acquisition while connected to current HSM')
winlink1000OduAirHssHSMIPv6Address = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winlink1000OduAirHssHSMIPv6Address.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirHssHSMIPv6Address.setDescription('HSMs IPv6 address. Relevant for HSC synchronized over Ethernet.')
winlink1000OduAirLockRemote = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirLockRemote.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirLockRemote.setDescription('This parameter enables locking the link with a specific ODU.\n\t\t The following values can be set:\n\t\t Unlock (default) - The ODU is not locked on a specific remote ODU. Unlock can only be performed when the link is not connected.\n\t\t Lock - The ODU is locked on a specific remote ODU. Lock can only be performed when the link is active.')
winlink1000OduAirAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winlink1000OduAirAntennaGain.setStatus('mandatory')
if mibBuilder.loadTexts: winlink1000OduAirAntennaGain.setDescription('Current Antenna Gain in 0.1 dBi resolution. User defined value for \n\t\texternal antenna.\n\t\tLegal range: MinAntennaGain - Alarm.\n\t\t')
externalAlarmInPort1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,105)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: externalAlarmInPort1Alarm.setDescription('\n\t\tThe trap is sent every time an alarm occurs in the External Alarm Input of port #1.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: External Alarm 1 -  - Alarm.\n\t\t')
externalAlarmInPort2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,106)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: externalAlarmInPort2Alarm.setDescription('\n\t\tThe trap is sent every time an alarm occurs in the External Alarm Input of port #2.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: External Alarm 2 -  - Alarm.\n\t\t')
bitFailedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,107)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: bitFailedAlarm.setDescription('\n\t\tThe trap is sent if there is no way to recover from the situation.\t\t\n\t\tContains two parameters:\n\t\t1 - Description: ODU power up built in test failed. Error code is: %n\n\t\t2 - %n number\n\t\t')
wrongConfigurationLoadedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,108)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: wrongConfigurationLoadedAlarm.setDescription('\n\t\tThe trap is sent if there is a way to recover from the situation.\t\t\n\t\tContains two parameters:\n\t\t1 - Description: Wrong configuration loaded. Error code is: %n\n\t\t2 - %n number\n\t\t')
lanPort1DisconnectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,109)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: lanPort1DisconnectedAlarm.setDescription('\n\t\tIndicates the LAN port 1 status changed to disconnected.\t\t\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: LAN port 1 status changed to disconnected.\n\t\t')
lanPort2DisconnectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,110)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: lanPort2DisconnectedAlarm.setDescription('\n\t\tIndicates the LAN port 2 status changed to disconnected.\t\t\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: LAN port 2 status changed to disconnected.\n\t\t')
mngPortDisconnectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,111)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: mngPortDisconnectedAlarm.setDescription('\n\t\tIndicates the LAN1 port status changed to disconnected.\t\t\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: LAN1 port status changed to disconnected.\n\t\t')
externalAlarmInPort3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,112)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: externalAlarmInPort3Alarm.setDescription('\n\t\tThe trap is sent every time an alarm occurs in the External Alarm Input of port #3.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: External Alarm 3 -  - Alarm.\n\t\t')
externalAlarmInPort4Alarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,113)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: externalAlarmInPort4Alarm.setDescription('\n\t\tThe trap is sent every time an alarm occurs in the External Alarm Input of port #4.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: External Alarm 4 -  - Alarm.\n\t\t')
swVersionsMismatchFullCompatibilityAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,114)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: swVersionsMismatchFullCompatibilityAlarm.setDescription('\n\t\tThe trap is sent if SW versions mismatch with full link functionality.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Software versions mismatch - full link functionality\n\t\t')
swVersionsMismatchRestrictedCompatibilityAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,115)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: swVersionsMismatchRestrictedCompatibilityAlarm.setDescription('\n\t\tThe trap is sent if SW versions mismatch with restricted link functionality.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Software versions mismatch - restricted link functionality\n\t\t')
swVersionsMismatchSoftwareUpgradeRequired = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,116)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: swVersionsMismatchSoftwareUpgradeRequired.setDescription('\n\t\tThe trap is sent if SW versions mismatch and SW upgrade is required.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Software versions mismatch - Software upgrade required\n\t\t')
swVersionsIncompatible = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,117)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: swVersionsIncompatible.setDescription('\n\t\tThe trap is sent if SW versions are incompatible.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: SW Versions incompatible\n\t\t')
hssMultipleSourcesDetectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,118)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hssMultipleSourcesDetectedAlarm.setDescription('\n\t\tIndicates that multiple sync pulse sources were detected.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: HSS multiple sync sources were detected.\n\t\t')
hssSyncToProperSourceStoppedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,119)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hssSyncToProperSourceStoppedAlarm.setDescription('\n\t\tIndicates that synchronization to a proper sync pulse source was stopped.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: HSS sync pulse - Down. The reason is: %s.\n\t\t%s - Is the reason for the sync down.\n\t\t')
hssSyncPulseDetectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,120)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hssSyncPulseDetectedAlarm.setDescription('\n\t\tIndicates that HSS additional sync pulse was detected.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: HSS additional sync pulse was detected.\t\t\n\t\t')
tdmBackupAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,121)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: tdmBackupAlarm.setDescription('\n\t\tIndicates that the TDM backup link was activated.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: TDM backup alarm - backup link was activated.\n\t\t')
linkLockUnauthorizedRemoteODU = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,122)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: linkLockUnauthorizedRemoteODU.setDescription('\n\t\tIndicates that the remote ODU is unauthorized. \n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Unauthorized remote ODU connection rejected.\n\t\t')
linkLockUnauthorizedODU = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,123)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: linkLockUnauthorizedODU.setDescription('\n\t\tIndicates that the ODU is unauthorized. \n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Unauthorized ODU connection rejected.\n\t\t')
hotStandbyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,124)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hotStandbyAlarm.setDescription('\n\t\tIndicates that the hot standby secondary link was activated.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Secondary Link Is Active.\n\t\t')
sfpInsertion = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,126)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: sfpInsertion.setDescription('\n\t\tIndicates that a device was inserted to SFP Port\n\t\t')
sfpPort1DisconnectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,127)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: sfpPort1DisconnectedAlarm.setDescription('\n\t\tIndicates the SFP port 1 status changed to disconnected.\t\t\n\t\tContains a single parameter which is its description:\n\t\t1 - Description: SFP port 1 status changed to disconnected.\n\t\t')
ringRplStateActiveAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,128)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: ringRplStateActiveAlarm.setDescription('\n\t\tRPL state changed to Active.\n\t\t')
desiredRatioCanNotBeAppliedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,129)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: desiredRatioCanNotBeAppliedAlarm.setDescription('\n\t\tIndicates Desired UL/DL RAtio Can Not Be Applied.\n\t\t')
cbwMismatch = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,130)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: cbwMismatch.setDescription('\n\t\tIndicates that a Channel Bandwidth mismatch was detected.\t\t\n\t\tContains two parameters:\n\t\t1 - Description: Channel Bandwidth Mismatch: one side is %n0 MHz and the other is %n1 MHz.\n\t\t%n0 is the local Channel Bandwidth value in MHz.\n\t\t%n1 is the remoet Channel Bandwidth value in MHz.')
gpsNotSynchronized = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,131)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: gpsNotSynchronized.setDescription('\n\t\tIndicates that the GPS is not synchronized with satellites.\n\t\tPulses are self generated.\n\t\t')
pdTooHighDueCbwLimitations = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,132)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: pdTooHighDueCbwLimitations.setDescription('\n\t\tIndicates that link cannot be established because \n\t\tlink range is too large for channel bandwidth.\n\t\t')
hbsEncryptionAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,133)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hbsEncryptionAlarm.setDescription("\n\t\tIndicates an encryption key mismatch.\n\t\tContains a single parameter, which is its description, including the HSU's name\n\t\t")
hbsEhServiceClosedToHsu = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,134)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hbsEhServiceClosedToHsu.setDescription("\n\t\tIndicates an encryption key mismatch.\n\t\tContains a single parameter, which is its description, including the HSU's name\n\t\t")
hbsUnsynchronizedHsuAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,135)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hbsUnsynchronizedHsuAlarm.setDescription('\n\t\tIndicates a registered HSU lost synchronization.\n\t\t')
hbsInactiveHbsAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,136)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hbsInactiveHbsAlarm.setDescription('\n\t\tIndicates HBS is InActive.\n\t\t')
incompatibleHsu = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,137)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: incompatibleHsu.setDescription('\n\t\tIndicates that the HSU is not compatible to HBS.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Incompatible ODUs.\n\t\t')
hsuUnsupportedBeacon = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,138)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hsuUnsupportedBeacon.setDescription('\n\t\tIndicates an unsupported beacon has arrived at HSU\n\t\t')
lanPortDisconnectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,139)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: lanPortDisconnectedAlarm.setDescription('\n\t\tIndicates the LAN port status changed to disconnected.\t\t\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: LAN port status changed to disconnected.\n\t\t')
poePortDisconnectedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,140)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: poePortDisconnectedAlarm.setDescription('\n\t\tIndicates the LAN2 port status changed to disconnected.\t\t\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: LAN2 port status changed to disconnected.\n\t\t')
poePowerConsumptionAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,141)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: poePowerConsumptionAlarm.setDescription('\n\t\tIndicates the POE Power Consumption is above allowed maximum.\t\t\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: POE consumption above allowed maximum. port closed.\n\t\t')
hobupFaultyStateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,149)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hobupFaultyStateAlarm.setDescription('\n\t\tThis Alarm will indicate that the Hot Backup module is in faulty state.\n\t\t1 - Description: Hot Backup fault detected: %s unit.\n\t\t%s - Primary Or Secondary Unit\n\t\t')
gpsOverCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,150)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: gpsOverCurrentAlarm.setDescription('\n\t\tIndicates the GPS Antenna current consumption is above allowed maximum.\t\t\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: GPS Antenna current consumption above allowed maximum. GPS closed.\n\t\t')
gpsCommunicationFailiureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,151)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: gpsCommunicationFailiureAlarm.setDescription("\n\t\tIndicates the GPS data isn't received.\t\t\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: GPS Communication failiure.\n\t\t")
temperatureThresholdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,152)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: temperatureThresholdAlarm.setDescription('\n\t\tIndicates the board temperature is above allowed maximum.\t\t\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: GPS Antenna current consumption above allowed maximum. GPS closed.\n\t\t')
localRouterDiscoveryStatus = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,153)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: localRouterDiscoveryStatus.setDescription('\n\t\tThis Alarm will indicate that we have no connection with local train router.\n\t\t1 - Description: MacLearningUpdate detected disconnection with local train router %s\n\t\t%s - local train IP\n\t\t')
trackRouterDiscoveryStatus = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,154)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: trackRouterDiscoveryStatus.setDescription('\n\t\tThis Alarm will indicate that we have no connection with Track side router.\n\t\t1 - Description: MacLearningUpdate detected disconnection with Track side router %s\n\t\t%s - Default gateway IP\n\t\t')
lastUserSnmpAccessOverHourAgo = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,155)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: lastUserSnmpAccessOverHourAgo.setDescription('\n\t\tThis trap will indicate that the last access of the accessing user was more than an hour ago.\n\t\t1 - Description: User %s performed SNMP access after more than an hour.\n\t\t%s - user name\n\t\t')
btsTargetUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,156)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: btsTargetUnreachable.setDescription('\n\t\tThis Alarm will indicate that we have no connection with Bts desired target.\n\t\t1 - Description: TNC detected disconnection with the BTS target %s\n\t\t%s - Default gateway IP\n\t\t')
tdmServiceClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,200)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: tdmServiceClear.setDescription('\n\t\tIndicates that TDM Service fault is cleared.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: TDM Service - Normal.\n\t\t')
ethServiceOpened = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,201)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: ethServiceOpened.setDescription('\n\t\tIndicates that Ethernet Service has been opened.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Ethernet Service has been opened.\n\t\t')
encryptionClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,203)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: encryptionClear.setDescription('\n\t\tIndicates that encryption is OK.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Encryption Status - Normal.\n\t\t')
changeLinkPasswordClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,204)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: changeLinkPasswordClear.setDescription('\n\t\tIndicates that the Link Password was changed successfully.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Link Password has been changed at/on: %s.\n\t\t%s - Is the Local Site name or Remote Site name or both sides of the Link.\n\t\t')
externalAlarmInPort1Clear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,205)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: externalAlarmInPort1Clear.setDescription('\n\t\tThis Trap is sent every time an External Alarm Input fault of port # 1 is cleared.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: External Alarm 1 -  - Alarm Cleared.\n\t\t')
externalAlarmInPort2Clear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,206)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: externalAlarmInPort2Clear.setDescription('\n\t\tThis Trap is sent every time an External Alarm Input fault of port # 2 is cleared.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: External Alarm 2 -  - Alarm Cleared.\n\t\t')
lanPort1Clear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,209)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: lanPort1Clear.setDescription('\n\t\tIndicates the LAN port 1 status changed to connected.\n\t\tContains two parameters:\n\t\t1 - Description: LAN port 1 status changed to connected - %s\n\t\t2 - %s Is the Eth. mode (speed & duplex)\n\t\t')
lanPort2Clear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,210)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: lanPort2Clear.setDescription('\n\t\tIndicates the LAN port 2 status changed to connected.\n\t\tContains two parameters:\n\t\t1 - Description: LAN port 2 status changed to connected - %s.\n\t\t2 - %s Is the Eth. mode (speed & duplex).\n\t\t')
mngPortClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,211)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: mngPortClear.setDescription('\n\t\tIndicates the LAN1 port status changed to connected.\n\t\tContains two parameters:\n\t\t1 - Description: LAN1 port status changed to connected - %s\n\t\t2 - %s Is the Eth. mode (speed & duplex)\n\t\t')
externalAlarmInPort3Clear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,212)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: externalAlarmInPort3Clear.setDescription('\n\t\tThis Trap is sent every time an External Alarm Input fault of port # 3 is cleared.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: External Alarm 3 -  - Alarm Cleared.\n\t\t')
externalAlarmInPort4Clear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,213)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: externalAlarmInPort4Clear.setDescription('\n\t\tThis Trap is sent every time an External Alarm Input fault of port # 4 is cleared.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: External Alarm 4 -  - Alarm Cleared.\n\t\t')
swVersionsMatchFullCompatibilityClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,214)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: swVersionsMatchFullCompatibilityClear.setDescription('\n\t\tThe trap is sent if SW versions match.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Software Versions compatible\n\t\t')
swVersionsMatchRestrictedCompatibilityClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,215)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: swVersionsMatchRestrictedCompatibilityClear.setDescription('\n\t\tThe trap is sent if SW versions match and link functionality is not restricted.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Software Versions compatible\n\t\t')
swVersionsMatchSoftwareUpgradeRequiredClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,216)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: swVersionsMatchSoftwareUpgradeRequiredClear.setDescription('\n\t\tThe trap is sent if SW versions match and SW upgrade is successful.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Software Versions compatible\n\t\t')
swVersionsCompatibleClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,217)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: swVersionsCompatibleClear.setDescription('\n\t\tThe trap is sent if SW versions compatible\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Software Versions compatible\n\t\t')
hssMultipleSourcesDisappearedClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,218)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hssMultipleSourcesDisappearedClear.setDescription('\n\t\tIndicates that multiple sync pulse sources disappeared.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: HSS multiple sync pulse sources disappeared.\n\t\t')
hssSyncToProperSourceAchievedClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,219)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hssSyncToProperSourceAchievedClear.setDescription('\n\t\tIndicates that synchronization to a proper Sync source was achieved.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: HSS sync pulse - Up.\n\t\t')
hssSyncPulseDisappearedClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,220)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hssSyncPulseDisappearedClear.setDescription('\n\t\tIndicates that HSS additional sync pulse disappeared.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: HSS additional sync pulse was disappeared.\t\t\n\t\t')
tdmBackupClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,221)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: tdmBackupClear.setDescription('\n\t\tIndicates that the TDM main link was activated.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: TDM main link was activated.\n\t\t')
linkLockAuthorizedRemoteODU = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,222)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: linkLockAuthorizedRemoteODU.setDescription('\n\t\tIndicates that the remote ODU is authorized.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Authorized remote ODU connection accepted.\n\t\t')
linkLockAuthorizedODU = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,223)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: linkLockAuthorizedODU.setDescription('\n\t\tIndicates that the ODU is authorized.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Authorized ODU connection permitted.\n\t\t')
linkAuthenticationDisabled = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,224)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: linkAuthenticationDisabled.setDescription('\n\t\tIndicates that the Link Lock is disabled.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Link Authentication has been disabled.\n\t\t')
hotStandbyClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,225)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hotStandbyClear.setDescription('\n\t\tIndicates that the Primary Link Was Activated.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Primary Link Is Active.\n\t\t')
sfpExtraction = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,226)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: sfpExtraction.setDescription('\n\t\tIndicates that a device was extracted from SFP Port\n\t\t')
sfpPort1Clear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,227)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: sfpPort1Clear.setDescription('\n\t\tIndicates the SFP port 1 status changed to connected.\n\t\tContains two parameters:\n\t\t1 - Description: SFP port 1 status changed to connected - %s\n\t\t2 - %s Is the Eth. mode (speed & duplex)\n\t\t')
compatibleIdus = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,228)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: compatibleIdus.setDescription('\n\t\tIndicates that the ODU has identified compatible Idus on both sides of the link.\n\t\t')
desiredRatioCanNotBeAppliedClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,229)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: desiredRatioCanNotBeAppliedClear.setDescription('\n\t\tIndicates Current UL/DL Ratio Is Equal To Desired Ratio.\n\t\t')
cbwMatch = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,230)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: cbwMatch.setDescription('\n\t\tIndicates that a Channel Bandwidth match was detected.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Channel Bandwidth value in MHz.\n\t\t')
switchCbwAndChannel = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,231)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: switchCbwAndChannel.setDescription('\n\t\tIndicates that the system is switching Channel Bandwidth and channel frequency.\n\t\tContains two parameters:\n\t\t1 - Switching to Channel Bandwith %n0 MHz and to channel %n1 GHz.\n\t\t')
ringRplStateIdle = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,232)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: ringRplStateIdle.setDescription('\n\t\tRPL state changed to Idle.\n\t\t')
ringEthServiceStatus = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,233)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: ringEthServiceStatus.setDescription("\n\t\tIndicates Ethernet service's state - blocked \\ unblocked.\n\t\tContains a single parameter:\n\t\t1 - Description: Ethernet's state (blocked \\ unblocked)\n\t\t")
ringFirstRpmReceived = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,234)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: ringFirstRpmReceived.setDescription("\n\t\tRing application: in non-RPL link indicates first from a specific RPL was received.\n\t\tContains a single parameter:\n\t\t1 - Description: RPM's VLAN ID\n\t\t")
ringEthernetSrviceUnblockedTO = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,235)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: ringEthernetSrviceUnblockedTO.setDescription('\n\t\tRing application: in non-RPL link Ethernet service is unblocked due to RPM timeout.\t\t\n\t\t')
gpsSynchronized = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,236)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: gpsSynchronized.setDescription('\n\t\tIndicates that the GPS is synchronized with satellites.\n\t\t')
hbsEncryptionClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,237)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hbsEncryptionClear.setDescription("\n\t\tIndicates that encryption is OK.\n\t\tContains a single parameter, which is its description, including the HSU's name\n\t\t")
hbsEhServiceOpenedToHsu = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,238)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hbsEhServiceOpenedToHsu.setDescription("\n\t\tIndicates that encryption is OK.\n\t\tContains a single parameter, which is its description, including the HSU's name\n\t\t")
hbsSynchronizedHsuAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,239)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hbsSynchronizedHsuAlarm.setDescription('\n\t\tIndicates a registered HSU is synchronized.\n\t\t')
hbsActiveHbs = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,240)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hbsActiveHbs.setDescription('\n\t\tIndicates when HBS has been activated.\n\t\t')
switchCBW = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,241)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: switchCBW.setDescription('\n\t\tSwitching Channel Bandwidth.\n\t\t')
changeRatio = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,242)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: changeRatio.setDescription('\n\t\tHBS Tx ratio has changed.\n\t\t')
lanPortClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,243)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: lanPortClear.setDescription('\n\t\tIndicates the LAN port status changed to connected.\n\t\tContains two parameters:\n\t\t1 - Description: LAN port status changed to connected - %s\n\t\t2 - %s Is the Eth. mode (speed & duplex)\n\t\t')
poePortClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,244)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: poePortClear.setDescription('\n\t\tIndicates the LAN2 port status changed to connected.\n\t\tContains two parameters:\n\t\t1 - Description: LAN2 port status changed to connected - %s\n\t\t2 - %s Is the Eth. mode (speed & duplex)\n\t\t')
poePowerConsumptionClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,245)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: poePowerConsumptionClear.setDescription('\n\t\tIndicates the POE power consumption is valid.\n\t\tContains two parameters:\n\t\t1 - Description: POE consumption within limits. port is opened.\n\t\t2 - %s Is the Eth. mode (speed & duplex)\n\t\t')
incompatibleHbsHsu = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,246)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: incompatibleHbsHsu.setDescription('\n\t\tIncompatible HBS/HSU software versions - no service.\n\t\t')
mobilityLinkOff = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,247)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: mobilityLinkOff.setDescription('\n\t\tMobility - Link cannot be established due to:\n\t\t1 - The HBS does not support Mobility\n\t\t2 - Lack of resources in the HBS for HSU level\n\t\t')
enterLocalConnection = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,248)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: enterLocalConnection.setDescription('\n\t\tEntering Local Connection (Broadcast) Mode.\n\t\t')
hobupActiveStateFaultyClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,249)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hobupActiveStateFaultyClear.setDescription('\n\t\tthis clear alarm will indicate that the Hot Backup unit is in active state.\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Hot Backup %s unit activated.\n\t\t%s - Primary Or Secondary Unit\n\t\t')
hobupStandbyState = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,250)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: hobupStandbyState.setDescription('\n\t\tThis info fault will indicate that the Hot backup module has entered standby/peer_detection state\n\t\tContains a single parameter, which is its description:\n\t\t1 - Description: Hot Backup in Standby state: %s unit.\n\t\t%s - Primary Or Secondary Unit\n\t\t')
gpsOverCurrentClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,251)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: gpsOverCurrentClear.setDescription('\n\t\tIndicates the GPS Antenna current consumption is valid.\n\t\t')
temperatureThresholdClear = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,252)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: temperatureThresholdClear.setDescription('\n\t\tIndicates the board temperature is valid.\n\t\t')
localRouterDiscoverySucceed = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,253)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: localRouterDiscoverySucceed.setDescription('\n\t\tIndicated the we succeeded to discover train router in ip %s MAC address %s\n\t\t%s Train IP\n\t\t%s Train MAC Address\n\t\t')
trackRouterDiscoverySucceed = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,254)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: trackRouterDiscoverySucceed.setDescription('\n\t\tIndicated the we succeeded to discover track router in ip %s MAC address %s\n\t\t%s Train IP\n\t\t%s Train MAC Address\n\t\t')
qosVersion2StrictMismatch = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,255)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: qosVersion2StrictMismatch.setDescription("\n\t\tCPE  doesn't support strict QOS configuration.\n\t\t")
qosVersion2TtlMismatch = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,256)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: qosVersion2TtlMismatch.setDescription("\n\t\tCPE doesn't support TTL configuration.\n\t\t")
btsTargetIsReachable = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,257)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: btsTargetIsReachable.setDescription('\n\t\tIndicated the we succeeded to establish connection with the Bts desired target (%s)\n\t\t%s Target IP\n\t\t')
tcNotSupportedByHSU = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,258)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: tcNotSupportedByHSU.setDescription("\n\t\tCPE doesn't support TC functionality.\n\t\t")
syncEPortHOStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,259)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: syncEPortHOStateChange.setDescription('\n\t\tEnter/leave HO state of SyncE port.\n\t\t')
syncEPortFailureStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,260)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: syncEPortFailureStateChange.setDescription('\n\t\tEnter/leave Failure state of SyncE port.\n\t\t')
btsCpeUpdateServiceFailed = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,261)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: btsCpeUpdateServiceFailed.setDescription('\n\t\tUpdate service Failed\n\t\t')
btsCpeUpdateServiceSucceed = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,262)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: btsCpeUpdateServiceSucceed.setDescription('\n\t\tUpdate service Succeed\n\t\t')
radiusServerNoREsponse = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,263)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: radiusServerNoREsponse.setDescription('\n\t\tNo response from radius server\n\t\t')
noRadiusServerRespond = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,264)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: noRadiusServerRespond.setDescription('\n\t\tAlarm indicates that no Radius server is connected\n\t\t')
radiusServerRespondedSuccessfully = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,265)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: radiusServerRespondedSuccessfully.setDescription('\n\t\tindicates that Radius server responded seccessfully.\n\t\t')
bsaAlignmentStarted = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,266)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: bsaAlignmentStarted.setDescription('\n\t\tIndicate the beginning of Alignment Process\n\t\t')
bsaAlignmentFinished = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,267)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: bsaAlignmentFinished.setDescription('\n\t\tIndicate the completion of Alignment Process\n\t\t')
bsaAlignmentTriggered = NotificationType((1, 3, 6, 1, 4, 1, 4458, 1000) + (0,268)).setObjects(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"), ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
if mibBuilder.loadTexts: bsaAlignmentTriggered.setDescription('\n\t\tIndicate the triggering of Alignment Process due to exceeding thresholds\n\t\t')
radwinProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20))
winlink1000Family = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 2))
radwin2000Family = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 3))
gpsSynchronizerFamily = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 4))
radwin5000HBSFamily = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 5))
radwin5000HSUFamily = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 6))
radwin6000Family = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 10))
radwinWiFiAPFamily = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 20))
odu = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 2, 1))
oduIntegratedAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 2, 1, 1))
oduExternalAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 2, 1, 2))
odu2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 3, 1))
odu2KIntegratedAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 3, 1, 1))
odu2KExternalAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 3, 1, 2))
oduGSU = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 4, 1))
oduGSUExternalAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 4, 1, 2))
hssSyncUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 4, 2))
hssISU = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 4, 2, 1))
hssGSU = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 4, 2, 2))
oduHBS = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 5, 1))
oduHBSIntegratedAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 5, 1, 1))
oduHBSExternalAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 5, 1, 2))
oduHSU = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 6, 1))
oduHSUIntegratedAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 6, 1, 1))
oduHSUExternalAntenna = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 6, 1, 2))
odu6000 = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 10, 1))
odu6K = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 10, 1, 1))
gateway6000 = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 10, 2))
gateway6K = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 10, 2, 1))
odu600 = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 20, 1))
oduWiFiAP = MibIdentifier((1, 3, 6, 1, 4, 1, 4458, 20, 20, 1, 1))
mibBuilder.exportSymbols("RADWIN-MIB-WINLINK1000", odu=odu, winlink1000OduAirLinkWorkingMode=winlink1000OduAirLinkWorkingMode, winlink1000OduSrvQoSConfIndex=winlink1000OduSrvQoSConfIndex, externalAlarmInPort3Alarm=externalAlarmInPort3Alarm, winlink1000OduAdmIPStackMode=winlink1000OduAdmIPStackMode, winlink1000OduAdmHwRev=winlink1000OduAdmHwRev, radiusServerNoREsponse=radiusServerNoREsponse, winlink1000OduAirCurrentFreq=winlink1000OduAirCurrentFreq, winlink1000OduAirTxPower=winlink1000OduAirTxPower, winlink1000OduAdmBatterySavingShutdownTime=winlink1000OduAdmBatterySavingShutdownTime, winlink1000OduSrvConfQueWeight=winlink1000OduSrvConfQueWeight, linkLockAuthorizedRemoteODU=linkLockAuthorizedRemoteODU, winlink1000OduAirChannelsIndex=winlink1000OduAirChannelsIndex, winlink1000OduSrvBridging=winlink1000OduSrvBridging, oduHBSIntegratedAntenna=oduHBSIntegratedAntenna, winlink1000OduAdmSwCapabilities=winlink1000OduAdmSwCapabilities, winlink1000OduAirHssRfpEthChannelBW14MHz=winlink1000OduAirHssRfpEthChannelBW14MHz, incompatibleHsu=incompatibleHsu, winlink1000OduSrvRingEthStatus=winlink1000OduSrvRingEthStatus, swVersionsCompatibleClear=swVersionsCompatibleClear, winlink1000OduAirBadFrames=winlink1000OduAirBadFrames, temperatureThresholdAlarm=temperatureThresholdAlarm, winlink1000OduAirDesiredRate=winlink1000OduAirDesiredRate, winlink1000OduEthernetIf1588v2PTPEventTXRate=winlink1000OduEthernetIf1588v2PTPEventTXRate, winlink1000OduAirMinFrequency=winlink1000OduAirMinFrequency, winlink1000OduAirHssRfpTable=winlink1000OduAirHssRfpTable, qosVersion2StrictMismatch=qosVersion2StrictMismatch, winlink1000OduEthernetGbeSupported=winlink1000OduEthernetGbeSupported, odu2KExternalAntenna=odu2KExternalAntenna, winlink1000OduEthernetIfOperStatus=winlink1000OduEthernetIfOperStatus, externalAlarmInPort4Clear=externalAlarmInPort4Clear, winlink1000OduAdmHostsIp=winlink1000OduAdmHostsIp, winlink1000OduAirHssEWIndicator=winlink1000OduAirHssEWIndicator, winlink1000OduBridgeTpPortOutBytes=winlink1000OduBridgeTpPortOutBytes, winlink1000OduAirHssEthVLANTag=winlink1000OduAirHssEthVLANTag, oduWiFiAP=oduWiFiAP, radwin5000HSUFamily=radwin5000HSUFamily, hssISU=hssISU, btsCpeUpdateServiceFailed=btsCpeUpdateServiceFailed, winlink1000OduAdmBroadcast=winlink1000OduAdmBroadcast, winlink1000OduAdmVlanPriority=winlink1000OduAdmVlanPriority, localRouterDiscoverySucceed=localRouterDiscoverySucceed, winlink1000OduAirMaxTxPowerEntry=winlink1000OduAirMaxTxPowerEntry, winlink1000OduAirChannelBWAvail=winlink1000OduAirChannelBWAvail, winlink1000OduSrvVlanEgressMode=winlink1000OduSrvVlanEgressMode, winlink1000Family=winlink1000Family, winlink1000OduBridge=winlink1000OduBridge, hobupStandbyState=hobupStandbyState, winlink1000OduAirDesiredRateIdx=winlink1000OduAirDesiredRateIdx, winlink1000OduAdmHostsIPv6=winlink1000OduAdmHostsIPv6, winlink1000OduAdmWifiNetwork=winlink1000OduAdmWifiNetwork, gpsSynchronizerFamily=gpsSynchronizerFamily, gateway6K=gateway6K, winlink1000OduAirLockRemote=winlink1000OduAirLockRemote, trackRouterDiscoverySucceed=trackRouterDiscoverySucceed, winlink1000OduSrvQoSDiffservQGroupsSetStr=winlink1000OduSrvQoSDiffservQGroupsSetStr, winlink1000OduEthernetIfEntry=winlink1000OduEthernetIfEntry, hsuUnsupportedBeacon=hsuUnsupportedBeacon, oduHSUExternalAntenna=oduHSUExternalAntenna, winlink1000OduAirChannelsFrequency=winlink1000OduAirChannelsFrequency, winlink1000OduAirHssRfpStr=winlink1000OduAirHssRfpStr, winlink1000OduAdmAES256State=winlink1000OduAdmAES256State, winlink1000OduAdmSnmpAgentVersion=winlink1000OduAdmSnmpAgentVersion, winlink1000OduAirChannelsAvail=winlink1000OduAirChannelsAvail, winlink1000OduBridgeTpPortEntry=winlink1000OduBridgeTpPortEntry, winlink1000OduSrvRingVlanIdTable=winlink1000OduSrvRingVlanIdTable, winlink1000OduAdmWifiSecurityType=winlink1000OduAdmWifiSecurityType, winlink1000OduAirHssTime=winlink1000OduAirHssTime, winlink1000OduAirRatesTable=winlink1000OduAirRatesTable, winlink1000OduAdmShutdownTimer=winlink1000OduAdmShutdownTimer, winlink1000OduAirChannelsDefaultFreq=winlink1000OduAirChannelsDefaultFreq, winlink1000OduEthernetIf1588v2PTPEventRXRate=winlink1000OduEthernetIf1588v2PTPEventRXRate, changeLinkPasswordClear=changeLinkPasswordClear, radwin2000Family=radwin2000Family, winlink1000OduEthernetRemainingRate=winlink1000OduEthernetRemainingRate, winlink1000OduAirChannelsEntry=winlink1000OduAirChannelsEntry, winlink1000OduAirHssSyncStatus=winlink1000OduAirHssSyncStatus, winlink1000OduAirHssLongitude=winlink1000OduAirHssLongitude, ringEthernetSrviceUnblockedTO=ringEthernetSrviceUnblockedTO, winlink1000OduAirHssSyncAcquisitionSeconds=winlink1000OduAirHssSyncAcquisitionSeconds, winlink1000OduSrvQoSVlanQGroupsSetStr=winlink1000OduSrvQoSVlanQGroupsSetStr, lanPort1Clear=lanPort1Clear, winlink1000OduAdmAntennaDescription=winlink1000OduAdmAntennaDescription, mngPortClear=mngPortClear, winlink1000OduAdmSyncESupport=winlink1000OduAdmSyncESupport, winlink1000OduEthernetIfTable=winlink1000OduEthernetIfTable, bsaAlignmentTriggered=bsaAlignmentTriggered, winlink1000OduAirMaxTxPowerIndex=winlink1000OduAirMaxTxPowerIndex, trackRouterDiscoveryStatus=trackRouterDiscoveryStatus, hbsUnsynchronizedHsuAlarm=hbsUnsynchronizedHsuAlarm, syncEPortFailureStateChange=syncEPortFailureStateChange, oduHBS=oduHBS, oduHSUIntegratedAntenna=oduHSUIntegratedAntenna, gpsNotSynchronized=gpsNotSynchronized, winlink1000OduAirChannelsAdminState=winlink1000OduAirChannelsAdminState, winlink1000OduBridgeTpPortInBytes=winlink1000OduBridgeTpPortInBytes, winlink1000OduAirCurrentRateIdx=winlink1000OduAirCurrentRateIdx, winlink1000OduAirMaxTxPowerTable=winlink1000OduAirMaxTxPowerTable, winlink1000OduAdmHostsPassword=winlink1000OduAdmHostsPassword, winlink1000OduBridgeTp=winlink1000OduBridgeTp, winlink1000OduEthernet=winlink1000OduEthernet, winlink1000OduAirHssRfpTdmChannelBW5MHz=winlink1000OduAirHssRfpTdmChannelBW5MHz, winlink1000OduSrvQoSConfEntry=winlink1000OduSrvQoSConfEntry, swVersionsMismatchRestrictedCompatibilityAlarm=swVersionsMismatchRestrictedCompatibilityAlarm, winlink1000OduAirCurrentTxPower=winlink1000OduAirCurrentTxPower, odu2KIntegratedAntenna=odu2KIntegratedAntenna, winlink1000OduBuzzerAdminState=winlink1000OduBuzzerAdminState, winlink1000OduAirHssDesiredOpState=winlink1000OduAirHssDesiredOpState, winlink1000OduAdmAES256Status=winlink1000OduAdmAES256Status, winlink1000OduAirCurrentRateGI=winlink1000OduAirCurrentRateGI, winlink1000OduAdmWiFiPowerMode=winlink1000OduAdmWiFiPowerMode, lanPortDisconnectedAlarm=lanPortDisconnectedAlarm, swVersionsMatchSoftwareUpgradeRequiredClear=swVersionsMatchSoftwareUpgradeRequiredClear, winlink1000OduAdmConnectionType=winlink1000OduAdmConnectionType, oduHBSExternalAntenna=oduHBSExternalAntenna, mobilityLinkOff=mobilityLinkOff, winlink1000OduAdmLinkMode=winlink1000OduAdmLinkMode, winlink1000OduAdmHostsPort=winlink1000OduAdmHostsPort, hssSyncPulseDetectedAlarm=hssSyncPulseDetectedAlarm, winlink1000Odu=winlink1000Odu, winlink1000OduEthernetIfFailAction=winlink1000OduEthernetIfFailAction, winlink1000OduAirHssHSMIPv6Address=winlink1000OduAirHssHSMIPv6Address, winlink1000OduAirHssMasterSlaveCompatibility=winlink1000OduAirHssMasterSlaveCompatibility, btsCpeUpdateServiceSucceed=btsCpeUpdateServiceSucceed, winlink1000OduAdmRadioRev=winlink1000OduAdmRadioRev, winlink1000OduAdmin=winlink1000OduAdmin, winlink1000OduAirHssRfpPhase=winlink1000OduAirHssRfpPhase, winlink1000OduAirPerf=winlink1000OduAirPerf, winlink1000OduAirHssRfpEthChannelBW20MHz=winlink1000OduAirHssRfpEthChannelBW20MHz, winlink1000OduAdmSN=winlink1000OduAdmSN, odu6000=odu6000, linkLockAuthorizedODU=linkLockAuthorizedODU, winlink1000OduEthernetIfIndex=winlink1000OduEthernetIfIndex, gpsOverCurrentAlarm=gpsOverCurrentAlarm, winlink1000OduSrvConfDiffservQGroups=winlink1000OduSrvConfDiffservQGroups, winlink1000OduAirHssDiscover=winlink1000OduAirHssDiscover, externalAlarmInPort1Clear=externalAlarmInPort1Clear, winlink1000OduEthernetSfpProperties=winlink1000OduEthernetSfpProperties, winlink1000OduAirHssAssociatedCUTableEntry=winlink1000OduAirHssAssociatedCUTableEntry, ringRplStateIdle=ringRplStateIdle, winlink1000OduBridgeTpPortTable=winlink1000OduBridgeTpPortTable, oduGSU=oduGSU, oduHSU=oduHSU, hotStandbyClear=hotStandbyClear, gpsCommunicationFailiureAlarm=gpsCommunicationFailiureAlarm, winlink1000OduAdmIPv6Address=winlink1000OduAdmIPv6Address, ringRplStateActiveAlarm=ringRplStateActiveAlarm, ethServiceOpened=ethServiceOpened, winlink1000OduAirRatesIndex=winlink1000OduAirRatesIndex, winlink1000OduAirHssSupportedSynchronizationProtocol=winlink1000OduAirHssSupportedSynchronizationProtocol, winlink1000OduAdmWifiRestart=winlink1000OduAdmWifiRestart, winlink1000OduAdmWifiChannel=winlink1000OduAdmWifiChannel, winlink1000OduAirChannelsOperState=winlink1000OduAirChannelsOperState, radwin6000Family=radwin6000Family, radwinWiFiAPFamily=radwinWiFiAPFamily, winlink1000OduAdmGateway=winlink1000OduAdmGateway, winlink1000OduAirAutoChannelSelectionState=winlink1000OduAirAutoChannelSelectionState, winlink1000OduAirHssNumberOfAssociatedCU=winlink1000OduAirHssNumberOfAssociatedCU, odu2000=odu2000, winlink1000OduBridgeTpPortIndex=winlink1000OduBridgeTpPortIndex, winlink1000OduAirHssNSIndicator=winlink1000OduAirHssNSIndicator, winlink1000OduAirNumberOfChannels=winlink1000OduAirNumberOfChannels, compatibleIdus=compatibleIdus, hbsEncryptionAlarm=hbsEncryptionAlarm, bsaAlignmentFinished=bsaAlignmentFinished, externalAlarmInPort1Alarm=externalAlarmInPort1Alarm, winlink1000OduAirChannelBWHSSATDDConflictPerCBW=winlink1000OduAirChannelBWHSSATDDConflictPerCBW, changeRatio=changeRatio, tdmServiceClear=tdmServiceClear, winlink1000OduAirHssRfpTdmChannelBW10MHz=winlink1000OduAirHssRfpTdmChannelBW10MHz, winlink1000OduEthernetIfAdminStatus=winlink1000OduEthernetIfAdminStatus, winlink1000OduAirHssRfpEthChannelBW5MHz=winlink1000OduAirHssRfpEthChannelBW5MHz, switchCbwAndChannel=switchCbwAndChannel, winlink1000OduAdmHostsTable=winlink1000OduAdmHostsTable, winlink1000OduAirHssRfpEntry=winlink1000OduAirHssRfpEntry, winlink1000OduAirMaxFrequency=winlink1000OduAirMaxFrequency, swVersionsIncompatible=swVersionsIncompatible, winlink1000OduAirChannelBWEntry=winlink1000OduAirChannelBWEntry, oduExternalAntenna=oduExternalAntenna, winlink1000OduAirLinkDistance=winlink1000OduAirLinkDistance, winlink1000OduAdmSwRev=winlink1000OduAdmSwRev, winlink1000OduAdmRmtPermittedOduType=winlink1000OduAdmRmtPermittedOduType, hbsEhServiceClosedToHsu=hbsEhServiceClosedToHsu, radwinProducts=radwinProducts, winlink1000OduAdmAES256Support=winlink1000OduAdmAES256Support, hobupActiveStateFaultyClear=hobupActiveStateFaultyClear, mngPortDisconnectedAlarm=mngPortDisconnectedAlarm, winlink1000OduAirHssHSMIPAddress=winlink1000OduAirHssHSMIPAddress, winlink1000OduAirCurrentRate=winlink1000OduAirCurrentRate, winlink1000OduAirChainsRxPower=winlink1000OduAirChainsRxPower, winlink1000OduAirHss=winlink1000OduAirHss, winlink1000OduAirTotalFrames=winlink1000OduAirTotalFrames, winlink1000OduAirTxPower36=winlink1000OduAirTxPower36, temperatureThresholdClear=temperatureThresholdClear, hssSyncUnits=hssSyncUnits, winlink1000OduBridgeBasePortEntry=winlink1000OduBridgeBasePortEntry, tdmBackupClear=tdmBackupClear, winlink1000OduSrvRingLinkMode=winlink1000OduSrvRingLinkMode, enterLocalConnection=enterLocalConnection, winlink1000OduAirHssRfpEthChannelBW7MHz=winlink1000OduAirHssRfpEthChannelBW7MHz, winlink1000OduAdmHostsIndex=winlink1000OduAdmHostsIndex, winlink1000OduAirHssAltitude=winlink1000OduAirHssAltitude, ringFirstRpmReceived=ringFirstRpmReceived, winlink1000OduAdmHostsUserName=winlink1000OduAdmHostsUserName, hssSyncToProperSourceAchievedClear=hssSyncToProperSourceAchievedClear, winlink1000OduAirMinTxPower=winlink1000OduAirMinTxPower, winlink1000OduAirHssDelayToHSM=winlink1000OduAirHssDelayToHSM, winlink1000OduAdm1588TCSupport=winlink1000OduAdm1588TCSupport, winlink1000OduAirHssRfpTdmChannelBW40MHz=winlink1000OduAirHssRfpTdmChannelBW40MHz, winlink1000OduAdmWifi=winlink1000OduAdmWifi, winlink1000OduSrvVlanDisable=winlink1000OduSrvVlanDisable, externalAlarmInPort3Clear=externalAlarmInPort3Clear, winlink1000OduSrvQoSMaxRTQuePercent=winlink1000OduSrvQoSMaxRTQuePercent, winlink1000OduAirFreqResolution=winlink1000OduAirFreqResolution, winlink1000OduAdmProductRev=winlink1000OduAdmProductRev, winlink1000OduAirHssDesiredSynchronizationProtocol=winlink1000OduAirHssDesiredSynchronizationProtocol, winlink1000OduSrvRingVlanIdEntry=winlink1000OduSrvRingVlanIdEntry, cbwMatch=cbwMatch, winlink1000OduAirHssSyncStatusEth=winlink1000OduAirHssSyncStatusEth, winlink1000OduBridgeTpPortInFrames=winlink1000OduBridgeTpPortInFrames, hssMultipleSourcesDetectedAlarm=hssMultipleSourcesDetectedAlarm, winlink1000OduServiceVlanProviderListTPIDstr=winlink1000OduServiceVlanProviderListTPIDstr, winlink1000OduAdmActivationKey=winlink1000OduAdmActivationKey, winlink1000OduAirHssAssociatedCUTable=winlink1000OduAirHssAssociatedCUTable, winlink1000OduTrapCommunity=winlink1000OduTrapCommunity, winlink1000OduReadWriteCommunity=winlink1000OduReadWriteCommunity, winlink1000OduAirHssNumSatellites=winlink1000OduAirHssNumSatellites, swVersionsMismatchSoftwareUpgradeRequired=swVersionsMismatchSoftwareUpgradeRequired, winlink1000OduAirHssLatitude=winlink1000OduAirHssLatitude, winlink1000OduAdmIPv6DefaultGateWay=winlink1000OduAdmIPv6DefaultGateWay, hssMultipleSourcesDisappearedClear=hssMultipleSourcesDisappearedClear, noRadiusServerRespond=noRadiusServerRespond, winlink1000OduAirCurrentRateCBW=winlink1000OduAirCurrentRateCBW, winlink1000OduAirHssHsmID=winlink1000OduAirHssHsmID, oduGSUExternalAntenna=oduGSUExternalAntenna, winlink1000OduBridgeBasePortTable=winlink1000OduBridgeBasePortTable, hobupFaultyStateAlarm=hobupFaultyStateAlarm, poePortClear=poePortClear, winlink1000OduAirChannelBWMaxRatioForSupporting=winlink1000OduAirChannelBWMaxRatioForSupporting, lanPort1DisconnectedAlarm=lanPort1DisconnectedAlarm, winlink1000OduAirRatesEntry=winlink1000OduAirRatesEntry, incompatibleHbsHsu=incompatibleHbsHsu, winlink1000OduAirHssRfpTdmChannelBW20MHz=winlink1000OduAirHssRfpTdmChannelBW20MHz, winlink1000OduAirResync=winlink1000OduAirResync, winlink1000OduAdmSnmpAgentMinorVersion=winlink1000OduAdmSnmpAgentMinorVersion, winlink1000OduAirMaxTxPower=winlink1000OduAirMaxTxPower, sfpInsertion=sfpInsertion, winlink1000OduBridgeTpMode=winlink1000OduBridgeTpMode, winlink1000OduAirEnableTxPower=winlink1000OduAirEnableTxPower, winlink1000OduAirHssDiscoverIndex=winlink1000OduAirHssDiscoverIndex, hbsEhServiceOpenedToHsu=hbsEhServiceOpenedToHsu, externalAlarmInPort2Clear=externalAlarmInPort2Clear, winlink1000OduAirSSID=winlink1000OduAirSSID, winlink1000OduService=winlink1000OduService)
mibBuilder.exportSymbols("RADWIN-MIB-WINLINK1000", winlink1000OduAdmIpParamsCnfg=winlink1000OduAdmIpParamsCnfg, winlink1000OduAirHssDesiredExtPulseType=winlink1000OduAirHssDesiredExtPulseType, winlink1000OduAdmIPv6Prefix=winlink1000OduAdmIPv6Prefix, winlink1000OduAirRxPower=winlink1000OduAirRxPower, radwin5000HBSFamily=radwin5000HBSFamily, winlink1000OduAdmHostsEntry=winlink1000OduAdmHostsEntry, winlink1000OduServiceQoS=winlink1000OduServiceQoS, linkLockUnauthorizedRemoteODU=linkLockUnauthorizedRemoteODU, winlink1000OduAirHssExtPulseStatus=winlink1000OduAirHssExtPulseStatus, winlink1000OduAirAntennaGain=winlink1000OduAirAntennaGain, winlink1000OduAdmWifiPassword=winlink1000OduAdmWifiPassword, winlink1000OduSrvRingVlanIdIndex=winlink1000OduSrvRingVlanIdIndex, winlink1000OduAdmMask=winlink1000OduAdmMask, winlink1000OduAdmWifiTxPower=winlink1000OduAdmWifiTxPower, winlink1000OduSrvVlanSupport=winlink1000OduSrvVlanSupport, bsaAlignmentStarted=bsaAlignmentStarted, winlink1000OduAirHssAssociatedCUDescription=winlink1000OduAirHssAssociatedCUDescription, localRouterDiscoveryStatus=localRouterDiscoveryStatus, winlink1000OduAdmWifiStationMAC=winlink1000OduAdmWifiStationMAC, winlink1000OduAirHssRfpEthChannelBW40MHz=winlink1000OduAirHssRfpEthChannelBW40MHz, winlink1000OduAirHssDiscoverTable=winlink1000OduAirHssDiscoverTable, qosVersion2TtlMismatch=qosVersion2TtlMismatch, winlink1000OduAdmDefaultPassword=winlink1000OduAdmDefaultPassword, tcNotSupportedByHSU=tcNotSupportedByHSU, winlink1000OduAirHssInterSiteSynchronizationAvailability=winlink1000OduAirHssInterSiteSynchronizationAvailability, winlink1000OduBridgeConfigMode=winlink1000OduBridgeConfigMode, winlink1000OduBridgeTpPortOutFrames=winlink1000OduBridgeTpPortOutFrames, ringEthServiceStatus=ringEthServiceStatus, oduIntegratedAntenna=oduIntegratedAntenna, winlink1000OduAdmVlanID=winlink1000OduAdmVlanID, winlink1000OduReadCommunity=winlink1000OduReadCommunity, sfpPort1DisconnectedAlarm=sfpPort1DisconnectedAlarm, winlink1000OduSrvRingTopologySupported=winlink1000OduSrvRingTopologySupported, bitFailedAlarm=bitFailedAlarm, swVersionsMatchRestrictedCompatibilityClear=swVersionsMatchRestrictedCompatibilityClear, winlink1000OduAirHssRfpEthChannelBW10MHz=winlink1000OduAirHssRfpEthChannelBW10MHz, winlink1000OduAirDfsState=winlink1000OduAirDfsState, lastUserSnmpAccessOverHourAgo=lastUserSnmpAccessOverHourAgo, syncEPortHOStateChange=syncEPortHOStateChange, winlink1000OduSrvConfQueMir=winlink1000OduSrvConfQueMir, winlink1000OduAirChannelBWTable=winlink1000OduAirChannelBWTable, winlink1000OduSrvVlanIngressAllowedVIDs=winlink1000OduSrvVlanIngressAllowedVIDs, sfpPort1Clear=sfpPort1Clear, winlink1000OduAirChannelBWIndex=winlink1000OduAirChannelBWIndex, winlink1000OduAirHssRfpIndex=winlink1000OduAirHssRfpIndex, winlink1000OduSrvMode=winlink1000OduSrvMode, hbsEncryptionClear=hbsEncryptionClear, poePowerConsumptionClear=poePowerConsumptionClear, externalAlarmInPort2Alarm=externalAlarmInPort2Alarm, hssSyncPulseDisappearedClear=hssSyncPulseDisappearedClear, winlink1000=winlink1000, winlink1000OduAirMajorLinkIfVersion=winlink1000OduAirMajorLinkIfVersion, winlink1000OduEthernetIfAddress=winlink1000OduEthernetIfAddress, winlink1000OduAirHssCurrentOpState=winlink1000OduAirHssCurrentOpState, encryptionClear=encryptionClear, winlink1000OduAdmPowerConsumption=winlink1000OduAdmPowerConsumption, winlink1000OduAdmCpuID=winlink1000OduAdmCpuID, winlink1000OduAirChannelBandwidth=winlink1000OduAirChannelBandwidth, swVersionsMismatchFullCompatibilityAlarm=swVersionsMismatchFullCompatibilityAlarm, winlink1000OduAdmRemoteSiteName=winlink1000OduAdmRemoteSiteName, btsTargetUnreachable=btsTargetUnreachable, winlink1000OduAirHssDomainID=winlink1000OduAirHssDomainID, externalAlarmInPort4Alarm=externalAlarmInPort4Alarm, winlink1000OduAirHssSatellitesSatSyncRequired=winlink1000OduAirHssSatellitesSatSyncRequired, winlink1000OduSrvQoSConfTable=winlink1000OduSrvQoSConfTable, lanPortClear=lanPortClear, hssSyncToProperSourceStoppedAlarm=hssSyncToProperSourceStoppedAlarm, winlink1000OduSrvEgressProviderTag=winlink1000OduSrvEgressProviderTag, radwin=radwin, winlink1000OduAir=winlink1000OduAir, btsTargetIsReachable=btsTargetIsReachable, winlink1000OduServiceVlan=winlink1000OduServiceVlan, winlink1000OduSrvQoSMode=winlink1000OduSrvQoSMode, swVersionsMatchFullCompatibilityClear=swVersionsMatchFullCompatibilityClear, radiusServerRespondedSuccessfully=radiusServerRespondedSuccessfully, winlink1000OduAirHssInterSiteSynchronizationMode=winlink1000OduAirHssInterSiteSynchronizationMode, winlink1000OduAdmIPv6ParamsCnfg=winlink1000OduAdmIPv6ParamsCnfg, winlink1000OduAdmResetCmd=winlink1000OduAdmResetCmd, winlink1000OduAirHssNumberOfDiscoveredODUs=winlink1000OduAirHssNumberOfDiscoveredODUs, cbwMismatch=cbwMismatch, switchCBW=switchCBW, desiredRatioCanNotBeAppliedClear=desiredRatioCanNotBeAppliedClear, winlink1000OduAirHssDiscoverEntry=winlink1000OduAirHssDiscoverEntry, winlink1000OduAdmActualConnectMode=winlink1000OduAdmActualConnectMode, winlink1000OduSrvRingWTR=winlink1000OduSrvRingWTR, winlink1000OduAdmBsaOperationMode=winlink1000OduAdmBsaOperationMode, sfpExtraction=sfpExtraction, poePowerConsumptionAlarm=poePowerConsumptionAlarm, winlink1000OduAdmPMPSUSupport=winlink1000OduAdmPMPSUSupport, winlink1000OduAirMstrSlv=winlink1000OduAirMstrSlv, winlink1000OduAdmWifiRssi=winlink1000OduAdmWifiRssi, wrongConfigurationLoadedAlarm=wrongConfigurationLoadedAlarm, lanPort2DisconnectedAlarm=lanPort2DisconnectedAlarm, winlink1000OduAdmProductType=winlink1000OduAdmProductType, gpsOverCurrentClear=gpsOverCurrentClear, winlink1000OduAdmOvrdCmd=winlink1000OduAdmOvrdCmd, winlink1000OduProductId=winlink1000OduProductId, gpsSynchronized=gpsSynchronized, winlink1000OduAirMinorLinkIfVersion=winlink1000OduAirMinorLinkIfVersion, hbsInactiveHbsAlarm=hbsInactiveHbsAlarm, odu600=odu600, winlink1000OduAirSesState=winlink1000OduAirSesState, winlink1000OduBridgeBaseIfIndex=winlink1000OduBridgeBaseIfIndex, winlink1000OduAdmHostsSecurityModel=winlink1000OduAdmHostsSecurityModel, winlink1000OduAirHssAssociatedCUIndex=winlink1000OduAirHssAssociatedCUIndex, gateway6000=gateway6000, winlink1000OduAdmGPSState=winlink1000OduAdmGPSState, winlink1000OduAdmMngConnection=winlink1000OduAdmMngConnection, linkAuthenticationDisabled=linkAuthenticationDisabled, hbsActiveHbs=hbsActiveHbs, winlink1000OduAirHssDiscoverODUDescription=winlink1000OduAirHssDiscoverODUDescription, winlink1000OduSrvRingVlanId=winlink1000OduSrvRingVlanId, hssGSU=hssGSU, winlink1000OduBridgeBasePortIndex=winlink1000OduBridgeBasePortIndex, pdTooHighDueCbwLimitations=pdTooHighDueCbwLimitations, linkLockUnauthorizedODU=linkLockUnauthorizedODU, winlink1000OduSrvConfVlanQGroups=winlink1000OduSrvConfVlanQGroups, winlink1000OduAirHssExtPulseType=winlink1000OduAirHssExtPulseType, hbsSynchronizedHsuAlarm=hbsSynchronizedHsuAlarm, winlink1000OduAdmLinkName=winlink1000OduAdmLinkName, winlink1000OduSrvVlanIngressMode=winlink1000OduSrvVlanIngressMode, winlink1000OduAirChannelBWMinRatioForSupporting=winlink1000OduAirChannelBWMinRatioForSupporting, winlink1000OduAirHssRfpEthChannelBW80MHz=winlink1000OduAirHssRfpEthChannelBW80MHz, winlink1000OduAdmBackToFactorySettingsCmd=winlink1000OduAdmBackToFactorySettingsCmd, hotStandbyAlarm=hotStandbyAlarm, winlink1000OduAdmAddres=winlink1000OduAdmAddres, winlink1000OduAirRFD=winlink1000OduAirRFD, winlink1000OduAdmWifiSSID=winlink1000OduAdmWifiSSID, winlink1000OduBridgeBase=winlink1000OduBridgeBase, winlink1000OduAdmTemperatureC=winlink1000OduAdmTemperatureC, winlink1000OduAdmWifiApStatus=winlink1000OduAdmWifiApStatus, winlink1000OduAirChannelsTable=winlink1000OduAirChannelsTable, tdmBackupAlarm=tdmBackupAlarm, desiredRatioCanNotBeAppliedAlarm=desiredRatioCanNotBeAppliedAlarm, odu6K=odu6K, winlink1000OduAirTxPower48=winlink1000OduAirTxPower48, winlink1000OduSrvRingMaxAllowedTimeFromLastRpm=winlink1000OduSrvRingMaxAllowedTimeFromLastRpm, winlink1000OduAdmProductName=winlink1000OduAdmProductName, winlink1000OduAdmManagerDownloadURL=winlink1000OduAdmManagerDownloadURL, winlink1000OduServiceRingTopology=winlink1000OduServiceRingTopology, winlink1000OduEthernetNumOfPorts=winlink1000OduEthernetNumOfPorts, winlink1000OduSrvEgressTag=winlink1000OduSrvEgressTag, poePortDisconnectedAlarm=poePortDisconnectedAlarm, winlink1000OduAirRatesAvail=winlink1000OduAirRatesAvail, winlink1000OduAirFreq=winlink1000OduAirFreq, winlink1000OduAdmLinkPassword=winlink1000OduAdmLinkPassword, lanPort2Clear=lanPort2Clear, winlink1000OduAdmSiteLinkPassword=winlink1000OduAdmSiteLinkPassword)
