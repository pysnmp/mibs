#
# PySNMP MIB module VMWARE-ENV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/vmware/VMWARE-ENV-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 12:09:07 2024
# On host fv-az768-763 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, MibIdentifier, Bits, TimeTicks, ObjectIdentity, Integer32, Counter32, ModuleIdentity, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "MibIdentifier", "Bits", "TimeTicks", "ObjectIdentity", "Integer32", "Counter32", "ModuleIdentity", "Unsigned32", "NotificationType")
DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention")
vmwESX, = mibBuilder.importSymbols("VMWARE-PRODUCTS-MIB", "vmwESX")
vmwNotifications, vmwProductSpecific = mibBuilder.importSymbols("VMWARE-ROOT-MIB", "vmwNotifications", "vmwProductSpecific")
VmwSubsystemStatus, VmwCimName, VmwCIMAlertTypes, VmwCIMSeverity, VmwCIMAlertFormat, VmwSubsystemTypes, VmwLongSnmpAdminString = mibBuilder.importSymbols("VMWARE-TC-MIB", "VmwSubsystemStatus", "VmwCimName", "VmwCIMAlertTypes", "VmwCIMSeverity", "VmwCIMAlertFormat", "VmwSubsystemTypes", "VmwLongSnmpAdminString")
vmwEnvironmentalMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10))
vmwEnvironmentalMIB.setRevisions(('2017-06-05 00:00', '2010-05-12 00:00', '2008-10-30 00:00', '2007-12-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: vmwEnvironmentalMIB.setRevisionsDescriptions(('This revision deprecates the previous CIM based implementation. The vmwEnvTable now maps\n     directly to an IPMI System Event Log allowing for simpler identification and management.\n     vmwEnvSource.0 will now report ipmi(4) on agents implementing this mib module version.\n     The first implementation of vmwEnvTable adds vmwEnvHrDeviceIndex and\n     changes vmwEnvHardwareTime syntax from TimeTicks to DateAndTime', 'This revision adds support for CIM OMC_IpmiAlertIndication as the source of events\n     instead of only IPMI sensors thus more areas of hardware can be reported on.\n     This required a new notification set to be defined replacing previous\n     notifications.', 'Introduce vmwESXNotification to match ESX 3.5 agent.', 'This is the first revision of this MIB module.',))
if mibBuilder.loadTexts: vmwEnvironmentalMIB.setLastUpdated('201706050000Z')
if mibBuilder.loadTexts: vmwEnvironmentalMIB.setOrganization('VMware, Inc')
if mibBuilder.loadTexts: vmwEnvironmentalMIB.setContactInfo('VMware, Inc\n    3401 Hillview Ave\n    Palo Alto, CA 94304\n    Tel: 1-877-486-9273 or 650-427-5000\n    Fax: 650-427-5001\n    Web: http://kb.vmware.com/kb/1013445\n    ')
if mibBuilder.loadTexts: vmwEnvironmentalMIB.setDescription('This MIB module identifies hardware components of a machine as provided by IPMI.\n      The descriptions in this document will be marked with [1] to refer the IPMI specification here:\n      https://www.intel.com/content/dam/www/public/us/en/documents/product-briefs/ipmi-second-gen-interface-spec-v2-rev1-1.pdf\n      which provides a definition for IPMI System Event Log (SEL).\n     ')
vmwEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 4, 20))
vmwESXNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0))
if mibBuilder.loadTexts: vmwESXNotifications.setStatus('current')
if mibBuilder.loadTexts: vmwESXNotifications.setDescription('Parent of all ESX specific notifications (traps, informs).')
vmwEnvNumber = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvNumber.setStatus('current')
if mibBuilder.loadTexts: vmwEnvNumber.setDescription('Count of number of conceptual rows in vmwEnvTable.')
vmwEnvLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvLastChange.setStatus('current')
if mibBuilder.loadTexts: vmwEnvLastChange.setDescription('The value of sysUptime when a conceptual row was added\n         or deleted from this table.')
vmwSELCapacity = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwSELCapacity.setStatus('current')
if mibBuilder.loadTexts: vmwSELCapacity.setDescription('The amount of free space left in the IPMI SEL for new entries.')
vmwEnvTable = MibTable((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3), )
if mibBuilder.loadTexts: vmwEnvTable.setStatus('current')
if mibBuilder.loadTexts: vmwEnvTable.setDescription('This table is populated from monitoring IPMI BMC device.\n         One conceptual row is maintained for each reporting component.\n         This table may be cleared by operational request to BMC and\n         normally is configured to stop adding new entries when full.')
vmwEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3, 1), ).setIndexNames((0, "VMWARE-ENV-MIB", "vmwEnvIndex"))
if mibBuilder.loadTexts: vmwEnvEntry.setStatus('current')
if mibBuilder.loadTexts: vmwEnvEntry.setDescription('One entry for each physical component reporting its\n         status to ESX Operating System.')
vmwEnvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: vmwEnvIndex.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIndex.setDescription("This is the identifier as reported by the vendor hardware's BMC\n        as per Table 32 section 32.1 SEL Event Records [1].\n         On ESXi: the command: localcli hardware ipmi sel list\n         can provide the listing of IPMI SEL entries as well.")
vmwSubsystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3, 1, 2), VmwSubsystemTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwSubsystemType.setStatus('current')
if mibBuilder.loadTexts: vmwSubsystemType.setDescription('Hardware component reporting environmental state')
vmwHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3, 1, 3), VmwSubsystemStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwHardwareStatus.setStatus('current')
if mibBuilder.loadTexts: vmwHardwareStatus.setDescription('Last reported state of this component')
vmwEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEventDescription.setStatus('current')
if mibBuilder.loadTexts: vmwEventDescription.setDescription('Human readable description of this event')
vmwEnvHardwareTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvHardwareTime.setStatus('current')
if mibBuilder.loadTexts: vmwEnvHardwareTime.setDescription("Timestamp as reported from BMC for the SEL entry.\n         See CLI: 'localcli hardware ipmi sel list' for same report.\n         Note that BMC maintains it own clock and may not be the same\n         as the time ESX itself reports. On ESX: the CLI command:\n            localcli hardware ipmi sel get\n         reports the BMC clock.")
vmwEnvHrDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvHrDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: vmwEnvHrDeviceIndex.setDescription('The Index into hrDeviceTable for the hardware related to this event.\n         Report 0 if this entry does not have a related entry in hrDeviceTable.')
vmwEnvSelSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 4, 20, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvSelSensorNumber.setStatus('current')
if mibBuilder.loadTexts: vmwEnvSelSensorNumber.setDescription('This is the BMC reported Sensor Number byte 12 from SEL Event record\n         as per Table 32 section 32.1 SEL Event Records [1].\n         IPMI Sensors are reported in hrDeviceTable and vmwEnvTable provides\n         the mapping to the specific entry there. Also from CLI on ESX the command:\n            localcli hardware ipmi sdr list\n         can provide the listing of IPMI Sensors that has entered this SEL record.\n         ')
vmwEnvSource = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("sensors", 2), ("indications", 3), ("ipmi", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvSource.setStatus('current')
if mibBuilder.loadTexts: vmwEnvSource.setDescription('Specifies which source being used to obtain hardware state. Sensors were\n        from host agent process, indications were from CIMOM/cim provider, and ipmi is\n        when snmpd reads SEL directly from IPMI to obtain hardware events ')
vmwEnvIPMI = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 4, 25))
vmwEnvIpmiSelFull = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 390)).setObjects(("VMWARE-ENV-MIB", "vmwSELCapacity"))
if mibBuilder.loadTexts: vmwEnvIpmiSelFull.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIpmiSelFull.setDescription('An IPMI System Event Log has fixed amount of entries (65535). This event is sent once when\n         the managed object vmwSELCapacity reaches 100% capacity at which point new entries\n         to the SEL will be dropped if overflow is not enabled (default) on most hardware systems.\n         This event will rearm any time vmwSELCapacity.0 drops below 80%.')
if mibBuilder.loadTexts: vmwEnvIpmiSelFull.setReference('[1] section 31 System Event Log (SEL) Commands')
vmwEnvIpmiSelMemoryRaised = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 400)).setObjects(("VMWARE-ENV-MIB", "vmwEnvSelSensorNumber"), ("VMWARE-ENV-MIB", "vmwEnvHardwareTime"), ("VMWARE-ENV-MIB", "vmwEventDescription"))
if mibBuilder.loadTexts: vmwEnvIpmiSelMemoryRaised.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIpmiSelMemoryRaised.setDescription('A memory related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state asserted.\n         The vmwEnvTable will have an entry at vmwEnvIndex with additional details')
if mibBuilder.loadTexts: vmwEnvIpmiSelMemoryRaised.setReference('[1] section 32 byte 11')
vmwEnvIpmiSelMemoryCleared = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 401)).setObjects(("VMWARE-ENV-MIB", "vmwEnvSelSensorNumber"), ("VMWARE-ENV-MIB", "vmwEnvHardwareTime"), ("VMWARE-ENV-MIB", "vmwEventDescription"))
if mibBuilder.loadTexts: vmwEnvIpmiSelMemoryCleared.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIpmiSelMemoryCleared.setDescription('A memory related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state deasserted\n         The vmwEnvTable will have an entry at vmwEnvIndex with additional details')
if mibBuilder.loadTexts: vmwEnvIpmiSelMemoryCleared.setReference('[1] section 32 byte 11')
vmwEnvIpmiSelPowerSupplyRaised = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 410)).setObjects(("VMWARE-ENV-MIB", "vmwEnvSelSensorNumber"), ("VMWARE-ENV-MIB", "vmwEnvHardwareTime"), ("VMWARE-ENV-MIB", "vmwEventDescription"))
if mibBuilder.loadTexts: vmwEnvIpmiSelPowerSupplyRaised.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIpmiSelPowerSupplyRaised.setDescription('A power supply related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state asserted.\n         The vmwEnvTable will have an entry at vmwEnvIndex with additional details')
if mibBuilder.loadTexts: vmwEnvIpmiSelPowerSupplyRaised.setReference('[1] section 32 byte 11')
vmwEnvIpmiSelPowerSupplyCleared = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 411)).setObjects(("VMWARE-ENV-MIB", "vmwEnvSelSensorNumber"), ("VMWARE-ENV-MIB", "vmwEnvHardwareTime"), ("VMWARE-ENV-MIB", "vmwEventDescription"))
if mibBuilder.loadTexts: vmwEnvIpmiSelPowerSupplyCleared.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIpmiSelPowerSupplyCleared.setDescription('A power supply related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state deasserted\n         The vmwEnvTable will have an entry at vmwEnvIndex with additional details')
if mibBuilder.loadTexts: vmwEnvIpmiSelPowerSupplyCleared.setReference('[1] section 32 byte 11')
vmwEnvIpmiSelFanRaised = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 420)).setObjects(("VMWARE-ENV-MIB", "vmwEnvSelSensorNumber"), ("VMWARE-ENV-MIB", "vmwEnvHardwareTime"), ("VMWARE-ENV-MIB", "vmwEventDescription"))
if mibBuilder.loadTexts: vmwEnvIpmiSelFanRaised.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIpmiSelFanRaised.setDescription('A fan related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state asserted.\n         The vmwEnvTable will have an entry at vmwEnvIndex with additional details')
if mibBuilder.loadTexts: vmwEnvIpmiSelFanRaised.setReference('[1] section 32 byte 11')
vmwEnvIpmiSelFanCleared = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 421)).setObjects(("VMWARE-ENV-MIB", "vmwEnvSelSensorNumber"), ("VMWARE-ENV-MIB", "vmwEnvHardwareTime"), ("VMWARE-ENV-MIB", "vmwEventDescription"))
if mibBuilder.loadTexts: vmwEnvIpmiSelFanCleared.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIpmiSelFanCleared.setDescription('A fan related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state deasserted\n         The vmwEnvTable will have an entry at vmwEnvIndex with additional details')
if mibBuilder.loadTexts: vmwEnvIpmiSelFanCleared.setReference('[1] am/.../ipmi-second-gen-interface-spec-v2-rev1-1.pdf section 32 byte 11')
vmwEnvIpmiSelCpuRaised = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 430)).setObjects(("VMWARE-ENV-MIB", "vmwEnvSelSensorNumber"), ("VMWARE-ENV-MIB", "vmwEnvHardwareTime"), ("VMWARE-ENV-MIB", "vmwEventDescription"))
if mibBuilder.loadTexts: vmwEnvIpmiSelCpuRaised.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIpmiSelCpuRaised.setDescription('A CPU related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state asserted.\n         The vmwEnvTable will have an entry at vmwEnvIndex with additional details')
if mibBuilder.loadTexts: vmwEnvIpmiSelCpuRaised.setReference('[1] section 32 byte 13')
vmwEnvIpmiSelCpuCleared = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 431)).setObjects(("VMWARE-ENV-MIB", "vmwEnvSelSensorNumber"), ("VMWARE-ENV-MIB", "vmwEnvHardwareTime"), ("VMWARE-ENV-MIB", "vmwEventDescription"))
if mibBuilder.loadTexts: vmwEnvIpmiSelCpuCleared.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIpmiSelCpuCleared.setDescription('A CPU related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state deasserted\n         The vmwEnvTable will have an entry at vmwEnvIndex with additional details')
if mibBuilder.loadTexts: vmwEnvIpmiSelCpuCleared.setReference('[1] section 32 byte 13')
vmwEnvInIndications = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvInIndications.setStatus('current')
if mibBuilder.loadTexts: vmwEnvInIndications.setDescription('Number of HTTP POST msgs containing CIM Indications in XML as received by agent.')
vmwEnvLastIn = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 102), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvLastIn.setStatus('current')
if mibBuilder.loadTexts: vmwEnvLastIn.setDescription('sysUptime when agent last received an indication.')
vmwEnvOutNotifications = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvOutNotifications.setStatus('current')
if mibBuilder.loadTexts: vmwEnvOutNotifications.setDescription('Number of notifications (traps|informs) sent that originated as CIM indication.')
vmwEnvInErrs = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvInErrs.setStatus('current')
if mibBuilder.loadTexts: vmwEnvInErrs.setDescription('Number of CIM Indications that agent did not complete receipt of.')
vmwEnvIndOidErrs = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvIndOidErrs.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIndOidErrs.setDescription('Number of CIM Indications having a MappingString qualifier for which the value was not a valid oid.')
vmwEnvCvtValueErrs = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvCvtValueErrs.setStatus('current')
if mibBuilder.loadTexts: vmwEnvCvtValueErrs.setDescription('Number of CIM Indication properties having a MappingString qualifier\n        for which the cim value for the given cim type could not be converted.')
vmwEnvCvtSyntaxErrs = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvCvtSyntaxErrs.setStatus('current')
if mibBuilder.loadTexts: vmwEnvCvtSyntaxErrs.setDescription('Number of CIM Indication properties having a MappingString qualifier\n        for which the cim type could not be converted to smi syntax.')
vmwEnvCvtOidErrs = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvCvtOidErrs.setStatus('current')
if mibBuilder.loadTexts: vmwEnvCvtOidErrs.setDescription('Number of CIM Indication properties having a MappingString qualifier\n        for which the the oid was not valid.')
vmwEnvGetClassErrs = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvGetClassErrs.setStatus('current')
if mibBuilder.loadTexts: vmwEnvGetClassErrs.setDescription('Number of CIM GetClass operations over a given cim indication class and namespace\n        could not be completed (timeout) or returned error.')
vmwEnvPropertySkips = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvPropertySkips.setStatus('current')
if mibBuilder.loadTexts: vmwEnvPropertySkips.setDescription('Number of CIM indications having properties which do not have MappingString qualifier\n         in the class definition and were not converted, sent along with the notification.')
vmwEnvIndicationSkips = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 20, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmwEnvIndicationSkips.setStatus('current')
if mibBuilder.loadTexts: vmwEnvIndicationSkips.setDescription('Number of CIM indications recieved for which GetClass reported no MappingStrings qualifier\n        and were not converted to a notification.')
vmwEnvHardwareEvent = NotificationType((1, 3, 6, 1, 4, 1, 6876, 0, 301)).setObjects(("VMWARE-ENV-MIB", "vmwSubsystemType"), ("VMWARE-ENV-MIB", "vmwHardwareStatus"), ("VMWARE-ENV-MIB", "vmwEventDescription"), ("VMWARE-ENV-MIB", "vmwEnvHardwareTime"))
if mibBuilder.loadTexts: vmwEnvHardwareEvent.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvHardwareEvent.setDescription('This notification, if the agent is so configured, may be sent when the\n         system has detected a material change in physical condition of the\n         hardware')
vmwESXEnvHardwareEvent = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 301)).setObjects(("VMWARE-ENV-MIB", "vmwSubsystemType"), ("VMWARE-ENV-MIB", "vmwHardwareStatus"), ("VMWARE-ENV-MIB", "vmwEventDescription"), ("VMWARE-ENV-MIB", "vmwEnvHardwareTime"))
if mibBuilder.loadTexts: vmwESXEnvHardwareEvent.setStatus('deprecated')
if mibBuilder.loadTexts: vmwESXEnvHardwareEvent.setDescription('ESX Specific version of this notification,\n         if the agent is so configured, may be sent when\n         the ESX Operating System has detected a material change in\n         physical condition of the hardware')
vmwEnvCIM = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 4, 30))
vmwEnvDescription = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 1), VmwLongSnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvDescription.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property Description')
if mibBuilder.loadTexts: vmwEnvDescription.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvDescription.setDescription('A short description of the Indication.')
vmwEnvEventTime = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 2), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvEventTime.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property EventTime')
if mibBuilder.loadTexts: vmwEnvEventTime.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvEventTime.setDescription('The time and date the underlying event was first\n       detected. May be set to the time the SNMP agent recieved the notification\n       if in the incoming CIM indication the value is\n       NULL due to the creating entity not being capable of providing\n       this information. This value is based on the notion of\n       local date and time of the Managed System Element\n       generating the Indication.')
vmwEnvIndicationTime = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvIndicationTime.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property IndicationTime')
if mibBuilder.loadTexts: vmwEnvIndicationTime.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvIndicationTime.setDescription('The time and date of creation of the underlying Indication received by the snmp agent. The\n       property may be set to the time SNMP agent received the notification if the entity creating the\n       Indication is not capable of determining this\n       information and delivers a null IndicationTime property. Note that IndicationTime may be the same\n       for two Indications that are generated in rapid succession.')
vmwEnvPerceivedSeverity = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 4), VmwCIMSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvPerceivedSeverity.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property PerceivedSeverity')
if mibBuilder.loadTexts: vmwEnvPerceivedSeverity.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvPerceivedSeverity.setDescription("An enumerated value that describes the severity of the\n       Alert Indication from the notifier's point of view.")
vmwEnvAlertType = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 5), VmwCIMAlertTypes()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvAlertType.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property AlertType')
if mibBuilder.loadTexts: vmwEnvAlertType.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvAlertType.setDescription('Primary classification of the Indication.')
vmwEnvSysCreationClassName = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 6), VmwCimName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvSysCreationClassName.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property SystemCreationClassName')
if mibBuilder.loadTexts: vmwEnvSysCreationClassName.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvSysCreationClassName.setDescription("The scoping System's CreationClassName for the Provider\n       generating this Indication.")
vmwEnvAlertingElement = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 7), VmwCimName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvAlertingElement.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property AlertingManagedElement')
if mibBuilder.loadTexts: vmwEnvAlertingElement.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvAlertingElement.setDescription('The identifying information of the entity (ie, the\n       instance) for which this notification is generated. The\n       property contains the CIM path of an CIM object instance,\n       encoded as a string parameter - if the instance is modeled in the CIM\n       Schema. If not a CIM instance, the property contains\n       some identifying string that names the entity for which\n       the Alert is generated. The path or identifying string\n       is formatted per the AlertingElementFormat property.')
vmwEnvAlertingFormat = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 8), VmwCIMAlertFormat()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvAlertingFormat.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property AlertingElementFormat')
if mibBuilder.loadTexts: vmwEnvAlertingFormat.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvAlertingFormat.setDescription('The format of the AlertingManagedElement property is\n       interpretable based upon the value of this property.')
vmwEnvSystemName = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 9), VmwCimName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvSystemName.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property SystemName')
if mibBuilder.loadTexts: vmwEnvSystemName.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvSystemName.setDescription("The scoping System's Name for the Provider generating this message.")
vmwEnvProviderName = MibScalar((1, 3, 6, 1, 4, 1, 6876, 4, 30, 10), VmwCimName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwEnvProviderName.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof : property ProviderName')
if mibBuilder.loadTexts: vmwEnvProviderName.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvProviderName.setDescription('The name of the CIM provider, a software module loaded into the CIM subsystem, generating this message.')
vmwESXEnvHardwareAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 302)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvHardwareAlert.setStatus('deprecated')
if mibBuilder.loadTexts: vmwESXEnvHardwareAlert.setDescription('A hardware alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvHardwareAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvBatteryAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 303)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvBatteryAlert.setStatus('deprecated')
if mibBuilder.loadTexts: vmwESXEnvBatteryAlert.setDescription('A battery alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvBatteryAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvChassisAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 304)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvChassisAlert.setStatus('deprecated')
if mibBuilder.loadTexts: vmwESXEnvChassisAlert.setDescription('A chassis alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvChassisAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvThermalAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 305)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvThermalAlert.setStatus('deprecated')
if mibBuilder.loadTexts: vmwESXEnvThermalAlert.setDescription('A cooling/thermal alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvThermalAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvDiskAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 306)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvDiskAlert.setStatus('deprecated')
if mibBuilder.loadTexts: vmwESXEnvDiskAlert.setDescription('A disk drive alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvDiskAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvPowerAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 307)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvPowerAlert.setStatus('deprecated')
if mibBuilder.loadTexts: vmwESXEnvPowerAlert.setDescription('A power suppply alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvPowerAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvProcessorAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 308)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvProcessorAlert.setStatus('deprecated')
if mibBuilder.loadTexts: vmwESXEnvProcessorAlert.setDescription('A IPMI processor alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvProcessorAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvMemoryAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 309)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvMemoryAlert.setStatus('deprecated')
if mibBuilder.loadTexts: vmwESXEnvMemoryAlert.setDescription('A IPMI memory alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvMemoryAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwESXEnvBIOSAlert = NotificationType((1, 3, 6, 1, 4, 1, 6876, 4, 1, 0, 310)).setObjects(("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if mibBuilder.loadTexts: vmwESXEnvBIOSAlert.setStatus('deprecated')
if mibBuilder.loadTexts: vmwESXEnvBIOSAlert.setDescription('BIOS System Event Log alert as received from the Common Infrastructure Management (CIM) subsystem on this system.')
if mibBuilder.loadTexts: vmwESXEnvBIOSAlert.setReference('http://www.dmtf.org/standards/cim/cim_schema_v2240 : file CIM_AlertIndication.mof')
vmwEnvironmentalMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2))
vmwEnvironmentMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 1))
vmwEnvMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 2))
vmwEnvMIBBasicCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 1, 5)).setObjects(("VMWARE-ENV-MIB", "vmwEnvCIMToSNMP"), ("VMWARE-ENV-MIB", "vmwEnvironmentGroup2"), ("VMWARE-ENV-MIB", "vmwESXEnvNotificationGroup3"), ("VMWARE-ENV-MIB", "vmwESXEnvNotificationGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwEnvMIBBasicCompliance4 = vmwEnvMIBBasicCompliance4.setStatus('current')
if mibBuilder.loadTexts: vmwEnvMIBBasicCompliance4.setDescription('The compliance statement for entities which implement the\n    VMWARE-ENV-MIB.')
vmwEnvMIBBasicCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 1, 4)).setObjects(("VMWARE-ENV-MIB", "vmwEnvAlertGroup"), ("VMWARE-ENV-MIB", "vmwESXEnvNotificationGroup2"), ("VMWARE-ENV-MIB", "vmwESXEnvNotificationGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwEnvMIBBasicCompliance3 = vmwEnvMIBBasicCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: vmwEnvMIBBasicCompliance3.setDescription('The compliance statement for entities which implement the\n    VMWARE-ENV-MIB.')
vmwEnvMIBBasicCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 1, 3)).setObjects(("VMWARE-ENV-MIB", "vmwEnvironmentGroup"), ("VMWARE-ENV-MIB", "vmwESXEnvNotificationGroup"), ("VMWARE-ENV-MIB", "vmwEnvNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwEnvMIBBasicCompliance2 = vmwEnvMIBBasicCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvMIBBasicCompliance2.setDescription('The compliance statement for entities which implement the\n    VMWARE-ENV-MIB.')
vmwEnvMIBBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 1, 2)).setObjects(("VMWARE-ENV-MIB", "vmwEnvironmentGroup"), ("VMWARE-ENV-MIB", "vmwEnvNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwEnvMIBBasicCompliance = vmwEnvMIBBasicCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: vmwEnvMIBBasicCompliance.setDescription('The compliance statement for entities which implement the\n    VMWARE-ENV-MIB.')
vmwEnvCIMToSNMP = ObjectGroup((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 2, 20)).setObjects(("VMWARE-ENV-MIB", "vmwEnvSource"), ("VMWARE-ENV-MIB", "vmwEnvInIndications"), ("VMWARE-ENV-MIB", "vmwEnvLastIn"), ("VMWARE-ENV-MIB", "vmwEnvOutNotifications"), ("VMWARE-ENV-MIB", "vmwEnvInErrs"), ("VMWARE-ENV-MIB", "vmwEnvIndOidErrs"), ("VMWARE-ENV-MIB", "vmwEnvCvtValueErrs"), ("VMWARE-ENV-MIB", "vmwEnvCvtSyntaxErrs"), ("VMWARE-ENV-MIB", "vmwEnvCvtOidErrs"), ("VMWARE-ENV-MIB", "vmwEnvGetClassErrs"), ("VMWARE-ENV-MIB", "vmwEnvPropertySkips"), ("VMWARE-ENV-MIB", "vmwEnvIndicationSkips"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwEnvCIMToSNMP = vmwEnvCIMToSNMP.setStatus('current')
if mibBuilder.loadTexts: vmwEnvCIMToSNMP.setDescription('Only needed if protocol conversion between CIM-XML and SNMP is supported.')
vmwEnvAlertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 2, 5)).setObjects(("VMWARE-ENV-MIB", "vmwEnvSource"), ("VMWARE-ENV-MIB", "vmwEnvInIndications"), ("VMWARE-ENV-MIB", "vmwEnvLastIn"), ("VMWARE-ENV-MIB", "vmwEnvOutNotifications"), ("VMWARE-ENV-MIB", "vmwEnvInErrs"), ("VMWARE-ENV-MIB", "vmwEnvIndOidErrs"), ("VMWARE-ENV-MIB", "vmwEnvCvtValueErrs"), ("VMWARE-ENV-MIB", "vmwEnvCvtSyntaxErrs"), ("VMWARE-ENV-MIB", "vmwEnvCvtOidErrs"), ("VMWARE-ENV-MIB", "vmwEnvGetClassErrs"), ("VMWARE-ENV-MIB", "vmwEnvPropertySkips"), ("VMWARE-ENV-MIB", "vmwEnvIndicationSkips"), ("VMWARE-ENV-MIB", "vmwEnvDescription"), ("VMWARE-ENV-MIB", "vmwEnvEventTime"), ("VMWARE-ENV-MIB", "vmwEnvIndicationTime"), ("VMWARE-ENV-MIB", "vmwEnvPerceivedSeverity"), ("VMWARE-ENV-MIB", "vmwEnvAlertType"), ("VMWARE-ENV-MIB", "vmwEnvSysCreationClassName"), ("VMWARE-ENV-MIB", "vmwEnvAlertingElement"), ("VMWARE-ENV-MIB", "vmwEnvAlertingFormat"), ("VMWARE-ENV-MIB", "vmwEnvSystemName"), ("VMWARE-ENV-MIB", "vmwEnvProviderName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwEnvAlertGroup = vmwEnvAlertGroup.setStatus('obsolete')
if mibBuilder.loadTexts: vmwEnvAlertGroup.setDescription('These objects provide physical hardware environmental details as reported by CIM subsystem.')
vmwEnvironmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 2, 1)).setObjects(("VMWARE-ENV-MIB", "vmwEnvNumber"), ("VMWARE-ENV-MIB", "vmwEnvLastChange"), ("VMWARE-ENV-MIB", "vmwSubsystemType"), ("VMWARE-ENV-MIB", "vmwHardwareStatus"), ("VMWARE-ENV-MIB", "vmwEventDescription"), ("VMWARE-ENV-MIB", "vmwEnvHardwareTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwEnvironmentGroup = vmwEnvironmentGroup.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvironmentGroup.setDescription('These objects provide physical hardware environmental details.')
vmwEnvNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 2, 2)).setObjects(("VMWARE-ENV-MIB", "vmwEnvHardwareEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwEnvNotificationGroup = vmwEnvNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: vmwEnvNotificationGroup.setDescription('Notifications related to physical subsystems.')
vmwESXEnvNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 2, 3)).setObjects(("VMWARE-ENV-MIB", "vmwESXEnvHardwareEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwESXEnvNotificationGroup = vmwESXEnvNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: vmwESXEnvNotificationGroup.setDescription('ESX System specific notifications about physical subsystems.')
vmwESXEnvNotificationGroup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 2, 4)).setObjects(("VMWARE-ENV-MIB", "vmwESXEnvHardwareAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvBatteryAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvChassisAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvThermalAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvDiskAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvPowerAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvProcessorAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvMemoryAlert"), ("VMWARE-ENV-MIB", "vmwESXEnvBIOSAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwESXEnvNotificationGroup2 = vmwESXEnvNotificationGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: vmwESXEnvNotificationGroup2.setDescription('ESX System specific notifications about physical subsystems.')
vmwESXEnvNotificationGroup3 = NotificationGroup((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 2, 10)).setObjects(("VMWARE-ENV-MIB", "vmwEnvIpmiSelFull"), ("VMWARE-ENV-MIB", "vmwEnvIpmiSelMemoryRaised"), ("VMWARE-ENV-MIB", "vmwEnvIpmiSelMemoryCleared"), ("VMWARE-ENV-MIB", "vmwEnvIpmiSelPowerSupplyRaised"), ("VMWARE-ENV-MIB", "vmwEnvIpmiSelPowerSupplyCleared"), ("VMWARE-ENV-MIB", "vmwEnvIpmiSelFanRaised"), ("VMWARE-ENV-MIB", "vmwEnvIpmiSelFanCleared"), ("VMWARE-ENV-MIB", "vmwEnvIpmiSelCpuRaised"), ("VMWARE-ENV-MIB", "vmwEnvIpmiSelCpuCleared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwESXEnvNotificationGroup3 = vmwESXEnvNotificationGroup3.setStatus('current')
if mibBuilder.loadTexts: vmwESXEnvNotificationGroup3.setDescription('IPMI System EventLog specific notifications about physical subsystems.')
vmwEnvironmentGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 6876, 4, 20, 10, 2, 2, 6)).setObjects(("VMWARE-ENV-MIB", "vmwEnvNumber"), ("VMWARE-ENV-MIB", "vmwEnvLastChange"), ("VMWARE-ENV-MIB", "vmwSELCapacity"), ("VMWARE-ENV-MIB", "vmwSubsystemType"), ("VMWARE-ENV-MIB", "vmwHardwareStatus"), ("VMWARE-ENV-MIB", "vmwEventDescription"), ("VMWARE-ENV-MIB", "vmwEnvHardwareTime"), ("VMWARE-ENV-MIB", "vmwEnvHrDeviceIndex"), ("VMWARE-ENV-MIB", "vmwEnvSelSensorNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwEnvironmentGroup2 = vmwEnvironmentGroup2.setStatus('current')
if mibBuilder.loadTexts: vmwEnvironmentGroup2.setDescription('These objects provide physical hardware IPMI System Event Log details.')
mibBuilder.exportSymbols("VMWARE-ENV-MIB", vmwESXEnvChassisAlert=vmwESXEnvChassisAlert, vmwESXEnvThermalAlert=vmwESXEnvThermalAlert, vmwEnvNotificationGroup=vmwEnvNotificationGroup, vmwEnvironmentalMIBConformance=vmwEnvironmentalMIBConformance, vmwEnvSelSensorNumber=vmwEnvSelSensorNumber, vmwEnvIndOidErrs=vmwEnvIndOidErrs, vmwEnvIpmiSelMemoryCleared=vmwEnvIpmiSelMemoryCleared, vmwEnvSysCreationClassName=vmwEnvSysCreationClassName, vmwESXEnvNotificationGroup3=vmwESXEnvNotificationGroup3, vmwEnv=vmwEnv, vmwEnvIpmiSelFanRaised=vmwEnvIpmiSelFanRaised, vmwEnvLastIn=vmwEnvLastIn, vmwEnvIpmiSelPowerSupplyRaised=vmwEnvIpmiSelPowerSupplyRaised, vmwEnvHardwareEvent=vmwEnvHardwareEvent, vmwEnvAlertGroup=vmwEnvAlertGroup, vmwEnvIpmiSelFanCleared=vmwEnvIpmiSelFanCleared, vmwEnvSource=vmwEnvSource, vmwEnvIpmiSelPowerSupplyCleared=vmwEnvIpmiSelPowerSupplyCleared, vmwEnvCvtValueErrs=vmwEnvCvtValueErrs, vmwESXEnvNotificationGroup2=vmwESXEnvNotificationGroup2, vmwEnvironmentGroup2=vmwEnvironmentGroup2, vmwSubsystemType=vmwSubsystemType, vmwESXNotifications=vmwESXNotifications, vmwHardwareStatus=vmwHardwareStatus, vmwEnvIpmiSelMemoryRaised=vmwEnvIpmiSelMemoryRaised, vmwEnvPropertySkips=vmwEnvPropertySkips, vmwEnvAlertingFormat=vmwEnvAlertingFormat, vmwEnvAlertType=vmwEnvAlertType, vmwEnvIndex=vmwEnvIndex, vmwEnvEventTime=vmwEnvEventTime, vmwESXEnvProcessorAlert=vmwESXEnvProcessorAlert, vmwESXEnvMemoryAlert=vmwESXEnvMemoryAlert, vmwEventDescription=vmwEventDescription, vmwEnvIPMI=vmwEnvIPMI, vmwEnvPerceivedSeverity=vmwEnvPerceivedSeverity, vmwEnvMIBGroups=vmwEnvMIBGroups, vmwEnvDescription=vmwEnvDescription, vmwEnvMIBBasicCompliance3=vmwEnvMIBBasicCompliance3, vmwEnvHrDeviceIndex=vmwEnvHrDeviceIndex, vmwEnvIndicationSkips=vmwEnvIndicationSkips, vmwEnvironmentMIBCompliances=vmwEnvironmentMIBCompliances, vmwEnvMIBBasicCompliance=vmwEnvMIBBasicCompliance, vmwEnvironmentGroup=vmwEnvironmentGroup, vmwESXEnvNotificationGroup=vmwESXEnvNotificationGroup, vmwEnvironmentalMIB=vmwEnvironmentalMIB, vmwEnvProviderName=vmwEnvProviderName, vmwESXEnvBatteryAlert=vmwESXEnvBatteryAlert, vmwEnvAlertingElement=vmwEnvAlertingElement, vmwESXEnvHardwareEvent=vmwESXEnvHardwareEvent, vmwEnvCIM=vmwEnvCIM, vmwEnvSystemName=vmwEnvSystemName, vmwESXEnvBIOSAlert=vmwESXEnvBIOSAlert, vmwSELCapacity=vmwSELCapacity, vmwEnvIpmiSelCpuRaised=vmwEnvIpmiSelCpuRaised, vmwEnvInIndications=vmwEnvInIndications, vmwEnvIndicationTime=vmwEnvIndicationTime, vmwEnvMIBBasicCompliance4=vmwEnvMIBBasicCompliance4, vmwEnvMIBBasicCompliance2=vmwEnvMIBBasicCompliance2, vmwEnvCvtOidErrs=vmwEnvCvtOidErrs, vmwEnvHardwareTime=vmwEnvHardwareTime, vmwEnvOutNotifications=vmwEnvOutNotifications, vmwEnvTable=vmwEnvTable, vmwEnvIpmiSelCpuCleared=vmwEnvIpmiSelCpuCleared, PYSNMP_MODULE_ID=vmwEnvironmentalMIB, vmwEnvCvtSyntaxErrs=vmwEnvCvtSyntaxErrs, vmwESXEnvDiskAlert=vmwESXEnvDiskAlert, vmwESXEnvHardwareAlert=vmwESXEnvHardwareAlert, vmwEnvInErrs=vmwEnvInErrs, vmwESXEnvPowerAlert=vmwESXEnvPowerAlert, vmwEnvCIMToSNMP=vmwEnvCIMToSNMP, vmwEnvNumber=vmwEnvNumber, vmwEnvEntry=vmwEnvEntry, vmwEnvGetClassErrs=vmwEnvGetClassErrs, vmwEnvLastChange=vmwEnvLastChange, vmwEnvIpmiSelFull=vmwEnvIpmiSelFull)
