#
# PySNMP MIB module CTRON-ELAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-ELAN-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 12:22:31 2024
# On host fv-az1022-995 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ctAtmfLanEmulation, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctAtmfLanEmulation")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, iso, Bits, MibIdentifier, IpAddress, Gauge32, Unsigned32, Counter32, Counter64, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "iso", "Bits", "MibIdentifier", "IpAddress", "Gauge32", "Unsigned32", "Counter32", "Counter64", "Integer32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class CtLaneDebugLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("user", 1), ("all", 2), ("error", 3), ("warning", 4), ("informational", 5), ("detailed", 6), ("trace", 7))

class ElanLocalIndex(Integer32):
    pass

ctLeClient = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 1))
ctElan = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2))
ctLes = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 3))
ctBus = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 4))
ctElanConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1))
ctElanConfTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 1), )
if mibBuilder.loadTexts: ctElanConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanConfTable.setDescription('This table defines an extension to the elanConfTable.')
ctElanConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 1, 1), ).setIndexNames((0, "CTRON-ELAN-MIB", "ctElanConfIndex"))
if mibBuilder.loadTexts: ctElanConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanConfEntry.setDescription('Each entry in this table represents an Emulated LAN.\n         Objects elanConfIndex and elanConfRowStatus are required\n         during row creation and deletion. ')
ctElanConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 1, 1, 1), ElanLocalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctElanConfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanConfIndex.setDescription('A value which uniquely identifies a\n         conceptual row in the ctElanConfTable.\n         The value corresponds to elanConfIndex.')
ctElanConfUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctElanConfUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanConfUnitNumber.setDescription('Adapter unit for this ELAN, currently\n         read-only.  May expand to be read-write.')
ctElanConfPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("secure", 1), ("nonsecure", 2))).clone('nonsecure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctElanConfPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanConfPolicy.setDescription('Policy determination of this ELAN, where\n         secure(1) ensures that cut through operation\n         will not be in operation.  When an ELAN is\n         in secure mode, it will not allow inter-elan\n         communication by restricting directory\n         services learning or lookups.  The secure(1)\n         mode also restricts the bus from proxy\n         broadcast resolution, also know as the \n         protocol preprocessor.  When in nonsecure(2)\n         mode, the ELAN will allow cut through\n         operation, Directory Services advertisement,\n         and proxy broadcast resolution.')
ctElanConfDelPolicyWithElan = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctElanConfDelPolicyWithElan.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanConfDelPolicyWithElan.setDescription('This objects indicates that if an ELAN row is\n         deleted, any existing LEC->ELAN mappings must\n         also be deleted.')
ctElanConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctElanConfRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanConfRowStatus.setDescription('This object is used to create or\n         delete entries in the elanConfTable.')
ctElanSFDSPeerTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 2), )
if mibBuilder.loadTexts: ctElanSFDSPeerTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanSFDSPeerTable.setDescription('This table contains all Secure Fast Directory Services\n         Database IPs that have been added as peers.  Creating\n         an entry in this table will add the SFDS database at that\n         IP as a peer.  Deleting and entry in this table will drop\n         the SFDS at that IP as a peer.')
ctElanSFDSPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 2, 1), ).setIndexNames((0, "CTRON-ELAN-MIB", "ctElanSFDSPeerIP"))
if mibBuilder.loadTexts: ctElanSFDSPeerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanSFDSPeerEntry.setDescription('Each entry in this table represents an\n         SFDS Database that has been added as a peer.  ctElanSFDSPeerIP\n         and ctElanSFDSPeerRowStatus must be present during row creation\n         and deletion. ')
ctElanSFDSPeerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctElanSFDSPeerIP.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanSFDSPeerIP.setDescription('The IP Address of the Directory Services Peer Database.')
ctElanSFDSPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctElanSFDSPeerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanSFDSPeerRowStatus.setDescription('This object is used to create or\n         delete entries in the ctElanSFDSPeerTable.')
ctElanConfDirectoryServicesIP = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctElanConfDirectoryServicesIP.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanConfDirectoryServicesIP.setDescription('The IP Address of the Directory Services.')
ctElanDSStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("connected", 1), ("connectionLost", 2), ("unknown", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctElanDSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanDSStatus.setDescription('Reports the current status of the Secure Fast Directory\n         Services connection.')
ctElanUNIVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("uni30", 2), ("uni31", 3), ("uni40", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctElanUNIVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanUNIVersion.setDescription('Reports the UNI version that lane is using.')
ctElanLaneDbgOutputFile = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctElanLaneDbgOutputFile.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanLaneDbgOutputFile.setDescription('Full path and file for Debug Output.')
ctElanLaneDbgConnectionServices = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 7), CtLaneDebugLevel().clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctElanLaneDbgConnectionServices.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanLaneDbgConnectionServices.setDescription('Debug level specifier for Connection Services subsystem.')
ctElanLaneDbgDatabaseManagement = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 8), CtLaneDebugLevel().clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctElanLaneDbgDatabaseManagement.setReference('Cabletron Systems, Inc. private MIB extension.')
if mibBuilder.loadTexts: ctElanLaneDbgDatabaseManagement.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanLaneDbgDatabaseManagement.setDescription('Debug level specifier for Database Mgr subsystem.')
ctElanCtLaneDbgSNMP = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 9), CtLaneDebugLevel().clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctElanCtLaneDbgSNMP.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanCtLaneDbgSNMP.setDescription('Debug level specifier for SNMP Agent subsystem.')
ctElanLaneDbgLECS = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 10), CtLaneDebugLevel().clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctElanLaneDbgLECS.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanLaneDbgLECS.setDescription('Debug level specifier for LECS subsystem.')
ctElanCtLaneDbgLES = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 11), CtLaneDebugLevel().clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctElanCtLaneDbgLES.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanCtLaneDbgLES.setDescription('Debug level specifier for LES subsystem.')
ctElanHotStandbyStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initial", 1), ("active", 2), ("standby", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctElanHotStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanHotStandbyStatus.setDescription('Reports the status of this Hot Standby peer.\n         Initial means this peer has just started and is\n         determining whether it will be primary or standby.\n         Active means it is currently running as the primary.\n         Standby means it is currently in backup mode.')
ctElanConfHotStandbyIP = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 3, 5, 2, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctElanConfHotStandbyIP.setStatus('mandatory')
if mibBuilder.loadTexts: ctElanConfHotStandbyIP.setDescription('The IP Address of the other member of this Hot Standby peer\n         group.')
mibBuilder.exportSymbols("CTRON-ELAN-MIB", ctElanConfGroup=ctElanConfGroup, ctElan=ctElan, ctElanConfRowStatus=ctElanConfRowStatus, ctElanSFDSPeerEntry=ctElanSFDSPeerEntry, ctElanConfHotStandbyIP=ctElanConfHotStandbyIP, ctElanCtLaneDbgSNMP=ctElanCtLaneDbgSNMP, ctElanLaneDbgLECS=ctElanLaneDbgLECS, ctBus=ctBus, ctElanConfDirectoryServicesIP=ctElanConfDirectoryServicesIP, ctElanSFDSPeerTable=ctElanSFDSPeerTable, ctElanSFDSPeerIP=ctElanSFDSPeerIP, ctElanLaneDbgOutputFile=ctElanLaneDbgOutputFile, ctElanConfDelPolicyWithElan=ctElanConfDelPolicyWithElan, ctLes=ctLes, ctElanConfIndex=ctElanConfIndex, ctLeClient=ctLeClient, ctElanCtLaneDbgLES=ctElanCtLaneDbgLES, CtLaneDebugLevel=CtLaneDebugLevel, ctElanLaneDbgConnectionServices=ctElanLaneDbgConnectionServices, ctElanSFDSPeerRowStatus=ctElanSFDSPeerRowStatus, ctElanHotStandbyStatus=ctElanHotStandbyStatus, ctElanConfTable=ctElanConfTable, ctElanConfEntry=ctElanConfEntry, ctElanConfPolicy=ctElanConfPolicy, ctElanConfUnitNumber=ctElanConfUnitNumber, ctElanDSStatus=ctElanDSStatus, ctElanUNIVersion=ctElanUNIVersion, ElanLocalIndex=ElanLocalIndex, ctElanLaneDbgDatabaseManagement=ctElanLaneDbgDatabaseManagement)
