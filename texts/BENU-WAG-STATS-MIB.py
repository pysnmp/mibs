#
# PySNMP MIB module BENU-WAG-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/benuos/BENU-WAG-STATS-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 11:37:34 2024
# On host fv-az842-370 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
benuWAG, = mibBuilder.importSymbols("BENU-WAG-MIB", "benuWAG")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, ObjectIdentity, MibIdentifier, Bits, Integer32, Gauge32, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, iso, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "MibIdentifier", "Bits", "Integer32", "Gauge32", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "iso", "TimeTicks", "Unsigned32")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
benuWagStatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3))
benuWagStatsMIB.setRevisions(('2017-02-21 00:00', '2017-01-31 00:00', '2017-01-20 00:00', '2016-07-05 00:00', '2016-07-05 00:00', '2016-05-30 00:00', '2016-05-27 00:00', '2016-03-03 00:00', '2015-10-05 00:00', '2015-09-30 00:00', '2015-09-29 00:00', '2015-09-26 00:00', '2015-09-24 00:00', '2015-09-24 00:01', '2015-09-22 00:01', '2015-09-22 00:00', '2015-09-21 00:00', '2015-09-15 00:00', '2015-09-08 00:00', '2015-08-06 00:00', '2015-07-15 00:00', '2015-06-26 00:00', '2015-06-24 00:00', '2015-06-12 00:00', '2015-05-21 00:00', '2015-05-20 00:00', '2015-05-12 00:00', '2015-04-15 00:00', '2015-04-13 00:00', '2015-04-12 00:00', '2015-03-27 00:00', '2015-02-27 00:00', '2015-02-25 00:00', '2015-02-20 00:00', '2015-02-18 00:00', '2015-02-17 00:00', '2015-02-16 00:00', '2015-01-28 00:00', '2015-01-12 00:00', '2015-01-08 00:00', '2015-01-05 00:00', '2015-01-02 00:00', '2014-09-09 00:00', '2014-04-28 00:00', '2014-03-05 00:00', '2014-02-25 00:00', '2014-02-19 00:00', '2014-02-14 00:00', '2014-01-17 00:00', '2014-01-16 00:00', '2014-01-09 00:00', '2013-12-31 00:00', '2013-12-23 00:01', '2013-12-17 00:01', '2013-12-10 00:01', '2013-12-10 00:00', '2013-11-29 00:00', '2013-11-23 00:00', '2013-11-21 00:00', '2013-11-13 00:00', '2013-09-13 00:00', '2016-07-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: benuWagStatsMIB.setRevisionsDescriptions(('Added fragmentation scalars.', 'Removed bWagDsLiteProfileSubscribers from DSLite profile stats table.', 'Added DSLite profile stats table and scalars.', 'Added scalar bWagNumPreAuthenticatedSubscribersS2aPmip6.', 'Added scalar bWagNumCurrentSSIDS2aSubscribersPmip6.', 'Added 1 more scalar leaf bWagNumCurrentTunnelsDSLite \n            to the bWagTunnelStatsMIBObject .', 'Added 1 more leaf to the bWagSubscriberMIBObject\n                         bWagNumCurrentDSLiteSubscribers and Added new row \n                         bWagSubscriberDsLiteActivationsCount in \n                         bWagSubscriberTable.', 'Modified bWagCgnatAuthIpAddrHighThresholdReached and\n\t\t         bWagCgnatAuthIpAddrLowThresholdReached traps.', 'Added new rows in bWagSubscriberTable to\n\t\t\tdifferentiate added and deleted subscribers count.', 'Added scalars for bWagNumPreAuthSpwifiSubscribers and\n\t\t         bWagNumPreAuthHomeSubscribers.', 'Updated home profiles.', 'Home profile scalars added.', 'Updated home profiles.', 'Added 2 more leaves to the bWagSubscriberMIBObject\n                         bWagNumCurrentHomeSubscribers\n                         bWagNumCurrentSPWiFiSubscribers', 'Added bWagVrgApiNotifObjects.', 'Added new objects in tunnel table\n                         bWagTunnelDeletedDueToReject\n                         bWagTunnelDeletedDueToAbort\n                         bWagTunnelDeletedDueToMacResFail\n                         bWagTunnelDeletedDueToLifDown\n                         bWagTunnelDeletedDueToB2bSubsDelete.', 'Added bWagMHNProfileStatsTable.', ' Obsoleting MIB objects no longer valid and/or \n            supported. Obseleting Upstream Processing Latency scalars.', 'Obsoleting CGNAT port usage notifications.', 'Added bWagDHCPv6Table.', 'Added new scalar for number of subscribers with local authentication policy.', 'Added new object bWagNumTunnelsDeletedDuetoLIFDown.', 'Modified bWagDhcpTPSIntervalDuration description.', 'Added new object for unauthenticated and authenticated\n\t                 subscribers with IPv6 prefix\n                         bWagNumSubsUnauthenticatedWithIPv6Prefix and\n                         bWagNumSubsAuthenticatedWithIPv6Prefix. ', 'Modified bWagDhcpTPSLowReached notification to\n                         bWagStatsNotifications.', 'Modified description of bWagDhcpTPSIntervalDuration.', 'Obsoleting MIB objects no longer valid and/or supported.', 'Changed tunnel scalar SYNTAX.', 'Added new object bWagNumTunnelsDeletedByB2B for tunnel deleted due to B2B\n                         subscriber delete.', 'Added new row in bWagSubscriberTable.', 'Added scalar:\n                               bWagNumCurrentSingleStaticSubscribers\n                               bWagNumCurrentRoutedSubnetSubscribers\n                         Added new object for authenticated subscriber for\n                               bWagSubscriberAuthenticationsCountViaSingleStatic\n                               bWagSubscriberAuthenticationsCountViaRoutedSubnet', 'Added scalar bWagNumPreAuthenticatedSubscribers.', 'Added scalar bWagNumCurrent8021xSubscribers.', 'Added bWagCgnatPoolGroupStatsTable', 'Added new object for authenticated subscriber via 802.1x.\n                         bWagSubscriberAuthenticationsCountVia8021x', 'Added new object for subscribers with IPv6 prefix.\n                         bWagNumSubsWithIPv6Prefix', 'Added new objects for current IPv4 & IPv6 tunnels.\n                         bWagNumCurrentTunnelsIPv4\n                         bWagNumCurrentTunnelsIPv6 ', 'Obsoleting MIB objects no longer valid and/or supported.', 'Updated status of WagDownstreamProcessingLatency\n                         scalars to obsolete.', 'Added bWagCgnatProfileNATIPPoolGroup varbind in\n                         bWagCgnatAuthIpAddrLowThresholdReached and\n                         bWagCgnatAuthIpAddrHighThresholdReached traps.', 'Updated notification assignments to comply with standards (RFC 2578).', 'Added bWagDhcpTPSTable, bWagDhcpTPSLowReached and bWagDhcpTPSHighReached', 'Added Processing latency scalar objects.', 'Updated Subscriber Stats Table.', 'Updated descriptions for CGNAT Auth periodic table.', 'Updated descriptions for CGNAT periodic tables.', 'Clarified descriptions for CGNAT profile table.', 'Clarified descriptions for CGNAT tables & notifications.', 'Added CGNAT portblocks notifications.', 'Updated Subscriber Stats Table.', 'Added a new CGNAT variable.', 'Added a new CGNAT scalar.', 'Updated Subscriber Stats Table.', 'Updated DHCP Stats Table.', 'Updated SYNTAX of bWagCgnatAuthSubscriberMac.', 'Updated description of object in\n                         CGNAT Auth Subscriber Port Utilization Table.', 'Added notification definitions for \n                         CGNAT Auth IP Address utilization.', 'Updated object identifier for Policy Table.\n                         Cleaned up MIB based on smilint report.', 'Updated the CGNAT Profile Stats Table.', 'A separate table to show CGNAT subscribers\n                         actively utilizing ports greater than the \n                         configured threshold.', 'Initial Version', 'Added Mibs for L2tpv3 Tunnel',))
if mibBuilder.loadTexts: benuWagStatsMIB.setLastUpdated('201702020000Z')
if mibBuilder.loadTexts: benuWagStatsMIB.setOrganization('Benu Networks,Inc')
if mibBuilder.loadTexts: benuWagStatsMIB.setContactInfo('Benu Networks,Inc\n                          Corporate Headquarters\n                          300 Concord Road, Suite 110\n                          Billerica, MA 01821 USA\n                          Tel: +1 978-223-4700\n                          Fax: +1 978-362-1908\n                          Email: info@benunets.com')
if mibBuilder.loadTexts: benuWagStatsMIB.setDescription('This MIB module defines statistics of\n                Benu Wireless Access Gateway.\n\n                Copyright (C)  2012 by Benu Networks, Inc.\n                All rights reserved.')
bWagStatsNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0))
if mibBuilder.loadTexts: bWagStatsNotifications.setStatus('current')
if mibBuilder.loadTexts: bWagStatsNotifications.setDescription('WAG stats notifications are defined in this branch.')
bWagRadiusMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1))
if mibBuilder.loadTexts: bWagRadiusMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusMIBObjects.setDescription('WAG RADIUS statistics are defined in this branch.')
bWagRadiusNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 2))
if mibBuilder.loadTexts: bWagRadiusNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusNotifObjects.setDescription('Notifications of WAG RADIUS statistics are defined in this branch.')
bWagDhcpMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3))
if mibBuilder.loadTexts: bWagDhcpMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpMIBObjects.setDescription('WAG DHCP statistics are defined in this branch.')
bWagDhcpNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 4))
if mibBuilder.loadTexts: bWagDhcpNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpNotifObjects.setDescription('Notifications of WAG DHCP statistics are defined in this branch.')
bWagSubscriberMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5))
if mibBuilder.loadTexts: bWagSubscriberMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberMIBObjects.setDescription('WAG subscriber statistics are defined in this branch.')
bWagSubscriberNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 6))
if mibBuilder.loadTexts: bWagSubscriberNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberNotifObjects.setDescription('Notifications of WAG subscriber statistics are defined in this branch.')
bWagTunnelStatsMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7))
if mibBuilder.loadTexts: bWagTunnelStatsMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelStatsMIBObjects.setDescription('WAG tunnel statistics are defined in this branch.')
bWagTunnelNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 8))
if mibBuilder.loadTexts: bWagTunnelNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelNotifObjects.setDescription('Notifications of WAG tunnel statistics are defined in this branch.')
bWagCgnatMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9))
if mibBuilder.loadTexts: bWagCgnatMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatMIBObjects.setDescription('WAG CGNAT objects are defined in this branch.')
bWagCgnatNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10))
if mibBuilder.loadTexts: bWagCgnatNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatNotifObjects.setDescription('Notifications of WAG CGNAT are defined in this branch.')
bWagProcessingLatencyMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11))
if mibBuilder.loadTexts: bWagProcessingLatencyMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bWagProcessingLatencyMIBObjects.setDescription('WAG Processing Latency objects are defined in this branch.')
bWagProcessingLatencyNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 12))
if mibBuilder.loadTexts: bWagProcessingLatencyNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bWagProcessingLatencyNotifObjects.setDescription('Notifications of WAG Processing Latency are defined in this branch.')
bWagDhcpv6MIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13))
if mibBuilder.loadTexts: bWagDhcpv6MIBObjects.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpv6MIBObjects.setDescription('WAG DHCPv6 statistics are defined in this branch.')
bWagMHNMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14))
if mibBuilder.loadTexts: bWagMHNMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bWagMHNMIBObjects.setDescription('WAG MHN objects are defined in this branch.')
bWagVrgApiNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 15))
if mibBuilder.loadTexts: bWagVrgApiNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bWagVrgApiNotifObjects.setDescription('Notifications of WAG VrgApi are defined in this branch.')
bWagDsLiteMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16))
if mibBuilder.loadTexts: bWagDsLiteMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bWagDsLiteMIBObjects.setDescription('WAG DSLite objects are defined in this branch.')
bWagDsLiteNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 17))
if mibBuilder.loadTexts: bWagDsLiteNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bWagDsLiteNotifObjects.setDescription('Notifications of WAG DSLite are defined in this branch.')
bWagIpSystemStatsMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 18))
if mibBuilder.loadTexts: bWagIpSystemStatsMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bWagIpSystemStatsMIBObjects.setDescription('WAG IP system statistics objects are defined in this branch.')
bWagRadiusTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1), )
if mibBuilder.loadTexts: bWagRadiusTable.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusTable.setDescription('A list of RADIUS statistics.')
bWagRadiusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagRadiusStatsInterval"))
if mibBuilder.loadTexts: bWagRadiusEntry.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusEntry.setDescription('A logical row in the bWagRadiusTable.')
bWagRadiusStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagRadiusStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusStatsInterval.setDescription('The interval where the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i <n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bWagRadiusIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusIntervalDuration.setDescription('Duration of stats interval in minutes')
bWagRadiusAuthLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAuthLatencyMin.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusAuthLatencyMin.setDescription('The measure of the minimum time interval, during the reporting\n       period, between all Access-Request message(s) sent by the \n       Client Proxy to the AAA process residing in the WAG and the\n       corresponding Access-Accept/Reject message(s) received by the \n       Client Proxy. The value is in microseconds.')
bWagRadiusAuthLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAuthLatencyMax.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusAuthLatencyMax.setDescription('The measure of the maximum time interval, during the reporting\n       period, between all Access-Request message(s) sent by the Client \n       Proxy to the AAA process residing in the WAG and the corresponding \n       Access-Accept/Reject message(s) received by the Client Proxy.\n       The value is in microseconds.')
bWagRadiusAuthLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAuthLatencyAvg.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusAuthLatencyAvg.setDescription('The measure of the average time interval, during the reporting\n       period, between all Access-Request message(s) sent by the Client Proxy \n       to the AAA process residing in the WAG and the corresponding Access-Accept/Reject \n       message(s) received by the Client Proxy.\n       The value is in microseconds.')
bWagRadiusAuthLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAuthLatencyLast.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusAuthLatencyLast.setDescription('The measure of the time interval, during the reporting period,\n       between the most recent Access-Request message(s) sent by the Client Proxy\n       to the AAA process residing in the WAG and the corresponding Access-Accept/Reject \n       message(s) received by the Client Proxy.\n       The value is in microseconds.')
bWagRadiusAcctLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAcctLatencyMin.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusAcctLatencyMin.setDescription('The measure of the minimum time interval, during the reporting\n       period, between all Accounting-Request message(s) (Start/Interim Update/Stop)\n       sent by the Client Proxy to the AAA process residing in the WAG and the corresponding \n       Accounting-Response message received by the Client Proxy. \n       The value is in microseconds.')
bWagRadiusAcctLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAcctLatencyMax.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusAcctLatencyMax.setDescription('The measure of the maximum time interval, during the reporting\n       period, between all Accounting-Request message(s) (Start/Interim Update/Stop)\n       sent by the Client Proxy to the AAA process residing in the WAG and the \n       corresponding Accounting-Response message(s) received by the Client Proxy. \n       The value is in microseconds.')
bWagRadiusAcctLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAcctLatencyAvg.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusAcctLatencyAvg.setDescription('The measure of the average time interval, during the reporting\n       period, between all Accounting-Request message(s) (Start/Interim Update/Stop)\n       sent by the Client Proxy to the AAA process residing in the WAG and the corresponding \n       Accounting-Response message(s) received by the Client Proxy. \n       The value is in microseconds.')
bWagRadiusAcctLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAcctLatencyLast.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusAcctLatencyLast.setDescription('The measure of the time interval, during the reporting period,\n       between the most recent Accounting-Request message (Start/Interim Update/Stop)\n       sent by the Client Proxy to the AAA process residing in the WAG and the corresponding \n       Accounting-Response message(s) received by the Client Proxy. \n       The value is in microseconds.')
bWagRadiusAccessRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAccessRequestSent.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusAccessRequestSent.setDescription('The count of the total number of Access-Request message(s) sent\n        during the reporting period.')
bWagRadiusAccessAcceptReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAccessAcceptReceived.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusAccessAcceptReceived.setDescription('The count of the total number of Access-Accept message(s) received\n        during the reporting period.')
bWagRadiusAccessRejectReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAccessRejectReceived.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusAccessRejectReceived.setDescription('The count of the total number of Access-Reject message(s) received\n        during the reporting period.')
bWagRadiusAcctRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAcctRequestSent.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusAcctRequestSent.setDescription('The count of the total number of Accounting-Request message(s) sent\n        during the reporting period.')
bWagRadiusAcctResponseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusAcctResponseReceived.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusAcctResponseReceived.setDescription('The count of the total number of Accounting-Response message(s) received\n        during the reporting period.')
bWagRadiusCoAAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusCoAAckSent.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusCoAAckSent.setDescription('The count of the total number of CoA-Ack message(s) sent\n        during the reporting period.')
bWagRadiusCoANackSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusCoANackSent.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusCoANackSent.setDescription('The count of the total number of CoA-Nack message(s) sent\n        during the reporting period.')
bWagRadiusCoARequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusCoARequestReceived.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusCoARequestReceived.setDescription('The count of the total number of CoA-Request message(s) received\n        during the reporting period.')
bWagRadiusCoALatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusCoALatencyMin.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusCoALatencyMin.setDescription('The measure of the minimum time interval, during the reporting\n       period, between all CoA-Request message(s) received from the AAA\n       and their corresponding CoA-Ack/Nack message(s) sent by the WAG.\n       The value is in microseconds.')
bWagRadiusCoALatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusCoALatencyMax.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusCoALatencyMax.setDescription('The measure of the maximum time interval, during the reporting\n       period, between all CoA-Request message(s) received from the AAA\n       and their corresponding CoA-Ack/Nack message(s) sent by the WAG.\n       The value is in microseconds.')
bWagRadiusCoALatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusCoALatencyAvg.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusCoALatencyAvg.setDescription('The measure of the average time interval, during the reporting\n       period, between all CoA-Request message(s) received from the AAA\n       and their corresponding CoA-Ack/Nack message(s) sent by the WAG.\n       The value is in microseconds.')
bWagRadiusCoALatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusCoALatencyLast.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusCoALatencyLast.setDescription('The measure of the time interval, during the reporting period,\n       between the most recent CoA-Request message received from the AAA\n       and its corresponding CoA-Ack/Nack message received by the WAG.\n       The value is in microseconds.')
bWagRadiusDMLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusDMLatencyMin.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusDMLatencyMin.setDescription('The measure of the minimum time interval, during the reporting\n       period, between all DM message(s) received from the AAA\n       and their corresponding DM-Ack/Nack message(s) sent by the WAG.\n       The value is in microseconds.')
bWagRadiusDMLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusDMLatencyMax.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusDMLatencyMax.setDescription('The measure of the maximum time interval, during the reporting\n       period, between all DM message(s) received from the AAA\n       and their corresponding DM Ack/Nack message(s) sent by the WAG.\n       The value is in microseconds.')
bWagRadiusDMLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusDMLatencyAvg.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusDMLatencyAvg.setDescription('The measure of the average time interval, during the reporting\n       period, between all DM message(s) received from the AAA\n       and their corresponding DM Ack/Nack message(s) sent by the WAG.\n       The value is in microseconds.')
bWagRadiusDMLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusDMLatencyLast.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusDMLatencyLast.setDescription('The measure of the time interval, during the reporting period,\n       between the most recent DM message received from the AAA\n       and its corresponding DM Ack/Nack message received by the WAG.\n       The value is in microseconds.')
bWagRadiusDMAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusDMAckSent.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusDMAckSent.setDescription('The count of the total number of DM-Ack message(s) sent\n        during the reporting period.')
bWagRadiusDMNackSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusDMNackSent.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusDMNackSent.setDescription('The count of the total number of DM-Nack message(s) Sent\n        during the reporting period.')
bWagRadiusDMRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 1, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagRadiusDMRequestReceived.setStatus('current')
if mibBuilder.loadTexts: bWagRadiusDMRequestReceived.setDescription('The count of the total number of DM-Request message(s) received\n        during the reporting period.')
bWagDhcpTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1), )
if mibBuilder.loadTexts: bWagDhcpTable.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpTable.setDescription('A list of DHCP periodic statistics.')
bWagDhcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagDhcpStatsInterval"))
if mibBuilder.loadTexts: bWagDhcpEntry.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpEntry.setDescription('A logical row in the bWagDhcpTable.')
bWagDhcpStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagDhcpStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpStatsInterval.setDescription('The interval where the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bWagDhcpIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpIntervalDuration.setDescription('Duration of stats interval in minutes')
bWagDhcpDiscoverAckIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverAckIntervalMin.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpDiscoverAckIntervalMin.setDescription('The measure of the minimum time interval, during the reporting period,\n        between all DHCP Discover message(s) received by the WAG and their corresponding\n        DHCP Ack message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDhcpDiscoverAckIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverAckIntervalMax.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpDiscoverAckIntervalMax.setDescription('The measure of the maximum time interval, during the reporting period,\n        between all DHCP Discover message(s) received by the WAG and their corresponding\n        DHCP Ack message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDhcpDiscoverAckIntervalAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverAckIntervalAvg.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpDiscoverAckIntervalAvg.setDescription('The measure of the average time interval, during the reporting period,\n        between all DHCP Discover message(s) received by the WAG and their corresponding\n        DHCP Ack message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDhcpDiscoverAckIntervalLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverAckIntervalLast.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpDiscoverAckIntervalLast.setDescription('The measure of the time interval, during the reporting period,\n        between the most recent DHCP Discover message received by the WAG\n        and its corresponding DHCP Ack message sent by the WAG.\n        The value is in microseconds.')
bWagDhcpRequestAckLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpRequestAckLatencyMin.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpRequestAckLatencyMin.setDescription('The measure of the minimum time interval, during the reporting period,\n        between all DHCP Request message(s) received by the WAG and their corresponding\n        DHCP Ack message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDhcpRequestAckLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpRequestAckLatencyMax.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpRequestAckLatencyMax.setDescription('The measure of the maximum time interval, during the reporting period,\n        between all DHCP Request message(s) received by the WAG and their corresponding\n        DHCP Ack message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDhcpRequestAckLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpRequestAckLatencyAvg.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpRequestAckLatencyAvg.setDescription('The measure of the average time interval, during the reporting period,\n        between all DHCP Request message(s) received by the WAG and their corresponding\n        DHCP Ack message(s) is sent by the WAG.\n        The value is in microseconds.')
bWagDhcpRequestAckLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpRequestAckLatencyLast.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpRequestAckLatencyLast.setDescription('The measure of the time interval, during the reporting period,\n        between the most recent DHCP Request message received by the WAG\n        and its corresponding DHCP Ack message sent by the WAG.\n        The value is in microseconds.')
bWagDhcpDiscoverOfferLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverOfferLatencyMin.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpDiscoverOfferLatencyMin.setDescription('The measure of the minimum time interval, during the reporting period,\n        between all DHCP Discover message(s) received by the WAG and their corresponding\n        DHCP Offer message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDhcpDiscoverOfferLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverOfferLatencyMax.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpDiscoverOfferLatencyMax.setDescription('The measure of the maximum time interval, during the reporting period,\n        between all DHCP Discover message(s) received by the WAG and their corresponding\n        DHCP Offer message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDhcpDiscoverOfferLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverOfferLatencyAvg.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpDiscoverOfferLatencyAvg.setDescription('The measure of the average time interval, during the reporting period,\n        between all DHCP Discover message(s) received by the WAG and their corresponding\n        DHCP Offer message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDhcpDiscoverOfferLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverOfferLatencyLast.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpDiscoverOfferLatencyLast.setDescription('The measure of the time interval, during the reporting period,\n        between the most recent DHCP Discover message received by the WAG\n        and its corresponding DHCP Offer message sent by the WAG.\n        The value is in microseconds.')
bWagDhcpDiscoverReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpDiscoverReceived.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpDiscoverReceived.setDescription('The count of the total number of DHCP Discover message(s) received\n        during the reporting period.')
bWagDhcpOfferSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpOfferSent.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpOfferSent.setDescription('The count of the total number of DHCP Offer message(s) sent\n        during the reporting period.')
bWagDhcpRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpRequestReceived.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpRequestReceived.setDescription('The count of the total number of DHCP Request message(s) received\n        during the reporting period.')
bWagDhcpAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpAckSent.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpAckSent.setDescription('The count of the total number of DHCP Ack message(s) sent\n        during the reporting period.')
bWagDhcpNackSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpNackSent.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpNackSent.setDescription('The count of the total number of DHCP Nack message(s) sent\n        during the reporting period.')
bWagDhcpOfferRequestIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpOfferRequestIntervalMin.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpOfferRequestIntervalMin.setDescription('The measure of the minimum time interval, during the reporting period,\n        between all DHCP Offer message(s) sent by the WAG and the corresponding\n        DHCP Request message(s) received by the WAG.\n        The value is in microseconds.')
bWagDhcpOfferRequestIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpOfferRequestIntervalMax.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpOfferRequestIntervalMax.setDescription('The measure of the maximum time interval, during the reporting period,\n        between all DHCP Offer message(s) sent by the WAG and the corresponding\n        DHCP Request message(s) received by the WAG.\n        The value is in microseconds.')
bWagDhcpOfferRequestIntervalAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpOfferRequestIntervalAvg.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpOfferRequestIntervalAvg.setDescription('The measure of the average time interval, during the reporting period,\n        between all DHCP Offer message(s) sent by the WAG and the corresponding\n        DHCP Request message(s) received by the WAG.\n        The value is in microseconds.')
bWagDhcpOfferRequestIntervalLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpOfferRequestIntervalLast.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpOfferRequestIntervalLast.setDescription('The measure of the time interval, during the reporting period,\n        between the most recent DHCP Offer message sent by the WAG\n        and its corresponding DHCP Request message received by the WAG.\n        The value is in microseconds.')
bWagDhcpTPSTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 2), )
if mibBuilder.loadTexts: bWagDhcpTPSTable.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpTPSTable.setDescription('A list of DHCP TPS periodic statistics.')
bWagDhcpTPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 2, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagDhcpTPSInterval"))
if mibBuilder.loadTexts: bWagDhcpTPSEntry.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpTPSEntry.setDescription('A logical row in the bWagDhcpTPSTable.')
bWagDhcpTPSInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagDhcpTPSInterval.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpTPSInterval.setDescription('The interval where the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bWagDhcpTPSIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpTPSIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpTPSIntervalDuration.setDescription('Configured interval duration of DHCP transactions in seconds')
bWagDhcpTPSLow = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpTPSLow.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpTPSLow.setDescription('The low value configured for the particular interval')
bWagDhcpTPSHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpTPSHigh.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpTPSHigh.setDescription('The high value configured for the particular interval')
bWagDhcpTPS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDhcpTPS.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpTPS.setDescription('Total number of DHCP transactions for the DHCP tps interval')
bWagSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1), )
if mibBuilder.loadTexts: bWagSubscriberTable.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberTable.setDescription('A list of WAG subscriber statistics.')
bWagSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagSubscriberStatsInterval"))
if mibBuilder.loadTexts: bWagSubscriberEntry.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberEntry.setDescription('A logical row in the bWagSubscriberTable.')
bWagSubscriberStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagSubscriberStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberStatsInterval.setDescription('The interval for acculating the measurements.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data, greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bWagSubscriberIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberIntervalDuration.setDescription('Duration of statistics interval (or reporting period) in minutes')
bWagSubscriberActivationsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberActivationsCount.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberActivationsCount.setDescription('The total number of subscriber activations during the reporting period.\n       This includes all subscriber attaches into the WAG system. For example, if \n       a subscriber attaches and then detaches and attaches again, it will be considered \n       as 2 activations.')
bWagSubscriberDeletionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberDeletionsCount.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberDeletionsCount.setDescription('The total number of subscriber deletions during the the reporting period.')
bWagSubscriberAuthenticationsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberAuthenticationsCount.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberAuthenticationsCount.setDescription('The total number of authentications during the reporting period.\n       Includes (a) number of times pre-authenticated subscribers\n                     are admitted into the WAG, and\n                (b) number of times subscribers have been authenticated via captive portal.\n\n       Note 1: A pre-authenticated subscriber is one for whom a captive \n       portal URL is not received in the RADIUS Access-Accept message.\n       Note 2: Multiple successful authentications for the same subscriber\n       are counted independent of each other.')
bWagSubscriberRedirectionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberRedirectionsCount.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberRedirectionsCount.setDescription('The total number of subscriber redirections to the captive portal \n       during the reporting period. One subscriber can contribute multiple times this count.')
bWagSubscriberRedirectionsByAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberRedirectionsByAcl.setStatus('obsolete')
if mibBuilder.loadTexts: bWagSubscriberRedirectionsByAcl.setDescription('The total number of redirections of authenticated subscribers \n       due to an ACL rule during the reporting period. This count will \n       increment for each redirection of a HTTP-GET request for an \n       authenticated subscriber if Benu-ACL-Redirect-URL VSA was \n       received for the subscriber')
bWagSubscriberAPMobilityOccurencesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberAPMobilityOccurencesCount.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberAPMobilityOccurencesCount.setDescription('The total number of AP mobility occurences for all \n       subscribers during the reporting period.')
bWagSubscriberDeletionsByDMCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberDeletionsByDMCount.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberDeletionsByDMCount.setDescription('The total number of subscriber deletions by Disconnect-Message \n       during the reporting period.')
bWagSubscriberIdleTimeoutCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberIdleTimeoutCount.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberIdleTimeoutCount.setDescription('The total number of automatic subscriber deletions due to \n       idle timeout during the reporting period.')
bWagSubscriberSessionTimeoutPreauthCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberSessionTimeoutPreauthCount.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberSessionTimeoutPreauthCount.setDescription('The total number of  automatic deletions due to session timeout \n       of pre-authenticated subscribers during the reporting period.')
bWagSubscriberSessionTimeoutAuthviaportalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberSessionTimeoutAuthviaportalCount.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberSessionTimeoutAuthviaportalCount.setDescription('The total number of automatic deletions due to session timeout \n        of subscribers that were authenticated via captive portal during \n        the reporting period.')
bWagSubscriberDroppedByLicenseManagerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberDroppedByLicenseManagerCount.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberDroppedByLicenseManagerCount.setDescription('The total number of subscriber attach attempts that are dropped\n       due to license restrictions during the reporting period.')
bWagSubscriberThrottlingOccurrencesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberThrottlingOccurrencesCount.setStatus('obsolete')
if mibBuilder.loadTexts: bWagSubscriberThrottlingOccurrencesCount.setDescription('The total number of times an attempt by any subscriber to reach\n      the captive portal was throttled during the reporting period.')
bWagSubscriberThrottledCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberThrottledCount.setStatus('obsolete')
if mibBuilder.loadTexts: bWagSubscriberThrottledCount.setDescription('The number of subscribers whose attempt to reach the captive portal\n      was throttled during the reporting period.')
bWagSubscriberAbsoluteTimeoutCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberAbsoluteTimeoutCount.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberAbsoluteTimeoutCount.setDescription('The total number of automatic subscriber deletions due to \n       absolute timeout during the reporting period.')
bWagSubscriberAuthsViaPortalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberAuthsViaPortalCount.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberAuthsViaPortalCount.setDescription('The total number of  authentications via captive portal \n        during the reporting period.')
bWagSubscriberAuthenticationsCountVia8021x = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberAuthenticationsCountVia8021x.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberAuthenticationsCountVia8021x.setDescription('The total number of  authentications via 802.1x \n        during the reporting period.')
bWagSubscriberAuthenticationsCountViaSingleStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberAuthenticationsCountViaSingleStatic.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberAuthenticationsCountViaSingleStatic.setDescription('The total number of  authentications via B2B Single Static\n        during the reporting period.')
bWagSubscriberAuthenticationsCountViaRoutedSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberAuthenticationsCountViaRoutedSubnet.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberAuthenticationsCountViaRoutedSubnet.setDescription('The total number of  authentications via B2B Routed Subnet\n        during the reporting period.')
bWagSubscriberSessionTimeoutAuthVia8021x = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberSessionTimeoutAuthVia8021x.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberSessionTimeoutAuthVia8021x.setDescription('The total number of automatic deletions due to session timeout\n        of subscribers that were authenticated via 802.1x during the \n        reporting period.')
bWagSubscriberHomeTotalSubsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberHomeTotalSubsDeleted.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberHomeTotalSubsDeleted.setDescription('The total number of home subscriber deletions during the the reporting period.')
bWagSubscriberHomeTransientSubsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberHomeTransientSubsDeleted.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberHomeTransientSubsDeleted.setDescription('The total number of home transient subscriber deletions during the the reporting period.')
bWagSubscriberHomeUserStaticSubsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberHomeUserStaticSubsDeleted.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberHomeUserStaticSubsDeleted.setDescription('The total number of home user static subscriber deletions during the the reporting period.')
bWagSubscriberHomeDhcpStaticSubsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberHomeDhcpStaticSubsDeleted.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberHomeDhcpStaticSubsDeleted.setDescription('The total number of home dhcp static subscriber deletions during the the reporting period.')
bWagSubscriberHomeDhcpDynSubsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberHomeDhcpDynSubsDeleted.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberHomeDhcpDynSubsDeleted.setDescription('The total number of home dhcp dynamic subscriber deletions during the the reporting period.')
bWagSubscriberHomePubStaticSubsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberHomePubStaticSubsDeleted.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberHomePubStaticSubsDeleted.setDescription('The total number of home public subscriber deletions during the the reporting period.')
bWagSubscriberSpWifiActivationsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberSpWifiActivationsCount.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberSpWifiActivationsCount.setDescription('The total number of Spwifi subscriber activations during the reporting period.\n       This includes all Spwifi subscriber attaches into the WAG system. For example, if \n       a subscriber attaches and then detaches and attaches again, it will be considered \n       as 2 activations.')
bWagSubscriberHomeActivationsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberHomeActivationsCount.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberHomeActivationsCount.setDescription('The total number of Home subscriber activations during the reporting period.\n       This includes all Home subscriber attaches into the WAG system. For example, if \n       a subscriber attaches and then detaches and attaches again, it will be considered \n       as 2 activations.')
bWagSubscriberDsLiteActivationsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagSubscriberDsLiteActivationsCount.setStatus('current')
if mibBuilder.loadTexts: bWagSubscriberDsLiteActivationsCount.setDescription('The total number of DSLite subscriber activations during the reporting period.\n       This includes all DSLite subscriber attaches into the WAG system. For example, if \n       a subscriber attaches and then detaches and attaches again, it will be considered \n       as 2 activations.')
bWagNumCurrentSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentSubscribers.setDescription('The current number of subscribers. This count includes authenticated,\n       unauthenticated, and home subscribers.')
bWagNumAuthenticatedSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumAuthenticatedSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagNumAuthenticatedSubscribers.setDescription('The total number of authenticated subscribers.')
bWagNumUnauthenticatedSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumUnauthenticatedSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagNumUnauthenticatedSubscribers.setDescription('The total number of unauthenticated subscribers.')
bWagNumSubsWithPrivateIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumSubsWithPrivateIPAddress.setStatus('current')
if mibBuilder.loadTexts: bWagNumSubsWithPrivateIPAddress.setDescription('The total number of subscribers with private IP address.')
bWagNumAuthSubsWithPublicIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumAuthSubsWithPublicIPAddress.setStatus('current')
if mibBuilder.loadTexts: bWagNumAuthSubsWithPublicIPAddress.setDescription('The total number of authenticated subscribers with public IP address.')
bWagNumUnAuthSubsWithPublicIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumUnAuthSubsWithPublicIPAddress.setStatus('current')
if mibBuilder.loadTexts: bWagNumUnAuthSubsWithPublicIPAddress.setDescription('The total number of un authenticated subscribers with public IP address.')
bWagNumMigrantSubscribersCount = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumMigrantSubscribersCount.setStatus('current')
if mibBuilder.loadTexts: bWagNumMigrantSubscribersCount.setDescription('The count of the total number of migrant subscribers. All\n      subscribers start out as migrant subscribers until an attempt\n      is made to get authenticated.')
bWagNumRedirectedSubscribersCount = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumRedirectedSubscribersCount.setStatus('current')
if mibBuilder.loadTexts: bWagNumRedirectedSubscribersCount.setDescription('The count of the total number of subscribers redirected to\n        captive portal. ')
bWagNumSubsAuthenticatedWithIPv6Prefix = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumSubsAuthenticatedWithIPv6Prefix.setStatus('current')
if mibBuilder.loadTexts: bWagNumSubsAuthenticatedWithIPv6Prefix.setDescription('The total number of authenticated subscribers with IPv6 prefix.')
bWagNumCurrent8021xSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrent8021xSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrent8021xSubscribers.setDescription('The current number of 802.1x subscribers.')
bWagNumPreAuthenticatedSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumPreAuthenticatedSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagNumPreAuthenticatedSubscribers.setDescription('The total number of pre-authenticated subscribers.')
bWagNumCurrentSingleStaticSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentSingleStaticSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentSingleStaticSubscribers.setDescription('The current number of Single Static subscribers.')
bWagNumCurrentRoutedSubnetSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentRoutedSubnetSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentRoutedSubnetSubscribers.setDescription('The current number of Routed Subnet subscribers.')
bWagNumSubsUnauthenticatedWithIPv6Prefix = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumSubsUnauthenticatedWithIPv6Prefix.setStatus('current')
if mibBuilder.loadTexts: bWagNumSubsUnauthenticatedWithIPv6Prefix.setDescription('The total number of unauthenticated subscribers with IPv6 prefix.')
bWagNumSubsViaStaticAuthPolicy = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumSubsViaStaticAuthPolicy.setStatus('current')
if mibBuilder.loadTexts: bWagNumSubsViaStaticAuthPolicy.setDescription('The total number of subscribers with static portal authentication\n      policy.')
bWagNumCurrentHomeSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentHomeSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentHomeSubscribers.setDescription('The current number of home subscribers.')
bWagNumCurrentSPWiFiSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentSPWiFiSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentSPWiFiSubscribers.setDescription('The current number of SP-WiFi subscribers.')
bWagNumCurrentHomeTransientSubs = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentHomeTransientSubs.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentHomeTransientSubs.setDescription('The current number of transient home subscribers.')
bWagNumCurrentHomeUserStatSubs = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentHomeUserStatSubs.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentHomeUserStatSubs.setDescription('The current number of user static home subscribers.')
bWagNumCurrentHomeDhcpStatSubs = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentHomeDhcpStatSubs.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentHomeDhcpStatSubs.setDescription('The current number of static DHCP home subscribers.')
bWagNumCurrentHomeDhcpDynSubs = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentHomeDhcpDynSubs.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentHomeDhcpDynSubs.setDescription('The current number of dynamic DHCP home subscribers.')
bWagNumCurrentHomePubStatSubs = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentHomePubStatSubs.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentHomePubStatSubs.setDescription('The current number public static home subscribers.')
bWagNumPreAuthSpwifiSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumPreAuthSpwifiSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagNumPreAuthSpwifiSubscribers.setDescription('The total number of pre-authenticated SPWifi subscribers.')
bWagNumPreAuthHomeSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumPreAuthHomeSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagNumPreAuthHomeSubscribers.setDescription('The total number of pre-authenticated Home subscribers.')
bWagNumPreAuthenticatedSubscribersS2aPmip6 = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumPreAuthenticatedSubscribersS2aPmip6.setStatus('current')
if mibBuilder.loadTexts: bWagNumPreAuthenticatedSubscribersS2aPmip6.setDescription('The total number of pre-authenticated PMIPv6 subscribers.')
bWagNumCurrentSSIDS2aSubscribersPmip6 = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentSSIDS2aSubscribersPmip6.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentSSIDS2aSubscribersPmip6.setDescription('The current number of PMIPv6 subscribers.')
bWagNumCurrentDSLiteSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentDSLiteSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentDSLiteSubscribers.setDescription('The current number of DSLite subscribers.')
bWagPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10), )
if mibBuilder.loadTexts: bWagPolicyTable.setStatus('current')
if mibBuilder.loadTexts: bWagPolicyTable.setDescription('A list of policies and the relevant subscription data')
bWagPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagPolicyType"), (0, "BENU-WAG-STATS-MIB", "bWagPolicyIndex"))
if mibBuilder.loadTexts: bWagPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: bWagPolicyEntry.setDescription('A logical row in the bWagPolicyTable.')
bWagPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("qos", 1), ("li", 2), ("acl", 3))))
if mibBuilder.loadTexts: bWagPolicyType.setStatus('current')
if mibBuilder.loadTexts: bWagPolicyType.setDescription('This object is used to identify the type of policy.')
bWagPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10, 1, 2), Integer32())
if mibBuilder.loadTexts: bWagPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: bWagPolicyIndex.setDescription('A number uniquely identifying the policy.')
bWagPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagPolicyName.setStatus('current')
if mibBuilder.loadTexts: bWagPolicyName.setDescription('Name of the policy.')
bWagNumOfSubscribersWithPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumOfSubscribersWithPolicy.setStatus('current')
if mibBuilder.loadTexts: bWagNumOfSubscribersWithPolicy.setDescription('Total number subscribed to the policy.')
bWagNumOfAuthSubscribersWithPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumOfAuthSubscribersWithPolicy.setStatus('current')
if mibBuilder.loadTexts: bWagNumOfAuthSubscribersWithPolicy.setDescription('Total number of authenticated subscribers subscribed to the policy.')
bWagNumOfUnAuthSubscribersWithPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 5, 10, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumOfUnAuthSubscribersWithPolicy.setStatus('current')
if mibBuilder.loadTexts: bWagNumOfUnAuthSubscribersWithPolicy.setDescription('Total number of unauthenticated subscribers subscribed to the policy.')
bWagTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1), )
if mibBuilder.loadTexts: bWagTunnelTable.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelTable.setDescription('A list of WAG Tunnel statistics.')
bWagTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagTunnelStatsInterval"))
if mibBuilder.loadTexts: bWagTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelEntry.setDescription('A logical row in the bWagTunnelTable.')
bWagTunnelStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagTunnelStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelStatsInterval.setDescription('The interval during which the measurements are accumulated.\n        Interval index 1 indicates the latest interval for which\n        statistics accumulation is completed. Older the statistics,\n        greater the interval index value. In a system supporting a\n        history of n intervals with interval count 1 and interval\n        count n, the most and the least recent intervals respectively,\n        the following apply at the end of an interval:\n        - statistics for interval count n are discarded\n        - the statistics for interval count i become statistics\n          for interval count i + 1, where 1 <= i < n\n        - current statistics become statistics for interval count 1.')
bWagTunnelIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelIntervalDuration.setDescription('Duration of statistics accumulation interval in minutes.')
bWagTunnelPktsRxdGRE = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdGRE.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelPktsRxdGRE.setDescription('The total number of GRE packets received by WAGMGR over a GRE\n        tunnel during the measurement interval.')
bWagTunnelPktsRxdGREPayloadTEB = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdGREPayloadTEB.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelPktsRxdGREPayloadTEB.setDescription('The total number of GRE packets of protocol type\n        Transparent Ethernet Bridging received by WAGMGR over\n        a GRE tunnel during the measurement interval,\n        i.e, GRE packets with protocol type field in the header\n        set to 0x6558.')
bWagTunnelPktsRxdGREPayloadMPLS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdGREPayloadMPLS.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelPktsRxdGREPayloadMPLS.setDescription('The total number of GRE packets of protocol type\n        Multiprotocol Label Switching received by WAGMGR over\n        a GRE tunnel during the measurement interval,\n        i.e, GRE packets with protocol type field in the header\n        set to 0x8847.')
bWagTunnelPktsEncapsulatedGRE = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsEncapsulatedGRE.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelPktsEncapsulatedGRE.setDescription('The total number of packets encapsulated as GRE packets\n        by the WAGMGR to be tunneled during the measurement interval.')
bWagTunnelPktsDecapsulatedGRE = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsDecapsulatedGRE.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelPktsDecapsulatedGRE.setDescription('The total number of packets received over a GRE tunnel\n        that are subsequently decapsulated by the WAGMGR during\n        the measurement interval.')
bWagTunnelPktsRxdARP = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdARP.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelPktsRxdARP.setDescription('The total number of GRE-encapsulated ARP packets received\n        over a tunnel by the WAGMGR during the measurement interval.')
bWagTunnelPktsRxdDHCP = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdDHCP.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelPktsRxdDHCP.setDescription('The total number of GRE-encapsulated DHCP packets received\n        over a tunnel by the WAGMGR during the measurement interval.')
bWagTunnelPktsRxdDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdDNS.setStatus('obsolete')
if mibBuilder.loadTexts: bWagTunnelPktsRxdDNS.setDescription('The total number of GRE-encapsulated DNS packets received\n        over a tunnel by the WAGMGR during the measurement interval.')
bWagTunnelPktsRxdHTTP = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdHTTP.setStatus('obsolete')
if mibBuilder.loadTexts: bWagTunnelPktsRxdHTTP.setDescription('The total number of GRE-encapsulated HTTP packets received\n        over a tunnel by the WAGMGR during the measurement interval.')
bWagTunnelPktsRxdHTTPGetReq = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdHTTPGetReq.setStatus('obsolete')
if mibBuilder.loadTexts: bWagTunnelPktsRxdHTTPGetReq.setDescription('The total number of GRE-encapsulated HTTP-GET packets received\n        over a tunnel by the WAGMGR during the measurement interval.')
bWagTunnelPktsTxdHTTP = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsTxdHTTP.setStatus('obsolete')
if mibBuilder.loadTexts: bWagTunnelPktsTxdHTTP.setDescription('The total number of GRE-encapsulated HTTP packets transmitted\n        by the WAGMGR over a tunnel during the measurement interval.')
bWagTunnelPktsTxdHTTPRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsTxdHTTPRedir.setStatus('obsolete')
if mibBuilder.loadTexts: bWagTunnelPktsTxdHTTPRedir.setDescription('The total number of GRE-encapsulated HTTP packets with\n        status code 302 transmitted by the WAGMGR over a tunnel\n        during the measurement interval.')
bWagTunnelPktsRxdHTTPS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdHTTPS.setStatus('obsolete')
if mibBuilder.loadTexts: bWagTunnelPktsRxdHTTPS.setDescription('The total number of GRE-encapsulated HTTPS packets received\n        over a tunnel by the WAGMGR during the measurement interval.')
bWagTunnelPktsRxdTCPSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdTCPSyn.setStatus('obsolete')
if mibBuilder.loadTexts: bWagTunnelPktsRxdTCPSyn.setDescription('The total number of GRE-encapsulated TCP SYN packets received\n        over a tunnel by the WAGMGR during the measurement interval.')
bWagTunnelPktsTxdTCPSynAck = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsTxdTCPSynAck.setStatus('obsolete')
if mibBuilder.loadTexts: bWagTunnelPktsTxdTCPSynAck.setDescription('The total number of GRE-encapsulated TCP SYN-ACK packets\n        transmitted by the WAGMGR over a tunnel during the\n        measurement interval.')
bWagTunnelPktsTxdTCPFin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsTxdTCPFin.setStatus('obsolete')
if mibBuilder.loadTexts: bWagTunnelPktsTxdTCPFin.setDescription('The total number of GRE-encapsulated TCP FIN packets\n        transmitted by the WAGMGR over a tunnel during the\n        measurement interval.')
bWagTunnelPktsRxdTCPFinAck = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsRxdTCPFinAck.setStatus('obsolete')
if mibBuilder.loadTexts: bWagTunnelPktsRxdTCPFinAck.setDescription('The total number of GRE-encapsulated TCP FIN/ACK packets\n        received over a tunnel by the WAGMGR during the\n        measurement interval.')
bWagTunnelPktsTxdTCPAck2Fin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelPktsTxdTCPAck2Fin.setStatus('obsolete')
if mibBuilder.loadTexts: bWagTunnelPktsTxdTCPAck2Fin.setDescription('The total number of GRE-encapsulated TCP ACK packets transmitted\n        in response to a TCP FIN packet by the WAGMGR during the\n        measurement interval.')
bWagTunnelCreatedDynamically = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelCreatedDynamically.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelCreatedDynamically.setDescription('The total number of dynamically established GRE tunnels during\n        the measurement interval.')
bWagTunnelCreatedStatically = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelCreatedStatically.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelCreatedStatically.setDescription('The total number of statically established GRE tunnels during\n        the measurement interval.')
bWagTunnelDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeleted.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelDeleted.setDescription('The total number of GRE tunnels deleted during\n        the measurement interval.')
bWagTunnelDeletedDueToInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeletedDueToInactivity.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelDeletedDueToInactivity.setDescription('The total number of GRE tunnels deleted due to inactivity\n         during the measurement interval.')
bWagTunnelDeletedByCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeletedByCommand.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelDeletedByCommand.setDescription('The total number of GRE tunnels deleted by an operator command\n        during the measurement interval.')
bWagTunnelMaxSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelMaxSupported.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelMaxSupported.setDescription('The total number of GRE/L2TPV3 tunnels supported in WAG.')
bWagTunnelMaxCountReached = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelMaxCountReached.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelMaxCountReached.setDescription('The maximum value of the total number of GRE/L2TPV3 tunnels reached\n        during the measurement interval.')
bWagTunnelTunnelsLookupFound = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelTunnelsLookupFound.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelTunnelsLookupFound.setDescription('The total number of successful tunnel lookup operations\n        performed in the WAGMGR during a measurement interval.')
bWagTunnelTunnelsLookupNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelTunnelsLookupNotFound.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelTunnelsLookupNotFound.setDescription('The total number of unsuccesful tunnel lookup operations\n        performed in the WAGMGR during a measurement interval.')
bWagTunnelCountHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelCountHighThreshold.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelCountHighThreshold.setDescription('The high threshold for the number of tunnels that are created.\n        If no bWagTunHighThresholdReached event was previously generated, or,\n        if a bWagTunLowThresholdReached event was previously generated, and\n        the current count of tunnels exceeds the value of\n        bWagTunnelCountHighThreshold, then a bWagTunHighThresholdReached event\n        will be generated. No more bWagTunHighThresholdReached events will be\n        generated until the value for the current count of tunnels becomes\n        equal to or less than the value of bWagTunnelCountLowThreshold.')
bWagTunnelCountLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelCountLowThreshold.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelCountLowThreshold.setDescription('The low threshold for the number of tunnels that are created.\n        If a bWagTunHighThresholdReached event was previously generated, and,\n        the current count of tunnels falls below the value of\n        bWagTunnelCountLowThreshold, then a bWagTunLowThresholdReached event\n        will be generated. No more bWagTunLowThresholdReached events will be\n        generated until the value for the current count of tunnels becomes\n        equal to or greater than the value of bWagTunnelCountHighThreshold.')
bWagTunnelDeletedDueToReject = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeletedDueToReject.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelDeletedDueToReject.setDescription('The total number of GRE tunnels deleted due to AAA Reject\n        during the measurement interval.')
bWagTunnelDeletedDueToAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeletedDueToAbort.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelDeletedDueToAbort.setDescription('The total number of GRE tunnels deleted due to AAA Abort\n        during the measurement interval.')
bWagTunnelDeletedDueToMacResFail = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeletedDueToMacResFail.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelDeletedDueToMacResFail.setDescription('The total number of GRE tunnels deleted due to MAC resolution\n        failure during the measurement interval.')
bWagTunnelDeletedDueToLifDown = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeletedDueToLifDown.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelDeletedDueToLifDown.setDescription('The total number of GRE tunnels deleted due to LIF down\n         during the measurement interval.')
bWagTunnelDeletedDueToB2bSubsDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagTunnelDeletedDueToB2bSubsDelete.setStatus('current')
if mibBuilder.loadTexts: bWagTunnelDeletedDueToB2bSubsDelete.setDescription('The total number of GRE tunnels deleted due to B2B subscriber\n        delete during the measurement interval.')
bWagL2tpv3TunnelPktsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsRxd.setStatus('current')
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsRxd.setDescription('The total number of L2TPV3 packets received by WAGMGR over a L2TPV3\n        tunnel during the measurement interval.')
bWagL2tpv3TunnelPktsEncapsulated = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsEncapsulated.setStatus('current')
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsEncapsulated.setDescription('The total number of packets encapsulated as L2TPV3 packets\n        by the WAGMGR to be tunneled during the measurement interval.')
bWagL2tpv3TunnelPktsDecapsulated = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsDecapsulated.setStatus('current')
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsDecapsulated.setDescription('The total number of packets received over a L2TPV3 tunnel\n        that are subsequently decapsulated by the WAGMGR during\n        the measurement interval.')
bWagL2tpv3TunnelPktsRxdARP = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsRxdARP.setStatus('current')
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsRxdARP.setDescription('The total number of L2TPV3-encapsulated ARP packets received\n        over a tunnel by the WAGMGR during the measurement interval.')
bWagL2tpv3TunnelPktsRxdDHCP = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsRxdDHCP.setStatus('current')
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsRxdDHCP.setDescription('The total number of L2TPV3-encapsulated DHCP packets received\n        over a tunnel by the WAGMGR during the measurement interval.')
bWagL2tpv3TunnelPktsRxdDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsRxdDNS.setStatus('obsolete')
if mibBuilder.loadTexts: bWagL2tpv3TunnelPktsRxdDNS.setDescription('The total number of L2TPV3-encapsulated DNS packets received\n        over a tunnel by the WAGMGR during the measurement interval.')
bWagL2tpv3TunnelCreatedDynamically = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelCreatedDynamically.setStatus('current')
if mibBuilder.loadTexts: bWagL2tpv3TunnelCreatedDynamically.setDescription('The total number of dynamically established L2TPV3 tunnels during\n        the measurement interval.')
bWagL2tpv3TunnelDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelDeleted.setStatus('current')
if mibBuilder.loadTexts: bWagL2tpv3TunnelDeleted.setDescription('The total number of L2TPV3 tunnels deleted during\n        the measurement interval.')
bWagL2tpv3TunnelDeletedDueToInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelDeletedDueToInactivity.setStatus('current')
if mibBuilder.loadTexts: bWagL2tpv3TunnelDeletedDueToInactivity.setDescription('The total number of L2TPV3 tunnels deleted due to inactivity\n         during the measurement interval.')
bWagL2tpv3TunnelDeletedByCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelDeletedByCommand.setStatus('current')
if mibBuilder.loadTexts: bWagL2tpv3TunnelDeletedByCommand.setDescription('The total number of L2TPV3 tunnels deleted by an operator command\n        during the measurement interval.')
bWagL2tpv3TunnelDeletedDueToLifDown = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 1, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagL2tpv3TunnelDeletedDueToLifDown.setStatus('current')
if mibBuilder.loadTexts: bWagL2tpv3TunnelDeletedDueToLifDown.setDescription('The total number of L2TPV3 tunnels deleted due to LIF down\n         during the measurement interval.')
bWagNumCurrentTunnels = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnels.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentTunnels.setDescription('The current number of tunnels.')
bWagNumTunnelsCreatedDynamically = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsCreatedDynamically.setStatus('current')
if mibBuilder.loadTexts: bWagNumTunnelsCreatedDynamically.setDescription('The total number of dynamically established GRE tunnels.')
bWagNumTunnelsCreatedStatically = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsCreatedStatically.setStatus('current')
if mibBuilder.loadTexts: bWagNumTunnelsCreatedStatically.setDescription('The total number of statically established GRE tunnels.')
bWagNumTunnelsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsDeleted.setStatus('current')
if mibBuilder.loadTexts: bWagNumTunnelsDeleted.setDescription('The total number of GRE tunnels deleted.')
bWagNumTunnelsInactiveDeleted = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsInactiveDeleted.setStatus('current')
if mibBuilder.loadTexts: bWagNumTunnelsInactiveDeleted.setDescription('The total number of GRE tunnels deleted due to inactivity.')
bWagNumTunnelsDeletedByCommand = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsDeletedByCommand.setStatus('current')
if mibBuilder.loadTexts: bWagNumTunnelsDeletedByCommand.setDescription('The total number of GRE tunnels deleted by an operator command.')
bWagNumTunnelsSubsAssociated = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsSubsAssociated.setStatus('current')
if mibBuilder.loadTexts: bWagNumTunnelsSubsAssociated.setDescription('The total number of GRE tunnels with associated subscribers.')
bWagNumTunnelsSchedDeletion = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsSchedDeletion.setStatus('current')
if mibBuilder.loadTexts: bWagNumTunnelsSchedDeletion.setDescription('The total number of GRE tunnels scheduled for automatic deletion.')
bWagNumCurrentTunnelsIPv4 = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnelsIPv4.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentTunnelsIPv4.setDescription('The current number of IPv4 tunnels.')
bWagNumCurrentTunnelsIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnelsIPv6.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentTunnelsIPv6.setDescription('The current number of IPv6 tunnels.')
bWagNumTunnelsDeletedByB2B = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsDeletedByB2B.setStatus('current')
if mibBuilder.loadTexts: bWagNumTunnelsDeletedByB2B.setDescription('The total number of GRE tunnels deleted due to B2B subscriber deletion.')
bWagNumTunnelsDeletedDuetoLIFDown = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumTunnelsDeletedDuetoLIFDown.setStatus('current')
if mibBuilder.loadTexts: bWagNumTunnelsDeletedDuetoLIFDown.setDescription('The total number of GRE tunnels deleted due to logical interface down.')
bWagNumCurrentTunnelsSpWiFi = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnelsSpWiFi.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentTunnelsSpWiFi.setDescription('The  number of tunnels that currently serve Public Wi-Fi\nexclusively.')
bWagNumCurrentTunnelsHome = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnelsHome.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentTunnelsHome.setDescription('The number of tunnels that currently serve Home exclusively.')
bWagNumCurrTunnHomeAndSpWiFi = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrTunnHomeAndSpWiFi.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrTunnHomeAndSpWiFi.setDescription('The number of tunnels that currently serve both Home and Public\nWi-Fi .')
bWagNumCurrentTunnHomeInactive = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnHomeInactive.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentTunnHomeInactive.setDescription('The current number of tunnels for Home in the INACTIVE state.')
bWagNumCurrentTunnHomeAccept = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnHomeAccept.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentTunnHomeAccept.setDescription('The current number of tunnels for Home in the ACCEPT state.')
bWagNumL2tpv3TunnelsCreatedDynamically = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsCreatedDynamically.setStatus('current')
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsCreatedDynamically.setDescription('The total number of dynamically established L2TPV3 tunnels.')
bWagNumL2tpv3TunnelsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsDeleted.setStatus('current')
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsDeleted.setDescription('The total number of L2TPV3 tunnels deleted.')
bWagNumL2tpv3TunnelsInactiveDeleted = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsInactiveDeleted.setStatus('current')
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsInactiveDeleted.setDescription('The total number of L2TPV3 tunnels deleted due to inactivity.')
bWagNumL2tpv3TunnelsDeletedByCommand = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsDeletedByCommand.setStatus('current')
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsDeletedByCommand.setDescription('The total number of L2TPV3 tunnels deleted by an operator command.')
bWagNumL2tpv3TunnelsSubsAssociated = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsSubsAssociated.setStatus('current')
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsSubsAssociated.setDescription('The total number of L2TPV3 tunnels with associated subscribers.')
bWagNumCurrentL2tpv3TunnelsIPv4 = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentL2tpv3TunnelsIPv4.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentL2tpv3TunnelsIPv4.setDescription('The current number of IPv4 L2TPV3 tunnels.')
bWagNumL2tpv3TunnelsDeletedDuetoLIFDown = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsDeletedDuetoLIFDown.setStatus('current')
if mibBuilder.loadTexts: bWagNumL2tpv3TunnelsDeletedDuetoLIFDown.setDescription('The total number of L2TPV3 tunnels deleted due to logical interface down.')
bWagNumCurrentL2tpv3TunnelsSpWiFi = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentL2tpv3TunnelsSpWiFi.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentL2tpv3TunnelsSpWiFi.setDescription('The number of L2TPV3 tunnels that currently serve Public Wi-Fi exclusively.')
bWagNumCurrentTunnelsDSLite = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 7, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagNumCurrentTunnelsDSLite.setStatus('current')
if mibBuilder.loadTexts: bWagNumCurrentTunnelsDSLite.setDescription('The  number of tunnels that currently serve DSLite exclusively.')
bWagCgnatProfileStatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1), )
if mibBuilder.loadTexts: bWagCgnatProfileStatsTable.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatProfileStatsTable.setDescription('A list of CGNAT statistics for profiles.')
bWagCgnatProfileStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagCgnatProfileStatsIndex"))
if mibBuilder.loadTexts: bWagCgnatProfileStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatProfileStatsEntry.setDescription('A logical row in the bWagCgnatProfileTable.')
bWagCgnatProfileStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagCgnatProfileStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatProfileStatsIndex.setDescription('A number uniquely identifying this CGNAT profile.')
bWagCgnatProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileName.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatProfileName.setDescription('The name of the CGNAT profile.')
bWagCgnatProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileType.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatProfileType.setDescription('The type of the CGNAT profile (AuthNapt/UnAuthNapt).')
bWagCgnatProfileNATIPPoolGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileNATIPPoolGroup.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatProfileNATIPPoolGroup.setDescription('IP Pool group name associated with this profile.')
bWagCgnatProfileSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatProfileSubscribers.setDescription('Number of authenticated subscribers currently active in this profile.')
bWagCgnatProfileMaxIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileMaxIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatProfileMaxIPAddresses.setDescription('The maximum number of public IP addresses required to fully service\n      the configured max-subscribers for the profile. This is calculated based\n      on three other configuration parameters: block-size, number of port blocks,\n      and the port range, as shown below:\n\n      1. Port Range = (Upper bound - Lower bound of port numbers) + 1\n      2. Number of subscribers per IP = Port Range/(block-size * blocks)\n      3. Max IP Addresses = ceiling(max-subscribers/Number of subscribers per IP).')
bWagCgnatProfileUsedIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileUsedIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatProfileUsedIPAddresses.setDescription('Number of IP addresses in use in this profile.')
bWagCgnatProfileReservedIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileReservedIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatProfileReservedIPAddresses.setDescription('Number of IP addresses reserved in this profile.')
bWagCgnatProfileTotalPortBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileTotalPortBlocks.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatProfileTotalPortBlocks.setDescription('Number of total port blocks in this profile.\n      This is equivalent to (max-subscribers * block-size) in this profile.')
bWagCgnatProfilePortBlocksUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfilePortBlocksUsed.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatProfilePortBlocksUsed.setDescription('Number of port blocks in use in this profile.')
bWagCgnatProfilePortBlocksReused = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfilePortBlocksReused.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatProfilePortBlocksReused.setDescription('Number of port blocks reused in this profile.\n      This value will always be reported as zero for\n      an unauthenticated CGNAT profile.')
bWagCgnatProfileTotalPoolIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatProfileTotalPoolIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatProfileTotalPoolIPAddresses.setDescription('Total number of IP addresses available in the \n       pool.')
bWagMHNProfileStatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1), )
if mibBuilder.loadTexts: bWagMHNProfileStatsTable.setStatus('current')
if mibBuilder.loadTexts: bWagMHNProfileStatsTable.setDescription('A list of statistics for the MHN profiles.')
bWagMHNProfileStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagMHNProfileStatsIndex"))
if mibBuilder.loadTexts: bWagMHNProfileStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bWagMHNProfileStatsEntry.setDescription('A logical row in the bWagMHNProfileTable.')
bWagMHNProfileStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagMHNProfileStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bWagMHNProfileStatsIndex.setDescription('A number uniquely identifying this MHN profile.')
bWagMHNProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagMHNProfileName.setStatus('current')
if mibBuilder.loadTexts: bWagMHNProfileName.setDescription('The name of the MHN profile.')
bWagMHNProfileNATIPPoolGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagMHNProfileNATIPPoolGroup.setStatus('current')
if mibBuilder.loadTexts: bWagMHNProfileNATIPPoolGroup.setDescription('IP Pool group name associated with this profile.')
bWagMHNProfileMaxSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagMHNProfileMaxSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagMHNProfileMaxSubscribers.setDescription('Maximum number of subscribers per MHN profile.')
bWagMHNProfileMaxIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagMHNProfileMaxIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagMHNProfileMaxIPAddresses.setDescription('The maximum number of public IP addresses required to fully service\n      the configured max-subscribers for the profile.')
bWagMHNProfileUsedIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagMHNProfileUsedIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagMHNProfileUsedIPAddresses.setDescription('Number of IP addresses in use in this profile.')
bWagMHNProfileTotalPortBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagMHNProfileTotalPortBlocks.setStatus('current')
if mibBuilder.loadTexts: bWagMHNProfileTotalPortBlocks.setDescription('Number of total port blocks in this profile. This is equivalent to\n       (block-size) in this profile.')
bWagMHNProfileTotalPoolIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 14, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagMHNProfileTotalPoolIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagMHNProfileTotalPoolIPAddresses.setDescription('Total number of IP addresses available in the \n       pool.')
bWagCgnatIPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2), )
if mibBuilder.loadTexts: bWagCgnatIPStatsTable.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatIPStatsTable.setDescription('A list of statistics per authenticated CGNAT IP address.')
bWagCgnatIPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagCgnatIPStatsIndex"))
if mibBuilder.loadTexts: bWagCgnatIPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatIPStatsEntry.setDescription('A logical row in the bWagCgnatIPStatsTable.')
bWagCgnatIPStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagCgnatIPStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatIPStatsIndex.setDescription('A number uniquely identifying this row in the authenticated CGNAT IP statistics table.')
bWagCgnatPublicIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPublicIPAddressType.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatPublicIPAddressType.setDescription('IP Address type (IPv4 or IPv6).')
bWagCgnatPublicIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPublicIPAddress.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatPublicIPAddress.setDescription('Public IP address assigned to authenticated CGNAT subscribers.')
bWagCgnatIPPortBlocksUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIPPortBlocksUsed.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatIPPortBlocksUsed.setDescription('Number of port blocks in use by authenticated CGNAT subscribers with this public IP address.\n      This is obsolete. benuCgnatStatsMIB provides current CGNAT IP address and port usage statistics.')
bWagCgnatIPPortBlocksFree = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIPPortBlocksFree.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatIPPortBlocksFree.setDescription('Number of port blocks for use by authenticated CGNAT subscribers with this public IP address.')
bWagCgnatIPPortBlocksReused = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIPPortBlocksReused.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatIPPortBlocksReused.setDescription('Number of port blocks reused by authenticated CGNAT subscribers with this public IP address.\n      This is obsolete. benuCgnatStatsMIB provides current CGNAT IP address and port usage statistics.')
bWagCgnatIPSubActiveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIPSubActiveCount.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatIPSubActiveCount.setDescription('Number of authenticated CGNAT subscribers currently active with this public IP address.')
bWagCgnatIPPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIPPacketsDropped.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatIPPacketsDropped.setDescription('Number of packets dropped due to port exhaustion for this public IP address.\n      This value represents the sum of dropped packets for all authenticated CGNAT subscribers for whom NAT \n      was applied with this public IP address.\n      This is obsolete. benuCgnatStatsMIB provides current CGNAT IP address and port usage statistics.')
bWagCgnatPeriodIpTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3), )
if mibBuilder.loadTexts: bWagCgnatPeriodIpTable.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatPeriodIpTable.setDescription('A list of periodic statistics per authenticated CGNAT public IP address including the reserved IP address.\n      This is obsolete. benuCgnatStatsMIB provides current CGNAT IP address and port usage statistics.')
bWagCgnatPeriodIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagCgnatPeriodIpInterval"), (0, "BENU-WAG-STATS-MIB", "bWagCgnatPeriodIpIndex"))
if mibBuilder.loadTexts: bWagCgnatPeriodIpEntry.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatPeriodIpEntry.setDescription('A logical row in the bWagCgnatPeriodIpTable.')
bWagCgnatPeriodIpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagCgnatPeriodIpInterval.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatPeriodIpInterval.setDescription('The interval for acculating the measurements.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data, greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bWagCgnatPeriodIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: bWagCgnatPeriodIpIndex.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatPeriodIpIndex.setDescription('A number uniquely identifying the authenticated CGNAT public IP address.')
bWagCgnatIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIPAddressType.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatIPAddressType.setDescription('IP Address type (IPv4 or IPv6).')
bWagCgnatIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIPAddress.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatIPAddress.setDescription('Public IP address assigned to authenticated CGNAT subscribers including\n      the reserved IP address.')
bWagCgnatPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPacketsDropped.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatPacketsDropped.setDescription('Number of packets dropped due to port exhaustion for this public IP address\n      in this interval. This value represents the sum of dropped packets for all\n      authenticated CGNAT subscribers for whom NAT was applied with this public IP address in this interval.')
bWagCgnatPortBlockMaxUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPortBlockMaxUtil.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatPortBlockMaxUtil.setDescription('The maximum number of port blocks that were allocated to authenticated CGNAT subscribers at any given\n     time during the collection interval is recorded. The ratio of this value to the total number\n     of non-reserved port blocks allocated for this public IP address is calculated and reported as percentage\n     in this object.\n     Units: Percentage in the range 0 - 100.')
bWagCgnatPortBlockMinUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPortBlockMinUtil.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatPortBlockMinUtil.setDescription('The minimum number of port blocks that were allocated to authenticated CGNAT subscribers at any given\n     time during the collection interval is recorded. The ratio of this value to the total number\n     of non-reserved port blocks allocated for this public IP address is calculated and reported as percentage\n     in this object.\n     Units: Percentage in the range 0 - 100.')
bWagCgnatIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatIntervalDuration.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatIntervalDuration.setDescription('Duration of statistics interval in minutes.')
bWagCgnatUnauthIPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4), )
if mibBuilder.loadTexts: bWagCgnatUnauthIPStatsTable.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatUnauthIPStatsTable.setDescription('A list of statistics per unauthenticated CGNAT IP address.')
bWagCgnatUnauthIPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagCgnatUnauthIPStatsIndex"))
if mibBuilder.loadTexts: bWagCgnatUnauthIPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatUnauthIPStatsEntry.setDescription('A logical row in the bWagCgnatUnauthIPStatsTable.')
bWagCgnatUnauthIPStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagCgnatUnauthIPStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatUnauthIPStatsIndex.setDescription('A number uniquely identifying this row in the unauthenticated CGNAT IP statistics table.')
bWagCgnatUnauthPublicIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthPublicIPAddressType.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatUnauthPublicIPAddressType.setDescription('IP Address type (IPv4 or IPv6).')
bWagCgnatUnauthPublicIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthPublicIPAddress.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatUnauthPublicIPAddress.setDescription('Public IP address assigned to unauthenticated CGNAT subscribers.')
bWagCgnatUnauthIPPortBlocksUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthIPPortBlocksUsed.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatUnauthIPPortBlocksUsed.setDescription('Number of port blocks in use by unauthenticated CGNAT subscribers with this public IP address.\n      This is obsolete. benuCgnatStatsMIB provides current CGNAT IP address and port usage statistics.')
bWagCgnatUnauthIPPortBlocksFree = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthIPPortBlocksFree.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatUnauthIPPortBlocksFree.setDescription('Number of port blocks for use by unauthenticated CGNAT subscribers with this public IP address.')
bWagCgnatUnauthIPPortBlocksReused = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthIPPortBlocksReused.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatUnauthIPPortBlocksReused.setDescription('Number of port blocks reused by unauthenticated CGNAT subscribers with this public IP address.\n      This is obsolete. benuCgnatStatsMIB provides current CGNAT IP address and port usage statistics.')
bWagCgnatUnauthIPSubActiveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthIPSubActiveCount.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatUnauthIPSubActiveCount.setDescription('Number of unauthenticated CGNAT subscribers currently active with this public IP address.')
bWagCgnatUnauthPeriodIpTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5), )
if mibBuilder.loadTexts: bWagCgnatUnauthPeriodIpTable.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatUnauthPeriodIpTable.setDescription('A list of periodic statistics per unauthenicated CGNAT public IP address including the reserved IP address.\n      This is obsolete. benuCgnatStatsMIB provides current CGNAT IP address and port usage statistics.')
bWagCgnatUnauthPeriodIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagCgnatUnauthPeriodIpInterval"), (0, "BENU-WAG-STATS-MIB", "bWagCgnatUnauthPeriodIpIndex"))
if mibBuilder.loadTexts: bWagCgnatUnauthPeriodIpEntry.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatUnauthPeriodIpEntry.setDescription('A logical row in the bWagCgnatUnauthPeriodIpTable.')
bWagCgnatUnauthPeriodIpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagCgnatUnauthPeriodIpInterval.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatUnauthPeriodIpInterval.setDescription('The interval for acculating the measurements.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data, greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bWagCgnatUnauthPeriodIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: bWagCgnatUnauthPeriodIpIndex.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatUnauthPeriodIpIndex.setDescription('A number uniquely identifying the unauthenticated CGNAT public IP address.')
bWagCgnatUnauthIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthIPAddressType.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatUnauthIPAddressType.setDescription('IP Address type (IPv4 or IPv6).')
bWagCgnatUnauthIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthIPAddress.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatUnauthIPAddress.setDescription('Public IP address assigned to unauthenticated CGNAT subscribers\n      including the reserved IP address.')
bWagCgnatUnauthPortBlockMaxUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthPortBlockMaxUtil.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatUnauthPortBlockMaxUtil.setDescription('The maximum number of port blocks that were allocated to unauthenticated CGNAT subscribers at any given time during the\n     collection interval is recorded. The ratio of this value to the total number of port blocks\n     available for this public IP address is calculated and reported as percentage in this object.\n     Units: Percentage in the range 0 - 100.')
bWagCgnatUnauthPortBlockMinUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthPortBlockMinUtil.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatUnauthPortBlockMinUtil.setDescription('The minimum number of port blocks that were allocated to unauthenticated CGNAT subscribers at any given time during the\n     collection interval is recorded. The ratio of this value to the total number of port blocks\n     available for this public IP address is calculated and reported as percentage in this object.\n     Units: Percentage in the range 0 - 100.')
bWagCgnatUnauthIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatUnauthIntervalDuration.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatUnauthIntervalDuration.setDescription('Duration of statistics interval in minutes.')
bWagCgnatAuthPortUtilTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 6), )
if mibBuilder.loadTexts: bWagCgnatAuthPortUtilTable.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatAuthPortUtilTable.setDescription('A list of CGNAT statistics for each authenticated subscriber that \n      has crossed port utilization threshold.\n      This is obsolete. benuCgnatStatsMIB provides current CGNAT IP address and port usage statistics.')
bWagCgnatAuthPortUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 6, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagCgnatAuthSubscriberMac"))
if mibBuilder.loadTexts: bWagCgnatAuthPortUtilEntry.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatAuthPortUtilEntry.setDescription('A logical row in the bWagCgnatAuthPortUtilTable.')
bWagCgnatAuthSubscriberMac = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: bWagCgnatAuthSubscriberMac.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatAuthSubscriberMac.setDescription('The MAC address of the authenticated CGNAT subscriber\n       for which the current ports in use has crossed the \n       configured high water mark.')
bWagCgnatAuthSubscriberPortsUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatAuthSubscriberPortsUtil.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatAuthSubscriberPortsUtil.setDescription('Number of ports in use by the authenticated CGNAT subscriber. \n        This does not include the number that can\n        be reclaimed. The value of this object is calculated\n        based on the reclaim time, the ports allocated, and the \n        ports that can be reclaimed at the time of request.')
bWagCgnatPoolGroupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8), )
if mibBuilder.loadTexts: bWagCgnatPoolGroupStatsTable.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatPoolGroupStatsTable.setDescription('A list of CGNAT statistics for pool group.')
bWagCgnatPoolGroupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagCgnatPoolGroupType"), (0, "BENU-WAG-STATS-MIB", "bWagCgnatPoolGroupIndex"))
if mibBuilder.loadTexts: bWagCgnatPoolGroupStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatPoolGroupStatsEntry.setDescription('A logical row in the bWagCgnatPoolGroupTable.')
bWagCgnatPoolGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("unAuthNapt", 1), ("authNapt", 2))))
if mibBuilder.loadTexts: bWagCgnatPoolGroupType.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatPoolGroupType.setDescription('The type of the CGNAT profile (AuthNapt/UnAuthNapt)\n      that this pool group belongs to.')
bWagCgnatPoolGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1, 2), Unsigned32())
if mibBuilder.loadTexts: bWagCgnatPoolGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatPoolGroupIndex.setDescription('Index of the IP Pool group  entry in the table.')
bWagCgnatPoolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPoolGroupName.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatPoolGroupName.setDescription('The name of this pool group.')
bWagCgnatPoolGroupSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPoolGroupSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatPoolGroupSubscribers.setDescription('Number of subscribers currently active with an IP address\n      belonging to this pool group.')
bWagCgnatPoolGroupUsedIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPoolGroupUsedIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatPoolGroupUsedIPAddresses.setDescription('Number of IP addresses in use from this pool group.')
bWagCgnatPoolGroupReservedIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPoolGroupReservedIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatPoolGroupReservedIPAddresses.setDescription('Number of IP addresses reserved from this pool group.')
bWagCgnatPoolGroupTotalIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatPoolGroupTotalIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatPoolGroupTotalIPAddresses.setDescription('Total number of IP addresses available in this pool group.')
bWagDHCPv6Table = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1), )
if mibBuilder.loadTexts: bWagDHCPv6Table.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6Table.setDescription('A list of DHCPv6 periodic statistics.')
bWagDHCPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagDHCPv6StatsInterval"))
if mibBuilder.loadTexts: bWagDHCPv6Entry.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6Entry.setDescription('A logical row in the bWagDHCPv6Table.')
bWagDHCPv6StatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagDHCPv6StatsInterval.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6StatsInterval.setDescription('The interval where the measurements were accumulated.\n       The interval index one indicates the latest interval for which statistics\n       accumulation was completed. Older the statistics interval data greater the\n       interval index value.\n       In a system supporting a history of n intervals with IntervalCount(1) and\n       IntervalCount(n) the most and least recent intervals respectively, the following\n       applies at the end of a interval:\n       - discard the value of IntervalCount(n)\n       - the value of IntervalCount(i) becomes that\n         of IntervalCount(i+1) for  1 <= i < n\n       - the value of IntervalCount(1) becomes that\n         of CurrentCount')
bWagDHCPv6IntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6IntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6IntervalDuration.setDescription('Duration of stats interval in minutes')
bWagDHCPv6SolicitReplyIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitReplyIntervalMin.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6SolicitReplyIntervalMin.setDescription('The measure of the minimum time interval, during the reporting period,\n        between all DHCPv6 Solicit message(s) received by the WAG and their corresponding\n        DHCPv6 Reply message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDHCPv6SolicitReplyIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitReplyIntervalMax.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6SolicitReplyIntervalMax.setDescription('The measure of the maximum time interval, during the reporting period,\n        between all DHCPv6 Solicit message(s) received by the WAG and their corresponding\n        DHCPv6 Reply message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDHCPv6SolicitReplyIntervalAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitReplyIntervalAvg.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6SolicitReplyIntervalAvg.setDescription('The measure of the average time interval, during the reporting period,\n        between all DHCPv6 Solicit message(s) received by the WAG and their corresponding\n        DHCPv6 Reply message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDHCPv6SolicitReplyIntervalLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitReplyIntervalLast.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6SolicitReplyIntervalLast.setDescription('The measure of the time interval, during the reporting period,\n        between the most recent DHCPv6 Solicit message received by the WAG\n        and its corresponding DHCPv6 Reply message sent by the WAG.\n        The value is in microseconds.')
bWagDHCPv6RequestReplyLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6RequestReplyLatencyMin.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6RequestReplyLatencyMin.setDescription('The measure of the minimum time interval, during the reporting period,\n        between all DHCPv6 Request message(s) received by the WAG and their corresponding\n        DHCPv6 Reply message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDHCPv6RequestReplyLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6RequestReplyLatencyMax.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6RequestReplyLatencyMax.setDescription('The measure of the maximum time interval, during the reporting period,\n        between all DHCPv6 Request message(s) received by the WAG and their corresponding\n        DHCPv6 Reply message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDHCPv6RequestReplyLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6RequestReplyLatencyAvg.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6RequestReplyLatencyAvg.setDescription('The measure of the average time interval, during the reporting period,\n        between all DHCPv6 Request message(s) received by the WAG and their corresponding\n        DHCPv6 Reply message(s) is sent by the WAG.\n        The value is in microseconds.')
bWagDHCPv6RequestReplyLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6RequestReplyLatencyLast.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6RequestReplyLatencyLast.setDescription('The measure of the time interval, during the reporting period,\n        between the most recent DHCPv6 Request message received by the WAG\n        and its corresponding DHCPv6 Reply message sent by the WAG.\n        The value is in microseconds.')
bWagDHCPv6SolicitAdvLatencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitAdvLatencyMin.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6SolicitAdvLatencyMin.setDescription('The measure of the minimum time interval, during the reporting period,\n        between all DHCPv6 Solicit message(s) received by the WAG and their corresponding\n        DHCPv6 Advertisement message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDHCPv6SolicitAdvLatencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitAdvLatencyMax.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6SolicitAdvLatencyMax.setDescription('The measure of the maximum time interval, during the reporting period,\n        between all DHCPv6 Solicit message(s) received by the WAG and their corresponding\n        DHCPv6 Advertisement message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDHCPv6SolicitAdvLatencyAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitAdvLatencyAvg.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6SolicitAdvLatencyAvg.setDescription('The measure of the average time interval, during the reporting period,\n        between all DHCPv6 Solicit message(s) received by the WAG and their corresponding\n        DHCPv6 Advertisement message(s) sent by the WAG.\n        The value is in microseconds.')
bWagDHCPv6SolicitAdvLatencyLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitAdvLatencyLast.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6SolicitAdvLatencyLast.setDescription('The measure of the time interval, during the reporting period,\n        between the most recent DHCPv6 Solicit message received by the WAG\n        and its corresponding DHCPv6 Advertisement message sent by the WAG.\n        The value is in microseconds.')
bWagDHCPv6AdvRequestIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6AdvRequestIntervalMin.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6AdvRequestIntervalMin.setDescription('The measure of the minimum time interval, during the reporting period,\n        between all DHCPv6 Advertisement message(s) sent by the WAG and the corresponding\n        DHCPv6 Request message(s) received by the WAG.\n        The value is in microseconds.')
bWagDHCPv6AdvRequestIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6AdvRequestIntervalMax.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6AdvRequestIntervalMax.setDescription('The measure of the maximum time interval, during the reporting period,\n        between all DHCPv6 Advertisement message(s) sent by the WAG and the corresponding\n        DHCPv6 Request message(s) received by the WAG.\n        The value is in microseconds.')
bWagDHCPv6AdvRequestIntervalAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6AdvRequestIntervalAvg.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6AdvRequestIntervalAvg.setDescription('The measure of the average time interval, during the reporting period,\n        between all DHCPv6 Advertisement message(s) sent by the WAG and the corresponding\n        DHCPv6 Request message(s) received by the WAG.\n        The value is in microseconds.')
bWagDHCPv6AdvRequestIntervalLast = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6AdvRequestIntervalLast.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6AdvRequestIntervalLast.setDescription('The measure of the time interval, during the reporting period,\n        between the most recent DHCPv6 Advertisement message sent by the WAG\n        and its corresponding DHCPv6 Request message received by the WAG.\n        The value is in microseconds.')
bWagDHCPv6SolicitReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6SolicitReceived.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6SolicitReceived.setDescription('The count of the total number of DHCPv6 Solicit message(s) received\n        during the reporting period.')
bWagDHCPv6AdvertisementSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6AdvertisementSent.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6AdvertisementSent.setDescription('The count of the total number of DHCPv6 Advertisement message(s) sent\n        during the reporting period.')
bWagDHCPv6RequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6RequestReceived.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6RequestReceived.setDescription('The count of the total number of DHCPv6 Request message(s) received\n        during the reporting period.')
bWagDHCPv6ReplySent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 13, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDHCPv6ReplySent.setStatus('current')
if mibBuilder.loadTexts: bWagDHCPv6ReplySent.setDescription('The count of the total number of DHCPv6 Reply message(s) sent\n        during the reporting period.')
bWagCgnatAuthPortRisingThresholdCrossedSubCount = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 9, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagCgnatAuthPortRisingThresholdCrossedSubCount.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatAuthPortRisingThresholdCrossedSubCount.setDescription('The count of the total number of authenticated CGNAT subscribers\n      whose port usage is above the configured rising threshold.\n      This is obsolete. benuCgnatStatsMIB provides current CGNAT IP address and port usage statistics.')
bWagUpstreamProcessingLatencyPktCount = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagUpstreamProcessingLatencyPktCount.setStatus('obsolete')
if mibBuilder.loadTexts: bWagUpstreamProcessingLatencyPktCount.setDescription('The count of the total number of subscriber upstream packets handled by\nWAG')
bWagUpstreamProcessingLatencyMax = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagUpstreamProcessingLatencyMax.setStatus('obsolete')
if mibBuilder.loadTexts: bWagUpstreamProcessingLatencyMax.setDescription('Maximum processing time recorded for subscriber upstream packets\nhandled in WAG')
bWagUpstreamProcessingLatencyMin = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagUpstreamProcessingLatencyMin.setStatus('obsolete')
if mibBuilder.loadTexts: bWagUpstreamProcessingLatencyMin.setDescription('Minimum processing time recorded for subscriber upstream packets\nhandled in WAG')
bWagUpstreamProcessingLatencyAvg = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagUpstreamProcessingLatencyAvg.setStatus('obsolete')
if mibBuilder.loadTexts: bWagUpstreamProcessingLatencyAvg.setDescription('Average processing time for subscriber upstream packets handled in WAG')
bWagDownstreamProcessingLatencyPktCount = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDownstreamProcessingLatencyPktCount.setStatus('obsolete')
if mibBuilder.loadTexts: bWagDownstreamProcessingLatencyPktCount.setDescription('The count of the total number of subscriber downstream packets handled\nby WAG')
bWagDownstreamProcessingLatencyMax = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDownstreamProcessingLatencyMax.setStatus('obsolete')
if mibBuilder.loadTexts: bWagDownstreamProcessingLatencyMax.setDescription('Maximum processing time recorded for subscriber downstream packets\nhandled in WAG')
bWagDownstreamProcessingLatencyMin = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDownstreamProcessingLatencyMin.setStatus('obsolete')
if mibBuilder.loadTexts: bWagDownstreamProcessingLatencyMin.setDescription('Minimum processing time recorded for subscriber downstream packets\nhandled in WAG.')
bWagDownstreamProcessingLatencyAvg = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 11, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDownstreamProcessingLatencyAvg.setStatus('obsolete')
if mibBuilder.loadTexts: bWagDownstreamProcessingLatencyAvg.setDescription('Average processing time for subscriber downstream packets handled in\nWAG.')
bWagCgnatProfileIPPoolGroup = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatProfileIPPoolGroup.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatProfileIPPoolGroup.setDescription('IP Pool group name associated with this profile.')
bWagCgnatTotalPoolIPAddresses = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatTotalPoolIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatTotalPoolIPAddresses.setDescription('The total number of IP addresses available \n         in the pool.')
bWagCgnatAuthIpAddrUsedHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatAuthIpAddrUsedHighThreshold.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatAuthIpAddrUsedHighThreshold.setDescription('The high threshold for the number of used authenticated CGNAT \n        IP addresses. If the number of used IP addresses exceeds\n        this value, a bWagCgnatAuthIpAddrHighThresholdReached event\n        will be generated. No more bWagCgnatAuthIpAddrHighThresholdReached\n        events will be generated until the value of the number of\n        used authenticated CGNAT IP addresses becomes equal to or less than\n        the value of bWagCgnatAuthIpAddrUsedLowThreshold.')
bWagCgnatAuthIpAddrUsedLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatAuthIpAddrUsedLowThreshold.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatAuthIpAddrUsedLowThreshold.setDescription('The low threshold for the number of used authenticated CGNAT \n        IP addresses. If a bWagCgnatAuthIpAddrHighThresholdReached \n        event had previously been generated, and if the number of \n        used IP addresses equals to or falls below this value, a \n        bWagCgnatAuthIpAddrLowThresholdReached event will be generated.\n        No more bWagCgnatAuthIpAddrLowThresholdReached events will be\n        generated until the value of the number of used authenticated CGNAT\n        IP addresses exceeds bWagCgnatAuthIpAddrUsedHighThreshold and a\n        bWagCgnatAuthIpAddrHighThresholdReached is first generated.')
bWagCgnatAuthIpAddrHighThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 1)).setObjects(("BENU-WAG-STATS-MIB", "bWagCgnatProfileIPPoolGroup"), ("BENU-WAG-STATS-MIB", "bWagCgnatTotalPoolIPAddresses"), ("BENU-WAG-STATS-MIB", "bWagCgnatAuthIpAddrUsedHighThreshold"))
if mibBuilder.loadTexts: bWagCgnatAuthIpAddrHighThresholdReached.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatAuthIpAddrHighThresholdReached.setDescription('This notification signifies that the current number of\n        used authenticated CGNAT IP addresses has risen above the value of\n        bWagCgnatAuthIpAddrUsedHighThreshold.')
bWagCgnatAuthIpAddrLowThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 2)).setObjects(("BENU-WAG-STATS-MIB", "bWagCgnatProfileIPPoolGroup"), ("BENU-WAG-STATS-MIB", "bWagCgnatTotalPoolIPAddresses"), ("BENU-WAG-STATS-MIB", "bWagCgnatAuthIpAddrUsedLowThreshold"))
if mibBuilder.loadTexts: bWagCgnatAuthIpAddrLowThresholdReached.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatAuthIpAddrLowThresholdReached.setDescription('This notification signifies that the current number of \n        used authenticated CGNAT IP addresses has fallen below the value of \n        bWagCgnatAuthIpAddrUsedLowThreshold.')
bWagCgnatAuthIpAddressesExhausted = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 3)).setObjects(("BENU-WAG-STATS-MIB", "bWagCgnatProfileIPPoolGroup"), ("BENU-WAG-STATS-MIB", "bWagCgnatTotalPoolIPAddresses"))
if mibBuilder.loadTexts: bWagCgnatAuthIpAddressesExhausted.setStatus('current')
if mibBuilder.loadTexts: bWagCgnatAuthIpAddressesExhausted.setDescription('This notification signifies that the current number of \n        used authenticated CGNAT IP addresses are exhausted from pool group')
bWagCgnatSubscriberMac = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 5), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatSubscriberMac.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatSubscriberMac.setDescription('MAC address of the subscriber.')
bWagCgnatTotalPortBlocksPerSubscriber = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 6), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatTotalPortBlocksPerSubscriber.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatTotalPortBlocksPerSubscriber.setDescription('Number of port blocks available for the authenticated CGNAT subscriber.')
bWagCgnatPortBlocksUsedHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 7), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatPortBlocksUsedHighThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatPortBlocksUsedHighThreshold.setDescription('The high threshold for the number of used CGNAT port blocks by authenticated subscribers.\n        If the number of used port blocks exceeds this value, \n        a bWagCgnatPortBlocksUsedHighThresholdReached event\n        will be generated. No more bWagCgnatPortBlocksUsedHighThresholdReached \n        events will be generated until the value of the number of\n        used CGNAT port blocks becomes equal to or less than\n        the value of bWagCgnatPortBlocksUsedLowThreshold. The ratio of this\n        value to the total number of port blocks is reported as percentage in\n        this object.\n        Units: Percentage in the range 0 - 100.')
bWagCgnatPortBlocksUsedLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 10, 8), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagCgnatPortBlocksUsedLowThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatPortBlocksUsedLowThreshold.setDescription('The low threshold for the number of used CGNAT port blocks by authenticated subscribers.\n        If a bWagCgnatPortBlocksUsedHighThresholdReached \n        event had previously been generated, and if the number of \n        used port blocks equals to or falls below this value, a \n        bWagCgnatPortBlocksUsedLowThresholdReached event will be generated.\n        No more bWagCgnatPortBlocksUsedLowThreshold events will be\n        generated until the value of the number of used CGNAT Port\n        blocks exceeds bWagCgnatPortBlocksUsedHighThresholdReached and a\n        bWagCgnatPortBlocksUsedHighThresholdReached is first generated.\n        The ratio of this value to the total number of port blocks is\n        reported as percentage in this object.\n        Units: Percentage in the range 0 - 100.')
bWagCgnatPortBlocksUsedHighThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 4)).setObjects(("BENU-WAG-STATS-MIB", "bWagCgnatSubscriberMac"), ("BENU-WAG-STATS-MIB", "bWagCgnatTotalPortBlocksPerSubscriber"), ("BENU-WAG-STATS-MIB", "bWagCgnatPortBlocksUsedHighThreshold"))
if mibBuilder.loadTexts: bWagCgnatPortBlocksUsedHighThresholdReached.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatPortBlocksUsedHighThresholdReached.setDescription('This notification signifies that the current number of \n        used CGNAT port blocks used for an authenticated subscriber has risen above \n        the value of  bWagCgnatPortBlocksUsedHighThreshold.')
bWagCgnatPortBlocksUsedLowThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 5)).setObjects(("BENU-WAG-STATS-MIB", "bWagCgnatSubscriberMac"), ("BENU-WAG-STATS-MIB", "bWagCgnatTotalPortBlocksPerSubscriber"), ("BENU-WAG-STATS-MIB", "bWagCgnatPortBlocksUsedLowThreshold"))
if mibBuilder.loadTexts: bWagCgnatPortBlocksUsedLowThresholdReached.setStatus('obsolete')
if mibBuilder.loadTexts: bWagCgnatPortBlocksUsedLowThresholdReached.setDescription('This notification signifies that the current number of \n        used CGNAT Port blocks for an authenticated subscriber has fallen below the value of \n        bWagCgnatPortBlocksUsedLowThreshold.')
bWagDhcpTPSLowReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 7)).setObjects(("BENU-WAG-STATS-MIB", "bWagDhcpTPS"))
if mibBuilder.loadTexts: bWagDhcpTPSLowReached.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpTPSLowReached.setDescription('This notification signifies that the total number of DHCP transactions\n        for the particular interval has fallen below the value bWagDhcpTPSLow.')
bWagDhcpTPSHighReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 6)).setObjects(("BENU-WAG-STATS-MIB", "bWagDhcpTPS"))
if mibBuilder.loadTexts: bWagDhcpTPSHighReached.setStatus('current')
if mibBuilder.loadTexts: bWagDhcpTPSHighReached.setDescription('This notification signifies that the total number of DHCP transactions\n        for the particular interval has risen above the value bWagDhcpTPSHigh.')
bWagVrgApiIpAddrUsedHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 15, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagVrgApiIpAddrUsedHighThreshold.setStatus('current')
if mibBuilder.loadTexts: bWagVrgApiIpAddrUsedHighThreshold.setDescription('The high threshold for the number of used IP addresses for VRGAPI subscribers.\n         If the number of used IP addresses exceeds\n        this value, a bWagVrgApiIpAddrUsedHighThresholdReached event\n        will be generated. No more bWagVrgApiIpAddrUsedHighThresholdReached \n        events will be generated until the value of the number of\n        used IP addresses for VRGAPI subscribers becomes equal to or less than\n        the value of bWagVrgApiIpAddrUsedLowThreshold.')
bWagVrgApiIpAddrUsedLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 15, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagVrgApiIpAddrUsedLowThreshold.setStatus('current')
if mibBuilder.loadTexts: bWagVrgApiIpAddrUsedLowThreshold.setDescription('The low threshold for the number of used IP addresses for VRGAPI \n\tsubscribers. If a bWagVrgApiIpAddrUsedHighThreshold event had \n\tpreviously been generated, and if the number of used IP addresses \n\tequals to or falls below this value, a \n\tbWagVrgApiIpAddrUsedLowThresholdReached event will be generated.\n        No more bWagVrgApiIpAddrUsedLowThresholdReached events will be\n        generated until the value of the number of used IP addresses for \n\tVRGAPI subscribers exceeds bWagVrgApiIpAddrUsedHighThreshold and a\n        bWagVrgApiIpAddrUsedHighThresholdReached is first generated.')
bWagrgApiIPPoolGroup = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 15, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagrgApiIPPoolGroup.setStatus('current')
if mibBuilder.loadTexts: bWagrgApiIPPoolGroup.setDescription('IP Pool group name associated with Mhn profile.')
bWagVRGApiIPoolIPAddresses = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 15, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bWagVRGApiIPoolIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagVRGApiIPoolIPAddresses.setDescription('The total number of IP addresses available \n         in the pool.')
bWagVrgApiIpAddrUsedHighThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 8)).setObjects(("BENU-WAG-STATS-MIB", "bWagrgApiIPPoolGroup"), ("BENU-WAG-STATS-MIB", "bWagVRGApiIPoolIPAddresses"), ("BENU-WAG-STATS-MIB", "bWagVrgApiIpAddrUsedHighThreshold"))
if mibBuilder.loadTexts: bWagVrgApiIpAddrUsedHighThresholdReached.setStatus('current')
if mibBuilder.loadTexts: bWagVrgApiIpAddrUsedHighThresholdReached.setDescription('This notification signifies that the current number of\n        used IP addresses for VRGAPI subscribers has risen above the value\n\tof bWagVrgApiIpAddrUsedHighThreshold.')
bWagVrgApiIpAddrUsedLowThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 9)).setObjects(("BENU-WAG-STATS-MIB", "bWagrgApiIPPoolGroup"), ("BENU-WAG-STATS-MIB", "bWagVRGApiIPoolIPAddresses"), ("BENU-WAG-STATS-MIB", "bWagVrgApiIpAddrUsedLowThreshold"))
if mibBuilder.loadTexts: bWagVrgApiIpAddrUsedLowThresholdReached.setStatus('current')
if mibBuilder.loadTexts: bWagVrgApiIpAddrUsedLowThresholdReached.setDescription('This notification signifies that the current number of \n        used IP addresses for VRGAPI subscribers has fallen below the value of \n        bWagVrgApiIpAddrUsedLowThreshold.')
bWagVrgApiIpAddressesExhausted = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 0, 10)).setObjects(("BENU-WAG-STATS-MIB", "bWagrgApiIPPoolGroup"), ("BENU-WAG-STATS-MIB", "bWagVRGApiIPoolIPAddresses"))
if mibBuilder.loadTexts: bWagVrgApiIpAddressesExhausted.setStatus('current')
if mibBuilder.loadTexts: bWagVrgApiIpAddressesExhausted.setDescription('This notification signifies that the current number of \n        used IP addresses VRGApisubscribers are exhausted from pool group')
bWagDsLiteProfileStatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1), )
if mibBuilder.loadTexts: bWagDsLiteProfileStatsTable.setStatus('current')
if mibBuilder.loadTexts: bWagDsLiteProfileStatsTable.setDescription('A list of DSLite CGNAT statistics for profiles.')
bWagDsLiteProfileStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1), ).setIndexNames((0, "BENU-WAG-STATS-MIB", "bWagDsLiteProfileStatsIndex"))
if mibBuilder.loadTexts: bWagDsLiteProfileStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bWagDsLiteProfileStatsEntry.setDescription('A logical row in the bWagDsLiteProfileTable.')
bWagDsLiteProfileStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bWagDsLiteProfileStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bWagDsLiteProfileStatsIndex.setDescription('A number uniquely identifying this DS-Lite profile.')
bWagDsLiteProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileName.setStatus('current')
if mibBuilder.loadTexts: bWagDsLiteProfileName.setDescription('The name of the DS-Lite profile.')
bWagDsLiteProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileType.setStatus('current')
if mibBuilder.loadTexts: bWagDsLiteProfileType.setDescription('The type of the CGNAT profile DS-Lite.')
bWagDsLiteProfileNATIPPoolGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileNATIPPoolGroup.setStatus('current')
if mibBuilder.loadTexts: bWagDsLiteProfileNATIPPoolGroup.setDescription('IP Pool group name associated with DS-Lite profile.')
bWagDsLiteProfileMaxIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileMaxIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagDsLiteProfileMaxIPAddresses.setDescription('This is the maximum number of IPs required to support the number of tunnels configured.\n\tThis is calculated based on three other configuration parameters: block-size, number\n\tof port blocks, max-tunnels, as show below\n\n\tMAX IP Adresses = (max-tunnels/(64512/(block-size*num-blocks)) rounded up to the \n\tnext multiple of 4')
bWagDsLiteProfileUsedIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileUsedIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagDsLiteProfileUsedIPAddresses.setDescription('Number of IP addresses in use in DS-Lite profile.')
bWagDsLiteProfileReservedIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileReservedIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagDsLiteProfileReservedIPAddresses.setDescription('Number of IP addresses reserved in DS-Lite profile.')
bWagDsLiteProfileTotalPoolIPAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileTotalPoolIPAddresses.setStatus('current')
if mibBuilder.loadTexts: bWagDsLiteProfileTotalPoolIPAddresses.setDescription('Total number of IP addresses available in the \n       pool.')
bWagDsLiteProfileMaxSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileMaxSubscribers.setStatus('current')
if mibBuilder.loadTexts: bWagDsLiteProfileMaxSubscribers.setDescription('Number of max subscribers configured in this profile.')
bWagDsLiteProfileMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagDsLiteProfileMaxTunnels.setStatus('obsolete')
if mibBuilder.loadTexts: bWagDsLiteProfileMaxTunnels.setDescription('Number of max tunnels configured in this profile.')
bDSLitePortBlocksTotal = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDSLitePortBlocksTotal.setStatus('current')
if mibBuilder.loadTexts: bDSLitePortBlocksTotal.setDescription('The total number of DS-Lite port blocks.')
bDSLitePortBlocksInUse = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDSLitePortBlocksInUse.setStatus('current')
if mibBuilder.loadTexts: bDSLitePortBlocksInUse.setDescription('The total number of DS-Lite port blocks in use.')
bDSLiteTunnelsUsingOnePortBlock = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDSLiteTunnelsUsingOnePortBlock.setStatus('current')
if mibBuilder.loadTexts: bDSLiteTunnelsUsingOnePortBlock.setDescription('The total number of tunnels using one port block in DS-Lite.')
bDSLiteTunnelsUsingTwoPortBlocks = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDSLiteTunnelsUsingTwoPortBlocks.setStatus('current')
if mibBuilder.loadTexts: bDSLiteTunnelsUsingTwoPortBlocks.setDescription('The total number of tunnels using two port blocks in DS-Lite.')
bDSLiteTunnelsUsingThreePortBlocks = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDSLiteTunnelsUsingThreePortBlocks.setStatus('current')
if mibBuilder.loadTexts: bDSLiteTunnelsUsingThreePortBlocks.setDescription('The total number of tunnels using three port blocks in DS-Lite.')
bDSLiteTunnelsUsingFourPortBlocks = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDSLiteTunnelsUsingFourPortBlocks.setStatus('current')
if mibBuilder.loadTexts: bDSLiteTunnelsUsingFourPortBlocks.setDescription('The total number of tunnels using four port blocks in DS-Lite.')
bDSLiteTunnelsUsingFivePortBlocks = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 16, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDSLiteTunnelsUsingFivePortBlocks.setStatus('current')
if mibBuilder.loadTexts: bDSLiteTunnelsUsingFivePortBlocks.setDescription('The total number of tunnels using five port blocks in DS-Lite.')
bWagIpSystemStatsReasmReqds = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 18, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagIpSystemStatsReasmReqds.setStatus('current')
if mibBuilder.loadTexts: bWagIpSystemStatsReasmReqds.setDescription('The number of IP fragments received that needed to be\n            reassembled.')
bWagIpIfStatsOutFragOKs = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 18, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagIpIfStatsOutFragOKs.setStatus('current')
if mibBuilder.loadTexts: bWagIpIfStatsOutFragOKs.setDescription('The number of IP datagrams that have been successfully\n            fragmented.')
bWagIpSystemStatsReasmFails = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 18, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagIpSystemStatsReasmFails.setStatus('current')
if mibBuilder.loadTexts: bWagIpSystemStatsReasmFails.setDescription('The number of failures detected by the IP re-assembly\n            algorithm (for whatever reason: timed out, errors, etc.).\n            Note that this is not necessarily a count of discarded IP\n            fragments since some algorithms (notably the algorithm in\n            RFC 815) can lose track of the number of fragments by\n            combining them as they are received.')
bWagIpv6IfStatsReasmReqds = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 18, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagIpv6IfStatsReasmReqds.setStatus('current')
if mibBuilder.loadTexts: bWagIpv6IfStatsReasmReqds.setDescription('The number of IPv6 fragments received which needed\n         to be reassembled at this interface.')
bWagIpv6IfStatsOutFragOKs = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 18, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagIpv6IfStatsOutFragOKs.setStatus('current')
if mibBuilder.loadTexts: bWagIpv6IfStatsOutFragOKs.setDescription('The number of IPv6 datagrams that have been\n         successfully fragmented at output interface.')
bWagIpv6IfStatsReasmFails = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 3, 18, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bWagIpv6IfStatsReasmFails.setStatus('current')
if mibBuilder.loadTexts: bWagIpv6IfStatsReasmFails.setDescription('The number of failures detected by the IPv6 re-\n     assembly algorithm (for whatever reason: timed\n     out, errors, etc.).')
mibBuilder.exportSymbols("BENU-WAG-STATS-MIB", bWagCgnatIPPortBlocksFree=bWagCgnatIPPortBlocksFree, bWagTunnelDeletedDueToMacResFail=bWagTunnelDeletedDueToMacResFail, bWagTunnelTunnelsLookupFound=bWagTunnelTunnelsLookupFound, bWagNumCurrentTunnelsDSLite=bWagNumCurrentTunnelsDSLite, bWagStatsNotifications=bWagStatsNotifications, bWagCgnatTotalPortBlocksPerSubscriber=bWagCgnatTotalPortBlocksPerSubscriber, bWagNumCurrentTunnelsIPv4=bWagNumCurrentTunnelsIPv4, bWagDHCPv6RequestReplyLatencyLast=bWagDHCPv6RequestReplyLatencyLast, bWagRadiusEntry=bWagRadiusEntry, bWagDhcpAckSent=bWagDhcpAckSent, bWagSubscriberIntervalDuration=bWagSubscriberIntervalDuration, bWagDhcpDiscoverOfferLatencyMin=bWagDhcpDiscoverOfferLatencyMin, bWagDhcpNackSent=bWagDhcpNackSent, bWagCgnatPoolGroupType=bWagCgnatPoolGroupType, bWagNumCurrentTunnelsSpWiFi=bWagNumCurrentTunnelsSpWiFi, bWagNumPreAuthSpwifiSubscribers=bWagNumPreAuthSpwifiSubscribers, bWagDsLiteProfileNATIPPoolGroup=bWagDsLiteProfileNATIPPoolGroup, bWagCgnatAuthPortUtilTable=bWagCgnatAuthPortUtilTable, bDSLiteTunnelsUsingFivePortBlocks=bDSLiteTunnelsUsingFivePortBlocks, bWagCgnatNotifObjects=bWagCgnatNotifObjects, bWagDhcpOfferRequestIntervalMin=bWagDhcpOfferRequestIntervalMin, bWagSubscriberThrottlingOccurrencesCount=bWagSubscriberThrottlingOccurrencesCount, bWagNumCurrent8021xSubscribers=bWagNumCurrent8021xSubscribers, bWagCgnatAuthSubscriberMac=bWagCgnatAuthSubscriberMac, bWagRadiusAcctLatencyMax=bWagRadiusAcctLatencyMax, bWagSubscriberMIBObjects=bWagSubscriberMIBObjects, bWagNumCurrentSPWiFiSubscribers=bWagNumCurrentSPWiFiSubscribers, bWagNumCurrentDSLiteSubscribers=bWagNumCurrentDSLiteSubscribers, bWagRadiusAuthLatencyMin=bWagRadiusAuthLatencyMin, bWagDHCPv6SolicitAdvLatencyMin=bWagDHCPv6SolicitAdvLatencyMin, bWagVrgApiNotifObjects=bWagVrgApiNotifObjects, bWagCgnatPoolGroupUsedIPAddresses=bWagCgnatPoolGroupUsedIPAddresses, bWagSubscriberHomeActivationsCount=bWagSubscriberHomeActivationsCount, bWagRadiusDMLatencyMin=bWagRadiusDMLatencyMin, bWagNumCurrentTunnelsIPv6=bWagNumCurrentTunnelsIPv6, bWagProcessingLatencyNotifObjects=bWagProcessingLatencyNotifObjects, bWagNumAuthenticatedSubscribers=bWagNumAuthenticatedSubscribers, bWagNumCurrentHomeUserStatSubs=bWagNumCurrentHomeUserStatSubs, bWagNumOfSubscribersWithPolicy=bWagNumOfSubscribersWithPolicy, bWagDhcpRequestAckLatencyMax=bWagDhcpRequestAckLatencyMax, bWagCgnatAuthIpAddrUsedLowThreshold=bWagCgnatAuthIpAddrUsedLowThreshold, bWagCgnatUnauthPeriodIpEntry=bWagCgnatUnauthPeriodIpEntry, bWagDhcpRequestReceived=bWagDhcpRequestReceived, bWagIpv6IfStatsOutFragOKs=bWagIpv6IfStatsOutFragOKs, bWagDHCPv6StatsInterval=bWagDHCPv6StatsInterval, bWagCgnatPortBlocksUsedLowThresholdReached=bWagCgnatPortBlocksUsedLowThresholdReached, bWagMHNProfileName=bWagMHNProfileName, bWagNumOfAuthSubscribersWithPolicy=bWagNumOfAuthSubscribersWithPolicy, bWagNumPreAuthHomeSubscribers=bWagNumPreAuthHomeSubscribers, bWagNumPreAuthenticatedSubscribersS2aPmip6=bWagNumPreAuthenticatedSubscribersS2aPmip6, bWagSubscriberHomeUserStaticSubsDeleted=bWagSubscriberHomeUserStaticSubsDeleted, bWagCgnatPeriodIpEntry=bWagCgnatPeriodIpEntry, bWagIpSystemStatsMIBObjects=bWagIpSystemStatsMIBObjects, bWagDHCPv6SolicitAdvLatencyMax=bWagDHCPv6SolicitAdvLatencyMax, bWagDhcpDiscoverAckIntervalMax=bWagDhcpDiscoverAckIntervalMax, bWagMHNProfileStatsIndex=bWagMHNProfileStatsIndex, bWagTunnelDeletedDueToB2bSubsDelete=bWagTunnelDeletedDueToB2bSubsDelete, bWagDHCPv6SolicitAdvLatencyAvg=bWagDHCPv6SolicitAdvLatencyAvg, bWagDhcpTPSEntry=bWagDhcpTPSEntry, bWagTunnelStatsMIBObjects=bWagTunnelStatsMIBObjects, bWagDhcpDiscoverOfferLatencyLast=bWagDhcpDiscoverOfferLatencyLast, bWagTunnelPktsRxdGREPayloadMPLS=bWagTunnelPktsRxdGREPayloadMPLS, bWagDhcpEntry=bWagDhcpEntry, bWagCgnatUnauthPortBlockMinUtil=bWagCgnatUnauthPortBlockMinUtil, bWagDhcpTPSLowReached=bWagDhcpTPSLowReached, bWagDhcpNotifObjects=bWagDhcpNotifObjects, bWagTunnelPktsRxdHTTPGetReq=bWagTunnelPktsRxdHTTPGetReq, bWagNumCurrentL2tpv3TunnelsSpWiFi=bWagNumCurrentL2tpv3TunnelsSpWiFi, bWagSubscriberDeletionsCount=bWagSubscriberDeletionsCount, bWagTunnelEntry=bWagTunnelEntry, bWagDhcpTPSTable=bWagDhcpTPSTable, bWagNumL2tpv3TunnelsInactiveDeleted=bWagNumL2tpv3TunnelsInactiveDeleted, bWagL2tpv3TunnelDeletedDueToInactivity=bWagL2tpv3TunnelDeletedDueToInactivity, bWagSubscriberRedirectionsCount=bWagSubscriberRedirectionsCount, bWagDsLiteProfileStatsIndex=bWagDsLiteProfileStatsIndex, bWagNumCurrTunnHomeAndSpWiFi=bWagNumCurrTunnHomeAndSpWiFi, bWagDhcpDiscoverOfferLatencyAvg=bWagDhcpDiscoverOfferLatencyAvg, bWagTunnelTable=bWagTunnelTable, bWagCgnatIPAddress=bWagCgnatIPAddress, bWagSubscriberTable=bWagSubscriberTable, bWagNumCurrentTunnHomeAccept=bWagNumCurrentTunnHomeAccept, bWagTunnelMaxCountReached=bWagTunnelMaxCountReached, bWagDsLiteProfileMaxIPAddresses=bWagDsLiteProfileMaxIPAddresses, bWagCgnatIPPortBlocksReused=bWagCgnatIPPortBlocksReused, bWagCgnatUnauthIPStatsTable=bWagCgnatUnauthIPStatsTable, bWagSubscriberNotifObjects=bWagSubscriberNotifObjects, bWagSubscriberSpWifiActivationsCount=bWagSubscriberSpWifiActivationsCount, bWagVrgApiIpAddrUsedLowThreshold=bWagVrgApiIpAddrUsedLowThreshold, bWagCgnatPoolGroupReservedIPAddresses=bWagCgnatPoolGroupReservedIPAddresses, bWagUpstreamProcessingLatencyMax=bWagUpstreamProcessingLatencyMax, bWagNumCurrentRoutedSubnetSubscribers=bWagNumCurrentRoutedSubnetSubscribers, bWagRadiusTable=bWagRadiusTable, bWagSubscriberActivationsCount=bWagSubscriberActivationsCount, bWagDhcpTPSIntervalDuration=bWagDhcpTPSIntervalDuration, bWagDsLiteNotifObjects=bWagDsLiteNotifObjects, bWagSubscriberAuthenticationsCountViaSingleStatic=bWagSubscriberAuthenticationsCountViaSingleStatic, bWagCgnatPeriodIpInterval=bWagCgnatPeriodIpInterval, bWagSubscriberAuthenticationsCountViaRoutedSubnet=bWagSubscriberAuthenticationsCountViaRoutedSubnet, bWagNumCurrentHomePubStatSubs=bWagNumCurrentHomePubStatSubs, bWagNumSubsViaStaticAuthPolicy=bWagNumSubsViaStaticAuthPolicy, bWagCgnatProfileMaxIPAddresses=bWagCgnatProfileMaxIPAddresses, bWagCgnatProfileTotalPortBlocks=bWagCgnatProfileTotalPortBlocks, bWagDHCPv6RequestReplyLatencyAvg=bWagDHCPv6RequestReplyLatencyAvg, bWagCgnatPeriodIpIndex=bWagCgnatPeriodIpIndex, bWagPolicyTable=bWagPolicyTable, bWagL2tpv3TunnelPktsRxd=bWagL2tpv3TunnelPktsRxd, bWagDhcpMIBObjects=bWagDhcpMIBObjects, bWagCgnatUnauthIPPortBlocksReused=bWagCgnatUnauthIPPortBlocksReused, bDSLitePortBlocksInUse=bDSLitePortBlocksInUse, bWagMHNMIBObjects=bWagMHNMIBObjects, bWagDhcpOfferRequestIntervalMax=bWagDhcpOfferRequestIntervalMax, bWagCgnatIPSubActiveCount=bWagCgnatIPSubActiveCount, bWagCgnatUnauthIPStatsIndex=bWagCgnatUnauthIPStatsIndex, bWagDhcpDiscoverAckIntervalAvg=bWagDhcpDiscoverAckIntervalAvg, bWagNumTunnelsSchedDeletion=bWagNumTunnelsSchedDeletion, bWagCgnatPortBlocksUsedLowThreshold=bWagCgnatPortBlocksUsedLowThreshold, bWagDhcpTPSInterval=bWagDhcpTPSInterval, bWagL2tpv3TunnelPktsDecapsulated=bWagL2tpv3TunnelPktsDecapsulated, bWagUpstreamProcessingLatencyMin=bWagUpstreamProcessingLatencyMin, bWagRadiusCoARequestReceived=bWagRadiusCoARequestReceived, bWagSubscriberHomeDhcpStaticSubsDeleted=bWagSubscriberHomeDhcpStaticSubsDeleted, bWagDownstreamProcessingLatencyMax=bWagDownstreamProcessingLatencyMax, bWagTunnelIntervalDuration=bWagTunnelIntervalDuration, bWagRadiusStatsInterval=bWagRadiusStatsInterval, bWagVRGApiIPoolIPAddresses=bWagVRGApiIPoolIPAddresses, bWagTunnelPktsRxdTCPFinAck=bWagTunnelPktsRxdTCPFinAck, bWagDHCPv6RequestReceived=bWagDHCPv6RequestReceived, bWagCgnatAuthIpAddrHighThresholdReached=bWagCgnatAuthIpAddrHighThresholdReached, bWagDhcpIntervalDuration=bWagDhcpIntervalDuration, bWagTunnelPktsRxdDHCP=bWagTunnelPktsRxdDHCP, bWagRadiusAcctLatencyAvg=bWagRadiusAcctLatencyAvg, bWagTunnelPktsDecapsulatedGRE=bWagTunnelPktsDecapsulatedGRE, bDSLiteTunnelsUsingTwoPortBlocks=bDSLiteTunnelsUsingTwoPortBlocks, bWagDhcpRequestAckLatencyMin=bWagDhcpRequestAckLatencyMin, bWagL2tpv3TunnelDeleted=bWagL2tpv3TunnelDeleted, bWagNumCurrentSSIDS2aSubscribersPmip6=bWagNumCurrentSSIDS2aSubscribersPmip6, bWagCgnatProfilePortBlocksUsed=bWagCgnatProfilePortBlocksUsed, bWagDhcpRequestAckLatencyLast=bWagDhcpRequestAckLatencyLast, bWagRadiusCoANackSent=bWagRadiusCoANackSent, bWagRadiusCoALatencyLast=bWagRadiusCoALatencyLast, bWagNumCurrentHomeTransientSubs=bWagNumCurrentHomeTransientSubs, bWagCgnatProfileReservedIPAddresses=bWagCgnatProfileReservedIPAddresses, bWagCgnatPortBlocksUsedHighThreshold=bWagCgnatPortBlocksUsedHighThreshold, bWagRadiusCoALatencyAvg=bWagRadiusCoALatencyAvg, bWagCgnatMIBObjects=bWagCgnatMIBObjects, bWagDHCPv6Entry=bWagDHCPv6Entry, bWagDownstreamProcessingLatencyAvg=bWagDownstreamProcessingLatencyAvg, bWagDhcpOfferRequestIntervalLast=bWagDhcpOfferRequestIntervalLast, bWagTunnelPktsRxdHTTPS=bWagTunnelPktsRxdHTTPS, bWagCgnatAuthIpAddrUsedHighThreshold=bWagCgnatAuthIpAddrUsedHighThreshold, bWagTunnelPktsTxdHTTP=bWagTunnelPktsTxdHTTP, bWagTunnelDeletedDueToReject=bWagTunnelDeletedDueToReject, bWagDsLiteProfileTotalPoolIPAddresses=bWagDsLiteProfileTotalPoolIPAddresses, bWagTunnelDeleted=bWagTunnelDeleted, bWagCgnatAuthIpAddrLowThresholdReached=bWagCgnatAuthIpAddrLowThresholdReached, bWagIpv6IfStatsReasmFails=bWagIpv6IfStatsReasmFails, bWagMHNProfileTotalPortBlocks=bWagMHNProfileTotalPortBlocks, bWagDhcpStatsInterval=bWagDhcpStatsInterval, bWagNumAuthSubsWithPublicIPAddress=bWagNumAuthSubsWithPublicIPAddress, bWagDsLiteProfileUsedIPAddresses=bWagDsLiteProfileUsedIPAddresses, bWagIpv6IfStatsReasmReqds=bWagIpv6IfStatsReasmReqds, bWagRadiusAccessRejectReceived=bWagRadiusAccessRejectReceived, bWagCgnatProfilePortBlocksReused=bWagCgnatProfilePortBlocksReused, bWagTunnelDeletedDueToLifDown=bWagTunnelDeletedDueToLifDown, bWagSubscriberAuthenticationsCountVia8021x=bWagSubscriberAuthenticationsCountVia8021x, bWagCgnatTotalPoolIPAddresses=bWagCgnatTotalPoolIPAddresses, bWagTunnelStatsInterval=bWagTunnelStatsInterval, bWagRadiusDMLatencyAvg=bWagRadiusDMLatencyAvg, bWagNumSubsAuthenticatedWithIPv6Prefix=bWagNumSubsAuthenticatedWithIPv6Prefix, bWagNumL2tpv3TunnelsSubsAssociated=bWagNumL2tpv3TunnelsSubsAssociated, bWagCgnatProfileNATIPPoolGroup=bWagCgnatProfileNATIPPoolGroup, bWagL2tpv3TunnelCreatedDynamically=bWagL2tpv3TunnelCreatedDynamically, bWagSubscriberSessionTimeoutAuthVia8021x=bWagSubscriberSessionTimeoutAuthVia8021x, bWagNumTunnelsCreatedStatically=bWagNumTunnelsCreatedStatically, bWagTunnelDeletedDueToAbort=bWagTunnelDeletedDueToAbort, bWagDsLiteProfileType=bWagDsLiteProfileType, bWagCgnatProfileTotalPoolIPAddresses=bWagCgnatProfileTotalPoolIPAddresses, bWagDHCPv6AdvRequestIntervalMax=bWagDHCPv6AdvRequestIntervalMax, bWagTunnelPktsRxdGREPayloadTEB=bWagTunnelPktsRxdGREPayloadTEB, bWagRadiusCoAAckSent=bWagRadiusCoAAckSent, bWagSubscriberHomePubStaticSubsDeleted=bWagSubscriberHomePubStaticSubsDeleted, bWagCgnatPortBlockMaxUtil=bWagCgnatPortBlockMaxUtil, bWagCgnatPortBlockMinUtil=bWagCgnatPortBlockMinUtil, bDSLiteTunnelsUsingThreePortBlocks=bDSLiteTunnelsUsingThreePortBlocks, bWagSubscriberIdleTimeoutCount=bWagSubscriberIdleTimeoutCount, bWagIpIfStatsOutFragOKs=bWagIpIfStatsOutFragOKs, bWagRadiusDMAckSent=bWagRadiusDMAckSent, bWagCgnatIPPacketsDropped=bWagCgnatIPPacketsDropped, bWagUpstreamProcessingLatencyAvg=bWagUpstreamProcessingLatencyAvg, bWagCgnatPoolGroupStatsEntry=bWagCgnatPoolGroupStatsEntry, bWagNumTunnelsDeletedByB2B=bWagNumTunnelsDeletedByB2B, bWagCgnatProfileUsedIPAddresses=bWagCgnatProfileUsedIPAddresses, bWagIpSystemStatsReasmReqds=bWagIpSystemStatsReasmReqds, bWagCgnatAuthIpAddressesExhausted=bWagCgnatAuthIpAddressesExhausted, bWagSubscriberHomeTransientSubsDeleted=bWagSubscriberHomeTransientSubsDeleted, bWagSubscriberAPMobilityOccurencesCount=bWagSubscriberAPMobilityOccurencesCount, bWagNumCurrentSubscribers=bWagNumCurrentSubscribers, bWagDhcpOfferSent=bWagDhcpOfferSent, bWagRadiusDMRequestReceived=bWagRadiusDMRequestReceived, bWagNumCurrentL2tpv3TunnelsIPv4=bWagNumCurrentL2tpv3TunnelsIPv4, bWagCgnatAuthPortUtilEntry=bWagCgnatAuthPortUtilEntry, bWagDhcpDiscoverAckIntervalMin=bWagDhcpDiscoverAckIntervalMin, bWagMHNProfileMaxSubscribers=bWagMHNProfileMaxSubscribers, bWagL2tpv3TunnelPktsRxdARP=bWagL2tpv3TunnelPktsRxdARP, bDSLiteTunnelsUsingOnePortBlock=bDSLiteTunnelsUsingOnePortBlock, bWagL2tpv3TunnelDeletedDueToLifDown=bWagL2tpv3TunnelDeletedDueToLifDown, bWagDHCPv6SolicitReplyIntervalMin=bWagDHCPv6SolicitReplyIntervalMin, bWagCgnatPacketsDropped=bWagCgnatPacketsDropped, bWagCgnatIPStatsEntry=bWagCgnatIPStatsEntry, bWagDsLiteProfileMaxSubscribers=bWagDsLiteProfileMaxSubscribers, bDSLitePortBlocksTotal=bDSLitePortBlocksTotal, bWagDsLiteProfileStatsEntry=bWagDsLiteProfileStatsEntry, bWagNumCurrentHomeSubscribers=bWagNumCurrentHomeSubscribers, bWagNumMigrantSubscribersCount=bWagNumMigrantSubscribersCount, bWagNumCurrentTunnelsHome=bWagNumCurrentTunnelsHome, bWagTunnelPktsTxdTCPSynAck=bWagTunnelPktsTxdTCPSynAck, bWagSubscriberHomeTotalSubsDeleted=bWagSubscriberHomeTotalSubsDeleted, benuWagStatsMIB=benuWagStatsMIB, bWagDhcpTPSHighReached=bWagDhcpTPSHighReached, bWagMHNProfileStatsEntry=bWagMHNProfileStatsEntry, bWagCgnatUnauthIPPortBlocksUsed=bWagCgnatUnauthIPPortBlocksUsed, bWagCgnatPublicIPAddressType=bWagCgnatPublicIPAddressType, bWagDHCPv6RequestReplyLatencyMin=bWagDHCPv6RequestReplyLatencyMin, bWagSubscriberStatsInterval=bWagSubscriberStatsInterval, bWagPolicyType=bWagPolicyType, bWagDHCPv6IntervalDuration=bWagDHCPv6IntervalDuration, bWagCgnatPortBlocksUsedHighThresholdReached=bWagCgnatPortBlocksUsedHighThresholdReached, bWagTunnelMaxSupported=bWagTunnelMaxSupported, bWagCgnatProfileName=bWagCgnatProfileName, bWagNumTunnelsInactiveDeleted=bWagNumTunnelsInactiveDeleted, bWagRadiusAcctResponseReceived=bWagRadiusAcctResponseReceived, bWagTunnelTunnelsLookupNotFound=bWagTunnelTunnelsLookupNotFound, bWagCgnatUnauthPublicIPAddressType=bWagCgnatUnauthPublicIPAddressType, bWagNumUnauthenticatedSubscribers=bWagNumUnauthenticatedSubscribers, bWagTunnelPktsTxdHTTPRedir=bWagTunnelPktsTxdHTTPRedir, bWagSubscriberEntry=bWagSubscriberEntry, bWagNumL2tpv3TunnelsDeletedDuetoLIFDown=bWagNumL2tpv3TunnelsDeletedDuetoLIFDown, bWagDhcpDiscoverAckIntervalLast=bWagDhcpDiscoverAckIntervalLast, bWagCgnatUnauthPeriodIpTable=bWagCgnatUnauthPeriodIpTable, bWagSubscriberSessionTimeoutPreauthCount=bWagSubscriberSessionTimeoutPreauthCount, bWagCgnatPublicIPAddress=bWagCgnatPublicIPAddress, PYSNMP_MODULE_ID=benuWagStatsMIB, bWagMHNProfileUsedIPAddresses=bWagMHNProfileUsedIPAddresses, bWagSubscriberAuthsViaPortalCount=bWagSubscriberAuthsViaPortalCount, bWagSubscriberHomeDhcpDynSubsDeleted=bWagSubscriberHomeDhcpDynSubsDeleted, bWagNumSubsWithPrivateIPAddress=bWagNumSubsWithPrivateIPAddress, bWagNumRedirectedSubscribersCount=bWagNumRedirectedSubscribersCount, bWagRadiusDMNackSent=bWagRadiusDMNackSent, bWagSubscriberSessionTimeoutAuthviaportalCount=bWagSubscriberSessionTimeoutAuthviaportalCount, bWagCgnatProfileType=bWagCgnatProfileType, bWagNumCurrentTunnHomeInactive=bWagNumCurrentTunnHomeInactive, bWagProcessingLatencyMIBObjects=bWagProcessingLatencyMIBObjects, bWagCgnatAuthPortRisingThresholdCrossedSubCount=bWagCgnatAuthPortRisingThresholdCrossedSubCount, bWagVrgApiIpAddrUsedHighThresholdReached=bWagVrgApiIpAddrUsedHighThresholdReached)
mibBuilder.exportSymbols("BENU-WAG-STATS-MIB", bWagTunnelPktsRxdHTTP=bWagTunnelPktsRxdHTTP, bWagCgnatSubscriberMac=bWagCgnatSubscriberMac, bWagCgnatUnauthPublicIPAddress=bWagCgnatUnauthPublicIPAddress, bWagCgnatPoolGroupStatsTable=bWagCgnatPoolGroupStatsTable, bWagMHNProfileNATIPPoolGroup=bWagMHNProfileNATIPPoolGroup, bWagTunnelPktsTxdTCPFin=bWagTunnelPktsTxdTCPFin, bWagNumCurrentHomeDhcpStatSubs=bWagNumCurrentHomeDhcpStatSubs, bWagPolicyEntry=bWagPolicyEntry, bWagTunnelPktsRxdGRE=bWagTunnelPktsRxdGRE, bWagDHCPv6SolicitReplyIntervalLast=bWagDHCPv6SolicitReplyIntervalLast, bWagCgnatUnauthPortBlockMaxUtil=bWagCgnatUnauthPortBlockMaxUtil, bWagNumTunnelsSubsAssociated=bWagNumTunnelsSubsAssociated, bWagCgnatProfileIPPoolGroup=bWagCgnatProfileIPPoolGroup, bWagNumOfUnAuthSubscribersWithPolicy=bWagNumOfUnAuthSubscribersWithPolicy, bWagMHNProfileTotalPoolIPAddresses=bWagMHNProfileTotalPoolIPAddresses, bWagCgnatPoolGroupName=bWagCgnatPoolGroupName, bWagSubscriberRedirectionsByAcl=bWagSubscriberRedirectionsByAcl, bWagDhcpv6MIBObjects=bWagDhcpv6MIBObjects, bWagCgnatIPAddressType=bWagCgnatIPAddressType, bWagDHCPv6SolicitAdvLatencyLast=bWagDHCPv6SolicitAdvLatencyLast, bWagCgnatUnauthIPPortBlocksFree=bWagCgnatUnauthIPPortBlocksFree, bWagCgnatAuthSubscriberPortsUtil=bWagCgnatAuthSubscriberPortsUtil, bWagDhcpTPSLow=bWagDhcpTPSLow, bWagPolicyIndex=bWagPolicyIndex, bWagDHCPv6SolicitReplyIntervalMax=bWagDHCPv6SolicitReplyIntervalMax, bWagNumCurrentHomeDhcpDynSubs=bWagNumCurrentHomeDhcpDynSubs, bWagNumTunnelsDeletedDuetoLIFDown=bWagNumTunnelsDeletedDuetoLIFDown, bWagDHCPv6ReplySent=bWagDHCPv6ReplySent, bWagDsLiteProfileName=bWagDsLiteProfileName, bWagNumPreAuthenticatedSubscribers=bWagNumPreAuthenticatedSubscribers, bWagTunnelDeletedByCommand=bWagTunnelDeletedByCommand, bWagDHCPv6SolicitReplyIntervalAvg=bWagDHCPv6SolicitReplyIntervalAvg, bWagDhcpDiscoverReceived=bWagDhcpDiscoverReceived, bWagTunnelPktsTxdTCPAck2Fin=bWagTunnelPktsTxdTCPAck2Fin, bWagMHNProfileStatsTable=bWagMHNProfileStatsTable, bWagDHCPv6AdvRequestIntervalAvg=bWagDHCPv6AdvRequestIntervalAvg, bWagVrgApiIpAddrUsedLowThresholdReached=bWagVrgApiIpAddrUsedLowThresholdReached, bWagCgnatProfileStatsIndex=bWagCgnatProfileStatsIndex, bWagCgnatIPPortBlocksUsed=bWagCgnatIPPortBlocksUsed, bWagCgnatUnauthIPSubActiveCount=bWagCgnatUnauthIPSubActiveCount, bWagDsLiteMIBObjects=bWagDsLiteMIBObjects, bWagDHCPv6RequestReplyLatencyMax=bWagDHCPv6RequestReplyLatencyMax, bWagDhcpDiscoverOfferLatencyMax=bWagDhcpDiscoverOfferLatencyMax, bWagDhcpTable=bWagDhcpTable, bWagDHCPv6AdvRequestIntervalMin=bWagDHCPv6AdvRequestIntervalMin, bWagTunnelNotifObjects=bWagTunnelNotifObjects, bWagRadiusDMLatencyLast=bWagRadiusDMLatencyLast, bWagCgnatUnauthIPStatsEntry=bWagCgnatUnauthIPStatsEntry, bWagL2tpv3TunnelPktsRxdDHCP=bWagL2tpv3TunnelPktsRxdDHCP, bWagSubscriberThrottledCount=bWagSubscriberThrottledCount, bWagCgnatUnauthIPAddress=bWagCgnatUnauthIPAddress, bWagTunnelPktsRxdARP=bWagTunnelPktsRxdARP, bWagDHCPv6AdvertisementSent=bWagDHCPv6AdvertisementSent, bWagDsLiteProfileReservedIPAddresses=bWagDsLiteProfileReservedIPAddresses, bWagTunnelCreatedDynamically=bWagTunnelCreatedDynamically, bWagTunnelCreatedStatically=bWagTunnelCreatedStatically, bWagPolicyName=bWagPolicyName, bWagNumTunnelsDeleted=bWagNumTunnelsDeleted, bWagRadiusAcctLatencyLast=bWagRadiusAcctLatencyLast, bWagSubscriberAbsoluteTimeoutCount=bWagSubscriberAbsoluteTimeoutCount, bWagDhcpRequestAckLatencyAvg=bWagDhcpRequestAckLatencyAvg, bWagCgnatProfileSubscribers=bWagCgnatProfileSubscribers, bWagDownstreamProcessingLatencyPktCount=bWagDownstreamProcessingLatencyPktCount, bWagUpstreamProcessingLatencyPktCount=bWagUpstreamProcessingLatencyPktCount, bWagNumL2tpv3TunnelsCreatedDynamically=bWagNumL2tpv3TunnelsCreatedDynamically, bWagNumTunnelsDeletedByCommand=bWagNumTunnelsDeletedByCommand, bWagRadiusNotifObjects=bWagRadiusNotifObjects, bWagNumL2tpv3TunnelsDeletedByCommand=bWagNumL2tpv3TunnelsDeletedByCommand, bWagCgnatPeriodIpTable=bWagCgnatPeriodIpTable, bWagTunnelPktsEncapsulatedGRE=bWagTunnelPktsEncapsulatedGRE, bWagTunnelDeletedDueToInactivity=bWagTunnelDeletedDueToInactivity, bWagDhcpTPS=bWagDhcpTPS, bWagDhcpOfferRequestIntervalAvg=bWagDhcpOfferRequestIntervalAvg, bWagNumTunnelsCreatedDynamically=bWagNumTunnelsCreatedDynamically, bWagSubscriberAuthenticationsCount=bWagSubscriberAuthenticationsCount, bWagL2tpv3TunnelPktsEncapsulated=bWagL2tpv3TunnelPktsEncapsulated, bWagCgnatPoolGroupIndex=bWagCgnatPoolGroupIndex, bWagCgnatIPStatsTable=bWagCgnatIPStatsTable, bWagVrgApiIpAddrUsedHighThreshold=bWagVrgApiIpAddrUsedHighThreshold, bWagNumCurrentSingleStaticSubscribers=bWagNumCurrentSingleStaticSubscribers, bWagTunnelPktsRxdTCPSyn=bWagTunnelPktsRxdTCPSyn, bWagDHCPv6AdvRequestIntervalLast=bWagDHCPv6AdvRequestIntervalLast, bWagSubscriberDsLiteActivationsCount=bWagSubscriberDsLiteActivationsCount, bWagDHCPv6SolicitReceived=bWagDHCPv6SolicitReceived, bWagRadiusCoALatencyMax=bWagRadiusCoALatencyMax, bWagDhcpTPSHigh=bWagDhcpTPSHigh, bWagNumCurrentTunnels=bWagNumCurrentTunnels, bWagCgnatUnauthPeriodIpInterval=bWagCgnatUnauthPeriodIpInterval, bWagSubscriberDroppedByLicenseManagerCount=bWagSubscriberDroppedByLicenseManagerCount, bWagCgnatPoolGroupTotalIPAddresses=bWagCgnatPoolGroupTotalIPAddresses, bWagTunnelCountHighThreshold=bWagTunnelCountHighThreshold, bWagRadiusAuthLatencyMax=bWagRadiusAuthLatencyMax, bWagTunnelCountLowThreshold=bWagTunnelCountLowThreshold, bWagRadiusAuthLatencyAvg=bWagRadiusAuthLatencyAvg, bWagDsLiteProfileStatsTable=bWagDsLiteProfileStatsTable, bWagrgApiIPPoolGroup=bWagrgApiIPPoolGroup, bWagRadiusAuthLatencyLast=bWagRadiusAuthLatencyLast, bWagRadiusMIBObjects=bWagRadiusMIBObjects, bWagRadiusAccessAcceptReceived=bWagRadiusAccessAcceptReceived, bWagSubscriberDeletionsByDMCount=bWagSubscriberDeletionsByDMCount, bWagCgnatProfileStatsTable=bWagCgnatProfileStatsTable, bWagNumSubsUnauthenticatedWithIPv6Prefix=bWagNumSubsUnauthenticatedWithIPv6Prefix, bWagNumL2tpv3TunnelsDeleted=bWagNumL2tpv3TunnelsDeleted, bDSLiteTunnelsUsingFourPortBlocks=bDSLiteTunnelsUsingFourPortBlocks, bWagCgnatProfileStatsEntry=bWagCgnatProfileStatsEntry, bWagDHCPv6Table=bWagDHCPv6Table, bWagRadiusAccessRequestSent=bWagRadiusAccessRequestSent, bWagRadiusAcctLatencyMin=bWagRadiusAcctLatencyMin, bWagL2tpv3TunnelPktsRxdDNS=bWagL2tpv3TunnelPktsRxdDNS, bWagCgnatUnauthPeriodIpIndex=bWagCgnatUnauthPeriodIpIndex, bWagCgnatPoolGroupSubscribers=bWagCgnatPoolGroupSubscribers, bWagVrgApiIpAddressesExhausted=bWagVrgApiIpAddressesExhausted, bWagL2tpv3TunnelDeletedByCommand=bWagL2tpv3TunnelDeletedByCommand, bWagRadiusAcctRequestSent=bWagRadiusAcctRequestSent, bWagTunnelPktsRxdDNS=bWagTunnelPktsRxdDNS, bWagMHNProfileMaxIPAddresses=bWagMHNProfileMaxIPAddresses, bWagCgnatIPStatsIndex=bWagCgnatIPStatsIndex, bWagCgnatUnauthIntervalDuration=bWagCgnatUnauthIntervalDuration, bWagCgnatIntervalDuration=bWagCgnatIntervalDuration, bWagRadiusDMLatencyMax=bWagRadiusDMLatencyMax, bWagIpSystemStatsReasmFails=bWagIpSystemStatsReasmFails, bWagDsLiteProfileMaxTunnels=bWagDsLiteProfileMaxTunnels, bWagRadiusIntervalDuration=bWagRadiusIntervalDuration, bWagDownstreamProcessingLatencyMin=bWagDownstreamProcessingLatencyMin, bWagNumUnAuthSubsWithPublicIPAddress=bWagNumUnAuthSubsWithPublicIPAddress, bWagCgnatUnauthIPAddressType=bWagCgnatUnauthIPAddressType, bWagRadiusCoALatencyMin=bWagRadiusCoALatencyMin)
