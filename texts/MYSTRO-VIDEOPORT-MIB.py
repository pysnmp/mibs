#
# PySNMP MIB module MYSTRO-VIDEOPORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/mystro/MYSTRO-VIDEOPORT-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:42:17 2024
# On host fv-az973-242 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
generic, = mibBuilder.importSymbols("MYSTRO-ROOT-MIB", "generic")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, enterprises, Integer32, Counter32, Counter64, IpAddress, Gauge32, MibIdentifier, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "enterprises", "Integer32", "Counter32", "Counter64", "IpAddress", "Gauge32", "MibIdentifier", "ModuleIdentity", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
udpLocalPort, udpLocalAddress = mibBuilder.importSymbols("UDP-MIB", "udpLocalPort", "udpLocalAddress")
videoport = ModuleIdentity((1, 3, 6, 1, 4, 1, 14373, 2, 1))
videoport.setRevisions(('2002-11-05 01:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: videoport.setRevisionsDescriptions(('',))
if mibBuilder.loadTexts: videoport.setLastUpdated('200211052324Z')
if mibBuilder.loadTexts: videoport.setOrganization('Mystro TV - an AOL Time Warner Company')
if mibBuilder.loadTexts: videoport.setContactInfo('Michael Durand : Senior Software Engineer : 720-279-2865 :\tmdurand@mystrotv.com')
if mibBuilder.loadTexts: videoport.setDescription('This file defines the video port MIB implemented by encoders, rate shapers, and multiplexers in Mystro TV.')
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
videoServicesTable = MibTable((1, 3, 6, 1, 4, 1, 14373, 2, 1, 1), )
if mibBuilder.loadTexts: videoServicesTable.setStatus('current')
if mibBuilder.loadTexts: videoServicesTable.setDescription('Table of all video services being streamed by this device.')
videoServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14373, 2, 1, 1, 1), ).setIndexNames((0, "MYSTRO-VIDEOPORT-MIB", "serviceID"), (0, "MYSTRO-VIDEOPORT-MIB", "definition"))
if mibBuilder.loadTexts: videoServicesEntry.setStatus('current')
if mibBuilder.loadTexts: videoServicesEntry.setDescription('Entry for the videoServicesTable')
serviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceID.setStatus('current')
if mibBuilder.loadTexts: serviceID.setDescription('Call sign of the video service.')
definition = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stddef", 1), ("highdef", 2), ("mixture", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: definition.setStatus('current')
if mibBuilder.loadTexts: definition.setDescription('Type of video resolution to be expected on the service.')
transportType = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("udp", 1), ("asi", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transportType.setStatus('current')
if mibBuilder.loadTexts: transportType.setDescription('The type of transport over which the service is available.')
bitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitRate.setStatus('current')
if mibBuilder.loadTexts: bitRate.setDescription('Bit rate of of the video service in bits per second.')
udpServicesTable = MibTable((1, 3, 6, 1, 4, 1, 14373, 2, 1, 10), )
if mibBuilder.loadTexts: udpServicesTable.setStatus('current')
if mibBuilder.loadTexts: udpServicesTable.setDescription('Table of video services being streamed via UDP/IP.')
udpServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14373, 2, 1, 10, 1), ).setIndexNames((0, "MYSTRO-VIDEOPORT-MIB", "serviceID"), (0, "MYSTRO-VIDEOPORT-MIB", "definition"))
if mibBuilder.loadTexts: udpServicesEntry.setStatus('current')
if mibBuilder.loadTexts: udpServicesEntry.setDescription('Entry for the udpServicesTable.')
destIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destIPAddr.setStatus('current')
if mibBuilder.loadTexts: destIPAddr.setDescription('Destination IP address to which the service is being streamed.')
dataUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataUdpPort.setStatus('current')
if mibBuilder.loadTexts: dataUdpPort.setDescription('Destination UDP port on which the service data is being streamed.')
trickModeUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trickModeUdpPort.setStatus('current')
if mibBuilder.loadTexts: trickModeUdpPort.setDescription('UDP port number for trick mode index data. (-1 if none is being streamed)')
asiServicesTable = MibTable((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15), )
if mibBuilder.loadTexts: asiServicesTable.setStatus('current')
if mibBuilder.loadTexts: asiServicesTable.setDescription('Table of services being streamed over an ASI port.')
asiServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1), ).setIndexNames((0, "MYSTRO-VIDEOPORT-MIB", "serviceID"), (0, "MYSTRO-VIDEOPORT-MIB", "definition"))
if mibBuilder.loadTexts: asiServicesEntry.setStatus('current')
if mibBuilder.loadTexts: asiServicesEntry.setDescription('Entry for the asiServices table.')
progNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: progNumber.setStatus('current')
if mibBuilder.loadTexts: progNumber.setDescription('Program number of the ASI service.')
pidPMT = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 2), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidPMT.setStatus('current')
if mibBuilder.loadTexts: pidPMT.setDescription('MPEG PID for PMT data.')
pidVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 3), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidVideo.setStatus('current')
if mibBuilder.loadTexts: pidVideo.setDescription('MPEG PID for video.')
pidAudio0 = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 4), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidAudio0.setStatus('current')
if mibBuilder.loadTexts: pidAudio0.setDescription('MPEG PID for audio 0.')
pidAudio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 5), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidAudio1.setStatus('current')
if mibBuilder.loadTexts: pidAudio1.setDescription('MPEG PID for audio 1.')
pidAudio2 = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 6), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidAudio2.setStatus('current')
if mibBuilder.loadTexts: pidAudio2.setDescription('MPEG PID for audio 2.')
pidAudio3 = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 7), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidAudio3.setStatus('current')
if mibBuilder.loadTexts: pidAudio3.setDescription('MPEG PID for audio 3.')
pidAudio4 = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 8), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidAudio4.setStatus('current')
if mibBuilder.loadTexts: pidAudio4.setDescription('MPEG PID for audio 4.')
pidAudio5 = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 9), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pidAudio5.setStatus('current')
if mibBuilder.loadTexts: pidAudio5.setDescription('MPEG PID for audio 5.')
connector = MibTableColumn((1, 3, 6, 1, 4, 1, 14373, 2, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connector.setStatus('current')
if mibBuilder.loadTexts: connector.setDescription('ASI output port on the device that carries the service.')
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 14373, 2, 1, 500))
addService = NotificationType((1, 3, 6, 1, 4, 1, 14373, 2, 1, 500, 1)).setObjects(("MYSTRO-VIDEOPORT-MIB", "serviceID"), ("MYSTRO-VIDEOPORT-MIB", "definition"), ("MYSTRO-VIDEOPORT-MIB", "transportType"))
if mibBuilder.loadTexts: addService.setStatus('current')
if mibBuilder.loadTexts: addService.setDescription('Sent when the device is providing a new service.')
removeService = NotificationType((1, 3, 6, 1, 4, 1, 14373, 2, 1, 500, 2)).setObjects(("MYSTRO-VIDEOPORT-MIB", "serviceID"), ("MYSTRO-VIDEOPORT-MIB", "definition"), ("MYSTRO-VIDEOPORT-MIB", "transportType"))
if mibBuilder.loadTexts: removeService.setStatus('current')
if mibBuilder.loadTexts: removeService.setDescription('Sent when the device is no longer providing a service.')
updateService = NotificationType((1, 3, 6, 1, 4, 1, 14373, 2, 1, 500, 3)).setObjects(("MYSTRO-VIDEOPORT-MIB", "serviceID"), ("MYSTRO-VIDEOPORT-MIB", "definition"), ("MYSTRO-VIDEOPORT-MIB", "transportType"))
if mibBuilder.loadTexts: updateService.setStatus('current')
if mibBuilder.loadTexts: updateService.setDescription('Sent when an existing service changes.')
mibBuilder.exportSymbols("MYSTRO-VIDEOPORT-MIB", pidAudio1=pidAudio1, enterprises=enterprises, PYSNMP_MODULE_ID=videoport, connector=connector, updateService=updateService, dod=dod, pidPMT=pidPMT, videoport=videoport, addService=addService, progNumber=progNumber, pidAudio4=pidAudio4, pidAudio3=pidAudio3, udpServicesEntry=udpServicesEntry, serviceID=serviceID, udpServicesTable=udpServicesTable, trickModeUdpPort=trickModeUdpPort, asiServicesEntry=asiServicesEntry, org=org, dataUdpPort=dataUdpPort, notifications=notifications, internet=internet, bitRate=bitRate, videoServicesEntry=videoServicesEntry, asiServicesTable=asiServicesTable, pidAudio0=pidAudio0, pidAudio2=pidAudio2, private=private, videoServicesTable=videoServicesTable, removeService=removeService, destIPAddr=destIPAddr, pidAudio5=pidAudio5, definition=definition, transportType=transportType, pidVideo=pidVideo)
