#
# PySNMP MIB module NBS-SLA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/mrv/NBS-SLA-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 09:33:28 2024
# On host fv-az1146-179 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
nbs, = mibBuilder.importSymbols("NBS-MIB", "nbs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Bits, ObjectIdentity, Unsigned32, iso, NotificationType, ModuleIdentity, Gauge32, Counter64, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Bits", "ObjectIdentity", "Unsigned32", "iso", "NotificationType", "ModuleIdentity", "Gauge32", "Counter64", "MibIdentifier", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nbsSlaMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 216))
if mibBuilder.loadTexts: nbsSlaMib.setLastUpdated('201610190000Z')
if mibBuilder.loadTexts: nbsSlaMib.setOrganization('NBS')
if mibBuilder.loadTexts: nbsSlaMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: nbsSlaMib.setDescription('MIB for representing Service Level Agreement (SLA) information')
nbsSlaTrafficGenGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 216, 1))
if mibBuilder.loadTexts: nbsSlaTrafficGenGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenGrp.setDescription('Traffic Generation configuration and reporting capabilities')
nbsSlaLossGainGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 216, 2))
if mibBuilder.loadTexts: nbsSlaLossGainGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainGrp.setDescription('Loss Gain Analysis configuration and reporting capabilities')
nbsSlaPerfMonGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 216, 3))
if mibBuilder.loadTexts: nbsSlaPerfMonGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonGrp.setDescription('Performance Monitoring configuration and reporting capabilities')
nbsSlaTrafficGenTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 216, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaTrafficGenTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenTableSize.setDescription('The number of entries in nbsSlaTrafficGenTable')
nbsSlaTrafficGenTable = MibTable((1, 3, 6, 1, 4, 1, 629, 216, 1, 2), )
if mibBuilder.loadTexts: nbsSlaTrafficGenTable.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenTable.setDescription('Traffic Generation information.')
nbsSlaTrafficGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1), ).setIndexNames((0, "NBS-SLA-MIB", "nbsSlaTrafficGenIfIndex"))
if mibBuilder.loadTexts: nbsSlaTrafficGenEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenEntry.setDescription("The Traffic Generation port's information")
nbsSlaTrafficGenIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsSlaTrafficGenIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenIfIndex.setDescription('The Mib2 ifIndex of this Traffic Generation port')
nbsSlaTrafficGenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("start", 2), ("stop", 3))).clone('stop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaTrafficGenAction.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenAction.setDescription('Different actions to activate the traffic generation. There\n        are three frame generation activities: specify, start, and\n        stop. Specifying and actually starting traffic may be done\n        together or separately. In fact, it is reasonable to specify\n        once, then start (and stop) many times.')
nbsSlaTrafficGenFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9600)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaTrafficGenFrameSize.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenFrameSize.setDescription('Frame Size range from 64 to 9600')
nbsSlaTrafficGenFrameSizeType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("random", 2), ("fixed", 3))).clone('fixed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaTrafficGenFrameSizeType.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenFrameSizeType.setDescription("Specifies the size of generated frames: random, or per\n        'nbsSlaTrafficGenFrameSize' bytes. The random value range is limited\n        by ANDing it with (the mask value) 'nbsSlaTrafficGenFrameSize'; a\n        zero result is treated as 64.")
nbsSlaTrafficGenFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaTrafficGenFrameCount.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenFrameCount.setDescription('Number of frames to generate when a fixed count is desired.')
nbsSlaTrafficGenFrameCountType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("continuous", 2), ("fixed", 3))).clone('continuous')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaTrafficGenFrameCountType.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenFrameCountType.setDescription('Specifies how many frames to generate: a continuous stream that is\n        manually stopped, or a fixed count.')
nbsSlaTrafficGenInterPacketGap = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12, 134217727)).clone(1249928)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaTrafficGenInterPacketGap.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenInterPacketGap.setDescription('Specifies the number of bytes between generated frames;\n        this determines the traffic rate. The default (1249928)\n        sets an approx rate of 100/10/1 fps at 1000/100/10 Mbps.')
nbsSlaTrafficGenMaxHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaTrafficGenMaxHeaders.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenMaxHeaders.setDescription('Maximum number of bytes supported in nbsSlaTrafficGenHeaders;\n        zero if not supported')
nbsSlaTrafficGenMaxPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaTrafficGenMaxPattern.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenMaxPattern.setDescription('Maximum number of bytes supported in nbsSlaTrafficGenPattern;\n        zero if not supported')
nbsSlaTrafficGenHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(48, 48)).setFixedLength(48).clone(hexValue="000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaTrafficGenHeaders.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenHeaders.setDescription('Specifies the 48 bytes following the first 64 bytes of generated\n        frames. The remainder of the frame is filled with Pattern bytes.')
nbsSlaTrafficGenDa = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaTrafficGenDa.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenDa.setDescription('Destination Address - MAC address')
nbsSlaTrafficGenDaType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("random", 2), ("fixed", 3), ("increment", 4))).clone('random')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaTrafficGenDaType.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenDaType.setDescription('Specifies the handling of the DA in the Header bytes:\n        generate a random value for each frame, use the same\n        value for each frame, or increment the initial value\n        by 1 for each frame.')
nbsSlaTrafficGenSa = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaTrafficGenSa.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenSa.setDescription('Source Address - MAC address')
nbsSlaTrafficGenSaType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("random", 2), ("fixed", 3), ("increment", 4))).clone('random')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaTrafficGenSaType.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenSaType.setDescription('Specifies the handling of the SA in the Header bytes:\n        generate a random value for each frame, use the same\n        value for each frame, or increment the initial value\n        by 1 for each frame.')
nbsSlaTrafficGenTag = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaTrafficGenTag.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenTag.setDescription('VLAN tag or e-type plus initial data If VLAN tagging is not\n           specified (i.e. Tag does not begin as 81-00), then the first\n           two bytes of Tag define the frame type, and the last two Tag\n           bytes are the first two data bytes')
nbsSlaTrafficGenTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("random", 2), ("fixed", 3), ("increment", 4))).clone('random')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaTrafficGenTagType.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenTagType.setDescription('Specifies the handling of the Tag in the Header bytes:\n        generate a random value for each frame, use the same\n        value for each frame, or increment the initial value\n        by 1 for each frame.')
nbsSlaTrafficGenPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaTrafficGenPattern.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenPattern.setDescription('The one to four Pattern bytes are replicated as needed to fill-out\n        the frame to the specified size')
nbsSlaTrafficGenPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("random", 2), ("fixed", 3))).clone('random')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaTrafficGenPatternType.setStatus('current')
if mibBuilder.loadTexts: nbsSlaTrafficGenPatternType.setDescription('Specifies the handling of the Pattern bytes that fill-out\n        generated frames: generate a random value for each frame,\n        or use the same value for each frame.')
nbsSlaLossGainTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 216, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainTableSize.setDescription('The number of entries in nbsSlaLossGainTable')
nbsSlaLossGainTable = MibTable((1, 3, 6, 1, 4, 1, 629, 216, 2, 2), )
if mibBuilder.loadTexts: nbsSlaLossGainTable.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainTable.setDescription('Contains a description of Loss/Gain Traffic Analysis information.')
nbsSlaLossGainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1), ).setIndexNames((0, "NBS-SLA-MIB", "nbsSlaLossGainIfIndex"))
if mibBuilder.loadTexts: nbsSlaLossGainEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainEntry.setDescription('Loss/Gain Traffic Analysis entry')
nbsSlaLossGainIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsSlaLossGainIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainIfIndex.setDescription('The Mib2 ifIndex of this Loss Gain Analysis port')
nbsSlaLossGainAction = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 1), ("inactive", 2), ("start", 3), ("stop", 4), ("inProgress", 5))).clone('notSupported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaLossGainAction.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAction.setDescription('Traffic Analysis (loss/gain) activity status.')
nbsSlaLossGainInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 86400)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaLossGainInterval.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainInterval.setDescription('Traffic Analysis (loss/gain) sampling time interval (sec).\n        Practical range allowed is 10 seconds to 1 day.')
nbsSlaLossGainEthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 4), Integer32().clone(1518)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainEthMax.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainEthMax.setDescription('The maximum size of normal Ethernet frames used when tabulating frames\n        by size, to divide the range 1024-2047 in two: 1024 to EthMax, and\n        EthMax+1 to 2047. It is typically 1518, or 1522 for tagged frames.')
nbsSlaLossGainRdAllFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdAllFrames.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdAllFrames.setDescription('The count of all frames (good+bad) lost/gained (-/+) in the\n        most recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdBadFrames.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdBadFrames.setDescription('The count of all bad frames lost/gained (-/+) in the\n        most recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdDiscards.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdDiscards.setDescription('The count of all bad frames lost/gained (-/+) in the\n        most recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdUcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdUcastFrames.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdUcastFrames.setDescription('The count of good unicast frames lost/gained (-/+) in the\n        most recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdMcastFrames.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdMcastFrames.setDescription('The count of good multicast frames lost/gained (-/+) in the\n        most recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdBcastFrames.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdBcastFrames.setDescription('The count of good broadcast frames lost/gained (-/+) in the\n        most recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdSize64.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdSize64.setDescription('The count of all 64 byte frames lost/gained (-/+) in the\n        most recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdSize65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdSize65to127.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdSize65to127.setDescription('The count of all 65-127 byte frames lost/gained (-/+) in the\n        most recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdSize128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdSize128to255.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdSize128to255.setDescription('The count of all 128-255 byte frames lost/gained (-/+) in\n        the most recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdSize256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdSize256to511.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdSize256to511.setDescription('The count of all 256-511 byte frames lost/gained (-/+) in\n        the most recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdSize512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdSize512to1023.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdSize512to1023.setDescription('The count of all 512-1023 byte frames lost/gained (-/+) in\n        the most recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdSize1024toEthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdSize1024toEthMax.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdSize1024toEthMax.setDescription("The count of all 1024-'EthMax' byte frames lost/gained (-/+) in\n        the most recent interval.\n\n        Not supported value: 0x80000000")
nbsSlaLossGainRdSizeEthMaxto2047 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdSizeEthMaxto2047.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdSizeEthMaxto2047.setDescription("The count of all 'EthMax'+1-2047 byte frames lost/gained (-/+) in\n        the most recent interval.\n\n        Not supported value: 0x80000000")
nbsSlaLossGainRdSize2048to4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdSize2048to4095.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdSize2048to4095.setDescription('The count of all 2048-4095 byte frames lost/gained (-/+) in\n        the most recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdSize4096to8191 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdSize4096to8191.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdSize4096to8191.setDescription('The count of all 4096-8191 byte frames lost/gained (-/+) in\n        the most recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdSize8192orMore = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdSize8192orMore.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdSize8192orMore.setDescription('The count of all 2048-plus byte frames lost/gained (-/+) in\n        the most recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdFrameDivisor = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdFrameDivisor.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdFrameDivisor.setDescription('The divisor to calculate frame loss/gain ratios for the most\n        recent interval.')
nbsSlaLossGainRdAllOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdAllOctets.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdAllOctets.setDescription('The count of all frame octets lost/gained (-/+) in the most\n        recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdBadOctets.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdBadOctets.setDescription('The count of bad frame octets observed in the most\n        recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainRdOctetDivisor = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdOctetDivisor.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdOctetDivisor.setDescription('The divisor to calculate octet loss/gain ratios for the most\n        recent interval.')
nbsSlaLossGainRdTimeSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainRdTimeSpan.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainRdTimeSpan.setDescription('The time span (tenths of a sec) for the most recent\n        interval.')
nbsSlaLossGainAdAllFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdAllFrames.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdAllFrames.setDescription('The accumulated count of all frames (good+bad) lost/gained\n        (-/+) over all intervals.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdBadFrames.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdBadFrames.setDescription('The accumulated count of all bad frames lost/gained\n        (-/+) over all intervals.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdDiscards.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdDiscards.setDescription('The count of all bad frames lost/gained (-/+) in the\n        most recent interval.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdUcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdUcastFrames.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdUcastFrames.setDescription('The accumulated count of good unicast frames lost/gained\n        (-/+) over all intervals.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdMcastFrames.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdMcastFrames.setDescription('The accumulated count of good multicast frames lost/gained\n        (-/+) over all intervals.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdBcastFrames.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdBcastFrames.setDescription('The accumulated count of good broadcast frames lost/gained\n        (-/+) over all intervals.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdSize64.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdSize64.setDescription('The accumulated count of all 64 byte frames lost/gained\n        (-/+) over all intervals.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdSize65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdSize65to127.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdSize65to127.setDescription('The accumulated count of all 65-127 byte frames lost/gained\n        (-/+) over all intervals.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdSize128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdSize128to255.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdSize128to255.setDescription('The accumulated count of all 128-255 byte frames lost/gained\n        (-/+) over all intervals.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdSize256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdSize256to511.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdSize256to511.setDescription('The accumulated count of all 256-511 byte frames lost/gained\n        (-/+) over all intervals.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdSize512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdSize512to1023.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdSize512to1023.setDescription('The accumulated count of all 512-1023 byte frames\n        lost/gained (-/+) over all intervals.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdSize1024toEthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdSize1024toEthMax.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdSize1024toEthMax.setDescription("The accumulated count of all 1024-'EthMax' byte frames\n        lost/gained (-/+) over all intervals.\n\n        Not supported value: 0x80000000")
nbsSlaLossGainAdSizeEthMaxto2047 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdSizeEthMaxto2047.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdSizeEthMaxto2047.setDescription("The accumulated count of all 'EthMax'+1-2047 byte frames\n        lost/gained (-/+) over all intervals.\n\n        Not supported value: 0x80000000")
nbsSlaLossGainAdSize2048to4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdSize2048to4095.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdSize2048to4095.setDescription('The accumulated count of all 2048-4095 byte frames\n        lost/gained (-/+) over all intervals.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdSize4096to8191 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdSize4096to8191.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdSize4096to8191.setDescription('The accumulated count of all 4096-8191 byte frames\n        lost/gained (-/+) over all intervals.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdSize8192orMore = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdSize8192orMore.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdSize8192orMore.setDescription('The accumulated count of all 8192-plus byte frames\n        lost/gained (-/+) over all intervals.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdFrameDivisor = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdFrameDivisor.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdFrameDivisor.setDescription('The divisor to calculate frame loss/gain ratios over all intervals.')
nbsSlaLossGainAdAllOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdAllOctets.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdAllOctets.setDescription('The accumulated count of all frame octets lost/gained (-/+)\n        over all intervals.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdBadOctets.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdBadOctets.setDescription('The accumulated count of all bad octets observed\n        over all intervals.\n\n        Not supported value: 0x80000000')
nbsSlaLossGainAdOctetDivisor = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdOctetDivisor.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdOctetDivisor.setDescription('The divisor to calculate octet loss/gain ratios over all intervals.')
nbsSlaLossGainAdTimeSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 2, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaLossGainAdTimeSpan.setStatus('current')
if mibBuilder.loadTexts: nbsSlaLossGainAdTimeSpan.setDescription('The accumulated time span (tenths of a sec) for all intervals.')
nbsSlaPerfMonTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 216, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonTableSize.setDescription('The number of entries in nbsSlaPerfMonTable')
nbsSlaPerfMonTable = MibTable((1, 3, 6, 1, 4, 1, 629, 216, 3, 2), )
if mibBuilder.loadTexts: nbsSlaPerfMonTable.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonTable.setDescription('Contains a description of Performance Monitoring information.')
nbsSlaPerfMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1), ).setIndexNames((0, "NBS-SLA-MIB", "nbsSlaPerfMonIfIndex"))
if mibBuilder.loadTexts: nbsSlaPerfMonEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonEntry.setDescription('Performance Monitoring entry')
nbsSlaPerfMonIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsSlaPerfMonIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonIfIndex.setDescription('The Mib2 ifIndex of this Performance Monitoring port')
nbsSlaPerfMonAction = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notSupported", 1), ("inactive", 2), ("start", 3), ("stop", 4), ("reflect", 5), ("forward", 6), ("inProgress", 7), ("complete", 8), ("stopping", 9))).clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaPerfMonAction.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonAction.setDescription('Traffic Analysis (performance monitoring) activity status.')
nbsSlaPerfMonSize = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9600)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaPerfMonSize.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonSize.setDescription('Performance Monitoring frame size specification:\n        1 = random-sized frames in the range 64-127 bytes\n        2 = random-sized frames in the range 64-255 bytes\n        3 = random-sized frames in the range 64-511 bytes\n        4 = random-sized frames in the range 64-1023 bytes\n        5 = random-sized frames in the range 64-2047 bytes\n        6 = random-sized frames in the range 64-4095 bytes\n        7 = random-sized frames in the range 64-8191 bytes\n        64..9600 = fixed-size frames of specified byte count.')
nbsSlaPerfMonDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 604800)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSlaPerfMonDuration.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonDuration.setDescription('Performance Monitoring time duration (sec). Practical range\n        allowed is 1 minute to 1 week.')
nbsSlaPerfMonTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 5), Integer32().clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonTimeLeft.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonTimeLeft.setDescription('Amount of time remaining in the monitoring duration (sec); a negative\n        value means not available.')
nbsSlaPerfMonEthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 6), Integer32().clone(1518)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonEthMax.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonEthMax.setDescription('The maximum size of normal Ethernet frames used when tabulating frames\n        by size, to divide the range 1024-2047 in two: 1024 to EthMax, and\n        EthMax+1 to 2047. It is typically 1518, or 1522 for tagged frames.')
nbsSlaPerfMonAvgAllSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonAvgAllSizes.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonAvgAllSizes.setDescription('The average transit time (nanosec) for monitored frames.')
nbsSlaPerfMonAvg64 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonAvg64.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonAvg64.setDescription('The average transit time (nanosec) for monitored 64 byte\n        frames.')
nbsSlaPerfMonAvg65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonAvg65to127.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonAvg65to127.setDescription('The average transit time (nanosec) for monitored 65-127 byte\n        frames.')
nbsSlaPerfMonAvg128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonAvg128to255.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonAvg128to255.setDescription('The average transit time (nanosec) for monitored 128-255\n        byte frames.')
nbsSlaPerfMonAvg256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonAvg256to511.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonAvg256to511.setDescription('The average transit time (nanosec) for monitored 256-511\n        byte frames.')
nbsSlaPerfMonAvg512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonAvg512to1023.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonAvg512to1023.setDescription('The average transit time (nanosec) for monitored 512-1023\n        byte frames.')
nbsSlaPerfMonAvg1024toEthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonAvg1024toEthMax.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonAvg1024toEthMax.setDescription("The average transit time (nanosec) for monitored 1024-'EthMax'\n        byte frames.")
nbsSlaPerfMonAvgEthMaxto2047 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonAvgEthMaxto2047.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonAvgEthMaxto2047.setDescription("The average transit time (nanosec) for monitored 'EthMax'+1-2047\n        byte frames.")
nbsSlaPerfMonAvg2048to4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonAvg2048to4095.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonAvg2048to4095.setDescription('The average transit time (nanosec) for monitored 2048-4095\n        byte frames.')
nbsSlaPerfMonAvg4096to8191 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonAvg4096to8191.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonAvg4096to8191.setDescription('The average transit time (nanosec) for monitored 4096-8191\n        byte frames.')
nbsSlaPerfMonAvg8192orMore = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonAvg8192orMore.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonAvg8192orMore.setDescription('The average transit time (nanosec) for monitored 8192-plus\n        byte frames.')
nbsSlaPerfMonMinAllSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMinAllSizes.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMinAllSizes.setDescription('The minimum transit time (nanosec) for monitored frames.')
nbsSlaPerfMonMin64 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMin64.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMin64.setDescription('The minimum transit time (nanosec) for monitored 64\n        byte frames.')
nbsSlaPerfMonMin65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMin65to127.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMin65to127.setDescription('The minimum transit time (nanosec) for monitored 65-127\n        byte frames.')
nbsSlaPerfMonMin128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMin128to255.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMin128to255.setDescription('The minimum transit time (nanosec) for monitored 128-255\n        byte frames.')
nbsSlaPerfMonMin256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMin256to511.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMin256to511.setDescription('The minimum transit time (nanosec) for monitored 256-511\n        byte frames.')
nbsSlaPerfMonMin512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMin512to1023.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMin512to1023.setDescription('The minimum transit time (nanosec) for monitored 512-1023\n        byte frames.')
nbsSlaPerfMonMin1024toEthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMin1024toEthMax.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMin1024toEthMax.setDescription("The minimum transit time (nanosec) for monitored 1024-'EthMax'\n        byte frames.")
nbsSlaPerfMonMinEthMaxto2047 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMinEthMaxto2047.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMinEthMaxto2047.setDescription("The minimum transit time (nanosec) for monitored 'EthMax'+1-2047\n        byte frames.")
nbsSlaPerfMonMin2048to4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMin2048to4095.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMin2048to4095.setDescription('The minimum transit time (nanosec) for monitored 2048-4095\n        byte frames.')
nbsSlaPerfMonMin4096to8191 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMin4096to8191.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMin4096to8191.setDescription('The minimum transit time (nanosec) for monitored 4096-8191\n        byte frames.')
nbsSlaPerfMonMin8192orMore = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMin8192orMore.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMin8192orMore.setDescription('The minimum transit time (nanosec) for monitored 8192-plus\n        byte frames.')
nbsSlaPerfMonMaxAllSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMaxAllSizes.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMaxAllSizes.setDescription('The maximum transit time (nanosec) for monitored frames.')
nbsSlaPerfMonMax64 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMax64.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMax64.setDescription('The maximum transit time (nanosec) for monitored 64\n        byte frames.')
nbsSlaPerfMonMax65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMax65to127.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMax65to127.setDescription('The maximum transit time (nanosec) for monitored 65-127\n        byte frames.')
nbsSlaPerfMonMax128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMax128to255.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMax128to255.setDescription('The maximum transit time (nanosec) for monitored 128-255\n        byte frames.')
nbsSlaPerfMonMax256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMax256to511.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMax256to511.setDescription('The maximum transit time (nanosec) for monitored 256-511\n        byte frames.')
nbsSlaPerfMonMax512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMax512to1023.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMax512to1023.setDescription('The maximum transit time (nanosec) for monitored 512-1023\n        byte frames.')
nbsSlaPerfMonMax1024toEthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMax1024toEthMax.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMax1024toEthMax.setDescription("The maximum transit time (nanosec) for monitored 1024-'EthMax'\n        byte frames.")
nbsSlaPerfMonMaxEthMaxto2047 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMaxEthMaxto2047.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMaxEthMaxto2047.setDescription("The maximum transit time (nanosec) for monitored 'EthMax'+1-2047\n        byte frames.")
nbsSlaPerfMonMax2048to4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMax2048to4095.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMax2048to4095.setDescription('The maximum transit time (nanosec) for monitored 4096-8191\n        byte frames.')
nbsSlaPerfMonMax4096to8191 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMax4096to8191.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMax4096to8191.setDescription('The maximum transit time (nanosec) for monitored 4096-8191\n        byte frames.')
nbsSlaPerfMonMax8192orMore = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonMax8192orMore.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonMax8192orMore.setDescription('The maximum transit time (nanosec) for monitored 8192-plus\n        byte frames.')
nbsSlaPerfMonFramesAllSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonFramesAllSizes.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonFramesAllSizes.setDescription('The count of all monitored frames.')
nbsSlaPerfMonFrames64 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonFrames64.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonFrames64.setDescription('The count of all monitored 64 byte frames.')
nbsSlaPerfMonFrames65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonFrames65to127.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonFrames65to127.setDescription('The count of all monitored 65-127 byte frames.')
nbsSlaPerfMonFrames128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonFrames128to255.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonFrames128to255.setDescription('The count of all monitored 128-255 byte frames.')
nbsSlaPerfMonFrames256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonFrames256to511.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonFrames256to511.setDescription('The count of all monitored 256-511 byte frames.')
nbsSlaPerfMonFrames512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonFrames512to1023.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonFrames512to1023.setDescription('The count of all monitored 512-1023 byte frames.')
nbsSlaPerfMonFrames1024toEthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonFrames1024toEthMax.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonFrames1024toEthMax.setDescription("The count of all monitored 1024-'EthMax' byte frames.")
nbsSlaPerfMonFramesEthMaxto2047 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonFramesEthMaxto2047.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonFramesEthMaxto2047.setDescription("The count of all monitored 'EthMax'+1-2047 byte frames.")
nbsSlaPerfMonFrames2048to4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonFrames2048to4095.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonFrames2048to4095.setDescription('The count of all monitored 2048-4095 byte frames.')
nbsSlaPerfMonFrames4096to8191 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonFrames4096to8191.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonFrames4096to8191.setDescription('The count of all monitored 4096-8191 byte frames.')
nbsSlaPerfMonFrames8192orMore = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonFrames8192orMore.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonFrames8192orMore.setDescription('The count of all monitored 8192-plus byte frames.')
nbsSlaPerfMonOctetsAllSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonOctetsAllSizes.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonOctetsAllSizes.setDescription('The count of octets in all monitored frames.')
nbsSlaPerfMonOctets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonOctets64.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonOctets64.setDescription('The count of octets in all monitored 64 byte frames.')
nbsSlaPerfMonOctets65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonOctets65to127.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonOctets65to127.setDescription('The count of octets in all monitored 65-127 byte frames.')
nbsSlaPerfMonOctets128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonOctets128to255.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonOctets128to255.setDescription('The count of octets in all monitored 128-255 byte frames.')
nbsSlaPerfMonOctets256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonOctets256to511.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonOctets256to511.setDescription('The count of octets in all monitored 256-511 byte frames.')
nbsSlaPerfMonOctets512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonOctets512to1023.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonOctets512to1023.setDescription('The count of octets in all monitored 512-1023 byte frames.')
nbsSlaPerfMonOctets1024toEthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonOctets1024toEthMax.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonOctets1024toEthMax.setDescription("The count of octets in all monitored 1024-'EthMax' byte frames.")
nbsSlaPerfMonOctetsEthMaxto2047 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonOctetsEthMaxto2047.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonOctetsEthMaxto2047.setDescription("The count of octets in all monitored 'EthMax'+1-2047 byte frames.")
nbsSlaPerfMonOctets2048to4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonOctets2048to4095.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonOctets2048to4095.setDescription('The count of octets in all monitored 2048-4095 byte frames.')
nbsSlaPerfMonOctets4096to8191 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonOctets4096to8191.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonOctets4096to8191.setDescription('The count of octets in all monitored 4096-8191 byte frames.')
nbsSlaPerfMonOctets8192orMore = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 216, 3, 2, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSlaPerfMonOctets8192orMore.setStatus('current')
if mibBuilder.loadTexts: nbsSlaPerfMonOctets8192orMore.setDescription('The count of octets in all monitored 8192-plus byte frames.')
mibBuilder.exportSymbols("NBS-SLA-MIB", nbsSlaPerfMonFrames512to1023=nbsSlaPerfMonFrames512to1023, nbsSlaPerfMonSize=nbsSlaPerfMonSize, nbsSlaTrafficGenDa=nbsSlaTrafficGenDa, nbsSlaLossGainRdSize1024toEthMax=nbsSlaLossGainRdSize1024toEthMax, nbsSlaPerfMonMin2048to4095=nbsSlaPerfMonMin2048to4095, nbsSlaLossGainRdAllFrames=nbsSlaLossGainRdAllFrames, nbsSlaPerfMonAvg512to1023=nbsSlaPerfMonAvg512to1023, nbsSlaTrafficGenSa=nbsSlaTrafficGenSa, nbsSlaPerfMonOctetsEthMaxto2047=nbsSlaPerfMonOctetsEthMaxto2047, nbsSlaLossGainAdSize1024toEthMax=nbsSlaLossGainAdSize1024toEthMax, nbsSlaPerfMonMinAllSizes=nbsSlaPerfMonMinAllSizes, nbsSlaTrafficGenInterPacketGap=nbsSlaTrafficGenInterPacketGap, nbsSlaLossGainAdSize512to1023=nbsSlaLossGainAdSize512to1023, nbsSlaPerfMonMax256to511=nbsSlaPerfMonMax256to511, nbsSlaPerfMonFrames4096to8191=nbsSlaPerfMonFrames4096to8191, nbsSlaPerfMonOctets8192orMore=nbsSlaPerfMonOctets8192orMore, nbsSlaPerfMonTimeLeft=nbsSlaPerfMonTimeLeft, nbsSlaPerfMonMax1024toEthMax=nbsSlaPerfMonMax1024toEthMax, nbsSlaTrafficGenHeaders=nbsSlaTrafficGenHeaders, nbsSlaTrafficGenFrameCountType=nbsSlaTrafficGenFrameCountType, nbsSlaPerfMonMin4096to8191=nbsSlaPerfMonMin4096to8191, nbsSlaLossGainRdMcastFrames=nbsSlaLossGainRdMcastFrames, nbsSlaLossGainAdSize64=nbsSlaLossGainAdSize64, nbsSlaLossGainRdUcastFrames=nbsSlaLossGainRdUcastFrames, nbsSlaPerfMonFramesEthMaxto2047=nbsSlaPerfMonFramesEthMaxto2047, nbsSlaPerfMonOctetsAllSizes=nbsSlaPerfMonOctetsAllSizes, nbsSlaPerfMonAvgEthMaxto2047=nbsSlaPerfMonAvgEthMaxto2047, nbsSlaLossGainRdSize4096to8191=nbsSlaLossGainRdSize4096to8191, nbsSlaPerfMonAvg2048to4095=nbsSlaPerfMonAvg2048to4095, nbsSlaLossGainAdSizeEthMaxto2047=nbsSlaLossGainAdSizeEthMaxto2047, nbsSlaLossGainRdSize256to511=nbsSlaLossGainRdSize256to511, nbsSlaPerfMonAvg64=nbsSlaPerfMonAvg64, nbsSlaLossGainRdAllOctets=nbsSlaLossGainRdAllOctets, nbsSlaPerfMonMin1024toEthMax=nbsSlaPerfMonMin1024toEthMax, nbsSlaPerfMonMax2048to4095=nbsSlaPerfMonMax2048to4095, nbsSlaPerfMonAction=nbsSlaPerfMonAction, nbsSlaPerfMonMin512to1023=nbsSlaPerfMonMin512to1023, nbsSlaPerfMonMinEthMaxto2047=nbsSlaPerfMonMinEthMaxto2047, nbsSlaLossGainAdSize2048to4095=nbsSlaLossGainAdSize2048to4095, nbsSlaLossGainInterval=nbsSlaLossGainInterval, nbsSlaPerfMonOctets64=nbsSlaPerfMonOctets64, nbsSlaLossGainGrp=nbsSlaLossGainGrp, nbsSlaTrafficGenDaType=nbsSlaTrafficGenDaType, nbsSlaPerfMonAvg128to255=nbsSlaPerfMonAvg128to255, nbsSlaTrafficGenFrameSize=nbsSlaTrafficGenFrameSize, nbsSlaPerfMonMin65to127=nbsSlaPerfMonMin65to127, nbsSlaPerfMonMaxEthMaxto2047=nbsSlaPerfMonMaxEthMaxto2047, nbsSlaLossGainRdSize2048to4095=nbsSlaLossGainRdSize2048to4095, nbsSlaLossGainAdOctetDivisor=nbsSlaLossGainAdOctetDivisor, nbsSlaLossGainRdOctetDivisor=nbsSlaLossGainRdOctetDivisor, nbsSlaLossGainAdBadOctets=nbsSlaLossGainAdBadOctets, nbsSlaLossGainRdFrameDivisor=nbsSlaLossGainRdFrameDivisor, nbsSlaTrafficGenIfIndex=nbsSlaTrafficGenIfIndex, nbsSlaPerfMonEntry=nbsSlaPerfMonEntry, nbsSlaPerfMonAvg256to511=nbsSlaPerfMonAvg256to511, nbsSlaLossGainRdSize65to127=nbsSlaLossGainRdSize65to127, nbsSlaLossGainAdAllOctets=nbsSlaLossGainAdAllOctets, nbsSlaPerfMonMax65to127=nbsSlaPerfMonMax65to127, nbsSlaLossGainRdSize8192orMore=nbsSlaLossGainRdSize8192orMore, nbsSlaTrafficGenEntry=nbsSlaTrafficGenEntry, nbsSlaPerfMonMax8192orMore=nbsSlaPerfMonMax8192orMore, nbsSlaPerfMonOctets2048to4095=nbsSlaPerfMonOctets2048to4095, nbsSlaLossGainEntry=nbsSlaLossGainEntry, nbsSlaPerfMonMax64=nbsSlaPerfMonMax64, nbsSlaLossGainEthMax=nbsSlaLossGainEthMax, nbsSlaLossGainAdBadFrames=nbsSlaLossGainAdBadFrames, nbsSlaPerfMonEthMax=nbsSlaPerfMonEthMax, nbsSlaLossGainAdSize128to255=nbsSlaLossGainAdSize128to255, nbsSlaPerfMonFrames2048to4095=nbsSlaPerfMonFrames2048to4095, nbsSlaTrafficGenMaxPattern=nbsSlaTrafficGenMaxPattern, nbsSlaLossGainAdAllFrames=nbsSlaLossGainAdAllFrames, nbsSlaLossGainAction=nbsSlaLossGainAction, nbsSlaPerfMonGrp=nbsSlaPerfMonGrp, nbsSlaTrafficGenTag=nbsSlaTrafficGenTag, nbsSlaLossGainRdBcastFrames=nbsSlaLossGainRdBcastFrames, nbsSlaPerfMonAvg4096to8191=nbsSlaPerfMonAvg4096to8191, nbsSlaLossGainRdBadOctets=nbsSlaLossGainRdBadOctets, nbsSlaPerfMonAvg65to127=nbsSlaPerfMonAvg65to127, nbsSlaPerfMonOctets512to1023=nbsSlaPerfMonOctets512to1023, nbsSlaLossGainTable=nbsSlaLossGainTable, nbsSlaLossGainAdSize4096to8191=nbsSlaLossGainAdSize4096to8191, nbsSlaPerfMonAvg1024toEthMax=nbsSlaPerfMonAvg1024toEthMax, nbsSlaPerfMonMin8192orMore=nbsSlaPerfMonMin8192orMore, nbsSlaPerfMonFrames65to127=nbsSlaPerfMonFrames65to127, nbsSlaPerfMonMaxAllSizes=nbsSlaPerfMonMaxAllSizes, nbsSlaPerfMonTable=nbsSlaPerfMonTable, nbsSlaPerfMonOctets128to255=nbsSlaPerfMonOctets128to255, nbsSlaLossGainAdSize65to127=nbsSlaLossGainAdSize65to127, nbsSlaTrafficGenMaxHeaders=nbsSlaTrafficGenMaxHeaders, nbsSlaLossGainAdMcastFrames=nbsSlaLossGainAdMcastFrames, nbsSlaLossGainRdSize512to1023=nbsSlaLossGainRdSize512to1023, nbsSlaPerfMonMin64=nbsSlaPerfMonMin64, nbsSlaPerfMonFrames128to255=nbsSlaPerfMonFrames128to255, nbsSlaLossGainIfIndex=nbsSlaLossGainIfIndex, nbsSlaLossGainAdSize256to511=nbsSlaLossGainAdSize256to511, nbsSlaPerfMonOctets65to127=nbsSlaPerfMonOctets65to127, nbsSlaPerfMonMax4096to8191=nbsSlaPerfMonMax4096to8191, nbsSlaPerfMonFrames256to511=nbsSlaPerfMonFrames256to511, nbsSlaLossGainAdBcastFrames=nbsSlaLossGainAdBcastFrames, nbsSlaPerfMonMax512to1023=nbsSlaPerfMonMax512to1023, nbsSlaTrafficGenFrameSizeType=nbsSlaTrafficGenFrameSizeType, nbsSlaTrafficGenPattern=nbsSlaTrafficGenPattern, nbsSlaPerfMonFramesAllSizes=nbsSlaPerfMonFramesAllSizes, nbsSlaTrafficGenTable=nbsSlaTrafficGenTable, nbsSlaTrafficGenFrameCount=nbsSlaTrafficGenFrameCount, nbsSlaTrafficGenGrp=nbsSlaTrafficGenGrp, nbsSlaTrafficGenPatternType=nbsSlaTrafficGenPatternType, nbsSlaLossGainTableSize=nbsSlaLossGainTableSize, nbsSlaPerfMonOctets1024toEthMax=nbsSlaPerfMonOctets1024toEthMax, nbsSlaPerfMonMin256to511=nbsSlaPerfMonMin256to511, nbsSlaPerfMonTableSize=nbsSlaPerfMonTableSize, nbsSlaPerfMonMax128to255=nbsSlaPerfMonMax128to255, nbsSlaLossGainAdTimeSpan=nbsSlaLossGainAdTimeSpan, nbsSlaLossGainRdSizeEthMaxto2047=nbsSlaLossGainRdSizeEthMaxto2047, nbsSlaTrafficGenAction=nbsSlaTrafficGenAction, nbsSlaPerfMonAvg8192orMore=nbsSlaPerfMonAvg8192orMore, nbsSlaTrafficGenTableSize=nbsSlaTrafficGenTableSize, nbsSlaPerfMonIfIndex=nbsSlaPerfMonIfIndex, nbsSlaMib=nbsSlaMib, nbsSlaPerfMonOctets4096to8191=nbsSlaPerfMonOctets4096to8191, nbsSlaLossGainRdTimeSpan=nbsSlaLossGainRdTimeSpan, nbsSlaLossGainRdBadFrames=nbsSlaLossGainRdBadFrames, nbsSlaPerfMonOctets256to511=nbsSlaPerfMonOctets256to511, nbsSlaPerfMonDuration=nbsSlaPerfMonDuration, nbsSlaLossGainAdDiscards=nbsSlaLossGainAdDiscards, nbsSlaPerfMonAvgAllSizes=nbsSlaPerfMonAvgAllSizes, nbsSlaLossGainAdUcastFrames=nbsSlaLossGainAdUcastFrames, nbsSlaLossGainRdSize128to255=nbsSlaLossGainRdSize128to255, nbsSlaLossGainRdSize64=nbsSlaLossGainRdSize64, nbsSlaTrafficGenSaType=nbsSlaTrafficGenSaType, nbsSlaPerfMonFrames1024toEthMax=nbsSlaPerfMonFrames1024toEthMax, nbsSlaPerfMonFrames8192orMore=nbsSlaPerfMonFrames8192orMore, nbsSlaTrafficGenTagType=nbsSlaTrafficGenTagType, nbsSlaLossGainAdSize8192orMore=nbsSlaLossGainAdSize8192orMore, nbsSlaLossGainAdFrameDivisor=nbsSlaLossGainAdFrameDivisor, nbsSlaPerfMonFrames64=nbsSlaPerfMonFrames64, nbsSlaLossGainRdDiscards=nbsSlaLossGainRdDiscards, PYSNMP_MODULE_ID=nbsSlaMib, nbsSlaPerfMonMin128to255=nbsSlaPerfMonMin128to255)
