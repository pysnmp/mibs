#
# PySNMP MIB module BKTEL-HFC862-HMSNE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/bktel/BKTEL-HFC862-HMSNE-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 16:40:10 2024
# On host fv-az1437-189 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
PerceivedSeverityValue, DisplayString, NESlotValue, TruthValue, ne = mibBuilder.importSymbols("BKTEL-HFC862-BASE-MIB", "PerceivedSeverityValue", "DisplayString", "NESlotValue", "TruthValue", "ne")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, IpAddress, Gauge32, Counter64, NotificationType, ModuleIdentity, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Counter32, NotificationType, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "Gauge32", "Counter64", "NotificationType", "ModuleIdentity", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Counter32", "NotificationType", "Bits", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
neCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1))
neType = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neType.setStatus('mandatory')
if mibBuilder.loadTexts: neType.setDescription('Type of NE')
neDescription = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neDescription.setStatus('mandatory')
if mibBuilder.loadTexts: neDescription.setDescription('The description of the NE.')
neLocationStreet = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neLocationStreet.setStatus('mandatory')
if mibBuilder.loadTexts: neLocationStreet.setDescription('Location Street of Network Element.\n             Writable size depends on net element controller, default 32')
neLocationCity = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neLocationCity.setStatus('mandatory')
if mibBuilder.loadTexts: neLocationCity.setDescription('Location City of Network Element.\n             Writable size depends on net element controller, default 32')
neObsolete_UsingAPS = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neObsolete_UsingAPS.setStatus('obsolete')
if mibBuilder.loadTexts: neObsolete_UsingAPS.setDescription('This parameter is obsolete.')
neObsolete_APSMode = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neObsolete_APSMode.setStatus('obsolete')
if mibBuilder.loadTexts: neObsolete_APSMode.setDescription('This parameter is obsolete.')
neObsolete_CommonSubrackWidth = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neObsolete_CommonSubrackWidth.setStatus('obsolete')
if mibBuilder.loadTexts: neObsolete_CommonSubrackWidth.setDescription('This parameter is obsolete.\n             (The width of the Subracks)')
neObsolete_CommonSubrackNumber = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neObsolete_CommonSubrackNumber.setStatus('obsolete')
if mibBuilder.loadTexts: neObsolete_CommonSubrackNumber.setDescription('This parameter is obsolete.\n             (The number of Subracks)')
neObsolete_NumberModul = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 61))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neObsolete_NumberModul.setStatus('obsolete')
if mibBuilder.loadTexts: neObsolete_NumberModul.setDescription('This parameter is obsolete.\n             (Current number of entries in the Modul table)')
neObsolete_UsingRevertiveMode = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neObsolete_UsingRevertiveMode.setStatus('obsolete')
if mibBuilder.loadTexts: neObsolete_UsingRevertiveMode.setDescription('This parameter is obsolete.')
neObsolete_RevertiveMode = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neObsolete_RevertiveMode.setStatus('obsolete')
if mibBuilder.loadTexts: neObsolete_RevertiveMode.setDescription('This parameter is obsolete.')
neObsolete_InitPhase = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neObsolete_InitPhase.setStatus('obsolete')
if mibBuilder.loadTexts: neObsolete_InitPhase.setDescription('This parameter is obsolete.')
neObsolete_PredecessorRedundantPath = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neObsolete_PredecessorRedundantPath.setStatus('obsolete')
if mibBuilder.loadTexts: neObsolete_PredecessorRedundantPath.setDescription('This parameter is obsolete.')
neObsolete_PredecessorNominalPath = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neObsolete_PredecessorNominalPath.setStatus('obsolete')
if mibBuilder.loadTexts: neObsolete_PredecessorNominalPath.setDescription('This parameter is obsolete.')
neModuleTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16), )
if mibBuilder.loadTexts: neModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleTable.setDescription('Table containing information about each Module.')
neModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1), ).setIndexNames((0, "BKTEL-HFC862-HMSNE-MIB", "neModuleNESlot"))
if mibBuilder.loadTexts: neModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleEntry.setDescription('List of information about each Module.')
neModuleNESlot = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 1), NESlotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModuleNESlot.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleNESlot.setDescription('Slot number \n             IMPORTANT NOTE:\n                this is a not a physical slot within a module rack, \n                but an assigned slot ID that uniquely identifies each module\n                including non subrack based modules as 19 inch modules')
neModuleSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModuleSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleSubrack.setDescription('Subrack number in which the module is equiped (1 .. N).\n             A value of 0 means: No subrack number')
neModuleModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModuleModelName.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleModelName.setDescription('Module model name')
neModuleMibLink = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModuleMibLink.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleMibLink.setDescription('Defines the link to the OID of the equiped module')
neModuleSubrackSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModuleSubrackSlot.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleSubrackSlot.setDescription('Slot number within subrack in which the module is equiped (1 .. N).\n             A value of 0 means: No slot number')
neModuleSlotUnitsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModuleSlotUnitsUsed.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleSlotUnitsUsed.setDescription("For modules of type 'housing19inch(4)' this parameter specfifies the number of 19 inch height units used. \n             For all other module types the number of slots within subrack which the module occupies.")
neModuleSlotRackDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2), ("detectionError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModuleSlotRackDetection.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleSlotRackDetection.setDescription('Reports the state of modules slot and rack hardware detection.')
neModuleHousingType = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("housingUnknownOrDefault", 1), ("housingBk", 2), ("housing2G6", 3), ("housing19inch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModuleHousingType.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleHousingType.setDescription('Module housing type')
neModuleFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModuleFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleFirmwareVersion.setDescription('Module firmware version')
neModuleHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModuleHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleHardwareVersion.setDescription('Module hardware version')
neModuleDateOfProduction = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModuleDateOfProduction.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleDateOfProduction.setDescription('Module date of production, possible formats:\n            - empty string -> no data defined\n            - YYYY         -> only the year of production is defined\n            - YYYY-MM-DD   -> full date of production is defined')
neModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModuleSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleSerialNumber.setDescription('Module serial number')
neModuleArticleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModuleArticleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleArticleNumber.setDescription('Module article number')
neModuleCustomerCode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neModuleCustomerCode.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleCustomerCode.setDescription('Customer specific article code')
neModuleAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neModuleAliasName.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleAliasName.setDescription('Module alias name')
neModuleUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neModuleUserdata.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleUserdata.setDescription('Module user data')
neModuleReset = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neModuleReset.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleReset.setDescription('Resets the module if this parameter is written to true(1).')
neModuleLedBlink = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 1, 1, 16, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neModuleLedBlink.setStatus('mandatory')
if mibBuilder.loadTexts: neModuleLedBlink.setDescription("Writing this variable to true(1) lets the device's\n        modul LED blink green for 10 seconds.\n        Writing this variable to false(2) stops blinking at once.\n        This variable always returns false(2) on read requests")
neStates = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 1, 2))
neStatesObsolete_TrapDisable = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 2, 1), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neStatesObsolete_TrapDisable.setStatus('obsolete')
if mibBuilder.loadTexts: neStatesObsolete_TrapDisable.setDescription('This parameter is obsolete.')
neStatesObsolete_TerminalConnected = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 2, 2), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neStatesObsolete_TerminalConnected.setStatus('obsolete')
if mibBuilder.loadTexts: neStatesObsolete_TerminalConnected.setDescription('This parameter is obsolete.')
neStatesObsolete_Isolated = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 2, 4), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neStatesObsolete_Isolated.setStatus('obsolete')
if mibBuilder.loadTexts: neStatesObsolete_Isolated.setDescription('This parameter is obsolete.')
neStatesObsolete_ResetModullist = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 2, 5), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neStatesObsolete_ResetModullist.setStatus('obsolete')
if mibBuilder.loadTexts: neStatesObsolete_ResetModullist.setDescription('This parameter is obsolete.')
neStatesObsolete_Redundant = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 2, 6), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neStatesObsolete_Redundant.setStatus('obsolete')
if mibBuilder.loadTexts: neStatesObsolete_Redundant.setDescription('This parameter is obsolete.')
neStatesObsolete_ActivateRedundantPath = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 2, 7), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neStatesObsolete_ActivateRedundantPath.setStatus('obsolete')
if mibBuilder.loadTexts: neStatesObsolete_ActivateRedundantPath.setDescription('This parameter is obsolete.')
neStatesObsolete_AutoOff = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 2, 8), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neStatesObsolete_AutoOff.setStatus('obsolete')
if mibBuilder.loadTexts: neStatesObsolete_AutoOff.setDescription('This parameter is obsolete.')
neConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 1, 3))
neConfigObsolete_NEtype = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neConfigObsolete_NEtype.setStatus('obsolete')
if mibBuilder.loadTexts: neConfigObsolete_NEtype.setDescription('This parameter is obsolete.')
neConfigObsolete_IPaddress = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neConfigObsolete_IPaddress.setStatus('obsolete')
if mibBuilder.loadTexts: neConfigObsolete_IPaddress.setDescription('This parameter is obsolete.')
neConfigObsolete_Alarmdelay = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neConfigObsolete_Alarmdelay.setStatus('obsolete')
if mibBuilder.loadTexts: neConfigObsolete_Alarmdelay.setDescription('This parameter is obsolete.')
neConfigDeprecated_MinTrapInterval = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neConfigDeprecated_MinTrapInterval.setStatus('optional')
if mibBuilder.loadTexts: neConfigDeprecated_MinTrapInterval.setDescription('This parameter is deprecated.\n             (The minimum waiting time between two traps.\n              Only used for HMS070 over RS232 interface)')
neConfigDeprecated_MaxTrapLifetime = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neConfigDeprecated_MaxTrapLifetime.setStatus('optional')
if mibBuilder.loadTexts: neConfigDeprecated_MaxTrapLifetime.setDescription('This parameter is deprecated.\n             (The maximum lifetime of a trap.\n              Only used for HMS070 over RS232 interface)')
neControl = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 1, 4))
neControlTrapDisable = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neControlTrapDisable.setStatus('mandatory')
if mibBuilder.loadTexts: neControlTrapDisable.setDescription('All traps and notifications for the whole NE are disabled: true(1) or enabled: false(2)')
neControlResetModullist = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neControlResetModullist.setStatus('mandatory')
if mibBuilder.loadTexts: neControlResetModullist.setDescription('This command removes all disconnected (not responding) modules from the module list.')
neControlObsolete_SetDefaultAPS = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 1, 4, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neControlObsolete_SetDefaultAPS.setStatus('obsolete')
if mibBuilder.loadTexts: neControlObsolete_SetDefaultAPS.setDescription('This parameter is obsolete.')
neSynchronizeEvent = NotificationType((1, 3, 6, 1, 4, 1, 7501, 1, 1) + (0,1))
if mibBuilder.loadTexts: neSynchronizeEvent.setDescription('The SNMP trap that is generated when data on LMT must get actualized.')
mibBuilder.exportSymbols("BKTEL-HFC862-HMSNE-MIB", neObsolete_InitPhase=neObsolete_InitPhase, neModuleFirmwareVersion=neModuleFirmwareVersion, neObsolete_APSMode=neObsolete_APSMode, neControl=neControl, neModuleHardwareVersion=neModuleHardwareVersion, neModuleArticleNumber=neModuleArticleNumber, neConfigObsolete_Alarmdelay=neConfigObsolete_Alarmdelay, neModuleSerialNumber=neModuleSerialNumber, neModuleDateOfProduction=neModuleDateOfProduction, neModuleSlotUnitsUsed=neModuleSlotUnitsUsed, neConfigObsolete_NEtype=neConfigObsolete_NEtype, neConfigObsolete_IPaddress=neConfigObsolete_IPaddress, neObsolete_NumberModul=neObsolete_NumberModul, neModuleTable=neModuleTable, neControlTrapDisable=neControlTrapDisable, neObsolete_UsingAPS=neObsolete_UsingAPS, neStatesObsolete_Isolated=neStatesObsolete_Isolated, neLocationCity=neLocationCity, neStatesObsolete_AutoOff=neStatesObsolete_AutoOff, neModuleHousingType=neModuleHousingType, neModuleSubrack=neModuleSubrack, neModuleModelName=neModuleModelName, neModuleNESlot=neModuleNESlot, neModuleSlotRackDetection=neModuleSlotRackDetection, neStates=neStates, neModuleAliasName=neModuleAliasName, neObsolete_PredecessorRedundantPath=neObsolete_PredecessorRedundantPath, neObsolete_UsingRevertiveMode=neObsolete_UsingRevertiveMode, neConfig=neConfig, neDescription=neDescription, neModuleSubrackSlot=neModuleSubrackSlot, neStatesObsolete_ActivateRedundantPath=neStatesObsolete_ActivateRedundantPath, neObsolete_RevertiveMode=neObsolete_RevertiveMode, neObsolete_CommonSubrackNumber=neObsolete_CommonSubrackNumber, neModuleMibLink=neModuleMibLink, neObsolete_CommonSubrackWidth=neObsolete_CommonSubrackWidth, neStatesObsolete_ResetModullist=neStatesObsolete_ResetModullist, neControlObsolete_SetDefaultAPS=neControlObsolete_SetDefaultAPS, neModuleReset=neModuleReset, neConfigDeprecated_MaxTrapLifetime=neConfigDeprecated_MaxTrapLifetime, neStatesObsolete_Redundant=neStatesObsolete_Redundant, neConfigDeprecated_MinTrapInterval=neConfigDeprecated_MinTrapInterval, neStatesObsolete_TerminalConnected=neStatesObsolete_TerminalConnected, neModuleEntry=neModuleEntry, neModuleUserdata=neModuleUserdata, neControlResetModullist=neControlResetModullist, neCommon=neCommon, neType=neType, neModuleLedBlink=neModuleLedBlink, neSynchronizeEvent=neSynchronizeEvent, neModuleCustomerCode=neModuleCustomerCode, neStatesObsolete_TrapDisable=neStatesObsolete_TrapDisable, neLocationStreet=neLocationStreet, neObsolete_PredecessorNominalPath=neObsolete_PredecessorNominalPath)
