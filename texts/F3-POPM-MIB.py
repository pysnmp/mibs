#
# PySNMP MIB module F3-POPM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-POPM-MIB
# Produced by pysmi-1.1.12 at Mon Oct  7 02:23:36 2024
# On host fv-az1986-495 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
PerfCounter64, = mibBuilder.importSymbols("CM-COMMON-MIB", "PerfCounter64")
shelfIndex, neIndex, slotIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "shelfIndex", "neIndex", "slotIndex")
cmEthernetNetPortEntry, cmEthernetAccPortEntry = mibBuilder.importSymbols("CM-FACILITY-MIB", "cmEthernetNetPortEntry", "cmEthernetAccPortEntry")
cmEthernetNetPortStatsEntry, cmEthernetNetPortHistoryEntry, cmEthernetAccPortStatsEntry, cmEthernetAccPortHistoryEntry = mibBuilder.importSymbols("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsEntry", "cmEthernetNetPortHistoryEntry", "cmEthernetAccPortStatsEntry", "cmEthernetAccPortHistoryEntry")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, Integer32, iso, NotificationType, IpAddress, ObjectIdentity, Counter64, Bits, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "iso", "NotificationType", "IpAddress", "ObjectIdentity", "Counter64", "Bits", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32", "MibIdentifier", "TimeTicks")
DisplayString, DateAndTime, TruthValue, TextualConvention, VariablePointer = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TruthValue", "TextualConvention", "VariablePointer")
f3POPMMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16))
f3POPMMib.setRevisions(('2011-10-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3POPMMib.setRevisionsDescriptions(('Notes from release 201110100000Z,\n             (1)Added following variables for clearing POPM alarms\n                 f3EthernetAccPortPOPMonitorClearAction,\n                 f3EthernetNetPortPOPMonitorClearAction \n\n             Notes from release 201109060000Z,\n             (1)Initial MIB version for release FSP150CM 3.4.',))
if mibBuilder.loadTexts: f3POPMMib.setLastUpdated('201110100000Z')
if mibBuilder.loadTexts: f3POPMMib.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: f3POPMMib.setContactInfo('        Raghav Trivedi\n                     ADVA Optical Networking, Inc.\n                Tel: +1 972 759-1239\n             E-mail: rtrivedi@advaoptical.com\n             Postal: 2301 N. Greenville Ave. #300\n                     Richardson, TX USA 75082')
if mibBuilder.loadTexts: f3POPMMib.setDescription('This module documents the Precision Optical Power\n             Monitoring features provided by the F3 product line\n             of products.\n             Copyright (C) ADVA Optical Networking.')
f3POPMObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1))
f3POPMPerfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2))
f3POPMConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 3))
class POPMGlitchRejectionLevel(TextualConvention, Integer32):
    description = 'Provides ability to manage the glitch rejection level,\n                   none   -- no glitch rejection\n                   low    -- single glitch rejection\n                   medium -- three glitch rejection\n                   high   -- five glitch rejection\n         .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("low", 2), ("medium", 3), ("high", 4))

class POPMState(TextualConvention, Integer32):
    description = 'Provides the enumerations for POPM State\n                   not-applicable  --not applicable state\n                   inoperable      --enabled, port is unassigned \n                   not-available   --not available state \n                   calibrating     --enabled, operational, computing\n                   monitoring      --enabled, operational, monitoring \n                   paused          --enabled, signal out-of-range, \n                                         signal out-of-variance \n                   inhibited-R     --enabled, LOS (revertive)   \n                   inhibited-NR    --enabled, sampling error (non-revertive)\n         .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("not-applicable", 1), ("inoperable", 2), ("not-available", 3), ("calibrating", 4), ("monitoring", 5), ("paused", 6), ("inhibited-R", 7), ("inhibited-NR", 8))

class POPMClearAlarmsAction(TextualConvention, Integer32):
    description = 'Provides ability to clear the alarms on POPR function.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("not-applicable", 0), ("clear", 1))

f3EthernetAccPortPOPMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 2), )
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorTable.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorTable.setDescription('This table provides ability to manage the\n             Precision Optical Power feature on \n             Ethernet Access Ports.')
f3EthernetAccPortPOPMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 2, 1), )
cmEthernetAccPortEntry.registerAugmentions(("F3-POPM-MIB", "f3EthernetAccPortPOPMonitorEntry"))
f3EthernetAccPortPOPMonitorEntry.setIndexNames(*cmEthernetAccPortEntry.getIndexNames())
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorEntry.setDescription('A conceptual row in the f3EthernetAccPortPOPMonitorTable.')
f3EthernetAccPortPOPMonitorEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorEnabled.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorEnabled.setDescription('This object enables/disables Precision Optical Power monitoring\n          on the Ethernet Access Port.')
f3EthernetAccPortPOPMonitorOperRangeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorOperRangeHi.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorOperRangeHi.setDescription('This object provides the higher operating range, in 10ths of dbm, \n          for Precision Optical Power monitoring.')
f3EthernetAccPortPOPMonitorOperRangeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorOperRangeLow.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorOperRangeLow.setDescription('This object provides the lower operating range, in 10ths of dbm, for \n          Precision Optical Power monitoring.')
f3EthernetAccPortPOPMonitorVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorVariance.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorVariance.setDescription('This object provides the maximum absolute variance, \n          from average, in 10ths of dbm, for \n          Precision Optical Power monitoring.')
f3EthernetAccPortPOPMonitorWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorWindowSize.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorWindowSize.setDescription('This object provides the window size (time in seconds), for \n          Precision Optical Power monitoring.')
f3EthernetAccPortPOPMonitorGlitchRejectionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 2, 1, 6), POPMGlitchRejectionLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorGlitchRejectionLevel.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorGlitchRejectionLevel.setDescription('This object provides the maximum number of \n          sequential variance violations constituting a \n          glitch.')
f3EthernetAccPortPOPMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 2, 1, 7), POPMState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorState.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorState.setDescription('This object provides the current state of the \n          Precision Optical Monitoring processing.')
f3EthernetAccPortPOPMonitorClearAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 2, 1, 8), POPMClearAlarmsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorClearAction.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMonitorClearAction.setDescription('This object provides the ability to clear outstanding \n          Precision Optical Monitoring alarms.')
f3EthernetNetPortPOPMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 1), )
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorTable.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorTable.setDescription('This table provides ability to manage the\n             Precision Optical Power feature on \n             Ethernet Network Ports.')
f3EthernetNetPortPOPMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 1, 1), )
cmEthernetNetPortEntry.registerAugmentions(("F3-POPM-MIB", "f3EthernetNetPortPOPMonitorEntry"))
f3EthernetNetPortPOPMonitorEntry.setIndexNames(*cmEthernetNetPortEntry.getIndexNames())
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorEntry.setDescription('A conceptual row in the f3EthernetNetPortPOPMonitorTable.')
f3EthernetNetPortPOPMonitorEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorEnabled.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorEnabled.setDescription('This object enables/disables Precision Optical Power monitoring\n          on the Ethernet Network Port.')
f3EthernetNetPortPOPMonitorOperRangeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorOperRangeHi.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorOperRangeHi.setDescription('This object provides the higher operating range, in 10ths of dbm, \n          for Precision Optical Power monitoring.')
f3EthernetNetPortPOPMonitorOperRangeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorOperRangeLow.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorOperRangeLow.setDescription('This object provides the lower operating range, in 10ths of dbm, for \n          Precision Optical Power monitoring.')
f3EthernetNetPortPOPMonitorVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorVariance.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorVariance.setDescription('This object provides the maximum absolute variance, \n          from average, in 10ths of dbm, for \n          Precision Optical Power monitoring.')
f3EthernetNetPortPOPMonitorWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorWindowSize.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorWindowSize.setDescription('This object provides the window size (time in seconds), for \n          Precision Optical Power monitoring.')
f3EthernetNetPortPOPMonitorGlitchRejectionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 1, 1, 6), POPMGlitchRejectionLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorGlitchRejectionLevel.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorGlitchRejectionLevel.setDescription('This object provides the maximum number of \n          sequential variance violations constituting a \n          glitch.')
f3EthernetNetPortPOPMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 1, 1, 7), POPMState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorState.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorState.setDescription('This object provides the current state of the \n          Precision Optical Monitoring processing.')
f3EthernetNetPortPOPMonitorClearAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 1, 1, 1, 8), POPMClearAlarmsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorClearAction.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMonitorClearAction.setDescription('This object provides the ability to clear outstanding \n          Precision Optical Monitoring alarms.')
f3EthernetAccPortPOPMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 1), )
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsTable.setDescription('A collection of Ethernet Access Port Precision Optical Power \n             related statistics.  \n             These reflect the current data.')
f3EthernetAccPortPOPMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 1, 1), )
cmEthernetAccPortStatsEntry.registerAugmentions(("F3-POPM-MIB", "f3EthernetAccPortPOPMStatsEntry"))
f3EthernetAccPortPOPMStatsEntry.setIndexNames(*cmEthernetAccPortStatsEntry.getIndexNames())
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsEntry.setDescription('A conceptual row in the f3EthernetAccPortPOPMStatsTable.\n             Entries exist in this table for each Ethernet interface/port.')
f3EthernetAccPortPOPMStatsOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsOPR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsOPR.setDescription('Precision Optical Power Receive (in dBm) for the physical layer.  \n          This is applicable only if Precision Optical Power monitoring \n          is enabled.')
f3EthernetAccPortPOPMStatsAOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsAOPR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsAOPR.setDescription('Average Precision Optical Power Receive (in dBm) for the physical \n          layer.  This is applicable only if Precision Optical Power \n          monitoring is enabled.')
f3EthernetAccPortPOPMStatsOPRVar = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsOPRVar.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsOPRVar.setDescription('Signed variance of Optical Power Receive, from average.\n          This is applicable only if Precision Optical Power monitoring \n          is enabled.')
f3EthernetAccPortPOPMStatsOPRMaxVar = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsOPRMaxVar.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsOPRMaxVar.setDescription('Signed maximum variance of Optical Power Receive, from average.  \n          This is applicable only if Precision Optical Power monitoring \n          is enabled.')
f3EthernetAccPortPOPMStatsOPRGlitchRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsOPRGlitchRejects.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsOPRGlitchRejects.setDescription('Number of glitch rejections.  This is \n          applicable only if Precision Optical Layer monitoring is enabled.')
f3EthernetAccPortPOPMStatsOPRRTR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsOPRRTR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsOPRRTR.setDescription('Number of times the POPM state machine reverts to the running\n          state from the inhibited R state.  This is applicable only if\n          Precision Optical Layer monitoring is enabled.')
f3EthernetAccPortPOPMStatsOPROOR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsOPROOR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsOPROOR.setDescription('Number of times the Precision Optical Power is out of range.\n          This is applicable only if Precision Optical Layer \n          monitoring is enabled.')
f3EthernetAccPortPOPMStatsOPROOV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsOPROOV.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMStatsOPROOV.setDescription('Number of times the Precision Optical Power out of variance \n          occurrences.  This is applicable only if Precision Optical Layer \n          monitoring is enabled.')
f3EthernetAccPortPOPMHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 2), )
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryTable.setDescription('A collection of Ethernet Access Port Precision Optical Power \n             related statistics.  \n             These reflect the current data.')
f3EthernetAccPortPOPMHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 2, 1), )
cmEthernetAccPortHistoryEntry.registerAugmentions(("F3-POPM-MIB", "f3EthernetAccPortPOPMHistoryEntry"))
f3EthernetAccPortPOPMHistoryEntry.setIndexNames(*cmEthernetAccPortHistoryEntry.getIndexNames())
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryEntry.setDescription('A conceptual row in the f3EthernetAccPortPOPMHistoryTable.\n             Entries exist in this table for each Ethernet interface/port.')
f3EthernetAccPortPOPMHistoryOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryOPR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryOPR.setDescription('Precision Optical Power Receive (in dBm) for the physical layer.  \n          This is applicable only if Precision Optical Power monitoring \n          is enabled.')
f3EthernetAccPortPOPMHistoryAOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryAOPR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryAOPR.setDescription('Average Precision Optical Power Receive (in dBm) for the physical \n          layer.  This is applicable only if Precision Optical Power \n          monitoring is enabled.')
f3EthernetAccPortPOPMHistoryOPRVar = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryOPRVar.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryOPRVar.setDescription('Signed variance of Optical Power Receive, from average.\n          This is applicable only if Precision Optical Power monitoring \n          is enabled.')
f3EthernetAccPortPOPMHistoryOPRMaxVar = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryOPRMaxVar.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryOPRMaxVar.setDescription('Signed maximum variance of Optical Power Receive, from average.  \n          This is applicable only if Precision Optical Power monitoring \n          is enabled.')
f3EthernetAccPortPOPMHistoryOPRGlitchRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryOPRGlitchRejects.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryOPRGlitchRejects.setDescription('Number of glitch rejections.  This is \n          applicable only if Precision Optical Layer monitoring is enabled.')
f3EthernetAccPortPOPMHistoryOPRRTR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryOPRRTR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryOPRRTR.setDescription('Number of times the POPM state machine reverts to the running\n          state from the inhibited R state.  This is applicable only if\n          Precision Optical Layer monitoring is enabled.')
f3EthernetAccPortPOPMHistoryOPROOR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryOPROOR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryOPROOR.setDescription('Number of times the Precision Optical Power is out of range.\n          This is applicable only if Precision Optical Layer \n          monitoring is enabled.')
f3EthernetAccPortPOPMHistoryOPROOV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryOPROOV.setStatus('current')
if mibBuilder.loadTexts: f3EthernetAccPortPOPMHistoryOPROOV.setDescription('Number of times the Precision Optical Power out of variance \n          occurrences.  This is applicable only if Precision Optical Layer \n          monitoring is enabled.')
f3EthernetNetPortPOPMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 3), )
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsTable.setDescription('A collection of Ethernet Network Port Precision Optical Power \n             related statistics.  \n             These reflect the current data.')
f3EthernetNetPortPOPMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 3, 1), )
cmEthernetNetPortStatsEntry.registerAugmentions(("F3-POPM-MIB", "f3EthernetNetPortPOPMStatsEntry"))
f3EthernetNetPortPOPMStatsEntry.setIndexNames(*cmEthernetNetPortStatsEntry.getIndexNames())
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsEntry.setDescription('A conceptual row in the f3EthernetNetPortPOPMStatsTable.\n             Entries exist in this table for each Ethernet interface/port.')
f3EthernetNetPortPOPMStatsOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsOPR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsOPR.setDescription('Precision Optical Power Receive (in dBm) for the physical layer.  \n          This is applicable only if Precision Optical Power monitoring \n          is enabled.')
f3EthernetNetPortPOPMStatsAOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsAOPR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsAOPR.setDescription('Average Precision Optical Power Receive (in dBm) for the physical \n          layer.  This is applicable only if Precision Optical Power \n          monitoring is enabled.')
f3EthernetNetPortPOPMStatsOPRVar = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsOPRVar.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsOPRVar.setDescription('Signed variance of Optical Power Receive, from average.\n          This is applicable only if Precision Optical Power monitoring \n          is enabled.')
f3EthernetNetPortPOPMStatsOPRMaxVar = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsOPRMaxVar.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsOPRMaxVar.setDescription('Signed maximum variance of Optical Power Receive, from average.  \n          This is applicable only if Precision Optical Power monitoring \n          is enabled.')
f3EthernetNetPortPOPMStatsOPRGlitchRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsOPRGlitchRejects.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsOPRGlitchRejects.setDescription('Number of glitch rejections.  This is \n          applicable only if Precision Optical Layer monitoring is enabled.')
f3EthernetNetPortPOPMStatsOPRRTR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsOPRRTR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsOPRRTR.setDescription('Number of times the POPM state machine reverts to the running\n          state from the inhibited R state.  This is applicable only if\n          Precision Optical Layer monitoring is enabled.')
f3EthernetNetPortPOPMStatsOPROOR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsOPROOR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsOPROOR.setDescription('Number of times the Precision Optical Power is out of range.\n          This is applicable only if Precision Optical Layer \n          monitoring is enabled.')
f3EthernetNetPortPOPMStatsOPROOV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsOPROOV.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMStatsOPROOV.setDescription('Number of times the Precision Optical Power out of variance \n          occurrences.  This is applicable only if Precision Optical Layer \n          monitoring is enabled.')
f3EthernetNetPortPOPMHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 4), )
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryTable.setDescription('A collection of Ethernet Network Port Precision Optical Power \n             related statistics.  \n             These reflect the current data.')
f3EthernetNetPortPOPMHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 4, 1), )
cmEthernetNetPortHistoryEntry.registerAugmentions(("F3-POPM-MIB", "f3EthernetNetPortPOPMHistoryEntry"))
f3EthernetNetPortPOPMHistoryEntry.setIndexNames(*cmEthernetNetPortHistoryEntry.getIndexNames())
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryEntry.setDescription('A conceptual row in the f3EthernetNetPortPOPMHistoryTable.\n             Entries exist in this table for each Ethernet interface/port.')
f3EthernetNetPortPOPMHistoryOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryOPR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryOPR.setDescription('Precision Optical Power Receive (in dBm) for the physical layer.  \n          This is applicable only if Precision Optical Power monitoring \n          is enabled.')
f3EthernetNetPortPOPMHistoryAOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryAOPR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryAOPR.setDescription('Average Precision Optical Power Receive (in dBm) for the physical \n          layer.  This is applicable only if Precision Optical Power \n          monitoring is enabled.')
f3EthernetNetPortPOPMHistoryOPRVar = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryOPRVar.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryOPRVar.setDescription('Signed variance of Optical Power Receive, from average.\n          This is applicable only if Precision Optical Power monitoring \n          is enabled.')
f3EthernetNetPortPOPMHistoryOPRMaxVar = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryOPRMaxVar.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryOPRMaxVar.setDescription('Signed maximum variance of Optical Power Receive, from average.  \n          This is applicable only if Precision Optical Power monitoring \n          is enabled.')
f3EthernetNetPortPOPMHistoryOPRGlitchRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryOPRGlitchRejects.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryOPRGlitchRejects.setDescription('Number of glitch rejections.  This is \n          applicable only if Precision Optical Layer monitoring is enabled.')
f3EthernetNetPortPOPMHistoryOPRRTR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryOPRRTR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryOPRRTR.setDescription('Number of times the POPM state machine reverts to the running\n          state from the inhibited R state.  This is applicable only if\n          Precision Optical Layer monitoring is enabled.')
f3EthernetNetPortPOPMHistoryOPROOR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryOPROOR.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryOPROOR.setDescription('Number of times the Precision Optical Power is out of range.\n          This is applicable only if Precision Optical Layer \n          monitoring is enabled.')
f3EthernetNetPortPOPMHistoryOPROOV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 2, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryOPROOV.setStatus('current')
if mibBuilder.loadTexts: f3EthernetNetPortPOPMHistoryOPROOV.setDescription('Number of times the Precision Optical Power out of variance \n          occurrences.  This is applicable only if Precision Optical Layer \n          monitoring is enabled.')
f3POPMCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 3, 1))
f3POPMGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 3, 2))
f3POPMCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 3, 1, 1)).setObjects(("F3-POPM-MIB", "f3POPMFacilityGroup"), ("F3-POPM-MIB", "f3POPMStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3POPMCompliance = f3POPMCompliance.setStatus('current')
if mibBuilder.loadTexts: f3POPMCompliance.setDescription('Describes the requirements for conformance to the POPM Object \n             group.')
f3POPMFacilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 3, 2, 1)).setObjects(("F3-POPM-MIB", "f3EthernetAccPortPOPMonitorEnabled"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMonitorOperRangeHi"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMonitorOperRangeLow"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMonitorVariance"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMonitorWindowSize"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMonitorGlitchRejectionLevel"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMonitorState"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMonitorClearAction"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMonitorEnabled"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMonitorOperRangeHi"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMonitorOperRangeLow"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMonitorVariance"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMonitorWindowSize"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMonitorGlitchRejectionLevel"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMonitorState"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMonitorClearAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3POPMFacilityGroup = f3POPMFacilityGroup.setStatus('current')
if mibBuilder.loadTexts: f3POPMFacilityGroup.setDescription('A collection of objects used to manage the F3 POPM Functionality\n             .')
f3POPMStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 16, 3, 2, 2)).setObjects(("F3-POPM-MIB", "f3EthernetAccPortPOPMStatsOPR"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMStatsAOPR"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMStatsOPRVar"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMStatsOPRMaxVar"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMStatsOPRGlitchRejects"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMStatsOPRRTR"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMStatsOPROOR"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMStatsOPROOV"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMHistoryOPR"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMHistoryAOPR"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMHistoryOPRVar"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMHistoryOPRMaxVar"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMHistoryOPRGlitchRejects"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMHistoryOPRRTR"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMHistoryOPROOR"), ("F3-POPM-MIB", "f3EthernetAccPortPOPMHistoryOPROOV"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMStatsOPR"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMStatsAOPR"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMStatsOPRVar"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMStatsOPRMaxVar"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMStatsOPRGlitchRejects"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMStatsOPRRTR"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMStatsOPROOR"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMStatsOPROOV"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMHistoryOPR"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMHistoryAOPR"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMHistoryOPRVar"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMHistoryOPRMaxVar"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMHistoryOPRGlitchRejects"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMHistoryOPRRTR"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMHistoryOPROOR"), ("F3-POPM-MIB", "f3EthernetNetPortPOPMHistoryOPROOV"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3POPMStatsGroup = f3POPMStatsGroup.setStatus('current')
if mibBuilder.loadTexts: f3POPMStatsGroup.setDescription('A collection of objects used to manage the F3 POPM Functionality\n             .')
mibBuilder.exportSymbols("F3-POPM-MIB", POPMState=POPMState, f3EthernetNetPortPOPMonitorTable=f3EthernetNetPortPOPMonitorTable, f3EthernetNetPortPOPMStatsOPR=f3EthernetNetPortPOPMStatsOPR, f3EthernetAccPortPOPMHistoryAOPR=f3EthernetAccPortPOPMHistoryAOPR, f3EthernetAccPortPOPMonitorClearAction=f3EthernetAccPortPOPMonitorClearAction, f3EthernetNetPortPOPMStatsOPRRTR=f3EthernetNetPortPOPMStatsOPRRTR, f3EthernetAccPortPOPMStatsOPROOR=f3EthernetAccPortPOPMStatsOPROOR, f3EthernetAccPortPOPMonitorEntry=f3EthernetAccPortPOPMonitorEntry, f3POPMCompliances=f3POPMCompliances, f3POPMStatsGroup=f3POPMStatsGroup, f3EthernetNetPortPOPMStatsTable=f3EthernetNetPortPOPMStatsTable, f3EthernetAccPortPOPMHistoryOPRMaxVar=f3EthernetAccPortPOPMHistoryOPRMaxVar, PYSNMP_MODULE_ID=f3POPMMib, f3EthernetNetPortPOPMHistoryTable=f3EthernetNetPortPOPMHistoryTable, f3EthernetAccPortPOPMonitorGlitchRejectionLevel=f3EthernetAccPortPOPMonitorGlitchRejectionLevel, f3EthernetNetPortPOPMHistoryOPROOR=f3EthernetNetPortPOPMHistoryOPROOR, f3EthernetNetPortPOPMStatsOPRVar=f3EthernetNetPortPOPMStatsOPRVar, f3EthernetAccPortPOPMHistoryOPRRTR=f3EthernetAccPortPOPMHistoryOPRRTR, POPMClearAlarmsAction=POPMClearAlarmsAction, f3POPMGroups=f3POPMGroups, f3EthernetAccPortPOPMStatsOPROOV=f3EthernetAccPortPOPMStatsOPROOV, f3POPMObjects=f3POPMObjects, f3POPMMib=f3POPMMib, f3POPMPerfObjects=f3POPMPerfObjects, f3EthernetNetPortPOPMonitorClearAction=f3EthernetNetPortPOPMonitorClearAction, f3EthernetAccPortPOPMStatsAOPR=f3EthernetAccPortPOPMStatsAOPR, f3EthernetAccPortPOPMonitorOperRangeHi=f3EthernetAccPortPOPMonitorOperRangeHi, f3EthernetNetPortPOPMStatsEntry=f3EthernetNetPortPOPMStatsEntry, f3EthernetNetPortPOPMHistoryOPRGlitchRejects=f3EthernetNetPortPOPMHistoryOPRGlitchRejects, f3EthernetAccPortPOPMStatsOPR=f3EthernetAccPortPOPMStatsOPR, f3EthernetNetPortPOPMonitorEnabled=f3EthernetNetPortPOPMonitorEnabled, f3EthernetNetPortPOPMonitorEntry=f3EthernetNetPortPOPMonitorEntry, f3EthernetAccPortPOPMStatsOPRVar=f3EthernetAccPortPOPMStatsOPRVar, f3EthernetNetPortPOPMHistoryOPRVar=f3EthernetNetPortPOPMHistoryOPRVar, f3EthernetNetPortPOPMHistoryAOPR=f3EthernetNetPortPOPMHistoryAOPR, f3EthernetAccPortPOPMonitorWindowSize=f3EthernetAccPortPOPMonitorWindowSize, f3EthernetNetPortPOPMonitorVariance=f3EthernetNetPortPOPMonitorVariance, f3EthernetAccPortPOPMHistoryOPRVar=f3EthernetAccPortPOPMHistoryOPRVar, f3EthernetAccPortPOPMHistoryOPROOR=f3EthernetAccPortPOPMHistoryOPROOR, f3EthernetNetPortPOPMonitorOperRangeHi=f3EthernetNetPortPOPMonitorOperRangeHi, f3POPMCompliance=f3POPMCompliance, f3EthernetAccPortPOPMHistoryOPR=f3EthernetAccPortPOPMHistoryOPR, f3EthernetAccPortPOPMonitorOperRangeLow=f3EthernetAccPortPOPMonitorOperRangeLow, f3EthernetAccPortPOPMonitorState=f3EthernetAccPortPOPMonitorState, f3EthernetNetPortPOPMHistoryOPR=f3EthernetNetPortPOPMHistoryOPR, f3EthernetNetPortPOPMStatsAOPR=f3EthernetNetPortPOPMStatsAOPR, f3EthernetAccPortPOPMStatsOPRGlitchRejects=f3EthernetAccPortPOPMStatsOPRGlitchRejects, f3EthernetNetPortPOPMStatsOPRMaxVar=f3EthernetNetPortPOPMStatsOPRMaxVar, f3EthernetNetPortPOPMStatsOPROOR=f3EthernetNetPortPOPMStatsOPROOR, f3EthernetNetPortPOPMonitorWindowSize=f3EthernetNetPortPOPMonitorWindowSize, f3EthernetNetPortPOPMHistoryOPRMaxVar=f3EthernetNetPortPOPMHistoryOPRMaxVar, f3EthernetNetPortPOPMStatsOPRGlitchRejects=f3EthernetNetPortPOPMStatsOPRGlitchRejects, f3POPMFacilityGroup=f3POPMFacilityGroup, f3EthernetAccPortPOPMStatsOPRMaxVar=f3EthernetAccPortPOPMStatsOPRMaxVar, f3EthernetAccPortPOPMStatsEntry=f3EthernetAccPortPOPMStatsEntry, f3EthernetNetPortPOPMHistoryEntry=f3EthernetNetPortPOPMHistoryEntry, f3EthernetAccPortPOPMonitorEnabled=f3EthernetAccPortPOPMonitorEnabled, POPMGlitchRejectionLevel=POPMGlitchRejectionLevel, f3POPMConformance=f3POPMConformance, f3EthernetAccPortPOPMStatsOPRRTR=f3EthernetAccPortPOPMStatsOPRRTR, f3EthernetAccPortPOPMonitorTable=f3EthernetAccPortPOPMonitorTable, f3EthernetAccPortPOPMHistoryTable=f3EthernetAccPortPOPMHistoryTable, f3EthernetAccPortPOPMHistoryEntry=f3EthernetAccPortPOPMHistoryEntry, f3EthernetAccPortPOPMHistoryOPRGlitchRejects=f3EthernetAccPortPOPMHistoryOPRGlitchRejects, f3EthernetAccPortPOPMStatsTable=f3EthernetAccPortPOPMStatsTable, f3EthernetNetPortPOPMStatsOPROOV=f3EthernetNetPortPOPMStatsOPROOV, f3EthernetNetPortPOPMonitorOperRangeLow=f3EthernetNetPortPOPMonitorOperRangeLow, f3EthernetNetPortPOPMonitorState=f3EthernetNetPortPOPMonitorState, f3EthernetAccPortPOPMHistoryOPROOV=f3EthernetAccPortPOPMHistoryOPROOV, f3EthernetNetPortPOPMonitorGlitchRejectionLevel=f3EthernetNetPortPOPMonitorGlitchRejectionLevel, f3EthernetNetPortPOPMHistoryOPROOV=f3EthernetNetPortPOPMHistoryOPROOV, f3EthernetNetPortPOPMHistoryOPRRTR=f3EthernetNetPortPOPMHistoryOPRRTR, f3EthernetAccPortPOPMonitorVariance=f3EthernetAccPortPOPMonitorVariance)
