#
# PySNMP MIB module CM-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/CM-SYSTEM-MIB
# Produced by pysmi-1.1.12 at Tue May 28 13:37:34 2024
# On host fv-az768-311 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
fsp150cm, TrapCounter, FileTransferProtocol = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm", "TrapCounter", "FileTransferProtocol")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
RestartType, IpVersion = mibBuilder.importSymbols("CM-COMMON-MIB", "RestartType", "IpVersion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
lldpV2RemEntry, = mibBuilder.importSymbols("LLDP-V2-MIB", "lldpV2RemEntry")
LldpV2DestAddressTableIndex, = mibBuilder.importSymbols("LLDP-V2-TC-MIB", "LldpV2DestAddressTableIndex")
SnmpEngineID, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpEngineID")
snmpTargetAddrName, = mibBuilder.importSymbols("SNMP-TARGET-MIB", "snmpTargetAddrName")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, Bits, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, NotificationType, iso, TimeTicks, Gauge32, Integer32, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "NotificationType", "iso", "TimeTicks", "Gauge32", "Integer32", "Counter32", "ModuleIdentity")
VariablePointer, RowStatus, TextualConvention, TruthValue, DateAndTime, MacAddress, StorageType, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "VariablePointer", "RowStatus", "TextualConvention", "TruthValue", "DateAndTime", "MacAddress", "StorageType", "DisplayString")
cmSystemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2))
cmSystemMIB.setRevisions(('2021-01-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cmSystemMIB.setRevisionsDescriptions(('\n          Notes from release 201910080000Z\n          a)Added the literals ntp-server-and-peering(4) and ntp-peering(5)\n            to CmNtpMode \n \n          Notes from release 201908260000Z\n          a)Added the literal ntpclock(5)\n            to TimeOfDayType \n\t    \n\t      Notes from release 201912010000Z\n          (1) Added fileServicesCsrName\n\n          Notes from release 201901230000Z\n          a) added softwarePeerCondition object\n          b) added PeerUpgradeStatus object\n\n          Notes from release 201901100000Z,\n          (1)Added the following scalars\n             f3ApplicationsBootCompleted\n             f3ApplicationsUpTime.\n\n          Notes from release 201810290000Z\n          a) added softwareAffectedEntity object\n          b) added fileServicesAffectedEntity object\n          c) added AffectedEntity textual convention\n         \n          Notes from release 201805140000Z   \n          a) added sysLogFacilityCode scalar variable\n\n          Notes from release 201803130000Z\n           a) added usbPortEnabled scalar variable\n\n          Notes from release 201801170000Z\n           a) added fileServicesDbFileName variable\n\n          Notes from release 201802020000Z\n           a) added f3SysAuthKeyTable\n           \n          Notes from release 201801030000Z   \n           a) added sysLogTimestampFormat scalar variable\n\n          Notes from release 201711270000Z\n           a) added sysLogTimestampFormat scalar variable\n           b) added SysLogFormatType textual convention\n\n          Notes from release 201706210000Z\n           a) Modified aclTable index:\n              -New range for aclEntryIndex\n\n          Notes from release 201601150000Z\n           a) added  f3SnmpLongIfAlias scalar variable\n\n          Notes from release 201307310000Z \n          Added raw data functionality objects f3RawDataObjects \n            -f3RawDataServerFtProtocol, f3RawDataServerFtServerName, \n             f3RawDataServerFtPasswd and f3RawDataServerFtUserId\n\n        Notes from release 201111220000Z \n         (i)Added configuration file functionality objects f3ConfigFileObjects \n            -f3ConfigFileActionFileName, f3ConfigFileAction \n             and f3ConfigFileTable\n         (ii)Added f3SystemFeatureTable\n \n        Notes from release 201106110000Z \n         (i)Added f3DatabaseSyncTrapObject and f3DatabaseSyncTrap for \n            NMS database sync facility in the case of bulk changes\n\n        Notes from release 201010140000Z\n         (i)Added the following literal to CmFileServicesMode \n             securitylogfileupload,\n             alarmlogfileupload,   \n             auditlogfileupload,\n         (ii)Added the following literals to fileServicesAction\n                 put-securitylog-file,\n                 put-alarmlog-file,\n                 put-auditlog-file\n\n        Notes from release 201005130000Z\n         Added the following literal to CmFileServicesMode \n               debugfileupload\n\n        Notes from release 201005130000Z\n         Added the following new objects,\n            f3SysLastResetType,\n            f3SysLastResetCauseType,\n            f3SysLastAbnormalResetTimestamp1,\n            f3SysLastAbnormalResetTimestamp2,\n            f3SysLastAbnormalResetTimestamp3\n\n        Notes from release 201003250000Z\n         This release is applicable to the FSP150CC Release 4.3 \n         device GE201.\n         New objects added in this release,\n             ntpServerRoundTripDelay, ntpServerPrecision\n\n         Notes from release 200906080000Z\n         This release is applicable to the FSP150CC Release 4.1 \n         devices GE101 and GE206.\n         New table added in this release,\n            f3SnmpTargetAddrExtTable\n \n         New notification added in this release,\n            cmSnmpDyingGaspTrap\n\n         New scalar added in this release,\n            serialPortDisconnectAutoLogOff, httpsEnabled, sftpEnabled\n\n         Notes from release 200803030000Z,\n          (1)MIB version ready for release FSP150CM 3.1.',))
if mibBuilder.loadTexts: cmSystemMIB.setLastUpdated('202101270000Z')
if mibBuilder.loadTexts: cmSystemMIB.setOrganization('ADVA Optical Networking SE')
if mibBuilder.loadTexts: cmSystemMIB.setContactInfo('Web URL: http://adva.com/\n        E-mail:  support@adva.com\n        Postal:  ADVA Optical Networking SE\n             Campus Martinsried\n             Fraunhoferstrasse 9a\n             82152 Martinsried/Munich\n             Germany\n        Phone: +49 089 89 06 65 0\n        Fax:  +49 089 89 06 65 199 ')
if mibBuilder.loadTexts: cmSystemMIB.setDescription('This module defines the System MIB definitions used by \n             the F3 (FSP150CM/CC) product lines.\n             Copyright (C) ADVA.')
cmSystemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1))
cmSystemNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 2))
cmSystemConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3))
f3BulkNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 4))
f3SystemBulkNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 5))
cmErrorInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 1))
cmCliObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 2))
cmAccessProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3))
cmSysSecObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4))
cmSysModeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5))
cmDatabaseObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6))
cmSoftwareObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7))
cmFileServicesObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8))
cmLogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9))
cmTimeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10))
cmSnmpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11))
cmResetCauseObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 12))
f3NotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 13))
f3ConfigFileObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14))
cmFeatureManagementObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 15))
cmLldpV2DestAdressADVAExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16))
f3LldpV2ConfigurationADVAExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 17))
snmpIPv6UDPDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 18))
f3RawDataObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 19))
f3LldpV2RemoteSystemsData = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 20))
f3SimpleLtpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21))
f3SysAuthenKeyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22))
f3CallhomeServerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 23))
f3SystemInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 24))
f3ZtpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 25))
class CmAclFilterAction(TextualConvention, Integer32):
    description = 'Enumerations for Access Control List \n          permit - Permit access, \n          deny   - Deny access.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("permit", 1), ("deny", 2))

class CmAutoProvMode(TextualConvention, Integer32):
    description = 'Enumerations for Auto Provisioning Mode \n          off       - manual mode, \n          confirm   - auto provisioning with confirmation \n          auto      - true auto provisioning.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("confirm", 2), ("auto", 3))

class CmNtpType(TextualConvention, Integer32):
    description = 'Enumerations for NTP Types \n          unicast     \n          multicast  \n          anycast  .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("unicast", 1))

class CmNtpMode(TextualConvention, Integer32):
    description = 'Enumerations for NTP Types \n            client,\n            server,\n            both,\n            ntp-server-and-peering,\n            ntp-peering .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("client", 1), ("server", 2), ("both", 3), ("ntp-server-and-peering", 4), ("ntp-peering", 5))

class CmNtpServerType(TextualConvention, Integer32):
    description = 'Enumerations for NTP Server Types \n          primary     \n          secondary .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("primary", 1), ("secondary", 2))

class CmFileTransferMethod(TextualConvention, Integer32):
    description = 'Enumerations for File Transfer Methods \n            ftp - FTP\n            scp - SCP\n            sftp- Secure FTP\n            web - WEB based, this is a read-only.\n            tftp- TFTP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("ftp", 1), ("scp", 2), ("sftp", 3), ("web", 4), ("tftp", 5))

class CmVersionType(TextualConvention, Integer32):
    description = 'Enumerations for Version Type\n            active,\n            standby.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("active", 1), ("standby", 2), ("staging", 3))

class CmFileServicesStatus(TextualConvention, Integer32):
    description = 'Status of the user initiated file transfer.\n             in-progress        - File transfer / processing is in progress.\n             success            - File transfer and processing completed\n                                  successfully.\n             login-failed       - Login failed.\n             file-not-found     - File not found.\n             permission-denied  - Permission denied.\n             server-unreachable - Server unreachable.\n             no-space-left      - No space left on device.\n             invalid-file-type  - Invalid file type.\n             nobackup-database  - No backup database.\n             no-sw-toinstall    - No software to install.\n             sw-not-installed   - Software not installed.\n             validation-timer-notactive  - Validation timer not active.\n             cannot-revert      - Cannot revert.\n             install-failed     - Installation failed.\n             upgrade-failed     - Upgrade Failed.\n             revert-failed      - Revert failed.\n             failure            - Generic File transfer or processing failure.\n             badarchive         - Bad Archive.\n             incompatarchive    - Incompatible Archive.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("in-progress", 1), ("success", 2), ("login-failed", 3), ("file-not-found", 4), ("permission-denied", 5), ("server-unreachable", 6), ("no-space-left", 7), ("invalid-file-type", 8), ("nobackup-database", 9), ("no-sw-toinstall", 10), ("sw-not-installed", 11), ("validation-timer-notactive", 12), ("cannot-revert", 13), ("install-failed", 14), ("upgrade-failed", 15), ("revert-failed", 16), ("failure", 17), ("badarchive", 18), ("incompatarchive", 19), ("swVersionNotApproved", 20))

class CmFileServicesMode(TextualConvention, Integer32):
    description = 'File Services Operation.\n             idle                   - Idle and available.\n             dbupload               - Database upload in progress. \n             dbdownload             - Database download in progress. \n             dbbackup               - Database backup in progress. \n             dbrestore              - Database restore in progress. \n             swdownload             - Software download in progress. \n             swinstall              - Software install in progress. \n             swupgrade              - Software upgrade in progress. \n             swvalidate             - Software validation in progress. \n             swcancelupgrade        - Software upgrade cancelled.\n             swrevert               - Software upgrade reverted.\n             rebooting              - System rebooting.\n             debugfileupload        - Last Reset Cause debug file upload in progress.\n             securitylogfileupload  - Security log upload in progress\n             alarmlogfileupload     - Alarm log upload in progress\n             auditlogfileupload     - Audit log upload in progress\n             dbpropagate            - Database propagate in progress.\n             swpropagate            - Software propagate in progress.\n             sysdiagfileupload      - System diagnose file upload in progress.\n             sysdiagfilesave        - System diagnose file save in progress.\n             configfileupload       - Configuration file upload in progress. \n             configfiledownload     - Configuration file download in progress. \n             defaultvalsfiledownload- Default Values file download in progress. \n             satresultupload        - SAT test result file upload in progress.\n             sslcertificatedownload     - SSL Certificate file download in progress.\n             sslprivatekeydownload      - SSL Private Key file download in progress.\n             sslencprivatekeydownload   - SSL Encrypted Private Key file download in progress.\n             sslkeypairdownload         - SSL Key Pair file download in progress. \n             csrUpload                  - CSR Upload \n             rfc2544testreportupload   - Rfc2544 Test Report Upload\n             '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))
    namedValues = NamedValues(("idle", 1), ("dbupload", 2), ("dbdownload", 3), ("dbbackup", 4), ("dbrestore", 5), ("swdownload", 6), ("swinstall", 7), ("swupgrade", 8), ("swvalidate", 9), ("swcancelupgrade", 10), ("swrevert", 11), ("rebooting", 12), ("debugfileupload", 13), ("securitylogfileupload", 14), ("alarmlogfileupload", 15), ("auditlogfileupload", 16), ("dbpropagate", 17), ("swpropagate", 18), ("sysdiagfileupload", 19), ("sysdiagfilesave", 20), ("configfileupload", 21), ("configfiledownload", 22), ("defaultvalsfiledownload", 23), ("satresultupload", 24), ("sslcertificatedownload", 25), ("sslprivatekeydownload", 26), ("sslencprivatekeydownload", 27), ("sslkeypairdownload", 28), ("csrUpload", 29), ("rfc2544testreportupload", 30))

class CmRestartCauseType(TextualConvention, Integer32):
    description = 'System Restart Cause Type.\n             poweronreset       - Interruption of power.\n             userinitiated      - User initiated such as\n                                    software upgrade,\n                                    restore database,\n                                    restore system defaults,\n                                    restore factory defaults \n             unrecoverableappevent - Unrecoverable application event\n             unrecoverablesysevent - Unrecoverable system event\n             hwwatchdogexpired  - Hardware watchdog expired \n             bustxntimeout      - Bus transaction timeout \n             hardware           - Hardware failure.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("poweronreset", 1), ("userinitiated", 2), ("unreoverableappevent", 3), ("unrecoverablesysevent", 4), ("hwwatchdogexpired", 5), ("bustxntimeout", 6), ("hardware", 7), ("buttonReset", 8), ("buttonFactoryDefaultReset", 9))

class F3ConfigFileAction(TextualConvention, Integer32):
    description = 'Defines the actions on configuration file.\n             none               - Unused value\n             restart-with-file  - Restart the system; System will revert to \n                                  using system defaults and will apply the\n                                  specified configuration files on restart\n             save-delta         - Save delta configuration file : this\n                                  generates a running config delta w.r.t the\n                                  system defaults\n             remove             - Remove specified configuration file\n             save-full          - Save running configuration file and it will \n                                  generate a full running config file\n             load-config        - Load specified delta config file without restarting.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 0), ("restart-with-file", 1), ("save-delta", 2), ("remove", 3), ("save-full", 4), ("load-config", 5))

class F3ConfigFileStatus(TextualConvention, Integer32):
    description = 'Defines the status of configuration file actions.\n             initial            - Initial status \n             in-progress    - Configuration File Operation is in progress \n             completed          - Configuration File Operation completed \n             failed             - Configuration File Operation failed '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("not-applicable", 0), ("initial", 1), ("in-progress", 2), ("completed", 3), ("failed", 4))

class TimeOfDayType(TextualConvention, Integer32):
    description = 'Defines the System Time Of Day Type.\n             local - System time driven by local clock\n             ntp   - System time driven by NTP client\n             ptp   - System time driven by PTP Telecom Slave\n             timeclock - System time driven by time clock\n             ntpclock - System time driven by NTP server or peers'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("local", 1), ("ntp", 2), ("ptp", 3), ("timeclock", 4), ("ntpclock", 5))

class LldpV2ConfigurationADVAExtMaxNeighborsAction(TextualConvention, Integer32):
    description = 'Discard: information selected to be discarded is the \n        information in the current LLDPDU.\n            Deleteentry:information selected to be discarded is \n        currently in the LLDP remote systems MIB.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("delete-entry", 1), ("discard-lldppdu", 2))

class FileTransferServerType(TextualConvention, Integer32):
    description = 'Defines the file transfer server Type.\n             ipaddr - server ipv4 address\n             ipv6addr   - server ipv6 address\n             hostname   - server host name\n             URL  - the URL of the remote server'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("ipaddr", 1), ("ipv6addr", 2), ("hostname", 3), ("url", 4))

class ServerConfigType(TextualConvention, Integer32):
    description = 'Defines the file transfer server Type.\n             DHCP - Server is assigned by DHCP server\n             USERDEFINED   - server assinged with user configuration.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dhcp", 1), ("userdefined", 2))

class NtpAuthKeyType(TextualConvention, Integer32):
    description = 'Defines the NTP Authentication Key Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("md5", 1), ("sha1", 2))

class SysLogFormatType(TextualConvention, Integer32):
    description = 'Defines the Syslog Timestamp Format Type.\n             ADVA - Adva Timestamp format\n             RFC3164 - RFC3164 Timestamp format.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("adva", 1), ("rfc3164", 2))

class SysAuthKeyType(TextualConvention, Integer32):
    description = 'Defines the System Authentication Key Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("notApplicable", 0), ("md5", 1))

class AffectedEntity(TextualConvention, Integer32):
    description = 'Defines the affected Entity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("none", 1), ("shelf", 2), ("card1", 3), ("card2", 4))

class PeerUpgradeReadyCondition(TextualConvention, Integer32):
    description = 'Defines the Peer Upgrade Ready Condition Entity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 1), ("ignorealarms", 2), ("nocriticalalarms", 3), ("nomjandcrialarms", 4), ("noalarms", 5))

class PeerUpgradeStatus(TextualConvention, Integer32):
    description = 'Defines the Peer Upgrade Status Entity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inprogress", 1), ("ready", 2))

class CallhomeState(TextualConvention, Integer32):
    description = 'Describes States available for CallHome'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("completed", 1), ("failed", 2), ("inProgress", 3), ("notStarted", 4))

class F3TargetAddressLifetime(TextualConvention, Integer32):
    description = 'Lifetime of target address.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notApplicable", 0), ("duration1hour", 1), ("duration1day", 2), ("duration3days", 3), ("duration1week", 4), ("duration1month", 5), ("unlimited", 6))

lastSetErrorInformation = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastSetErrorInformation.setStatus('current')
if mibBuilder.loadTexts: lastSetErrorInformation.setDescription(' This provides detailed information on the last SNMP SET\n              operation failure on the enterprise MIBs.')
cliCmdPromptPrefix = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cliCmdPromptPrefix.setStatus('current')
if mibBuilder.loadTexts: cliCmdPromptPrefix.setDescription('User specified command prompt prefix, used by the CLI, \n          at the system level.')
securityBanner = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityBanner.setStatus('current')
if mibBuilder.loadTexts: securityBanner.setDescription(' This provides ability to manage the security banner text\n           used for Graphical User Interface as well as CLI access.')
aclTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2), )
if mibBuilder.loadTexts: aclTable.setStatus('current')
if mibBuilder.loadTexts: aclTable.setDescription("A list of entries corresponding to the access control\n             IP network addresses. Agent provides upto 10 access control\n             IP network addresses to be configured.  Access is only\n             'permitted' from these IP network addresses.")
aclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "aclEntryIndex"))
if mibBuilder.loadTexts: aclEntry.setStatus('current')
if mibBuilder.loadTexts: aclEntry.setDescription('An entry containing information applicable to a particular\n             Access Control IP Network Address that can be configured.')
aclEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclEntryIndex.setStatus('current')
if mibBuilder.loadTexts: aclEntryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n             an ACL entry within an ACL. The manager may not assume any\n             particular semantics or meaning to this index, except that\n             it identifies a logical row in the table.')
aclEntryFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 2), CmAclFilterAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclEntryFilterAction.setStatus('current')
if mibBuilder.loadTexts: aclEntryFilterAction.setDescription("Whether the network IP address specified by aclEntryNetworkAddress\n        and aclEntryNetworkMask has permission to access the system.\n        Currently, only 'permit' is supported.")
aclEntryNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclEntryNetworkAddress.setStatus('current')
if mibBuilder.loadTexts: aclEntryNetworkAddress.setDescription('The network IP address of the entry that will be permitted to access\n        the system.')
aclEntryNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclEntryNetworkMask.setStatus('current')
if mibBuilder.loadTexts: aclEntryNetworkMask.setDescription('The network IP mask of the entry that will be permitted to access\n        the system.')
aclEntryEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclEntryEnabled.setStatus('current')
if mibBuilder.loadTexts: aclEntryEnabled.setDescription('This enables/disables the entity specified by\n        aclEntryNetworkAddress and aclEntryNetworkMask to access\n        the system.')
aclEntryIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 6), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclEntryIpVersion.setStatus('current')
if mibBuilder.loadTexts: aclEntryIpVersion.setDescription('This object describe the ip version.')
aclEntryNetworkIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 7), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclEntryNetworkIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: aclEntryNetworkIpv6Addr.setDescription('This object describe the ipv6 adress.')
aclEntryPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclEntryPrefixLength.setStatus('current')
if mibBuilder.loadTexts: aclEntryPrefixLength.setDescription('This object describe the ipv6 Prefix length.')
serialPortDisconnectAutoLogOff = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialPortDisconnectAutoLogOff.setStatus('current')
if mibBuilder.loadTexts: serialPortDisconnectAutoLogOff.setDescription(' This provides ability to manage the property of the system, which \n           causes Auto Logoff of the user session on the serial port, when \n           the serial port is disconnected.')
securityPromptEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 4, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityPromptEnabled.setStatus('current')
if mibBuilder.loadTexts: securityPromptEnabled.setDescription('This object allows management of the CLI security prompt.')
telnetEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetEnabled.setStatus('current')
if mibBuilder.loadTexts: telnetEnabled.setDescription(' This provides ability to enable/disable the TELNET protocol on the\n           system.')
sshEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshEnabled.setStatus('current')
if mibBuilder.loadTexts: sshEnabled.setDescription(' This provides ability to enable/disable the Secure Shell protocol \n           on the system.')
ftpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpEnabled.setStatus('current')
if mibBuilder.loadTexts: ftpEnabled.setDescription(' This provides ability to enable/disable the File Transfer Protocol \n           (FTP) on the system.')
scpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scpEnabled.setStatus('current')
if mibBuilder.loadTexts: scpEnabled.setDescription(' This provides ability to enable/disable the Secure Copy (SCP) \n           on the system.')
serialPortEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialPortEnabled.setStatus('current')
if mibBuilder.loadTexts: serialPortEnabled.setDescription(' This provides ability to enable/disable the Serial Port \n           on the system.')
httpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpEnabled.setStatus('current')
if mibBuilder.loadTexts: httpEnabled.setDescription(' This provides ability to enable/disable the HTTP protocol\n           on the system.')
httpsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsEnabled.setStatus('current')
if mibBuilder.loadTexts: httpsEnabled.setDescription(' This provides ability to enable/disable the HTTP protocol\n           on the system.')
sftpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftpEnabled.setStatus('current')
if mibBuilder.loadTexts: sftpEnabled.setDescription(' This provides ability to enable/disable the SFTP protocol\n           on the system.')
tftpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpEnabled.setStatus('current')
if mibBuilder.loadTexts: tftpEnabled.setDescription(' This provides ability to enable/disable the TFTP protocol\n           on the system.')
netconfOverSSHEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netconfOverSSHEnabled.setStatus('current')
if mibBuilder.loadTexts: netconfOverSSHEnabled.setDescription(' This provides ability to enable/disable the NETCONF over SSH\n           on the system.')
usbPortEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 3, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usbPortEnabled.setStatus('current')
if mibBuilder.loadTexts: usbPortEnabled.setDescription(' This provides ability to enable/disable the USB Host Port \n           on the system.')
ntpMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 1), CmNtpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpMode.setStatus('current')
if mibBuilder.loadTexts: ntpMode.setDescription(" This provides ability to manage the Network Time Protocol (NTP)\n           mode on the system.  Currently, the system only supports \n           'client' mode.")
autoProvMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("confirm", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoProvMode.setStatus('current')
if mibBuilder.loadTexts: autoProvMode.setDescription(" This provides ability to manage the Auto Provisioning Mode \n           on the system.  If the auto provisioning mode is 'off', auto \n           discovery is disabled.  Network Elements (shelves) need to be \n           manually configured from the user interfaces.  If the auto \n           provisioning mode is 'confirm', Network Elements (shelves) are\n           auto discovered, however, they need to be accepted explicitly from\n           user interfaces to be managed.  If the auto provisioning mode\n           is 'auto', Network Elements (shelves) are auto discovered and\n           auto provisioned, as permanent, in the system.")
sysTimeOfDayType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 3), TimeOfDayType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeOfDayType.setStatus('current')
if mibBuilder.loadTexts: sysTimeOfDayType.setDescription('This object provides ability to configure System Time of Day source.\n          This can be local, ntp or ptp. \n          Before setting sysTimeOfDayType the f3PtpSysTimeOfDayClock object must be\n          set to configure PTP Telecom Slave object to be used as Clock source.')
ntpServerConfigType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 4), ServerConfigType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerConfigType.setStatus('current')
if mibBuilder.loadTexts: ntpServerConfigType.setDescription('This object describe the ntp server configure type.')
sysLogServerConfigType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 5), ServerConfigType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogServerConfigType.setStatus('current')
if mibBuilder.loadTexts: sysLogServerConfigType.setDescription('This object describe the sys log server configure type.')
sysUseUtcLeapOffsetEnable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysUseUtcLeapOffsetEnable.setStatus('current')
if mibBuilder.loadTexts: sysUseUtcLeapOffsetEnable.setDescription('This attribute indicates whether to use the currentUtcLeapOffset \n            in Announce message from PTP to get UTC time from TAI based \n            timestamps in case we want DM/TWAMP timestamping based on UTC time. \n            This attribute only works when PTP/TimeClock is configured as source of system time of day.')
sysLogTimestampFormat = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 7), SysLogFormatType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogTimestampFormat.setStatus('current')
if mibBuilder.loadTexts: sysLogTimestampFormat.setDescription('This object describes the syslog server timestamp format type.')
sysLogFacilityCode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogFacilityCode.setStatus('current')
if mibBuilder.loadTexts: sysLogFacilityCode.setDescription('This object describes the syslog server facility code.')
fileServicesAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("not-applicable", 0), ("get-database", 1), ("put-database", 2), ("software-copy", 3), ("get-sys-database", 4), ("put-sys-database", 5), ("get-defaultsvalue-file", 6), ("put-sysresetdebuginfo-file", 7), ("put-securitylog-file", 8), ("put-alarmlog-file", 9), ("put-auditlog-file", 10), ("get-config-file", 11), ("put-config-file", 12), ("put-sat-result", 13), ("get-ssl-certificate", 14), ("get-ssl-private-key", 15), ("get-ssl-encrypt-private-Key", 16), ("get-ssl-key-pair", 17), ("put-csr", 18), ("put-rfc2544-test-report", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesAction.setStatus('current')
if mibBuilder.loadTexts: fileServicesAction.setDescription('This object is write only.  Setting this object initiates\n             a file transfer \n\n             Supported actions are:\n             get-database(1)     - Copy a backup database from a\n                                   remote server and place it in the staging\n                                   area.  (See databaseAction)\n             put-database(2)     - Copy a backup database to a remote\n                                   server.  (See databaseAction)\n             software-copy(3)    - Transfer a software image file to the\n                                   system and write it to the standby \n                                   partition.\n             get-sys-database(4) - Copy a system database from a\n                                   remote server and place it in the staging\n                                   area.  (See databaseAction)\n             put-sys-database(5) - Copy a system database to a remote\n                                   server.  (See databaseAction)\n             get-defaultsvalue-file(6) - Transfer the Defaults Value file \n                                   to the system.\n             put-sysresetdebuginfo-file(7) - Transfer the System Reset Debug Information \n                                   file to a remote server.\n             put-securitylog-file(8) - Transfer the System Security Log Information \n                                   file to a remote server.\n             put-alarmlog-file(9) - Transfer the System Alarm Log Information \n                                    file to a remote server.\n             put-audit-file(10)   - Transfer the System Audit Log Information \n                                    file to a remote server.\n             get-config-file(11)  - Transfer the Configuration File from a remote server. \n             put-config-file(12)  - Transfer the Configuration File to a remote server. \n             put-sat-result(13)   - Transfer the SAT test result file to a remote server.\n             get-ssl-certificate(14)   - Transfer the SSL Certificate file to the system.\n             get-ssl-private-key(15)   - Transfer the SSL Private Key file to the system.\n             get-ssl-encrypt-private-Key(16)   - Transfer the SSL Encrypted Private Key file to the system.\n             get-ssl-key-pair(17) - Transfer the SSL Key Pair file to the system.\n             put-csr(18)                    - Transfer the CSR file to the system.\n             put-rfc2544-test-report(19)   - Transfer the Rfc2544 test report to the system.')
fileServicesMethod = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 2), CmFileTransferMethod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesMethod.setStatus('current')
if mibBuilder.loadTexts: fileServicesMethod.setDescription('Specifies the method of transferring the file.  Note\n             that web(4) is a read-only enumeration.')
fileServicesServerIp = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesServerIp.setStatus('current')
if mibBuilder.loadTexts: fileServicesServerIp.setDescription('IP address of the remote server.  The value of this\n             object is cleared when fileServicesAction is set.')
fileServicesUserId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesUserId.setStatus('current')
if mibBuilder.loadTexts: fileServicesUserId.setDescription('User ID to use to authenticate the file transfer.  The value\n             of this object is cleared when fileServicesAction is set.')
fileServicesPassword = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesPassword.setStatus('current')
if mibBuilder.loadTexts: fileServicesPassword.setDescription('User password to authenticate the file transfer.\n             Reading this object will return an empty string if the\n             password has not been set or ***** if the password has\n             been set.  The value of this object is cleared when\n             fileServicesAction is set.')
fileServicesRemoteFile = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesRemoteFile.setStatus('current')
if mibBuilder.loadTexts: fileServicesRemoteFile.setDescription('Path and name of the remote file.  The value of this object\n             is cleared when fileServicesAction is set.')
fileServicesStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 7), CmFileServicesStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileServicesStatus.setStatus('current')
if mibBuilder.loadTexts: fileServicesStatus.setDescription('Status of the user initiated file transfer.')
fileServicesPercentComplete = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileServicesPercentComplete.setStatus('current')
if mibBuilder.loadTexts: fileServicesPercentComplete.setDescription('Percent completion of operation.')
fileServicesMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 9), CmFileServicesMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileServicesMode.setStatus('current')
if mibBuilder.loadTexts: fileServicesMode.setDescription('This object provides information on the current state\n             of file services.')
fileServicesServerType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 10), FileTransferServerType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesServerType.setStatus('current')
if mibBuilder.loadTexts: fileServicesServerType.setDescription("This object describe the remote server's address type.")
fileServicesServerIpv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 11), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesServerIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: fileServicesServerIpv6Addr.setDescription('IPv6 address of the remote server.  The value of this\n             object is cleared when fileServicesAction is set.')
fileServicesDbFileName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileServicesDbFileName.setStatus('current')
if mibBuilder.loadTexts: fileServicesDbFileName.setDescription('Name of the upload unique database file.')
fileServicesAffectedEntity = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 13), AffectedEntity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesAffectedEntity.setStatus('current')
if mibBuilder.loadTexts: fileServicesAffectedEntity.setDescription('Affected Entity.')
fileServicesSslKeyPairName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesSslKeyPairName.setStatus('current')
if mibBuilder.loadTexts: fileServicesSslKeyPairName.setDescription('This is a unique name for the SSL key pair.')
fileServicesDecryptionPassword = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesDecryptionPassword.setStatus('current')
if mibBuilder.loadTexts: fileServicesDecryptionPassword.setDescription('This is the decryption password for the SSL file.')
fileServicesCsrName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 8, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServicesCsrName.setStatus('current')
if mibBuilder.loadTexts: fileServicesCsrName.setDescription('This is a unique name for the CSR.')
databaseAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("not-applicable", 0), ("backup", 1), ("restore", 2), ("activate", 3), ("save-sysdefaults", 4), ("new-sysdefaults", 5), ("restore-sysdefaults", 6), ("restore-factorydefaults", 7), ("propagate-to-standby-nemi", 8), ("force-normal", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAction.setStatus('current')
if mibBuilder.loadTexts: databaseAction.setDescription('Initiates a configuration database action.  This object is\n             write only.  Supported actions are:\n             backup(1)          - Backup the saved configuration database.\n             restore(2)         - Restore the database to the standby partition.\n             activate(3)        - Switches the standby and active partitions and\n                                  restarts the system.\n             save-sysdefaults(4) - Save the database as system defaults.\n             new-sysdefaults(5) - Restart the system and overwrite the\n                                  old system default database with the\n                                  factory default database.\n             restore-sysdefaults(6) - Restart the system using the system\n                                  default database. \n             restore-factorydefaults(7) - Restart the system using the factory\n                                  default database.\n             propagate-to-standby-nemi(8) - Propagate the running database \n                                  to standby NEMI and activate it.\n             force-normal(9)    - Accept the database of the NEMI when the NEMI is in DB_maint status.')
databaseLastSaveTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseLastSaveTime.setStatus('current')
if mibBuilder.loadTexts: databaseLastSaveTime.setDescription('This object gives value of the last database save time.')
databaseTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 3), )
if mibBuilder.loadTexts: databaseTable.setStatus('current')
if mibBuilder.loadTexts: databaseTable.setDescription('This table lists information about thns.')
databaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 3, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "databaseIndex"))
if mibBuilder.loadTexts: databaseEntry.setStatus('current')
if mibBuilder.loadTexts: databaseEntry.setDescription('A conceptual row in the databaseTable.')
databaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseIndex.setStatus('current')
if mibBuilder.loadTexts: databaseIndex.setDescription('An arbitrary integer index value used to uniquely identify\n         an entry within the databaseTable.')
databaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 3, 1, 2), CmVersionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseType.setStatus('current')
if mibBuilder.loadTexts: databaseType.setDescription('The type of database partition.')
databaseVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseVersion.setStatus('current')
if mibBuilder.loadTexts: databaseVersion.setDescription('The database version string.')
databaseActionPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseActionPassphrase.setStatus('current')
if mibBuilder.loadTexts: databaseActionPassphrase.setDescription('Pass-phrase used to generate key for encrypting private keys.')
softwareAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-applicable", 0), ("install", 1), ("schedule-upgrade", 2), ("cancel-upgrade", 3), ("validate-upgrade", 4), ("revert-upgrade", 5), ("propagate-to-standby-nemi", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareAction.setStatus('current')
if mibBuilder.loadTexts: softwareAction.setDescription('This object is write only.  Setting this object initiates\n         the specified action.\n\n         Supported actions are:\n         install(1)          - Install software. \n         schedule-upgrade(2) - Schedule a software upgrade.  At the\n                               scheduled time, the system will reboot and\n                               load the software image stored on the\n                               standby partition.  The scheduled time\n                               can be specified by softwareUpgradeTime.\n                               Also see softwareValidationTimer.\n         cancel-upgrade(3)   - Cancel a scheduled software upgrade.\n         validate-upgrade(4) - Indicate software as valid and cancel the\n                               validation timer. \n         revert-upgrade(5)   - Revert to previous software image if it \n                               still exists.\n         propagate-to-standby-nemi(6) - Propagate the running software release \n                               to standby NEMI and active it.')
softwareUpgradeTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareUpgradeTime.setStatus('current')
if mibBuilder.loadTexts: softwareUpgradeTime.setDescription('Specifies the date and time to perform a software upgrade reboot.\n         If this object is set to a date and time in the past or has never\n         been set, the upgrade reboot will happen as soon as softwareAction\n         is set to schedule-upgrade(2).  This value becomes read-only when\n         an upgrade has been scheduled.  Default value is 1-1-2000 00:00:00.')
softwareValidationTimer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 720), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareValidationTimer.setStatus('current')
if mibBuilder.loadTexts: softwareValidationTimer.setDescription('Time in minutes before the system will reboot and revert to the active\n         software after a software upgrade.  If set to 0, the timer is\n         disabled and the software will automatically be validated after\n         a software upgrade reboot.  This object becomes read-only when\n         the software validation timer is active.  Default value is 0.\n         When enabled, valid values of the timer range from 10 minutes to 720 minutes.')
softwareTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 4), )
if mibBuilder.loadTexts: softwareTable.setStatus('current')
if mibBuilder.loadTexts: softwareTable.setDescription('This table lists information about the software installed\n         in the active and standby partitions.')
softwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 4, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "softwareIndex"))
if mibBuilder.loadTexts: softwareEntry.setStatus('current')
if mibBuilder.loadTexts: softwareEntry.setDescription('A conceptual row in the softwareTable.')
softwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareIndex.setStatus('current')
if mibBuilder.loadTexts: softwareIndex.setDescription('An arbitrary integer index value used to uniquely identify\n         an entry within the softwareTable.')
softwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 4, 1, 2), CmVersionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareType.setStatus('current')
if mibBuilder.loadTexts: softwareType.setDescription('The type of software partition.')
softwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
if mibBuilder.loadTexts: softwareVersion.setDescription('The software version string.')
softwareAffectedEntity = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 5), AffectedEntity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareAffectedEntity.setStatus('current')
if mibBuilder.loadTexts: softwareAffectedEntity.setDescription('Affected Entity.')
softwarePeerCondition = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 6), PeerUpgradeReadyCondition()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwarePeerCondition.setStatus('current')
if mibBuilder.loadTexts: softwarePeerCondition.setDescription('Peer Upgrade Ready Condition Entity.')
peerUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 7, 7), PeerUpgradeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peerUpgradeStatus.setStatus('current')
if mibBuilder.loadTexts: peerUpgradeStatus.setDescription('Peer Upgrade Status Entity.')
cmSysLogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1))
cmSecLogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 2))
cmAuditLogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 3))
cmAlarmLogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 4))
sysLogServerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1, 1), )
if mibBuilder.loadTexts: sysLogServerTable.setStatus('current')
if mibBuilder.loadTexts: sysLogServerTable.setDescription('This table allows configuration of the remote syslog hosts.')
sysLogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1, 1, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "sysLogServerIndex"))
if mibBuilder.loadTexts: sysLogServerEntry.setStatus('current')
if mibBuilder.loadTexts: sysLogServerEntry.setDescription('A conceptual row in the sysLogServerTable.')
sysLogServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLogServerIndex.setStatus('current')
if mibBuilder.loadTexts: sysLogServerIndex.setDescription('An integer index value used to uniquely identify\n         an entry within the sysLogServerTable.')
sysLogIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogIpAddress.setStatus('current')
if mibBuilder.loadTexts: sysLogIpAddress.setDescription('IP address of the remote syslog server. Value of 0.0.0.0 indicates\n             the sys log server is not configured.')
sysLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogPort.setStatus('current')
if mibBuilder.loadTexts: sysLogPort.setDescription('Optional port address of the remote log server.  If not specified,\n             the default port for the standard syslog utility (UDP Port 514)\n             will be used.')
sysLogIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1, 1, 1, 4), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogIpVersion.setStatus('current')
if mibBuilder.loadTexts: sysLogIpVersion.setDescription('This object describe the ip version.')
sysLogIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 1, 1, 1, 5), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: sysLogIpv6Addr.setDescription('This object describe the ipv6 address.')
secLog2sysLogEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secLog2sysLogEnabled.setStatus('current')
if mibBuilder.loadTexts: secLog2sysLogEnabled.setDescription('This allows to enable/disable the system security log to syslog.')
auditLog2sysLogEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLog2sysLogEnabled.setStatus('current')
if mibBuilder.loadTexts: auditLog2sysLogEnabled.setDescription('This allows to enable/disable the system audit log to syslog.')
auditLog2fileEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLog2fileEnabled.setStatus('current')
if mibBuilder.loadTexts: auditLog2fileEnabled.setDescription('This allows to enable/disable the system audit log to file.')
alarmLog2sysLogEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmLog2sysLogEnabled.setStatus('current')
if mibBuilder.loadTexts: alarmLog2sysLogEnabled.setDescription('This allows to enable/disable the system alarm log to syslog.')
alarmLog2fileEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 9, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmLog2fileEnabled.setStatus('current')
if mibBuilder.loadTexts: alarmLog2fileEnabled.setDescription('This allows to enable/disable the system alarm log to file.')
ntpClientEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClientEnabled.setStatus('current')
if mibBuilder.loadTexts: ntpClientEnabled.setDescription('This allows to enable/disable the NTP client.')
ntpPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryServer.setDescription('IP address of the primary remote NTP time server. Value of 0.0.0.0 \n             indicates the NTP server is not configured.')
ntpBackupServer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpBackupServer.setStatus('current')
if mibBuilder.loadTexts: ntpBackupServer.setDescription('IP address of the backup remote NTP time server. Value of 0.0.0.0\n             indicates the NTP server is not configured.')
ntpType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 4), CmNtpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpType.setStatus('current')
if mibBuilder.loadTexts: ntpType.setDescription('Type of communication with the remote NTP server.')
ntpActiveServer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 5), CmNtpServerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpActiveServer.setStatus('current')
if mibBuilder.loadTexts: ntpActiveServer.setDescription('Indication of which server is currently active.')
ntpSwitchServer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 6), CmNtpServerType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpSwitchServer.setStatus('current')
if mibBuilder.loadTexts: ntpSwitchServer.setDescription('Operation to switch the NTP Server.')
ntpServerRoundTripDelay = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: ntpServerRoundTripDelay.setDescription('This object provides the round-trip delay (in microseconds) \n             to the NTP Server.  \n             It returns a value of 0 if NTP is not enabled.')
ntpServerPrecision = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerPrecision.setStatus('current')
if mibBuilder.loadTexts: ntpServerPrecision.setDescription('This object provides the precision (in microseconds) \n             to the NTP Server.')
ntpPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPollingInterval.setStatus('current')
if mibBuilder.loadTexts: ntpPollingInterval.setDescription('This object allows ability to configure the NTP polling\n             interval in seconds.  Polling interval is the time \n             between successive NTP client requests to update local\n             time based on time at the NTP server.')
ntpPrimaryServerIpVersion = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 10), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPrimaryServerIpVersion.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryServerIpVersion.setDescription('This object describe the ipversion of ntp server.')
ntpPrimaryServerIpv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 11), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPrimaryServerIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryServerIpv6Addr.setDescription('This object describe the ipv6 adress of ntp primary server.')
ntpBackupServerIpVersion = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 12), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpBackupServerIpVersion.setStatus('current')
if mibBuilder.loadTexts: ntpBackupServerIpVersion.setDescription('This object describe the ipversion of ntp server.')
ntpBackupServerIpv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 13), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpBackupServerIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: ntpBackupServerIpv6Addr.setDescription('This object describe the ipv6 adress of ntp backup server.')
ntpPrimaryServerAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 14), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPrimaryServerAuthKey.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryServerAuthKey.setDescription('This object specifies the authentication key for the primary NTP server.')
ntpBackupServerAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 15), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpBackupServerAuthKey.setStatus('current')
if mibBuilder.loadTexts: ntpBackupServerAuthKey.setDescription('This object specifies the authentication key for the backup NTP server.')
f3NtpAuthKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16), )
if mibBuilder.loadTexts: f3NtpAuthKeyTable.setStatus('current')
if mibBuilder.loadTexts: f3NtpAuthKeyTable.setDescription('This table specifies the Keys used for NTP Authentication.')
f3NtpAuthKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "f3NtpAuthKeyId"))
if mibBuilder.loadTexts: f3NtpAuthKeyEntry.setStatus('current')
if mibBuilder.loadTexts: f3NtpAuthKeyEntry.setDescription('NTP Authentication Key Entry')
f3NtpAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3NtpAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: f3NtpAuthKeyId.setDescription('This is the unique index for the NTP Authentication Key.')
f3NtpAuthKeyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NtpAuthKeyNumber.setStatus('current')
if mibBuilder.loadTexts: f3NtpAuthKeyNumber.setDescription('This is the identifier used by the NTP authentication protocol using\n         which the Client and Server identify the key.')
f3NtpAuthKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16, 1, 3), NtpAuthKeyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NtpAuthKeyType.setStatus('current')
if mibBuilder.loadTexts: f3NtpAuthKeyType.setDescription('Authentication type, MD5 or SHA-1.')
f3NtpAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NtpAuthKey.setStatus('current')
if mibBuilder.loadTexts: f3NtpAuthKey.setDescription("This is the key value and length depends on the authentication type used.\n          It is 16 character printable string for MD5 excluding whitespace and '#' and\n          for SHA-1 it is a 40 character hex-encoded string.")
f3NtpAuthKeyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NtpAuthKeyStorageType.setStatus('current')
if mibBuilder.loadTexts: f3NtpAuthKeyStorageType.setDescription('The storage type for this conceptual row.')
f3NtpAuthKeyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 10, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NtpAuthKeyRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3NtpAuthKeyRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3NtpAuthKeyRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3NtpAuthKeyRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3NtpAuthKeyRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3SnmpTargetAddrExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 1), )
if mibBuilder.loadTexts: f3SnmpTargetAddrExtTable.setStatus('current')
if mibBuilder.loadTexts: f3SnmpTargetAddrExtTable.setDescription('This table is an extension of the standard snmpTargetAddrTable(SNMP-TARGET-MIB).\n         This table is used to manage the SNMP Dying Gasp support.')
f3SnmpTargetAddrExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 1, 1), ).setIndexNames((1, "SNMP-TARGET-MIB", "snmpTargetAddrName"))
if mibBuilder.loadTexts: f3SnmpTargetAddrExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3SnmpTargetAddrExtEntry.setDescription('A conceptual row in the f3SnmpTargetAddrExtTable.')
f3SnmpTargetAddrExtDyingGaspPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 1, 1, 1), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SnmpTargetAddrExtDyingGaspPort.setStatus('current')
if mibBuilder.loadTexts: f3SnmpTargetAddrExtDyingGaspPort.setDescription('When SNMP Dying Gasp is enabled at Card level, \n             this attribute provides information on the interface (physical port) \n             through which this Target Address is reachable \n             (using Layer 3 ping, trace route).')
f3SnmpTargetAddrExtDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SnmpTargetAddrExtDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: f3SnmpTargetAddrExtDyingGaspEnabled.setDescription('When SNMP Dying Gasp is enabled at Card level, \n             this attribute specifies whether this Target Address entry should be \n             used in the SNMP Dying Gasp TRAP PDU or not.')
f3SnmpTargetAddrExtDyingGaspActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SnmpTargetAddrExtDyingGaspActive.setStatus('current')
if mibBuilder.loadTexts: f3SnmpTargetAddrExtDyingGaspActive.setDescription('When SNMP Dying Gasp is enabled at Card level, in case of \n             multiple target addresses resolving to the same interface (port), \n             this flag indicates which target address is used for the SNMP TRAP PDU.')
f3SnmpTargetAddrExtBulkTrapsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SnmpTargetAddrExtBulkTrapsEnabled.setStatus('current')
if mibBuilder.loadTexts: f3SnmpTargetAddrExtBulkTrapsEnabled.setDescription('Provides ability to enable/disable the Snmp Bulk Traps on\n             the Target Address.')
f3SnmpTargetAddrExtLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 1, 1, 5), F3TargetAddressLifetime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SnmpTargetAddrExtLifetime.setStatus('current')
if mibBuilder.loadTexts: f3SnmpTargetAddrExtLifetime.setDescription('Provides a time after which target address\n             entry will automatically be deleted. \n             SNMP packet received from snmpTargetAddrTAddress \n             resets timer to its original value.')
f3SnmpEngineID = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 2), SnmpEngineID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SnmpEngineID.setStatus('current')
if mibBuilder.loadTexts: f3SnmpEngineID.setDescription("An SNMP engine's administratively-unique identifier.\n\n                 Please note that f3SnmpEngineID differs from the\n                 standard snmpEngineID (SNMP-FRAMEWORK-MIB) with \n                 MAX-ACCESS as read-write.")
f3SnmpLongIfAlias = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 11, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SnmpLongIfAlias.setStatus('current')
if mibBuilder.loadTexts: f3SnmpLongIfAlias.setDescription('This provides ability to enable/disable longer version of ifAlias. If enabled, ifAlias variable can support\n     up to 255 character string and when disabled ifAlias is limited to 64 character string. When disabled and if\n     alias is longer than 64 characters the ifAlias will return a string that is truncated to 64 characters.')
f3SysLastResetType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 12, 1), RestartType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SysLastResetType.setStatus('current')
if mibBuilder.loadTexts: f3SysLastResetType.setDescription('This provides the System Last Reset Type.')
f3SysLastResetCauseType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 12, 2), CmRestartCauseType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SysLastResetCauseType.setStatus('current')
if mibBuilder.loadTexts: f3SysLastResetCauseType.setDescription('This provides the System Last Reset Cause Type.')
f3SysLastAbnormalResetTimestamp1 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 12, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SysLastAbnormalResetTimestamp1.setStatus('current')
if mibBuilder.loadTexts: f3SysLastAbnormalResetTimestamp1.setDescription('This provides the timestamp of the most recent abnormal reset.\n           Note that the system keeps debug logs with 3 most recent \n           abnormal resets. 8 octets of 0 value indicates that\n           there was no abnormal reset of the system.')
f3SysLastAbnormalResetTimestamp2 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 12, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SysLastAbnormalResetTimestamp2.setStatus('current')
if mibBuilder.loadTexts: f3SysLastAbnormalResetTimestamp2.setDescription('This provides the timestamp of the second most recent abnormal reset.\n           Note that the system keeps debug logs with 3 most recent \n           abnormal resets. 8 octets of 0 value indicates that\n           there was only one (f3SysLastAbnormalResetTimestamp1) abnormal\n           reset of the system.')
f3SysLastAbnormalResetTimestamp3 = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 12, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SysLastAbnormalResetTimestamp3.setStatus('current')
if mibBuilder.loadTexts: f3SysLastAbnormalResetTimestamp3.setDescription('This provides the timestamp of the third most recent abnormal reset.\n           Note that the system keeps debug logs with 3 most recent \n           abnormal resets. 8 octets of 0 value indicates that\n           there were only two (f3SysLastAbnormalResetTimestamp1, \n           f3SysLastAbnormalResetTimestamp2) abnormal resets of the system.')
f3SysResetButtonControl = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 12, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SysResetButtonControl.setStatus('current')
if mibBuilder.loadTexts: f3SysResetButtonControl.setDescription('Enable or disable the use of the push button reset swith.')
f3DatabaseSyncTrapObject = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 13, 1), VariablePointer())
if mibBuilder.loadTexts: f3DatabaseSyncTrapObject.setStatus('current')
if mibBuilder.loadTexts: f3DatabaseSyncTrapObject.setDescription('This object provides the Object Identifier (OID) of the entity\n           that needs to be synchronized.  This object is not accessible,\n           it is only carried in the f3DatabaseSyncTrap notification.')
f3StartNeEventLogIndex = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 4, 1), TrapCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3StartNeEventLogIndex.setStatus('current')
if mibBuilder.loadTexts: f3StartNeEventLogIndex.setDescription('This object provides the associated neEventsLogged counter\n           for the logged first event (trap) in the bulk trap.')
f3EndNeEventLogIndex = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 4, 2), TrapCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EndNeEventLogIndex.setStatus('current')
if mibBuilder.loadTexts: f3EndNeEventLogIndex.setDescription('This object provides the associated neEventsLogged counter\n         for the logged last event (trap) in the bulk trap.')
f3ConfigFileActionFileName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConfigFileActionFileName.setStatus('current')
if mibBuilder.loadTexts: f3ConfigFileActionFileName.setDescription('Configuration File name on which configFileAction is initiated.')
f3ConfigFileAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 2), F3ConfigFileAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConfigFileAction.setStatus('current')
if mibBuilder.loadTexts: f3ConfigFileAction.setDescription('Configuration File action to invoke config file operations.')
f3ConfigFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 3), F3ConfigFileStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConfigFileStatus.setStatus('current')
if mibBuilder.loadTexts: f3ConfigFileStatus.setDescription('This object provides status of Configuration File actions.')
f3ConfigFileErrorInformation = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConfigFileErrorInformation.setStatus('current')
if mibBuilder.loadTexts: f3ConfigFileErrorInformation.setDescription('This object provides additional information for failed \n             Configuration File actions.')
f3ConfigFileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 5), )
if mibBuilder.loadTexts: f3ConfigFileTable.setStatus('current')
if mibBuilder.loadTexts: f3ConfigFileTable.setDescription('This table lists information about the configuration files that\n         are resident on the node.')
f3ConfigFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 5, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "f3ConfigFileIndex"))
if mibBuilder.loadTexts: f3ConfigFileEntry.setStatus('current')
if mibBuilder.loadTexts: f3ConfigFileEntry.setDescription('A conceptual row in the f3ConfigFileTable.')
f3ConfigFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: f3ConfigFileIndex.setStatus('current')
if mibBuilder.loadTexts: f3ConfigFileIndex.setDescription('An arbitrary integer index value used to uniquely identify\n         an entry within the f3ConfigFileTable.')
f3ConfigFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConfigFileName.setStatus('current')
if mibBuilder.loadTexts: f3ConfigFileName.setDescription('Name of the configuration file.')
f3ConfigFileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConfigFileDescription.setStatus('current')
if mibBuilder.loadTexts: f3ConfigFileDescription.setDescription('User description of the configuration file.')
f3ConfigFilePercentComplete = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ConfigFilePercentComplete.setStatus('current')
if mibBuilder.loadTexts: f3ConfigFilePercentComplete.setDescription('This object provides configure file percent complete.')
f3ConfigFilePassphrase = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 14, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ConfigFilePassphrase.setStatus('current')
if mibBuilder.loadTexts: f3ConfigFilePassphrase.setDescription('Pass-phrase used to generate key for encrypting private keys.')
f3SystemFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 15, 1), )
if mibBuilder.loadTexts: f3SystemFeatureTable.setStatus('current')
if mibBuilder.loadTexts: f3SystemFeatureTable.setDescription('This table allows ability to manage enabling/disabling system features.')
f3SystemFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 15, 1, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "f3SystemFeatureIndex"))
if mibBuilder.loadTexts: f3SystemFeatureEntry.setStatus('current')
if mibBuilder.loadTexts: f3SystemFeatureEntry.setDescription('A conceptual row in the f3SystemFeatureTable.')
f3SystemFeatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SystemFeatureIndex.setStatus('current')
if mibBuilder.loadTexts: f3SystemFeatureIndex.setDescription('An arbitrary integer index value used to uniquely identify\n         an entry within the f3SystemFeatureTable.')
f3SystemFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SystemFeatureName.setStatus('current')
if mibBuilder.loadTexts: f3SystemFeatureName.setDescription('This object provides the name of the system feature.')
f3SystemFeatureEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 15, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SystemFeatureEnabled.setStatus('current')
if mibBuilder.loadTexts: f3SystemFeatureEnabled.setDescription('This object allows system feature control.  If a specific feature\n         is disabled, the relevant operations to use that feature are denied.')
f3SystemLldpV2DestAddressADVAExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 1), )
if mibBuilder.loadTexts: f3SystemLldpV2DestAddressADVAExtTable.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2DestAddressADVAExtTable.setDescription('This extension table adds a row status to allow user add/delete/edit the LLDP \n        Destination Address which is defined to Read-Only in the standard MIB.')
f3SystemLldpV2DestAddressADVAExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 1, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "f3SystemLldpV2DestAddressADVAExtIndex"))
if mibBuilder.loadTexts: f3SystemLldpV2DestAddressADVAExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2DestAddressADVAExtEntry.setDescription('A conceptual row in the f3SystemLldpV2DestAddressADVAExtTable.')
f3SystemLldpV2DestAddressADVAExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: f3SystemLldpV2DestAddressADVAExtIndex.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2DestAddressADVAExtIndex.setDescription('An arbitrary integer index value used to uniquely identify\n         an entry within the f3SystemLldpV2DestAddressADVAExtTable.')
f3SystemLldpV2ADVAExtDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SystemLldpV2ADVAExtDestMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2ADVAExtDestMacAddress.setDescription('This attribute description the standard MIB about LLDP Destination Mac Address.')
f3SystemLldpV2DestAddressADVAExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SystemLldpV2DestAddressADVAExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2DestAddressADVAExtRowStatus.setDescription('The status of this row.\n             The f3SystemLldpV2DestAddressADVAExtRowStatus object may be modified if\n             the associated instance of this object is equal to active(1),\n             notInService(2), or notReady(3).')
f3SystemLldpV2PortConfigADVAExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2), )
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtTable.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtTable.setDescription('This extension table adds a row status to allow user add/delete/edit the LLDP \n        Destination Address for one port.')
f3SystemLldpV2PortConfigADVAExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtIfIndex"), (0, "CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtDestAddressIndex"))
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtEntry.setDescription('A conceptual row in the f3SystemLldpV2PortConfigADVAExtTable.')
f3SystemLldpV2PortConfigADVAExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtIfIndex.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtIfIndex.setDescription('The interface index value used to identify the port\n            associated with this entry. Its value is an index into\n            the interfaces MIB.\n\n            The value of this object is used as an index to the\n            f3SystemLldpV2PortConfigADVAExtTable.')
f3SystemLldpV2PortConfigADVAExtDestAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1, 2), LldpV2DestAddressTableIndex())
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtDestAddressIndex.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtDestAddressIndex.setDescription('The index value used to identify the destination\n            MAC address associated with this entry. Its value identifies\n            the row in the lldpV2DestAddressTable where the MAC address\n            can be found.\n\n            The value of this object is used as an index to the\n            f3SystemLldpV2PortConfigADVAExtTable.')
f3SystemLldpV2PortConfigADVAExtAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txOnly", 1), ("rxOnly", 2), ("txAndRx", 3), ("disabled", 4))).clone('txAndRx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtAdminStatus.setReference('9.2.5.1')
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtAdminStatus.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtAdminStatus.setDescription("The administratively desired status of the local LLDP agent.\n\n            If the associated f3SystemLldpV2PortConfigADVAExtAdminStatus object is\n            set to a value of 'txOnly(1)', then LLDP agent transmits\n            LLDPframes on this port and it does not store any\n            information about the remote systems connected.\n         \n            If the associated f3SystemLldpV2PortConfigADVAExtAdminStatus object is \n            set to a value of 'rxOnly(2)', then the LLDP agent\n            receives, but it does not transmit LLDP frames on this port.\n\n            If the associated f3SystemLldpV2PortConfigADVAExtAdminStatus object is set\n            to a value of 'txAndRx(3)', then the LLDP agent transmits\n            and receives LLDP frames on this port.\n\n            If the associated f3SystemLldpV2PortConfigADVAExtAdminStatus object is set\n            to a value of 'disabled(4)', then LLDP agent does not\n            transmit or receive LLDP frames on this port. If there is\n            remote systems information which is received on this port\n            and stored in other tables, before the port's\n            f3SystemLldpV2PortConfigADVAExtAdminStatus becomes disabled, then that\n            information is deleted.")
f3SystemLldpV2PortConfigADVAExtNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtNotificationEnable.setDescription('The f3SystemLldpV2PortConfigADVAExtNotificationEnable controls, on a per\n            agent basis, whether or not notifications from the agent\n            are enabled. The value true(1) means that notifications are\n            enabled; the value false(2) means that they are not.')
f3SystemLldpV2PortConfigADVAExtTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1, 5), Bits().clone(namedValues=NamedValues(("portDesc", 0), ("sysName", 1), ("sysDesc", 2), ("sysCap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtTLVsTxEnable.setReference('9.1.2.1')
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtTLVsTxEnable.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtTLVsTxEnable.setDescription("The f3SystemLldpV2PortConfigADVAExtTLVsTxEnable, defined as a bitmap,\n            includes the basic set of LLDP TLVs whose transmission is\n            allowed on the local LLDP agent by the network management.\n            Each bit in the bitmap corresponds to a TLV type associated\n            with a specific optional TLV.\n\n            It should be noted that the organizationally-specific TLVs\n            are excluded from the f3SystemLldpV2PortConfigADVAExtTLVsTxEnable bitmap.\n            \n            LLDP Organization Specific Information Extension MIBs should\n            have similar configuration object to control transmission\n            of their organizationally defined TLVs.\n\n            The bit 'portDesc(0)' indicates that LLDP agent should\n            transmit 'Port Description TLV'.\n\n            The bit 'sysName(1)' indicates that LLDP agent should transmit\n            'System Name TLV'.\n\n            The bit 'sysDesc(2)' indicates that LLDP agent should transmit\n            'System Description TLV'.\n\n            The bit 'sysCap(3)' indicates that LLDP agent should transmit\n            'System Capabilities TLV'.\n\n            There is no bit reserved for the management address TLV type\n            since transmission of management address TLVs are controlled\n            by another object, lldpV2ConfigManAddrTable.\n\n            The default value for f3SystemLldpV2PortConfigADVAExtTLVsTxEnable object is\n            empty set, which means no enumerated values are set.\n\n            The value of this object is restored from non-volatile\n            storage after a re-initialization of the management system.")
f3SystemLldpV2PortConfigADVAExtStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtStorageType.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtStorageType.setDescription('The storage type for this conceptual row.')
f3SystemLldpV2PortConfigADVAExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2PortConfigADVAExtRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3SystemLldpV2PortConfigADVAExtRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3SystemLldpV2PortConfigADVAExtRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3SystemLldpV2PortConfigADVAExtRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3SystemLldpV2ManAddrConfigTxPortsADVAExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 3), )
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtTable.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtTable.setDescription('This extension table adds a row status to allow user add/delete/edit the LLDP \n        Destination Address for one port.')
f3SystemLldpV2ManAddrConfigTxPortsADVAExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 3, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtIfIndex"), (0, "CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtDestAddressIndex"), (0, "CM-SYSTEM-MIB", "f3SystemLldpV2ManAddrConfigTxPortsADVAExtRefInterface"))
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtEntry.setDescription('A conceptual row in the f3SystemLldpV2ManAddrConfigTxPortsADVAExtTable.')
f3SystemLldpV2ManAddrConfigTxPortsADVAExtRefInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 3, 1, 1), VariablePointer())
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtRefInterface.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtRefInterface.setDescription('This object describe the Tx Port is on what interface,\n            its value should be management tunnel or one dcn or none.')
f3SystemLldpV2ManAddrConfigTxPortsADVAExtEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtEnable.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtEnable.setDescription('This object describe the interface on Tx Ports whether enabled.')
f3SystemLldpV2ManAddrConfigTxPortsADVAExtStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 3, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtStorageType.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtStorageType.setDescription('The storage type for this conceptual row.')
f3SystemLldpV2ManAddrConfigTxPortsADVAExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 16, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3SystemLldpV2ManAddrConfigTxPortsADVAExtRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3SystemLldpV2ManAddrConfigTxPortsADVAExtRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3SystemLldpV2ManAddrConfigTxPortsADVAExtRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3SystemLldpV2ManAddrConfigTxPortsADVAExtRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3LldpMaxNeighborsAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 17, 1), LldpV2ConfigurationADVAExtMaxNeighborsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3LldpMaxNeighborsAction.setStatus('current')
if mibBuilder.loadTexts: f3LldpMaxNeighborsAction.setDescription('Discard: information selected to be discarded is the \n          information in the current LLDPDU.\n          Delete entry::information selected to be discarded is \n          currently in the LLDP remote systems MIB.')
f3RawDataServerFtProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 19, 1), CmFileTransferMethod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3RawDataServerFtProtocol.setStatus('current')
if mibBuilder.loadTexts: f3RawDataServerFtProtocol.setDescription('Specifies the method of transferring the file.  Note\n             that web(4) is a read-only enumeration.')
f3RawDataServerFtServerName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 19, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3RawDataServerFtServerName.setStatus('current')
if mibBuilder.loadTexts: f3RawDataServerFtServerName.setDescription('IP address of the raw data server. Value of 0.0.0.0 \n             indicates the raw data server is not configured.')
f3RawDataServerFtUserId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 19, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3RawDataServerFtUserId.setStatus('current')
if mibBuilder.loadTexts: f3RawDataServerFtUserId.setDescription('User ID to use to authenticate the file transfer.')
f3RawDataServerFtPasswd = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 19, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3RawDataServerFtPasswd.setStatus('current')
if mibBuilder.loadTexts: f3RawDataServerFtPasswd.setDescription('User password to authenticate the file transfer.\n             Reading this object will return an empty string if the\n             password has not been set or ***** if the password has\n             been set.')
f3LldpV2RemExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 20, 1), )
if mibBuilder.loadTexts: f3LldpV2RemExtTable.setStatus('current')
if mibBuilder.loadTexts: f3LldpV2RemExtTable.setDescription('This table is an extension of the standard lldpV2RemTable (LLDP-V2-MIB).\n        This table adds remote TTL attribute support')
f3LldpV2RemExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 20, 1, 1), )
lldpV2RemEntry.registerAugmentions(("CM-SYSTEM-MIB", "f3LldpV2RemExtEntry"))
f3LldpV2RemExtEntry.setIndexNames(*lldpV2RemEntry.getIndexNames())
if mibBuilder.loadTexts: f3LldpV2RemExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3LldpV2RemExtEntry.setDescription('A conceptual row in the f3LldpV2RemExtTable.')
f3LldpV2RemTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 20, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3LldpV2RemTTL.setStatus('current')
if mibBuilder.loadTexts: f3LldpV2RemTTL.setDescription('Integer value which indicates the number of seconds that the\n          recipient LLDP agent is to regard the information associated\n          with particular MSAP identifier to be valid')
f3SimpleLtpControl = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SimpleLtpControl.setStatus('current')
if mibBuilder.loadTexts: f3SimpleLtpControl.setDescription(' This provides ability to enable/disable the simple ltp on the\n           system.')
f3SimpleLtpTransferProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21, 2), CmFileTransferMethod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SimpleLtpTransferProtocol.setStatus('current')
if mibBuilder.loadTexts: f3SimpleLtpTransferProtocol.setDescription(' Specifies the method of transferring the file.')
f3SimpleLtpServerIpv4Addr = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SimpleLtpServerIpv4Addr.setStatus('current')
if mibBuilder.loadTexts: f3SimpleLtpServerIpv4Addr.setDescription(' IP address of the remote server.')
f3SimpleLtpUserName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SimpleLtpUserName.setStatus('current')
if mibBuilder.loadTexts: f3SimpleLtpUserName.setDescription(' User ID to use to authenticate the file transfer.')
f3SimpleLtpPasswd = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SimpleLtpPasswd.setStatus('current')
if mibBuilder.loadTexts: f3SimpleLtpPasswd.setDescription(' Password to use to authenticate the file transfer.')
f3SimpleLtpConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SimpleLtpConfigFileName.setStatus('current')
if mibBuilder.loadTexts: f3SimpleLtpConfigFileName.setDescription(' The configure file name used to LTP function.')
f3SimpleLtpSoftwareFileName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 21, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SimpleLtpSoftwareFileName.setStatus('current')
if mibBuilder.loadTexts: f3SimpleLtpSoftwareFileName.setDescription(' The software file name.')
f3SysAuthKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1), )
if mibBuilder.loadTexts: f3SysAuthKeyTable.setStatus('current')
if mibBuilder.loadTexts: f3SysAuthKeyTable.setDescription('.')
f3SysAuthKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1, 1), ).setIndexNames((0, "CM-SYSTEM-MIB", "f3SysAuthKeyIndex"))
if mibBuilder.loadTexts: f3SysAuthKeyEntry.setStatus('current')
if mibBuilder.loadTexts: f3SysAuthKeyEntry.setDescription('.')
f3SysAuthKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3SysAuthKeyIndex.setStatus('current')
if mibBuilder.loadTexts: f3SysAuthKeyIndex.setDescription('.')
f3SysAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SysAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: f3SysAuthKeyId.setDescription('.')
f3SysAuthKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1, 1, 3), SysAuthKeyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SysAuthKeyType.setStatus('current')
if mibBuilder.loadTexts: f3SysAuthKeyType.setDescription('Authentication type.')
f3SysAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SysAuthKey.setStatus('current')
if mibBuilder.loadTexts: f3SysAuthKey.setDescription('Password for this key.')
f3SysAuthKeyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SysAuthKeyStorageType.setStatus('current')
if mibBuilder.loadTexts: f3SysAuthKeyStorageType.setDescription('The storage type for this conceptual row.')
f3SysAuthKeyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 22, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3SysAuthKeyRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3SysAuthKeyRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3SysAuthKeyRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3SysAuthKeyRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3SysAuthKeyRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3CallhomeClientIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 23, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CallhomeClientIpAddress.setStatus('current')
if mibBuilder.loadTexts: f3CallhomeClientIpAddress.setDescription('Callhome client IP address.')
f3CallhomeState = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 23, 2), CallhomeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CallhomeState.setStatus('current')
if mibBuilder.loadTexts: f3CallhomeState.setDescription('Callhome state.')
f3ApplicationsBootCompleted = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 24, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ApplicationsBootCompleted.setStatus('current')
if mibBuilder.loadTexts: f3ApplicationsBootCompleted.setDescription('This is a flag informing that system completed booting of its applications.')
f3ApplicationsUpTime = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 24, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ApplicationsUpTime.setStatus('current')
if mibBuilder.loadTexts: f3ApplicationsUpTime.setDescription('The time (in hundredths of second) since the applications of the system were last initialized.')
f3EnsembleZtpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 1, 25, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EnsembleZtpEnabled.setStatus('current')
if mibBuilder.loadTexts: f3EnsembleZtpEnabled.setDescription('This provides ability to enable/disable Ensemble ZTP on the system.')
cmStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 2, 1))
if mibBuilder.loadTexts: cmStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: cmStateChangeTrap.setDescription('This is the State Change Notification per Interface sent by the agent. \n         The actual attribute value is sent by the agent in the form of\n         a varbind list, as additional objects, as per SMIv2 (RFC2578, Section 8.1).')
cmAttributeValueChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 2, 2))
if mibBuilder.loadTexts: cmAttributeValueChangeTrap.setStatus('current')
if mibBuilder.loadTexts: cmAttributeValueChangeTrap.setDescription('This is the Attribute Value Change Notification sent by the agent.\n             The actual attribute value is sent by the agent in the form of\n             a varbind list, as additional objects, as per SMIv2 (RFC2578, Section 8.1).')
cmObjectCreationTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 2, 3))
if mibBuilder.loadTexts: cmObjectCreationTrap.setStatus('current')
if mibBuilder.loadTexts: cmObjectCreationTrap.setDescription('This is the Object Creation Notification sent by the agent.\n          The index value of the SNMP Row that is created is sent by the\n          agent in the form of a varbind list, as additional objects, \n          as per SMIv2 (RFC2578, Section 8.1).')
cmObjectDeletionTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 2, 4))
if mibBuilder.loadTexts: cmObjectDeletionTrap.setStatus('current')
if mibBuilder.loadTexts: cmObjectDeletionTrap.setDescription('This is the Object Deletion Notification sent by the agent.\n          The index value of the SNMP Row that is deleted is sent by the\n          agent in the form of a varbind list,\n          as per SMIv2 (RFC2578, Section 8.1).')
cmSnmpDyingGaspTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 2, 5))
if mibBuilder.loadTexts: cmSnmpDyingGaspTrap.setStatus('current')
if mibBuilder.loadTexts: cmSnmpDyingGaspTrap.setDescription('This is the Dying Gasp SNMP trap sent by the agent.')
f3DatabaseSyncTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 2, 6))
if mibBuilder.loadTexts: f3DatabaseSyncTrap.setStatus('current')
if mibBuilder.loadTexts: f3DatabaseSyncTrap.setDescription('This is the Database Synchronization trap sent by \n             the agent for bulk operations. The var bind list\n             can contain multiple variables with OIDs as \n             f3DatabaseSyncTrapObject and values as the OIDs\n             of the entities that need synchronization.\n             The var-binds are sent implicitly, as per \n             SMIv2 (RFC2578, Section 8.1).')
f3BulkTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 5, 1))
if mibBuilder.loadTexts: f3BulkTrap.setStatus('current')
if mibBuilder.loadTexts: f3BulkTrap.setDescription('This is the bulk trap sent by\n             the agent for bulk operations.')
cmSystemCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 1))
cmSystemGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 2))
f3SystemBulkGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 3))
cmSystemCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 1, 1)).setObjects(("CM-SYSTEM-MIB", "cmSystemObjectGroup"), ("CM-SYSTEM-MIB", "cmSystemNotifGroup"), ("CM-SYSTEM-MIB", "f3SystemObjectBulkGroup"), ("CM-SYSTEM-MIB", "f3SystemNotifBulkGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmSystemCompliance = cmSystemCompliance.setStatus('current')
if mibBuilder.loadTexts: cmSystemCompliance.setDescription('Describes the requirements for conformance to the CM System\n             group.')
cmSystemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 2, 1)).setObjects(("CM-SYSTEM-MIB", "lastSetErrorInformation"), ("CM-SYSTEM-MIB", "cliCmdPromptPrefix"), ("CM-SYSTEM-MIB", "securityPromptEnabled"), ("CM-SYSTEM-MIB", "securityBanner"), ("CM-SYSTEM-MIB", "aclEntryFilterAction"), ("CM-SYSTEM-MIB", "aclEntryNetworkAddress"), ("CM-SYSTEM-MIB", "aclEntryNetworkMask"), ("CM-SYSTEM-MIB", "aclEntryEnabled"), ("CM-SYSTEM-MIB", "aclEntryIpVersion"), ("CM-SYSTEM-MIB", "aclEntryNetworkIpv6Addr"), ("CM-SYSTEM-MIB", "aclEntryPrefixLength"), ("CM-SYSTEM-MIB", "serialPortDisconnectAutoLogOff"), ("CM-SYSTEM-MIB", "telnetEnabled"), ("CM-SYSTEM-MIB", "sshEnabled"), ("CM-SYSTEM-MIB", "ftpEnabled"), ("CM-SYSTEM-MIB", "scpEnabled"), ("CM-SYSTEM-MIB", "serialPortEnabled"), ("CM-SYSTEM-MIB", "httpEnabled"), ("CM-SYSTEM-MIB", "httpsEnabled"), ("CM-SYSTEM-MIB", "sftpEnabled"), ("CM-SYSTEM-MIB", "tftpEnabled"), ("CM-SYSTEM-MIB", "netconfOverSSHEnabled"), ("CM-SYSTEM-MIB", "usbPortEnabled"), ("CM-SYSTEM-MIB", "ntpMode"), ("CM-SYSTEM-MIB", "autoProvMode"), ("CM-SYSTEM-MIB", "sysTimeOfDayType"), ("CM-SYSTEM-MIB", "ntpServerConfigType"), ("CM-SYSTEM-MIB", "sysLogServerConfigType"), ("CM-SYSTEM-MIB", "sysLogTimestampFormat"), ("CM-SYSTEM-MIB", "sysLogFacilityCode"), ("CM-SYSTEM-MIB", "fileServicesAction"), ("CM-SYSTEM-MIB", "fileServicesMethod"), ("CM-SYSTEM-MIB", "fileServicesServerIp"), ("CM-SYSTEM-MIB", "fileServicesUserId"), ("CM-SYSTEM-MIB", "fileServicesPassword"), ("CM-SYSTEM-MIB", "fileServicesRemoteFile"), ("CM-SYSTEM-MIB", "fileServicesDbFileName"), ("CM-SYSTEM-MIB", "fileServicesStatus"), ("CM-SYSTEM-MIB", "fileServicesPercentComplete"), ("CM-SYSTEM-MIB", "fileServicesMode"), ("CM-SYSTEM-MIB", "fileServicesServerType"), ("CM-SYSTEM-MIB", "fileServicesServerIpv6Addr"), ("CM-SYSTEM-MIB", "fileServicesAffectedEntity"), ("CM-SYSTEM-MIB", "fileServicesSslKeyPairName"), ("CM-SYSTEM-MIB", "fileServicesDecryptionPassword"), ("CM-SYSTEM-MIB", "sysLogIpVersion"), ("CM-SYSTEM-MIB", "sysLogIpv6Addr"), ("CM-SYSTEM-MIB", "fileServicesCsrName"), ("CM-SYSTEM-MIB", "ntpPrimaryServerIpVersion"), ("CM-SYSTEM-MIB", "ntpPrimaryServerIpv6Addr"), ("CM-SYSTEM-MIB", "ntpBackupServerIpVersion"), ("CM-SYSTEM-MIB", "ntpBackupServerIpv6Addr"), ("CM-SYSTEM-MIB", "ntpPrimaryServerAuthKey"), ("CM-SYSTEM-MIB", "ntpBackupServerAuthKey"), ("CM-SYSTEM-MIB", "databaseAction"), ("CM-SYSTEM-MIB", "databaseLastSaveTime"), ("CM-SYSTEM-MIB", "databaseIndex"), ("CM-SYSTEM-MIB", "databaseType"), ("CM-SYSTEM-MIB", "databaseVersion"), ("CM-SYSTEM-MIB", "databaseActionPassphrase"), ("CM-SYSTEM-MIB", "softwareAction"), ("CM-SYSTEM-MIB", "softwareUpgradeTime"), ("CM-SYSTEM-MIB", "softwareValidationTimer"), ("CM-SYSTEM-MIB", "softwareIndex"), ("CM-SYSTEM-MIB", "softwareType"), ("CM-SYSTEM-MIB", "softwareVersion"), ("CM-SYSTEM-MIB", "softwareAffectedEntity"), ("CM-SYSTEM-MIB", "softwarePeerCondition"), ("CM-SYSTEM-MIB", "peerUpgradeStatus"), ("CM-SYSTEM-MIB", "sysLogServerIndex"), ("CM-SYSTEM-MIB", "sysLogIpAddress"), ("CM-SYSTEM-MIB", "sysLogPort"), ("CM-SYSTEM-MIB", "secLog2sysLogEnabled"), ("CM-SYSTEM-MIB", "auditLog2sysLogEnabled"), ("CM-SYSTEM-MIB", "auditLog2fileEnabled"), ("CM-SYSTEM-MIB", "alarmLog2sysLogEnabled"), ("CM-SYSTEM-MIB", "alarmLog2fileEnabled"), ("CM-SYSTEM-MIB", "ntpClientEnabled"), ("CM-SYSTEM-MIB", "ntpPrimaryServer"), ("CM-SYSTEM-MIB", "ntpBackupServer"), ("CM-SYSTEM-MIB", "ntpType"), ("CM-SYSTEM-MIB", "ntpActiveServer"), ("CM-SYSTEM-MIB", "ntpSwitchServer"), ("CM-SYSTEM-MIB", "ntpServerRoundTripDelay"), ("CM-SYSTEM-MIB", "ntpServerPrecision"), ("CM-SYSTEM-MIB", "ntpPollingInterval"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtDyingGaspPort"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtDyingGaspEnabled"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtDyingGaspActive"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtBulkTrapsEnabled"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtLifetime"), ("CM-SYSTEM-MIB", "f3SysLastResetType"), ("CM-SYSTEM-MIB", "f3SysLastResetCauseType"), ("CM-SYSTEM-MIB", "f3SysLastAbnormalResetTimestamp1"), ("CM-SYSTEM-MIB", "f3SysLastAbnormalResetTimestamp2"), ("CM-SYSTEM-MIB", "f3SysLastAbnormalResetTimestamp3"), ("CM-SYSTEM-MIB", "f3SysResetButtonControl"), ("CM-SYSTEM-MIB", "f3SimpleLtpControl"), ("CM-SYSTEM-MIB", "f3SimpleLtpTransferProtocol"), ("CM-SYSTEM-MIB", "f3SimpleLtpServerIpv4Addr"), ("CM-SYSTEM-MIB", "f3SimpleLtpUserName"), ("CM-SYSTEM-MIB", "f3SimpleLtpPasswd"), ("CM-SYSTEM-MIB", "f3SimpleLtpConfigFileName"), ("CM-SYSTEM-MIB", "f3SimpleLtpSoftwareFileName"), ("CM-SYSTEM-MIB", "f3DatabaseSyncTrapObject"), ("CM-SYSTEM-MIB", "f3ConfigFileActionFileName"), ("CM-SYSTEM-MIB", "f3ConfigFileAction"), ("CM-SYSTEM-MIB", "f3ConfigFileStatus"), ("CM-SYSTEM-MIB", "f3ConfigFileErrorInformation"), ("CM-SYSTEM-MIB", "f3ConfigFileIndex"), ("CM-SYSTEM-MIB", "f3ConfigFileName"), ("CM-SYSTEM-MIB", "f3ConfigFileDescription"), ("CM-SYSTEM-MIB", "f3ConfigFilePercentComplete"), ("CM-SYSTEM-MIB", "f3ConfigFilePassphrase"), ("CM-SYSTEM-MIB", "f3SystemFeatureIndex"), ("CM-SYSTEM-MIB", "f3SystemFeatureName"), ("CM-SYSTEM-MIB", "f3SystemFeatureEnabled"), ("CM-SYSTEM-MIB", "f3SystemLldpV2DestAddressADVAExtIndex"), ("CM-SYSTEM-MIB", "f3SystemLldpV2ADVAExtDestMacAddress"), ("CM-SYSTEM-MIB", "f3SystemLldpV2DestAddressADVAExtRowStatus"), ("CM-SYSTEM-MIB", "f3LldpMaxNeighborsAction"), ("CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtIfIndex"), ("CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtDestAddressIndex"), ("CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtAdminStatus"), ("CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtNotificationEnable"), ("CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtTLVsTxEnable"), ("CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtStorageType"), ("CM-SYSTEM-MIB", "f3SystemLldpV2PortConfigADVAExtRowStatus"), ("CM-SYSTEM-MIB", "f3SystemLldpV2ManAddrConfigTxPortsADVAExtRefInterface"), ("CM-SYSTEM-MIB", "f3SystemLldpV2ManAddrConfigTxPortsADVAExtEnable"), ("CM-SYSTEM-MIB", "f3SystemLldpV2ManAddrConfigTxPortsADVAExtStorageType"), ("CM-SYSTEM-MIB", "f3SystemLldpV2ManAddrConfigTxPortsADVAExtRowStatus"), ("CM-SYSTEM-MIB", "f3RawDataServerFtProtocol"), ("CM-SYSTEM-MIB", "f3RawDataServerFtServerName"), ("CM-SYSTEM-MIB", "f3RawDataServerFtUserId"), ("CM-SYSTEM-MIB", "f3RawDataServerFtPasswd"), ("CM-SYSTEM-MIB", "f3LldpV2RemTTL"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyId"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyNumber"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyType"), ("CM-SYSTEM-MIB", "f3NtpAuthKey"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyStorageType"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyRowStatus"), ("CM-SYSTEM-MIB", "f3SysAuthKeyIndex"), ("CM-SYSTEM-MIB", "f3SysAuthKeyId"), ("CM-SYSTEM-MIB", "f3SysAuthKeyType"), ("CM-SYSTEM-MIB", "f3SysAuthKey"), ("CM-SYSTEM-MIB", "f3SysAuthKeyStorageType"), ("CM-SYSTEM-MIB", "f3SysAuthKeyRowStatus"), ("CM-SYSTEM-MIB", "f3CallhomeClientIpAddress"), ("CM-SYSTEM-MIB", "f3CallhomeState"), ("CM-SYSTEM-MIB", "f3ApplicationsBootCompleted"), ("CM-SYSTEM-MIB", "f3ApplicationsUpTime"), ("CM-SYSTEM-MIB", "f3EnsembleZtpEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmSystemObjectGroup = cmSystemObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cmSystemObjectGroup.setDescription('A collection of objects used to manage the CM System\n             group.')
cmSystemNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 2, 2)).setObjects(("CM-SYSTEM-MIB", "cmStateChangeTrap"), ("CM-SYSTEM-MIB", "cmAttributeValueChangeTrap"), ("CM-SYSTEM-MIB", "cmObjectCreationTrap"), ("CM-SYSTEM-MIB", "cmObjectDeletionTrap"), ("CM-SYSTEM-MIB", "cmSnmpDyingGaspTrap"), ("CM-SYSTEM-MIB", "f3DatabaseSyncTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmSystemNotifGroup = cmSystemNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cmSystemNotifGroup.setDescription('A collection of notifications used in the CM System\n             group.')
cmSystemObjectGroupCmHub = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 2, 3)).setObjects(("CM-SYSTEM-MIB", "lastSetErrorInformation"), ("CM-SYSTEM-MIB", "cliCmdPromptPrefix"), ("CM-SYSTEM-MIB", "securityPromptEnabled"), ("CM-SYSTEM-MIB", "securityBanner"), ("CM-SYSTEM-MIB", "aclEntryFilterAction"), ("CM-SYSTEM-MIB", "aclEntryNetworkAddress"), ("CM-SYSTEM-MIB", "aclEntryNetworkMask"), ("CM-SYSTEM-MIB", "aclEntryEnabled"), ("CM-SYSTEM-MIB", "serialPortDisconnectAutoLogOff"), ("CM-SYSTEM-MIB", "telnetEnabled"), ("CM-SYSTEM-MIB", "sshEnabled"), ("CM-SYSTEM-MIB", "ftpEnabled"), ("CM-SYSTEM-MIB", "scpEnabled"), ("CM-SYSTEM-MIB", "serialPortEnabled"), ("CM-SYSTEM-MIB", "httpEnabled"), ("CM-SYSTEM-MIB", "httpsEnabled"), ("CM-SYSTEM-MIB", "sftpEnabled"), ("CM-SYSTEM-MIB", "ntpMode"), ("CM-SYSTEM-MIB", "autoProvMode"), ("CM-SYSTEM-MIB", "fileServicesAction"), ("CM-SYSTEM-MIB", "fileServicesMethod"), ("CM-SYSTEM-MIB", "fileServicesServerIp"), ("CM-SYSTEM-MIB", "fileServicesUserId"), ("CM-SYSTEM-MIB", "fileServicesPassword"), ("CM-SYSTEM-MIB", "fileServicesRemoteFile"), ("CM-SYSTEM-MIB", "fileServicesDbFileName"), ("CM-SYSTEM-MIB", "fileServicesStatus"), ("CM-SYSTEM-MIB", "fileServicesPercentComplete"), ("CM-SYSTEM-MIB", "fileServicesMode"), ("CM-SYSTEM-MIB", "fileServicesServerType"), ("CM-SYSTEM-MIB", "fileServicesServerIpv6Addr"), ("CM-SYSTEM-MIB", "sysLogIpVersion"), ("CM-SYSTEM-MIB", "sysLogIpv6Addr"), ("CM-SYSTEM-MIB", "ntpPrimaryServerIpVersion"), ("CM-SYSTEM-MIB", "ntpPrimaryServerIpv6Addr"), ("CM-SYSTEM-MIB", "ntpBackupServerIpVersion"), ("CM-SYSTEM-MIB", "ntpBackupServerIpv6Addr"), ("CM-SYSTEM-MIB", "ntpPrimaryServerAuthKey"), ("CM-SYSTEM-MIB", "ntpBackupServerAuthKey"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyId"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyNumber"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyType"), ("CM-SYSTEM-MIB", "f3NtpAuthKey"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyStorageType"), ("CM-SYSTEM-MIB", "f3NtpAuthKeyRowStatus"), ("CM-SYSTEM-MIB", "databaseAction"), ("CM-SYSTEM-MIB", "databaseLastSaveTime"), ("CM-SYSTEM-MIB", "databaseIndex"), ("CM-SYSTEM-MIB", "databaseType"), ("CM-SYSTEM-MIB", "databaseVersion"), ("CM-SYSTEM-MIB", "softwareAction"), ("CM-SYSTEM-MIB", "softwareUpgradeTime"), ("CM-SYSTEM-MIB", "softwareValidationTimer"), ("CM-SYSTEM-MIB", "softwareIndex"), ("CM-SYSTEM-MIB", "softwareType"), ("CM-SYSTEM-MIB", "softwareVersion"), ("CM-SYSTEM-MIB", "sysLogServerIndex"), ("CM-SYSTEM-MIB", "sysLogIpAddress"), ("CM-SYSTEM-MIB", "sysLogPort"), ("CM-SYSTEM-MIB", "secLog2sysLogEnabled"), ("CM-SYSTEM-MIB", "auditLog2sysLogEnabled"), ("CM-SYSTEM-MIB", "auditLog2fileEnabled"), ("CM-SYSTEM-MIB", "alarmLog2sysLogEnabled"), ("CM-SYSTEM-MIB", "alarmLog2fileEnabled"), ("CM-SYSTEM-MIB", "ntpClientEnabled"), ("CM-SYSTEM-MIB", "ntpPrimaryServer"), ("CM-SYSTEM-MIB", "ntpBackupServer"), ("CM-SYSTEM-MIB", "ntpType"), ("CM-SYSTEM-MIB", "ntpActiveServer"), ("CM-SYSTEM-MIB", "ntpSwitchServer"), ("CM-SYSTEM-MIB", "ntpServerRoundTripDelay"), ("CM-SYSTEM-MIB", "ntpServerPrecision"), ("CM-SYSTEM-MIB", "ntpPollingInterval"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtDyingGaspPort"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtDyingGaspEnabled"), ("CM-SYSTEM-MIB", "f3SnmpTargetAddrExtDyingGaspActive"), ("CM-SYSTEM-MIB", "f3SysLastResetType"), ("CM-SYSTEM-MIB", "f3SysLastResetCauseType"), ("CM-SYSTEM-MIB", "f3SysLastAbnormalResetTimestamp1"), ("CM-SYSTEM-MIB", "f3SysLastAbnormalResetTimestamp2"), ("CM-SYSTEM-MIB", "f3SysLastAbnormalResetTimestamp3"), ("CM-SYSTEM-MIB", "f3SysResetButtonControl"), ("CM-SYSTEM-MIB", "f3SimpleLtpControl"), ("CM-SYSTEM-MIB", "f3SimpleLtpTransferProtocol"), ("CM-SYSTEM-MIB", "f3SimpleLtpServerIpv4Addr"), ("CM-SYSTEM-MIB", "f3SimpleLtpUserName"), ("CM-SYSTEM-MIB", "f3SimpleLtpPasswd"), ("CM-SYSTEM-MIB", "f3SimpleLtpConfigFileName"), ("CM-SYSTEM-MIB", "f3SimpleLtpSoftwareFileName"), ("CM-SYSTEM-MIB", "f3DatabaseSyncTrapObject"), ("CM-SYSTEM-MIB", "f3SysAuthKeyIndex"), ("CM-SYSTEM-MIB", "f3SysAuthKeyId"), ("CM-SYSTEM-MIB", "f3SysAuthKeyType"), ("CM-SYSTEM-MIB", "f3SysAuthKey"), ("CM-SYSTEM-MIB", "f3SysAuthKeyStorageType"), ("CM-SYSTEM-MIB", "f3SysAuthKeyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmSystemObjectGroupCmHub = cmSystemObjectGroupCmHub.setStatus('current')
if mibBuilder.loadTexts: cmSystemObjectGroupCmHub.setDescription('A collection of objects used to manage the CM System\n             group.')
f3SystemObjectBulkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 3, 1)).setObjects(("CM-SYSTEM-MIB", "f3StartNeEventLogIndex"), ("CM-SYSTEM-MIB", "f3EndNeEventLogIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3SystemObjectBulkGroup = f3SystemObjectBulkGroup.setStatus('current')
if mibBuilder.loadTexts: f3SystemObjectBulkGroup.setDescription('A collection of objects used to manage the F3 System Bulk\n         group.')
f3SystemNotifBulkGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 2, 3, 3, 2)).setObjects(("CM-SYSTEM-MIB", "f3BulkTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3SystemNotifBulkGroup = f3SystemNotifBulkGroup.setStatus('current')
if mibBuilder.loadTexts: f3SystemNotifBulkGroup.setDescription('A collection of notifications used in the F3 System Bulk\n         group.')
mibBuilder.exportSymbols("CM-SYSTEM-MIB", aclEntryIndex=aclEntryIndex, fileServicesUserId=fileServicesUserId, f3SystemLldpV2DestAddressADVAExtIndex=f3SystemLldpV2DestAddressADVAExtIndex, f3StartNeEventLogIndex=f3StartNeEventLogIndex, cmSnmpDyingGaspTrap=cmSnmpDyingGaspTrap, cmSystemCompliance=cmSystemCompliance, fileServicesRemoteFile=fileServicesRemoteFile, f3SimpleLtpTransferProtocol=f3SimpleLtpTransferProtocol, fileServicesPercentComplete=fileServicesPercentComplete, f3SimpleLtpPasswd=f3SimpleLtpPasswd, f3ApplicationsUpTime=f3ApplicationsUpTime, fileServicesServerIp=fileServicesServerIp, f3RawDataServerFtServerName=f3RawDataServerFtServerName, f3LldpV2ConfigurationADVAExtObjects=f3LldpV2ConfigurationADVAExtObjects, ntpClientEnabled=ntpClientEnabled, f3SnmpLongIfAlias=f3SnmpLongIfAlias, sysLogTimestampFormat=sysLogTimestampFormat, f3BulkNotifObjects=f3BulkNotifObjects, f3SysLastAbnormalResetTimestamp1=f3SysLastAbnormalResetTimestamp1, NtpAuthKeyType=NtpAuthKeyType, f3ApplicationsBootCompleted=f3ApplicationsBootCompleted, f3SimpleLtpObjects=f3SimpleLtpObjects, f3SysAuthKeyType=f3SysAuthKeyType, f3NotifObjects=f3NotifObjects, f3ConfigFileEntry=f3ConfigFileEntry, f3SystemFeatureName=f3SystemFeatureName, f3SystemLldpV2ManAddrConfigTxPortsADVAExtEnable=f3SystemLldpV2ManAddrConfigTxPortsADVAExtEnable, f3NtpAuthKeyId=f3NtpAuthKeyId, ntpType=ntpType, cmSystemGroups=cmSystemGroups, cmResetCauseObjects=cmResetCauseObjects, softwareIndex=softwareIndex, LldpV2ConfigurationADVAExtMaxNeighborsAction=LldpV2ConfigurationADVAExtMaxNeighborsAction, f3SystemLldpV2DestAddressADVAExtTable=f3SystemLldpV2DestAddressADVAExtTable, sysTimeOfDayType=sysTimeOfDayType, f3SystemLldpV2PortConfigADVAExtIfIndex=f3SystemLldpV2PortConfigADVAExtIfIndex, f3RawDataObjects=f3RawDataObjects, SysLogFormatType=SysLogFormatType, F3ConfigFileStatus=F3ConfigFileStatus, f3SysAuthKeyIndex=f3SysAuthKeyIndex, f3SysAuthKeyId=f3SysAuthKeyId, secLog2sysLogEnabled=secLog2sysLogEnabled, f3NtpAuthKeyEntry=f3NtpAuthKeyEntry, cmCliObjects=cmCliObjects, f3RawDataServerFtPasswd=f3RawDataServerFtPasswd, f3CallhomeState=f3CallhomeState, cmLldpV2DestAdressADVAExtObjects=cmLldpV2DestAdressADVAExtObjects, cmSysSecObjects=cmSysSecObjects, peerUpgradeStatus=peerUpgradeStatus, f3SnmpTargetAddrExtDyingGaspPort=f3SnmpTargetAddrExtDyingGaspPort, f3SysLastAbnormalResetTimestamp3=f3SysLastAbnormalResetTimestamp3, softwareTable=softwareTable, alarmLog2fileEnabled=alarmLog2fileEnabled, f3ConfigFileErrorInformation=f3ConfigFileErrorInformation, aclEntryEnabled=aclEntryEnabled, f3SimpleLtpConfigFileName=f3SimpleLtpConfigFileName, ntpPrimaryServerIpv6Addr=ntpPrimaryServerIpv6Addr, cmSystemObjectGroupCmHub=cmSystemObjectGroupCmHub, f3EnsembleZtpEnabled=f3EnsembleZtpEnabled, cmSysLogObjects=cmSysLogObjects, aclEntry=aclEntry, cmSystemNotifGroup=cmSystemNotifGroup, cmSnmpObjects=cmSnmpObjects, cmErrorInfoObjects=cmErrorInfoObjects, aclEntryFilterAction=aclEntryFilterAction, f3SysLastResetType=f3SysLastResetType, cmAuditLogObjects=cmAuditLogObjects, f3SystemLldpV2PortConfigADVAExtEntry=f3SystemLldpV2PortConfigADVAExtEntry, f3SystemLldpV2DestAddressADVAExtEntry=f3SystemLldpV2DestAddressADVAExtEntry, f3SystemLldpV2ManAddrConfigTxPortsADVAExtRowStatus=f3SystemLldpV2ManAddrConfigTxPortsADVAExtRowStatus, PeerUpgradeReadyCondition=PeerUpgradeReadyCondition, FileTransferServerType=FileTransferServerType, softwareVersion=softwareVersion, ntpBackupServerIpv6Addr=ntpBackupServerIpv6Addr, f3CallhomeServerObjects=f3CallhomeServerObjects, f3EndNeEventLogIndex=f3EndNeEventLogIndex, auditLog2fileEnabled=auditLog2fileEnabled, f3BulkTrap=f3BulkTrap, sysLogServerTable=sysLogServerTable, cmStateChangeTrap=cmStateChangeTrap, aclTable=aclTable, CmNtpMode=CmNtpMode, ntpPrimaryServerAuthKey=ntpPrimaryServerAuthKey, f3SysAuthKeyRowStatus=f3SysAuthKeyRowStatus, fileServicesPassword=fileServicesPassword, f3SystemLldpV2PortConfigADVAExtNotificationEnable=f3SystemLldpV2PortConfigADVAExtNotificationEnable, netconfOverSSHEnabled=netconfOverSSHEnabled, securityBanner=securityBanner, ntpPrimaryServerIpVersion=ntpPrimaryServerIpVersion, f3SystemInfoObjects=f3SystemInfoObjects, usbPortEnabled=usbPortEnabled, tftpEnabled=tftpEnabled, f3SnmpTargetAddrExtLifetime=f3SnmpTargetAddrExtLifetime, CmVersionType=CmVersionType, scpEnabled=scpEnabled, f3SimpleLtpServerIpv4Addr=f3SimpleLtpServerIpv4Addr, SysAuthKeyType=SysAuthKeyType, AffectedEntity=AffectedEntity, CmAclFilterAction=CmAclFilterAction, f3LldpV2RemExtEntry=f3LldpV2RemExtEntry, cmSystemMIB=cmSystemMIB, httpsEnabled=httpsEnabled, f3SystemLldpV2PortConfigADVAExtStorageType=f3SystemLldpV2PortConfigADVAExtStorageType, securityPromptEnabled=securityPromptEnabled, f3SystemBulkNotifications=f3SystemBulkNotifications, f3SystemBulkGroups=f3SystemBulkGroups, cmLogObjects=cmLogObjects, ntpServerRoundTripDelay=ntpServerRoundTripDelay, aclEntryNetworkAddress=aclEntryNetworkAddress, sftpEnabled=sftpEnabled, fileServicesServerType=fileServicesServerType, cliCmdPromptPrefix=cliCmdPromptPrefix, fileServicesStatus=fileServicesStatus, f3CallhomeClientIpAddress=f3CallhomeClientIpAddress, f3ConfigFileActionFileName=f3ConfigFileActionFileName, ntpServerConfigType=ntpServerConfigType, f3LldpMaxNeighborsAction=f3LldpMaxNeighborsAction, f3SnmpTargetAddrExtEntry=f3SnmpTargetAddrExtEntry, cmSysModeObjects=cmSysModeObjects, f3DatabaseSyncTrapObject=f3DatabaseSyncTrapObject, f3ConfigFileIndex=f3ConfigFileIndex, f3SystemLldpV2PortConfigADVAExtRowStatus=f3SystemLldpV2PortConfigADVAExtRowStatus, ntpBackupServerIpVersion=ntpBackupServerIpVersion, f3SnmpTargetAddrExtTable=f3SnmpTargetAddrExtTable, f3SystemLldpV2ManAddrConfigTxPortsADVAExtTable=f3SystemLldpV2ManAddrConfigTxPortsADVAExtTable, cmDatabaseObjects=cmDatabaseObjects, f3SystemLldpV2ManAddrConfigTxPortsADVAExtEntry=f3SystemLldpV2ManAddrConfigTxPortsADVAExtEntry, f3SysAuthKeyTable=f3SysAuthKeyTable, f3SystemFeatureIndex=f3SystemFeatureIndex, fileServicesDbFileName=fileServicesDbFileName, f3ConfigFileName=f3ConfigFileName, f3ConfigFilePassphrase=f3ConfigFilePassphrase, cmSystemCompliances=cmSystemCompliances, f3LldpV2RemoteSystemsData=f3LldpV2RemoteSystemsData, f3ConfigFileAction=f3ConfigFileAction, f3ConfigFileStatus=f3ConfigFileStatus, f3SystemLldpV2PortConfigADVAExtDestAddressIndex=f3SystemLldpV2PortConfigADVAExtDestAddressIndex, fileServicesServerIpv6Addr=fileServicesServerIpv6Addr, ftpEnabled=ftpEnabled, f3NtpAuthKeyType=f3NtpAuthKeyType, ntpBackupServerAuthKey=ntpBackupServerAuthKey, cmSecLogObjects=cmSecLogObjects, alarmLog2sysLogEnabled=alarmLog2sysLogEnabled, snmpIPv6UDPDomain=snmpIPv6UDPDomain, ntpSwitchServer=ntpSwitchServer, CmNtpServerType=CmNtpServerType, ntpBackupServer=ntpBackupServer, cmTimeObjects=cmTimeObjects, F3ConfigFileAction=F3ConfigFileAction, f3NtpAuthKeyStorageType=f3NtpAuthKeyStorageType, f3SimpleLtpControl=f3SimpleLtpControl, sysLogServerEntry=sysLogServerEntry, f3SystemLldpV2ManAddrConfigTxPortsADVAExtRefInterface=f3SystemLldpV2ManAddrConfigTxPortsADVAExtRefInterface, f3ConfigFileTable=f3ConfigFileTable, f3NtpAuthKey=f3NtpAuthKey, databaseActionPassphrase=databaseActionPassphrase, f3SysAuthKeyStorageType=f3SysAuthKeyStorageType, f3SnmpTargetAddrExtBulkTrapsEnabled=f3SnmpTargetAddrExtBulkTrapsEnabled, softwareAction=softwareAction, f3ZtpObjects=f3ZtpObjects, lastSetErrorInformation=lastSetErrorInformation, cmObjectCreationTrap=cmObjectCreationTrap, cmSoftwareObjects=cmSoftwareObjects, CmFileTransferMethod=CmFileTransferMethod, CmNtpType=CmNtpType, databaseVersion=databaseVersion, f3SnmpEngineID=f3SnmpEngineID, f3SystemObjectBulkGroup=f3SystemObjectBulkGroup, httpEnabled=httpEnabled, PeerUpgradeStatus=PeerUpgradeStatus, fileServicesMode=fileServicesMode, databaseAction=databaseAction, f3SystemLldpV2DestAddressADVAExtRowStatus=f3SystemLldpV2DestAddressADVAExtRowStatus, fileServicesSslKeyPairName=fileServicesSslKeyPairName, f3SysAuthenKeyObjects=f3SysAuthenKeyObjects, cmSystemNotifications=cmSystemNotifications, f3RawDataServerFtUserId=f3RawDataServerFtUserId, serialPortDisconnectAutoLogOff=serialPortDisconnectAutoLogOff, aclEntryIpVersion=aclEntryIpVersion, f3SysLastAbnormalResetTimestamp2=f3SysLastAbnormalResetTimestamp2, fileServicesCsrName=fileServicesCsrName, sysLogIpVersion=sysLogIpVersion, f3SysAuthKey=f3SysAuthKey, ntpActiveServer=ntpActiveServer, softwareAffectedEntity=softwareAffectedEntity, databaseIndex=databaseIndex, f3SimpleLtpSoftwareFileName=f3SimpleLtpSoftwareFileName, f3ConfigFileObjects=f3ConfigFileObjects, cmSystemObjectGroup=cmSystemObjectGroup, CmFileServicesStatus=CmFileServicesStatus, cmObjectDeletionTrap=cmObjectDeletionTrap, f3NtpAuthKeyRowStatus=f3NtpAuthKeyRowStatus, auditLog2sysLogEnabled=auditLog2sysLogEnabled, f3SystemLldpV2PortConfigADVAExtAdminStatus=f3SystemLldpV2PortConfigADVAExtAdminStatus, aclEntryNetworkMask=aclEntryNetworkMask, sshEnabled=sshEnabled, softwareEntry=softwareEntry, sysLogServerIndex=sysLogServerIndex, sysUseUtcLeapOffsetEnable=sysUseUtcLeapOffsetEnable, CallhomeState=CallhomeState, databaseLastSaveTime=databaseLastSaveTime, autoProvMode=autoProvMode, sysLogIpv6Addr=sysLogIpv6Addr, f3ConfigFilePercentComplete=f3ConfigFilePercentComplete, f3SystemFeatureEntry=f3SystemFeatureEntry, fileServicesAction=fileServicesAction, f3SystemLldpV2PortConfigADVAExtTLVsTxEnable=f3SystemLldpV2PortConfigADVAExtTLVsTxEnable, f3DatabaseSyncTrap=f3DatabaseSyncTrap, ntpPollingInterval=ntpPollingInterval, CmFileServicesMode=CmFileServicesMode, f3SystemLldpV2ManAddrConfigTxPortsADVAExtStorageType=f3SystemLldpV2ManAddrConfigTxPortsADVAExtStorageType, cmSystemConformance=cmSystemConformance, f3NtpAuthKeyTable=f3NtpAuthKeyTable, TimeOfDayType=TimeOfDayType, telnetEnabled=telnetEnabled, softwareValidationTimer=softwareValidationTimer, sysLogPort=sysLogPort, f3SnmpTargetAddrExtDyingGaspEnabled=f3SnmpTargetAddrExtDyingGaspEnabled, fileServicesDecryptionPassword=fileServicesDecryptionPassword, f3ConfigFileDescription=f3ConfigFileDescription, f3LldpV2RemExtTable=f3LldpV2RemExtTable, fileServicesMethod=fileServicesMethod, f3LldpV2RemTTL=f3LldpV2RemTTL, cmAlarmLogObjects=cmAlarmLogObjects, CmAutoProvMode=CmAutoProvMode, aclEntryPrefixLength=aclEntryPrefixLength, f3SysLastResetCauseType=f3SysLastResetCauseType, f3SimpleLtpUserName=f3SimpleLtpUserName, databaseType=databaseType, databaseEntry=databaseEntry, sysLogIpAddress=sysLogIpAddress, f3SysAuthKeyEntry=f3SysAuthKeyEntry, F3TargetAddressLifetime=F3TargetAddressLifetime, f3SnmpTargetAddrExtDyingGaspActive=f3SnmpTargetAddrExtDyingGaspActive, fileServicesAffectedEntity=fileServicesAffectedEntity, sysLogFacilityCode=sysLogFacilityCode, f3SystemFeatureTable=f3SystemFeatureTable, cmFeatureManagementObjects=cmFeatureManagementObjects, softwareType=softwareType, aclEntryNetworkIpv6Addr=aclEntryNetworkIpv6Addr, ntpPrimaryServer=ntpPrimaryServer, CmRestartCauseType=CmRestartCauseType, ntpMode=ntpMode, cmFileServicesObjects=cmFileServicesObjects, serialPortEnabled=serialPortEnabled, f3SysResetButtonControl=f3SysResetButtonControl, sysLogServerConfigType=sysLogServerConfigType, cmAccessProtocols=cmAccessProtocols, f3SystemLldpV2PortConfigADVAExtTable=f3SystemLldpV2PortConfigADVAExtTable, f3SystemLldpV2ADVAExtDestMacAddress=f3SystemLldpV2ADVAExtDestMacAddress, cmAttributeValueChangeTrap=cmAttributeValueChangeTrap, f3SystemNotifBulkGroup=f3SystemNotifBulkGroup, softwarePeerCondition=softwarePeerCondition, f3NtpAuthKeyNumber=f3NtpAuthKeyNumber)
mibBuilder.exportSymbols("CM-SYSTEM-MIB", f3SystemFeatureEnabled=f3SystemFeatureEnabled, f3RawDataServerFtProtocol=f3RawDataServerFtProtocol, cmSystemObjects=cmSystemObjects, ntpServerPrecision=ntpServerPrecision, ServerConfigType=ServerConfigType, databaseTable=databaseTable, PYSNMP_MODULE_ID=cmSystemMIB, softwareUpgradeTime=softwareUpgradeTime)
