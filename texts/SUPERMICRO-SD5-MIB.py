#
# PySNMP MIB module SUPERMICRO-SD5-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/supermicro/SUPERMICRO-SD5-MIB
# Produced by pysmi-1.1.12 at Tue May 28 13:42:06 2024
# On host fv-az973-743 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, NotificationType, Unsigned32, IpAddress, MibIdentifier, Counter64, TimeTicks, Gauge32, Bits, Integer32, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Unsigned32", "IpAddress", "MibIdentifier", "Counter64", "TimeTicks", "Gauge32", "Bits", "Integer32", "iso", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
smSSMInfo, = mibBuilder.importSymbols("SUPERMICRO-SMI", "smSSMInfo")
smSuperDoctor5MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 10876, 100, 1))
if mibBuilder.loadTexts: smSuperDoctor5MIB.setLastUpdated('201307020000Z')
if mibBuilder.loadTexts: smSuperDoctor5MIB.setOrganization('Super Micro Computer Inc.')
if mibBuilder.loadTexts: smSuperDoctor5MIB.setContactInfo('\tSoftware Dept.\n\n\t\tPostal: 980 Rock Avenue\n\t\t\tSan Jose, CA  95131\n\t\t\tUSA\n\n\t\t   Tel: +1 408 503 8000\n\n\t\tE-mail: SoftLab@supermicro.com')
if mibBuilder.loadTexts: smSuperDoctor5MIB.setDescription('MIB module for sd5 information')
sd5Table = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 1), )
if mibBuilder.loadTexts: sd5Table.setStatus('current')
if mibBuilder.loadTexts: sd5Table.setDescription('A table of sd5 entries.')
sd5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 1, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "sd5Idx"))
if mibBuilder.loadTexts: sd5Entry.setStatus('current')
if mibBuilder.loadTexts: sd5Entry.setDescription('An entry in the sd5 table. \n\t\tEntries cannot be created or deleted via SNMP operations.')
sd5Idx = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sd5Idx.setStatus('current')
if mibBuilder.loadTexts: sd5Idx.setDescription('The unique value identifies this sd5.')
sd5Version = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sd5Version.setStatus('current')
if mibBuilder.loadTexts: sd5Version.setDescription('The version of the sd5.')
sd5MIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sd5MIBVersion.setStatus('current')
if mibBuilder.loadTexts: sd5MIBVersion.setDescription('The MIB version of the sd5.')
cpuTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2), )
if mibBuilder.loadTexts: cpuTable.setStatus('current')
if mibBuilder.loadTexts: cpuTable.setDescription('A table of processor entries.')
cpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "cpuIndex"))
if mibBuilder.loadTexts: cpuEntry.setStatus('current')
if mibBuilder.loadTexts: cpuEntry.setDescription('An entry in the processor table. \n\t\tEntries cannot be created or deleted via SNMP operations.')
cpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndex.setStatus('current')
if mibBuilder.loadTexts: cpuIndex.setDescription('The unique value which identifies this processor.')
cpuName = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuName.setStatus('current')
if mibBuilder.loadTexts: cpuName.setDescription('The name of the processor.')
cpuDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuDescription.setStatus('current')
if mibBuilder.loadTexts: cpuDescription.setDescription('The description of the processor.')
cpuManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuManufacturer.setStatus('current')
if mibBuilder.loadTexts: cpuManufacturer.setDescription('The manufacturer of the processor.')
cpuDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: cpuDeviceStatus.setDescription('The status of the processor.\n\t\tThe status depends on the cpu failure check via BIOS.\n\t\t 0: OK\n\t\t 2: Critical\t\t\t')
cpuMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuMaxSpeed.setStatus('current')
if mibBuilder.loadTexts: cpuMaxSpeed.setDescription('The maximum speed (MHz) of the processor.')
cpuCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCurrentSpeed.setStatus('current')
if mibBuilder.loadTexts: cpuCurrentSpeed.setDescription('The current speed (MHz) of the processor.')
cpuLoadingPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoadingPercentage.setStatus('current')
if mibBuilder.loadTexts: cpuLoadingPercentage.setDescription('The loading percentage of the processor.')
cpuCoreEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCoreEnabled.setStatus('current')
if mibBuilder.loadTexts: cpuCoreEnabled.setDescription('The core enabled count of the processor.')
cpuCoreCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCoreCount.setStatus('current')
if mibBuilder.loadTexts: cpuCoreCount.setDescription('The core count of the processor.')
cpuThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuThreadCount.setStatus('current')
if mibBuilder.loadTexts: cpuThreadCount.setDescription('The thread count of the processor.')
cpuSocketDesignation = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuSocketDesignation.setStatus('current')
if mibBuilder.loadTexts: cpuSocketDesignation.setDescription('The socket designation of the processor.')
cpuDeviceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuDeviceVersion.setStatus('current')
if mibBuilder.loadTexts: cpuDeviceVersion.setDescription('The device version of the processor.')
cpuDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuDeviceID.setStatus('current')
if mibBuilder.loadTexts: cpuDeviceID.setDescription('The device ID of the processor.')
cpuID = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuID.setStatus('current')
if mibBuilder.loadTexts: cpuID.setDescription('The ID of the processor.')
memTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3), )
if mibBuilder.loadTexts: memTable.setStatus('current')
if mibBuilder.loadTexts: memTable.setDescription('A table of physical memory entries.')
memEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "memTag"))
if mibBuilder.loadTexts: memEntry.setStatus('current')
if mibBuilder.loadTexts: memEntry.setDescription('An entry in the physical memory table. \n\t\tEntries cannot be created or deleted via SNMP operations.')
memTag = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTag.setStatus('current')
if mibBuilder.loadTexts: memTag.setDescription('The tag of the physical memory. The unique value identifies this physical memory.')
memDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDescription.setStatus('current')
if mibBuilder.loadTexts: memDescription.setDescription('The description of the physical memory.')
memDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: memDeviceStatus.setDescription('Indicates the status of the physical memory. \n\t\tThe status depends on the ECC check result on the physical memory.\n\t\t 0: OK\n\t\t 2: Critical\t\t\t')
memLabeledBank = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memLabeledBank.setStatus('current')
if mibBuilder.loadTexts: memLabeledBank.setDescription('The labeled bank of the physical memory.')
memDeviceLocator = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDeviceLocator.setStatus('current')
if mibBuilder.loadTexts: memDeviceLocator.setDescription('The device locator of the physical memory.')
memModel = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModel.setStatus('current')
if mibBuilder.loadTexts: memModel.setDescription('The model name of the physical memory.')
memManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memManufacturer.setStatus('current')
if mibBuilder.loadTexts: memManufacturer.setDescription("The manufacturer's name of the physical memory.")
memPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memPartNumber.setStatus('current')
if mibBuilder.loadTexts: memPartNumber.setDescription('The part number of the physical memory.')
memSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSerialNumber.setStatus('current')
if mibBuilder.loadTexts: memSerialNumber.setDescription('The serial number of the physical memory.')
memCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memCapacity.setStatus('current')
if mibBuilder.loadTexts: memCapacity.setDescription('The capacity of the physical memory. (Unit: MB)')
memDataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDataWidth.setStatus('current')
if mibBuilder.loadTexts: memDataWidth.setDescription('The data width of the physical memory. (Unit: bit)')
memTotalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalWidth.setStatus('current')
if mibBuilder.loadTexts: memTotalWidth.setDescription('The total width of the physical memory. (Unit: bit)')
memErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memErrorCount.setStatus('current')
if mibBuilder.loadTexts: memErrorCount.setDescription("The error count of the physical memory. \n\t\tIt's the summary of the ECC error count and UECC error count.")
memECCErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memECCErrorCount.setStatus('current')
if mibBuilder.loadTexts: memECCErrorCount.setDescription('The ECC error count of the physical memory.')
memUECCErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memUECCErrorCount.setStatus('current')
if mibBuilder.loadTexts: memUECCErrorCount.setDescription('The UECC error count of the physical memory.')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4), )
if mibBuilder.loadTexts: diskTable.setStatus('current')
if mibBuilder.loadTexts: diskTable.setDescription('A table of physical disk entries.')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "diskName"))
if mibBuilder.loadTexts: diskEntry.setStatus('current')
if mibBuilder.loadTexts: diskEntry.setDescription('An entry in the physical disk table.\n\t\tEntries cannot be created or deleted via SNMP operations.')
diskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: diskSerialNumber.setDescription('The serial number of the disk.')
diskName = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskName.setStatus('current')
if mibBuilder.loadTexts: diskName.setDescription('The name of the disk. The unique value identifies this disk.')
diskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVendor.setStatus('current')
if mibBuilder.loadTexts: diskVendor.setDescription('The vendor name of the disk.')
diskSmartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSmartStatus.setStatus('current')
if mibBuilder.loadTexts: diskSmartStatus.setDescription('Indicates the status of the disk. \n\t\tThe status depends on the SMART check result on the disk.\n\t\t 0: OK\n\t\t 2: Critical\t\t\t')
diskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskModel.setStatus('current')
if mibBuilder.loadTexts: diskModel.setDescription('The model of the disk.')
diskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSize.setStatus('current')
if mibBuilder.loadTexts: diskSize.setDescription('The size of the disk. (Unit: MB)')
diskMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskMediaType.setStatus('current')
if mibBuilder.loadTexts: diskMediaType.setDescription('The media type of the disk includes\n\t\t External hard disk media\t\n\t\t Removable media other than floppy\n\t\t Fixed hard disk media and Unknown format')
diskInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskInterfaceType.setStatus('current')
if mibBuilder.loadTexts: diskInterfaceType.setDescription('The disk interface types includes IDE, HDC, USB, and SCSI.')
diskController = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskController.setStatus('current')
if mibBuilder.loadTexts: diskController.setDescription('The controller name of the disk.')
diskSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSlotID.setStatus('current')
if mibBuilder.loadTexts: diskSlotID.setDescription('The Slot ID of the disk.')
sysBIOSTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 5), )
if mibBuilder.loadTexts: sysBIOSTable.setStatus('current')
if mibBuilder.loadTexts: sysBIOSTable.setDescription('A table of System BIOS entries.')
sysBIOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 5, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "sysBIOSIndex"))
if mibBuilder.loadTexts: sysBIOSEntry.setStatus('current')
if mibBuilder.loadTexts: sysBIOSEntry.setDescription('An entry in the System BIOS table.\n\t\tEntries cannot be created or deleted via SNMP operations.')
sysBIOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBIOSIndex.setStatus('current')
if mibBuilder.loadTexts: sysBIOSIndex.setDescription('The unique value identifies this BIOS.')
sysBIOSReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBIOSReleaseDate.setStatus('current')
if mibBuilder.loadTexts: sysBIOSReleaseDate.setDescription('The release date of BIOS.')
sysBIOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBIOSVersion.setStatus('current')
if mibBuilder.loadTexts: sysBIOSVersion.setDescription('The version of BIOS.')
sysBIOSManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBIOSManufacturer.setStatus('current')
if mibBuilder.loadTexts: sysBIOSManufacturer.setDescription("The manufacturer's name of BIOS.")
mbTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6), )
if mibBuilder.loadTexts: mbTable.setStatus('current')
if mibBuilder.loadTexts: mbTable.setDescription('A table of baseboard entries.')
mbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "mbIndex"))
if mibBuilder.loadTexts: mbEntry.setStatus('current')
if mibBuilder.loadTexts: mbEntry.setDescription('An entry in the baseboard table.\n\t\tEntries cannot be created or deleted via SNMP operations.')
mbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbIndex.setStatus('current')
if mibBuilder.loadTexts: mbIndex.setDescription('The unique value identifies this baseboard.')
mbManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbManufacturer.setStatus('current')
if mibBuilder.loadTexts: mbManufacturer.setDescription("The manufacturer's name of the baseboard.")
mbProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbProductName.setStatus('current')
if mibBuilder.loadTexts: mbProductName.setDescription('The product name of the baseboard.')
mbVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbVersionName.setStatus('current')
if mibBuilder.loadTexts: mbVersionName.setDescription('The version of the baseboard.')
mbAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbAssetTag.setStatus('current')
if mibBuilder.loadTexts: mbAssetTag.setDescription('The asset tag of the baseboard.')
mbSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbSerialNumber.setStatus('current')
if mibBuilder.loadTexts: mbSerialNumber.setDescription('The serial number of the baseboard.')
osTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7), )
if mibBuilder.loadTexts: osTable.setStatus('current')
if mibBuilder.loadTexts: osTable.setDescription('A table of operation system entries.')
osEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "osIndex"))
if mibBuilder.loadTexts: osEntry.setStatus('current')
if mibBuilder.loadTexts: osEntry.setDescription('An entry in the operation system table.\n\t\tEntries cannot be created or deleted via SNMP operations.')
osIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osIndex.setStatus('current')
if mibBuilder.loadTexts: osIndex.setDescription('The unique value identifies this Operation System.')
osName = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osName.setStatus('current')
if mibBuilder.loadTexts: osName.setDescription('The name of the Operation System.')
osVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osVersion.setStatus('current')
if mibBuilder.loadTexts: osVersion.setDescription('The version of the operation system.')
osManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osManufacturer.setStatus('current')
if mibBuilder.loadTexts: osManufacturer.setDescription("The manufacturer's name of the Operation System.")
osSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSerialNumber.setStatus('current')
if mibBuilder.loadTexts: osSerialNumber.setDescription('The serial number of the operation system.')
osCSDVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osCSDVersion.setStatus('current')
if mibBuilder.loadTexts: osCSDVersion.setDescription('The CSD version of the operation system.')
dmiLogTable = MibIdentifier((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8))
ceccLogTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 1), )
if mibBuilder.loadTexts: ceccLogTable.setStatus('current')
if mibBuilder.loadTexts: ceccLogTable.setDescription('A table of operation system entries.')
ceccLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 1, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "ceccLogIndex"))
if mibBuilder.loadTexts: ceccLogEntry.setStatus('current')
if mibBuilder.loadTexts: ceccLogEntry.setDescription('An entry in the operation system table.\n\t\tEntries cannot be created or deleted via SNMP operations.')
ceccLogDatetime = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceccLogDatetime.setStatus('current')
if mibBuilder.loadTexts: ceccLogDatetime.setDescription('The CSD version of the operation system.')
ceccLogInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceccLogInfo.setStatus('current')
if mibBuilder.loadTexts: ceccLogInfo.setDescription('The CSD version of the operation system.')
ceccLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceccLogIndex.setStatus('current')
if mibBuilder.loadTexts: ceccLogIndex.setDescription('The CSD version of the operation system.')
ueccLogTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 2), )
if mibBuilder.loadTexts: ueccLogTable.setStatus('current')
if mibBuilder.loadTexts: ueccLogTable.setDescription('A table of operation system entries.')
ueccLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 2, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "ceccLogIndex"))
if mibBuilder.loadTexts: ueccLogEntry.setStatus('current')
if mibBuilder.loadTexts: ueccLogEntry.setDescription('An entry in the operation system table.\n\t\tEntries cannot be created or deleted via SNMP operations.')
ueccLogDatetime = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueccLogDatetime.setStatus('current')
if mibBuilder.loadTexts: ueccLogDatetime.setDescription('The CSD version of the operation system.')
ueccLogInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueccLogInfo.setStatus('current')
if mibBuilder.loadTexts: ueccLogInfo.setDescription('The CSD version of the operation system.')
ueccLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueccLogIndex.setStatus('current')
if mibBuilder.loadTexts: ueccLogIndex.setDescription('The CSD version of the operation system.')
postLogTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 8), )
if mibBuilder.loadTexts: postLogTable.setStatus('current')
if mibBuilder.loadTexts: postLogTable.setDescription('A table of operation system entries.')
postLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 8, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "postLogIndex"))
if mibBuilder.loadTexts: postLogEntry.setStatus('current')
if mibBuilder.loadTexts: postLogEntry.setDescription('An entry in the operation system table.\n\t\tEntries cannot be created or deleted via SNMP operations.')
postLogDatetime = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogDatetime.setStatus('current')
if mibBuilder.loadTexts: postLogDatetime.setDescription('The CSD version of the operation system.')
postLogInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogInfo.setStatus('current')
if mibBuilder.loadTexts: postLogInfo.setDescription('The CSD version of the operation system.')
postLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogIndex.setStatus('current')
if mibBuilder.loadTexts: postLogIndex.setDescription('The CSD version of the operation system.')
cpuLogTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 11), )
if mibBuilder.loadTexts: cpuLogTable.setStatus('current')
if mibBuilder.loadTexts: cpuLogTable.setDescription('A table of operation system entries.')
cpuLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 11, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "cpuLogIndex"))
if mibBuilder.loadTexts: cpuLogEntry.setStatus('current')
if mibBuilder.loadTexts: cpuLogEntry.setDescription('An entry in the operation system table.\n\t\tEntries cannot be created or deleted via SNMP operations.')
cpuLogDatetime = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLogDatetime.setStatus('current')
if mibBuilder.loadTexts: cpuLogDatetime.setDescription('The CSD version of the operation system.')
cpuLogInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLogInfo.setStatus('current')
if mibBuilder.loadTexts: cpuLogInfo.setDescription('The CSD version of the operation system.')
cpuLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLogIndex.setStatus('current')
if mibBuilder.loadTexts: cpuLogIndex.setDescription('The CSD version of the operation system.')
raidAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9), )
if mibBuilder.loadTexts: raidAdapterTable.setStatus('current')
if mibBuilder.loadTexts: raidAdapterTable.setDescription('A table of raid controller entries.')
raidAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "raidAdapterIndex"))
if mibBuilder.loadTexts: raidAdapterEntry.setStatus('current')
if mibBuilder.loadTexts: raidAdapterEntry.setDescription('An entry in the raid controller table. \n\t\tEntries cannot be created or deleted via SNMP operations.')
raidAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterIndex.setStatus('current')
if mibBuilder.loadTexts: raidAdapterIndex.setDescription('Raid controller index. The unique value which identifies this raid controller.')
raidAdapterGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterGroup.setStatus('current')
if mibBuilder.loadTexts: raidAdapterGroup.setDescription('The group of the raid controller. Values: \n\t\tLSI-MegaRAID\n\t\tLSI-Fusion-MPT\n\t\t')
raidAdapterId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterId.setStatus('current')
if mibBuilder.loadTexts: raidAdapterId.setDescription('The id of the raid controller. The id is unique in one adapter group.')
raidAdapterProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterProductName.setStatus('current')
if mibBuilder.loadTexts: raidAdapterProductName.setDescription('The product name of the raid controller.')
raidAdapterSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterSerialNumber.setStatus('current')
if mibBuilder.loadTexts: raidAdapterSerialNumber.setDescription('The serial number of the raid controller.')
raidAdapterFWPackageBuild = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterFWPackageBuild.setStatus('current')
if mibBuilder.loadTexts: raidAdapterFWPackageBuild.setDescription('The build number of the firmware package of the raid controller.')
raidAdapterFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterFWVersion.setStatus('current')
if mibBuilder.loadTexts: raidAdapterFWVersion.setDescription('The firmware version of the raid controller.')
raidAdapterBIOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterBIOSVersion.setStatus('current')
if mibBuilder.loadTexts: raidAdapterBIOSVersion.setDescription('The bios version of the raid controller.')
raidAdapterVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterVendorId.setStatus('current')
if mibBuilder.loadTexts: raidAdapterVendorId.setDescription('The PCI vendor id of the raid controller.')
raidAdapterDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterDeviceId.setStatus('current')
if mibBuilder.loadTexts: raidAdapterDeviceId.setDescription('The PCI device id of the raid controller.')
raidAdapterSubVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterSubVendorId.setStatus('current')
if mibBuilder.loadTexts: raidAdapterSubVendorId.setDescription('The PCI sub-vendor id of the raid controller.')
raidAdapterSubDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterSubDeviceId.setStatus('current')
if mibBuilder.loadTexts: raidAdapterSubDeviceId.setDescription('The PCI sub-device id of the raid controller.')
raidIsBBUAbsent = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidIsBBUAbsent.setStatus('current')
if mibBuilder.loadTexts: raidIsBBUAbsent.setDescription('Is the BBU absent or present? \n\t\tValues: Absent, Present.')
raidIsBBUAbsentIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidIsBBUAbsentIgnored.setStatus('current')
if mibBuilder.loadTexts: raidIsBBUAbsentIgnored.setDescription('Does the raid controller ignore the absent BBU? \n\t\tValues: YES, NO. \n\t\tIf the value is No then the absent BBU will affect the all-in-one status of the raid controller.')
raidAdapterAllinoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterAllinoneStatus.setStatus('current')
if mibBuilder.loadTexts: raidAdapterAllinoneStatus.setDescription('Indicates the status of the raid controller. Values:\n\t\t 0: OK\n\t\t 1: Warning\n\t\t 2: Critical\t\t\t\n\t\t')
raidAdapterAllinoneMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterAllinoneMsg.setStatus('current')
if mibBuilder.loadTexts: raidAdapterAllinoneMsg.setDescription('The status message of the raid controller.')
raidBBUTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10), )
if mibBuilder.loadTexts: raidBBUTable.setStatus('current')
if mibBuilder.loadTexts: raidBBUTable.setDescription('A table of raid BBU entries.')
raidBBUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "raidBBUIndex"))
if mibBuilder.loadTexts: raidBBUEntry.setStatus('current')
if mibBuilder.loadTexts: raidBBUEntry.setDescription('An entry in the raid BBU table. \n\t\tEntries cannot be created or deleted via SNMP operations.')
raidBBUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidBBUIndex.setStatus('current')
if mibBuilder.loadTexts: raidBBUIndex.setDescription('Raid BBU index. \n\t\tThe unique value which identifies this raid BBU.')
raidAdapterGroup_BBU = MibScalar((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10, 1, 2), DisplayString()).setLabel("raidAdapterGroup-BBU").setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterGroup_BBU.setStatus('current')
if mibBuilder.loadTexts: raidAdapterGroup_BBU.setDescription('The group of the raid controller. Values: \n\t\tLSI-MegaRAID\n\t\tLSI-Fusion-MPT\n\t\t')
raidAdapterId_BBU = MibScalar((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10, 1, 3), DisplayString()).setLabel("raidAdapterId-BBU").setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterId_BBU.setStatus('current')
if mibBuilder.loadTexts: raidAdapterId_BBU.setDescription('The id of the raid controller. The id is unique in one adapter group.')
raidBBUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidBBUStatus.setStatus('current')
if mibBuilder.loadTexts: raidBBUStatus.setDescription('Indicates the status of the properties of the BBU. \n\t\tValues: Passed, Failed.')
raidBBUAllinoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidBBUAllinoneStatus.setStatus('current')
if mibBuilder.loadTexts: raidBBUAllinoneStatus.setDescription('Indicates the status of the BBU. Values:\n\t\t 0: OK\n\t\t 1: Warning\n\t\t 2: Critical\t\t\t\n\t\t')
raidBBUAllinoneMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidBBUAllinoneMsg.setStatus('current')
if mibBuilder.loadTexts: raidBBUAllinoneMsg.setDescription('The status message of the BBU.')
raidVDTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11), )
if mibBuilder.loadTexts: raidVDTable.setStatus('current')
if mibBuilder.loadTexts: raidVDTable.setDescription('A table of virtual drive entries.')
raidVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "raidVDIndex"))
if mibBuilder.loadTexts: raidVDEntry.setStatus('current')
if mibBuilder.loadTexts: raidVDEntry.setDescription('An entry in the virtual drive table. \n\t\tEntries cannot be created or deleted via SNMP operations.')
raidVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDIndex.setStatus('current')
if mibBuilder.loadTexts: raidVDIndex.setDescription('Raid virtual drive index. \n\t\tThe unique value which identifies this raid virtual drive.')
raidAdapterGroup_VD = MibScalar((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 2), DisplayString()).setLabel("raidAdapterGroup-VD").setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterGroup_VD.setStatus('current')
if mibBuilder.loadTexts: raidAdapterGroup_VD.setDescription('The group of the raid controller. Values: \n\t\tLSI-MegaRAID\n\t\tLSI-Fusion-MPT\n\t\t')
raidAdapterId_VD = MibScalar((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 3), DisplayString()).setLabel("raidAdapterId-VD").setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterId_VD.setStatus('current')
if mibBuilder.loadTexts: raidAdapterId_VD.setDescription('The id of the raid controller. The id is unique in one adapter group.')
raidDiskGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskGroupId.setStatus('current')
if mibBuilder.loadTexts: raidDiskGroupId.setDescription('The disk group id of the virtual drive.')
raidVDId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDId.setStatus('current')
if mibBuilder.loadTexts: raidVDId.setDescription('The id of the virtual drive.')
raidVDTargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDTargetId.setStatus('current')
if mibBuilder.loadTexts: raidVDTargetId.setDescription('The target id of the virtual drive.')
raidVDName = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDName.setStatus('current')
if mibBuilder.loadTexts: raidVDName.setDescription('The name of the virtual drive.')
raidVDRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDRaidLevel.setStatus('current')
if mibBuilder.loadTexts: raidVDRaidLevel.setDescription('The raid level of the virtual drive.')
raidVDSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDSize.setStatus('current')
if mibBuilder.loadTexts: raidVDSize.setDescription('The size of the virtual drive.')
raidVDMirrorDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDMirrorDataSize.setStatus('current')
if mibBuilder.loadTexts: raidVDMirrorDataSize.setDescription('The mirror data size of the virtual drive.')
raidVDStripSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDStripSize.setStatus('current')
if mibBuilder.loadTexts: raidVDStripSize.setDescription('The stripe size of the virtual drive.')
raidVDNumDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDNumDrives.setStatus('current')
if mibBuilder.loadTexts: raidVDNumDrives.setDescription('The number of physical drives of the virtual drive.')
raidVDSpanDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDSpanDepth.setStatus('current')
if mibBuilder.loadTexts: raidVDSpanDepth.setDescription('The span depth of the virtual drive.')
raidVDDefaultCachePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDDefaultCachePolicy.setStatus('current')
if mibBuilder.loadTexts: raidVDDefaultCachePolicy.setDescription('The default cache policy of the virtual drive.')
raidVDCurrentCachePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDCurrentCachePolicy.setStatus('current')
if mibBuilder.loadTexts: raidVDCurrentCachePolicy.setDescription('The current cache policy of the virtual drive.')
raidVDDefaultAccessPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDDefaultAccessPolicy.setStatus('current')
if mibBuilder.loadTexts: raidVDDefaultAccessPolicy.setDescription('The default access policy of the virtual drive.')
raidVDCurrentAccessPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDCurrentAccessPolicy.setStatus('current')
if mibBuilder.loadTexts: raidVDCurrentAccessPolicy.setDescription('The current access policy of the virtual drive.')
raidVDDiskCachePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDDiskCachePolicy.setStatus('current')
if mibBuilder.loadTexts: raidVDDiskCachePolicy.setDescription('The disk cache policy of the virtual drive.')
raidVDEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDEncryptionType.setStatus('current')
if mibBuilder.loadTexts: raidVDEncryptionType.setDescription('The encryption type of the virtual drive.')
raidVDDefaultPSPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDDefaultPSPolicy.setStatus('current')
if mibBuilder.loadTexts: raidVDDefaultPSPolicy.setDescription('The default power savings policy of the virtual drive.')
raidVDCurrentPSPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDCurrentPSPolicy.setStatus('current')
if mibBuilder.loadTexts: raidVDCurrentPSPolicy.setDescription('The default current savings policy of the virtual drive.')
raidVDCanSpinUpIn1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDCanSpinUpIn1Min.setStatus('current')
if mibBuilder.loadTexts: raidVDCanSpinUpIn1Min.setDescription('Can the physical drive spin up in 1 minute?')
raidVDSupportT10Power = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDSupportT10Power.setStatus('current')
if mibBuilder.loadTexts: raidVDSupportT10Power.setDescription('Does the VD have drives that support T10 power conditions?')
raidVDSupportsMaxPS = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDSupportsMaxPS.setStatus('current')
if mibBuilder.loadTexts: raidVDSupportsMaxPS.setDescription("Does the VD's IO profile supports MAX power savings with cached writes?")
raidVDBadBlocksExist = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDBadBlocksExist.setStatus('current')
if mibBuilder.loadTexts: raidVDBadBlocksExist.setDescription('Does the virtual drive have bad blocks?')
raidVDCached = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDCached.setStatus('current')
if mibBuilder.loadTexts: raidVDCached.setDescription('Is the virtual drive cached?')
raidVDState = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDState.setStatus('current')
if mibBuilder.loadTexts: raidVDState.setDescription('The state of the virtual drive. Values:\n\t\tOffline, Partially-degraded, Degraded, Optimal.\n\t\t')
raidVDAllinoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDAllinoneStatus.setStatus('current')
if mibBuilder.loadTexts: raidVDAllinoneStatus.setDescription('Indicates the status of the virtual drive. Values: \n\t\t0: OK\n\t\t1: Warning\n\t\t2: Critical\n\t\t')
raidVDAllinoneMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDAllinoneMsg.setStatus('current')
if mibBuilder.loadTexts: raidVDAllinoneMsg.setDescription('The status message of the virtual drive.')
raidPDTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12), )
if mibBuilder.loadTexts: raidPDTable.setStatus('current')
if mibBuilder.loadTexts: raidPDTable.setDescription('A table of physical drive entries.')
raidPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "raidPDIndex"))
if mibBuilder.loadTexts: raidPDEntry.setStatus('current')
if mibBuilder.loadTexts: raidPDEntry.setDescription('An entry in the physical drive table.\n\t\tEntries cannot be created or deleted via SNMP operations.')
raidPDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDIndex.setStatus('current')
if mibBuilder.loadTexts: raidPDIndex.setDescription('Raid physical drive index. \n\t\tThe unique value which identifies this raid physical drive.')
raidAdapterGroup_PD = MibScalar((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 2), DisplayString()).setLabel("raidAdapterGroup-PD").setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterGroup_PD.setStatus('current')
if mibBuilder.loadTexts: raidAdapterGroup_PD.setDescription('The group of the raid controller. Values: \n\t\tLSI-MegaRAID\n\t\tLSI-Fusion-MPT\n\t\t')
raidAdapterId_PD = MibScalar((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 3), DisplayString()).setLabel("raidAdapterId-PD").setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterId_PD.setStatus('current')
if mibBuilder.loadTexts: raidAdapterId_PD.setDescription('The id of the raid controller. The id is unique in one adapter group.')
raidDiskGroupId_PD = MibScalar((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 4), DisplayString()).setLabel("raidDiskGroupId-PD").setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskGroupId_PD.setStatus('current')
if mibBuilder.loadTexts: raidDiskGroupId_PD.setDescription('The disk group id of the virtual drive.')
raidPDSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDSlotNumber.setStatus('current')
if mibBuilder.loadTexts: raidPDSlotNumber.setDescription('The slot number of the physical drive.')
raidPDFirmwareState = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDFirmwareState.setStatus('current')
if mibBuilder.loadTexts: raidPDFirmwareState.setDescription('The firmware state of the physical drive. Values: \n\t\tunconfigured-good, unconfigured-bad, hot-spare, offline, failed, rebuild, online, and copyback')
raidPDMediaErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDMediaErrorCount.setStatus('current')
if mibBuilder.loadTexts: raidPDMediaErrorCount.setDescription('The media error count of the physical drive.')
raidPDOtherErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDOtherErrorCount.setStatus('current')
if mibBuilder.loadTexts: raidPDOtherErrorCount.setDescription('The other error count of the physical drive.')
raidPDPredFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDPredFailCount.setStatus('current')
if mibBuilder.loadTexts: raidPDPredFailCount.setDescription('The predictive failure count of the physical drive.')
raidPDLastPredFailEventSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDLastPredFailEventSeqNo.setStatus('current')
if mibBuilder.loadTexts: raidPDLastPredFailEventSeqNo.setDescription('The last predictive failure event sequence number of the physical drive.')
raidPDRawSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDRawSize.setStatus('current')
if mibBuilder.loadTexts: raidPDRawSize.setDescription('The raw size of the physical drive.')
raidPDDeviceFwLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDDeviceFwLevel.setStatus('current')
if mibBuilder.loadTexts: raidPDDeviceFwLevel.setDescription('The device firmware level of the physical drive.')
raidPDInquiryData = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDInquiryData.setStatus('current')
if mibBuilder.loadTexts: raidPDInquiryData.setDescription('The inquiry data of the physical drive.')
raidPDDeviceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDDeviceSpeed.setStatus('current')
if mibBuilder.loadTexts: raidPDDeviceSpeed.setDescription('The device speed of the physical drive.')
raidPDLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: raidPDLinkSpeed.setDescription('The link speed of the physical drive.')
raidPDMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDMediaType.setStatus('current')
if mibBuilder.loadTexts: raidPDMediaType.setDescription('The media type of the physical drive.')
raidPDWriteCache = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDWriteCache.setStatus('current')
if mibBuilder.loadTexts: raidPDWriteCache.setDescription('The write cache of the physical drive.')
raidPDNCQSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDNCQSetting.setStatus('current')
if mibBuilder.loadTexts: raidPDNCQSetting.setDescription('The NCQ setting of the physical drive.')
raidPDPort0Linkspeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDPort0Linkspeed.setStatus('current')
if mibBuilder.loadTexts: raidPDPort0Linkspeed.setDescription('The link speed of port 0 of the physical drive.')
raidPDPort0Status = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDPort0Status.setStatus('current')
if mibBuilder.loadTexts: raidPDPort0Status.setDescription('The status of port 0 of the physical drive.')
raidPDPort1Linkspeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDPort1Linkspeed.setStatus('current')
if mibBuilder.loadTexts: raidPDPort1Linkspeed.setDescription('The link speed of port 1 of the physical drive.')
raidPDPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDPort1Status.setStatus('current')
if mibBuilder.loadTexts: raidPDPort1Status.setDescription('The status of port 1 of the physical drive.')
raidPDEnclosureDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDEnclosureDeviceID.setStatus('current')
if mibBuilder.loadTexts: raidPDEnclosureDeviceID.setDescription('The enclosure id of the physical drive.')
raidPDOpProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDOpProgress.setStatus('current')
if mibBuilder.loadTexts: raidPDOpProgress.setDescription('The operation progress of the physical drive.')
raidPDSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDSpan.setStatus('current')
if mibBuilder.loadTexts: raidPDSpan.setDescription('The span of the physical drive.')
raidPDAllinoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDAllinoneStatus.setStatus('current')
if mibBuilder.loadTexts: raidPDAllinoneStatus.setDescription('Indicates the status of the physical drive. Values: \n\t\t0: OK\n\t\t1: Warning\n\t\t2: Critical\n\t\t')
raidPDAllinoneMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDAllinoneMsg.setStatus('current')
if mibBuilder.loadTexts: raidPDAllinoneMsg.setDescription('The status message of the physical drive.')
raidPDModel = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDModel.setStatus('current')
if mibBuilder.loadTexts: raidPDModel.setDescription('The model of the physical drive.')
raidPDSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDSerialNumber.setStatus('current')
if mibBuilder.loadTexts: raidPDSerialNumber.setDescription('The serial number of the physical drive.')
raidPDFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: raidPDFirmwareRevision.setDescription('The firmware revision of the physical drive.')
smSD5TrapMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 10876, 100, 3))
trapFanNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,101))
if mibBuilder.loadTexts: trapFanNormal.setDescription('Fan Speed has returned to Normal')
trapFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,102))
if mibBuilder.loadTexts: trapFanWarning.setDescription('Fan Speed is Warning')
trapFanCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,103))
if mibBuilder.loadTexts: trapFanCritical.setDescription('Fan Speed is Critical')
trapVoltageNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,201))
if mibBuilder.loadTexts: trapVoltageNormal.setDescription('Voltage has returned to Normal')
trapVoltageWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,202))
if mibBuilder.loadTexts: trapVoltageWarning.setDescription('Voltage is Warning')
trapVoltageCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,203))
if mibBuilder.loadTexts: trapVoltageCritical.setDescription('Voltage is Critical')
trapTemperatureNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,301))
if mibBuilder.loadTexts: trapTemperatureNormal.setDescription('Temperature has returned to Normal')
trapTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,302))
if mibBuilder.loadTexts: trapTemperatureWarning.setDescription('Temperature is Warning')
trapTemperatureCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,303))
if mibBuilder.loadTexts: trapTemperatureCritical.setDescription('Temperature is Critical')
trapChassisIntrusionCleared = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,401))
if mibBuilder.loadTexts: trapChassisIntrusionCleared.setDescription('Chassis Intrusion has cleared')
trapChassisIntrusion = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,403))
if mibBuilder.loadTexts: trapChassisIntrusion.setDescription('Chassis Intrusion has triggered')
trapStorageSMARTCheckNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,601))
if mibBuilder.loadTexts: trapStorageSMARTCheckNormal.setDescription('Storage SMART Check has returned to Normal')
trapStorageSMARTCheckWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,602))
if mibBuilder.loadTexts: trapStorageSMARTCheckWarning.setDescription('Storage SMART Check is Warning')
trapStorageSMARTCheckCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,603))
if mibBuilder.loadTexts: trapStorageSMARTCheckCritical.setDescription('Storage SMART Check is Critical')
trapPowerSupplyNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,701))
if mibBuilder.loadTexts: trapPowerSupplyNormal.setDescription('Power Supply has returned to Normal')
trapPowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,702))
if mibBuilder.loadTexts: trapPowerSupplyWarning.setDescription('Power Supply is Warning')
trapPowerSupplyCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,703))
if mibBuilder.loadTexts: trapPowerSupplyCritical.setDescription('Power Supply is Critical')
trapMemoryCeccNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,801))
if mibBuilder.loadTexts: trapMemoryCeccNormal.setDescription('Memory CECC has returned to Normal')
trapMemoryCeccWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,802))
if mibBuilder.loadTexts: trapMemoryCeccWarning.setDescription('Memory CECC is Warning')
trapMemoryCeccCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,803))
if mibBuilder.loadTexts: trapMemoryCeccCritical.setDescription('Memory CECC is Critical')
trapMemoryUeccNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,901))
if mibBuilder.loadTexts: trapMemoryUeccNormal.setDescription('Memory UECC has returned to Normal')
trapMemoryUeccWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,902))
if mibBuilder.loadTexts: trapMemoryUeccWarning.setDescription('Memory UECC is Warning')
trapMemoryUeccCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,903))
if mibBuilder.loadTexts: trapMemoryUeccCritical.setDescription('Memory UECC Critical')
trapGenericNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1001))
if mibBuilder.loadTexts: trapGenericNormal.setDescription('Monitored item has returned to Normal')
trapGenericWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1002))
if mibBuilder.loadTexts: trapGenericWarning.setDescription('Monitored item is Warning')
trapGenericCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1003))
if mibBuilder.loadTexts: trapGenericCritical.setDescription('Monitored item Critical')
trapBbpStatusNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1101))
if mibBuilder.loadTexts: trapBbpStatusNormal.setDescription('BBP has returned to Normal')
trapBbpStatusWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1102))
if mibBuilder.loadTexts: trapBbpStatusWarning.setDescription('BBP is Warning')
trapBbpStatusCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1103))
if mibBuilder.loadTexts: trapBbpStatusCritical.setDescription('BBP is Critical')
trapCpuFaultNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1201))
if mibBuilder.loadTexts: trapCpuFaultNormal.setDescription('Processor Fault has returned to Normal')
trapCpuFaultWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1202))
if mibBuilder.loadTexts: trapCpuFaultWarning.setDescription('Processor Fault is Warning')
trapCpuFaultCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1203))
if mibBuilder.loadTexts: trapCpuFaultCritical.setDescription('Processor Fault is Critical')
trapStorageAdapterStatusNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1301))
if mibBuilder.loadTexts: trapStorageAdapterStatusNormal.setDescription('Storage Adapter has returned to Normal')
trapStorageAdapterStatusWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1302))
if mibBuilder.loadTexts: trapStorageAdapterStatusWarning.setDescription('Storage Adapter is Warning')
trapStorageAdapterStatusCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1303))
if mibBuilder.loadTexts: trapStorageAdapterStatusCritical.setDescription('Storage Adapter is Critical')
trapBatteryStatusNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1401))
if mibBuilder.loadTexts: trapBatteryStatusNormal.setDescription('Battery has returned to Normal')
trapBatteryStatusWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1402))
if mibBuilder.loadTexts: trapBatteryStatusWarning.setDescription('Battery is Warning')
trapBatteryStatusCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1403))
if mibBuilder.loadTexts: trapBatteryStatusCritical.setDescription('Battery is Critical')
mibBuilder.exportSymbols("SUPERMICRO-SD5-MIB", ceccLogEntry=ceccLogEntry, raidPDFirmwareRevision=raidPDFirmwareRevision, osIndex=osIndex, ceccLogInfo=ceccLogInfo, postLogInfo=postLogInfo, raidVDDefaultCachePolicy=raidVDDefaultCachePolicy, trapBbpStatusWarning=trapBbpStatusWarning, diskMediaType=diskMediaType, raidPDPort1Linkspeed=raidPDPort1Linkspeed, memDescription=memDescription, memDeviceLocator=memDeviceLocator, raidVDDefaultAccessPolicy=raidVDDefaultAccessPolicy, raidVDStripSize=raidVDStripSize, raidBBUTable=raidBBUTable, raidVDCurrentAccessPolicy=raidVDCurrentAccessPolicy, osCSDVersion=osCSDVersion, raidPDOtherErrorCount=raidPDOtherErrorCount, raidBBUIndex=raidBBUIndex, raidVDName=raidVDName, raidPDOpProgress=raidPDOpProgress, raidVDSize=raidVDSize, cpuThreadCount=cpuThreadCount, raidPDLinkSpeed=raidPDLinkSpeed, trapBbpStatusCritical=trapBbpStatusCritical, trapMemoryCeccWarning=trapMemoryCeccWarning, raidVDMirrorDataSize=raidVDMirrorDataSize, raidPDMediaErrorCount=raidPDMediaErrorCount, raidDiskGroupId=raidDiskGroupId, smSuperDoctor5MIB=smSuperDoctor5MIB, osName=osName, raidAdapterId_VD=raidAdapterId_VD, raidPDSlotNumber=raidPDSlotNumber, raidBBUEntry=raidBBUEntry, trapPowerSupplyNormal=trapPowerSupplyNormal, raidVDCurrentCachePolicy=raidVDCurrentCachePolicy, raidVDSupportT10Power=raidVDSupportT10Power, raidVDAllinoneMsg=raidVDAllinoneMsg, trapStorageAdapterStatusNormal=trapStorageAdapterStatusNormal, diskTable=diskTable, mbVersionName=mbVersionName, mbEntry=mbEntry, memDataWidth=memDataWidth, raidVDDiskCachePolicy=raidVDDiskCachePolicy, raidPDRawSize=raidPDRawSize, memECCErrorCount=memECCErrorCount, trapPowerSupplyCritical=trapPowerSupplyCritical, PYSNMP_MODULE_ID=smSuperDoctor5MIB, raidAdapterTable=raidAdapterTable, raidVDEntry=raidVDEntry, raidAdapterGroup_VD=raidAdapterGroup_VD, memEntry=memEntry, ueccLogDatetime=ueccLogDatetime, osVersion=osVersion, ueccLogInfo=ueccLogInfo, trapGenericWarning=trapGenericWarning, cpuDeviceStatus=cpuDeviceStatus, ueccLogEntry=ueccLogEntry, raidPDDeviceFwLevel=raidPDDeviceFwLevel, diskSlotID=diskSlotID, osManufacturer=osManufacturer, raidVDBadBlocksExist=raidVDBadBlocksExist, memModel=memModel, raidPDNCQSetting=raidPDNCQSetting, memLabeledBank=memLabeledBank, sysBIOSReleaseDate=sysBIOSReleaseDate, cpuEntry=cpuEntry, raidAdapterVendorId=raidAdapterVendorId, raidVDNumDrives=raidVDNumDrives, diskSize=diskSize, raidDiskGroupId_PD=raidDiskGroupId_PD, raidPDAllinoneStatus=raidPDAllinoneStatus, trapGenericNormal=trapGenericNormal, trapVoltageNormal=trapVoltageNormal, memDeviceStatus=memDeviceStatus, raidPDPort0Linkspeed=raidPDPort0Linkspeed, raidAdapterBIOSVersion=raidAdapterBIOSVersion, trapBbpStatusNormal=trapBbpStatusNormal, raidAdapterGroup_PD=raidAdapterGroup_PD, cpuCoreEnabled=cpuCoreEnabled, raidIsBBUAbsent=raidIsBBUAbsent, trapFanNormal=trapFanNormal, raidPDEntry=raidPDEntry, trapPowerSupplyWarning=trapPowerSupplyWarning, cpuLogDatetime=cpuLogDatetime, osSerialNumber=osSerialNumber, raidAdapterFWVersion=raidAdapterFWVersion, trapMemoryCeccNormal=trapMemoryCeccNormal, mbTable=mbTable, raidPDPort0Status=raidPDPort0Status, cpuLogInfo=cpuLogInfo, raidVDCached=raidVDCached, raidAdapterDeviceId=raidAdapterDeviceId, trapBatteryStatusCritical=trapBatteryStatusCritical, cpuIndex=cpuIndex, raidPDTable=raidPDTable, trapCpuFaultWarning=trapCpuFaultWarning, ueccLogTable=ueccLogTable, raidPDEnclosureDeviceID=raidPDEnclosureDeviceID, diskVendor=diskVendor, trapTemperatureCritical=trapTemperatureCritical, raidAdapterId_PD=raidAdapterId_PD, sysBIOSIndex=sysBIOSIndex, cpuName=cpuName, sd5Table=sd5Table, raidAdapterSerialNumber=raidAdapterSerialNumber, trapVoltageWarning=trapVoltageWarning, postLogTable=postLogTable, trapStorageSMARTCheckNormal=trapStorageSMARTCheckNormal, dmiLogTable=dmiLogTable, raidAdapterAllinoneMsg=raidAdapterAllinoneMsg, cpuLogTable=cpuLogTable, postLogEntry=postLogEntry, memPartNumber=memPartNumber, trapStorageAdapterStatusCritical=trapStorageAdapterStatusCritical, sysBIOSManufacturer=sysBIOSManufacturer, raidPDMediaType=raidPDMediaType, sd5Version=sd5Version, trapChassisIntrusion=trapChassisIntrusion, cpuMaxSpeed=cpuMaxSpeed, mbManufacturer=mbManufacturer, raidPDIndex=raidPDIndex, raidPDSerialNumber=raidPDSerialNumber, raidAdapterSubVendorId=raidAdapterSubVendorId, ceccLogTable=ceccLogTable, trapVoltageCritical=trapVoltageCritical, diskName=diskName, postLogDatetime=postLogDatetime, raidAdapterEntry=raidAdapterEntry, diskSmartStatus=diskSmartStatus, diskModel=diskModel, raidIsBBUAbsentIgnored=raidIsBBUAbsentIgnored, raidAdapterAllinoneStatus=raidAdapterAllinoneStatus, cpuLogEntry=cpuLogEntry, osTable=osTable, diskController=diskController, diskInterfaceType=diskInterfaceType, raidVDEncryptionType=raidVDEncryptionType, sd5MIBVersion=sd5MIBVersion, trapTemperatureWarning=trapTemperatureWarning, diskSerialNumber=diskSerialNumber, sysBIOSEntry=sysBIOSEntry, cpuTable=cpuTable, cpuDeviceVersion=cpuDeviceVersion, cpuSocketDesignation=cpuSocketDesignation, raidAdapterProductName=raidAdapterProductName, memTag=memTag, raidVDAllinoneStatus=raidVDAllinoneStatus, trapTemperatureNormal=trapTemperatureNormal, trapMemoryCeccCritical=trapMemoryCeccCritical, trapBatteryStatusWarning=trapBatteryStatusWarning, memSerialNumber=memSerialNumber, raidAdapterId=raidAdapterId, raidAdapterIndex=raidAdapterIndex, raidVDIndex=raidVDIndex, trapStorageAdapterStatusWarning=trapStorageAdapterStatusWarning, ceccLogIndex=ceccLogIndex, raidPDPredFailCount=raidPDPredFailCount, trapMemoryUeccWarning=trapMemoryUeccWarning, raidVDId=raidVDId, mbAssetTag=mbAssetTag, raidVDCanSpinUpIn1Min=raidVDCanSpinUpIn1Min, raidVDState=raidVDState, memErrorCount=memErrorCount, cpuDeviceID=cpuDeviceID, raidVDSpanDepth=raidVDSpanDepth, diskEntry=diskEntry, raidPDSpan=raidPDSpan, raidAdapterGroup=raidAdapterGroup, raidVDCurrentPSPolicy=raidVDCurrentPSPolicy, mbProductName=mbProductName, trapBatteryStatusNormal=trapBatteryStatusNormal, mbIndex=mbIndex, cpuDescription=cpuDescription, raidPDLastPredFailEventSeqNo=raidPDLastPredFailEventSeqNo, raidAdapterFWPackageBuild=raidAdapterFWPackageBuild, trapFanCritical=trapFanCritical, memCapacity=memCapacity, raidBBUStatus=raidBBUStatus, memUECCErrorCount=memUECCErrorCount, sd5Entry=sd5Entry, trapFanWarning=trapFanWarning, sysBIOSTable=sysBIOSTable, ueccLogIndex=ueccLogIndex, raidPDDeviceSpeed=raidPDDeviceSpeed, cpuCoreCount=cpuCoreCount, memTable=memTable, raidBBUAllinoneStatus=raidBBUAllinoneStatus, raidVDTargetId=raidVDTargetId, raidPDWriteCache=raidPDWriteCache, trapCpuFaultCritical=trapCpuFaultCritical, cpuID=cpuID, raidAdapterGroup_BBU=raidAdapterGroup_BBU, raidVDDefaultPSPolicy=raidVDDefaultPSPolicy, cpuLoadingPercentage=cpuLoadingPercentage, raidPDPort1Status=raidPDPort1Status, memTotalWidth=memTotalWidth, raidVDTable=raidVDTable, trapMemoryUeccCritical=trapMemoryUeccCritical, trapGenericCritical=trapGenericCritical, osEntry=osEntry, mbSerialNumber=mbSerialNumber, trapStorageSMARTCheckWarning=trapStorageSMARTCheckWarning, raidPDInquiryData=raidPDInquiryData, raidPDAllinoneMsg=raidPDAllinoneMsg, memManufacturer=memManufacturer, cpuLogIndex=cpuLogIndex, trapStorageSMARTCheckCritical=trapStorageSMARTCheckCritical, cpuManufacturer=cpuManufacturer, raidPDFirmwareState=raidPDFirmwareState, smSD5TrapMIB=smSD5TrapMIB, trapMemoryUeccNormal=trapMemoryUeccNormal, trapCpuFaultNormal=trapCpuFaultNormal, trapChassisIntrusionCleared=trapChassisIntrusionCleared, ceccLogDatetime=ceccLogDatetime, raidAdapterSubDeviceId=raidAdapterSubDeviceId, postLogIndex=postLogIndex, raidBBUAllinoneMsg=raidBBUAllinoneMsg, cpuCurrentSpeed=cpuCurrentSpeed, raidPDModel=raidPDModel, raidVDSupportsMaxPS=raidVDSupportsMaxPS, raidAdapterId_BBU=raidAdapterId_BBU, sysBIOSVersion=sysBIOSVersion, raidVDRaidLevel=raidVDRaidLevel, sd5Idx=sd5Idx)
