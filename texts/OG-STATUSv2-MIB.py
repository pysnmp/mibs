#
# PySNMP MIB module OG-STATUSv2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/opengear/OG-STATUSv2-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 11:24:51 2024
# On host fv-az1766-862 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
opengear, = mibBuilder.importSymbols("OG-SMI-MIB", "opengear")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Unsigned32, NotificationType, TimeTicks, IpAddress, Gauge32, Bits, MibIdentifier, ModuleIdentity, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Unsigned32", "NotificationType", "TimeTicks", "IpAddress", "Gauge32", "Bits", "MibIdentifier", "ModuleIdentity", "Counter64", "Integer32")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
ogStatus2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 25049, 17))
ogStatus2.setRevisions(('2017-02-03 00:00', '2016-08-26 00:00', '2014-01-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ogStatus2.setRevisionsDescriptions(('Add CLI session alert.', 'Correct Power Supply table and values.', 'Initial revision',))
if mibBuilder.loadTexts: ogStatus2.setLastUpdated('201702030000Z')
if mibBuilder.loadTexts: ogStatus2.setOrganization('Opengear Inc.')
if mibBuilder.loadTexts: ogStatus2.setContactInfo('Opengear Inc.\n\t\t 630 West 9560 South, Suite A,\n\t\t Sandy, UT 84070\n\t\t support@opengear.com')
if mibBuilder.loadTexts: ogStatus2.setDescription('Opengear extended status and alert MIB')
ogSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 25049, 17, 1))
ogFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 25049, 17, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: ogFirmwareVersion.setDescription('The current device firmware.')
ogSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 25049, 17, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ogSerialNumber.setDescription('The current serial number (if applicable).')
ogSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 2), )
if mibBuilder.loadTexts: ogSerialPortTable.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortTable.setDescription('The devices serial port status table.')
ogSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogSerialPortIndex"))
if mibBuilder.loadTexts: ogSerialPortEntry.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortEntry.setDescription('A serial port status entry.')
ogSerialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogSerialPortIndex.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortIndex.setDescription('Index within the serial port table of this status')
ogSerialPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortLabel.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortLabel.setDescription('Serial port descriptive name')
ogSerialPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortSpeed.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortSpeed.setDescription('Serial port speed in bits per second')
ogSerialPortDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortDataBits.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortDataBits.setDescription('Serial port character size')
ogSerialPortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortParity.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortParity.setDescription('Serial port parity')
ogSerialPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("oneAndAHalf", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortStopBits.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortStopBits.setDescription('Serial port number of stop bits')
ogSerialPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hardware", 2), ("software", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortFlowControl.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortFlowControl.setDescription('Serial port flow control type')
ogSerialPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("console", 2), ("sdt", 3), ("terminal", 4), ("bridge", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortMode.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortMode.setDescription('Serial port operational mode type')
ogSerialPortLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("connect", 2), ("inputAndOutput", 3), ("inputOnly", 4), ("outputOnly", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortLogLevel.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortLogLevel.setDescription('Serial port logging level')
ogSerialPortRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortRxBytes.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortRxBytes.setDescription('Serial port bytes received')
ogSerialPortTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortTxBytes.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortTxBytes.setDescription('Serial port bytes transmitted')
ogSerialPortFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortFramingErrors.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortFramingErrors.setDescription('Serial port framing error total.')
ogSerialPortParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortParityErrors.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortParityErrors.setDescription('Serial port parity error total.')
ogSerialPortOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortOverrunErrors.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortOverrunErrors.setDescription('Serial port Overrun Error total.')
ogSerialPortBreaks = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortBreaks.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortBreaks.setDescription('Serial port break total')
ogSerialPortDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortDCD.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortDCD.setDescription('The status of the DCD signal.')
ogSerialPortDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortDTR.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortDTR.setDescription('The status of the DTR signal.')
ogSerialPortDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortDSR.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortDSR.setDescription('The status of the DSR signal.')
ogSerialPortCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortCTS.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortCTS.setDescription('The status of the CTS signal.')
ogSerialPortRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialPortRTS.setStatus('current')
if mibBuilder.loadTexts: ogSerialPortRTS.setDescription('The status of the RTS signal.')
ogSerialUserTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 3), )
if mibBuilder.loadTexts: ogSerialUserTable.setStatus('current')
if mibBuilder.loadTexts: ogSerialUserTable.setDescription("This entity's serial port users table.")
ogSerialUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 3, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogSerialUserIndex"))
if mibBuilder.loadTexts: ogSerialUserEntry.setStatus('current')
if mibBuilder.loadTexts: ogSerialUserEntry.setDescription('A user logged in on the serial port')
ogSerialUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogSerialUserIndex.setStatus('current')
if mibBuilder.loadTexts: ogSerialUserIndex.setDescription('Index within the serial port active users table')
ogSerialUserStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 3, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialUserStartTime.setStatus('current')
if mibBuilder.loadTexts: ogSerialUserStartTime.setDescription('The time and date the user session started.')
ogSerialUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialUserPort.setStatus('current')
if mibBuilder.loadTexts: ogSerialUserPort.setDescription('Serial port number')
ogSerialUserLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialUserLabel.setStatus('current')
if mibBuilder.loadTexts: ogSerialUserLabel.setDescription('The readable label for the serial port.')
ogSerialUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogSerialUserName.setStatus('current')
if mibBuilder.loadTexts: ogSerialUserName.setDescription('The name of the user logged in on the port.')
ogHostTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 4), )
if mibBuilder.loadTexts: ogHostTable.setStatus('current')
if mibBuilder.loadTexts: ogHostTable.setDescription('A table of monitored network hosts.')
ogHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 4, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogHostIndex"))
if mibBuilder.loadTexts: ogHostEntry.setStatus('current')
if mibBuilder.loadTexts: ogHostEntry.setDescription('A monitored network host.')
ogHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogHostIndex.setStatus('current')
if mibBuilder.loadTexts: ogHostIndex.setDescription('Index within the network host active users table')
ogHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogHostName.setStatus('current')
if mibBuilder.loadTexts: ogHostName.setDescription('The name of this monitored network host.')
ogHostIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogHostIpV4Address.setStatus('current')
if mibBuilder.loadTexts: ogHostIpV4Address.setDescription('The IPv4 Address of this monitored network host.')
ogHostIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogHostIpV6Address.setStatus('current')
if mibBuilder.loadTexts: ogHostIpV6Address.setDescription('The IPv6 Address of this monitored network host.')
ogHostServiceTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 5), )
if mibBuilder.loadTexts: ogHostServiceTable.setStatus('current')
if mibBuilder.loadTexts: ogHostServiceTable.setDescription('A table of services belonging to a monitored host.')
ogHostServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 5, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogHostIndex"), (0, "OG-STATUSv2-MIB", "ogHostServiceIndex"))
if mibBuilder.loadTexts: ogHostServiceEntry.setStatus('current')
if mibBuilder.loadTexts: ogHostServiceEntry.setDescription('A monitored host service.')
ogHostServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogHostServiceIndex.setStatus('current')
if mibBuilder.loadTexts: ogHostServiceIndex.setDescription('Index within the RPC outlet table')
ogHostServiceHost = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 5, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogHostServiceHost.setStatus('current')
if mibBuilder.loadTexts: ogHostServiceHost.setDescription('The monitored host this service belongs to')
ogHostServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogHostServiceType.setStatus('current')
if mibBuilder.loadTexts: ogHostServiceType.setDescription('The type of service this is.')
ogHostServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogHostServicePort.setStatus('current')
if mibBuilder.loadTexts: ogHostServicePort.setDescription('The TCP Port this service is on.')
ogHostServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("unavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogHostServiceStatus.setStatus('current')
if mibBuilder.loadTexts: ogHostServiceStatus.setDescription('The availabalilty of this service.')
ogHostServiceCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogHostServiceCounter.setStatus('current')
if mibBuilder.loadTexts: ogHostServiceCounter.setDescription('The number of alerts related to this service.')
ogHostUserTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 6), )
if mibBuilder.loadTexts: ogHostUserTable.setStatus('current')
if mibBuilder.loadTexts: ogHostUserTable.setDescription("This entity's serial port users table.")
ogHostUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 6, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogHostUserIndex"))
if mibBuilder.loadTexts: ogHostUserEntry.setStatus('current')
if mibBuilder.loadTexts: ogHostUserEntry.setDescription('A user logged in on the serial port')
ogHostUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogHostUserIndex.setStatus('current')
if mibBuilder.loadTexts: ogHostUserIndex.setDescription('Index within the network host active users table')
ogHostUserHost = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 6, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogHostUserHost.setStatus('current')
if mibBuilder.loadTexts: ogHostUserHost.setDescription('The monitored host this user is associated with.')
ogHostUserStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 6, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogHostUserStartTime.setStatus('current')
if mibBuilder.loadTexts: ogHostUserStartTime.setDescription('The date and time the user session started.')
ogHostUserAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogHostUserAddress.setStatus('current')
if mibBuilder.loadTexts: ogHostUserAddress.setDescription('The network host address.')
ogHostUserHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogHostUserHostName.setStatus('current')
if mibBuilder.loadTexts: ogHostUserHostName.setDescription("The network host's host name.")
ogHostUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogHostUserName.setStatus('current')
if mibBuilder.loadTexts: ogHostUserName.setDescription("The network host's active username.")
ogWebUserTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 7), )
if mibBuilder.loadTexts: ogWebUserTable.setStatus('current')
if mibBuilder.loadTexts: ogWebUserTable.setDescription("This entity's Web Interface users table.")
ogWebUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 7, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogWebUserIndex"))
if mibBuilder.loadTexts: ogWebUserEntry.setStatus('current')
if mibBuilder.loadTexts: ogWebUserEntry.setDescription('A user logged in to the Web Interface')
ogWebUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogWebUserIndex.setStatus('current')
if mibBuilder.loadTexts: ogWebUserIndex.setDescription('Index within the Web Interface users table')
ogWebUserStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 7, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWebUserStartTime.setStatus('current')
if mibBuilder.loadTexts: ogWebUserStartTime.setDescription('The web users session start date and time.')
ogWebUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWebUserName.setStatus('current')
if mibBuilder.loadTexts: ogWebUserName.setDescription('The web users active username.')
ogWebUserSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWebUserSourceAddress.setStatus('current')
if mibBuilder.loadTexts: ogWebUserSourceAddress.setDescription('The web users source address.')
ogWebUserSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWebUserSourcePort.setStatus('current')
if mibBuilder.loadTexts: ogWebUserSourcePort.setDescription('The web users source tcp port.')
ogEmdTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 8), )
if mibBuilder.loadTexts: ogEmdTable.setStatus('current')
if mibBuilder.loadTexts: ogEmdTable.setDescription('This devices temperature monitoring table.')
ogEmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 8, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogEmdIndex"))
if mibBuilder.loadTexts: ogEmdEntry.setStatus('current')
if mibBuilder.loadTexts: ogEmdEntry.setDescription('EMD status entry')
ogEmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogEmdIndex.setStatus('current')
if mibBuilder.loadTexts: ogEmdIndex.setDescription('Index within the EMD status table')
ogEmdName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdName.setStatus('current')
if mibBuilder.loadTexts: ogEmdName.setDescription('The name of the EMD device.')
ogEmdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdDescription.setStatus('current')
if mibBuilder.loadTexts: ogEmdDescription.setDescription('A description of the EMD device.')
ogEmdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdEnabled.setStatus('current')
if mibBuilder.loadTexts: ogEmdEnabled.setDescription('The enabled status of the EMD')
ogEmdLogEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdLogEnabled.setStatus('current')
if mibBuilder.loadTexts: ogEmdLogEnabled.setDescription('The logging status of the EMD')
ogEmdConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("serial", 2), ("network", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdConnectType.setStatus('current')
if mibBuilder.loadTexts: ogEmdConnectType.setDescription('How the EMD device is connected.')
ogEmdTemperatureTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdTemperatureTotal.setStatus('current')
if mibBuilder.loadTexts: ogEmdTemperatureTotal.setDescription('The number of temperature sensors contained in this EMD.')
ogEmdHumidityTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdHumidityTotal.setStatus('current')
if mibBuilder.loadTexts: ogEmdHumidityTotal.setDescription('The number of humidity sensors contained in this EMD.')
ogEmdDioInputTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdDioInputTotal.setStatus('current')
if mibBuilder.loadTexts: ogEmdDioInputTotal.setDescription('The number of DIOs contained in this EMD.')
ogEmdTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 9), )
if mibBuilder.loadTexts: ogEmdTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: ogEmdTemperatureTable.setDescription('A table of temperature sensors belonging to EMDs')
ogEmdTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 9, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogEmdIndex"), (0, "OG-STATUSv2-MIB", "ogEmdTemperatureIndex"))
if mibBuilder.loadTexts: ogEmdTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: ogEmdTemperatureEntry.setDescription('EMD status entry')
ogEmdTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogEmdTemperatureIndex.setStatus('current')
if mibBuilder.loadTexts: ogEmdTemperatureIndex.setDescription('Index within the EMD status table')
ogEmdTemperatureEmd = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 9, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdTemperatureEmd.setStatus('current')
if mibBuilder.loadTexts: ogEmdTemperatureEmd.setDescription('The EMD this temperature sensor is related to.')
ogEmdTemperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdTemperatureName.setStatus('current')
if mibBuilder.loadTexts: ogEmdTemperatureName.setDescription('The name of the EMD temperature sensor.')
ogEmdTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdTemperatureDescription.setStatus('current')
if mibBuilder.loadTexts: ogEmdTemperatureDescription.setDescription('A description of the EMD device.')
ogEmdTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 9, 1, 5), Integer32()).setUnits('degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: ogEmdTemperatureValue.setDescription('The current temperature reading on the EMD.')
ogEmdTemperatureCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdTemperatureCounter.setStatus('current')
if mibBuilder.loadTexts: ogEmdTemperatureCounter.setDescription('Number of alerts triggered on the EMD.')
ogEmdHumidityTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 10), )
if mibBuilder.loadTexts: ogEmdHumidityTable.setStatus('current')
if mibBuilder.loadTexts: ogEmdHumidityTable.setDescription('A table of humidity sensors belonging to EMDs.')
ogEmdHumidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 10, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogEmdIndex"), (0, "OG-STATUSv2-MIB", "ogEmdHumidityIndex"))
if mibBuilder.loadTexts: ogEmdHumidityEntry.setStatus('current')
if mibBuilder.loadTexts: ogEmdHumidityEntry.setDescription('EMD Humidity sensor status entry.')
ogEmdHumidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogEmdHumidityIndex.setStatus('current')
if mibBuilder.loadTexts: ogEmdHumidityIndex.setDescription('Index within the EMD status table')
ogEmdHumidityEmd = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 10, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdHumidityEmd.setStatus('current')
if mibBuilder.loadTexts: ogEmdHumidityEmd.setDescription('The EMD this humidity sensor is related to.')
ogEmdHumidityName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdHumidityName.setStatus('current')
if mibBuilder.loadTexts: ogEmdHumidityName.setDescription('The name of the EMD.')
ogEmdHumidityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdHumidityDescription.setStatus('current')
if mibBuilder.loadTexts: ogEmdHumidityDescription.setDescription('A description of the EMD device.')
ogEmdHumidityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 10, 1, 5), Integer32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdHumidityValue.setStatus('current')
if mibBuilder.loadTexts: ogEmdHumidityValue.setDescription('The current humidity value on the EMD')
ogEmdHumidityCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdHumidityCounter.setStatus('current')
if mibBuilder.loadTexts: ogEmdHumidityCounter.setDescription('Number of alerts triggered on the EMD')
ogEmdDioTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 11), )
if mibBuilder.loadTexts: ogEmdDioTable.setStatus('current')
if mibBuilder.loadTexts: ogEmdDioTable.setDescription('Ths Digital I/O status table.')
ogEmdDioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 11, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogEmdIndex"), (0, "OG-STATUSv2-MIB", "ogEmdDioIndex"))
if mibBuilder.loadTexts: ogEmdDioEntry.setStatus('current')
if mibBuilder.loadTexts: ogEmdDioEntry.setDescription('Digital I/O status entry')
ogEmdDioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogEmdDioIndex.setStatus('current')
if mibBuilder.loadTexts: ogEmdDioIndex.setDescription('Index within the Digital I/O status table')
ogEmdDioEmd = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 11, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdDioEmd.setStatus('current')
if mibBuilder.loadTexts: ogEmdDioEmd.setDescription('The EMD this Digital I/O relates to.')
ogEmdDioName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdDioName.setStatus('current')
if mibBuilder.loadTexts: ogEmdDioName.setDescription('The ID of this Digital I/O.')
ogEmdDioDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdDioDescription.setStatus('current')
if mibBuilder.loadTexts: ogEmdDioDescription.setDescription('A description of this Digital I/O.')
ogEmdDioType = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ttlInputOutput", 1), ("highVoltageOutput", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdDioType.setStatus('current')
if mibBuilder.loadTexts: ogEmdDioType.setDescription('Digital I/O type (TTL Input/Output or High-Voltage Output).')
ogEmdDioDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("output", 1), ("input", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdDioDirection.setStatus('current')
if mibBuilder.loadTexts: ogEmdDioDirection.setDescription('The direction of the Digital I/O (Input or Output)')
ogEmdDioState = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("low", 2), ("unavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdDioState.setStatus('current')
if mibBuilder.loadTexts: ogEmdDioState.setDescription('The electrical state value of the Digital I/O (Low or High)')
ogEmdDioTriggerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("risingEdge", 2), ("fallingEdge", 3), ("risingFallingEdge", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdDioTriggerMode.setStatus('current')
if mibBuilder.loadTexts: ogEmdDioTriggerMode.setDescription('The Trigger Mode of the Digital I/O')
ogEmdDioCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogEmdDioCounter.setStatus('current')
if mibBuilder.loadTexts: ogEmdDioCounter.setDescription('The trigger counter of this Digital I/O')
ogNetInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 12), )
if mibBuilder.loadTexts: ogNetInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ogNetInterfaceTable.setDescription('This devices network interface status table.')
ogNetInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 12, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogNetInterfaceIndex"))
if mibBuilder.loadTexts: ogNetInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: ogNetInterfaceEntry.setDescription('EMD status entry')
ogNetInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogNetInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: ogNetInterfaceIndex.setDescription('Index within the network interface status table')
ogNetInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogNetInterfaceName.setStatus('current')
if mibBuilder.loadTexts: ogNetInterfaceName.setDescription('The name of a network interface.')
ogNetInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unavailable", 1), ("ethernet", 2), ("wifi", 3), ("cellModem", 4), ("v92Modem", 5), ("vpn", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogNetInterfaceType.setStatus('current')
if mibBuilder.loadTexts: ogNetInterfaceType.setDescription('The type of this network interface entry.')
ogNetInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unavailable", 1), ("down", 2), ("starting", 3), ("up", 4), ("stopping", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogNetInterfaceState.setStatus('current')
if mibBuilder.loadTexts: ogNetInterfaceState.setDescription('The current status of this network interface entry.')
ogPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 13), )
if mibBuilder.loadTexts: ogPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: ogPowerSupplyTable.setDescription("This entity's Power Supply table.")
ogPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 13, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogPowerSupplyIndex"))
if mibBuilder.loadTexts: ogPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: ogPowerSupplyEntry.setDescription('Power Supply status entry')
ogPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ogPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: ogPowerSupplyIndex.setDescription('Index within the Power Supply status table')
ogPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogPowerSupplyName.setStatus('current')
if mibBuilder.loadTexts: ogPowerSupplyName.setDescription('The name of the Power Supply.')
ogPowerSupplyInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 13, 1, 3), Integer32()).setUnits('volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogPowerSupplyInputVoltage.setStatus('current')
if mibBuilder.loadTexts: ogPowerSupplyInputVoltage.setDescription('Input voltage of the Power Supply')
ogPowerSupplyOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 13, 1, 4), Integer32()).setUnits('0.01 Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogPowerSupplyOutputCurrent.setStatus('current')
if mibBuilder.loadTexts: ogPowerSupplyOutputCurrent.setDescription('Output current of the Power Supply')
ogPowerSupplyTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 13, 1, 5), Integer32()).setUnits('degrees celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogPowerSupplyTemperature.setStatus('current')
if mibBuilder.loadTexts: ogPowerSupplyTemperature.setDescription('Temperature of the Power Supply')
ogUpsTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 14), )
if mibBuilder.loadTexts: ogUpsTable.setStatus('current')
if mibBuilder.loadTexts: ogUpsTable.setDescription('Ths Uninterruptable Power Supply (UPS) status table.')
ogUpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogUpsIndex"))
if mibBuilder.loadTexts: ogUpsEntry.setStatus('current')
if mibBuilder.loadTexts: ogUpsEntry.setDescription('Digital I/O status entry')
ogUpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogUpsIndex.setStatus('current')
if mibBuilder.loadTexts: ogUpsIndex.setDescription('Index within the UPS status table.')
ogUpsName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsName.setStatus('current')
if mibBuilder.loadTexts: ogUpsName.setDescription('The ID of this UPS.')
ogUpsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsDescription.setStatus('current')
if mibBuilder.loadTexts: ogUpsDescription.setDescription('A description of this UPS.')
ogUpsType = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsType.setStatus('current')
if mibBuilder.loadTexts: ogUpsType.setDescription('The UPS driver type.')
ogUpsLogEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsLogEnabled.setStatus('current')
if mibBuilder.loadTexts: ogUpsLogEnabled.setDescription('The logging status of the UPS')
ogUpsConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("usb", 2), ("http", 3), ("https", 4), ("snmp", 5), ("serial", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsConnectType.setStatus('current')
if mibBuilder.loadTexts: ogUpsConnectType.setDescription('How the UPS device is being monitored.')
ogUpsState = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("onLine", 2), ("onBattery", 3), ("lowBattery", 4), ("onBypass", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsState.setStatus('current')
if mibBuilder.loadTexts: ogUpsState.setDescription('The current state the UPS is running in.')
ogUpsTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 8), Integer32()).setUnits('degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsTemperature.setStatus('current')
if mibBuilder.loadTexts: ogUpsTemperature.setDescription('The UPS temperature. Negative if unavailable.')
ogUpsHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 9), Integer32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsHumidity.setStatus('current')
if mibBuilder.loadTexts: ogUpsHumidity.setDescription('The UPS humidity. Negative if unavailable.')
ogUpsBatteryState = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("warning", 3), ("low", 4), ("depleted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsBatteryState.setStatus('current')
if mibBuilder.loadTexts: ogUpsBatteryState.setDescription('The current state of the UPS battery.')
ogUpsBatteryRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 31449600))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsBatteryRunTime.setStatus('current')
if mibBuilder.loadTexts: ogUpsBatteryRunTime.setDescription('Battery runtime (seconds). Negative if unavailable')
ogUpsBatteryRunTimeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 31449600))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsBatteryRunTimeLow.setStatus('current')
if mibBuilder.loadTexts: ogUpsBatteryRunTimeLow.setDescription('Estimated remaining battery runtime when UPS switches to Low\n\t\tBattery. Negative if unavailable.')
ogUpsBatteryRunTimeRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 31449600))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsBatteryRunTimeRestart.setStatus('current')
if mibBuilder.loadTexts: ogUpsBatteryRunTimeRestart.setDescription('Minimum battery runtime for UPS restart after power-off\n\t\t(seconds). Negative if unavailable.')
ogUpsBatteryCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsBatteryCharge.setStatus('current')
if mibBuilder.loadTexts: ogUpsBatteryCharge.setDescription('Estimated percent of Battery charge remaining. Negative if\n\t\tunavailable.')
ogUpsBatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 15), Integer32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsBatteryVoltage.setStatus('current')
if mibBuilder.loadTexts: ogUpsBatteryVoltage.setDescription('The magnitude of the current battery voltage. Negative if\n\t\tunavailable.')
ogUpsBatteryNominalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 16), Integer32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsBatteryNominalVoltage.setStatus('current')
if mibBuilder.loadTexts: ogUpsBatteryNominalVoltage.setDescription('Nominal battery voltage (V). Negative if unavailable.')
ogUpsBatteryCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 17), Integer32()).setUnits('0.1 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsBatteryCurrent.setStatus('current')
if mibBuilder.loadTexts: ogUpsBatteryCurrent.setDescription('The UPS battery current. Negative if unavailable.')
ogUpsBatteryNominalCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 18), Integer32()).setUnits('0.1 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsBatteryNominalCurrent.setStatus('current')
if mibBuilder.loadTexts: ogUpsBatteryNominalCurrent.setDescription('The nominal UPS battery current. Negative if unavailable.')
ogUpsBatteryTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 19), Integer32()).setUnits('degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsBatteryTemperature.setStatus('current')
if mibBuilder.loadTexts: ogUpsBatteryTemperature.setDescription('The UPS battery temperature. Negative if unavailable.')
ogUpsInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 20), Integer32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsInputFrequency.setStatus('current')
if mibBuilder.loadTexts: ogUpsInputFrequency.setDescription('Input line frequency (Hz). Negative if unavailable.')
ogUpsInputNominalFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 21), Integer32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsInputNominalFrequency.setStatus('current')
if mibBuilder.loadTexts: ogUpsInputNominalFrequency.setDescription('Nominal input line frequency (Hz). Negative if unavailable.')
ogUpsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 22), Integer32()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsInputVoltage.setStatus('current')
if mibBuilder.loadTexts: ogUpsInputVoltage.setDescription('The magnitude of the UPS input voltage. Negative if\n\t\tunavailable.')
ogUpsInputNominalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 23), Integer32()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsInputNominalVoltage.setStatus('current')
if mibBuilder.loadTexts: ogUpsInputNominalVoltage.setDescription('The nominal input voltage. Negative if unavailable.')
ogUpsInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 24), Integer32()).setUnits('0.1 RMS Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsInputCurrent.setStatus('current')
if mibBuilder.loadTexts: ogUpsInputCurrent.setDescription('The input current. Negative if unavailable.')
ogUpsInputNominalCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 25), Integer32()).setUnits('0.1 RMS Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsInputNominalCurrent.setStatus('current')
if mibBuilder.loadTexts: ogUpsInputNominalCurrent.setDescription('The nominal input current. Negative if unavailable.')
ogUpsOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 26), Integer32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsOutputFrequency.setStatus('current')
if mibBuilder.loadTexts: ogUpsOutputFrequency.setDescription('Output line frequency (Hz). Negative if unavailable.')
ogUpsOutputNominalFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 27), Integer32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsOutputNominalFrequency.setStatus('current')
if mibBuilder.loadTexts: ogUpsOutputNominalFrequency.setDescription('Nominal output line frequency (Hz). Negative if unavailable.')
ogUpsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 28), Integer32()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: ogUpsOutputVoltage.setDescription('The magnitude of the UPS output voltage. Negative if \n\t\tunavailable.')
ogUpsOutputNominalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 29), Integer32()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsOutputNominalVoltage.setStatus('current')
if mibBuilder.loadTexts: ogUpsOutputNominalVoltage.setDescription('The nominal magnitude of the UPS output voltage. Negative if \n\t\tunavailable.')
ogUpsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 30), Integer32()).setUnits('0.1 RMS Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsOutputCurrent.setStatus('current')
if mibBuilder.loadTexts: ogUpsOutputCurrent.setDescription('The magnitude of the UPS input current. Negative if\n\t\tunavailable.')
ogUpsOutputNominalCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 31), Integer32()).setUnits('0.1 RMS Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsOutputNominalCurrent.setStatus('current')
if mibBuilder.loadTexts: ogUpsOutputNominalCurrent.setDescription('The nominal magnitude of the UPS input current. Negative if\n\t\tunavailable.')
ogUpsOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsOutputLoad.setStatus('current')
if mibBuilder.loadTexts: ogUpsOutputLoad.setDescription('Estimated percent of UPS power capacity being used.')
ogUpsOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 33), Integer32()).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsOutputPower.setStatus('current')
if mibBuilder.loadTexts: ogUpsOutputPower.setDescription('The current value of apparent power (Volt-Amps).\n\t\tNegative if unavailable.')
ogUpsOutputTruePower = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 34), Integer32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsOutputTruePower.setStatus('current')
if mibBuilder.loadTexts: ogUpsOutputTruePower.setDescription('The current value of real power (Watts).\n\t\tNegative if unavailable.')
ogUpsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 14, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogUpsCounter.setStatus('current')
if mibBuilder.loadTexts: ogUpsCounter.setDescription('Number of alerts triggered on the UPS')
ogRpcTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 15), )
if mibBuilder.loadTexts: ogRpcTable.setStatus('current')
if mibBuilder.loadTexts: ogRpcTable.setDescription("This entity's Remote Power Controller (RPC) table.")
ogRpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 15, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogRpcIndex"))
if mibBuilder.loadTexts: ogRpcEntry.setStatus('current')
if mibBuilder.loadTexts: ogRpcEntry.setDescription('RPC status entry')
ogRpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ogRpcIndex.setStatus('current')
if mibBuilder.loadTexts: ogRpcIndex.setDescription('Index within the RPC status table')
ogRpcName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcName.setStatus('current')
if mibBuilder.loadTexts: ogRpcName.setDescription('The name of the RPC device.')
ogRpcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcDescription.setStatus('current')
if mibBuilder.loadTexts: ogRpcDescription.setDescription('A description for the RPC device.')
ogRpcType = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcType.setStatus('current')
if mibBuilder.loadTexts: ogRpcType.setDescription('A type for the RPC device.')
ogRpcLogEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcLogEnabled.setStatus('current')
if mibBuilder.loadTexts: ogRpcLogEnabled.setDescription('The logging status of the RPC')
ogRpcOutletTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcOutletTotal.setStatus('current')
if mibBuilder.loadTexts: ogRpcOutletTotal.setDescription('The number of outlets on this RPC')
ogRpcMaxTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 15, 1, 7), Integer32()).setUnits('degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcMaxTemperature.setStatus('current')
if mibBuilder.loadTexts: ogRpcMaxTemperature.setDescription('Maximum temperature on the RPC')
ogRpcConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serial", 1), ("network", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcConnectType.setStatus('current')
if mibBuilder.loadTexts: ogRpcConnectType.setDescription('How the RPC device is connected.')
ogRpcInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 15, 1, 9), Integer32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcInputFrequency.setStatus('current')
if mibBuilder.loadTexts: ogRpcInputFrequency.setDescription('Input line frequency (Hz). Negative if unavailable.')
ogRpcInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 15, 1, 10), Integer32()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcInputVoltage.setStatus('current')
if mibBuilder.loadTexts: ogRpcInputVoltage.setDescription('The magnitude of the RPC input voltage. Negative if\n\t\tunavailable.')
ogRpcInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 15, 1, 11), Integer32()).setUnits('0.1 RMS Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcInputCurrent.setStatus('current')
if mibBuilder.loadTexts: ogRpcInputCurrent.setDescription('The input current. Negative if unavailable.')
ogRpcCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcCounter.setStatus('current')
if mibBuilder.loadTexts: ogRpcCounter.setDescription('Number of alerts triggered on the RPC')
ogRpcOutletTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 16), )
if mibBuilder.loadTexts: ogRpcOutletTable.setStatus('current')
if mibBuilder.loadTexts: ogRpcOutletTable.setDescription("This RPC's outlet table.")
ogRpcOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 16, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogRpcIndex"), (0, "OG-STATUSv2-MIB", "ogRpcOutletIndex"))
if mibBuilder.loadTexts: ogRpcOutletEntry.setStatus('current')
if mibBuilder.loadTexts: ogRpcOutletEntry.setDescription('RPC Outlet status entry')
ogRpcOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogRpcOutletIndex.setStatus('current')
if mibBuilder.loadTexts: ogRpcOutletIndex.setDescription('Index within the RPC outlet table')
ogRpcOutletRpc = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 16, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcOutletRpc.setStatus('current')
if mibBuilder.loadTexts: ogRpcOutletRpc.setDescription('The RPC this outlet belongs to')
ogRpcOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 16, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcOutletName.setStatus('current')
if mibBuilder.loadTexts: ogRpcOutletName.setDescription('The name of the RPC outlet.')
ogRpcOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("transitioning", 3), ("unavailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcOutletState.setStatus('current')
if mibBuilder.loadTexts: ogRpcOutletState.setDescription('The power status of the RPC outlet')
ogRpcOutletFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 16, 1, 5), Integer32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcOutletFrequency.setStatus('current')
if mibBuilder.loadTexts: ogRpcOutletFrequency.setDescription('Output line frequency (Hz). Negative if unavailable.')
ogRpcOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2640))).setUnits('0.01 Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcOutletVoltage.setStatus('current')
if mibBuilder.loadTexts: ogRpcOutletVoltage.setDescription('The voltage on this outlet. Negative if unavailable.')
ogRpcOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 25500))).setUnits('0.01 Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcOutletCurrent.setStatus('current')
if mibBuilder.loadTexts: ogRpcOutletCurrent.setDescription('Current measured on this outlet. Negative if unavailable.')
ogRpcOutletLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogRpcOutletLoad.setStatus('current')
if mibBuilder.loadTexts: ogRpcOutletLoad.setDescription('Estimated percent of RPC outlet power capacity being used.')
ogCellModemTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 17), )
if mibBuilder.loadTexts: ogCellModemTable.setStatus('current')
if mibBuilder.loadTexts: ogCellModemTable.setDescription('Ths cellular modem status table.')
ogCellModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogCellModemIndex"))
if mibBuilder.loadTexts: ogCellModemEntry.setStatus('current')
if mibBuilder.loadTexts: ogCellModemEntry.setDescription('A cellular modem status entry.')
ogCellModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogCellModemIndex.setStatus('current')
if mibBuilder.loadTexts: ogCellModemIndex.setDescription('Index of the cellular modem status entry.')
ogCellModemVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModemVendor.setStatus('current')
if mibBuilder.loadTexts: ogCellModemVendor.setDescription('The Manufacturer ID of Cellular Modem.')
ogCellModemModel = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModemModel.setStatus('current')
if mibBuilder.loadTexts: ogCellModemModel.setDescription('The Cellular Modem model name.')
ogCellModemEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModemEnabled.setStatus('current')
if mibBuilder.loadTexts: ogCellModemEnabled.setDescription('The enabled state of the modem.')
ogCellModemConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModemConnected.setStatus('current')
if mibBuilder.loadTexts: ogCellModemConnected.setDescription('The connected state of the modem.')
ogCellModemNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModemNetwork.setStatus('current')
if mibBuilder.loadTexts: ogCellModemNetwork.setDescription('The name of the network provider.')
ogCellModemRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("registered", 1), ("unregistered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModemRegistered.setStatus('current')
if mibBuilder.loadTexts: ogCellModemRegistered.setDescription('The registration state of the modem.')
ogCellModemTower = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModemTower.setStatus('current')
if mibBuilder.loadTexts: ogCellModemTower.setDescription('The current cellular tower ID.')
ogCellModemRadioTechnology = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unavailable", 1), ("cdma", 2), ("evdo", 3), ("gsm", 4), ("umts", 5), ("lte", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModemRadioTechnology.setStatus('current')
if mibBuilder.loadTexts: ogCellModemRadioTechnology.setDescription('The current Radio Access Technology being used')
ogCellModemApn = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModemApn.setStatus('current')
if mibBuilder.loadTexts: ogCellModemApn.setDescription('The APN configured for this cellmodem.')
ogCellModem3gRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModem3gRssi.setStatus('current')
if mibBuilder.loadTexts: ogCellModem3gRssi.setDescription('The current 3G Received Signal Strength (RSSI) if applicable.')
ogCellModem4gRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModem4gRssi.setStatus('current')
if mibBuilder.loadTexts: ogCellModem4gRssi.setDescription('The current 4G Received Signal Strength (RSSI) if applicable.')
ogCellModemSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModemSessionTime.setStatus('current')
if mibBuilder.loadTexts: ogCellModemSessionTime.setDescription('The number of seconds the modem session has been up for.')
ogCellModemSelectedSimCard = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModemSelectedSimCard.setStatus('current')
if mibBuilder.loadTexts: ogCellModemSelectedSimCard.setDescription('The SIM card currently being used by this modem.')
ogCellModemTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 15), Integer32()).setUnits('degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModemTemperature.setStatus('current')
if mibBuilder.loadTexts: ogCellModemTemperature.setDescription('The current temperature of the Cellular Modem.')
ogCellModemCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModemCounter.setStatus('current')
if mibBuilder.loadTexts: ogCellModemCounter.setDescription('The number of alerts the modem has triggered.')
ogCellModemIMSI = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 17, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCellModemIMSI.setStatus('current')
if mibBuilder.loadTexts: ogCellModemIMSI.setDescription('The IMSI of the SIM currently in use by the Cellular Modem.')
ogWifiClientTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 18), )
if mibBuilder.loadTexts: ogWifiClientTable.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientTable.setDescription('Ths wireless client status table.')
ogWifiClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogWifiClientIndex"))
if mibBuilder.loadTexts: ogWifiClientEntry.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientEntry.setDescription('A wireless client status entry.')
ogWifiClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogWifiClientIndex.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientIndex.setDescription('Index of the wireless client status entry.')
ogWifiClientInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientInterface.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientInterface.setDescription('The wireless client network interface name.')
ogWifiClientEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientEnabled.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientEnabled.setDescription('The wireless client enabled state')
ogWifiClientEssid = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientEssid.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientEssid.setDescription('The ESSID this wireless client is currently associated with.')
ogWifiClientIeeeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unavailable", 1), ("ieee802Dot11B", 2), ("ieee802Dot11BG", 3), ("ieee802Dot11BGN", 4), ("ieee802Dot11ABGN", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientIeeeMode.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientIeeeMode.setDescription('The IEEE 802.11 mode of this wireless client.')
ogWifiClientMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unavailable", 1), ("managed", 2), ("adhoc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientMode.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientMode.setDescription('The operating mode of this wireless client.')
ogWifiClientFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 7), Unsigned32()).setUnits('0.0001 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientFrequency.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientFrequency.setDescription('The current frequency of this wireless client.')
ogWifiClientApMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientApMac.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientApMac.setDescription('The Access Point ID this wireless client is associated with.')
ogWifiClientBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 9), Unsigned32()).setUnits('Mb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientBitRate.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientBitRate.setDescription('The current bit-rate of this wireless client.')
ogWifiClientTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 10), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientTxPower.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientTxPower.setDescription('The current Tx-Power of this wireless client.')
ogWifiClientLinkQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 11), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientLinkQuality.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientLinkQuality.setDescription('The normalized link quality of this wireless client.')
ogWifiClientRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 12), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientRssi.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientRssi.setDescription('The current Signal Level of this wireless client.')
ogWifiClientRxInvalidNwid = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientRxInvalidNwid.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientRxInvalidNwid.setDescription("The count of invalid Network ID's for this wireless client.")
ogWifiClientRxInvalidCrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientRxInvalidCrypt.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientRxInvalidCrypt.setDescription("The count of invalid crypt's for this wireless client.")
ogWifiClientRxInvalidFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientRxInvalidFrag.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientRxInvalidFrag.setDescription("The count of invalid frag's for this wireless client.")
ogWifiClientRxInvalidRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientRxInvalidRetries.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientRxInvalidRetries.setDescription('The count of invalid retries for this wireless client.')
ogWifiClientRxInvalidMisc = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientRxInvalidMisc.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientRxInvalidMisc.setDescription("The count of invalid misc's for this wireless client.")
ogWifiClientMissedBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientMissedBeacon.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientMissedBeacon.setDescription("The count of missed beacon's for this wireless client.")
ogWifiClientCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 18, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiClientCounter.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientCounter.setDescription('The number of alerts triggered by this wireless client.')
ogWifiApTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 19), )
if mibBuilder.loadTexts: ogWifiApTable.setStatus('current')
if mibBuilder.loadTexts: ogWifiApTable.setDescription('Ths wireless interface status table.')
ogWifiApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 19, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogWifiApIndex"))
if mibBuilder.loadTexts: ogWifiApEntry.setStatus('current')
if mibBuilder.loadTexts: ogWifiApEntry.setDescription('A wireless interface status entry')
ogWifiApIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogWifiApIndex.setStatus('current')
if mibBuilder.loadTexts: ogWifiApIndex.setDescription('Index of the wireless server status entry.')
ogWifiApInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 19, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApInterface.setStatus('current')
if mibBuilder.loadTexts: ogWifiApInterface.setDescription('The wireless access point network interface name.')
ogWifiApEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApEnabled.setStatus('current')
if mibBuilder.loadTexts: ogWifiApEnabled.setDescription('The enabled status of the wireless server.')
ogWifiApSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 19, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApSsid.setStatus('current')
if mibBuilder.loadTexts: ogWifiApSsid.setDescription('The SSID for this wireless access point.')
ogWifiApIeeeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unavailable", 1), ("ieee802Dot11B", 2), ("ieee802Dot11BG", 3), ("ieee802Dot11BGN", 4), ("ieee802Dot11ABGN", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApIeeeMode.setStatus('current')
if mibBuilder.loadTexts: ogWifiApIeeeMode.setDescription('The IEEE 802.11 mode of this wireless access point.')
ogWifiApFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 19, 1, 6), Unsigned32()).setUnits('0.0001 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApFrequency.setStatus('current')
if mibBuilder.loadTexts: ogWifiApFrequency.setDescription('The current frequency of this wireless access point.')
ogWifiApTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 19, 1, 7), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApTxPower.setStatus('current')
if mibBuilder.loadTexts: ogWifiApTxPower.setDescription('The current Tx-Power of this wireless access point.')
ogWifiApCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApCounter.setStatus('current')
if mibBuilder.loadTexts: ogWifiApCounter.setDescription('The number of alerts triggered by this wireless access point.')
ogWifiApClientTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 20), )
if mibBuilder.loadTexts: ogWifiApClientTable.setStatus('current')
if mibBuilder.loadTexts: ogWifiApClientTable.setDescription("This RPC's outlet table.")
ogWifiApClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 20, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogWifiApIndex"), (0, "OG-STATUSv2-MIB", "ogWifiApClientIndex"))
if mibBuilder.loadTexts: ogWifiApClientEntry.setStatus('current')
if mibBuilder.loadTexts: ogWifiApClientEntry.setDescription('RPC Outlet status entry')
ogWifiApClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogWifiApClientIndex.setStatus('current')
if mibBuilder.loadTexts: ogWifiApClientIndex.setDescription('Index within the wireless AP client table')
ogWifiApClientAp = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 20, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApClientAp.setStatus('current')
if mibBuilder.loadTexts: ogWifiApClientAp.setDescription('The wireless AP this client is assiciated with.')
ogWifiApClientMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 20, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApClientMac.setStatus('current')
if mibBuilder.loadTexts: ogWifiApClientMac.setDescription('The MAC address of the Access Point this wireless client is associated with.')
ogWifiApClientInactiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 20, 1, 4), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApClientInactiveTime.setStatus('current')
if mibBuilder.loadTexts: ogWifiApClientInactiveTime.setDescription('The Inactive Time for this wireless client.')
ogWifiApClientRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 20, 1, 5), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApClientRxBytes.setStatus('current')
if mibBuilder.loadTexts: ogWifiApClientRxBytes.setDescription('The number of received bytes for this wireless client.')
ogWifiApClientRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 20, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApClientRxPackets.setStatus('current')
if mibBuilder.loadTexts: ogWifiApClientRxPackets.setDescription('The number of received packets for this wireless client.')
ogWifiApClientTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 20, 1, 7), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApClientTxBytes.setStatus('current')
if mibBuilder.loadTexts: ogWifiApClientTxBytes.setDescription('The number of transmitted bytes for this wireless client.')
ogWifiApClientTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 20, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApClientTxPackets.setStatus('current')
if mibBuilder.loadTexts: ogWifiApClientTxPackets.setDescription('The number of transmitted packets for this wireless client.')
ogWifiApClientRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 20, 1, 9), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApClientRssi.setStatus('current')
if mibBuilder.loadTexts: ogWifiApClientRssi.setDescription('The current Signal Level of this wireless client.')
ogWifiApClientTxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 20, 1, 10), Unsigned32()).setUnits('Mb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: ogWifiApClientTxBitRate.setStatus('current')
if mibBuilder.loadTexts: ogWifiApClientTxBitRate.setDescription('The current transmission bit-rate of this wireless client.')
ogCheckTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 21), )
if mibBuilder.loadTexts: ogCheckTable.setStatus('current')
if mibBuilder.loadTexts: ogCheckTable.setDescription('Ths auto-response check table.')
ogCheckEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 21, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogCheckIndex"))
if mibBuilder.loadTexts: ogCheckEntry.setStatus('current')
if mibBuilder.loadTexts: ogCheckEntry.setDescription('An auto-response check entry')
ogCheckIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogCheckIndex.setStatus('current')
if mibBuilder.loadTexts: ogCheckIndex.setDescription('Index of the auto-response rule')
ogCheckName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 21, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCheckName.setStatus('current')
if mibBuilder.loadTexts: ogCheckName.setDescription('The ID of this auto-response rule.')
ogCheckRepeatTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCheckRepeatTimeout.setStatus('current')
if mibBuilder.loadTexts: ogCheckRepeatTimeout.setDescription('The minimum seconds before trigger actions can be repeated\n\t\tfor  this auto-response.')
ogCheckResetTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 21, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCheckResetTimeout.setStatus('current')
if mibBuilder.loadTexts: ogCheckResetTimeout.setDescription('The minimum seconds after resolution before this\n\t\tauto-response can be triggered again.')
ogCheckType = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 255))).clone(namedValues=NamedValues(("unknown", 1), ("serialSignal", 2), ("serialUser", 3), ("serialPattern", 4), ("hostPing", 5), ("hostService", 6), ("hostUser", 7), ("webUser", 8), ("envTemperature", 9), ("envHumidity", 10), ("dioInput", 11), ("netInterface", 12), ("powerSupplyInputVoltage", 13), ("powerSupplyOutputCurrent", 14), ("powerSupplyTemperature", 15), ("upsInputVoltage", 16), ("upsBatteryCharge", 17), ("upsBatteryTemperature", 18), ("upsOutputLoad", 19), ("upsInputFrequency", 20), ("upsStateOnBattery", 21), ("upsStateLowBattery", 22), ("rpcInput", 23), ("rpcOutletState", 24), ("rpcOutletOutput", 25), ("cellMessage", 26), ("cellData", 27), ("cellSignal", 28), ("cellApn", 29), ("cellTower", 30), ("cellNetwork", 31), ("wirelessClientConnect", 32), ("wirelessClientSignal", 33), ("wirelessApAssociation", 34), ("wirelessApAuthentication", 35), ("dialPoolHealth", 36), ("cliUser", 37), ("custom", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCheckType.setStatus('current')
if mibBuilder.loadTexts: ogCheckType.setDescription('The auto-response check type')
ogCheckTriggerActions = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 21, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCheckTriggerActions.setStatus('current')
if mibBuilder.loadTexts: ogCheckTriggerActions.setDescription('The number of Trigger Actions configured for the auto-response.')
ogCheckResolveActions = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 21, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCheckResolveActions.setStatus('current')
if mibBuilder.loadTexts: ogCheckResolveActions.setDescription('The number of Resolve Actions configured for the auto-response.')
ogCheckDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 22), )
if mibBuilder.loadTexts: ogCheckDeviceTable.setStatus('current')
if mibBuilder.loadTexts: ogCheckDeviceTable.setDescription('The auto-response device reference table.')
ogCheckDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 22, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogCheckIndex"), (0, "OG-STATUSv2-MIB", "ogCheckDeviceIndex"))
if mibBuilder.loadTexts: ogCheckDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: ogCheckDeviceEntry.setDescription('RPC Outlet status entry')
ogCheckDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogCheckDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: ogCheckDeviceIndex.setDescription('Index within the auto-response device outlet table')
ogCheckDeviceCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 22, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCheckDeviceCheck.setStatus('current')
if mibBuilder.loadTexts: ogCheckDeviceCheck.setDescription('The check this device is associated with.')
ogCheckDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 22, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCheckDeviceName.setStatus('current')
if mibBuilder.loadTexts: ogCheckDeviceName.setDescription('The name of a device pertaining to the auto-reponse.')
ogCheckDeviceRef = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 22, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCheckDeviceRef.setStatus('current')
if mibBuilder.loadTexts: ogCheckDeviceRef.setDescription('The reference ID of the device pertaining to the auto-reponse.')
ogAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 25049, 17, 23))
ogAlarmLogTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1), )
if mibBuilder.loadTexts: ogAlarmLogTable.setStatus('current')
if mibBuilder.loadTexts: ogAlarmLogTable.setDescription('The alarm history table.')
ogAlarmLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogAlarmLogIndex"))
if mibBuilder.loadTexts: ogAlarmLogEntry.setStatus('current')
if mibBuilder.loadTexts: ogAlarmLogEntry.setDescription('An alarm entry.')
ogAlarmLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogAlarmLogIndex.setStatus('current')
if mibBuilder.loadTexts: ogAlarmLogIndex.setDescription('Index within the current alarm table of this alarm.')
ogAlarmEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogAlarmEventId.setStatus('current')
if mibBuilder.loadTexts: ogAlarmEventId.setDescription('Unique event ID for this alarm.')
ogAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogAlarmName.setStatus('current')
if mibBuilder.loadTexts: ogAlarmName.setDescription('The check ID that this alarm pertains to.')
ogAlarmCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogAlarmCheck.setStatus('current')
if mibBuilder.loadTexts: ogAlarmCheck.setDescription('The auto-response index this alarm relates to.')
ogAlarmInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogAlarmInstance.setStatus('current')
if mibBuilder.loadTexts: ogAlarmInstance.setDescription('The reference index for this alarm instance.')
ogAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogAlarmTime.setStatus('current')
if mibBuilder.loadTexts: ogAlarmTime.setDescription('The UTC date and time for when this alarm was created.')
ogAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 255, 65535))).clone(namedValues=NamedValues(("serialSignalCts", 1), ("serialSignalDcd", 2), ("serialSignalDsr", 3), ("serialPatternTx", 4), ("serialPatternRx", 5), ("serialUserSession", 6), ("hostPingDown", 7), ("hostPingUp", 8), ("hostServiceDown", 9), ("hostServiceUp", 10), ("hostUserSession", 11), ("webUserSession", 12), ("envTemperatureLow", 13), ("envTemperatureHigh", 14), ("envHumidityLow", 15), ("envHumidityHigh", 16), ("dioSignalOpened", 17), ("dioSignalClosed", 18), ("netInterfaceDown", 19), ("netInterfaceStarting", 20), ("netInterfaceUp", 21), ("netInterfaceStopping", 22), ("powerSupplyInputVoltageLow", 23), ("powerSupplyInputVoltageHigh", 24), ("powerSupplyOutputCurrentLow", 25), ("powerSupplyOutputCurrentHigh", 26), ("powerSupplyTemperatureLow", 27), ("powerSupplyTemperatureHigh", 28), ("upsTemperatureHigh", 29), ("upsTemperatureLow", 30), ("upsHumidityHigh", 31), ("upsHumidityLow", 32), ("upsOnBattery", 33), ("upsLowBattery", 34), ("upsBatteryChargeLow", 35), ("upsBatteryChargeHigh", 36), ("upsBatteryVoltageLow", 37), ("upsBatteryVoltageHigh", 38), ("upsBatteryCurrentLow", 39), ("upsBatteryCurrentHigh", 40), ("upsBatteryTemperatureLow", 41), ("upsBatteryTemperatureHigh", 42), ("upsInputFrequencyLow", 43), ("upsInputFrequencyHigh", 44), ("upsInputVoltageLow", 45), ("upsInputVoltageHigh", 46), ("upsInputCurrentLow", 47), ("upsInputCurrentHigh", 48), ("upsOutputFrequencyLow", 49), ("upsOutputFrequencyHigh", 50), ("upsOutputVoltageLow", 51), ("upsOutputVoltageHigh", 52), ("upsOutputCurrentLow", 53), ("upsOutputCurrentHigh", 54), ("upsOutputLoadLow", 55), ("upsOutputLoadHigh", 56), ("upsOutputPowerLow", 57), ("upsOutputPowerHigh", 58), ("upsOutputTruePowerLow", 59), ("upsOutputTruePowerHigh", 60), ("rpcInputFrequencyLow", 61), ("rpcInputFrequencyHigh", 62), ("rpcInputVoltageLow", 63), ("rpcInputVoltageHigh", 64), ("rpcInputCurrentLow", 65), ("rpcInputCurrentHigh", 66), ("rpcOutletFrequencyHigh", 67), ("rpcOutletFrequencyLow", 68), ("rpcOutletVoltageHigh", 69), ("rpcOutletVoltageLow", 70), ("rpcOutletCurrentHigh", 71), ("rpcOutletCurrentLow", 72), ("rpcOutletStateOff", 73), ("rpcOutletStateOn", 74), ("cellDataUsage", 75), ("cellMessageReceived", 76), ("cellSignalLow", 77), ("cellSignalHigh", 78), ("cellApnChanged", 79), ("cellTowerChanged", 80), ("cellNetworkChanged", 81), ("wirelessClientConnected", 82), ("wirelessClientDisconnected", 83), ("wirelessClientSignalLow", 84), ("wirelessClientSignalHigh", 85), ("wirelessApAssociation", 86), ("wirelessApDisassociation", 87), ("wirelessApAuthenticationFailure", 88), ("dialPoolHealth", 89), ("cliUserSession", 90), ("customCheckFailure", 255), ("unknown", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogAlarmType.setStatus('current')
if mibBuilder.loadTexts: ogAlarmType.setDescription('A reference to an Alarm Type Object.')
ogAlarmSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogAlarmSummary.setStatus('current')
if mibBuilder.loadTexts: ogAlarmSummary.setDescription('The human readable summary of this alarm.')
ogAlarmDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogAlarmDevice.setStatus('current')
if mibBuilder.loadTexts: ogAlarmDevice.setDescription('The device ID that this alarm pertains to.')
ogAlarmUser = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogAlarmUser.setStatus('current')
if mibBuilder.loadTexts: ogAlarmUser.setDescription('The user ID that this alarm pertains to.')
ogAlarmTriggerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogAlarmTriggerValue.setStatus('current')
if mibBuilder.loadTexts: ogAlarmTriggerValue.setDescription('The threshold value which triggers the alarm.')
ogAlarmCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogAlarmCurrentValue.setStatus('current')
if mibBuilder.loadTexts: ogAlarmCurrentValue.setDescription('The value as of the time of this entry.')
ogAlarmPreviousValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogAlarmPreviousValue.setStatus('current')
if mibBuilder.loadTexts: ogAlarmPreviousValue.setDescription('The former value of this entry.')
ogAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("triggered", 2), ("resolving", 3), ("waiting", 4), ("disabled", 5), ("unresolvable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogAlarmState.setStatus('current')
if mibBuilder.loadTexts: ogAlarmState.setDescription('The effective alarm state.')
ogCurrentAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2), )
if mibBuilder.loadTexts: ogCurrentAlarmTable.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmTable.setDescription('The alarm history table.')
ogCurrentAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2, 1), ).setIndexNames((0, "OG-STATUSv2-MIB", "ogCurrentAlarmIndex"))
if mibBuilder.loadTexts: ogCurrentAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmEntry.setDescription('An alarm entry.')
ogCurrentAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ogCurrentAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmIndex.setDescription('Index within the current alarm table of this alarm.')
ogCurrentAlarmEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCurrentAlarmEventId.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmEventId.setDescription('Unique event ID for this alarm.')
ogCurrentAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCurrentAlarmName.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmName.setDescription('The ID of the check this alarm pertains to.')
ogCurrentAlarmCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCurrentAlarmCheck.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmCheck.setDescription('The auto-response index this alarm relates to.')
ogCurrentAlarmInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCurrentAlarmInstance.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmInstance.setDescription('The reference index for this alarm instance.')
ogCurrentAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCurrentAlarmTime.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmTime.setDescription('The UTC date and time for when this alarm was created.')
ogCurrentAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 255, 65535))).clone(namedValues=NamedValues(("serialSignalCts", 1), ("serialSignalDcd", 2), ("serialSignalDsr", 3), ("serialPatternTx", 4), ("serialPatternRx", 5), ("serialUserSession", 6), ("hostPingDown", 7), ("hostPingUp", 8), ("hostServiceDown", 9), ("hostServiceUp", 10), ("hostUserSession", 11), ("webUserSession", 12), ("envTemperatureLow", 13), ("envTemperatureHigh", 14), ("envHumidityLow", 15), ("envHumidityHigh", 16), ("dioSignalOpened", 17), ("dioSignalClosed", 18), ("netInterfaceDown", 19), ("netInterfaceStarting", 20), ("netInterfaceUp", 21), ("netInterfaceStopping", 22), ("powerSupplyInputVoltageLow", 23), ("powerSupplyInputVoltageHigh", 24), ("powerSupplyOutputCurrentLow", 25), ("powerSupplyOutputCurrentHigh", 26), ("powerSupplyTemperatureLow", 27), ("powerSupplyTemperatureHigh", 28), ("upsTemperatureHigh", 29), ("upsTemperatureLow", 30), ("upsHumidityHigh", 31), ("upsHumidityLow", 32), ("upsOnBattery", 33), ("upsLowBattery", 34), ("upsBatteryChargeLow", 35), ("upsBatteryChargeHigh", 36), ("upsBatteryVoltageLow", 37), ("upsBatteryVoltageHigh", 38), ("upsBatteryCurrentLow", 39), ("upsBatteryCurrentHigh", 40), ("upsBatteryTemperatureLow", 41), ("upsBatteryTemperatureHigh", 42), ("upsInputFrequencyLow", 43), ("upsInputFrequencyHigh", 44), ("upsInputVoltageLow", 45), ("upsInputVoltageHigh", 46), ("upsInputCurrentLow", 47), ("upsInputCurrentHigh", 48), ("upsOutputFrequencyLow", 49), ("upsOutputFrequencyHigh", 50), ("upsOutputVoltageLow", 51), ("upsOutputVoltageHigh", 52), ("upsOutputCurrentLow", 53), ("upsOutputCurrentHigh", 54), ("upsOutputLoadLow", 55), ("upsOutputLoadHigh", 56), ("upsOutputPowerLow", 57), ("upsOutputPowerHigh", 58), ("upsOutputTruePowerLow", 59), ("upsOutputTruePowerHigh", 60), ("rpcInputFrequencyLow", 61), ("rpcInputFrequencyHigh", 62), ("rpcInputVoltageLow", 63), ("rpcInputVoltageHigh", 64), ("rpcInputCurrentLow", 65), ("rpcInputCurrentHigh", 66), ("rpcOutletFrequencyHigh", 67), ("rpcOutletFrequencyLow", 68), ("rpcOutletVoltageHigh", 69), ("rpcOutletVoltageLow", 70), ("rpcOutletCurrentHigh", 71), ("rpcOutletCurrentLow", 72), ("rpcOutletStateOff", 73), ("rpcOutletStateOn", 74), ("cellDataUsage", 75), ("cellMessageReceived", 76), ("cellSignalLow", 77), ("cellSignalHigh", 78), ("cellApnChanged", 79), ("cellTowerChanged", 80), ("cellNetworkChanged", 81), ("wirelessClientConnected", 82), ("wirelessClientDisconnected", 83), ("wirelessClientSignalLow", 84), ("wirelessClientSignalHigh", 85), ("wirelessApAssociation", 86), ("wirelessApDisassociation", 87), ("wirelessApAuthenticationFailure", 88), ("dialPoolHealth", 89), ("cliUserSession", 90), ("customCheckFailure", 255), ("unknown", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCurrentAlarmType.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmType.setDescription('The specific Alarm Type.')
ogCurrentAlarmSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCurrentAlarmSummary.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmSummary.setDescription('A readable summary of this alarm.')
ogCurrentAlarmDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCurrentAlarmDevice.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmDevice.setDescription('The ID of the device this alarm pertains to.')
ogCurrentAlarmUser = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCurrentAlarmUser.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmUser.setDescription('The ID of the user this alarm pertains to.')
ogCurrentAlarmTriggerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCurrentAlarmTriggerValue.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmTriggerValue.setDescription('The threshold value which triggers the alarm.')
ogCurrentAlarmCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCurrentAlarmCurrentValue.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmCurrentValue.setDescription('The value as of the time of this entry.')
ogCurrentAlarmPreviousValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCurrentAlarmPreviousValue.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmPreviousValue.setDescription('The former value of this entry.')
ogCurrentAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 25049, 17, 23, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("triggered", 2), ("resolving", 3), ("waiting", 4), ("disabled", 5), ("unresolvable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ogCurrentAlarmState.setStatus('current')
if mibBuilder.loadTexts: ogCurrentAlarmState.setDescription('The effective alarm state.')
ogStatus2NotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25049, 17, 100))
ogMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0))
ogSerialSignalNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 1)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogSerialSignalNotification.setStatus('current')
if mibBuilder.loadTexts: ogSerialSignalNotification.setDescription('The notification sent when a serial signal changes.')
ogSerialPatternNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 2)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogSerialPatternNotification.setStatus('current')
if mibBuilder.loadTexts: ogSerialPatternNotification.setDescription('The notification sent when a pattern is matched on a serial\n\t\tport .')
ogSerialUserNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 3)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogSerialUserNotification.setStatus('current')
if mibBuilder.loadTexts: ogSerialUserNotification.setDescription('The notification sent when a user logs in or out of a serial\n\t\tconsole.')
ogHostPingNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 4)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogHostPingNotification.setStatus('current')
if mibBuilder.loadTexts: ogHostPingNotification.setDescription('The notification sent when a host stops or resumes responding\n\t\tto a ping.')
ogHostServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 5)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogHostServiceNotification.setStatus('current')
if mibBuilder.loadTexts: ogHostServiceNotification.setDescription('The notification sent when a host service stops or resumes.')
ogHostUserNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 6)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogHostUserNotification.setStatus('current')
if mibBuilder.loadTexts: ogHostUserNotification.setDescription('The notification sent when a user logs in or out of a network\n\t\thost.')
ogWebUserNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 7)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogWebUserNotification.setStatus('current')
if mibBuilder.loadTexts: ogWebUserNotification.setDescription('The notification sent when a user logs in or out of the web\n\t\tinterface.')
ogEmdTemperatureNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 8)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogEmdTemperatureNotification.setStatus('current')
if mibBuilder.loadTexts: ogEmdTemperatureNotification.setDescription('The notification sent when a temperature event occurs')
ogEmdHumidityNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 9)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogEmdHumidityNotification.setStatus('current')
if mibBuilder.loadTexts: ogEmdHumidityNotification.setDescription('The notification sent when a humidity event occurs')
ogEmdDioNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 10)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogEmdDioNotification.setStatus('current')
if mibBuilder.loadTexts: ogEmdDioNotification.setDescription('The notification sent when a Digital I/O input event occurs')
ogPowerSupplyInputNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 11)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogPowerSupplyInputNotification.setStatus('current')
if mibBuilder.loadTexts: ogPowerSupplyInputNotification.setDescription('The notification sent when a power supply voltage alarm occurs')
ogPowerSupplyOutputNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 12)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogPowerSupplyOutputNotification.setStatus('current')
if mibBuilder.loadTexts: ogPowerSupplyOutputNotification.setDescription('The notification sent when a power supply voltage alarm occurs')
ogPowerSupplyTempNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 13)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogPowerSupplyTempNotification.setStatus('current')
if mibBuilder.loadTexts: ogPowerSupplyTempNotification.setDescription('The notification sent when a power supply voltage alarm occurs')
ogUpsNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 14)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogUpsNotification.setStatus('current')
if mibBuilder.loadTexts: ogUpsNotification.setDescription('The notification sent when a UPS alarm occurs')
ogUpsBatteryNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 15)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogUpsBatteryNotification.setStatus('current')
if mibBuilder.loadTexts: ogUpsBatteryNotification.setDescription('The notification sent when a UPS battery alarm occurs')
ogUpsInputNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 16)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogUpsInputNotification.setStatus('current')
if mibBuilder.loadTexts: ogUpsInputNotification.setDescription('The notification sent when a UPS input alarm occurs')
ogUpsOutputNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 17)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogUpsOutputNotification.setStatus('current')
if mibBuilder.loadTexts: ogUpsOutputNotification.setDescription('The notification sent when a UPS output alarm occurs')
ogRpcInputNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 18)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogRpcInputNotification.setStatus('current')
if mibBuilder.loadTexts: ogRpcInputNotification.setDescription('The notification sent when a RPC input alarm occurs')
ogRpcOutputNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 19)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogRpcOutputNotification.setStatus('current')
if mibBuilder.loadTexts: ogRpcOutputNotification.setDescription('The notification sent when a RPC output alarm occurs')
ogRpcOutletNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 20)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogRpcOutletNotification.setStatus('current')
if mibBuilder.loadTexts: ogRpcOutletNotification.setDescription('The notification sent when a RPC output alarm occurs')
ogNetInterfaceNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 21)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogNetInterfaceNotification.setStatus('current')
if mibBuilder.loadTexts: ogNetInterfaceNotification.setDescription('The notification sent when a network interface event occurs.')
ogCellDataNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 22)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogCellDataNotification.setStatus('current')
if mibBuilder.loadTexts: ogCellDataNotification.setDescription('The notification sent when a cellular data alarm occurs.')
ogCellMessageNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 23)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogCellMessageNotification.setStatus('current')
if mibBuilder.loadTexts: ogCellMessageNotification.setDescription('The notification sent when an SMS command alarm occurs.')
ogCellSignalNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 24)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogCellSignalNotification.setStatus('current')
if mibBuilder.loadTexts: ogCellSignalNotification.setDescription('The notification sent when a cellular signal alarm occurs.')
ogCellApnNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 25)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogCellApnNotification.setStatus('current')
if mibBuilder.loadTexts: ogCellApnNotification.setDescription('The notification sent when a cellular APN alarm occurs.')
ogCellTowerNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 26)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogCellTowerNotification.setStatus('current')
if mibBuilder.loadTexts: ogCellTowerNotification.setDescription('The notification sent when a cellular tower alarm occurs.')
ogCellNetworkNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 27)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogCellNetworkNotification.setStatus('current')
if mibBuilder.loadTexts: ogCellNetworkNotification.setDescription('The notification sent when a cellular network alarm occurs.')
ogWifiClientConnectNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 28)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogWifiClientConnectNotification.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientConnectNotification.setDescription('The notification sent when a wireless client connects or\n\t\tdisconnects.')
ogWifiClientSignalNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 29)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogWifiClientSignalNotification.setStatus('current')
if mibBuilder.loadTexts: ogWifiClientSignalNotification.setDescription('The notification sent when a wireless client signal changes.')
ogWifiApAssociationNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 30)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogWifiApAssociationNotification.setStatus('current')
if mibBuilder.loadTexts: ogWifiApAssociationNotification.setDescription('The notification sent when a wireless client connects or\n\t\tdisconnects to this AP.')
ogWifiApAuthNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 31)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogWifiApAuthNotification.setStatus('current')
if mibBuilder.loadTexts: ogWifiApAuthNotification.setDescription('The notification sent when a wireless client fails to \n\t\tauthenticate with this AP.')
ogDialPoolHealthNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 32)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogDialPoolHealthNotification.setStatus('current')
if mibBuilder.loadTexts: ogDialPoolHealthNotification.setDescription('The notification sent when dial-pool health alarm occurs.')
ogCustomNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 33)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogCustomNotification.setStatus('current')
if mibBuilder.loadTexts: ogCustomNotification.setDescription('The notification sent when a custom check is triggered.')
ogCliUserSessionNotification = NotificationType((1, 3, 6, 1, 4, 1, 25049, 17, 100, 0, 34)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"))
if mibBuilder.loadTexts: ogCliUserSessionNotification.setStatus('current')
if mibBuilder.loadTexts: ogCliUserSessionNotification.setDescription('The notification sent when a user logs in or out of a CLI\n\t\tsession.')
ogStatus2Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25049, 17, 65535))
ogStatus2Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25049, 17, 65535, 1))
ogStatus2Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 25049, 17, 65535, 2))
ogStatus2Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25049, 17, 65535, 1, 1)).setObjects(("OG-STATUSv2-MIB", "ogBasicStatusGroup"), ("OG-STATUSv2-MIB", "ogBasicAlarmGroup"), ("OG-STATUSv2-MIB", "ogBasicNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ogStatus2Compliance = ogStatus2Compliance.setStatus('current')
if mibBuilder.loadTexts: ogStatus2Compliance.setDescription('The compliance statement for the Opengear status MIB.')
ogBasicStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25049, 17, 65535, 2, 1)).setObjects(("OG-STATUSv2-MIB", "ogFirmwareVersion"), ("OG-STATUSv2-MIB", "ogSerialNumber"), ("OG-STATUSv2-MIB", "ogSerialPortLabel"), ("OG-STATUSv2-MIB", "ogSerialPortSpeed"), ("OG-STATUSv2-MIB", "ogSerialPortDataBits"), ("OG-STATUSv2-MIB", "ogSerialPortParity"), ("OG-STATUSv2-MIB", "ogSerialPortStopBits"), ("OG-STATUSv2-MIB", "ogSerialPortFlowControl"), ("OG-STATUSv2-MIB", "ogSerialPortMode"), ("OG-STATUSv2-MIB", "ogSerialPortLogLevel"), ("OG-STATUSv2-MIB", "ogSerialPortRxBytes"), ("OG-STATUSv2-MIB", "ogSerialPortTxBytes"), ("OG-STATUSv2-MIB", "ogSerialPortFramingErrors"), ("OG-STATUSv2-MIB", "ogSerialPortParityErrors"), ("OG-STATUSv2-MIB", "ogSerialPortOverrunErrors"), ("OG-STATUSv2-MIB", "ogSerialPortBreaks"), ("OG-STATUSv2-MIB", "ogSerialPortDCD"), ("OG-STATUSv2-MIB", "ogSerialPortDTR"), ("OG-STATUSv2-MIB", "ogSerialPortDSR"), ("OG-STATUSv2-MIB", "ogSerialPortCTS"), ("OG-STATUSv2-MIB", "ogSerialPortRTS"), ("OG-STATUSv2-MIB", "ogSerialUserStartTime"), ("OG-STATUSv2-MIB", "ogSerialUserPort"), ("OG-STATUSv2-MIB", "ogSerialUserLabel"), ("OG-STATUSv2-MIB", "ogSerialUserName"), ("OG-STATUSv2-MIB", "ogHostName"), ("OG-STATUSv2-MIB", "ogHostIpV4Address"), ("OG-STATUSv2-MIB", "ogHostIpV6Address"), ("OG-STATUSv2-MIB", "ogHostServiceHost"), ("OG-STATUSv2-MIB", "ogHostServiceType"), ("OG-STATUSv2-MIB", "ogHostServicePort"), ("OG-STATUSv2-MIB", "ogHostServiceStatus"), ("OG-STATUSv2-MIB", "ogHostServiceCounter"), ("OG-STATUSv2-MIB", "ogHostUserHost"), ("OG-STATUSv2-MIB", "ogHostUserStartTime"), ("OG-STATUSv2-MIB", "ogHostUserAddress"), ("OG-STATUSv2-MIB", "ogHostUserHostName"), ("OG-STATUSv2-MIB", "ogHostUserName"), ("OG-STATUSv2-MIB", "ogWebUserStartTime"), ("OG-STATUSv2-MIB", "ogWebUserName"), ("OG-STATUSv2-MIB", "ogWebUserSourceAddress"), ("OG-STATUSv2-MIB", "ogWebUserSourcePort"), ("OG-STATUSv2-MIB", "ogEmdName"), ("OG-STATUSv2-MIB", "ogEmdDescription"), ("OG-STATUSv2-MIB", "ogEmdEnabled"), ("OG-STATUSv2-MIB", "ogEmdLogEnabled"), ("OG-STATUSv2-MIB", "ogEmdConnectType"), ("OG-STATUSv2-MIB", "ogEmdTemperatureTotal"), ("OG-STATUSv2-MIB", "ogEmdHumidityTotal"), ("OG-STATUSv2-MIB", "ogEmdDioInputTotal"), ("OG-STATUSv2-MIB", "ogEmdTemperatureEmd"), ("OG-STATUSv2-MIB", "ogEmdTemperatureName"), ("OG-STATUSv2-MIB", "ogEmdTemperatureDescription"), ("OG-STATUSv2-MIB", "ogEmdTemperatureValue"), ("OG-STATUSv2-MIB", "ogEmdTemperatureCounter"), ("OG-STATUSv2-MIB", "ogEmdHumidityEmd"), ("OG-STATUSv2-MIB", "ogEmdHumidityName"), ("OG-STATUSv2-MIB", "ogEmdHumidityDescription"), ("OG-STATUSv2-MIB", "ogEmdHumidityValue"), ("OG-STATUSv2-MIB", "ogEmdHumidityCounter"), ("OG-STATUSv2-MIB", "ogEmdDioEmd"), ("OG-STATUSv2-MIB", "ogEmdDioName"), ("OG-STATUSv2-MIB", "ogEmdDioDescription"), ("OG-STATUSv2-MIB", "ogEmdDioType"), ("OG-STATUSv2-MIB", "ogEmdDioDirection"), ("OG-STATUSv2-MIB", "ogEmdDioState"), ("OG-STATUSv2-MIB", "ogEmdDioTriggerMode"), ("OG-STATUSv2-MIB", "ogEmdDioCounter"), ("OG-STATUSv2-MIB", "ogNetInterfaceName"), ("OG-STATUSv2-MIB", "ogNetInterfaceType"), ("OG-STATUSv2-MIB", "ogNetInterfaceState"), ("OG-STATUSv2-MIB", "ogPowerSupplyName"), ("OG-STATUSv2-MIB", "ogPowerSupplyInputVoltage"), ("OG-STATUSv2-MIB", "ogPowerSupplyOutputCurrent"), ("OG-STATUSv2-MIB", "ogPowerSupplyTemperature"), ("OG-STATUSv2-MIB", "ogUpsName"), ("OG-STATUSv2-MIB", "ogUpsDescription"), ("OG-STATUSv2-MIB", "ogUpsType"), ("OG-STATUSv2-MIB", "ogUpsLogEnabled"), ("OG-STATUSv2-MIB", "ogUpsConnectType"), ("OG-STATUSv2-MIB", "ogUpsState"), ("OG-STATUSv2-MIB", "ogUpsTemperature"), ("OG-STATUSv2-MIB", "ogUpsHumidity"), ("OG-STATUSv2-MIB", "ogUpsBatteryState"), ("OG-STATUSv2-MIB", "ogUpsBatteryRunTime"), ("OG-STATUSv2-MIB", "ogUpsBatteryRunTimeLow"), ("OG-STATUSv2-MIB", "ogUpsBatteryRunTimeRestart"), ("OG-STATUSv2-MIB", "ogUpsBatteryCharge"), ("OG-STATUSv2-MIB", "ogUpsBatteryVoltage"), ("OG-STATUSv2-MIB", "ogUpsBatteryNominalVoltage"), ("OG-STATUSv2-MIB", "ogUpsBatteryCurrent"), ("OG-STATUSv2-MIB", "ogUpsBatteryNominalCurrent"), ("OG-STATUSv2-MIB", "ogUpsBatteryTemperature"), ("OG-STATUSv2-MIB", "ogUpsInputFrequency"), ("OG-STATUSv2-MIB", "ogUpsInputNominalFrequency"), ("OG-STATUSv2-MIB", "ogUpsInputVoltage"), ("OG-STATUSv2-MIB", "ogUpsInputNominalVoltage"), ("OG-STATUSv2-MIB", "ogUpsInputCurrent"), ("OG-STATUSv2-MIB", "ogUpsInputNominalCurrent"), ("OG-STATUSv2-MIB", "ogUpsOutputFrequency"), ("OG-STATUSv2-MIB", "ogUpsOutputNominalFrequency"), ("OG-STATUSv2-MIB", "ogUpsOutputVoltage"), ("OG-STATUSv2-MIB", "ogUpsOutputNominalVoltage"), ("OG-STATUSv2-MIB", "ogUpsOutputCurrent"), ("OG-STATUSv2-MIB", "ogUpsOutputNominalCurrent"), ("OG-STATUSv2-MIB", "ogUpsOutputLoad"), ("OG-STATUSv2-MIB", "ogUpsOutputPower"), ("OG-STATUSv2-MIB", "ogUpsOutputTruePower"), ("OG-STATUSv2-MIB", "ogUpsCounter"), ("OG-STATUSv2-MIB", "ogRpcName"), ("OG-STATUSv2-MIB", "ogRpcDescription"), ("OG-STATUSv2-MIB", "ogRpcType"), ("OG-STATUSv2-MIB", "ogRpcLogEnabled"), ("OG-STATUSv2-MIB", "ogRpcOutletTotal"), ("OG-STATUSv2-MIB", "ogRpcMaxTemperature"), ("OG-STATUSv2-MIB", "ogRpcConnectType"), ("OG-STATUSv2-MIB", "ogRpcInputFrequency"), ("OG-STATUSv2-MIB", "ogRpcInputVoltage"), ("OG-STATUSv2-MIB", "ogRpcInputCurrent"), ("OG-STATUSv2-MIB", "ogRpcCounter"), ("OG-STATUSv2-MIB", "ogRpcOutletRpc"), ("OG-STATUSv2-MIB", "ogRpcOutletName"), ("OG-STATUSv2-MIB", "ogRpcOutletState"), ("OG-STATUSv2-MIB", "ogRpcOutletFrequency"), ("OG-STATUSv2-MIB", "ogRpcOutletCurrent"), ("OG-STATUSv2-MIB", "ogRpcOutletVoltage"), ("OG-STATUSv2-MIB", "ogRpcOutletLoad"), ("OG-STATUSv2-MIB", "ogCellModemVendor"), ("OG-STATUSv2-MIB", "ogCellModemModel"), ("OG-STATUSv2-MIB", "ogCellModemEnabled"), ("OG-STATUSv2-MIB", "ogCellModemConnected"), ("OG-STATUSv2-MIB", "ogCellModemNetwork"), ("OG-STATUSv2-MIB", "ogCellModemRegistered"), ("OG-STATUSv2-MIB", "ogCellModemTower"), ("OG-STATUSv2-MIB", "ogCellModemRadioTechnology"), ("OG-STATUSv2-MIB", "ogCellModemApn"), ("OG-STATUSv2-MIB", "ogCellModem3gRssi"), ("OG-STATUSv2-MIB", "ogCellModem4gRssi"), ("OG-STATUSv2-MIB", "ogCellModemSessionTime"), ("OG-STATUSv2-MIB", "ogCellModemSelectedSimCard"), ("OG-STATUSv2-MIB", "ogCellModemTemperature"), ("OG-STATUSv2-MIB", "ogCellModemCounter"), ("OG-STATUSv2-MIB", "ogCellModemIMSI"), ("OG-STATUSv2-MIB", "ogWifiClientInterface"), ("OG-STATUSv2-MIB", "ogWifiClientEnabled"), ("OG-STATUSv2-MIB", "ogWifiClientEssid"), ("OG-STATUSv2-MIB", "ogWifiClientIeeeMode"), ("OG-STATUSv2-MIB", "ogWifiClientMode"), ("OG-STATUSv2-MIB", "ogWifiClientFrequency"), ("OG-STATUSv2-MIB", "ogWifiClientApMac"), ("OG-STATUSv2-MIB", "ogWifiClientBitRate"), ("OG-STATUSv2-MIB", "ogWifiClientTxPower"), ("OG-STATUSv2-MIB", "ogWifiClientLinkQuality"), ("OG-STATUSv2-MIB", "ogWifiClientRssi"), ("OG-STATUSv2-MIB", "ogWifiClientRxInvalidNwid"), ("OG-STATUSv2-MIB", "ogWifiClientRxInvalidCrypt"), ("OG-STATUSv2-MIB", "ogWifiClientRxInvalidFrag"), ("OG-STATUSv2-MIB", "ogWifiClientRxInvalidRetries"), ("OG-STATUSv2-MIB", "ogWifiClientRxInvalidMisc"), ("OG-STATUSv2-MIB", "ogWifiClientMissedBeacon"), ("OG-STATUSv2-MIB", "ogWifiClientCounter"), ("OG-STATUSv2-MIB", "ogWifiApInterface"), ("OG-STATUSv2-MIB", "ogWifiApEnabled"), ("OG-STATUSv2-MIB", "ogWifiApSsid"), ("OG-STATUSv2-MIB", "ogWifiApIeeeMode"), ("OG-STATUSv2-MIB", "ogWifiApFrequency"), ("OG-STATUSv2-MIB", "ogWifiApTxPower"), ("OG-STATUSv2-MIB", "ogWifiApCounter"), ("OG-STATUSv2-MIB", "ogWifiApClientAp"), ("OG-STATUSv2-MIB", "ogWifiApClientMac"), ("OG-STATUSv2-MIB", "ogWifiApClientInactiveTime"), ("OG-STATUSv2-MIB", "ogWifiApClientRxBytes"), ("OG-STATUSv2-MIB", "ogWifiApClientRxPackets"), ("OG-STATUSv2-MIB", "ogWifiApClientTxBytes"), ("OG-STATUSv2-MIB", "ogWifiApClientTxPackets"), ("OG-STATUSv2-MIB", "ogWifiApClientRssi"), ("OG-STATUSv2-MIB", "ogWifiApClientTxBitRate"), ("OG-STATUSv2-MIB", "ogCheckName"), ("OG-STATUSv2-MIB", "ogCheckRepeatTimeout"), ("OG-STATUSv2-MIB", "ogCheckResetTimeout"), ("OG-STATUSv2-MIB", "ogCheckType"), ("OG-STATUSv2-MIB", "ogCheckTriggerActions"), ("OG-STATUSv2-MIB", "ogCheckResolveActions"), ("OG-STATUSv2-MIB", "ogCheckDeviceCheck"), ("OG-STATUSv2-MIB", "ogCheckDeviceName"), ("OG-STATUSv2-MIB", "ogCheckDeviceRef"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ogBasicStatusGroup = ogBasicStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ogBasicStatusGroup.setDescription('A collection of objects to retrieve Opengear statistics.')
ogBasicAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25049, 17, 65535, 2, 2)).setObjects(("OG-STATUSv2-MIB", "ogAlarmEventId"), ("OG-STATUSv2-MIB", "ogAlarmName"), ("OG-STATUSv2-MIB", "ogAlarmCheck"), ("OG-STATUSv2-MIB", "ogAlarmInstance"), ("OG-STATUSv2-MIB", "ogAlarmTime"), ("OG-STATUSv2-MIB", "ogAlarmType"), ("OG-STATUSv2-MIB", "ogAlarmSummary"), ("OG-STATUSv2-MIB", "ogAlarmDevice"), ("OG-STATUSv2-MIB", "ogAlarmUser"), ("OG-STATUSv2-MIB", "ogAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogAlarmState"), ("OG-STATUSv2-MIB", "ogCurrentAlarmEventId"), ("OG-STATUSv2-MIB", "ogCurrentAlarmName"), ("OG-STATUSv2-MIB", "ogCurrentAlarmCheck"), ("OG-STATUSv2-MIB", "ogCurrentAlarmInstance"), ("OG-STATUSv2-MIB", "ogCurrentAlarmTime"), ("OG-STATUSv2-MIB", "ogCurrentAlarmType"), ("OG-STATUSv2-MIB", "ogCurrentAlarmSummary"), ("OG-STATUSv2-MIB", "ogCurrentAlarmDevice"), ("OG-STATUSv2-MIB", "ogCurrentAlarmUser"), ("OG-STATUSv2-MIB", "ogCurrentAlarmTriggerValue"), ("OG-STATUSv2-MIB", "ogCurrentAlarmCurrentValue"), ("OG-STATUSv2-MIB", "ogCurrentAlarmPreviousValue"), ("OG-STATUSv2-MIB", "ogCurrentAlarmState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ogBasicAlarmGroup = ogBasicAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: ogBasicAlarmGroup.setDescription('A collection of objects to report Opengear alarms.')
ogBasicNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25049, 17, 65535, 2, 3)).setObjects(("OG-STATUSv2-MIB", "ogSerialSignalNotification"), ("OG-STATUSv2-MIB", "ogSerialPatternNotification"), ("OG-STATUSv2-MIB", "ogSerialUserNotification"), ("OG-STATUSv2-MIB", "ogHostPingNotification"), ("OG-STATUSv2-MIB", "ogHostServiceNotification"), ("OG-STATUSv2-MIB", "ogHostUserNotification"), ("OG-STATUSv2-MIB", "ogWebUserNotification"), ("OG-STATUSv2-MIB", "ogEmdDioNotification"), ("OG-STATUSv2-MIB", "ogEmdTemperatureNotification"), ("OG-STATUSv2-MIB", "ogEmdHumidityNotification"), ("OG-STATUSv2-MIB", "ogPowerSupplyInputNotification"), ("OG-STATUSv2-MIB", "ogPowerSupplyOutputNotification"), ("OG-STATUSv2-MIB", "ogPowerSupplyTempNotification"), ("OG-STATUSv2-MIB", "ogUpsNotification"), ("OG-STATUSv2-MIB", "ogUpsInputNotification"), ("OG-STATUSv2-MIB", "ogUpsBatteryNotification"), ("OG-STATUSv2-MIB", "ogUpsOutputNotification"), ("OG-STATUSv2-MIB", "ogRpcInputNotification"), ("OG-STATUSv2-MIB", "ogRpcOutputNotification"), ("OG-STATUSv2-MIB", "ogRpcOutletNotification"), ("OG-STATUSv2-MIB", "ogNetInterfaceNotification"), ("OG-STATUSv2-MIB", "ogCellDataNotification"), ("OG-STATUSv2-MIB", "ogCellMessageNotification"), ("OG-STATUSv2-MIB", "ogCellSignalNotification"), ("OG-STATUSv2-MIB", "ogCellApnNotification"), ("OG-STATUSv2-MIB", "ogCellTowerNotification"), ("OG-STATUSv2-MIB", "ogCellNetworkNotification"), ("OG-STATUSv2-MIB", "ogWifiClientConnectNotification"), ("OG-STATUSv2-MIB", "ogWifiClientSignalNotification"), ("OG-STATUSv2-MIB", "ogWifiApAssociationNotification"), ("OG-STATUSv2-MIB", "ogWifiApAuthNotification"), ("OG-STATUSv2-MIB", "ogDialPoolHealthNotification"), ("OG-STATUSv2-MIB", "ogCustomNotification"), ("OG-STATUSv2-MIB", "ogCliUserSessionNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ogBasicNotificationGroup = ogBasicNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ogBasicNotificationGroup.setDescription('A collection of notifications for the status system.')
mibBuilder.exportSymbols("OG-STATUSv2-MIB", ogNetInterfaceEntry=ogNetInterfaceEntry, ogWifiClientFrequency=ogWifiClientFrequency, ogCellMessageNotification=ogCellMessageNotification, ogEmdDioNotification=ogEmdDioNotification, ogWifiClientIndex=ogWifiClientIndex, ogSerialUserPort=ogSerialUserPort, ogWifiClientIeeeMode=ogWifiClientIeeeMode, ogUpsOutputNominalVoltage=ogUpsOutputNominalVoltage, ogHostServiceStatus=ogHostServiceStatus, ogWifiClientRxInvalidRetries=ogWifiClientRxInvalidRetries, ogEmdDioDirection=ogEmdDioDirection, ogCliUserSessionNotification=ogCliUserSessionNotification, ogUpsConnectType=ogUpsConnectType, ogCellDataNotification=ogCellDataNotification, ogRpcIndex=ogRpcIndex, ogEmdDioEmd=ogEmdDioEmd, ogCellSignalNotification=ogCellSignalNotification, ogAlarmState=ogAlarmState, ogSerialPortCTS=ogSerialPortCTS, ogWifiApSsid=ogWifiApSsid, ogEmdDioType=ogEmdDioType, ogCellModem3gRssi=ogCellModem3gRssi, ogSerialPortBreaks=ogSerialPortBreaks, ogSerialPortParity=ogSerialPortParity, ogEmdTemperatureDescription=ogEmdTemperatureDescription, ogNetInterfaceType=ogNetInterfaceType, ogEmdTemperatureTable=ogEmdTemperatureTable, ogEmdDioInputTotal=ogEmdDioInputTotal, ogWebUserEntry=ogWebUserEntry, ogHostServiceType=ogHostServiceType, ogEmdTemperatureEntry=ogEmdTemperatureEntry, ogUpsState=ogUpsState, ogWifiClientTable=ogWifiClientTable, ogEmdTemperatureEmd=ogEmdTemperatureEmd, ogEmdTemperatureName=ogEmdTemperatureName, ogHostServiceNotification=ogHostServiceNotification, ogWifiApCounter=ogWifiApCounter, ogHostUserHostName=ogHostUserHostName, ogSerialPortTable=ogSerialPortTable, ogWifiClientMissedBeacon=ogWifiClientMissedBeacon, ogEmdDioIndex=ogEmdDioIndex, ogEmdHumidityValue=ogEmdHumidityValue, ogHostServiceIndex=ogHostServiceIndex, ogSerialPortLabel=ogSerialPortLabel, ogSerialPortLogLevel=ogSerialPortLogLevel, ogRpcOutletCurrent=ogRpcOutletCurrent, ogWebUserStartTime=ogWebUserStartTime, ogEmdEnabled=ogEmdEnabled, ogRpcInputCurrent=ogRpcInputCurrent, ogUpsHumidity=ogUpsHumidity, ogCurrentAlarmSummary=ogCurrentAlarmSummary, ogCellModemTower=ogCellModemTower, ogEmdEntry=ogEmdEntry, ogWifiClientRxInvalidCrypt=ogWifiClientRxInvalidCrypt, ogCellModemModel=ogCellModemModel, ogHostServiceCounter=ogHostServiceCounter, ogWifiApClientTable=ogWifiApClientTable, ogAlarmLogEntry=ogAlarmLogEntry, ogRpcOutletVoltage=ogRpcOutletVoltage, ogSerialPortFlowControl=ogSerialPortFlowControl, ogUpsOutputVoltage=ogUpsOutputVoltage, ogWifiApClientTxBytes=ogWifiApClientTxBytes, ogCheckRepeatTimeout=ogCheckRepeatTimeout, ogRpcOutletName=ogRpcOutletName, ogSerialUserEntry=ogSerialUserEntry, ogCurrentAlarmUser=ogCurrentAlarmUser, ogRpcOutletFrequency=ogRpcOutletFrequency, ogUpsTable=ogUpsTable, ogNetInterfaceState=ogNetInterfaceState, ogAlarmDevice=ogAlarmDevice, ogCheckTriggerActions=ogCheckTriggerActions, ogWifiApClientTxPackets=ogWifiApClientTxPackets, ogSerialPortSpeed=ogSerialPortSpeed, ogAlarmLogTable=ogAlarmLogTable, ogAlarmInstance=ogAlarmInstance, ogPowerSupplyTemperature=ogPowerSupplyTemperature, ogSerialUserTable=ogSerialUserTable, ogEmdDioTriggerMode=ogEmdDioTriggerMode, ogUpsTemperature=ogUpsTemperature, ogUpsInputVoltage=ogUpsInputVoltage, ogSerialPortEntry=ogSerialPortEntry, ogUpsName=ogUpsName, ogHostUserEntry=ogHostUserEntry, ogWebUserTable=ogWebUserTable, ogUpsCounter=ogUpsCounter, ogAlarmName=ogAlarmName, ogHostUserStartTime=ogHostUserStartTime, ogWifiClientRssi=ogWifiClientRssi, ogWifiClientBitRate=ogWifiClientBitRate, ogHostServiceTable=ogHostServiceTable, ogHostEntry=ogHostEntry, ogAlarmUser=ogAlarmUser, ogCellModemTemperature=ogCellModemTemperature, ogCellModemIMSI=ogCellModemIMSI, ogCellModemEnabled=ogCellModemEnabled, ogWifiApClientAp=ogWifiApClientAp, ogSerialUserNotification=ogSerialUserNotification, ogCellModemVendor=ogCellModemVendor, ogCurrentAlarmTable=ogCurrentAlarmTable, ogMibNotifications=ogMibNotifications, ogRpcOutletLoad=ogRpcOutletLoad, ogEmdHumidityName=ogEmdHumidityName, ogAlarmCheck=ogAlarmCheck, ogWifiClientRxInvalidMisc=ogWifiClientRxInvalidMisc, ogCurrentAlarmInstance=ogCurrentAlarmInstance, ogSerialPortStopBits=ogSerialPortStopBits, ogSerialPortRTS=ogSerialPortRTS, ogUpsBatteryState=ogUpsBatteryState, ogWifiApInterface=ogWifiApInterface, ogEmdDioName=ogEmdDioName, ogSerialPortRxBytes=ogSerialPortRxBytes, ogNetInterfaceName=ogNetInterfaceName, ogUpsOutputCurrent=ogUpsOutputCurrent, ogSerialPortDSR=ogSerialPortDSR, ogEmdIndex=ogEmdIndex, ogRpcOutletState=ogRpcOutletState, ogEmdDioEntry=ogEmdDioEntry, ogUpsBatteryRunTimeRestart=ogUpsBatteryRunTimeRestart, ogEmdLogEnabled=ogEmdLogEnabled, ogWifiClientEntry=ogWifiClientEntry, ogWifiApClientTxBitRate=ogWifiApClientTxBitRate, ogCellModemRadioTechnology=ogCellModemRadioTechnology, ogRpcType=ogRpcType, ogUpsOutputTruePower=ogUpsOutputTruePower, ogSerialUserLabel=ogSerialUserLabel, ogSerialPortTxBytes=ogSerialPortTxBytes, ogUpsBatteryNominalCurrent=ogUpsBatteryNominalCurrent, ogHostServicePort=ogHostServicePort, ogUpsInputCurrent=ogUpsInputCurrent, ogCellModemEntry=ogCellModemEntry, ogHostIpV4Address=ogHostIpV4Address, ogWifiClientApMac=ogWifiClientApMac, ogHostUserIndex=ogHostUserIndex, ogSerialSignalNotification=ogSerialSignalNotification, ogSerialPortParityErrors=ogSerialPortParityErrors, ogWifiApAssociationNotification=ogWifiApAssociationNotification, ogCellModemNetwork=ogCellModemNetwork, ogWifiApIeeeMode=ogWifiApIeeeMode, ogCurrentAlarmPreviousValue=ogCurrentAlarmPreviousValue, ogEmdDioState=ogEmdDioState, ogHostServiceEntry=ogHostServiceEntry, ogWifiApTable=ogWifiApTable, ogCurrentAlarmEventId=ogCurrentAlarmEventId, ogUpsOutputFrequency=ogUpsOutputFrequency, ogBasicNotificationGroup=ogBasicNotificationGroup, ogStatus2Compliance=ogStatus2Compliance, ogPowerSupplyInputVoltage=ogPowerSupplyInputVoltage, ogWifiApFrequency=ogWifiApFrequency, ogUpsOutputNominalCurrent=ogUpsOutputNominalCurrent, ogUpsOutputPower=ogUpsOutputPower, ogWifiClientLinkQuality=ogWifiClientLinkQuality, ogCheckDeviceCheck=ogCheckDeviceCheck, ogAlarmPreviousValue=ogAlarmPreviousValue, ogPowerSupplyInputNotification=ogPowerSupplyInputNotification, ogHostIpV6Address=ogHostIpV6Address, ogEmdHumidityEmd=ogEmdHumidityEmd, ogUpsNotification=ogUpsNotification, ogCurrentAlarmIndex=ogCurrentAlarmIndex, ogCellModemRegistered=ogCellModemRegistered, ogHostName=ogHostName, ogCellModemIndex=ogCellModemIndex, ogWifiApClientInactiveTime=ogWifiApClientInactiveTime, ogWifiClientCounter=ogWifiClientCounter, ogUpsOutputNotification=ogUpsOutputNotification, ogEmdHumidityNotification=ogEmdHumidityNotification, ogCustomNotification=ogCustomNotification, ogCellModemCounter=ogCellModemCounter, ogCellModemApn=ogCellModemApn, ogHostServiceHost=ogHostServiceHost, ogUpsBatteryTemperature=ogUpsBatteryTemperature, ogWifiClientConnectNotification=ogWifiClientConnectNotification, ogEmdHumidityIndex=ogEmdHumidityIndex, ogSerialUserIndex=ogSerialUserIndex, ogWifiClientMode=ogWifiClientMode, ogNetInterfaceTable=ogNetInterfaceTable, ogWifiApIndex=ogWifiApIndex, ogCellNetworkNotification=ogCellNetworkNotification, ogEmdTemperatureNotification=ogEmdTemperatureNotification, ogRpcOutputNotification=ogRpcOutputNotification, ogCurrentAlarmTime=ogCurrentAlarmTime, ogNetInterfaceIndex=ogNetInterfaceIndex, ogAlarmTriggerValue=ogAlarmTriggerValue, ogUpsBatteryCharge=ogUpsBatteryCharge, ogRpcOutletRpc=ogRpcOutletRpc, ogWifiApClientEntry=ogWifiApClientEntry, ogHostIndex=ogHostIndex, ogCurrentAlarmType=ogCurrentAlarmType, ogSerialPortFramingErrors=ogSerialPortFramingErrors, ogWebUserIndex=ogWebUserIndex, ogHostTable=ogHostTable, ogHostPingNotification=ogHostPingNotification, ogEmdHumidityEntry=ogEmdHumidityEntry, ogStatus2Compliances=ogStatus2Compliances, ogCurrentAlarmDevice=ogCurrentAlarmDevice, ogCellModemTable=ogCellModemTable, ogWifiClientSignalNotification=ogWifiClientSignalNotification, ogAlarmType=ogAlarmType, ogWifiClientRxInvalidFrag=ogWifiClientRxInvalidFrag, ogHostUserHost=ogHostUserHost, ogUpsBatteryRunTimeLow=ogUpsBatteryRunTimeLow, ogUpsInputNotification=ogUpsInputNotification, ogSerialPortOverrunErrors=ogSerialPortOverrunErrors, ogEmdHumidityCounter=ogEmdHumidityCounter, ogRpcOutletNotification=ogRpcOutletNotification, ogWifiApAuthNotification=ogWifiApAuthNotification, ogSerialPortMode=ogSerialPortMode, ogRpcCounter=ogRpcCounter, ogStatus2Conformance=ogStatus2Conformance, ogEmdDioTable=ogEmdDioTable, ogCheckIndex=ogCheckIndex, ogUpsBatteryRunTime=ogUpsBatteryRunTime, ogStatus2NotificationPrefix=ogStatus2NotificationPrefix, ogWebUserSourcePort=ogWebUserSourcePort, ogAlarmSummary=ogAlarmSummary, ogPowerSupplyName=ogPowerSupplyName, ogCurrentAlarmCheck=ogCurrentAlarmCheck, ogUpsInputFrequency=ogUpsInputFrequency, ogCheckName=ogCheckName, ogCheckDeviceTable=ogCheckDeviceTable, ogPowerSupplyEntry=ogPowerSupplyEntry, ogHostUserTable=ogHostUserTable, ogCheckType=ogCheckType, ogWifiApClientRxPackets=ogWifiApClientRxPackets, ogCurrentAlarmName=ogCurrentAlarmName, ogWifiApEntry=ogWifiApEntry, ogRpcConnectType=ogRpcConnectType, ogCellTowerNotification=ogCellTowerNotification, ogSerialPortDTR=ogSerialPortDTR, ogCellModemSessionTime=ogCellModemSessionTime, ogWifiClientRxInvalidNwid=ogWifiClientRxInvalidNwid, ogSerialUserStartTime=ogSerialUserStartTime, ogCellApnNotification=ogCellApnNotification, ogWebUserSourceAddress=ogWebUserSourceAddress, ogEmdName=ogEmdName, ogWifiClientTxPower=ogWifiClientTxPower, ogCheckDeviceName=ogCheckDeviceName, ogCheckResetTimeout=ogCheckResetTimeout, ogUpsIndex=ogUpsIndex, ogWifiClientEssid=ogWifiClientEssid, ogWifiClientEnabled=ogWifiClientEnabled, ogEmdTemperatureValue=ogEmdTemperatureValue, ogWifiClientInterface=ogWifiClientInterface, ogRpcMaxTemperature=ogRpcMaxTemperature, ogUpsInputNominalFrequency=ogUpsInputNominalFrequency, ogEmdDioCounter=ogEmdDioCounter, ogEmdTemperatureTotal=ogEmdTemperatureTotal, ogRpcOutletEntry=ogRpcOutletEntry, ogSerialPatternNotification=ogSerialPatternNotification, ogPowerSupplyIndex=ogPowerSupplyIndex, ogAlarm=ogAlarm, ogRpcOutletIndex=ogRpcOutletIndex, ogRpcLogEnabled=ogRpcLogEnabled, ogWifiApClientMac=ogWifiApClientMac, ogCheckEntry=ogCheckEntry)
mibBuilder.exportSymbols("OG-STATUSv2-MIB", ogRpcDescription=ogRpcDescription, ogUpsInputNominalVoltage=ogUpsInputNominalVoltage, ogRpcInputFrequency=ogRpcInputFrequency, ogUpsBatteryCurrent=ogUpsBatteryCurrent, ogPowerSupplyTempNotification=ogPowerSupplyTempNotification, ogBasicAlarmGroup=ogBasicAlarmGroup, ogHostUserAddress=ogHostUserAddress, ogBasicStatusGroup=ogBasicStatusGroup, ogCurrentAlarmCurrentValue=ogCurrentAlarmCurrentValue, ogEmdTemperatureIndex=ogEmdTemperatureIndex, ogHostUserName=ogHostUserName, ogAlarmLogIndex=ogAlarmLogIndex, ogCheckDeviceRef=ogCheckDeviceRef, ogEmdDescription=ogEmdDescription, ogCurrentAlarmTriggerValue=ogCurrentAlarmTriggerValue, ogWebUserName=ogWebUserName, ogCheckTable=ogCheckTable, ogAlarmCurrentValue=ogAlarmCurrentValue, ogUpsOutputLoad=ogUpsOutputLoad, ogEmdTemperatureCounter=ogEmdTemperatureCounter, ogEmdTable=ogEmdTable, ogUpsLogEnabled=ogUpsLogEnabled, ogCellModemConnected=ogCellModemConnected, ogCurrentAlarmState=ogCurrentAlarmState, ogNetInterfaceNotification=ogNetInterfaceNotification, ogDialPoolHealthNotification=ogDialPoolHealthNotification, ogUpsEntry=ogUpsEntry, ogUpsType=ogUpsType, ogStatus2Groups=ogStatus2Groups, ogCheckDeviceEntry=ogCheckDeviceEntry, ogSerialNumber=ogSerialNumber, ogPowerSupplyOutputCurrent=ogPowerSupplyOutputCurrent, ogUpsBatteryNotification=ogUpsBatteryNotification, ogUpsInputNominalCurrent=ogUpsInputNominalCurrent, ogEmdHumidityDescription=ogEmdHumidityDescription, ogRpcInputVoltage=ogRpcInputVoltage, ogCurrentAlarmEntry=ogCurrentAlarmEntry, ogPowerSupplyTable=ogPowerSupplyTable, ogWebUserNotification=ogWebUserNotification, ogRpcInputNotification=ogRpcInputNotification, ogEmdHumidityTotal=ogEmdHumidityTotal, ogEmdHumidityTable=ogEmdHumidityTable, ogCheckResolveActions=ogCheckResolveActions, ogFirmwareVersion=ogFirmwareVersion, ogSystem=ogSystem, ogRpcTable=ogRpcTable, ogCheckDeviceIndex=ogCheckDeviceIndex, ogRpcEntry=ogRpcEntry, ogRpcOutletTable=ogRpcOutletTable, ogWifiApEnabled=ogWifiApEnabled, ogUpsDescription=ogUpsDescription, ogUpsBatteryNominalVoltage=ogUpsBatteryNominalVoltage, ogStatus2=ogStatus2, ogPowerSupplyOutputNotification=ogPowerSupplyOutputNotification, ogUpsOutputNominalFrequency=ogUpsOutputNominalFrequency, ogEmdDioDescription=ogEmdDioDescription, ogAlarmEventId=ogAlarmEventId, ogEmdConnectType=ogEmdConnectType, ogRpcName=ogRpcName, ogSerialPortDataBits=ogSerialPortDataBits, ogRpcOutletTotal=ogRpcOutletTotal, PYSNMP_MODULE_ID=ogStatus2, ogSerialUserName=ogSerialUserName, ogWifiApClientIndex=ogWifiApClientIndex, ogWifiApClientRxBytes=ogWifiApClientRxBytes, ogSerialPortDCD=ogSerialPortDCD, ogWifiApTxPower=ogWifiApTxPower, ogWifiApClientRssi=ogWifiApClientRssi, ogSerialPortIndex=ogSerialPortIndex, ogAlarmTime=ogAlarmTime, ogCellModemSelectedSimCard=ogCellModemSelectedSimCard, ogUpsBatteryVoltage=ogUpsBatteryVoltage, ogCellModem4gRssi=ogCellModem4gRssi, ogHostUserNotification=ogHostUserNotification)
