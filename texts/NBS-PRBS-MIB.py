#
# PySNMP MIB module NBS-PRBS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/mrv/NBS-PRBS-MIB
# Produced by pysmi-1.1.12 at Thu May 30 02:19:17 2024
# On host fv-az775-912 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
nbsCmmcChassisIndex, nbsCmmcPortName, nbsCmmcSlotIndex, nbsCmmcPortIndex = mibBuilder.importSymbols("NBS-CMMC-MIB", "nbsCmmcChassisIndex", "nbsCmmcPortName", "nbsCmmcSlotIndex", "nbsCmmcPortIndex")
nbs, = mibBuilder.importSymbols("NBS-MIB", "nbs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, Integer32, Unsigned32, MibIdentifier, iso, IpAddress, Counter64, Gauge32, ModuleIdentity, Bits, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "Integer32", "Unsigned32", "MibIdentifier", "iso", "IpAddress", "Counter64", "Gauge32", "ModuleIdentity", "Bits", "TimeTicks", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nbsPrbsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 212))
if mibBuilder.loadTexts: nbsPrbsMib.setLastUpdated('201209260000Z')
if mibBuilder.loadTexts: nbsPrbsMib.setOrganization('NBS')
if mibBuilder.loadTexts: nbsPrbsMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: nbsPrbsMib.setDescription('Pattern checking and generation')
nbsPrbsPatternGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 212, 1))
if mibBuilder.loadTexts: nbsPrbsPatternGrp.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsPatternGrp.setDescription('Available bit sequences')
nbsPrbsGenGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 212, 2))
if mibBuilder.loadTexts: nbsPrbsGenGrp.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsGenGrp.setDescription('PRBS pattern generation status and configuration')
nbsPrbsCheckGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 212, 3))
if mibBuilder.loadTexts: nbsPrbsCheckGrp.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsCheckGrp.setDescription('PRBS pattern checking status and configuration')
nbsPrbsTrapGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 212, 200))
if mibBuilder.loadTexts: nbsPrbsTrapGrp.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsTrapGrp.setDescription('Objects used as varbinds in traps')
nbsPrbsTraps0 = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 212, 200, 0))
if mibBuilder.loadTexts: nbsPrbsTraps0.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsTraps0.setDescription('PRBS event notifications')
nbsPrbsPatternTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 212, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPrbsPatternTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsPatternTableSize.setDescription('Number of entries in nbsPrbsPatternTable')
nbsPrbsPatternTable = MibTable((1, 3, 6, 1, 4, 1, 629, 212, 1, 2), )
if mibBuilder.loadTexts: nbsPrbsPatternTable.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsPatternTable.setDescription('List of known PRBS patterns')
nbsPrbsPatternEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 212, 1, 2, 1), ).setIndexNames((0, "NBS-PRBS-MIB", "nbsPrbsPatternIndex"))
if mibBuilder.loadTexts: nbsPrbsPatternEntry.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsPatternEntry.setDescription('A particular PRBS pattern')
nbsPrbsPatternIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: nbsPrbsPatternIndex.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsPatternIndex.setDescription('Index 1 is reserved.  Indexing starts from 2.')
nbsPrbsPatternName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPrbsPatternName.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsPatternName.setDescription('Name of this pattern')
nbsPrbsPatternDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPrbsPatternDesc.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsPatternDesc.setDescription('Description of this pattern')
nbsPrbsGenTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 212, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPrbsGenTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsGenTableSize.setDescription('')
nbsPrbsGenTable = MibTable((1, 3, 6, 1, 4, 1, 629, 212, 2, 2), )
if mibBuilder.loadTexts: nbsPrbsGenTable.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsGenTable.setDescription('List of ports that can generate a PRBS bitstream.')
nbsPrbsGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 212, 2, 2, 1), ).setIndexNames((0, "NBS-PRBS-MIB", "nbsPrbsGenIfIndex"))
if mibBuilder.loadTexts: nbsPrbsGenEntry.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsGenEntry.setDescription("An individual port's PRBS pattern generation status and\n           configuration")
nbsPrbsGenIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsPrbsGenIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsGenIfIndex.setDescription('The Mib2 ifIndex of this pattern generator port.')
nbsPrbsGenPatternCaps = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPrbsGenPatternCaps.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsGenPatternCaps.setDescription('Bitmask indicating which patterns can be generated from\n           this port.\n\n           Bits 0 and 1 are reserved.\n\n           Subsequent bits refer to the nbsPrbsPatternTable.  Bit 2\n           corresponds to nbsPrbsPatternIndex 2, bit 3 to\n           nbsPrbsPatternIndex 3, and so on.\n\n           A bit is set (1) if that pattern can be generated by this\n           port, cleared (0) otherwise.\n\n           OCTET STRING bitmasks count the leftmost bit (MSB) as 0.\n\n           A zero length OCTET STRING indicates that this object is not\n           supported.')
nbsPrbsGenPatternIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPrbsGenPatternIndex.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsGenPatternIndex.setDescription('The nbsPrbsPatternIndex to utilize.\n\n           When read, the value -1 indicates pattern generation is not\n           supported.\n\n           When read, the value 1 indicates there is no pattern\n           currently selected.\n\n           Values less than 2 cannot be written.')
nbsPrbsGenDurationMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPrbsGenDurationMax.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsGenDurationMax.setDescription('The maximum length of time, in seconds, that a bitstream can\n           be generated from this port.\n\n           The value 0 indicates there is no limit on the length of\n           time.\n\n           The value -1 indicates the duration cannot be set, either\n           because generation is not supported, or because there is no\n           way to limit the duration. The generator will not stop\n           without user intervention. It may also indicate there is no\n           valid protocol currently selected, so the maximum duration\n           cannot be calculated.')
nbsPrbsGenDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 2, 2, 1, 5), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPrbsGenDuration.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsGenDuration.setDescription('The length of time, in seconds, to generate a bitstream.\n\n           The value 0 indicates test should run until terminated\n           manually by user.\n\n           When read, the value -1 indicates setting a duration is not\n           supported.\n\n           Values less than 0 cannot be written.')
nbsPrbsGenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("stop", 2), ("start", 3))).clone('stop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPrbsGenAction.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsGenAction.setDescription('Used to initiate and terminate pattern generation from this\n           port.\n\n           If pattern generation is not available from this port, Agent\n           will report notSupported(1).  Any SET attempts will be\n           rejected.\n\n           To generate a bitstream, user should SET this object to\n           start(3).\n\n           To terminate a bitstream, user should SET this object to\n           stop(2).\n\n           When read, Agent should report the value last SET.  Agent\n           may report stop(2) after a system reboot, or after it halts\n           pattern generation because the time specified in\n           nbsPrbsGenDuration elapsed.')
nbsPrbsGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("unknown", 2), ("idle", 3), ("generating", 4))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPrbsGenStatus.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsGenStatus.setDescription('Indicates whether this port is generating a test bitstream.\n\n           If notSupported(1), this port cannot generate a test\n           bitstream.\n\n           If unknown(2), this port can generate a test bitstream but\n           cannot report the status.\n\n           If idle(3), this port is currently not generating a test\n           bitstream.\n\n           If generating(4), this port currently is generating a test\n           bitstream.')
nbsPrbsGenProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPrbsGenProgress.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsGenProgress.setDescription('Indicates how long, in seconds, the port has been\n           generating a bitstream.\n\n           When nbsPrbsGenStatus changes to generating(4), this.counter\n           should be cleared to zero(0) and then increment once each\n           second.\n\n           When nbsPrbsGenStatus changes to idle(3), this.counter\n           should be frozen at its then current value.')
nbsPrbsCheckTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 212, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPrbsCheckTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsCheckTableSize.setDescription('')
nbsPrbsCheckTable = MibTable((1, 3, 6, 1, 4, 1, 629, 212, 3, 2), )
if mibBuilder.loadTexts: nbsPrbsCheckTable.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsCheckTable.setDescription('List of ports that can check a PRBS bitstream.')
nbsPrbsCheckEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 212, 3, 2, 1), ).setIndexNames((0, "NBS-PRBS-MIB", "nbsPrbsCheckIfIndex"))
if mibBuilder.loadTexts: nbsPrbsCheckEntry.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsCheckEntry.setDescription("An individual port's PRBS pattern checking status and\n           configuration")
nbsPrbsCheckIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsPrbsCheckIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsCheckIfIndex.setDescription('The Mib2 ifIndex of this pattern checker port.')
nbsPrbsCheckPatternCaps = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPrbsCheckPatternCaps.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsCheckPatternCaps.setDescription('Bitmask indicating which patterns can be checked from\n           this port.\n\n           Bits 0 and 1 are reserved.\n\n           Subsequent bits refer to the nbsPrbsPatternTable.  Bit 2\n           corresponds to nbsPrbsPatternIndex 2, bit 3 to\n           nbsPrbsPatternIndex 3, and so on.\n\n           A bit is set (1) if that pattern can be generated by this\n           port, cleared (0) otherwise.\n\n           OCTET STRING bitmasks count the leftmost bit (MSB) as 0.\n\n           A zero length OCTET STRING indicates that this object is not\n           supported.')
nbsPrbsCheckPatternIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPrbsCheckPatternIndex.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsCheckPatternIndex.setDescription('The nbsPrbsPatternIndex to check for.\n\n           When read, the value -1 indicates pattern checking is not\n           supported.\n\n           When read, the value 1 indicates there is no pattern\n           currently selected.\n\n           Values less than 2 cannot be written.')
nbsPrbsCheckDurationMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPrbsCheckDurationMax.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsCheckDurationMax.setDescription('The maximum length of time, in seconds, that a bitstream\n           can be checked from this port.\n\n           The value 0 indicates there is no limit on the length of\n           time.\n\n           The value -1 indicates the duration cannot be set, either\n           because checking is not supported, or because there is no\n           way to limit the duration. The checker will not stop without\n           user intervention. It may also indicate there is no valid\n           protocol currently selected, so the maximum duration cannot\n           be calculated.')
nbsPrbsCheckDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 3, 2, 1, 5), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPrbsCheckDuration.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsCheckDuration.setDescription('The length of time, in seconds, to check a bitstream.\n\n           The value 0 indicates test should run until terminated\n           manually by user.\n\n           When read, the value -1 indicates setting a duration is not\n           supported.\n\n           Values less than 0 cannot be written.')
nbsPrbsCheckAction = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("stop", 2), ("start", 3))).clone('stop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPrbsCheckAction.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsCheckAction.setDescription('Used to initiate and terminate pattern checking from this\n           port.\n\n           If pattern checking is not available from this port, Agent\n           will report notSupported(1).  Any SET attempts will be\n           rejected.\n\n           To check a bitstream, user should SET this object to\n           start(3).\n\n           To terminate checking, user should SET this object to\n           stop(2).\n\n           When read, Agent should report the value last SET.  Agent\n           may report stop(2) after a system reboot, or after it halts\n           pattern checking because the time specified in\n           nbsPrbsCheckDuration elapsed.')
nbsPrbsCheckStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notSupported", 1), ("idle", 2), ("syncIn", 3), ("syncOut", 4), ("error", 5), ("errOverflow", 6), ("gaveUp", 7))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPrbsCheckStatus.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsCheckStatus.setDescription('Indicates whether this port is checking a bitstream.\n\n           If notSupported(1), this port cannot check a test\n           bitstream.\n\n           If idle(2), this port is currently not checking a test\n           bitstream.\n\n           If syncIn(3), this port currently is checking a bitstream\n           and is synchronized with the pattern specified in\n           nbsPrbsCheckPatternIndex.\n\n           If syncOut(4), this port currently is checking a bitstream\n           and is out of synchronization with the pattern specified in\n           nbsPrbsCheckPatternIndex.\n\n           If error(5), this port currently is checking a bitstream\n           and an unspecified error occured in the checker.\n\n           If errOverflow(6), the Error Counter reached its maximum and\n           checking has been suspended. To clear this condition, user\n           should set nbsPrbsCheckAction to stop(2).\n\n           If gaveUp(7), the pattern checker was unable to synchronize\n           and aborted.')
nbsPrbsCheckProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPrbsCheckProgress.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsCheckProgress.setDescription('Indicates how long, in seconds, the port has been\n           checking a bitstream.\n\n           When nbsPrbsCheckStatus changes to idle(2), this.counter\n           should be cleared to zero(0) and then increment once each\n           second.\n\n           When nbsPrbsCheckStatus changes to syncIn(3) or syncOut(4),\n           this.counter should be frozen at its then current value.')
nbsPrbsCheckErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPrbsCheckErrors.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsCheckErrors.setDescription('Indicates how many errors were detected during the last\n           pattern checking session.\n\n           The Agent should clear this counter to zero(0) when\n           nbsPrbsCheckStatus changes from idle(2).  While pattern\n           checking, Agent may increase this counter as errors occur.\n\n           Once nbsPrbsCheckStatus changes to idle(2), this counter\n           should report the final error count.\n\n           If errors were detected but the count is unknown, Agent\n           should report the number 1.')
nbsPrbsCheckUpdateFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 212, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPrbsCheckUpdateFreq.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsCheckUpdateFreq.setDescription('Indicates how frequently, in minutes, the\n           nbsPrbsTrapCheckerStatusUpdate Notification should be sent.\n\n           The value zero (0) disables update Notifications.')
nbsPrbsTrapGeneratorStarted = NotificationType((1, 3, 6, 1, 4, 1, 629, 212, 200, 0, 10)).setObjects(("NBS-CMMC-MIB", "nbsCmmcChassisIndex"), ("NBS-CMMC-MIB", "nbsCmmcSlotIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortName"))
if mibBuilder.loadTexts: nbsPrbsTrapGeneratorStarted.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsTrapGeneratorStarted.setDescription('Sent when nbsPrbsGenStatus transitions to generating(4).\n\n           This Notification should be of Severity INFO.')
nbsPrbsTrapGeneratorStopped = NotificationType((1, 3, 6, 1, 4, 1, 629, 212, 200, 0, 11)).setObjects(("NBS-CMMC-MIB", "nbsCmmcChassisIndex"), ("NBS-CMMC-MIB", "nbsCmmcSlotIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortName"))
if mibBuilder.loadTexts: nbsPrbsTrapGeneratorStopped.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsTrapGeneratorStopped.setDescription('Sent when nbsPrbsGenStatus transitions from generating(4).\n\n           This Notification should be of Severity INFO.')
nbsPrbsTrapCheckerStarted = NotificationType((1, 3, 6, 1, 4, 1, 629, 212, 200, 0, 20)).setObjects(("NBS-CMMC-MIB", "nbsCmmcChassisIndex"), ("NBS-CMMC-MIB", "nbsCmmcSlotIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortName"))
if mibBuilder.loadTexts: nbsPrbsTrapCheckerStarted.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsTrapCheckerStarted.setDescription('Sent when an interface begins checking for a bitstream.\n\n           This Notification should be of Severity INFO.')
nbsPrbsTrapCheckerStopped = NotificationType((1, 3, 6, 1, 4, 1, 629, 212, 200, 0, 21)).setObjects(("NBS-CMMC-MIB", "nbsCmmcChassisIndex"), ("NBS-CMMC-MIB", "nbsCmmcSlotIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortName"), ("NBS-PRBS-MIB", "nbsPrbsCheckStatus"))
if mibBuilder.loadTexts: nbsPrbsTrapCheckerStopped.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsTrapCheckerStopped.setDescription('Sent when an interface stops checking for a bitstream.\n\n           This Notification should be of Severity INFO.')
nbsPrbsTrapCheckerOverflowed = NotificationType((1, 3, 6, 1, 4, 1, 629, 212, 200, 0, 22)).setObjects(("NBS-CMMC-MIB", "nbsCmmcChassisIndex"), ("NBS-CMMC-MIB", "nbsCmmcSlotIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortName"))
if mibBuilder.loadTexts: nbsPrbsTrapCheckerOverflowed.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsTrapCheckerOverflowed.setDescription('Sent when nbsPrbsCheckStatus transitions to errOverflow(6).\n\n           This event indicates that the checker was unable to continue\n           and is now in a suspended state which requires a user to\n           manually stop the checker.\n\n           This Notification should be of Severity ERROR.')
nbsPrbsTrapCheckerErrorDetected = NotificationType((1, 3, 6, 1, 4, 1, 629, 212, 200, 0, 23)).setObjects(("NBS-CMMC-MIB", "nbsCmmcChassisIndex"), ("NBS-CMMC-MIB", "nbsCmmcSlotIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortName"), ("NBS-PRBS-MIB", "nbsPrbsCheckStatus"))
if mibBuilder.loadTexts: nbsPrbsTrapCheckerErrorDetected.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsTrapCheckerErrorDetected.setDescription('Sent when nbsPrbsCheckErrors transitions from zero (0).\n\n           This event indicates the first error was detected in\n           the incoming bitstream.\n\n           This Notification should be of Severity ERROR.')
nbsPrbsTrapCheckerStatusUpdate = NotificationType((1, 3, 6, 1, 4, 1, 629, 212, 200, 0, 24)).setObjects(("NBS-CMMC-MIB", "nbsCmmcChassisIndex"), ("NBS-CMMC-MIB", "nbsCmmcSlotIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortName"), ("NBS-PRBS-MIB", "nbsPrbsCheckStatus"), ("NBS-PRBS-MIB", "nbsPrbsCheckErrors"), ("NBS-PRBS-MIB", "nbsPrbsCheckProgress"))
if mibBuilder.loadTexts: nbsPrbsTrapCheckerStatusUpdate.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsTrapCheckerStatusUpdate.setDescription('This Notification periodically reports the status, error\n           counts, and running time of the Checker process.\n\n           This Notification should be of Severity INFO.')
nbsPrbsTrapCheckerSyncIn = NotificationType((1, 3, 6, 1, 4, 1, 629, 212, 200, 0, 25)).setObjects(("NBS-CMMC-MIB", "nbsCmmcChassisIndex"), ("NBS-CMMC-MIB", "nbsCmmcSlotIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortName"), ("NBS-PRBS-MIB", "nbsPrbsCheckStatus"))
if mibBuilder.loadTexts: nbsPrbsTrapCheckerSyncIn.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsTrapCheckerSyncIn.setDescription('Sent when a checker port synchronizes with a bitstream.\n\n           This Notification should be of Severity ERROR.')
nbsPrbsTrapCheckerSyncOut = NotificationType((1, 3, 6, 1, 4, 1, 629, 212, 200, 0, 26)).setObjects(("NBS-CMMC-MIB", "nbsCmmcChassisIndex"), ("NBS-CMMC-MIB", "nbsCmmcSlotIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortIndex"), ("NBS-CMMC-MIB", "nbsCmmcPortName"), ("NBS-PRBS-MIB", "nbsPrbsCheckStatus"))
if mibBuilder.loadTexts: nbsPrbsTrapCheckerSyncOut.setStatus('current')
if mibBuilder.loadTexts: nbsPrbsTrapCheckerSyncOut.setDescription('Sent when a checker port loses synchronization with a\n           bitstream.\n\n           This Notification should be of Severity ERROR.')
mibBuilder.exportSymbols("NBS-PRBS-MIB", nbsPrbsCheckErrors=nbsPrbsCheckErrors, nbsPrbsPatternName=nbsPrbsPatternName, nbsPrbsCheckDurationMax=nbsPrbsCheckDurationMax, nbsPrbsCheckDuration=nbsPrbsCheckDuration, nbsPrbsCheckAction=nbsPrbsCheckAction, nbsPrbsGenAction=nbsPrbsGenAction, nbsPrbsCheckUpdateFreq=nbsPrbsCheckUpdateFreq, PYSNMP_MODULE_ID=nbsPrbsMib, nbsPrbsPatternTable=nbsPrbsPatternTable, nbsPrbsCheckProgress=nbsPrbsCheckProgress, nbsPrbsTrapCheckerStopped=nbsPrbsTrapCheckerStopped, nbsPrbsGenStatus=nbsPrbsGenStatus, nbsPrbsCheckTable=nbsPrbsCheckTable, nbsPrbsGenPatternIndex=nbsPrbsGenPatternIndex, nbsPrbsGenGrp=nbsPrbsGenGrp, nbsPrbsTrapCheckerStarted=nbsPrbsTrapCheckerStarted, nbsPrbsTrapCheckerErrorDetected=nbsPrbsTrapCheckerErrorDetected, nbsPrbsCheckTableSize=nbsPrbsCheckTableSize, nbsPrbsTrapCheckerSyncIn=nbsPrbsTrapCheckerSyncIn, nbsPrbsGenDurationMax=nbsPrbsGenDurationMax, nbsPrbsMib=nbsPrbsMib, nbsPrbsTrapCheckerSyncOut=nbsPrbsTrapCheckerSyncOut, nbsPrbsCheckIfIndex=nbsPrbsCheckIfIndex, nbsPrbsGenDuration=nbsPrbsGenDuration, nbsPrbsTraps0=nbsPrbsTraps0, nbsPrbsCheckEntry=nbsPrbsCheckEntry, nbsPrbsTrapGeneratorStarted=nbsPrbsTrapGeneratorStarted, nbsPrbsPatternEntry=nbsPrbsPatternEntry, nbsPrbsCheckStatus=nbsPrbsCheckStatus, nbsPrbsGenEntry=nbsPrbsGenEntry, nbsPrbsTrapGeneratorStopped=nbsPrbsTrapGeneratorStopped, nbsPrbsTrapCheckerStatusUpdate=nbsPrbsTrapCheckerStatusUpdate, nbsPrbsPatternTableSize=nbsPrbsPatternTableSize, nbsPrbsCheckPatternCaps=nbsPrbsCheckPatternCaps, nbsPrbsGenTableSize=nbsPrbsGenTableSize, nbsPrbsPatternDesc=nbsPrbsPatternDesc, nbsPrbsPatternIndex=nbsPrbsPatternIndex, nbsPrbsCheckGrp=nbsPrbsCheckGrp, nbsPrbsTrapGrp=nbsPrbsTrapGrp, nbsPrbsGenIfIndex=nbsPrbsGenIfIndex, nbsPrbsPatternGrp=nbsPrbsPatternGrp, nbsPrbsGenTable=nbsPrbsGenTable, nbsPrbsGenPatternCaps=nbsPrbsGenPatternCaps, nbsPrbsGenProgress=nbsPrbsGenProgress, nbsPrbsTrapCheckerOverflowed=nbsPrbsTrapCheckerOverflowed, nbsPrbsCheckPatternIndex=nbsPrbsCheckPatternIndex)
