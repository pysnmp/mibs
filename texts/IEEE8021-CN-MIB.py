#
# PySNMP MIB module IEEE8021-CN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/IEEE8021-CN-MIB
# Produced by pysmi-1.1.12 at Thu Nov 28 03:04:22 2024
# On host fv-az885-149 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
IEEE8021PriorityValue, IEEE8021PbbComponentIdentifier, ieee802dot1mibs = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021PriorityValue", "IEEE8021PbbComponentIdentifier", "ieee802dot1mibs")
InterfaceIndex, ifGeneralInformationGroup = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifGeneralInformationGroup")
LldpV2DestAddressTableIndex, = mibBuilder.importSymbols("LLDP-V2-TC-MIB", "LldpV2DestAddressTableIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
systemGroup, = mibBuilder.importSymbols("SNMPv2-MIB", "systemGroup")
Unsigned32, Counter64, MibIdentifier, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, IpAddress, Gauge32, TimeTicks, ObjectIdentity, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "MibIdentifier", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "IpAddress", "Gauge32", "TimeTicks", "ObjectIdentity", "iso", "Integer32")
TimeInterval, TextualConvention, TruthValue, MacAddress, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "TextualConvention", "TruthValue", "MacAddress", "DisplayString", "RowStatus")
ieee8021CnMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 18))
ieee8021CnMib.setRevisions(('2018-06-28 00:00', '2014-12-15 00:00', '2011-02-27 00:00', '2009-12-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021CnMib.setRevisionsDescriptions(('Published as part of IEEE Std 802.1Q-2018.\n            Cross references updated and corrected.', 'Published as part of IEEE Std 802.1Q 2014 revision.\n            Cross references updated and corrected.\n            Imports tidied up to remove orphaned commas.', 'Minor edits to contact information etc. as part of \n    2011 revision of IEEE Std 802.1Q.', 'Included in IEEE 802.1Qau-2010\n\n        Copyright (C) IEEE.',))
if mibBuilder.loadTexts: ieee8021CnMib.setLastUpdated('201806280000Z')
if mibBuilder.loadTexts: ieee8021CnMib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021CnMib.setContactInfo('WG-URL: http://www.ieee802.org/1/\n         WG-EMail: stds-802-1-L@ieee.org \n\n          Contact: IEEE 802.1 Working Group Chair\n           Postal: C/O IEEE 802.1 Working Group\n                   IEEE Standards Association\n                   445 Hoes Lane\n                   Piscataway\n                   NJ 08854\n                   USA\n           E-mail: STDS-802-1-L@IEEE.ORG\n       ')
if mibBuilder.loadTexts: ieee8021CnMib.setDescription('Congestion notification module.\n      Unless otherwise indicated, the references in this MIB\n      module are to IEEE Std 802.1Q.\n\n      Copyright (C) IEEE (2018).\n      This version of this MIB module is part of IEEE Std 802.1Q;\n      see the draft itself for full legal notices.')
ieee8021CnMIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 18, 1))
ieee8021CnConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 18, 2))
class Ieee8021CnControlChoice(TextualConvention, Integer32):
    reference = '32.3.1, 32.4.1, Table 32-2'
    description = "This controls what other object selects the CND defense mode and\n        the Congestion Notification Priority Value (CNPV) alternate\n        priority for a CNPV in an end station or Bridge component, or\n        for a CNPV on a particular Port in an end station or Bridge\n        component.  It can take the following values:\n\n        cpcAdmin(1) The CND defense mode and alternate priority are\n                    controlled by the administrative variables in the\n                    same table entry as this object.\n        cpcAuto(2)  This Port or all Ports' CND defense modes are\n                    controlled automatically, as indicated by\n                    ieee8021CnPortPriAutoDefenseMode, and the\n                    alternate priority by ieee8021CnComPriAutoAltPri.\n        cpcComp(3)  This CND defense mode and alternate priority are\n                    both controlled by ieee8021CnPortPriTable.\n       "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("cpcAdmin", 1), ("cpcAuto", 2), ("cpcComp", 3))

class Ieee8021CnDefenseMode(TextualConvention, Integer32):
    reference = '32.1.1, 32.3.4, 32.4.2, 32.4.3, Table 32-2'
    description = 'For a given Congestion Notification Priority Value (CNPV), a\n        port can operate in one of four CND defense modes.  The CND\n        defense mode determines whether congestion notification is\n        enabled or not, and if enabled, whether the port translates the\n        CNPV to a non-CNPV value on input, and whether the port removes\n        CN-TAGs on output.\n\n        cptDisabled(1)      The congestion notification capability is\n                            administratively disabled for this priority\n                            value and port. This priority is not a CNPV.\n                            The priority regeneration table controls the\n                            remapping of input frames on this port for\n                            this priority. CN-TAGs are neither added by\n                            an end station nor stripped by a Bridge.\n        cptInterior(2)      On this port and for this CNPV, the priority\n                            parameters of input frames are not remapped,\n                            regardless of the priority regeneration\n                            table. CN-TAGs are not added by an end\n                            station, and are removed from frames before\n                            being output by a Bridge.\n        cptInteriorReady(3) On this port and for this CNPV, the priority\n                            parameters of input frames are not remapped,\n                            regardless of the priority regeneration\n                            table. CN-TAGs can be added by an end\n                            station, and are not removed from frames by\n                            a Bridge.\n        cptEdge(4)          On this port and for this CNPV, the priority\n                            parameters of input frames are remapped to\n                            an alternate (non-CNPV) value, regardless of\n                            the priority regeneration table. CN-TAGs are\n                            not added by an end station, and are removed\n                            from frames before being output by a Bridge.\n                            This mode is optional for an end station.\n       '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("cptDisabled", 1), ("cptInterior", 2), ("cptInteriorReady", 3), ("cptEdge", 4))

class Ieee8021CnLldpChoice(TextualConvention, Integer32):
    reference = '32.3.6, 32.4.4, Table 32-1'
    description = 'Specifies how to determine what index value is to be used as\n        the index to lldpDestAddressTable, the table of destination MAC\n        addresses, for both the destination addresses on transmitted\n        LLDPDUs and on received LLDPDUs, found in the LLDP-MIB, either:\n\n            cnlNone(1)      No LLDP Congestion Notification TLV is to\n                            carry Per-priority CNPV indicators or\n                            Per-priority Ready indicators on this Port\n                            for this priority (or all Ports and all\n                            priorities, as appropriate to the managed\n                            object).\n            cnlAdmin(2)     The administrative LLDP instance selector\n                            in the same table entry as this object\n                            governs which LLDP instance will carry the\n                            Per-priority CNPV indicators and\n                            Per-priority Ready indicators for this\n                            priority in its Congestion Notification TLV\n                            on this Port (or all Ports and all\n                            priorities, as appropriate to the managed\n                            object).\n            cnlComponent(3) ieee8021CnComPriLldpInstanceSelector governs\n                            LLDP instance selection for this Port and\n                            priority.\n       '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("cnlNone", 1), ("cnlAdmin", 2), ("cnlComponent", 3))

ieee8021CnGlobalTable = MibTable((1, 3, 111, 2, 802, 1, 1, 18, 1, 1), )
if mibBuilder.loadTexts: ieee8021CnGlobalTable.setReference('12.21.1')
if mibBuilder.loadTexts: ieee8021CnGlobalTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnGlobalTable.setDescription('A table containing the global variables for each component of\n        a Bridge or for an end station.  A value of 1 is used in a\n        Bridge or end station that does not have multiple components.\n\n        The contents of this table SHALL be maintained across a restart\n        of the system.\n       ')
ieee8021CnGlobalEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 18, 1, 1, 1), ).setIndexNames((0, "IEEE8021-CN-MIB", "ieee8021CnGlobalComponentId"))
if mibBuilder.loadTexts: ieee8021CnGlobalEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnGlobalEntry.setDescription('A list of objects pertaining to a whole Bridge component or\n        end station.\n       ')
ieee8021CnGlobalComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 1, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021CnGlobalComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnGlobalComponentId.setDescription('The Bridge component within the system to which the information\n        in this ieee8021CnGlobalEntry applies.  If the system is not\n        a Bridge, or if only one component is present in the Bridge,\n        then this variable (index) MUST be equal to 1.\n       ')
ieee8021CnGlobalMasterEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnGlobalMasterEnable.setReference('32.2.1')
if mibBuilder.loadTexts: ieee8021CnGlobalMasterEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnGlobalMasterEnable.setDescription('The state of the congestion notification feature on this Bridge\n        component or system.  If true, Congestion notification is\n        enabled, and if false, congestion notification is disabled.\n       ')
ieee8021CnGlobalCnmTransmitPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 1, 1, 3), IEEE8021PriorityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnGlobalCnmTransmitPriority.setReference('32.2.2')
if mibBuilder.loadTexts: ieee8021CnGlobalCnmTransmitPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnGlobalCnmTransmitPriority.setDescription('The priority to use for all Congestion Notification Messages\n        transmitted by this Bridge component or end station.\n       ')
ieee8021CnGlobalDiscardedFrames = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 1, 1, 4), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CnGlobalDiscardedFrames.setReference('32.2.3')
if mibBuilder.loadTexts: ieee8021CnGlobalDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnGlobalDiscardedFrames.setDescription('The number of frames discarded from full CP queues, in spite\n        of the efforts of congestion notification to avoid discards.\n\n        This object is incremented whenever any of the\n        ieee8021CnCpDiscardedFrames objects on any Port or priority in\n        this same component are incremented.\n\n        Discontinuities in the value of this counter can occur\n        at re-initialization of the management system, and at\n        other times as indicated by the value of\n        ifCounterDiscontinuityTime object of the associated\n        interface (if any).\n       ')
ieee8021CnErroredPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 18, 1, 2), )
if mibBuilder.loadTexts: ieee8021CnErroredPortTable.setReference('32.2.4')
if mibBuilder.loadTexts: ieee8021CnErroredPortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnErroredPortTable.setDescription('There is one Errored Port Table per Bridge component or end\n        station. It permits the retrieval of information about which\n        interfaces have congestion notification configuration errors,\n        namely, those specifying an alternate priority that is a CNPV.\n       ')
ieee8021CnErroredPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 18, 1, 2, 1), ).setIndexNames((0, "IEEE8021-CN-MIB", "ieee8021CnEpComponentId"), (0, "IEEE8021-CN-MIB", "ieee8021CnEpPriority"), (0, "IEEE8021-CN-MIB", "ieee8021CnEpIfIndex"))
if mibBuilder.loadTexts: ieee8021CnErroredPortEntry.setReference('32.2.4')
if mibBuilder.loadTexts: ieee8021CnErroredPortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnErroredPortEntry.setDescription('A list of interfaces whose ieee8021CnComPriAlternatePriority\n        and/or ieee8021CnPortPriAlternatePriority specify a priority\n        value that is a Congestion Notification Priority Value.\n       ')
ieee8021CnEpComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 2, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021CnEpComponentId.setReference('32.2.4')
if mibBuilder.loadTexts: ieee8021CnEpComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnEpComponentId.setDescription('The Bridge component within the system to which the information\n        in this ieee8021CnErroredPortEntry applies.  If the system is\n        not a Bridge, or if only one component is present in the\n        Bridge, then this variable (index) MUST be equal to 1.\n       ')
ieee8021CnEpPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 2, 1, 2), IEEE8021PriorityValue())
if mibBuilder.loadTexts: ieee8021CnEpPriority.setReference('32.2.4')
if mibBuilder.loadTexts: ieee8021CnEpPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnEpPriority.setDescription('The priority value whose alternate priority is misconfigured.\n       ')
ieee8021CnEpIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 2, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CnEpIfIndex.setReference('32.2.4')
if mibBuilder.loadTexts: ieee8021CnEpIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnEpIfIndex.setDescription('This object represents the Bridge Port or aggregated port\n        on which the congestion notification alternate priority is\n        misconfigured.\n        Upon a restart of the system, the system SHALL, if necessary,\n        change the value of this variable so that it references the row\n        in the ifXTable with the same value of ifAlias that it\n        referenced before the system restart.  If no such row exists,\n        then the system SHALL delete this row in the\n        ieee8021CnErroredPortTable.\n       ')
ieee8021CnCompntPriTable = MibTable((1, 3, 111, 2, 802, 1, 1, 18, 1, 3), )
if mibBuilder.loadTexts: ieee8021CnCompntPriTable.setReference('12.21.2, 12.21.2.1, 12.21.2.2')
if mibBuilder.loadTexts: ieee8021CnCompntPriTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCompntPriTable.setDescription('Each row in this table supplies default values for one\n        Congestion Notification Priority Value for a whole Bridge \n        component or end station.\n\n        Creating a row in this table makes the priority value of\n        ieee8021CnComPriPriority a\n        Congestion Notification Priority Value.\n        Deleting a row in this table makes the value in the deleted\n        ieee8021CnComPriPriority no longer a\n        Congestion Notification Priority Value.\n\n        A  system SHALL NOT allow eight rows in this table\n        to be created with the same value of\n        ieee8021CnComPriComponentId; see the description of\n        ieee8021CnComPriRowStatus.\n\n        The contents of this table SHALL be maintained across a restart\n        of the system.\n       ')
ieee8021CnCompntPriEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 18, 1, 3, 1), ).setIndexNames((0, "IEEE8021-CN-MIB", "ieee8021CnComPriComponentId"), (0, "IEEE8021-CN-MIB", "ieee8021CnComPriPriority"))
if mibBuilder.loadTexts: ieee8021CnCompntPriEntry.setReference('12.21.2, 12.21.2.1, 12.21.2.2')
if mibBuilder.loadTexts: ieee8021CnCompntPriEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCompntPriEntry.setDescription('One entry per Congestion Notification Priority Value per\n        Bridge component or end station.\n       ')
ieee8021CnComPriComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 3, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021CnComPriComponentId.setReference('12.21.2, 12.21.2.1, 12.21.2.2')
if mibBuilder.loadTexts: ieee8021CnComPriComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnComPriComponentId.setDescription('The Bridge component within the system to which the information\n        in this ieee8021CnCompntPriEntry applies.  If the system is\n        not a Bridge, or if only one component is present in the\n        Bridge, then this variable (index) MUST be equal to 1.\n       ')
ieee8021CnComPriPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 3, 1, 2), IEEE8021PriorityValue())
if mibBuilder.loadTexts: ieee8021CnComPriPriority.setReference('802.1Qau clauses 12.21.2')
if mibBuilder.loadTexts: ieee8021CnComPriPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnComPriPriority.setDescription('The Congestion Notification Priority Value for which this\n        row supplies default values.\n       ')
ieee8021CnComPriDefModeChoice = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 3, 1, 3), Ieee8021CnControlChoice().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cpcAdmin", 1), ("cpcAuto", 2))).clone('cpcAuto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021CnComPriDefModeChoice.setReference('32.1.3, 32.3.1')
if mibBuilder.loadTexts: ieee8021CnComPriDefModeChoice.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnComPriDefModeChoice.setDescription('Specifies how the default CND defense mode and alternate\n        priority for this Congestion Notification Priority Value on all\n        ports on this Bridge component or end station are to be chosen,\n        either:\n\n            cpcAdmin(1) Default CND defense mode is chosen by\n                        ieee8021CnComPriAdminDefenseMode, and alternate\n                        priority by ieee8021CnComPriAlternatePriority.\n            cpcAuto(2)  Default CND defense mode is chosen by\n                        ieee8021CnPortPriAutoDefenseMode, and alternate\n                        priority by ieee8021CnComPriAutoAltPri.\n\n        This variable can be overridden by\n        ieee8021CnPortPriDefModeChoice.\n       ')
ieee8021CnComPriAlternatePriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 3, 1, 4), IEEE8021PriorityValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021CnComPriAlternatePriority.setReference('802.1Qau clauses 32.3.2')
if mibBuilder.loadTexts: ieee8021CnComPriAlternatePriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnComPriAlternatePriority.setDescription("The Congestion Notification Priority Value to which an\n        incoming frame is to be mapped, in spite of what the\n        Priority Regereration Table says, if 1) Congestion\n        Notification is enabled and 2) the CND defense mode of the\n        port is cptEdge.\n\n        Deleting a row in this table does not alter the value of any\n        other row's ieee8021CnComPriAlternatePriority.\n       ")
ieee8021CnComPriAutoAltPri = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 3, 1, 5), IEEE8021PriorityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CnComPriAutoAltPri.setReference('802.1Qau clauses 32.3.3')
if mibBuilder.loadTexts: ieee8021CnComPriAutoAltPri.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnComPriAutoAltPri.setDescription("The Congestion Notification Priority Value to which an\n        incoming frame can be mapped, in spite of what the\n        Priority Regereration Table says, if 1) Congestion\n        Notification is enabled, 2) the CND defense mode of the\n        port is cptEdge, and 3) ieee8021CnComPriDefModeChoice\n        contains the value cpcAuto (2).\n\n        The value of this object is the next lower priority value\n        than this row's ieee8021CnComPriPriority that is not a CNPV,\n        or the next higher non-CNPV, if all lower values are CNPVs.\n\n        The value of this object, and any consequent priority\n        regeneration, is automatically updated by the managed system\n        whenever a row in the ieee8021CnCompntPriTable is created or\n        deleted.  The value of this object is not dependent upon\n        whether congestion notification is enabled or disabled for any\n        priority or for the whole Bridge component or end station; it\n        depends only upon whether the ieee8021CnCompntPriTable row\n        exists.\n       ")
ieee8021CnComPriAdminDefenseMode = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 3, 1, 6), Ieee8021CnDefenseMode().clone('cptInterior')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021CnComPriAdminDefenseMode.setReference('32.1.3, 32.3.4')
if mibBuilder.loadTexts: ieee8021CnComPriAdminDefenseMode.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnComPriAdminDefenseMode.setDescription('The default CND defense mode for this\n        Congestion Notification Priority Value on all ports on this\n        Bridge component or end station.\n\n        This variable can be overridden by\n        ieee8021CnPortPriAdminDefenseMode.\n       ')
ieee8021CnComPriCreation = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cncpAutoEnable", 1), ("cncpAutoDisable", 2))).clone('cncpAutoEnable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021CnComPriCreation.setReference('32.3.5')
if mibBuilder.loadTexts: ieee8021CnComPriCreation.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnComPriCreation.setDescription('The default value for ieee8021CnComPriDefModeChoice for\n        newly-created entries in the ieee8021CnPortPriTable:\n\n            cncpAutoEnable (1)  Newly-created\n                                ieee8021CnPortPriDefModeChoice\n                                objects take the value cpcComp (3).\n            cncpAutoDisable(2)  Newly-created\n                                ieee8021CnPortPriDefModeChoice\n                                objects take the value cpcAdmin (1).\n       ')
ieee8021CnComPriLldpInstanceChoice = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 3, 1, 8), Ieee8021CnLldpChoice().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cnlNone", 1), ("cnlAdmin", 2))).clone('cnlAdmin')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021CnComPriLldpInstanceChoice.setReference('32.1.3, 32.3.6')
if mibBuilder.loadTexts: ieee8021CnComPriLldpInstanceChoice.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnComPriLldpInstanceChoice.setDescription('Specifies whether or not the default value for all Ports is to\n        send and receive the Congestion Notification TLV in LLDPDUs,\n        either:\n            cnlNone(1)  Do not send Congestion Notification TLVs, and\n                        ignore them on receipt.\n            cnlAdmin(2) Use the LLDP instance selected by\n                        ieee8021CnComPriLldpInstanceSelector to send and\n                        receive the Congestion Notification TLV.\n\n        This object can be overridden by\n        ieee8021CnPortPriLldpInstanceChoice.\n       ')
ieee8021CnComPriLldpInstanceSelector = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 3, 1, 9), LldpV2DestAddressTableIndex().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021CnComPriLldpInstanceSelector.setReference('32.1.3, 32.3.7')
if mibBuilder.loadTexts: ieee8021CnComPriLldpInstanceSelector.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnComPriLldpInstanceSelector.setDescription("Specifies a default value for which LLDP instance is to be\n        used to provide the information for automatic configuration\n        of ports' CND defense modes (ieee8021CnPortPriAutoDefenseMode).\n\n        This object is ignored by the managed system if\n        ieee8021CnComPriLldpInstanceChoice contains the value cnlNone\n        (1).\n\n        This object can be overridden by \n        ieee8021CnPortPriLldpInstanceChoice and\n        ieee8021CnPortPriLldpInstanceChoice.\n       ")
ieee8021CnComPriRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021CnComPriRowStatus.setReference('30.4')
if mibBuilder.loadTexts: ieee8021CnComPriRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnComPriRowStatus.setDescription("This object indicates the status of an entry, and is used\n        to create/delete entries.\n\n        A system SHALL NOT permit eight ieee8021CnComPriRowStatus\n        objects, all with the same value of ieee8021CnComPriComponentId,\n        to have the value active(1).  An attempt to create or activate\n        a row when there are already seven active rows SHALL result in\n        that eighth row's ieee8021CnComPriRowStatus having the value\n        notReady(3), and the return of an inconsistentValue error.\n       ")
ieee8021CnPortPriTable = MibTable((1, 3, 111, 2, 802, 1, 1, 18, 1, 4), )
if mibBuilder.loadTexts: ieee8021CnPortPriTable.setReference('12.21.3')
if mibBuilder.loadTexts: ieee8021CnPortPriTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnPortPriTable.setDescription("Each row in this table supplies values for one port's\n        Congestion Notification Priority Value (CNPV).\n\n        Creating an entry in ieee8021CnCompntPriTable creates this\n        entry, with the default values, on all ports in the Bridge\n        component or end station.  Deleting an entry in\n        ieee8021CnCompntPriTable deletes this ieee8021CnCompntPriEntry\n        on all ports in the Bridge component or end station.\n\n        The contents of this table SHALL be maintained across a restart\n        of the system, except as noted in the description of\n        ieee8021CnPortPriIfIndex.\n       ")
ieee8021CnPortPriEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 18, 1, 4, 1), ).setIndexNames((0, "IEEE8021-CN-MIB", "ieee8021CnPortPriComponentId"), (0, "IEEE8021-CN-MIB", "ieee8021CnPortPriority"), (0, "IEEE8021-CN-MIB", "ieee8021CnPortPriIfIndex"))
if mibBuilder.loadTexts: ieee8021CnPortPriEntry.setReference('12.21.3')
if mibBuilder.loadTexts: ieee8021CnPortPriEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnPortPriEntry.setDescription('One entry per port per Congestion Notification Priority Value\n        per Bridge component or end station.\n       ')
ieee8021CnPortPriComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 4, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021CnPortPriComponentId.setReference('12.21.3')
if mibBuilder.loadTexts: ieee8021CnPortPriComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnPortPriComponentId.setDescription('The Bridge component within the system to which the information\n        in this ieee8021CnPortPriEntry applies.  If the system is\n        not a Bridge, or if only one component is present in the\n        Bridge, then this variable (index) MUST be equal to 1.\n       ')
ieee8021CnPortPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 4, 1, 2), IEEE8021PriorityValue())
if mibBuilder.loadTexts: ieee8021CnPortPriority.setReference('802.1Qau clauses 12.21.3')
if mibBuilder.loadTexts: ieee8021CnPortPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnPortPriority.setDescription('The Congestion Notification Priority Value for which\n        this row supplies default values.\n       ')
ieee8021CnPortPriIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 4, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: ieee8021CnPortPriIfIndex.setReference('12.21.3')
if mibBuilder.loadTexts: ieee8021CnPortPriIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnPortPriIfIndex.setDescription('This object represents the port or aggregated port\n        to which the entry applies.\n\n        Upon a restart of the system, the system SHALL, if necessary,\n        change the value of this object, and rearrange the order of the\n        ieee8021CnPortPriTable, so that the value in\n        ieee8021CnPortPriIfIndex references the row in the ifXTable\n        with the same value for ifAlias that it referenced before the\n        system restart.  If no such entry exists in the ifXTable, then\n        the system SHALL delete the row in the ieee8021CnPortPriTable.\n       ')
ieee8021CnPortPriDefModeChoice = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 4, 1, 4), Ieee8021CnControlChoice().clone('cpcComp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnPortPriDefModeChoice.setReference('IEEE 32.1.3, 32.4.1')
if mibBuilder.loadTexts: ieee8021CnPortPriDefModeChoice.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnPortPriDefModeChoice.setDescription('This object determines how the CND defense mode and alternate\n        priority value of this port for this CNPV is to be selected,\n        either:\n\n            cpcAdmin(1) CND defense mode is controlled by\n                        ieee8021CnPortPriAdminDefenseMode, and alternate\n                        priority by ieee8021CnPortPriAlternatePriority.\n            cpcAuto(2)  CND defense mode is controlled by\n                        ieee8021CnPortPriAutoDefenseMode and alternate\n                        priority by ieee8021CnComPriAlternatePriority.\n            cpcComp(3)  CND defense mode and alternate priority are\n                        controlled by\n                        ieee8021CnComPriDefModeChoice.\n\n        This variable can override ieee8021CnComPriDefModeChoice.\n       ')
ieee8021CnPortPriAdminDefenseMode = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 4, 1, 5), Ieee8021CnDefenseMode().clone('cptDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnPortPriAdminDefenseMode.setReference('IEEE 32.1.3, 32.4.1')
if mibBuilder.loadTexts: ieee8021CnPortPriAdminDefenseMode.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnPortPriAdminDefenseMode.setDescription("This object indicates the operator's choice for the CND defense\n        mode in which this port is to operate for this CNPV whenever\n        ieee8021CnPortPriDefModeChoice has the value cpcAdmin(1).\n\n        This variable can override ieee8021CnComPriDefModeChoice.\n       ")
ieee8021CnPortPriAutoDefenseMode = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 4, 1, 6), Ieee8021CnDefenseMode().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cptInterior", 2), ("cptInteriorReady", 3), ("cptEdge", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CnPortPriAutoDefenseMode.setReference('IEEE 32.4.3')
if mibBuilder.loadTexts: ieee8021CnPortPriAutoDefenseMode.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnPortPriAutoDefenseMode.setDescription('This object indicates in which the CND defense mode this port\n        would operate for this CNPV as determined by the LLDP\n        Congestion Notification TLV.\n       ')
ieee8021CnPortPriLldpInstanceChoice = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 4, 1, 7), Ieee8021CnLldpChoice().clone('cnlComponent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnPortPriLldpInstanceChoice.setReference('32.1.3, 32.4.4')
if mibBuilder.loadTexts: ieee8021CnPortPriLldpInstanceChoice.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnPortPriLldpInstanceChoice.setDescription('Specifies how to determine the LLDP instance to be used for the\n        Congestion Notification TLV, either:\n            cnlNone(1)      No LLDP Congestion Notification TLV is to\n                            carry Per-priority CNPV indicators or\n                            Per-priority Ready indicators on this Port\n                            for this priority.\n            cnlAdmin(2)     ieee8021CnPortPriLldpInstanceSelector\n                            governs which LLDP instance is to carry\n                            Per-priority CNPV indicators and\n                            Per-priority Ready indicators for this\n                            priority in its Congestion Notification TLV\n                            on this Port\n            cnlComponent(3) ieee8021CnComPriLldpInstanceChoice\n                            governs LLDP instance selection for this\n                            Port and priority.\n\n        This object can override ieee8021CnComPriLldpInstanceChoice.\n       ')
ieee8021CnPortPriLldpInstanceSelector = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 4, 1, 8), LldpV2DestAddressTableIndex().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnPortPriLldpInstanceSelector.setReference('32.1.3, 32.4.5')
if mibBuilder.loadTexts: ieee8021CnPortPriLldpInstanceSelector.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnPortPriLldpInstanceSelector.setDescription('This object determines which LLDP instance selector, if any,\n        is used for automatic determination of the CND defense mode for\n        this port and CNPV.\n\n        This object can override ieee8021CnComPriLldpInstanceSelector.\n       ')
ieee8021CnPortPriAlternatePriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 4, 1, 9), IEEE8021PriorityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnPortPriAlternatePriority.setReference('32.4.6')
if mibBuilder.loadTexts: ieee8021CnPortPriAlternatePriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnPortPriAlternatePriority.setDescription('The Congestion Notification Priority Value to which an\n        incoming frame is to be mapped, in spite of what the\n        Priority Regereration Table says, if 1) Congestion\n        Notification is enabled and 2) the port is acting in the\n        cptEdge (4) CND defense mode.\n\n        This object is ignored unless ieee8021CnPortPriDefModeChoice\n        contains the value cpcAdmin (1).\n       ')
ieee8021CnCpTable = MibTable((1, 3, 111, 2, 802, 1, 1, 18, 1, 5), )
if mibBuilder.loadTexts: ieee8021CnCpTable.setReference('12.21.4')
if mibBuilder.loadTexts: ieee8021CnCpTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpTable.setDescription('Each row in this table supplies values for one\n        Congestion Point (CP).\n\n        This table is indexed by component, port (interface), and\n        an arbitrary CP index.  This arbitrary CP index is not\n        necessarily the Congestion Point Identifier (CPID) carried in\n        Congestion Notification Messages (CNMs).\n\n        Creating an entry in ieee8021CnCompntPriTable can create an\n        entry in this table, with the default values, on all ports in\n        the Bridge component or end station.  Because more than one\n        Congestion Notification Priority Value (CNPV) can flow\n        through a single CP, the creation of an entry in\n        ieee8021CnCompntPriTable does not necessarily create a new\n        entry in this table.  An end station can have more than one\n        CP for the same CNPV, so creating an entry in\n        ieee8021CnCompntPriTable can create multiple entries in this\n        table.\n\n        Because each port in a Bridge component or end station can have\n        a different relationship between CNPVs and CPs, the entries\n        created or deleted on each port can be different.\n\n        Deleting the last entry in ieee8021CnCompntPriTable for a\n        CNPV passing through the CP controlled by this entry deletes\n        the entry on some or all of the ports in the Bridge component\n        or end station.\n\n        Because each port in a Bridge component or end station can have\n        a different relationship between CNPVs and CPs, the entries\n        created or deleted on each port can be different.\n\n        The relationship between ieee8021CnCpIndex\n        values and CPs is an implementation dependent matter.\n\n        The contents of this table SHALL be maintained across a restart\n        of the system, except as noted in the description of\n        ieee8021CnCpIfIndex.\n       ')
ieee8021CnCpEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 18, 1, 5, 1), ).setIndexNames((0, "IEEE8021-CN-MIB", "ieee8021CnCpComponentId"), (0, "IEEE8021-CN-MIB", "ieee8021CnCpIfIndex"), (0, "IEEE8021-CN-MIB", "ieee8021CnCpIndex"))
if mibBuilder.loadTexts: ieee8021CnCpEntry.setReference('12.21.4')
if mibBuilder.loadTexts: ieee8021CnCpEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpEntry.setDescription('An entry in the Congestion Point table controls a single\n        Congestion Point on a port in a Bridge component or end station.\n       ')
ieee8021CnCpComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 5, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021CnCpComponentId.setReference('12.21.4')
if mibBuilder.loadTexts: ieee8021CnCpComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpComponentId.setDescription('The Bridge component within the system to which the information\n        in this ieee8021CnCpEntry applies.  If the system is\n        not a Bridge, or if only one component is present in the\n        Bridge, then this variable (index) MUST be equal to 1.\n       ')
ieee8021CnCpIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 5, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: ieee8021CnCpIfIndex.setReference('12.21.4')
if mibBuilder.loadTexts: ieee8021CnCpIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpIfIndex.setDescription('This object represents the port or aggregated port\n        to which the entry applies.\n\n        Upon a restart of the system, the system SHALL, if necessary,\n        change the value of this object, and rearrange the order of the\n        ieee8021CnCpTable, so that the value in ieee8021CnCpIfIndex\n        references the row in the ifXTable with the same value for\n        ifAlias that it referenced before the system restart.  If no\n        such entry exists in the ifXTable, then the system SHALL delete\n        the row in the ieee8021CnCpTable.\n       ')
ieee8021CnCpIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: ieee8021CnCpIndex.setReference('12.21.4')
if mibBuilder.loadTexts: ieee8021CnCpIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpIndex.setDescription('This object is an arbitrary integer indexing the entries in\n        this table among the entries for the same component and\n        interface.  In a system that supports no more than one\n        Congestion Point per priority per interface, ieee8021CnCpIndex\n        SHALL be equal to the lowest numerical\n        Congestion Notification Priority Value served by this\n        Congestion Point.  Otherwise, it SHOULD be a small integer\n        value.\n       ')
ieee8021CnCpPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 5, 1, 4), IEEE8021PriorityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CnCpPriority.setReference('12.21.4')
if mibBuilder.loadTexts: ieee8021CnCpPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpPriority.setDescription("This object indicates the lowest numerical\n        Congestion Notification Priority Value that this entry's\n        Congestion Point serves.\n       ")
ieee8021CnCpMacAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 5, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CnCpMacAddress.setReference('32.8.1')
if mibBuilder.loadTexts: ieee8021CnCpMacAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpMacAddress.setDescription('This object indicates the MAC address used as the source\n        address in Congestion Notification Message transmitted\n        by this Congestion Point.\n       ')
ieee8021CnCpIdentifier = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CnCpIdentifier.setReference('32.8.2')
if mibBuilder.loadTexts: ieee8021CnCpIdentifier.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpIdentifier.setDescription('This object indicates the Congestion Point Identifier (CPID)\n        transmitted in Congestion Notification Message by this\n        Congestion Point.\n\n        It is not specified whether the CPID reported in a CNM by a CP\n        that serves multiple CNPVs does or does not have the same value\n        for its different CNPVs.\n       ')
ieee8021CnCpQueueSizeSetPoint = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 4294967295)).clone(26000)).setUnits('octets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnCpQueueSizeSetPoint.setReference('30.2, 32.8.3')
if mibBuilder.loadTexts: ieee8021CnCpQueueSizeSetPoint.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpQueueSizeSetPoint.setDescription("This object is the set point for the queue managed by this\n        Congestion Point (CP).  Congestion Notification Messages are\n        transmitted to the sources of frames queued in this CP's\n        queue in order to keep the total number of octets stored in\n        the queue at this set point.\n       ")
ieee8021CnCpFeedbackWeight = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnCpFeedbackWeight.setReference('32.8.6')
if mibBuilder.loadTexts: ieee8021CnCpFeedbackWeight.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpFeedbackWeight.setDescription('This object controls the weight (cpW) change in queue length\n        in the calculation of cpFb when the Congestion Point is\n        generating a Congestion Notification Message.\n\n        The weight cpW is equal to two to the power of this object.\n        Thus, if this object contains a -1, cpW = 1/2.\n       ')
ieee8021CnCpMinSampleBase = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 5, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10000, 4294967295)).clone(150000)).setUnits('octets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnCpMinSampleBase.setReference('32.8.11')
if mibBuilder.loadTexts: ieee8021CnCpMinSampleBase.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpMinSampleBase.setDescription("This object determines the minimum number of octets to\n        enqueue in the Congestion Point's queue between transmissions\n        of Congestion Notification Messages.\n       ")
ieee8021CnCpDiscardedFrames = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 5, 1, 10), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CnCpDiscardedFrames.setReference('32.8.12')
if mibBuilder.loadTexts: ieee8021CnCpDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpDiscardedFrames.setDescription('The number of data frames discarded by the queue controlled\n        by this Congestion Point due to queue congestion.\n\n        Discontinuities in the value of this counter can occur\n        at re-initialization of the management system, and at\n        other times as indicated by the value of\n        ifCounterDiscontinuityTime object of the associated\n        interface (if any).\n       ')
ieee8021CnCpTransmittedFrames = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 5, 1, 11), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CnCpTransmittedFrames.setReference('32.8.13')
if mibBuilder.loadTexts: ieee8021CnCpTransmittedFrames.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpTransmittedFrames.setDescription('The number of data frames passed on to the queue controlled by\n        this Congestion Point that were not discarded due to queue\n        congestion.\n\n        Discontinuities in the value of this counter can occur\n        at re-initialization of the management system, and at\n        other times as indicated by the value of\n        ifCounterDiscontinuityTime object of the associated\n        interface (if any).\n       ')
ieee8021CnCpTransmittedCnms = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 5, 1, 12), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CnCpTransmittedCnms.setReference('32.8.14')
if mibBuilder.loadTexts: ieee8021CnCpTransmittedCnms.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpTransmittedCnms.setDescription('The number of Congestion Notification Message transmitted\n        by this Congestion Point.\n\n        Discontinuities in the value of this counter can occur\n        at re-initialization of the management system, and at\n        other times as indicated by the value of\n        ifCounterDiscontinuityTime object of the associated\n        interface (if any).\n       ')
ieee8021CnCpMinHeaderOctets = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setUnits('octets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnCpMinHeaderOctets.setReference('32.8.15, 32.9.4 k)')
if mibBuilder.loadTexts: ieee8021CnCpMinHeaderOctets.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpMinHeaderOctets.setDescription('Specifies the minimum number of octets to be returned in a\n        Congestion Notification Message from the mac_service_data_unit\n        of the data frame that triggered transmission of the CNM.  If\n        the mac_service_data_unit has fewer octets than the value of\n        this object, then all of the mac_service_data_unit is returned\n        in the CNM.\n       ')
ieee8021CnCpidToInterfaceTable = MibTable((1, 3, 111, 2, 802, 1, 1, 18, 1, 6), )
if mibBuilder.loadTexts: ieee8021CnCpidToInterfaceTable.setReference('17.2.13, 12.21.4, 32.8.2')
if mibBuilder.loadTexts: ieee8021CnCpidToInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpidToInterfaceTable.setDescription('This table allows the network manager to obtain the\n        interface index and CP index needed to access an entry in\n        the ieee8021CnCpTable, given a Congestion Point Identifier\n        (CPID) received a Congestion Notification Messages (CNMs).\n\n        Upon a restart of the system, the system SHALL, if necessary,\n        update this table to be consistent with the ieee8021CnCpTable.\n       ')
ieee8021CnCpidToInterfaceEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 18, 1, 6, 1), ).setIndexNames((0, "IEEE8021-CN-MIB", "ieee8021CnCpidToIfCpid"))
if mibBuilder.loadTexts: ieee8021CnCpidToInterfaceEntry.setReference('17.2.13')
if mibBuilder.loadTexts: ieee8021CnCpidToInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpidToInterfaceEntry.setDescription('An entry in the ieee8021CnCpidToInterfaceTable.  Translates\n        a Congestion Point Identifier to a component identifier,\n        interface index, and CP index\n       ')
ieee8021CnCpidToIfCpid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8))
if mibBuilder.loadTexts: ieee8021CnCpidToIfCpid.setReference('17.2.13, 32.8.2')
if mibBuilder.loadTexts: ieee8021CnCpidToIfCpid.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpidToIfCpid.setDescription('This object is the Congestion Point Identifier (CPID)\n        transmitted in Congestion Notification Message by a\n        Congestion Point residing in this Bridge component or\n        end station.\n       ')
ieee8021CnCpidToIfComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 6, 1, 2), IEEE8021PbbComponentIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CnCpidToIfComponentId.setReference('17.2.13')
if mibBuilder.loadTexts: ieee8021CnCpidToIfComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpidToIfComponentId.setDescription('The Bridge component within the system to which the information\n        in this ieee8021CnCpidToInterfaceEntry applies.  If the system\n        is not a Bridge, or if only one component is present in the\n        Bridge, then this variable (index) MUST be equal to 1.\n       ')
ieee8021CnCpidToIfIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 6, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CnCpidToIfIfIndex.setReference('17.2.13')
if mibBuilder.loadTexts: ieee8021CnCpidToIfIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpidToIfIfIndex.setDescription('This object indicates the interface on which the selected\n        Congestion Point resides.  This value can be used, along\n        with ieee8021CnCpidToIfCpIndex, to find the Congestion Point\n        in the ieee8021CnCpTable.\n       ')
ieee8021CnCpidToIfCpIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CnCpidToIfCpIndex.setReference('17.2.13')
if mibBuilder.loadTexts: ieee8021CnCpidToIfCpIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpidToIfCpIndex.setDescription("This object indicates the Congestion Point's index on the\n        interface on which the selected Congestion Point resides.\n        This value can be used, along with ieee8021CnCpidToIfIfIndex,\n        to find the Congestion Point in the ieee8021CnCpTable.\n       ")
ieee8021CnRpPortPriTable = MibTable((1, 3, 111, 2, 802, 1, 1, 18, 1, 7), )
if mibBuilder.loadTexts: ieee8021CnRpPortPriTable.setReference('12.21.5')
if mibBuilder.loadTexts: ieee8021CnRpPortPriTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpPortPriTable.setDescription('Each row in this table supplies values for all of the\n        Reaction Points (RPs) on one Port and one priority of an end\n        station or Bridge component.  This table is indexed by\n        component, port (interface), and priority.\n\n        Creating an entry in ieee8021CnCompntPriTable can create an\n        entry in this table, with the default values, on all ports\n        in the end station.\n\n        Deleting the an entry in ieee8021CnCompntPriTable for a\n        CNPV passing through the RP controlled by this entry deletes\n        entries on some or all of the ports in the end station.\n\n        The contents of this table SHALL be maintained across a restart\n        of the system, except as noted in the description of\n        ieee8021CnRpPortPriIfIndex.\n       ')
ieee8021CnRpPortPriEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 18, 1, 7, 1), ).setIndexNames((0, "IEEE8021-CN-MIB", "ieee8021CnRpPortPriComponentId"), (0, "IEEE8021-CN-MIB", "ieee8021CnRpPortPriPriority"), (0, "IEEE8021-CN-MIB", "ieee8021CnRpPortPriIfIndex"))
if mibBuilder.loadTexts: ieee8021CnRpPortPriEntry.setReference('12.21.5')
if mibBuilder.loadTexts: ieee8021CnRpPortPriEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpPortPriEntry.setDescription('An entry in the Reaction Point table controls all of the\n        Reaction Points on a port in an end station that share the same\n        priority value.\n       ')
ieee8021CnRpPortPriComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 7, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021CnRpPortPriComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpPortPriComponentId.setDescription('The Bridge component within the system to which the information\n        in this ieee8021CnRpGroupEntry applies.  If the system is\n        not a Bridge, or if only one component is present in the\n        Bridge, then this variable (index) MUST be equal to 1.\n       ')
ieee8021CnRpPortPriPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 7, 1, 2), IEEE8021PriorityValue())
if mibBuilder.loadTexts: ieee8021CnRpPortPriPriority.setReference('12.21.5')
if mibBuilder.loadTexts: ieee8021CnRpPortPriPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpPortPriPriority.setDescription("This object indicates the lowest numerical\n        Congestion Notification Priority Value that this entry's\n        Reaction Point serves.\n       ")
ieee8021CnRpPortPriIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 7, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: ieee8021CnRpPortPriIfIndex.setReference('12.21.5')
if mibBuilder.loadTexts: ieee8021CnRpPortPriIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpPortPriIfIndex.setDescription('This object indicates the interface on which the selected\n        Reaction Points reside.\n\n        Upon a restart of the system, the system SHALL, if necessary,\n        change the value of this object, and rearrange the order of the\n        ieee8021CnRpPortPriTable, so that the value in\n        ieee8021CnRpPortPriIfIndex references the row in the ifXTable\n        with the same value for ifAlias that it referenced before the\n        system restart.  If no such entry exists in the ifXTable, then\n        the system SHALL delete the row in the\n        ieee8021CnRpPortPriTable.\n       ')
ieee8021CnRpPortPriMaxRps = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnRpPortPriMaxRps.setReference('32.10.1')
if mibBuilder.loadTexts: ieee8021CnRpPortPriMaxRps.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpPortPriMaxRps.setDescription('An integer controlling the maximum number of Reaction Points\n        allowed for this CNPV on this Port. An end station SHALL\n        not create more than this many Reaction Point on this Port,\n        but it MAY create fewer.\n       ')
ieee8021CnRpPortPriCreatedRps = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CnRpPortPriCreatedRps.setReference('32.10.2, 32.10.3, 32.13.1')
if mibBuilder.loadTexts: ieee8021CnRpPortPriCreatedRps.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpPortPriCreatedRps.setDescription('This object returns the number of times any of the\n        Reaction Points (RPs) controlled by this entry has had\n        its rpEnabled variable set TRUE by the reception of a\n        Congestion Notification Message.\n\n        Dividing the change in ieee8021CnRpPortPriCentiseconds by the\n        change in this object over a time interval yields the average\n        lifetime of an active RP during that interval.\n       ')
ieee8021CnRpPortPriCentiseconds = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 7, 1, 6), Counter64()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021CnRpPortPriCentiseconds.setReference('32.10.3, 32.13.1')
if mibBuilder.loadTexts: ieee8021CnRpPortPriCentiseconds.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpPortPriCentiseconds.setDescription('This object returns the total number of centi-seconds that\n        any of the Reaction Points (RPs) controlled by this entry\n        has had its rpEnabled variable in the TRUE state.  That is,\n        once each centi-second, this counter is incremented by the\n        number of RPs this entry controls that are actively rate\n        limiting output frames.\n\n        Dividing the change in this object over a time interval by the\n        length of the interval yields the average number of RPs active\n        over that interval.  Dividing the change in this object by the\n        change in ieee8021CnRpPortPriCreatedRps over that same time\n        interval yields the average lifetime of an active RP during that\n        interval.\n       ')
ieee8021CnRpGroupTable = MibTable((1, 3, 111, 2, 802, 1, 1, 18, 1, 8), )
if mibBuilder.loadTexts: ieee8021CnRpGroupTable.setReference('12.21.6')
if mibBuilder.loadTexts: ieee8021CnRpGroupTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpGroupTable.setDescription('Each row in this table supplies values for one or more\n        Reaction Points (RPs).  This table is indexed by component,\n        port (interface), and an arbitrary RP index.\n\n        Creating an entry in ieee8021CnCompntPriTable can create an\n        entry in this table, with the default values, on all ports\n        in the end station.  An end station can have more than one\n        RP for the same Congestion Notification Priority Value\n        (CNPV), so creating an entry in ieee8021CnCompntPriTable can\n        create multiple entries in this table.\n\n        Because each port in a Bridge component or end station can have\n        a different relationship between CNPVs and RPs, the entries\n        created or deleted on each port can be different.\n\n        Deleting the an entry in ieee8021CnCompntPriTable for a\n        CNPV passing through the RP controlled by this entry deletes\n        entries on some or all of the ports in the end station.\n\n        Because each port in an end station can have a\n        different relationship between CNPVs and RPs, the entries\n        created or deleted on each port can be different.\n\n        The relationship between ieee8021CnRpgIdentifier\n        values and RPs is an implementation dependent matter.\n\n        The contents of this table SHALL be maintained across a restart\n        of the system, except as noted in the description of\n        ieee8021CnRpgIfIndex.\n       ')
ieee8021CnRpGroupEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 18, 1, 8, 1), ).setIndexNames((0, "IEEE8021-CN-MIB", "ieee8021CnRpgComponentId"), (0, "IEEE8021-CN-MIB", "ieee8021CnRpgPriority"), (0, "IEEE8021-CN-MIB", "ieee8021CnRpgIfIndex"), (0, "IEEE8021-CN-MIB", "ieee8021CnRpgIdentifier"))
if mibBuilder.loadTexts: ieee8021CnRpGroupEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpGroupEntry.setDescription('An entry in the Reaction Point table controls a group of\n        Reaction Points, on a port in an end station.  All of the\n        Reaction Point controlled by this entry serve the same\n        Congestion Notification Priority Value.\n       ')
ieee8021CnRpgComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 8, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021CnRpgComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpgComponentId.setDescription('The Bridge component within the system to which the information\n        in this ieee8021CnRpGroupEntry applies.  If the system is\n        not a Bridge, or if only one component is present in the\n        Bridge, then this variable (index) MUST be equal to 1.\n       ')
ieee8021CnRpgPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 8, 1, 2), IEEE8021PriorityValue())
if mibBuilder.loadTexts: ieee8021CnRpgPriority.setReference('12.21.5')
if mibBuilder.loadTexts: ieee8021CnRpgPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpgPriority.setDescription("This object indicates the lowest numerical\n        Congestion Notification Priority Value that this entry's\n        Reaction Point serves.\n       ")
ieee8021CnRpgIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 8, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: ieee8021CnRpgIfIndex.setReference('12.21.5')
if mibBuilder.loadTexts: ieee8021CnRpgIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpgIfIndex.setDescription('This object indicates the interface on which the group of\n        Reaction Points reside.\n\n        Upon a restart of the system, the system SHALL, if necessary,\n        change the value of this object, and rearrange the order of the\n        ieee8021CnRpGroupTable, so that the value in\n        ieee8021CnRpgIfIndex references the row in the ifXTable with\n        the same value for ifAlias that it referenced before the system\n        restart.  If no such entry exists in the ifXTable, then the\n        system SHALL delete the row in the ieee8021CnRpGroupTable.\n       ')
ieee8021CnRpgIdentifier = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: ieee8021CnRpgIdentifier.setReference('12.21.6')
if mibBuilder.loadTexts: ieee8021CnRpgIdentifier.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpgIdentifier.setDescription('This object is an arbitrary integer indexing the entries in\n        this table among the entries for the same interface.  This\n        index SHOULD, where possible, be equal to the\n        Congestion Notification Priority Value served by this\n        Reaction Point.\n       ')
ieee8021CnRpgEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 8, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnRpgEnable.setReference('32.11.1, 32.13.1')
if mibBuilder.loadTexts: ieee8021CnRpgEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpgEnable.setDescription('Controls the rpEnabled variable of the Reaction Point state\n        machines of the Reaction Points (RPs) controlled by this\n        entry as follows:\n            true(1)     The rpEnabled variable for the RPs controlled by\n                        this object are not held in the FALSE state,\n                        thus enabling them to pay attention to received\n                        CNMs.\n            false(2)    The rpEnabled variable for the RPs controlled by\n                        this object are held in the FALSE state, thus\n                        disabling them from paying attention to received\n                        CNMs.\n       ')
ieee8021CnRpgTimeReset = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 8, 1, 6), TimeInterval().clone(15)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnRpgTimeReset.setReference('32.11.2')
if mibBuilder.loadTexts: ieee8021CnRpgTimeReset.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpgTimeReset.setDescription('This object controls the value for all of the state machine\n        variables, rpgTimeReset, used to reset the timers RpWhile.\n       ')
ieee8021CnRpgByteReset = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 8, 1, 7), Unsigned32().clone(150000)).setUnits('octets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnRpgByteReset.setReference('32.11.3')
if mibBuilder.loadTexts: ieee8021CnRpgByteReset.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpgByteReset.setDescription('This object controls the value for all of the state machine\n        variables, rpgByteReset, used to reset the counters\n        rpByteCount.\n       ')
ieee8021CnRpgThreshold = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 8, 1, 8), Unsigned32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnRpgThreshold.setReference('32.11.4')
if mibBuilder.loadTexts: ieee8021CnRpgThreshold.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpgThreshold.setDescription('This object controls the number of times rpByteStage or\n        rpTimeStage can count before the\n        RP rate control state machine advances states.\n       ')
ieee8021CnRpgMaxRate = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 8, 1, 9), Unsigned32()).setUnits('Mb/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnRpgMaxRate.setReference('32.11.5')
if mibBuilder.loadTexts: ieee8021CnRpgMaxRate.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpgMaxRate.setDescription('This object controls the maximum rate, in multiples of 1 Mb/s,\n        at which an RP can transmit. Default value is the speed of the\n        port. A system SHALL support a minimim  value for this object\n        that is no larger than 5 Mbits/s (object value 5). This rate\n        includes all bits consequent to transmitting the frame on the\n        LAN, including preamble, inter-frame gap, etc.\n       ')
ieee8021CnRpgAiRate = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 8, 1, 10), Unsigned32().clone(5)).setUnits('Mb/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnRpgAiRate.setReference('32.11.6')
if mibBuilder.loadTexts: ieee8021CnRpgAiRate.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpgAiRate.setDescription('This object controls the transmission rate increment in the\n        RPR_ACTIVE_INCREASE state (rpgAiRate) in multiples of 1 Mb/s.\n        This rate includes all bits consequent to transmitting the\n        frame on the LAN, including preamble, inter-frame gap, etc.\n       ')
ieee8021CnRpgHaiRate = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 8, 1, 11), Unsigned32().clone(50)).setUnits('Mb/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnRpgHaiRate.setReference('32.11.7')
if mibBuilder.loadTexts: ieee8021CnRpgHaiRate.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpgHaiRate.setDescription('This object controls the transmission rate increment in the\n        RPR_HYPER_INCREASE state (rpgHaiRate) in multiples of 1 Mb/s.\n        This rate includes all bits consequent to transmitting the\n        frame on the LAN, including preamble, inter-frame gap, etc.\n       ')
ieee8021CnRpgGd = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 8, 1, 12), Integer32().clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnRpgGd.setReference('32.11.8')
if mibBuilder.loadTexts: ieee8021CnRpgGd.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpgGd.setDescription('This object controls the number of bits that the value of the\n        Quantized Feedback field received in a CNM PDU is shifted to\n        the right to decrease rpTargetRate. rpgGd is thus 2 to the\n        negative power of this object, e.g., 7 means rpgGd = 1/128.\n       ')
ieee8021CnRpgMinDecFac = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 8, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnRpgMinDecFac.setReference('32.11.9')
if mibBuilder.loadTexts: ieee8021CnRpgMinDecFac.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpgMinDecFac.setDescription('This object controls the minimum factor by which the current\n        RP transmit rate rpCurrentRate can be changed by reception\n        of a Congestion Notification Message.  Its integer value\n        represents a percentage, from 1% to 100%.\n       ')
ieee8021CnRpgMinRate = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 18, 1, 8, 1, 14), Unsigned32().clone(5)).setUnits('Mb/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021CnRpgMinRate.setReference('32.11.10')
if mibBuilder.loadTexts: ieee8021CnRpgMinRate.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpgMinRate.setDescription('This object controls the minimum transmission rate (rpgMinRate)\n        in multiples of 1 Mb/s.  A system SHALL support a value for\n        this object that is no larger than 5 Mb/s per second.\n        This rate includes all bits consequent to transmitting the\n        frame on the LAN, including preamble, inter-frame gap, etc.\n       ')
ieee8021CnCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 18, 2, 1))
ieee8021CnGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 18, 2, 2))
ieee8021CnGlobalReqdGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 18, 2, 2, 1)).setObjects(("IEEE8021-CN-MIB", "ieee8021CnGlobalMasterEnable"), ("IEEE8021-CN-MIB", "ieee8021CnComPriLldpInstanceChoice"), ("IEEE8021-CN-MIB", "ieee8021CnComPriLldpInstanceSelector"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CnGlobalReqdGroup = ieee8021CnGlobalReqdGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnGlobalReqdGroup.setDescription('Objects in the global required group.')
ieee8021CnCpGlobalGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 18, 2, 2, 2)).setObjects(("IEEE8021-CN-MIB", "ieee8021CnGlobalCnmTransmitPriority"), ("IEEE8021-CN-MIB", "ieee8021CnGlobalDiscardedFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CnCpGlobalGroup = ieee8021CnCpGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpGlobalGroup.setDescription('Objects in the Congestion Point global group.')
ieee8021CnCpidTranslateGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 18, 2, 2, 3)).setObjects(("IEEE8021-CN-MIB", "ieee8021CnCpidToIfComponentId"), ("IEEE8021-CN-MIB", "ieee8021CnCpidToIfIfIndex"), ("IEEE8021-CN-MIB", "ieee8021CnCpidToIfCpIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CnCpidTranslateGroup = ieee8021CnCpidTranslateGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpidTranslateGroup.setDescription('Objects in the CPID translate group.')
ieee8021CnEplGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 18, 2, 2, 4)).setObjects(("IEEE8021-CN-MIB", "ieee8021CnEpIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CnEplGroup = ieee8021CnEplGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnEplGroup.setDescription('Objects for the Errored Ports Table group.')
ieee8021CnComPriGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 18, 2, 2, 5)).setObjects(("IEEE8021-CN-MIB", "ieee8021CnComPriDefModeChoice"), ("IEEE8021-CN-MIB", "ieee8021CnComPriAdminDefenseMode"), ("IEEE8021-CN-MIB", "ieee8021CnComPriCreation"), ("IEEE8021-CN-MIB", "ieee8021CnComPriRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CnComPriGroup = ieee8021CnComPriGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnComPriGroup.setDescription('Objects for the global per-priority group.')
ieee8021CnCpPriGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 18, 2, 2, 6)).setObjects(("IEEE8021-CN-MIB", "ieee8021CnComPriAlternatePriority"), ("IEEE8021-CN-MIB", "ieee8021CnComPriAutoAltPri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CnCpPriGroup = ieee8021CnCpPriGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpPriGroup.setDescription('Objects for the Congestion Point per-priority group.')
ieee8021CnGlobalPriPortGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 18, 2, 2, 7)).setObjects(("IEEE8021-CN-MIB", "ieee8021CnPortPriDefModeChoice"), ("IEEE8021-CN-MIB", "ieee8021CnPortPriAdminDefenseMode"), ("IEEE8021-CN-MIB", "ieee8021CnPortPriAutoDefenseMode"), ("IEEE8021-CN-MIB", "ieee8021CnPortPriLldpInstanceChoice"), ("IEEE8021-CN-MIB", "ieee8021CnPortPriLldpInstanceSelector"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CnGlobalPriPortGroup = ieee8021CnGlobalPriPortGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnGlobalPriPortGroup.setDescription('Objects for the global per-priority per-port group.')
ieee8021CnCpPriPortGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 18, 2, 2, 8)).setObjects(("IEEE8021-CN-MIB", "ieee8021CnPortPriAlternatePriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CnCpPriPortGroup = ieee8021CnCpPriPortGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpPriPortGroup.setDescription('Objects for the Congestion Point per-priority per-port\n        group.\n       ')
ieee8021CnCpGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 18, 2, 2, 9)).setObjects(("IEEE8021-CN-MIB", "ieee8021CnCpPriority"), ("IEEE8021-CN-MIB", "ieee8021CnCpMacAddress"), ("IEEE8021-CN-MIB", "ieee8021CnCpIdentifier"), ("IEEE8021-CN-MIB", "ieee8021CnCpQueueSizeSetPoint"), ("IEEE8021-CN-MIB", "ieee8021CnCpFeedbackWeight"), ("IEEE8021-CN-MIB", "ieee8021CnCpMinSampleBase"), ("IEEE8021-CN-MIB", "ieee8021CnCpDiscardedFrames"), ("IEEE8021-CN-MIB", "ieee8021CnCpTransmittedFrames"), ("IEEE8021-CN-MIB", "ieee8021CnCpTransmittedCnms"), ("IEEE8021-CN-MIB", "ieee8021CnCpMinHeaderOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CnCpGroup = ieee8021CnCpGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnCpGroup.setDescription('Objects for the Congestion Point group.')
ieee8021CnRpppGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 18, 2, 2, 10)).setObjects(("IEEE8021-CN-MIB", "ieee8021CnRpPortPriMaxRps"), ("IEEE8021-CN-MIB", "ieee8021CnRpPortPriCreatedRps"), ("IEEE8021-CN-MIB", "ieee8021CnRpPortPriCentiseconds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CnRpppGroup = ieee8021CnRpppGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpppGroup.setDescription('Objects for the Reaction Point per-Port per-priority group.')
ieee8021CnRpGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 18, 2, 2, 11)).setObjects(("IEEE8021-CN-MIB", "ieee8021CnRpgEnable"), ("IEEE8021-CN-MIB", "ieee8021CnRpgTimeReset"), ("IEEE8021-CN-MIB", "ieee8021CnRpgByteReset"), ("IEEE8021-CN-MIB", "ieee8021CnRpgThreshold"), ("IEEE8021-CN-MIB", "ieee8021CnRpgMaxRate"), ("IEEE8021-CN-MIB", "ieee8021CnRpgAiRate"), ("IEEE8021-CN-MIB", "ieee8021CnRpgHaiRate"), ("IEEE8021-CN-MIB", "ieee8021CnRpgGd"), ("IEEE8021-CN-MIB", "ieee8021CnRpgMinDecFac"), ("IEEE8021-CN-MIB", "ieee8021CnRpgMinRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CnRpGroup = ieee8021CnRpGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnRpGroup.setDescription('Objects for the Reaction Point group.')
ieee8021CnBridgeCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 18, 2, 1, 1)).setObjects(("SNMPv2-MIB", "systemGroup"), ("IF-MIB", "ifGeneralInformationGroup"), ("IEEE8021-CN-MIB", "ieee8021CnGlobalReqdGroup"), ("IEEE8021-CN-MIB", "ieee8021CnCpGlobalGroup"), ("IEEE8021-CN-MIB", "ieee8021CnCpidTranslateGroup"), ("IEEE8021-CN-MIB", "ieee8021CnEplGroup"), ("IEEE8021-CN-MIB", "ieee8021CnComPriGroup"), ("IEEE8021-CN-MIB", "ieee8021CnCpPriGroup"), ("IEEE8021-CN-MIB", "ieee8021CnGlobalPriPortGroup"), ("IEEE8021-CN-MIB", "ieee8021CnCpPriPortGroup"), ("IEEE8021-CN-MIB", "ieee8021CnCpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CnBridgeCompliance = ieee8021CnBridgeCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnBridgeCompliance.setDescription('The compliance statement for support by a Bridge of\n        the IEEE8021-MIRP-MIB module.')
ieee8021CnStationCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 18, 2, 1, 2)).setObjects(("SNMPv2-MIB", "systemGroup"), ("IF-MIB", "ifGeneralInformationGroup"), ("IEEE8021-CN-MIB", "ieee8021CnGlobalReqdGroup"), ("IEEE8021-CN-MIB", "ieee8021CnComPriGroup"), ("IEEE8021-CN-MIB", "ieee8021CnGlobalPriPortGroup"), ("IEEE8021-CN-MIB", "ieee8021CnRpppGroup"), ("IEEE8021-CN-MIB", "ieee8021CnRpGroup"), ("IEEE8021-CN-MIB", "ieee8021CnCpGlobalGroup"), ("IEEE8021-CN-MIB", "ieee8021CnCpidTranslateGroup"), ("IEEE8021-CN-MIB", "ieee8021CnEplGroup"), ("IEEE8021-CN-MIB", "ieee8021CnCpPriGroup"), ("IEEE8021-CN-MIB", "ieee8021CnCpPriPortGroup"), ("IEEE8021-CN-MIB", "ieee8021CnCpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021CnStationCompliance = ieee8021CnStationCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021CnStationCompliance.setDescription('The compliance statement for support by an end station of\n        the IEEE8021-MIRP-MIB module.')
mibBuilder.exportSymbols("IEEE8021-CN-MIB", ieee8021CnStationCompliance=ieee8021CnStationCompliance, ieee8021CnCpPriPortGroup=ieee8021CnCpPriPortGroup, ieee8021CnComPriCreation=ieee8021CnComPriCreation, ieee8021CnEpIfIndex=ieee8021CnEpIfIndex, ieee8021CnComPriAlternatePriority=ieee8021CnComPriAlternatePriority, ieee8021CnPortPriority=ieee8021CnPortPriority, ieee8021CnComPriDefModeChoice=ieee8021CnComPriDefModeChoice, ieee8021CnComPriRowStatus=ieee8021CnComPriRowStatus, Ieee8021CnControlChoice=Ieee8021CnControlChoice, ieee8021CnRpgHaiRate=ieee8021CnRpgHaiRate, ieee8021CnRpgPriority=ieee8021CnRpgPriority, ieee8021CnRpppGroup=ieee8021CnRpppGroup, ieee8021CnCpidToIfCpid=ieee8021CnCpidToIfCpid, ieee8021CnRpGroup=ieee8021CnRpGroup, ieee8021CnCpFeedbackWeight=ieee8021CnCpFeedbackWeight, ieee8021CnRpPortPriIfIndex=ieee8021CnRpPortPriIfIndex, ieee8021CnRpPortPriCreatedRps=ieee8021CnRpPortPriCreatedRps, ieee8021CnCpIndex=ieee8021CnCpIndex, ieee8021CnPortPriAutoDefenseMode=ieee8021CnPortPriAutoDefenseMode, ieee8021CnRpgMaxRate=ieee8021CnRpgMaxRate, ieee8021CnPortPriAdminDefenseMode=ieee8021CnPortPriAdminDefenseMode, ieee8021CnGlobalEntry=ieee8021CnGlobalEntry, ieee8021CnPortPriIfIndex=ieee8021CnPortPriIfIndex, ieee8021CnRpgByteReset=ieee8021CnRpgByteReset, ieee8021CnRpPortPriTable=ieee8021CnRpPortPriTable, ieee8021CnCpPriority=ieee8021CnCpPriority, ieee8021CnRpgGd=ieee8021CnRpgGd, Ieee8021CnDefenseMode=Ieee8021CnDefenseMode, ieee8021CnPortPriAlternatePriority=ieee8021CnPortPriAlternatePriority, ieee8021CnErroredPortTable=ieee8021CnErroredPortTable, ieee8021CnCompliances=ieee8021CnCompliances, ieee8021CnCompntPriTable=ieee8021CnCompntPriTable, ieee8021CnGlobalReqdGroup=ieee8021CnGlobalReqdGroup, ieee8021CnEpPriority=ieee8021CnEpPriority, ieee8021CnCompntPriEntry=ieee8021CnCompntPriEntry, ieee8021CnCpGroup=ieee8021CnCpGroup, ieee8021CnCpDiscardedFrames=ieee8021CnCpDiscardedFrames, ieee8021CnCpidToInterfaceEntry=ieee8021CnCpidToInterfaceEntry, PYSNMP_MODULE_ID=ieee8021CnMib, ieee8021CnGroups=ieee8021CnGroups, ieee8021CnGlobalDiscardedFrames=ieee8021CnGlobalDiscardedFrames, ieee8021CnComPriAdminDefenseMode=ieee8021CnComPriAdminDefenseMode, ieee8021CnCpComponentId=ieee8021CnCpComponentId, ieee8021CnCpEntry=ieee8021CnCpEntry, ieee8021CnGlobalComponentId=ieee8021CnGlobalComponentId, ieee8021CnComPriGroup=ieee8021CnComPriGroup, ieee8021CnEpComponentId=ieee8021CnEpComponentId, ieee8021CnCpIfIndex=ieee8021CnCpIfIndex, ieee8021CnComPriPriority=ieee8021CnComPriPriority, ieee8021CnCpQueueSizeSetPoint=ieee8021CnCpQueueSizeSetPoint, ieee8021CnPortPriLldpInstanceSelector=ieee8021CnPortPriLldpInstanceSelector, ieee8021CnGlobalTable=ieee8021CnGlobalTable, ieee8021CnRpPortPriCentiseconds=ieee8021CnRpPortPriCentiseconds, ieee8021CnComPriAutoAltPri=ieee8021CnComPriAutoAltPri, ieee8021CnRpgEnable=ieee8021CnRpgEnable, ieee8021CnMib=ieee8021CnMib, ieee8021CnComPriLldpInstanceChoice=ieee8021CnComPriLldpInstanceChoice, ieee8021CnComPriLldpInstanceSelector=ieee8021CnComPriLldpInstanceSelector, ieee8021CnRpPortPriComponentId=ieee8021CnRpPortPriComponentId, ieee8021CnMIBObjects=ieee8021CnMIBObjects, ieee8021CnRpgMinDecFac=ieee8021CnRpgMinDecFac, ieee8021CnGlobalMasterEnable=ieee8021CnGlobalMasterEnable, ieee8021CnPortPriComponentId=ieee8021CnPortPriComponentId, ieee8021CnCpTransmittedFrames=ieee8021CnCpTransmittedFrames, ieee8021CnCpMinSampleBase=ieee8021CnCpMinSampleBase, ieee8021CnRpgMinRate=ieee8021CnRpgMinRate, ieee8021CnRpgTimeReset=ieee8021CnRpgTimeReset, ieee8021CnRpgAiRate=ieee8021CnRpgAiRate, ieee8021CnPortPriEntry=ieee8021CnPortPriEntry, ieee8021CnRpgIdentifier=ieee8021CnRpgIdentifier, ieee8021CnCpidToIfCpIndex=ieee8021CnCpidToIfCpIndex, ieee8021CnRpgIfIndex=ieee8021CnRpgIfIndex, ieee8021CnCpIdentifier=ieee8021CnCpIdentifier, ieee8021CnCpidToIfIfIndex=ieee8021CnCpidToIfIfIndex, ieee8021CnRpPortPriMaxRps=ieee8021CnRpPortPriMaxRps, ieee8021CnCpMacAddress=ieee8021CnCpMacAddress, ieee8021CnCpPriGroup=ieee8021CnCpPriGroup, ieee8021CnRpGroupEntry=ieee8021CnRpGroupEntry, ieee8021CnComPriComponentId=ieee8021CnComPriComponentId, ieee8021CnCpidToInterfaceTable=ieee8021CnCpidToInterfaceTable, ieee8021CnGlobalCnmTransmitPriority=ieee8021CnGlobalCnmTransmitPriority, ieee8021CnCpidToIfComponentId=ieee8021CnCpidToIfComponentId, ieee8021CnConformance=ieee8021CnConformance, ieee8021CnGlobalPriPortGroup=ieee8021CnGlobalPriPortGroup, ieee8021CnCpMinHeaderOctets=ieee8021CnCpMinHeaderOctets, ieee8021CnCpTransmittedCnms=ieee8021CnCpTransmittedCnms, ieee8021CnErroredPortEntry=ieee8021CnErroredPortEntry, ieee8021CnRpgComponentId=ieee8021CnRpgComponentId, ieee8021CnPortPriLldpInstanceChoice=ieee8021CnPortPriLldpInstanceChoice, ieee8021CnCpGlobalGroup=ieee8021CnCpGlobalGroup, ieee8021CnEplGroup=ieee8021CnEplGroup, ieee8021CnPortPriTable=ieee8021CnPortPriTable, ieee8021CnCpidTranslateGroup=ieee8021CnCpidTranslateGroup, Ieee8021CnLldpChoice=Ieee8021CnLldpChoice, ieee8021CnBridgeCompliance=ieee8021CnBridgeCompliance, ieee8021CnPortPriDefModeChoice=ieee8021CnPortPriDefModeChoice, ieee8021CnRpPortPriPriority=ieee8021CnRpPortPriPriority, ieee8021CnCpTable=ieee8021CnCpTable, ieee8021CnRpgThreshold=ieee8021CnRpgThreshold, ieee8021CnRpGroupTable=ieee8021CnRpGroupTable, ieee8021CnRpPortPriEntry=ieee8021CnRpPortPriEntry)
