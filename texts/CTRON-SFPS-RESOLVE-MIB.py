#
# PySNMP MIB module CTRON-SFPS-RESOLVE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFPS-RESOLVE-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 08:54:39 2024
# On host fv-az1149-759 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
sfpsSubnetResolveAPI, sfpsTableResolveAPI, sfpsISPResolve, sfpsUnresolveTableStats, sfpsBlockResolveStats, sfpsMobilityStats, sfpsResolveStats, sfpsSubnetResolveStats, sfpsSubnetResolveNvram, sfpsUnresolve, sfpsRelayAgentResolve, sfpsBlockResolveAPI, sfpsSwitchResolve, sfpsRelayAgentResolveStats, sfpsBlockResolve, sfpsSubnetResolve, sfpsTableResolve, sfpsUnresolveTableAPI = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "sfpsSubnetResolveAPI", "sfpsTableResolveAPI", "sfpsISPResolve", "sfpsUnresolveTableStats", "sfpsBlockResolveStats", "sfpsMobilityStats", "sfpsResolveStats", "sfpsSubnetResolveStats", "sfpsSubnetResolveNvram", "sfpsUnresolve", "sfpsRelayAgentResolve", "sfpsBlockResolveAPI", "sfpsSwitchResolve", "sfpsRelayAgentResolveStats", "sfpsBlockResolve", "sfpsSubnetResolve", "sfpsTableResolve", "sfpsUnresolveTableAPI")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, TimeTicks, ObjectIdentity, Counter64, NotificationType, IpAddress, Bits, Gauge32, Unsigned32, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "Counter64", "NotificationType", "IpAddress", "Bits", "Gauge32", "Unsigned32", "MibIdentifier", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class HexInteger(Integer32):
    pass

class SfpsAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sfpsServiceCenterResolveTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1), )
if mibBuilder.loadTexts: sfpsServiceCenterResolveTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterResolveTable.setDescription('This table gives resolve semantics to call processing.')
sfpsServiceCenterResolveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-RESOLVE-MIB", "sfpsServiceCenterResolveHashLeaf"))
if mibBuilder.loadTexts: sfpsServiceCenterResolveEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterResolveEntry.setDescription('Each entry contains the configuration of the Resolve Entry.')
sfpsServiceCenterResolveHashLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 1), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterResolveHashLeaf.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterResolveHashLeaf.setDescription('Server hash, part of instance key.')
sfpsServiceCenterResolveMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterResolveMetric.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterResolveMetric.setDescription('Defines order servers are called low to high.')
sfpsServiceCenterResolveName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterResolveName.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterResolveName.setDescription('Server name.')
sfpsServiceCenterResolveOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("kStatusRunning", 1), ("kStatusHalted", 2), ("kStatusPending", 3), ("kStatusFaulted", 4), ("kStatusNotStarted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterResolveOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterResolveOperStatus.setDescription('Operational state of entry.')
sfpsServiceCenterResolveAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsServiceCenterResolveAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterResolveAdminStatus.setDescription('Administrative State of Entry.')
sfpsServiceCenterResolveStatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterResolveStatusTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterResolveStatusTime.setDescription('Time Tick of last operStatus change.')
sfpsServiceCenterResolveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterResolveRequests.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterResolveRequests.setDescription('Requests made to server.')
sfpsServiceCenterResolveResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterResolveResponses.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterResolveResponses.setDescription('GOOD replies by server.')
sfpsResolveStatsRequests = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsRequests.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsRequests.setDescription('')
sfpsResolveStatsResponses = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsResponses.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsResponses.setDescription('')
sfpsResolveStatsAcks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsAcks.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsAcks.setDescription('')
sfpsResolveStatsNaks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsNaks.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsNaks.setDescription('')
sfpsResolveStatsUnknowns = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsUnknowns.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsUnknowns.setDescription('')
sfpsResolveStatsNoAnswer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsNoAnswer.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsNoAnswer.setDescription('')
sfpsResolveStatsTimeout = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsResolveStatsTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsTimeout.setDescription('')
sfpsResolveStatsAvgResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsAvgResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsAvgResponseTime.setDescription('')
sfpsResolveStatsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsTableSize.setDescription('')
sfpsResolveStatsTableHigh = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsTableHigh.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsTableHigh.setDescription('')
sfpsResolveStatsErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsErrorCount.setDescription('')
sfpsResolveStatsStaleCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsStaleCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsStaleCount.setDescription('')
sfpsResolveStatsDupMsgCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsDupMsgCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsDupMsgCount.setDescription('')
sfpsResolveStatsReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsReqRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsReqRcvd.setDescription('')
sfpsResolveStatsRespAcksSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsRespAcksSent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsRespAcksSent.setDescription('')
sfpsResolveStatsRespNaksSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsRespNaksSent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsRespNaksSent.setDescription('')
sfpsResolveStatsRespUnknownsSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsRespUnknownsSent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsRespUnknownsSent.setDescription('')
sfpsResolveStatsRespRecvd = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsRespRecvd.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsRespRecvd.setDescription('')
sfpsResolveStatsResolveMask = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsResolveMask.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsResolveMask.setDescription('')
sfpsResolveStatsINBMask = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsINBMask.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsINBMask.setDescription('')
sfpsResolveStatsFloodMask = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsFloodMask.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsFloodMask.setDescription('')
sfpsResolveStatsChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsChangeCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsChangeCount.setDescription('')
sfpsResolveStatsChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsChangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsChangeTime.setDescription('')
sfpsResolveStatsResetStats = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsResolveStatsResetStats.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsResetStats.setDescription('')
sfpsResolveStatsAnswerUnknown = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsResolveStatsAnswerUnknown.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsAnswerUnknown.setDescription('')
sfpsResolveStatsDisableProxy = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsResolveStatsDisableProxy.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsDisableProxy.setDescription('')
sfpsResolveStatsDisableLayer3 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsResolveStatsDisableLayer3.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsDisableLayer3.setDescription('')
sfpsResolveStatsCSPDaveMalPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsCSPDaveMalPkts.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsCSPDaveMalPkts.setDescription('')
sfpsResolveStatsStaleTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsResolveStatsStaleTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsStaleTimeOut.setDescription('')
sfpsResolveStatsMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsResolveStatsMaxResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsMaxResponseTime.setDescription('')
sfpsResolveStatsStaleEntryLost = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsStaleEntryLost.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsStaleEntryLost.setDescription('')
sfpsResolveStatsDaveEntryLost = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 3, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsResolveStatsDaveEntryLost.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsResolveStatsDaveEntryLost.setDescription('')
sfpsMobilityStatsOrigSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsOrigSendCount.setDescription('')
sfpsMobilityStatsOrigReceiveCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigReceiveCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsOrigReceiveCount.setDescription('')
sfpsMobilityStatsOrigNUSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigNUSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsOrigNUSendCount.setDescription('')
sfpsMobilityStatsOrigNASendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigNASendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsOrigNASendCount.setDescription('')
sfpsMobilityStatsOrigNUASendReqCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigNUASendReqCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsOrigNUASendReqCount.setDescription('')
sfpsMobilityStatsOrigRetrySendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigRetrySendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsOrigRetrySendCount.setDescription('')
sfpsMobilityStatsOrigLocalMoveCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigLocalMoveCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsOrigLocalMoveCount.setDescription('')
sfpsMobilityStatsOrigUnknownCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigUnknownCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsOrigUnknownCount.setDescription('')
sfpsMobilityStatsOrigAckCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigAckCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsOrigAckCount.setDescription('')
sfpsMobilityStatsOrigNakNodeCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigNakNodeCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsOrigNakNodeCount.setDescription('')
sfpsMobilityStatsOrigNakAliasCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsOrigNakAliasCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsOrigNakAliasCount.setDescription('')
sfpsMobilityStatsErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsErrorCount.setDescription('')
sfpsMobilityStatsGenRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsGenRecCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsGenRecCount.setDescription('')
sfpsMobilityStatsGenSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsGenSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsGenSendCount.setDescription('')
sfpsMobilityStatsGenReqRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsGenReqRecCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsGenReqRecCount.setDescription('')
sfpsMobilityStatsGenReqRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsGenReqRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsGenReqRetryCount.setDescription('')
sfpsMobilityStatsGenReqForwardCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsGenReqForwardCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsGenReqForwardCount.setDescription('')
sfpsMobilityStatsGenRespRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsGenRespRecCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsGenRespRecCount.setDescription('')
sfpsMobilityStatsGenRespSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsGenRespSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsGenRespSendCount.setDescription('')
sfpsMobilityStatsNUReqRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNUReqRecCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsNUReqRecCount.setDescription('')
sfpsMobilityStatsNURespSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNURespSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsNURespSendCount.setDescription('')
sfpsMobilityStatsNAReqRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNAReqRecCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsNAReqRecCount.setDescription('')
sfpsMobilityStatsNARespSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNARespSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsNARespSendCount.setDescription('')
sfpsMobilityStatsNUARespRecUnknownCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNUARespRecUnknownCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsNUARespRecUnknownCount.setDescription('')
sfpsMobilityStatsNURespRecAckCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNURespRecAckCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsNURespRecAckCount.setDescription('')
sfpsMobilityStatsNUARespRecAliasNakCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNUARespRecAliasNakCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsNUARespRecAliasNakCount.setDescription('')
sfpsMobilityStatsNUARespRecNodeNakCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNUARespRecNodeNakCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsNUARespRecNodeNakCount.setDescription('')
sfpsMobilityStatsNURespAliasNakSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNURespAliasNakSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsNURespAliasNakSendCount.setDescription('')
sfpsMobilityStatsNURespNodeNakSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNURespNodeNakSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsNURespNodeNakSendCount.setDescription('')
sfpsMobilityStatsNURespAckSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNURespAckSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsNURespAckSendCount.setDescription('')
sfpsMobilityStatsNURespUnknownSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsNURespUnknownSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsNURespUnknownSendCount.setDescription('')
sfpsMobilityStatsInterNUARespRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterNUARespRecCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsInterNUARespRecCount.setDescription('')
sfpsMobilityStatsInterNUARespSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterNUARespSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsInterNUARespSendCount.setDescription('')
sfpsMobilityStatsInterNewUserRespRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterNewUserRespRecCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsInterNewUserRespRecCount.setDescription('')
sfpsMobilityStatsInterNewAliasRespRecCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterNewAliasRespRecCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsInterNewAliasRespRecCount.setDescription('')
sfpsMobilityStatsInterNewUserRespSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterNewUserRespSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsInterNewUserRespSendCount.setDescription('')
sfpsMobilityStatsInterNewAliasRespSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterNewAliasRespSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsInterNewAliasRespSendCount.setDescription('')
sfpsMobilityStatsInterRespNakNodeSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterRespNakNodeSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsInterRespNakNodeSendCount.setDescription('')
sfpsMobilityStatsInterRespNakAliasSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterRespNakAliasSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsInterRespNakAliasSendCount.setDescription('')
sfpsMobilityStatsInterRespUnknownSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterRespUnknownSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsInterRespUnknownSendCount.setDescription('')
sfpsMobilityStatsInterRespAckSendCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsInterRespAckSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsInterRespAckSendCount.setDescription('')
sfpsMobilityStatsAliasOnOfSwitch = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMobilityStatsAliasOnOfSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsAliasOnOfSwitch.setDescription('')
sfpsMobilityStatsResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsResetCounters.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsResetCounters.setDescription('')
sfpsMobilityStatsRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsRetryCount.setDescription('')
sfpsMobilityStatsRetryDrops = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsRetryDrops.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsRetryDrops.setDescription('')
sfpsMobilityStatsMaxRetryReached = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsMaxRetryReached.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsMaxRetryReached.setDescription('')
sfpsMobilityStatsNewUserRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsNewUserRetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsNewUserRetryTime.setDescription('')
sfpsMobilityStatsMaxNewUserRetries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsMaxNewUserRetries.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsMaxNewUserRetries.setDescription('')
sfpsMobilityStatsNewUserStaleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsNewUserStaleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsNewUserStaleTimeout.setDescription('(1/10) Seconds)')
sfpsMobilityStatsAvgResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsAvgResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsAvgResponseTime.setDescription('(msec)')
sfpsMobilityStatsMaxResponeTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 9, 2, 3, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsMobilityStatsMaxResponeTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMobilityStatsMaxResponeTime.setDescription('(msec)')
sfpsUnresolveTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1), )
if mibBuilder.loadTexts: sfpsUnresolveTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTable.setDescription('A table of address objects which went unresolved at\n                 some point in time.')
sfpsUnresolveTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1), ).setIndexNames((0, "CTRON-SFPS-RESOLVE-MIB", "sfpsUnresolveTableHash"), (0, "CTRON-SFPS-RESOLVE-MIB", "sfpsUnresolveTableHashIndex"))
if mibBuilder.loadTexts: sfpsUnresolveTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableEntry.setDescription('')
sfpsUnresolveTableHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableHash.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableHash.setDescription("A hash of the address object value contained in\n                 this entry's sfpsUnresolveTableAOValue")
sfpsUnresolveTableHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableHashIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableHashIndex.setDescription('An index into the hash bucket.')
sfpsUnresolveTableAOType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("aoMacDX", 1), ("aoIpxSap", 2), ("aoIpxRIP", 3), ("aoInetYP", 4), ("aoInetUDP", 5), ("aoIpxIpx", 6), ("aoInetIP", 7), ("aoInetRPC", 8), ("aoInetRIP", 9), ("aoMacDXMcast", 10), ("aoAtDDP", 11), ("aoEmpty", 12), ("aoVlan", 13), ("aoHostName", 14), ("aoNetBiosName", 15), ("aoNBT", 16), ("aoInetIPMask", 17), ("aoIpxSap8022", 18), ("aoIpxSapSnap", 19), ("aoIpxSapEnet", 20), ("aoDHCPXID", 21), ("aoipxRip8022", 22), ("aoipxRipSnap", 23), ("aoipxRipEnet", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableAOType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableAOType.setDescription('The address object type of this entry')
sfpsUnresolveTableAOValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableAOValue.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableAOValue.setDescription('The address object value of the entry.')
sfpsUnresolveTableNumMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableNumMisses.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableNumMisses.setDescription('The number of times an resolve request for this address object\n                 went unresolved.')
sfpsUnresolveTableLastMissTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableLastMissTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableLastMissTime.setDescription('The value of sysUpTime when the most recent resolve request for\n                 this address object went unresolved.')
sfpsUnresolveTableLastCallProc = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableLastCallProc.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableLastCallProc.setDescription('.')
sfpsUnresolveTableSrcMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 8), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableSrcMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableSrcMAC.setDescription('The MAC address of the most recent originator of a packet\n                 attempting to reach the address.')
sfpsUnresolveTableAvgPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableAvgPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableAvgPeriod.setDescription('The average number of seconds between resolve requests for\n                 this address object that went unresolved.')
sfpsUnresolveTableBlockFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableBlockFlag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableBlockFlag.setDescription("A flag indicating whether this address object was put in the\n                 Block Resolve Server's block table.")
sfpsUnresolveTableAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set-parameter", 1), ("reset", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsUnresolveTableAPIVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableAPIVerb.setDescription('When set, the corresponding action is taken. For set-parameter,\n                 the most recent set to sfpsUnresolveTableAPIAgeOutTime takes\n                 affect. For reset, all entries in sfpsUnresolveTable are deleted.')
sfpsUnresolveTableAPIAgeOutTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsUnresolveTableAPIAgeOutTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableAPIAgeOutTime.setDescription('The age out time in minutes in which entries in the\n                 sfpsUnresolveTable are deleted. Any entry in which sysUpTime\n                 minus last miss time is greater than this value is\n                 deleted from the table.')
sfpsUnresolveTableAPIBlockHoldDown = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsUnresolveTableAPIBlockHoldDown.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableAPIBlockHoldDown.setDescription('')
sfpsUnresolveTableStatsNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableStatsNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableStatsNumEntries.setDescription('The number of entries currently in sfpsUnresolveTable.')
sfpsUnresolveTableStatsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableStatsTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableStatsTableSize.setDescription('The maximum number of entries allowed in sfpsUnresolveTable')
sfpsUnresolveTableStatsTableFullCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableStatsTableFullCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableStatsTableFullCount.setDescription('The number of times an attempt to add an entry to the\n                 sfpsUnresolveTable failed because the table was full.')
sfpsUnresolveTableStatsTotalReqSeen = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableStatsTotalReqSeen.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableStatsTotalReqSeen.setDescription('The total number of requests seen by the Unresolve Server.\n                 This does not include inter-switch resolve requests.')
sfpsUnresolveTableStatsAvgReqTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 5, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsUnresolveTableStatsAvgReqTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsUnresolveTableStatsAvgReqTime.setDescription('The average time in 10 msec units between unresolved requests\n                 seen by the server.')
sfpsBlockResolveTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1), )
if mibBuilder.loadTexts: sfpsBlockResolveTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveTable.setDescription("This table contains a list of address objects whose resolve\n                 requests are being blocked for a given time period by the\n                 Block Resolve Server. The Block Resolve Server is actually\n                 a 'leaky bucket' server that will slow down high frequency\n                 resolve requests for addresses that remain unresolved. \n                 Resolve requests are sent through the system at a slower\n                 user configurable rate.")
sfpsBlockResolveTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1), ).setIndexNames((0, "CTRON-SFPS-RESOLVE-MIB", "sfpsBlockResolveTableHash"), (0, "CTRON-SFPS-RESOLVE-MIB", "sfpsBlockResolveTableHashIndex"))
if mibBuilder.loadTexts: sfpsBlockResolveTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveTableEntry.setDescription('')
sfpsBlockResolveTableHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableHash.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveTableHash.setDescription("A hash of the address object value contained in\n                 this entry's sfpsBlockResolveTableAOValue")
sfpsBlockResolveTableHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableHashIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveTableHashIndex.setDescription('An index into the hash bucket')
sfpsBlockResolveTableAOType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("aoMacDX", 1), ("aoIpxSap", 2), ("aoIpxRIP", 3), ("aoInetYP", 4), ("aoInetUDP", 5), ("aoIpxIpx", 6), ("aoInetIP", 7), ("aoInetRPC", 8), ("aoInetRIP", 9), ("aoMacDXMcast", 10), ("aoAtDDP", 11), ("aoEmpty", 12), ("aoVlan", 13), ("aoHostName", 14), ("aoNetBiosName", 15), ("aoInetIPMask", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableAOType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveTableAOType.setDescription('The address object type of this entry')
sfpsBlockResolveTableAOValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableAOValue.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveTableAOValue.setDescription('The address object value of the entry.')
sfpsBlockResolveTableStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveTableStartTime.setDescription('The value of sysUpTime when blocking of this request object\n                 was started.')
sfpsBlockResolveTableNumBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableNumBlocked.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveTableNumBlocked.setDescription('The number of times a resolve request for this address object\n                 was blocked resulting in the deletion of the call.')
sfpsBlockResolveTableNumSent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableNumSent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveTableNumSent.setDescription('The number of times a resolve request for this address object\n                 was sent through the system.')
sfpsBlockResolveTableLastSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableLastSeen.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveTableLastSeen.setDescription('The value of sysUpTime when the most recent resolve request\n                 was seen by the Block Resolve Server.')
sfpsBlockResolveTableAvgPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveTableAvgPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveTableAvgPeriod.setDescription('The average period in seconds between resolve requests for this\n                 address object since sfpsBlockResolveTableStartTime')
sfpsBlockResolveAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("add-entry", 2), ("del-entry", 3), ("set-parameter", 4), ("reset", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockResolveAPIVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveAPIVerb.setDescription('When set, the corresponding action is taken.\n                 For add-entry, an entry is added to sfpsBlockResolveTable\n                 for the given sfpsBlockResolveAPIAOType and\n                 sfpsBlockResolveAPIAOValue. For del-entry, an entry is\n                 deleted from the sfpsBlockResolveTable. For set-parameter,\n                 the most recent sets of sfpsBlockResolveAPITestCount,\n                 sfpsBlockResolveAPIThreshold, sfpsBlockResolveAPISendPeriod\n                 are applied.')
sfpsBlockResolveAPIAOType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockResolveAPIAOType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveAPIAOType.setDescription('The address object type specified by a well-known string\n                 to be used in the next Verb action.')
sfpsBlockResolveAPIAOValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockResolveAPIAOValue.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveAPIAOValue.setDescription('The address object value to be used in the next Verb action.')
sfpsBlockResolveAPITestCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockResolveAPITestCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveAPITestCount.setDescription("The number of unknown resolve requests seen before a test\n                 is made to determine whether further resolve requests should\n                 be blocked or not. Block tests are made on address objects\n                 every 'N' resolve requests that fail where 'N' equals\n                 the value of this object.")
sfpsBlockResolveAPIThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockResolveAPIThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveAPIThreshold.setDescription('The average number of seconds per resolve request for a given\n                 address object that will trigger a block. This value is used\n                 in conjunction with sfpsBlockResolveAPITestCount to perform\n                 block tests on unresolved address objects. If the period between\n                 unresolved requests is less than or equal to this value, then\n                 the resolve request is blocked.')
sfpsBlockResolveAPISendPeriod = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsBlockResolveAPISendPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveAPISendPeriod.setDescription('The number of seconds between resolve requests that will\n                 be sent through the system. ')
sfpsBlockResolveStatsNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveStatsNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveStatsNumEntries.setDescription('The number of entries in sfpsBlockResolveTable.')
sfpsBlockResolveStatsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveStatsTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveStatsTableSize.setDescription('The maximum number of entries allowed in \n                 sfpsBlockResolveTable.')
sfpsBlockResolveStatsTotalReqSeen = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveStatsTotalReqSeen.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveStatsTotalReqSeen.setDescription('The total number of resolve requests the Block Resolve\n                 Server has seen. This value does not include inter-switch\n                 resolves.')
sfpsBlockResolveStatsTotalBlocked = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveStatsTotalBlocked.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveStatsTotalBlocked.setDescription('The total number of resolve requests that have been blocked\n                 by the server.')
sfpsBlockResolveStatsTotalSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveStatsTotalSent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveStatsTotalSent.setDescription('The total number of requests sent through the system for\n                 address objects that are being blocked.')
sfpsBlockResolveStatsAvgReqTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 4, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsBlockResolveStatsAvgReqTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsBlockResolveStatsAvgReqTime.setDescription('The average time in 10 msec units between resolve requests\n                 seen by the server. It is computed by dividing sysUpTime by\n                 sfpsBlockResolveStatsTotalReqSeen.')
sfpsTableResolveTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1), )
if mibBuilder.loadTexts: sfpsTableResolveTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveTable.setDescription('')
sfpsTableResolveTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1), ).setIndexNames((0, "CTRON-SFPS-RESOLVE-MIB", "sfpsTableResolveTag"), (0, "CTRON-SFPS-RESOLVE-MIB", "sfpsTableResolveHash"), (0, "CTRON-SFPS-RESOLVE-MIB", "sfpsTableResolveHashIndex"))
if mibBuilder.loadTexts: sfpsTableResolveTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveTableEntry.setDescription('')
sfpsTableResolveTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTableResolveTag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveTag.setDescription('')
sfpsTableResolveHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTableResolveHash.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveHash.setDescription('')
sfpsTableResolveHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTableResolveHashIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveHashIndex.setDescription('')
sfpsTableResolveSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTableResolveSrcType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveSrcType.setDescription('')
sfpsTableResolveSrcLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTableResolveSrcLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveSrcLoad.setDescription('')
sfpsTableResolveTrgType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTableResolveTrgType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveTrgType.setDescription('')
sfpsTableResolveTrgLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTableResolveTrgLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveTrgLoad.setDescription('')
sfpsTableResolveAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3), ("modify", 4), ("clearTable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPIVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveAPIVerb.setDescription('Action take as a result of setting this leaf')
sfpsTableResolveAPISrcAOType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPISrcAOType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveAPISrcAOType.setDescription("Source's type")
sfpsTableResolveAPISrcAOLoad = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPISrcAOLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveAPISrcAOLoad.setDescription("Source's load")
sfpsTableResolveAPITrgAOType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPITrgAOType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveAPITrgAOType.setDescription("Destination's type")
sfpsTableResolveAPITrgAOLoad = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPITrgAOLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveAPITrgAOLoad.setDescription("Destination's load ")
sfpsTableResolveAPIVlanAOLoad = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPIVlanAOLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveAPIVlanAOLoad.setDescription("Vlan's load ")
sfpsTableResolveAPIDestSwMac = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPIDestSwMac.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveAPIDestSwMac.setDescription('')
sfpsTableResolveAPIScopeToVlan = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPIScopeToVlan.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveAPIScopeToVlan.setDescription('')
sfpsTableResolveAPINVRAMEntry = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPINVRAMEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveAPINVRAMEntry.setDescription('')
sfpsTableResolveAPIMask = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 10), HexInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPIMask.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveAPIMask.setDescription('')
sfpsTableResolveAPIResolveOption = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ack", 1), ("nak", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPIResolveOption.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveAPIResolveOption.setDescription('')
sfpsTableResolveAPIAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 6, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTableResolveAPIAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTableResolveAPIAdminStatus.setDescription('')
sfpsSubnetResolveStatsRequests = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsRequests.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveStatsRequests.setDescription('')
sfpsSubnetResolveStatsAcks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsAcks.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveStatsAcks.setDescription('')
sfpsSubnetResolveStatsUnknowns = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsUnknowns.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveStatsUnknowns.setDescription('')
sfpsSubnetResolveStatsInternalUnknowns = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsInternalUnknowns.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveStatsInternalUnknowns.setDescription('')
sfpsSubnetResolveStatsGatewayAcks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsGatewayAcks.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveStatsGatewayAcks.setDescription('')
sfpsSubnetResolveStatsErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveStatsErrors.setDescription('')
sfpsSubnetResolveStatsMaxTblSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsMaxTblSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveStatsMaxTblSize.setDescription('')
sfpsSubnetResolveStatsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveStatsTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveStatsTableSize.setDescription('')
sfpsSubnetResolveAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3), ("updateMask", 4), ("setDefGateway", 5), ("clearDefGateway", 6), ("clearTable", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPIVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveAPIVerb.setDescription('Specifies the action to be initiated as a result of setting this leaf.')
sfpsSubnetResolveAPISrcAOType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPISrcAOType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveAPISrcAOType.setDescription("Specifies the source's desire AO type.")
sfpsSubnetResolveAPISrcAPLoad = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPISrcAPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveAPISrcAPLoad.setDescription("Specifies the source's load.")
sfpsSubnetResolveAPITrgAOType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPITrgAOType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveAPITrgAOType.setDescription("Specifies the destination's desired AO type.")
sfpsSubnetResolveAPITrgAOLoad = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPITrgAOLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveAPITrgAOLoad.setDescription("Specifies the desination's load.")
sfpsSubnetResolveAPIRouteType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("external", 1), ("internal", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPIRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveAPIRouteType.setDescription('Specifies whether the route is internal/external to the cloud.')
sfpsSubnetResolveAPINVRAMEntry = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPINVRAMEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveAPINVRAMEntry.setDescription('Specifies whether to store the entry in NVRAM.')
sfpsSubnetResolveAPIAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPIAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveAPIAdminStatus.setDescription('Specifies whether this entry should be used or not.  This allows the entry\n                 to remain in the table but be disabled.')
sfpsSubnetResolveAPIDefGateway = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPIDefGateway.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveAPIDefGateway.setDescription('Specified the router mac address to resolve any request if there is no internal or\n                 external mapping.')
sfpsSubnetResolveAPISubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 2, 10), HexInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSubnetResolveAPISubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveAPISubnetMask.setDescription('Specifies the subnet mask.')
sfpsSubnetResolveTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3), )
if mibBuilder.loadTexts: sfpsSubnetResolveTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveTable.setDescription('')
sfpsSubnetResolveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1), ).setIndexNames((0, "CTRON-SFPS-RESOLVE-MIB", "sfpsSubnetResolveTargetTag"), (0, "CTRON-SFPS-RESOLVE-MIB", "sfpsSubnetResolveSourceHash"), (0, "CTRON-SFPS-RESOLVE-MIB", "sfpsSubnetResolveHashIndex"))
if mibBuilder.loadTexts: sfpsSubnetResolveEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveEntry.setDescription('')
sfpsSubnetResolveTargetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveTargetTag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveTargetTag.setDescription('')
sfpsSubnetResolveSourceHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveSourceHash.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveSourceHash.setDescription('')
sfpsSubnetResolveHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveHashIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveHashIndex.setDescription('')
sfpsSubnetResolveSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveSrcType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveSrcType.setDescription('')
sfpsSubnetResolveSrcLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveSrcLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveSrcLoad.setDescription('')
sfpsSubnetResolveTrgType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveTrgType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveTrgType.setDescription('')
sfpsSubnetResolveTrgLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveTrgLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveTrgLoad.setDescription('')
sfpsSubnetResolveRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("external", 1), ("internal", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveRouteType.setDescription('')
sfpsSubnetResolveRelativeCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveRelativeCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveRelativeCnt.setDescription('')
sfpsSubnetResolveAbsoluteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveAbsoluteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveAbsoluteCnt.setDescription('')
sfpsSubnetResolveNVRAMEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveNVRAMEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveNVRAMEntry.setDescription('')
sfpsSubnetResolveAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveAdminStatus.setDescription('')
sfpsSubnetResolveOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("halted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveOperStatus.setDescription('')
sfpsRelayAgentResolveVlanName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 10, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRelayAgentResolveVlanName.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRelayAgentResolveVlanName.setDescription('\n         ::= { sfpsRelayAgentResolve 1 }\n\nsfpsRelayAgentResolveRelayAgent OBJECT-TYPE\n        SYNTAX  IpAddress\n        ACCESS  read-only\n        STATUS  mandatory\n        DESCRIPTION     \n                ')
sfpsSubnetResolveNvramMaskEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveNvramMaskEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveNvramMaskEntries.setDescription('\n         ::= { sfpsSubnetResolveNvram 1 }\n\nsfpsSubnetResolveNvramMacEntries        OBJECT-TYPE\n        SYNTAX  INTEGER\n        ACCESS  read-only\n        STATUS  mandatory\n        DESCRIPTION     \n                ')
sfpsSubnetResolveNvramIpEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 7, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSubnetResolveNvramIpEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSubnetResolveNvramIpEntries.setDescription('\n         ::= { sfpsSubnetResolveNvram 3 }\n\nsfpsSubnetResolveNvramNvramUsed OBJECT-TYPE\n        SYNTAX  INTEGER\n        ACCESS  read-only\n        STATUS  mandatory\n        DESCRIPTION     \n                ')
sfpsRelayAgentResolveStatsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 10, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRelayAgentResolveStatsTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRelayAgentResolveStatsTableSize.setDescription('\n         ::= { sfpsRelayAgentResolveStats 1 }\n\nsfpsRelayAgentResolveStatsNumEntries    OBJECT-TYPE\n        SYNTAX  INTEGER\n        ACCESS  read-only\n        STATUS  mandatory\n        DESCRIPTION     \n                ')
sfpsRelayAgentResolveStatsHighWater = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 10, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRelayAgentResolveStatsHighWater.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRelayAgentResolveStatsHighWater.setDescription('')
sfpsSwitchResolveTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1), )
if mibBuilder.loadTexts: sfpsSwitchResolveTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSwitchResolveTable.setDescription('')
sfpsSwitchResolveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-RESOLVE-MIB", "sfpsSwitchResolveSwitch"), (0, "CTRON-SFPS-RESOLVE-MIB", "sfpsSwitchResolveCallTag"))
if mibBuilder.loadTexts: sfpsSwitchResolveEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSwitchResolveEntry.setDescription('')
sfpsSwitchResolveSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolveSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSwitchResolveSwitch.setDescription('')
sfpsSwitchResolveCallTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolveCallTag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSwitchResolveCallTag.setDescription('')
sfpsSwitchResolvePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolvePortNum.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSwitchResolvePortNum.setDescription('')
sfpsSwitchResolveNeighborSw = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolveNeighborSw.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSwitchResolveNeighborSw.setDescription('')
sfpsSwitchResolveRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolveRequestCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSwitchResolveRequestCount.setDescription('')
sfpsSwitchResolveResponseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolveResponseCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSwitchResolveResponseCount.setDescription('')
sfpsSwitchResolveMobilityRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolveMobilityRetry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSwitchResolveMobilityRetry.setDescription('')
sfpsSwitchResolveEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSwitchResolveEventId.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSwitchResolveEventId.setDescription('')
mibBuilder.exportSymbols("CTRON-SFPS-RESOLVE-MIB", sfpsMobilityStatsInterRespNakAliasSendCount=sfpsMobilityStatsInterRespNakAliasSendCount, sfpsResolveStatsTableSize=sfpsResolveStatsTableSize, sfpsUnresolveTableHash=sfpsUnresolveTableHash, sfpsBlockResolveTable=sfpsBlockResolveTable, sfpsSwitchResolveRequestCount=sfpsSwitchResolveRequestCount, sfpsResolveStatsResolveMask=sfpsResolveStatsResolveMask, sfpsBlockResolveStatsNumEntries=sfpsBlockResolveStatsNumEntries, sfpsTableResolveTableEntry=sfpsTableResolveTableEntry, sfpsSubnetResolveStatsUnknowns=sfpsSubnetResolveStatsUnknowns, sfpsResolveStatsChangeTime=sfpsResolveStatsChangeTime, sfpsSwitchResolveCallTag=sfpsSwitchResolveCallTag, sfpsMobilityStatsGenReqRetryCount=sfpsMobilityStatsGenReqRetryCount, sfpsResolveStatsStaleEntryLost=sfpsResolveStatsStaleEntryLost, sfpsSubnetResolveTable=sfpsSubnetResolveTable, sfpsResolveStatsAcks=sfpsResolveStatsAcks, sfpsMobilityStatsInterRespAckSendCount=sfpsMobilityStatsInterRespAckSendCount, sfpsResolveStatsResponses=sfpsResolveStatsResponses, sfpsTableResolveAPIScopeToVlan=sfpsTableResolveAPIScopeToVlan, sfpsUnresolveTableStatsTableSize=sfpsUnresolveTableStatsTableSize, sfpsUnresolveTableAvgPeriod=sfpsUnresolveTableAvgPeriod, sfpsUnresolveTableLastCallProc=sfpsUnresolveTableLastCallProc, sfpsBlockResolveAPIAOValue=sfpsBlockResolveAPIAOValue, sfpsMobilityStatsNUReqRecCount=sfpsMobilityStatsNUReqRecCount, sfpsMobilityStatsGenRecCount=sfpsMobilityStatsGenRecCount, sfpsServiceCenterResolveStatusTime=sfpsServiceCenterResolveStatusTime, sfpsMobilityStatsGenReqRecCount=sfpsMobilityStatsGenReqRecCount, sfpsMobilityStatsResetCounters=sfpsMobilityStatsResetCounters, sfpsMobilityStatsGenSendCount=sfpsMobilityStatsGenSendCount, sfpsSwitchResolvePortNum=sfpsSwitchResolvePortNum, sfpsMobilityStatsGenReqForwardCount=sfpsMobilityStatsGenReqForwardCount, sfpsBlockResolveStatsAvgReqTime=sfpsBlockResolveStatsAvgReqTime, sfpsMobilityStatsNARespSendCount=sfpsMobilityStatsNARespSendCount, sfpsBlockResolveStatsTotalReqSeen=sfpsBlockResolveStatsTotalReqSeen, sfpsTableResolveAPITrgAOLoad=sfpsTableResolveAPITrgAOLoad, sfpsRelayAgentResolveStatsTableSize=sfpsRelayAgentResolveStatsTableSize, sfpsTableResolveAPIVerb=sfpsTableResolveAPIVerb, sfpsSubnetResolveAPIAdminStatus=sfpsSubnetResolveAPIAdminStatus, sfpsRelayAgentResolveStatsHighWater=sfpsRelayAgentResolveStatsHighWater, sfpsMobilityStatsRetryDrops=sfpsMobilityStatsRetryDrops, sfpsMobilityStatsMaxRetryReached=sfpsMobilityStatsMaxRetryReached, sfpsServiceCenterResolveEntry=sfpsServiceCenterResolveEntry, sfpsResolveStatsAvgResponseTime=sfpsResolveStatsAvgResponseTime, HexInteger=HexInteger, sfpsMobilityStatsInterNewUserRespSendCount=sfpsMobilityStatsInterNewUserRespSendCount, sfpsMobilityStatsInterNewUserRespRecCount=sfpsMobilityStatsInterNewUserRespRecCount, sfpsResolveStatsRespNaksSent=sfpsResolveStatsRespNaksSent, sfpsUnresolveTableAPIBlockHoldDown=sfpsUnresolveTableAPIBlockHoldDown, sfpsMobilityStatsOrigAckCount=sfpsMobilityStatsOrigAckCount, sfpsRelayAgentResolveVlanName=sfpsRelayAgentResolveVlanName, sfpsResolveStatsRespUnknownsSent=sfpsResolveStatsRespUnknownsSent, sfpsResolveStatsResetStats=sfpsResolveStatsResetStats, sfpsResolveStatsFloodMask=sfpsResolveStatsFloodMask, sfpsMobilityStatsOrigNASendCount=sfpsMobilityStatsOrigNASendCount, sfpsMobilityStatsInterNewAliasRespRecCount=sfpsMobilityStatsInterNewAliasRespRecCount, sfpsUnresolveTableSrcMAC=sfpsUnresolveTableSrcMAC, sfpsUnresolveTableStatsAvgReqTime=sfpsUnresolveTableStatsAvgReqTime, sfpsUnresolveTableAOType=sfpsUnresolveTableAOType, sfpsMobilityStatsNUARespRecAliasNakCount=sfpsMobilityStatsNUARespRecAliasNakCount, sfpsResolveStatsRespRecvd=sfpsResolveStatsRespRecvd, sfpsSubnetResolveAPINVRAMEntry=sfpsSubnetResolveAPINVRAMEntry, sfpsSubnetResolveAPISrcAOType=sfpsSubnetResolveAPISrcAOType, sfpsMobilityStatsGenRespSendCount=sfpsMobilityStatsGenRespSendCount, sfpsServiceCenterResolveResponses=sfpsServiceCenterResolveResponses, sfpsSubnetResolveTargetTag=sfpsSubnetResolveTargetTag, sfpsMobilityStatsOrigReceiveCount=sfpsMobilityStatsOrigReceiveCount, sfpsBlockResolveTableNumBlocked=sfpsBlockResolveTableNumBlocked, sfpsServiceCenterResolveOperStatus=sfpsServiceCenterResolveOperStatus, sfpsServiceCenterResolveHashLeaf=sfpsServiceCenterResolveHashLeaf, sfpsMobilityStatsNURespSendCount=sfpsMobilityStatsNURespSendCount, sfpsSubnetResolveOperStatus=sfpsSubnetResolveOperStatus, sfpsMobilityStatsNURespRecAckCount=sfpsMobilityStatsNURespRecAckCount, sfpsResolveStatsDaveEntryLost=sfpsResolveStatsDaveEntryLost, sfpsMobilityStatsNURespAliasNakSendCount=sfpsMobilityStatsNURespAliasNakSendCount, sfpsSubnetResolveStatsMaxTblSize=sfpsSubnetResolveStatsMaxTblSize, sfpsUnresolveTableAPIVerb=sfpsUnresolveTableAPIVerb, sfpsResolveStatsChangeCount=sfpsResolveStatsChangeCount, sfpsSubnetResolveAbsoluteCnt=sfpsSubnetResolveAbsoluteCnt, sfpsSwitchResolveSwitch=sfpsSwitchResolveSwitch, sfpsMobilityStatsNAReqRecCount=sfpsMobilityStatsNAReqRecCount, sfpsServiceCenterResolveTable=sfpsServiceCenterResolveTable, sfpsMobilityStatsOrigNUASendReqCount=sfpsMobilityStatsOrigNUASendReqCount, sfpsBlockResolveTableEntry=sfpsBlockResolveTableEntry, sfpsBlockResolveTableAOType=sfpsBlockResolveTableAOType, sfpsBlockResolveStatsTotalBlocked=sfpsBlockResolveStatsTotalBlocked, sfpsTableResolveTable=sfpsTableResolveTable, sfpsMobilityStatsInterRespNakNodeSendCount=sfpsMobilityStatsInterRespNakNodeSendCount, sfpsUnresolveTableStatsTotalReqSeen=sfpsUnresolveTableStatsTotalReqSeen, sfpsTableResolveTrgType=sfpsTableResolveTrgType, sfpsSubnetResolveAPISrcAPLoad=sfpsSubnetResolveAPISrcAPLoad, sfpsSubnetResolveSrcType=sfpsSubnetResolveSrcType, sfpsSubnetResolveRelativeCnt=sfpsSubnetResolveRelativeCnt, sfpsSubnetResolveNvramIpEntries=sfpsSubnetResolveNvramIpEntries, sfpsUnresolveTableHashIndex=sfpsUnresolveTableHashIndex, sfpsMobilityStatsMaxResponeTime=sfpsMobilityStatsMaxResponeTime, sfpsMobilityStatsNewUserRetryTime=sfpsMobilityStatsNewUserRetryTime, sfpsMobilityStatsRetryCount=sfpsMobilityStatsRetryCount, sfpsBlockResolveAPISendPeriod=sfpsBlockResolveAPISendPeriod, sfpsMobilityStatsInterRespUnknownSendCount=sfpsMobilityStatsInterRespUnknownSendCount, sfpsSwitchResolveNeighborSw=sfpsSwitchResolveNeighborSw, sfpsMobilityStatsErrorCount=sfpsMobilityStatsErrorCount, sfpsSubnetResolveStatsTableSize=sfpsSubnetResolveStatsTableSize, sfpsMobilityStatsAvgResponseTime=sfpsMobilityStatsAvgResponseTime, sfpsResolveStatsTimeout=sfpsResolveStatsTimeout, sfpsBlockResolveTableNumSent=sfpsBlockResolveTableNumSent, sfpsUnresolveTableBlockFlag=sfpsUnresolveTableBlockFlag, sfpsResolveStatsRespAcksSent=sfpsResolveStatsRespAcksSent, sfpsSubnetResolveStatsInternalUnknowns=sfpsSubnetResolveStatsInternalUnknowns, sfpsResolveStatsNaks=sfpsResolveStatsNaks, sfpsTableResolveAPIVlanAOLoad=sfpsTableResolveAPIVlanAOLoad, sfpsTableResolveAPIMask=sfpsTableResolveAPIMask, sfpsUnresolveTableAPIAgeOutTime=sfpsUnresolveTableAPIAgeOutTime, sfpsMobilityStatsOrigSendCount=sfpsMobilityStatsOrigSendCount, sfpsMobilityStatsAliasOnOfSwitch=sfpsMobilityStatsAliasOnOfSwitch, SfpsAddress=SfpsAddress, sfpsUnresolveTable=sfpsUnresolveTable, sfpsTableResolveSrcLoad=sfpsTableResolveSrcLoad, sfpsTableResolveAPINVRAMEntry=sfpsTableResolveAPINVRAMEntry, sfpsTableResolveAPIResolveOption=sfpsTableResolveAPIResolveOption, sfpsServiceCenterResolveRequests=sfpsServiceCenterResolveRequests, sfpsSubnetResolveAPITrgAOLoad=sfpsSubnetResolveAPITrgAOLoad, sfpsResolveStatsNoAnswer=sfpsResolveStatsNoAnswer, sfpsSubnetResolveSrcLoad=sfpsSubnetResolveSrcLoad, sfpsBlockResolveTableStartTime=sfpsBlockResolveTableStartTime, sfpsMobilityStatsNURespNodeNakSendCount=sfpsMobilityStatsNURespNodeNakSendCount, sfpsBlockResolveTableLastSeen=sfpsBlockResolveTableLastSeen, sfpsTableResolveHashIndex=sfpsTableResolveHashIndex, sfpsSubnetResolveAPIRouteType=sfpsSubnetResolveAPIRouteType, sfpsSubnetResolveRouteType=sfpsSubnetResolveRouteType, sfpsServiceCenterResolveMetric=sfpsServiceCenterResolveMetric, sfpsResolveStatsDupMsgCount=sfpsResolveStatsDupMsgCount, sfpsUnresolveTableEntry=sfpsUnresolveTableEntry, sfpsTableResolveAPISrcAOType=sfpsTableResolveAPISrcAOType, sfpsMobilityStatsGenRespRecCount=sfpsMobilityStatsGenRespRecCount, sfpsSubnetResolveSourceHash=sfpsSubnetResolveSourceHash, sfpsBlockResolveAPIVerb=sfpsBlockResolveAPIVerb, sfpsSubnetResolveStatsAcks=sfpsSubnetResolveStatsAcks, sfpsSubnetResolveAPIDefGateway=sfpsSubnetResolveAPIDefGateway, sfpsResolveStatsRequests=sfpsResolveStatsRequests, sfpsSubnetResolveAPITrgAOType=sfpsSubnetResolveAPITrgAOType, sfpsResolveStatsErrorCount=sfpsResolveStatsErrorCount, sfpsBlockResolveTableHash=sfpsBlockResolveTableHash, sfpsSwitchResolveResponseCount=sfpsSwitchResolveResponseCount, sfpsSwitchResolveEventId=sfpsSwitchResolveEventId, sfpsMobilityStatsNUARespRecUnknownCount=sfpsMobilityStatsNUARespRecUnknownCount, sfpsResolveStatsMaxResponseTime=sfpsResolveStatsMaxResponseTime, sfpsTableResolveAPIDestSwMac=sfpsTableResolveAPIDestSwMac, sfpsTableResolveTrgLoad=sfpsTableResolveTrgLoad, sfpsSubnetResolveTrgLoad=sfpsSubnetResolveTrgLoad, sfpsSubnetResolveNVRAMEntry=sfpsSubnetResolveNVRAMEntry, sfpsMobilityStatsOrigNakNodeCount=sfpsMobilityStatsOrigNakNodeCount, sfpsMobilityStatsOrigRetrySendCount=sfpsMobilityStatsOrigRetrySendCount, sfpsMobilityStatsNURespAckSendCount=sfpsMobilityStatsNURespAckSendCount, sfpsMobilityStatsMaxNewUserRetries=sfpsMobilityStatsMaxNewUserRetries, sfpsResolveStatsStaleTimeOut=sfpsResolveStatsStaleTimeOut, sfpsSubnetResolveStatsErrors=sfpsSubnetResolveStatsErrors, sfpsMobilityStatsInterNUARespSendCount=sfpsMobilityStatsInterNUARespSendCount, sfpsSubnetResolveAPIVerb=sfpsSubnetResolveAPIVerb, sfpsResolveStatsDisableLayer3=sfpsResolveStatsDisableLayer3, sfpsBlockResolveAPITestCount=sfpsBlockResolveAPITestCount, sfpsSwitchResolveTable=sfpsSwitchResolveTable, sfpsMobilityStatsOrigLocalMoveCount=sfpsMobilityStatsOrigLocalMoveCount, sfpsBlockResolveTableAvgPeriod=sfpsBlockResolveTableAvgPeriod, sfpsTableResolveSrcType=sfpsTableResolveSrcType, sfpsTableResolveAPITrgAOType=sfpsTableResolveAPITrgAOType, sfpsTableResolveAPISrcAOLoad=sfpsTableResolveAPISrcAOLoad, sfpsTableResolveTag=sfpsTableResolveTag, sfpsResolveStatsTableHigh=sfpsResolveStatsTableHigh, sfpsMobilityStatsOrigNUSendCount=sfpsMobilityStatsOrigNUSendCount, sfpsSubnetResolveAdminStatus=sfpsSubnetResolveAdminStatus, sfpsMobilityStatsInterNewAliasRespSendCount=sfpsMobilityStatsInterNewAliasRespSendCount, sfpsUnresolveTableLastMissTime=sfpsUnresolveTableLastMissTime, sfpsMobilityStatsNURespUnknownSendCount=sfpsMobilityStatsNURespUnknownSendCount, sfpsUnresolveTableStatsNumEntries=sfpsUnresolveTableStatsNumEntries, sfpsTableResolveHash=sfpsTableResolveHash, sfpsTableResolveAPIAdminStatus=sfpsTableResolveAPIAdminStatus, sfpsBlockResolveAPIThreshold=sfpsBlockResolveAPIThreshold, sfpsBlockResolveStatsTableSize=sfpsBlockResolveStatsTableSize, sfpsResolveStatsAnswerUnknown=sfpsResolveStatsAnswerUnknown, sfpsServiceCenterResolveName=sfpsServiceCenterResolveName, sfpsMobilityStatsOrigNakAliasCount=sfpsMobilityStatsOrigNakAliasCount, sfpsSubnetResolveTrgType=sfpsSubnetResolveTrgType, sfpsMobilityStatsOrigUnknownCount=sfpsMobilityStatsOrigUnknownCount, sfpsSwitchResolveMobilityRetry=sfpsSwitchResolveMobilityRetry, sfpsMobilityStatsNewUserStaleTimeout=sfpsMobilityStatsNewUserStaleTimeout, sfpsSubnetResolveAPISubnetMask=sfpsSubnetResolveAPISubnetMask, sfpsBlockResolveAPIAOType=sfpsBlockResolveAPIAOType, sfpsSubnetResolveNvramMaskEntries=sfpsSubnetResolveNvramMaskEntries, sfpsServiceCenterResolveAdminStatus=sfpsServiceCenterResolveAdminStatus, sfpsMobilityStatsNUARespRecNodeNakCount=sfpsMobilityStatsNUARespRecNodeNakCount, sfpsResolveStatsStaleCount=sfpsResolveStatsStaleCount, sfpsSubnetResolveEntry=sfpsSubnetResolveEntry, sfpsSwitchResolveEntry=sfpsSwitchResolveEntry, sfpsSubnetResolveStatsGatewayAcks=sfpsSubnetResolveStatsGatewayAcks, sfpsResolveStatsUnknowns=sfpsResolveStatsUnknowns, sfpsSubnetResolveHashIndex=sfpsSubnetResolveHashIndex, sfpsBlockResolveTableAOValue=sfpsBlockResolveTableAOValue, sfpsUnresolveTableAOValue=sfpsUnresolveTableAOValue, sfpsMobilityStatsInterNUARespRecCount=sfpsMobilityStatsInterNUARespRecCount, sfpsResolveStatsReqRcvd=sfpsResolveStatsReqRcvd, sfpsResolveStatsDisableProxy=sfpsResolveStatsDisableProxy, sfpsBlockResolveTableHashIndex=sfpsBlockResolveTableHashIndex, sfpsUnresolveTableStatsTableFullCount=sfpsUnresolveTableStatsTableFullCount, sfpsSubnetResolveStatsRequests=sfpsSubnetResolveStatsRequests, sfpsBlockResolveStatsTotalSent=sfpsBlockResolveStatsTotalSent, sfpsResolveStatsCSPDaveMalPkts=sfpsResolveStatsCSPDaveMalPkts, sfpsResolveStatsINBMask=sfpsResolveStatsINBMask, sfpsUnresolveTableNumMisses=sfpsUnresolveTableNumMisses)
