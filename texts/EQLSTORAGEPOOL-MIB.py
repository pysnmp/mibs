#
# PySNMP MIB module EQLSTORAGEPOOL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/equallogic/EQLSTORAGEPOOL-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 12:22:50 2024
# On host fv-az1530-743 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
eqlGroupId, eqlLdapLoginAccessName, UTFString, eqlStorageGroupAdminAccountName, eqlLdapLoginAccessType, eqlStorageGroupAdminAccountIndex = mibBuilder.importSymbols("EQLGROUP-MIB", "eqlGroupId", "eqlLdapLoginAccessName", "UTFString", "eqlStorageGroupAdminAccountName", "eqlLdapLoginAccessType", "eqlStorageGroupAdminAccountIndex")
equalLogic, = mibBuilder.importSymbols("EQUALLOGIC-SMI", "equalLogic")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Counter64, enterprises, Counter32, Integer32, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, TimeTicks, iso, Gauge32, Bits, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "enterprises", "Counter32", "Integer32", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "TimeTicks", "iso", "Gauge32", "Bits", "Unsigned32", "IpAddress")
TextualConvention, DisplayString, TruthValue, DateAndTime, RowStatus, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "DateAndTime", "RowStatus", "RowPointer")
eqlStoragePoolModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 12740, 16))
eqlStoragePoolModule.setRevisions(('2005-03-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eqlStoragePoolModule.setRevisionsDescriptions(('Initial revision',))
if mibBuilder.loadTexts: eqlStoragePoolModule.setLastUpdated('201503171528Z')
if mibBuilder.loadTexts: eqlStoragePoolModule.setOrganization('EqualLogic Inc.')
if mibBuilder.loadTexts: eqlStoragePoolModule.setContactInfo('Contact: Customer Support\n         Postal:  Dell Inc\n                  300 Innovative Way, Suite 301, Nashua, NH 03062\n         Tel:     +1 603-579-9762\n         E-mail:  US-NH-CS-TechnicalSupport@dell.com\n         WEB:     www.equallogic.com')
if mibBuilder.loadTexts: eqlStoragePoolModule.setDescription('Equallogic Inc. Storage Array volume information \n\n        Copyright (c) 2002-2011 by Dell, Inc. \n        \n        All rights reserved.  This software may not be copied, disclosed, \n        transferred, or used except in accordance with a license granted \n        by Dell, Inc.  This software embodies proprietary information \n        and trade secrets of Dell, Inc. \n        ')
eqlStoragePoolObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 16, 1))
eqlStoragePoolNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 16, 2))
eqlStoragePoolConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 16, 3))
class SiteIndex(TextualConvention, Integer32):
    description = 'This textual convention defines a greater\n            than zero value used to identify an external group\n            operating autonomously from the local group.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class SiteIndexOrZero(TextualConvention, Integer32):
    description = 'This textual convention is an extension of the\n            SiteIndex convention.  The latter defines a greater\n            than zero value used to identify an external group\n            operating autonomously from the local group. This extension permits the\n            additional value of zero.  the value zero is object-specific\n            and must therefore be defined as part of the description of\n            any object which uses this syntax.  Examples of the usage of\n            zero might include situations where the site is unknown or not \n            relevant'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class Unsigned64(TextualConvention, Counter64):
    description = 'A non-negative 64-bit bit integer, without counter\n            semantics.'
    status = 'current'

class PoolQuotaType(TextualConvention, Integer32):
    description = 'The format of the adminQuota value:\n                            0 - Unlimited quota,\n                            1 - Size in Megabytes.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("size", 1))

class StatusEnabledDefault(TextualConvention, Integer32):
    description = 'This textual convention can be used to define a status \n                           of enabled or disabled. The value 0 is assigned to enabled'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("enabled", 0), ("disabled", 1))

eqlStoragePoolTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1), )
if mibBuilder.loadTexts: eqlStoragePoolTable.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolTable.setDescription('EqualLogic-Persistent Storage Pool Table.\n                     This table contains a list of storage pools in a group and their attributes.')
eqlStoragePoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex"))
if mibBuilder.loadTexts: eqlStoragePoolEntry.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolEntry.setDescription('An entry (row) containing storage pool info.')
eqlStoragePoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlStoragePoolIndex.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolIndex.setDescription('This field specifies a unique index for identifying a storage pool.')
eqlStoragePoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStoragePoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlStoragePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 3), UTFString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStoragePoolName.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolName.setDescription('EQL-SECONDARY-KEY\n                     This field specifies a user friendly name for a storage pool.\n                     The name must be unique within a group.\n                     The name must not contain spaces or special characters.\n                     The name can be up to 64 characters in length.')
eqlStoragePoolDefaultFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStoragePoolDefaultFlag.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolDefaultFlag.setDescription('This field specifies if this storage pool is the default pool.  TRUE == default pool.')
eqlStoragePoolRAIDConfigWaitFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlStoragePoolRAIDConfigWaitFlag.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolRAIDConfigWaitFlag.setDescription('This field specifies if the system should wait for a \n                     configured RAID-set before allowing volumes to be\n                     created.')
eqlStoragePoolShouldEvalMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolShouldEvalMask.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolShouldEvalMask.setDescription('This field specifies one or more reasons (32-bit mask) the pool should be evaluated.')
eqlStoragePoolLastBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolLastBalance.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolLastBalance.setDescription('This field specifies a timestamp of the last time the pool was balanced.')
eqlStoragePoolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlStoragePoolDescription.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolDescription.setDescription('This field contains a description of the storage pool.')
eqlStoragePoolLeadMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlStoragePoolLeadMemberId.setStatus('deprecated')
if mibBuilder.loadTexts: eqlStoragePoolLeadMemberId.setDescription('This field is deprecated and will be unsupported in the next release.')
eqlStoragePoolUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolUUID.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolUUID.setDescription('EQL-SECONDARY-KEY \n                     This field is for internal use only.')
eqlStoragePoolExecMergeTo = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlStoragePoolExecMergeTo.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolExecMergeTo.setDescription('This field, when non-zero, specifies the index of the storage pool that this pool is being merged into.')
eqlStoragePoolBorrow = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 12), StatusEnabledDefault().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlStoragePoolBorrow.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolBorrow.setDescription('This field specifies if borrowing is enabled for this pool.')
eqlStoragePoolSnapTrimThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlStoragePoolSnapTrimThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolSnapTrimThreshold.setDescription('This field specifies the threshold % of the pool capacity that indicates when to begin trimming.')
eqlStoragePoolSnapTrimBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 14), Counter64().clone(600)).setUnits('MB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlStoragePoolSnapTrimBuffer.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolSnapTrimBuffer.setDescription('This field specifies how far below the SnapTrimThreshold to trim in MB.')
eqlStoragePoolSnapTrimmerHWMLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 15), Integer32().clone(864000)).setUnits('secs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlStoragePoolSnapTrimmerHWMLifeTime.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolSnapTrimmerHWMLifeTime.setDescription('This field defines the amount of time (in secs) that the trimmer will use Volume\n                     In Use HWM to calculate the borrowed space for the thin volume. Default is 10 days ')
eqlStoragePoolSnapTrimmerBorrowInfoRefreshInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 16), Integer32().clone(60)).setUnits('secs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlStoragePoolSnapTrimmerBorrowInfoRefreshInterval.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolSnapTrimmerBorrowInfoRefreshInterval.setDescription('This field defines the amount of time (in secs) after which \n                     the snap trimmer will attempt to refresh its borrow information ')
eqlStoragePoolDefaultCompressionStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("automatic", 0), ("always", 1), ("never", 2))).clone('automatic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStoragePoolDefaultCompressionStrategy.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolDefaultCompressionStrategy.setDescription('Default value for how compression for snapshots should be set if not specified.')
eqlStoragePoolDefaultCompressionMinSnapDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 18), Integer32().clone(10)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStoragePoolDefaultCompressionMinSnapDelay.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolDefaultCompressionMinSnapDelay.setDescription(' \n            The value of this object represents how long to wait prior\n            to marking a snapshot as eligible for automatic compression.\n            Current default is 10 minutes.\n          ')
eqlStoragePoolDefaultCompressionMinSnapAge = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 19), Integer32().clone(1380)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStoragePoolDefaultCompressionMinSnapAge.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolDefaultCompressionMinSnapAge.setDescription(' \n            The value of this object represents the minimum amout of time\n            a snapshot is expected to kept around in order to be marked\n            for automatic compression.  Current default is 23 hours.\n          ')
eqlStoragePoolSnapMemberTrimThresholdAmount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 20), Counter64().clone(204800)).setUnits('MB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlStoragePoolSnapMemberTrimThresholdAmount.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolSnapMemberTrimThresholdAmount.setDescription('\n                     This field specifies the per member trimming threshold used by the trimmer in MB.\n                     The default value of 204800 MB (200 GB) represents the minimum value for this field.\n                    ')
eqlStoragePoolSnapTrimRecheckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 1, 1, 21), Unsigned32().clone(20)).setUnits('secs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlStoragePoolSnapTrimRecheckTimer.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolSnapTrimRecheckTimer.setDescription('\n                     This field defines the interval (in seconds) that will be used to determine if\n                     trimming needs to occur.\n                    ')
eqlStoragePoolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2), )
if mibBuilder.loadTexts: eqlStoragePoolStatsTable.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsTable.setDescription('EqualLogic-Dynamic Storage Pool Statistics Table.\n                     This table contains a list of pools in a group and their statistics.')
eqlStoragePoolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1), )
eqlStoragePoolEntry.registerAugmentions(("EQLSTORAGEPOOL-MIB", "eqlStoragePoolStatsEntry"))
eqlStoragePoolStatsEntry.setIndexNames(*eqlStoragePoolEntry.getIndexNames())
if mibBuilder.loadTexts: eqlStoragePoolStatsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsEntry.setDescription('An entry (row) containing storage pool stats.')
eqlStoragePoolStatsSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsSpace.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsSpace.setDescription('This field specifies how many MB of space comprises this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsSpaceUsed.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsSpaceUsed.setDescription('This field specifies the space used by volumes in this pool. The value is represented in MB.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsFreeSpace.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsFreeSpace.setDescription('This field specifies how many MB of space is available in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsReplicationSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsReplicationSpace.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsReplicationSpace.setDescription('This field specifies how many MB of space is allocated for replication in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsReplicationSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsReplicationSpaceUsed.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsReplicationSpaceUsed.setDescription('This field specifies how many MB of space is currently utilized by replication in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsReplicationFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsReplicationFreeSpace.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsReplicationFreeSpace.setDescription('This field specifies how many MB of space is available to replication in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsMemberNumOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsMemberNumOnline.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsMemberNumOnline.setDescription('This field indicates how many members are online in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsMemberCount.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsMemberCount.setDescription('This field indicates how many total members are in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsSnapshotReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapshotReserved.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapshotReserved.setDescription('This field specifies how many MB of snapshot space is reserved in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsSnapshotUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapshotUsed.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapshotUsed.setDescription('This field specifies how many MB of snapshot space is currently utilized in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsSnapshotNumInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapshotNumInUse.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapshotNumInUse.setDescription('This field indicates how many snapshots are currently in use in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsSnapshotNumOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapshotNumOnline.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapshotNumOnline.setDescription('This field indicates how many snapshots are online in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsSnapshotCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapshotCount.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapshotCount.setDescription('This field indicates how many total snapshots are in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsVolumeNumInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsVolumeNumInUse.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsVolumeNumInUse.setDescription('This field indicates how many volumes are currently in use in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsVolumeNumOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsVolumeNumOnline.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsVolumeNumOnline.setDescription('This field indicates how many volumes are online in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsVolumeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsVolumeCount.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsVolumeCount.setDescription('This field indicates how many total volumes are in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsDelegatedSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsDelegatedSpace.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsDelegatedSpace.setDescription('This field indicates the total delegated space for partners in this pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsDelegatedSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsDelegatedSpaceUsed.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsDelegatedSpaceUsed.setDescription('This field indicates the total delegated space used by partners in this pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsMembersInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsMembersInUse.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsMembersInUse.setDescription('This field indicates the total members of online+offline members in this group.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsVolumeSubscribed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 20), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsVolumeSubscribed.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsVolumeSubscribed.setDescription('This field specifies the total subscribed space for all volumes in this pool. For a thin provisioned volume, \n                     subscribed space is the advertised space. For a regular volume, subscribed space is the volume size.\n                     The value of this field will be equal to sum of eqliscsiVolumeSize field for all volumes in this pool.')
eqlStoragePoolStatsVolumeSpaceAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 21), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsVolumeSpaceAllocated.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsVolumeSpaceAllocated.setDescription('The value of this object represents the sum of actual materialized pages for all volumes in the pool.')
eqlStoragePoolStatsFailbackSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 22), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsFailbackSpace.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsFailbackSpace.setDescription('This field represents the amount of space consumed by fail-back replicasets in this pool.')
eqlStoragePoolStatsThinProvFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 23), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsThinProvFreeSpace.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsThinProvFreeSpace.setDescription('This field represents the amount of space available for Thin Provisioned Volumes in this pool.')
eqlStoragePoolStatsConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsConnectionCount.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsConnectionCount.setDescription('This field gives the number of iSCSI connections that are currently connected to volumes in this pool.')
eqlStoragePoolStatsSnapshotResvFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 25), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapshotResvFreeSpace.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapshotResvFreeSpace.setDescription('This field specifies how many MB of space is available to Snapshots in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsVirtualVolumeNumInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsVirtualVolumeNumInUse.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsVirtualVolumeNumInUse.setDescription('')
eqlStoragePoolStatsVirtualVolumeNumOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsVirtualVolumeNumOnline.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsVirtualVolumeNumOnline.setDescription('')
eqlStoragePoolStatsSnapshotResvBorrowing = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 28), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapshotResvBorrowing.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapshotResvBorrowing.setDescription('This field specifies the amount of free snapshot reserve that is being borrowed against by other volumes \n                     for either Recoverable Volumes or snapshots')
eqlStoragePoolStatsFreeSpaceBorrowing = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 29), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsFreeSpaceBorrowing.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsFreeSpaceBorrowing.setDescription('This field specifies the amount of free space that is being borrowed against by volumes for \n                     either Recoverable Volumes or snapshots')
eqlStoragePoolStatsAvailableForBorrowing = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 30), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsAvailableForBorrowing.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsAvailableForBorrowing.setDescription('This field specifies how many MB of space is still avaiable in this storage pool to borrow against.')
eqlStoragePoolStatsRecoverableVolBorrowing = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 31), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsRecoverableVolBorrowing.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsRecoverableVolBorrowing.setDescription('This field specifies the total amount of free space (in MB) \n                     that soft-deleted (i.e. recoverable) volumes are consuming\n                     in this pool.  Recoverable volumes are permanently deleted\n                     by the array whenever the free space that they occupy is\n                     needed by the system.')
eqlStoragePoolStatsActualFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 32), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsActualFreeSpace.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsActualFreeSpace.setDescription("This field specifies the actual free space (in MB) \n                     that doesn't include soft-deleted (i.e. recoverable) volumes \n                     or borrowed space")
eqlStoragePoolStatsTotalSpaceBorrowing = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 33), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsTotalSpaceBorrowing.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsTotalSpaceBorrowing.setDescription('This field specifies the total space used for borrowing and includes\n                     Recoverable Volumes and Snapshots')
eqlStoragePoolStatsSnapShotBorrowing = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 34), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapShotBorrowing.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsSnapShotBorrowing.setDescription('This field specifies the total amount of borrowing for just snapshots')
eqlStoragePoolStatsStorageContainerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsStorageContainerCount.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsStorageContainerCount.setDescription('This field specifies the total amount number of storage containers in the pool')
eqlStoragePoolStatsStorageContainerSpaceReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 36), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsStorageContainerSpaceReserved.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsStorageContainerSpaceReserved.setDescription('This field specifies the total amount of pool space allocated to storage containers. \n                     The value is represented in MB. It is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsCompressedSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 37), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsCompressedSpaceUsed.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsCompressedSpaceUsed.setDescription('This field specifies how many MB of space is currently utilized for compressed pages in this storage pool.   This is a dynamic value and cannot be set.')
eqlStoragePoolStatsVirtualSpaceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 38), Counter64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsVirtualSpaceSize.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsVirtualSpaceSize.setDescription('This field specifies how many MB of space would be utilized by compressed pages in this pool if there was no compression.')
eqlStoragePoolStatsStorageContainerVolumeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsStorageContainerVolumeCount.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsStorageContainerVolumeCount.setDescription('This field indicates the total volumes in storage containers within this this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsStorageContainerSnapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsStorageContainerSnapCount.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsStorageContainerSnapCount.setDescription('This field indicates the total snapshots in storage containers within this this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolStatsStorageContainerVolumesOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolStatsStorageContainerVolumesOnline.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolStatsStorageContainerVolumesOnline.setDescription('This field indicates the total online volumes in storage containers within this storage \n                     pool. This is a dynamic value, it is not Administrator setable.')
eqlStoragePoolAdminAccountTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 16, 1, 3), )
if mibBuilder.loadTexts: eqlStoragePoolAdminAccountTable.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolAdminAccountTable.setDescription('EqualLogic-Persistent Admin Account Storage Pool Table.\n                     This table contains a list of privilege matchings of administrative\n                     accounts and the pools those administrators have access to.')
eqlStoragePoolAdminAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 16, 1, 3, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex"), (0, "EQLGROUP-MIB", "eqlStorageGroupAdminAccountIndex"))
if mibBuilder.loadTexts: eqlStoragePoolAdminAccountEntry.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolAdminAccountEntry.setDescription('An entry (row) containing mapping of administrative accounts and their\n                     pool access.')
eqlStoragePoolAdminAccountRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStoragePoolAdminAccountRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolAdminAccountRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlStoragePoolAdminAccountQuotaType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 3, 1, 2), PoolQuotaType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStoragePoolAdminAccountQuotaType.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolAdminAccountQuotaType.setDescription('The format of the adminQuota value:\n                        0 - Unlimited quota,\n                        1 - Size in Megabytes.\n                    This field applies only to Volume Administrators.')
eqlStoragePoolAdminAccountQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStoragePoolAdminAccountQuota.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolAdminAccountQuota.setDescription('This field specifies the storage space quota (in MB) for a \n                     Volume Administrator in the storage pool.  This field \n                     applies only to Volume Administrators.')
eqlAdminAccountStoragePoolTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 16, 1, 4), )
if mibBuilder.loadTexts: eqlAdminAccountStoragePoolTable.setStatus('current')
if mibBuilder.loadTexts: eqlAdminAccountStoragePoolTable.setDescription('EqualLogic-Dynamic table indicating the access an administrator\n                     has to a storage pool.')
eqlAdminAccountStoragePoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 16, 1, 4, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlStorageGroupAdminAccountIndex"), (0, "EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex"))
if mibBuilder.loadTexts: eqlAdminAccountStoragePoolEntry.setStatus('current')
if mibBuilder.loadTexts: eqlAdminAccountStoragePoolEntry.setDescription('An entry (row) containing the access privilege.')
eqlAdminAccountStoragePoolAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-only", 1), ("read-write", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlAdminAccountStoragePoolAccess.setStatus('current')
if mibBuilder.loadTexts: eqlAdminAccountStoragePoolAccess.setDescription('The administrative permission to a storage pool.')
eqlStoragePoolOpsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 16, 1, 5), )
if mibBuilder.loadTexts: eqlStoragePoolOpsTable.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolOpsTable.setDescription('EqualLogic-Persistent Storage Pool Operations Table.')
eqlStoragePoolOpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 16, 1, 5, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex"), (0, "EQLSTORAGEPOOL-MIB", "eqlStoragePoolOpsIndex"))
if mibBuilder.loadTexts: eqlStoragePoolOpsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolOpsEntry.setDescription('An entry (row) containing storage pool configuration')
eqlStoragePoolOpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: eqlStoragePoolOpsIndex.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolOpsIndex.setDescription('This field unique identifies an operation withing a storage pool.')
eqlStoragePoolOpsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlStoragePoolOpsRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolOpsRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlStoragePoolOpsOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlStoragePoolOpsOperation.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolOpsOperation.setDescription('The current operation for this drive group\n                        0 - no operation\n                        1 - delete/merge')
eqlStoragePoolOpsStoragePoolDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 5, 1, 4), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlStoragePoolOpsStoragePoolDestinationIndex.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolOpsStoragePoolDestinationIndex.setDescription('This field unique identifies the destination Storage Pool.')
eqlStoragePoolAdminAccountStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6), )
if mibBuilder.loadTexts: eqlStoragePoolAdminAccountStatsTable.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolAdminAccountStatsTable.setDescription('EqualLogic-Dynamic Storage Pool Admin Account Statistics Table.\n                     This table contains a list of pools in a group and their statistics.')
eqlStoragePoolAdminAccountStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1), )
eqlStoragePoolAdminAccountEntry.registerAugmentions(("EQLSTORAGEPOOL-MIB", "eqlStoragePoolAdminAccountStatsEntry"))
eqlStoragePoolAdminAccountStatsEntry.setIndexNames(*eqlStoragePoolAdminAccountEntry.getIndexNames())
if mibBuilder.loadTexts: eqlStoragePoolAdminAccountStatsEntry.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolAdminAccountStatsEntry.setDescription('An entry (row) containing storage pool admin account stats.')
eqlStorageAdminAccountPoolStatsQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 1), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsQuota.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsQuota.setDescription('This field specifies how many MB of quota comprises this storage pool for this account.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStorageAdminAccountPoolStatsQuotaUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 2), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsQuotaUsed.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsQuotaUsed.setDescription('This field specifies the number of MB used by volumes in this pool for this account.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStorageAdminAccountPoolStatsQuotaAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 3), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsQuotaAvailable.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsQuotaAvailable.setDescription('This field specifies how many MB of space is available in this storage pool for this account.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStorageAdminAccountPoolStatsSnapshotReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 4), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSnapshotReserved.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSnapshotReserved.setDescription('This field specifies how many MB of snapshot space is reserved in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStorageAdminAccountPoolStatsSnapshotUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 5), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSnapshotUsed.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSnapshotUsed.setDescription('This field specifies how many MB of snapshot space is currently utilized in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStorageAdminAccountPoolStatsSnapshotSubscribed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 6), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSnapshotSubscribed.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSnapshotSubscribed.setDescription('This field specifies the total subscribed space for all snapshots in this pool. For a snapshot of a \n                     thin provisioned volume, subscribed space is the advertised space. For a snapshot of a classic volume, \n                     subscribed space is the volume size.  This is a dynamic value, it is not Administrator setable.')
eqlStorageAdminAccountPoolStatsSnapshotNumInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSnapshotNumInUse.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSnapshotNumInUse.setDescription('This field indicates how many snapshots are currently in use in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStorageAdminAccountPoolStatsSnapshotNumOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSnapshotNumOnline.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSnapshotNumOnline.setDescription('This field indicates how many snapshots are online in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStorageAdminAccountPoolStatsSnapshotCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSnapshotCount.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSnapshotCount.setDescription('This field indicates how many total snapshots are in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStorageAdminAccountPoolStatsVolumeNumInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsVolumeNumInUse.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsVolumeNumInUse.setDescription('This field indicates how many volumes are currently in use in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStorageAdminAccountPoolStatsVolumeNumOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsVolumeNumOnline.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsVolumeNumOnline.setDescription('This field indicates how many volumes are online in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStorageAdminAccountPoolStatsVolumeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsVolumeCount.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsVolumeCount.setDescription('This field indicates how many total volumes are in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStorageAdminAccountPoolStatsVolumeSubscribed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 13), Unsigned64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsVolumeSubscribed.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsVolumeSubscribed.setDescription('This field specifies the total subscribed space for all volumes in this pool. For a thin provisioned volume, \n                     subscribed space is the advertised space. For a regular volume, subscribed space is the volume size.\n                     The value of this field will be equal to sum of eqliscsiVolumeSize field for all volumes in this pool.')
eqlStorageAdminAccountPoolStatsVolumeQuotaUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 14), Unsigned64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsVolumeQuotaUsage.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsVolumeQuotaUsage.setDescription('This field specifies the total MB against the quota for all volumes in this pool. \n                     The space contributed by a regular volume is its volume size.\n                     The sapce contributed by a thin provisioned volume is its max grow size.')
eqlStorageAdminAccountPoolStatsVolumeSpaceAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 15), Unsigned64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsVolumeSpaceAllocated.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsVolumeSpaceAllocated.setDescription('The value of this object represents the sum of actual materialized pages for all volumes in the pool.')
eqlStorageAdminAccountPoolStatsFailbackSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 16), Unsigned64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsFailbackSpace.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsFailbackSpace.setDescription('This field represents the amount of space consumed by fail-back replicasets in this pool.')
eqlStorageAdminAccountPoolStatsFailbackSubscribed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 17), Unsigned64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsFailbackSubscribed.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsFailbackSubscribed.setDescription('This field specifies the total subscribed space for failback for all volumes in this pool. For the failback \n                     of a thin provisioned volume, subscribed space is the advertised space. For a failabck of a classic volume, \n                     subscribed space is the volume size.  This is a dynamic value, it is not Administrator setable.')
eqlStorageAdminAccountPoolStatsThinProvFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 18), Unsigned64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsThinProvFreeSpace.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsThinProvFreeSpace.setDescription('This field represents the amount of space available for Thin Provisioned Volumes in this pool.')
eqlStorageAdminAccountPoolStatsConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsConnectionCount.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsConnectionCount.setDescription('This field gives the number of iSCSI connections that are currently connected to volumes in this pool.')
eqlStorageAdminAccountPoolStatsSnapshotResvFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 20), Unsigned64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSnapshotResvFreeSpace.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSnapshotResvFreeSpace.setDescription('This field specifies how many MB of space is available to Snapshots in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlStorageAdminAccountPoolStatsSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 6, 1, 21), Unsigned64()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSpaceUsed.setStatus('current')
if mibBuilder.loadTexts: eqlStorageAdminAccountPoolStatsSpaceUsed.setDescription('This field specifies how many MB of space currently used by this account in this storage pool.\n                     This is a dynamic value, it is not Administrator setable.')
eqlLdapLoginAccessPoolTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 16, 1, 7), )
if mibBuilder.loadTexts: eqlLdapLoginAccessPoolTable.setStatus('current')
if mibBuilder.loadTexts: eqlLdapLoginAccessPoolTable.setDescription('EqualLogic-Persistent Group LDAP login access group table. \n                     For LDAP login access configured with volume-admin \n                     this table stores the pool-quota information. For LDAP login access \n                     configured with pool-admin privilege this tables stores the pools \n                     that belong to the pool-admin')
eqlLdapLoginAccessPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 16, 1, 7, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLGROUP-MIB", "eqlLdapLoginAccessType"), (0, "EQLGROUP-MIB", "eqlLdapLoginAccessName"), (0, "EQLSTORAGEPOOL-MIB", "eqlStoragePoolIndex"))
if mibBuilder.loadTexts: eqlLdapLoginAccessPoolEntry.setStatus('current')
if mibBuilder.loadTexts: eqlLdapLoginAccessPoolEntry.setDescription('An entry (row) containing the configuration for the LDAP login access\n                     pool information.')
eqlLdapLoginAccessPoolQuotaType = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 7, 1, 1), PoolQuotaType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLdapLoginAccessPoolQuotaType.setStatus('current')
if mibBuilder.loadTexts: eqlLdapLoginAccessPoolQuotaType.setDescription('The format of the adminQuota value:\n                        0 - Unlimited quota,\n                        1 - Size in Megabytes.\n                    This field applies only to the LDAP login access  \n                    that have Volume Admin Privilege.')
eqlLdapLoginAccessPoolQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 7, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLdapLoginAccessPoolQuota.setStatus('current')
if mibBuilder.loadTexts: eqlLdapLoginAccessPoolQuota.setDescription('This field specifies the pool quota (in MB) for a \n                     each Volume Administrator using the LDAP login access. \n                     This field applies only to Volume Administrators.')
eqlLdapLoginAccessPoolQuotaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqlLdapLoginAccessPoolQuotaRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqlLdapLoginAccessPoolQuotaRowStatus.setDescription('This field is used indicate the status of this entry.')
eqlStoragePoolOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 16, 1, 8), )
if mibBuilder.loadTexts: eqlStoragePoolOperStatusTable.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolOperStatusTable.setDescription('EqualLogic-Dynamic Storage Pool Operational Status Table.\n                     This table contains the list of operational status for each pool.')
eqlStoragePoolOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 16, 1, 8, 1), )
eqlStoragePoolEntry.registerAugmentions(("EQLSTORAGEPOOL-MIB", "eqlStoragePoolOperStatusEntry"))
eqlStoragePoolOperStatusEntry.setIndexNames(*eqlStoragePoolEntry.getIndexNames())
if mibBuilder.loadTexts: eqlStoragePoolOperStatusEntry.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolOperStatusEntry.setDescription('An entry (row) containing a storage pool operational status.')
eqlStoragePoolOperStatusCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 16, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("paused", 2), ("no-capable-hardware", 3), ("no-capable-raid", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlStoragePoolOperStatusCompression.setStatus('current')
if mibBuilder.loadTexts: eqlStoragePoolOperStatusCompression.setDescription('This field the operational status of data optimization this pool.')
mibBuilder.exportSymbols("EQLSTORAGEPOOL-MIB", eqlStoragePoolStatsMemberNumOnline=eqlStoragePoolStatsMemberNumOnline, eqlStoragePoolDescription=eqlStoragePoolDescription, eqlStoragePoolIndex=eqlStoragePoolIndex, eqlStoragePoolUUID=eqlStoragePoolUUID, eqlStoragePoolSnapTrimBuffer=eqlStoragePoolSnapTrimBuffer, eqlStoragePoolOperStatusEntry=eqlStoragePoolOperStatusEntry, eqlStoragePoolStatsThinProvFreeSpace=eqlStoragePoolStatsThinProvFreeSpace, eqlStoragePoolStatsSpaceUsed=eqlStoragePoolStatsSpaceUsed, eqlStoragePoolStatsSnapshotReserved=eqlStoragePoolStatsSnapshotReserved, eqlStoragePoolStatsAvailableForBorrowing=eqlStoragePoolStatsAvailableForBorrowing, eqlStoragePoolSnapTrimmerBorrowInfoRefreshInterval=eqlStoragePoolSnapTrimmerBorrowInfoRefreshInterval, eqlStoragePoolSnapTrimmerHWMLifeTime=eqlStoragePoolSnapTrimmerHWMLifeTime, eqlStorageAdminAccountPoolStatsVolumeSpaceAllocated=eqlStorageAdminAccountPoolStatsVolumeSpaceAllocated, eqlStoragePoolStatsSnapshotResvFreeSpace=eqlStoragePoolStatsSnapshotResvFreeSpace, eqlStoragePoolStatsReplicationSpace=eqlStoragePoolStatsReplicationSpace, eqlStoragePoolStatsVirtualSpaceSize=eqlStoragePoolStatsVirtualSpaceSize, eqlStorageAdminAccountPoolStatsFailbackSubscribed=eqlStorageAdminAccountPoolStatsFailbackSubscribed, eqlStoragePoolStatsVolumeNumOnline=eqlStoragePoolStatsVolumeNumOnline, eqlStoragePoolStatsMembersInUse=eqlStoragePoolStatsMembersInUse, eqlStoragePoolStatsDelegatedSpace=eqlStoragePoolStatsDelegatedSpace, eqlStoragePoolEntry=eqlStoragePoolEntry, eqlStoragePoolStatsRecoverableVolBorrowing=eqlStoragePoolStatsRecoverableVolBorrowing, eqlStoragePoolStatsVirtualVolumeNumInUse=eqlStoragePoolStatsVirtualVolumeNumInUse, eqlStoragePoolStatsStorageContainerVolumeCount=eqlStoragePoolStatsStorageContainerVolumeCount, eqlStoragePoolExecMergeTo=eqlStoragePoolExecMergeTo, eqlStorageAdminAccountPoolStatsConnectionCount=eqlStorageAdminAccountPoolStatsConnectionCount, eqlStoragePoolAdminAccountQuota=eqlStoragePoolAdminAccountQuota, eqlStoragePoolName=eqlStoragePoolName, eqlStoragePoolStatsVolumeCount=eqlStoragePoolStatsVolumeCount, eqlStoragePoolStatsReplicationFreeSpace=eqlStoragePoolStatsReplicationFreeSpace, eqlStoragePoolOpsRowStatus=eqlStoragePoolOpsRowStatus, eqlStorageAdminAccountPoolStatsVolumeNumInUse=eqlStorageAdminAccountPoolStatsVolumeNumInUse, eqlStoragePoolStatsStorageContainerCount=eqlStoragePoolStatsStorageContainerCount, eqlStorageAdminAccountPoolStatsVolumeQuotaUsage=eqlStorageAdminAccountPoolStatsVolumeQuotaUsage, eqlStoragePoolAdminAccountStatsEntry=eqlStoragePoolAdminAccountStatsEntry, eqlStoragePoolStatsSnapshotResvBorrowing=eqlStoragePoolStatsSnapshotResvBorrowing, eqlStoragePoolModule=eqlStoragePoolModule, eqlStoragePoolStatsSpace=eqlStoragePoolStatsSpace, eqlStoragePoolStatsFreeSpaceBorrowing=eqlStoragePoolStatsFreeSpaceBorrowing, eqlStoragePoolStatsCompressedSpaceUsed=eqlStoragePoolStatsCompressedSpaceUsed, eqlStoragePoolRowStatus=eqlStoragePoolRowStatus, eqlStoragePoolOpsStoragePoolDestinationIndex=eqlStoragePoolOpsStoragePoolDestinationIndex, eqlStoragePoolShouldEvalMask=eqlStoragePoolShouldEvalMask, eqlStoragePoolAdminAccountRowStatus=eqlStoragePoolAdminAccountRowStatus, eqlStoragePoolStatsVolumeNumInUse=eqlStoragePoolStatsVolumeNumInUse, eqlStoragePoolStatsActualFreeSpace=eqlStoragePoolStatsActualFreeSpace, eqlStoragePoolStatsVirtualVolumeNumOnline=eqlStoragePoolStatsVirtualVolumeNumOnline, eqlAdminAccountStoragePoolAccess=eqlAdminAccountStoragePoolAccess, eqlAdminAccountStoragePoolTable=eqlAdminAccountStoragePoolTable, eqlStorageAdminAccountPoolStatsSnapshotReserved=eqlStorageAdminAccountPoolStatsSnapshotReserved, eqlStoragePoolStatsSnapshotUsed=eqlStoragePoolStatsSnapshotUsed, eqlStoragePoolStatsStorageContainerSnapCount=eqlStoragePoolStatsStorageContainerSnapCount, eqlStoragePoolSnapTrimThreshold=eqlStoragePoolSnapTrimThreshold, StatusEnabledDefault=StatusEnabledDefault, eqlStoragePoolStatsTable=eqlStoragePoolStatsTable, eqlStoragePoolStatsSnapshotCount=eqlStoragePoolStatsSnapshotCount, eqlStoragePoolDefaultCompressionMinSnapDelay=eqlStoragePoolDefaultCompressionMinSnapDelay, eqlLdapLoginAccessPoolTable=eqlLdapLoginAccessPoolTable, eqlStorageAdminAccountPoolStatsQuotaUsed=eqlStorageAdminAccountPoolStatsQuotaUsed, eqlStoragePoolStatsMemberCount=eqlStoragePoolStatsMemberCount, eqlStoragePoolAdminAccountQuotaType=eqlStoragePoolAdminAccountQuotaType, eqlStorageAdminAccountPoolStatsVolumeSubscribed=eqlStorageAdminAccountPoolStatsVolumeSubscribed, eqlStoragePoolBorrow=eqlStoragePoolBorrow, eqlStoragePoolStatsSnapshotNumOnline=eqlStoragePoolStatsSnapshotNumOnline, eqlStoragePoolConformance=eqlStoragePoolConformance, eqlLdapLoginAccessPoolQuotaRowStatus=eqlLdapLoginAccessPoolQuotaRowStatus, eqlStoragePoolStatsReplicationSpaceUsed=eqlStoragePoolStatsReplicationSpaceUsed, eqlStoragePoolDefaultFlag=eqlStoragePoolDefaultFlag, eqlStoragePoolOperStatusTable=eqlStoragePoolOperStatusTable, eqlStoragePoolStatsVolumeSpaceAllocated=eqlStoragePoolStatsVolumeSpaceAllocated, PoolQuotaType=PoolQuotaType, eqlStoragePoolOpsOperation=eqlStoragePoolOpsOperation, eqlStoragePoolAdminAccountStatsTable=eqlStoragePoolAdminAccountStatsTable, eqlStoragePoolObjects=eqlStoragePoolObjects, eqlLdapLoginAccessPoolQuotaType=eqlLdapLoginAccessPoolQuotaType, eqlStoragePoolStatsFailbackSpace=eqlStoragePoolStatsFailbackSpace, eqlStorageAdminAccountPoolStatsQuotaAvailable=eqlStorageAdminAccountPoolStatsQuotaAvailable, eqlStoragePoolDefaultCompressionMinSnapAge=eqlStoragePoolDefaultCompressionMinSnapAge, eqlStoragePoolLeadMemberId=eqlStoragePoolLeadMemberId, eqlStoragePoolStatsEntry=eqlStoragePoolStatsEntry, eqlStorageAdminAccountPoolStatsSnapshotCount=eqlStorageAdminAccountPoolStatsSnapshotCount, eqlStoragePoolSnapTrimRecheckTimer=eqlStoragePoolSnapTrimRecheckTimer, eqlStoragePoolRAIDConfigWaitFlag=eqlStoragePoolRAIDConfigWaitFlag, SiteIndexOrZero=SiteIndexOrZero, eqlStorageAdminAccountPoolStatsSpaceUsed=eqlStorageAdminAccountPoolStatsSpaceUsed, PYSNMP_MODULE_ID=eqlStoragePoolModule, eqlStorageAdminAccountPoolStatsThinProvFreeSpace=eqlStorageAdminAccountPoolStatsThinProvFreeSpace, eqlStorageAdminAccountPoolStatsVolumeNumOnline=eqlStorageAdminAccountPoolStatsVolumeNumOnline, eqlStoragePoolTable=eqlStoragePoolTable, eqlStoragePoolAdminAccountEntry=eqlStoragePoolAdminAccountEntry, eqlStorageAdminAccountPoolStatsSnapshotSubscribed=eqlStorageAdminAccountPoolStatsSnapshotSubscribed, eqlStoragePoolStatsFreeSpace=eqlStoragePoolStatsFreeSpace, Unsigned64=Unsigned64, eqlLdapLoginAccessPoolEntry=eqlLdapLoginAccessPoolEntry, eqlStorageAdminAccountPoolStatsSnapshotNumInUse=eqlStorageAdminAccountPoolStatsSnapshotNumInUse, eqlStoragePoolStatsVolumeSubscribed=eqlStoragePoolStatsVolumeSubscribed, eqlAdminAccountStoragePoolEntry=eqlAdminAccountStoragePoolEntry, eqlStorageAdminAccountPoolStatsVolumeCount=eqlStorageAdminAccountPoolStatsVolumeCount, eqlStoragePoolOperStatusCompression=eqlStoragePoolOperStatusCompression, eqlStoragePoolDefaultCompressionStrategy=eqlStoragePoolDefaultCompressionStrategy, SiteIndex=SiteIndex, eqlStoragePoolOpsTable=eqlStoragePoolOpsTable, eqlLdapLoginAccessPoolQuota=eqlLdapLoginAccessPoolQuota, eqlStoragePoolLastBalance=eqlStoragePoolLastBalance, eqlStoragePoolStatsStorageContainerSpaceReserved=eqlStoragePoolStatsStorageContainerSpaceReserved, eqlStoragePoolStatsStorageContainerVolumesOnline=eqlStoragePoolStatsStorageContainerVolumesOnline, eqlStoragePoolStatsDelegatedSpaceUsed=eqlStoragePoolStatsDelegatedSpaceUsed, eqlStorageAdminAccountPoolStatsSnapshotResvFreeSpace=eqlStorageAdminAccountPoolStatsSnapshotResvFreeSpace, eqlStoragePoolAdminAccountTable=eqlStoragePoolAdminAccountTable, eqlStoragePoolOpsEntry=eqlStoragePoolOpsEntry, eqlStorageAdminAccountPoolStatsSnapshotUsed=eqlStorageAdminAccountPoolStatsSnapshotUsed, eqlStorageAdminAccountPoolStatsFailbackSpace=eqlStorageAdminAccountPoolStatsFailbackSpace, eqlStoragePoolOpsIndex=eqlStoragePoolOpsIndex, eqlStoragePoolSnapMemberTrimThresholdAmount=eqlStoragePoolSnapMemberTrimThresholdAmount, eqlStoragePoolStatsSnapshotNumInUse=eqlStoragePoolStatsSnapshotNumInUse, eqlStorageAdminAccountPoolStatsQuota=eqlStorageAdminAccountPoolStatsQuota, eqlStoragePoolStatsConnectionCount=eqlStoragePoolStatsConnectionCount, eqlStorageAdminAccountPoolStatsSnapshotNumOnline=eqlStorageAdminAccountPoolStatsSnapshotNumOnline, eqlStoragePoolStatsSnapShotBorrowing=eqlStoragePoolStatsSnapShotBorrowing, eqlStoragePoolNotifications=eqlStoragePoolNotifications, eqlStoragePoolStatsTotalSpaceBorrowing=eqlStoragePoolStatsTotalSpaceBorrowing)
