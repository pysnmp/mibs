#
# PySNMP MIB module EdgeSwitch-INVENTORY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/edgeswitch/EdgeSwitch-INVENTORY-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:42:20 2024
# On host fv-az1530-906 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
fastPath, = mibBuilder.importSymbols("EdgeSwitch-REF-MIB", "fastPath")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, Bits, Integer32, Gauge32, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, iso, NotificationType, IpAddress, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "Integer32", "Gauge32", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "iso", "NotificationType", "IpAddress", "Counter64", "MibIdentifier")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
fastPathInventory = ModuleIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13))
fastPathInventory.setRevisions(('2013-10-15 00:00', '2011-01-26 00:00', '2007-05-23 00:00', '2004-10-28 20:37', '2003-05-26 19:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathInventory.setRevisionsDescriptions(('Object support modifications for LinuxHost systems.', 'Postal address updated.', 'Ubiquiti branding related changes.', 'Version 2 - Add support for Front Panel Stacking configuration.', 'Initial version.',))
if mibBuilder.loadTexts: fastPathInventory.setLastUpdated('201310150000Z')
if mibBuilder.loadTexts: fastPathInventory.setOrganization('Broadcom Inc')
if mibBuilder.loadTexts: fastPathInventory.setContactInfo('')
if mibBuilder.loadTexts: fastPathInventory.setDescription('This MIB defines the objects used for FastPath to \n            configure and report information and status of units, \n            slots and supported cards.')
class AgentInventoryUnitPreference(TextualConvention, Integer32):
    description = 'Indicates the preference the unit has for being the \n            management unit in the stack.  If the value is 0, it \n            indicates the unit is disabled for management.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("disabled", 0), ("unsassigned", 1), ("assigned", 2))

class AgentInventoryUnitType(TextualConvention, Unsigned32):
    description = 'The Unit Type value for a given unit, displayed in hexadecimal.'
    status = 'current'
    displayHint = 'x'

class AgentInventoryCardType(TextualConvention, Unsigned32):
    description = 'The Card Type value for a given card, displayed in hexadecimal.'
    status = 'current'
    displayHint = 'x'

agentInventoryStackGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 1))
agentInventoryStackReplicateSTK = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventoryStackReplicateSTK.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackReplicateSTK.setDescription('Initiates STK copy from management unit to all other management capable units in\n            the stack.')
agentInventoryStackReload = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventoryStackReload.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackReload.setDescription('Initiates stack reload.')
agentInventoryStackMaxUnitNumber = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryStackMaxUnitNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackMaxUnitNumber.setDescription('Indicates the maximum allowed Unit Number configurable on the stack.')
agentInventoryStackReplicateSTKStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inProgress", 1), ("notInProgress", 2), ("finishedWithSuccess", 3), ("finishedWithError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryStackReplicateSTKStatus.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackReplicateSTKStatus.setDescription('Indicates the current status of an STK copy from management unit to all other \n            management capable units inthe stack.')
agentInventoryStackSTKname = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unconfigured", 1), ("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventoryStackSTKname.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackSTKname.setDescription('STK file on management unit for copy/activate/delete operations to all units in the stack\n             unconfigured(1) - indicates a default state and can not be set.')
agentInventoryStackActivateSTK = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventoryStackActivateSTK.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackActivateSTK.setDescription('Activates the specified STK file on all units on the stack.')
agentInventoryStackDeleteSTK = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventoryStackDeleteSTK.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackDeleteSTK.setDescription('Deletes the specified STK file from all units on the stack.')
agentInventoryStackTemplateId = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventoryStackTemplateId.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackTemplateId.setDescription("Sets the stack template ID on all units in the stack. Deletes the startup configuration \n             on all affected units and resets all units in the stack.\n             This is write-only value. It always returns '0' on request.")
agentInventoryUnitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2))
agentInventorySupportedUnitTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 1), )
if mibBuilder.loadTexts: agentInventorySupportedUnitTable.setStatus('current')
if mibBuilder.loadTexts: agentInventorySupportedUnitTable.setDescription('TODO')
agentInventorySupportedUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 1, 1), ).setIndexNames((0, "EdgeSwitch-INVENTORY-MIB", "agentInventorySupportedUnitIndex"))
if mibBuilder.loadTexts: agentInventorySupportedUnitEntry.setStatus('current')
if mibBuilder.loadTexts: agentInventorySupportedUnitEntry.setDescription('TODO')
agentInventorySupportedUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: agentInventorySupportedUnitIndex.setStatus('current')
if mibBuilder.loadTexts: agentInventorySupportedUnitIndex.setDescription('The unit identifier associated with the supported unit.')
agentInventorySupportedUnitModelIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySupportedUnitModelIdentifier.setStatus('current')
if mibBuilder.loadTexts: agentInventorySupportedUnitModelIdentifier.setDescription('The model identifier for the supported unit.')
agentInventorySupportedUnitDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySupportedUnitDescription.setStatus('current')
if mibBuilder.loadTexts: agentInventorySupportedUnitDescription.setDescription('The description of the supported unit.')
agentInventorySupportedUnitExpectedCodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySupportedUnitExpectedCodeVer.setStatus('obsolete')
if mibBuilder.loadTexts: agentInventorySupportedUnitExpectedCodeVer.setDescription('The expected code version.')
agentInventoryUnitTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2), )
if mibBuilder.loadTexts: agentInventoryUnitTable.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitTable.setDescription('A table of Per-Unit configuration objects.')
agentInventoryUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1), ).setIndexNames((0, "EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitNumber"))
if mibBuilder.loadTexts: agentInventoryUnitEntry.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitEntry.setDescription('Each Instance corresponds with a different unit managed by this agent.')
agentInventoryUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentInventoryUnitNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitNumber.setDescription('The unit number associated with this unit.')
agentInventoryUnitAssignNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInventoryUnitAssignNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitAssignNumber.setDescription('Allows setting the unit number associated with this unit.  This number must \n            be less than the value returned by agentInventoryStackMaxUnitNumber. Setting \n            this object to a non-zero value will initate unit renumbering. The switch will \n            be reset to perform unit renumbering and the configuration of switch interfaces \n            will be cleared. If the unit being renumbered is the manager of the stack, then\n            all the switches in the stack will be reset to perform Manager unit renumbering \n            and the configuration of Manager switch interfaces will be cleared.')
agentInventoryUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 3), AgentInventoryUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryUnitType.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitType.setDescription('The Unit Type identifier for this unit.')
agentInventoryUnitSupportedUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInventoryUnitSupportedUnitIndex.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitSupportedUnitIndex.setDescription('The index of the unit type in agentInventorySupportedUnitTable which this unit\n            is associated with.')
agentInventoryUnitMgmtAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mgmtUnit", 1), ("stackUnit", 2), ("mgmtUnassigned", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInventoryUnitMgmtAdmin.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitMgmtAdmin.setDescription('Indicates whether the unit is a Management Unit, a Stack Unit, or has \n            been configured to be a Management Unit.\n            \n            Setting this object to mgmtUnit(1) initiates transfer of the \n            management functionality to the specified stack unit. Object values \n            stackUnit(2) and mgmtUnassigned(3) cannot be set.')
agentInventoryUnitHWMgmtPref = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 7), AgentInventoryUnitPreference()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryUnitHWMgmtPref.setStatus('obsolete')
if mibBuilder.loadTexts: agentInventoryUnitHWMgmtPref.setDescription('Indicates the default preference assigned to the unit.')
agentInventoryUnitHWMgmtPrefValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 15), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryUnitHWMgmtPrefValue.setStatus('obsolete')
if mibBuilder.loadTexts: agentInventoryUnitHWMgmtPrefValue.setDescription('Indicates the default preference value assigned to the unit.\n            The preference value indicates how likely this unit is to be\n            chosen as the management unit.  A value of 0 indicates a disabled\n            or unassigned preference.')
agentInventoryUnitAdminMgmtPref = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 9), AgentInventoryUnitPreference()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInventoryUnitAdminMgmtPref.setStatus('obsolete')
if mibBuilder.loadTexts: agentInventoryUnitAdminMgmtPref.setDescription('Indicates the configured preference assigned to the unit. This object\n            can not be set to assigned(3).  Setting this object to disabled(1),\n            or unassigned(2) will set agentInventoryUnitHWMgmtPrefValue to 0.')
agentInventoryUnitAdminMgmtPrefValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 15), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInventoryUnitAdminMgmtPrefValue.setStatus('obsolete')
if mibBuilder.loadTexts: agentInventoryUnitAdminMgmtPrefValue.setDescription('Indicates the configured preference value assigned to the unit.\n            The preference value indicates how likely this unit is to be\n            chosen as the management unit.  A value of 0 indicates a disabled\n            or unassigned preference.  Setting this object to 0 will also set\n            agentInventoryUnitHWMgmtPref to unassigned(2).  Setting this object\n            to a non-zero value will set agentInventoryUnitHWMgmtPref to\n            assigned(3).  This value overrides the value of\n            agentInventoryUnitHWMgmtPref if assigned.')
agentInventoryUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("unsupported", 2), ("codeMismatch", 3), ("configMismatch", 4), ("sdmMismatch", 5), ("notPresent", 6), ("codeUpdate", 7), ("stmMismatch", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryUnitStatus.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitStatus.setDescription('The unit status of this unit.')
agentInventoryUnitDetectedCodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryUnitDetectedCodeVer.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitDetectedCodeVer.setDescription('The version of code running on this unit. If the unit is not \n            detected then the code version is an empty string.')
agentInventoryUnitDetectedCodeInFlashVer = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryUnitDetectedCodeInFlashVer.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitDetectedCodeInFlashVer.setDescription('The version of code that is currently stored in FLASH \n            memory on the unit. This code will execute after the unit \n            is reset. If the unit is not detected then this object will \n            return an empty string.')
agentInventoryUnitUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryUnitUpTime.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitUpTime.setDescription('The system up time of the unit.')
agentInventoryUnitDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryUnitDescription.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitDescription.setDescription('The description of the unit.')
agentInventoryUnitReplicateSTK = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventoryUnitReplicateSTK.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitReplicateSTK.setDescription('Initiates the specified STK file copy from management unit to this unit.')
agentInventoryUnitReload = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventoryUnitReload.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitReload.setDescription('Reload a specific unit in the stack.')
agentInventoryUnitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInventoryUnitRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitRowStatus.setDescription('The status of this unit instance.  Creation of new instances requires the object\n            agentInventoryUnitSupportedUnitIndex to be set at the same time to indicate the type \n            of of unit to pre-configure.\n            \n            active(1)      - This instance is active.\n            createAndGo(4) - Creates a new instance.\n            destroy(6)     - Removes this instance.')
agentInventoryUnitSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryUnitSerialNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitSerialNumber.setDescription('The Serial Number of the unit.')
agentInventoryUnitImage1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryUnitImage1Version.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitImage1Version.setDescription('Code version for Image1.')
agentInventoryUnitImage2Version = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryUnitImage2Version.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitImage2Version.setDescription('Code version for Image2.')
agentInventoryUnitSTKname = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventoryUnitSTKname.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitSTKname.setDescription('STK file to be used for copy/delete/activate operatiosn.')
agentInventoryUnitActivateSTK = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventoryUnitActivateSTK.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitActivateSTK.setDescription('Activates the specified STK file on this unit.')
agentInventoryUnitDeleteSTK = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventoryUnitDeleteSTK.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitDeleteSTK.setDescription('Deletes the specified STK file on this unit.')
agentInventoryUnitReplicateSTKStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inProgress", 1), ("notInProgress", 2), ("finishedWithSuccess", 3), ("finishedWithError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryUnitReplicateSTKStatus.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitReplicateSTKStatus.setDescription('Indicates the current status of an STK copy from the management unit to another\n            management capable unit in the stack.')
agentInventoryUnitStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unassigned", 1), ("standby-opr", 2), ("standby-cfg", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventoryUnitStandby.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitStandby.setDescription('Configures the standby status of this unit.  The Management unit may not be \n             configured.  A unit that is standby_cfg(3) may be set to uassigned(1) to clear \n             standby configuration.  A unit that is standby_opr(2) may NOT be set to\n             unassigned(1).')
agentInventoryUnitSFSTransferStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryUnitSFSTransferStatus.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitSFSTransferStatus.setDescription('Status parameter to indicate stack firmware synchronization operation status for a particular unit.\n\t\t\tIf SFS transfer is in progress for a particular unit status will be inProgress(2),otherwise status will\n\t\t\tbe noAction(1).')
agentInventoryUnitSFSLastAttemptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("failure", 3), ("min-bootcode-version-not-present", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryUnitSFSLastAttemptStatus.setStatus('current')
if mibBuilder.loadTexts: agentInventoryUnitSFSLastAttemptStatus.setDescription('Status parameter to indicate whether the last synchronization attempt \n             succeeded or failed.If SFS is initated for a particular unit and if it \n             completes successfully this object will return success(2),if SFS operation \n             failed lasttime for this unit,this object will return failure(3).if SFS did \n             not initiate for this unit,this object will retunrn none(1). If activation of\n             the image failed because the underlying bootcode version is older than the minimum boot \n             code version specified in the image, this object returns min-bootcode-version-not-met(4)')
agentInventorySlotGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 3))
agentInventorySlotTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 3, 1), )
if mibBuilder.loadTexts: agentInventorySlotTable.setStatus('current')
if mibBuilder.loadTexts: agentInventorySlotTable.setDescription('TODO')
agentInventorySlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 3, 1, 1), ).setIndexNames((0, "EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitNumber"), (0, "EdgeSwitch-INVENTORY-MIB", "agentInventorySlotNumber"))
if mibBuilder.loadTexts: agentInventorySlotEntry.setStatus('current')
if mibBuilder.loadTexts: agentInventorySlotEntry.setDescription('TODO')
agentInventorySlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentInventorySlotNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventorySlotNumber.setDescription('An incrimental index of the slot in this unit.')
agentInventorySlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("empty", 1), ("full", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySlotStatus.setStatus('current')
if mibBuilder.loadTexts: agentInventorySlotStatus.setDescription('Indicates the current status of the slot.')
agentInventorySlotPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventorySlotPowerMode.setStatus('current')
if mibBuilder.loadTexts: agentInventorySlotPowerMode.setDescription('Indicates whether a card in this slot will be powered on.')
agentInventorySlotAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventorySlotAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentInventorySlotAdminMode.setDescription('Indicates whether this card is administratively enabled or \n            disabled.')
agentInventorySlotInsertedCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 3, 1, 1, 6), AgentInventoryCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySlotInsertedCardType.setStatus('current')
if mibBuilder.loadTexts: agentInventorySlotInsertedCardType.setDescription('Indicates the inserted card type. Will return 0 if the slot is \n            not full.')
agentInventorySlotConfiguredCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 3, 1, 1, 7), AgentInventoryCardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventorySlotConfiguredCardType.setStatus('current')
if mibBuilder.loadTexts: agentInventorySlotConfiguredCardType.setDescription('Indicates the configured card type.  This object may be set with a\n            corresponding value of agentInventoryCardType if this slot supports\n            removable cards.')
agentInventorySlotCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 3, 1, 1, 8), Bits().clone(namedValues=NamedValues(("pluggable", 0), ("power-down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySlotCapabilities.setStatus('current')
if mibBuilder.loadTexts: agentInventorySlotCapabilities.setDescription('Indicates the different capabilities this slot has.\n            \n            pluggable(0)   - This slot can contain pluggable cards.\n            power-down(1)  - Power to this slot can be controlled through the object\n                             agentInventorySlotPowerMode\n            ')
agentInventoryCardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 4))
agentInventoryCardTypeTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 4, 1), )
if mibBuilder.loadTexts: agentInventoryCardTypeTable.setStatus('current')
if mibBuilder.loadTexts: agentInventoryCardTypeTable.setDescription('Contains information for all supported Card Types in the system.')
agentInventoryCardTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 4, 1, 1), ).setIndexNames((0, "EdgeSwitch-INVENTORY-MIB", "agentInventoryCardIndex"))
if mibBuilder.loadTexts: agentInventoryCardTypeEntry.setStatus('current')
if mibBuilder.loadTexts: agentInventoryCardTypeEntry.setDescription('Contains information related to a specific Card Type.')
agentInventoryCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentInventoryCardIndex.setStatus('current')
if mibBuilder.loadTexts: agentInventoryCardIndex.setDescription('An arbitrary index used to identify cards in the table.')
agentInventoryCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 4, 1, 1, 2), AgentInventoryCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryCardType.setStatus('current')
if mibBuilder.loadTexts: agentInventoryCardType.setDescription('The Card Type associated with this instance.')
agentInventoryCardModelIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryCardModelIdentifier.setStatus('current')
if mibBuilder.loadTexts: agentInventoryCardModelIdentifier.setDescription('The model identifier for the supported Card Type.')
agentInventoryCardDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryCardDescription.setStatus('current')
if mibBuilder.loadTexts: agentInventoryCardDescription.setDescription('The card description for the supported Card Type.')
agentInventoryComponentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 5))
agentInventoryComponentTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 5, 1), )
if mibBuilder.loadTexts: agentInventoryComponentTable.setStatus('current')
if mibBuilder.loadTexts: agentInventoryComponentTable.setDescription('Contains information for all supported Components in the system.')
agentInventoryComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 5, 1, 1), ).setIndexNames((0, "EdgeSwitch-INVENTORY-MIB", "agentInventoryComponentIndex"))
if mibBuilder.loadTexts: agentInventoryComponentEntry.setStatus('current')
if mibBuilder.loadTexts: agentInventoryComponentEntry.setDescription('Contains information related to a specific Components.')
agentInventoryComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentInventoryComponentIndex.setStatus('current')
if mibBuilder.loadTexts: agentInventoryComponentIndex.setDescription('An arbitrary index used to reference components in the table.')
agentInventoryComponentMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryComponentMnemonic.setStatus('current')
if mibBuilder.loadTexts: agentInventoryComponentMnemonic.setDescription('The abreviated name of this component.')
agentInventoryComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryComponentName.setStatus('current')
if mibBuilder.loadTexts: agentInventoryComponentName.setDescription('The name of the component for this instance.')
agentInventoryStackPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 7))
agentInventoryStackPortIpTelephonyQOSSupport = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventoryStackPortIpTelephonyQOSSupport.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackPortIpTelephonyQOSSupport.setDescription('Controls whether the Stack Ports give higher priority to IP Telephony traffic.')
agentInventorySFSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 8))
agentInventoryStackUnitNumber = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 8, 1), Unsigned32())
if mibBuilder.loadTexts: agentInventoryStackUnitNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackUnitNumber.setDescription('The unit number associated with stack unit .')
agentInventorySFS = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventorySFS.setStatus('current')
if mibBuilder.loadTexts: agentInventorySFS.setDescription('Controls whether the Stack Firmware Synchronization is enabled or disabled.')
agentInventorySFSAllowDowngrade = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventorySFSAllowDowngrade.setStatus('current')
if mibBuilder.loadTexts: agentInventorySFSAllowDowngrade.setDescription('Controls whether downgrading the image on the stack member is allowed or not if the firmware version of manager is older to firmware version of stack member')
agentInventorySFSTrap = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventorySFSTrap.setStatus('current')
if mibBuilder.loadTexts: agentInventorySFSTrap.setDescription('Controls sending of traps during Stack firmware synchronization operation')
agentInventoryStackPortTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 7, 2), )
if mibBuilder.loadTexts: agentInventoryStackPortTable.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackPortTable.setDescription('Contains information for all Stack Ports present in the system.')
agentInventoryStackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 7, 2, 1), ).setIndexNames((0, "EdgeSwitch-INVENTORY-MIB", "agentInventoryStackPortIndex"))
if mibBuilder.loadTexts: agentInventoryStackPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackPortEntry.setDescription('Contains information related to a specific Stack Port.')
agentInventoryStackPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 7, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentInventoryStackPortIndex.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackPortIndex.setDescription('An arbitrary index used to reference Stack Ports in the table.')
agentInventoryStackPortUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 7, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryStackPortUnit.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackPortUnit.setDescription('The Unit Index this Stack Port is physically located on.')
agentInventoryStackPortTag = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryStackPortTag.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackPortTag.setDescription('The name of the Stack Port for this instance.')
agentInventoryStackPortConfiguredStackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stack", 1), ("ethernet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentInventoryStackPortConfiguredStackMode.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackPortConfiguredStackMode.setDescription('Configured mode of the Stack Port.  Changes to this\n            value happen only after a reset of the switch.')
agentInventoryStackPortRunningStackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stack", 1), ("ethernet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryStackPortRunningStackMode.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackPortRunningStackMode.setDescription('Currently operational mode of the Stack Port.')
agentInventoryStackPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryStackPortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackPortLinkStatus.setDescription('Link status of the Stack Port.  Ports which are in ethernet\n            mode will return a status of down(2).')
agentInventoryStackPortLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 7, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryStackPortLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackPortLinkSpeed.setDescription('Speed of the Stack Port measured in Gb/s.  Ports which are\n            in ethernet mode will return a speed of 0.')
agentInventoryStackPortDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryStackPortDataRate.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackPortDataRate.setDescription('Approximate data rate on the stacking port. Measured in Gb/s.\n            Ports which are in ethernet mode will return 0.')
agentInventoryStackPortErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 7, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryStackPortErrorRate.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackPortErrorRate.setDescription('Approximate error rate on the stack port. Measured in Errors \n            per Second.  Ports which are in ethernet mode will return 0.')
agentInventoryStackPortTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 7, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryStackPortTotalErrors.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackPortTotalErrors.setDescription('Number of errors since boot. The counter may wrap. Ports \n            which are in ethernet mode will return 0.')
agentInventoryTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 0))
agentInventoryCardMismatch = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 0, 1)).setObjects(("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitNumber"), ("EdgeSwitch-INVENTORY-MIB", "agentInventorySlotNumber"), ("EdgeSwitch-INVENTORY-MIB", "agentInventorySlotInsertedCardType"), ("EdgeSwitch-INVENTORY-MIB", "agentInventorySlotConfiguredCardType"))
if mibBuilder.loadTexts: agentInventoryCardMismatch.setStatus('current')
if mibBuilder.loadTexts: agentInventoryCardMismatch.setDescription('Sent when a card is inserted which is a different type than \n            what the slot was configured for.')
agentInventoryCardUnsupported = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 0, 2)).setObjects(("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitNumber"), ("EdgeSwitch-INVENTORY-MIB", "agentInventorySlotNumber"), ("EdgeSwitch-INVENTORY-MIB", "agentInventorySlotInsertedCardType"))
if mibBuilder.loadTexts: agentInventoryCardUnsupported.setStatus('current')
if mibBuilder.loadTexts: agentInventoryCardUnsupported.setDescription('Sent when a card is inserted which is of a type that is not \n            supported by the slot.')
agentInventoryStackPortLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 0, 3)).setObjects(("EdgeSwitch-INVENTORY-MIB", "agentInventoryStackPortUnit"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryStackPortTag"))
if mibBuilder.loadTexts: agentInventoryStackPortLinkUp.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackPortLinkUp.setDescription('Sent when a Stack Port is connected to annother Stack Member.')
agentInventoryStackPortLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 0, 4)).setObjects(("EdgeSwitch-INVENTORY-MIB", "agentInventoryStackPortUnit"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryStackPortTag"))
if mibBuilder.loadTexts: agentInventoryStackPortLinkDown.setStatus('current')
if mibBuilder.loadTexts: agentInventoryStackPortLinkDown.setDescription('Sent when a Stack Port is disconnected from annother Stack Member.')
agentInventorySFSStart = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 0, 5)).setObjects(("EdgeSwitch-INVENTORY-MIB", "agentInventoryStackUnitNumber"))
if mibBuilder.loadTexts: agentInventorySFSStart.setStatus('current')
if mibBuilder.loadTexts: agentInventorySFSStart.setDescription('Sent when Stack Firmware Synchronization operation is started on a Stack Member.')
agentInventorySFSComplete = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 0, 6)).setObjects(("EdgeSwitch-INVENTORY-MIB", "agentInventoryStackUnitNumber"))
if mibBuilder.loadTexts: agentInventorySFSComplete.setStatus('current')
if mibBuilder.loadTexts: agentInventorySFSComplete.setDescription('Sent when Stack Firmware Synchronization operation is complete on a Stack Member.')
agentInventorySFSFail = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 0, 7)).setObjects(("EdgeSwitch-INVENTORY-MIB", "agentInventoryStackUnitNumber"))
if mibBuilder.loadTexts: agentInventorySFSFail.setStatus('current')
if mibBuilder.loadTexts: agentInventorySFSFail.setDescription('Sent when Stack Firmware Synchronization operation failed for a Stack Member.')
fastPathInventoryConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 6))
fastPathInventoryCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 6, 1))
fastPathInventoryGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 6, 2))
fastPathInventoryCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 6, 1, 1)).setObjects(("EdgeSwitch-INVENTORY-MIB", "fastPathInventorySlotGroup"), ("EdgeSwitch-INVENTORY-MIB", "fastPathInventoryCardGroup"), ("EdgeSwitch-INVENTORY-MIB", "fastPathInventoryCardGroup"), ("EdgeSwitch-INVENTORY-MIB", "fastPathInventoryUnitGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fastPathInventoryCompliance = fastPathInventoryCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: fastPathInventoryCompliance.setDescription('The compliance statement for SNMP entities which implement\n            version 1 of the fastPathInventory MIB.')
fastPathInventoryCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 6, 1, 2)).setObjects(("EdgeSwitch-INVENTORY-MIB", "fastPathInventorySlotGroup"), ("EdgeSwitch-INVENTORY-MIB", "fastPathInventoryCardGroup"), ("EdgeSwitch-INVENTORY-MIB", "fastPathInventoryCardGroup"), ("EdgeSwitch-INVENTORY-MIB", "fastPathInventoryUnitGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fastPathInventoryCompliance2 = fastPathInventoryCompliance2.setStatus('current')
if mibBuilder.loadTexts: fastPathInventoryCompliance2.setDescription('The compliance statement for SNMP entities which implement\n            version 2 of the fastPathInventory MIB.')
fastPathInventorySupportedUnitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 6, 2, 1)).setObjects(("EdgeSwitch-INVENTORY-MIB", "agentInventorySupportedUnitIndex"), ("EdgeSwitch-INVENTORY-MIB", "agentInventorySupportedUnitModelIdentifier"), ("EdgeSwitch-INVENTORY-MIB", "agentInventorySupportedUnitDescription"), ("EdgeSwitch-INVENTORY-MIB", "agentInventorySupportedUnitExpectedCodeVer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fastPathInventorySupportedUnitGroup = fastPathInventorySupportedUnitGroup.setStatus('current')
if mibBuilder.loadTexts: fastPathInventorySupportedUnitGroup.setDescription('The collection of objects which are used to represent\n            multiple units in the stack.')
fastPathInventoryUnitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 6, 2, 2)).setObjects(("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitNumber"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitAssignNumber"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitType"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitMgmtAdmin"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitHWMgmtPref"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitAdminMgmtPref"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitStatus"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitDetectedCodeVer"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitDetectedCodeInFlashVer"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitUpTime"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitDescription"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitReplicateSTK"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitRowStatus"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitImage1Version"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitImage2Version"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitSTKname"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitActivateSTK"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitDeleteSTK"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryUnitSTKname"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fastPathInventoryUnitGroup = fastPathInventoryUnitGroup.setStatus('current')
if mibBuilder.loadTexts: fastPathInventoryUnitGroup.setDescription('The collection of objects which are used to represent\n            multiple units in the stack.')
fastPathInventorySlotGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 6, 2, 3)).setObjects(("EdgeSwitch-INVENTORY-MIB", "agentInventorySlotNumber"), ("EdgeSwitch-INVENTORY-MIB", "agentInventorySlotStatus"), ("EdgeSwitch-INVENTORY-MIB", "agentInventorySlotPowerMode"), ("EdgeSwitch-INVENTORY-MIB", "agentInventorySlotAdminMode"), ("EdgeSwitch-INVENTORY-MIB", "agentInventorySlotInsertedCardType"), ("EdgeSwitch-INVENTORY-MIB", "agentInventorySlotConfiguredCardType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fastPathInventorySlotGroup = fastPathInventorySlotGroup.setStatus('current')
if mibBuilder.loadTexts: fastPathInventorySlotGroup.setDescription('The collection of objects which are used to represent\n            slots in the each unit managed by this agent.')
fastPathInventoryCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 6, 2, 4)).setObjects(("EdgeSwitch-INVENTORY-MIB", "agentInventoryCardIndex"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryCardType"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryCardModelIdentifier"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryCardDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fastPathInventoryCardGroup = fastPathInventoryCardGroup.setStatus('current')
if mibBuilder.loadTexts: fastPathInventoryCardGroup.setDescription('The collection of objects which are used to represent\n            the card types this system can manage.')
fastPathInventoryNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4413, 1, 1, 13, 6, 2, 5)).setObjects(("EdgeSwitch-INVENTORY-MIB", "agentInventoryCardMismatch"), ("EdgeSwitch-INVENTORY-MIB", "agentInventoryCardUnsupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fastPathInventoryNotificationsGroup = fastPathInventoryNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: fastPathInventoryNotificationsGroup.setDescription('The collection of notifications used to indicate problems\n            associated with the insertion of cards.')
mibBuilder.exportSymbols("EdgeSwitch-INVENTORY-MIB", PYSNMP_MODULE_ID=fastPathInventory, AgentInventoryUnitType=AgentInventoryUnitType, agentInventoryStackGroup=agentInventoryStackGroup, agentInventoryCardMismatch=agentInventoryCardMismatch, agentInventoryUnitSupportedUnitIndex=agentInventoryUnitSupportedUnitIndex, fastPathInventoryUnitGroup=fastPathInventoryUnitGroup, AgentInventoryUnitPreference=AgentInventoryUnitPreference, agentInventoryStackPortDataRate=agentInventoryStackPortDataRate, agentInventoryUnitHWMgmtPref=agentInventoryUnitHWMgmtPref, agentInventoryUnitAdminMgmtPrefValue=agentInventoryUnitAdminMgmtPrefValue, agentInventoryUnitStandby=agentInventoryUnitStandby, agentInventorySlotGroup=agentInventorySlotGroup, agentInventoryComponentTable=agentInventoryComponentTable, agentInventorySupportedUnitEntry=agentInventorySupportedUnitEntry, agentInventoryStackPortTotalErrors=agentInventoryStackPortTotalErrors, fastPathInventoryNotificationsGroup=fastPathInventoryNotificationsGroup, fastPathInventory=fastPathInventory, agentInventoryUnitSerialNumber=agentInventoryUnitSerialNumber, agentInventoryStackPortRunningStackMode=agentInventoryStackPortRunningStackMode, agentInventoryUnitReplicateSTKStatus=agentInventoryUnitReplicateSTKStatus, agentInventorySlotAdminMode=agentInventorySlotAdminMode, agentInventoryUnitUpTime=agentInventoryUnitUpTime, agentInventoryStackDeleteSTK=agentInventoryStackDeleteSTK, agentInventoryStackActivateSTK=agentInventoryStackActivateSTK, agentInventoryUnitGroup=agentInventoryUnitGroup, agentInventoryUnitAssignNumber=agentInventoryUnitAssignNumber, agentInventorySlotInsertedCardType=agentInventorySlotInsertedCardType, agentInventorySlotEntry=agentInventorySlotEntry, agentInventoryCardType=agentInventoryCardType, agentInventoryStackReplicateSTK=agentInventoryStackReplicateSTK, agentInventoryStackTemplateId=agentInventoryStackTemplateId, agentInventoryUnitImage2Version=agentInventoryUnitImage2Version, agentInventoryUnitDescription=agentInventoryUnitDescription, agentInventoryCardIndex=agentInventoryCardIndex, agentInventorySlotStatus=agentInventorySlotStatus, agentInventoryUnitMgmtAdmin=agentInventoryUnitMgmtAdmin, agentInventoryCardTypeEntry=agentInventoryCardTypeEntry, agentInventorySlotCapabilities=agentInventorySlotCapabilities, agentInventoryStackPortLinkDown=agentInventoryStackPortLinkDown, agentInventoryComponentMnemonic=agentInventoryComponentMnemonic, agentInventoryStackMaxUnitNumber=agentInventoryStackMaxUnitNumber, agentInventoryStackReload=agentInventoryStackReload, agentInventoryStackPortEntry=agentInventoryStackPortEntry, agentInventorySlotTable=agentInventorySlotTable, agentInventoryStackPortConfiguredStackMode=agentInventoryStackPortConfiguredStackMode, fastPathInventorySupportedUnitGroup=fastPathInventorySupportedUnitGroup, agentInventoryStackUnitNumber=agentInventoryStackUnitNumber, agentInventoryStackPortUnit=agentInventoryStackPortUnit, agentInventoryCardModelIdentifier=agentInventoryCardModelIdentifier, agentInventorySFSStart=agentInventorySFSStart, agentInventoryUnitReplicateSTK=agentInventoryUnitReplicateSTK, agentInventoryUnitStatus=agentInventoryUnitStatus, agentInventoryCardDescription=agentInventoryCardDescription, agentInventorySlotNumber=agentInventorySlotNumber, agentInventoryUnitReload=agentInventoryUnitReload, agentInventorySupportedUnitDescription=agentInventorySupportedUnitDescription, agentInventorySFSTrap=agentInventorySFSTrap, agentInventorySFSComplete=agentInventorySFSComplete, agentInventoryStackPortLinkStatus=agentInventoryStackPortLinkStatus, agentInventoryUnitEntry=agentInventoryUnitEntry, agentInventoryComponentIndex=agentInventoryComponentIndex, AgentInventoryCardType=AgentInventoryCardType, agentInventorySFS=agentInventorySFS, agentInventoryUnitType=agentInventoryUnitType, agentInventoryStackPortTag=agentInventoryStackPortTag, agentInventorySupportedUnitExpectedCodeVer=agentInventorySupportedUnitExpectedCodeVer, fastPathInventoryCardGroup=fastPathInventoryCardGroup, agentInventoryUnitImage1Version=agentInventoryUnitImage1Version, agentInventoryUnitActivateSTK=agentInventoryUnitActivateSTK, fastPathInventoryConformance=fastPathInventoryConformance, agentInventorySlotConfiguredCardType=agentInventorySlotConfiguredCardType, agentInventoryUnitDeleteSTK=agentInventoryUnitDeleteSTK, agentInventoryCardUnsupported=agentInventoryCardUnsupported, agentInventorySupportedUnitIndex=agentInventorySupportedUnitIndex, agentInventoryStackPortTable=agentInventoryStackPortTable, fastPathInventoryCompliances=fastPathInventoryCompliances, agentInventoryUnitHWMgmtPrefValue=agentInventoryUnitHWMgmtPrefValue, agentInventoryCardTypeTable=agentInventoryCardTypeTable, agentInventorySupportedUnitTable=agentInventorySupportedUnitTable, agentInventoryStackSTKname=agentInventoryStackSTKname, agentInventoryStackReplicateSTKStatus=agentInventoryStackReplicateSTKStatus, agentInventoryComponentName=agentInventoryComponentName, agentInventoryUnitDetectedCodeInFlashVer=agentInventoryUnitDetectedCodeInFlashVer, agentInventoryStackPortErrorRate=agentInventoryStackPortErrorRate, agentInventoryUnitSTKname=agentInventoryUnitSTKname, agentInventorySFSFail=agentInventorySFSFail, fastPathInventoryGroups=fastPathInventoryGroups, agentInventoryUnitDetectedCodeVer=agentInventoryUnitDetectedCodeVer, agentInventorySupportedUnitModelIdentifier=agentInventorySupportedUnitModelIdentifier, agentInventoryComponentEntry=agentInventoryComponentEntry, agentInventoryUnitSFSTransferStatus=agentInventoryUnitSFSTransferStatus, fastPathInventoryCompliance=fastPathInventoryCompliance, agentInventoryStackPortGroup=agentInventoryStackPortGroup, fastPathInventoryCompliance2=fastPathInventoryCompliance2, agentInventoryUnitTable=agentInventoryUnitTable, agentInventoryStackPortIpTelephonyQOSSupport=agentInventoryStackPortIpTelephonyQOSSupport, agentInventoryStackPortLinkSpeed=agentInventoryStackPortLinkSpeed, agentInventorySFSAllowDowngrade=agentInventorySFSAllowDowngrade, agentInventoryStackPortLinkUp=agentInventoryStackPortLinkUp, agentInventorySlotPowerMode=agentInventorySlotPowerMode, agentInventoryComponentGroup=agentInventoryComponentGroup, agentInventoryUnitSFSLastAttemptStatus=agentInventoryUnitSFSLastAttemptStatus, agentInventoryUnitAdminMgmtPref=agentInventoryUnitAdminMgmtPref, fastPathInventorySlotGroup=fastPathInventorySlotGroup, agentInventoryUnitNumber=agentInventoryUnitNumber, agentInventoryStackPortIndex=agentInventoryStackPortIndex, agentInventoryTraps=agentInventoryTraps, agentInventoryCardGroup=agentInventoryCardGroup, agentInventorySFSGroup=agentInventorySFSGroup, agentInventoryUnitRowStatus=agentInventoryUnitRowStatus)
