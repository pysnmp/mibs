#
# PySNMP MIB module AVIAT-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/aviat-wtm/AVIAT-MODEM-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 09:27:24 2024
# On host fv-az1146-179 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
AviatModulationType, = mibBuilder.importSymbols("AVIAT-TEXTCONVENTION-MIB", "AviatModulationType")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, ModuleIdentity, IpAddress, NotificationType, iso, Gauge32, Bits, MibIdentifier, ObjectIdentity, TimeTicks, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "ModuleIdentity", "IpAddress", "NotificationType", "iso", "Gauge32", "Bits", "MibIdentifier", "ObjectIdentity", "TimeTicks", "Integer32", "Counter64")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
aviatModules, = mibBuilder.importSymbols("STXN-GLOBALREGISTER-MIB", "aviatModules")
aviatModemModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2509, 9, 3))
aviatModemModule.setRevisions(('2018-09-20 11:30', '2017-03-28 01:19', '2015-04-28 15:30', '2014-09-19 15:05', '2014-02-03 22:20', '2014-01-21 01:57',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: aviatModemModule.setRevisionsDescriptions(('Added aviatModemStatusOper', 'Added aviatModemModulationStatsTable, aviatModemCurCapacityTx/Rx\n                 and aviatModemCurModulationTx/Rx.\n                 Fixed descriptions of module and previous revision.', 'Add MLHC support', 'L1LA-Lite support added.', 'Added aviatModemStatusMaxCapacity to show the maximum possible\n                 capacity of the radio link.', 'Initial Version.',))
if mibBuilder.loadTexts: aviatModemModule.setLastUpdated('201703280119Z')
if mibBuilder.loadTexts: aviatModemModule.setOrganization('Aviat Networks')
if mibBuilder.loadTexts: aviatModemModule.setContactInfo('Aviat Networks\n                         Customer Service\n\n                         Postal: 5200 Great America Parkway\n                                 Santa Clara\n                                 California 95054\n                                 United States of America\n\n                         Tel: 408 567 7000\n\n                         E-mail: mibsupport@aviatnet.com')
if mibBuilder.loadTexts: aviatModemModule.setDescription('This MIB module defines the Modem configuration objects for\n                 Aviat Networks radios.')
aviatModemConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2509, 9, 3, 1))
aviatModemGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2509, 9, 3, 1, 1))
aviatModemCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2509, 9, 3, 1, 2))
aviatModemMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2))
class AviatModemCapacityType(TextualConvention, Gauge32):
    description = "Represents the capacity of a modem in one direction.\n             This value is reported in kilobits per second, rounded to the\n             nearest multiple of 1 kbps. Therefore, if the value of this object\n             is equal to `n' then the capacity is somewhere in the range of\n             `n*1000 - 500` to `n*1000 + 499` bits per second.\n             If the capacity is greater than 4,294,967,295,499 bits per second\n             then the value of this object shall be 4,294,967,295."
    status = 'current'
    displayHint = 'd'

aviatModemTable = MibTable((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1), )
if mibBuilder.loadTexts: aviatModemTable.setStatus('current')
if mibBuilder.loadTexts: aviatModemTable.setDescription('A table containing the modem configuration objects for\n                         a particular entity of the system.')
aviatModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: aviatModemEntry.setStatus('current')
if mibBuilder.loadTexts: aviatModemEntry.setDescription('This is a row in the modem table.')
aviatModemBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1, 1, 1), Gauge32()).setUnits('kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatModemBandwidth.setStatus('current')
if mibBuilder.loadTexts: aviatModemBandwidth.setDescription('The modem channel bandwidth currently in use, in\n                         kilohertz.')
aviatModemModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fixed", 0), ("acm256", 1), ("acm1024", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatModemModulationType.setStatus('current')
if mibBuilder.loadTexts: aviatModemModulationType.setDescription('This allocates an ACM license for this radio link\n                         allowing modulation up to and including this\n                         modulation.')
aviatModemModulationBase = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1, 1, 3), AviatModulationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatModemModulationBase.setStatus('current')
if mibBuilder.loadTexts: aviatModemModulationBase.setDescription('This specifies the base modulation to use for modem.\n                         Together with aviatModemModulationMax this is used to\n                         define the range of modulations that can be active for\n                         ACM. The modem will configure the ACM operation to\n                         include the minimum and maximum modulations and an\n                         appropriate set of intermediate modulations between\n                         the minimum and maximum.\n\n                         Some combinations of min and max modulations may not\n                         be supported in which case an INCONSISTENT_VALUE error\n                         will be reported.')
aviatModemModulationMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1, 1, 4), AviatModulationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatModemModulationMax.setStatus('current')
if mibBuilder.loadTexts: aviatModemModulationMax.setDescription('This specifies the maximum modulation to use for ACM.\n                         See the aviatModemModulationBase description for\n                         details.\n\n                         Setting Max without setting Acm mode to the\n                         appropriate ACM mode will cause this command to fail\n                         (i.e. 1024qam requires acm1024).')
aviatModemLicensedModulationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1, 1, 5), AviatModulationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatModemLicensedModulationMask.setStatus('current')
if mibBuilder.loadTexts: aviatModemLicensedModulationMask.setDescription("When configured for adaptive modulation, this\n                         specifies the licensed RF mask. Tx power output will\n                         be controlled to maintain compliance with the\n                         operator's licensed RF mask according to the active\n                         modulation.")
aviatModemRegulatoryStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ansi", 2), ("etsi", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatModemRegulatoryStandard.setStatus('current')
if mibBuilder.loadTexts: aviatModemRegulatoryStandard.setDescription('This specifies the regulatory standard to use.')
aviatModemProfileVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1, 1, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatModemProfileVersion.setStatus('current')
if mibBuilder.loadTexts: aviatModemProfileVersion.setDescription('This sets the profile version to use. If a new profile\n                         comes out with the same characteristics to a previous\n                         one but not over air compatible, the new one will have\n                         a different version.')
aviatModemCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatModemCapacity.setStatus('current')
if mibBuilder.loadTexts: aviatModemCapacity.setDescription('This specifies the capacity to license for this\n                         interface. Set to 0 to unlicense.')
aviatModemL1laLiteEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatModemL1laLiteEnabled.setStatus('current')
if mibBuilder.loadTexts: aviatModemL1laLiteEnabled.setDescription("Enabled L1laLite for this interface and it's partner")
aviatModemMLHCEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatModemMLHCEnabled.setStatus('current')
if mibBuilder.loadTexts: aviatModemMLHCEnabled.setDescription('Enable multilayer header compression for this radio interface.')
aviatModemCurCapacityTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1, 1, 11), AviatModemCapacityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviatModemCurCapacityTx.setStatus('current')
if mibBuilder.loadTexts: aviatModemCurCapacityTx.setDescription('Current capacity in the transmit direction.')
aviatModemCurCapacityRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1, 1, 12), AviatModemCapacityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviatModemCurCapacityRx.setStatus('current')
if mibBuilder.loadTexts: aviatModemCurCapacityRx.setDescription('Current capacity in the receive direction.')
aviatModemCurModulationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1, 1, 13), AviatModulationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviatModemCurModulationTx.setStatus('current')
if mibBuilder.loadTexts: aviatModemCurModulationTx.setDescription('Current modulation used to transmit.')
aviatModemCurModulationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 1, 1, 14), AviatModulationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviatModemCurModulationRx.setStatus('current')
if mibBuilder.loadTexts: aviatModemCurModulationRx.setDescription('Current modulation used to receive.')
aviatModemModulationTable = MibTable((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 2), )
if mibBuilder.loadTexts: aviatModemModulationTable.setStatus('current')
if mibBuilder.loadTexts: aviatModemModulationTable.setDescription('This is a table containing the list of modem\n                         modulations configured for use with adaptive\n                         modulation. This list is based on the settings of\n                         aviatModemModulationBase and aviatModemModulationMax,\n                         and a set of automatically selected intermediate\n                         modulations.\n\n                         If configured for static modulation, this list will\n                         contain only one entry, the configured static\n                         modulation.')
aviatModemModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "AVIAT-MODEM-MIB", "aviatModemModulationIndex"))
if mibBuilder.loadTexts: aviatModemModulationEntry.setStatus('current')
if mibBuilder.loadTexts: aviatModemModulationEntry.setDescription('A single modulation entry for an entity.')
aviatModemModulationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 2, 1, 1), Gauge32())
if mibBuilder.loadTexts: aviatModemModulationIndex.setStatus('current')
if mibBuilder.loadTexts: aviatModemModulationIndex.setDescription('An index representing a particular modulation entry\n                         for an entity.')
aviatModemModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 2, 1, 2), AviatModulationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviatModemModulation.setStatus('current')
if mibBuilder.loadTexts: aviatModemModulation.setDescription('A configured modem modulation of the system.')
aviatModemXpicTable = MibTable((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 3), )
if mibBuilder.loadTexts: aviatModemXpicTable.setStatus('current')
if mibBuilder.loadTexts: aviatModemXpicTable.setDescription('A table containing configuration objects for the cross\n                         polarisation interference cancellation (XPIC)\n                         functionality for a particular entity of the system.')
aviatModemXpicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: aviatModemXpicEntry.setStatus('current')
if mibBuilder.loadTexts: aviatModemXpicEntry.setDescription('This is a row in the modem XPIC table.')
aviatModemXpicEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aviatModemXpicEnable.setStatus('current')
if mibBuilder.loadTexts: aviatModemXpicEnable.setDescription('This specifies whether the cross polarisation\n                         interference cancellation (XPIC) function is enabled.')
aviatModemStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 4), )
if mibBuilder.loadTexts: aviatModemStatusTable.setStatus('current')
if mibBuilder.loadTexts: aviatModemStatusTable.setDescription('A table containing read only information about the\n                         modem.')
aviatModemStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: aviatModemStatusEntry.setStatus('current')
if mibBuilder.loadTexts: aviatModemStatusEntry.setDescription('This is a row in the modem status table.')
aviatModemStatusMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviatModemStatusMaxCapacity.setStatus('current')
if mibBuilder.loadTexts: aviatModemStatusMaxCapacity.setDescription('This is the maximum radio link capacity.')
aviatModemStatusOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviatModemStatusOper.setStatus('current')
if mibBuilder.loadTexts: aviatModemStatusOper.setDescription('Operational status of radio link.\n                        Based off ifOperStatus')
aviatModemModulationStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 5), )
if mibBuilder.loadTexts: aviatModemModulationStatsTable.setStatus('current')
if mibBuilder.loadTexts: aviatModemModulationStatsTable.setDescription('This is a table containing information about the\n                         amount of time the radio spends at each modulation\n                         level. Counters are cumulative. No means to reset\n                         counters is provided within this MIB module.\n\n                         If the radio has never used a particular modulation\n                         since statistics were reset, then a row for that\n                         modulation may or may not be present in this table.')
aviatModemModulationStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "AVIAT-MODEM-MIB", "aviatModemModStatsModulation"))
if mibBuilder.loadTexts: aviatModemModulationStatsEntry.setStatus('current')
if mibBuilder.loadTexts: aviatModemModulationStatsEntry.setDescription('This is an entry in the table containing modulation\n                         time counters for a particular entity at a particular\n                         modulation level.')
aviatModemModStatsModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 5, 1, 1), AviatModulationType())
if mibBuilder.loadTexts: aviatModemModStatsModulation.setStatus('current')
if mibBuilder.loadTexts: aviatModemModStatsModulation.setDescription('This is the modulation type to which the data in this\n                         is row refers.')
aviatModemModStatsTxSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviatModemModStatsTxSecs.setStatus('current')
if mibBuilder.loadTexts: aviatModemModStatsTxSecs.setDescription('This is the number of seconds in which the radio was\n                         using the specified modulation to transmit.')
aviatModemModStatsTxPct = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviatModemModStatsTxPct.setStatus('current')
if mibBuilder.loadTexts: aviatModemModStatsTxPct.setDescription('This is the fraction of the total time in which the\n                         radio was receiving, where the radio was receiving in\n                         the specified modulation, multiplied by 1000000\n                         (10^7) and rounded in an unspecified manner.')
aviatModemModStatsRxSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviatModemModStatsRxSecs.setStatus('current')
if mibBuilder.loadTexts: aviatModemModStatsRxSecs.setDescription('This is the number of seconds in which the radio was\n                         using the specified modulation to receive.')
aviatModemModStatsRxPct = MibTableColumn((1, 3, 6, 1, 4, 1, 2509, 9, 3, 2, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aviatModemModStatsRxPct.setStatus('current')
if mibBuilder.loadTexts: aviatModemModStatsRxPct.setDescription('This is the fraction of the total time in which the\n                         radio was transmitting, where the radio was\n                         transmitting at the specified modulation, multiplied\n                         by 1000000 (10^7) and rounded in an unspecified\n                         manner.')
aviatModemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2509, 9, 3, 1, 1, 1)).setObjects(("AVIAT-MODEM-MIB", "aviatModemBandwidth"), ("AVIAT-MODEM-MIB", "aviatModemModulationType"), ("AVIAT-MODEM-MIB", "aviatModemModulationBase"), ("AVIAT-MODEM-MIB", "aviatModemModulationMax"), ("AVIAT-MODEM-MIB", "aviatModemLicensedModulationMask"), ("AVIAT-MODEM-MIB", "aviatModemRegulatoryStandard"), ("AVIAT-MODEM-MIB", "aviatModemProfileVersion"), ("AVIAT-MODEM-MIB", "aviatModemCapacity"), ("AVIAT-MODEM-MIB", "aviatModemL1laLiteEnabled"), ("AVIAT-MODEM-MIB", "aviatModemModulation"), ("AVIAT-MODEM-MIB", "aviatModemStatusMaxCapacity"), ("AVIAT-MODEM-MIB", "aviatModemMLHCEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aviatModemObjectGroup = aviatModemObjectGroup.setStatus('current')
if mibBuilder.loadTexts: aviatModemObjectGroup.setDescription('These are objects in the Aviat Modem management MIB.')
aviatModemXpicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2509, 9, 3, 1, 1, 2)).setObjects(("AVIAT-MODEM-MIB", "aviatModemXpicEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aviatModemXpicGroup = aviatModemXpicGroup.setStatus('current')
if mibBuilder.loadTexts: aviatModemXpicGroup.setDescription('These are objects for configuring the cross polar\n                         interference cancellation (XPIC) functionality.')
aviatModemModulationStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2509, 9, 3, 1, 1, 3)).setObjects(("AVIAT-MODEM-MIB", "aviatModemModStatsTxSecs"), ("AVIAT-MODEM-MIB", "aviatModemModStatsTxPct"), ("AVIAT-MODEM-MIB", "aviatModemModStatsRxSecs"), ("AVIAT-MODEM-MIB", "aviatModemModStatsRxPct"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aviatModemModulationStatsGroup = aviatModemModulationStatsGroup.setStatus('current')
if mibBuilder.loadTexts: aviatModemModulationStatsGroup.setDescription('These are the objects in the modulation stats table\n                         introduced for WTM4000. They are not supported on\n                         all modems.')
aviatModemModulationCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2509, 9, 3, 1, 1, 4)).setObjects(("AVIAT-MODEM-MIB", "aviatModemCurCapacityTx"), ("AVIAT-MODEM-MIB", "aviatModemCurCapacityRx"), ("AVIAT-MODEM-MIB", "aviatModemCurModulationTx"), ("AVIAT-MODEM-MIB", "aviatModemCurModulationRx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aviatModemModulationCurrentGroup = aviatModemModulationCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: aviatModemModulationCurrentGroup.setDescription("These are the new 'current modulation' objects\n                         introduced for WTM4000. They are not supported on\n                         all modems.")
aviatModemStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2509, 9, 3, 1, 1, 5)).setObjects(("AVIAT-MODEM-MIB", "aviatModemStatusOper"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aviatModemStatusGroup = aviatModemStatusGroup.setStatus('current')
if mibBuilder.loadTexts: aviatModemStatusGroup.setDescription("These are the new 'status' objects\n                         introduced for WTM4000. They are not supported on\n                         all modems.")
aviatModemComplV1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2509, 9, 3, 1, 2, 1)).setObjects(("AVIAT-MODEM-MIB", "aviatModemObjectGroup"), ("AVIAT-MODEM-MIB", "aviatModemXpicGroup"), ("AVIAT-MODEM-MIB", "aviatModemModulationStatsGroup"), ("AVIAT-MODEM-MIB", "aviatModemModulationCurrentGroup"), ("AVIAT-MODEM-MIB", "aviatModemStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aviatModemComplV1 = aviatModemComplV1.setStatus('current')
if mibBuilder.loadTexts: aviatModemComplV1.setDescription('The implementation requirements for this MIB.')
mibBuilder.exportSymbols("AVIAT-MODEM-MIB", aviatModemModule=aviatModemModule, aviatModemModulationStatsGroup=aviatModemModulationStatsGroup, aviatModemCompliance=aviatModemCompliance, AviatModemCapacityType=AviatModemCapacityType, aviatModemModStatsTxSecs=aviatModemModStatsTxSecs, aviatModemXpicEnable=aviatModemXpicEnable, aviatModemGroups=aviatModemGroups, aviatModemRegulatoryStandard=aviatModemRegulatoryStandard, aviatModemXpicEntry=aviatModemXpicEntry, aviatModemXpicTable=aviatModemXpicTable, aviatModemModulationBase=aviatModemModulationBase, aviatModemConformance=aviatModemConformance, aviatModemModulationStatsTable=aviatModemModulationStatsTable, aviatModemModStatsTxPct=aviatModemModStatsTxPct, aviatModemCurCapacityRx=aviatModemCurCapacityRx, aviatModemLicensedModulationMask=aviatModemLicensedModulationMask, aviatModemCapacity=aviatModemCapacity, aviatModemModulationCurrentGroup=aviatModemModulationCurrentGroup, aviatModemProfileVersion=aviatModemProfileVersion, aviatModemEntry=aviatModemEntry, PYSNMP_MODULE_ID=aviatModemModule, aviatModemModStatsRxPct=aviatModemModStatsRxPct, aviatModemStatusEntry=aviatModemStatusEntry, aviatModemModulationTable=aviatModemModulationTable, aviatModemCurCapacityTx=aviatModemCurCapacityTx, aviatModemModulation=aviatModemModulation, aviatModemModulationStatsEntry=aviatModemModulationStatsEntry, aviatModemTable=aviatModemTable, aviatModemCurModulationTx=aviatModemCurModulationTx, aviatModemObjectGroup=aviatModemObjectGroup, aviatModemModStatsModulation=aviatModemModStatsModulation, aviatModemStatusOper=aviatModemStatusOper, aviatModemBandwidth=aviatModemBandwidth, aviatModemMIBObjects=aviatModemMIBObjects, aviatModemL1laLiteEnabled=aviatModemL1laLiteEnabled, aviatModemModulationEntry=aviatModemModulationEntry, aviatModemStatusTable=aviatModemStatusTable, aviatModemCurModulationRx=aviatModemCurModulationRx, aviatModemComplV1=aviatModemComplV1, aviatModemModulationMax=aviatModemModulationMax, aviatModemXpicGroup=aviatModemXpicGroup, aviatModemModulationType=aviatModemModulationType, aviatModemMLHCEnabled=aviatModemMLHCEnabled, aviatModemStatusMaxCapacity=aviatModemStatusMaxCapacity, aviatModemModStatsRxSecs=aviatModemModStatsRxSecs, aviatModemModulationIndex=aviatModemModulationIndex, aviatModemStatusGroup=aviatModemStatusGroup)
