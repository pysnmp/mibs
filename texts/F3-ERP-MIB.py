#
# PySNMP MIB module F3-ERP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-ERP-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 09:33:40 2024
# On host fv-az1766-730 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
SecondaryState, OperationalState, VlanPriority, VlanEthertype, AdminState, VlanId = mibBuilder.importSymbols("CM-COMMON-MIB", "SecondaryState", "OperationalState", "VlanPriority", "VlanEthertype", "AdminState", "VlanId")
neIndex, = mibBuilder.importSymbols("CM-ENTITY-MIB", "neIndex")
CmProtUnitType, CmProtUnitState = mibBuilder.importSymbols("CM-PROTECTION-MIB", "CmProtUnitType", "CmProtUnitState")
Dot1agCfmMDLevel, = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "Dot1agCfmMDLevel")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Gauge32, iso, MibIdentifier, Integer32, Unsigned32, Counter32, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Gauge32", "iso", "MibIdentifier", "Integer32", "Unsigned32", "Counter32", "ModuleIdentity", "TimeTicks")
TextualConvention, RowStatus, VariablePointer, StorageType, TruthValue, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "VariablePointer", "StorageType", "TruthValue", "DisplayString", "MacAddress")
f3ErpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25))
f3ErpMIB.setRevisions(('2012-09-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3ErpMIB.setRevisionsDescriptions(('\n         Notes from release 201209130000Z,\n         (1)MIB version ready for release FSP150CC 5.6CC.',))
if mibBuilder.loadTexts: f3ErpMIB.setLastUpdated('201209130000Z')
if mibBuilder.loadTexts: f3ErpMIB.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: f3ErpMIB.setContactInfo('        Jakub Zalewski\n                     ADVA Optical Networking, Inc.\n                Tel: +48 58 7716 411\n             E-mail: jzalewski@advaoptical.com\n             Postal: ul. Slaska 35/37\n                     81-310 Gdynia, Poland')
if mibBuilder.loadTexts: f3ErpMIB.setDescription('This module defines the G.8032 Ethernet Ring Protection MIB definitions \n             used by the F3 (FSP150CM/CC) product lines.  \n             Copyright (C) ADVA Optical Networking.')
class G8032Version(TextualConvention, Integer32):
    description = 'Version of G.8032 ERP protocol'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("v1", 1), ("v2", 2))

class RPLRole(TextualConvention, Integer32):
    description = 'Ring Protocol Link role'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("neighbor", 2), ("owner", 3))

class RingPortStatus(TextualConvention, Integer32):
    description = 'Status of Ring Port'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("unblocked", 1), ("unblockedSF", 2), ("unblockedSD", 3), ("blockedRPL", 4), ("blockedSF", 5), ("blockedSD", 6), ("blockedMS", 7), ("blockedFS", 8), ("blockedPending", 9), ("subringInterConnect", 10), ("subringInterConnectSF", 11))

class RingNodeState(TextualConvention, Integer32):
    description = 'State of Ring Port'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("idle", 1), ("protection", 2), ("manual", 3), ("forced", 4), ("pending", 5))

class RAPSRequest(TextualConvention, Integer32):
    description = 'Ring Automatic Protection Switch Request'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("noRequest", 1), ("manual", 2), ("forced", 3), ("signailFail", 4), ("signailDegrade", 5), ("notApplicable", 6))

class ERPGroupAction(TextualConvention, Integer32):
    description = 'User action initiated on ERP group'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("noAction", 1), ("forcedSwitch", 2), ("manualSwitch", 3), ("clearSwitch", 4), ("resetStats", 5))

class RapsInterconnectionNode(TextualConvention, Integer32):
    description = 'Role of the sub-ring interconnection node'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("primary", 2), ("secondary", 3))

class RapsMultipleFailure(TextualConvention, Integer32):
    description = 'Indicates the interconnection node that has to perform the\n         Manual Switch for minimizing interconnected ring segmentation'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("primary", 2), ("secondary", 3))

f3ErpConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1))
f3ErpStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2))
f3ErpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 3))
f3ErpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1), )
if mibBuilder.loadTexts: f3ErpGroupTable.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupTable.setDescription('A list of entries corresponding to Ethernet Ring Protection \n             instance for configuration purposes.')
f3ErpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-ERP-MIB", "f3ErpGroupIndex"))
if mibBuilder.loadTexts: f3ErpGroupEntry.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupEntry.setDescription('A conceptual row in the f3ErpGroupTable.')
f3ErpGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: f3ErpGroupIndex.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupIndex.setDescription('An integer index value used to uniquely identify\n             this ERP Group within Network Element.')
f3ErpGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 2), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupAdminState.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupAdminState.setDescription('Administrative State of this ERP instance. \n          INSERVICE is normal operation. \n          MANAGEMENT suppresses alarms. \n          DISABLED initiates blocking on ring port 0 and stops all RAPS processing \n          and forwarding.\n          The ERP instance must be in the MANAGEMENT or DISABLED state when modifying \n          the following ERP instance attributes: rapsVID, ringPort0, ringPort1, \n          ringPort0RPLRole, ringPort1RPLRole,  rapsRingId, rapsMdLevel, \n          subRingWithoutVirtualChannel, compatibleVersion.')
f3ErpGroupOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpGroupOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupOperationalState.setDescription('Operational State of this ERP instance.  The ERP operational state is \n          outage when there is an equipment failure causing the ERP to be non-functional;\n          otherwise the operational state is normal.')
f3ErpGroupSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpGroupSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupSecondaryState.setDescription('Secondary State of this ERP instance. The ERP secondary state is \n          supporting entity outage (SGEO) when there is an equipment failure \n          causing the ERP to be non-functional; otherwise the sescondary state is active.')
f3ErpGroupRapsRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRapsRingId.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRapsRingId.setDescription('Ring ID of this ERP instance. The value is used in the destination \n         address of the RAPS PDU.')
f3ErpGroupRapsNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRapsNodeId.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRapsNodeId.setDescription('Node ID of the local system for this ERP instance. \n         The value is used as the Node ID in the RAPS PDU.')
f3ErpGroupRapsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 7), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRapsVlanId.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRapsVlanId.setDescription('VID value of the VLAN tag for transmitted/received RAPS PDUs for this \n          ERP instance.')
f3ErpGroupRapsVlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 8), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRapsVlanPrio.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRapsVlanPrio.setDescription('P-bit value of the VLAN tag for transmitted RAPS PDUs for this ERP instance.')
f3ErpGroupRapsVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRapsVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRapsVlanEtherType.setDescription('VID value of the VLAN tag for transmitted/received RAPS PDUs for this \n          ERP instance.')
f3ErpGroupRapsMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 10), Dot1agCfmMDLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRapsMdLevel.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRapsMdLevel.setDescription('MD (or MEG) level of the transmitted/received RAPS PDUs for this ERP instance.')
f3ErpGroupCompatibleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 11), G8032Version()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ErpGroupCompatibleVersion.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupCompatibleVersion.setDescription('Indicates compatability with a version of G.8032 for this ring instance.')
f3ErpGroupRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRevertive.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRevertive.setDescription('Revertive control for the ring. Only applicable on the RPL Owner node.')
f3ErpGroupSubRingWithoutVirtChan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupSubRingWithoutVirtChan.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupSubRingWithoutVirtChan.setDescription('Indicates whether R-APS channel forms a closed loop around the ring\n          ENABLED: no RAPS Virtual Channel (i.e., open ring)\n          DISABLED: RAPS forms a closed loop (major ring or sub-ring with virtual \n                    channel)')
f3ErpGroupGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupGuardTime.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupGuardTime.setDescription('The Guard Time value in milliseconds for this ERP instance.')
f3ErpGroupWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupWaitToRestore.setDescription('The Wait-to-Restore time value in minutes for this ERP instance.')
f3ErpGroupHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupHoldOffTime.setDescription('The Hold-off Time value in milliseconds for this ERP instance.')
f3ErpGroupRingPort0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 17), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRingPort0.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRingPort0.setDescription('Pointer to a Port instance which represents Ring Port 0 in the ERP Group.\n          The pointer must be set to cmEthernetAccPortIndex instance if the Ring \n          Port is an Access Port or to cmEthernetNetPortIndex if the Ring Port \n          is a Network Port.')
f3ErpGroupRingPort0MEP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 18), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRingPort0MEP.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRingPort0MEP.setDescription('Pointer to a CFM MEP instance monitoring Ring Port 0 for this ERP instance.\n          The pointer must be set to dot1agCfmMepIfIndex instance.')
f3ErpGroupRingPort0Role = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 19), RPLRole()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRingPort0Role.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRingPort0Role.setDescription('RPL Role of Ring Port 0. When f3ErpGroupRingPort1Role is NEIGHBOR or OWNER, \n          this value MUST be NONE.')
f3ErpGroupRingPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 20), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRingPort1.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRingPort1.setDescription('Pointer to a Port instance which represents Ring Port 1 in the ERP Group.\n          The pointer must be set to cmEthernetAccPortIndex instance if the Ring \n          Port is an Access Port or to cmEthernetNetPortIndex if the Ring Port \n          is a Network Port.')
f3ErpGroupRingPort1MEP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 21), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRingPort1MEP.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRingPort1MEP.setDescription('Pointer to a CFM MEP instance monitoring Ring Port 1 for this ERP instance.\n          The pointer must be set to dot1agCfmMepIfIndex instance.')
f3ErpGroupRingPort1Role = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 22), RPLRole()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRingPort1Role.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRingPort1Role.setDescription('RPL Role of Ring Port 1. When f3ErpGroupRingPort0Role is NEIGHBOR or OWNER, \n          this value MUST be NONE.')
f3ErpGroupProtectMgmtTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupProtectMgmtTunnel.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupProtectMgmtTunnel.setDescription('Indication of whether this ERP instance is protecting management Tunnels \n          on the ring ports.')
f3ErpGroupNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 24), RingNodeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpGroupNodeState.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupNodeState.setDescription('ERP Node state.')
f3ErpGroupWTRRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpGroupWTRRemainingTime.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupWTRRemainingTime.setDescription('The time remaining (in seconds) for this ERP instance to wait to restore.')
f3ErpGroupTxRapsRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 26), RAPSRequest()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpGroupTxRapsRequest.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupTxRapsRequest.setDescription('Request/State field fo the last generated R-APS message on the Ring Ports. \n          Valid when the node is blocking.')
f3ErpGroupTxRapsRplBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpGroupTxRapsRplBlocked.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupTxRapsRplBlocked.setDescription('RPL Blocked field fo the last generated R-APS message on the Ring Ports. \n          Valid when the node is blocking.')
f3ErpGroupTxRapsDNF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpGroupTxRapsDNF.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupTxRapsDNF.setDescription('Do Not Flush field fo the last generated R-APS message on the Ring Ports. \n          Valid when the node is blocking.')
f3ErpGroupTxRapsBPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpGroupTxRapsBPR.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupTxRapsBPR.setDescription('Blocked Port Reference field fo the last generated R-APS message on the \n          Ring Ports. Valid when the node is blocking.')
f3ErpGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 30), ERPGroupAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ErpGroupAction.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupAction.setDescription('User action performed on this ERP instance.\n          For manualSwitch and forcedSwitch actions f3ErpGroupActionObject has to\n          be specified prior to settng this object.')
f3ErpGroupActionObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 31), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ErpGroupActionObject.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupActionObject.setDescription('Object identfier used to specify the OID of a port on which \n          f3ErpGroupAction should occur. Applicable for manualSwitch and forcedSwitch\n          actions.\n          The pointer must be set to cmEthernetAccPortIndex instance if the Ring \n          Port is an Access Port or to cmEthernetNetPortIndex if the Ring Port \n          a Network Port.')
f3ErpGroupUserLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupUserLabel.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupUserLabel.setDescription('User Label associated with the ERP Group.')
f3ErpGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 33), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupStorageType.setDescription('The type of storage configured for this entry.')
f3ErpGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 34), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3ErpGroupRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            neRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3ErpGroupRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3ErpGroupInterconnectionErp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 35), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ErpGroupInterconnectionErp.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupInterconnectionErp.setDescription('Oid of the associated Loop Avoidance instance at an interconnect \n            node. Current only ERP instances are supported for this; \n            in the future, STP instances may be as well.')
f3ErpGroupInterconnectPropagateTc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 36), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ErpGroupInterconnectPropagateTc.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupInterconnectPropagateTc.setDescription('Allows for propgation of Topology Change information in the \n            protocol of the associated Loop Avoidance instance at an \n            interconnect node. Derived from  MI_RAPS_Propagate_TC in [G8032]')
f3ErpGroupRapsVirtualChannelMep = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 37), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ErpGroupRapsVirtualChannelMep.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRapsVirtualChannelMep.setDescription('ID of MEP monitoring an UP MEP Monitoring the R-APS VID.')
f3ErpGroupMaxFpNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3ErpGroupMaxFpNum.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupMaxFpNum.setDescription('The max number of flow point which the erp supports.\n             This object is not supported - setting its value will \n             not have any effect on the System.')
f3ErpGroupRapsInterconnectionNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 39), RapsInterconnectionNode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRapsInterconnectionNode.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRapsInterconnectionNode.setDescription('Type of sub-ring interconnection node. PRIMARY/SECONDARY role\n          for minimizing interconnected ring segmentation.')
f3ErpGroupRapsMultipleFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 1, 1, 40), RapsMultipleFailure()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3ErpGroupRapsMultipleFailure.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupRapsMultipleFailure.setDescription('Sub-ring interconnection node that is designated to perform the Manual\n          Switch for minimizing interconnected ring segmentation.')
f3ErpGroupProtectedFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 2), )
if mibBuilder.loadTexts: f3ErpGroupProtectedFlowTable.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupProtectedFlowTable.setDescription('A list of entries corresponding to Flows which are protected by \n             an ERP group instance. These flows can be access flows or multipoint\n             flows depending on the traffic model of the ERP Ring Port.')
f3ErpGroupProtectedFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-ERP-MIB", "f3ErpGroupIndex"), (0, "F3-ERP-MIB", "f3ErpGroupProtectedFlow"))
if mibBuilder.loadTexts: f3ErpGroupProtectedFlowEntry.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupProtectedFlowEntry.setDescription('A conceptual row in the f3ErpGroupProtectedFlowsTable.')
f3ErpGroupProtectedFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 2, 1, 1), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpGroupProtectedFlow.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupProtectedFlow.setDescription('Pointer to a Flow instance which is protected by an ERP instance.\n          The pointer must be set to cmFlowIndex or cmMPFlowIndex instance.')
f3ErpUnitTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 3), )
if mibBuilder.loadTexts: f3ErpUnitTable.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitTable.setDescription('A list of entries corresponding to Ethernet Ring Protection Unit')
f3ErpUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-ERP-MIB", "f3ErpGroupIndex"), (0, "F3-ERP-MIB", "f3ErpUnitIndex"))
if mibBuilder.loadTexts: f3ErpUnitEntry.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitEntry.setDescription('A conceptual row in the f3ErpUnitTable.')
f3ErpUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: f3ErpUnitIndex.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitIndex.setDescription('An integer index value used to uniquely identify\n             this ERP Unit within ERP Group.')
f3ErpUnitPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 3, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitPort.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitPort.setDescription("ERP Unit's points to a facility (port). \n          This object represents the facility Network Element port.")
f3ErpUnitPortMEP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 3, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitPortMEP.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitPortMEP.setDescription('Pointer to a CFM MEP instance monitoring Ring Port.')
f3ErpUnitPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 3, 1, 4), RPLRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitPortRole.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitPortRole.setDescription('RPL Role of Ring Port 1. When f3ErpGroupRingPort2Role is NEIGHBOR or OWNER, \n          this value MUST be NONE.')
f3ErpUnitPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 3, 1, 5), RingPortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitPortStatus.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitPortStatus.setDescription('Status of Ring Port.')
f3ErpUnitPortRxRapsRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 3, 1, 6), RAPSRequest()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitPortRxRapsRequest.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitPortRxRapsRequest.setDescription('Request/State field fo the last received R-APS message on Ring Port.')
f3ErpUnitPortRxRapsRplBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 3, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitPortRxRapsRplBlocked.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitPortRxRapsRplBlocked.setDescription('RPL Blocked  field fo the last received R-APS message on Ring Port.')
f3ErpUnitPortRxRapsDNF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitPortRxRapsDNF.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitPortRxRapsDNF.setDescription('Do Not Flush field fo the last received R-APS message on Ring Port.')
f3ErpUnitPortRxRapsBPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitPortRxRapsBPR.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitPortRxRapsBPR.setDescription('Blocked Port Reference field fo the last received R-APS message on Ring Port.')
f3ErpUnitPortRxRapsNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 3, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitPortRxRapsNodeId.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitPortRxRapsNodeId.setDescription('Node ID of the local system for this ERP instance. \n         The value is used as the Node ID in the RAPS PDU.')
f3ErpUnitPortRapsFp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 1, 3, 1, 11), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitPortRapsFp.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitPortRapsFp.setDescription('Pointer to a R-APS FlowPoint associated with this Ring Port.')
f3ErpUnitStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1), )
if mibBuilder.loadTexts: f3ErpUnitStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitStatsTable.setDescription('A list of entries corresponding to Ethernet Ring Protection Unit Statistics')
f3ErpUnitStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-ERP-MIB", "f3ErpGroupIndex"), (0, "F3-ERP-MIB", "f3ErpUnitIndex"))
if mibBuilder.loadTexts: f3ErpUnitStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitStatsEntry.setDescription('A conceptual row in the f3ErpUnitStatsTable.')
f3ErpUnitNumBlockedStateTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitNumBlockedStateTrans.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitNumBlockedStateTrans.setDescription('Total number of transitions into a blocking state for Ring Port.')
f3ErpUnitRapsPDUsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsPDUsTx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsPDUsTx.setDescription('Count of all RAPS PDUs transmitted on the port where the PDU contains \n             the MEG Level, Ring ID and VID for the ERP instance.')
f3ErpUnitRapsPDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsPDUsRx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsPDUsRx.setDescription('Count of all RAPS PDUs received on the port where the PDU contains \n             the MEG Level, Ring ID and VID for the ERP instance.')
f3ErpUnitRapsPDUsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsPDUsDiscarded.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsPDUsDiscarded.setDescription('Count of all RAPS PDUs received on the port and discarded where the PDU \n             contains the MEG Level, Ring ID and VID for the ERP instance.')
f3ErpUnitRapsNoReqPDUsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsNoReqPDUsTx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsNoReqPDUsTx.setDescription('Count of No Request RAPS PDUs transmitted on the port where the PDU \n             contains the MEG Level, Ring ID and VID for the ERP instance.')
f3ErpUnitRapsNoReqRBPDUsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsNoReqRBPDUsTx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsNoReqRBPDUsTx.setDescription('Count of No Request, RPL Blocked RAPS PDUs transmitted on the port where \n             the PDU contains the MEG Level, Ring ID and VID for the ERP instance.')
f3ErpUnitRapsSignalFailPDUsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsSignalFailPDUsTx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsSignalFailPDUsTx.setDescription('Count of Signal Fail RAPS PDUs transmitted on the port where the \n             PDU contains the MEG Level, Ring ID and VID for the ERP instance.')
f3ErpUnitRapsManualSwitchPDUsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsManualSwitchPDUsTx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsManualSwitchPDUsTx.setDescription('Count of Manual Switch RAPS PDUs transmitted on the port where the \n             PDU contains the MEG Level, Ring ID and VID for the ERP instance.')
f3ErpUnitRapsForcedSwitchPDUsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsForcedSwitchPDUsTx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsForcedSwitchPDUsTx.setDescription('Count of Forced Switch RAPS PDUs transmitted on the port where the \n             PDU contains the MEG Level, Ring ID and VID for the ERP instance.')
f3ErpUnitRapsEventPDUsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsEventPDUsTx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsEventPDUsTx.setDescription('Count of Event RAPS PDUs transmitted on the port where the PDU contains \n             the MEG Level, Ring ID and VID for the ERP instance.')
f3ErpUnitRapsNoReqPDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsNoReqPDUsRx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsNoReqPDUsRx.setDescription('Count of No Request RAPS PDUs received on the port where the PDU \n             contains the MEG Level, Ring ID and VID for the ERP instance.')
f3ErpUnitRapsNoReqRBPDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsNoReqRBPDUsRx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsNoReqRBPDUsRx.setDescription('Count of No Request, RPL Blocked RAPS PDUs received on the port where \n             the PDU contains the MEG Level, Ring ID and VID for the ERP instance.')
f3ErpUnitRapsSignalFailPDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsSignalFailPDUsRx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsSignalFailPDUsRx.setDescription('Count of Signal Fail RAPS PDUs received on the port where the PDU \n             contains the MEG Level, Ring ID and VID for the ERP instance.')
f3ErpUnitRapsManualSwitchPDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsManualSwitchPDUsRx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsManualSwitchPDUsRx.setDescription('Count of Manual Switch RAPS PDUs received on the port where the PDU \n             contains the MEG Level, Ring ID and VID for the ERP instance.')
f3ErpUnitRapsForcedSwitchPDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsForcedSwitchPDUsRx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsForcedSwitchPDUsRx.setDescription('Count of Forced Switch RAPS PDUs received on the port where the PDU \n             contains the MEG Level, Ring ID and VID for the ERP instance.')
f3ErpUnitRapsEventPDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsEventPDUsRx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsEventPDUsRx.setDescription('Count of Event RAPS PDUs received on the port where the PDU contains \n             the MEG Level, Ring ID and VID for the ERP instance.')
f3ErpUnitRapsInvalidOamVersionPDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsInvalidOamVersionPDUsRx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsInvalidOamVersionPDUsRx.setDescription('Count of OAM PDUs received on the port where the PDU contains the MEG Level, \n             Ring ID and VID for the ERP instance and an OAM Version field other \n             than 0 or 1.')
f3ErpUnitRapsRsvdRequestPDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsRsvdRequestPDUsRx.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsRsvdRequestPDUsRx.setDescription('Count of OAM PDUs received on the port where the PDU contains the MEG Level, \n             Ring ID and VID for the ERP instance.')
f3ErpUnitRapsRsvdEventSubcode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 2, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3ErpUnitRapsRsvdEventSubcode.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitRapsRsvdEventSubcode.setDescription('Count of OAM PDUs received on the port where the PDU contains the MEG Level, \n             Ring ID and VID for the ERP instance, an OAM Opcode field of 40 (R-APS), \n             a request/state value of 14 (EVT) and a sub-code value that is not 0.')
f3ErpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 3, 1))
f3ErpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 3, 2))
f3ErpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 3, 1, 1)).setObjects(("F3-ERP-MIB", "f3ErpGroupGroup"), ("F3-ERP-MIB", "f3ErpUnitGroup"), ("F3-ERP-MIB", "f3ErpUnitStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3ErpCompliance = f3ErpCompliance.setStatus('current')
if mibBuilder.loadTexts: f3ErpCompliance.setDescription('Describes the requirements for conformance to the F3-ERP-MIB compilance.')
f3ErpGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 3, 2, 1)).setObjects(("F3-ERP-MIB", "f3ErpGroupAdminState"), ("F3-ERP-MIB", "f3ErpGroupOperationalState"), ("F3-ERP-MIB", "f3ErpGroupSecondaryState"), ("F3-ERP-MIB", "f3ErpGroupRapsRingId"), ("F3-ERP-MIB", "f3ErpGroupRapsNodeId"), ("F3-ERP-MIB", "f3ErpGroupRapsVlanId"), ("F3-ERP-MIB", "f3ErpGroupRapsVlanPrio"), ("F3-ERP-MIB", "f3ErpGroupRapsVlanEtherType"), ("F3-ERP-MIB", "f3ErpGroupRapsMdLevel"), ("F3-ERP-MIB", "f3ErpGroupCompatibleVersion"), ("F3-ERP-MIB", "f3ErpGroupRevertive"), ("F3-ERP-MIB", "f3ErpGroupSubRingWithoutVirtChan"), ("F3-ERP-MIB", "f3ErpGroupGuardTime"), ("F3-ERP-MIB", "f3ErpGroupWaitToRestore"), ("F3-ERP-MIB", "f3ErpGroupHoldOffTime"), ("F3-ERP-MIB", "f3ErpGroupRingPort0"), ("F3-ERP-MIB", "f3ErpGroupRingPort0MEP"), ("F3-ERP-MIB", "f3ErpGroupRingPort0Role"), ("F3-ERP-MIB", "f3ErpGroupRingPort1"), ("F3-ERP-MIB", "f3ErpGroupRingPort1MEP"), ("F3-ERP-MIB", "f3ErpGroupRingPort1Role"), ("F3-ERP-MIB", "f3ErpGroupProtectMgmtTunnel"), ("F3-ERP-MIB", "f3ErpGroupNodeState"), ("F3-ERP-MIB", "f3ErpGroupWTRRemainingTime"), ("F3-ERP-MIB", "f3ErpGroupTxRapsRequest"), ("F3-ERP-MIB", "f3ErpGroupTxRapsRplBlocked"), ("F3-ERP-MIB", "f3ErpGroupTxRapsDNF"), ("F3-ERP-MIB", "f3ErpGroupTxRapsBPR"), ("F3-ERP-MIB", "f3ErpGroupAction"), ("F3-ERP-MIB", "f3ErpGroupActionObject"), ("F3-ERP-MIB", "f3ErpGroupUserLabel"), ("F3-ERP-MIB", "f3ErpGroupStorageType"), ("F3-ERP-MIB", "f3ErpGroupRowStatus"), ("F3-ERP-MIB", "f3ErpGroupProtectedFlow"), ("F3-ERP-MIB", "f3ErpGroupInterconnectionErp"), ("F3-ERP-MIB", "f3ErpGroupInterconnectPropagateTc"), ("F3-ERP-MIB", "f3ErpGroupRapsVirtualChannelMep"), ("F3-ERP-MIB", "f3ErpGroupMaxFpNum"), ("F3-ERP-MIB", "f3ErpGroupRapsInterconnectionNode"), ("F3-ERP-MIB", "f3ErpGroupRapsMultipleFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3ErpGroupGroup = f3ErpGroupGroup.setStatus('current')
if mibBuilder.loadTexts: f3ErpGroupGroup.setDescription('A collection of objects used to manage the ERP Group.')
f3ErpUnitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 3, 2, 2)).setObjects(("F3-ERP-MIB", "f3ErpUnitPort"), ("F3-ERP-MIB", "f3ErpUnitPortMEP"), ("F3-ERP-MIB", "f3ErpUnitPortRole"), ("F3-ERP-MIB", "f3ErpUnitPortStatus"), ("F3-ERP-MIB", "f3ErpUnitPortRxRapsRequest"), ("F3-ERP-MIB", "f3ErpUnitPortRxRapsRplBlocked"), ("F3-ERP-MIB", "f3ErpUnitPortRxRapsDNF"), ("F3-ERP-MIB", "f3ErpUnitPortRxRapsBPR"), ("F3-ERP-MIB", "f3ErpUnitPortRxRapsNodeId"), ("F3-ERP-MIB", "f3ErpUnitPortRapsFp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3ErpUnitGroup = f3ErpUnitGroup.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitGroup.setDescription('A collection of objects used to manage the ERP Unit.')
f3ErpUnitStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 25, 3, 2, 3)).setObjects(("F3-ERP-MIB", "f3ErpUnitNumBlockedStateTrans"), ("F3-ERP-MIB", "f3ErpUnitRapsPDUsTx"), ("F3-ERP-MIB", "f3ErpUnitRapsPDUsRx"), ("F3-ERP-MIB", "f3ErpUnitRapsPDUsDiscarded"), ("F3-ERP-MIB", "f3ErpUnitRapsNoReqPDUsTx"), ("F3-ERP-MIB", "f3ErpUnitRapsNoReqRBPDUsTx"), ("F3-ERP-MIB", "f3ErpUnitRapsSignalFailPDUsTx"), ("F3-ERP-MIB", "f3ErpUnitRapsManualSwitchPDUsTx"), ("F3-ERP-MIB", "f3ErpUnitRapsForcedSwitchPDUsTx"), ("F3-ERP-MIB", "f3ErpUnitRapsEventPDUsTx"), ("F3-ERP-MIB", "f3ErpUnitRapsNoReqPDUsRx"), ("F3-ERP-MIB", "f3ErpUnitRapsNoReqRBPDUsRx"), ("F3-ERP-MIB", "f3ErpUnitRapsSignalFailPDUsRx"), ("F3-ERP-MIB", "f3ErpUnitRapsManualSwitchPDUsRx"), ("F3-ERP-MIB", "f3ErpUnitRapsForcedSwitchPDUsRx"), ("F3-ERP-MIB", "f3ErpUnitRapsEventPDUsRx"), ("F3-ERP-MIB", "f3ErpUnitRapsInvalidOamVersionPDUsRx"), ("F3-ERP-MIB", "f3ErpUnitRapsRsvdRequestPDUsRx"), ("F3-ERP-MIB", "f3ErpUnitRapsRsvdEventSubcode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3ErpUnitStatsGroup = f3ErpUnitStatsGroup.setStatus('current')
if mibBuilder.loadTexts: f3ErpUnitStatsGroup.setDescription('A collection of objects used to manage the ERP Unit Statistics.')
mibBuilder.exportSymbols("F3-ERP-MIB", f3ErpUnitRapsEventPDUsRx=f3ErpUnitRapsEventPDUsRx, f3ErpGroupGuardTime=f3ErpGroupGuardTime, RingPortStatus=RingPortStatus, f3ErpUnitRapsNoReqRBPDUsTx=f3ErpUnitRapsNoReqRBPDUsTx, f3ErpGroupProtectMgmtTunnel=f3ErpGroupProtectMgmtTunnel, f3ErpGroupActionObject=f3ErpGroupActionObject, f3ErpGroupInterconnectPropagateTc=f3ErpGroupInterconnectPropagateTc, f3ErpUnitRapsManualSwitchPDUsRx=f3ErpUnitRapsManualSwitchPDUsRx, f3ErpUnitPortRxRapsDNF=f3ErpUnitPortRxRapsDNF, f3ErpUnitRapsPDUsDiscarded=f3ErpUnitRapsPDUsDiscarded, f3ErpGroupWaitToRestore=f3ErpGroupWaitToRestore, f3ErpGroupRingPort0MEP=f3ErpGroupRingPort0MEP, f3ErpGroupTxRapsRplBlocked=f3ErpGroupTxRapsRplBlocked, f3ErpUnitTable=f3ErpUnitTable, f3ErpGroupRevertive=f3ErpGroupRevertive, f3ErpUnitPortRxRapsNodeId=f3ErpUnitPortRxRapsNodeId, f3ErpUnitRapsForcedSwitchPDUsTx=f3ErpUnitRapsForcedSwitchPDUsTx, f3ErpUnitPort=f3ErpUnitPort, f3ErpUnitRapsForcedSwitchPDUsRx=f3ErpUnitRapsForcedSwitchPDUsRx, f3ErpUnitPortMEP=f3ErpUnitPortMEP, f3ErpGroupTxRapsDNF=f3ErpGroupTxRapsDNF, f3ErpGroupCompatibleVersion=f3ErpGroupCompatibleVersion, G8032Version=G8032Version, RapsMultipleFailure=RapsMultipleFailure, f3ErpUnitStatsEntry=f3ErpUnitStatsEntry, f3ErpUnitRapsInvalidOamVersionPDUsRx=f3ErpUnitRapsInvalidOamVersionPDUsRx, f3ErpUnitNumBlockedStateTrans=f3ErpUnitNumBlockedStateTrans, f3ErpGroupRowStatus=f3ErpGroupRowStatus, f3ErpGroupRingPort0Role=f3ErpGroupRingPort0Role, f3ErpGroupSubRingWithoutVirtChan=f3ErpGroupSubRingWithoutVirtChan, f3ErpGroupIndex=f3ErpGroupIndex, f3ErpGroupRingPort0=f3ErpGroupRingPort0, f3ErpGroupRapsVlanEtherType=f3ErpGroupRapsVlanEtherType, f3ErpUnitRapsSignalFailPDUsRx=f3ErpUnitRapsSignalFailPDUsRx, f3ErpUnitPortRxRapsBPR=f3ErpUnitPortRxRapsBPR, f3ErpUnitRapsRsvdEventSubcode=f3ErpUnitRapsRsvdEventSubcode, f3ErpUnitRapsEventPDUsTx=f3ErpUnitRapsEventPDUsTx, f3ErpUnitPortRapsFp=f3ErpUnitPortRapsFp, RAPSRequest=RAPSRequest, f3ErpUnitRapsNoReqPDUsRx=f3ErpUnitRapsNoReqPDUsRx, f3ErpUnitRapsSignalFailPDUsTx=f3ErpUnitRapsSignalFailPDUsTx, f3ErpUnitIndex=f3ErpUnitIndex, f3ErpGroupProtectedFlow=f3ErpGroupProtectedFlow, f3ErpGroupRapsRingId=f3ErpGroupRapsRingId, f3ErpGroupRingPort1Role=f3ErpGroupRingPort1Role, f3ErpConfigObjects=f3ErpConfigObjects, ERPGroupAction=ERPGroupAction, f3ErpGroupUserLabel=f3ErpGroupUserLabel, f3ErpGroupRingPort1=f3ErpGroupRingPort1, f3ErpGroupTable=f3ErpGroupTable, f3ErpGroupAction=f3ErpGroupAction, f3ErpGroupSecondaryState=f3ErpGroupSecondaryState, PYSNMP_MODULE_ID=f3ErpMIB, f3ErpGroupTxRapsRequest=f3ErpGroupTxRapsRequest, f3ErpCompliances=f3ErpCompliances, f3ErpUnitStatsTable=f3ErpUnitStatsTable, f3ErpGroupWTRRemainingTime=f3ErpGroupWTRRemainingTime, f3ErpGroupHoldOffTime=f3ErpGroupHoldOffTime, f3ErpUnitRapsNoReqPDUsTx=f3ErpUnitRapsNoReqPDUsTx, f3ErpUnitGroup=f3ErpUnitGroup, f3ErpGroupRapsVlanId=f3ErpGroupRapsVlanId, f3ErpGroupRingPort1MEP=f3ErpGroupRingPort1MEP, f3ErpGroupRapsMdLevel=f3ErpGroupRapsMdLevel, f3ErpConformance=f3ErpConformance, f3ErpGroupRapsInterconnectionNode=f3ErpGroupRapsInterconnectionNode, f3ErpUnitEntry=f3ErpUnitEntry, f3ErpGroupProtectedFlowEntry=f3ErpGroupProtectedFlowEntry, f3ErpUnitPortStatus=f3ErpUnitPortStatus, RapsInterconnectionNode=RapsInterconnectionNode, f3ErpGroupGroup=f3ErpGroupGroup, f3ErpUnitRapsRsvdRequestPDUsRx=f3ErpUnitRapsRsvdRequestPDUsRx, RingNodeState=RingNodeState, f3ErpUnitPortRxRapsRplBlocked=f3ErpUnitPortRxRapsRplBlocked, f3ErpUnitRapsNoReqRBPDUsRx=f3ErpUnitRapsNoReqRBPDUsRx, f3ErpUnitPortRxRapsRequest=f3ErpUnitPortRxRapsRequest, f3ErpGroupStorageType=f3ErpGroupStorageType, f3ErpUnitStatsGroup=f3ErpUnitStatsGroup, f3ErpGroupRapsNodeId=f3ErpGroupRapsNodeId, f3ErpStatsObjects=f3ErpStatsObjects, f3ErpGroupOperationalState=f3ErpGroupOperationalState, f3ErpUnitRapsManualSwitchPDUsTx=f3ErpUnitRapsManualSwitchPDUsTx, f3ErpGroupProtectedFlowTable=f3ErpGroupProtectedFlowTable, f3ErpGroupAdminState=f3ErpGroupAdminState, f3ErpGroupMaxFpNum=f3ErpGroupMaxFpNum, f3ErpGroupRapsVlanPrio=f3ErpGroupRapsVlanPrio, f3ErpCompliance=f3ErpCompliance, f3ErpUnitPortRole=f3ErpUnitPortRole, RPLRole=RPLRole, f3ErpGroups=f3ErpGroups, f3ErpGroupInterconnectionErp=f3ErpGroupInterconnectionErp, f3ErpGroupRapsMultipleFailure=f3ErpGroupRapsMultipleFailure, f3ErpMIB=f3ErpMIB, f3ErpUnitRapsPDUsRx=f3ErpUnitRapsPDUsRx, f3ErpUnitRapsPDUsTx=f3ErpUnitRapsPDUsTx, f3ErpGroupEntry=f3ErpGroupEntry, f3ErpGroupTxRapsBPR=f3ErpGroupTxRapsBPR, f3ErpGroupRapsVirtualChannelMep=f3ErpGroupRapsVirtualChannelMep, f3ErpGroupNodeState=f3ErpGroupNodeState)
