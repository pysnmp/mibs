#
# PySNMP MIB module F3-BFD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-BFD-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 12:19:32 2024
# On host fv-az1022-995 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
bfdSessIndex, bfdSessEntry = mibBuilder.importSymbols("BFD-STD-MIB", "bfdSessIndex", "bfdSessEntry")
OperationalState, VlanPriority, AdminState, SecondaryState, VlanId = mibBuilder.importSymbols("CM-COMMON-MIB", "OperationalState", "VlanPriority", "AdminState", "SecondaryState", "VlanId")
neIndex, = mibBuilder.importSymbols("CM-ENTITY-MIB", "neIndex")
f3L3TrafficOspfInterfaceEntry, f3VrfEntry, f3L3TrafficBgpPeerEntry, f3L3TrafficIPInterfaceEntry = mibBuilder.importSymbols("F3-L3-MIB", "f3L3TrafficOspfInterfaceEntry", "f3VrfEntry", "f3L3TrafficBgpPeerEntry", "f3L3TrafficIPInterfaceEntry")
IANAbfdSessStateTC, = mibBuilder.importSymbols("IANA-BFD-TC-STD-MIB", "IANAbfdSessStateTC")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, MibIdentifier, Bits, Counter64, ObjectIdentity, Unsigned32, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, iso, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "Bits", "Counter64", "ObjectIdentity", "Unsigned32", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "iso", "ModuleIdentity", "IpAddress")
VariablePointer, TruthValue, TextualConvention, DisplayString, RowStatus, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "VariablePointer", "TruthValue", "TextualConvention", "DisplayString", "RowStatus", "StorageType")
f3BfdMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38))
f3BfdMIB.setRevisions(('2021-01-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3BfdMIB.setRevisionsDescriptions(('\n         Notes from release 201508140000Z.',))
if mibBuilder.loadTexts: f3BfdMIB.setLastUpdated('202101280000Z')
if mibBuilder.loadTexts: f3BfdMIB.setOrganization('ADVA Optical Networking SE')
if mibBuilder.loadTexts: f3BfdMIB.setContactInfo('Web URL: http://adva.com/\n        E-mail:  support@adva.com\n        Postal:  ADVA Optical Networking SE\n             Campus Martinsried\n             Fraunhoferstrasse 9a\n             82152 Martinsried/Munich\n             Germany\n        Phone: +49 089 89 06 65 0\n        Fax:  +49 089 89 06 65 199 ')
if mibBuilder.loadTexts: f3BfdMIB.setDescription('This module defines the Ethernet Service Manager MIB defitinions\n             used by the F3 (FSP150CM/CC) product lines.  \n             Copyright (C) ADVA.')
f3BfdConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1))
f3BfdConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 2))
class BfdSessPerfAction(TextualConvention, Integer32):
    description = 'Describes the action on bfd session performance data.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("notApplicable", 0), ("clearCtrlPkts", 1))

bfdSessExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1), )
if mibBuilder.loadTexts: bfdSessExtTable.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtTable.setDescription('This table has list of entries with which FSPNM can associate some\n         information in the form of name-value pairs.\n         NOTE: This table is for FSPNM use only.')
bfdSessExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1), )
bfdSessEntry.registerAugmentions(("F3-BFD-MIB", "bfdSessExtEntry"))
bfdSessExtEntry.setIndexNames(*bfdSessEntry.getIndexNames())
if mibBuilder.loadTexts: bfdSessExtEntry.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtEntry.setDescription('The conceptual row in bfdSessExtTable.')
bfdSessExtInnerVlanControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdSessExtInnerVlanControl.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtInnerVlanControl.setDescription('This object allows to specify whether enable inner Vlan Tag.')
bfdSessExtInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdSessExtInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtInnerVlanId.setDescription('This object allows to specify inner VlanId.')
bfdSessExtInnerVlanPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdSessExtInnerVlanPri.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtInnerVlanPri.setDescription('This object allows to specify inner Vlan Priority.')
bfdSessExtOuterVlanControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdSessExtOuterVlanControl.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtOuterVlanControl.setDescription('This object allows to specify whether enable outer Vlan Tag.')
bfdSessExtOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1, 5), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdSessExtOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtOuterVlanId.setDescription('This object allows to specify outer VlanId.')
bfdSessExtOuterVlanPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1, 6), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdSessExtOuterVlanPri.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtOuterVlanPri.setDescription('This object allows to specify outer Vlan Priority.')
bfdSessExtIpPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdSessExtIpPri.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtIpPri.setDescription('This object allows to specify IP DSCP value.')
bfdSessExtIpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdSessExtIpGateway.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtIpGateway.setDescription('This object allows to specify IP gateway.')
bfdSessExtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1, 9), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdSessExtAdminState.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtAdminState.setDescription('This object represents the Administrative State of the BFD session.')
bfdSessExtOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1, 10), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessExtOperationalState.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtOperationalState.setDescription('This object represents the Operational State of the BFD session.')
bfdSessExtSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1, 11), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessExtSecondaryState.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtSecondaryState.setDescription('This object represents the Secondary State of the BFD session.')
bfdSessExtNegRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessExtNegRxInterval.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtNegRxInterval.setDescription('This object represents negatiated recieve direction interval of the BFD session.')
bfdSessExtAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdSessExtAlias.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtAlias.setDescription('This object represents the alias of the BFD session.')
bfdSessExtAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1, 14), BfdSessPerfAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdSessExtAction.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtAction.setDescription('This object allows to perform some action on the bfd session.')
bfdSessExtIpv6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 1, 1, 15), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdSessExtIpv6Gateway.setStatus('current')
if mibBuilder.loadTexts: bfdSessExtIpv6Gateway.setDescription('This object allows to specify the IPv6 gateway.')
f3BfdIpIfMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 2), )
if mibBuilder.loadTexts: f3BfdIpIfMemberTable.setStatus('current')
if mibBuilder.loadTexts: f3BfdIpIfMemberTable.setDescription('A list of entries for the BFD Traffic Ip Interface member.')
f3BfdIpIfMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 2, 1), ).setIndexNames((0, "BFD-STD-MIB", "bfdSessIndex"), (0, "F3-BFD-MIB", "f3BfdIpIfMemberObject"))
if mibBuilder.loadTexts: f3BfdIpIfMemberEntry.setStatus('current')
if mibBuilder.loadTexts: f3BfdIpIfMemberEntry.setDescription('A conceptual row in the f3BfdIpIfMemberTable.')
f3BfdIpIfMemberObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 2, 1, 1), VariablePointer())
if mibBuilder.loadTexts: f3BfdIpIfMemberObject.setStatus('current')
if mibBuilder.loadTexts: f3BfdIpIfMemberObject.setDescription('This object describes the traffic ip interface.')
f3BfdIpIfMemberStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 2, 1, 2), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3BfdIpIfMemberStorageType.setStatus('current')
if mibBuilder.loadTexts: f3BfdIpIfMemberStorageType.setDescription('The type of storage configured for this entry.')
f3BfdIpIfMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3BfdIpIfMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3BfdIpIfMemberRowStatus.setDescription('The status of this row.\n          \tAn entry MUST NOT exist in the active state unless all\n          \tobjects in the entry have an appropriate value, as described\n          \tin the description clause for each writable object.\n \t\n          \tThe values of f3BfdIpIfMemberRowStatus supported are\n          \tcreateAndGo(4) and destroy(6).  All mandatory attributes\n          \tmust be specified in a single SNMP SET request with\n          \tf3BfdIpIfMemberRowStatus value as createAndGo(4).\n          \tUpon successful row creation, this object has a\n          \tvalue of active(1).\n \t\n          \tThe f3BfdIpIfMemberRowStatus object may be modified if\n          \tthe associated instance of this object is equal to active(1).')
f3L3TrafficIPInterfaceExtBfdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 3), )
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceExtBfdTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceExtBfdTable.setDescription('A list of entries corresponding to traffic ip interface for configuration purposes.')
f3L3TrafficIPInterfaceExtBfdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 3, 1), )
f3L3TrafficIPInterfaceEntry.registerAugmentions(("F3-BFD-MIB", "f3L3TrafficIPInterfaceExtBfdEntry"))
f3L3TrafficIPInterfaceExtBfdEntry.setIndexNames(*f3L3TrafficIPInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceExtBfdEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceExtBfdEntry.setDescription('A conceptual row in the f3L3TrafficIPInterfaceExtBfdTable.')
f3L3TrafficIPInterfaceExtBfdObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 3, 1, 1), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceExtBfdObject.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceExtBfdObject.setDescription('This object describes the BFD object OID.')
f3L3TrafficIPInterfaceExtBfdDesiredMinTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceExtBfdDesiredMinTxInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceExtBfdDesiredMinTxInterval.setDescription('.')
f3L3TrafficIPInterfaceExtBfdReqMinRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceExtBfdReqMinRxInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceExtBfdReqMinRxInterval.setDescription('.')
f3L3TrafficIPInterfaceExtBfdLocalMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceExtBfdLocalMultiplier.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceExtBfdLocalMultiplier.setDescription('.')
f3VrfExtBfdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 4), )
if mibBuilder.loadTexts: f3VrfExtBfdConfigTable.setStatus('current')
if mibBuilder.loadTexts: f3VrfExtBfdConfigTable.setDescription('A list of entries corresponding to vrf for configuration purposes.')
f3VrfExtBfdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 4, 1), )
f3VrfEntry.registerAugmentions(("F3-BFD-MIB", "f3VrfExtBfdConfigEntry"))
f3VrfExtBfdConfigEntry.setIndexNames(*f3VrfEntry.getIndexNames())
if mibBuilder.loadTexts: f3VrfExtBfdConfigEntry.setStatus('current')
if mibBuilder.loadTexts: f3VrfExtBfdConfigEntry.setDescription('A conceptual row in the f3VrfExtBfdConfigTable.')
f3VrfExtBfdDesiredMinTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfExtBfdDesiredMinTxInterval.setStatus('current')
if mibBuilder.loadTexts: f3VrfExtBfdDesiredMinTxInterval.setDescription('.')
f3VrfExtBfdReqMinRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfExtBfdReqMinRxInterval.setStatus('current')
if mibBuilder.loadTexts: f3VrfExtBfdReqMinRxInterval.setDescription('.')
f3VrfExtBfdLocalMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfExtBfdLocalMultiplier.setStatus('current')
if mibBuilder.loadTexts: f3VrfExtBfdLocalMultiplier.setDescription('.')
f3L3TrafficBgpPeerExtBfdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 5), )
if mibBuilder.loadTexts: f3L3TrafficBgpPeerExtBfdConfigTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerExtBfdConfigTable.setDescription('Traffic BGP peer extension Table.')
f3L3TrafficBgpPeerExtBfdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 5, 1), )
f3L3TrafficBgpPeerEntry.registerAugmentions(("F3-BFD-MIB", "f3L3TrafficBgpPeerExtBfdConfigEntry"))
f3L3TrafficBgpPeerExtBfdConfigEntry.setIndexNames(*f3L3TrafficBgpPeerEntry.getIndexNames())
if mibBuilder.loadTexts: f3L3TrafficBgpPeerExtBfdConfigEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerExtBfdConfigEntry.setDescription('A conceptual row in the f3L3TrafficBgpPeerExtBfdConfigTable.')
f3L3TrafficBgpPeerBfdDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 5, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerBfdDetect.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerBfdDetect.setDescription('.')
f3L3TrafficOspfInterfaceExtBfdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 6), )
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceExtBfdConfigTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceExtBfdConfigTable.setDescription('A list of entries for the Traffic OSPF Interface.')
f3L3TrafficOspfInterfaceExtBfdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 6, 1), )
f3L3TrafficOspfInterfaceEntry.registerAugmentions(("F3-BFD-MIB", "f3L3TrafficOspfInterfaceExtBfdConfigEntry"))
f3L3TrafficOspfInterfaceExtBfdConfigEntry.setIndexNames(*f3L3TrafficOspfInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceExtBfdConfigEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceExtBfdConfigEntry.setDescription('A conceptual row in the f3L3TrafficOspfInterfaceExtBfdConfigTable.')
f3L3TrafficOspfInterfaceBfdDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 6, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceBfdDetect.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceBfdDetect.setDescription('.')
f3VrfBfdSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 7), )
if mibBuilder.loadTexts: f3VrfBfdSessionTable.setStatus('current')
if mibBuilder.loadTexts: f3VrfBfdSessionTable.setDescription('A list of entries for VRF BFD Sessions.\n             Must set f3VrfActionX as optimizeBfdSessionRetrieve(9)\n             before get data from this table.')
f3VrfBfdSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-BFD-MIB", "f3VrfIndex"), (0, "F3-BFD-MIB", "f3VrfBfdSessionIpAddress"), (0, "F3-BFD-MIB", "f3VrfBfdSessionInterface"))
if mibBuilder.loadTexts: f3VrfBfdSessionEntry.setStatus('current')
if mibBuilder.loadTexts: f3VrfBfdSessionEntry.setDescription('A conceptual row in the f3VrfBfdSessionTable.')
f3VrfBfdSessionIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 7, 1, 1), DisplayString())
if mibBuilder.loadTexts: f3VrfBfdSessionIpAddress.setStatus('current')
if mibBuilder.loadTexts: f3VrfBfdSessionIpAddress.setDescription('.')
f3VrfBfdSessionInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 7, 1, 2), DisplayString())
if mibBuilder.loadTexts: f3VrfBfdSessionInterface.setStatus('current')
if mibBuilder.loadTexts: f3VrfBfdSessionInterface.setDescription('.')
f3VrfBfdSessionNegotiatedTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfBfdSessionNegotiatedTxInterval.setStatus('current')
if mibBuilder.loadTexts: f3VrfBfdSessionNegotiatedTxInterval.setDescription('.')
f3VrfBfdSessionNegotiatedDetectionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfBfdSessionNegotiatedDetectionTimer.setStatus('current')
if mibBuilder.loadTexts: f3VrfBfdSessionNegotiatedDetectionTimer.setDescription('.')
f3VrfBfdSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 1, 7, 1, 5), IANAbfdSessStateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfBfdSessionState.setStatus('current')
if mibBuilder.loadTexts: f3VrfBfdSessionState.setDescription('.')
f3BfdCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 2, 1))
f3BfdGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 2, 2))
f3BfdCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 2, 1, 1)).setObjects(("F3-BFD-MIB", "f3BfdConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3BfdCompliance = f3BfdCompliance.setStatus('current')
if mibBuilder.loadTexts: f3BfdCompliance.setDescription('Describes the requirements for conformance to the F3-BFD-MIB compilance.')
f3BfdConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 38, 2, 2, 1)).setObjects(("F3-BFD-MIB", "bfdSessExtInnerVlanControl"), ("F3-BFD-MIB", "bfdSessExtInnerVlanId"), ("F3-BFD-MIB", "bfdSessExtInnerVlanPri"), ("F3-BFD-MIB", "bfdSessExtOuterVlanControl"), ("F3-BFD-MIB", "bfdSessExtOuterVlanId"), ("F3-BFD-MIB", "bfdSessExtOuterVlanPri"), ("F3-BFD-MIB", "bfdSessExtIpPri"), ("F3-BFD-MIB", "bfdSessExtIpGateway"), ("F3-BFD-MIB", "bfdSessExtAdminState"), ("F3-BFD-MIB", "bfdSessExtOperationalState"), ("F3-BFD-MIB", "bfdSessExtSecondaryState"), ("F3-BFD-MIB", "bfdSessExtNegRxInterval"), ("F3-BFD-MIB", "bfdSessExtAlias"), ("F3-BFD-MIB", "bfdSessExtAction"), ("F3-BFD-MIB", "bfdSessExtIpv6Gateway"), ("F3-BFD-MIB", "f3BfdIpIfMemberObject"), ("F3-BFD-MIB", "f3BfdIpIfMemberStorageType"), ("F3-BFD-MIB", "f3BfdIpIfMemberRowStatus"), ("F3-BFD-MIB", "f3L3TrafficIPInterfaceExtBfdObject"), ("F3-BFD-MIB", "f3VrfExtBfdDesiredMinTxInterval"), ("F3-BFD-MIB", "f3VrfExtBfdReqMinRxInterval"), ("F3-BFD-MIB", "f3VrfExtBfdLocalMultiplier"), ("F3-BFD-MIB", "f3L3TrafficBgpPeerBfdDetect"), ("F3-BFD-MIB", "f3L3TrafficOspfInterfaceBfdDetect"), ("F3-BFD-MIB", "f3VrfBfdSessionIpAddress"), ("F3-BFD-MIB", "f3VrfBfdSessionInterface"), ("F3-BFD-MIB", "f3VrfBfdSessionNegotiatedTxInterval"), ("F3-BFD-MIB", "f3VrfBfdSessionNegotiatedDetectionTimer"), ("F3-BFD-MIB", "f3VrfBfdSessionState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3BfdConfigGroup = f3BfdConfigGroup.setStatus('current')
if mibBuilder.loadTexts: f3BfdConfigGroup.setDescription('A collection of objects used to manage the BFD Configuration objects.')
mibBuilder.exportSymbols("F3-BFD-MIB", f3VrfExtBfdConfigTable=f3VrfExtBfdConfigTable, f3L3TrafficIPInterfaceExtBfdLocalMultiplier=f3L3TrafficIPInterfaceExtBfdLocalMultiplier, bfdSessExtAlias=bfdSessExtAlias, bfdSessExtIpGateway=bfdSessExtIpGateway, f3BfdIpIfMemberStorageType=f3BfdIpIfMemberStorageType, f3BfdIpIfMemberRowStatus=f3BfdIpIfMemberRowStatus, PYSNMP_MODULE_ID=f3BfdMIB, f3BfdConfigGroup=f3BfdConfigGroup, f3BfdCompliances=f3BfdCompliances, f3BfdIpIfMemberEntry=f3BfdIpIfMemberEntry, f3BfdMIB=f3BfdMIB, bfdSessExtOperationalState=bfdSessExtOperationalState, bfdSessExtOuterVlanControl=bfdSessExtOuterVlanControl, bfdSessExtTable=bfdSessExtTable, f3VrfExtBfdDesiredMinTxInterval=f3VrfExtBfdDesiredMinTxInterval, f3VrfExtBfdConfigEntry=f3VrfExtBfdConfigEntry, f3VrfBfdSessionNegotiatedDetectionTimer=f3VrfBfdSessionNegotiatedDetectionTimer, f3L3TrafficIPInterfaceExtBfdEntry=f3L3TrafficIPInterfaceExtBfdEntry, f3VrfBfdSessionIpAddress=f3VrfBfdSessionIpAddress, bfdSessExtIpPri=bfdSessExtIpPri, f3L3TrafficIPInterfaceExtBfdObject=f3L3TrafficIPInterfaceExtBfdObject, f3VrfBfdSessionNegotiatedTxInterval=f3VrfBfdSessionNegotiatedTxInterval, bfdSessExtInnerVlanId=bfdSessExtInnerVlanId, bfdSessExtNegRxInterval=bfdSessExtNegRxInterval, bfdSessExtAdminState=bfdSessExtAdminState, f3BfdIpIfMemberTable=f3BfdIpIfMemberTable, f3VrfExtBfdLocalMultiplier=f3VrfExtBfdLocalMultiplier, bfdSessExtAction=bfdSessExtAction, BfdSessPerfAction=BfdSessPerfAction, f3L3TrafficIPInterfaceExtBfdDesiredMinTxInterval=f3L3TrafficIPInterfaceExtBfdDesiredMinTxInterval, f3BfdIpIfMemberObject=f3BfdIpIfMemberObject, f3L3TrafficBgpPeerExtBfdConfigTable=f3L3TrafficBgpPeerExtBfdConfigTable, f3VrfBfdSessionEntry=f3VrfBfdSessionEntry, f3L3TrafficBgpPeerBfdDetect=f3L3TrafficBgpPeerBfdDetect, f3VrfExtBfdReqMinRxInterval=f3VrfExtBfdReqMinRxInterval, f3L3TrafficOspfInterfaceExtBfdConfigTable=f3L3TrafficOspfInterfaceExtBfdConfigTable, bfdSessExtEntry=bfdSessExtEntry, f3VrfBfdSessionState=f3VrfBfdSessionState, f3BfdConformance=f3BfdConformance, bfdSessExtInnerVlanPri=bfdSessExtInnerVlanPri, f3VrfBfdSessionTable=f3VrfBfdSessionTable, f3BfdCompliance=f3BfdCompliance, bfdSessExtInnerVlanControl=bfdSessExtInnerVlanControl, f3L3TrafficBgpPeerExtBfdConfigEntry=f3L3TrafficBgpPeerExtBfdConfigEntry, bfdSessExtOuterVlanPri=bfdSessExtOuterVlanPri, f3L3TrafficOspfInterfaceBfdDetect=f3L3TrafficOspfInterfaceBfdDetect, bfdSessExtIpv6Gateway=bfdSessExtIpv6Gateway, f3L3TrafficIPInterfaceExtBfdReqMinRxInterval=f3L3TrafficIPInterfaceExtBfdReqMinRxInterval, f3BfdGroups=f3BfdGroups, bfdSessExtSecondaryState=bfdSessExtSecondaryState, bfdSessExtOuterVlanId=bfdSessExtOuterVlanId, f3VrfBfdSessionInterface=f3VrfBfdSessionInterface, f3L3TrafficIPInterfaceExtBfdTable=f3L3TrafficIPInterfaceExtBfdTable, f3BfdConfigObjects=f3BfdConfigObjects, f3L3TrafficOspfInterfaceExtBfdConfigEntry=f3L3TrafficOspfInterfaceExtBfdConfigEntry)
