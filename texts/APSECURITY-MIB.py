#
# PySNMP MIB module APSECURITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/oracle/APSECURITY-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 12:24:37 2024
# On host fv-az1380-78 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
acmepacketMgmt, = mibBuilder.importSymbols("ACMEPACKET-SMI", "acmepacketMgmt")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Unsigned32, NotificationType, iso, ModuleIdentity, Bits, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, IpAddress, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "NotificationType", "iso", "ModuleIdentity", "Bits", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "IpAddress", "Counter32", "Integer32")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
apSecurityModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9148, 3, 9))
apSecurityModule.setRevisions(('2012-07-16 00:00', '2014-06-26 00:00', '2017-10-18 00:00', '2017-11-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: apSecurityModule.setRevisionsDescriptions(('Updated contact info', 'Updated Organization and Contact info.', 'Added apSecurityTacacsDownLocalAuthUsedTrap and\r\n                        apSecurityTacacsDownLocalAuthUsedClearTrap notifications\r\n                        and associated objects.', 'Added new MIB Definitions for Security Association (SA) Statistics.',))
if mibBuilder.loadTexts: apSecurityModule.setLastUpdated('201711240000Z')
if mibBuilder.loadTexts: apSecurityModule.setOrganization('Oracle Communications')
if mibBuilder.loadTexts: apSecurityModule.setContactInfo('           \tCustomer Service\r\n\t\t \tPostal:\t\tOracle Communications\r\n\t\t\t\t\t100 Crosby Drive \r\n\t\t\t\t\tBedford, MA 01730\r\n\t\t\t\t\tUS\r\n\t\t    \tTel:\t\t1-800-633-0738\r\n\t\t\tUrl:\t\twww.oracle.com\r\n\t\t \tE-mail:\t\tsupport@oracle.com')
if mibBuilder.loadTexts: apSecurityModule.setDescription('The Net-Net SECURITY MIB for Oracle Communications Acme Packet SBCs')
apSecurityMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1))
apSecuritySAMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5))
apSecurityIPsecTunCount = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 1), Unsigned32()).setUnits('tunnels').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIPsecTunCount.setStatus('current')
if mibBuilder.loadTexts: apSecurityIPsecTunCount.setDescription('The number of IPsec tunnels currently in progress.')
apSecurityIPsecTunCapPct = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIPsecTunCapPct.setStatus('current')
if mibBuilder.loadTexts: apSecurityIPsecTunCapPct.setDescription('The percentage of licensed IPsec tunnels currently in progress.')
apSecurityIkeInterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3), )
if mibBuilder.loadTexts: apSecurityIkeInterfaceStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceStatsTable.setDescription('The table of Ike statistics per ike-interface for IKE negotiations.')
apSecurityIkeInterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1), ).setIndexNames((0, "APSECURITY-MIB", "apSecurityIkeInterfaceType"), (0, "APSECURITY-MIB", "apSecurityIkeInterfaceAddress"))
if mibBuilder.loadTexts: apSecurityIkeInterfaceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceStatsEntry.setDescription('IKE negotiation statistics for an IKE-interface.')
apSecurityIkeInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceType.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceType.setDescription('IPAddress type of the IKE-interface')
apSecurityIkeInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAddress.setDescription('IPAddress of  the IKE-interface')
apSecurityIkeInterfaceCpuOverloadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCpuOverloadErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCpuOverloadErrors.setDescription('The count of CPU overload rejections on the IKE-interface')
apSecurityIkeInterfaceInitCookieErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceInitCookieErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInitCookieErrors.setDescription('The count of IKE COOKIE errors on the IKE-interface')
apSecurityIkeInterfaceAuthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthErrors.setDescription('The count of IKE AUTH payload errors on the IKE-interface')
apSecurityIkeInterfaceEapAccessRequestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAccessRequestErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAccessRequestErrors.setDescription('The count of IKE EAP access request errors on the IKE-interface')
apSecurityIkeInterfaceEapAccessChallengeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAccessChallengeErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAccessChallengeErrors.setDescription('The count of IKE EAP access challenge errors on the IKE-interface')
apSecurityIkeInterfaceTsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceTsErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceTsErrors.setDescription('The count of IKE TS errors on the IKE-interface')
apSecurityIkeInterfaceCpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCpErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCpErrors.setDescription('The count of IKE config payload errors on the IKE-interface')
apSecurityIkeInterfaceKeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceKeErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceKeErrors.setDescription('The count of IKE KE errors on the IKE-interface')
apSecurityIkeInterfaceProposalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceProposalErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceProposalErrors.setDescription('The count of IKE proposal payload errors on the IKE-interface')
apSecurityIkeInterfaceSyntaxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceSyntaxErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceSyntaxErrors.setDescription('The count of IKE Syntax errors on the IKE-interface')
apSecurityIkeInterfaceCriticalPayloadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCriticalPayloadErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCriticalPayloadErrors.setDescription('The count of IKE critical payload errors on the IKE-interface')
apSecurityIkeInterfaceAuthFailureTca = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthFailureTca.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthFailureTca.setDescription('Dummy object for the IKE authentication failure TCA')
apSecurityIkeInterfaceTunnelRemovalsTca = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceTunnelRemovalsTca.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceTunnelRemovalsTca.setDescription('Dummy object for the IPsec tunnel removals TCA')
apSecurityIkeInterfaceDpdTca = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDpdTca.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDpdTca.setDescription('Dummy object for the IKE dead peer detection TCA')
apSecurityIkeInterfaceEapOnlyNonZeroSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapOnlyNonZeroSPI.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapOnlyNonZeroSPI.setDescription('The count of Non Zero SPI in EAP-ONLY notification on the IKE-interface')
apSecurityIkeInterfaceEapOnlyNonZeroProtoId = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapOnlyNonZeroProtoId.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapOnlyNonZeroProtoId.setDescription('The count of Non Zero ProtoId in EAP-ONLY notification on the IKE-interface')
apSecurityIkeInterfaceEapOnlyUnSupEapProto = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapOnlyUnSupEapProto.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapOnlyUnSupEapProto.setDescription('The count of Unsupported EAP method in EAP-ONLY authentication on the IKE-interface')
apSecurityIkeInterfaceIkeBadPortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadPortErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadPortErrors.setDescription('The count of bad port errors on the IKE-interface')
apSecurityIkeInterfaceIkeBadAttrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadAttrErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadAttrErrors.setDescription('The count of bad IKE attribute errors on IKE-interface')
apSecurityIkeInterfaceIkeBadCertErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadCertErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadCertErrors.setDescription('The count of bad certificate errors on the IKE-interface')
apSecurityIkeInterfaceIkeNoCertErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeNoCertErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeNoCertErrors.setDescription('The count of missing user certificate errors on the IKE-interface')
apSecurityIkeInterfaceIkeBadCertTypeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadCertTypeErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadCertTypeErrors.setDescription('The count of bad certificate type errors on the IKE-interface')
apSecurityIkeInterfaceIkeBadCookieErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadCookieErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadCookieErrors.setDescription('The count of bad cookie errors on IKE-interface')
apSecurityIkeInterfaceIkeBadCookie2Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadCookie2Errors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadCookie2Errors.setDescription('The count of bad cookie2 errors on IKE-interface')
apSecurityIkeInterfaceIkeBadConfigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadConfigErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadConfigErrors.setDescription('The count of bad configuration payload errors on IKE-interface')
apSecurityIkeInterfaceIkeBadHashErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadHashErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadHashErrors.setDescription('The count of incorrect PSK or Key ID errors on IKE-interface')
apSecurityIkeInterfaceIkeBadIDErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadIDErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadIDErrors.setDescription('The count of bad ID payload errors on IKE-interface')
apSecurityIkeInterfaceIkeBadID2Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadID2Errors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadID2Errors.setDescription('The count of bad ID or TS payload errors on IKE-interface')
apSecurityIkeInterfaceIkeBadKeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadKeErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadKeErrors.setDescription('The count of invalid or missing KE Payload errors on IKE-interface')
apSecurityIkeInterfaceIkeBadLenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadLenErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadLenErrors.setDescription('The count of bad message length errors on IKE-interface')
apSecurityIkeInterfaceIkeBadMsgErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadMsgErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadMsgErrors.setDescription('The count of bad message errors on IKE-interface')
apSecurityIkeInterfaceIkeBadMsgIdErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadMsgIdErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadMsgIdErrors.setDescription('The count of bad message id errors on IKE-interface')
apSecurityIkeInterfaceIkeBadNATDErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadNATDErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadNATDErrors.setDescription('The count of unexpected or missing NAT-D Notify Payload errors on IKE-interface')
apSecurityIkeInterfaceIkeBadNonceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadNonceErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadNonceErrors.setDescription('The count of bad nonce value errors on IKE-interface')
apSecurityIkeInterfaceIkeBadNotifyCookieErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadNotifyCookieErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadNotifyCookieErrors.setDescription('The count of bad notify cookie value errors on IKE-interface')
apSecurityIkeInterfaceIkeBadPayloadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadPayloadErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadPayloadErrors.setDescription('The count of bad payload errors on IKE-interface')
apSecurityIkeInterfaceIkeBadProposalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadProposalErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadProposalErrors.setDescription('The count of bad proposal errors on IKE-interface')
apSecurityIkeInterfaceIkeBadProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadProtocolErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadProtocolErrors.setDescription('The count of bad protocol errors on IKE-interface')
apSecurityIkeInterfaceIkeBadSaErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadSaErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadSaErrors.setDescription('The count of bad security association errors on IKE-interface')
apSecurityIkeInterfaceIkeBadSigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadSigErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadSigErrors.setDescription('The count of bad signature errors on IKE-interface')
apSecurityIkeInterfaceIkeBadSpiErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadSpiErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadSpiErrors.setDescription('The count of bad Security Parameter Index errors on IKE-interface')
apSecurityIkeInterfaceIkeBadVersionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadVersionErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadVersionErrors.setDescription('The count of bad ike version errors on IKE-interface')
apSecurityIkeInterfaceIkeBadXchgErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadXchgErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBadXchgErrors.setDescription('The count of bad XCHG value errors on IKE-interface')
apSecurityIkeInterfaceIkeBufferOverflowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBufferOverflowErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeBufferOverflowErrors.setDescription('The count of buffer overflow errors on IKE-interface')
apSecurityIkeInterfaceIkeConfigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeConfigErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeConfigErrors.setDescription('The count of configuration errors on IKE-interface')
apSecurityIkeInterfaceIkeGetSaFailErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeGetSaFailErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeGetSaFailErrors.setDescription('The count of get security association errors on IKE-interface')
apSecurityIkeInterfaceIkeNewSaFailErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeNewSaFailErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeNewSaFailErrors.setDescription('The count of new security association failures on IKE-interface')
apSecurityIkeInterfaceIkeNotifyPayloadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeNotifyPayloadErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeNotifyPayloadErrors.setDescription('The count of server reported failures on IKE-interface')
apSecurityIkeInterfaceIkeNullPSKErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeNullPSKErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeNullPSKErrors.setDescription('The count of missing pre-shared key errors on IKE-interface')
apSecurityIkeInterfaceIkeMismatchErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeMismatchErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeMismatchErrors.setDescription('The count of general proposal mismatchs on IKE-interface')
apSecurityIkeInterfaceIkeMismatchAuthAlgoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeMismatchAuthAlgoErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeMismatchAuthAlgoErrors.setDescription('The count of integrity algorithm mismatchs on IKE-interface')
apSecurityIkeInterfaceIkeMismatchAuthMethodErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeMismatchAuthMethodErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeMismatchAuthMethodErrors.setDescription('The count of authentication methods mismatchs on IKE-interface')
apSecurityIkeInterfaceIkeMismatchDHGroupErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeMismatchDHGroupErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeMismatchDHGroupErrors.setDescription('The count of DH group mismatchs on IKE-interface')
apSecurityIkeInterfaceIkeMismatchEncrAlgoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeMismatchEncrAlgoErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeMismatchEncrAlgoErrors.setDescription('The count of encryption algorithm mismatchs on IKE-interface')
apSecurityIkeInterfaceIkeMismatchKeyLenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeMismatchKeyLenErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeMismatchKeyLenErrors.setDescription('The count of key length mismatchs on IKE-interface')
apSecurityIkeInterfaceCertInvalidStructErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertInvalidStructErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertInvalidStructErrors.setDescription('The count of malformed certificate errors on the IKE-interface')
apSecurityIkeInterfaceCertNotExpectedOIDErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertNotExpectedOIDErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertNotExpectedOIDErrors.setDescription('The count of OID did not match expectations errors on the IKE-interface')
apSecurityIkeInterfaceCertRsaExponentTooBigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertRsaExponentTooBigErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertRsaExponentTooBigErrors.setDescription('The count of RSA exponent was too big errors on the IKE-interface')
apSecurityIkeInterfaceCertExpiredErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertExpiredErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertExpiredErrors.setDescription('The count of Server Certificate expired errors on the IKE-interface')
apSecurityIkeInterfaceCertInvalidParentCertificateErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertInvalidParentCertificateErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertInvalidParentCertificateErrors.setDescription('The count of Server Certificates which cannot be verified errors on the IKE-interface')
apSecurityIkeInterfaceCertUnsupportedDigestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertUnsupportedDigestErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertUnsupportedDigestErrors.setDescription('The count of unsupported digest type errors on the IKE-interface')
apSecurityIkeInterfaceCertDNEStringTooLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertDNEStringTooLongErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertDNEStringTooLongErrors.setDescription('The count of distinguished Name element string too long errors on the IKE-interface')
apSecurityIkeInterfaceCertStackOverflowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertStackOverflowErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertStackOverflowErrors.setDescription('The count of certificate stack overflow errors on the IKE-interface')
apSecurityIkeInterfaceCertKeyUsageMissingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertKeyUsageMissingErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertKeyUsageMissingErrors.setDescription('The count of certificate key usage information missing errors on the IKE-interface')
apSecurityIkeInterfaceCertUnknownCriticalExtensionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertUnknownCriticalExtensionErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertUnknownCriticalExtensionErrors.setDescription('The count of certificate unknown critical extension errors on the IKE-interface')
apSecurityIkeInterfaceCertUnSupportedSignatureAlgoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertUnSupportedSignatureAlgoErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertUnSupportedSignatureAlgoErrors.setDescription('The count of unsupported signature algorithm errors on the IKE-interface')
apSecurityIkeInterfaceCertRSAModulusTooBigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertRSAModulusTooBigErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCertRSAModulusTooBigErrors.setDescription('The count of RSA modulus value too large errors on the IKE-interface')
apSecurityIkeInterfaceEapInstanceIdNotFoundErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapInstanceIdNotFoundErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapInstanceIdNotFoundErrors.setDescription('The count of EAP instance ID not found errors on the IKE-interface')
apSecurityIkeInterfaceEapInvalidPktSizeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapInvalidPktSizeErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapInvalidPktSizeErrors.setDescription('The count of EAP packet size invalid errors on the IKE-interface')
apSecurityIkeInterfaceEapInvalidMethodTypeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapInvalidMethodTypeErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapInvalidMethodTypeErrors.setDescription('The count of EAP method type invalid errors on the IKE-interface')
apSecurityIkeInterfaceEapInvalidCodeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapInvalidCodeErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapInvalidCodeErrors.setDescription('The count of EAP code invalid errors on the IKE-interface')
apSecurityIkeInterfaceEapInvalidPktErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapInvalidPktErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapInvalidPktErrors.setDescription('The count of EAP packet invalid errors on the IKE-interface')
apSecurityIkeInterfaceAuthUserUnknownErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthUserUnknownErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthUserUnknownErrors.setDescription('The count of User Unknown authentication errors on the IKE-interface')
apSecurityIkeInterfaceAuthPlmnNotAllowedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthPlmnNotAllowedErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthPlmnNotAllowedErrors.setDescription('The count of PLMN not allowed authentication errors on the IKE-interface')
apSecurityIkeInterfaceAuthNon3GppAccessToEpcNotAllowedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthNon3GppAccessToEpcNotAllowedErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthNon3GppAccessToEpcNotAllowedErrors.setDescription('The count of Non 3gpp access to EPC not allowed authentication errors on the IKE-interface')
apSecurityIkeInterfaceAuthNoApnSubscriptionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthNoApnSubscriptionErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthNoApnSubscriptionErrors.setDescription('The count of No APN subscription authentication errors on the IKE-interface')
apSecurityIkeInterfaceAuthRatTypeNotAllowedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthRatTypeNotAllowedErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthRatTypeNotAllowedErrors.setDescription('The count of RAT type not allowed authentication errors on the IKE-interface')
apSecurityIkeInterfaceAuthAuthorizationRejectedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthAuthorizationRejectedErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthAuthorizationRejectedErrors.setDescription('The count of Authorization Rejected authentication errors on the IKE-interface')
apSecurityIkeInterfaceAuthNetworkFailureErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthNetworkFailureErrors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthNetworkFailureErrors.setDescription('The count of Network Failure authentication errors on the IKE-interface')
apSecurityIkeInterfaceIkeSaCapacityExceedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeSaCapacityExceedCount.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeSaCapacityExceedCount.setDescription('The count of number of times we excceded IKE SA capacity')
apSecurityIkeInterfaceIpsecSaCapacityExceedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 3, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIpsecSaCapacityExceedCount.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIpsecSaCapacityExceedCount.setDescription('The count of number of times we excceded IPSEC SA capacity')
apSecurityTacacsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4), )
if mibBuilder.loadTexts: apSecurityTacacsTable.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsTable.setDescription('The table of all tacacs, including the system-wide\r\n\t\tconsolidated license (always index 1)')
apSecurityTacacsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1), ).setIndexNames((0, "APSECURITY-MIB", "apSecurityTacacsIndex"))
if mibBuilder.loadTexts: apSecurityTacacsEntry.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsEntry.setDescription('An entry in the table of all licenses')
apSecurityTacacsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apSecurityTacacsIndex.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsIndex.setDescription('Unique index for the tacacs table. ')
apSecurityTacacsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityTacacsServer.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsServer.setDescription('Server for last transaction')
apSecurityTacacsCliCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityTacacsCliCommands.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsCliCommands.setDescription('Number of CLI commands sent for TACACS+ accounting')
apSecurityTacacsSuccessAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityTacacsSuccessAuthentication.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsSuccessAuthentication.setDescription('Number of successful TACACS+ authentication requests')
apSecurityTacacsFailureAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityTacacsFailureAuthentication.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsFailureAuthentication.setDescription('Number of failed TACACS+ authentication requests')
apSecurityTacacsSuccessAuthorization = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityTacacsSuccessAuthorization.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsSuccessAuthorization.setDescription('Number of successful TACACS+ authorization requests')
apSecurityTacacsFailureAuthorization = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityTacacsFailureAuthorization.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsFailureAuthorization.setDescription('Number of failed TACACS+ authorization requests')
apSecurityOCSRIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 5), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityOCSRIpAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityOCSRIpAddress.setDescription('OCSR server IP address.')
apSecurityOCSRHostname = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityOCSRHostname.setStatus('current')
if mibBuilder.loadTexts: apSecurityOCSRHostname.setDescription('OCSR server hostname.')
apSecurityCrlIssuer = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityCrlIssuer.setStatus('current')
if mibBuilder.loadTexts: apSecurityCrlIssuer.setDescription('CRL issuer name.')
apSecurityCspName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityCspName.setStatus('current')
if mibBuilder.loadTexts: apSecurityCspName.setDescription('Cert-status-profile object name for fetching the CRL. \r\n\t               If the CRL is just loaded from local file, then it is \r\n\t\t       specified as file')
apSecurityIkeInterfaceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9), )
if mibBuilder.loadTexts: apSecurityIkeInterfaceInfoTable.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInfoTable.setDescription('The table of Ike Info per ike-interface for IKE negotiations.')
apSecurityIkeInterfaceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1), )
apSecurityIkeInterfaceStatsEntry.registerAugmentions(("APSECURITY-MIB", "apSecurityIkeInterfaceInfoEntry"))
apSecurityIkeInterfaceInfoEntry.setIndexNames(*apSecurityIkeInterfaceStatsEntry.getIndexNames())
if mibBuilder.loadTexts: apSecurityIkeInterfaceInfoEntry.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInfoEntry.setDescription('IKE info for an IKE-interface.')
apSecurityIkeInterfaceChildSaRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaRequest.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaRequest.setDescription('Number of Child SA Requests on the IKE-interface.')
apSecurityIkeInterfaceChildSaSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaSuccess.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaSuccess.setDescription('Number of Child SA Success on the IKE-interface.')
apSecurityIkeInterfaceChildSaFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaFail.setDescription('Number of Child SA Failures on the IKE-interface.')
apSecurityIkeInterfaceChildSaDelRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaDelRequest.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaDelRequest.setDescription('Number of Child SA Delete Requests on the IKE-interface.')
apSecurityIkeInterfaceChildSaDelSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaDelSuccess.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaDelSuccess.setDescription('Number of Child SA Delete Success on the IKE-interface.')
apSecurityIkeInterfaceChildSaDelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaDelFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaDelFail.setDescription('Number of Child SA Delete Failures on the IKE-interface.')
apSecurityIkeInterfaceChildSaRekey = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaRekey.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceChildSaRekey.setDescription('Number of Child SA Rekeys on the IKE-interface.')
apSecurityIkeInterfaceInitialChildSa = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceInitialChildSa.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInitialChildSa.setDescription('Number of Initial Child SA Establishments on the IKE-interface.')
apSecurityIkeInterfaceDPDRecvPortChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRecvPortChange.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRecvPortChange.setDescription('Number of DPD Port Change Received on the IKE-interface.')
apSecurityIkeInterfaceDPDRecvIPChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRecvIPChange.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRecvIPChange.setDescription('Number of DPD IP Change Received on the IKE-interface.')
apSecurityIkeInterfaceDPDRespRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRespRecv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRespRecv.setDescription('Number of DPD Responses Received on the IKE-interface.')
apSecurityIkeInterfaceDPDRespNotRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRespNotRecv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRespNotRecv.setDescription('Number of DPD Responses Not Received on the IKE-interface.')
apSecurityIkeInterfaceDPDRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRecv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRecv.setDescription('Number of DPD Packets Received on the IKE-interface.')
apSecurityIkeInterfaceDPDRetran = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRetran.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDRetran.setDescription('Number of DPD Packets Retransmitted on the IKE-interface.')
apSecurityIkeInterfaceDPDSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDSent.setDescription('Number of DPD Packets Sent on the IKE-interface.')
apSecurityIkeInterfaceIKESAPacketSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIKESAPacketSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIKESAPacketSent.setDescription('Number of IKE SA Packets Sent on the IKE-interface.')
apSecurityIkeInterfaceIKESAPacketRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIKESAPacketRcv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIKESAPacketRcv.setDescription('Number of IKE SA Packets Received on the IKE-interface.')
apSecurityIkeInterfaceIKESAPacketDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIKESAPacketDropped.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIKESAPacketDropped.setDescription('Number of IKE SA Packets dropped on the IKE-interface.')
apSecurityIkeInterfaceAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthFailure.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthFailure.setDescription('Number of Authentication Failures on the IKE-interface.')
apSecurityIkeInterfaceMsgError = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMsgError.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMsgError.setDescription('Number of IKE Message Errors on the IKE-interface.')
apSecurityIkeInterfaceAuthIDError = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthIDError.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthIDError.setDescription('Number of Authentication ID Errors on the IKE-interface.')
apSecurityIkeInterfaceAuthCertCheckRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthCertCheckRequest.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthCertCheckRequest.setDescription('Number of Certificate Status Requests on the IKE-interface.')
apSecurityIkeInterfaceAuthCertCheckSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthCertCheckSuccess.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthCertCheckSuccess.setDescription('Number of Certificate Status Success on the IKE-interface.')
apSecurityIkeInterfaceAuthCertCheckFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthCertCheckFailure.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceAuthCertCheckFailure.setDescription('Number of Certificate Status Failures on the IKE-interface.')
apSecurityIkeInterfaceDDosSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDDosSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDDosSent.setDescription('Number of DDoS Sent on the IKE-interface.')
apSecurityIkeInterfaceDDosRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDDosRecv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDDosRecv.setDescription('Number of DDoS Received on the IKE-interface.')
apSecurityIkeInterfaceMessageRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMessageRetrans.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMessageRetrans.setDescription('Number of IKE Message Retransmissions on the IKE-interface.')
apSecurityIkeInterfaceSAInitMsgRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAInitMsgRecv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAInitMsgRecv.setDescription('Number of IKE_SA_INIT messages received on the IKE-interface.')
apSecurityIkeInterfaceSAInitMsgSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAInitMsgSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAInitMsgSent.setDescription('Number of IKE_SA_INIT messages sent on the IKE-interface.')
apSecurityIkeInterfaceSAEstablishmentAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAEstablishmentAttempts.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAEstablishmentAttempts.setDescription('Number of IKE_SA establishment attempts on the IKE-interface.')
apSecurityIkeInterfaceSAEstablishmentSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAEstablishmentSuccess.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceSAEstablishmentSuccess.setDescription('Number of IKE_SA establishment success on the IKE-interface.')
apSecurityIkeInterfaceTunnelRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceTunnelRate.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceTunnelRate.setDescription('Number of Tunnels per second averaged over 100sec window on the IKE-interface.')
apSecurityIkeInterfaceCurrentChildSaPair = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceCurrentChildSaPair.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceCurrentChildSaPair.setDescription('Current number of Child Security Association Pairs (Tunnels) on the IKE-interface.')
apSecurityIkeInterfaceBlacklistAuthIDError = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceBlacklistAuthIDError.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceBlacklistAuthIDError.setDescription('Number of Authentication ID Errors on the IKE-interface (blacklist).')
apSecurityIkeInterfaceRekeyOnSNoverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceRekeyOnSNoverflow.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceRekeyOnSNoverflow.setDescription('Number of rekeys due to SN overflow on the IKE-interface.')
apSecurityIkeInterfaceDPDFailSaDel = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDFailSaDel.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDPDFailSaDel.setDescription("Number of SA's deleted due to DPD failure on the IKE-interface.")
apSecurityIkeInterfaceEapOnlyAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapOnlyAuthentication.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapOnlyAuthentication.setDescription('Number of EAP_ONLY Auth requested by UEs on the IKE-interface.')
apSecurityIkeInterfaceEapOnlyWithAuthPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapOnlyWithAuthPayload.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapOnlyWithAuthPayload.setDescription('Number of IKE_AUTH requests which contains both AUTH payload and EAP_ONLY notification on the IKE-interface.')
apSecurityIkeInterfaceEapSimSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapSimSucc.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapSimSucc.setDescription('Number of successul authentications through eap-sim method on the IKE-interface.')
apSecurityIkeInterfaceEapSimFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapSimFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapSimFail.setDescription('Number of  authentication failures through eap-sim method on the IKE-interface.')
apSecurityIkeInterfaceEapAkaSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAkaSucc.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAkaSucc.setDescription('Number of successul authentications through eap-aka method on the IKE-interface.')
apSecurityIkeInterfaceEapAkaFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAkaFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAkaFail.setDescription('Number of  authentication failures through eap-sim method on the IKE-interface.')
apSecurityIkeInterfaceEapAkaPrimeSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAkaPrimeSucc.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAkaPrimeSucc.setDescription('Number of successul authentications through eap-aka-prime method on the IKE-interface.')
apSecurityIkeInterfaceEapAkaPrimeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAkaPrimeFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapAkaPrimeFail.setDescription('Number of  authentication failures through eap-aka-prime method on the IKE-interface.')
apSecurityIkeInterfaceEapTlsSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapTlsSucc.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapTlsSucc.setDescription('Number of successul authentications through eap-tls method on the IKE-interface.')
apSecurityIkeInterfaceEapTlsFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapTlsFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapTlsFail.setDescription('Number of  authentication failures through eap-tls method on the IKE-interface.')
apSecurityIkeInterfaceEapTtlsSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapTtlsSucc.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapTtlsSucc.setDescription('Number of successul authentications through eap-ttls method on the IKE-interface.')
apSecurityIkeInterfaceEapTtlsFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapTtlsFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapTtlsFail.setDescription('Number of  authentication failures through eap-ttls method on the IKE-interface.')
apSecurityIkeInterfaceEapOtherSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapOtherSucc.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapOtherSucc.setDescription('Number of successul authentications through other eap methods on the IKE-interface.')
apSecurityIkeInterfaceEapOtherFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapOtherFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapOtherFail.setDescription('Number of  authentication failures through other eap methods on the IKE-interface.')
apSecurityIkeInterfaceNatKeepAliveMsgsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceNatKeepAliveMsgsRecv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceNatKeepAliveMsgsRecv.setDescription('Number of NAT Keep Alive messages received on the IKE-interface.')
apSecurityIkeInterfaceBroadcastOrMulticastMsgcRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceBroadcastOrMulticastMsgcRecv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceBroadcastOrMulticastMsgcRecv.setDescription('Number of Broadcast or Multicast  messages received on the IKE-interface.')
apSecurityIkeInterfaceIkeSaAuthMsgsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeSaAuthMsgsRecv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeSaAuthMsgsRecv.setDescription('Number of IKE AUTH messages received on the IKE-interface.')
apSecurityIkeInterfaceIkeSaAuthMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeSaAuthMsgsSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeSaAuthMsgsSent.setDescription('Number of IKE AUTH messages sent on the IKE-interface.')
apSecurityIkeInterfaceIkeSaChildMsgsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeSaChildMsgsRecv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeSaChildMsgsRecv.setDescription('Number of IKE CHILD messages received on the IKE-interface.')
apSecurityIkeInterfaceIkeSaChildMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeSaChildMsgsSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeSaChildMsgsSent.setDescription('Number of IKE CHILD messages sent on the IKE-interface.')
apSecurityIkeInterfaceIkeSaInfoMsgsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeSaInfoMsgsRecv.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeSaInfoMsgsRecv.setDescription('Number of IKE INFO messages received on the IKE-interface.')
apSecurityIkeInterfaceIkeSaInfoMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeSaInfoMsgsSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeSaInfoMsgsSent.setDescription('Number of IKE INFO  messages sent on the IKE-interface.')
apSecurityIkeInterfaceInIkeSaRekeyRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceInIkeSaRekeyRequest.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInIkeSaRekeyRequest.setDescription('Number of IKE SA Rekey requests received on the IKE-interface.')
apSecurityIkeInterfaceInIkeSaRekeyRequestSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceInIkeSaRekeyRequestSuccess.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInIkeSaRekeyRequestSuccess.setDescription('Number of successful IKE SA Rekey requests received on the IKE-interface.')
apSecurityIkeInterfaceInIkeSaRekeyRequestFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceInIkeSaRekeyRequestFailure.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInIkeSaRekeyRequestFailure.setDescription('Number of failure IKE SA Rekey requests received on the IKE-interface.')
apSecurityIkeInterfaceOutIkeSaRekeyRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceOutIkeSaRekeyRequest.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceOutIkeSaRekeyRequest.setDescription('Number of IKE SA Rekey requests sent on the IKE-interface.')
apSecurityIkeInterfaceOutIkeSaRekeyRequestSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceOutIkeSaRekeyRequestSuccess.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceOutIkeSaRekeyRequestSuccess.setDescription('Number of successful IKE SA Rekey requests sent on the IKE-interface.')
apSecurityIkeInterfaceOutIkeSaRekeyRequestFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceOutIkeSaRekeyRequestFailure.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceOutIkeSaRekeyRequestFailure.setDescription('Number of failure IKE SA Rekey requests sent on the IKE-interface.')
apSecurityIkeInterfaceInIkeSaDeleteRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceInIkeSaDeleteRequest.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInIkeSaDeleteRequest.setDescription('Number of IKE SA Delete requests received on the IKE-interface.')
apSecurityIkeInterfaceInIkeSaDeleteRequestSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceInIkeSaDeleteRequestSuccess.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInIkeSaDeleteRequestSuccess.setDescription('Number of successful IKE SA Delete requests received on the IKE-interface.')
apSecurityIkeInterfaceInIkeSaDeleteRequestFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceInIkeSaDeleteRequestFailure.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInIkeSaDeleteRequestFailure.setDescription('Number of failure IKE SA Delete requests received on the IKE-interface.')
apSecurityIkeInterfaceOutIkeSaDeleteRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceOutIkeSaDeleteRequest.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceOutIkeSaDeleteRequest.setDescription('Number of IKE SA Delete requests sent on the IKE-interface.')
apSecurityIkeInterfaceHalfOpenSecurityAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceHalfOpenSecurityAssociations.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceHalfOpenSecurityAssociations.setDescription('Number of Half Open Security Associations on the IKE-interface.')
apSecurityIkeInterfaceIkeTunnelAvgHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 70), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeTunnelAvgHoldTime.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeTunnelAvgHoldTime.setDescription('IKE Tunnel Average Hold Time on the IKE-interface from system reset or latest stats reset.')
apSecurityIkeInterfaceIkeTunnelAvgSetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 71), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeTunnelAvgSetupTime.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeTunnelAvgSetupTime.setDescription('IKE Tunnel Average Setup Time on the IKE-interface from system reset or latest stats reset.')
apSecurityIkeInterfaceMobikeSupportRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeSupportRequest.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeSupportRequest.setDescription('Number of Mobike Support requests recevied on the IKE-interface.')
apSecurityIkeInterfaceMobikeSupportResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeSupportResponse.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeSupportResponse.setDescription('Number of Mobike Support response send on the IKE-interface.')
apSecurityIkeInterfaceMobikeUpdateSAAddrRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeUpdateSAAddrRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeUpdateSAAddrRcvd.setDescription('Number of Mobike Update SA Requests received on the IKE-interface.')
apSecurityIkeInterfaceMobikeUpdateSASuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeUpdateSASuccess.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeUpdateSASuccess.setDescription('Number of Mobike Update SA succesfully completed on the IKE-interface.')
apSecurityIkeInterfaceMobikeUpdateSAAddrFamMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeUpdateSAAddrFamMismatch.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeUpdateSAAddrFamMismatch.setDescription('Number of Mobike Update SA request with IP address family mismatch on the IKE-interface.')
apSecurityIkeInterfaceMobikeUpdateSAFailUnexpUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeUpdateSAFailUnexpUpdate.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeUpdateSAFailUnexpUpdate.setDescription('Number of Unexpected Mobike Update SA requests on the IKE-interface.')
apSecurityIkeInterfaceMobikeUpdateSASameAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeUpdateSASameAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeUpdateSASameAddress.setDescription('Number of Mobike Update SA requests with same address on the IKE-interface.')
apSecurityIkeInterfaceMobikeUpdateSAFailInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeUpdateSAFailInternal.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeUpdateSAFailInternal.setDescription('Number of Mobike Update SA address fail internal on the IKE-interface.')
apSecurityIkeInterfaceMobikeReturnRouteCheckRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeReturnRouteCheckRequests.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeReturnRouteCheckRequests.setDescription('Number of Mobike Return Routability Check Requests sent on the IKE-interface.')
apSecurityIkeInterfaceMobikeFailToSendRouteCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeFailToSendRouteCheck.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeFailToSendRouteCheck.setDescription('Number of Mobike Return Routability Check Requests failed to sent on the IKE-interface.')
apSecurityIkeInterfaceMobikeReturnRouteCheckSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeReturnRouteCheckSuccess.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeReturnRouteCheckSuccess.setDescription('Number of Mobike Return Routability Check Success on the IKE-interface.')
apSecurityIkeInterfaceMobikeReturnRouteCheckTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeReturnRouteCheckTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeReturnRouteCheckTimeout.setDescription('Number of Mobike Return Routability Check Timeouts on the IKE-interface.')
apSecurityIkeInterfaceMobikeRouteCheckFailSAdel = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeRouteCheckFailSAdel.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeRouteCheckFailSAdel.setDescription('Number of IKE SAs deleted because of Return Routability Check failure on the IKE-interface.')
apSecurityIkeInterfaceMobikeIntSaCommFailSaDel = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeIntSaCommFailSaDel.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeIntSaCommFailSaDel.setDescription('Number of IKE SAs deleted because of Internal SA Communication failure on the IKE-interface.')
apSecurityIkeInterfaceMobikeMisMatchCookie2Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeMisMatchCookie2Errors.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeMisMatchCookie2Errors.setDescription('Number of Mobike COOKIE2 mismatch errors in Return Routability Response on the IKE-interface.')
apSecurityIkeInterfaceTunnelTearDownRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 9, 1, 87), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityIkeInterfaceTunnelTearDownRate.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceTunnelTearDownRate.setDescription('Number of Tunnels tear down per second averaged over 5sec window on the IKE-interface.')
apSecurityCertificateTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10), )
if mibBuilder.loadTexts: apSecurityCertificateTable.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateTable.setDescription('The table of locally installed certifcate.')
apSecurityCertificateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1), ).setIndexNames((0, "APSECURITY-MIB", "apSecurityCertificateConfigId"), (0, "APSECURITY-MIB", "apSecurityCertificateIndex"))
if mibBuilder.loadTexts: apSecurityCertificateEntry.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateEntry.setDescription('The certificate entry.')
apSecurityCertificateConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: apSecurityCertificateConfigId.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateConfigId.setDescription('The internal configuration ID of the certificate. ')
apSecurityCertificateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 2), Unsigned32())
if mibBuilder.loadTexts: apSecurityCertificateIndex.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateIndex.setDescription('The internal index of the certificate. \r\n\t    Combined with configuration ID is the unique ID of a certificate ')
apSecurityCertificateRecordName = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityCertificateRecordName.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateRecordName.setDescription("The SBC's configuration record name for the certificate. ")
apSecurityCertificateCertSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityCertificateCertSubject.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateCertSubject.setDescription('The certificate subject. ')
apSecurityCertificateCertStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityCertificateCertStart.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateCertStart.setDescription('The start time and date of the certificate. ')
apSecurityCertificateCertExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityCertificateCertExpire.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateCertExpire.setDescription('The expiration time and date of the certificate. ')
apSecurityCertificateCertIssuer = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityCertificateCertIssuer.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateCertIssuer.setDescription('The issuer of the certificate.')
apSecurityCertificateCertIsCA = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 10, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityCertificateCertIsCA.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertificateCertIsCA.setDescription('Boolean value indicating if the certificate is a CA certificate.')
apSecurityDhcpInterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11), )
if mibBuilder.loadTexts: apSecurityDhcpInterfaceStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceStatsTable.setDescription('The table of Dhcp stats per dhcp-interface for DHCP negotiations.')
apSecurityDhcpInterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11, 1), ).setIndexNames((0, "APSECURITY-MIB", "apSecurityDhcpInterfaceType"), (0, "APSECURITY-MIB", "apSecurityDhcpInterfaceAddress"))
if mibBuilder.loadTexts: apSecurityDhcpInterfaceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceStatsEntry.setDescription('DHCP negotiation statistics for an DHCP-interface.')
apSecurityDhcpInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityDhcpInterfaceType.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceType.setDescription('IPAddress type of the DHCP-interface')
apSecurityDhcpInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityDhcpInterfaceAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceAddress.setDescription('IPAddress of  the DHCP-interface')
apSecurityDhcpInterfaceDisRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityDhcpInterfaceDisRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceDisRcvd.setDescription('Number of DHCP Discover Requests on the DHCP-interface.')
apSecurityDhcpInterfaceOfferSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityDhcpInterfaceOfferSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceOfferSent.setDescription('Number of DHCP Offer sent on the DHCP-interface.')
apSecurityDhcpInterfaceReqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityDhcpInterfaceReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceReqRcvd.setDescription('Number of DHCP Requests on the DHCP-interface.')
apSecurityDhcpInterfaceAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityDhcpInterfaceAckSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceAckSent.setDescription('Number of DHCP Acknowledge sent on the DHCP-interface.')
apSecurityDhcpInterfaceNAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityDhcpInterfaceNAckSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceNAckSent.setDescription('Number of DHCP NAcknowledge sent on the DHCP-interface.')
apSecurityDhcpInterfaceFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityDhcpInterfaceFailures.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceFailures.setDescription('Number of DHCP Failures on DHCP-interface.')
apSecurityDhcpInterfaceRelRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityDhcpInterfaceRelRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceRelRcvd.setDescription('Number of DHCP release requests received on the DHCP-interface.')
apSecurityDhcpInterfaceOfferTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityDhcpInterfaceOfferTimeouts.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceOfferTimeouts.setDescription('Number of Dhcp Offer timeouts happened on the DHCP-interface.')
apSecurityDhcpInterfaceLeaseTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityDhcpInterfaceLeaseTimeouts.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceLeaseTimeouts.setDescription('Number of Dhcp lease timeouts happened on the DHCP-interface.')
apSecurityDhcpInterfaceCurrentSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityDhcpInterfaceCurrentSessions.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceCurrentSessions.setDescription('Number of Dhcp sessions currently active on this DHCP-interface.')
apSecurityDhcpInterfaceMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityDhcpInterfaceMaxSessions.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceMaxSessions.setDescription('Max Number of Dhcp sessions on the DHCP-interface.')
apSecurityDhcpInterfaceTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 11, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityDhcpInterfaceTotalSessions.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceTotalSessions.setDescription('Total Number of Dhcp sessions on the DHCP-interface.')
apSecurityGtpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12), )
if mibBuilder.loadTexts: apSecurityGtpStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpStatsTable.setDescription('The table of Gtp stats per Gtp-profile for Gtp negotiations.')
apSecurityGtpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1), ).setIndexNames((0, "APSECURITY-MIB", "apSecurityGtpProfile"))
if mibBuilder.loadTexts: apSecurityGtpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpStatsEntry.setDescription('Gtp negotiation statistics for a GTP-Profile.')
apSecurityGtpProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpProfile.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpProfile.setDescription('Name of the Gtp-Profile')
apSecurityGtpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpAddressType.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpAddressType.setDescription('IPAddressType of  the Gtp Profile')
apSecurityGtpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpAddress.setDescription('IPAddress of the Gtp Server')
apSecurityGtpHost = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpHost.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpHost.setDescription('Name of the Gtp Server')
apSecurityGtpTunnelsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpTunnelsCreated.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpTunnelsCreated.setDescription('Number of Gtp tunnels created on the Gtp Profile.')
apSecurityGtpCPDPReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpCPDPReqSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpCPDPReqSent.setDescription('Number of CreatePDP request sent on the Gtp Profile.')
apSecurityGtpCPDPReqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpCPDPReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpCPDPReqRcvd.setDescription('Number of CreatePDP request received on the Gtp Profile.')
apSecurityGtpCPDPSuccRespSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpCPDPSuccRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpCPDPSuccRespSent.setDescription('Number of CreatePDP success response sent on the Gtp Profile.')
apSecurityGtpCPDPSuccRespRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpCPDPSuccRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpCPDPSuccRespRcvd.setDescription('Number of CreatePDP success response received on the Gtp Profile.')
apSecurityGtpCPDPFailRespSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpCPDPFailRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpCPDPFailRespSent.setDescription('Number of CreatePDP failed response sent on the Gtp Profile.')
apSecurityGtpCPDPFailRespRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpCPDPFailRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpCPDPFailRespRcvd.setDescription('Number of CreatePDP failed response received on the Gtp Profile.')
apSecurityGtpCPDPIncompleteRespRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpCPDPIncompleteRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpCPDPIncompleteRespRcvd.setDescription('Number of CreatePDP incomplete response received on the Gtp Profile')
apSecurityGtpCPDPRespCtxtNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpCPDPRespCtxtNotFound.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpCPDPRespCtxtNotFound.setDescription('Number of CreatePDP response context not found  messages on the Gtp Profile.')
apSecurityGtpCPDPFailInternalError = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpCPDPFailInternalError.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpCPDPFailInternalError.setDescription('Number of CreatePDP failed internal errors on the Gtp Profile.')
apSecurityGtpCPDPRespTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpCPDPRespTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpCPDPRespTimeout.setDescription('Number of CreatePDP response timeout messages on the Gtp Profile.')
apSecurityGtpUPDPReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpUPDPReqSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpUPDPReqSent.setDescription('Number of UpdatePDP request sent on the Gtp Profile.')
apSecurityGtpUPDPReqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpUPDPReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpUPDPReqRcvd.setDescription('Number of UpdatePDP request received on the Gtp Profile.')
apSecurityGtpUPDPSuccRespSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpUPDPSuccRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpUPDPSuccRespSent.setDescription('Number of UpdatePDP success response sent on the Gtp Profile.')
apSecurityGtpUPDPSuccRespRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpUPDPSuccRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpUPDPSuccRespRcvd.setDescription('Number of UpdatePDP success response received on the Gtp Profile.')
apSecurityGtpUPDPFailRespSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpUPDPFailRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpUPDPFailRespSent.setDescription('Number of UpdatePDP failed response sent on the Gtp Profile.')
apSecurityGtpUPDPFailRespRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpUPDPFailRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpUPDPFailRespRcvd.setDescription('Number of UpdatePDP failed response received on the Gtp Profile.')
apSecurityGtpUPDPRespTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpUPDPRespTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpUPDPRespTimeout.setDescription('Number of UpdatePDP responses timed out on the Gtp Profile.')
apSecurityGtpDPDPReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpDPDPReqSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpDPDPReqSent.setDescription('Number of DeletePDP request sent on the gtp Profile.')
apSecurityGtpDPDPReqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpDPDPReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpDPDPReqRcvd.setDescription('Number of DeletePDP request received on the Gtp Profile.')
apSecurityGtpDPDPSuccRespSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpDPDPSuccRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpDPDPSuccRespSent.setDescription('Number of DeletePDP success response sent on the Gtp Profile.')
apSecurityGtpDPDPSuccRespRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpDPDPSuccRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpDPDPSuccRespRcvd.setDescription('Number of DeletePDP success response received on the Gtp Profile.')
apSecurityGtpDPDPFailRespSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpDPDPFailRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpDPDPFailRespSent.setDescription('Number of DeletePDP failed response sent on the Gtp Profile.')
apSecurityGtpDPDPFailRespRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpDPDPFailRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpDPDPFailRespRcvd.setDescription('Number of DeletePDP failed response received on the Gtp Profile.')
apSecurityGtpDPDPRespTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpDPDPRespTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpDPDPRespTimeout.setDescription('Number of DeletePDP response timedout on the Gtp Profile.')
apSecurityGtpVersionNotSuppSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpVersionNotSuppSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpVersionNotSuppSent.setDescription('Number of Gtp version not supported messages sent on the Gtp Profile.')
apSecurityGtpVersionNotSuppRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpVersionNotSuppRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpVersionNotSuppRcvd.setDescription('Number of Gtp verson not supported messages received on the Gtp Profile.')
apSecurityGTPCEchoReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGTPCEchoReqSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPCEchoReqSent.setDescription('Number of Echo request sent on the control plane.')
apSecurityGTPCEchoReqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGTPCEchoReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPCEchoReqRcvd.setDescription('Number of Echo request received on the control plane.')
apSecurityGTPCEchoRespSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGTPCEchoRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPCEchoRespSent.setDescription('Number of Echo response sent on the control plane.')
apSecurityGTPCEchoRespRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGTPCEchoRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPCEchoRespRcvd.setDescription('Number of Echo response received on the control plane.')
apSecurityGTPCEchoRespTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGTPCEchoRespTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPCEchoRespTimeout.setDescription('Number of Echo response timedout on the control plane.')
apSecurityGTPUEchoReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGTPUEchoReqSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPUEchoReqSent.setDescription('Number of Echo request sent on the user plane.')
apSecurityGTPUEchoReqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGTPUEchoReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPUEchoReqRcvd.setDescription('Number of Echo request received on the user plane.')
apSecurityGTPUEchoRespSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGTPUEchoRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPUEchoRespSent.setDescription('Number of Echo response sent on the user plane.')
apSecurityGTPUEchoRespRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGTPUEchoRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPUEchoRespRcvd.setDescription('Number of Echo response received on the user plane.')
apSecurityGTPUEchoRespTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGTPUEchoRespTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPUEchoRespTimeout.setDescription('Number of Echo response timeout on the user plane.')
apSecurityGtpV2CreateSesssionReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2CreateSesssionReqSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2CreateSesssionReqSent.setDescription('Number of Create Session Requests sent on the control plane.')
apSecurityGtpV2CreateSesssionReqSentFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2CreateSesssionReqSentFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2CreateSesssionReqSentFail.setDescription('Number of Create Session Requests send failed on the control plane.')
apSecurityGtpV2CreateSessionRespRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2CreateSessionRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2CreateSessionRespRcvd.setDescription('Number of Create Session Response Received on the control plane.')
apSecurityGtpV2CreateSessionRespFailRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2CreateSessionRespFailRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2CreateSessionRespFailRcvd.setDescription('Number of Failed Create Session Response Received on the control plane.')
apSecurityGtpV2CreateSessionRespTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2CreateSessionRespTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2CreateSessionRespTimeout.setDescription('Number of Create Session Response timeout on the control plane.')
apSecurityGtpV2DeleteSessionReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2DeleteSessionReqSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2DeleteSessionReqSent.setDescription('Number of Delete Session Request sent on the control plane.')
apSecurityGtpV2DeleteSessionReqSentFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2DeleteSessionReqSentFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2DeleteSessionReqSentFail.setDescription('Number of Delete Session Request sent Failed on the control plane.')
apSecurityGtpV2DeleteSessionRespRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2DeleteSessionRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2DeleteSessionRespRcvd.setDescription('Number of Delete Session Response Received on the control plane.')
apSecurityGtpV2DeleteSessionRespRcvdFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2DeleteSessionRespRcvdFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2DeleteSessionRespRcvdFail.setDescription('Number of Failed Delete Session Response Received on the control plane.')
apSecurityGtpV2DeleteSessionRespTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2DeleteSessionRespTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2DeleteSessionRespTimeout.setDescription('Number of Delete Session Response Timeout on the control plane.')
apSecurityGtpV2DeleteBearerReqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2DeleteBearerReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2DeleteBearerReqRcvd.setDescription('Number of Delete Bearer Requests Received on the control plane.')
apSecurityGtpV2DeleteBearerReqRcvdFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2DeleteBearerReqRcvdFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2DeleteBearerReqRcvdFail.setDescription('Number of Failed Delete Bearer Requests Received on the control plane.')
apSecurityGtpV2DeleteBearerRespSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2DeleteBearerRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2DeleteBearerRespSent.setDescription('Number of Delete Bearer Responses sent on the control plane.')
apSecurityGtpV2DeleteBearerRespSentFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2DeleteBearerRespSentFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2DeleteBearerRespSentFail.setDescription('Number of Failed Delete Bearer Responses sent on the control plane.')
apSecurityGtpV2CreateBearerReqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2CreateBearerReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2CreateBearerReqRcvd.setDescription('Number of Create Bearer Requests Received on the control plane.')
apSecurityGtpV2CreateBearerReqRcvdFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2CreateBearerReqRcvdFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2CreateBearerReqRcvdFail.setDescription('Number of Failed Create Bearer Requests Received on the control plane.')
apSecurityGtpV2CreateBearerRespSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2CreateBearerRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2CreateBearerRespSent.setDescription('Number of Create Bearer Responses sent on the control plane.')
apSecurityGtpV2CreateBearerRespSentFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2CreateBearerRespSentFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2CreateBearerRespSentFail.setDescription('Number of Failed Create Bearer Responses sent on the control plane.')
apSecurityGtpV2UpdateBearerReqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2UpdateBearerReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2UpdateBearerReqRcvd.setDescription('Number of Update Bearer Requests Received on the control plane.')
apSecurityGtpV2UpdateBearerReqRcvdFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2UpdateBearerReqRcvdFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2UpdateBearerReqRcvdFail.setDescription('Number of Failed Update Bearer Requests Received on the control plane.')
apSecurityGtpV2UpdateBearerRespSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2UpdateBearerRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2UpdateBearerRespSent.setDescription('Number of Update Bearer Responses sent on the control plane.')
apSecurityGtpV2UpdateBearerRespSentFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2UpdateBearerRespSentFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2UpdateBearerRespSentFail.setDescription('Number of Failed Update Bearer Responses sent on the control plane.')
apSecurityGTPErrorIndRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGTPErrorIndRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPErrorIndRcvd.setDescription('Number of Error Indication Messages received on the control plane.')
apSecurityGtpV2CreateSessRespPPMAddFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2CreateSessRespPPMAddFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2CreateSessRespPPMAddFail.setDescription('Number of PPM Add failure for Create Session Responses received.')
apSecurityGtpV2DeleteBReqRcvdPPMDelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2DeleteBReqRcvdPPMDelFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2DeleteBReqRcvdPPMDelFail.setDescription('Number of PPM Add failure for Delete Bearer Requests received.')
apSecurityGtpV2CreateBReqPPMAddFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2CreateBReqPPMAddFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2CreateBReqPPMAddFail.setDescription('Number of PPM Add failure for Create Bearer Requests received.')
apSecurityGtpV2UpdateBReqPPMUpdateFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2UpdateBReqPPMUpdateFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2UpdateBReqPPMUpdateFail.setDescription('Number of PPM Add failure for Update Bearer Requests received.')
apSecurityGtpV2StandbyDefBrerPPMAddFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2StandbyDefBrerPPMAddFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2StandbyDefBrerPPMAddFail.setDescription('Number of Default Bearer Add failure in Standby.')
apSecurityGtpV2StandbyDedBrerPPMAddFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2StandbyDedBrerPPMAddFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2StandbyDedBrerPPMAddFail.setDescription('Number of Dedicated Bearer Add failure in Standby.')
apSecurityGtpV2StandbyDefBrerPPMDelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2StandbyDefBrerPPMDelFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2StandbyDefBrerPPMDelFail.setDescription('Number of Default Bearer Delete failure in Standby.')
apSecurityGtpV2StandbyDedBrerPPMDelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 12, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpV2StandbyDedBrerPPMDelFail.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpV2StandbyDedBrerPPMDelFail.setDescription('Number of Dedicated Bearer Delete failure in Standby.')
apSecurityGtpErrorStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13), )
if mibBuilder.loadTexts: apSecurityGtpErrorStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpErrorStatsTable.setDescription('The table of Gtp error stats per Gtp-profile for Gtp negotiations.')
apSecurityGtpErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1), )
apSecurityGtpStatsEntry.registerAugmentions(("APSECURITY-MIB", "apSecurityGtpErrorStatsEntry"))
apSecurityGtpErrorStatsEntry.setIndexNames(*apSecurityGtpStatsEntry.getIndexNames())
if mibBuilder.loadTexts: apSecurityGtpErrorStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpErrorStatsEntry.setDescription('Gtp negotiation error statistics for  GTP-Profile.')
apSecurityGtpMsgDiffVer = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpMsgDiffVer.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpMsgDiffVer.setDescription('The count of  messages with different Gtp version on Gtp profile.')
apSecurityGtpInvalidMsgLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpInvalidMsgLen.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpInvalidMsgLen.setDescription('The count of Gtp messages with invalid length on Gtp profile.')
apSecurityGtpUnknownMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpUnknownMsg.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpUnknownMsg.setDescription('The count of unknown Gtp messages on Gtp profile.')
apSecurityGtpUnexpectedMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpUnexpectedMsg.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpUnexpectedMsg.setDescription('The count of unexpected Gtp messages on Gtp profile.')
apSecurityGtpMissingMandIE = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpMissingMandIE.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpMissingMandIE.setDescription('The count of Gtp messages missing mandatory IE on Gtp profile')
apSecurityGtpMissingReqIE = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpMissingReqIE.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpMissingReqIE.setDescription('The count of Gtp messages missing required IE on Gtp profile.')
apSecurityGtpMissingContIE = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpMissingContIE.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpMissingContIE.setDescription('The count of Gtp messages missing conditional IE on Gtp profile.')
apSecurityGtpInvalidIELen = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpInvalidIELen.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpInvalidIELen.setDescription('The count of Gtp messages with Invalid IE length on Gtp profile.')
apSecurityGtpInvalidMandIE = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpInvalidMandIE.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpInvalidMandIE.setDescription('The count of Gtp messages with invalid mandatory IE on Gtp profile.')
apSecurityGtpInvalidOptIE = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpInvalidOptIE.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpInvalidOptIE.setDescription('The count of Gtp messages with invalid optional IE on Gtp profile.')
apSecurityGtpUnknownIE = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpUnknownIE.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpUnknownIE.setDescription('The count of Gtp messages with unknown IE on Gtp profile.')
apSecurityGtpInvalidSeqIE = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpInvalidSeqIE.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpInvalidSeqIE.setDescription('The count of Gtp messages with invalid IE sequence on Gtp profile.')
apSecurityGtpUnexpectedIE = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpUnexpectedIE.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpUnexpectedIE.setDescription('The count of Gtp messages with unexpected IE on Gtp profile.')
apSecurityGtpRepeatedIE = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpRepeatedIE.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpRepeatedIE.setDescription('The count of Gtp messages with repeated IE on Gtp profile.')
apSecurityGtpIncorrectOptIE = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpIncorrectOptIE.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpIncorrectOptIE.setDescription('The count of Gtp messages with incorrect optional IE on Gtp profile.')
apSecurityGtpTunnelNonExistent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpTunnelNonExistent.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpTunnelNonExistent.setDescription('The count of non existent Gtp tunnels on Gtp profile.')
apSecurityGtpInvalidMsgFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpInvalidMsgFormat.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpInvalidMsgFormat.setDescription('The count of Gtp messages with invalid format on Gtp profile.')
apSecurityGtpErrorIndCtxtNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpErrorIndCtxtNotFound.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpErrorIndCtxtNotFound.setDescription('The count of missing error indication context on Gtp profile.')
apSecurityGtpInvalidPCOFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpInvalidPCOFormat.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpInvalidPCOFormat.setDescription('The count of Gtp Messages with invalid PCO format on Gtp profile.')
apSecurityGtpSemanticTFTError = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpSemanticTFTError.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpSemanticTFTError.setDescription('The count of Semantic TFT Errors in Gtp Messages received.')
apSecurityGtpSyntacticTFTError = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpSyntacticTFTError.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpSyntacticTFTError.setDescription('The count of Syntactic TFT Errors in Gtp Messages received.')
apSecurityGtpSemanticPFError = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpSemanticPFError.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpSemanticPFError.setDescription('The count of Semantic PF Errors in Gtp Messages received.')
apSecurityGtpSyntacticPFError = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpSyntacticPFError.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpSyntacticPFError.setDescription('The count of Syntactic PF Errors in Gtp Messages received.')
apSecurityGtpInvalidAPCOFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 13, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecurityGtpInvalidAPCOFormat.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpInvalidAPCOFormat.setDescription('The count of Gtp Messages with invalid APCO format on Gtp profile.')
apSecuritySAIKEStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 1))
apSecSAIKEAddReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIKEAddReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSAIKEAddReqRcvd.setDescription('Total number of IKE SA Add requests received')
apSecSAIKEAddSuccessRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIKEAddSuccessRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIKEAddSuccessRespSent.setDescription('Total number of success responses sent for IKE SA Add requests')
apSecSAIKEAddFailRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIKEAddFailRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIKEAddFailRespSent.setDescription('Total IKE ADD-SA fail responses sent')
apSecSAIKEDelReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIKEDelReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSAIKEDelReqRcvd.setDescription('Total IKE DEL-SA requests received')
apSecSAIKEDelSuccessRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIKEDelSuccessRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIKEDelSuccessRespSent.setDescription('Total IKE DEL-SA success responses sent')
apSecSAIKEDelFailRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIKEDelFailRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIKEDelFailRespSent.setDescription('Total IKE DEL-SA fail responses sent')
apSecSAIKEAcquireReqSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIKEAcquireReqSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIKEAcquireReqSent.setDescription('Total IKE ACQUIRE-SA requests sent')
apSecSAIKEAcquireSuccessRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIKEAcquireSuccessRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSAIKEAcquireSuccessRespRcvd.setDescription('Total IKE ACQUIRE-SA success responses received')
apSecSAIKEAcquireFailRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIKEAcquireFailRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSAIKEAcquireFailRespRcvd.setDescription('Total IKE ACQUIRE-SA fail responses received')
apSecSAIKEAcquireTransactionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIKEAcquireTransactionTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecSAIKEAcquireTransactionTimeout.setDescription('Total IKE ACQUIRE-SA transaction timeouts')
apSecSAIKESaCreated = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIKESaCreated.setStatus('current')
if mibBuilder.loadTexts: apSecSAIKESaCreated.setDescription('Total number of IKE SA added')
apSecSAIKESaCreateFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIKESaCreateFailed.setStatus('current')
if mibBuilder.loadTexts: apSecSAIKESaCreateFailed.setDescription('Total number of IKE SA add failed')
apSecSAIKESaDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIKESaDeleted.setStatus('current')
if mibBuilder.loadTexts: apSecSAIKESaDeleted.setDescription('Total number of IKE SA deleted')
apSecSAIKESaDeleteFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIKESaDeleteFailed.setStatus('current')
if mibBuilder.loadTexts: apSecSAIKESaDeleteFailed.setDescription('Total number of IKE SA delete failed')
apSecuritySAIMSAKAStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2))
apSecSAIMSAKAAddReqSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAAddReqSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAAddReqSent.setDescription('Total number of IMS-AKA SA ADD requests sent')
apSecSAIMSAKAAddReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAAddReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAAddReqRcvd.setDescription('Total number of IMS-AKA SA ADD requests received')
apSecSAIMSAKAAddSuccessRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAAddSuccessRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAAddSuccessRespSent.setDescription('Total IMS-AKA ADD-SA success responses sent')
apSecSAIMSAKAAddSuccessRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAAddSuccessRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAAddSuccessRespRcvd.setDescription('Total IMS-AKA ADD-SA success responses received')
apSecSAIMSAKAAddFailRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailRespSent.setDescription('Total IMS-AKA ADD-SA fail responses sent')
apSecSAIMSAKAAddFailInvalidParamRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailInvalidParamRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailInvalidParamRespSent.setDescription('Total IMS-AKA ADD-SA fail messages sent due to invalid parameter')
apSecSAIMSAKAAddFailRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailRespRcvd.setDescription('Total IMS-AKA ADD-SA fail responses received')
apSecSAIMSAKAAddFailAddrMaskMismatch = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailAddrMaskMismatch.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailAddrMaskMismatch.setDescription('Total IMS-AKA ADD-SA fail messages sent due to address mask mismatch')
apSecSAIMSAKAAddFailProtoParamsInvalid = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailProtoParamsInvalid.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailProtoParamsInvalid.setDescription('Total IMS-AKA ADD-SA fail messages sent due to invalid protocol parameters')
apSecSAIMSAKAAddFailProtoDataInvalid = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailProtoDataInvalid.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailProtoDataInvalid.setDescription('Total IMS-AKA ADD-SA fail messages sent due to invalid protocol data')
apSecSAIMSAKAAddTransactionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAAddTransactionTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAAddTransactionTimeout.setDescription('Total IMS-AKA ADD-SA transaction timeouts')
apSecSAIMSAKADelReqSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKADelReqSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKADelReqSent.setDescription('Total IMS-AKA DEL-SA requests sent')
apSecSAIMSAKADelReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKADelReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKADelReqRcvd.setDescription('Total IMS-AKA DEL-SA requests received')
apSecSAIMSAKADelSuccessRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKADelSuccessRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKADelSuccessRespSent.setDescription('Total IMS-AKA DEL-SA success responses sent')
apSecSAIMSAKADelSuccessRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKADelSuccessRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKADelSuccessRespRcvd.setDescription('Total IMS-AKA DEL-SA success responses received')
apSecSAIMSAKADelFailRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKADelFailRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKADelFailRespSent.setDescription('Total IMS-AKA DEL-SA fail responses sent')
apSecSAIMSAKADelFailInvalidParamRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKADelFailInvalidParamRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKADelFailInvalidParamRespSent.setDescription('Total IMS-AKA DEL-SA fail messages sent due to invalid parameter')
apSecSAIMSAKADelFailRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKADelFailRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKADelFailRespRcvd.setDescription('Total IMS-AKA DEL-SA fail responses received')
apSecSAIMSAKADelTransactionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKADelTransactionTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKADelTransactionTimeout.setDescription('Total IMS-AKA DEL-SA messages resulting from transaction timeouts')
apSecSAIMSAKADelDueToTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKADelDueToTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKADelDueToTimeout.setDescription('Total IMS-AKA DEL-SA messages resulting from timeouts')
apSecSAIMSAKAModReqSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAModReqSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAModReqSent.setDescription('Total IMS-AKA MOD-SA requests sent')
apSecSAIMSAKAModReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAModReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAModReqRcvd.setDescription('Total IMS-AKA MOD-SA requests received')
apSecSAIMSAKAModSuccessRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAModSuccessRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAModSuccessRespSent.setDescription('Total IMS-AKA MOD-SA success responses sent')
apSecSAIMSAKAModSuccessRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAModSuccessRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAModSuccessRespRcvd.setDescription('Total IMS-AKA MOD-SA success responses received')
apSecSAIMSAKAModFailRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAModFailRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAModFailRespSent.setDescription('Total IMS-AKA MOD-SA fail responses sent')
apSecSAIMSAKAModFailInvalidParamRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAModFailInvalidParamRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAModFailInvalidParamRespSent.setDescription('Total IMS-AKA MOD-SA fail messages sent due to invalid parameter')
apSecSAIMSAKAModFailRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAModFailRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAModFailRespRcvd.setDescription('Total IMS-AKA MOD-SA fail responses received')
apSecSAIMSAKAModTransactionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAModTransactionTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAModTransactionTimeout.setDescription('Total IMS-AKA MOD-SA messages resulting from transaction timeouts')
apSecSAIMSAKASaCreated = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaCreated.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaCreated.setDescription('Total number of IMS-AKA SA added')
apSecSAIMSAKASaCreatedInboundSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaCreatedInboundSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaCreatedInboundSent.setDescription('Total IMS-AKA SA added in inbound')
apSecSAIMSAKASaCreatedOutboundSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaCreatedOutboundSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaCreatedOutboundSent.setDescription('Total IMS-AKA SA added in outbound')
apSecSAIMSAKASaCreateFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaCreateFailed.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaCreateFailed.setDescription('Total IMS-AKA SA addition failed')
apSecSAIMSAKASaCreatePPMInboundFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaCreatePPMInboundFailed.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaCreatePPMInboundFailed.setDescription('Total IMS-AKA SA Add inbound PPM failed')
apSecSAIMSAKASaCreatePPMOutboundFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaCreatePPMOutboundFailed.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaCreatePPMOutboundFailed.setDescription('Total IMS-AKA SA Add outbound PPM failed')
apSecSAIMSAKASaDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaDeleted.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaDeleted.setDescription('Total number of IMS-AKA SA deleted')
apSecSAIMSAKASaDeletedInboundSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaDeletedInboundSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaDeletedInboundSent.setDescription('Total number of IMS-AKA SA deleted in the inbound')
apSecSAIMSAKASaDeletedOutboundSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaDeletedOutboundSent.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaDeletedOutboundSent.setDescription('Total number of IMS-AKA SA deleted in the outbound')
apSecSAIMSAKASaDelFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaDelFailed.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaDelFailed.setDescription('Total number of IMS-AKA SA Delete failed')
apSecSAIMSAKASaDelPPMInboundFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaDelPPMInboundFailed.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaDelPPMInboundFailed.setDescription('Total number of IMS-AKA SA Delete inbound PPM failed')
apSecSAIMSAKASaDelPPMOutboundFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaDelPPMOutboundFailed.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaDelPPMOutboundFailed.setDescription('Total number of IMS-AKA SA Delete outbound PPM failed')
apSecSAIMSAKASaDelFailAddrMaskMismatch = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaDelFailAddrMaskMismatch.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaDelFailAddrMaskMismatch.setDescription('Total number of IMS-AKA SA Delete failed due to address mask mismatch')
apSecSAIMSAKASaDelFailProtoParamsInvalid = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaDelFailProtoParamsInvalid.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaDelFailProtoParamsInvalid.setDescription('Total number of IMS-AKA SA Delete failed due to invalid protocol parameters')
apSecSAIMSAKASaDelFailProtoDataInvalid = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaDelFailProtoDataInvalid.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaDelFailProtoDataInvalid.setDescription('Total number of IMS-AKA SA Delete failed due to invalid protocol data')
apSecSAIMSAKASaCollision = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaCollision.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaCollision.setDescription('Total number of IMS-AKA SA collisions')
apSecSAIMSAKASaCollisionRecoveryFail = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaCollisionRecoveryFail.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaCollisionRecoveryFail.setDescription('Total number of IMS-AKA SA collision recovery failed')
apSecSAIMSAKASaCollisionRecoverySuccess = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaCollisionRecoverySuccess.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaCollisionRecoverySuccess.setDescription('Total number of IMS-AKA SA collision recovery successful')
apSecSAIMSAKASaCollisionRecoveryLkupFail = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaCollisionRecoveryLkupFail.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaCollisionRecoveryLkupFail.setDescription('Total number of IMS-AKA SA collisions recovery lookup failed')
apSecSAIMSAKASaKeyNotFound = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaKeyNotFound.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaKeyNotFound.setDescription('Total number of IMS-AKA SA key not found event')
apSecSAIMSAKASaKeyNotFoundTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaKeyNotFoundTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaKeyNotFoundTimeout.setDescription('Total number of IMS-AKA SA key not found timeout event')
apSecSAIMSAKASaKeyExists = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaKeyExists.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaKeyExists.setDescription('Total number of IMS-AKA SA key exists event')
apSecSAIMSAKASaRecovery = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaRecovery.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaRecovery.setDescription('Total number of IMS-AKA SA recovery event')
apSecSAIMSAKASaRecoveryFail = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaRecoveryFail.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaRecoveryFail.setDescription('Total number of IMS-AKA SA recovery fail event')
apSecSAIMSAKASaTransactionQueue = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaTransactionQueue.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaTransactionQueue.setDescription('Total count of IMS-AKA SA trans queue')
apSecSAIMSAKASaRedundancySyncQueue = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaRedundancySyncQueue.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaRedundancySyncQueue.setDescription('Total count of IMS-AKA SA redundancy queue')
apSecSAIMSAKASaInboundOnly = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaInboundOnly.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaInboundOnly.setDescription('Total count of IMS-AKA SA inbound record')
apSecSAIMSAKASaOutboundOnly = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaOutboundOnly.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaOutboundOnly.setDescription('Total count of IMS-AKA SA outbound record')
apSecSAIMSAKAAddFailInvalidTimer = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailInvalidTimer.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailInvalidTimer.setDescription('Total number of times IMS-AKA SA invalid timer event occurred')
apSecSAIMSAKAAddFailTableInsertFail = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailTableInsertFail.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAAddFailTableInsertFail.setDescription('Total number of times IMS-AKA SA add in table failed')
apSecSAIMSAKASendAddToRed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASendAddToRed.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASendAddToRed.setDescription('Total number of times IMS-AKA SA sent ADD event to redundant peer')
apSecSAIMSAKASendModToRed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASendModToRed.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASendModToRed.setDescription('Total number of times IMS-AKA SA sent MODIFY event to redundant peer')
apSecSAIMSAKARcvdAddFromActive = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARcvdAddFromActive.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARcvdAddFromActive.setDescription('Total number of times IMS-AKA SA received ADD event from active')
apSecSAIMSAKARcvdModFromActive = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARcvdModFromActive.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARcvdModFromActive.setDescription('Total number of times IMS-AKA SA received MODIFY event from active')
apSecSAIMSAKASaRedAddRecFailure = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASaRedAddRecFailure.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASaRedAddRecFailure.setDescription('Total number of IMS-AKA SA ADD to redundancy queue failed')
apSecSAIMSAKAInvalidRedAction = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAInvalidRedAction.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAInvalidRedAction.setDescription('Total number of IMS-AKA invalid redundant actions')
apSecSAIMSAKASendTimedDelToRed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASendTimedDelToRed.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASendTimedDelToRed.setDescription('Total number of times IMS-AKA Timed Delete event sent to redundant peer')
apSecSAIMSAKARcvdTimedDelFromAct = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARcvdTimedDelFromAct.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARcvdTimedDelFromAct.setDescription('Total number of times IMS-AKA Timed Delete event received from active')
apSecSAIMSAKASAAgentSAReqTransQueueSize = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASAAgentSAReqTransQueueSize.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASAAgentSAReqTransQueueSize.setDescription('SA request transaction queue size of the security association agent')
apSecSAIMSAKASAAgentAllowTransQuota = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASAAgentAllowTransQuota.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASAAgentAllowTransQuota.setDescription('Allowed transaction quota of the security association agent')
apSecSAIMSAKASAAgentDelayDeleteCount = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASAAgentDelayDeleteCount.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASAAgentDelayDeleteCount.setDescription('Delay delete count of the security association agent')
apSecSAIMSAKASAAgentMaxTransQueueSize = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKASAAgentMaxTransQueueSize.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKASAAgentMaxTransQueueSize.setDescription('Maximum transaction queue size of the security association agent')
apSecSAIMSAKARegsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsTotal.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsTotal.setDescription('Total number of registration messages received')
apSecSAIMSAKARegsFromUnprotPort = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsFromUnprotPort.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsFromUnprotPort.setDescription('Total number of unprotected registration messages received')
apSecSAIMSAKARegsFromUnprotPortBeforeExpiry = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsFromUnprotPortBeforeExpiry.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsFromUnprotPortBeforeExpiry.setDescription('Total number of unprotected registration messages received before expiry')
apSecSAIMSAKARegsInProtPortPriorDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsInProtPortPriorDisconnect.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsInProtPortPriorDisconnect.setDescription('Total number of prior disconnects on the inbound')
apSecSAIMSAKARegsOutProtPortPriorDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsOutProtPortPriorDisconnect.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsOutProtPortPriorDisconnect.setDescription('Total number of prior disconnects on the outbound')
apSecSAIMSAKAAnswerBeforeChallenge = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAAnswerBeforeChallenge.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAAnswerBeforeChallenge.setDescription('Total number of registration answer messages received before challenge')
apSecSAIMSAKARegsFromPotectedPort = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsFromPotectedPort.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsFromPotectedPort.setDescription('Total number of protected registration messages received')
apSecSAIMSAKARegsInitRegRejectBusy = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsInitRegRejectBusy.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsInitRegRejectBusy.setDescription('Total number of initial registration messages rejected with busy error code')
apSecSAIMSAKARegsInitRegRejectResource = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsInitRegRejectResource.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsInitRegRejectResource.setDescription('Total number of initial registration messages rejected because of resource unavailability')
apSecSAIMSAKARegsInitRegFailedAllocIms = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsInitRegFailedAllocIms.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsInitRegFailedAllocIms.setDescription('Total number of initial registration messages rejected because of memory allocation failure')
apSecSAIMSAKARegsInitRegImsExist = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsInitRegImsExist.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsInitRegImsExist.setDescription('Total number of initial registration messages for which IMS entry already exists')
apSecSAIMSAKARegsInitRegFailedSecurityHeader = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsInitRegFailedSecurityHeader.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsInitRegFailedSecurityHeader.setDescription('Total number of initial registration messages received with bad security header')
apSecSAIMSAKARegsInitRegPassedQuota = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsInitRegPassedQuota.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsInitRegPassedQuota.setDescription('Total number of initial registration messages that passed the quota')
apSecSAIMSAKARegsReRegRejectBusy = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsReRegRejectBusy.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsReRegRejectBusy.setDescription('Total number of re-registration messages rejected with busy error code')
apSecSAIMSAKARegsReRegRejectResource = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsReRegRejectResource.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsReRegRejectResource.setDescription('Total number of re-registration messages rejected because of resource unavailability')
apSecSAIMSAKARegsReRegFailedSecurityHeader = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsReRegFailedSecurityHeader.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsReRegFailedSecurityHeader.setDescription('Total number of re-registration messages received with bad security header')
apSecSAIMSAKARegsReRegNoImsEntry = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsReRegNoImsEntry.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsReRegNoImsEntry.setDescription('Total number of re-registration messages for which no IMS entry exists')
apSecSAIMSAKARegsReRegPassedQuota = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegsReRegPassedQuota.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegsReRegPassedQuota.setDescription('Total number of re-registration messages that passed the quota')
apSecSAIMSAKARegForwardUnProtectReg = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKARegForwardUnProtectReg.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKARegForwardUnProtectReg.setDescription('Total number of unprotected re-registration messages that were forwarded')
apSecSAIMSAKAReuseSpiFalse = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAReuseSpiFalse.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAReuseSpiFalse.setDescription('Total number of re-registration messages for which re-use SPI is false')
apSecSAIMSAKAReuseSpiTrue = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAReuseSpiTrue.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAReuseSpiTrue.setDescription('Total number of re-registration messages for which re-use SPI is true')
apSecSAIMSAKAIncompleteReg = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 2, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSAIMSAKAIncompleteReg.setStatus('current')
if mibBuilder.loadTexts: apSecSAIMSAKAIncompleteReg.setDescription('Total number of re-registration messages resulting in incomplete registration')
apSecuritySASRTPStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3))
apSecSASRTPAddReqSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPAddReqSent.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPAddReqSent.setDescription('Total number of SRTP SA ADD requests sent')
apSecSASRTPAddReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPAddReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPAddReqRcvd.setDescription('Total number of SRTP SA ADD requests received')
apSecSASRTPAddSuccessRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPAddSuccessRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPAddSuccessRespSent.setDescription('Total SRTP ADD-SA success responses sent')
apSecSASRTPAddSuccessRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPAddSuccessRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPAddSuccessRespRcvd.setDescription('Total SRTP ADD-SA success response received')
apSecSASRTPAddFailRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPAddFailRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPAddFailRespSent.setDescription('Total SRTP ADD-SA fail responses sent')
apSecSASRTPAddFailRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPAddFailRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPAddFailRespRcvd.setDescription('Total SRTP ADD-SA fail responses received')
apSecSASRTPAddTransactionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPAddTransactionTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPAddTransactionTimeout.setDescription('Total SRTP ADD-SA transaction timeouts')
apSecSASRTPDelReqSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPDelReqSent.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPDelReqSent.setDescription('Total SRTP DEL-SA requests sent')
apSecSASRTPDelReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPDelReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPDelReqRcvd.setDescription('Total SRTP DEL-SA requests received')
apSecSASRTPDelSuccessRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPDelSuccessRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPDelSuccessRespSent.setDescription('Total SRTP DEL-SA success responses sent')
apSecSASRTPDelSuccessRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPDelSuccessRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPDelSuccessRespRcvd.setDescription('Total SRTP DEL-SA success responses received')
apSecSASRTPDelFailRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPDelFailRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPDelFailRespSent.setDescription('Total SRTP DEL-SA fail responses sent')
apSecSASRTPDelFailRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPDelFailRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPDelFailRespRcvd.setDescription('Total SRTP DEL-SA fail responses received')
apSecSASRTPDelTransactionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPDelTransactionTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPDelTransactionTimeout.setDescription('Total SRTP DEL-SA transaction timeouts')
apSecSASRTPModReqSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPModReqSent.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPModReqSent.setDescription('Total SRTP MOD-SA requests sent')
apSecSASRTPModReqRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPModReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPModReqRcvd.setDescription('Total SRTP MOD-SA requests received')
apSecSASRTPModSuccessRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPModSuccessRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPModSuccessRespSent.setDescription('Total SRTP MOD-SA success response sent')
apSecSASRTPModSuccessRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPModSuccessRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPModSuccessRespRcvd.setDescription('Total SRTP MOD-SA success responses received')
apSecSASRTPModFailRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPModFailRespSent.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPModFailRespSent.setDescription('Total SRTP MOD-SA fail responses sent')
apSecSASRTPModFailRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPModFailRespRcvd.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPModFailRespRcvd.setDescription('Total SRTP MOD-SA fail responses received')
apSecSASRTPModTransactionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPModTransactionTimeout.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPModTransactionTimeout.setDescription('Total SRTP MOD-SA transaction timeouts')
apSecSASRTPSaCreated = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPSaCreated.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPSaCreated.setDescription('Total SRTP SA added')
apSecSASRTPSaCreateFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPSaCreateFailed.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPSaCreateFailed.setDescription('Total SRTP SA add failed')
apSecSASRTPSaDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPSaDeleted.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPSaDeleted.setDescription('Total SRTP SA deleted')
apSecSASRTPSaDeleteFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPSaDeleteFailed.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPSaDeleteFailed.setDescription('Total SRTP SA delete failed')
apSecSASRTPSaCollision = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPSaCollision.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPSaCollision.setDescription('Total SRTP SA collision')
apSecSASRTPSaKeyNotFound = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 5, 3, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSecSASRTPSaKeyNotFound.setStatus('current')
if mibBuilder.loadTexts: apSecSASRTPSaKeyNotFound.setDescription('Total SRTP SA key not found event')
apSecurityNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2))
apSecuritySpi = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecuritySpi.setStatus('current')
if mibBuilder.loadTexts: apSecuritySpi.setDescription('Tunnel security-policy-index.')
apSecuritySrcIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecuritySrcIpAddress.setStatus('current')
if mibBuilder.loadTexts: apSecuritySrcIpAddress.setDescription('Source IP address.')
apSecurityDstIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityDstIpAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityDstIpAddress.setDescription('Destination IP address.')
apSecurityIPSECMode = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tunnel", 0), ("transport", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityIPSECMode.setStatus('current')
if mibBuilder.loadTexts: apSecurityIPSECMode.setDescription('IPSec mode.')
apSecurityEncryptionAlg = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 0), ("alg-des", 1), ("alg-3des", 2), ("alg-blowfish", 3), ("alg-aes", 4), ("null", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityEncryptionAlg.setStatus('current')
if mibBuilder.loadTexts: apSecurityEncryptionAlg.setDescription('Type of the encryption algorithms supported in the tunnel setup.')
apSecurityAuthAlg = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("any", 0), ("md5", 1), ("sha1", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityAuthAlg.setStatus('current')
if mibBuilder.loadTexts: apSecurityAuthAlg.setDescription('Type of the authentication algorithms supported in the tunnel setup.')
apSecuritySecProtocol = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ah", 0), ("esp", 1), ("esp-auth", 2), ("esp-null", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecuritySecProtocol.setStatus('current')
if mibBuilder.loadTexts: apSecuritySecProtocol.setDescription('Type of the security protocol supported in the tunnel setup.')
apSecurityFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("incorrect-id", 0), ("incorrect-user-passwd", 1), ("incorrect-shared-secret", 2), ("incorrect-dh-group", 3), ("incorrect-encryption-alg", 4), ("incorrect-auth-alg", 5), ("incorrect-sec-protocol", 6), ("incorrect-hash", 7), ("incorrect-mode", 8), ("service-unavailable", 9), ("access-reject", 10), ("initiator-timeout", 11), ("invalid-certificate", 12), ("authentication-failure", 13), ("authorization-failure", 14), ("accounting-failure", 15)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityFailureCause.setStatus('current')
if mibBuilder.loadTexts: apSecurityFailureCause.setDescription('Reason for failure in the IKE, IPSec or RADIUS areas.')
apSecurityFailureArea = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ike", 0), ("ipsec", 1), ("radius", 2), ("tacacs", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityFailureArea.setStatus('current')
if mibBuilder.loadTexts: apSecurityFailureArea.setDescription('Where the failure happened.')
apSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityStatus.setStatus('current')
if mibBuilder.loadTexts: apSecurityStatus.setDescription('Status.')
apSecurityDateTime = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityDateTime.setStatus('current')
if mibBuilder.loadTexts: apSecurityDateTime.setDescription('Time as configured at the Net-Net SBC when an\r\n\t\t\tevent completes.')
apSecurityUser = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityUser.setStatus('current')
if mibBuilder.loadTexts: apSecurityUser.setDescription('User name')
apSecurityPeerPort = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 13), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityPeerPort.setStatus('current')
if mibBuilder.loadTexts: apSecurityPeerPort.setDescription('IKE peer port')
apSecurityPeerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 14), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityPeerIpAddress.setDescription('IKE peer IP address.')
apSecurityCRLServer = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityCRLServer.setStatus('current')
if mibBuilder.loadTexts: apSecurityCRLServer.setDescription('CRL Server FQDN if configured.')
apSecurityCRLRetrievalFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("internal", 0), ("incorrect-response", 1), ("timeout", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityCRLRetrievalFailureCause.setStatus('current')
if mibBuilder.loadTexts: apSecurityCRLRetrievalFailureCause.setDescription('Reason for failure in the CRL retrieval.')
apSecurityLastSuccessfulCRLRetrieval = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 17), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityLastSuccessfulCRLRetrieval.setStatus('current')
if mibBuilder.loadTexts: apSecurityLastSuccessfulCRLRetrieval.setDescription('Last successful CRL retrieval.')
apSecurityCRLServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 18), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityCRLServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityCRLServerIPAddress.setDescription('CRL Server IP address.')
apSecurityGTPProfileName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityGTPProfileName.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPProfileName.setDescription('GTP Profile Name configured.')
apSecurityGTPHostName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 20), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityGTPHostName.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPHostName.setDescription('GGSN/PGW Host Name if configured.')
apSecurityGTPLinkFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("internal", 0), ("timeout", 1), ("versionError", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityGTPLinkFailureCause.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPLinkFailureCause.setDescription('Reason for failure in the GTPCRL retrieval.')
apSecurityGTPIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 22), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityGTPIPAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPIPAddress.setDescription('GGSN/PGW  IP address.')
apSecuritySrcAddressFamily = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 23), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecuritySrcAddressFamily.setStatus('current')
if mibBuilder.loadTexts: apSecuritySrcAddressFamily.setDescription('Source IP address family IPv4 or IPv6.')
apSecuritySrcAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 24), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecuritySrcAddress.setStatus('current')
if mibBuilder.loadTexts: apSecuritySrcAddress.setDescription('Source IP address.')
apSecurityDstAddressFamily = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 25), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityDstAddressFamily.setStatus('current')
if mibBuilder.loadTexts: apSecurityDstAddressFamily.setDescription('Destination IP address family IPv4 or IPv6.')
apSecurityDstAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 26), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityDstAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityDstAddress.setDescription('Destination IP address.')
apSecurityPeerAddressFamily = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 27), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityPeerAddressFamily.setStatus('current')
if mibBuilder.loadTexts: apSecurityPeerAddressFamily.setDescription('IKE peer IP address family IPv4 or IPv6.')
apSecurityPeerAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 28), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityPeerAddress.setStatus('current')
if mibBuilder.loadTexts: apSecurityPeerAddress.setDescription('IKE peer IP address.')
apSecurityTacacsDownLocalAuthUsed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityTacacsDownLocalAuthUsed.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsDownLocalAuthUsed.setDescription('The username that was authenticated locally by the system.')
apSecuritySrcPort = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 32), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecuritySrcPort.setStatus('current')
if mibBuilder.loadTexts: apSecuritySrcPort.setDescription('Source/Client port of a secure connection')
apSecurityDstPort = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 33), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityDstPort.setStatus('current')
if mibBuilder.loadTexts: apSecurityDstPort.setDescription('Destination/Server port of a secure connection')
apSecurityTlsSessionId = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityTlsSessionId.setStatus('current')
if mibBuilder.loadTexts: apSecurityTlsSessionId.setDescription('TLS session identifier octet string')
apSecurityTlsPacketFailureCount = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 35), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityTlsPacketFailureCount.setStatus('current')
if mibBuilder.loadTexts: apSecurityTlsPacketFailureCount.setDescription('Number of TLS packet failed to decrypt or encrypt')
apSecurityTlsCipherSuite = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("tls-DHE-RSA-WITH-AES-256-GCM-SHA384", 0), ("tls-DHE-RSA-WITH-AES-256-CBC-SHA256", 1), ("tls-DHE-RSA-WITH-AES-256-CBC-SHA", 2), ("tls-RSA-WITH-AES-256-GCM-SHA384", 3), ("tls-RSA-WITH-AES-256-CBC-SHA256", 4), ("tls-RSA-WITH-AES-256-CBC-SHA", 5), ("tls-DHE-RSA-WITH-AES-128-GCM-SHA256", 6), ("tls-DHE-RSA-WITH-AES-128-CBC-SHA256", 7), ("tls-DHE-RSA-WITH-AES-128-CBC-SHA", 8), ("tls-RSA-WITH-AES-128-GCM-SHA256", 9), ("tls-RSA-WITH-AES-128-CBC-SHA256", 10), ("tls-RSA-WITH-AES-128-CBC-SHA", 11), ("tls-DHE-RSA-WITH-3DES-EDE-CBC-SHA", 12), ("tls-RSA-WITH-3DES-EDE-CBC-SHA", 13), ("tls-RSA-WITH-NULL-SHA256", 14), ("tls-RSA-WITH-NULL-SHA", 15), ("tls-RSA-WITH-NULL-MD5", 16), ("tls-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256", 17), ("tls-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384", 18), ("tls-ECDHE-RSA-WITH-AES-256-GCM-SHA384", 19), ("tls-ECDHE-RSA-WITH-AES-128-GCM-SHA256", 20), ("tls-ECDHE-RSA-WITH-AES-256-CBC-SHA384", 21), ("tls-ECDHE-RSA-WITH-AES-128-CBC-SHA256", 22)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityTlsCipherSuite.setStatus('current')
if mibBuilder.loadTexts: apSecurityTlsCipherSuite.setDescription('List of supported TLS cipher suites.')
apSecurityTlsDecryptionFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("bad-mac-decode", 0), ("bad-read-state", 1), ("decryption-failed", 2), ("decryption-failed-bad-record-mac", 3), ("illegal-padding", 4), ("packet-length-too-long", 5), ("encrypted-length-too-long", 6), ("record-too-small", 7), ("record-length-too-short", 8), ("block-cipher-pad-is-wrong", 9)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityTlsDecryptionFailureCause.setStatus('current')
if mibBuilder.loadTexts: apSecurityTlsDecryptionFailureCause.setDescription('Reason for failure in the TLS decryption.')
apSecurityTlsEncryptionFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("bad-write-retry", 0), ("write-bio-not-set", 1), ("bad-length", 2), ("memory-alloc-failure", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityTlsEncryptionFailureCause.setStatus('current')
if mibBuilder.loadTexts: apSecurityTlsEncryptionFailureCause.setDescription('Reason for failure in the TLS encryption.')
apSecuritySrtpEncryptionFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("packet-too-small", 0), ("stream-not-found", 1), ("key-expired", 2), ("replay-old", 3), ("replay-failed", 4), ("auth-init-failed", 5), ("stream-alloc-failed", 6), ("encrypt-parse-error", 7), ("cipher-failed", 8), ("auth-failed", 9)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecuritySrtpEncryptionFailureCause.setStatus('current')
if mibBuilder.loadTexts: apSecuritySrtpEncryptionFailureCause.setDescription('Reason for failure in the SRTP encryption.')
apSecuritySrtpDecryptionFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("packet-too-small", 0), ("stream-not-found", 1), ("key-expired", 2), ("replay-old", 3), ("replay-failed", 4), ("mki-changed", 5), ("cipher-failed", 6), ("auth-tag-failed", 7), ("invalid-rtp-packet", 8), ("auth-init-failed", 9), ("decrypt-parse-error", 10)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecuritySrtpDecryptionFailureCause.setStatus('current')
if mibBuilder.loadTexts: apSecuritySrtpDecryptionFailureCause.setDescription('Reason for failure in the SRTP decryption.')
apSecuritySrtpEncrAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("null", 0), ("aes-icm", 1), ("aes-cbc", 2), ("aes-gcm", 3), ("aes-f8", 4), ("aria-cm", 5), ("aria-cbc", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecuritySrtpEncrAlgorithm.setStatus('current')
if mibBuilder.loadTexts: apSecuritySrtpEncrAlgorithm.setDescription('Type of the encryption algorithms supported by SRTP')
apSecuritySrtpAuthAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("null", 0), ("hmac-sha1", 1), ("hmac-md5", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecuritySrtpAuthAlgorithm.setStatus('current')
if mibBuilder.loadTexts: apSecuritySrtpAuthAlgorithm.setDescription('Type of the authentication algorithms supported by SRTP')
apSecurityNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3))
apSecurityAuthNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1))
apSecurityAuthNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1, 0))
apSecurityTunnelFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1, 0, 1)).setObjects(("APSECURITY-MIB", "apSecuritySpi"), ("APSECURITY-MIB", "apSecuritySrcIpAddress"), ("APSECURITY-MIB", "apSecurityDstIpAddress"), ("APSECURITY-MIB", "apSecurityFailureCause"), ("APSECURITY-MIB", "apSecurityFailureArea"), ("APSECURITY-MIB", "apSecurityStatus"))
if mibBuilder.loadTexts: apSecurityTunnelFailureNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityTunnelFailureNotification.setDescription('The notification will be generated whenever IPSEC IKEV2 tunnel fails to \r\n\t      establish. ')
apSecurityRadiusFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1, 0, 2)).setObjects(("APSECURITY-MIB", "apSecurityUser"), ("APSECURITY-MIB", "apSecurityFailureCause"), ("APSECURITY-MIB", "apSecurityFailureArea"), ("APSECURITY-MIB", "apSecurityStatus"))
if mibBuilder.loadTexts: apSecurityRadiusFailureNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityRadiusFailureNotification.setDescription('The notification will be generated whenever Radius authentication request fails.')
apSecurityAuthFailureThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1, 0, 3)).setObjects(("APSECURITY-MIB", "apSecurityUser"), ("APSECURITY-MIB", "apSecurityPeerIpAddress"), ("APSECURITY-MIB", "apSecurityPeerPort"))
if mibBuilder.loadTexts: apSecurityAuthFailureThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityAuthFailureThresholdNotification.setDescription('The notification will be generated when IKE DDos auth-failure-threshold is reached and\r\n\t      report mode includes SNMP trap')
apSecurityTacacsFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1, 0, 4)).setObjects(("APSECURITY-MIB", "apSecurityUser"), ("APSECURITY-MIB", "apSecurityFailureCause"), ("APSECURITY-MIB", "apSecurityFailureArea"), ("APSECURITY-MIB", "apSecurityStatus"))
if mibBuilder.loadTexts: apSecurityTacacsFailureNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsFailureNotification.setDescription('The notification will be generated whenever TACACS authentication requests fail.')
apSecurityTunnelFailureInetNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1, 0, 5)).setObjects(("APSECURITY-MIB", "apSecuritySpi"), ("APSECURITY-MIB", "apSecuritySrcAddressFamily"), ("APSECURITY-MIB", "apSecuritySrcAddress"), ("APSECURITY-MIB", "apSecurityDstAddressFamily"), ("APSECURITY-MIB", "apSecurityDstAddress"), ("APSECURITY-MIB", "apSecurityFailureCause"), ("APSECURITY-MIB", "apSecurityFailureArea"), ("APSECURITY-MIB", "apSecurityStatus"))
if mibBuilder.loadTexts: apSecurityTunnelFailureInetNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityTunnelFailureInetNotification.setDescription('The notification will be generated whenever IPSEC IKEV2 tunnel fails to \r\n\t      establish. ')
apSecurityAuthFailureThresholdInetNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 1, 0, 6)).setObjects(("APSECURITY-MIB", "apSecurityUser"), ("APSECURITY-MIB", "apSecurityPeerAddressFamily"), ("APSECURITY-MIB", "apSecurityPeerAddress"), ("APSECURITY-MIB", "apSecurityPeerPort"))
if mibBuilder.loadTexts: apSecurityAuthFailureThresholdInetNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityAuthFailureThresholdInetNotification.setDescription('The notification will be generated when IKE DDos auth-failure-threshold is reached and\r\n\t      report mode includes SNMP trap')
apSecurityGeneralNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 2))
apSecurityGeneralNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 2, 0))
apSecurityTunnelDPDNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 2, 0, 1)).setObjects(("APSECURITY-MIB", "apSecuritySpi"), ("APSECURITY-MIB", "apSecuritySrcIpAddress"), ("APSECURITY-MIB", "apSecurityDstIpAddress"), ("APSECURITY-MIB", "apSecurityFailureArea"), ("APSECURITY-MIB", "apSecurityStatus"))
if mibBuilder.loadTexts: apSecurityTunnelDPDNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityTunnelDPDNotification.setDescription('The notification will be generated whenever IPSEC IKEV2 tunnel fails \r\n\t      due to Dead Peer Detection(DPD). ')
apSecurityIPsecTunCapNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 2, 0, 2)).setObjects(("APSECURITY-MIB", "apSecurityIPsecTunCapPct"))
if mibBuilder.loadTexts: apSecurityIPsecTunCapNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityIPsecTunCapNotification.setDescription('This notification is sent when the percentage of licensed\r\n\t\tIPsec tunnels exceeds an IPsec tunnel alarm threshold.\r\n\t\tThe apSecurityIPsecTunCapPct object indicates the current\r\n\t\tpercentage.')
apSecurityIPsecTunCapClearNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 2, 0, 3)).setObjects(("APSECURITY-MIB", "apSecurityIPsecTunCapPct"))
if mibBuilder.loadTexts: apSecurityIPsecTunCapClearNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityIPsecTunCapClearNotification.setDescription('This trap is sent when the percentage of licensed IPsec\r\n\t\ttunnels no longer exceeds an IPsec tunnel alarm threshold.\r\n\t\tThe apSecurityIPsecTunCapPct object indicates the current\r\n\t\tpercentage.')
apSecurityTunnelDPDInetNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 2, 0, 4)).setObjects(("APSECURITY-MIB", "apSecuritySpi"), ("APSECURITY-MIB", "apSecuritySrcAddressFamily"), ("APSECURITY-MIB", "apSecuritySrcAddress"), ("APSECURITY-MIB", "apSecurityDstAddressFamily"), ("APSECURITY-MIB", "apSecurityDstAddress"), ("APSECURITY-MIB", "apSecurityFailureArea"), ("APSECURITY-MIB", "apSecurityStatus"))
if mibBuilder.loadTexts: apSecurityTunnelDPDInetNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityTunnelDPDInetNotification.setDescription('The notification will be generated whenever IPSEC IKEV2 tunnel fails \r\n\t      due to Dead Peer Detection(DPD). ')
apSecurityOCSRNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 3))
apSecurityOCSRNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 3, 0))
apSecurityOCSRDownNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 3, 0, 1)).setObjects(("APSECURITY-MIB", "apSecurityOCSRHostname"), ("APSECURITY-MIB", "apSecurityOCSRIpAddress"))
if mibBuilder.loadTexts: apSecurityOCSRDownNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityOCSRDownNotification.setDescription('This notification is sent when a OCSR server\r\n\t\tbecomes unreachable.')
apSecurityOCSRUpNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 3, 0, 2)).setObjects(("APSECURITY-MIB", "apSecurityOCSRHostname"), ("APSECURITY-MIB", "apSecurityOCSRIpAddress"))
if mibBuilder.loadTexts: apSecurityOCSRUpNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityOCSRUpNotification.setDescription('This notification is sent when a OCSR server\r\n\t\tbecomes reachable.')
apSecurityCrlNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 4))
apSecurityCrlNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 4, 0))
apSecurityCrlInvalidNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 4, 0, 1)).setObjects(("APSECURITY-MIB", "apSecurityCrlIssuer"), ("APSECURITY-MIB", "apSecurityCspName"))
if mibBuilder.loadTexts: apSecurityCrlInvalidNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityCrlInvalidNotification.setDescription('This notification is sent when an invalid CRL\r\n\t\tis detected.')
apSecurityCRLRetrievalNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 5))
apSecurityCRLRetrievalNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 5, 0))
apSecurityCRLRetrievalFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 5, 0, 1)).setObjects(("APSECURITY-MIB", "apSecurityCRLServer"), ("APSECURITY-MIB", "apSecurityCRLRetrievalFailureCause"), ("APSECURITY-MIB", "apSecurityLastSuccessfulCRLRetrieval"), ("APSECURITY-MIB", "apSecurityCRLServerIPAddress"))
if mibBuilder.loadTexts: apSecurityCRLRetrievalFailNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityCRLRetrievalFailNotification.setDescription('This notification is sent when there is a \r\n\t\tfailure in CRL retrieval.')
apSecurityCRLRetrievalClearNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 5, 0, 2)).setObjects(("APSECURITY-MIB", "apSecurityCRLServer"), ("APSECURITY-MIB", "apSecurityCRLServerIPAddress"))
if mibBuilder.loadTexts: apSecurityCRLRetrievalClearNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityCRLRetrievalClearNotification.setDescription('This notification is sent when there is a \r\n\t\tsuccess in CRL retrieval.')
apSecurityCertNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 6))
apSecurityCertNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 6, 0))
apSecurityCertExpiredNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 6, 0, 1)).setObjects(("APSECURITY-MIB", "apSecurityCertificateRecordName"), ("APSECURITY-MIB", "apSecurityCertificateCertSubject"), ("APSECURITY-MIB", "apSecurityCertificateCertExpire"), ("APSECURITY-MIB", "apSecurityCertificateCertIssuer"))
if mibBuilder.loadTexts: apSecurityCertExpiredNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertExpiredNotification.setDescription('The notification will be generated periodically if a locally installed\r\n               certificate has expired. ')
apSecurityCertExpireSoonNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 6, 0, 2)).setObjects(("APSECURITY-MIB", "apSecurityCertificateRecordName"), ("APSECURITY-MIB", "apSecurityCertificateCertSubject"), ("APSECURITY-MIB", "apSecurityCertificateCertExpire"), ("APSECURITY-MIB", "apSecurityCertificateCertIssuer"))
if mibBuilder.loadTexts: apSecurityCertExpireSoonNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertExpireSoonNotification.setDescription('The notification will be generated periodically if a locally installed\r\n               certificate will soon expire. ')
apSecurityGTPFailureNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 7))
apSecurityGTPFailureNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 7, 0))
apSecurityGTPLinkFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 7, 0, 1)).setObjects(("APSECURITY-MIB", "apSecurityGTPProfileName"), ("APSECURITY-MIB", "apSecurityGTPHostName"), ("APSECURITY-MIB", "apSecurityGTPLinkFailureCause"), ("APSECURITY-MIB", "apSecurityGTPIPAddress"))
if mibBuilder.loadTexts: apSecurityGTPLinkFailureNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPLinkFailureNotification.setDescription('This notification is sent when there is a link failure with GGSN/PGW on GTP Profile.')
apSecurityGTPLinkClearNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 7, 0, 2)).setObjects(("APSECURITY-MIB", "apSecurityGTPProfileName"), ("APSECURITY-MIB", "apSecurityGTPHostName"), ("APSECURITY-MIB", "apSecurityGTPIPAddress"))
if mibBuilder.loadTexts: apSecurityGTPLinkClearNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPLinkClearNotification.setDescription('This notification is sent when the link is restored with GGSN/PGW on GTP Profile.')
apSecurityTacacsNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 9))
apSecurityTacacsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 9, 0))
apSecurityTacacsDownLocalAuthUsedTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 9, 0, 1)).setObjects(("APSECURITY-MIB", "apSecurityTacacsDownLocalAuthUsed"))
if mibBuilder.loadTexts: apSecurityTacacsDownLocalAuthUsedTrap.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsDownLocalAuthUsedTrap.setDescription('The trap will be generated when a user remotely logs into a system configured for \r\n            TACACS+ authentication and is authenticated locally by the system because all of \r\n            the configured and enabled TACACS+ servers have become unreachable or unresponsive.')
apSecurityTacacsDownLocalAuthUsedClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 9, 0, 2))
if mibBuilder.loadTexts: apSecurityTacacsDownLocalAuthUsedClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsDownLocalAuthUsedClearTrap.setDescription('The trap will be generated when a user remotely logs into a system configured for \r\n            TACACS+ authentication and is successfully authenticated (i.e., access accepted or \r\n            denied) remotely by a configured and enabled TACACS+ server.')
apSecurityTlsNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 10))
apSecurityTlsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 10, 0))
apSecurityTlsEncryptionFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 10, 0, 1)).setObjects(("APSECURITY-MIB", "apSecuritySrcAddressFamily"), ("APSECURITY-MIB", "apSecuritySrcAddress"), ("APSECURITY-MIB", "apSecuritySrcPort"), ("APSECURITY-MIB", "apSecurityDstAddressFamily"), ("APSECURITY-MIB", "apSecurityDstAddress"), ("APSECURITY-MIB", "apSecurityDstPort"), ("APSECURITY-MIB", "apSecurityTlsEncryptionFailureCause"), ("APSECURITY-MIB", "apSecurityTlsCipherSuite"), ("APSECURITY-MIB", "apSecurityTlsSessionId"), ("APSECURITY-MIB", "apSecurityTlsPacketFailureCount"))
if mibBuilder.loadTexts: apSecurityTlsEncryptionFailureNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityTlsEncryptionFailureNotification.setDescription('The notification will be generated when TLS fails to \r\n\t      encrypt.')
apSecurityTlsDecryptionFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 10, 0, 2)).setObjects(("APSECURITY-MIB", "apSecuritySrcAddressFamily"), ("APSECURITY-MIB", "apSecuritySrcAddress"), ("APSECURITY-MIB", "apSecuritySrcPort"), ("APSECURITY-MIB", "apSecurityDstAddressFamily"), ("APSECURITY-MIB", "apSecurityDstAddress"), ("APSECURITY-MIB", "apSecurityDstPort"), ("APSECURITY-MIB", "apSecurityTlsDecryptionFailureCause"), ("APSECURITY-MIB", "apSecurityTlsCipherSuite"), ("APSECURITY-MIB", "apSecurityTlsSessionId"), ("APSECURITY-MIB", "apSecurityTlsPacketFailureCount"))
if mibBuilder.loadTexts: apSecurityTlsDecryptionFailureNotification.setStatus('current')
if mibBuilder.loadTexts: apSecurityTlsDecryptionFailureNotification.setDescription('The notification will be generated when TLS fails to \r\n\t      decrypt.')
apSecuritySrtpNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 11))
apSecuritySrtpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 11, 0))
apSecuritySrtpEncryptionFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 11, 0, 1)).setObjects(("APSECURITY-MIB", "apSecuritySrcAddressFamily"), ("APSECURITY-MIB", "apSecuritySrcAddress"), ("APSECURITY-MIB", "apSecuritySrcPort"), ("APSECURITY-MIB", "apSecurityDstAddressFamily"), ("APSECURITY-MIB", "apSecurityDstAddress"), ("APSECURITY-MIB", "apSecurityDstPort"), ("APSECURITY-MIB", "apSecuritySrtpEncryptionFailureCause"), ("APSECURITY-MIB", "apSecuritySrtpEncrAlgorithm"), ("APSECURITY-MIB", "apSecuritySrtpAuthAlgorithm"))
if mibBuilder.loadTexts: apSecuritySrtpEncryptionFailureNotification.setStatus('current')
if mibBuilder.loadTexts: apSecuritySrtpEncryptionFailureNotification.setDescription('The notification will be generated when SRTP fails to \r\n\t      encrypt.')
apSecuritySrtpDecryptionFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 11, 0, 2)).setObjects(("APSECURITY-MIB", "apSecuritySrcAddressFamily"), ("APSECURITY-MIB", "apSecuritySrcAddress"), ("APSECURITY-MIB", "apSecuritySrcPort"), ("APSECURITY-MIB", "apSecurityDstAddressFamily"), ("APSECURITY-MIB", "apSecurityDstAddress"), ("APSECURITY-MIB", "apSecurityDstPort"), ("APSECURITY-MIB", "apSecuritySrtpDecryptionFailureCause"), ("APSECURITY-MIB", "apSecuritySrtpEncrAlgorithm"), ("APSECURITY-MIB", "apSecuritySrtpAuthAlgorithm"))
if mibBuilder.loadTexts: apSecuritySrtpDecryptionFailureNotification.setStatus('current')
if mibBuilder.loadTexts: apSecuritySrtpDecryptionFailureNotification.setDescription('The notification will be generated when SRTP fails to \r\n\t      decrypt.')
apSecurityConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4))
apSecurityCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 1))
apSecurityGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2))
apSecurityNotificationsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3))
apSecurityIPsecTunnelsObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 1)).setObjects(("APSECURITY-MIB", "apSecurityIPsecTunCount"), ("APSECURITY-MIB", "apSecurityIPsecTunCapPct"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIPsecTunnelsObjectsGroup = apSecurityIPsecTunnelsObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIPsecTunnelsObjectsGroup.setDescription('Objects for monitoring IPsec tunnel capacity.')
apSecurityIkeInterfaceObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 2)).setObjects(("APSECURITY-MIB", "apSecurityIkeInterfaceInitCookieErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceAuthErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapAccessRequestErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapAccessChallengeErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceTsErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCpErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceKeErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceProposalErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceSyntaxErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCriticalPayloadErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapOnlyNonZeroSPI"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapOnlyNonZeroProtoId"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapOnlyUnSupEapProto"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIkeInterfaceObjectsGroup = apSecurityIkeInterfaceObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceObjectsGroup.setDescription('Objects for monitoring IKE negotiation errors.')
apSecurityTacacsObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 3)).setObjects(("APSECURITY-MIB", "apSecurityTacacsServer"), ("APSECURITY-MIB", "apSecurityTacacsCliCommands"), ("APSECURITY-MIB", "apSecurityTacacsSuccessAuthentication"), ("APSECURITY-MIB", "apSecurityTacacsFailureAuthentication"), ("APSECURITY-MIB", "apSecurityTacacsSuccessAuthorization"), ("APSECURITY-MIB", "apSecurityTacacsFailureAuthorization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityTacacsObjectsGroup = apSecurityTacacsObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsObjectsGroup.setDescription('Objects for monitoring TACACS+ transactions.')
apSecurityCertObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 4)).setObjects(("APSECURITY-MIB", "apSecurityCertificateRecordName"), ("APSECURITY-MIB", "apSecurityCertificateCertSubject"), ("APSECURITY-MIB", "apSecurityCertificateCertStart"), ("APSECURITY-MIB", "apSecurityCertificateCertExpire"), ("APSECURITY-MIB", "apSecurityCertificateCertIssuer"), ("APSECURITY-MIB", "apSecurityCertificateCertIsCA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityCertObjectsGroup = apSecurityCertObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertObjectsGroup.setDescription('Objects for managing locally installed certificates. ')
apSecurityIkeInterfaceInfoObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 5)).setObjects(("APSECURITY-MIB", "apSecurityIkeInterfaceTunnelRate"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCurrentChildSaPair"), ("APSECURITY-MIB", "apSecurityIkeInterfaceTunnelTearDownRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIkeInterfaceInfoObjectsGroup = apSecurityIkeInterfaceInfoObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceInfoObjectsGroup.setDescription('Objects for monitoring IKE interface tunnel information')
apSecurityIkeIfcBlAuthIDErrorObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 6)).setObjects(("APSECURITY-MIB", "apSecurityIkeInterfaceBlacklistAuthIDError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIkeIfcBlAuthIDErrorObjectsGroup = apSecurityIkeIfcBlAuthIDErrorObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeIfcBlAuthIDErrorObjectsGroup.setDescription('Objects for monitoring IKE interface Blacklist AuthID error information')
apSecurityDhcpInterfaceObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 7)).setObjects(("APSECURITY-MIB", "apSecurityDhcpInterfaceType"), ("APSECURITY-MIB", "apSecurityDhcpInterfaceAddress"), ("APSECURITY-MIB", "apSecurityDhcpInterfaceDisRcvd"), ("APSECURITY-MIB", "apSecurityDhcpInterfaceOfferSent"), ("APSECURITY-MIB", "apSecurityDhcpInterfaceReqRcvd"), ("APSECURITY-MIB", "apSecurityDhcpInterfaceAckSent"), ("APSECURITY-MIB", "apSecurityDhcpInterfaceNAckSent"), ("APSECURITY-MIB", "apSecurityDhcpInterfaceRelRcvd"), ("APSECURITY-MIB", "apSecurityDhcpInterfaceFailures"), ("APSECURITY-MIB", "apSecurityDhcpInterfaceRelRcvd"), ("APSECURITY-MIB", "apSecurityDhcpInterfaceOfferTimeouts"), ("APSECURITY-MIB", "apSecurityDhcpInterfaceLeaseTimeouts"), ("APSECURITY-MIB", "apSecurityDhcpInterfaceCurrentSessions"), ("APSECURITY-MIB", "apSecurityDhcpInterfaceMaxSessions"), ("APSECURITY-MIB", "apSecurityDhcpInterfaceTotalSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityDhcpInterfaceObjectsGroup = apSecurityDhcpInterfaceObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityDhcpInterfaceObjectsGroup.setDescription('Objects for monitoring DHCP interface negotiations')
apSecurityGtpProfileObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 8)).setObjects(("APSECURITY-MIB", "apSecurityGtpProfile"), ("APSECURITY-MIB", "apSecurityGtpAddressType"), ("APSECURITY-MIB", "apSecurityGtpAddress"), ("APSECURITY-MIB", "apSecurityGtpHost"), ("APSECURITY-MIB", "apSecurityGtpTunnelsCreated"), ("APSECURITY-MIB", "apSecurityGtpCPDPReqSent"), ("APSECURITY-MIB", "apSecurityGtpCPDPReqRcvd"), ("APSECURITY-MIB", "apSecurityGtpCPDPSuccRespSent"), ("APSECURITY-MIB", "apSecurityGtpCPDPSuccRespRcvd"), ("APSECURITY-MIB", "apSecurityGtpCPDPFailRespSent"), ("APSECURITY-MIB", "apSecurityGtpCPDPFailRespRcvd"), ("APSECURITY-MIB", "apSecurityGtpCPDPIncompleteRespRcvd"), ("APSECURITY-MIB", "apSecurityGtpCPDPRespCtxtNotFound"), ("APSECURITY-MIB", "apSecurityGtpCPDPFailInternalError"), ("APSECURITY-MIB", "apSecurityGtpCPDPRespTimeout"), ("APSECURITY-MIB", "apSecurityGtpUPDPReqSent"), ("APSECURITY-MIB", "apSecurityGtpUPDPReqRcvd"), ("APSECURITY-MIB", "apSecurityGtpUPDPSuccRespSent"), ("APSECURITY-MIB", "apSecurityGtpUPDPSuccRespRcvd"), ("APSECURITY-MIB", "apSecurityGtpUPDPFailRespSent"), ("APSECURITY-MIB", "apSecurityGtpUPDPFailRespRcvd"), ("APSECURITY-MIB", "apSecurityGtpUPDPRespTimeout"), ("APSECURITY-MIB", "apSecurityGtpDPDPReqSent"), ("APSECURITY-MIB", "apSecurityGtpDPDPReqRcvd"), ("APSECURITY-MIB", "apSecurityGtpDPDPSuccRespSent"), ("APSECURITY-MIB", "apSecurityGtpDPDPSuccRespRcvd"), ("APSECURITY-MIB", "apSecurityGtpDPDPFailRespSent"), ("APSECURITY-MIB", "apSecurityGtpDPDPFailRespRcvd"), ("APSECURITY-MIB", "apSecurityGtpDPDPRespTimeout"), ("APSECURITY-MIB", "apSecurityGtpVersionNotSuppSent"), ("APSECURITY-MIB", "apSecurityGtpVersionNotSuppRcvd"), ("APSECURITY-MIB", "apSecurityGTPCEchoReqSent"), ("APSECURITY-MIB", "apSecurityGTPCEchoReqRcvd"), ("APSECURITY-MIB", "apSecurityGTPCEchoRespSent"), ("APSECURITY-MIB", "apSecurityGTPCEchoRespRcvd"), ("APSECURITY-MIB", "apSecurityGTPCEchoRespTimeout"), ("APSECURITY-MIB", "apSecurityGTPUEchoReqSent"), ("APSECURITY-MIB", "apSecurityGTPUEchoReqRcvd"), ("APSECURITY-MIB", "apSecurityGTPUEchoRespSent"), ("APSECURITY-MIB", "apSecurityGTPUEchoRespRcvd"), ("APSECURITY-MIB", "apSecurityGTPUEchoRespTimeout"), ("APSECURITY-MIB", "apSecurityGtpV2CreateSesssionReqSent"), ("APSECURITY-MIB", "apSecurityGtpV2CreateSesssionReqSentFail"), ("APSECURITY-MIB", "apSecurityGtpV2CreateSessionRespRcvd"), ("APSECURITY-MIB", "apSecurityGtpV2CreateSessionRespFailRcvd"), ("APSECURITY-MIB", "apSecurityGtpV2CreateSessionRespTimeout"), ("APSECURITY-MIB", "apSecurityGtpV2DeleteSessionReqSent"), ("APSECURITY-MIB", "apSecurityGtpV2DeleteSessionReqSentFail"), ("APSECURITY-MIB", "apSecurityGtpV2DeleteSessionRespRcvd"), ("APSECURITY-MIB", "apSecurityGtpV2DeleteSessionRespRcvdFail"), ("APSECURITY-MIB", "apSecurityGtpV2DeleteSessionRespTimeout"), ("APSECURITY-MIB", "apSecurityGtpV2DeleteBearerReqRcvd"), ("APSECURITY-MIB", "apSecurityGtpV2DeleteBearerReqRcvdFail"), ("APSECURITY-MIB", "apSecurityGtpV2DeleteBearerRespSent"), ("APSECURITY-MIB", "apSecurityGtpV2DeleteBearerRespSentFail"), ("APSECURITY-MIB", "apSecurityGtpV2CreateBearerReqRcvd"), ("APSECURITY-MIB", "apSecurityGtpV2CreateBearerReqRcvdFail"), ("APSECURITY-MIB", "apSecurityGtpV2CreateBearerRespSent"), ("APSECURITY-MIB", "apSecurityGtpV2CreateBearerRespSentFail"), ("APSECURITY-MIB", "apSecurityGtpV2UpdateBearerReqRcvd"), ("APSECURITY-MIB", "apSecurityGtpV2UpdateBearerReqRcvdFail"), ("APSECURITY-MIB", "apSecurityGtpV2UpdateBearerRespSent"), ("APSECURITY-MIB", "apSecurityGtpV2UpdateBearerRespSentFail"), ("APSECURITY-MIB", "apSecurityGTPErrorIndRcvd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityGtpProfileObjectsGroup = apSecurityGtpProfileObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpProfileObjectsGroup.setDescription('Objects for monitoring Gtp profile negotiations')
apSecurityGtpErrorObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 9)).setObjects(("APSECURITY-MIB", "apSecurityGtpMsgDiffVer"), ("APSECURITY-MIB", "apSecurityGtpInvalidMsgLen"), ("APSECURITY-MIB", "apSecurityGtpUnknownMsg"), ("APSECURITY-MIB", "apSecurityGtpUnexpectedMsg"), ("APSECURITY-MIB", "apSecurityGtpMissingMandIE"), ("APSECURITY-MIB", "apSecurityGtpMissingReqIE"), ("APSECURITY-MIB", "apSecurityGtpMissingContIE"), ("APSECURITY-MIB", "apSecurityGtpInvalidIELen"), ("APSECURITY-MIB", "apSecurityGtpInvalidMandIE"), ("APSECURITY-MIB", "apSecurityGtpInvalidOptIE"), ("APSECURITY-MIB", "apSecurityGtpUnknownIE"), ("APSECURITY-MIB", "apSecurityGtpInvalidSeqIE"), ("APSECURITY-MIB", "apSecurityGtpUnexpectedIE"), ("APSECURITY-MIB", "apSecurityGtpRepeatedIE"), ("APSECURITY-MIB", "apSecurityGtpIncorrectOptIE"), ("APSECURITY-MIB", "apSecurityGtpTunnelNonExistent"), ("APSECURITY-MIB", "apSecurityGtpInvalidMsgFormat"), ("APSECURITY-MIB", "apSecurityGtpErrorIndCtxtNotFound"), ("APSECURITY-MIB", "apSecurityGtpInvalidPCOFormat"), ("APSECURITY-MIB", "apSecurityGtpSemanticTFTError"), ("APSECURITY-MIB", "apSecurityGtpSyntacticTFTError"), ("APSECURITY-MIB", "apSecurityGtpSemanticPFError"), ("APSECURITY-MIB", "apSecurityGtpSyntacticPFError"), ("APSECURITY-MIB", "apSecurityGtpInvalidAPCOFormat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityGtpErrorObjectsGroup = apSecurityGtpErrorObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpErrorObjectsGroup.setDescription('Objects for monitoring Gtp protocol errors')
apSecurityRekeyOnSNoverflowObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 10)).setObjects(("APSECURITY-MIB", "apSecurityIkeInterfaceRekeyOnSNoverflow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityRekeyOnSNoverflowObjectsGroup = apSecurityRekeyOnSNoverflowObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityRekeyOnSNoverflowObjectsGroup.setDescription('Objects for monitoring number of rekeys occurred due to SN overflows')
apSecurityIkeInterfaceDpdStatsObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 11)).setObjects(("APSECURITY-MIB", "apSecurityIkeInterfaceDPDRecvPortChange"), ("APSECURITY-MIB", "apSecurityIkeInterfaceDPDRecvIPChange"), ("APSECURITY-MIB", "apSecurityIkeInterfaceDPDRespRecv"), ("APSECURITY-MIB", "apSecurityIkeInterfaceDPDRespNotRecv"), ("APSECURITY-MIB", "apSecurityIkeInterfaceDPDRecv"), ("APSECURITY-MIB", "apSecurityIkeInterfaceDPDRetran"), ("APSECURITY-MIB", "apSecurityIkeInterfaceDPDSent"), ("APSECURITY-MIB", "apSecurityIkeInterfaceDPDFailSaDel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIkeInterfaceDpdStatsObjectsGroup = apSecurityIkeInterfaceDpdStatsObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceDpdStatsObjectsGroup.setDescription('Objects for monitoring IKE Interface DPD statistics.')
apSecurityIkeInterfaceEapOnlyAuthStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 12)).setObjects(("APSECURITY-MIB", "apSecurityIkeInterfaceEapOnlyAuthentication"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapOnlyWithAuthPayload"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapOnlyNonZeroSPI"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapOnlyNonZeroProtoId"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapOnlyUnSupEapProto"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIkeInterfaceEapOnlyAuthStatsGroup = apSecurityIkeInterfaceEapOnlyAuthStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapOnlyAuthStatsGroup.setDescription('Objects for monitoring EAP_ONLY Auth related statistics.')
apSecurityIkeInterfaceMobikeStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 17)).setObjects(("APSECURITY-MIB", "apSecurityIkeInterfaceMobikeSupportRequest"), ("APSECURITY-MIB", "apSecurityIkeInterfaceMobikeSupportResponse"), ("APSECURITY-MIB", "apSecurityIkeInterfaceMobikeUpdateSAAddrRcvd"), ("APSECURITY-MIB", "apSecurityIkeInterfaceMobikeUpdateSASuccess"), ("APSECURITY-MIB", "apSecurityIkeInterfaceMobikeUpdateSAAddrFamMismatch"), ("APSECURITY-MIB", "apSecurityIkeInterfaceMobikeUpdateSAFailUnexpUpdate"), ("APSECURITY-MIB", "apSecurityIkeInterfaceMobikeUpdateSASameAddress"), ("APSECURITY-MIB", "apSecurityIkeInterfaceMobikeUpdateSAFailInternal"), ("APSECURITY-MIB", "apSecurityIkeInterfaceMobikeReturnRouteCheckRequests"), ("APSECURITY-MIB", "apSecurityIkeInterfaceMobikeFailToSendRouteCheck"), ("APSECURITY-MIB", "apSecurityIkeInterfaceMobikeReturnRouteCheckSuccess"), ("APSECURITY-MIB", "apSecurityIkeInterfaceMobikeReturnRouteCheckTimeout"), ("APSECURITY-MIB", "apSecurityIkeInterfaceMobikeRouteCheckFailSAdel"), ("APSECURITY-MIB", "apSecurityIkeInterfaceMobikeIntSaCommFailSaDel"), ("APSECURITY-MIB", "apSecurityIkeInterfaceMobikeMisMatchCookie2Errors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIkeInterfaceMobikeStatsGroup = apSecurityIkeInterfaceMobikeStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceMobikeStatsGroup.setDescription('Objects for monitoring Mobike related statistics.')
apSecurityNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 1)).setObjects(("APSECURITY-MIB", "apSecurityTunnelFailureNotification"), ("APSECURITY-MIB", "apSecurityRadiusFailureNotification"), ("APSECURITY-MIB", "apSecurityTunnelDPDNotification"), ("APSECURITY-MIB", "apSecurityTacacsFailureNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityNotificationsGroup = apSecurityNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityNotificationsGroup.setDescription('A collection of notifications for security ')
apSecurityIPsecTunnelsNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 2)).setObjects(("APSECURITY-MIB", "apSecurityIPsecTunCapNotification"), ("APSECURITY-MIB", "apSecurityIPsecTunCapClearNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIPsecTunnelsNotificationsGroup = apSecurityIPsecTunnelsNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIPsecTunnelsNotificationsGroup.setDescription('A collection of notifications for IPsec tunnel capacity.')
apSecurityDDosNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 3)).setObjects(("APSECURITY-MIB", "apSecurityAuthFailureThresholdNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityDDosNotificationsGroup = apSecurityDDosNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityDDosNotificationsGroup.setDescription('A collection of notifications for IKEv2 DDos ')
apSecurityOCSRNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 4)).setObjects(("APSECURITY-MIB", "apSecurityOCSRDownNotification"), ("APSECURITY-MIB", "apSecurityOCSRUpNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityOCSRNotificationsGroup = apSecurityOCSRNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityOCSRNotificationsGroup.setDescription('A collection of notifications for OCSRs ')
apSecurityCrlNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 5)).setObjects(("APSECURITY-MIB", "apSecurityCrlInvalidNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityCrlNotificationsGroup = apSecurityCrlNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityCrlNotificationsGroup.setDescription('A collection of notifications for CRLs ')
apSecurityCRLRetrievalNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 6)).setObjects(("APSECURITY-MIB", "apSecurityCRLRetrievalFailNotification"), ("APSECURITY-MIB", "apSecurityCRLRetrievalClearNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityCRLRetrievalNotificationsGroup = apSecurityCRLRetrievalNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityCRLRetrievalNotificationsGroup.setDescription('A collection of notifications for CRL Retrieval ')
apSecurityCertNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 7)).setObjects(("APSECURITY-MIB", "apSecurityCertExpiredNotification"), ("APSECURITY-MIB", "apSecurityCertExpireSoonNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityCertNotificationsGroup = apSecurityCertNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityCertNotificationsGroup.setDescription('A collection of notifications for CRLs ')
apSecurityGTPNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 8)).setObjects(("APSECURITY-MIB", "apSecurityGTPLinkFailureNotification"), ("APSECURITY-MIB", "apSecurityGTPLinkClearNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityGTPNotificationsGroup = apSecurityGTPNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityGTPNotificationsGroup.setDescription('A collection of notifications for GTP peer communication ')
apSecurityNotificationsInetGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 9)).setObjects(("APSECURITY-MIB", "apSecurityTunnelFailureInetNotification"), ("APSECURITY-MIB", "apSecurityRadiusFailureNotification"), ("APSECURITY-MIB", "apSecurityTunnelDPDInetNotification"), ("APSECURITY-MIB", "apSecurityTacacsFailureNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityNotificationsInetGroup = apSecurityNotificationsInetGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityNotificationsInetGroup.setDescription('A collection of notifications for security ')
apSecurityDDosNotificationsInetGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 10)).setObjects(("APSECURITY-MIB", "apSecurityAuthFailureThresholdInetNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityDDosNotificationsInetGroup = apSecurityDDosNotificationsInetGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityDDosNotificationsInetGroup.setDescription('A collection of notifications for IKEv2 DDos ')
apSecurityTacacsDownLocalAuthTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 12)).setObjects(("APSECURITY-MIB", "apSecurityTacacsDownLocalAuthUsedTrap"), ("APSECURITY-MIB", "apSecurityTacacsDownLocalAuthUsedClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityTacacsDownLocalAuthTrapGroup = apSecurityTacacsDownLocalAuthTrapGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityTacacsDownLocalAuthTrapGroup.setDescription('A collection of traps for monitoring TACACS+ authentication service \r\n            unavailability resulting in the system falling back to use local \r\n            user accounts to authenticate the user.')
apSecurityTlsNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 13)).setObjects(("APSECURITY-MIB", "apSecurityTlsEncryptionFailureNotification"), ("APSECURITY-MIB", "apSecurityTlsEncryptionFailureNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityTlsNotificationsGroup = apSecurityTlsNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityTlsNotificationsGroup.setDescription('A collection of notifications for TLS encryption/decryption failures.')
apSecuritySrtpNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 14)).setObjects(("APSECURITY-MIB", "apSecuritySrtpEncryptionFailureNotification"), ("APSECURITY-MIB", "apSecuritySrtpDecryptionFailureNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecuritySrtpNotificationsGroup = apSecuritySrtpNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecuritySrtpNotificationsGroup.setDescription('A collection of notifications for SRTP encryption/decryption failures.')
apSecurityTscfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 13)).setObjects(("APSECURITY-MIB", "apTscfActiveTunnels"), ("APSECURITY-MIB", "apTscfEstablishedTunnels"), ("APSECURITY-MIB", "apTscfFinishedTunnels"), ("APSECURITY-MIB", "apTscfReleasedTunnels"), ("APSECURITY-MIB", "apTscfMaxActiveTunnels"), ("APSECURITY-MIB", "apTscfConfReqReceived"), ("APSECURITY-MIB", "apTscfConfReqNagleReceived"), ("APSECURITY-MIB", "apTscfConfRespSent"), ("APSECURITY-MIB", "apTscfConfRelReqReceived"), ("APSECURITY-MIB", "apTscfConfRelRespSent"), ("APSECURITY-MIB", "apTscfCSResponseSent"), ("APSECURITY-MIB", "apTscfCSREnableDDT"), ("APSECURITY-MIB", "apTscfCSRDisableDDT"), ("APSECURITY-MIB", "apTscfCSREnableRedundancy"), ("APSECURITY-MIB", "apTscfCSRDisableRedundancy"), ("APSECURITY-MIB", "apTscfKAReceived"), ("APSECURITY-MIB", "apTscfKARespSent"), ("APSECURITY-MIB", "apTscfKASent"), ("APSECURITY-MIB", "apTscfKARespRcvd"), ("APSECURITY-MIB", "apTscfCMReTx"), ("APSECURITY-MIB", "apTscfFailureMalformed"), ("APSECURITY-MIB", "apTscfFailureUnkownMsg"), ("APSECURITY-MIB", "apTscfFailureClientAssignedIP"), ("APSECURITY-MIB", "apTscfFailureCannotProvisionIP"), ("APSECURITY-MIB", "apTscfFailureAlreadyProvisionedIP"), ("APSECURITY-MIB", "apTscfFailureGeneralProvisionIP"), ("APSECURITY-MIB", "apTscfFailureClientAssignedIPMask"), ("APSECURITY-MIB", "apTscfFailureCannotProvisionIPMask"), ("APSECURITY-MIB", "apTscfFailureAlreadyProvisionedIPMask"), ("APSECURITY-MIB", "apTscfFailureGeneralProvisionIPMask"), ("APSECURITY-MIB", "apTscfFailureClientAssignedSIPServer"), ("APSECURITY-MIB", "apTscfFailureCannotProvisionSIPServer"), ("APSECURITY-MIB", "apTscfFailureAlreadyProvisionedSIPServer"), ("APSECURITY-MIB", "apTscfFailureGeneralProvisionSIPServer"), ("APSECURITY-MIB", "apTscfFailureClientAsignedKA"), ("APSECURITY-MIB", "apTscfFailureCannotProvisionKA"), ("APSECURITY-MIB", "apTscfFailureAlreadyProvisionedKA"), ("APSECURITY-MIB", "apTscfFailureGeneralProvisionKA"), ("APSECURITY-MIB", "apTscfFailureNonExistentTunnelId"), ("APSECURITY-MIB", "apTscfFailureOutOfResources"), ("APSECURITY-MIB", "apTscfFailureInternalIPExhausted"), ("APSECURITY-MIB", "apTscfFailureNonNullIPAddr"), ("APSECURITY-MIB", "apTscfFailureNonNullIpMask"), ("APSECURITY-MIB", "apTscfFailureNonNullSipServer"), ("APSECURITY-MIB", "apTscfFailureNonNullKeepAlive"), ("APSECURITY-MIB", "apTscfFailureNoListeningFd"), ("APSECURITY-MIB", "apTscfFailureServerFailure"), ("APSECURITY-MIB", "apTscfFailureRedundancyNotEnabled"), ("APSECURITY-MIB", "apTscfFailureRedundancyExceedsLimit"), ("APSECURITY-MIB", "apTscfFailureTunnelIdExhausted"), ("APSECURITY-MIB", "apTscfFailureTimerFailure"), ("APSECURITY-MIB", "apTscfFailureDDTNotEnabled"), ("APSECURITY-MIB", "apTscfFailureDDTWrongTransport"), ("APSECURITY-MIB", "apTscfFailureDDTDatagramOnly"), ("APSECURITY-MIB", "apTscfFailureDDTInconsistantTransport"), ("APSECURITY-MIB", "apTscfFailureUnkownServiceRequest"), ("APSECURITY-MIB", "apTscfFailureTunnelEstablished"), ("APSECURITY-MIB", "apTscfFailureAddrPoolUnavilable"), ("APSECURITY-MIB", "apTscfFailureListenFdUnavailable"), ("APSECURITY-MIB", "apTscfFailureVersionNotSupported"), ("APSECURITY-MIB", "apTscfFailureLicenseExceeded"), ("APSECURITY-MIB", "apTscfFailureNoTunnelForPkt"), ("APSECURITY-MIB", "apTscfWrongSeqNum"), ("APSECURITY-MIB", "apTscfConDrop"), ("APSECURITY-MIB", "apTscfIntfConDrop"), ("APSECURITY-MIB", "apTscfStatsAllocs"), ("APSECURITY-MIB", "apTscfStatsFrees"), ("APSECURITY-MIB", "apTscfStatsMemFails"), ("APSECURITY-MIB", "apTscfSwitchToActive"), ("APSECURITY-MIB", "apTscfSwitchToStandBy"), ("APSECURITY-MIB", "apTscfGetDTLSCtxSent"), ("APSECURITY-MIB", "apTscfGetDTLSCtxSuccess"), ("APSECURITY-MIB", "apTscfGetDTLSCtxFailed"), ("APSECURITY-MIB", "apTscfSetDTLSCtxSent"), ("APSECURITY-MIB", "apTscfSetDTLSCtxSuccess"), ("APSECURITY-MIB", "apTscfSetDTLSCtxFailed"), ("APSECURITY-MIB", "apTscfFdTableSize"), ("APSECURITY-MIB", "apTscfAddressTableSize"), ("APSECURITY-MIB", "apTscfTunnelTableSize"), ("APSECURITY-MIB", "apTscfActiveTunnelTableSize"), ("APSECURITY-MIB", "apTscfFlowIdTableSize"), ("APSECURITY-MIB", "apTscfLicenseTunnelCount"), ("APSECURITY-MIB", "apTscfSpecificAddressCount"), ("APSECURITY-MIB", "apTscfTunnelTimeoutCount"), ("APSECURITY-MIB", "apTscfTunneledPacketDrop"), ("APSECURITY-MIB", "apTscfUnTunneledPacketDrop"), ("APSECURITY-MIB", "apTscfCsrReceived"), ("APSECURITY-MIB", "apTscfTypeInnerIPDestDrop"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityTscfStatsGroup = apSecurityTscfStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfStatsGroup.setDescription('Objects for TSCF statistics.')
apSecurityIkeInterfaceEapMethodsStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 14)).setObjects(("APSECURITY-MIB", "apSecurityIkeInterfaceEapSimSucc"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapSimFail"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapAkaSucc"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapAkaFail"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapAkaPrimeSucc"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapAkaPrimeFail"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapTlsSucc"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapTlsFail"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapTtlsSucc"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapTtlsFail"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapOtherSucc"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapOtherFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIkeInterfaceEapMethodsStatsGroup = apSecurityIkeInterfaceEapMethodsStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceEapMethodsStatsGroup.setDescription('Objects for monitoring eap method related  auth statistics.')
apSecurityIkeInterfaceIkeStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 15)).setObjects(("APSECURITY-MIB", "apSecurityIkeInterfaceNatKeepAliveMsgsRecv"), ("APSECURITY-MIB", "apSecurityIkeInterfaceBroadcastOrMulticastMsgcRecv"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeSaAuthMsgsRecv"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeSaAuthMsgsSent"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeSaChildMsgsRecv"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeSaChildMsgsSent"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeSaInfoMsgsRecv"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeSaInfoMsgsSent"), ("APSECURITY-MIB", "apSecurityIkeInterfaceInIkeSaRekeyRequest"), ("APSECURITY-MIB", "apSecurityIkeInterfaceInIkeSaRekeyRequestSuccess"), ("APSECURITY-MIB", "apSecurityIkeInterfaceInIkeSaRekeyRequestFailure"), ("APSECURITY-MIB", "apSecurityIkeInterfaceOutIkeSaRekeyRequest"), ("APSECURITY-MIB", "apSecurityIkeInterfaceOutIkeSaRekeyRequestSuccess"), ("APSECURITY-MIB", "apSecurityIkeInterfaceOutIkeSaRekeyRequestFailure"), ("APSECURITY-MIB", "apSecurityIkeInterfaceInIkeSaDeleteRequest"), ("APSECURITY-MIB", "apSecurityIkeInterfaceInIkeSaDeleteRequestSuccess"), ("APSECURITY-MIB", "apSecurityIkeInterfaceInIkeSaDeleteRequestFailure"), ("APSECURITY-MIB", "apSecurityIkeInterfaceOutIkeSaDeleteRequest"), ("APSECURITY-MIB", "apSecurityIkeInterfaceHalfOpenSecurityAssociations"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeTunnelAvgHoldTime"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeTunnelAvgSetupTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIkeInterfaceIkeStatsGroup = apSecurityIkeInterfaceIkeStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeStatsGroup.setDescription('Objects for monitoring ike related statistics.')
apSecurityIkeInterfaceIkeErrorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 16)).setObjects(("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadPortErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadAttrErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadCertErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeNoCertErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadCertTypeErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadCookieErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadCookie2Errors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadConfigErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadHashErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadIDErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadID2Errors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadKeErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadLenErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadMsgErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadMsgIdErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadNATDErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadNonceErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadNotifyCookieErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadPayloadErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadProposalErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadProtocolErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadSaErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadSigErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadSpiErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadVersionErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBadXchgErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeBufferOverflowErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeConfigErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeGetSaFailErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeNewSaFailErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeNotifyPayloadErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeNullPSKErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeMismatchErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeMismatchAuthAlgoErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeMismatchAuthMethodErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeMismatchDHGroupErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeMismatchEncrAlgoErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeMismatchKeyLenErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCertInvalidStructErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCertNotExpectedOIDErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCertRsaExponentTooBigErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCertExpiredErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCertInvalidParentCertificateErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCertUnsupportedDigestErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCertDNEStringTooLongErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCertStackOverflowErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCertKeyUsageMissingErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCertUnknownCriticalExtensionErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCertUnSupportedSignatureAlgoErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceCertRSAModulusTooBigErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapInstanceIdNotFoundErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapInvalidPktSizeErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapInvalidMethodTypeErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapInvalidCodeErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceEapInvalidPktErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIkeSaCapacityExceedCount"), ("APSECURITY-MIB", "apSecurityIkeInterfaceIpsecSaCapacityExceedCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIkeInterfaceIkeErrorsGroup = apSecurityIkeInterfaceIkeErrorsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterfaceIkeErrorsGroup.setDescription('Objects for monitoring ike related errors.')
apSecurityTscfStatsTimeoutGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 18)).setObjects(("APSECURITY-MIB", "apTscfTunnelsTimedOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityTscfStatsTimeoutGroup = apSecurityTscfStatsTimeoutGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfStatsTimeoutGroup.setDescription('Objects for TSCF statistics.')
apSecurityIkeInterface3GPPAuthErrorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 19)).setObjects(("APSECURITY-MIB", "apSecurityIkeInterfaceAuthUserUnknownErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceAuthPlmnNotAllowedErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceAuthNon3GppAccessToEpcNotAllowedErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceAuthNoApnSubscriptionErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceAuthRatTypeNotAllowedErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceAuthAuthorizationRejectedErrors"), ("APSECURITY-MIB", "apSecurityIkeInterfaceAuthNetworkFailureErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityIkeInterface3GPPAuthErrorsGroup = apSecurityIkeInterface3GPPAuthErrorsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityIkeInterface3GPPAuthErrorsGroup.setDescription('Objects for 3gpp Authentication Errors.')
apSecurityGtpCaviumStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 20)).setObjects(("APSECURITY-MIB", "apSecurityGtpV2CreateSessRespPPMAddFail"), ("APSECURITY-MIB", "apSecurityGtpV2DeleteBReqRcvdPPMDelFail"), ("APSECURITY-MIB", "apSecurityGtpV2CreateBReqPPMAddFail"), ("APSECURITY-MIB", "apSecurityGtpV2UpdateBReqPPMUpdateFail"), ("APSECURITY-MIB", "apSecurityGtpV2StandbyDefBrerPPMAddFail"), ("APSECURITY-MIB", "apSecurityGtpV2StandbyDedBrerPPMAddFail"), ("APSECURITY-MIB", "apSecurityGtpV2StandbyDefBrerPPMDelFail"), ("APSECURITY-MIB", "apSecurityGtpV2StandbyDedBrerPPMDelFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityGtpCaviumStatsGroup = apSecurityGtpCaviumStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityGtpCaviumStatsGroup.setDescription('Objects for Gtp Cavium Statistics.')
apSecuritySAIKEStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 21)).setObjects(("APSECURITY-MIB", "apSecSAIKEAddReqRcvd"), ("APSECURITY-MIB", "apSecSAIKEAddSuccessRespSent"), ("APSECURITY-MIB", "apSecSAIKEAddFailRespSent"), ("APSECURITY-MIB", "apSecSAIKEDelReqRcvd"), ("APSECURITY-MIB", "apSecSAIKEDelSuccessRespSent"), ("APSECURITY-MIB", "apSecSAIKEDelFailRespSent"), ("APSECURITY-MIB", "apSecSAIKEAcquireReqSent"), ("APSECURITY-MIB", "apSecSAIKEAcquireSuccessRespRcvd"), ("APSECURITY-MIB", "apSecSAIKEAcquireFailRespRcvd"), ("APSECURITY-MIB", "apSecSAIKEAcquireTransactionTimeout"), ("APSECURITY-MIB", "apSecSAIKESaCreated"), ("APSECURITY-MIB", "apSecSAIKESaCreateFailed"), ("APSECURITY-MIB", "apSecSAIKESaDeleted"), ("APSECURITY-MIB", "apSecSAIKESaDeleteFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecuritySAIKEStatsGroup = apSecuritySAIKEStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecuritySAIKEStatsGroup.setDescription('A collection of objects providing SA IKE stats')
apSecuritySAIMSAKAStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 22)).setObjects(("APSECURITY-MIB", "apSecSAIMSAKAAddReqSent"), ("APSECURITY-MIB", "apSecSAIMSAKAAddReqRcvd"), ("APSECURITY-MIB", "apSecSAIMSAKAAddSuccessRespSent"), ("APSECURITY-MIB", "apSecSAIMSAKAAddSuccessRespRcvd"), ("APSECURITY-MIB", "apSecSAIMSAKAAddFailRespSent"), ("APSECURITY-MIB", "apSecSAIMSAKAAddFailInvalidParamRespSent"), ("APSECURITY-MIB", "apSecSAIMSAKAAddFailRespRcvd"), ("APSECURITY-MIB", "apSecSAIMSAKAAddFailAddrMaskMismatch"), ("APSECURITY-MIB", "apSecSAIMSAKAAddFailProtoParamsInvalid"), ("APSECURITY-MIB", "apSecSAIMSAKAAddFailProtoDataInvalid"), ("APSECURITY-MIB", "apSecSAIMSAKAAddTransactionTimeout"), ("APSECURITY-MIB", "apSecSAIMSAKADelReqSent"), ("APSECURITY-MIB", "apSecSAIMSAKADelReqRcvd"), ("APSECURITY-MIB", "apSecSAIMSAKADelSuccessRespSent"), ("APSECURITY-MIB", "apSecSAIMSAKADelSuccessRespRcvd"), ("APSECURITY-MIB", "apSecSAIMSAKADelFailRespSent"), ("APSECURITY-MIB", "apSecSAIMSAKADelFailInvalidParamRespSent"), ("APSECURITY-MIB", "apSecSAIMSAKADelFailRespRcvd"), ("APSECURITY-MIB", "apSecSAIMSAKADelTransactionTimeout"), ("APSECURITY-MIB", "apSecSAIMSAKADelDueToTimeout"), ("APSECURITY-MIB", "apSecSAIMSAKAModReqSent"), ("APSECURITY-MIB", "apSecSAIMSAKAModReqRcvd"), ("APSECURITY-MIB", "apSecSAIMSAKAModSuccessRespSent"), ("APSECURITY-MIB", "apSecSAIMSAKAModSuccessRespRcvd"), ("APSECURITY-MIB", "apSecSAIMSAKAModFailRespSent"), ("APSECURITY-MIB", "apSecSAIMSAKAModFailInvalidParamRespSent"), ("APSECURITY-MIB", "apSecSAIMSAKAModFailRespRcvd"), ("APSECURITY-MIB", "apSecSAIMSAKAModTransactionTimeout"), ("APSECURITY-MIB", "apSecSAIMSAKASaCreated"), ("APSECURITY-MIB", "apSecSAIMSAKASaCreatedInboundSent"), ("APSECURITY-MIB", "apSecSAIMSAKASaCreatedOutboundSent"), ("APSECURITY-MIB", "apSecSAIMSAKASaCreateFailed"), ("APSECURITY-MIB", "apSecSAIMSAKASaCreatePPMInboundFailed"), ("APSECURITY-MIB", "apSecSAIMSAKASaCreatePPMOutboundFailed"), ("APSECURITY-MIB", "apSecSAIMSAKASaDeleted"), ("APSECURITY-MIB", "apSecSAIMSAKASaDeletedInboundSent"), ("APSECURITY-MIB", "apSecSAIMSAKASaDeletedOutboundSent"), ("APSECURITY-MIB", "apSecSAIMSAKASaDelFailed"), ("APSECURITY-MIB", "apSecSAIMSAKASaDelPPMInboundFailed"), ("APSECURITY-MIB", "apSecSAIMSAKASaDelPPMOutboundFailed"), ("APSECURITY-MIB", "apSecSAIMSAKASaDelFailAddrMaskMismatch"), ("APSECURITY-MIB", "apSecSAIMSAKASaDelFailProtoParamsInvalid"), ("APSECURITY-MIB", "apSecSAIMSAKASaDelFailProtoDataInvalid"), ("APSECURITY-MIB", "apSecSAIMSAKASaCollision"), ("APSECURITY-MIB", "apSecSAIMSAKASaCollisionRecoveryFail"), ("APSECURITY-MIB", "apSecSAIMSAKASaCollisionRecoverySuccess"), ("APSECURITY-MIB", "apSecSAIMSAKASaCollisionRecoveryLkupFail"), ("APSECURITY-MIB", "apSecSAIMSAKASaKeyNotFound"), ("APSECURITY-MIB", "apSecSAIMSAKASaKeyNotFoundTimeout"), ("APSECURITY-MIB", "apSecSAIMSAKASaKeyExists"), ("APSECURITY-MIB", "apSecSAIMSAKASaRecovery"), ("APSECURITY-MIB", "apSecSAIMSAKASaRecoveryFail"), ("APSECURITY-MIB", "apSecSAIMSAKASaTransactionQueue"), ("APSECURITY-MIB", "apSecSAIMSAKASaRedundancySyncQueue"), ("APSECURITY-MIB", "apSecSAIMSAKASaInboundOnly"), ("APSECURITY-MIB", "apSecSAIMSAKASaOutboundOnly"), ("APSECURITY-MIB", "apSecSAIMSAKAAddFailInvalidTimer"), ("APSECURITY-MIB", "apSecSAIMSAKAAddFailTableInsertFail"), ("APSECURITY-MIB", "apSecSAIMSAKASendAddToRed"), ("APSECURITY-MIB", "apSecSAIMSAKASendModToRed"), ("APSECURITY-MIB", "apSecSAIMSAKARcvdAddFromActive"), ("APSECURITY-MIB", "apSecSAIMSAKARcvdModFromActive"), ("APSECURITY-MIB", "apSecSAIMSAKASaRedAddRecFailure"), ("APSECURITY-MIB", "apSecSAIMSAKAInvalidRedAction"), ("APSECURITY-MIB", "apSecSAIMSAKASendTimedDelToRed"), ("APSECURITY-MIB", "apSecSAIMSAKARcvdTimedDelFromAct"), ("APSECURITY-MIB", "apSecSAIMSAKASAAgentSAReqTransQueueSize"), ("APSECURITY-MIB", "apSecSAIMSAKASAAgentAllowTransQuota"), ("APSECURITY-MIB", "apSecSAIMSAKASAAgentDelayDeleteCount"), ("APSECURITY-MIB", "apSecSAIMSAKASAAgentMaxTransQueueSize"), ("APSECURITY-MIB", "apSecSAIMSAKARegsTotal"), ("APSECURITY-MIB", "apSecSAIMSAKARegsFromUnprotPort"), ("APSECURITY-MIB", "apSecSAIMSAKARegsFromUnprotPortBeforeExpiry"), ("APSECURITY-MIB", "apSecSAIMSAKARegsInProtPortPriorDisconnect"), ("APSECURITY-MIB", "apSecSAIMSAKARegsOutProtPortPriorDisconnect"), ("APSECURITY-MIB", "apSecSAIMSAKAAnswerBeforeChallenge"), ("APSECURITY-MIB", "apSecSAIMSAKARegsFromPotectedPort"), ("APSECURITY-MIB", "apSecSAIMSAKARegsInitRegRejectBusy"), ("APSECURITY-MIB", "apSecSAIMSAKARegsInitRegRejectResource"), ("APSECURITY-MIB", "apSecSAIMSAKARegsInitRegFailedAllocIms"), ("APSECURITY-MIB", "apSecSAIMSAKARegsInitRegImsExist"), ("APSECURITY-MIB", "apSecSAIMSAKARegsInitRegFailedSecurityHeader"), ("APSECURITY-MIB", "apSecSAIMSAKARegsInitRegPassedQuota"), ("APSECURITY-MIB", "apSecSAIMSAKARegsReRegRejectBusy"), ("APSECURITY-MIB", "apSecSAIMSAKARegsReRegRejectResource"), ("APSECURITY-MIB", "apSecSAIMSAKARegsReRegFailedSecurityHeader"), ("APSECURITY-MIB", "apSecSAIMSAKARegsReRegNoImsEntry"), ("APSECURITY-MIB", "apSecSAIMSAKARegsReRegPassedQuota"), ("APSECURITY-MIB", "apSecSAIMSAKARegForwardUnProtectReg"), ("APSECURITY-MIB", "apSecSAIMSAKAReuseSpiFalse"), ("APSECURITY-MIB", "apSecSAIMSAKAReuseSpiTrue"), ("APSECURITY-MIB", "apSecSAIMSAKAIncompleteReg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecuritySAIMSAKAStatsGroup = apSecuritySAIMSAKAStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecuritySAIMSAKAStatsGroup.setDescription('A collection of objects providing SA IMS-AKA stats')
apSecuritySASRTPStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 2, 23)).setObjects(("APSECURITY-MIB", "apSecSASRTPAddReqSent"), ("APSECURITY-MIB", "apSecSASRTPAddReqRcvd"), ("APSECURITY-MIB", "apSecSASRTPAddSuccessRespSent"), ("APSECURITY-MIB", "apSecSASRTPAddSuccessRespRcvd"), ("APSECURITY-MIB", "apSecSASRTPAddFailRespSent"), ("APSECURITY-MIB", "apSecSASRTPAddFailRespRcvd"), ("APSECURITY-MIB", "apSecSASRTPAddTransactionTimeout"), ("APSECURITY-MIB", "apSecSASRTPDelReqSent"), ("APSECURITY-MIB", "apSecSASRTPDelReqRcvd"), ("APSECURITY-MIB", "apSecSASRTPDelSuccessRespSent"), ("APSECURITY-MIB", "apSecSASRTPDelSuccessRespRcvd"), ("APSECURITY-MIB", "apSecSASRTPDelFailRespSent"), ("APSECURITY-MIB", "apSecSASRTPDelFailRespRcvd"), ("APSECURITY-MIB", "apSecSASRTPDelTransactionTimeout"), ("APSECURITY-MIB", "apSecSASRTPModReqSent"), ("APSECURITY-MIB", "apSecSASRTPModReqRcvd"), ("APSECURITY-MIB", "apSecSASRTPModSuccessRespSent"), ("APSECURITY-MIB", "apSecSASRTPModSuccessRespRcvd"), ("APSECURITY-MIB", "apSecSASRTPModFailRespSent"), ("APSECURITY-MIB", "apSecSASRTPModFailRespRcvd"), ("APSECURITY-MIB", "apSecSASRTPModTransactionTimeout"), ("APSECURITY-MIB", "apSecSASRTPSaCreated"), ("APSECURITY-MIB", "apSecSASRTPSaCreateFailed"), ("APSECURITY-MIB", "apSecSASRTPSaDeleted"), ("APSECURITY-MIB", "apSecSASRTPSaDeleteFailed"), ("APSECURITY-MIB", "apSecSASRTPSaCollision"), ("APSECURITY-MIB", "apSecSASRTPSaKeyNotFound"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecuritySASRTPStatsGroup = apSecuritySASRTPStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecuritySASRTPStatsGroup.setDescription('A collection of objects providing SA SRTP stats')
apSecurityTscfStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14))
apTscfActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: apTscfActiveTunnels.setDescription('Number of active TSCF tunnels')
apTscfEstablishedTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfEstablishedTunnels.setStatus('current')
if mibBuilder.loadTexts: apTscfEstablishedTunnels.setDescription('Number of established tunnels')
apTscfFinishedTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFinishedTunnels.setStatus('current')
if mibBuilder.loadTexts: apTscfFinishedTunnels.setDescription('Number of finished tunnels')
apTscfReleasedTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfReleasedTunnels.setStatus('current')
if mibBuilder.loadTexts: apTscfReleasedTunnels.setDescription('Number of released tunnels')
apTscfMaxActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfMaxActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: apTscfMaxActiveTunnels.setDescription('Number of maximum active tunnels')
apTscfConfReqReceived = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfConfReqReceived.setStatus('current')
if mibBuilder.loadTexts: apTscfConfReqReceived.setDescription('Number of config requests received')
apTscfConfReqNagleReceived = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfConfReqNagleReceived.setStatus('current')
if mibBuilder.loadTexts: apTscfConfReqNagleReceived.setDescription('Number of config requestis with  nagle received')
apTscfConfRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfConfRespSent.setStatus('current')
if mibBuilder.loadTexts: apTscfConfRespSent.setDescription('Number of config response sent')
apTscfConfRelReqReceived = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfConfRelReqReceived.setStatus('current')
if mibBuilder.loadTexts: apTscfConfRelReqReceived.setDescription('Number of config release requesast received')
apTscfConfRelRespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfConfRelRespSent.setStatus('current')
if mibBuilder.loadTexts: apTscfConfRelRespSent.setDescription('Number of config release responses sent')
apTscfCSResponseSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfCSResponseSent.setStatus('current')
if mibBuilder.loadTexts: apTscfCSResponseSent.setDescription('Number of client service responses sent')
apTscfCSREnableDDT = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfCSREnableDDT.setStatus('current')
if mibBuilder.loadTexts: apTscfCSREnableDDT.setDescription('Number of ddt enable client service messages')
apTscfCSRDisableDDT = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfCSRDisableDDT.setStatus('current')
if mibBuilder.loadTexts: apTscfCSRDisableDDT.setDescription('Number of ddt disable client service responses')
apTscfCSREnableRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfCSREnableRedundancy.setStatus('current')
if mibBuilder.loadTexts: apTscfCSREnableRedundancy.setDescription('Number of redundancy enable client service responses')
apTscfCSRDisableRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfCSRDisableRedundancy.setStatus('current')
if mibBuilder.loadTexts: apTscfCSRDisableRedundancy.setDescription('Number of redundancy disabled client service responses')
apTscfKAReceived = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfKAReceived.setStatus('current')
if mibBuilder.loadTexts: apTscfKAReceived.setDescription('Number of keep alive requests received')
apTscfKARespSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfKARespSent.setStatus('current')
if mibBuilder.loadTexts: apTscfKARespSent.setDescription('Number of keep alive responses sent')
apTscfKASent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfKASent.setStatus('current')
if mibBuilder.loadTexts: apTscfKASent.setDescription('Number of keep alive messages sent')
apTscfKARespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfKARespRcvd.setStatus('current')
if mibBuilder.loadTexts: apTscfKARespRcvd.setDescription('Number of keep alive responses received')
apTscfCMReTx = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfCMReTx.setStatus('current')
if mibBuilder.loadTexts: apTscfCMReTx.setDescription('Number of control message retransmissions')
apTscfFailureMalformed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureMalformed.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureMalformed.setDescription('Number of failed tunnels due to malformed request')
apTscfFailureUnkownMsg = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureUnkownMsg.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureUnkownMsg.setDescription('Number of unknown control messages')
apTscfFailureClientAssignedIP = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureClientAssignedIP.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureClientAssignedIP.setDescription('Number of failed tunnels due to client assigned IP')
apTscfFailureCannotProvisionIP = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureCannotProvisionIP.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureCannotProvisionIP.setDescription('Number of failed tunnels due to internal IP that cannot be provisioned')
apTscfFailureAlreadyProvisionedIP = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureAlreadyProvisionedIP.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureAlreadyProvisionedIP.setDescription('Number of failed tunnels due to internal IP that are already provisioned')
apTscfFailureGeneralProvisionIP = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureGeneralProvisionIP.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureGeneralProvisionIP.setDescription('Number of failed tunnels due to general IP provision failure')
apTscfFailureClientAssignedIPMask = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureClientAssignedIPMask.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureClientAssignedIPMask.setDescription('\r\n                                Number of failed tunnels due to Internal IP mask assigned by client')
apTscfFailureCannotProvisionIPMask = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureCannotProvisionIPMask.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureCannotProvisionIPMask.setDescription('Number of failed tunnels due to internal IP mask that cannot be  provisioned')
apTscfFailureAlreadyProvisionedIPMask = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureAlreadyProvisionedIPMask.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureAlreadyProvisionedIPMask.setDescription('Number of failed tunnels due to Internal IP mask was  already provisioned')
apTscfFailureGeneralProvisionIPMask = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureGeneralProvisionIPMask.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureGeneralProvisionIPMask.setDescription('Number of failed tunnels due to general IP mask provision')
apTscfFailureClientAssignedSIPServer = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureClientAssignedSIPServer.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureClientAssignedSIPServer.setDescription('Number of failed tunnels due to client assigned SIP server address')
apTscfFailureCannotProvisionSIPServer = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureCannotProvisionSIPServer.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureCannotProvisionSIPServer.setDescription('Number of failed tunnels due to unprovisioned SIP server address')
apTscfFailureAlreadyProvisionedSIPServer = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureAlreadyProvisionedSIPServer.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureAlreadyProvisionedSIPServer.setDescription('Number of failed tunnels due to SIP server address was already provisioned')
apTscfFailureGeneralProvisionSIPServer = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureGeneralProvisionSIPServer.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureGeneralProvisionSIPServer.setDescription('Number of failed tunnels due to SIP server general provision error')
apTscfFailureClientAsignedKA = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureClientAsignedKA.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureClientAsignedKA.setDescription('Number of failed tunnels due to client assigned keep alive value')
apTscfFailureCannotProvisionKA = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureCannotProvisionKA.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureCannotProvisionKA.setDescription('Number of failed tunnels due to failure to  provision keep alive value')
apTscfFailureAlreadyProvisionedKA = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureAlreadyProvisionedKA.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureAlreadyProvisionedKA.setDescription('Number of failed tunnels due to Keep Alive value was already provisioned')
apTscfFailureGeneralProvisionKA = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureGeneralProvisionKA.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureGeneralProvisionKA.setDescription('Number of failed tunnels due to Keep alive value error')
apTscfFailureNonExistentTunnelId = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureNonExistentTunnelId.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureNonExistentTunnelId.setDescription('Number of failed tunnels due to Non existing tunnel ID')
apTscfFailureOutOfResources = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureOutOfResources.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureOutOfResources.setDescription('Number of failed tunnels due to out of resources')
apTscfFailureInternalIPExhausted = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureInternalIPExhausted.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureInternalIPExhausted.setDescription('Number of failed tunnels due to tunnel ID depletion')
apTscfFailureNonNullIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureNonNullIPAddr.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureNonNullIPAddr.setDescription('Number of failed tunnels due to non null ip address ')
apTscfFailureNonNullIpMask = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureNonNullIpMask.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureNonNullIpMask.setDescription('Number of  failed tunnels due to non null ip mask')
apTscfFailureNonNullSipServer = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureNonNullSipServer.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureNonNullSipServer.setDescription('Number of failed tunnels due to non null sip server')
apTscfFailureNonNullKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureNonNullKeepAlive.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureNonNullKeepAlive.setDescription('Number of failed tunnels due to non zero Keep Alive value')
apTscfFailureNoListeningFd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureNoListeningFd.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureNoListeningFd.setDescription('Number of failed tunnels due to missing  listening file descriptor')
apTscfFailureServerFailure = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureServerFailure.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureServerFailure.setDescription('Number of failed tunnels due to server failure')
apTscfFailureRedundancyNotEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureRedundancyNotEnabled.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureRedundancyNotEnabled.setDescription('Number of failed tunnels due to  disabled redundancy feature')
apTscfFailureRedundancyExceedsLimit = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureRedundancyExceedsLimit.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureRedundancyExceedsLimit.setDescription('Number of failed tunnels due to redundancy factor exceediing the limit')
apTscfFailureTunnelIdExhausted = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureTunnelIdExhausted.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureTunnelIdExhausted.setDescription('Number of failed tunnels due to tunnel id exhaustion')
apTscfFailureTimerFailure = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureTimerFailure.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureTimerFailure.setDescription('Number of failed tunnels due to Timer failure')
apTscfFailureDDTNotEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureDDTNotEnabled.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureDDTNotEnabled.setDescription('Failure due to DDT disabled')
apTscfFailureDDTWrongTransport = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureDDTWrongTransport.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureDDTWrongTransport.setDescription('Failure due to DDT wrong transport')
apTscfFailureDDTDatagramOnly = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureDDTDatagramOnly.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureDDTDatagramOnly.setDescription('Number of failed tunnels due to DDT request on datagram transport')
apTscfFailureDDTInconsistantTransport = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureDDTInconsistantTransport.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureDDTInconsistantTransport.setDescription('Number of failed tunnels due inconsistent DDT transport')
apTscfFailureUnkownServiceRequest = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureUnkownServiceRequest.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureUnkownServiceRequest.setDescription('Number of failed tunnels due to unknown service request')
apTscfFailureTunnelEstablished = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureTunnelEstablished.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureTunnelEstablished.setDescription('Number of tunnel establishment failure')
apTscfFailureAddrPoolUnavilable = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureAddrPoolUnavilable.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureAddrPoolUnavilable.setDescription('Number of failed tunnels due to unavailable address pool')
apTscfFailureListenFdUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureListenFdUnavailable.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureListenFdUnavailable.setDescription('Number of failed tunnels due to missing listening file descriptor')
apTscfFailureVersionNotSupported = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureVersionNotSupported.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureVersionNotSupported.setDescription('Number of failed tunnels due to unsupported version')
apTscfFailureLicenseExceeded = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureLicenseExceeded.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureLicenseExceeded.setDescription('Number of failed tunnels due to exceeding the licensed/entitled  limit')
apTscfFailureNoTunnelForPkt = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFailureNoTunnelForPkt.setStatus('current')
if mibBuilder.loadTexts: apTscfFailureNoTunnelForPkt.setDescription('Number of packets dropped due to missing tunnel')
apTscfWrongSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfWrongSeqNum.setStatus('current')
if mibBuilder.loadTexts: apTscfWrongSeqNum.setDescription('Number of control messages with wrong sequence number')
apTscfConDrop = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfConDrop.setStatus('current')
if mibBuilder.loadTexts: apTscfConDrop.setDescription('Number of config requests dropped due to license limit')
apTscfIntfConDrop = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfIntfConDrop.setStatus('current')
if mibBuilder.loadTexts: apTscfIntfConDrop.setDescription('Number of config requests dropped due to per interface limit')
apTscfStatsAllocs = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfStatsAllocs.setStatus('current')
if mibBuilder.loadTexts: apTscfStatsAllocs.setDescription('Number of Stats memory allocations')
apTscfStatsFrees = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfStatsFrees.setStatus('current')
if mibBuilder.loadTexts: apTscfStatsFrees.setDescription('Number of Stats memory frees')
apTscfStatsMemFails = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfStatsMemFails.setStatus('current')
if mibBuilder.loadTexts: apTscfStatsMemFails.setDescription('Stats memory allocation failures')
apTscfSwitchToActive = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfSwitchToActive.setStatus('current')
if mibBuilder.loadTexts: apTscfSwitchToActive.setDescription('Number of times system switched to active system')
apTscfSwitchToStandBy = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfSwitchToStandBy.setStatus('current')
if mibBuilder.loadTexts: apTscfSwitchToStandBy.setDescription('Number of times system switched to stand by system')
apTscfGetDTLSCtxSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfGetDTLSCtxSent.setStatus('current')
if mibBuilder.loadTexts: apTscfGetDTLSCtxSent.setDescription('Number of get DTLS context requests sent')
apTscfGetDTLSCtxSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfGetDTLSCtxSuccess.setStatus('current')
if mibBuilder.loadTexts: apTscfGetDTLSCtxSuccess.setDescription('Number of successful get DTLS context requests')
apTscfGetDTLSCtxFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfGetDTLSCtxFailed.setStatus('current')
if mibBuilder.loadTexts: apTscfGetDTLSCtxFailed.setDescription('Number of failed get DTLS context requests')
apTscfSetDTLSCtxSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfSetDTLSCtxSent.setStatus('current')
if mibBuilder.loadTexts: apTscfSetDTLSCtxSent.setDescription('Number of set DTLS context requests sent')
apTscfSetDTLSCtxSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfSetDTLSCtxSuccess.setStatus('current')
if mibBuilder.loadTexts: apTscfSetDTLSCtxSuccess.setDescription('Number of successful DTLS context requests')
apTscfSetDTLSCtxFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfSetDTLSCtxFailed.setStatus('current')
if mibBuilder.loadTexts: apTscfSetDTLSCtxFailed.setDescription('Number of failed set DTLS context request')
apTscfFdTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFdTableSize.setStatus('current')
if mibBuilder.loadTexts: apTscfFdTableSize.setDescription('Number of entries in the File Descriptor table')
apTscfAddressTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfAddressTableSize.setStatus('current')
if mibBuilder.loadTexts: apTscfAddressTableSize.setDescription('Number of entries in the Address table')
apTscfTunnelTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfTunnelTableSize.setStatus('current')
if mibBuilder.loadTexts: apTscfTunnelTableSize.setDescription('Number of entries in the Tunnel table')
apTscfActiveTunnelTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfActiveTunnelTableSize.setStatus('current')
if mibBuilder.loadTexts: apTscfActiveTunnelTableSize.setDescription('Number of entries in the Active Tunnel table')
apTscfFlowIdTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 81), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfFlowIdTableSize.setStatus('current')
if mibBuilder.loadTexts: apTscfFlowIdTableSize.setDescription('Number of entries in the Flow table')
apTscfLicenseTunnelCount = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 82), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfLicenseTunnelCount.setStatus('current')
if mibBuilder.loadTexts: apTscfLicenseTunnelCount.setDescription('Number of Licensed/entitled tunnels ')
apTscfSpecificAddressCount = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfSpecificAddressCount.setStatus('current')
if mibBuilder.loadTexts: apTscfSpecificAddressCount.setDescription('Number of requests for specific IP adddress')
apTscfTunnelTimeoutCount = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfTunnelTimeoutCount.setStatus('current')
if mibBuilder.loadTexts: apTscfTunnelTimeoutCount.setDescription('Total number of timed outi tunnels')
apTscfTunneledPacketDrop = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfTunneledPacketDrop.setStatus('current')
if mibBuilder.loadTexts: apTscfTunneledPacketDrop.setDescription('Total number of tunneled packet drops')
apTscfUnTunneledPacketDrop = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfUnTunneledPacketDrop.setStatus('current')
if mibBuilder.loadTexts: apTscfUnTunneledPacketDrop.setDescription('Total number of untunneled packet drops')
apTscfCsrReceived = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfCsrReceived.setStatus('current')
if mibBuilder.loadTexts: apTscfCsrReceived.setDescription('Total number of Client service requests received')
apTscfTypeInnerIPDestDrop = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfTypeInnerIPDestDrop.setStatus('current')
if mibBuilder.loadTexts: apTscfTypeInnerIPDestDrop.setDescription('Number of packets dropped due to inner IP destination match with address pool')
apTscfTunnelsTimedOut = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 14, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTscfTunnelsTimedOut.setStatus('current')
if mibBuilder.loadTexts: apTscfTunnelsTimedOut.setDescription('Number of tunnels dropped due to timing out')
apSecurityTscfAddressPoolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 15), )
if mibBuilder.loadTexts: apSecurityTscfAddressPoolStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfAddressPoolStatsTable.setDescription('The table of TSCF address pool statistics.')
apSecurityTscfAddressPoolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 15, 1), ).setIndexNames((0, "APSECURITY-MIB", "apSecurityTscfAddressPoolName"))
if mibBuilder.loadTexts: apSecurityTscfAddressPoolStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfAddressPoolStatsEntry.setDescription('TSCF Address pool statistics.')
apSecurityTscfAddressPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 15, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityTscfAddressPoolName.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfAddressPoolName.setDescription('The name of the TSCF Address Pool')
apSecurityTscfTotalAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 15, 1, 2), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityTscfTotalAddressCount.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfTotalAddressCount.setDescription('The total numbers of addresses in the TSCF address pool')
apSecurityTscfInUseAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 15, 1, 3), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityTscfInUseAddressCount.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfInUseAddressCount.setDescription('The number of addresses in use from the TSCF address pool')
apSecurityTscfFreeAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 15, 1, 4), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityTscfFreeAddressCount.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfFreeAddressCount.setDescription('The number of addresses available for allocation in the TSCF address pool')
apSecurityTscfInvalidAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 9, 1, 15, 1, 5), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityTscfInvalidAddressCount.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfInvalidAddressCount.setDescription('The number of invalid  addresses in the TSCF address pool')
apSecurityTscfAddrPoolThresholdLevel = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 29), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityTscfAddrPoolThresholdLevel.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfAddrPoolThresholdLevel.setDescription('TSCF address pool threshold')
apSecurityTscfMaxTunnelsThresholdLevel = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 9, 2, 30), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSecurityTscfMaxTunnelsThresholdLevel.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfMaxTunnelsThresholdLevel.setDescription('TSCF max tunnels threshold')
apSecurityTscfNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 8))
apSecurityTscfNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 8, 0))
apSecurityTscfAddressPoolUsageTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 8, 0, 1)).setObjects(("APSECURITY-MIB", "apSecurityTscfAddressPoolName"), ("APSECURITY-MIB", "apSecurityTscfInUseAddressCount"), ("APSECURITY-MIB", "apSecurityTscfTotalAddressCount"), ("APSECURITY-MIB", "apSecurityTscfAddrPoolThresholdLevel"))
if mibBuilder.loadTexts: apSecurityTscfAddressPoolUsageTrap.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfAddressPoolUsageTrap.setDescription('This notification is sent when the available IP addresses\r\n                        in TSCF address pool depletes below the \r\n                        threshold level.')
apSecurityTscfAddressPoolUsageClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 8, 0, 2)).setObjects(("APSECURITY-MIB", "apSecurityTscfAddressPoolName"), ("APSECURITY-MIB", "apSecurityTscfInUseAddressCount"), ("APSECURITY-MIB", "apSecurityTscfTotalAddressCount"), ("APSECURITY-MIB", "apSecurityTscfAddrPoolThresholdLevel"))
if mibBuilder.loadTexts: apSecurityTscfAddressPoolUsageClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfAddressPoolUsageClearTrap.setDescription('This notification is sent when the available \r\n                        IP addresses in TSCF address pool \r\n                        are more than the threshold level.')
apSecurityTscfMaxTunnelTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 8, 0, 3)).setObjects(("APSECURITY-MIB", "apTscfActiveTunnels"), ("APSECURITY-MIB", "apTscfLicenseTunnelCount"), ("APSECURITY-MIB", "apSecurityTscfMaxTunnelsThresholdLevel"))
if mibBuilder.loadTexts: apSecurityTscfMaxTunnelTrap.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfMaxTunnelTrap.setDescription('This notification is sent when the available\r\n                        IP addresses in TSCF address pool \r\n                        depletes below the threshold level.')
apSecurityTscfClearMaxTunnelTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 9, 3, 8, 0, 4)).setObjects(("APSECURITY-MIB", "apTscfActiveTunnels"), ("APSECURITY-MIB", "apTscfLicenseTunnelCount"), ("APSECURITY-MIB", "apSecurityTscfMaxTunnelsThresholdLevel"))
if mibBuilder.loadTexts: apSecurityTscfClearMaxTunnelTrap.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfClearMaxTunnelTrap.setDescription('This notification is sent when the available\r\n                        IP addresses in TSCF address pool \r\n                        depletes below the threshold level.')
apSecurityTscfNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 9, 4, 3, 11)).setObjects(("APSECURITY-MIB", "apSecurityTscfAddressPoolUsageTrap"), ("APSECURITY-MIB", "apSecurityTscfAddressPoolUsageClearTrap"), ("APSECURITY-MIB", "apSecurityTscfMaxTunnelTrap"), ("APSECURITY-MIB", "apSecurityTscfClearMaxTunnelTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityTscfNotificationsGroup = apSecurityTscfNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityTscfNotificationsGroup.setDescription('A collection of notifications for TSCF resource alerts')
mibBuilder.exportSymbols("APSECURITY-MIB", apSecurityGtpV2CreateSessRespPPMAddFail=apSecurityGtpV2CreateSessRespPPMAddFail, apSecurityTacacsIndex=apSecurityTacacsIndex, apSecurityIkeInterfaceStatsTable=apSecurityIkeInterfaceStatsTable, apSecurityIkeInterfaceTsErrors=apSecurityIkeInterfaceTsErrors, apSecSAIMSAKARegsInitRegFailedAllocIms=apSecSAIMSAKARegsInitRegFailedAllocIms, apSecurityTscfAddressPoolStatsEntry=apSecurityTscfAddressPoolStatsEntry, apSecSAIMSAKAModSuccessRespSent=apSecSAIMSAKAModSuccessRespSent, apSecurityIkeInterfaceChildSaFail=apSecurityIkeInterfaceChildSaFail, apSecurityIkeInterfaceEapInvalidCodeErrors=apSecurityIkeInterfaceEapInvalidCodeErrors, apSecurityOCSRHostname=apSecurityOCSRHostname, apSecurityIkeInterfaceIkeBadConfigErrors=apSecurityIkeInterfaceIkeBadConfigErrors, apSecSAIMSAKAAddReqSent=apSecSAIMSAKAAddReqSent, apSecurityGtpV2DeleteBReqRcvdPPMDelFail=apSecurityGtpV2DeleteBReqRcvdPPMDelFail, apSecuritySrcAddress=apSecuritySrcAddress, apSecurityGtpV2DeleteSessionRespRcvdFail=apSecurityGtpV2DeleteSessionRespRcvdFail, apSecurityIkeInterfaceCertStackOverflowErrors=apSecurityIkeInterfaceCertStackOverflowErrors, apSecurityGTPProfileName=apSecurityGTPProfileName, apSecurityIkeInterfaceEapOnlyNonZeroSPI=apSecurityIkeInterfaceEapOnlyNonZeroSPI, apSecurityIkeInterfaceDPDRespRecv=apSecurityIkeInterfaceDPDRespRecv, apSecurityIkeInterfaceIkeSaAuthMsgsSent=apSecurityIkeInterfaceIkeSaAuthMsgsSent, apSecurityCspName=apSecurityCspName, apSecurityIkeInterfaceIkeBadCookieErrors=apSecurityIkeInterfaceIkeBadCookieErrors, apSecurityIkeInterfaceMessageRetrans=apSecurityIkeInterfaceMessageRetrans, apSecSAIMSAKASaCreatePPMInboundFailed=apSecSAIMSAKASaCreatePPMInboundFailed, apSecSASRTPSaCollision=apSecSASRTPSaCollision, apSecurityGtpInvalidIELen=apSecurityGtpInvalidIELen, apSecurityIkeInterfaceHalfOpenSecurityAssociations=apSecurityIkeInterfaceHalfOpenSecurityAssociations, apSecSAIMSAKADelFailRespSent=apSecSAIMSAKADelFailRespSent, apSecurityGTPFailureNotifications=apSecurityGTPFailureNotifications, apSecSAIMSAKAModFailInvalidParamRespSent=apSecSAIMSAKAModFailInvalidParamRespSent, apSecSAIMSAKAModFailRespRcvd=apSecSAIMSAKAModFailRespRcvd, apSecurityIkeInterfaceTunnelRate=apSecurityIkeInterfaceTunnelRate, apSecurityDstAddress=apSecurityDstAddress, apSecurityGtpV2CreateSesssionReqSent=apSecurityGtpV2CreateSesssionReqSent, apSecurityIkeInterfaceCriticalPayloadErrors=apSecurityIkeInterfaceCriticalPayloadErrors, apSecurityGtpV2CreateBearerRespSentFail=apSecurityGtpV2CreateBearerRespSentFail, apSecSASRTPDelReqSent=apSecSASRTPDelReqSent, apSecurityIkeInterfaceMobikeUpdateSAFailUnexpUpdate=apSecurityIkeInterfaceMobikeUpdateSAFailUnexpUpdate, apSecurityRadiusFailureNotification=apSecurityRadiusFailureNotification, apSecurityGTPIPAddress=apSecurityGTPIPAddress, apTscfFailureDDTDatagramOnly=apTscfFailureDDTDatagramOnly, apSecurityOCSRIpAddress=apSecurityOCSRIpAddress, apTscfFailureNoTunnelForPkt=apTscfFailureNoTunnelForPkt, apSecurityIkeInterfaceInfoTable=apSecurityIkeInterfaceInfoTable, apSecurityGtpV2StandbyDedBrerPPMDelFail=apSecurityGtpV2StandbyDedBrerPPMDelFail, apSecSASRTPAddFailRespSent=apSecSASRTPAddFailRespSent, apSecurityIkeInterfaceDPDRecvPortChange=apSecurityIkeInterfaceDPDRecvPortChange, apSecurityGtpCPDPFailInternalError=apSecurityGtpCPDPFailInternalError, apSecurityIkeInterfaceEapTtlsFail=apSecurityIkeInterfaceEapTtlsFail, apSecSASRTPAddFailRespRcvd=apSecSASRTPAddFailRespRcvd, apTscfFailureNonNullKeepAlive=apTscfFailureNonNullKeepAlive, apSecurityGtpCPDPFailRespSent=apSecurityGtpCPDPFailRespSent, apTscfFlowIdTableSize=apTscfFlowIdTableSize, apTscfFailureClientAssignedSIPServer=apTscfFailureClientAssignedSIPServer, apSecurityIkeInterfaceStatsEntry=apSecurityIkeInterfaceStatsEntry, apSecurityTlsNotificationsPrefix=apSecurityTlsNotificationsPrefix, apSecurityPeerAddress=apSecurityPeerAddress, apSecurityIkeInterfaceEapInvalidMethodTypeErrors=apSecurityIkeInterfaceEapInvalidMethodTypeErrors, apSecurityGtpV2UpdateBReqPPMUpdateFail=apSecurityGtpV2UpdateBReqPPMUpdateFail, apTscfCSResponseSent=apTscfCSResponseSent, apSecurityGTPLinkFailureCause=apSecurityGTPLinkFailureCause, apSecurityTacacsNotifications=apSecurityTacacsNotifications, apSecurityIkeInterfaceMobikeReturnRouteCheckTimeout=apSecurityIkeInterfaceMobikeReturnRouteCheckTimeout, apSecurityGtpV2UpdateBearerReqRcvdFail=apSecurityGtpV2UpdateBearerReqRcvdFail, apSecuritySAIMSAKAStats=apSecuritySAIMSAKAStats, apSecurityIkeInterfaceDPDSent=apSecurityIkeInterfaceDPDSent, apSecurityDhcpInterfaceOfferSent=apSecurityDhcpInterfaceOfferSent, apSecurityIkeInterfaceIkeBadNonceErrors=apSecurityIkeInterfaceIkeBadNonceErrors, apTscfCSREnableDDT=apTscfCSREnableDDT, apSecSAIMSAKARcvdModFromActive=apSecSAIMSAKARcvdModFromActive, apTscfConfReqNagleReceived=apTscfConfReqNagleReceived, apSecurityCertificateCertIssuer=apSecurityCertificateCertIssuer, apSecurityCRLRetrievalNotificationsPrefix=apSecurityCRLRetrievalNotificationsPrefix, apSecurityDhcpInterfaceCurrentSessions=apSecurityDhcpInterfaceCurrentSessions, apSecSAIMSAKASAAgentDelayDeleteCount=apSecSAIMSAKASAAgentDelayDeleteCount, apSecurityIkeInterfaceEapAkaPrimeFail=apSecurityIkeInterfaceEapAkaPrimeFail, apSecurityIkeInterfaceIKESAPacketSent=apSecurityIkeInterfaceIKESAPacketSent, apSecurityIkeInterfaceAuthNoApnSubscriptionErrors=apSecurityIkeInterfaceAuthNoApnSubscriptionErrors, apSecurityTscfAddrPoolThresholdLevel=apSecurityTscfAddrPoolThresholdLevel, apTscfFailureClientAsignedKA=apTscfFailureClientAsignedKA, apSecurityOCSRNotificationsGroup=apSecurityOCSRNotificationsGroup, apTscfUnTunneledPacketDrop=apTscfUnTunneledPacketDrop, apSecurityIkeInterfaceAuthErrors=apSecurityIkeInterfaceAuthErrors, apSecurityGtpTunnelsCreated=apSecurityGtpTunnelsCreated, apSecSASRTPDelFailRespRcvd=apSecSASRTPDelFailRespRcvd, apSecurityDhcpInterfaceFailures=apSecurityDhcpInterfaceFailures, apSecurityIkeInterfaceIkeTunnelAvgSetupTime=apSecurityIkeInterfaceIkeTunnelAvgSetupTime, apSecurityFailureArea=apSecurityFailureArea, apSecurityGtpErrorIndCtxtNotFound=apSecurityGtpErrorIndCtxtNotFound, apTscfFdTableSize=apTscfFdTableSize, apTscfFailureInternalIPExhausted=apTscfFailureInternalIPExhausted, apSecurityIkeInterfaceIkeBadMsgErrors=apSecurityIkeInterfaceIkeBadMsgErrors, apSecurityGtpUnknownMsg=apSecurityGtpUnknownMsg, apSecurityGtpInvalidPCOFormat=apSecurityGtpInvalidPCOFormat, apSecurityIkeInterfaceIkeMismatchErrors=apSecurityIkeInterfaceIkeMismatchErrors, apSecurityGtpV2DeleteSessionRespRcvd=apSecurityGtpV2DeleteSessionRespRcvd, apTscfFailureMalformed=apTscfFailureMalformed, apSecurityCertificateTable=apSecurityCertificateTable, apSecuritySASRTPStats=apSecuritySASRTPStats, apSecSAIMSAKARegForwardUnProtectReg=apSecSAIMSAKARegForwardUnProtectReg, apTscfFailureNonNullSipServer=apTscfFailureNonNullSipServer, apSecurityIkeInterfaceSyntaxErrors=apSecurityIkeInterfaceSyntaxErrors, apSecurityGtpInvalidSeqIE=apSecurityGtpInvalidSeqIE, apSecSAIKEAcquireSuccessRespRcvd=apSecSAIKEAcquireSuccessRespRcvd, apSecurityIkeInterfaceRekeyOnSNoverflow=apSecurityIkeInterfaceRekeyOnSNoverflow, apSecurityIkeInterfaceMsgError=apSecurityIkeInterfaceMsgError, apSecurityDhcpInterfaceMaxSessions=apSecurityDhcpInterfaceMaxSessions, apSecurityTacacsDownLocalAuthUsed=apSecurityTacacsDownLocalAuthUsed, apSecurityOCSRNotificationsPrefix=apSecurityOCSRNotificationsPrefix, apSecSAIMSAKAReuseSpiFalse=apSecSAIMSAKAReuseSpiFalse, apSecurityIkeInterfaceIkeBadSaErrors=apSecurityIkeInterfaceIkeBadSaErrors, apSecurityGtpV2CreateSesssionReqSentFail=apSecurityGtpV2CreateSesssionReqSentFail, apSecSAIMSAKARegsFromPotectedPort=apSecSAIMSAKARegsFromPotectedPort, apTscfKARespRcvd=apTscfKARespRcvd, apSecurityGtpV2DeleteBearerReqRcvdFail=apSecurityGtpV2DeleteBearerReqRcvdFail, apSecSAIMSAKASaDelFailed=apSecSAIMSAKASaDelFailed, apSecurityCRLServerIPAddress=apSecurityCRLServerIPAddress, apSecurityGtpV2CreateBearerRespSent=apSecurityGtpV2CreateBearerRespSent, apSecurityCertificateRecordName=apSecurityCertificateRecordName, apSecurityIkeInterfaceIkeBadCertTypeErrors=apSecurityIkeInterfaceIkeBadCertTypeErrors, apSecurityLastSuccessfulCRLRetrieval=apSecurityLastSuccessfulCRLRetrieval, apSecurityGtpIncorrectOptIE=apSecurityGtpIncorrectOptIE, apSecurityNotificationObjects=apSecurityNotificationObjects, apTscfFailureUnkownMsg=apTscfFailureUnkownMsg, apSecurityTlsEncryptionFailureNotification=apSecurityTlsEncryptionFailureNotification, apSecurityTlsNotifications=apSecurityTlsNotifications, apSecSAIMSAKAAddFailInvalidParamRespSent=apSecSAIMSAKAAddFailInvalidParamRespSent, apSecSAIMSAKAInvalidRedAction=apSecSAIMSAKAInvalidRedAction, apSecurityTacacsServer=apSecurityTacacsServer, apTscfConfReqReceived=apTscfConfReqReceived, apTscfFailureCannotProvisionIP=apTscfFailureCannotProvisionIP, apTscfTunnelTimeoutCount=apTscfTunnelTimeoutCount, apSecurityIkeInterfaceTunnelTearDownRate=apSecurityIkeInterfaceTunnelTearDownRate, apSecurityGtpStatsEntry=apSecurityGtpStatsEntry, apTscfFailureCannotProvisionKA=apTscfFailureCannotProvisionKA, apSecSAIMSAKARegsInitRegImsExist=apSecSAIMSAKARegsInitRegImsExist, apSecurityTacacsObjectsGroup=apSecurityTacacsObjectsGroup, apSecurityIkeInterfaceIkeBadCookie2Errors=apSecurityIkeInterfaceIkeBadCookie2Errors, apSecurityGtpUPDPSuccRespRcvd=apSecurityGtpUPDPSuccRespRcvd, apSecSAIMSAKASAAgentMaxTransQueueSize=apSecSAIMSAKASAAgentMaxTransQueueSize, apSecurityIkeInterfaceIkeBufferOverflowErrors=apSecurityIkeInterfaceIkeBufferOverflowErrors, apSecSAIMSAKASaInboundOnly=apSecSAIMSAKASaInboundOnly, apSecurityDateTime=apSecurityDateTime, apSecurityIkeInterfaceKeErrors=apSecurityIkeInterfaceKeErrors, apSecurityGtpTunnelNonExistent=apSecurityGtpTunnelNonExistent, apSecurityGtpCPDPRespCtxtNotFound=apSecurityGtpCPDPRespCtxtNotFound, apSecSAIMSAKARegsOutProtPortPriorDisconnect=apSecSAIMSAKARegsOutProtPortPriorDisconnect, apSecurityCompliances=apSecurityCompliances, apSecurityIkeInterfaceIkeBadPayloadErrors=apSecurityIkeInterfaceIkeBadPayloadErrors, apSecurityCrlInvalidNotification=apSecurityCrlInvalidNotification, apSecurityAuthFailureThresholdInetNotification=apSecurityAuthFailureThresholdInetNotification, apSecurityGtpUPDPFailRespRcvd=apSecurityGtpUPDPFailRespRcvd, apSecSAIKEAddFailRespSent=apSecSAIKEAddFailRespSent, apSecSAIMSAKADelTransactionTimeout=apSecSAIMSAKADelTransactionTimeout, apSecurityIkeInterfaceChildSaDelFail=apSecurityIkeInterfaceChildSaDelFail, apSecurityNotificationsInetGroup=apSecurityNotificationsInetGroup, apSecurityIkeInterfaceCpuOverloadErrors=apSecurityIkeInterfaceCpuOverloadErrors, apSecurityIkeInterfaceEapOnlyNonZeroProtoId=apSecurityIkeInterfaceEapOnlyNonZeroProtoId, apSecSASRTPDelSuccessRespSent=apSecSASRTPDelSuccessRespSent, apTscfEstablishedTunnels=apTscfEstablishedTunnels, apSecSASRTPSaKeyNotFound=apSecSASRTPSaKeyNotFound, apSecurityIkeInterfaceInIkeSaRekeyRequestSuccess=apSecurityIkeInterfaceInIkeSaRekeyRequestSuccess, apSecurityIkeInterfaceInIkeSaDeleteRequestFailure=apSecurityIkeInterfaceInIkeSaDeleteRequestFailure, apSecSAIMSAKAAddFailProtoDataInvalid=apSecSAIMSAKAAddFailProtoDataInvalid, apSecuritySrtpEncryptionFailureNotification=apSecuritySrtpEncryptionFailureNotification, apTscfSwitchToStandBy=apTscfSwitchToStandBy, apSecurityIkeInterfaceMobikeUpdateSAAddrFamMismatch=apSecurityIkeInterfaceMobikeUpdateSAAddrFamMismatch, apSecSAIMSAKASendModToRed=apSecSAIMSAKASendModToRed, apTscfActiveTunnelTableSize=apTscfActiveTunnelTableSize, apSecurityIkeInterfaceNatKeepAliveMsgsRecv=apSecurityIkeInterfaceNatKeepAliveMsgsRecv, apSecSAIMSAKADelFailRespRcvd=apSecSAIMSAKADelFailRespRcvd, apSecuritySrtpEncrAlgorithm=apSecuritySrtpEncrAlgorithm, apSecurityIPsecTunCapNotification=apSecurityIPsecTunCapNotification, apTscfTunnelsTimedOut=apTscfTunnelsTimedOut, apSecSAIMSAKADelSuccessRespSent=apSecSAIMSAKADelSuccessRespSent, apSecurityIkeInterfaceIkeGetSaFailErrors=apSecurityIkeInterfaceIkeGetSaFailErrors, apSecurityStatus=apSecurityStatus, apSecurityIkeInterfaceIpsecSaCapacityExceedCount=apSecurityIkeInterfaceIpsecSaCapacityExceedCount, apSecSAIMSAKASaCreated=apSecSAIMSAKASaCreated, apSecurityIkeInterfaceIkeBadMsgIdErrors=apSecurityIkeInterfaceIkeBadMsgIdErrors, apSecSASRTPModReqRcvd=apSecSASRTPModReqRcvd, apSecurityCrlNotificationsGroup=apSecurityCrlNotificationsGroup, apSecurityIkeInterfaceEapOtherFail=apSecurityIkeInterfaceEapOtherFail, apSecurityGtpUnexpectedIE=apSecurityGtpUnexpectedIE, apSecurityIkeInterfaceIkeErrorsGroup=apSecurityIkeInterfaceIkeErrorsGroup, apSecurityTscfAddressPoolStatsTable=apSecurityTscfAddressPoolStatsTable, apTscfCMReTx=apTscfCMReTx, apSecurityIkeInterfaceAuthAuthorizationRejectedErrors=apSecurityIkeInterfaceAuthAuthorizationRejectedErrors, apSecurityIkeInterfaceInfoObjectsGroup=apSecurityIkeInterfaceInfoObjectsGroup, apSecurityGtpCPDPReqSent=apSecurityGtpCPDPReqSent, apSecurityTscfMaxTunnelsThresholdLevel=apSecurityTscfMaxTunnelsThresholdLevel, apSecurityIkeInterfaceIkeStatsGroup=apSecurityIkeInterfaceIkeStatsGroup, apSecurityGtpV2DeleteBearerRespSentFail=apSecurityGtpV2DeleteBearerRespSentFail, apSecurityGeneralNotifications=apSecurityGeneralNotifications, apSecSAIMSAKAReuseSpiTrue=apSecSAIMSAKAReuseSpiTrue, apTscfFailureDDTNotEnabled=apTscfFailureDDTNotEnabled, apSecurityGtpInvalidMsgLen=apSecurityGtpInvalidMsgLen, apSecurityGTPUEchoRespSent=apSecurityGTPUEchoRespSent, apSecSAIMSAKASaRedundancySyncQueue=apSecSAIMSAKASaRedundancySyncQueue, apSecurityCertExpiredNotification=apSecurityCertExpiredNotification, apSecurityPeerAddressFamily=apSecurityPeerAddressFamily, apSecurityIkeInterfaceAuthNon3GppAccessToEpcNotAllowedErrors=apSecurityIkeInterfaceAuthNon3GppAccessToEpcNotAllowedErrors, apSecurityIPSECMode=apSecurityIPSECMode, apSecuritySrtpNotifications=apSecuritySrtpNotifications, apSecurityIkeInterfaceEapAccessRequestErrors=apSecurityIkeInterfaceEapAccessRequestErrors, apTscfTypeInnerIPDestDrop=apTscfTypeInnerIPDestDrop, apSecurityIkeInterfaceChildSaRekey=apSecurityIkeInterfaceChildSaRekey, apSecSAIKEAddSuccessRespSent=apSecSAIKEAddSuccessRespSent, apSecurityTacacsDownLocalAuthUsedTrap=apSecurityTacacsDownLocalAuthUsedTrap, apSecurityIkeInterfaceAuthCertCheckFailure=apSecurityIkeInterfaceAuthCertCheckFailure, apSecurityGTPHostName=apSecurityGTPHostName, apSecurityTscfAddressPoolUsageClearTrap=apSecurityTscfAddressPoolUsageClearTrap, apSecurityIkeInterfaceAuthPlmnNotAllowedErrors=apSecurityIkeInterfaceAuthPlmnNotAllowedErrors, apSecurityIkeInterfaceSAInitMsgRecv=apSecurityIkeInterfaceSAInitMsgRecv, apSecurityIkeInterfaceAuthRatTypeNotAllowedErrors=apSecurityIkeInterfaceAuthRatTypeNotAllowedErrors, apSecurityGtpErrorObjectsGroup=apSecurityGtpErrorObjectsGroup, apSecurityTunnelDPDInetNotification=apSecurityTunnelDPDInetNotification, apSecurityCertificateEntry=apSecurityCertificateEntry, apSecurityIkeInterfaceCpErrors=apSecurityIkeInterfaceCpErrors, apSecurityIkeInterfaceCurrentChildSaPair=apSecurityIkeInterfaceCurrentChildSaPair, apSecSAIMSAKASaKeyNotFoundTimeout=apSecSAIMSAKASaKeyNotFoundTimeout, apTscfGetDTLSCtxSuccess=apTscfGetDTLSCtxSuccess, apTscfFailureDDTWrongTransport=apTscfFailureDDTWrongTransport, apTscfStatsMemFails=apTscfStatsMemFails, apSecurityIkeInterfaceIkeBadNotifyCookieErrors=apSecurityIkeInterfaceIkeBadNotifyCookieErrors, apSecSAIMSAKAAddFailTableInsertFail=apSecSAIMSAKAAddFailTableInsertFail, apSecurityAuthNotifications=apSecurityAuthNotifications, apTscfFailureTimerFailure=apTscfFailureTimerFailure, apSecSASRTPDelTransactionTimeout=apSecSASRTPDelTransactionTimeout, apTscfActiveTunnels=apTscfActiveTunnels, apSecSAIMSAKASaCreatePPMOutboundFailed=apSecSAIMSAKASaCreatePPMOutboundFailed, apSecurityOCSRUpNotification=apSecurityOCSRUpNotification, apSecurityDhcpInterfaceTotalSessions=apSecurityDhcpInterfaceTotalSessions, apSecSAIMSAKARegsReRegRejectBusy=apSecSAIMSAKARegsReRegRejectBusy, apSecurityGtpV2DeleteBearerRespSent=apSecurityGtpV2DeleteBearerRespSent, apSecurityIkeInterfaceCertKeyUsageMissingErrors=apSecurityIkeInterfaceCertKeyUsageMissingErrors, apSecurityCrlNotificationsPrefix=apSecurityCrlNotificationsPrefix, apSecurityGtpCaviumStatsGroup=apSecurityGtpCaviumStatsGroup, apSecSAIMSAKARcvdAddFromActive=apSecSAIMSAKARcvdAddFromActive, apSecurityCRLRetrievalClearNotification=apSecurityCRLRetrievalClearNotification, apSecurityTscfInUseAddressCount=apSecurityTscfInUseAddressCount, apSecSAIMSAKASaRedAddRecFailure=apSecSAIMSAKASaRedAddRecFailure, apSecSAIMSAKARegsInitRegRejectResource=apSecSAIMSAKARegsInitRegRejectResource, apSecurityCRLRetrievalFailNotification=apSecurityCRLRetrievalFailNotification, apTscfKAReceived=apTscfKAReceived, apTscfKARespSent=apTscfKARespSent, apSecurityIkeInterfaceChildSaRequest=apSecurityIkeInterfaceChildSaRequest, apSecSASRTPDelReqRcvd=apSecSASRTPDelReqRcvd, apSecurityGtpAddress=apSecurityGtpAddress, apSecurityGtpDPDPSuccRespSent=apSecurityGtpDPDPSuccRespSent, apSecurityIkeInterfaceIkeBadSpiErrors=apSecurityIkeInterfaceIkeBadSpiErrors, apSecurityTacacsNotificationsPrefix=apSecurityTacacsNotificationsPrefix, apSecurityCRLRetrievalNotificationsGroup=apSecurityCRLRetrievalNotificationsGroup, apSecSASRTPSaDeleted=apSecSASRTPSaDeleted)
mibBuilder.exportSymbols("APSECURITY-MIB", apSecurityIkeInterfaceIkeBadIDErrors=apSecurityIkeInterfaceIkeBadIDErrors, apSecurityGeneralNotificationsPrefix=apSecurityGeneralNotificationsPrefix, apSecurityGtpV2CreateBearerReqRcvdFail=apSecurityGtpV2CreateBearerReqRcvdFail, apSecSAIMSAKASendAddToRed=apSecSAIMSAKASendAddToRed, apSecurityDhcpInterfaceAckSent=apSecurityDhcpInterfaceAckSent, apSecurityTscfMaxTunnelTrap=apSecurityTscfMaxTunnelTrap, apSecurityIkeInterfaceDDosRecv=apSecurityIkeInterfaceDDosRecv, apTscfConfRespSent=apTscfConfRespSent, apSecurityCertificateCertSubject=apSecurityCertificateCertSubject, apSecurityGTPLinkFailureNotification=apSecurityGTPLinkFailureNotification, apSecSAIMSAKARegsInitRegPassedQuota=apSecSAIMSAKARegsInitRegPassedQuota, apSecurityIkeInterfaceEapAkaSucc=apSecurityIkeInterfaceEapAkaSucc, apSecSAIMSAKASaRecoveryFail=apSecSAIMSAKASaRecoveryFail, apSecurityFailureCause=apSecurityFailureCause, apSecurityIPsecTunCapPct=apSecurityIPsecTunCapPct, apSecSAIMSAKARegsReRegNoImsEntry=apSecSAIMSAKARegsReRegNoImsEntry, apSecSASRTPSaCreated=apSecSASRTPSaCreated, apSecuritySrtpAuthAlgorithm=apSecuritySrtpAuthAlgorithm, apSecurityGTPCEchoReqRcvd=apSecurityGTPCEchoReqRcvd, apTscfSetDTLSCtxSent=apTscfSetDTLSCtxSent, apSecurityIkeInterfaceInIkeSaRekeyRequestFailure=apSecurityIkeInterfaceInIkeSaRekeyRequestFailure, apSecurityTscfNotificationsPrefix=apSecurityTscfNotificationsPrefix, apTscfFailureTunnelIdExhausted=apTscfFailureTunnelIdExhausted, apSecurityGtpMissingContIE=apSecurityGtpMissingContIE, apSecurityIkeInterfaceCertDNEStringTooLongErrors=apSecurityIkeInterfaceCertDNEStringTooLongErrors, apSecurityTacacsDownLocalAuthTrapGroup=apSecurityTacacsDownLocalAuthTrapGroup, apSecurityIkeInterfaceAuthIDError=apSecurityIkeInterfaceAuthIDError, apSecSAIKEAddReqRcvd=apSecSAIKEAddReqRcvd, apSecSAIKESaDeleted=apSecSAIKESaDeleted, apTscfFailureNonExistentTunnelId=apTscfFailureNonExistentTunnelId, apSecurityGTPErrorIndRcvd=apSecurityGTPErrorIndRcvd, apSecurityDstPort=apSecurityDstPort, apSecSAIMSAKAModFailRespSent=apSecSAIMSAKAModFailRespSent, apSecurityDhcpInterfaceStatsTable=apSecurityDhcpInterfaceStatsTable, apSecurityGtpSemanticTFTError=apSecurityGtpSemanticTFTError, apSecSASRTPAddReqSent=apSecSASRTPAddReqSent, apSecurityGtpCPDPRespTimeout=apSecurityGtpCPDPRespTimeout, apSecSAIMSAKARegsInitRegRejectBusy=apSecSAIMSAKARegsInitRegRejectBusy, apSecurityTscfStatsTimeoutGroup=apSecurityTscfStatsTimeoutGroup, apSecurityIkeInterfaceDPDRespNotRecv=apSecurityIkeInterfaceDPDRespNotRecv, apSecurityIkeInterfaceCertExpiredErrors=apSecurityIkeInterfaceCertExpiredErrors, apSecurityDhcpInterfaceRelRcvd=apSecurityDhcpInterfaceRelRcvd, apSecSAIMSAKAModReqRcvd=apSecSAIMSAKAModReqRcvd, apSecurityIkeInterfaceEapTtlsSucc=apSecurityIkeInterfaceEapTtlsSucc, apSecSAIMSAKADelFailInvalidParamRespSent=apSecSAIMSAKADelFailInvalidParamRespSent, apSecurityIkeInterfaceIkeSaChildMsgsRecv=apSecurityIkeInterfaceIkeSaChildMsgsRecv, apSecurityCertNotificationsGroup=apSecurityCertNotificationsGroup, apSecurityNotificationsGroup=apSecurityNotificationsGroup, apSecurityIkeInterfaceChildSaDelRequest=apSecurityIkeInterfaceChildSaDelRequest, apSecurityGtpInvalidAPCOFormat=apSecurityGtpInvalidAPCOFormat, apSecurityIkeInterfaceEapInvalidPktErrors=apSecurityIkeInterfaceEapInvalidPktErrors, apSecurityTacacsFailureNotification=apSecurityTacacsFailureNotification, apSecurityGtpV2DeleteBearerReqRcvd=apSecurityGtpV2DeleteBearerReqRcvd, apSecSAIMSAKASaKeyNotFound=apSecSAIMSAKASaKeyNotFound, apTscfFailureOutOfResources=apTscfFailureOutOfResources, apTscfCSREnableRedundancy=apTscfCSREnableRedundancy, apSecSAIMSAKARegsInProtPortPriorDisconnect=apSecSAIMSAKARegsInProtPortPriorDisconnect, apSecurityEncryptionAlg=apSecurityEncryptionAlg, apSecurityIkeInterfaceMobikeIntSaCommFailSaDel=apSecurityIkeInterfaceMobikeIntSaCommFailSaDel, apSecuritySrcIpAddress=apSecuritySrcIpAddress, apTscfFailureTunnelEstablished=apTscfFailureTunnelEstablished, apSecurityIkeInterfaceChildSaSuccess=apSecurityIkeInterfaceChildSaSuccess, apSecurityIkeInterfaceEapOnlyAuthentication=apSecurityIkeInterfaceEapOnlyAuthentication, apSecurityCertificateConfigId=apSecurityCertificateConfigId, apSecurityIkeInterfaceProposalErrors=apSecurityIkeInterfaceProposalErrors, apSecurityGtpVersionNotSuppSent=apSecurityGtpVersionNotSuppSent, apSecurityTlsCipherSuite=apSecurityTlsCipherSuite, apTscfConfRelReqReceived=apTscfConfRelReqReceived, apSecurityConformance=apSecurityConformance, apSecSAIMSAKAAddFailRespSent=apSecSAIMSAKAAddFailRespSent, apSecurityGtpUnknownIE=apSecurityGtpUnknownIE, apSecurityIkeInterfaceIkeSaInfoMsgsSent=apSecurityIkeInterfaceIkeSaInfoMsgsSent, apSecurityDhcpInterfaceNAckSent=apSecurityDhcpInterfaceNAckSent, apSecurityTacacsFailureAuthentication=apSecurityTacacsFailureAuthentication, apTscfFailureGeneralProvisionIP=apTscfFailureGeneralProvisionIP, apSecurityIkeInterfaceIkeMismatchEncrAlgoErrors=apSecurityIkeInterfaceIkeMismatchEncrAlgoErrors, apSecurityIkeInterfaceAuthCertCheckRequest=apSecurityIkeInterfaceAuthCertCheckRequest, apSecSASRTPAddSuccessRespSent=apSecSASRTPAddSuccessRespSent, apSecuritySrtpDecryptionFailureCause=apSecuritySrtpDecryptionFailureCause, apSecSAIMSAKASaCreatedOutboundSent=apSecSAIMSAKASaCreatedOutboundSent, apSecurityIkeInterfaceIkeNoCertErrors=apSecurityIkeInterfaceIkeNoCertErrors, apTscfMaxActiveTunnels=apTscfMaxActiveTunnels, apSecurityIkeInterfaceAuthNetworkFailureErrors=apSecurityIkeInterfaceAuthNetworkFailureErrors, apSecSAIKEDelReqRcvd=apSecSAIKEDelReqRcvd, apSecurityIkeInterfaceEapMethodsStatsGroup=apSecurityIkeInterfaceEapMethodsStatsGroup, apSecurityTscfNotifications=apSecurityTscfNotifications, apSecSASRTPModSuccessRespRcvd=apSecSASRTPModSuccessRespRcvd, apSecurityIkeInterfaceEapTlsFail=apSecurityIkeInterfaceEapTlsFail, apTscfFailureServerFailure=apTscfFailureServerFailure, apTscfGetDTLSCtxSent=apTscfGetDTLSCtxSent, apSecurityIkeInterfaceOutIkeSaDeleteRequest=apSecurityIkeInterfaceOutIkeSaDeleteRequest, apSecurityGtpVersionNotSuppRcvd=apSecurityGtpVersionNotSuppRcvd, apSecurityGtpV2StandbyDedBrerPPMAddFail=apSecurityGtpV2StandbyDedBrerPPMAddFail, apSecurityGtpUPDPReqSent=apSecurityGtpUPDPReqSent, apSecurityIkeInterfaceIkeBadID2Errors=apSecurityIkeInterfaceIkeBadID2Errors, apSecSAIMSAKASaDelFailProtoDataInvalid=apSecSAIMSAKASaDelFailProtoDataInvalid, apSecurityGtpCPDPReqRcvd=apSecurityGtpCPDPReqRcvd, apSecurityGtpCPDPSuccRespSent=apSecurityGtpCPDPSuccRespSent, apSecurityIkeInterfaceCertNotExpectedOIDErrors=apSecurityIkeInterfaceCertNotExpectedOIDErrors, apSecuritySAIKEStatsGroup=apSecuritySAIKEStatsGroup, apTscfFailureLicenseExceeded=apTscfFailureLicenseExceeded, apSecurityDhcpInterfaceObjectsGroup=apSecurityDhcpInterfaceObjectsGroup, apSecurityIkeInterfaceIkeNewSaFailErrors=apSecurityIkeInterfaceIkeNewSaFailErrors, apSecurityIkeInterfaceEapOnlyUnSupEapProto=apSecurityIkeInterfaceEapOnlyUnSupEapProto, apSecurityIkeInterfaceIkeMismatchKeyLenErrors=apSecurityIkeInterfaceIkeMismatchKeyLenErrors, apSecurityIkeInterfaceIkeBadXchgErrors=apSecurityIkeInterfaceIkeBadXchgErrors, apSecurityTlsDecryptionFailureNotification=apSecurityTlsDecryptionFailureNotification, apSecSAIMSAKASaDelFailAddrMaskMismatch=apSecSAIMSAKASaDelFailAddrMaskMismatch, apTscfSetDTLSCtxFailed=apTscfSetDTLSCtxFailed, apSecurityGtpAddressType=apSecurityGtpAddressType, apSecSAIMSAKAAnswerBeforeChallenge=apSecSAIMSAKAAnswerBeforeChallenge, apSecurityGtpInvalidMsgFormat=apSecurityGtpInvalidMsgFormat, apSecSAIMSAKASaCreatedInboundSent=apSecSAIMSAKASaCreatedInboundSent, apSecurityIkeInterfaceIkeBadKeErrors=apSecurityIkeInterfaceIkeBadKeErrors, apSecSAIMSAKASaDeleted=apSecSAIMSAKASaDeleted, apTscfTunneledPacketDrop=apTscfTunneledPacketDrop, apSecurityRekeyOnSNoverflowObjectsGroup=apSecurityRekeyOnSNoverflowObjectsGroup, apSecurityCRLRetrievalNotifications=apSecurityCRLRetrievalNotifications, apSecSAIKEDelFailRespSent=apSecSAIKEDelFailRespSent, apSecSAIMSAKARcvdTimedDelFromAct=apSecSAIMSAKARcvdTimedDelFromAct, apSecurityIkeIfcBlAuthIDErrorObjectsGroup=apSecurityIkeIfcBlAuthIDErrorObjectsGroup, apTscfFailureGeneralProvisionKA=apTscfFailureGeneralProvisionKA, apSecSAIMSAKADelSuccessRespRcvd=apSecSAIMSAKADelSuccessRespRcvd, apSecSAIMSAKAAddFailRespRcvd=apSecSAIMSAKAAddFailRespRcvd, apSecurityGTPUEchoRespTimeout=apSecurityGTPUEchoRespTimeout, apSecurityGtpStatsTable=apSecurityGtpStatsTable, apTscfFailureUnkownServiceRequest=apTscfFailureUnkownServiceRequest, apTscfSwitchToActive=apTscfSwitchToActive, apTscfSetDTLSCtxSuccess=apTscfSetDTLSCtxSuccess, apTscfStatsFrees=apTscfStatsFrees, apSecSASRTPAddTransactionTimeout=apSecSASRTPAddTransactionTimeout, apSecSAIMSAKASaDelFailProtoParamsInvalid=apSecSAIMSAKASaDelFailProtoParamsInvalid, apSecurityTscfStatsObjects=apSecurityTscfStatsObjects, apTscfWrongSeqNum=apTscfWrongSeqNum, apSecurityIkeInterfaceEapSimSucc=apSecurityIkeInterfaceEapSimSucc, apSecurityGtpV2DeleteSessionRespTimeout=apSecurityGtpV2DeleteSessionRespTimeout, apSecurityIkeInterfaceIkeMismatchDHGroupErrors=apSecurityIkeInterfaceIkeMismatchDHGroupErrors, apSecSAIMSAKASaOutboundOnly=apSecSAIMSAKASaOutboundOnly, apSecurityIkeInterfaceIkeBadProposalErrors=apSecurityIkeInterfaceIkeBadProposalErrors, apSecurityIkeInterfaceSAInitMsgSent=apSecurityIkeInterfaceSAInitMsgSent, apSecurityIkeInterfaceEapAccessChallengeErrors=apSecurityIkeInterfaceEapAccessChallengeErrors, apSecurityIkeInterfaceCertInvalidStructErrors=apSecurityIkeInterfaceCertInvalidStructErrors, apSecSAIKEDelSuccessRespSent=apSecSAIKEDelSuccessRespSent, apSecurityTlsSessionId=apSecurityTlsSessionId, apSecurityCRLServer=apSecurityCRLServer, apSecurityGTPFailureNotificationsPrefix=apSecurityGTPFailureNotificationsPrefix, apSecurityDDosNotificationsInetGroup=apSecurityDDosNotificationsInetGroup, apSecSAIMSAKAAddFailProtoParamsInvalid=apSecSAIMSAKAAddFailProtoParamsInvalid, apSecSASRTPAddReqRcvd=apSecSASRTPAddReqRcvd, apTscfFailureAddrPoolUnavilable=apTscfFailureAddrPoolUnavilable, apSecurityIkeInterfaceIkeBadAttrErrors=apSecurityIkeInterfaceIkeBadAttrErrors, apSecSASRTPModFailRespRcvd=apSecSASRTPModFailRespRcvd, apSecSASRTPModSuccessRespSent=apSecSASRTPModSuccessRespSent, apSecSAIMSAKARegsTotal=apSecSAIMSAKARegsTotal, apSecurityPeerIpAddress=apSecurityPeerIpAddress, apSecurityTscfAddressPoolName=apSecurityTscfAddressPoolName, apSecurityDhcpInterfaceType=apSecurityDhcpInterfaceType, apSecurityGtpCPDPFailRespRcvd=apSecurityGtpCPDPFailRespRcvd, apSecurityNotifications=apSecurityNotifications, apSecurityIkeInterfaceDPDFailSaDel=apSecurityIkeInterfaceDPDFailSaDel, apSecSAIMSAKASaDelPPMInboundFailed=apSecSAIMSAKASaDelPPMInboundFailed, apSecurityIkeInterfaceMobikeReturnRouteCheckSuccess=apSecurityIkeInterfaceMobikeReturnRouteCheckSuccess, apSecSAIMSAKAModReqSent=apSecSAIMSAKAModReqSent, apSecurityIkeInterfaceAuthFailureTca=apSecurityIkeInterfaceAuthFailureTca, apSecurityIkeInterfaceMobikeFailToSendRouteCheck=apSecurityIkeInterfaceMobikeFailToSendRouteCheck, apSecurityDhcpInterfaceAddress=apSecurityDhcpInterfaceAddress, apSecurityTacacsTable=apSecurityTacacsTable, apSecurityDhcpInterfaceOfferTimeouts=apSecurityDhcpInterfaceOfferTimeouts, apSecurityCertificateIndex=apSecurityCertificateIndex, apTscfFailureGeneralProvisionIPMask=apTscfFailureGeneralProvisionIPMask, apSecurityIkeInterfaceIkeTunnelAvgHoldTime=apSecurityIkeInterfaceIkeTunnelAvgHoldTime, apSecurityGtpV2DeleteSessionReqSent=apSecurityGtpV2DeleteSessionReqSent, apSecSAIMSAKAAddFailInvalidTimer=apSecSAIMSAKAAddFailInvalidTimer, apSecSASRTPDelSuccessRespRcvd=apSecSASRTPDelSuccessRespRcvd, apSecurityGtpV2UpdateBearerRespSentFail=apSecurityGtpV2UpdateBearerRespSentFail, apSecurityIkeInterfaceIkeBadLenErrors=apSecurityIkeInterfaceIkeBadLenErrors, apSecurityIkeInterfaceMobikeMisMatchCookie2Errors=apSecurityIkeInterfaceMobikeMisMatchCookie2Errors, apSecSAIMSAKASaCollisionRecoveryLkupFail=apSecSAIMSAKASaCollisionRecoveryLkupFail, apSecSAIMSAKASaCollisionRecoverySuccess=apSecSAIMSAKASaCollisionRecoverySuccess, apSecurityTlsDecryptionFailureCause=apSecurityTlsDecryptionFailureCause, apSecurityIkeInterfaceIkeBadCertErrors=apSecurityIkeInterfaceIkeBadCertErrors, apSecurityGtpSyntacticPFError=apSecurityGtpSyntacticPFError, apSecurityCertExpireSoonNotification=apSecurityCertExpireSoonNotification, apSecSAIKEAcquireReqSent=apSecSAIKEAcquireReqSent, apSecurityGTPUEchoRespRcvd=apSecurityGTPUEchoRespRcvd, apSecurityIkeInterfaceEapTlsSucc=apSecurityIkeInterfaceEapTlsSucc, apSecSAIMSAKAAddReqRcvd=apSecSAIMSAKAAddReqRcvd, apTscfFailureAlreadyProvisionedKA=apTscfFailureAlreadyProvisionedKA, apSecSAIKEAcquireFailRespRcvd=apSecSAIKEAcquireFailRespRcvd, apSecuritySrcPort=apSecuritySrcPort, apSecurityCrlIssuer=apSecurityCrlIssuer, apSecurityIkeInterfaceCertInvalidParentCertificateErrors=apSecurityIkeInterfaceCertInvalidParentCertificateErrors, apSecurityIkeInterfaceMobikeSupportResponse=apSecurityIkeInterfaceMobikeSupportResponse, apSecuritySrtpEncryptionFailureCause=apSecuritySrtpEncryptionFailureCause, apSecurityIkeInterfaceInfoEntry=apSecurityIkeInterfaceInfoEntry, apSecurityIkeInterfaceChildSaDelSuccess=apSecurityIkeInterfaceChildSaDelSuccess, apSecuritySASRTPStatsGroup=apSecuritySASRTPStatsGroup, apSecSAIKESaCreateFailed=apSecSAIKESaCreateFailed, apSecSAIMSAKASaDeletedOutboundSent=apSecSAIMSAKASaDeletedOutboundSent, apSecSAIMSAKASaCollisionRecoveryFail=apSecSAIMSAKASaCollisionRecoveryFail, apSecurityTscfTotalAddressCount=apSecurityTscfTotalAddressCount, apSecurityAuthAlg=apSecurityAuthAlg, apSecurityTacacsCliCommands=apSecurityTacacsCliCommands, apSecurityGTPLinkClearNotification=apSecurityGTPLinkClearNotification, apSecurityGtpDPDPFailRespSent=apSecurityGtpDPDPFailRespSent, apSecurityGtpV2CreateSessionRespFailRcvd=apSecurityGtpV2CreateSessionRespFailRcvd, apSecSAIMSAKASaKeyExists=apSecSAIMSAKASaKeyExists, apSecurityGtpSemanticPFError=apSecurityGtpSemanticPFError, apSecurityCertNotifications=apSecurityCertNotifications, apSecurityIkeInterfaceIkeSaCapacityExceedCount=apSecurityIkeInterfaceIkeSaCapacityExceedCount, apSecurityCertificateCertStart=apSecurityCertificateCertStart, apSecSAIMSAKARegsReRegRejectResource=apSecSAIMSAKARegsReRegRejectResource, apSecurityDstIpAddress=apSecurityDstIpAddress, apSecurityIkeInterfaceIkeBadProtocolErrors=apSecurityIkeInterfaceIkeBadProtocolErrors, apSecurityIkeInterfaceDpdTca=apSecurityIkeInterfaceDpdTca, apSecuritySAIKEStats=apSecuritySAIKEStats, apSecurityGtpUPDPReqRcvd=apSecurityGtpUPDPReqRcvd, apSecurityCrlNotifications=apSecurityCrlNotifications, apSecSAIKESaDeleteFailed=apSecSAIKESaDeleteFailed, apSecurityGtpV2StandbyDefBrerPPMDelFail=apSecurityGtpV2StandbyDefBrerPPMDelFail, apSecurityTacacsDownLocalAuthUsedClearTrap=apSecurityTacacsDownLocalAuthUsedClearTrap, apSecurityCertObjectsGroup=apSecurityCertObjectsGroup, apSecurityIkeInterfaceType=apSecurityIkeInterfaceType, apSecurityGTPUEchoReqRcvd=apSecurityGTPUEchoReqRcvd, apSecurityGtpDPDPFailRespRcvd=apSecurityGtpDPDPFailRespRcvd, apSecurityGtpV2StandbyDefBrerPPMAddFail=apSecurityGtpV2StandbyDefBrerPPMAddFail, apSecurityIkeInterfaceInIkeSaDeleteRequestSuccess=apSecurityIkeInterfaceInIkeSaDeleteRequestSuccess, apSecSAIMSAKARegsFromUnprotPort=apSecSAIMSAKARegsFromUnprotPort, apSecSASRTPModFailRespSent=apSecSASRTPModFailRespSent, apTscfCSRDisableRedundancy=apTscfCSRDisableRedundancy, apSecurityIkeInterfaceSAEstablishmentAttempts=apSecurityIkeInterfaceSAEstablishmentAttempts, apSecSAIMSAKASaCollision=apSecSAIMSAKASaCollision, apSecurityIkeInterfaceEapOtherSucc=apSecurityIkeInterfaceEapOtherSucc, apSecurityGtpSyntacticTFTError=apSecurityGtpSyntacticTFTError, apSecurityGTPCEchoRespRcvd=apSecurityGTPCEchoRespRcvd, apSecSAIMSAKAAddSuccessRespSent=apSecSAIMSAKAAddSuccessRespSent, apSecurityCRLRetrievalFailureCause=apSecurityCRLRetrievalFailureCause, apSecSAIKESaCreated=apSecSAIKESaCreated, apSecurityGtpErrorStatsTable=apSecurityGtpErrorStatsTable, apSecurityGtpV2CreateBReqPPMAddFail=apSecurityGtpV2CreateBReqPPMAddFail, apSecSAIMSAKAAddSuccessRespRcvd=apSecSAIMSAKAAddSuccessRespRcvd, apSecurityTlsNotificationsGroup=apSecurityTlsNotificationsGroup, apSecurityGtpV2CreateSessionRespTimeout=apSecurityGtpV2CreateSessionRespTimeout, apSecurityTacacsEntry=apSecurityTacacsEntry, apSecurityIkeInterfaceIkeMismatchAuthAlgoErrors=apSecurityIkeInterfaceIkeMismatchAuthAlgoErrors, apTscfFailureRedundancyExceedsLimit=apTscfFailureRedundancyExceedsLimit, apSecurityDDosNotificationsGroup=apSecurityDDosNotificationsGroup, apTscfIntfConDrop=apTscfIntfConDrop, apTscfStatsAllocs=apTscfStatsAllocs, apSecurityDhcpInterfaceDisRcvd=apSecurityDhcpInterfaceDisRcvd, apTscfFinishedTunnels=apTscfFinishedTunnels, apSecurityIkeInterfaceIKESAPacketRcv=apSecurityIkeInterfaceIKESAPacketRcv, apSecSAIMSAKAIncompleteReg=apSecSAIMSAKAIncompleteReg, apSecuritySpi=apSecuritySpi)
mibBuilder.exportSymbols("APSECURITY-MIB", apSecurityIPsecTunCapClearNotification=apSecurityIPsecTunCapClearNotification, apSecurityCertNotificationsPrefix=apSecurityCertNotificationsPrefix, apTscfCsrReceived=apTscfCsrReceived, apSecurityIkeInterfaceInitCookieErrors=apSecurityIkeInterfaceInitCookieErrors, apSecurityIkeInterfaceIkeSaInfoMsgsRecv=apSecurityIkeInterfaceIkeSaInfoMsgsRecv, apSecurityDhcpInterfaceStatsEntry=apSecurityDhcpInterfaceStatsEntry, apSecurityIkeInterfaceEapAkaPrimeSucc=apSecurityIkeInterfaceEapAkaPrimeSucc, apSecurityIkeInterfaceDDosSent=apSecurityIkeInterfaceDDosSent, apTscfCSRDisableDDT=apTscfCSRDisableDDT, apTscfFailureCannotProvisionSIPServer=apTscfFailureCannotProvisionSIPServer, apSecurityDhcpInterfaceReqRcvd=apSecurityDhcpInterfaceReqRcvd, apSecSAIKEAcquireTransactionTimeout=apSecSAIKEAcquireTransactionTimeout, apSecurityIkeInterfaceOutIkeSaRekeyRequest=apSecurityIkeInterfaceOutIkeSaRekeyRequest, apSecSAIMSAKADelReqSent=apSecSAIMSAKADelReqSent, apSecurityGtpDPDPRespTimeout=apSecurityGtpDPDPRespTimeout, apTscfFailureAlreadyProvisionedIPMask=apTscfFailureAlreadyProvisionedIPMask, apSecurityTunnelFailureInetNotification=apSecurityTunnelFailureInetNotification, apSecSAIMSAKAAddTransactionTimeout=apSecSAIMSAKAAddTransactionTimeout, apSecurityIkeInterfaceMobikeUpdateSASuccess=apSecurityIkeInterfaceMobikeUpdateSASuccess, apSecSAIMSAKAModTransactionTimeout=apSecSAIMSAKAModTransactionTimeout, apSecurityIkeInterfaceIkeConfigErrors=apSecurityIkeInterfaceIkeConfigErrors, apSecurityIkeInterfaceCertUnknownCriticalExtensionErrors=apSecurityIkeInterfaceCertUnknownCriticalExtensionErrors, apTscfConDrop=apTscfConDrop, apTscfSpecificAddressCount=apTscfSpecificAddressCount, apSecurityIkeInterfaceIkeBadHashErrors=apSecurityIkeInterfaceIkeBadHashErrors, apSecurityAuthNotificationsPrefix=apSecurityAuthNotificationsPrefix, apTscfFailureDDTInconsistantTransport=apTscfFailureDDTInconsistantTransport, apSecurityDstAddressFamily=apSecurityDstAddressFamily, apSecurityIkeInterfaceCertUnsupportedDigestErrors=apSecurityIkeInterfaceCertUnsupportedDigestErrors, apSecSASRTPModTransactionTimeout=apSecSASRTPModTransactionTimeout, apSecurityAuthFailureThresholdNotification=apSecurityAuthFailureThresholdNotification, apSecurityGtpUPDPRespTimeout=apSecurityGtpUPDPRespTimeout, apSecurityIkeInterfaceEapOnlyWithAuthPayload=apSecurityIkeInterfaceEapOnlyWithAuthPayload, apSecSASRTPModReqSent=apSecSASRTPModReqSent, apSecurityIkeInterfaceMobikeUpdateSASameAddress=apSecurityIkeInterfaceMobikeUpdateSASameAddress, apSecurityGtpDPDPSuccRespRcvd=apSecurityGtpDPDPSuccRespRcvd, apSecurityGtpV2CreateSessionRespRcvd=apSecurityGtpV2CreateSessionRespRcvd, apSecurityDhcpInterfaceLeaseTimeouts=apSecurityDhcpInterfaceLeaseTimeouts, apSecSASRTPSaDeleteFailed=apSecSASRTPSaDeleteFailed, apTscfFailureClientAssignedIPMask=apTscfFailureClientAssignedIPMask, apSecSAIMSAKARegsReRegPassedQuota=apSecSAIMSAKARegsReRegPassedQuota, apSecurityGtpV2UpdateBearerReqRcvd=apSecurityGtpV2UpdateBearerReqRcvd, apTscfFailureAlreadyProvisionedSIPServer=apTscfFailureAlreadyProvisionedSIPServer, apSecurityGtpMsgDiffVer=apSecurityGtpMsgDiffVer, apSecSASRTPDelFailRespSent=apSecSASRTPDelFailRespSent, apSecurityMIBObjects=apSecurityMIBObjects, apSecSAIMSAKARegsFromUnprotPortBeforeExpiry=apSecSAIMSAKARegsFromUnprotPortBeforeExpiry, apSecurityIkeInterfaceInitialChildSa=apSecurityIkeInterfaceInitialChildSa, apSecurityTunnelDPDNotification=apSecurityTunnelDPDNotification, apSecSAIMSAKARegsReRegFailedSecurityHeader=apSecSAIMSAKARegsReRegFailedSecurityHeader, apSecurityIkeInterfaceMobikeSupportRequest=apSecurityIkeInterfaceMobikeSupportRequest, apTscfAddressTableSize=apTscfAddressTableSize, apSecurityTscfStatsGroup=apSecurityTscfStatsGroup, apSecurityIkeInterfaceInIkeSaDeleteRequest=apSecurityIkeInterfaceInIkeSaDeleteRequest, apSecSAIMSAKAAddFailAddrMaskMismatch=apSecSAIMSAKAAddFailAddrMaskMismatch, apSecurityTscfNotificationsGroup=apSecurityTscfNotificationsGroup, apSecurityIkeInterface3GPPAuthErrorsGroup=apSecurityIkeInterface3GPPAuthErrorsGroup, apTscfFailureGeneralProvisionSIPServer=apTscfFailureGeneralProvisionSIPServer, apSecuritySAIMSAKAStatsGroup=apSecuritySAIMSAKAStatsGroup, apSecSASRTPSaCreateFailed=apSecSASRTPSaCreateFailed, apTscfReleasedTunnels=apTscfReleasedTunnels, apSecurityIkeInterfaceOutIkeSaRekeyRequestFailure=apSecurityIkeInterfaceOutIkeSaRekeyRequestFailure, apSecurityGroups=apSecurityGroups, apSecurityIkeInterfaceMobikeUpdateSAAddrRcvd=apSecurityIkeInterfaceMobikeUpdateSAAddrRcvd, apSecurityTscfClearMaxTunnelTrap=apSecurityTscfClearMaxTunnelTrap, apSecurityTscfAddressPoolUsageTrap=apSecurityTscfAddressPoolUsageTrap, apSecurityOCSRDownNotification=apSecurityOCSRDownNotification, apSecurityIkeInterfaceCertRSAModulusTooBigErrors=apSecurityIkeInterfaceCertRSAModulusTooBigErrors, apSecurityIkeInterfaceDPDRetran=apSecurityIkeInterfaceDPDRetran, apSecurityTlsEncryptionFailureCause=apSecurityTlsEncryptionFailureCause, apSecurityGtpHost=apSecurityGtpHost, apSecurityGtpProfileObjectsGroup=apSecurityGtpProfileObjectsGroup, apSecurityIkeInterfaceDpdStatsObjectsGroup=apSecurityIkeInterfaceDpdStatsObjectsGroup, apTscfFailureCannotProvisionIPMask=apTscfFailureCannotProvisionIPMask, apTscfFailureVersionNotSupported=apTscfFailureVersionNotSupported, apSecurityIkeInterfaceBroadcastOrMulticastMsgcRecv=apSecurityIkeInterfaceBroadcastOrMulticastMsgcRecv, apSecurityGTPCEchoRespSent=apSecurityGTPCEchoRespSent, apSecurityTunnelFailureNotification=apSecurityTunnelFailureNotification, apSecurityIkeInterfaceDPDRecv=apSecurityIkeInterfaceDPDRecv, apSecurityGtpUPDPFailRespSent=apSecurityGtpUPDPFailRespSent, apSecuritySecProtocol=apSecuritySecProtocol, apSecurityIkeInterfaceMobikeStatsGroup=apSecurityIkeInterfaceMobikeStatsGroup, apSecSAIMSAKASAAgentSAReqTransQueueSize=apSecSAIMSAKASAAgentSAReqTransQueueSize, apTscfConfRelRespSent=apTscfConfRelRespSent, apSecurityTlsPacketFailureCount=apSecurityTlsPacketFailureCount, apSecurityIkeInterfaceAuthCertCheckSuccess=apSecurityIkeInterfaceAuthCertCheckSuccess, apSecurityTacacsSuccessAuthorization=apSecurityTacacsSuccessAuthorization, apSecurityIkeInterfaceIkeMismatchAuthMethodErrors=apSecurityIkeInterfaceIkeMismatchAuthMethodErrors, apSecurityIkeInterfaceEapAkaFail=apSecurityIkeInterfaceEapAkaFail, apSecurityUser=apSecurityUser, apSecSAIMSAKAModSuccessRespRcvd=apSecSAIMSAKAModSuccessRespRcvd, apSecurityIkeInterfaceMobikeUpdateSAFailInternal=apSecurityIkeInterfaceMobikeUpdateSAFailInternal, apTscfKASent=apTscfKASent, apTscfFailureNoListeningFd=apTscfFailureNoListeningFd, apSecurityOCSRNotifications=apSecurityOCSRNotifications, apSecurityGtpMissingMandIE=apSecurityGtpMissingMandIE, apSecurityGtpRepeatedIE=apSecurityGtpRepeatedIE, apSecurityIkeInterfaceIkeSaAuthMsgsRecv=apSecurityIkeInterfaceIkeSaAuthMsgsRecv, apTscfGetDTLSCtxFailed=apTscfGetDTLSCtxFailed, apSecuritySrcAddressFamily=apSecuritySrcAddressFamily, apSecurityCertificateCertExpire=apSecurityCertificateCertExpire, apSecuritySrtpNotificationsPrefix=apSecuritySrtpNotificationsPrefix, apTscfFailureNonNullIpMask=apTscfFailureNonNullIpMask, apSecurityIkeInterfaceMobikeReturnRouteCheckRequests=apSecurityIkeInterfaceMobikeReturnRouteCheckRequests, apSecurityIkeInterfaceEapInstanceIdNotFoundErrors=apSecurityIkeInterfaceEapInstanceIdNotFoundErrors, apSecurityIkeInterfaceIkeBadPortErrors=apSecurityIkeInterfaceIkeBadPortErrors, apSecurityIkeInterfaceAuthUserUnknownErrors=apSecurityIkeInterfaceAuthUserUnknownErrors, apSecurityIkeInterfaceIkeNotifyPayloadErrors=apSecurityIkeInterfaceIkeNotifyPayloadErrors, apSecuritySAMIBObjects=apSecuritySAMIBObjects, apSecuritySrtpNotificationsGroup=apSecuritySrtpNotificationsGroup, apTscfLicenseTunnelCount=apTscfLicenseTunnelCount, apSecSAIMSAKASaTransactionQueue=apSecSAIMSAKASaTransactionQueue, apSecuritySrtpDecryptionFailureNotification=apSecuritySrtpDecryptionFailureNotification, apSecurityTscfFreeAddressCount=apSecurityTscfFreeAddressCount, apSecurityGtpCPDPIncompleteRespRcvd=apSecurityGtpCPDPIncompleteRespRcvd, apSecurityGtpCPDPSuccRespRcvd=apSecurityGtpCPDPSuccRespRcvd, apSecSAIMSAKASaDelPPMOutboundFailed=apSecSAIMSAKASaDelPPMOutboundFailed, apSecurityGtpErrorStatsEntry=apSecurityGtpErrorStatsEntry, apSecurityGtpUnexpectedMsg=apSecurityGtpUnexpectedMsg, apSecurityGtpDPDPReqRcvd=apSecurityGtpDPDPReqRcvd, apSecSAIMSAKASAAgentAllowTransQuota=apSecSAIMSAKASAAgentAllowTransQuota, apTscfFailureAlreadyProvisionedIP=apTscfFailureAlreadyProvisionedIP, apSecurityGtpV2UpdateBearerRespSent=apSecurityGtpV2UpdateBearerRespSent, apSecurityIkeInterfaceBlacklistAuthIDError=apSecurityIkeInterfaceBlacklistAuthIDError, apSecSAIMSAKASaDeletedInboundSent=apSecSAIMSAKASaDeletedInboundSent, apSecurityIkeInterfaceEapInvalidPktSizeErrors=apSecurityIkeInterfaceEapInvalidPktSizeErrors, apSecurityIkeInterfaceTunnelRemovalsTca=apSecurityIkeInterfaceTunnelRemovalsTca, apSecurityIkeInterfaceCertUnSupportedSignatureAlgoErrors=apSecurityIkeInterfaceCertUnSupportedSignatureAlgoErrors, apSecurityIPsecTunnelsNotificationsGroup=apSecurityIPsecTunnelsNotificationsGroup, apTscfFailureListenFdUnavailable=apTscfFailureListenFdUnavailable, apSecurityIkeInterfaceIkeNullPSKErrors=apSecurityIkeInterfaceIkeNullPSKErrors, apTscfTunnelTableSize=apTscfTunnelTableSize, apSecurityIkeInterfaceIkeBadSigErrors=apSecurityIkeInterfaceIkeBadSigErrors, apSecurityGTPUEchoReqSent=apSecurityGTPUEchoReqSent, apSecurityGtpV2CreateBearerReqRcvd=apSecurityGtpV2CreateBearerReqRcvd, apSecurityIkeInterfaceIkeBadVersionErrors=apSecurityIkeInterfaceIkeBadVersionErrors, apSecurityIPsecTunnelsObjectsGroup=apSecurityIPsecTunnelsObjectsGroup, apSecurityIkeInterfaceOutIkeSaRekeyRequestSuccess=apSecurityIkeInterfaceOutIkeSaRekeyRequestSuccess, apSecSAIMSAKASendTimedDelToRed=apSecSAIMSAKASendTimedDelToRed, apSecurityIkeInterfaceAddress=apSecurityIkeInterfaceAddress, apSecSAIMSAKADelReqRcvd=apSecSAIMSAKADelReqRcvd, apSecurityTacacsSuccessAuthentication=apSecurityTacacsSuccessAuthentication, apSecurityIPsecTunCount=apSecurityIPsecTunCount, apSecurityIkeInterfaceIkeBadNATDErrors=apSecurityIkeInterfaceIkeBadNATDErrors, apSecurityIkeInterfaceIKESAPacketDropped=apSecurityIkeInterfaceIKESAPacketDropped, apSecurityIkeInterfaceInIkeSaRekeyRequest=apSecurityIkeInterfaceInIkeSaRekeyRequest, apSecSAIMSAKASaRecovery=apSecSAIMSAKASaRecovery, apSecurityGtpMissingReqIE=apSecurityGtpMissingReqIE, apTscfFailureRedundancyNotEnabled=apTscfFailureRedundancyNotEnabled, apSecurityGtpInvalidMandIE=apSecurityGtpInvalidMandIE, apSecurityGtpV2DeleteSessionReqSentFail=apSecurityGtpV2DeleteSessionReqSentFail, apSecSAIMSAKASaCreateFailed=apSecSAIMSAKASaCreateFailed, apSecurityIkeInterfaceObjectsGroup=apSecurityIkeInterfaceObjectsGroup, apSecurityNotificationsGroups=apSecurityNotificationsGroups, apSecurityTacacsFailureAuthorization=apSecurityTacacsFailureAuthorization, apSecurityGTPCEchoRespTimeout=apSecurityGTPCEchoRespTimeout, apSecurityTscfInvalidAddressCount=apSecurityTscfInvalidAddressCount, apSecurityGtpUPDPSuccRespSent=apSecurityGtpUPDPSuccRespSent, apSecurityIkeInterfaceIkeSaChildMsgsSent=apSecurityIkeInterfaceIkeSaChildMsgsSent, apSecurityIkeInterfaceEapSimFail=apSecurityIkeInterfaceEapSimFail, apSecurityGtpProfile=apSecurityGtpProfile, apSecurityGtpInvalidOptIE=apSecurityGtpInvalidOptIE, apSecurityIkeInterfaceEapOnlyAuthStatsGroup=apSecurityIkeInterfaceEapOnlyAuthStatsGroup, apTscfFailureNonNullIPAddr=apTscfFailureNonNullIPAddr, apSecurityGTPCEchoReqSent=apSecurityGTPCEchoReqSent, apSecurityIkeInterfaceAuthFailure=apSecurityIkeInterfaceAuthFailure, apTscfFailureClientAssignedIP=apTscfFailureClientAssignedIP, apSecurityGtpDPDPReqSent=apSecurityGtpDPDPReqSent, apSecurityGTPNotificationsGroup=apSecurityGTPNotificationsGroup, apSecurityIkeInterfaceSAEstablishmentSuccess=apSecurityIkeInterfaceSAEstablishmentSuccess, apSecurityModule=apSecurityModule, apSecSAIMSAKARegsInitRegFailedSecurityHeader=apSecSAIMSAKARegsInitRegFailedSecurityHeader, apSecurityPeerPort=apSecurityPeerPort, PYSNMP_MODULE_ID=apSecurityModule, apSecSAIMSAKADelDueToTimeout=apSecSAIMSAKADelDueToTimeout, apSecurityIkeInterfaceCertRsaExponentTooBigErrors=apSecurityIkeInterfaceCertRsaExponentTooBigErrors, apSecurityCertificateCertIsCA=apSecurityCertificateCertIsCA, apSecSASRTPAddSuccessRespRcvd=apSecSASRTPAddSuccessRespRcvd, apSecurityIkeInterfaceDPDRecvIPChange=apSecurityIkeInterfaceDPDRecvIPChange, apSecurityIkeInterfaceMobikeRouteCheckFailSAdel=apSecurityIkeInterfaceMobikeRouteCheckFailSAdel)
