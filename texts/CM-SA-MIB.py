#
# PySNMP MIB module CM-SA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/CM-SA-MIB
# Produced by pysmi-1.1.12 at Sat Jul  6 01:05:28 2024
# On host fv-az1532-138 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
SecondaryState, ScheduleType, IpPriorityMapMode, CmPmBinAction, VlanId, ClassOfServiceType, PerfCounter64, PerfCounter32, TrafficDirection, SchedActivityStatus, MepDestinationType, AdminState, OperationalState, VlanPriority, IpVersion = mibBuilder.importSymbols("CM-COMMON-MIB", "SecondaryState", "ScheduleType", "IpPriorityMapMode", "CmPmBinAction", "VlanId", "ClassOfServiceType", "PerfCounter64", "PerfCounter32", "TrafficDirection", "SchedActivityStatus", "MepDestinationType", "AdminState", "OperationalState", "VlanPriority", "IpVersion")
shelfIndex, neIndex, slotIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "shelfIndex", "neIndex", "slotIndex")
BitErrRate, PolicerColorMode = mibBuilder.importSymbols("CM-FACILITY-MIB", "BitErrRate", "PolicerColorMode")
Dot1agCfmMepIdOrZero, = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "Dot1agCfmMepIdOrZero")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter64, iso, Bits, MibIdentifier, Counter32, Integer32, ModuleIdentity, Unsigned32, TimeTicks, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "iso", "Bits", "MibIdentifier", "Counter32", "Integer32", "ModuleIdentity", "Unsigned32", "TimeTicks", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TruthValue, RowStatus, TextualConvention, VariablePointer, MacAddress, DateAndTime, StorageType, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "VariablePointer", "MacAddress", "DateAndTime", "StorageType", "DisplayString")
cmServiceAssuranceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8))
cmServiceAssuranceMIB.setRevisions(('2019-12-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cmServiceAssuranceMIB.setRevisionsDescriptions(('\n         Notes from release 201912010000Z\n         (1) Added ecpaControlMonitorPortType\n          \n         Notes from release 201607310000Z\n         (1)Added the following objects for EsaProbeCOSConfigEntry:\n            - esaProbeCOSConfigSoamPmExtAvailFlrThreshold\n            - esaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus\n            - esaProbeCOSConfigSoamPmExtConDeltaTsForAvail\n\n         Notes from release 201509200000Z\n         (1)Added new objects to ecpaControlTable:\n            - ecpaControlEcpaType                     \n         (2)Added new objects to ecpaConfigStreamTable:\n            - ecpaConfigStreamUdpControl\n            - ecpaConfigStreamUdpSrcPort\n            - ecpaConfigStreamUdpDstPort\n         (3)Added new objects to ecpaTestStreamTable:\n            - ecpaTestStreamUdpControl\n            - ecpaTestStreamUdpSrcPort\n            - ecpaTestStreamUdpDstPort\n         (3)Added new enumeration:    \n            - EcpaType\n            \n         Notes from release 201302130000Z\n         (i)Added the following objects:\n            - esaProbeAlias                     \n            - esaReflectorAlias\n\n         Notes from release 201111220000Z\n         (i)Added the following objects to support ESA Probes and Reflectors on\n            pluggable cards: \n              -esaProbeAdminState, esaProbeOperationalState, esaProbeSecondaryState\n              -esaReflectorAdminState, esaReflectorOperationalState, \n                                       esaReflectorSecondaryState\n\n         Notes from release 201105260000Z\n         (i)Formalized the compliance groups in the MIBs\n\n         Notes from release 201006220000Z\n         (i)Updated range of ecpaControlNumFrames to (0..2147483647),\n         (ii)Removed redundant column ecpaTestStreamRxBitRate\n\n         Notes from release 201006100000Z\n         (i)Updated range of esaProbeHistoryBins and esaProbeDistHistoryBins to \n              include 0 - since it is possible that some ESA Probes will not have history bins\n         (ii)Changed ecpaControlStatus occurrences to ecpaControlTestStatus\n         (iii)Changed EcpaTestType TC literal continous to continuous \n\n         Notes from release 201003250000Z,\n        (1)Added new objects for ecpaTestStreamRxBitRate, ecpaConfigStreamUsePortSourceMAC\n        (1)ecpaControlDuration now has a max range of 72 hours (259200 seconds) \n           instead of 1 hour (3600 seconds)\n\n         Notes from release 201002110000Z\n         This release is applicable to the FSP150CC Release 4.3 device GE201, GE201-SE and\n         FSP150CM Release 4.1.\n        (1)Added new objects to ecpaConfigStreamTable\n               ecpaConfigStreamInnerVlan2Enabled, ecpaConfigStreamInnerVlan2Id, \n               ecpaConfigStreamInnerVlan2Prio, ecpaConfigStreamInnerVlan2EtherType, \n               ecpaConfigStreamDestIpV4Address, ecpaConfigStreamDestIpV6Address\n        (2)Added new objects to ecpaTestStreamTable\n               ecpaTestStreamInnerVlan2Enabled, ecpaTestStreamInnerVlan2Id, \n               ecpaTestStreamInnerVlan2Prio, ecpaTestStreamInnerVlan2EtherType, \n               ecpaTestStreamDestIpV4Address, ecpaTestStreamDestIpV6Address, ecpaTestStreamChanged\n        (3)Added new objects to esaProbeTable\n               esaProbeMultiCOSEnabled, esaProbeSLAMonitorType, esaProbeCOSType, \n               esaProbeSLMMulticastMACEnabled, esaProbeSOAMInterval, esaProbeSOAMPktSize\n        (4)Added new tables : esaProbeCOSConfigTable, esaProbeMultiDestinationTable\n       \n\n         Notes from release 200904150000Z\n         This release is applicable to the FSP150CC Release 4.1 \n         devices GE101 and GE206.\n         Following new tables are added,\n           esaProbeTable,  esaProbeScheduleGroupTable,\n           esaReflectorTable, esaProbeStatsTable, esaProbeHistoryTable,\n           esaProbeDistStatsConfigTable, esaProbeDistStatsTable,\n           esaProbeDistStatsBinTable, esaProbeDistHistoryTable,\n           esaProbeDistHistoryBinTable, esaProbeStatsThresholdTable\n         \n         Following notification is added,\n           esaProbeThresholdCrossingAlert\n\n         Notes from release 200803030000Z,\n         (1)MIB version ready for release FSP150CM 3.1.\n         \n         Notes from release 201603150000Z\n         This release is applicable to the FSP150CC Release 7.1.1 device GE206V, XG210\n         (1) Following new extension tables are added,\n           f3EsaProbeStatsSoamPmExtTable, f3EsaProbeHistorySoamPmExtTable, f3EsaProbeCOSConfigSoamPmExtTable.',))
if mibBuilder.loadTexts: cmServiceAssuranceMIB.setLastUpdated('201912010000Z')
if mibBuilder.loadTexts: cmServiceAssuranceMIB.setOrganization('ADVA Optical Networking SE')
if mibBuilder.loadTexts: cmServiceAssuranceMIB.setContactInfo('Web URL: http://adva.com/\n        E-mail:  support@adva.com\n        Postal:  ADVA Optical Networking SE\n             Campus Martinsried\n             Fraunhoferstrasse 9a\n             82152 Martinsried/Munich\n             Germany\n        Phone: +49 089 89 06 65 0\n        Fax:  +49 089 89 06 65 199 ')
if mibBuilder.loadTexts: cmServiceAssuranceMIB.setDescription('This module defines the Service Assurance MIB definitions used by \n             the F3 (FSP150CM/CC) product lines.\n             Copyright (C) ADVA.')
cmServAssuranceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1))
cmServAssuranceNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 2))
cmServAssuranceConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3))
class EcpaTestStatus(TextualConvention, Integer32):
    description = 'ECPA Test Status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("initial", 1), ("in-progress", 2), ("stopped", 3), ("completed", 4), ("aborted", 5))

class EcpaPayloadType(TextualConvention, Integer32):
    description = 'ECPA Payload Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("fixed", 1), ("random", 2))

class EcpaTestType(TextualConvention, Integer32):
    description = 'ECPA Control Test Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("duration", 1), ("numframes", 2), ("continuous", 3))

class EcpaType(TextualConvention, Integer32):
    description = 'ECPA Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("regular", 1), ("enhanced", 2))

class EcpaMonitorPortType(TextualConvention, Integer32):
    description = 'ECPA Monitor Port Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("any", 1), ("source", 2))

class EcpaControlAction(TextualConvention, Integer32):
    description = 'ECPA Control Action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("start", 1), ("stop", 2))

class EsaProbeProtocol(TextualConvention, Integer32):
    description = 'ESA Probe Protocol Types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("icmpEcho", 1), ("udpEcho", 2), ("icmpTimestamp", 3), ("y1731", 4), ("y1731-slm-slr", 5), ("y1731-slm-dmm", 6))

class EsaProbeDirection(TextualConvention, Integer32):
    description = 'ESA Probe Direction.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class EsaReflectorDirection(TextualConvention, Integer32):
    description = 'ESA Reflector Direction.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class EsaProbePmIntervalType(TextualConvention, Integer32):
    description = 'ESA Probe PM Interval Types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("current", 1), ("rollover", 2))

class EsaProbeHistoryIntervalType(TextualConvention, Integer32):
    description = 'ESA Probe Y1731 History Interval Types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("interval-1min", 1), ("interval-5min", 2), ("interval-10min", 3), ("interval-15min", 4), ("interval-60min", 5))

class EsaProbeDistStatsType(TextualConvention, Integer32):
    description = 'Indicates the ESA Probe Statistics Distribution Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("roundtrip-delay", 1), ("oneway-p2r-delay", 2), ("oneway-r2p-delay", 3), ("oneway-p2r-jitter", 4), ("oneway-r2p-jitter", 5), ("oneway-p2r-absjitter", 6), ("oneway-r2p-absjitter", 7), ("roundtrip-absjitter", 8), ("oneway-p2r-fdr", 9), ("oneway-r2p-fdr", 10), ("roundtrip-fdr", 11))

class EsaAction(TextualConvention, Integer32):
    description = 'ESA Scheduled Group/Reflector Action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("not-applicable", 0), ("suspend", 1), ("resume", 2), ("addEsaProbe", 3), ("removeEsaProbe", 4))

class EsaProbePktIntervalType(TextualConvention, Integer32):
    description = 'Interval Type used for LMM and DMM messages.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("not-applicable", 0), ("interval-10ms", 1), ("interval-100ms", 2), ("interval-1sec", 3), ("interval-10sec", 4), ("interval-1min", 5))

class EsaProbeSLAMonitorType(TextualConvention, Integer32):
    description = 'ESA Probe SLA Monitor Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("point-to-point", 1), ("point-to-multipoint", 2))

class BerTestStatus(TextualConvention, Integer32):
    description = 'BER Test Status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("running", 1), ("not-running", 2))

class BerTestMode(TextualConvention, Integer32):
    description = 'BER Test Control Test Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("generator", 1), ("monitor", 2), ("singleend", 3))

class BertControlAction(TextualConvention, Integer32):
    description = 'BER Test Control Action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("start", 1), ("stop", 2))

class BertPattern(TextualConvention, Integer32):
    description = 'BERT Tx Pattern.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("not-applicable", 0), ("all-0", 1), ("all-1", 2), ("alt-1100", 3), ("bit-1in8", 4), ("bit-3in24", 5), ("bit-2exp20-qrss", 6), ("bit-2exp11-prbs", 7), ("bit-2exp15-prbs", 8), ("bit-2exp23-prbs", 9), ("userdefined", 10))

class BertUserPatternLength(TextualConvention, Integer32):
    description = 'BERT Error Rate.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("not-applicable", 0), ("length-1byte", 1), ("length-2byte", 2), ("length-3byte", 3), ("length-4byte", 4))

class BertSyncState(TextualConvention, Integer32):
    description = 'BERT Sync State.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("sync", 1), ("outofsync", 2))

ecpaControlTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1), )
if mibBuilder.loadTexts: ecpaControlTable.setStatus('current')
if mibBuilder.loadTexts: ecpaControlTable.setDescription('A list of entries for the control of Etherjack Connection\n             Performance Analyzer Streams. Upto 12 ECPA streams can\n             be configured per test head; 3 ECPA streams can be \n             simultaneously executed.')
ecpaControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "ecpaControlIndex"))
if mibBuilder.loadTexts: ecpaControlEntry.setStatus('current')
if mibBuilder.loadTexts: ecpaControlEntry.setDescription('A conceptual row in the ecpaControlTable.')
ecpaControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaControlIndex.setStatus('current')
if mibBuilder.loadTexts: ecpaControlIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Etherjack Connection Performance Analyzer Control Test head.\n            There is only one test head per card.')
ecpaControlSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 2), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlSourcePort.setStatus('current')
if mibBuilder.loadTexts: ecpaControlSourcePort.setDescription('Pointer to the Access or Network Port on which the ECPA test \n             will be started within a card.')
ecpaControlTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 3), EcpaTestType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlTestType.setStatus('current')
if mibBuilder.loadTexts: ecpaControlTestType.setDescription("The type of ECPA test to be performed.  When 'duration' test is\n             specified, ECPA test is run for 'ecpaControlDuration' time.\n             When 'numFrames' test is specified, ECPA test is run for  \n             'ecpaControlNumFrames', when 'continous' test is specified,\n             ECPA test is run until an explicit 'ecpaControlAction' of 'stop'\n             of received.")
ecpaControlNumFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlNumFrames.setStatus('current')
if mibBuilder.loadTexts: ecpaControlNumFrames.setDescription('This object enables specification of the number of frames\n          for traffic generation. Traffic Generation will be completed\n          after the specified number of frames are transmitted.')
ecpaControlDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 259200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlDuration.setStatus('current')
if mibBuilder.loadTexts: ecpaControlDuration.setDescription('This object enables specification of the time in seconds\n          for traffic generation. Traffic Generation will be stopped\n          after the specified time interval is exhausted.')
ecpaControlInjectorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 6), TrafficDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlInjectorDirection.setStatus('current')
if mibBuilder.loadTexts: ecpaControlInjectorDirection.setDescription('This object enables specification of the direction of\n          traffic generation. This value must be specified if the\n          interface is used for traffic generation. Both of\n          ecpaControlInjectorDirection and ecpaControlMonitorDirection must be\n          specified.')
ecpaControlMonitorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 7), TrafficDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlMonitorDirection.setStatus('current')
if mibBuilder.loadTexts: ecpaControlMonitorDirection.setDescription('This object enables specification of the direction of\n          receival of generated traffic. This value must be specified if the\n          interface is used for receiving/monitoring generated traffic.\n          Both of ecpaControlInjectorDirection and ecpaControlMonitorDirection \n          must be specified.')
ecpaControlStream1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlStream1.setStatus('current')
if mibBuilder.loadTexts: ecpaControlStream1.setDescription('This object specifies which stream should be included in the\n          ECPA execution. Value of 0 indicates that no streams is selected\n          by ecpaControlStream1. Non 0 value indicates the \n          selected ECPA stream.')
ecpaControlStream2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlStream2.setStatus('current')
if mibBuilder.loadTexts: ecpaControlStream2.setDescription('This object specifies which stream should be included in the\n          ECPA execution. Value of 0 indicates that no streams is selected\n          by ecpaControlStream2. Non 0 value indicates the \n          selected ECPA stream.')
ecpaControlStream3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlStream3.setStatus('current')
if mibBuilder.loadTexts: ecpaControlStream3.setDescription('This object specifies which stream should be included in the\n          ECPA execution. Value of 0 indicates that no streams is selected\n          by ecpaControlStream3. Non 0 value indicates the \n          selected ECPA stream.')
ecpaControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 11), EcpaControlAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlAction.setStatus('current')
if mibBuilder.loadTexts: ecpaControlAction.setDescription("This object enables starting/stopping of traffic generation\n          as well as resetting of monitored streams. This object may\n          not be specified at configuration creation time - in this\n          case it will take the value of `none'.  This allows manager\n          to explicitly control the start and stop of traffic\n          generation/monitoring activity.\n          Value of `stop' is invalid if the activity is specified but\n          not started. Value of `start' is valid during creation time,\n          as well as when activity is already stopped.  Specification\n          of `reset'  resets the specified streams to default values,\n          as well as clears the control specification. Get on this\n          variable gives the most recent SNMP set specification.")
ecpaControlTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 12), EcpaTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaControlTestStatus.setStatus('current')
if mibBuilder.loadTexts: ecpaControlTestStatus.setDescription("This object reflects the current status of test set configuration\n          entry. Upon creation, the status has a value of `initial'; the\n          status changes to `in-progress' upon ecpaControlAction\n          indicating `start'; the status changes to `completed' upon\n          ecpaControlAction indicating stop, as well as when\n          the specified test generation completes\n          autonomously upon completion of number of frames or\n          completion of specified time interval.")
ecpaControlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 13), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ecpaControlStorageType.setStatus('current')
if mibBuilder.loadTexts: ecpaControlStorageType.setDescription('The type of storage configured for this entry.')
ecpaControlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ecpaControlRowStatus.setStatus('current')
if mibBuilder.loadTexts: ecpaControlRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ecpaControlRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ecpaControlRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ecpaControlRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ecpaControlEcpaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 15), EcpaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaControlEcpaType.setStatus('current')
if mibBuilder.loadTexts: ecpaControlEcpaType.setDescription('ECPA test can run in a regular mode(1) or enhaced mode (2).')
ecpaControlMonitorPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 1, 1, 16), EcpaMonitorPortType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ecpaControlMonitorPortType.setStatus('current')
if mibBuilder.loadTexts: ecpaControlMonitorPortType.setDescription('ECPA monitor port type.')
ecpaConfigStreamTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2), )
if mibBuilder.loadTexts: ecpaConfigStreamTable.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamTable.setDescription('A list of entries for the configuration of Etherjack Connection\n             Performance Analyzer Stream Specifications.')
ecpaConfigStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1), ).setIndexNames((0, "CM-SA-MIB", "ecpaConfigStreamIndex"))
if mibBuilder.loadTexts: ecpaConfigStreamEntry.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamEntry.setDescription('A conceptual row in the ecpaConfigStreamTable.')
ecpaConfigStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamIndex.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Etherjack Connection Performance Analyzer.')
ecpaConfigStreamName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamName.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamName.setDescription('Symbolic Stream Name that can be associated with an ECPA stream.')
ecpaConfigStreamFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9612))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamFrameSize.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamFrameSize.setDescription('This object enables specification of fixed length frame size\n          in bytes for traffic generation. If not specified, default value\n          of 64 bytes is used.\n          CM Aggregation Product limits the upper range value to 9600.')
ecpaConfigStreamRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamRate.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamRate.setDescription('The object enables specification of the traffic generation rate.')
ecpaConfigStreamPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 5), EcpaPayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamPayloadType.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamPayloadType.setDescription("This object enables specification of type of payload to generate\n          `fixed' type indicates a generation pattern of 5A, A5, 5A, A5 bytes.\n          `random' type indicates traffic generation with pseudo-random \n           pattern.")
ecpaConfigStreamSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamSignature.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamSignature.setDescription('Indicates an 8-byte signature specified by the user in \n          hexadecimal or ASCII format. This signature is currently \n          used by the FSP150Mx products for test frame recognition and \n          will be appended directly after the ECPA Signature in the test \n          frame and be 4-byte aligned. \n          This will allow the F3 ECPA feature to interoperate with the \n          existing FSP150Mx products.\n          Hexadecimal signature must be prefixed with 0x/0X.')
ecpaConfigStreamDestinationMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 7), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamDestinationMAC.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamDestinationMAC.setDescription('Allows specification of destination MAC in the generated\n             traffic.')
ecpaConfigStreamSourceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamSourceMAC.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamSourceMAC.setDescription('Allows specification of source MAC in the generated\n             traffic.')
ecpaConfigStreamOuterVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamOuterVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamOuterVlanEnabled.setDescription('Allows specification of a VLAN tagged ECPA stream. This variable\n             enables the outer VLAN specification, in the case of a\n             doubly tagged ECPA stream.   If a singly tagged ECPA stream is\n             desired, this specification is mandatory.')
ecpaConfigStreamOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 10), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamOuterVlanId.setDescription('Outer VLAN Id associated with the ECPA stream.  Valid only\n             if ecpaConfigStreamOuterVlanEnabled is enabled.')
ecpaConfigStreamOuterVlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 11), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamOuterVlanPrio.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamOuterVlanPrio.setDescription('Outer VLAN Priority associated with the ECPA stream.  Valid only\n             if ecpaConfigStreamOuterVlanEnabled is enabled.')
ecpaConfigStreamOuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamOuterVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamOuterVlanEtherType.setDescription('EtherType associated with the Outer VLAN Tag.  Valid only\n             if ecpaConfigStreamOuterVlanEnabled is enabled.')
ecpaConfigStreamInnerVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlanEnabled.setDescription('Allows specification of a VLAN tagged ECPA stream. This variable\n             enables the outer VLAN specification, in the case of a\n             doubly tagged ECPA stream.   If a singly tagged ECPA stream is\n             desired, this specification is mandatory.')
ecpaConfigStreamInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 14), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlanId.setDescription('Inner VLAN Id associated with the ECPA stream.  Valid only\n             if ecpaConfigStreamInnerVlanEnabled is enabled.')
ecpaConfigStreamInnerVlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 15), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlanPrio.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlanPrio.setDescription('Inner VLAN Priority associated with the ECPA stream.  Valid only\n             if ecpaConfigStreamInnerVlanEnabled is enabled.')
ecpaConfigStreamInnerVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlanEtherType.setDescription('EtherType associated with the Inner VLAN Tag.  Valid only\n             if ecpaConfigStreamInnerVlanEnabled is enabled.')
ecpaConfigStreamIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 17), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamIpVersion.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamIpVersion.setDescription("This object enables specification of IP data in the generated\n          test traffic.  Value of `ipv4' allows test data to be \n          IP v4  compatible.\n          Value of `ipv6' allows test data to be IP v6 compatible.")
ecpaConfigStreamIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamIpV4Address.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamIpV4Address.setDescription('This object enables specification of ipv4 IP Address for \n          the test stream.This is used when ecpaConfigStreamIpVersion is ipv4.')
ecpaConfigStreamIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 19), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamIpV6Address.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamIpV6Address.setDescription('This object enables specification of ipv6 IP Address for \n          the test stream.This is used when ecpaConfigStreamIpVersion is ipv6.')
ecpaConfigStreamPrioMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 20), IpPriorityMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamPrioMapMode.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamPrioMapMode.setDescription('This object enables specification of Priority Mapping Mode for\n          the test stream.')
ecpaConfigStreamPrioVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamPrioVal.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamPrioVal.setDescription('This object enables specification of Priority Value for\n          ecpaConfigStreamPrioMapMode as TOS/DSCP.')
ecpaConfigStreamInnerVlan2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlan2Enabled.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlan2Enabled.setDescription('Allows specification of a VLAN tagged ECPA stream. This variable\n             enables the second(inner) VLAN specification, in the case of a\n             3-tagged ECPA stream.   If a three tagged ECPA stream is\n             desired, this specification is mandatory.')
ecpaConfigStreamInnerVlan2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 23), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlan2Id.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlan2Id.setDescription('Inner (second) VLAN Id associated with the ECPA stream.  Valid only\n             if ecpaConfigStreamInnerVlan2Enabled is enabled.')
ecpaConfigStreamInnerVlan2Prio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 24), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlan2Prio.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlan2Prio.setDescription('Inner (second) VLAN Priority associated with the ECPA stream.  Valid only\n             if ecpaConfigStreamInnerVlan2Enabled is enabled.')
ecpaConfigStreamInnerVlan2EtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlan2EtherType.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamInnerVlan2EtherType.setDescription('EtherType associated with the Inner (second) VLAN Tag.  Valid only\n             if ecpaConfigStreamInnerVlan2Enabled is enabled.')
ecpaConfigStreamDestIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamDestIpV4Address.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamDestIpV4Address.setDescription('This object enables specification of destination ipv4 IP Address for \n          the test stream.This is used when ecpaConfigStreamIpVersion is ipv4.')
ecpaConfigStreamDestIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 27), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamDestIpV6Address.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamDestIpV6Address.setDescription('This object enables specification of destination ipv6 IP Address for \n          the test stream.This is used when ecpaConfigStreamIpVersion is ipv6.')
ecpaConfigStreamUsePortSourceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamUsePortSourceMAC.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamUsePortSourceMAC.setDescription("This object when not enabled indicates that\n          MAC Address specified by ecpaConfigStreamSourceMAC as the source MAC\n          Address of the ECPA test stream.\n          For EGX, if enabled indicates that the corresponding ECPA test stream\n          will use the associated Source Port's MAC Address.\n          For GE110 products and CC products, if enabled indicates that the corresponding ECPA test stream\n          will use the associated Source Port's Diagnostic MAC Address.")
ecpaConfigStreamRateHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamRateHi.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamRateHi.setDescription('The object enables specification of the higher 32 bits of the traffic generation rate.')
ecpaConfigStreamUdpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamUdpControl.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamUdpControl.setDescription('This object enables or disables UDP header.')
ecpaConfigStreamUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamUdpSrcPort.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamUdpSrcPort.setDescription('When UDP control is enabled, this object provides the UDP source port. Otherwize it is ignored.')
ecpaConfigStreamUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaConfigStreamUdpDstPort.setStatus('current')
if mibBuilder.loadTexts: ecpaConfigStreamUdpDstPort.setDescription('When UDP control is enabled, this object provides the UDP destination port. Otherwize it is ignored.')
ecpaTestStreamTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3), )
if mibBuilder.loadTexts: ecpaTestStreamTable.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamTable.setDescription('A list of entries containing results of a previous test.')
ecpaTestStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "ecpaControlIndex"), (0, "CM-SA-MIB", "ecpaTestStreamIndex"))
if mibBuilder.loadTexts: ecpaTestStreamEntry.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamEntry.setDescription('A conceptual row in the ecpaTestStreamTable. Entries in this\n            table show results of the current ECPA test.')
ecpaTestStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamIndex.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamIndex.setDescription('An integer index value corresponding to the stream index \n             for which the ECPA test was initiated.')
ecpaTestStreamSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamSourcePort.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamSourcePort.setDescription('An integer index value corresponding to the ifIndex\n             for which the ECPA test was initiated.')
ecpaTestStreamName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamName.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamName.setDescription('Symbolic Stream Name that can be associated with an ECPA stream.')
ecpaTestStreamFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9612))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamFrameSize.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamFrameSize.setDescription('This object enables specification of fixed length frame size\n          in bytes for traffic generation. If not specified, default value\n          of 64 bytes is used.')
ecpaTestStreamRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamRate.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamRate.setDescription('The object enables specification of the traffic generation rate.')
ecpaTestStreamPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 6), EcpaPayloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamPayloadType.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamPayloadType.setDescription("This object enables specification of type of payload to generate\n          `fixed' type indicates a generation pattern of 5A, A5, 5A, A5 bytes.\n          `random' type indicates traffic generation with pseudo-random \n           pattern.")
ecpaTestStreamSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamSignature.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamSignature.setDescription('Indicates an 8-byte signature specified by the user in \n          hexadecimal or ASCII format. This signature is currently \n          used by the FSP150Mx products for test frame recognition and \n          will be appended directly after the ECPA Signature in the test \n          frame and be 4-byte aligned. \n          This will allow the F3 ECPA feature to interoperate with the \n          existing FSP150Mx products.\n          Hexadecimal signature must be prefixed with 0x/0X.')
ecpaTestStreamDestinationMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamDestinationMAC.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamDestinationMAC.setDescription('Allows specification of destination MAC in the generated\n             traffic.')
ecpaTestStreamSourceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamSourceMAC.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamSourceMAC.setDescription('Allows specification of source MAC in the generated\n             traffic.')
ecpaTestStreamOuterVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamOuterVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamOuterVlanEnabled.setDescription('Allows specification of a VLAN tagged ECPA stream. This variable\n             enables the outer VLAN specification, in the case of a\n             doubly tagged ECPA stream.   If a singly tagged ECPA stream is\n             desired, this specification is mandatory.')
ecpaTestStreamOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 11), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamOuterVlanId.setDescription('Outer VLAN Id associated with the ECPA stream.  Valid only\n             if ecpaTestStreamOuterVlanEnabled is enabled.')
ecpaTestStreamOuterVlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 12), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamOuterVlanPrio.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamOuterVlanPrio.setDescription('Outer VLAN Priority associated with the ECPA stream.  Valid only\n             if ecpaTestStreamOuterVlanEnabled is enabled.')
ecpaTestStreamOuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamOuterVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamOuterVlanEtherType.setDescription('EtherType associated with the Outer VLAN Tag.  Valid only\n             if ecpaTestStreamOuterVlanEnabled is enabled.')
ecpaTestStreamInnerVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamInnerVlanEnabled.setDescription('Allows specification of a VLAN tagged ECPA stream. This variable\n             enables the outer VLAN specification, in the case of a\n             doubly tagged ECPA stream.   If a singly tagged ECPA stream is\n             desired, this specification is mandatory.')
ecpaTestStreamInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 15), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamInnerVlanId.setDescription('Inner VLAN Id associated with the ECPA stream.  Valid only\n             if ecpaTestStreamInnerVlanEnabled is enabled.')
ecpaTestStreamInnerVlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 16), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlanPrio.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamInnerVlanPrio.setDescription('Inner VLAN Priority associated with the ECPA stream.  Valid only\n             if ecpaTestStreamInnerVlanEnabled is enabled.')
ecpaTestStreamInnerVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamInnerVlanEtherType.setDescription('EtherType associated with the Inner VLAN Tag.  Valid only\n             if ecpaTestStreamInnerVlanEnabled is enabled.')
ecpaTestStreamIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 18), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamIpVersion.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamIpVersion.setDescription("This object enables specification of IP data in the generated\n          test traffic.  Value of `ipv4' allows test data to be \n          IP v4  compatible.\n          Value of `ipv6' allows test data to be IP v6 compatible.")
ecpaTestStreamIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamIpV4Address.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamIpV4Address.setDescription('This object enables specification of ipv4 IP Address for \n          the test stream.This is used when ecpaTestStreamIpVersion is ipv4.')
ecpaTestStreamIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 20), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamIpV6Address.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamIpV6Address.setDescription('This object enables specification of ipv6 IP Address for \n          the test stream.This is used when ecpaTestStreamIpVersion is ipv6.')
ecpaTestStreamPrioMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 21), IpPriorityMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamPrioMapMode.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamPrioMapMode.setDescription('This object enables specification of Priority Mapping Mode for\n          the test stream.')
ecpaTestStreamPrioVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamPrioVal.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamPrioVal.setDescription('This object enables specification of Priority Value for\n          ecpaTestStreamPrioMapMode as TOS/DSCP.')
ecpaTestStreamMonStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonStartTime.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonStartTime.setDescription('The start time of the ECPA test for this stream.')
ecpaTestStreamMonEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonEndTime.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonEndTime.setDescription('The end time of the ECPA test for this stream.')
ecpaTestStreamMonElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonElapsedTime.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonElapsedTime.setDescription('The elapsed time of ECPA test for this stream in seconds.')
ecpaTestStreamMonTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonTxFrames.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonTxFrames.setDescription('The total number of frames transmitted(generated) so far.\n          This object does not exist if the ecpaControlTestStatus indicates\n          initial state.')
ecpaTestStreamMonRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxFrames.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRxFrames.setDescription('The total number of frames received so far.\n          This object does not exist if the ecpaControlTestStatus indicates\n          initial state.')
ecpaTestStreamMonRxPercentSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxPercentSuccess.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRxPercentSuccess.setDescription('Received frames as a percentage of transmitted frames. \n          This object does not exist if the ecpaControlTestStatus indicates\n          initial state.')
ecpaTestStreamMonRxOutOfSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxOutOfSeqErrs.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRxOutOfSeqErrs.setDescription('The total number of out of sequence errors received so far.\n          This object does not exist if the ecpaControlTestStatus indicates\n          initial state.')
ecpaTestStreamMonRxSeqGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxSeqGaps.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRxSeqGaps.setDescription('The total number of sequence gaps received so far.\n          This object does not exist if the ecpaControlTestStatus indicates\n          initial state.')
ecpaTestStreamMonRxNonEcpaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxNonEcpaFrames.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRxNonEcpaFrames.setDescription('The total number of non ECPA frames received during the execution.')
ecpaTestStreamMonRxMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxMinDelay.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRxMinDelay.setDescription('The minimum delay (in microseconds) across all frames\n          received so far. This object does not exist if the\n          ecpaControlTestStatus indicates initial state.')
ecpaTestStreamMonRxMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxMaxDelay.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRxMaxDelay.setDescription('The maximum delay (in microseconds) across all frames\n          received so far. This object does not exist if the\n          ecpaControlTestStatus indicates initial state.')
ecpaTestStreamMonRxAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxAvgDelay.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRxAvgDelay.setDescription('The average delay (in microseconds) across all frames\n          received so far.  This object does not exist if the\n          ecpaControlTestStatus indicates initial state.')
ecpaTestStreamMonRx1stFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9612))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrameSize.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrameSize.setDescription('Frame size of the Monitored First Frame.')
ecpaTestStreamMonRx1stFrame1Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame1Octets.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame1Octets.setDescription('The frame contents of the first received frame - first 1024 bytes.\n          This object does not exist if the ecpaControlTestStatus indicates\n          initial state.')
ecpaTestStreamMonRx1stFrame2Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame2Octets.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame2Octets.setDescription('The frame contents of the first received frame - next 1024 bytes.\n          This object does not exist if the ecpaControlTestStatus indicates\n          initial state.')
ecpaTestStreamMonRx1stFrame3Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame3Octets.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame3Octets.setDescription('The frame contents of the first received frame - next 1024 bytes.\n          This object does not exist if the ecpaControlTestStatus indicates\n          initial state.')
ecpaTestStreamMonRx1stFrame4Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame4Octets.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame4Octets.setDescription('The frame contents of the first received frame - next 1024 bytes.\n          This object does not exist if the ecpaControlTestStatus indicates\n          initial state.')
ecpaTestStreamMonRx1stFrame5Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame5Octets.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame5Octets.setDescription('The frame contents of the first received frame - next 1024 bytes.\n          This object does not exist if the ecpaControlTestStatus indicates\n          initial state.')
ecpaTestStreamMonRx1stFrame6Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame6Octets.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame6Octets.setDescription('The frame contents of the first received frame - next 1024 bytes.\n          This object does not exist if the ecpaControlTestStatus indicates\n          initial state.')
ecpaTestStreamMonRx1stFrame7Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame7Octets.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame7Octets.setDescription('The frame contents of the first received frame - next 1024 bytes.\n          This object does not exist if the ecpaControlTestStatus indicates\n          initial state.')
ecpaTestStreamMonRx1stFrame8Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame8Octets.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame8Octets.setDescription('The frame contents of the first received frame - next 1024 bytes.\n          This object does not exist if the ecpaControlTestStatus indicates\n          initial state.')
ecpaTestStreamMonRx1stFrame9Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame9Octets.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame9Octets.setDescription('The frame contents of the first received frame - next 1024 bytes.\n          This object does not exist if the ecpaControlTestStatus indicates\n          initial state.')
ecpaTestStreamMonRx1stFrame10Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame10Octets.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRx1stFrame10Octets.setDescription('The frame contents of the first received frame - next 1024 bytes.\n          This object does not exist if the ecpaControlTestStatus indicates\n          initial state.')
ecpaTestStreamMonRxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 46), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamMonRxBitRate.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamMonRxBitRate.setDescription('The object provides the average bit rate on the ECPA test stream.')
ecpaTestStreamInnerVlan2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 47), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlan2Enabled.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamInnerVlan2Enabled.setDescription('This variable indicates the second(inner) VLAN specification, in the case of a\n             3-tagged ECPA stream.   If a three tagged ECPA stream is\n             desired, this indicates true.')
ecpaTestStreamInnerVlan2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 48), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlan2Id.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamInnerVlan2Id.setDescription('This variable provides the Inner (second) VLAN Id associated with the ECPA stream.  \n             Valid only if ecpaTestStreamInnerVlan2Enabled is enabled.')
ecpaTestStreamInnerVlan2Prio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 49), VlanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlan2Prio.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamInnerVlan2Prio.setDescription('This variable provides the Inner (second) VLAN Priority associated with the ECPA stream.  \n             Valid only if ecpaTestStreamInnerVlan2Enabled is enabled.')
ecpaTestStreamInnerVlan2EtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamInnerVlan2EtherType.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamInnerVlan2EtherType.setDescription('This variable provides the EtherType associated with the Inner (second) VLAN Tag.  \n             Valid only if ecpaTestStreamInnerVlan2Enabled is enabled.')
ecpaTestStreamDestIpV4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 51), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamDestIpV4Address.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamDestIpV4Address.setDescription('This object provides the destination ipv4 IP Address for \n          the test stream. This is valid when ecpaTestStreamIpVersion is ipv4.')
ecpaTestStreamDestIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 52), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamDestIpV6Address.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamDestIpV6Address.setDescription('This object provides the destination ipv6 IP Address for \n          the test stream. This is valid when ecpaTestStreamIpVersion is ipv6.')
ecpaTestStreamConfigChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 53), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpaTestStreamConfigChanged.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamConfigChanged.setDescription('This object provides information on whether the associated ecpaConfigStream is changed.')
ecpaTestStreamRateHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 54), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamRateHi.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamRateHi.setDescription('The object enables specification of the higher 32 bits of the traffic generation rate.')
ecpaTestStreamUdpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamUdpControl.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamUdpControl.setDescription('This object enables or disables UDP header.')
ecpaTestStreamUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamUdpSrcPort.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamUdpSrcPort.setDescription('When UDP control is enabled, this object provides the UDP source port. Otherwize it is ignored.')
ecpaTestStreamUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 3, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpaTestStreamUdpDstPort.setStatus('current')
if mibBuilder.loadTexts: ecpaTestStreamUdpDstPort.setDescription('When UDP control is enabled, this object provides the UDP destination port. Otherwize it is ignored.')
esaProbeTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4), )
if mibBuilder.loadTexts: esaProbeTable.setStatus('current')
if mibBuilder.loadTexts: esaProbeTable.setDescription('A list of entries corresponding to ESA Probes.')
esaProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"))
if mibBuilder.loadTexts: esaProbeEntry.setStatus('current')
if mibBuilder.loadTexts: esaProbeEntry.setDescription('A row in the esaProbeTable. Entries can\n            be created in this table by management application action.\n            The slotIndex should be 255 if the product is cm5.1.')
esaProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeIndex.setDescription('An integer index value used to uniquely identify\n            this ESA Probe within a Card.')
esaProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeName.setStatus('current')
if mibBuilder.loadTexts: esaProbeName.setDescription('A unique identifier used by the Manager to distinguish \n             the ESA Probe.')
esaProbeSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 3), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeSourcePort.setStatus('current')
if mibBuilder.loadTexts: esaProbeSourcePort.setDescription('This object points to the Port to which the ESA Probe\n             is attached, i.e.on which the service to be monitored resides.')
esaProbeAssocSchedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 4), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeAssocSchedGroup.setStatus('current')
if mibBuilder.loadTexts: esaProbeAssocSchedGroup.setDescription("This object points to the probe's associated Scheduled Group.\n             Initially, when the probe is not associated with a Group,\n             this object's value is set to {0.0}.")
esaProbeDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 5), EsaProbeDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDirection.setStatus('current')
if mibBuilder.loadTexts: esaProbeDirection.setDescription('This object allows to specify the direction of Probe\n             traffic generation.')
esaProbeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 6), EsaProbeProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeProtocol.setStatus('current')
if mibBuilder.loadTexts: esaProbeProtocol.setDescription("Protocol to be used in ESA Probe messages. \n             'icmpTimestamp', 'icmpEcho', 'udpEcho' protocols support \n             layer-3 ethernet service assurance. If the remote reflector\n             is an ADVA equipment based on CM family of products,\n             one-way loss measurement, one-way delay measurement,\n             round-trip delay measurement and one-way jitter measurements\n             are computed. Else, only round-trip delay measurements are\n             applicable.\n             'y1731' protocol can be used for layer-2 ethernet service\n             assurance. One-way loss measurement, one-way and round-trip\n             delay measurement, and one-way jitter measurements are\n             available for this protocol.\n             'y1731-slm-slr' protocol can be used for layer-2 ethernet service\n             assurance using Synthetic Loss Measurement messages.  One-way\n             loss measurement, one-way and round-trip delay measurement,\n             and one-way jitter measurements are available for this protocol.")
esaProbeSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeSrcIpAddress.setStatus('current')
if mibBuilder.loadTexts: esaProbeSrcIpAddress.setDescription("Variable that allows specification of the Probe's source\n             IP Address.  This IP Address is used in the IP header of\n             the ESA Probe generated packets, as source address.\n             NOTE: This attribute is not applicable to Y.1731 probes.")
esaProbeSrcSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeSrcSubnetMask.setStatus('current')
if mibBuilder.loadTexts: esaProbeSrcSubnetMask.setDescription("Variable that allows specification of the Probe's source\n             IP Subnet Mask.\n             NOTE: This attribute is not applicable to Y.1731 probes.")
esaProbeDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestIpAddress.setStatus('current')
if mibBuilder.loadTexts: esaProbeDestIpAddress.setDescription("Variable that allows specification of the Reflector's\n             destination IP Address.  This IP Address is used in the IP header\n             of the ESA Probe generated packets, as destination address.\n             NOTE: This attribute is not applicable to Y.1731 probes.")
esaProbeSrcMep = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeSrcMep.setStatus('current')
if mibBuilder.loadTexts: esaProbeSrcMep.setDescription('This attribute is applicable only for Y.1731 probes. It identifies\n            the source MEP that initiates the Y.1731 LMMs and DMMs.')
esaProbeDestMepType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 11), MepDestinationType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestMepType.setStatus('current')
if mibBuilder.loadTexts: esaProbeDestMepType.setDescription('This attribute is applicable only for Y.1731 probes. This indicates\n            if the destination MEP is specified using the MEP ID object\n            esaProbeDestMepId.')
esaProbeDestMepMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 12), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestMepMacAddr.setStatus('current')
if mibBuilder.loadTexts: esaProbeDestMepMacAddr.setDescription("This attribute is applicable only for Y.1731 probes. It identifies\n            the destination MEP that responds to the LMMs and DMMs. This\n            MAC address will be the destination MAC address for LMM and DMM\n            frames if esaProbeY1731DestMepType is 'macaddress'. If CC protocol is\n            not enabled between source and destination MEP then this is the\n            only choice to identify the remote MEP.")
esaProbeDestMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 13), Dot1agCfmMepIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestMepId.setStatus('current')
if mibBuilder.loadTexts: esaProbeDestMepId.setDescription("This attribute is applicable only for Y.1731 probes. It identifies\n            the destination MEP that responds to the LMMs and DMMs. The MAC\n            address of this RMEP ID from RMEP database will be the destination\n            MAC address for LMM and DMM. This value is used only if the\n            esaProbeY1731DestMepType is 'mepid'. CC protocol must be\n            enabled between source and destination MEP if the RMEP ID\n            is used to identify the Remote MEP.")
esaProbeVlanTagEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeVlanTagEnabled.setStatus('current')
if mibBuilder.loadTexts: esaProbeVlanTagEnabled.setDescription('Ability to specify whether or not to use VLAN tagged or untagged\n             ESA traffic generation on the Probe.\n             NOTE: This attribute is not applicable to Y.1731 probes.')
esaProbeVlanTagEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeVlanTagEtherType.setStatus('current')
if mibBuilder.loadTexts: esaProbeVlanTagEtherType.setDescription("This variable allows the user to specify the\n             monitored service's VLAN tag Ether Type.  \n             Valid if 'esaProbeVlanTagEnabled' is specified as TRUE.\n             NOTE: This attribute is not applicable to Y.1731 probes.")
esaProbeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 16), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeVlanId.setStatus('current')
if mibBuilder.loadTexts: esaProbeVlanId.setDescription("This variable allows the user to specify the\n             monitored service's VLAN tag.  Valid if 'esaProbeVlanTagEnabled' \n             is specified as TRUE.\n             NOTE: This attribute is not applicable to Y.1731 probes.")
esaProbeVlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 17), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeVlanPrio.setStatus('current')
if mibBuilder.loadTexts: esaProbeVlanPrio.setDescription("This variable allows the user to specify the\n             monitored service's VLAN priority. Valid if\n             'esaProbeVlanTagEnabled' is specified as TRUE.\n             NOTE: This attribute is not applicable to Y.1731 probes.")
esaProbeInnerVlanTagEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInnerVlanTagEnabled.setStatus('current')
if mibBuilder.loadTexts: esaProbeInnerVlanTagEnabled.setDescription('Ability to specify whether or not to use Inner VLAN tag. \n             NOTE: This attribute is not applicable to Y.1731 probes.')
esaProbeInnerVlanTagEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInnerVlanTagEtherType.setStatus('current')
if mibBuilder.loadTexts: esaProbeInnerVlanTagEtherType.setDescription("This variable allows the user to specify the\n             monitored service's Inner VLAN tag Ether Type.  \n             Valid if 'esaProbeInnerVlanTagEnabled' is specified as TRUE.\n             NOTE: This attribute is not applicable to Y.1731 probes.")
esaProbeInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 20), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: esaProbeInnerVlanId.setDescription("This variable allows the user to specify the\n             monitored service's Inner VLAN tag.  Valid if 'esaProbeInnerVlanTagEnabled' \n             is specified as TRUE.\n             NOTE: This attribute is not applicable to Y.1731 probes.")
esaProbeInnerVlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 21), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInnerVlanPrio.setStatus('current')
if mibBuilder.loadTexts: esaProbeInnerVlanPrio.setDescription("This variable allows the user to specify the\n             monitored service's Inner VLAN priority. Valid if\n             'esaProbeInnerVlanTagEnabled' is specified as TRUE.\n             NOTE: This attribute is not applicable to Y.1731 probes.")
esaProbeIpPrioMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 22), IpPriorityMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeIpPrioMapMode.setStatus('current')
if mibBuilder.loadTexts: esaProbeIpPrioMapMode.setDescription('This object enables specification of Priority Mapping Mode for\n          the ESA Probe. \n          NOTE: This attribute is not applicable to Y.1731 probes.')
esaProbeIpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeIpPriority.setStatus('current')
if mibBuilder.loadTexts: esaProbeIpPriority.setDescription('This object enables specification of Priority Value for\n          esaProbePrioMapMode as priomap-tos,priomap-dscp.\n          NOTE: This attribute is not applicable to Y.1731 probes.')
esaProbePktsPerSample = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbePktsPerSample.setStatus('current')
if mibBuilder.loadTexts: esaProbePktsPerSample.setDescription('This object enables specification of number of packets within\n          a sample run for ESA traffic generation. A non-zero value\n          must be specified.\n          NOTE: This attribute is not applicable to Y.1731 probes.')
esaProbePktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 2000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbePktSize.setStatus('current')
if mibBuilder.loadTexts: esaProbePktSize.setDescription('This object enables specification of fixed length frame size\n          in bytes for ESA traffic generation. If not specified, default value\n          of 104 bytes is used. \n          NOTE: This attribute is not available to Y.1731 probes.')
esaProbeInterPktGap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInterPktGap.setStatus('current')
if mibBuilder.loadTexts: esaProbeInterPktGap.setDescription('This object enables specification of interval in milliseconds between\n          packet generation. A non-zero value must be specified.\n          NOTE: This attribute is not applicable to Y.1731 probes.')
esaProbePktDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbePktDeadInterval.setStatus('current')
if mibBuilder.loadTexts: esaProbePktDeadInterval.setDescription("This object enables specification of the dead interval in seconds\n          after 'esaProbePktsPerSample' have been generated within the sample.\n          This allows for settling time of the ESA traffic.\n          A non-zero value must be specified.\n          NOTE: This attribute is not applicable to Y.1731 probes.")
esaProbeResponseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeResponseTimeout.setStatus('current')
if mibBuilder.loadTexts: esaProbeResponseTimeout.setDescription('This object allows specification of the timeout value to\n          determine lost packets. Time specified in seconds.\n          NOTE: This attribute is not applicable to Y.1731 probes.\n          \n          This object is applicable to Layer 3 and SLM/SLR Probes.')
esaProbeY1731DmmPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 9600), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeY1731DmmPktSize.setStatus('current')
if mibBuilder.loadTexts: esaProbeY1731DmmPktSize.setDescription('This object is only applicable to Y.1731 probes.\n          This object enables specification of the TLV size for\n          Delay Measurement Frames (DMMs).\n\n          Value of 0 is a read-only value when the Probe protocol is not y1731.\n          GE206 Release 4.4.x supports 2000 bytes')
esaProbeY1731LmmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 30), EsaProbePktIntervalType().clone('interval-1sec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeY1731LmmInterval.setStatus('current')
if mibBuilder.loadTexts: esaProbeY1731LmmInterval.setDescription('LMM frame transmission period. \n            For Loss Measurement Frames, only interval-1sec is supported. \n            This attribute is only applicable to Y.1731 probes.')
esaProbeY1731DmmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 31), EsaProbePktIntervalType().clone('interval-100ms')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeY1731DmmInterval.setStatus('current')
if mibBuilder.loadTexts: esaProbeY1731DmmInterval.setDescription('DMM frame transmission period. \n            This attribute is only applicable to Y.1731 probes.')
esaProbeHistoryBins = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeHistoryBins.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryBins.setDescription('This object allows specification of number of history bins.\n          This is the total history data that will be maintained\n          for an ESA Probe run, at any instance.')
esaProbeHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 33), EsaProbeHistoryIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeHistoryInterval.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryInterval.setDescription('This object allows specification of the history interval\n          period.')
esaProbeDistHistoryBins = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistHistoryBins.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryBins.setDescription('This object allows specification of number of distribution\n          history bins. This is the total history distribution data that\n          will be maintained for an ESA Probe run, at any instance.')
esaProbeDistHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 35), EsaProbeHistoryIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistHistoryInterval.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryInterval.setDescription('This object allows specification of the history distribution\n          interval period.')
esaProbeCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 36), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeCreationTime.setStatus('current')
if mibBuilder.loadTexts: esaProbeCreationTime.setDescription('This object provides the creation time of the ESA Probe.')
esaProbeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 37), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeStorageType.setStatus('current')
if mibBuilder.loadTexts: esaProbeStorageType.setDescription('The type of storage configured for this entry.')
esaProbeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 38), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeRowStatus.setStatus('current')
if mibBuilder.loadTexts: esaProbeRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of esaProbeRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            esaProbeRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The esaProbeRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
esaProbeMultiCOSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 39), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeMultiCOSEnabled.setStatus('current')
if mibBuilder.loadTexts: esaProbeMultiCOSEnabled.setDescription('This object is introduced for FSP150CC Release 4.3. \n         This object is only applicable for Y.1731 and \n         SLM-SLR Probe Protocol Types.  This object can be used\n         to specify the multiple class of services (COS) for each\n         ESA Probe.')
esaProbeSLAMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 40), EsaProbeSLAMonitorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeSLAMonitorType.setStatus('current')
if mibBuilder.loadTexts: esaProbeSLAMonitorType.setDescription('This object indicates whether the Probe is a point-to-point type\n          or a point-to-multipoint type. Only SLM-SLR probes can be\n          point-to-multipoint.')
esaProbeCOSType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 41), ClassOfServiceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSType.setStatus('current')
if mibBuilder.loadTexts: esaProbeCOSType.setDescription('This object can be used to specify the first Class of Service associated with\n           the Y.1731/SLM-SLR ESA Probe.  In the case of a multiCOS Probe, this object\n           has no semantics when multiple COS levels exist.  This object is only valid for\n           Y.1731/SLM-SLR ESA Probes.')
esaProbeSLMMulticastMACEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 42), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeSLMMulticastMACEnabled.setStatus('current')
if mibBuilder.loadTexts: esaProbeSLMMulticastMACEnabled.setDescription('This object can be used to specify whether the SLM/SLR protocol Probe will use\n           multicast MAC address in SLM (Synthetic Loss Measurement) messages. \n           This object is only valid for SLM-SLR ESA Probes.')
esaProbeSOAMInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 43), EsaProbePktIntervalType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeSOAMInterval.setStatus('current')
if mibBuilder.loadTexts: esaProbeSOAMInterval.setDescription('This object can be used to specify the packet interval type for Y.1731 LM/DM\n            and SLM/SLR based ESA Probes, for the first Class of Service.  \n            In the case of a multiCOS Probe, this object has no semantics \n            when multiple COS levels exist. \n            This attribute is applicable for Y.1731 LM/DM and SLM/SLR based probes.')
esaProbeSOAMPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 9612), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeSOAMPktSize.setStatus('current')
if mibBuilder.loadTexts: esaProbeSOAMPktSize.setDescription('This object can be used to specify the packet size for SLM-SLR based ESA Probes,\n          for the first Class of Service.  In the case of multiCOS Probe, this object has\n          no semantics when multiple COS levels exist. In such cases this will return\n          a value of 0.')
esaProbeInner2VlanTagEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 45), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInner2VlanTagEnabled.setStatus('current')
if mibBuilder.loadTexts: esaProbeInner2VlanTagEnabled.setDescription('Ability to specify whether or not to use Inner2 VLAN tag. \n             NOTE: This attribute is not applicable to Y.1731 probes.')
esaProbeInner2VlanTagEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 46), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInner2VlanTagEtherType.setStatus('current')
if mibBuilder.loadTexts: esaProbeInner2VlanTagEtherType.setDescription("This variable allows the user to specify the\n             monitored service's Inner2 VLAN tag Ether Type.  \n             Valid if 'esaProbeInner2VlanTagEnabled' is specified as TRUE.\n             NOTE: This attribute is not applicable to Y.1731 probes.")
esaProbeInner2VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 47), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInner2VlanId.setStatus('current')
if mibBuilder.loadTexts: esaProbeInner2VlanId.setDescription("This variable allows the user to specify the\n             monitored service's Inner2 VLAN tag.  Valid if 'esaProbeInner2VlanTagEnabled' \n             is specified as TRUE.\n             NOTE: This attribute is not applicable to Y.1731 probes.")
esaProbeInner2VlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 48), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeInner2VlanPrio.setStatus('current')
if mibBuilder.loadTexts: esaProbeInner2VlanPrio.setDescription("This variable allows the user to specify the\n             monitored service's Inner2 VLAN priority. Valid if\n             'esaProbeInner2VlanTagEnabled' is specified as TRUE.\n             NOTE: This attribute is not applicable to Y.1731 probes.")
esaProbeAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 49), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeAdminState.setStatus('current')
if mibBuilder.loadTexts: esaProbeAdminState.setDescription('This object represents the Administrative State of the ESA Probe.\n             This is not externally managed.')
esaProbeOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 50), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeOperationalState.setStatus('current')
if mibBuilder.loadTexts: esaProbeOperationalState.setDescription('This object represents the Operational State of the ESA Probe.')
esaProbeSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 51), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeSecondaryState.setStatus('current')
if mibBuilder.loadTexts: esaProbeSecondaryState.setDescription('This object represents the Secondary State of the ESA Probe.')
esaProbeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 52), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeMacAddress.setStatus('current')
if mibBuilder.loadTexts: esaProbeMacAddress.setDescription('This attribute is applicable only for Y.1731 probes. It identifies\n            the destination MacAddress which esa using ')
esaProbeAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 4, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeAlias.setStatus('current')
if mibBuilder.loadTexts: esaProbeAlias.setDescription('This object allows SNMP management entities to provide an\n          alias for an ESA Probe.')
esaProbeScheduleGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5), )
if mibBuilder.loadTexts: esaProbeScheduleGroupTable.setStatus('current')
if mibBuilder.loadTexts: esaProbeScheduleGroupTable.setDescription('A list of entries that allow groups of ESA Probes\n             to be scheduled.')
esaProbeScheduleGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeScheduleGroupIndex"))
if mibBuilder.loadTexts: esaProbeScheduleGroupEntry.setStatus('current')
if mibBuilder.loadTexts: esaProbeScheduleGroupEntry.setDescription('A row in esaProbeScheduleGroupTable. Entries are created\n             in this table by management application action.')
esaProbeScheduleGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeScheduleGroupIndex.setDescription('A unique index to distinguish the ESA Probe Schedule Group.')
esaProbeScheduleGroupDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupDescr.setStatus('current')
if mibBuilder.loadTexts: esaProbeScheduleGroupDescr.setDescription('Description of the probe schedule group.')
esaProbeScheduleGroupProbeList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupProbeList.setStatus('current')
if mibBuilder.loadTexts: esaProbeScheduleGroupProbeList.setDescription("A comma separated list of esaProbeName's, that will have the\n             same schedule.")
esaProbeScheduleGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 4), ScheduleType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupType.setStatus('current')
if mibBuilder.loadTexts: esaProbeScheduleGroupType.setDescription("This object allows to specify whether the ESA probe group\n          schedule is 'one-shot' or 'periodic'. A 'one-shot' schedule executes only\n          once and then stops. A 'periodic' schedule reoccurs\n          every 'esaProbeScheduleGroupInterval' seconds and continues\n          until explicitly stopped.")
esaProbeScheduleGroupStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 5), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupStartTime.setStatus('current')
if mibBuilder.loadTexts: esaProbeScheduleGroupStartTime.setDescription('This object allows specification of the start time\n          of the ESA Probe Group. Value of time less than current system\n          time will equate to current time. When the system time reaches\n          this configured time, the ESA Probe Group will be activated.')
esaProbeScheduleGroupDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupDuration.setStatus('current')
if mibBuilder.loadTexts: esaProbeScheduleGroupDuration.setDescription("This object allows specification of the duration in\n          'seconds' for ESA Probe Group run. Note that a value of\n          4294967295 means Duration as FOREVER.\n          FOREVER value is only applicable to schedule type oneshot. \n          The value 4294967295 cannot be used if schedule type is periodic.")
esaProbeScheduleGroupInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupInterval.setStatus('current')
if mibBuilder.loadTexts: esaProbeScheduleGroupInterval.setDescription("This object allows specification of the interval in\n          'seconds' between successive runs for ESA Probe Group.  This\n          variable is only valid if the 'esaProbeScheduleGroupType' is\n          'periodic'.")
esaProbeScheduleGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 8), EsaAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeScheduleGroupAction.setStatus('current')
if mibBuilder.loadTexts: esaProbeScheduleGroupAction.setDescription('This object allows to suspend/resume the ESA scheduled group.')
esaProbeScheduleGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 9), SchedActivityStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeScheduleGroupStatus.setStatus('current')
if mibBuilder.loadTexts: esaProbeScheduleGroupStatus.setDescription('This object indicates the current status of the ESA Probe Group.')
esaProbeScheduleGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: esaProbeScheduleGroupStorageType.setDescription('The type of storage configured for this entry.')
esaProbeScheduleGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeScheduleGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: esaProbeScheduleGroupRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of esaProbeScheduleGroupRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            esaProbeRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The esaProbeScheduleGroupRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
esaProbeScheduleGroupActionProbeList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeScheduleGroupActionProbeList.setStatus('current')
if mibBuilder.loadTexts: esaProbeScheduleGroupActionProbeList.setDescription("A comma separated list of esaProbeName's, if set esaProbeScheduleGroupAction as add or remove,\n            they will be add or remove from esaProbeScheduleGroupProbeList.")
esaReflectorTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6), )
if mibBuilder.loadTexts: esaReflectorTable.setStatus('current')
if mibBuilder.loadTexts: esaReflectorTable.setDescription('A list of entries corresponding to ESA Reflectors.\n             NOTE: There is no need to create reflectors for Y.1731 probes as\n             the MEPs will respond by default.')
esaReflectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaReflectorIndex"))
if mibBuilder.loadTexts: esaReflectorEntry.setStatus('current')
if mibBuilder.loadTexts: esaReflectorEntry.setDescription('A row in the esaReflectorTable. Entries can\n            be created in this table by management application action.')
esaReflectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorIndex.setStatus('current')
if mibBuilder.loadTexts: esaReflectorIndex.setDescription('A unique index to distinguish the ESA Reflector.')
esaReflectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorName.setStatus('current')
if mibBuilder.loadTexts: esaReflectorName.setDescription('A unique identifier to distinguish the ESA Reflector.')
esaReflectorIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorIpAddress.setStatus('current')
if mibBuilder.loadTexts: esaReflectorIpAddress.setDescription("This object allows specification of the Reflector's IP Address.\n             Reflector listens for packets destined at this IP Address.")
esaReflectorSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorSubnetMask.setStatus('current')
if mibBuilder.loadTexts: esaReflectorSubnetMask.setDescription("This object allows specification of the\n             Reflector's IP Subnet mask.")
esaReflectorSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 5), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorSourcePort.setStatus('current')
if mibBuilder.loadTexts: esaReflectorSourcePort.setDescription('This object points to the Port to which the ESA Reflector\n             is attached, i.e.on which the service to be monitored resides.')
esaReflectorIpPrioMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 6), IpPriorityMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaReflectorIpPrioMapMode.setStatus('current')
if mibBuilder.loadTexts: esaReflectorIpPrioMapMode.setDescription('This object enables specification of Priority Mapping Mode for\n          the ESA Reflector.')
esaReflectorIpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaReflectorIpPriority.setStatus('current')
if mibBuilder.loadTexts: esaReflectorIpPriority.setDescription('This object enables specification of Priority Value for\n          esaReflectorPrioMapMode as priomap-tos,priomap-dscp.')
esaReflectorAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 8), EsaAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaReflectorAction.setStatus('current')
if mibBuilder.loadTexts: esaReflectorAction.setDescription('This object allows to suspend/resume the ESA reflector.')
esaReflectorSuspended = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaReflectorSuspended.setStatus('current')
if mibBuilder.loadTexts: esaReflectorSuspended.setDescription('This object indicates whether the ESA Reflector is active or suspended.')
esaReflectorCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaReflectorCreationTime.setStatus('current')
if mibBuilder.loadTexts: esaReflectorCreationTime.setDescription('This object provides the creation time of the ESA Reflector.')
esaReflectorStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorStorageType.setStatus('current')
if mibBuilder.loadTexts: esaReflectorStorageType.setDescription('The type of storage configured for this entry.')
esaReflectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorRowStatus.setStatus('current')
if mibBuilder.loadTexts: esaReflectorRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of esaReflectorRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            esaReflectorRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The esaReflectorRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
esaReflectorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 13), EsaReflectorDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorDirection.setStatus('current')
if mibBuilder.loadTexts: esaReflectorDirection.setDescription('This object provides the direction of the ESA Reflector.')
esaReflectorAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 14), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaReflectorAdminState.setStatus('current')
if mibBuilder.loadTexts: esaReflectorAdminState.setDescription('This object represents the Administrative State of the ESA Reflector.\n             This is not externally managed.')
esaReflectorOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 15), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaReflectorOperationalState.setStatus('current')
if mibBuilder.loadTexts: esaReflectorOperationalState.setDescription('This object represents the Operational State of the ESA Reflector.')
esaReflectorSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 16), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaReflectorSecondaryState.setStatus('current')
if mibBuilder.loadTexts: esaReflectorSecondaryState.setDescription('This object represents the Secondary State of the ESA Reflector.')
esaReflectorMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 17), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaReflectorMacAddress.setStatus('current')
if mibBuilder.loadTexts: esaReflectorMacAddress.setDescription('This attribute is applicable only for Y.1731 probes. It identifies\n            the destination MacAddress which esa using ')
esaReflectorAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaReflectorAlias.setStatus('current')
if mibBuilder.loadTexts: esaReflectorAlias.setDescription('This object allows SNMP management entities to provide an\n          alias for an ESA Reflector.')
esaProbeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7), )
if mibBuilder.loadTexts: esaProbeStatsTable.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsTable.setDescription('A collection of ESA Probe related statistics kept for\n             a particular ESA Probe entity. These reflect the\n             current data.')
esaProbeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeStatsDestinationIndex"), (0, "CM-SA-MIB", "esaProbeStatsCOSIndex"), (0, "CM-SA-MIB", "esaProbeStatsIndex"))
if mibBuilder.loadTexts: esaProbeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsEntry.setDescription('A conceptual row in the esaProbeStatsTable. An entry exists\n             in this table for each ESA Probe.')
esaProbeStatsDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsDestinationIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsDestinationIndex.setDescription('An integer index value used to uniquely identify\n             a destination (Reflector) Index, in a point-to-multi point SLA. \n             For Release 4.1 GE206, this value is 1, since only point-to-point SLA\n             is supported.')
esaProbeStatsCOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsCOSIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsCOSIndex.setDescription('An integer index value used to uniquely identify\n             SLA for a specific Class of Service. \n             For Release 4.1 GE206, this value is 1, since the COS\n             is explicitly specified in the Probe parameters.')
esaProbeStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this ESA Probe statistics entry. \n            Index 1 corresponds to current and index 2 to rollover.')
esaProbeStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 4), EsaProbePmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsIntervalType.setDescription('Indicates the type of collection, i.e. whether it is\n             current, or rollover.')
esaProbeStatsCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 5), ClassOfServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsCOS.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsCOS.setDescription('The Class of Service.  \n             For Release 4.1 GE206, this value is cos-not-applicable, since \n             multi COS SLA is not supported.')
esaProbeStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsValid.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsValid.setDescription('Indicates the validity of the bin.')
esaProbeStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 7), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeStatsAction.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsAction.setDescription('Allows the Manager to clear the bin.')
esaProbeStatsP2RPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsP2RPkts.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsP2RPkts.setDescription('The total number of Transmitted Packets in the current interval.\n          In the case of Y.1731 probes, this reflects the number of DMRs\n          (Delay Measurement Replies) received and this will always be the\n          same as the esaProbeStatsR2PPkts.')
esaProbeStatsP2RErredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsP2RErredPkts.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsP2RErredPkts.setDescription('The total number of Packets in the current interval, for which\n          there was a problem in transmission.  This error is counted\n          when there is a failure in packet transmission due to resource\n          limitations (buffers).\n          This can happen if the Probe Configuration was changed to\n          send in a large number of packets in a time interval.\n\n          NOTE: This is not applicable for Y.1731 probes.')
esaProbeStatsP2RSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsP2RSyncErrs.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsP2RSyncErrs.setDescription('The number of (time) Synchronization Errors from probe to reflector\n          in the current interval.')
esaProbeStatsP2RLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsP2RLostPkts.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsP2RLostPkts.setDescription('The number of Lost Pkts from probe to reflector in the current interval.\n          For Y.1731 probes, these are the actual data frames lost.')
esaProbeStatsR2PPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsR2PPkts.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsR2PPkts.setDescription('The total number of Received Packets in the current interval.\n          In the case of Y.1731 probes, this reflects the number of DMRs\n          (Delay Measurement Replies) received and this will always be the\n          same as the esaProbeStatsP2RPkts.')
esaProbeStatsR2PErredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsR2PErredPkts.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsR2PErredPkts.setDescription('The total number of Received Packets in the current interval,\n          which had errors such as length of received packet is less than\n          the protocol header length, packet was received after it was\n          marked as lost (i.e.beyond timeout).\n          NOTE: This is not applicable for Y.1731 probes.')
esaProbeStatsR2PSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsR2PSyncErrs.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsR2PSyncErrs.setDescription('The number of (time) Synchronization Errors from reflector to probe\n          in the current interval.')
esaProbeStatsR2PLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsR2PLostPkts.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsR2PLostPkts.setDescription('The number of Lost Pkts from reflector to probe in the current interval.\n          For Y.1731 probes, these are the actual data frames lost.')
esaProbeStatsLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsLostPkts.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsLostPkts.setDescription('The total number of Lost Packets in the current interval.\n          Packets which are not received from the reflector end beyond\n          the configured timeout value are termed as lost.\n          NOTE: This is not applicable for Y.1731 probes.')
esaProbeStatsSeqGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSeqGaps.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSeqGaps.setDescription('The total number of sequence gaps across all\n          packets received in the current interval. If (Received Seq Number)\n          is greater than or equal to (Last Received Seq Number + 2))\n          it is termed as a sequence gap.\n          NOTE: This is not applicable for Y.1731 probes.')
esaProbeStatsOutOfSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsOutOfSeqErrs.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsOutOfSeqErrs.setDescription('The total number of out of sequence errors across all\n          packets received in the current interval. If (Received Seq Number)\n          is less than or equal to (Last Received Seq Number),\n          it is termed as out of sequence error.\n          NOTE: This is not applicable for Y.1731 probes.')
esaProbeStatsMinRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMinRoundTripDelay.setDescription("The minimum round-trip delay(in microseconds) across all\n          packets received in the current interval.\n          The reflector's processing time is excluded from the value.")
esaProbeStatsMaxRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMaxRoundTripDelay.setDescription("The maximum round-trip delay(in microseconds) across all\n          packets received in the current interval.\n          The reflector's processing time is excluded from the value.")
esaProbeStatsAvgRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsAvgRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsAvgRoundTripDelay.setDescription("The average round-trip delay(in microseconds) across all\n          packets received in the current interval.\n          The reflector's processing time is excluded from the value.")
esaProbeStatsSumRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumRoundTripDelay.setDescription("The total sum of  round trip delay(in microseconds)\n          in the current interval.\n          The reflector's processing time is excluded from the value.")
esaProbeStatsSumOfSqRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumOfSqRoundTripDelay.setDescription('The sum of square of  round trip delays in the current interval.')
esaProbeStatsMinOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinOnewayP2RDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMinOnewayP2RDelay.setDescription('The minimum one-way source to destination delay(in microseconds)\n          across all packets received in the current interval.')
esaProbeStatsMaxOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxOnewayP2RDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMaxOnewayP2RDelay.setDescription('The maximum one-way source to destination delay(in microseconds)\n          across all packets received in the current interval.')
esaProbeStatsAvgOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsAvgOnewayP2RDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsAvgOnewayP2RDelay.setDescription('The average one-way source to destination delay(in microseconds)\n          across all packets received in the current interval.')
esaProbeStatsSumOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOnewayP2RDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumOnewayP2RDelay.setDescription('The total sum of one-way delay from source to\n          destination in the current interval.')
esaProbeStatsSumOfSqOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqOnewayP2RDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumOfSqOnewayP2RDelay.setDescription('The sum of square of one-way delay from source to\n          destination in the current interval.')
esaProbeStatsMinOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinOnewayR2PDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMinOnewayR2PDelay.setDescription('The minimum one-way destination to source delay(in microseconds)\n          across all packets received in the current interval.')
esaProbeStatsMaxOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxOnewayR2PDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMaxOnewayR2PDelay.setDescription('The maximum one-way destination to source delay(in microseconds)\n          across all packets received in the current interval.')
esaProbeStatsAvgOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsAvgOnewayR2PDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsAvgOnewayR2PDelay.setDescription('The average one-way destination to source delay(in microseconds)\n          across all packets received in the current interval.')
esaProbeStatsSumOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOnewayR2PDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumOnewayR2PDelay.setDescription('The total sum of one-way delay from destination to source\n          in the current interval.')
esaProbeStatsSumOfSqOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqOnewayR2PDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumOfSqOnewayR2PDelay.setDescription('The sum of square of one-way delay from destination to source\n          in the current interval.')
esaProbeStatsMinPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinPosP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMinPosP2RJitter.setDescription('The minimum positive one-way jitter from source to\n          destination in the current interval.')
esaProbeStatsMaxPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxPosP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMaxPosP2RJitter.setDescription('The maximum positive one-way jitter from source to\n          destination in the current interval.')
esaProbeStatsNumPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsNumPosP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsNumPosP2RJitter.setDescription('The total number of  positive one-way jitters from source to\n          destination in the current interval.')
esaProbeStatsSumPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumPosP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumPosP2RJitter.setDescription('The total sum of  positive one-way jitters from source to\n          destination in the current interval.')
esaProbeStatsSumOfSqPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqPosP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumOfSqPosP2RJitter.setDescription('The sum of square of  positive one-way jitters from source to\n          destination in the current interval.')
esaProbeStatsMinNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinNegP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMinNegP2RJitter.setDescription('The minimum negative one-way jitter from source to\n          destination in the current interval.')
esaProbeStatsMaxNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxNegP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMaxNegP2RJitter.setDescription('The maximum negative one-way jitter from source to\n          destination in the current interval.')
esaProbeStatsNumNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 41), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsNumNegP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsNumNegP2RJitter.setDescription('The total number of  negative one-way jitters from source to\n          destination in the current interval.')
esaProbeStatsSumNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 42), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumNegP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumNegP2RJitter.setDescription('The total sum of  negative one-way jitters from source to\n          destination in the current interval.')
esaProbeStatsSumOfSqNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 43), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqNegP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumOfSqNegP2RJitter.setDescription('The sum of square of  negative one-way jitters from source to\n          destination in the current interval.')
esaProbeStatsMinPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinPosR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMinPosR2PJitter.setDescription('The minimum positive one-way jitter from destination to source\n          in the current interval.')
esaProbeStatsMaxPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxPosR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMaxPosR2PJitter.setDescription('The maximum positive one-way jitter from destination to\n          source in the current interval.')
esaProbeStatsNumPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 46), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsNumPosR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsNumPosR2PJitter.setDescription('The total number of  positive one-way jitters from destination to\n          source in the current interval.')
esaProbeStatsSumPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 47), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumPosR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumPosR2PJitter.setDescription('The total sum of  positive one-way jitters from destination to\n          source in the current interval.')
esaProbeStatsSumOfSqPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 48), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqPosR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumOfSqPosR2PJitter.setDescription('The sum of square of  positive one-way jitters from destination to\n          source in the current interval.')
esaProbeStatsMinNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinNegR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMinNegR2PJitter.setDescription('The minimum negative one-way jitter from destination to source\n          in the current interval.')
esaProbeStatsMaxNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxNegR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMaxNegR2PJitter.setDescription('The maximum negative one-way jitter from destination to\n          source in the current interval.')
esaProbeStatsNumNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 51), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsNumNegR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsNumNegR2PJitter.setDescription('The total number of  negative one-way jitters from destination to\n          source in the current interval.')
esaProbeStatsSumNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 52), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumNegR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumNegR2PJitter.setDescription('The total sum of  negative one-way jitters from destination to\n          source in the current interval.')
esaProbeStatsSumOfSqNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 53), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqNegR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumOfSqNegR2PJitter.setDescription('The sum of square of  negative one-way jitters from destination to\n          source in the current interval.')
esaProbeStatsY1731P2RNegLossOccurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 54), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsY1731P2RNegLossOccurrences.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsY1731P2RNegLossOccurrences.setDescription('This attribute is only applicable to Y.1731 probes. This is the\n          number of occurences of negative frame loss from Source MEP (Probe)\n          to Destination MEP (Reflector). If these counts are non-zero then\n          there could be some kind of provisioning mismatch between the Probe\n          MEP and Reflector MEP. Here are some scenarios this can happen:\n          - Probe MEP is configured to count in-profile frames only and the\n            Reflector MEP is configured to count all frames with a mismatch\n            in value for the attribute cfmMepLmCountInProfileFrames.\n          - Probe MEP is configured to count data frames for specific VLAN\n            priority and the Reflector MEP is configured to count data frames\n            for all the priorities with a mismatch in values for the attributes\n            cfmMepLmTxCountAllPrios or cfmMepLmRxCountAllPrios.\n          NOTE: This could possibly happen due to reasons not related to\n                configuration such as frame reordering in the network.')
esaProbeStatsY1731R2PNegLossOccurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 55), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsY1731R2PNegLossOccurrences.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsY1731R2PNegLossOccurrences.setDescription('This attribute is only applicable to Y.1731 probes. This is the\n          number of occurences of negative frame loss from to Destination MEP\n          (Reflector) to Source MEP (Probe). If these counts are non-zero then\n          there could be some kind of provisioning mismatch between the Probe\n          MEP and Reflector MEP. Here are some scenarios this can happen:\n          - Probe MEP is configured to count in-profile frames only and the\n            Reflector MEP is configured to count all frames with a mismatch\n            in value for the attribute cfmMepLmCountInProfileFrames.\n          - Probe MEP is configured to count data frames for specific VLAN\n            priority and the Reflector MEP is configured to count data frames\n            for all the priorities with a mismatch in values for the attributes\n            cfmMepLmTxCountAllPrios or cfmMepLmRxCountAllPrios.\n          NOTE: This could possibly happen due to reasons not related to\n                configuration such as frame reordering in the network.')
esaProbeStatsY1731RxLmSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 56), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsY1731RxLmSamples.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsY1731RxLmSamples.setDescription('This attribute is only applicable to Y.1731 probes. This flag\n          indicates that at least one loss measurement sample was received\n          for this bin period (LMRs received). This is used by the user\n          to differentiate between valid zero frame loss and not receiving\n          any LMRs.')
esaProbeStatsY1731RxDmSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 57), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsY1731RxDmSamples.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsY1731RxDmSamples.setDescription('This attribute is only applicable to Y.1731 probes. This flag\n          indicates that at least one delay measurement sample was received\n          for this bin period (DMRs received).')
esaProbeStatsY1731P2RFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 58), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsY1731P2RFrames.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsY1731P2RFrames.setDescription("This attribute is only applicable to Y.1731 probes. This is the\n           number of data frames counted by the Source MEP (Probe) that\n           are transmitted towards the Destination MEP (Reflector). Based\n           on the configuration the MEP counts the data frames with:\n           - MEP's LM TX priority or all the priorities\n           - All the VLAN IDs belonging the MEP's MA VID list.")
esaProbeStatsY1731R2PFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 59), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsY1731R2PFrames.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsY1731R2PFrames.setDescription("This attribute is only applicable to Y.1731 probes. This is the\n           number of data frames counted by the Destination MEP (Reflector)\n           that are transmitted towards the Source MEP (Probe). Based\n           on the configuration the MEP counts the data frames with:\n           - MEP's LM RX priority or all the priorities\n           - All the VLAN IDs belonging the MEP's MA VID list.")
esaProbeStatsAvgAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsAvgAbsP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsAvgAbsP2RJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the average absolute P2R Jitter value.\n           .')
esaProbeStatsAvgAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 61), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsAvgAbsR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsAvgAbsR2PJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the average absolute R2P Jitter value.\n           .')
esaProbeStatsMinAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 62), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinAbsP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMinAbsP2RJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the minimum absolute P2R Jitter value.\n           .')
esaProbeStatsMinAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMinAbsR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMinAbsR2PJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the minimum absolute R2P Jitter value.\n           .')
esaProbeStatsMaxAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 64), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxAbsP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMaxAbsP2RJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the maximum absolute P2R Jitter value.\n           .')
esaProbeStatsMaxAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 65), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsMaxAbsR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsMaxAbsR2PJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the maximum absolute R2P Jitter value.\n           .')
esaProbeStatsNumAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 66), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsNumAbsP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsNumAbsP2RJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the number of absolute P2R Jitters.')
esaProbeStatsNumAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 67), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsNumAbsR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsNumAbsR2PJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the number of absolute R2P Jitters.')
esaProbeStatsSumAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 68), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumAbsP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumAbsP2RJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the sum of absolute P2R Jitter values.')
esaProbeStatsSumAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 69), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumAbsR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumAbsR2PJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the sum of absolute R2P Jitter values.')
esaProbeStatsSumOfSqAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 70), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqAbsP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumOfSqAbsP2RJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the sum of squares of absolute P2R Jitter values.')
esaProbeStatsSumOfSqAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 7, 1, 71), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsSumOfSqAbsR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsSumOfSqAbsR2PJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the sum of squares of absolute R2P Jitter values.')
esaProbeHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8), )
if mibBuilder.loadTexts: esaProbeHistoryTable.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryTable.setDescription('A collection of ESA Probe related history kept for\n             a particular ESA Probe entity. These reflect the\n             current data.')
esaProbeHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeHistoryDestinationIndex"), (0, "CM-SA-MIB", "esaProbeHistoryCOSIndex"), (0, "CM-SA-MIB", "esaProbeHistoryIndex"))
if mibBuilder.loadTexts: esaProbeHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryEntry.setDescription('A conceptual row in the esaProbeHistoryTable. An entry exists\n             in this table for each ESA Probe.')
esaProbeHistoryDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryDestinationIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryDestinationIndex.setDescription('An integer index value used to uniquely identify\n             a destination (Reflector) Index, in a point-to-multi point SLA. \n             For Release 4.1 GE206, this value is 1, since only point-to-point SLA\n             is supported.')
esaProbeHistoryCOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryCOSIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryCOSIndex.setDescription('An integer index value used to uniquely identify\n             SLA for a specific Class of Service. \n             For Release 4.1 GE206, this value is 1, since the COS\n             is explicitly specified in the Probe parameters.')
esaProbeHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this ESA Probe statistics history entry.')
esaProbeHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryTime.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryTime.setDescription('Indicates the time of history bin creation.')
esaProbeHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryValid.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryValid.setDescription('Indicates the validity of the bin.')
esaProbeHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 6), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeHistoryAction.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryAction.setDescription('Allows the Manager to clear the bin.')
esaProbeHistoryCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 7), ClassOfServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryCOS.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryCOS.setDescription('The Class of Service.  \n             For Release 4.1 GE206, this value is cos-not-applicable, since \n             multi COS SLA is not supported.')
esaProbeHistoryP2RPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryP2RPkts.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryP2RPkts.setDescription('The total number of Transmitted Packets in the current interval.\n          In the case of Y.1731 probes, this reflects the number of DMRs\n          (Delay Measurement Replies) received and this will always be the\n          same as the esaProbeHistoryR2PPkts.')
esaProbeHistoryP2RErredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryP2RErredPkts.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryP2RErredPkts.setDescription('The total number of Packets in the current interval, for which\n          there was a problem in transmission.  This error is counted\n          when there is a failure in packet transmission due to resource\n          limitations (buffers).\n          This can happen if the Probe Configuration was changed to\n          send in a large number of packets in a time interval.\n\n          NOTE: This is not applicable for Y.1731 probes.')
esaProbeHistoryP2RSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryP2RSyncErrs.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryP2RSyncErrs.setDescription('The number of (time) Synchronization Errors from probe to reflector\n          in the current interval.')
esaProbeHistoryP2RLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryP2RLostPkts.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryP2RLostPkts.setDescription('The number of Lost Pkts from probe to reflector in the current interval.\n          For Y.1731 probes, these are the actual data frames lost.')
esaProbeHistoryR2PPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryR2PPkts.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryR2PPkts.setDescription('The total number of Received Packets in the current interval.\n          In the case of Y.1731 probes, this reflects the number of DMRs\n          (Delay Measurement Replies) received and this will always be the\n          same as the esaProbeHistoryP2RPkts.')
esaProbeHistoryR2PErredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryR2PErredPkts.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryR2PErredPkts.setDescription('The total number of Received Packets in the current interval,\n          which had errors such as length of received packet is less than\n          the protocol header length, packet was received after it was\n          marked as lost (i.e.beyond timeout).\n          NOTE: This is not applicable for Y.1731 probes.')
esaProbeHistoryR2PSyncErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryR2PSyncErrs.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryR2PSyncErrs.setDescription('The number of (time) Synchronization Errors from reflector to probe\n          in the current interval.')
esaProbeHistoryR2PLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryR2PLostPkts.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryR2PLostPkts.setDescription('The number of Lost Pkts from reflector to probe in the current interval.\n          For Y.1731 probes, these are the actual data frames lost.')
esaProbeHistoryLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryLostPkts.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryLostPkts.setDescription('The total number of Lost Packets in the current interval.\n          Packets which are not received from the reflector end beyond\n          the configured timeout value are termed as lost.\n          NOTE: This is not applicable for Y.1731 probes.')
esaProbeHistorySeqGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySeqGaps.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySeqGaps.setDescription('The total number of sequence gaps across all\n          packets received in the current interval. If (Received Seq Number)\n          is greater than or equal to (Last Received Seq Number + 2))\n          it is termed as a sequence gap.\n          NOTE: This is not applicable for Y.1731 probes.')
esaProbeHistoryOutOfSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryOutOfSeqErrs.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryOutOfSeqErrs.setDescription('The total number of out of sequence errors across all\n          packets received in the current interval. If (Received Seq Number)\n          is less than or equal to (Last Received Seq Number),\n          it is termed as out of sequence error.\n          NOTE: This is not applicable for Y.1731 probes.')
esaProbeHistoryMinRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMinRoundTripDelay.setDescription("The minimum round-trip delay(in microseconds) across all\n          packets received in the current interval.\n          The reflector's processing time is excluded from the value.")
esaProbeHistoryMaxRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMaxRoundTripDelay.setDescription("The maximum round-trip delay(in microseconds) across all\n          packets received in the current interval.\n          The reflector's processing time is excluded from the value.")
esaProbeHistoryAvgRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryAvgRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryAvgRoundTripDelay.setDescription("The average round-trip delay(in microseconds) across all\n          packets received in the current interval.\n          The reflector's processing time is excluded from the value.")
esaProbeHistorySumRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumRoundTripDelay.setDescription("The total sum of  round trip delay(in microseconds)\n          in the current interval.\n          The reflector's processing time is excluded from the value.")
esaProbeHistorySumOfSqRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumOfSqRoundTripDelay.setDescription('The sum of square of  round trip delays in the current interval.')
esaProbeHistoryMinOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinOnewayP2RDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMinOnewayP2RDelay.setDescription('The minimum one-way source to destination delay(in microseconds)\n          across all packets received in the current interval.')
esaProbeHistoryMaxOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxOnewayP2RDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMaxOnewayP2RDelay.setDescription('The maximum one-way source to destination delay(in microseconds)\n          across all packets received in the current interval.')
esaProbeHistoryAvgOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryAvgOnewayP2RDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryAvgOnewayP2RDelay.setDescription('The average one-way source to destination delay(in microseconds)\n          across all packets received in the current interval.')
esaProbeHistorySumOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOnewayP2RDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumOnewayP2RDelay.setDescription('The total sum of one-way delay from source to\n          destination in the current interval.')
esaProbeHistorySumOfSqOnewayP2RDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqOnewayP2RDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumOfSqOnewayP2RDelay.setDescription('The sum of square of one-way delay from source to\n          destination in the current interval.')
esaProbeHistoryMinOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinOnewayR2PDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMinOnewayR2PDelay.setDescription('The minimum one-way destination to source delay(in microseconds)\n          across all packets received in the current interval.')
esaProbeHistoryMaxOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxOnewayR2PDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMaxOnewayR2PDelay.setDescription('The maximum one-way destination to source delay(in microseconds)\n          across all packets received in the current interval.')
esaProbeHistoryAvgOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryAvgOnewayR2PDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryAvgOnewayR2PDelay.setDescription('The average one-way destination to source delay(in microseconds)\n          across all packets received in the current interval.')
esaProbeHistorySumOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOnewayR2PDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumOnewayR2PDelay.setDescription('The total sum of one-way delay from destination to source\n          in the current interval.')
esaProbeHistorySumOfSqOnewayR2PDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqOnewayR2PDelay.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumOfSqOnewayR2PDelay.setDescription('The sum of square of one-way delay from destination to source\n          in the current interval.')
esaProbeHistoryMinPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinPosP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMinPosP2RJitter.setDescription('The minimum positive one-way jitter from source to\n          destination in the current interval.')
esaProbeHistoryMaxPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxPosP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMaxPosP2RJitter.setDescription('The maximum positive one-way jitter from source to\n          destination in the current interval.')
esaProbeHistoryNumPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryNumPosP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryNumPosP2RJitter.setDescription('The total number of  positive one-way jitters from source to\n          destination in the current interval.')
esaProbeHistorySumPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumPosP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumPosP2RJitter.setDescription('The total sum of  positive one-way jitters from source to\n          destination in the current interval.')
esaProbeHistorySumOfSqPosP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqPosP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumOfSqPosP2RJitter.setDescription('The sum of square of  positive one-way jitters from source to\n          destination in the current interval.')
esaProbeHistoryMinNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinNegP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMinNegP2RJitter.setDescription('The minimum negative one-way jitter from source to\n          destination in the current interval.')
esaProbeHistoryMaxNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxNegP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMaxNegP2RJitter.setDescription('The maximum negative one-way jitter from source to\n          destination in the current interval.')
esaProbeHistoryNumNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 41), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryNumNegP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryNumNegP2RJitter.setDescription('The total number of  negative one-way jitters from source to\n          destination in the current interval.')
esaProbeHistorySumNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 42), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumNegP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumNegP2RJitter.setDescription('The total sum of  negative one-way jitters from source to\n          destination in the current interval.')
esaProbeHistorySumOfSqNegP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 43), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqNegP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumOfSqNegP2RJitter.setDescription('The sum of square of  negative one-way jitters from source to\n          destination in the current interval.')
esaProbeHistoryMinPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinPosR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMinPosR2PJitter.setDescription('The minimum positive one-way jitter from destination to source\n          in the current interval.')
esaProbeHistoryMaxPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxPosR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMaxPosR2PJitter.setDescription('The maximum positive one-way jitter from destination to\n          source in the current interval.')
esaProbeHistoryNumPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 46), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryNumPosR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryNumPosR2PJitter.setDescription('The total number of  positive one-way jitters from destination to\n          source in the current interval.')
esaProbeHistorySumPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 47), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumPosR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumPosR2PJitter.setDescription('The total sum of  positive one-way jitters from destination to\n          source in the current interval.')
esaProbeHistorySumOfSqPosR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 48), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqPosR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumOfSqPosR2PJitter.setDescription('The sum of square of  positive one-way jitters from destination to\n          source in the current interval.')
esaProbeHistoryMinNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinNegR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMinNegR2PJitter.setDescription('The minimum negative one-way jitter from destination to source\n          in the current interval.')
esaProbeHistoryMaxNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxNegR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMaxNegR2PJitter.setDescription('The maximum negative one-way jitter from destination to\n          source in the current interval.')
esaProbeHistoryNumNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 51), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryNumNegR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryNumNegR2PJitter.setDescription('The total number of  negative one-way jitters from destination to\n          source in the current interval.')
esaProbeHistorySumNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 52), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumNegR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumNegR2PJitter.setDescription('The total sum of  negative one-way jitters from destination to\n          source in the current interval.')
esaProbeHistorySumOfSqNegR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 53), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqNegR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumOfSqNegR2PJitter.setDescription('The sum of square of  negative one-way jitters from destination to\n          source in the current interval.')
esaProbeHistoryY1731P2RNegLossOccurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 54), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryY1731P2RNegLossOccurrences.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryY1731P2RNegLossOccurrences.setDescription('This attribute is only applicable to Y.1731 probes. This is the\n          number of occurences of negative frame loss from Source MEP (Probe)\n          to Destination MEP (Reflector). If these counts are non-zero then\n          there could be some kind of provisioning mismatch between the Probe\n          MEP and Reflector MEP. Here are some scenarios this can happen:\n          - Probe MEP is configured to count in-profile frames only and the\n            Reflector MEP is configured to count all frames with a mismatch\n            in value for the attribute cfmMepLmCountInProfileFrames.\n          - Probe MEP is configured to count data frames for specific VLAN\n            priority and the Reflector MEP is configured to count data frames\n            for all the priorities with a mismatch in values for the attributes\n            cfmMepLmTxCountAllPrios or cfmMepLmRxCountAllPrios.\n          NOTE: This could possibly happen due to reasons not related to\n                configuration such as frame reordering in the network.')
esaProbeHistoryY1731R2PNegLossOccurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 55), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryY1731R2PNegLossOccurrences.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryY1731R2PNegLossOccurrences.setDescription('This attribute is only applicable to Y.1731 probes. This is the\n          number of occurences of negative frame loss from to Destination MEP\n          (Reflector) to Source MEP (Probe). If these counts are non-zero then\n          there could be some kind of provisioning mismatch between the Probe\n          MEP and Reflector MEP. Here are some scenarios this can happen:\n          - Probe MEP is configured to count in-profile frames only and the\n            Reflector MEP is configured to count all frames with a mismatch\n            in value for the attribute cfmMepLmCountInProfileFrames.\n          - Probe MEP is configured to count data frames for specific VLAN\n            priority and the Reflector MEP is configured to count data frames\n            for all the priorities with a mismatch in values for the attributes\n            cfmMepLmTxCountAllPrios or cfmMepLmRxCountAllPrios.\n          NOTE: This could possibly happen due to reasons not related to\n                configuration such as frame reordering in the network.')
esaProbeHistoryY1731RxLmSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 56), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryY1731RxLmSamples.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryY1731RxLmSamples.setDescription('This attribute is only applicable to Y.1731 probes. This flag\n          indicates that at least one loss measurement sample was received\n          for this bin period (LMRs received). This is used by the user\n          to differentiate between valid zero frame loss and not receiving\n          any LMRs.')
esaProbeHistoryY1731RxDmSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 57), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryY1731RxDmSamples.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryY1731RxDmSamples.setDescription('This attribute is only applicable to Y.1731 probes. This flag\n          indicates that at least one delay measurement sample was received\n          for this bin period (DMRs received).')
esaProbeHistoryY1731P2RFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 58), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryY1731P2RFrames.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryY1731P2RFrames.setDescription("This attribute is only applicable to Y.1731 probes. This is the\n           number of data frames counted by the Source MEP (Probe) that\n           are transmitted towards the Destination MEP (Reflector). Based\n           on the configuration the MEP counts the data frames with:\n           - MEP's LM TX priority or all the priorities\n           - All the VLAN IDs belonging the MEP's MA VID list.")
esaProbeHistoryY1731R2PFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 59), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryY1731R2PFrames.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryY1731R2PFrames.setDescription("This attribute is only applicable to Y.1731 probes. This is the\n           number of data frames counted by the Destination MEP (Reflector)\n           that are transmitted towards the Source MEP (Probe). Based\n           on the configuration the MEP counts the data frames with:\n           - MEP's LM RX priority or all the priorities\n           - All the VLAN IDs belonging the MEP's MA VID list.")
esaProbeHistoryAvgAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryAvgAbsP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryAvgAbsP2RJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the average absolute P2R Jitter value.\n           .')
esaProbeHistoryAvgAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 61), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryAvgAbsR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryAvgAbsR2PJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the average absolute R2P Jitter value.\n           .')
esaProbeHistoryMinAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 62), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinAbsP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMinAbsP2RJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the minimum absolute P2R Jitter value.\n           .')
esaProbeHistoryMinAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMinAbsR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMinAbsR2PJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the minimum absolute R2P Jitter value.\n           .')
esaProbeHistoryMaxAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 64), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxAbsP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMaxAbsP2RJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the maximum absolute P2R Jitter value.\n           .')
esaProbeHistoryMaxAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 65), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryMaxAbsR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryMaxAbsR2PJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the maximum absolute R2P Jitter value.\n           .')
esaProbeHistoryNumAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 66), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryNumAbsP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryNumAbsP2RJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the number of absolute P2R Jitters.')
esaProbeHistoryNumAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 67), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistoryNumAbsR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistoryNumAbsR2PJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the number of absolute R2P Jitters.')
esaProbeHistorySumAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 68), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumAbsP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumAbsP2RJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the sum of absolute P2R Jitter values.')
esaProbeHistorySumAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 69), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumAbsR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumAbsR2PJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the sum of absolute R2P Jitter values.')
esaProbeHistorySumOfSqAbsP2RJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 70), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqAbsP2RJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumOfSqAbsP2RJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the sum of squares of absolute P2R Jitter values.')
esaProbeHistorySumOfSqAbsR2PJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 8, 1, 71), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeHistorySumOfSqAbsR2PJitter.setStatus('current')
if mibBuilder.loadTexts: esaProbeHistorySumOfSqAbsR2PJitter.setDescription('This attribute is only applicable to Layer 3 ICMP Timestamp and Layer 2 Y.1731 probes. \n           This is the sum of squares of absolute R2P Jitter values.')
esaProbeDistStatsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9), )
if mibBuilder.loadTexts: esaProbeDistStatsConfigTable.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigTable.setDescription('A list of entries that need to be configured\n             in order to obtain statistical distribution\n             of ESA Probe collected data.')
esaProbeDistStatsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsConfigIndex"))
if mibBuilder.loadTexts: esaProbeDistStatsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigEntry.setDescription('A row in the esaProbeDistStatsConfigTable.')
esaProbeDistStatsConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsConfigIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigIndex.setDescription('A unique index for each row.  Each row corresponds to each enumeration\n             type specified in EsaProbeDistStatsType.')
esaProbeDistStatsConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 2), EsaProbeDistStatsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsConfigType.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigType.setDescription('Indicates whether the statistical distribution\n             is for round-trip delay (rt-delay), one-way probe to reflector\n             delay (oneway-p2rdelay), one-way reflector to probe delay(oneway-r2pdelay),\n             probe to reflector jitter (oneway-p2rjitter) or\n             one-way reflector to probe jitter (oneway-r2pjitter).')
esaProbeDistStatsConfigMinVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigMinVal.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigMinVal.setDescription('Minimum sample value in distribution.')
esaProbeDistStatsConfigMaxVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigMaxVal.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigMaxVal.setDescription('Maximum sample value in distribution.')
esaProbeDistStatsConfigNumBins = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigNumBins.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigNumBins.setDescription('Number of distribution bins.')
esaProbeDistStatsConfigLowBoundOfBin1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin1.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin1.setDescription('The lower bound of the 1st bin.')
esaProbeDistStatsConfigLowBoundOfBin2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin2.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin2.setDescription('The lower bound of the 2nd bin.')
esaProbeDistStatsConfigLowBoundOfBin3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin3.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin3.setDescription('The lower bound of the 3rd bin.')
esaProbeDistStatsConfigLowBoundOfBin4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin4.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin4.setDescription('The lower bound of the 4th bin.')
esaProbeDistStatsConfigLowBoundOfBin5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin5.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin5.setDescription('The lower bound of the 5th bin.')
esaProbeDistStatsConfigLowBoundOfBin6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin6.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin6.setDescription('The lower bound of the 6th bin.')
esaProbeDistStatsConfigLowBoundOfBin7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin7.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin7.setDescription('The lower bound of the 7th bin.')
esaProbeDistStatsConfigLowBoundOfBin8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin8.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin8.setDescription('The lower bound of the 8th bin.')
esaProbeDistStatsConfigLowBoundOfBin9 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 9, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin9.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsConfigLowBoundOfBin9.setDescription('The lower bound of the 9th bin.')
esaProbeDistStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10), )
if mibBuilder.loadTexts: esaProbeDistStatsTable.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsTable.setDescription('A list of entries that provide statistical distribution\n             of ESA Probe collected data.')
esaProbeDistStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsConfigIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsDestinationIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsCOSIndex"))
if mibBuilder.loadTexts: esaProbeDistStatsEntry.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsEntry.setDescription('A row in the esaProbeDistStatsTable.')
esaProbeDistStatsDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsDestinationIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsDestinationIndex.setDescription('An integer index value used to uniquely identify\n             a destination (Reflector) Index, in a point-to-multi point SLA. \n             For Release 4.1 GE206, this value is 1, since only point-to-point SLA\n             is supported.')
esaProbeDistStatsCOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsCOSIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsCOSIndex.setDescription('An integer index value used to uniquely identify\n             SLA for a specific Class of Service. \n             For Release 4.1 GE206, this value is 1, since the COS\n             is explicitly specified in the Probe parameters.')
esaProbeDistStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1, 3), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistStatsAction.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsAction.setDescription('Allows the Manager to clear the bin.')
esaProbeDistStatsCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1, 4), ClassOfServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsCOS.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsCOS.setDescription('The Class of Service.  \n             For Release 4.1 GE206, this value is cos-not-applicable, since \n             multi COS SLA is not supported.')
esaProbeDistStatsNumBins = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsNumBins.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsNumBins.setDescription('Number of bins over which the statistical\n             data is distributed.')
esaProbeDistStatsLTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsLTMin.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsLTMin.setDescription('Number of sample data points which are\n             less than the minimum value specified.')
esaProbeDistStatsGTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 10, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsGTMax.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsGTMax.setDescription('Number of sample data points which are\n             greater than the maximum value specified.')
esaProbeDistStatsBinTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 11), )
if mibBuilder.loadTexts: esaProbeDistStatsBinTable.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsBinTable.setDescription('A list of entries that provide statistical distribution\n             of ESA Probe collected data for specific BINs.')
esaProbeDistStatsBinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsConfigIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsDestinationIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsCOSIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsBinIndex"))
if mibBuilder.loadTexts: esaProbeDistStatsBinEntry.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsBinEntry.setDescription('A row in the esaProbeDistStatsBinTable.')
esaProbeDistStatsBinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsBinIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsBinIndex.setDescription('An index for each row that uniquely provides statistical\n             data for a range.')
esaProbeDistStatsBinLower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsBinLower.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsBinLower.setDescription('The lower limit of values collected in this bin.')
esaProbeDistStatsBinUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsBinUpper.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsBinUpper.setDescription('The upper limit of values collected in this bin.')
esaProbeDistStatsBinNumSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 11, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistStatsBinNumSamples.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistStatsBinNumSamples.setDescription('Number of sample data points which fall between\n             the lower and upper limits.')
esaProbeDistHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12), )
if mibBuilder.loadTexts: esaProbeDistHistoryTable.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryTable.setDescription('A list of entries that provide statistical distribution\n             history of ESA Probe collected data.')
esaProbeDistHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsConfigIndex"), (0, "CM-SA-MIB", "esaProbeDistHistoryDestinationIndex"), (0, "CM-SA-MIB", "esaProbeDistHistoryCOSIndex"), (0, "CM-SA-MIB", "esaProbeDistHistoryIndex"))
if mibBuilder.loadTexts: esaProbeDistHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryEntry.setDescription('A row in the esaProbeDistHistoryTable.')
esaProbeDistHistoryDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryDestinationIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryDestinationIndex.setDescription('An integer index value used to uniquely identify\n             a destination (Reflector) Index, in a point-to-multi point SLA. \n             For Release 4.1 GE206, this value is 1, since only point-to-point SLA\n             is supported.')
esaProbeDistHistoryCOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryCOSIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryCOSIndex.setDescription('An integer index value used to uniquely identify\n             SLA for a specific Class of Service. \n             For Release 4.1 GE206, this value is 1, since the COS\n             is explicitly specified in the Probe parameters.')
esaProbeDistHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this ESA Probe Distribution History entry.')
esaProbeDistHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryTime.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryTime.setDescription('Indicates the time of history bin creation.')
esaProbeDistHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 5), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeDistHistoryAction.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryAction.setDescription('Allows the Manager to clear the bin.')
esaProbeDistHistoryCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 6), ClassOfServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryCOS.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryCOS.setDescription('The Class of Service.  \n             For Release 4.1 GE206, this value is cos-not-applicable, since \n             multi COS SLA is not supported.')
esaProbeDistHistoryNumBins = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryNumBins.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryNumBins.setDescription('Number of bins over which the statistical\n             data is distributed.')
esaProbeDistHistoryLTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryLTMin.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryLTMin.setDescription('Number of sample data points which are\n             less than the minimum value specified.')
esaProbeDistHistoryGTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 12, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryGTMax.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryGTMax.setDescription('Number of sample data points which are\n             greater than the maximum value specified.')
esaProbeDistHistoryBinTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 13), )
if mibBuilder.loadTexts: esaProbeDistHistoryBinTable.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryBinTable.setDescription('A list of entries that provide historical statistical distribution\n             of ESA Probe collected data for specific BINs.')
esaProbeDistHistoryBinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 13, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeDistStatsConfigIndex"), (0, "CM-SA-MIB", "esaProbeDistHistoryDestinationIndex"), (0, "CM-SA-MIB", "esaProbeDistHistoryCOSIndex"), (0, "CM-SA-MIB", "esaProbeDistHistoryIndex"), (0, "CM-SA-MIB", "esaProbeDistHistoryBinIndex"))
if mibBuilder.loadTexts: esaProbeDistHistoryBinEntry.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryBinEntry.setDescription('A row in the esaProbeDistHistoryBinTable.')
esaProbeDistHistoryBinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryBinIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryBinIndex.setDescription('An index for each row that uniquely provides statistical\n             data for a range.')
esaProbeDistHistoryBinLower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryBinLower.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryBinLower.setDescription('The lower limit of values collected in this bin.')
esaProbeDistHistoryBinUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryBinUpper.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryBinUpper.setDescription('The upper limit of values collected in this bin.')
esaProbeDistHistoryBinNumSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 13, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeDistHistoryBinNumSamples.setStatus('current')
if mibBuilder.loadTexts: esaProbeDistHistoryBinNumSamples.setDescription('Number of sample data points which fall between\n             the lower and upper limits.')
esaProbeStatsThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 14), )
if mibBuilder.loadTexts: esaProbeStatsThresholdTable.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsThresholdTable.setDescription('A table of entries that allow manageability of ESA\n             Probe Thresholds.')
esaProbeStatsThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 14, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeStatsThresholdIndex"))
if mibBuilder.loadTexts: esaProbeStatsThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsThresholdEntry.setDescription('A conceptual row in the esaProbeStatsThresholdTable.')
esaProbeStatsThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        esaProbeStatsThresholdTable.')
esaProbeStatsThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 14, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.  Objects of the esaProbeStatsTable table are\n        monitored. Only variables that resolve to an ASN.1 primitive\n        type of INTEGER (INTEGER, Integer32, Counter32, PerfCounter64,\n        Gauge, or TimeTicks) may be sampled.')
esaProbeStatsThresholdAbsValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 14, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeStatsThresholdAbsValueLo.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsThresholdAbsValueLo.setDescription('Lower 32 bits of the absolute value of the threshold.')
esaProbeStatsThresholdAbsValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 14, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeStatsThresholdAbsValueHi.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsThresholdAbsValueHi.setDescription('Higher 32 bits of the absolute value of the threshold.')
esaProbeStatsThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 14, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esaProbeStatsThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: esaProbeStatsThresholdMonValue.setDescription('Monitored value corresponding to esaProbeStatsThresholdVariable.')
esaProbeCOSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15), )
if mibBuilder.loadTexts: esaProbeCOSConfigTable.setStatus('current')
if mibBuilder.loadTexts: esaProbeCOSConfigTable.setDescription('A list of entries corresponding to ESA Probes COS Configuration Levels.')
esaProbeCOSConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeCOSConfigIndex"))
if mibBuilder.loadTexts: esaProbeCOSConfigEntry.setStatus('current')
if mibBuilder.loadTexts: esaProbeCOSConfigEntry.setDescription('A row in the esaProbeCOSConfigTable. Entries can\n            be created in this table by management application action.')
esaProbeCOSConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeCOSConfigIndex.setDescription('An integer index value used to uniquely identify\n             SLA (Service Level Agreement) for a specific Class of Service.\n             Index 1 is associated with cos-0, index 2 with cos-1, index 3 with cos-2 and so on.')
esaProbeCOSConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 2), ClassOfServiceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigType.setStatus('current')
if mibBuilder.loadTexts: esaProbeCOSConfigType.setDescription('This is the Class of Service Type for Y.1731/SLM-SLR Probes, associated with the row.')
esaProbeCOSConfigInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 3), EsaProbePktIntervalType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigInterval.setStatus('current')
if mibBuilder.loadTexts: esaProbeCOSConfigInterval.setDescription('This is the Class of Service Y.1731/SLM-SLR packet interval type.')
esaProbeCOSConfigPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9612))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigPktSize.setStatus('current')
if mibBuilder.loadTexts: esaProbeCOSConfigPktSize.setDescription('This is the Class of Service Y.1731/SLM-SLR Packet Size.\n          This object enables specification of the TLV size for\n          Delay Measurement Measures(DMMs) as well as Synthetic Loss Measurement Frames (SLMs).')
esaProbeCOSConfigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigStorageType.setStatus('current')
if mibBuilder.loadTexts: esaProbeCOSConfigStorageType.setDescription('The type of storage configured for this entry.')
esaProbeCOSConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: esaProbeCOSConfigRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of esaProbeCOSConfigRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            esaProbeCOSConfigRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The esaProbeCOSConfigRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
esaProbeCOSConfigslmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 7), EsaProbePktIntervalType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigslmInterval.setStatus('current')
if mibBuilder.loadTexts: esaProbeCOSConfigslmInterval.setDescription('This allows specification of the interval between subsequent SLM packets.')
esaProbeCOSConfigslmPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeCOSConfigslmPktSize.setStatus('current')
if mibBuilder.loadTexts: esaProbeCOSConfigslmPktSize.setDescription('This allows specification of the SLM Packet Size.')
esaProbeCOSConfigSoamPmExtAvailFlrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeCOSConfigSoamPmExtAvailFlrThreshold.setStatus('current')
if mibBuilder.loadTexts: esaProbeCOSConfigSoamPmExtAvailFlrThreshold.setDescription('Frame loss ratio threshold for Availability (m%).')
esaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus.setStatus('current')
if mibBuilder.loadTexts: esaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus.setDescription('This is the number of loss measurement PDUs. \n             delta_t is this attribute multiplied by the \n             loss measurement message period. \n             For example, if SLM message period is \n             100ms and this attribute is 10, \n             then the delta_t is 1second.')
esaProbeCOSConfigSoamPmExtConDeltaTsForAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 15, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esaProbeCOSConfigSoamPmExtConDeltaTsForAvail.setStatus('current')
if mibBuilder.loadTexts: esaProbeCOSConfigSoamPmExtConDeltaTsForAvail.setDescription('This is the number of consecutive delta_ts used \n             in the computation of availability/unavailability (n).')
esaProbeMultiDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16), )
if mibBuilder.loadTexts: esaProbeMultiDestinationTable.setStatus('current')
if mibBuilder.loadTexts: esaProbeMultiDestinationTable.setDescription('A list of entries corresponding to ESA Probes Multi Destinations.')
esaProbeMultiDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "esaProbeIndex"), (0, "CM-SA-MIB", "esaProbeDestinationIndex"))
if mibBuilder.loadTexts: esaProbeMultiDestinationEntry.setStatus('current')
if mibBuilder.loadTexts: esaProbeMultiDestinationEntry.setDescription('A row in the esaProbeMultiDestinationTable. Entries can\n            be created in this table by management application action. Entries in this table\n            represent destinations in a point-to-multipoint ESA Probe.')
esaProbeDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestinationIndex.setStatus('current')
if mibBuilder.loadTexts: esaProbeDestinationIndex.setDescription('An integer index value used to uniquely identify\n             a destination.')
esaProbeDestinationMepType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16, 1, 2), MepDestinationType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestinationMepType.setStatus('current')
if mibBuilder.loadTexts: esaProbeDestinationMepType.setDescription('This attribute is applicable only for point-to-multipoint probes. \n            This indicates if the destination MEP is specified using the MEP ID object\n            esaProbeDestinationMepId.')
esaProbeDestinationMepMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestinationMepMacAddr.setStatus('current')
if mibBuilder.loadTexts: esaProbeDestinationMepMacAddr.setDescription("This attribute is applicable only for point-to-multipoint probes. \n            It identifies the destination MEP. This MAC address will be the \n            destination MAC address for  frames if esaProbeDestinationMepType is 'macaddress'. \n            If CC protocol is not enabled between source and destination MEP then this is the\n            only choice to identify the remote MEP.")
esaProbeDestinationMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16, 1, 4), Dot1agCfmMepIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestinationMepId.setStatus('current')
if mibBuilder.loadTexts: esaProbeDestinationMepId.setDescription("This attribute is applicable only for point-to-multipoint probes. \n            It identifies the destination MEP. The MAC\n            address of this RMEP ID from RMEP database will be the destination\n            MAC address. This value is used only if the\n            esaProbeDestinationMepType is 'mepid'. CC protocol must be\n            enabled between source and destination MEP if the RMEP ID\n            is used to identify the Remote MEP.")
esaProbeDestinationStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestinationStorageType.setStatus('current')
if mibBuilder.loadTexts: esaProbeDestinationStorageType.setDescription('The type of storage configured for this entry.')
esaProbeDestinationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esaProbeDestinationRowStatus.setStatus('current')
if mibBuilder.loadTexts: esaProbeDestinationRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of esaProbeDestinationRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            esaProbeDestinationRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The esaProbeDestinationRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
bertControlTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17), )
if mibBuilder.loadTexts: bertControlTable.setStatus('current')
if mibBuilder.loadTexts: bertControlTable.setDescription('A list of entries for the control of BERT Streams.')
bertControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "ecpaControlIndex"))
if mibBuilder.loadTexts: bertControlEntry.setStatus('current')
if mibBuilder.loadTexts: bertControlEntry.setDescription('A conceptual row in the bertControlTable.')
bertControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1, 1), Integer32())
if mibBuilder.loadTexts: bertControlIndex.setStatus('current')
if mibBuilder.loadTexts: bertControlIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this BERT Control.')
bertControlSourceEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1, 2), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertControlSourceEntity.setStatus('current')
if mibBuilder.loadTexts: bertControlSourceEntity.setDescription('Pointer to the entity on which the BERT \n             will be started within a card.')
bertControlTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1, 3), BerTestMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertControlTestMode.setStatus('current')
if mibBuilder.loadTexts: bertControlTestMode.setDescription('The mode of BERT to be performed.')
bertControlDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 259200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertControlDuration.setStatus('current')
if mibBuilder.loadTexts: bertControlDuration.setDescription('This object enables specification of the time in seconds\n          for BERT. BERT will be stopped\n          after the specified time interval is exhausted.')
bertControlStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertControlStream.setStatus('current')
if mibBuilder.loadTexts: bertControlStream.setDescription('This object specifies which stream should be included in the\n          BERT execution. Value of 0 indicates that no streams is selected\n          by bertControlStream. Non 0 value indicates the \n          selected BERT stream.')
bertControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1, 6), BertControlAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertControlAction.setStatus('current')
if mibBuilder.loadTexts: bertControlAction.setDescription("This object enables starting/stopping of traffic generation\n          as well as resetting of monitored streams. This object may\n          not be specified at configuration creation time - in this\n          case it will take the value of `none'.  This allows manager\n          to explicitly control the start and stop of traffic\n          generation/monitoring activity.\n          Value of `stop' is invalid if the activity is specified but\n          not started. Value of `start' is valid during creation time,\n          as well as when activity is already stopped.  Specification\n          of `reset'  resets the specified streams to default values,\n          as well as clears the control specification. Get on this\n          variable gives the most recent SNMP set specification.")
bertControlTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 17, 1, 7), BerTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertControlTestStatus.setStatus('current')
if mibBuilder.loadTexts: bertControlTestStatus.setDescription("This object reflects the current status of test set configuration\n          entry. Upon creation, the status has a value of `initial'; the\n          status changes to `in-progress' upon ecpaControlAction\n          indicating `start'; the status changes to `completed' upon\n          ecpaControlAction indicating stop, as well as when\n          the specified test generation completes\n          autonomously upon completion of number of frames or\n          completion of specified time interval.")
bertConfigStreamTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18), )
if mibBuilder.loadTexts: bertConfigStreamTable.setStatus('current')
if mibBuilder.loadTexts: bertConfigStreamTable.setDescription('A list of entries for the configuration of BERT Config Stream Specifications.')
bertConfigStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1), ).setIndexNames((0, "CM-SA-MIB", "bertConfigStreamIndex"))
if mibBuilder.loadTexts: bertConfigStreamEntry.setStatus('current')
if mibBuilder.loadTexts: bertConfigStreamEntry.setDescription('A conceptual row in the bertConfigStreamTable.')
bertConfigStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 1), Integer32())
if mibBuilder.loadTexts: bertConfigStreamIndex.setStatus('current')
if mibBuilder.loadTexts: bertConfigStreamIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this BERT configStream.')
bertConfigStreamName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertConfigStreamName.setStatus('current')
if mibBuilder.loadTexts: bertConfigStreamName.setDescription('Symbolic Stream Name that can be associated with an BERT Config stream.')
bertConfigStreamTxPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 3), BertPattern()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertConfigStreamTxPattern.setStatus('current')
if mibBuilder.loadTexts: bertConfigStreamTxPattern.setDescription('Allows specification of the Tx pattern of this BERT Config stream.')
bertConfigStreamErrInjectEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertConfigStreamErrInjectEnabled.setStatus('current')
if mibBuilder.loadTexts: bertConfigStreamErrInjectEnabled.setDescription('This object allows specification of whether Bit Error be injected.')
bertConfigStreamErrInjectRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 5), BitErrRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertConfigStreamErrInjectRate.setStatus('current')
if mibBuilder.loadTexts: bertConfigStreamErrInjectRate.setDescription('Bit Error Rate, applicable when Error Injection is enabled.')
bertConfigStreamErrInjectRateMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertConfigStreamErrInjectRateMultiplier.setStatus('current')
if mibBuilder.loadTexts: bertConfigStreamErrInjectRateMultiplier.setDescription('BER value with 0.1 Step, in this release is fixed 10, \n         only applicable when Error Injection is enabled.')
bertConfigStreamUserPatternLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 7), BertUserPatternLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertConfigStreamUserPatternLength.setStatus('current')
if mibBuilder.loadTexts: bertConfigStreamUserPatternLength.setDescription('User defined testing pattern length.')
bertConfigStreamUserPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 18, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertConfigStreamUserPattern.setStatus('current')
if mibBuilder.loadTexts: bertConfigStreamUserPattern.setDescription('User defined testing pattern in a HEX format display string, \n            applicable when test pattern is user defined.')
bertTestStreamTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19), )
if mibBuilder.loadTexts: bertTestStreamTable.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamTable.setDescription('A list of entries containing results of a previous test.')
bertTestStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-SA-MIB", "bertControlIndex"), (0, "CM-SA-MIB", "bertTestStreamIndex"))
if mibBuilder.loadTexts: bertTestStreamEntry.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamEntry.setDescription('A conceptual row in the bertTestStreamTable. Entries in this\n            table show results of the current BERT.')
bertTestStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 1), Integer32())
if mibBuilder.loadTexts: bertTestStreamIndex.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamIndex.setDescription('An integer index value corresponding to the stream index \n             for which the BERT was initiated.')
bertTestStreamName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertTestStreamName.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamName.setDescription('Symbolic Stream Name that can be associated with an BERT stream.')
bertTestStreamTxPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 3), BertPattern()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamTxPattern.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamTxPattern.setDescription('Allows specification of the Tx pattern of this BERT Test stream.')
bertTestStreamErrInjectEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamErrInjectEnabled.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamErrInjectEnabled.setDescription('This object allows specification of whether Bit Error be injected.')
bertTestStreamErrInjectRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 5), BitErrRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamErrInjectRate.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamErrInjectRate.setDescription('Bit Error Rate, applicable when Error Injection is enabled.')
bertTestStreamErrInjectRateMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamErrInjectRateMultiplier.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamErrInjectRateMultiplier.setDescription('BER value with 0.1 Step, in this release is fixed 10, \n         only applicable when Error Injection is enabled.')
bertTestStreamUserPatternLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 7), BertUserPatternLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamUserPatternLength.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamUserPatternLength.setDescription('User defined testing pattern length.')
bertTestStreamUserPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamUserPattern.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamUserPattern.setDescription('User defined testing pattern in a HEX format display string, \n            applicable when test pattern is user defined.')
bertTestStreamMonStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonStartTime.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonStartTime.setDescription('The start time of the BERT for this stream.')
bertTestStreamMonEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonEndTime.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonEndTime.setDescription('The end time of the BERT for this stream.')
bertTestStreamMonElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonElapsedTime.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonElapsedTime.setDescription('The elapsed time of BERT for this stream in seconds.')
bertTestStreamMonSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 12), BertSyncState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonSyncState.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonSyncState.setDescription('The Sync State of the BERT.')
bertTestStreamMonRxPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 13), BertPattern()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxPattern.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonRxPattern.setDescription('Allows specification of the Rx pattern of this BERT Test stream.')
bertTestStreamMonSyncCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonSyncCounts.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonSyncCounts.setDescription('Allows specification of the Sync counts from test start.')
bertTestStreamMonRxBitErrsSinceStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxBitErrsSinceStart.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonRxBitErrsSinceStart.setDescription('Allows specification of the Received Errors since test start.')
bertTestStreamMonRxBitsSinceStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxBitsSinceStart.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonRxBitsSinceStart.setDescription('Allows specification of the Received Bits since test start.')
bertTestStreamMonRxESsSinceStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxESsSinceStart.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonRxESsSinceStart.setDescription('Allows specification of the Error seconds since test start.')
bertTestStreamMonRxErrRateSinceStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 18), BitErrRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxErrRateSinceStart.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonRxErrRateSinceStart.setDescription('Allows specification of the Received BER Unit since test start.')
bertTestStreamMonRxErrRateMultiplierSinceStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxErrRateMultiplierSinceStart.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonRxErrRateMultiplierSinceStart.setDescription('Allows specification of the Received BER value with 0.1 Step since test start.')
bertTestStreamMonRxBitErrsSinceLastSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxBitErrsSinceLastSync.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonRxBitErrsSinceLastSync.setDescription('Allows specification of the Received Errors since last sync.')
bertTestStreamMonRxBitsSinceLastSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxBitsSinceLastSync.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonRxBitsSinceLastSync.setDescription('Allows specification of the Received Bits since last sync.')
bertTestStreamMonRxESsSinceLastSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxESsSinceLastSync.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonRxESsSinceLastSync.setDescription('Allows specification of the Received Error seconds since last sync.')
bertTestStreamMonRxErrRateSinceLastSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 23), BitErrRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxErrRateSinceLastSync.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonRxErrRateSinceLastSync.setDescription('Allows specification of the Received BER Unit since last sync.')
bertTestStreamMonRxErrRateMultiplierSinceLastSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonRxErrRateMultiplierSinceLastSync.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonRxErrRateMultiplierSinceLastSync.setDescription('Allows specification of the Received BER value with 0.1 Step since last sync.')
bertTestStreamConfigChangedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamConfigChangedFlag.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamConfigChangedFlag.setDescription('This object provides information on whether the associated bertConfigStream is changed.')
bertTestStreamMonOOSSsSinceStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 19, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestStreamMonOOSSsSinceStart.setStatus('current')
if mibBuilder.loadTexts: bertTestStreamMonOOSSsSinceStart.setDescription('This object means the Out of Sync Seconds since start.')
f3EsaProbeCOSConfigSoamPmExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 20), )
if mibBuilder.loadTexts: f3EsaProbeCOSConfigSoamPmExtTable.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeCOSConfigSoamPmExtTable.setDescription('A list of entries corresponding to ESA Probe Cos Configurations MEF 35.')
f3EsaProbeCOSConfigSoamPmExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 20, 1), )
esaProbeCOSConfigEntry.registerAugmentions(("CM-SA-MIB", "f3EsaProbeCOSConfigSoamPmExtEntry"))
f3EsaProbeCOSConfigSoamPmExtEntry.setIndexNames(*esaProbeCOSConfigEntry.getIndexNames())
if mibBuilder.loadTexts: f3EsaProbeCOSConfigSoamPmExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeCOSConfigSoamPmExtEntry.setDescription('A row in the esaProbeCOSConfigTable MEF 35. Entries can\n             be created in this table by management application action.')
f3EsaProbeCOSConfigSoamPmExtAvailFlrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EsaProbeCOSConfigSoamPmExtAvailFlrThreshold.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeCOSConfigSoamPmExtAvailFlrThreshold.setDescription('Frame loss ratio threshold for Availability (m%).')
f3EsaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EsaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus.setDescription('This is the number of loss measurement PDUs. \n             delta_t is this attribute multiplied by the \n             loss measurement message period. \n             For example, if SLM message period is \n             100ms and this attribute is 10, \n             then the delta_t is 1second.')
f3EsaProbeCOSConfigSoamPmExtConDeltaTsForAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 20, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EsaProbeCOSConfigSoamPmExtConDeltaTsForAvail.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeCOSConfigSoamPmExtConDeltaTsForAvail.setDescription('This is the number of consecutive delta_ts used \n             in the computation of availability/unavailability (n).')
f3EsaProbeStatsSoamPmExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21), )
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtTable.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtTable.setDescription('A collection of ESA Probe MEF 35 related statistics kept for\n             a particular ESA Probe entity. These reflect the\n             current data.')
f3EsaProbeStatsSoamPmExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1), )
esaProbeStatsEntry.registerAugmentions(("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtEntry"))
f3EsaProbeStatsSoamPmExtEntry.setIndexNames(*esaProbeStatsEntry.getIndexNames())
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtEntry.setDescription('A conceptual row in the f3EsaProbeStatsSoamPmExtTable.')
f3EsaProbeStatsSoamPmExtMinP2RFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 1), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMinP2RFlr.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMinP2RFlr.setDescription('This is the minimum  probe to reflector FLR (m%).')
f3EsaProbeStatsSoamPmExtMaxP2RFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 2), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxP2RFlr.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxP2RFlr.setDescription('This is the maximum  probe to reflector FLR (m%).')
f3EsaProbeStatsSoamPmExtAvgP2RFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 3), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgP2RFlr.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgP2RFlr.setDescription('This is the average  probe to reflector FLR (m%).')
f3EsaProbeStatsSoamPmExtMinR2PFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMinR2PFlr.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMinR2PFlr.setDescription('This is the minimum  reflector to probe FLR (m%).')
f3EsaProbeStatsSoamPmExtMaxR2PFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxR2PFlr.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxR2PFlr.setDescription('This is the maximum  reflector to probe FLR (m%).')
f3EsaProbeStatsSoamPmExtAvgR2PFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgR2PFlr.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgR2PFlr.setDescription('This is the average  reflector to probe FLR (m%).')
f3EsaProbeStatsSoamPmExtP2rSeverelyErroredDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtP2rSeverelyErroredDeltaTs.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtP2rSeverelyErroredDeltaTs.setDescription('This is the number of delta_ts in which the FLR is greater \n         than availability threshold in the probe to reflector direction.')
f3EsaProbeStatsSoamPmExtR2PSeverelyErroredDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtR2PSeverelyErroredDeltaTs.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtR2PSeverelyErroredDeltaTs.setDescription('This is the number of delta_ts in which the FLR is greater \n         than availability threshold in the reflector to probe direction.')
f3EsaProbeStatsSoamPmExtP2rAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtP2rAvailableTime.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtP2rAvailableTime.setDescription("This is the probe to reflector available delta_ts which begins to increment \n         when FLR is less than or equal to availability threshold for 'n' consecutive delta_ts.\n         It is incremented until FLR is greater than availability threshold for \n         'n' consecutive delta_ts.")
f3EsaProbeStatsSoamPmExtR2PAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtR2PAvailableTime.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtR2PAvailableTime.setDescription("This is the reflector to probe available delta_ts which begins to increment \n         when FLR is less than or equal to availability threshold for 'n' consecutive delta_ts.\n         It is incremented until FLR is greater than availability threshold for \n         'n' consecutive delta_ts.")
f3EsaProbeStatsSoamPmExtP2rUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtP2rUnavailableTime.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtP2rUnavailableTime.setDescription("This is the probe to reflector unavailable delta_ts which begins to increment \n         when FLR is greater than availability threshold for 'n' consecutive delta_ts. \n         It is incremented until FLR is less than or equal to availability threshold for \n         'n' consecutive delta_ts.")
f3EsaProbeStatsSoamPmExtR2PUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtR2PUnavailableTime.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtR2PUnavailableTime.setDescription("This is the reflector to probe unavailable delta_ts which begins to increment \n         when FLR is greater than availability threshold for 'n' consecutive delta_ts. \n         It is incremented until FLR is less than or equal to availability threshold for \n         'n' consecutive delta_ts.")
f3EsaProbeStatsSoamPmExtMinAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMinAbsRTJitter.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMinAbsRTJitter.setDescription('Minimum absolute round-trip (two-way) jitter in a measurement interval (microseconds).')
f3EsaProbeStatsSoamPmExtMaxAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxAbsRTJitter.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxAbsRTJitter.setDescription('Maximum absolute round-trip (two-way) jitter in a measurement interval (microseconds).')
f3EsaProbeStatsSoamPmExtAvgAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgAbsRTJitter.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgAbsRTJitter.setDescription('Average absolute round-trip (two-way) jitter in a measurement interval (microseconds).')
f3EsaProbeStatsSoamPmExtNumAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtNumAbsRTJitter.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtNumAbsRTJitter.setDescription('Number of absolute round-trip (two-way) jitter samples (microseconds).')
f3EsaProbeStatsSoamPmExtSumAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumAbsRTJitter.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumAbsRTJitter.setDescription('Sum of absolute round-trip (two-way) jitter samples (microseconds).')
f3EsaProbeStatsSoamPmExtSumOfSqAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumOfSqAbsRTJitter.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumOfSqAbsRTJitter.setDescription('Sum of squares of absolute round-trip (two-way) jitter samples (microseconds^2).')
f3EsaProbeStatsSoamPmExtMaxP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxP2RFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxP2RFDR.setDescription('Maximum P2R (Forward) FDR in a measurement interval (microseconds).')
f3EsaProbeStatsSoamPmExtAvgP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgP2RFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgP2RFDR.setDescription('Average P2R (Forward) FDR in a measurement interval (microseconds).')
f3EsaProbeStatsSoamPmExtNumP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtNumP2RFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtNumP2RFDR.setDescription('Number of P2R (Forward) FDR samples (microseconds).')
f3EsaProbeStatsSoamPmExtSumP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumP2RFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumP2RFDR.setDescription('Sum of P2R (Forward) FDR samples (microseconds).')
f3EsaProbeStatsSoamPmExtSumOfSqP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumOfSqP2RFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumOfSqP2RFDR.setDescription('Sum of squares of P2R (Forward) FDR samples (microseconds^2).')
f3EsaProbeStatsSoamPmExtMaxR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxR2PFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxR2PFDR.setDescription('Maximum R2P (Backward) FDR in a measurement interval (microseconds).')
f3EsaProbeStatsSoamPmExtAvgR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgR2PFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgR2PFDR.setDescription('Average R2P (Backward) FDR in a measurement interval (microseconds).')
f3EsaProbeStatsSoamPmExtNumR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtNumR2PFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtNumR2PFDR.setDescription('Number of R2P (Backward) FDR samples (microseconds).')
f3EsaProbeStatsSoamPmExtSumR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumR2PFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumR2PFDR.setDescription('Sum of R2P (Backward) FDR samples (microseconds).')
f3EsaProbeStatsSoamPmExtSumOfSqR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumOfSqR2PFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumOfSqR2PFDR.setDescription('Sum of squares of R2P (Backward) FDR samples (microseconds^2).')
f3EsaProbeStatsSoamPmExtMaxRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxRTFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtMaxRTFDR.setDescription('Maximum round-trip (two-way) FDR in a measurement interval (microseconds).')
f3EsaProbeStatsSoamPmExtAvgRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgRTFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtAvgRTFDR.setDescription('Average round-trip (two-way) FDR in a measurement interval (microseconds).')
f3EsaProbeStatsSoamPmExtNumRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtNumRTFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtNumRTFDR.setDescription('Number of round-trip (two-way) FDR samples (microseconds).')
f3EsaProbeStatsSoamPmExtSumRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumRTFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumRTFDR.setDescription('Sum of round-trip (two-way) FDR samples (microseconds).')
f3EsaProbeStatsSoamPmExtSumOfSqRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumOfSqRTFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtSumOfSqRTFDR.setDescription('Sum of squares of round-trip (two-way) FDR samples (microseconds^2).')
f3EsaProbeStatsSoamPmExtP2rAvailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 34), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtP2rAvailableDeltaTs.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtP2rAvailableDeltaTs.setDescription("Probe to reflector available delta_ts which begins to increment when FLR is less than or equal to availability threshold for 'n' consecutive delta_ts.")
f3EsaProbeStatsSoamPmExtR2pAvailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtR2pAvailableDeltaTs.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtR2pAvailableDeltaTs.setDescription("Reflector to probe available delta_ts which begins to increment when FLR is less than or equal to availability threshold for 'n' consecutive delta_ts.")
f3EsaProbeStatsSoamPmExtP2rUnavailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtP2rUnavailableDeltaTs.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtP2rUnavailableDeltaTs.setDescription("Probe to reflector unavailable delta_ts which begins to increment when FLR is greater than availability threshold for 'n' consecutive delta_ts.")
f3EsaProbeStatsSoamPmExtR2pUnavailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtR2pUnavailableDeltaTs.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtR2pUnavailableDeltaTs.setDescription("Reflector to probe unavailable delta_ts which begins to increment when FLR is greater than availability threshold for 'n' consecutive delta_ts.")
f3EsaProbeStatsSoamPmExtElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 21, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtElapsedTime.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeStatsSoamPmExtElapsedTime.setDescription('The elapsed time (monotonic time) for the interval which could be less or more than measurement interval based on which the Time of Day was moved forward or backwards respectively (miliseconds).')
f3EsaProbeHistorySoamPmExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22), )
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtTable.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtTable.setDescription('A collection of ESA Probe MEF 35 related history kept for\n             a particular ESA Probe entity. These reflect the\n             history data.')
f3EsaProbeHistorySoamPmExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1), )
esaProbeHistoryEntry.registerAugmentions(("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtEntry"))
f3EsaProbeHistorySoamPmExtEntry.setIndexNames(*esaProbeHistoryEntry.getIndexNames())
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtEntry.setDescription('A conceptual row in the f3EsaProbeHistorySoamPmExtTable.')
f3EsaProbeHistorySoamPmExtMinP2RFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 1), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMinP2RFlr.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMinP2RFlr.setDescription('This is the minimum  probe to reflector FLR.')
f3EsaProbeHistorySoamPmExtMaxP2RFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 2), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxP2RFlr.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxP2RFlr.setDescription('This is the maximum  probe to reflector FLR.')
f3EsaProbeHistorySoamPmExtAvgP2RFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 3), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgP2RFlr.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgP2RFlr.setDescription('This is the average  probe to reflector FLR.')
f3EsaProbeHistorySoamPmExtMinR2PFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMinR2PFlr.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMinR2PFlr.setDescription('This is the minimum  reflector to probe FLR.')
f3EsaProbeHistorySoamPmExtMaxR2PFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxR2PFlr.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxR2PFlr.setDescription('This is the maximum  reflector to probe FLR.')
f3EsaProbeHistorySoamPmExtAvgR2PFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgR2PFlr.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgR2PFlr.setDescription('This is the average  reflector to probe FLR.')
f3EsaProbeHistorySoamPmExtP2rSeverelyErroredDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtP2rSeverelyErroredDeltaTs.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtP2rSeverelyErroredDeltaTs.setDescription('This is the number of delta_ts in which the FLR is greater \n         than availability threshold in the probe to reflector direction.')
f3EsaProbeHistorySoamPmExtR2PSeverelyErroredDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtR2PSeverelyErroredDeltaTs.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtR2PSeverelyErroredDeltaTs.setDescription('This is the number of delta_ts in which the FLR is greater \n         than availability threshold in the reflector to probe direction.')
f3EsaProbeHistorySoamPmExtP2rAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtP2rAvailableTime.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtP2rAvailableTime.setDescription("This is the probe to reflector available delta_ts which begins to increment \n         when FLR is less than or equal to availability threshold for 'n' consecutive delta_ts.\n         It is incremented until FLR is greater than availability threshold for \n         'n' consecutive delta_ts.")
f3EsaProbeHistorySoamPmExtR2PAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtR2PAvailableTime.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtR2PAvailableTime.setDescription("This is the reflector to probe available delta_ts which begins to increment \n         when FLR is less than or equal to availability threshold for 'n' consecutive delta_ts.\n         It is incremented until FLR is greater than availability threshold for \n         'n' consecutive delta_ts.")
f3EsaProbeHistorySoamPmExtP2rUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtP2rUnavailableTime.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtP2rUnavailableTime.setDescription("This is the probe to reflector unavailable delta_ts which begins to increment \n         when FLR is greater than availability threshold for 'n' consecutive delta_ts. \n         It is incremented until FLR is less than or equal to availability threshold for \n         'n' consecutive delta_ts.")
f3EsaProbeHistorySoamPmExtR2PUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtR2PUnavailableTime.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtR2PUnavailableTime.setDescription("This is the reflector to probe unavailable delta_ts which begins to increment \n         when FLR is greater than availability threshold for 'n' consecutive delta_ts. \n         It is incremented until FLR is less than or equal to availability threshold for \n         'n' consecutive delta_ts.")
f3EsaProbeHistorySoamPmExtMinAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMinAbsRTJitter.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMinAbsRTJitter.setDescription('Minimum absolute round-trip (two-way) jitter in a measurement interval.')
f3EsaProbeHistorySoamPmExtMaxAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxAbsRTJitter.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxAbsRTJitter.setDescription('Maximum absolute round-trip (two-way) jitter in a measurement interval.')
f3EsaProbeHistorySoamPmExtAvgAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgAbsRTJitter.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgAbsRTJitter.setDescription('Average absolute round-trip (two-way) jitter in a measurement interval.')
f3EsaProbeHistorySoamPmExtNumAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtNumAbsRTJitter.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtNumAbsRTJitter.setDescription('Number of absolute round-trip (two-way) jitter samples.')
f3EsaProbeHistorySoamPmExtSumAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumAbsRTJitter.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumAbsRTJitter.setDescription('Sum of absolute round-trip (two-way) jitter samples.')
f3EsaProbeHistorySoamPmExtSumOfSqAbsRTJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumOfSqAbsRTJitter.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumOfSqAbsRTJitter.setDescription('Sum of squares of absolute round-trip (two-way) jitter samples.')
f3EsaProbeHistorySoamPmExtMaxP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxP2RFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxP2RFDR.setDescription('Maximum P2R (Forward) FDR in a measurement interval.')
f3EsaProbeHistorySoamPmExtAvgP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgP2RFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgP2RFDR.setDescription('Average P2R (Forward) FDR in a measurement interval.')
f3EsaProbeHistorySoamPmExtNumP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtNumP2RFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtNumP2RFDR.setDescription('Number of P2R (Forward) FDR samples.')
f3EsaProbeHistorySoamPmExtSumP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumP2RFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumP2RFDR.setDescription('Sum of P2R (Forward) FDR samples.')
f3EsaProbeHistorySoamPmExtSumOfSqP2RFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumOfSqP2RFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumOfSqP2RFDR.setDescription('Sum of squares of P2R (Forward) FDR samples.')
f3EsaProbeHistorySoamPmExtMaxR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxR2PFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxR2PFDR.setDescription('Maximum R2P (Backward) FDR in a measurement interval.')
f3EsaProbeHistorySoamPmExtAvgR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgR2PFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgR2PFDR.setDescription('Average R2P (Backward) FDR in a measurement interval.')
f3EsaProbeHistorySoamPmExtNumR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtNumR2PFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtNumR2PFDR.setDescription('Number of R2P (Backward) FDR samples.')
f3EsaProbeHistorySoamPmExtSumR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumR2PFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumR2PFDR.setDescription('Sum of R2P (Backward) FDR samples.')
f3EsaProbeHistorySoamPmExtSumOfSqR2PFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumOfSqR2PFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumOfSqR2PFDR.setDescription('Sum of squares of R2P (Backward) FDR samples.')
f3EsaProbeHistorySoamPmExtMaxRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxRTFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtMaxRTFDR.setDescription('Maximum round-trip (two-way) FDR in a measurement interval.')
f3EsaProbeHistorySoamPmExtAvgRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgRTFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtAvgRTFDR.setDescription('Average round-trip (two-way) FDR in a measurement interval.')
f3EsaProbeHistorySoamPmExtNumRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtNumRTFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtNumRTFDR.setDescription('Number of round-trip (two-way) FDR samples.')
f3EsaProbeHistorySoamPmExtSumRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumRTFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumRTFDR.setDescription('Sum of round-trip (two-way) FDR samples.')
f3EsaProbeHistorySoamPmExtSumOfSqRTFDR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumOfSqRTFDR.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtSumOfSqRTFDR.setDescription('Sum of squares of round-trip (two-way) FDR samples.')
f3EsaProbeHistorySoamPmExtP2rAvailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 34), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtP2rAvailableDeltaTs.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtP2rAvailableDeltaTs.setDescription("Probe to reflector available delta_ts which begins to increment when FLR is less than or equal to availability threshold for 'n' consecutive delta_ts.")
f3EsaProbeHistorySoamPmExtR2pAvailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtR2pAvailableDeltaTs.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtR2pAvailableDeltaTs.setDescription("Reflector to probe available delta_ts which begins to increment when FLR is less than or equal to availability threshold for 'n' consecutive delta_ts.")
f3EsaProbeHistorySoamPmExtP2rUnavailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtP2rUnavailableDeltaTs.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtP2rUnavailableDeltaTs.setDescription("Probe to reflector unavailable delta_ts which begins to increment when FLR is greater than availability threshold for 'n' consecutive delta_ts.")
f3EsaProbeHistorySoamPmExtR2pUnavailableDeltaTs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtR2pUnavailableDeltaTs.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtR2pUnavailableDeltaTs.setDescription("Reflector to probe unavailable delta_ts which begins to increment when FLR is greater than availability threshold for 'n' consecutive delta_ts.")
f3EsaProbeHistorySoamPmExtElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 1, 22, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtElapsedTime.setStatus('current')
if mibBuilder.loadTexts: f3EsaProbeHistorySoamPmExtElapsedTime.setDescription('The elapsed time (monotonic time) for the interval which could be less or more than measurement interval based on which the Time of Day was moved forward or backwards respectively (miliseconds).')
cmOperateLoopbackTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 2, 1))
if mibBuilder.loadTexts: cmOperateLoopbackTrap.setStatus('current')
if mibBuilder.loadTexts: cmOperateLoopbackTrap.setDescription('This is the Operate Loopback Notification sent by the agent. \n         The actual attribute value is sent by the agent in the form of\n         a varbind list, as additional objects, as per SMIv2 (RFC2578, Section 8.1).')
cmReleaseLoopbackTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 2, 2))
if mibBuilder.loadTexts: cmReleaseLoopbackTrap.setStatus('current')
if mibBuilder.loadTexts: cmReleaseLoopbackTrap.setDescription('This is the Release Loopback Notification sent by the agent. \n         The actual attribute value is sent by the agent in the form of\n         a varbind list, as additional objects, as per SMIv2 (RFC2578, Section 8.1).')
esaProbeThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 2, 3)).setObjects(("CM-SA-MIB", "esaProbeStatsThresholdIndex"), ("CM-SA-MIB", "esaProbeStatsThresholdVariable"), ("CM-SA-MIB", "esaProbeStatsThresholdAbsValueLo"), ("CM-SA-MIB", "esaProbeStatsThresholdAbsValueHi"), ("CM-SA-MIB", "esaProbeStatsThresholdMonValue"))
if mibBuilder.loadTexts: esaProbeThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: esaProbeThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on ESA Probe is crossed.')
cmServAssuranceCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 1))
cmServAssuranceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2))
cmServAssuranceCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 1, 1)).setObjects(("CM-SA-MIB", "cmServAssuranceObjectGroup"), ("CM-SA-MIB", "cmServAssuranceNotifGroup"), ("CM-SA-MIB", "cmEcpaGroup"), ("CM-SA-MIB", "cmEsaGroup"), ("CM-SA-MIB", "cmServAssuranceGenNotifGroup"), ("CM-SA-MIB", "cmServAssuranceEsaNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmServAssuranceCompliance = cmServAssuranceCompliance.setStatus('current')
if mibBuilder.loadTexts: cmServAssuranceCompliance.setDescription('Describes the requirements for conformance to the CM ServAssurance\n             group.')
cmServAssuranceObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2, 1))
for _cmServAssuranceObjectGroup_obj in [[("CM-SA-MIB", "ecpaControlIndex"), ("CM-SA-MIB", "ecpaControlSourcePort"), ("CM-SA-MIB", "ecpaControlTestType"), ("CM-SA-MIB", "ecpaControlNumFrames"), ("CM-SA-MIB", "ecpaControlDuration"), ("CM-SA-MIB", "ecpaControlInjectorDirection"), ("CM-SA-MIB", "ecpaControlMonitorDirection"), ("CM-SA-MIB", "ecpaControlStream1"), ("CM-SA-MIB", "ecpaControlStream2"), ("CM-SA-MIB", "ecpaControlStream3"), ("CM-SA-MIB", "ecpaControlAction"), ("CM-SA-MIB", "ecpaControlTestStatus"), ("CM-SA-MIB", "ecpaControlEcpaType"), ("CM-SA-MIB", "ecpaControlMonitorPortType"), ("CM-SA-MIB", "ecpaConfigStreamIndex"), ("CM-SA-MIB", "ecpaConfigStreamName"), ("CM-SA-MIB", "ecpaConfigStreamFrameSize"), ("CM-SA-MIB", "ecpaConfigStreamRate"), ("CM-SA-MIB", "ecpaConfigStreamPayloadType"), ("CM-SA-MIB", "ecpaConfigStreamSignature"), ("CM-SA-MIB", "ecpaConfigStreamDestinationMAC"), ("CM-SA-MIB", "ecpaConfigStreamSourceMAC"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanEnabled"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanId"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanPrio"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanEtherType"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanEnabled"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanId"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanPrio"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanEtherType"), ("CM-SA-MIB", "ecpaConfigStreamIpVersion"), ("CM-SA-MIB", "ecpaConfigStreamIpV4Address"), ("CM-SA-MIB", "ecpaConfigStreamIpV6Address"), ("CM-SA-MIB", "ecpaConfigStreamPrioMapMode"), ("CM-SA-MIB", "ecpaConfigStreamPrioVal"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2Enabled"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2Id"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2Prio"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2EtherType"), ("CM-SA-MIB", "ecpaConfigStreamDestIpV4Address"), ("CM-SA-MIB", "ecpaConfigStreamDestIpV6Address"), ("CM-SA-MIB", "ecpaConfigStreamUsePortSourceMAC"), ("CM-SA-MIB", "ecpaConfigStreamRateHi"), ("CM-SA-MIB", "ecpaConfigStreamUdpControl"), ("CM-SA-MIB", "ecpaConfigStreamUdpSrcPort"), ("CM-SA-MIB", "ecpaConfigStreamUdpDstPort"), ("CM-SA-MIB", "ecpaTestStreamIndex"), ("CM-SA-MIB", "ecpaTestStreamSourcePort"), ("CM-SA-MIB", "ecpaTestStreamName"), ("CM-SA-MIB", "ecpaTestStreamFrameSize"), ("CM-SA-MIB", "ecpaTestStreamRate"), ("CM-SA-MIB", "ecpaTestStreamPayloadType"), ("CM-SA-MIB", "ecpaTestStreamSignature"), ("CM-SA-MIB", "ecpaTestStreamDestinationMAC"), ("CM-SA-MIB", "ecpaTestStreamSourceMAC"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanEnabled"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanId"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanPrio"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanEtherType"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanEnabled"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanId"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanPrio"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanEtherType"), ("CM-SA-MIB", "ecpaTestStreamIpVersion"), ("CM-SA-MIB", "ecpaTestStreamIpV4Address"), ("CM-SA-MIB", "ecpaTestStreamIpV6Address"), ("CM-SA-MIB", "ecpaTestStreamPrioMapMode"), ("CM-SA-MIB", "ecpaTestStreamPrioVal"), ("CM-SA-MIB", "ecpaTestStreamMonStartTime"), ("CM-SA-MIB", "ecpaTestStreamMonEndTime"), ("CM-SA-MIB", "ecpaTestStreamMonElapsedTime"), ("CM-SA-MIB", "ecpaTestStreamMonTxFrames"), ("CM-SA-MIB", "ecpaTestStreamMonRxFrames"), ("CM-SA-MIB", "ecpaTestStreamMonRxPercentSuccess"), ("CM-SA-MIB", "ecpaTestStreamMonRxOutOfSeqErrs"), ("CM-SA-MIB", "ecpaTestStreamMonRxSeqGaps"), ("CM-SA-MIB", "ecpaTestStreamMonRxNonEcpaFrames"), ("CM-SA-MIB", "ecpaTestStreamMonRxMinDelay"), ("CM-SA-MIB", "ecpaTestStreamMonRxMaxDelay"), ("CM-SA-MIB", "ecpaTestStreamMonRxAvgDelay"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrameSize"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame1Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame2Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame3Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame4Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame5Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame6Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame7Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame8Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame9Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame10Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRxBitRate"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2Enabled"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2Id"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2Prio"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2EtherType"), ("CM-SA-MIB", "ecpaTestStreamDestIpV4Address"), ("CM-SA-MIB", "ecpaTestStreamDestIpV6Address"), ("CM-SA-MIB", "ecpaTestStreamConfigChanged"), ("CM-SA-MIB", "ecpaTestStreamRateHi"), ("CM-SA-MIB", "ecpaTestStreamUdpControl"), ("CM-SA-MIB", "ecpaTestStreamUdpSrcPort"), ("CM-SA-MIB", "ecpaTestStreamUdpDstPort"), ("CM-SA-MIB", "esaProbeIndex"), ("CM-SA-MIB", "esaProbeName"), ("CM-SA-MIB", "esaProbeSourcePort"), ("CM-SA-MIB", "esaProbeAssocSchedGroup"), ("CM-SA-MIB", "esaProbeDirection"), ("CM-SA-MIB", "esaProbeProtocol"), ("CM-SA-MIB", "esaProbeSrcIpAddress"), ("CM-SA-MIB", "esaProbeSrcSubnetMask"), ("CM-SA-MIB", "esaProbeDestIpAddress"), ("CM-SA-MIB", "esaProbeSrcMep"), ("CM-SA-MIB", "esaProbeDestMepType"), ("CM-SA-MIB", "esaProbeDestMepMacAddr"), ("CM-SA-MIB", "esaProbeDestMepId"), ("CM-SA-MIB", "esaProbeVlanTagEnabled"), ("CM-SA-MIB", "esaProbeVlanTagEtherType"), ("CM-SA-MIB", "esaProbeVlanId"), ("CM-SA-MIB", "esaProbeVlanPrio"), ("CM-SA-MIB", "esaProbeInnerVlanTagEnabled"), ("CM-SA-MIB", "esaProbeInnerVlanTagEtherType"), ("CM-SA-MIB", "esaProbeInnerVlanId"), ("CM-SA-MIB", "esaProbeInnerVlanPrio"), ("CM-SA-MIB", "esaProbeIpPrioMapMode"), ("CM-SA-MIB", "esaProbeIpPriority"), ("CM-SA-MIB", "esaProbePktsPerSample"), ("CM-SA-MIB", "esaProbePktSize"), ("CM-SA-MIB", "esaProbeInterPktGap"), ("CM-SA-MIB", "esaProbePktDeadInterval"), ("CM-SA-MIB", "esaProbeResponseTimeout"), ("CM-SA-MIB", "esaProbeY1731DmmPktSize"), ("CM-SA-MIB", "esaProbeY1731LmmInterval"), ("CM-SA-MIB", "esaProbeY1731DmmInterval"), ("CM-SA-MIB", "esaProbeHistoryBins"), ("CM-SA-MIB", "esaProbeHistoryInterval"), ("CM-SA-MIB", "esaProbeDistHistoryBins"), ("CM-SA-MIB", "esaProbeDistHistoryInterval"), ("CM-SA-MIB", "esaProbeCreationTime"), ("CM-SA-MIB", "esaProbeStorageType"), ("CM-SA-MIB", "esaProbeRowStatus"), ("CM-SA-MIB", "esaProbeInner2VlanTagEnabled"), ("CM-SA-MIB", "esaProbeInner2VlanTagEtherType"), ("CM-SA-MIB", "esaProbeInner2VlanId"), ("CM-SA-MIB", "esaProbeInner2VlanPrio"), ("CM-SA-MIB", "esaProbeAdminState"), ("CM-SA-MIB", "esaProbeOperationalState"), ("CM-SA-MIB", "esaProbeSecondaryState"), ("CM-SA-MIB", "esaProbeScheduleGroupIndex"), ("CM-SA-MIB", "esaProbeScheduleGroupDescr"), ("CM-SA-MIB", "esaProbeScheduleGroupProbeList"), ("CM-SA-MIB", "esaProbeScheduleGroupType"), ("CM-SA-MIB", "esaProbeScheduleGroupStartTime"), ("CM-SA-MIB", "esaProbeScheduleGroupDuration"), ("CM-SA-MIB", "esaProbeScheduleGroupInterval"), ("CM-SA-MIB", "esaProbeScheduleGroupAction"), ("CM-SA-MIB", "esaProbeScheduleGroupStatus"), ("CM-SA-MIB", "esaProbeScheduleGroupStorageType"), ("CM-SA-MIB", "esaProbeScheduleGroupRowStatus"), ("CM-SA-MIB", "esaProbeScheduleGroupActionProbeList"), ("CM-SA-MIB", "esaReflectorIndex"), ("CM-SA-MIB", "esaReflectorName"), ("CM-SA-MIB", "esaReflectorIpAddress"), ("CM-SA-MIB", "esaReflectorSubnetMask"), ("CM-SA-MIB", "esaReflectorSourcePort"), ("CM-SA-MIB", "esaReflectorIpPrioMapMode"), ("CM-SA-MIB", "esaReflectorIpPriority"), ("CM-SA-MIB", "esaReflectorAction"), ("CM-SA-MIB", "esaReflectorSuspended"), ("CM-SA-MIB", "esaReflectorCreationTime"), ("CM-SA-MIB", "esaReflectorStorageType"), ("CM-SA-MIB", "esaReflectorRowStatus"), ("CM-SA-MIB", "esaReflectorDirection"), ("CM-SA-MIB", "esaReflectorAdminState"), ("CM-SA-MIB", "esaReflectorOperationalState"), ("CM-SA-MIB", "esaReflectorSecondaryState"), ("CM-SA-MIB", "esaProbeStatsDestinationIndex"), ("CM-SA-MIB", "esaProbeStatsCOSIndex"), ("CM-SA-MIB", "esaProbeStatsIndex"), ("CM-SA-MIB", "esaProbeStatsIntervalType"), ("CM-SA-MIB", "esaProbeStatsCOS"), ("CM-SA-MIB", "esaProbeStatsValid"), ("CM-SA-MIB", "esaProbeStatsAction"), ("CM-SA-MIB", "esaProbeStatsP2RPkts"), ("CM-SA-MIB", "esaProbeStatsP2RErredPkts"), ("CM-SA-MIB", "esaProbeStatsP2RSyncErrs"), ("CM-SA-MIB", "esaProbeStatsP2RLostPkts"), ("CM-SA-MIB", "esaProbeStatsR2PPkts"), ("CM-SA-MIB", "esaProbeStatsR2PErredPkts"), ("CM-SA-MIB", "esaProbeStatsR2PSyncErrs"), ("CM-SA-MIB", "esaProbeStatsR2PLostPkts"), ("CM-SA-MIB", "esaProbeStatsLostPkts"), ("CM-SA-MIB", "esaProbeStatsSeqGaps"), ("CM-SA-MIB", "esaProbeStatsOutOfSeqErrs"), ("CM-SA-MIB", "esaProbeStatsMinRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsMaxRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsAvgRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsSumRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsSumOfSqRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsMinOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsMaxOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsAvgOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsSumOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsSumOfSqOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsMinOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsMaxOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsAvgOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsSumOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsSumOfSqOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsMinPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMaxPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsNumPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMinNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMaxNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsNumNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMinPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMaxPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsNumPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMinNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMaxNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsNumNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsY1731P2RNegLossOccurrences"), ("CM-SA-MIB", "esaProbeStatsY1731R2PNegLossOccurrences"), ("CM-SA-MIB", "esaProbeStatsY1731RxLmSamples"), ("CM-SA-MIB", "esaProbeStatsY1731RxDmSamples"), ("CM-SA-MIB", "esaProbeStatsY1731P2RFrames"), ("CM-SA-MIB", "esaProbeStatsY1731R2PFrames"), ("CM-SA-MIB", "esaProbeStatsAvgAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsAvgAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMaxAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMaxAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMinAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMinAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsNumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsNumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryDestinationIndex"), ("CM-SA-MIB", "esaProbeHistoryCOSIndex"), ("CM-SA-MIB", "esaProbeHistoryIndex"), ("CM-SA-MIB", "esaProbeHistoryTime"), ("CM-SA-MIB", "esaProbeHistoryValid"), ("CM-SA-MIB", "esaProbeHistoryAction"), ("CM-SA-MIB", "esaProbeHistoryCOS"), ("CM-SA-MIB", "esaProbeHistoryP2RPkts")], [("CM-SA-MIB", "esaProbeHistoryP2RErredPkts"), ("CM-SA-MIB", "esaProbeHistoryP2RSyncErrs"), ("CM-SA-MIB", "esaProbeHistoryP2RLostPkts"), ("CM-SA-MIB", "esaProbeHistoryR2PPkts"), ("CM-SA-MIB", "esaProbeHistoryR2PErredPkts"), ("CM-SA-MIB", "esaProbeHistoryR2PSyncErrs"), ("CM-SA-MIB", "esaProbeHistoryR2PLostPkts"), ("CM-SA-MIB", "esaProbeHistoryLostPkts"), ("CM-SA-MIB", "esaProbeHistorySeqGaps"), ("CM-SA-MIB", "esaProbeHistoryOutOfSeqErrs"), ("CM-SA-MIB", "esaProbeHistoryMinRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistoryMaxRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistoryAvgRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistorySumRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistorySumOfSqRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistoryMinOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistoryMaxOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistoryAvgOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistorySumOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistorySumOfSqOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistoryMinOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistoryMaxOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistoryAvgOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistorySumOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistorySumOfSqOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistoryMinPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryNumPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMinNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryNumNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMinPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryNumPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMinNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryNumNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryY1731P2RNegLossOccurrences"), ("CM-SA-MIB", "esaProbeHistoryY1731R2PNegLossOccurrences"), ("CM-SA-MIB", "esaProbeHistoryY1731RxLmSamples"), ("CM-SA-MIB", "esaProbeHistoryY1731RxDmSamples"), ("CM-SA-MIB", "esaProbeHistoryY1731P2RFrames"), ("CM-SA-MIB", "esaProbeHistoryY1731R2PFrames"), ("CM-SA-MIB", "esaProbeHistoryAvgAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryAvgAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMinAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMinAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryNumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryNumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqAbsR2PJitter"), ("CM-SA-MIB", "esaProbeDistStatsConfigIndex"), ("CM-SA-MIB", "esaProbeDistStatsConfigType"), ("CM-SA-MIB", "esaProbeDistStatsConfigMinVal"), ("CM-SA-MIB", "esaProbeDistStatsConfigMaxVal"), ("CM-SA-MIB", "esaProbeDistStatsConfigNumBins"), ("CM-SA-MIB", "esaProbeDistStatsDestinationIndex"), ("CM-SA-MIB", "esaProbeDistStatsCOSIndex"), ("CM-SA-MIB", "esaProbeDistStatsCOS"), ("CM-SA-MIB", "esaProbeDistStatsNumBins"), ("CM-SA-MIB", "esaProbeDistStatsLTMin"), ("CM-SA-MIB", "esaProbeDistStatsGTMax"), ("CM-SA-MIB", "esaProbeDistStatsBinIndex"), ("CM-SA-MIB", "esaProbeDistStatsBinLower"), ("CM-SA-MIB", "esaProbeDistStatsBinUpper"), ("CM-SA-MIB", "esaProbeDistStatsBinNumSamples"), ("CM-SA-MIB", "esaProbeDistHistoryDestinationIndex"), ("CM-SA-MIB", "esaProbeDistHistoryCOSIndex"), ("CM-SA-MIB", "esaProbeDistHistoryCOS"), ("CM-SA-MIB", "esaProbeDistHistoryIndex"), ("CM-SA-MIB", "esaProbeDistHistoryTime"), ("CM-SA-MIB", "esaProbeDistHistoryAction"), ("CM-SA-MIB", "esaProbeDistHistoryNumBins"), ("CM-SA-MIB", "esaProbeDistHistoryLTMin"), ("CM-SA-MIB", "esaProbeDistHistoryGTMax"), ("CM-SA-MIB", "esaProbeDistHistoryBinIndex"), ("CM-SA-MIB", "esaProbeDistHistoryBinLower"), ("CM-SA-MIB", "esaProbeDistHistoryBinUpper"), ("CM-SA-MIB", "esaProbeDistHistoryBinNumSamples"), ("CM-SA-MIB", "esaProbeStatsThresholdIndex"), ("CM-SA-MIB", "esaProbeStatsThresholdVariable"), ("CM-SA-MIB", "esaProbeStatsThresholdAbsValueLo"), ("CM-SA-MIB", "esaProbeStatsThresholdAbsValueHi"), ("CM-SA-MIB", "esaProbeStatsThresholdMonValue"), ("CM-SA-MIB", "esaProbeCOSConfigIndex"), ("CM-SA-MIB", "esaProbeCOSConfigType"), ("CM-SA-MIB", "esaProbeCOSConfigInterval"), ("CM-SA-MIB", "esaProbeCOSConfigPktSize"), ("CM-SA-MIB", "esaProbeCOSConfigStorageType"), ("CM-SA-MIB", "esaProbeCOSConfigRowStatus"), ("CM-SA-MIB", "esaProbeDestinationIndex"), ("CM-SA-MIB", "esaProbeDestinationMepType"), ("CM-SA-MIB", "esaProbeDestinationMepMacAddr"), ("CM-SA-MIB", "esaProbeDestinationMepId"), ("CM-SA-MIB", "esaProbeDestinationStorageType"), ("CM-SA-MIB", "esaProbeDestinationRowStatus")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        cmServAssuranceObjectGroup = cmServAssuranceObjectGroup.setObjects(*_cmServAssuranceObjectGroup_obj)
    else:
        cmServAssuranceObjectGroup = cmServAssuranceObjectGroup.setObjects(*_cmServAssuranceObjectGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmServAssuranceObjectGroup = cmServAssuranceObjectGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cmServAssuranceObjectGroup.setDescription('***************** THIS OBJECT GROUP IS NOW DEPRECATED ***************\n             A collection of objects used to manage the CM ServAssurance group.')
cmServAssuranceNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2, 2)).setObjects(("CM-SA-MIB", "cmOperateLoopbackTrap"), ("CM-SA-MIB", "cmReleaseLoopbackTrap"), ("CM-SA-MIB", "esaProbeThresholdCrossingAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmServAssuranceNotifGroup = cmServAssuranceNotifGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cmServAssuranceNotifGroup.setDescription('***************** THIS OBJECT GROUP IS NOW DEPRECATED ******************\n             A collection of notifications used in the CM ServAssurance\n             group.')
cmEcpaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2, 3)).setObjects(("CM-SA-MIB", "ecpaControlIndex"), ("CM-SA-MIB", "ecpaControlSourcePort"), ("CM-SA-MIB", "ecpaControlTestType"), ("CM-SA-MIB", "ecpaControlNumFrames"), ("CM-SA-MIB", "ecpaControlDuration"), ("CM-SA-MIB", "ecpaControlInjectorDirection"), ("CM-SA-MIB", "ecpaControlMonitorDirection"), ("CM-SA-MIB", "ecpaControlStream1"), ("CM-SA-MIB", "ecpaControlStream2"), ("CM-SA-MIB", "ecpaControlStream3"), ("CM-SA-MIB", "ecpaControlAction"), ("CM-SA-MIB", "ecpaControlTestStatus"), ("CM-SA-MIB", "ecpaControlStorageType"), ("CM-SA-MIB", "ecpaControlRowStatus"), ("CM-SA-MIB", "ecpaControlEcpaType"), ("CM-SA-MIB", "ecpaConfigStreamIndex"), ("CM-SA-MIB", "ecpaConfigStreamName"), ("CM-SA-MIB", "ecpaConfigStreamFrameSize"), ("CM-SA-MIB", "ecpaConfigStreamRate"), ("CM-SA-MIB", "ecpaConfigStreamPayloadType"), ("CM-SA-MIB", "ecpaConfigStreamSignature"), ("CM-SA-MIB", "ecpaConfigStreamDestinationMAC"), ("CM-SA-MIB", "ecpaConfigStreamSourceMAC"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanEnabled"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanId"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanPrio"), ("CM-SA-MIB", "ecpaConfigStreamOuterVlanEtherType"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanEnabled"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanId"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanPrio"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlanEtherType"), ("CM-SA-MIB", "ecpaConfigStreamIpVersion"), ("CM-SA-MIB", "ecpaConfigStreamIpV4Address"), ("CM-SA-MIB", "ecpaConfigStreamIpV6Address"), ("CM-SA-MIB", "ecpaConfigStreamPrioMapMode"), ("CM-SA-MIB", "ecpaConfigStreamPrioVal"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2Enabled"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2Id"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2Prio"), ("CM-SA-MIB", "ecpaConfigStreamInnerVlan2EtherType"), ("CM-SA-MIB", "ecpaConfigStreamDestIpV4Address"), ("CM-SA-MIB", "ecpaConfigStreamDestIpV6Address"), ("CM-SA-MIB", "ecpaConfigStreamUsePortSourceMAC"), ("CM-SA-MIB", "ecpaConfigStreamRateHi"), ("CM-SA-MIB", "ecpaConfigStreamUdpControl"), ("CM-SA-MIB", "ecpaConfigStreamUdpSrcPort"), ("CM-SA-MIB", "ecpaConfigStreamUdpDstPort"), ("CM-SA-MIB", "ecpaTestStreamIndex"), ("CM-SA-MIB", "ecpaTestStreamSourcePort"), ("CM-SA-MIB", "ecpaTestStreamName"), ("CM-SA-MIB", "ecpaTestStreamFrameSize"), ("CM-SA-MIB", "ecpaTestStreamRate"), ("CM-SA-MIB", "ecpaTestStreamPayloadType"), ("CM-SA-MIB", "ecpaTestStreamSignature"), ("CM-SA-MIB", "ecpaTestStreamDestinationMAC"), ("CM-SA-MIB", "ecpaTestStreamSourceMAC"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanEnabled"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanId"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanPrio"), ("CM-SA-MIB", "ecpaTestStreamOuterVlanEtherType"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanEnabled"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanId"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanPrio"), ("CM-SA-MIB", "ecpaTestStreamInnerVlanEtherType"), ("CM-SA-MIB", "ecpaTestStreamIpVersion"), ("CM-SA-MIB", "ecpaTestStreamIpV4Address"), ("CM-SA-MIB", "ecpaTestStreamIpV6Address"), ("CM-SA-MIB", "ecpaTestStreamPrioMapMode"), ("CM-SA-MIB", "ecpaTestStreamPrioVal"), ("CM-SA-MIB", "ecpaTestStreamMonStartTime"), ("CM-SA-MIB", "ecpaTestStreamMonEndTime"), ("CM-SA-MIB", "ecpaTestStreamMonElapsedTime"), ("CM-SA-MIB", "ecpaTestStreamMonTxFrames"), ("CM-SA-MIB", "ecpaTestStreamMonRxFrames"), ("CM-SA-MIB", "ecpaTestStreamMonRxPercentSuccess"), ("CM-SA-MIB", "ecpaTestStreamMonRxOutOfSeqErrs"), ("CM-SA-MIB", "ecpaTestStreamMonRxSeqGaps"), ("CM-SA-MIB", "ecpaTestStreamMonRxNonEcpaFrames"), ("CM-SA-MIB", "ecpaTestStreamMonRxMinDelay"), ("CM-SA-MIB", "ecpaTestStreamMonRxMaxDelay"), ("CM-SA-MIB", "ecpaTestStreamMonRxAvgDelay"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrameSize"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame1Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame2Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame3Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame4Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame5Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame6Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame7Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame8Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame9Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRx1stFrame10Octets"), ("CM-SA-MIB", "ecpaTestStreamMonRxBitRate"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2Enabled"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2Id"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2Prio"), ("CM-SA-MIB", "ecpaTestStreamInnerVlan2EtherType"), ("CM-SA-MIB", "ecpaTestStreamDestIpV4Address"), ("CM-SA-MIB", "ecpaTestStreamDestIpV6Address"), ("CM-SA-MIB", "ecpaTestStreamConfigChanged"), ("CM-SA-MIB", "ecpaTestStreamRateHi"), ("CM-SA-MIB", "ecpaTestStreamUdpControl"), ("CM-SA-MIB", "ecpaTestStreamUdpSrcPort"), ("CM-SA-MIB", "ecpaTestStreamUdpDstPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEcpaGroup = cmEcpaGroup.setStatus('current')
if mibBuilder.loadTexts: cmEcpaGroup.setDescription('A collection of objects used to manage the CM ServAssurance\n             ECPA functionality.')
cmEsaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2, 4))
for _cmEsaGroup_obj in [[("CM-SA-MIB", "esaProbeIndex"), ("CM-SA-MIB", "esaProbeName"), ("CM-SA-MIB", "esaProbeSourcePort"), ("CM-SA-MIB", "esaProbeAssocSchedGroup"), ("CM-SA-MIB", "esaProbeDirection"), ("CM-SA-MIB", "esaProbeProtocol"), ("CM-SA-MIB", "esaProbeSrcIpAddress"), ("CM-SA-MIB", "esaProbeSrcSubnetMask"), ("CM-SA-MIB", "esaProbeDestIpAddress"), ("CM-SA-MIB", "esaProbeSrcMep"), ("CM-SA-MIB", "esaProbeDestMepType"), ("CM-SA-MIB", "esaProbeDestMepMacAddr"), ("CM-SA-MIB", "esaProbeDestMepId"), ("CM-SA-MIB", "esaProbeVlanTagEnabled"), ("CM-SA-MIB", "esaProbeVlanTagEtherType"), ("CM-SA-MIB", "esaProbeVlanId"), ("CM-SA-MIB", "esaProbeVlanPrio"), ("CM-SA-MIB", "esaProbeInnerVlanTagEnabled"), ("CM-SA-MIB", "esaProbeInnerVlanTagEtherType"), ("CM-SA-MIB", "esaProbeInnerVlanId"), ("CM-SA-MIB", "esaProbeInnerVlanPrio"), ("CM-SA-MIB", "esaProbeIpPrioMapMode"), ("CM-SA-MIB", "esaProbeIpPriority"), ("CM-SA-MIB", "esaProbePktsPerSample"), ("CM-SA-MIB", "esaProbePktSize"), ("CM-SA-MIB", "esaProbeInterPktGap"), ("CM-SA-MIB", "esaProbePktDeadInterval"), ("CM-SA-MIB", "esaProbeResponseTimeout"), ("CM-SA-MIB", "esaProbeY1731DmmPktSize"), ("CM-SA-MIB", "esaProbeY1731LmmInterval"), ("CM-SA-MIB", "esaProbeY1731DmmInterval"), ("CM-SA-MIB", "esaProbeHistoryBins"), ("CM-SA-MIB", "esaProbeHistoryInterval"), ("CM-SA-MIB", "esaProbeDistHistoryBins"), ("CM-SA-MIB", "esaProbeDistHistoryInterval"), ("CM-SA-MIB", "esaProbeCreationTime"), ("CM-SA-MIB", "esaProbeStorageType"), ("CM-SA-MIB", "esaProbeRowStatus"), ("CM-SA-MIB", "esaProbeMultiCOSEnabled"), ("CM-SA-MIB", "esaProbeSLAMonitorType"), ("CM-SA-MIB", "esaProbeCOSType"), ("CM-SA-MIB", "esaProbeSLMMulticastMACEnabled"), ("CM-SA-MIB", "esaProbeSOAMInterval"), ("CM-SA-MIB", "esaProbeSOAMPktSize"), ("CM-SA-MIB", "esaProbeAdminState"), ("CM-SA-MIB", "esaProbeOperationalState"), ("CM-SA-MIB", "esaProbeSecondaryState"), ("CM-SA-MIB", "esaProbeAlias"), ("CM-SA-MIB", "esaProbeScheduleGroupIndex"), ("CM-SA-MIB", "esaProbeScheduleGroupDescr"), ("CM-SA-MIB", "esaProbeScheduleGroupProbeList"), ("CM-SA-MIB", "esaProbeScheduleGroupType"), ("CM-SA-MIB", "esaProbeScheduleGroupStartTime"), ("CM-SA-MIB", "esaProbeScheduleGroupDuration"), ("CM-SA-MIB", "esaProbeScheduleGroupInterval"), ("CM-SA-MIB", "esaProbeScheduleGroupAction"), ("CM-SA-MIB", "esaProbeScheduleGroupStatus"), ("CM-SA-MIB", "esaProbeScheduleGroupStorageType"), ("CM-SA-MIB", "esaProbeScheduleGroupRowStatus"), ("CM-SA-MIB", "esaReflectorIndex"), ("CM-SA-MIB", "esaReflectorName"), ("CM-SA-MIB", "esaReflectorIpAddress"), ("CM-SA-MIB", "esaReflectorSubnetMask"), ("CM-SA-MIB", "esaReflectorSourcePort"), ("CM-SA-MIB", "esaReflectorIpPrioMapMode"), ("CM-SA-MIB", "esaReflectorIpPriority"), ("CM-SA-MIB", "esaReflectorAction"), ("CM-SA-MIB", "esaReflectorSuspended"), ("CM-SA-MIB", "esaReflectorCreationTime"), ("CM-SA-MIB", "esaReflectorStorageType"), ("CM-SA-MIB", "esaReflectorRowStatus"), ("CM-SA-MIB", "esaReflectorDirection"), ("CM-SA-MIB", "esaReflectorAdminState"), ("CM-SA-MIB", "esaReflectorOperationalState"), ("CM-SA-MIB", "esaReflectorSecondaryState"), ("CM-SA-MIB", "esaReflectorAlias"), ("CM-SA-MIB", "esaProbeStatsDestinationIndex"), ("CM-SA-MIB", "esaProbeStatsCOSIndex"), ("CM-SA-MIB", "esaProbeStatsIndex"), ("CM-SA-MIB", "esaProbeStatsIntervalType"), ("CM-SA-MIB", "esaProbeStatsCOS"), ("CM-SA-MIB", "esaProbeStatsValid"), ("CM-SA-MIB", "esaProbeStatsAction"), ("CM-SA-MIB", "esaProbeStatsP2RPkts"), ("CM-SA-MIB", "esaProbeStatsP2RErredPkts"), ("CM-SA-MIB", "esaProbeStatsP2RSyncErrs"), ("CM-SA-MIB", "esaProbeStatsP2RLostPkts"), ("CM-SA-MIB", "esaProbeStatsR2PPkts"), ("CM-SA-MIB", "esaProbeStatsR2PErredPkts"), ("CM-SA-MIB", "esaProbeStatsR2PSyncErrs"), ("CM-SA-MIB", "esaProbeStatsR2PLostPkts"), ("CM-SA-MIB", "esaProbeStatsLostPkts"), ("CM-SA-MIB", "esaProbeStatsSeqGaps"), ("CM-SA-MIB", "esaProbeStatsOutOfSeqErrs"), ("CM-SA-MIB", "esaProbeStatsMinRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsMaxRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsAvgRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsSumRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsSumOfSqRoundTripDelay"), ("CM-SA-MIB", "esaProbeStatsMinOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsMaxOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsAvgOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsSumOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsSumOfSqOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeStatsMinOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsMaxOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsAvgOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsSumOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsSumOfSqOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeStatsMinPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMaxPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsNumPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqPosP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMinNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMaxNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsNumNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqNegP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMinPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMaxPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsNumPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqPosR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMinNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMaxNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsNumNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqNegR2PJitter"), ("CM-SA-MIB", "esaProbeStatsY1731P2RNegLossOccurrences"), ("CM-SA-MIB", "esaProbeStatsY1731R2PNegLossOccurrences"), ("CM-SA-MIB", "esaProbeStatsY1731RxLmSamples"), ("CM-SA-MIB", "esaProbeStatsY1731RxDmSamples"), ("CM-SA-MIB", "esaProbeStatsY1731P2RFrames"), ("CM-SA-MIB", "esaProbeStatsY1731R2PFrames"), ("CM-SA-MIB", "esaProbeStatsAvgAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsAvgAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMaxAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMaxAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsMinAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsMinAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsNumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsNumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqAbsP2RJitter"), ("CM-SA-MIB", "esaProbeStatsSumOfSqAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryDestinationIndex"), ("CM-SA-MIB", "esaProbeHistoryCOSIndex"), ("CM-SA-MIB", "esaProbeHistoryIndex"), ("CM-SA-MIB", "esaProbeHistoryTime"), ("CM-SA-MIB", "esaProbeHistoryValid"), ("CM-SA-MIB", "esaProbeHistoryAction"), ("CM-SA-MIB", "esaProbeHistoryCOS"), ("CM-SA-MIB", "esaProbeHistoryP2RPkts"), ("CM-SA-MIB", "esaProbeHistoryP2RErredPkts"), ("CM-SA-MIB", "esaProbeHistoryP2RSyncErrs"), ("CM-SA-MIB", "esaProbeHistoryP2RLostPkts"), ("CM-SA-MIB", "esaProbeHistoryR2PPkts"), ("CM-SA-MIB", "esaProbeHistoryR2PErredPkts"), ("CM-SA-MIB", "esaProbeHistoryR2PSyncErrs"), ("CM-SA-MIB", "esaProbeHistoryR2PLostPkts"), ("CM-SA-MIB", "esaProbeHistoryLostPkts"), ("CM-SA-MIB", "esaProbeHistorySeqGaps"), ("CM-SA-MIB", "esaProbeHistoryOutOfSeqErrs"), ("CM-SA-MIB", "esaProbeHistoryMinRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistoryMaxRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistoryAvgRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistorySumRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistorySumOfSqRoundTripDelay"), ("CM-SA-MIB", "esaProbeHistoryMinOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistoryMaxOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistoryAvgOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistorySumOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistorySumOfSqOnewayP2RDelay"), ("CM-SA-MIB", "esaProbeHistoryMinOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistoryMaxOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistoryAvgOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistorySumOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistorySumOfSqOnewayR2PDelay"), ("CM-SA-MIB", "esaProbeHistoryMinPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryNumPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqPosP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMinNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryNumNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqNegP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMinPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryNumPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqPosR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMinNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryNumNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqNegR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryY1731P2RNegLossOccurrences"), ("CM-SA-MIB", "esaProbeHistoryY1731R2PNegLossOccurrences"), ("CM-SA-MIB", "esaProbeHistoryY1731RxLmSamples"), ("CM-SA-MIB", "esaProbeHistoryY1731RxDmSamples"), ("CM-SA-MIB", "esaProbeHistoryY1731P2RFrames"), ("CM-SA-MIB", "esaProbeHistoryY1731R2PFrames"), ("CM-SA-MIB", "esaProbeHistoryAvgAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryAvgAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMaxAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryMinAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryMinAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistoryNumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistoryNumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumAbsR2PJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqAbsP2RJitter"), ("CM-SA-MIB", "esaProbeHistorySumOfSqAbsR2PJitter"), ("CM-SA-MIB", "esaProbeDistStatsConfigIndex"), ("CM-SA-MIB", "esaProbeDistStatsConfigType"), ("CM-SA-MIB", "esaProbeDistStatsConfigMinVal"), ("CM-SA-MIB", "esaProbeDistStatsConfigMaxVal"), ("CM-SA-MIB", "esaProbeDistStatsConfigNumBins"), ("CM-SA-MIB", "esaProbeDistStatsDestinationIndex"), ("CM-SA-MIB", "esaProbeDistStatsCOSIndex"), ("CM-SA-MIB", "esaProbeDistStatsCOS"), ("CM-SA-MIB", "esaProbeDistStatsNumBins"), ("CM-SA-MIB", "esaProbeDistStatsLTMin"), ("CM-SA-MIB", "esaProbeDistStatsGTMax"), ("CM-SA-MIB", "esaProbeDistStatsBinIndex"), ("CM-SA-MIB", "esaProbeDistStatsBinLower"), ("CM-SA-MIB", "esaProbeDistStatsBinUpper"), ("CM-SA-MIB", "esaProbeDistStatsBinNumSamples"), ("CM-SA-MIB", "esaProbeDistHistoryDestinationIndex"), ("CM-SA-MIB", "esaProbeDistHistoryCOSIndex"), ("CM-SA-MIB", "esaProbeDistHistoryCOS"), ("CM-SA-MIB", "esaProbeDistHistoryIndex"), ("CM-SA-MIB", "esaProbeDistHistoryTime"), ("CM-SA-MIB", "esaProbeDistHistoryAction"), ("CM-SA-MIB", "esaProbeDistHistoryNumBins"), ("CM-SA-MIB", "esaProbeDistHistoryLTMin"), ("CM-SA-MIB", "esaProbeDistHistoryGTMax"), ("CM-SA-MIB", "esaProbeDistHistoryBinIndex"), ("CM-SA-MIB", "esaProbeDistHistoryBinLower"), ("CM-SA-MIB", "esaProbeDistHistoryBinUpper"), ("CM-SA-MIB", "esaProbeDistHistoryBinNumSamples"), ("CM-SA-MIB", "esaProbeStatsThresholdIndex"), ("CM-SA-MIB", "esaProbeStatsThresholdVariable"), ("CM-SA-MIB", "esaProbeStatsThresholdAbsValueLo"), ("CM-SA-MIB", "esaProbeStatsThresholdAbsValueHi"), ("CM-SA-MIB", "esaProbeStatsThresholdMonValue"), ("CM-SA-MIB", "esaProbeCOSConfigIndex"), ("CM-SA-MIB", "esaProbeCOSConfigType"), ("CM-SA-MIB", "esaProbeCOSConfigInterval"), ("CM-SA-MIB", "esaProbeCOSConfigPktSize")], [("CM-SA-MIB", "esaProbeCOSConfigStorageType"), ("CM-SA-MIB", "esaProbeCOSConfigRowStatus"), ("CM-SA-MIB", "esaProbeCOSConfigslmInterval"), ("CM-SA-MIB", "esaProbeCOSConfigslmPktSize"), ("CM-SA-MIB", "esaProbeCOSConfigSoamPmExtAvailFlrThreshold"), ("CM-SA-MIB", "esaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus"), ("CM-SA-MIB", "esaProbeCOSConfigSoamPmExtConDeltaTsForAvail"), ("CM-SA-MIB", "esaProbeDestinationIndex"), ("CM-SA-MIB", "esaProbeDestinationMepType"), ("CM-SA-MIB", "esaProbeDestinationMepMacAddr"), ("CM-SA-MIB", "esaProbeDestinationMepId"), ("CM-SA-MIB", "esaProbeDestinationStorageType"), ("CM-SA-MIB", "esaProbeDestinationRowStatus"), ("CM-SA-MIB", "f3EsaProbeCOSConfigSoamPmExtAvailFlrThreshold"), ("CM-SA-MIB", "f3EsaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus"), ("CM-SA-MIB", "f3EsaProbeCOSConfigSoamPmExtConDeltaTsForAvail"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMinP2RFlr"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMaxP2RFlr"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtAvgP2RFlr"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMinR2PFlr"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMaxR2PFlr"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtAvgR2PFlr"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtP2rSeverelyErroredDeltaTs"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtR2PSeverelyErroredDeltaTs"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtP2rAvailableTime"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtR2PAvailableTime"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtP2rUnavailableTime"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtR2PUnavailableTime"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMinAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMaxAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtAvgAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtNumAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumOfSqAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMaxP2RFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtAvgP2RFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtNumP2RFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumP2RFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumOfSqP2RFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMaxR2PFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtAvgR2PFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtNumR2PFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumR2PFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumOfSqR2PFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtMaxRTFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtAvgRTFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtNumRTFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumRTFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtSumOfSqRTFDR"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtP2rAvailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtR2pAvailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtP2rUnavailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtR2pUnavailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeStatsSoamPmExtElapsedTime"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMinP2RFlr"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMaxP2RFlr"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtAvgP2RFlr"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMinR2PFlr"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMaxR2PFlr"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtAvgR2PFlr"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtP2rSeverelyErroredDeltaTs"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtR2PSeverelyErroredDeltaTs"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtP2rAvailableTime"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtR2PAvailableTime"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtP2rUnavailableTime"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtR2PUnavailableTime"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMinAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMaxAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtAvgAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtNumAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumOfSqAbsRTJitter"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMaxP2RFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtAvgP2RFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtNumP2RFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumP2RFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumOfSqP2RFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMaxR2PFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtAvgR2PFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtNumR2PFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumR2PFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumOfSqR2PFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtMaxRTFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtAvgRTFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtNumRTFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumRTFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtSumOfSqRTFDR"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtP2rAvailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtR2pAvailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtP2rUnavailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtR2pUnavailableDeltaTs"), ("CM-SA-MIB", "f3EsaProbeHistorySoamPmExtElapsedTime")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        cmEsaGroup = cmEsaGroup.setObjects(*_cmEsaGroup_obj)
    else:
        cmEsaGroup = cmEsaGroup.setObjects(*_cmEsaGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEsaGroup = cmEsaGroup.setStatus('current')
if mibBuilder.loadTexts: cmEsaGroup.setDescription('A collection of objects used to manage the CM ServAssurance\n             ESA functionality.')
cmServAssuranceGenNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2, 5)).setObjects(("CM-SA-MIB", "cmOperateLoopbackTrap"), ("CM-SA-MIB", "cmReleaseLoopbackTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmServAssuranceGenNotifGroup = cmServAssuranceGenNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cmServAssuranceGenNotifGroup.setDescription('A collection of notifications used in the generic CM ServAssurance\n             functionality.')
cmServAssuranceEsaNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2, 6)).setObjects(("CM-SA-MIB", "esaProbeThresholdCrossingAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmServAssuranceEsaNotifGroup = cmServAssuranceEsaNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cmServAssuranceEsaNotifGroup.setDescription('A collection of notifications used in the CM ServAssurance\n             ESA functionality.')
cmBertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 8, 3, 2, 7)).setObjects(("CM-SA-MIB", "bertControlIndex"), ("CM-SA-MIB", "bertControlSourceEntity"), ("CM-SA-MIB", "bertControlTestMode"), ("CM-SA-MIB", "bertControlDuration"), ("CM-SA-MIB", "bertControlStream"), ("CM-SA-MIB", "bertControlAction"), ("CM-SA-MIB", "bertControlTestStatus"), ("CM-SA-MIB", "bertConfigStreamIndex"), ("CM-SA-MIB", "bertConfigStreamName"), ("CM-SA-MIB", "bertConfigStreamTxPattern"), ("CM-SA-MIB", "bertConfigStreamErrInjectEnabled"), ("CM-SA-MIB", "bertConfigStreamErrInjectRate"), ("CM-SA-MIB", "bertConfigStreamErrInjectRateMultiplier"), ("CM-SA-MIB", "bertConfigStreamUserPatternLength"), ("CM-SA-MIB", "bertConfigStreamUserPattern"), ("CM-SA-MIB", "bertTestStreamIndex"), ("CM-SA-MIB", "bertTestStreamName"), ("CM-SA-MIB", "bertTestStreamTxPattern"), ("CM-SA-MIB", "bertTestStreamErrInjectEnabled"), ("CM-SA-MIB", "bertTestStreamErrInjectRate"), ("CM-SA-MIB", "bertTestStreamErrInjectRateMultiplier"), ("CM-SA-MIB", "bertTestStreamUserPatternLength"), ("CM-SA-MIB", "bertTestStreamUserPattern"), ("CM-SA-MIB", "bertTestStreamMonStartTime"), ("CM-SA-MIB", "bertTestStreamMonEndTime"), ("CM-SA-MIB", "bertTestStreamMonElapsedTime"), ("CM-SA-MIB", "bertTestStreamMonSyncState"), ("CM-SA-MIB", "bertTestStreamMonRxPattern"), ("CM-SA-MIB", "bertTestStreamMonSyncCounts"), ("CM-SA-MIB", "bertTestStreamMonRxBitErrsSinceStart"), ("CM-SA-MIB", "bertTestStreamMonRxBitsSinceStart"), ("CM-SA-MIB", "bertTestStreamMonRxESsSinceStart"), ("CM-SA-MIB", "bertTestStreamMonRxErrRateSinceStart"), ("CM-SA-MIB", "bertTestStreamMonRxErrRateMultiplierSinceStart"), ("CM-SA-MIB", "bertTestStreamMonRxBitErrsSinceLastSync"), ("CM-SA-MIB", "bertTestStreamMonRxBitsSinceLastSync"), ("CM-SA-MIB", "bertTestStreamMonRxESsSinceLastSync"), ("CM-SA-MIB", "bertTestStreamMonRxErrRateSinceLastSync"), ("CM-SA-MIB", "bertTestStreamMonRxErrRateMultiplierSinceLastSync"), ("CM-SA-MIB", "bertTestStreamConfigChangedFlag"), ("CM-SA-MIB", "bertTestStreamMonOOSSsSinceStart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmBertGroup = cmBertGroup.setStatus('current')
if mibBuilder.loadTexts: cmBertGroup.setDescription('A collection of objects used to manage the CM ServAssurance\n             BERT functionality.')
mibBuilder.exportSymbols("CM-SA-MIB", EcpaMonitorPortType=EcpaMonitorPortType, esaProbeStatsSumOfSqPosP2RJitter=esaProbeStatsSumOfSqPosP2RJitter, bertControlDuration=bertControlDuration, ecpaTestStreamPrioVal=ecpaTestStreamPrioVal, esaProbeHistoryInterval=esaProbeHistoryInterval, bertControlStream=bertControlStream, PYSNMP_MODULE_ID=cmServiceAssuranceMIB, esaReflectorStorageType=esaReflectorStorageType, f3EsaProbeStatsSoamPmExtR2pUnavailableDeltaTs=f3EsaProbeStatsSoamPmExtR2pUnavailableDeltaTs, esaProbeDistStatsConfigLowBoundOfBin8=esaProbeDistStatsConfigLowBoundOfBin8, f3EsaProbeStatsSoamPmExtSumOfSqRTFDR=f3EsaProbeStatsSoamPmExtSumOfSqRTFDR, esaProbeMacAddress=esaProbeMacAddress, bertConfigStreamTable=bertConfigStreamTable, esaProbeInnerVlanTagEtherType=esaProbeInnerVlanTagEtherType, bertTestStreamMonRxErrRateSinceLastSync=bertTestStreamMonRxErrRateSinceLastSync, ecpaTestStreamMonRx1stFrame5Octets=ecpaTestStreamMonRx1stFrame5Octets, esaProbeStatsMinAbsP2RJitter=esaProbeStatsMinAbsP2RJitter, cmServAssuranceGroups=cmServAssuranceGroups, esaProbeCOSConfigslmInterval=esaProbeCOSConfigslmInterval, ecpaConfigStreamInnerVlan2Prio=ecpaConfigStreamInnerVlan2Prio, esaProbeHistorySumOnewayR2PDelay=esaProbeHistorySumOnewayR2PDelay, esaProbeScheduleGroupDuration=esaProbeScheduleGroupDuration, ecpaConfigStreamInnerVlanId=ecpaConfigStreamInnerVlanId, esaProbeDistHistoryLTMin=esaProbeDistHistoryLTMin, bertTestStreamMonRxBitsSinceStart=bertTestStreamMonRxBitsSinceStart, bertControlIndex=bertControlIndex, EsaAction=EsaAction, esaProbeHistorySumNegP2RJitter=esaProbeHistorySumNegP2RJitter, cmServAssuranceCompliance=cmServAssuranceCompliance, esaProbeDistStatsConfigMaxVal=esaProbeDistStatsConfigMaxVal, ecpaControlTestStatus=ecpaControlTestStatus, esaReflectorSubnetMask=esaReflectorSubnetMask, ecpaConfigStreamSignature=ecpaConfigStreamSignature, esaProbeIpPriority=esaProbeIpPriority, BertUserPatternLength=BertUserPatternLength, esaProbeHistoryDestinationIndex=esaProbeHistoryDestinationIndex, ecpaControlEntry=ecpaControlEntry, esaProbeDistHistoryBins=esaProbeDistHistoryBins, esaProbeStatsSumAbsR2PJitter=esaProbeStatsSumAbsR2PJitter, f3EsaProbeStatsSoamPmExtMaxR2PFlr=f3EsaProbeStatsSoamPmExtMaxR2PFlr, f3EsaProbeStatsSoamPmExtP2rSeverelyErroredDeltaTs=f3EsaProbeStatsSoamPmExtP2rSeverelyErroredDeltaTs, f3EsaProbeHistorySoamPmExtAvgR2PFlr=f3EsaProbeHistorySoamPmExtAvgR2PFlr, bertTestStreamMonRxBitErrsSinceStart=bertTestStreamMonRxBitErrsSinceStart, esaProbeDistHistoryBinLower=esaProbeDistHistoryBinLower, esaProbeHistoryY1731R2PNegLossOccurrences=esaProbeHistoryY1731R2PNegLossOccurrences, esaProbeHistoryR2PErredPkts=esaProbeHistoryR2PErredPkts, esaReflectorSourcePort=esaReflectorSourcePort, esaProbeStatsP2RSyncErrs=esaProbeStatsP2RSyncErrs, esaProbeHistoryMaxNegP2RJitter=esaProbeHistoryMaxNegP2RJitter, esaProbeCOSConfigType=esaProbeCOSConfigType, esaProbeDistHistoryBinEntry=esaProbeDistHistoryBinEntry, esaProbeStatsThresholdAbsValueLo=esaProbeStatsThresholdAbsValueLo, ecpaControlEcpaType=ecpaControlEcpaType, f3EsaProbeStatsSoamPmExtSumOfSqP2RFDR=f3EsaProbeStatsSoamPmExtSumOfSqP2RFDR, ecpaTestStreamInnerVlanEnabled=ecpaTestStreamInnerVlanEnabled, esaProbeStatsDestinationIndex=esaProbeStatsDestinationIndex, esaReflectorRowStatus=esaReflectorRowStatus, f3EsaProbeStatsSoamPmExtAvgR2PFDR=f3EsaProbeStatsSoamPmExtAvgR2PFDR, esaProbePktDeadInterval=esaProbePktDeadInterval, esaProbeCreationTime=esaProbeCreationTime, esaProbeStatsSumOfSqOnewayR2PDelay=esaProbeStatsSumOfSqOnewayR2PDelay, ecpaTestStreamMonRxNonEcpaFrames=ecpaTestStreamMonRxNonEcpaFrames, esaProbeStatsMinRoundTripDelay=esaProbeStatsMinRoundTripDelay, ecpaTestStreamIpVersion=ecpaTestStreamIpVersion, esaReflectorOperationalState=esaReflectorOperationalState, esaProbeStatsSeqGaps=esaProbeStatsSeqGaps, esaProbeHistoryY1731RxLmSamples=esaProbeHistoryY1731RxLmSamples, esaProbeMultiDestinationTable=esaProbeMultiDestinationTable, ecpaTestStreamInnerVlanEtherType=ecpaTestStreamInnerVlanEtherType, esaProbeHistoryMinPosR2PJitter=esaProbeHistoryMinPosR2PJitter, esaProbeDestMepType=esaProbeDestMepType, f3EsaProbeHistorySoamPmExtMaxR2PFlr=f3EsaProbeHistorySoamPmExtMaxR2PFlr, esaProbeStatsMinAbsR2PJitter=esaProbeStatsMinAbsR2PJitter, esaProbeDistStatsBinNumSamples=esaProbeDistStatsBinNumSamples, esaProbeDistStatsBinIndex=esaProbeDistStatsBinIndex, ecpaTestStreamMonRxMaxDelay=ecpaTestStreamMonRxMaxDelay, ecpaTestStreamSourcePort=ecpaTestStreamSourcePort, esaProbeName=esaProbeName, esaProbeHistoryCOSIndex=esaProbeHistoryCOSIndex, ecpaConfigStreamFrameSize=ecpaConfigStreamFrameSize, esaProbeScheduleGroupIndex=esaProbeScheduleGroupIndex, esaProbeStatsAction=esaProbeStatsAction, esaProbeStatsLostPkts=esaProbeStatsLostPkts, cmServAssuranceObjectGroup=cmServAssuranceObjectGroup, ecpaTestStreamMonElapsedTime=ecpaTestStreamMonElapsedTime, esaProbeHistoryNumPosP2RJitter=esaProbeHistoryNumPosP2RJitter, esaProbeHistoryBins=esaProbeHistoryBins, f3EsaProbeStatsSoamPmExtSumP2RFDR=f3EsaProbeStatsSoamPmExtSumP2RFDR, esaProbeStatsAvgOnewayR2PDelay=esaProbeStatsAvgOnewayR2PDelay, ecpaControlInjectorDirection=ecpaControlInjectorDirection, cmOperateLoopbackTrap=cmOperateLoopbackTrap, bertTestStreamErrInjectRateMultiplier=bertTestStreamErrInjectRateMultiplier, f3EsaProbeStatsSoamPmExtSumOfSqR2PFDR=f3EsaProbeStatsSoamPmExtSumOfSqR2PFDR, cmServAssuranceCompliances=cmServAssuranceCompliances, cmServAssuranceEsaNotifGroup=cmServAssuranceEsaNotifGroup, f3EsaProbeStatsSoamPmExtMaxAbsRTJitter=f3EsaProbeStatsSoamPmExtMaxAbsRTJitter, f3EsaProbeStatsSoamPmExtEntry=f3EsaProbeStatsSoamPmExtEntry, esaProbeResponseTimeout=esaProbeResponseTimeout, ecpaConfigStreamDestIpV4Address=ecpaConfigStreamDestIpV4Address, f3EsaProbeStatsSoamPmExtP2rUnavailableDeltaTs=f3EsaProbeStatsSoamPmExtP2rUnavailableDeltaTs, ecpaTestStreamPrioMapMode=ecpaTestStreamPrioMapMode, esaProbeStatsY1731R2PFrames=esaProbeStatsY1731R2PFrames, cmServAssuranceObjects=cmServAssuranceObjects, ecpaTestStreamIndex=ecpaTestStreamIndex, esaProbeDistHistoryCOS=esaProbeDistHistoryCOS, ecpaControlSourcePort=ecpaControlSourcePort, ecpaConfigStreamOuterVlanPrio=ecpaConfigStreamOuterVlanPrio, esaProbeHistoryR2PSyncErrs=esaProbeHistoryR2PSyncErrs, ecpaTestStreamMonRx1stFrame10Octets=ecpaTestStreamMonRx1stFrame10Octets, esaProbeHistorySumNegR2PJitter=esaProbeHistorySumNegR2PJitter, ecpaConfigStreamOuterVlanEnabled=ecpaConfigStreamOuterVlanEnabled, ecpaConfigStreamPrioVal=ecpaConfigStreamPrioVal, esaProbeMultiDestinationEntry=esaProbeMultiDestinationEntry, cmServiceAssuranceMIB=cmServiceAssuranceMIB, bertControlSourceEntity=bertControlSourceEntity, esaProbeScheduleGroupDescr=esaProbeScheduleGroupDescr, f3EsaProbeHistorySoamPmExtR2PUnavailableTime=f3EsaProbeHistorySoamPmExtR2PUnavailableTime, f3EsaProbeHistorySoamPmExtAvgRTFDR=f3EsaProbeHistorySoamPmExtAvgRTFDR, ecpaConfigStreamUdpControl=ecpaConfigStreamUdpControl, bertControlAction=bertControlAction, esaProbeScheduleGroupInterval=esaProbeScheduleGroupInterval, bertConfigStreamErrInjectRate=bertConfigStreamErrInjectRate, ecpaConfigStreamOuterVlanEtherType=ecpaConfigStreamOuterVlanEtherType, esaProbeHistorySumOfSqOnewayP2RDelay=esaProbeHistorySumOfSqOnewayP2RDelay, f3EsaProbeHistorySoamPmExtSumOfSqR2PFDR=f3EsaProbeHistorySoamPmExtSumOfSqR2PFDR, esaReflectorName=esaReflectorName, esaProbeDistHistoryBinUpper=esaProbeDistHistoryBinUpper, bertTestStreamMonSyncCounts=bertTestStreamMonSyncCounts, esaProbeStatsSumOfSqAbsP2RJitter=esaProbeStatsSumOfSqAbsP2RJitter, ecpaTestStreamInnerVlan2EtherType=ecpaTestStreamInnerVlan2EtherType, bertTestStreamMonRxBitErrsSinceLastSync=bertTestStreamMonRxBitErrsSinceLastSync, f3EsaProbeHistorySoamPmExtMinP2RFlr=f3EsaProbeHistorySoamPmExtMinP2RFlr, esaProbeHistorySumOfSqNegR2PJitter=esaProbeHistorySumOfSqNegR2PJitter, esaProbeHistoryR2PLostPkts=esaProbeHistoryR2PLostPkts, ecpaConfigStreamUdpDstPort=ecpaConfigStreamUdpDstPort, ecpaConfigStreamTable=ecpaConfigStreamTable, esaProbeInnerVlanId=esaProbeInnerVlanId, ecpaTestStreamMonRx1stFrame7Octets=ecpaTestStreamMonRx1stFrame7Octets, esaProbeStatsIntervalType=esaProbeStatsIntervalType, esaProbeCOSType=esaProbeCOSType, esaProbeDistStatsConfigType=esaProbeDistStatsConfigType, esaProbeSLAMonitorType=esaProbeSLAMonitorType, bertTestStreamErrInjectRate=bertTestStreamErrInjectRate, esaProbeStatsR2PErredPkts=esaProbeStatsR2PErredPkts, esaProbeHistoryMaxPosR2PJitter=esaProbeHistoryMaxPosR2PJitter, bertTestStreamMonRxErrRateSinceStart=bertTestStreamMonRxErrRateSinceStart, f3EsaProbeHistorySoamPmExtP2rAvailableTime=f3EsaProbeHistorySoamPmExtP2rAvailableTime, esaProbeHistoryCOS=esaProbeHistoryCOS, esaReflectorCreationTime=esaReflectorCreationTime, esaProbeHistoryMinRoundTripDelay=esaProbeHistoryMinRoundTripDelay, esaProbeStatsAvgRoundTripDelay=esaProbeStatsAvgRoundTripDelay, esaProbeStatsEntry=esaProbeStatsEntry, esaProbeHistorySumOfSqPosP2RJitter=esaProbeHistorySumOfSqPosP2RJitter, bertTestStreamMonRxErrRateMultiplierSinceLastSync=bertTestStreamMonRxErrRateMultiplierSinceLastSync, esaProbeHistorySumRoundTripDelay=esaProbeHistorySumRoundTripDelay, esaProbeDistHistoryGTMax=esaProbeDistHistoryGTMax, esaProbeStatsIndex=esaProbeStatsIndex, esaProbeDistHistoryBinIndex=esaProbeDistHistoryBinIndex, esaProbeDestinationStorageType=esaProbeDestinationStorageType, esaProbeInner2VlanId=esaProbeInner2VlanId, esaProbeDistStatsBinLower=esaProbeDistStatsBinLower, f3EsaProbeHistorySoamPmExtElapsedTime=f3EsaProbeHistorySoamPmExtElapsedTime, esaProbeStatsSumOfSqPosR2PJitter=esaProbeStatsSumOfSqPosR2PJitter, f3EsaProbeStatsSoamPmExtNumP2RFDR=f3EsaProbeStatsSoamPmExtNumP2RFDR, bertTestStreamUserPatternLength=bertTestStreamUserPatternLength, bertTestStreamMonRxPattern=bertTestStreamMonRxPattern, esaProbeStatsSumOfSqNegP2RJitter=esaProbeStatsSumOfSqNegP2RJitter, ecpaControlRowStatus=ecpaControlRowStatus, ecpaConfigStreamRate=ecpaConfigStreamRate, esaProbeDestinationIndex=esaProbeDestinationIndex, esaProbeHistoryValid=esaProbeHistoryValid, esaReflectorIpAddress=esaReflectorIpAddress, esaProbeDistStatsConfigLowBoundOfBin5=esaProbeDistStatsConfigLowBoundOfBin5, esaProbeDistStatsTable=esaProbeDistStatsTable, f3EsaProbeStatsSoamPmExtAvgAbsRTJitter=f3EsaProbeStatsSoamPmExtAvgAbsRTJitter, ecpaConfigStreamOuterVlanId=ecpaConfigStreamOuterVlanId, esaProbeDistHistoryTime=esaProbeDistHistoryTime, esaProbeDistStatsBinUpper=esaProbeDistStatsBinUpper, bertControlTestStatus=bertControlTestStatus, esaProbeDistStatsAction=esaProbeDistStatsAction, bertTestStreamName=bertTestStreamName, esaProbeScheduleGroupAction=esaProbeScheduleGroupAction, esaReflectorIndex=esaReflectorIndex, f3EsaProbeStatsSoamPmExtTable=f3EsaProbeStatsSoamPmExtTable, f3EsaProbeStatsSoamPmExtNumR2PFDR=f3EsaProbeStatsSoamPmExtNumR2PFDR, bertConfigStreamEntry=bertConfigStreamEntry, ecpaConfigStreamInnerVlanPrio=ecpaConfigStreamInnerVlanPrio, ecpaTestStreamEntry=ecpaTestStreamEntry, BerTestStatus=BerTestStatus, ecpaConfigStreamIpV6Address=ecpaConfigStreamIpV6Address, ecpaTestStreamMonRx1stFrame4Octets=ecpaTestStreamMonRx1stFrame4Octets, bertTestStreamMonSyncState=bertTestStreamMonSyncState, esaProbeScheduleGroupType=esaProbeScheduleGroupType, esaReflectorSecondaryState=esaReflectorSecondaryState, esaProbeStatsThresholdAbsValueHi=esaProbeStatsThresholdAbsValueHi, esaProbeStatsThresholdTable=esaProbeStatsThresholdTable, bertTestStreamErrInjectEnabled=bertTestStreamErrInjectEnabled, esaProbeIpPrioMapMode=esaProbeIpPrioMapMode, ecpaTestStreamFrameSize=ecpaTestStreamFrameSize, bertConfigStreamErrInjectEnabled=bertConfigStreamErrInjectEnabled, esaProbeDistStatsConfigIndex=esaProbeDistStatsConfigIndex, ecpaControlTestType=ecpaControlTestType, ecpaTestStreamDestinationMAC=ecpaTestStreamDestinationMAC, ecpaControlDuration=ecpaControlDuration, ecpaConfigStreamName=ecpaConfigStreamName, f3EsaProbeStatsSoamPmExtElapsedTime=f3EsaProbeStatsSoamPmExtElapsedTime, f3EsaProbeHistorySoamPmExtAvgAbsRTJitter=f3EsaProbeHistorySoamPmExtAvgAbsRTJitter, ecpaConfigStreamPayloadType=ecpaConfigStreamPayloadType, esaProbeHistoryAvgRoundTripDelay=esaProbeHistoryAvgRoundTripDelay, esaProbeHistoryMaxAbsR2PJitter=esaProbeHistoryMaxAbsR2PJitter, ecpaTestStreamMonRxPercentSuccess=ecpaTestStreamMonRxPercentSuccess, esaProbeDirection=esaProbeDirection, esaProbeRowStatus=esaProbeRowStatus, bertTestStreamTxPattern=bertTestStreamTxPattern, esaProbeAdminState=esaProbeAdminState, bertControlTable=bertControlTable, esaProbeHistoryNumPosR2PJitter=esaProbeHistoryNumPosR2PJitter, ecpaControlTable=ecpaControlTable, esaProbeStatsCOS=esaProbeStatsCOS, ecpaConfigStreamIpVersion=ecpaConfigStreamIpVersion, ecpaTestStreamSourceMAC=ecpaTestStreamSourceMAC, esaProbeDistStatsLTMin=esaProbeDistStatsLTMin, ecpaTestStreamInnerVlanPrio=ecpaTestStreamInnerVlanPrio, f3EsaProbeStatsSoamPmExtR2pAvailableDeltaTs=f3EsaProbeStatsSoamPmExtR2pAvailableDeltaTs, ecpaTestStreamMonRx1stFrame9Octets=ecpaTestStreamMonRx1stFrame9Octets, esaProbeStatsSumOfSqNegR2PJitter=esaProbeStatsSumOfSqNegR2PJitter, ecpaTestStreamUdpControl=ecpaTestStreamUdpControl, ecpaConfigStreamInnerVlanEtherType=ecpaConfigStreamInnerVlanEtherType, ecpaControlStorageType=ecpaControlStorageType, esaProbeStatsNumNegR2PJitter=esaProbeStatsNumNegR2PJitter, esaProbeDistHistoryDestinationIndex=esaProbeDistHistoryDestinationIndex, bertControlEntry=bertControlEntry, esaProbeStatsMinOnewayR2PDelay=esaProbeStatsMinOnewayR2PDelay, esaProbeStatsSumOnewayP2RDelay=esaProbeStatsSumOnewayP2RDelay, esaProbeAssocSchedGroup=esaProbeAssocSchedGroup, cmServAssuranceNotifications=cmServAssuranceNotifications, esaProbeHistoryP2RPkts=esaProbeHistoryP2RPkts, f3EsaProbeStatsSoamPmExtMaxP2RFDR=f3EsaProbeStatsSoamPmExtMaxP2RFDR, ecpaTestStreamMonRx1stFrame1Octets=ecpaTestStreamMonRx1stFrame1Octets, esaProbeStatsSumOfSqOnewayP2RDelay=esaProbeStatsSumOfSqOnewayP2RDelay, bertTestStreamTable=bertTestStreamTable, ecpaTestStreamPayloadType=ecpaTestStreamPayloadType, ecpaTestStreamMonRx1stFrame3Octets=ecpaTestStreamMonRx1stFrame3Octets, esaReflectorSuspended=esaReflectorSuspended, esaProbeHistoryNumNegR2PJitter=esaProbeHistoryNumNegR2PJitter, bertTestStreamIndex=bertTestStreamIndex, esaProbeDistStatsConfigLowBoundOfBin1=esaProbeDistStatsConfigLowBoundOfBin1, ecpaTestStreamOuterVlanEtherType=ecpaTestStreamOuterVlanEtherType, esaReflectorDirection=esaReflectorDirection, esaProbeScheduleGroupProbeList=esaProbeScheduleGroupProbeList, cmServAssuranceGenNotifGroup=cmServAssuranceGenNotifGroup, esaProbeHistoryIndex=esaProbeHistoryIndex, esaProbeHistoryMaxOnewayR2PDelay=esaProbeHistoryMaxOnewayR2PDelay, esaProbeStatsP2RErredPkts=esaProbeStatsP2RErredPkts)
mibBuilder.exportSymbols("CM-SA-MIB", esaProbeDestMepMacAddr=esaProbeDestMepMacAddr, esaProbeStatsMinOnewayP2RDelay=esaProbeStatsMinOnewayP2RDelay, esaProbeHistoryY1731RxDmSamples=esaProbeHistoryY1731RxDmSamples, f3EsaProbeHistorySoamPmExtMaxP2RFlr=f3EsaProbeHistorySoamPmExtMaxP2RFlr, BertControlAction=BertControlAction, bertTestStreamUserPattern=bertTestStreamUserPattern, f3EsaProbeHistorySoamPmExtMaxP2RFDR=f3EsaProbeHistorySoamPmExtMaxP2RFDR, esaProbeDistStatsCOS=esaProbeDistStatsCOS, ecpaTestStreamMonRxFrames=ecpaTestStreamMonRxFrames, esaProbeStatsY1731R2PNegLossOccurrences=esaProbeStatsY1731R2PNegLossOccurrences, ecpaTestStreamSignature=ecpaTestStreamSignature, ecpaTestStreamInnerVlanId=ecpaTestStreamInnerVlanId, esaProbeStatsSumOfSqRoundTripDelay=esaProbeStatsSumOfSqRoundTripDelay, esaProbeOperationalState=esaProbeOperationalState, esaProbeSrcSubnetMask=esaProbeSrcSubnetMask, esaProbeDistStatsConfigLowBoundOfBin4=esaProbeDistStatsConfigLowBoundOfBin4, esaProbeHistorySumOfSqAbsP2RJitter=esaProbeHistorySumOfSqAbsP2RJitter, esaProbeCOSConfigRowStatus=esaProbeCOSConfigRowStatus, esaProbeHistoryR2PPkts=esaProbeHistoryR2PPkts, esaProbeInnerVlanPrio=esaProbeInnerVlanPrio, f3EsaProbeStatsSoamPmExtP2rAvailableDeltaTs=f3EsaProbeStatsSoamPmExtP2rAvailableDeltaTs, ecpaConfigStreamUdpSrcPort=ecpaConfigStreamUdpSrcPort, esaReflectorTable=esaReflectorTable, esaProbeStatsMaxOnewayP2RDelay=esaProbeStatsMaxOnewayP2RDelay, esaProbeDistStatsConfigLowBoundOfBin9=esaProbeDistStatsConfigLowBoundOfBin9, f3EsaProbeStatsSoamPmExtP2rAvailableTime=f3EsaProbeStatsSoamPmExtP2rAvailableTime, ecpaTestStreamUdpDstPort=ecpaTestStreamUdpDstPort, ecpaConfigStreamInnerVlan2Id=ecpaConfigStreamInnerVlan2Id, ecpaTestStreamMonRxBitRate=ecpaTestStreamMonRxBitRate, f3EsaProbeHistorySoamPmExtNumR2PFDR=f3EsaProbeHistorySoamPmExtNumR2PFDR, f3EsaProbeStatsSoamPmExtSumRTFDR=f3EsaProbeStatsSoamPmExtSumRTFDR, esaProbeHistoryAvgAbsP2RJitter=esaProbeHistoryAvgAbsP2RJitter, BertPattern=BertPattern, bertTestStreamMonOOSSsSinceStart=bertTestStreamMonOOSSsSinceStart, EsaProbePktIntervalType=EsaProbePktIntervalType, esaProbeDestinationMepMacAddr=esaProbeDestinationMepMacAddr, ecpaTestStreamMonTxFrames=ecpaTestStreamMonTxFrames, esaProbeProtocol=esaProbeProtocol, esaProbeStatsMaxOnewayR2PDelay=esaProbeStatsMaxOnewayR2PDelay, esaProbeInterPktGap=esaProbeInterPktGap, ecpaTestStreamInnerVlan2Enabled=ecpaTestStreamInnerVlan2Enabled, f3EsaProbeHistorySoamPmExtTable=f3EsaProbeHistorySoamPmExtTable, f3EsaProbeHistorySoamPmExtMinAbsRTJitter=f3EsaProbeHistorySoamPmExtMinAbsRTJitter, esaProbeHistoryAvgAbsR2PJitter=esaProbeHistoryAvgAbsR2PJitter, esaProbeVlanTagEtherType=esaProbeVlanTagEtherType, esaProbeDistStatsConfigLowBoundOfBin3=esaProbeDistStatsConfigLowBoundOfBin3, bertConfigStreamName=bertConfigStreamName, f3EsaProbeStatsSoamPmExtMinAbsRTJitter=f3EsaProbeStatsSoamPmExtMinAbsRTJitter, esaProbeY1731DmmPktSize=esaProbeY1731DmmPktSize, esaProbeStatsR2PLostPkts=esaProbeStatsR2PLostPkts, esaProbeDistHistoryAction=esaProbeDistHistoryAction, esaProbeStatsThresholdVariable=esaProbeStatsThresholdVariable, esaProbeDistStatsBinTable=esaProbeDistStatsBinTable, ecpaTestStreamRate=ecpaTestStreamRate, f3EsaProbeStatsSoamPmExtMaxP2RFlr=f3EsaProbeStatsSoamPmExtMaxP2RFlr, esaProbeStatsOutOfSeqErrs=esaProbeStatsOutOfSeqErrs, esaProbeCOSConfigEntry=esaProbeCOSConfigEntry, esaProbeIndex=esaProbeIndex, esaProbeDistStatsConfigNumBins=esaProbeDistStatsConfigNumBins, esaProbeStatsMaxNegP2RJitter=esaProbeStatsMaxNegP2RJitter, esaProbeCOSConfigStorageType=esaProbeCOSConfigStorageType, ecpaControlStream2=ecpaControlStream2, cmServAssuranceNotifGroup=cmServAssuranceNotifGroup, esaProbeStatsSumAbsP2RJitter=esaProbeStatsSumAbsP2RJitter, ecpaTestStreamTable=ecpaTestStreamTable, esaProbeVlanId=esaProbeVlanId, esaProbeSOAMInterval=esaProbeSOAMInterval, EsaProbeSLAMonitorType=EsaProbeSLAMonitorType, EsaReflectorDirection=EsaReflectorDirection, EcpaTestType=EcpaTestType, ecpaTestStreamMonEndTime=ecpaTestStreamMonEndTime, ecpaConfigStreamDestinationMAC=ecpaConfigStreamDestinationMAC, f3EsaProbeHistorySoamPmExtMinR2PFlr=f3EsaProbeHistorySoamPmExtMinR2PFlr, esaProbeStatsSumPosR2PJitter=esaProbeStatsSumPosR2PJitter, esaProbeStatsY1731P2RFrames=esaProbeStatsY1731P2RFrames, f3EsaProbeStatsSoamPmExtP2rUnavailableTime=f3EsaProbeStatsSoamPmExtP2rUnavailableTime, f3EsaProbeHistorySoamPmExtSumOfSqRTFDR=f3EsaProbeHistorySoamPmExtSumOfSqRTFDR, f3EsaProbeStatsSoamPmExtMinP2RFlr=f3EsaProbeStatsSoamPmExtMinP2RFlr, esaProbeStatsMinPosP2RJitter=esaProbeStatsMinPosP2RJitter, f3EsaProbeCOSConfigSoamPmExtAvailFlrThreshold=f3EsaProbeCOSConfigSoamPmExtAvailFlrThreshold, ecpaControlNumFrames=ecpaControlNumFrames, ecpaTestStreamDestIpV6Address=ecpaTestStreamDestIpV6Address, esaProbeAlias=esaProbeAlias, esaReflectorEntry=esaReflectorEntry, f3EsaProbeHistorySoamPmExtSumR2PFDR=f3EsaProbeHistorySoamPmExtSumR2PFDR, esaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus=esaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus, esaProbeStatsSumPosP2RJitter=esaProbeStatsSumPosP2RJitter, f3EsaProbeHistorySoamPmExtR2pUnavailableDeltaTs=f3EsaProbeHistorySoamPmExtR2pUnavailableDeltaTs, ecpaConfigStreamInnerVlanEnabled=ecpaConfigStreamInnerVlanEnabled, esaProbeStatsAvgAbsP2RJitter=esaProbeStatsAvgAbsP2RJitter, esaProbeScheduleGroupStorageType=esaProbeScheduleGroupStorageType, esaProbeInner2VlanTagEtherType=esaProbeInner2VlanTagEtherType, esaProbeDistStatsNumBins=esaProbeDistStatsNumBins, f3EsaProbeHistorySoamPmExtP2rUnavailableTime=f3EsaProbeHistorySoamPmExtP2rUnavailableTime, esaProbeScheduleGroupEntry=esaProbeScheduleGroupEntry, ecpaTestStreamIpV6Address=ecpaTestStreamIpV6Address, esaProbeDistHistoryBinTable=esaProbeDistHistoryBinTable, f3EsaProbeStatsSoamPmExtNumRTFDR=f3EsaProbeStatsSoamPmExtNumRTFDR, bertTestStreamMonRxESsSinceStart=bertTestStreamMonRxESsSinceStart, bertConfigStreamErrInjectRateMultiplier=bertConfigStreamErrInjectRateMultiplier, esaProbeSourcePort=esaProbeSourcePort, esaProbeStatsTable=esaProbeStatsTable, esaProbeDestinationMepId=esaProbeDestinationMepId, bertTestStreamMonEndTime=bertTestStreamMonEndTime, esaProbeCOSConfigIndex=esaProbeCOSConfigIndex, bertTestStreamMonRxErrRateMultiplierSinceStart=bertTestStreamMonRxErrRateMultiplierSinceStart, esaProbeStatsMaxPosR2PJitter=esaProbeStatsMaxPosR2PJitter, esaProbeDistStatsGTMax=esaProbeDistStatsGTMax, EsaProbeDirection=EsaProbeDirection, esaProbeStatsMaxRoundTripDelay=esaProbeStatsMaxRoundTripDelay, f3EsaProbeHistorySoamPmExtAvgP2RFDR=f3EsaProbeHistorySoamPmExtAvgP2RFDR, esaProbeHistorySumOnewayP2RDelay=esaProbeHistorySumOnewayP2RDelay, esaProbeCOSConfigInterval=esaProbeCOSConfigInterval, esaProbeStatsNumNegP2RJitter=esaProbeStatsNumNegP2RJitter, ecpaConfigStreamInnerVlan2EtherType=ecpaConfigStreamInnerVlan2EtherType, esaProbeHistoryY1731R2PFrames=esaProbeHistoryY1731R2PFrames, esaProbeTable=esaProbeTable, esaProbeHistoryTime=esaProbeHistoryTime, esaProbeHistoryNumNegP2RJitter=esaProbeHistoryNumNegP2RJitter, esaProbeStatsValid=esaProbeStatsValid, esaProbeStatsMinPosR2PJitter=esaProbeStatsMinPosR2PJitter, esaProbeCOSConfigslmPktSize=esaProbeCOSConfigslmPktSize, f3EsaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus=f3EsaProbeCOSConfigSoamPmExtFlrDeltaTNumLmPdus, esaProbeDestIpAddress=esaProbeDestIpAddress, esaProbeHistoryAvgOnewayP2RDelay=esaProbeHistoryAvgOnewayP2RDelay, ecpaConfigStreamInnerVlan2Enabled=ecpaConfigStreamInnerVlan2Enabled, ecpaTestStreamMonRxMinDelay=ecpaTestStreamMonRxMinDelay, f3EsaProbeHistorySoamPmExtSumAbsRTJitter=f3EsaProbeHistorySoamPmExtSumAbsRTJitter, EsaProbeProtocol=EsaProbeProtocol, esaProbeHistoryMaxOnewayP2RDelay=esaProbeHistoryMaxOnewayP2RDelay, esaProbeHistoryP2RErredPkts=esaProbeHistoryP2RErredPkts, ecpaTestStreamMonRxOutOfSeqErrs=ecpaTestStreamMonRxOutOfSeqErrs, ecpaTestStreamInnerVlan2Prio=ecpaTestStreamInnerVlan2Prio, f3EsaProbeHistorySoamPmExtMaxAbsRTJitter=f3EsaProbeHistorySoamPmExtMaxAbsRTJitter, ecpaTestStreamInnerVlan2Id=ecpaTestStreamInnerVlan2Id, esaProbePktsPerSample=esaProbePktsPerSample, esaProbeDistStatsConfigMinVal=esaProbeDistStatsConfigMinVal, esaProbeDistStatsEntry=esaProbeDistStatsEntry, esaProbeStatsR2PPkts=esaProbeStatsR2PPkts, ecpaTestStreamMonRxSeqGaps=ecpaTestStreamMonRxSeqGaps, f3EsaProbeHistorySoamPmExtSumOfSqAbsRTJitter=f3EsaProbeHistorySoamPmExtSumOfSqAbsRTJitter, esaProbeDestinationMepType=esaProbeDestinationMepType, esaProbeScheduleGroupTable=esaProbeScheduleGroupTable, esaProbeStatsThresholdIndex=esaProbeStatsThresholdIndex, ecpaConfigStreamDestIpV6Address=ecpaConfigStreamDestIpV6Address, ecpaTestStreamName=ecpaTestStreamName, esaProbeDistStatsConfigEntry=esaProbeDistStatsConfigEntry, esaProbeSLMMulticastMACEnabled=esaProbeSLMMulticastMACEnabled, esaProbeY1731DmmInterval=esaProbeY1731DmmInterval, f3EsaProbeStatsSoamPmExtR2PAvailableTime=f3EsaProbeStatsSoamPmExtR2PAvailableTime, esaProbeCOSConfigPktSize=esaProbeCOSConfigPktSize, f3EsaProbeStatsSoamPmExtAvgP2RFDR=f3EsaProbeStatsSoamPmExtAvgP2RFDR, esaProbeScheduleGroupRowStatus=esaProbeScheduleGroupRowStatus, esaProbeHistoryAvgOnewayR2PDelay=esaProbeHistoryAvgOnewayR2PDelay, esaProbeCOSConfigSoamPmExtAvailFlrThreshold=esaProbeCOSConfigSoamPmExtAvailFlrThreshold, f3EsaProbeHistorySoamPmExtP2rUnavailableDeltaTs=f3EsaProbeHistorySoamPmExtP2rUnavailableDeltaTs, ecpaTestStreamIpV4Address=ecpaTestStreamIpV4Address, ecpaConfigStreamSourceMAC=ecpaConfigStreamSourceMAC, f3EsaProbeHistorySoamPmExtNumRTFDR=f3EsaProbeHistorySoamPmExtNumRTFDR, esaProbeInnerVlanTagEnabled=esaProbeInnerVlanTagEnabled, esaProbeDistHistoryCOSIndex=esaProbeDistHistoryCOSIndex, esaProbePktSize=esaProbePktSize, esaProbeDistHistoryTable=esaProbeDistHistoryTable, esaProbeScheduleGroupStartTime=esaProbeScheduleGroupStartTime, ecpaControlAction=ecpaControlAction, esaProbeStatsSumOfSqAbsR2PJitter=esaProbeStatsSumOfSqAbsR2PJitter, esaProbeHistorySumPosP2RJitter=esaProbeHistorySumPosP2RJitter, f3EsaProbeStatsSoamPmExtR2PSeverelyErroredDeltaTs=f3EsaProbeStatsSoamPmExtR2PSeverelyErroredDeltaTs, f3EsaProbeCOSConfigSoamPmExtTable=f3EsaProbeCOSConfigSoamPmExtTable, bertControlTestMode=bertControlTestMode, esaProbeInner2VlanPrio=esaProbeInner2VlanPrio, esaProbeHistoryMaxPosP2RJitter=esaProbeHistoryMaxPosP2RJitter, esaProbeStatsSumRoundTripDelay=esaProbeStatsSumRoundTripDelay, esaProbeDistHistoryBinNumSamples=esaProbeDistHistoryBinNumSamples, esaReflectorIpPriority=esaReflectorIpPriority, esaProbeY1731LmmInterval=esaProbeY1731LmmInterval, esaProbeStatsThresholdEntry=esaProbeStatsThresholdEntry, f3EsaProbeHistorySoamPmExtR2pAvailableDeltaTs=f3EsaProbeHistorySoamPmExtR2pAvailableDeltaTs, esaProbeCOSConfigSoamPmExtConDeltaTsForAvail=esaProbeCOSConfigSoamPmExtConDeltaTsForAvail, esaProbeStatsP2RPkts=esaProbeStatsP2RPkts, esaProbeDistStatsConfigTable=esaProbeDistStatsConfigTable, EsaProbePmIntervalType=EsaProbePmIntervalType, bertTestStreamMonRxESsSinceLastSync=bertTestStreamMonRxESsSinceLastSync, bertTestStreamMonRxBitsSinceLastSync=bertTestStreamMonRxBitsSinceLastSync, esaProbeScheduleGroupActionProbeList=esaProbeScheduleGroupActionProbeList, EcpaType=EcpaType, esaProbeHistoryOutOfSeqErrs=esaProbeHistoryOutOfSeqErrs, esaProbeHistoryP2RLostPkts=esaProbeHistoryP2RLostPkts, ecpaControlStream3=ecpaControlStream3, f3EsaProbeCOSConfigSoamPmExtConDeltaTsForAvail=f3EsaProbeCOSConfigSoamPmExtConDeltaTsForAvail, f3EsaProbeStatsSoamPmExtNumAbsRTJitter=f3EsaProbeStatsSoamPmExtNumAbsRTJitter, f3EsaProbeHistorySoamPmExtP2rSeverelyErroredDeltaTs=f3EsaProbeHistorySoamPmExtP2rSeverelyErroredDeltaTs, EsaProbeHistoryIntervalType=EsaProbeHistoryIntervalType, esaProbeDistStatsDestinationIndex=esaProbeDistStatsDestinationIndex, ecpaConfigStreamIpV4Address=ecpaConfigStreamIpV4Address, ecpaTestStreamOuterVlanPrio=ecpaTestStreamOuterVlanPrio, BertSyncState=BertSyncState, ecpaConfigStreamIndex=ecpaConfigStreamIndex, esaProbeHistoryMinAbsR2PJitter=esaProbeHistoryMinAbsR2PJitter, bertConfigStreamUserPattern=bertConfigStreamUserPattern, esaProbeDistStatsConfigLowBoundOfBin2=esaProbeDistStatsConfigLowBoundOfBin2, esaProbeSecondaryState=esaProbeSecondaryState, esaProbeMultiCOSEnabled=esaProbeMultiCOSEnabled, f3EsaProbeStatsSoamPmExtAvgP2RFlr=f3EsaProbeStatsSoamPmExtAvgP2RFlr, f3EsaProbeHistorySoamPmExtR2PSeverelyErroredDeltaTs=f3EsaProbeHistorySoamPmExtR2PSeverelyErroredDeltaTs, ecpaTestStreamMonRx1stFrame8Octets=ecpaTestStreamMonRx1stFrame8Octets, f3EsaProbeHistorySoamPmExtSumOfSqP2RFDR=f3EsaProbeHistorySoamPmExtSumOfSqP2RFDR, cmReleaseLoopbackTrap=cmReleaseLoopbackTrap, esaProbeStatsMaxPosP2RJitter=esaProbeStatsMaxPosP2RJitter, esaProbeHistoryMinNegP2RJitter=esaProbeHistoryMinNegP2RJitter, cmServAssuranceConformance=cmServAssuranceConformance, f3EsaProbeHistorySoamPmExtNumP2RFDR=f3EsaProbeHistorySoamPmExtNumP2RFDR, esaProbeHistorySeqGaps=esaProbeHistorySeqGaps, esaProbeHistorySumAbsP2RJitter=esaProbeHistorySumAbsP2RJitter, esaProbeHistoryEntry=esaProbeHistoryEntry, esaProbeHistoryY1731P2RNegLossOccurrences=esaProbeHistoryY1731P2RNegLossOccurrences, esaProbeDistStatsConfigLowBoundOfBin6=esaProbeDistStatsConfigLowBoundOfBin6, esaProbeStatsAvgOnewayP2RDelay=esaProbeStatsAvgOnewayP2RDelay, esaProbeStatsY1731RxLmSamples=esaProbeStatsY1731RxLmSamples, esaProbeStatsY1731RxDmSamples=esaProbeStatsY1731RxDmSamples, f3EsaProbeHistorySoamPmExtR2PAvailableTime=f3EsaProbeHistorySoamPmExtR2PAvailableTime, esaProbeStatsNumPosR2PJitter=esaProbeStatsNumPosR2PJitter, esaProbeDistStatsCOSIndex=esaProbeDistStatsCOSIndex, esaProbeSrcIpAddress=esaProbeSrcIpAddress, esaProbeHistoryAction=esaProbeHistoryAction, f3EsaProbeHistorySoamPmExtEntry=f3EsaProbeHistorySoamPmExtEntry, esaProbeDestinationRowStatus=esaProbeDestinationRowStatus, f3EsaProbeHistorySoamPmExtSumP2RFDR=f3EsaProbeHistorySoamPmExtSumP2RFDR, f3EsaProbeHistorySoamPmExtMaxR2PFDR=f3EsaProbeHistorySoamPmExtMaxR2PFDR, ecpaTestStreamRateHi=ecpaTestStreamRateHi, ecpaTestStreamConfigChanged=ecpaTestStreamConfigChanged, esaProbeStatsMaxNegR2PJitter=esaProbeStatsMaxNegR2PJitter, esaProbeStatsMinNegP2RJitter=esaProbeStatsMinNegP2RJitter, EcpaControlAction=EcpaControlAction, esaProbeHistoryNumAbsR2PJitter=esaProbeHistoryNumAbsR2PJitter, esaProbeDistHistoryIndex=esaProbeDistHistoryIndex, esaProbeThresholdCrossingAlert=esaProbeThresholdCrossingAlert, ecpaTestStreamDestIpV4Address=ecpaTestStreamDestIpV4Address, esaProbeCOSConfigTable=esaProbeCOSConfigTable, esaProbeHistoryY1731P2RFrames=esaProbeHistoryY1731P2RFrames, esaProbeHistoryMaxNegR2PJitter=esaProbeHistoryMaxNegR2PJitter, esaProbeStatsAvgAbsR2PJitter=esaProbeStatsAvgAbsR2PJitter, bertTestStreamMonStartTime=bertTestStreamMonStartTime, esaProbeDistHistoryInterval=esaProbeDistHistoryInterval, bertConfigStreamIndex=bertConfigStreamIndex, cmEcpaGroup=cmEcpaGroup, esaProbeStatsR2PSyncErrs=esaProbeStatsR2PSyncErrs, f3EsaProbeStatsSoamPmExtSumR2PFDR=f3EsaProbeStatsSoamPmExtSumR2PFDR, esaProbeDistHistoryEntry=esaProbeDistHistoryEntry, ecpaConfigStreamUsePortSourceMAC=ecpaConfigStreamUsePortSourceMAC, ecpaTestStreamMonRx1stFrame6Octets=ecpaTestStreamMonRx1stFrame6Octets, ecpaTestStreamOuterVlanEnabled=ecpaTestStreamOuterVlanEnabled, esaProbeHistoryMaxAbsP2RJitter=esaProbeHistoryMaxAbsP2RJitter, f3EsaProbeStatsSoamPmExtR2PUnavailableTime=f3EsaProbeStatsSoamPmExtR2PUnavailableTime)
mibBuilder.exportSymbols("CM-SA-MIB", f3EsaProbeHistorySoamPmExtNumAbsRTJitter=f3EsaProbeHistorySoamPmExtNumAbsRTJitter, esaProbeDestMepId=esaProbeDestMepId, EsaProbeDistStatsType=EsaProbeDistStatsType, ecpaControlIndex=ecpaControlIndex, ecpaTestStreamMonRx1stFrameSize=ecpaTestStreamMonRx1stFrameSize, esaProbeStatsCOSIndex=esaProbeStatsCOSIndex, esaProbeInner2VlanTagEnabled=esaProbeInner2VlanTagEnabled, f3EsaProbeHistorySoamPmExtMaxRTFDR=f3EsaProbeHistorySoamPmExtMaxRTFDR, ecpaControlMonitorPortType=ecpaControlMonitorPortType, esaProbeHistorySumOfSqRoundTripDelay=esaProbeHistorySumOfSqRoundTripDelay, esaProbeDistHistoryNumBins=esaProbeDistHistoryNumBins, esaReflectorAdminState=esaReflectorAdminState, bertConfigStreamUserPatternLength=bertConfigStreamUserPatternLength, esaProbeEntry=esaProbeEntry, esaProbeStatsNumPosP2RJitter=esaProbeStatsNumPosP2RJitter, esaProbeStatsSumNegR2PJitter=esaProbeStatsSumNegR2PJitter, ecpaTestStreamMonRxAvgDelay=ecpaTestStreamMonRxAvgDelay, esaReflectorIpPrioMapMode=esaReflectorIpPrioMapMode, ecpaConfigStreamPrioMapMode=ecpaConfigStreamPrioMapMode, esaProbeSrcMep=esaProbeSrcMep, f3EsaProbeStatsSoamPmExtAvgRTFDR=f3EsaProbeStatsSoamPmExtAvgRTFDR, esaProbeDistStatsBinEntry=esaProbeDistStatsBinEntry, esaProbeHistoryMinOnewayP2RDelay=esaProbeHistoryMinOnewayP2RDelay, esaProbeHistorySumPosR2PJitter=esaProbeHistorySumPosR2PJitter, f3EsaProbeStatsSoamPmExtMinR2PFlr=f3EsaProbeStatsSoamPmExtMinR2PFlr, f3EsaProbeStatsSoamPmExtSumOfSqAbsRTJitter=f3EsaProbeStatsSoamPmExtSumOfSqAbsRTJitter, esaProbeHistoryNumAbsP2RJitter=esaProbeHistoryNumAbsP2RJitter, esaProbeHistoryMinAbsP2RJitter=esaProbeHistoryMinAbsP2RJitter, esaProbeHistorySumAbsR2PJitter=esaProbeHistorySumAbsR2PJitter, esaProbeHistorySumOfSqAbsR2PJitter=esaProbeHistorySumOfSqAbsR2PJitter, f3EsaProbeHistorySoamPmExtSumRTFDR=f3EsaProbeHistorySoamPmExtSumRTFDR, EcpaPayloadType=EcpaPayloadType, EcpaTestStatus=EcpaTestStatus, esaProbeHistoryLostPkts=esaProbeHistoryLostPkts, esaProbeHistoryMinNegR2PJitter=esaProbeHistoryMinNegR2PJitter, esaProbeHistorySumOfSqOnewayR2PDelay=esaProbeHistorySumOfSqOnewayR2PDelay, cmBertGroup=cmBertGroup, bertTestStreamEntry=bertTestStreamEntry, f3EsaProbeHistorySoamPmExtAvgR2PFDR=f3EsaProbeHistorySoamPmExtAvgR2PFDR, f3EsaProbeCOSConfigSoamPmExtEntry=f3EsaProbeCOSConfigSoamPmExtEntry, BerTestMode=BerTestMode, esaProbeStatsY1731P2RNegLossOccurrences=esaProbeStatsY1731P2RNegLossOccurrences, esaProbeHistoryMinPosP2RJitter=esaProbeHistoryMinPosP2RJitter, bertTestStreamMonElapsedTime=bertTestStreamMonElapsedTime, esaReflectorMacAddress=esaReflectorMacAddress, ecpaTestStreamMonStartTime=ecpaTestStreamMonStartTime, esaProbeStatsMaxAbsR2PJitter=esaProbeStatsMaxAbsR2PJitter, cmEsaGroup=cmEsaGroup, esaProbeStatsSumNegP2RJitter=esaProbeStatsSumNegP2RJitter, f3EsaProbeStatsSoamPmExtMaxRTFDR=f3EsaProbeStatsSoamPmExtMaxRTFDR, esaProbeHistorySumOfSqPosR2PJitter=esaProbeHistorySumOfSqPosR2PJitter, esaProbeHistoryMaxRoundTripDelay=esaProbeHistoryMaxRoundTripDelay, esaProbeStatsNumAbsR2PJitter=esaProbeStatsNumAbsR2PJitter, ecpaConfigStreamRateHi=ecpaConfigStreamRateHi, esaProbeHistoryTable=esaProbeHistoryTable, ecpaTestStreamOuterVlanId=ecpaTestStreamOuterVlanId, f3EsaProbeHistorySoamPmExtP2rAvailableDeltaTs=f3EsaProbeHistorySoamPmExtP2rAvailableDeltaTs, esaProbeStorageType=esaProbeStorageType, esaProbeSOAMPktSize=esaProbeSOAMPktSize, f3EsaProbeStatsSoamPmExtSumAbsRTJitter=f3EsaProbeStatsSoamPmExtSumAbsRTJitter, ecpaTestStreamUdpSrcPort=ecpaTestStreamUdpSrcPort, esaProbeStatsMinNegR2PJitter=esaProbeStatsMinNegR2PJitter, esaProbeHistoryMinOnewayR2PDelay=esaProbeHistoryMinOnewayR2PDelay, esaProbeScheduleGroupStatus=esaProbeScheduleGroupStatus, esaProbeStatsThresholdMonValue=esaProbeStatsThresholdMonValue, esaProbeHistoryP2RSyncErrs=esaProbeHistoryP2RSyncErrs, bertTestStreamConfigChangedFlag=bertTestStreamConfigChangedFlag, esaProbeStatsSumOnewayR2PDelay=esaProbeStatsSumOnewayR2PDelay, ecpaConfigStreamEntry=ecpaConfigStreamEntry, bertConfigStreamTxPattern=bertConfigStreamTxPattern, f3EsaProbeStatsSoamPmExtMaxR2PFDR=f3EsaProbeStatsSoamPmExtMaxR2PFDR, esaProbeStatsMaxAbsP2RJitter=esaProbeStatsMaxAbsP2RJitter, f3EsaProbeStatsSoamPmExtAvgR2PFlr=f3EsaProbeStatsSoamPmExtAvgR2PFlr, esaProbeVlanPrio=esaProbeVlanPrio, esaProbeStatsP2RLostPkts=esaProbeStatsP2RLostPkts, f3EsaProbeHistorySoamPmExtAvgP2RFlr=f3EsaProbeHistorySoamPmExtAvgP2RFlr, esaReflectorAction=esaReflectorAction, esaProbeHistorySumOfSqNegP2RJitter=esaProbeHistorySumOfSqNegP2RJitter, esaProbeVlanTagEnabled=esaProbeVlanTagEnabled, esaProbeStatsNumAbsP2RJitter=esaProbeStatsNumAbsP2RJitter, ecpaControlMonitorDirection=ecpaControlMonitorDirection, esaProbeDistStatsConfigLowBoundOfBin7=esaProbeDistStatsConfigLowBoundOfBin7, esaReflectorAlias=esaReflectorAlias, ecpaTestStreamMonRx1stFrame2Octets=ecpaTestStreamMonRx1stFrame2Octets, ecpaControlStream1=ecpaControlStream1)
