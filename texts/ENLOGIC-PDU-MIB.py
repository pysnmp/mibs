#
# PySNMP MIB module ENLOGIC-PDU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enlogic/ENLOGIC-PDU-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:07:46 2024
# On host fv-az1121-719 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
sysName, sysLocation, sysContact = mibBuilder.importSymbols("SNMPv2-MIB", "sysName", "sysLocation", "sysContact")
iso, IpAddress, Counter64, NotificationType, Counter32, Unsigned32, ObjectIdentity, enterprises, Gauge32, Bits, MibIdentifier, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Counter64", "NotificationType", "Counter32", "Unsigned32", "ObjectIdentity", "enterprises", "Gauge32", "Bits", "MibIdentifier", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
DisplayString, TextualConvention, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "TruthValue")
enlogic = ModuleIdentity((1, 3, 6, 1, 4, 1, 38446))
enlogic.setRevisions(('2014-10-28 00:00', '2014-06-05 00:00', '2014-04-30 00:00', '2013-06-05 00:00', '2013-05-31 00:00', '2013-03-28 00:00', '2013-03-21 00:00', '2013-01-24 00:00', '2013-01-06 00:00', '2012-12-28 00:00', '2012-09-28 00:00', '2012-09-25 00:00', '2012-09-18 00:00', '2012-09-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: enlogic.setRevisionsDescriptions(('\n                 1. Add Smart Cabinet related MIB nodes.\n                 ', '\n                 1. Add new trap named espNetworkUp for ES PDU.\n                 ', '\n                 1. Modify description of MIB node pduInputPhaseStatusCurrentState, pduInputPhaseStatusCurrent, pduInputPhaseStatusVoltage, pduInputPhaseStatusActivePower, \n\t\tpduInputPhaseStatusApparentPower and pduInputPhaseStatusPowerFactor.\n                 ', '\n                 1. Change node pduExternalSensorStatusAisle to be writable.\n                 ', '\n                 1. Add MIB node for daisy chain state. \n                 ', '\n                 1. Add one more attribute for all trap oids indicating pdu idx in case of daisy chain. \n                 2. Add one more MIB node in order to reset network management card          \n                 ', '\n                 1. Add MIB node for external sensor unique identifier. \n                 2. Add MIB node for external sensor readings with higher Pricision.           \n                 ', '\n                 1. change external sensor name doorContact to doorSwitch             \n                 ', '\n                 1. change the enum value definition of external sensor threshold setting\n                 2. Add a new node to enable/disable SSH connection  \n                 3. Add one more external sensor unit              \n                 ', '\n                 1. Add one more node to enable/disable sensor                \n                 ', '\n                  1. Added additional indexes.\n\t\t  \n                 ', '\n                  1. Changed descriptions for status readings.\n\t\t  \n                 ', '\n                  1. Changed descriptions for alarm thresholds.\n\t\t  2. Renamed pduOutletMeteredStatusEnergy to pduOutletMeteredStatusResettableEnergy.\n\t\t  3. Added pduUnitConfigOutletPeakPowerReset\n    \n    \t         ', '\n                 1. Changed SYNTAX of pduUnitConfigUpperWarningThreshold SEQUENCE to Unsigned32\n\t\t 2. Changed SYNTAX of pduOutletSwitchedStateOnStartup to Integer32 \n\t\t 3. Changed SYNTAX of pduServerPingEnabled to TruthValue\n\t\t 4. Added trapsInformationIndex to SEQUENCE of TrapsInformationEntry  \n                 \n                 ',))
if mibBuilder.loadTexts: enlogic.setLastUpdated('201506180000Z')
if mibBuilder.loadTexts: enlogic.setOrganization('Enlogic')
if mibBuilder.loadTexts: enlogic.setContactInfo('')
if mibBuilder.loadTexts: enlogic.setDescription('This MIB describes the SNMP functions of the Enlogic PDU.')
pdu = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 1))
pduNamePlate = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 1, 1))
pduUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 1, 2))
pduInputPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 1, 3))
pduCircuitBreaker = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 1, 4))
pduOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 1, 5))
pduExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 1, 6))
pduServerPing = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 1, 7))
pduSmartCabinet = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 1, 8))
pduTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 1, 9))
pduNamePlateTableSize = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNamePlateTableSize.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateTableSize.setDescription('The total number of PDUs')
pduNamePlateTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2), )
if mibBuilder.loadTexts: pduNamePlateTable.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateTable.setDescription('A table of PDU nameplate data')
pduNamePlateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduNamePlateIndex"))
if mibBuilder.loadTexts: pduNamePlateEntry.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateEntry.setDescription('Nameplate data from the PDU being queried. The numbers of entries equals the value of pduNamePlateTableSize.')
pduNamePlateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduNamePlateIndex.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateIndex.setDescription('The index of the PDU nameplate table entry')
pduNamePlateName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNamePlateName.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateName.setDescription('A user-defined string identifying the PDU')
pduNamePlateLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNamePlateLocation.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateLocation.setDescription('A user-defined string identifying the location of PDU')
pduNamePlateInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNamePlateInetAddressType.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateInetAddressType.setDescription('The type of address format')
pduNamePlateIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNamePlateIPAddress.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateIPAddress.setDescription('The current IP address. A value of 0.0.0.0 indicates an error or an unset option')
pduNamePlateInetNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNamePlateInetNetMask.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateInetNetMask.setDescription('The current netmask. A value of 0.0.0.0 indiates an error or an unset option')
pduNamePlateInetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNamePlateInetGateway.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateInetGateway.setDescription('The current gateway. A value of 0.0.0.0 indicates an error or an unset option')
pduNamePlateMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNamePlateMACAddress.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateMACAddress.setDescription('The assigned MAC address for the PDU')
pduNamePlateUTCTimeOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNamePlateUTCTimeOffset.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateUTCTimeOffset.setDescription('The difference in hours and minutes from Coordinated Universal \n\t\tTime(UTC) for the time used in a particular time zone')
pduNamePlateModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNamePlateModelNumber.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateModelNumber.setDescription('The PDU model number')
pduNamePlateSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNamePlateSerialNumber.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateSerialNumber.setDescription('The PDU serial number')
pduNamePlateDateofManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNamePlateDateofManufacture.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateDateofManufacture.setDescription('The date the PDU was manufactured in mm/dd/yyyy format')
pduNamePlateFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNamePlateFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateFirmwareVersion.setDescription('The PDU firmware version')
pduNamePlateFirmwareVersionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNamePlateFirmwareVersionTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateFirmwareVersionTimeStamp.setDescription('Timestamp of when the PDU firmware was last updated')
pduNamePlateType = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pdu", 0), ("inlineMeter", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNamePlateType.setStatus('current')
if mibBuilder.loadTexts: pduNamePlateType.setDescription('The type of Unit, PDU or Inline Meter')
pduUnitTableSize = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitTableSize.setStatus('current')
if mibBuilder.loadTexts: pduUnitTableSize.setDescription('The number of units.')
pduUnitConfigTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2), )
if mibBuilder.loadTexts: pduUnitConfigTable.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigTable.setDescription('A table of PDU configuration data')
pduUnitConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitConfigIndex"))
if mibBuilder.loadTexts: pduUnitConfigEntry.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigEntry.setDescription('Configuration data from the PDU being queried. The number of entries equals the value of pduUnitTableSize')
pduUnitConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduUnitConfigIndex.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigIndex.setDescription('The index of the PDU Unit Config Entry')
pduUnitConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigName.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigName.setDescription('A user-defined string identifying the PDU')
pduUnitConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigLocation.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigLocation.setDescription('A user-defined string identifying the location of the PDU')
pduUnitConfigDisplayOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("displayNormal", 1), ("displayReverse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigDisplayOrientation.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigDisplayOrientation.setDescription('Indicates the intended physical orientation of the oLED display\n\t\tdisplayNormal (1) indicates normal orientation. \n\t\tdisplayReverse (2) indicates upside down orientation')
pduUnitConfigColdstartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigColdstartDelay.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigColdstartDelay.setDescription('The amount of time, specified in seconds, between when power \n\t\tis provided to the PDU and when the PDU start providing basic master\n\t\tpower to the outlets')
pduUnitConfigGlobalOutletStateOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("lastKnownState", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigGlobalOutletStateOnStartup.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigGlobalOutletStateOnStartup.setDescription('The outlet state on device startup; applies to all outlets \n\t\tunless overridden at the outlet level')
pduUnitConfigLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigLowerCriticalThreshold.setDescription('User-defined lower critical unit active power alarm threshold measured in Watts')
pduUnitConfigLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigLowerWarningThreshold.setDescription('User-defined lower non-critical (warning) unit active power alarm threshold measured in Watts')
pduUnitConfigUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigUpperCriticalThreshold.setDescription('User-defined upper critical unit active power alarm threshold measured in Watts')
pduUnitConfigUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigUpperWarningThreshold.setDescription('User-defined upper non-critical (warning) unit active power alarm threshold measured in Watts')
pduUnitConfigAlarmResetThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigAlarmResetThreshold.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigAlarmResetThreshold.setDescription('The hysteresis used for deassertions in Watts')
pduUnitConfigAlarmStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigAlarmStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigAlarmStateChangeDelay.setDescription('The delay measured in samples before a state is asserted. If the value is zero, then the state is asserted as soon as it is detected; if it is non-zero, say n, then the assertion condition must exist for n+1 consecutive samples before the corresponding assertion event is reported.')
pduUnitConfigEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 13), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigEnabledThresholds.setDescription('A bit string indicating which alarm thresholds are enabled')
pduUnitConfigPeakPowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigPeakPowerReset.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigPeakPowerReset.setDescription('Setting this OID to reset (2) will cause the existing peak power value \n\t\tto be replaced by the current load power value. Getting this OID will \n\t\tdo nothing and return the noOperation(1) value. ')
pduUnitConfigEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigEnergyReset.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigEnergyReset.setDescription('Setting this OID to reset (2) will cause the device energy meter value \n\t\tto be reset to zero. Getting this OID in models that support this \n\t\tfeature will do nothing and return the noOperation(1) value. Models \n\t\tthat do not support this feature will respond to this OID with a \n\t\tvalue of notSupported (3). Attempts to set this OID in these models will fail. ')
pduUnitConfigOutletPeakPowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigOutletPeakPowerReset.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigOutletPeakPowerReset.setDescription('Setting this OID to reset (2) will cause the outlet peak power meter value \n\t\tto be reset to zero. Getting this OID in models that support this \n\t\tfeature will do nothing and return the noOperation(1) value. Models \n\t\tthat do not support this feature will respond to this OID with a \n\t\tvalue of notSupported (3). Attempts to set this OID in these models will fail. ')
pduUnitConfigOutletEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigOutletEnergyReset.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigOutletEnergyReset.setDescription('Setting this OID to reset (2) will cause the outlet energy meter value \n\t\tto be reset to zero. Getting this OID in models that support this \n\t\tfeature will do nothing and return the noOperation(1) value. Models \n\t\tthat do not support this feature will respond to this OID with a \n\t\tvalue of notSupported (3). Attempts to set this OID in these models will fail. ')
pduUnitConfigUsb = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigUsb.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigUsb.setDescription('Setting this OID to off(0) will disable the USB port.  Setting this OID to on(1) will enable the USB port.')
pduUnitConfigSsh = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigSsh.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigSsh.setDescription('Setting this OID to off(0) will disable the SSH connection.  Setting this OID to on(1) will enable the SSH connection.')
pduUnitConfigResetNetworkManagementCard = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOperation", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigResetNetworkManagementCard.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigResetNetworkManagementCard.setDescription('Getting this OID will return noOperation(0). Setting this OID to reset(1) will reset NMC.')
pduUnitConfigDaisyChainState = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("daisychain", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitConfigDaisyChainState.setStatus('current')
if mibBuilder.loadTexts: pduUnitConfigDaisyChainState.setDescription('Setting this OID to daisychain(0) will enable daisychain mode.')
pduUnitPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3), )
if mibBuilder.loadTexts: pduUnitPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesTable.setDescription('A table of PDU properties')
pduUnitPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitPropertiesIndex"))
if mibBuilder.loadTexts: pduUnitPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesEntry.setDescription('A unit properties entry containing objects for a particular unit.')
pduUnitPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduUnitPropertiesIndex.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesIndex.setDescription('The index of the PDU properties table entry')
pduUnitPropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesName.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesName.setDescription('A user-defined string identifying the PDU')
pduUnitPropertiesOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesOutletCount.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesOutletCount.setDescription('The total number of outlets on the PDU')
pduUnitPropertiesSwitchedOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesSwitchedOutletCount.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesSwitchedOutletCount.setDescription('The total number of switched outlets on the PDU')
pduUnitPropertiesMeteredOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesMeteredOutletCount.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesMeteredOutletCount.setDescription('The total number of metered outlets on the PDU')
pduUnitPropertiesInputPhaseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesInputPhaseCount.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesInputPhaseCount.setDescription('The total number of phases on the PDU')
pduUnitPropertiesCircuitBreakerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesCircuitBreakerCount.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesCircuitBreakerCount.setDescription('The total number of circuit breaker on the PDU')
pduUnitPropertiesMaxExternalSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesMaxExternalSensorCount.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesMaxExternalSensorCount.setDescription('The maximum number of external sensors that can be connected to the PDU')
pduUnitPropertiesConnExternalSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesConnExternalSensorCount.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesConnExternalSensorCount.setDescription('The current number of external sensors connected to the PDU')
pduUnitPropertiesRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesRatedVoltage.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesRatedVoltage.setDescription('The PDU voltage rating in Volts')
pduUnitPropertiesRatedMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesRatedMaxCurrent.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesRatedMaxCurrent.setDescription('The PDU current rating in Amps')
pduUnitPropertiesRatedFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesRatedFrequency.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesRatedFrequency.setDescription('The PDU frequency rating in Hz')
pduUnitPropertiesRatedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesRatedPower.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesRatedPower.setDescription('The PDU VA (VoltAmps) rating.')
pduUnitPropertiesOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("horizontal", 1), ("vertical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesOrientation.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesOrientation.setDescription('The PDU orientation ')
pduUnitPropertiesOutletLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("seqPhaseToNuetral", 1), ("seqPhaseToPhase", 2), ("seqPhToNeu21PhToPh", 3), ("seqPhToPhGrouped", 4), ("seqPhToNGrouped", 5), ("seqPToN1516PToPGrouped", 6), ("seqPhToPh2xGrouped", 7), ("seqPhToN2xGrouped", 8), ("seqNotApplicable", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesOutletLayout.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesOutletLayout.setDescription('The outlet layout for the PDU. Getting this OID will return outlet layout for the device.\n\t\tseqPhaseToNeutral(1) indicates outlet layout as follows:\n\t\t1:1-N,2:2-N,3:3-N,4:1-N,5:2-N,...\n\t\tseqPhaseToPhase(2) indicates outlet layout as follows:\n\t\t1:1-2,2:2-3,3:3-1,4:1-2,5:2-3,...\n\t\tseqPhToNeu21PhToPh(3) indicates outlet layout as follows:\n\t\t1:1-N,2:2-N...21:3-N,22:1-2,23:2-3,24:3-1,...\n\t\tseqPhToPhGrouped(4) indicates outlet layout as follows:\n\t\tThis unit has 3 outlet groups.  Group 1:1-2, Group 2:2-3, Group 3:3-1.\n\t\tseqPhToNGrouped(5) indicates outlet layout as follows:\n\t\tThis unit has 3 outlet groups.  Group 1:1-N, Group 2:2-N, Group 3:3-N.\n\t\tseqPToN1516PToPGrouped(6) indicates outlet layout as follows:\n\t\tThis unit has 4 outlet groups. Group 1 (Outlets 1-14):1-2,\n\t\tGroup 2 (Outlets 15-16):1-N, Group 3:2-3, Group 4:3-1.\n\t\tseqPhToPh2xGrouped(7) indicates outlet layout as follows:\n\t\tThis unit has 6 outlet groups.  Group 1:1-2, Group 2:1-2, Group 3:2-3,\n\t\tGroup 4:2-3, Group 5:3-1, Group 6:3-1.\n\t\tseqPhToN2xGrouped(8) indicates outlet layout as follows:\n\t\tThis unit has 6 outlet groups.  Group 1:1-N, Group 2:1-N, Group 3:2-N,\n\t\tGroup 4:2-N, Group 5:3-N, Group 6:3-N.\n\t\tseqNotApplicable(9):')
pduUnitPropertiesDaisyChainMemberType = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standalone", 1), ("parent", 2), ("child", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesDaisyChainMemberType.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesDaisyChainMemberType.setDescription('The daisy-chain member type')
pduUnitPropertiesServerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitPropertiesServerCount.setStatus('current')
if mibBuilder.loadTexts: pduUnitPropertiesServerCount.setDescription('The number of servers')
pduUnitStatusTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 2, 4), )
if mibBuilder.loadTexts: pduUnitStatusTable.setStatus('current')
if mibBuilder.loadTexts: pduUnitStatusTable.setDescription('A table of PDU status information')
pduUnitStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 2, 4, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitStatusIndex"))
if mibBuilder.loadTexts: pduUnitStatusEntry.setStatus('current')
if mibBuilder.loadTexts: pduUnitStatusEntry.setDescription('Status information from the PDU being queried')
pduUnitStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduUnitStatusIndex.setStatus('current')
if mibBuilder.loadTexts: pduUnitStatusIndex.setDescription('The index of the PDU status table entry')
pduUnitStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitStatusName.setStatus('current')
if mibBuilder.loadTexts: pduUnitStatusName.setDescription('A user-defined string identifying the PDU')
pduUnitStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("upperCritical", 1), ("upperWarning", 2), ("lowerWarning", 3), ("lowerCritical", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitStatusLoadState.setStatus('current')
if mibBuilder.loadTexts: pduUnitStatusLoadState.setDescription('Returns the present load status of the PDU based on Active Power.')
pduUnitStatusActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitStatusActivePower.setStatus('current')
if mibBuilder.loadTexts: pduUnitStatusActivePower.setDescription('Returns power consumption, in Watts(W), \n\t\tof the PDU being queried.')
pduUnitStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitStatusApparentPower.setStatus('current')
if mibBuilder.loadTexts: pduUnitStatusApparentPower.setDescription('Returns power consumption, in Volt-Amps(VA) \n\t\tof the PDU load being queried.')
pduUnitStatusPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitStatusPeakPower.setStatus('current')
if mibBuilder.loadTexts: pduUnitStatusPeakPower.setDescription('Returns peak power consumption, in Watts(W), \n\t\tof the PDU being queried.')
pduUnitStatusPeakPowerTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitStatusPeakPowerTimestamp.setStatus('current')
if mibBuilder.loadTexts: pduUnitStatusPeakPowerTimestamp.setDescription('Indicates the date and time that peak power consumption occurred')
pduUnitStatusPeakPowerStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitStatusPeakPowerStartTime.setStatus('current')
if mibBuilder.loadTexts: pduUnitStatusPeakPowerStartTime.setDescription('Indicates the date and time of the last device peak power reset')
pduUnitStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitStatusEnergy.setStatus('current')
if mibBuilder.loadTexts: pduUnitStatusEnergy.setDescription('Returns total energy consumed, in tenths of Kilowatt-Hours(kWh), of the PDU over its lifetime.')
pduUnitStatusResettableEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitStatusResettableEnergy.setStatus('current')
if mibBuilder.loadTexts: pduUnitStatusResettableEnergy.setDescription('A user resettable energy meter measuring PDU energy consumption \n\t\tin tenths of kilowatt-hours(kWh).')
pduUnitStatusEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitStatusEnergyStartTime.setStatus('current')
if mibBuilder.loadTexts: pduUnitStatusEnergyStartTime.setDescription('Indicates the date and time of the last device energy meter reset')
pduUnitStatusOutletsEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 2, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitStatusOutletsEnergyStartTime.setStatus('current')
if mibBuilder.loadTexts: pduUnitStatusOutletsEnergyStartTime.setDescription('Indicates the date and time of the last outlets energy meter reset')
pduInputPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduInputPhaseTableSize.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseTableSize.setDescription('The number of PDU Input Phases ')
pduInputPhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2), )
if mibBuilder.loadTexts: pduInputPhaseConfigTable.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigTable.setDescription('A table of PDU Input Phase configuration data')
pduInputPhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitConfigIndex"), (0, "ENLOGIC-PDU-MIB", "pduInputPhaseConfigIndex"))
if mibBuilder.loadTexts: pduInputPhaseConfigEntry.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigEntry.setDescription('An input phase entry containing objects for a particular input phase.')
pduInputPhaseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduInputPhaseConfigIndex.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigIndex.setDescription('The index of the PDU Input Phase configuration table entry')
pduInputPhaseConfigCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduInputPhaseConfigCount.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigCount.setDescription('The total number of Input Phases')
pduInputPhaseConfigOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alwaysAllowTurnOn", 1), ("restrictOnUpperWarning", 2), ("restrictOnUpperCritical", 3), ("notSupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInputPhaseConfigOverloadRestriction.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigOverloadRestriction.setDescription('This OID controls the behavior of a Switched PDU Input Phase when an \n\t\toverload condition is possible and additional outlets are requested \n\t\tto be turned on. Setting this OID to alwaysAllowTurnON (1) will always \n\t\tallow the outlets on the corresponding Input Phase to turn on. Setting \n\t\tthis OID to restrictOnUpperWarning (2) will not allow outlets on the \n\t\tcorresponding Input Phase to turn on if the \n\t\tpduInputPhaseConfigUpperWarningThreshold OID is exceeded. Setting \n\t\tthis OID to restrictOnUpperCritical (3) will not allow outlets on \n\t\tthe corresponding Input Phase to turn on if the \n\t\tpduInputPhaseConfigUpperCriticalThreshold OID is exceeded. Models \n\t\tthat do not support this feature will respond to this OID with a \n\t\tvalue of notSupported (4). Attempts to set this OID in these \n\t\tmodels will fail. ')
pduInputPhaseConfigCurrentLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInputPhaseConfigCurrentLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigCurrentLowerCriticalThreshold.setDescription('User-defined lower critical input phase current alarm threshold in hundredths of Amps(A).')
pduInputPhaseConfigCurrentLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInputPhaseConfigCurrentLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigCurrentLowerWarningThreshold.setDescription('User-defined lower non-critical (warning) input phase current alarm threshold in hundredths of Amps(A).')
pduInputPhaseConfigCurrentUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInputPhaseConfigCurrentUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigCurrentUpperCriticalThreshold.setDescription('User-defined upper critical input phase current alarm threshold in hundredths of Amps(A).')
pduInputPhaseConfigCurrentUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInputPhaseConfigCurrentUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigCurrentUpperWarningThreshold.setDescription('User-defined upper non-critical (warning) input phase current alarm threshold in hundredths of Amps(A).')
pduInputPhaseConfigVoltageLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInputPhaseConfigVoltageLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigVoltageLowerCriticalThreshold.setDescription('User-defined lower critical input phase voltage alarm threshold in Volts(V).')
pduInputPhaseConfigVoltageLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInputPhaseConfigVoltageLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigVoltageLowerWarningThreshold.setDescription('User-defined lower non-critical (warning) input phase voltage alarm threshold in Volts(V).')
pduInputPhaseConfigVoltageUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInputPhaseConfigVoltageUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigVoltageUpperCriticalThreshold.setDescription('User-defined upper critical input phase voltage alarm threshold in Volts(V).')
pduInputPhaseConfigVoltageUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInputPhaseConfigVoltageUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigVoltageUpperWarningThreshold.setDescription('User-defined upper non-critical (warning) input phase voltage alarm threshold in Volts(V).')
pduInputPhaseConfigCurrentAlarmResetThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInputPhaseConfigCurrentAlarmResetThreshold.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigCurrentAlarmResetThreshold.setDescription('The hysteresis used for current alarm deassertions in hundredths of Amps(A).')
pduInputPhaseConfigCurrentAlarmStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInputPhaseConfigCurrentAlarmStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigCurrentAlarmStateChangeDelay.setDescription('The delay measured in samples before a current state is asserted. If the \n\t\tvalue is zero, then the state is asserted as soon as it is \n\t\tdetected; if it is non-zero, say n, then the assertion condition \n\t\tmust exist for n+1 consecutive samples before the corresponding \n\t\tassertion event is reported. ')
pduInputPhaseConfigCurrentEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 14), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInputPhaseConfigCurrentEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigCurrentEnabledThresholds.setDescription('A bit string indicating which current alarm thresholds are enabled.')
pduInputPhaseConfigVoltageAlarmResetThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInputPhaseConfigVoltageAlarmResetThreshold.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigVoltageAlarmResetThreshold.setDescription('The hysteresis used for voltage alarm deassertions in Volts(V).')
pduInputPhaseConfigVoltageAlarmStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInputPhaseConfigVoltageAlarmStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigVoltageAlarmStateChangeDelay.setDescription('The delay measured in samples before a voltage state is asserted. If the \n\t\tvalue is zero, then the state is asserted as soon as it is \n\t\tdetected; if it is non-zero, say n, then the assertion condition \n\t\tmust exist for n+1 consecutive samples before the corresponding \n\t\tassertion event is reported. ')
pduInputPhaseConfigVoltageEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 2, 1, 17), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduInputPhaseConfigVoltageEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseConfigVoltageEnabledThresholds.setDescription('A bit string indicating which voltage alarm thresholds are enabled.')
pduInputPhasePropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 3, 3), )
if mibBuilder.loadTexts: pduInputPhasePropertiesTable.setStatus('current')
if mibBuilder.loadTexts: pduInputPhasePropertiesTable.setDescription('A table of PDU Input Phase properties')
pduInputPhasePropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 3, 3, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitPropertiesIndex"), (0, "ENLOGIC-PDU-MIB", "pduInputPhasePropertiesIndex"))
if mibBuilder.loadTexts: pduInputPhasePropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: pduInputPhasePropertiesEntry.setDescription('An input phase properties entry containing objects for a particular input phase.')
pduInputPhasePropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduInputPhasePropertiesIndex.setStatus('current')
if mibBuilder.loadTexts: pduInputPhasePropertiesIndex.setDescription('The index of the PDU Input Phase status entry')
pduInputPhasePropertiesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduInputPhasePropertiesCount.setStatus('current')
if mibBuilder.loadTexts: pduInputPhasePropertiesCount.setDescription('The numeric Input Phase ID')
pduInputPhaseStatusTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 3, 4), )
if mibBuilder.loadTexts: pduInputPhaseStatusTable.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseStatusTable.setDescription('A table of PDU Input Phase status data')
pduInputPhaseStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 3, 4, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitStatusIndex"), (0, "ENLOGIC-PDU-MIB", "pduInputPhaseStatusIndex"))
if mibBuilder.loadTexts: pduInputPhaseStatusEntry.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseStatusEntry.setDescription('An input phase status entry containing objects for a particular input phase.')
pduInputPhaseStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduInputPhaseStatusIndex.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseStatusIndex.setDescription('The index of the PDU Input Phase status entry')
pduInputPhaseStatusCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduInputPhaseStatusCount.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseStatusCount.setDescription('The numeric Input Phase ID')
pduInputPhaseStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("upperCritical", 1), ("upperWarning", 2), ("lowerWarning", 3), ("lowerCritical", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduInputPhaseStatusCurrentState.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseStatusCurrentState.setDescription('Indicates the present current status of the PDU Phase in case of Y connection or PDU Line in case of Delta conneciton.')
pduInputPhaseStatusVoltageState = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("upperCritical", 1), ("upperWarning", 2), ("lowerWarning", 3), ("lowerCritical", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduInputPhaseStatusVoltageState.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseStatusVoltageState.setDescription('Indicates the present voltage status of the PDU Input Phase being queried')
pduInputPhaseStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduInputPhaseStatusCurrent.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseStatusCurrent.setDescription('Returns the current draw, in hundredths of Amps(A), of the load on the \n                PDU Phase/Line being queried. Nodes with \n                pduInputPhaseStatusIndex from 1 to 3 indicate Y connection  Phase values  or Delta connection Line values,\n                and nodes with pduInputPhaseStatusIndex from 4 to 6 indicate Delta connection Phase values.\n\t\t')
pduInputPhaseStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduInputPhaseStatusVoltage.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseStatusVoltage.setDescription('Returns the voltage, in Volts(V), of the PDU Phase/Line being queried.\n                 Nodes with pduInputPhaseStatusIndex from 1  to 3 indicate Y connection Phase values or Delta connection Line values,\n                and nodes with pduInputPhaseStatusIndex from 4 to 6 indicate Delta connection Phase values.\n\t\t')
pduInputPhaseStatusActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduInputPhaseStatusActivePower.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseStatusActivePower.setDescription('Returns power consumption, in Watts(W), consumed on the PDU Phase/Line\n                being queried. Nodes with pduInputPhaseStatusIndex from 1 to 3 indicate Y connection\n                Phase values or Delta connection Line values, and nodes with \n                pduInputPhaseStatusIndex from 4 to 6 indicate Delta connection  Phase values.\n\t\t')
pduInputPhaseStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduInputPhaseStatusApparentPower.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseStatusApparentPower.setDescription('Returns power consumption, in Volt-Amps(VA), of the PDU Phase/Line being queried.\n                Nodes with pduInputPhaseStatusIndex from 1  to 3 indicate Y connection Phase values or Delta connection  Line values,\n                and nodes with pduInputPhaseStatusIndex from 4 to 6 indicate Delta connection  Phase values.\n\t\t')
pduInputPhaseStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduInputPhaseStatusPowerFactor.setStatus('current')
if mibBuilder.loadTexts: pduInputPhaseStatusPowerFactor.setDescription('Returns the ratio of active to apparent power of the PDU Phase/Line being queried.\n                Nodes with pduInputPhaseStatusIndex from 1  to 3 indicate Y connection  Phase values or Delta connection Line values,\n                and nodes with pduInputPhaseStatusIndex from 4 to 6 indicate Delta connection  Phase values. \n\t\t')
pduCircuitBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCircuitBreakerTableSize.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerTableSize.setDescription('The number of PDU Circuit Breakers')
pduCircuitBreakerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 4, 2), )
if mibBuilder.loadTexts: pduCircuitBreakerConfigTable.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerConfigTable.setDescription('A table of PDU Circuit Breaker configuration data')
pduCircuitBreakerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 4, 2, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitConfigIndex"), (0, "ENLOGIC-PDU-MIB", "pduCircuitBreakerConfigIndex"))
if mibBuilder.loadTexts: pduCircuitBreakerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerConfigEntry.setDescription('A circuit breaker configuration entry containing objects for a particular circuit breaker.')
pduCircuitBreakerConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduCircuitBreakerConfigIndex.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerConfigIndex.setDescription('The index of the PDU Circuit Breaker configuration table entry')
pduCircuitBreakerConfigCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCircuitBreakerConfigCount.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerConfigCount.setDescription('The number of circuit breakers on the PDU')
pduCircuitBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCircuitBreakerName.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerName.setDescription('The label of the circuit breaker')
pduCircuitBreakerConfigOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alwaysAllowTurnOn", 1), ("restrictOnUpperWarning", 2), ("restrictOnUpperCritical", 3), ("notSupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduCircuitBreakerConfigOverloadRestriction.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerConfigOverloadRestriction.setDescription('This OID controls the behavior of a Switched PDU Circuit \n\t\tBreaker when an overload condition is possible and additional \n\t\toutlets are requested to be turned on. Setting this OID to \n\t\talwaysAllowTurnON (1) will always allow the outlets on the \n\t\tcorresponding Circuit Breaker to turn on. Setting this OID \n\t\tto restrictOnUpperWarning (2) will not allow outlets on the \n\t\tcorresponding Circuit Breaker to turn on if the \n\t\tpduCircuitBreakerConfigUpperWarningThreshold OID is exceeded. \n\t\tSetting this OID to restrictOnUpperCritical (3) will not \n\t\tallow outlets on the corresponding Circuit Breaker to turn \n\t\ton if the pduCircuitBreakerConfigUpperCriticalThreshold OID \n\t\tis exceeded. Models that do not support this feature will \n\t\trespond to this OID with a value of notSupported (4). \n\t\tAttempts to set this OID in these models will fail. ')
pduCircuitBreakerConfigLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduCircuitBreakerConfigLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerConfigLowerCriticalThreshold.setDescription('User-defined lower critical circuit breaker current alarm threshold in hundredths of Amps(A).')
pduCircuitBreakerConfigLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduCircuitBreakerConfigLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerConfigLowerWarningThreshold.setDescription('User-defined lower non-critical (warning) circuit breaker current alarm threshold in hundredths of Amps(A).')
pduCircuitBreakerConfigUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduCircuitBreakerConfigUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerConfigUpperCriticalThreshold.setDescription('User-defined upper critical circuit breaker current alarm threshold in hundredths of Amps(A).')
pduCircuitBreakerConfigUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 2, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduCircuitBreakerConfigUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerConfigUpperWarningThreshold.setDescription('User-defined upper non-critical (warning) circuit breaker current alarm threshold in hundredths of Amps(A).')
pduCircuitBreakerConfigAlarmResetThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 2, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduCircuitBreakerConfigAlarmResetThreshold.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerConfigAlarmResetThreshold.setDescription('The hysteresis used for deassertions in hundredths of Amps(A).')
pduCircuitBreakerConfigAlarmStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 2, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduCircuitBreakerConfigAlarmStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerConfigAlarmStateChangeDelay.setDescription('The delay measured in samples before a state is asserted. \n\t\tIf the value is zero, then the state is asserted as soon \n\t\tas it is detected; if it is non-zero, say n, then the \n\t\tassertion condition must exist for n+1 consecutive samples \n\t\tbefore the corresponding assertion event is reported.')
pduCircuitBreakerConfigEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 2, 1, 11), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduCircuitBreakerConfigEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerConfigEnabledThresholds.setDescription('A bit string indicating which alarm thresholds are enabled.')
pduCircuitBreakerPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 4, 3), )
if mibBuilder.loadTexts: pduCircuitBreakerPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerPropertiesTable.setDescription('A table of PDU circuit breaker properties')
pduCircuitBreakerPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 4, 3, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitPropertiesIndex"), (0, "ENLOGIC-PDU-MIB", "pduCircuitBreakerPropertiesIndex"))
if mibBuilder.loadTexts: pduCircuitBreakerPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerPropertiesEntry.setDescription('A circuit breaker properties entry containing objects for a particular circuit breaker.')
pduCircuitBreakerPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduCircuitBreakerPropertiesIndex.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerPropertiesIndex.setDescription('The index of the PDU Circuit Breaker properties table entry')
pduCircuitBreakerPropertiesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCircuitBreakerPropertiesCount.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerPropertiesCount.setDescription('The number of Circuit Breakers')
pduCircuitBreakerPropertiesInputLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("seqPhase1ToNeutral", 1), ("seqPhase2ToNeutral", 2), ("seqPhase3ToNeutral", 3), ("seqPhase1ToPhase2", 4), ("seqPhase2ToPhase3", 5), ("seqPhase3ToPhase1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCircuitBreakerPropertiesInputLayout.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerPropertiesInputLayout.setDescription('This OID describes the outlet phase connections on \n\t\tthe referenced bank as follows: \n\t\tseqPhase1ToNeutral(1) indicates that outlets attached \n\t\tto circuit breaker are connected from Phase 1 to Neutral. \n\t\tseqPhase2ToNeutral(2) indicates that outlets attached \n\t\tto circuit breaker are connected from Phase 2 to Neutral. \n\t\tseqPhase3ToNeutral(3) indicates that outlets attached \n\t\tto circuit breaker are connected from Phase 3 to Neutral. \n\t\tseqPhase1ToPhase2(4) indicates that outlets attached \n\t\tto circuit breaker are connected from Phase 1 to Phase2. \n\t\tseqPhase2ToPhase3(5) indicates that outlets attached \n\t\tto circuit breaker are connected from Phase 2 to Phase3.  \n\t\tseqPhase3ToPhase1(6) indicates that outlets attached \n\t\tto circuit breaker are connected from Phase 3 to Phase1. ')
pduCircuitBreakerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 4, 4), )
if mibBuilder.loadTexts: pduCircuitBreakerStatusTable.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerStatusTable.setDescription('A table of PDU circuit breaker status data')
pduCircuitBreakerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 4, 4, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitStatusIndex"), (0, "ENLOGIC-PDU-MIB", "pduCircuitBreakerStatusIndex"))
if mibBuilder.loadTexts: pduCircuitBreakerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerStatusEntry.setDescription('A circuit breaker status entry containing objects for a particular circuit breaker.')
pduCircuitBreakerStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduCircuitBreakerStatusIndex.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerStatusIndex.setDescription('The index of the PDU Circuit Breaker status table entry')
pduCircuitBreakerStatusCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCircuitBreakerStatusCount.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerStatusCount.setDescription('The number of Circuit Breakers')
pduCircuitBreakerLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCircuitBreakerLabel.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerLabel.setDescription('The label on the PDU identifying the circuit breaker')
pduCircuitBreakerStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("upperCritical", 1), ("upperWarning", 2), ("lowerWarning", 3), ("lowerCritical", 4), ("normal", 5), ("off", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCircuitBreakerStatusLoadState.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerStatusLoadState.setDescription('Indicates the present load status of the PDU Circuit \n\t\tBreaker being queried')
pduCircuitBreakerStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCircuitBreakerStatusCurrent.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerStatusCurrent.setDescription('Returns the current draw, in hundredths of Amps(A), of the load on \n\t\tthe PDU Circuit Breaker being queried.')
pduOutletSwitchedTableSize = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchedTableSize.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedTableSize.setDescription('The number of PDU Outlets')
pduOutletSwitchedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 5, 2), )
if mibBuilder.loadTexts: pduOutletSwitchedConfigTable.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedConfigTable.setDescription('A table of PDU Switched Outlet configuration data')
pduOutletSwitchedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 5, 2, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitConfigIndex"), (0, "ENLOGIC-PDU-MIB", "pduOutletSwitchedConfigIndex"))
if mibBuilder.loadTexts: pduOutletSwitchedConfigEntry.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedConfigEntry.setDescription('An outlet configuration entry containing objects for a particular outlet.')
pduOutletSwitchedConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduOutletSwitchedConfigIndex.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedConfigIndex.setDescription('The index of the PDU Switched Outlet configuration table entry')
pduOutletSwitchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchedName.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedName.setDescription('The user-defined name for the Switched Outlet')
pduOutletSwitchedStateOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("lastKnownState", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchedStateOnStartup.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedStateOnStartup.setDescription('The outlet state on device startup; overrides \n\t\tthe global value pduUnitConfigGlobalOutletStateOnStartup.')
pduOutletSwitchedConfigPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchedConfigPowerOnTime.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedConfigPowerOnTime.setDescription('The amount of delay, in seconds, between when power is \n\t\tprovided to outlets the outlet and when this outlet \n\t\tstarts providing power')
pduOutletSwitchedConfigPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchedConfigPowerOffTime.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedConfigPowerOffTime.setDescription('The amount of time, in seconds, this outlet will delay \n\t\tpowering off')
pduOutletSwitchedConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchedConfigRebootDuration.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedConfigRebootDuration.setDescription('The amount of time, in seconds, this outlet will remain \n\t\tin powered off state before returning to power on state \n\t\tduring a reboot action.')
pduOutletSwitchedPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 5, 3), )
if mibBuilder.loadTexts: pduOutletSwitchedPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedPropertiesTable.setDescription('A table of PDU Switched Outlet properties')
pduOutletSwitchedPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 5, 3, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitPropertiesIndex"), (0, "ENLOGIC-PDU-MIB", "pduOutletSwitchedPropertiesIndex"))
if mibBuilder.loadTexts: pduOutletSwitchedPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedPropertiesEntry.setDescription('An outlet properties entry containing objects for a particular outlet.')
pduOutletSwitchedPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduOutletSwitchedPropertiesIndex.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedPropertiesIndex.setDescription('The index of the PDU Switched Outlet properties table entry')
pduOutletSwitchedPropertiesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchedPropertiesNumber.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedPropertiesNumber.setDescription('The numeric Switched Outlet ID')
pduOutletSwitchedPropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchedPropertiesName.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedPropertiesName.setDescription('The user-defined switched outlet ID string')
pduOutletSwitchedPropertiesInputPhaseLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("seqPhase1ToNeutral", 1), ("seqPhase2ToNeutral", 2), ("seqPhase3ToNeutral", 3), ("seqPhase1ToPhase2", 4), ("seqPhase2ToPhase3", 5), ("seqPhase3ToPhase1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchedPropertiesInputPhaseLayout.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedPropertiesInputPhaseLayout.setDescription('This OID describes the outlet phase connections \n\t\ton the referenced bank as follows: \n\t\tseqPhase1ToNeutral(1) indicates that outlets \n\t\tattached to Switched Outlet are connected from Phase 1 to Neutral. \n\t\tseqPhase2ToNeutral(2) indicates that outlets \n\t\tattached to Switched Outlet are connected from Phase 2 to Neutral. \n\t\tseqPhase3ToNeutral(3) indicates that outlets \n\t\tattached to Switched Outlet are connected from Phase 3 to Neutral. \n\t\tseqPhase1ToPhase2(4) indicates that outlets \n\t\tattached to Switched Outlet are connected from Phase 1 to Phase2. \n\t\tseqPhase2ToPhase3(5) indicates that outlets \n\t\tattached to Switched Outlet are connected from Phase 2 to Phase3.  \n\t\tseqPhase3ToPhase1(6) indicates that outlets \n\t\tattached to Switched Outlet are connected from Phase 3 to Phase1. ')
pduOutletSwitchedPropertiesCircuitBreaker = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchedPropertiesCircuitBreaker.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedPropertiesCircuitBreaker.setDescription('The numeric Circuit Breaker ID')
pduOutletSwitchedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 5, 4), )
if mibBuilder.loadTexts: pduOutletSwitchedStatusTable.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedStatusTable.setDescription('A table of PDU Switched Outlet status data')
pduOutletSwitchedStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 5, 4, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitStatusIndex"), (0, "ENLOGIC-PDU-MIB", "pduOutletSwitchedStatusIndex"))
if mibBuilder.loadTexts: pduOutletSwitchedStatusEntry.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedStatusEntry.setDescription('Status data from the PDU Switched Outlet being queried')
pduOutletSwitchedStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduOutletSwitchedStatusIndex.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedStatusIndex.setDescription('The index of the PDU Switched Outlet status table entry')
pduOutletSwitchedStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchedStatusNumber.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedStatusNumber.setDescription('The numeric Switched Outlet ID')
pduOutletSwitchedStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchedStatusName.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedStatusName.setDescription('The user-defined switched outlet ID string')
pduOutletSwitchedStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchedStatusState.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedStatusState.setDescription('Indicates the present switch state of the \n\t\tPDU switched outlet being queried')
pduOutletSwitchedControlTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 5, 5), )
if mibBuilder.loadTexts: pduOutletSwitchedControlTable.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedControlTable.setDescription('A table of PDU Switched Outlet status data')
pduOutletSwitchedControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 5, 5, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitConfigIndex"), (0, "ENLOGIC-PDU-MIB", "pduOutletSwitchedControlIndex"))
if mibBuilder.loadTexts: pduOutletSwitchedControlEntry.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedControlEntry.setDescription('Status data from the PDU Switched Outlet \n\t\tbeing queried')
pduOutletSwitchedControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduOutletSwitchedControlIndex.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedControlIndex.setDescription('The index to the PDU switched outlet \n\t\tcontrol data table entry')
pduOutletSwitchedControlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchedControlNumber.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedControlNumber.setDescription('The numeric Switched Outlet ID')
pduOutletSwitchedControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchedControlName.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedControlName.setDescription('The user-defined switched outlet ID string')
pduOutletSwitchedControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("immediateOff", 1), ("immediateOn", 2), ("delayedOff", 3), ("delayedOn", 4), ("immediateReboot", 5), ("delayedReboot", 6), ("outletUnknown", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchedControlCommand.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchedControlCommand.setDescription("Getting this variable will return the outlet state.\n\t\tIf the outlet is on, the immediateOn (2) \n\t\tvalue will be returned. If the outlet is off, \n\t\tthe immediateOff (1) value will be returned. \n\t\tIf the state of the outlet cannot be determined, the \n\t\toutletUnknown (7) value will be returned. If the \n\t\toutletUnknown condition should occur, all devices \n\t\tpowered by the PDU should be shut down. The PDU's \n\t\tpower should then be cycled to clear this condition. \n\t\tSetting this variable to immediateOn (2) will immediately \n\t\tturn the outlet on. Setting this variable to \n\t\timmediateOff (1) will immediately turn the outlet off. \n\t\tSetting this variable to immediateReboot (5) \n\t\twill cause the Switched PDU to perform an immediateOff \n\t\tcommand, wait the pduOutletSwitchedConfigRebootDuration \n\t\tOID time, and then perform an immediateOn command.\n\t\tSetting this variable to delayedOn (4) will turn the \n\t\toutlet on after the pduOutletSwitchedConfigPowerOnTime \n\t\tOID time has elapsed. Setting this variable to \n\t\tdelayedOff (3) will turn the outlet off after the \n\t\tpduOutletSwitchedConfigPowerOffTime OID time has elapsed. \n\t\tSetting this variable to delayedReboot  (6) will cause \n\t\tthe Switched PDU to perform a delayedOff command, wait \n\t\tthe pduOutletSwitchedConfigRebootDuration OID time, and \n\t\tthen perform a delayedOn command.")
pduOutletMeteredTableSize = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredTableSize.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredTableSize.setDescription('The number of PDU Outlets')
pduOutletMeteredConfigTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 5, 7), )
if mibBuilder.loadTexts: pduOutletMeteredConfigTable.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredConfigTable.setDescription('A table of PDU Metered Outlet configuration data')
pduOutletMeteredConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 5, 7, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitConfigIndex"), (0, "ENLOGIC-PDU-MIB", "pduOutletMeteredConfigIndex"))
if mibBuilder.loadTexts: pduOutletMeteredConfigEntry.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredConfigEntry.setDescription('An outlet configuration entry containing objects for a particular outlet.')
pduOutletMeteredConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduOutletMeteredConfigIndex.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredConfigIndex.setDescription('The index of the PDU Metered Outlet \n\t\tconfiguration table entry')
pduOutletMeteredName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletMeteredName.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredName.setDescription('The user-defined name for the Metered Outlet')
pduOutletMeteredConfigLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 7, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletMeteredConfigLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredConfigLowerCriticalThreshold.setDescription('User-defined lower critical outlet active power alarm threshold in Watts(W).')
pduOutletMeteredConfigLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 7, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletMeteredConfigLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredConfigLowerWarningThreshold.setDescription('User-defined lower non-critical (warning) outlet active power alarm threshold in Watts(W).')
pduOutletMeteredConfigUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 7, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletMeteredConfigUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredConfigUpperCriticalThreshold.setDescription('User-defined upper critical outlet active power alarm threshold in Watts(W).')
pduOutletMeteredConfigUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 7, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletMeteredConfigUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredConfigUpperWarningThreshold.setDescription('User-defined upper non-critical (warning) outlet active power alarm threshold in Watts(W).')
pduOutletMeteredConfigAlarmResetThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 7, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletMeteredConfigAlarmResetThreshold.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredConfigAlarmResetThreshold.setDescription('The hysteresis used for deassertions in Watts(W).')
pduOutletMeteredConfigAlarmStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 7, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletMeteredConfigAlarmStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredConfigAlarmStateChangeDelay.setDescription('The delay measured in samples before a state \n\t\tis asserted. If the value is zero, then the state \n\t\tis asserted as soon as it is detected; if it is \n\t\tnon-zero, say n, then the assertion condition must \n\t\texist for n+1 consecutive samples before the \n\t\tcorresponding assertion event is reported.')
pduOutletMeteredConfigEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 7, 1, 9), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletMeteredConfigEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredConfigEnabledThresholds.setDescription('A bit string indicating which alarm \n\t\tthresholds are enabled.')
pduOutletMeteredPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 5, 8), )
if mibBuilder.loadTexts: pduOutletMeteredPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredPropertiesTable.setDescription('A table of PDU Metered Outlet properties')
pduOutletMeteredPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 5, 8, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitPropertiesIndex"), (0, "ENLOGIC-PDU-MIB", "pduOutletMeteredPropertiesIndex"))
if mibBuilder.loadTexts: pduOutletMeteredPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredPropertiesEntry.setDescription('Configuration data from the PDU Metered \n\t\tOutlet being queried')
pduOutletMeteredPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduOutletMeteredPropertiesIndex.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredPropertiesIndex.setDescription('The index of the PDU Metered Outlet \n\t\tproperties table entry')
pduOutletMeteredPropertiesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredPropertiesNumber.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredPropertiesNumber.setDescription('The numeric Metered Outlet ID')
pduOutletMeteredPropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredPropertiesName.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredPropertiesName.setDescription('The user-defined Metered outlet ID string')
pduOutletMeteredPropertiesInputPhaseLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("seqPhase1ToNeutral", 1), ("seqPhase2ToNeutral", 2), ("seqPhase3ToNeutral", 3), ("seqPhase1ToPhase2", 4), ("seqPhase2ToPhase3", 5), ("seqPhase3ToPhase1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredPropertiesInputPhaseLayout.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredPropertiesInputPhaseLayout.setDescription('This OID describes the outlet phase connections \n\t\ton the referenced bank as follows: \n\t\tseqPhase1ToNeutral(1) indicates that outlets attached \n\t\tto Metered Outlet are connected from Phase 1 to Neutral. \n\t\tseqPhase2ToNeutral(2) indicates that outlets attached \n\t\tto Metered Outlet are connected from Phase 2 to Neutral. \n\t\tseqPhase3ToNeutral(3) indicates that outlets attached \n\t\tto Metered Outlet are connected from Phase 3 to Neutral. \n\t\tseqPhase1ToPhase2(4) indicates that outlets attached \n\t\tto Metered Outlet are connected from Phase 1 to Phase2. \n\t\tseqPhase2ToPhase3(5) indicates that outlets attached \n\t\tto Metered Outlet are connected from Phase 2 to Phase3.  \n\t\tseqPhase3ToPhase1(6) indicates that outlets attached \n\t\tto Metered Outlet are connected from Phase 3 to Phase1. ')
pduOutletMeteredPropertiesCircuitBreaker = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredPropertiesCircuitBreaker.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredPropertiesCircuitBreaker.setDescription('The numeric Circuit Breaker ID')
pduOutletMeteredPropertiesPowerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredPropertiesPowerRating.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredPropertiesPowerRating.setDescription('Maximum power rating of the PDU metered outlet')
pduOutletMeteredStatusTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 5, 9), )
if mibBuilder.loadTexts: pduOutletMeteredStatusTable.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredStatusTable.setDescription('A table of PDU Metered Outlet status data')
pduOutletMeteredStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 5, 9, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitStatusIndex"), (0, "ENLOGIC-PDU-MIB", "pduOutletMeteredStatusIndex"))
if mibBuilder.loadTexts: pduOutletMeteredStatusEntry.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredStatusEntry.setDescription('Status data from the PDU Metered Outlet being queried')
pduOutletMeteredStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduOutletMeteredStatusIndex.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredStatusIndex.setDescription('The index of the PDU Metered Outlet status table entry')
pduOutletMeteredStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredStatusNumber.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredStatusNumber.setDescription('The numeric Metered Outlet ID')
pduOutletMeteredStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredStatusName.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredStatusName.setDescription('The user-defined Metered outlet ID string')
pduOutletMeteredStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("upperCritical", 1), ("upperWarning", 2), ("lowerWarning", 3), ("lowerCritical", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredStatusLoadState.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredStatusLoadState.setDescription('Returns the present load status of the PDU metered outlet being queried.')
pduOutletMeteredStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredStatusCurrent.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredStatusCurrent.setDescription('Returns the current draw, in hundredths of Amps(A), of the load on the PDU \n\t\toutlet being queried.')
pduOutletMeteredStatusActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredStatusActivePower.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredStatusActivePower.setDescription('Returns the power draw, in Watts(W), of the load \n\t\ton the PDU outlet being queried.')
pduOutletMeteredStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredStatusPowerFactor.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredStatusPowerFactor.setDescription('Returns the ratio of active to apparent power \n\t\tof the PDU Outlet being queried')
pduOutletMeteredStatusPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredStatusPeakPower.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredStatusPeakPower.setDescription('Returns peak power consumption, in Watts(W), \n\t\tof the Rack PDU outlet being queried.')
pduOutletMeteredStatusPeakPowerTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 9, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredStatusPeakPowerTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredStatusPeakPowerTimeStamp.setDescription("Indicates the date and time that this metered \n\t\toutlet's peak power consumption occurred")
pduOutletMeteredStatusPeakPowerStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredStatusPeakPowerStartTime.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredStatusPeakPowerStartTime.setDescription('Indicates the start date and time that this metered \n\t\toutlet began recording peak power observations')
pduOutletMeteredStatusResettableEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 5, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeteredStatusResettableEnergy.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeteredStatusResettableEnergy.setDescription('A user resettable energy meter measuring outlet load energy \n\t\tconsumption in tenths of Kilowatt-Hours(kWh).')
pduExternalSensorTableSize = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduExternalSensorTableSize.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorTableSize.setDescription('The total number of External Sensors')
pduExternalSensorNamePlateTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 6, 2), )
if mibBuilder.loadTexts: pduExternalSensorNamePlateTable.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorNamePlateTable.setDescription('A table of PDU ExternalSensorNamePlate data')
pduExternalSensorNamePlateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 6, 2, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduNamePlateIndex"), (0, "ENLOGIC-PDU-MIB", "pduExternalSensorNamePlateIndex"))
if mibBuilder.loadTexts: pduExternalSensorNamePlateEntry.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorNamePlateEntry.setDescription('External Sensor Name Plate data from the external \n\t\tsensor being queried. The number of entries equals \n\t\tthe value of pduExternalSensorNamePlateTableSize.')
pduExternalSensorNamePlateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pduExternalSensorNamePlateIndex.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorNamePlateIndex.setDescription('The index of the PDU External Sensor status table entry')
pduExternalSensorNamePlateName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduExternalSensorNamePlateName.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorNamePlateName.setDescription('A user-defined string identifying the external sensor')
pduExternalSensorNamePlateDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduExternalSensorNamePlateDescription.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorNamePlateDescription.setDescription('A user-defined description of the external sensor')
pduExternalSensorNamePlateLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduExternalSensorNamePlateLocation.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorNamePlateLocation.setDescription('A user-defined string identifying the location of the PDU')
pduExternalSensorNamePlateSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduExternalSensorNamePlateSerialNumber.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorNamePlateSerialNumber.setDescription('The serial number of the external sensor being queried')
pduExternalSensorNamePlateType = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18))).clone(namedValues=NamedValues(("temperature", 1), ("humidity", 2), ("doorSwitch", 3), ("dryContact", 4), ("spotFluid", 5), ("ropeFluid", 6), ("smoke", 7), ("beacon", 8), ("airVelocity", 9), ("modbusAdapter", 17), ("hidAdapter", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduExternalSensorNamePlateType.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorNamePlateType.setDescription('The type of external sensor.')
pduExternalSensorNamePlateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("logic", 0), ("degreeC", 1), ("degreeF", 2), ("percent", 3), ("mps", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduExternalSensorNamePlateUnits.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorNamePlateUnits.setDescription('The base units the external sensor is measured in. \n\t\tThis parameter does not apply to onOff, trip, vibration,\n\t\t waterDetection, smokeDetection sensors. ')
pduExternalSensorNamePlateIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduExternalSensorNamePlateIdentifier.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorNamePlateIdentifier.setDescription('Unique identifier of the external sensor.')
pduExternalSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 6, 3), )
if mibBuilder.loadTexts: pduExternalSensorConfigTable.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorConfigTable.setDescription('A table of PDU External Sensor configuration data')
pduExternalSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 6, 3, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitConfigIndex"), (0, "ENLOGIC-PDU-MIB", "pduExternalSensorConfigIndex"))
if mibBuilder.loadTexts: pduExternalSensorConfigEntry.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorConfigEntry.setDescription('Configuration data from the PDU External \n\t\tSensor being queried')
pduExternalSensorConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pduExternalSensorConfigIndex.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorConfigIndex.setDescription('The index of the PDU External Sensor \n\t\tconfiguration table entry')
pduExternalSensorConfigLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 3, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduExternalSensorConfigLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorConfigLowerCriticalThreshold.setDescription('User-defined lower critical alarm threshold in pduExternalSensorNamePlateUnits.')
pduExternalSensorConfigLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 3, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduExternalSensorConfigLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorConfigLowerWarningThreshold.setDescription('User-defined lower non-critical (warning) alarm threshold in pduExternalSensorNamePlateUnits.')
pduExternalSensorConfigUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduExternalSensorConfigUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorConfigUpperCriticalThreshold.setDescription('User-defined upper critical alarm threshold in pduExternalSensorNamePlateUnits.')
pduExternalSensorConfigUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduExternalSensorConfigUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorConfigUpperWarningThreshold.setDescription('User-defined upper non-critical (warning) alarm threshold in pduExternalSensorNamePlateUnits.')
pduExternalSensorConfigAlarmResetThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 3, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduExternalSensorConfigAlarmResetThreshold.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorConfigAlarmResetThreshold.setDescription('The hysteresis used for deassertions.')
pduExternalSensorConfigAlarmStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 3, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduExternalSensorConfigAlarmStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorConfigAlarmStateChangeDelay.setDescription('The delay measured in samples before a state is \n\t\tasserted. If the value is zero, then the state is \n\t\tasserted as soon as it is detected; if it is non-zero, \n\t\tsay n, then the assertion condition must exist for n+1 \n\t\tconsecutive samples before the corresponding assertion \n\t\tevent is reported.')
pduExternalSensorConfigEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 3, 1, 8), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3), ("binarySensorAlarm", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduExternalSensorConfigEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorConfigEnabledThresholds.setDescription('A bit string indicating which alarm \n\t\tthresholds are enabled.')
pduExternalSensorConfigAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduExternalSensorConfigAlarmState.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorConfigAlarmState.setDescription('User defined alarm state of external sensor')
pduExternalSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 6, 4), )
if mibBuilder.loadTexts: pduExternalSensorStatusTable.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorStatusTable.setDescription('A table of PDU External Sensor status data')
pduExternalSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 6, 4, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitStatusIndex"), (0, "ENLOGIC-PDU-MIB", "pduExternalSensorStatusIndex"))
if mibBuilder.loadTexts: pduExternalSensorStatusEntry.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorStatusEntry.setDescription('Status data from the PDU External Sensor \n\t\tbeing queried')
pduExternalSensorStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pduExternalSensorStatusIndex.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorStatusIndex.setDescription('The index of the PDU External Sensor status table entry')
pduExternalSensorStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduExternalSensorStatusName.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorStatusName.setDescription('The user-defined name for the External Sensor')
pduExternalSensorStatusAisle = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hotAisle", 1), ("coldAisle", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduExternalSensorStatusAisle.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorStatusAisle.setDescription('Indicates whether the external sensor is \n\t\tin a hot or cold aisle')
pduExternalSensorStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOk", 2), ("commsLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduExternalSensorStatusCommStatus.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorStatusCommStatus.setDescription('The communications status of the sensor')
pduExternalSensorStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notPresent", 0), ("alarmed", 1), ("normal", 2), ("belowLowerCritical", 3), ("belowLowerWarning", 4), ("aboveUpperWarning", 5), ("aboveUpperCritical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduExternalSensorStatusState.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorStatusState.setDescription('This OID reports the current state of the sensor. \n\t\t\tA notPresent (0) response indicates that no sensor is attached.\n\t\t\tAn alarmed (1) response indicates that the sensor is present \n\t\t\tand its measured reading indicates alarmed.\n\t\t\tA normal (2) response indicates that the sensor is present \n\t\t\tand its measured reading lies within all thresholds.\n\t\t\tA belowLowerCritical (3) response indicates that the sensor \n\t\t\tis present and its measured reading lies below the lower critical threshold.\n\t\t\tA belowLowerWarning (4) response indicates that the sensor \n\t\t\tis present and its measured reading lies below the lower warning threshold.\n\t\t\tAn aboveUpperWarning (5) response indicates that the sensor \n\t\t\tis present and its measured reading lies above the upper warning threshold.\n\t\t\tAn aboveUpperCritical (6) response indicates that the sensor \n\t\t\tis present and its measured reading lies above the upper critical threshold.')
pduExternalSensorStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduExternalSensorStatusValue.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorStatusValue.setDescription('Sensor reading in pduExternalSensorConfigUnits value.')
pduExternalSensorStatusTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduExternalSensorStatusTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorStatusTimeStamp.setDescription('The sensor reading timestamp.')
pduExternalSensorStatusHighPrecisionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 6, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduExternalSensorStatusHighPrecisionValue.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorStatusHighPrecisionValue.setDescription('Temperature sensor reading in tenths of pduExternalSensorConfigUnits value.\n\t\tThis OID is applied to temperature sensor only')
pduServerPingTableSize = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduServerPingTableSize.setStatus('current')
if mibBuilder.loadTexts: pduServerPingTableSize.setDescription('The total number of Servers')
pduServerPingTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 7, 2), )
if mibBuilder.loadTexts: pduServerPingTable.setStatus('current')
if mibBuilder.loadTexts: pduServerPingTable.setDescription('A table of Server Ping data')
pduServerPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 7, 2, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitConfigIndex"), (0, "ENLOGIC-PDU-MIB", "pduServerPingIndex"))
if mibBuilder.loadTexts: pduServerPingEntry.setStatus('current')
if mibBuilder.loadTexts: pduServerPingEntry.setDescription('Server Ping data from the server being queried. \n\t\tThe number of entries equals the value of pduServerPingTableSize.')
pduServerPingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pduServerPingIndex.setStatus('current')
if mibBuilder.loadTexts: pduServerPingIndex.setDescription('The index of the PDU pduServerPing table entry')
pduServerPingServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduServerPingServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: pduServerPingServerIPAddress.setDescription('The IP Address/host name of the server ')
pduServerPingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduServerPingEnabled.setStatus('current')
if mibBuilder.loadTexts: pduServerPingEnabled.setDescription('Is ping enabled for this server?')
pduUnitSmartCabinetTableSize = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitSmartCabinetTableSize.setStatus('current')
if mibBuilder.loadTexts: pduUnitSmartCabinetTableSize.setDescription('The total number of Smart Cabinet Configuration ')
pduUnitSmartCabinetTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 8, 2), )
if mibBuilder.loadTexts: pduUnitSmartCabinetTable.setStatus('current')
if mibBuilder.loadTexts: pduUnitSmartCabinetTable.setDescription('A table of Smart Cabinet information')
pduUnitSmartCabinetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 8, 2, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "pduUnitConfigIndex"), (0, "ENLOGIC-PDU-MIB", "pduUnitSmartCabinetIndex"))
if mibBuilder.loadTexts: pduUnitSmartCabinetEntry.setStatus('current')
if mibBuilder.loadTexts: pduUnitSmartCabinetEntry.setDescription('Information of Smart Cabinet')
pduUnitSmartCabinetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pduUnitSmartCabinetIndex.setStatus('current')
if mibBuilder.loadTexts: pduUnitSmartCabinetIndex.setDescription('The index of the PDU Smart Cabinet table entry')
pduUnitSmartCabinetCardUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitSmartCabinetCardUserName.setStatus('current')
if mibBuilder.loadTexts: pduUnitSmartCabinetCardUserName.setDescription('User name of ID card')
pduUnitSmartCabinetCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitSmartCabinetCardID.setStatus('current')
if mibBuilder.loadTexts: pduUnitSmartCabinetCardID.setDescription('Card ID.')
pduUnitSmartCabinetTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 8, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitSmartCabinetTimestamp.setStatus('current')
if mibBuilder.loadTexts: pduUnitSmartCabinetTimestamp.setDescription('Indicates the date and time of information update')
pduUnitSmartCabinetDoor = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("HotAisle", 1), ("ColdAisle", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduUnitSmartCabinetDoor.setStatus('current')
if mibBuilder.loadTexts: pduUnitSmartCabinetDoor.setDescription('Aisle of Smart Cabinet. ')
pduUnitSmartCabinetControl = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 1, 8, 3))
pduUnitSmartCabinetControlUserName = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 8, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitSmartCabinetControlUserName.setStatus('current')
if mibBuilder.loadTexts: pduUnitSmartCabinetControlUserName.setDescription('User name of ID card')
pduUnitSmartCabinetControlCardID = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 8, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitSmartCabinetControlCardID.setStatus('current')
if mibBuilder.loadTexts: pduUnitSmartCabinetControlCardID.setDescription('Card ID.')
pduUnitSmartCabinetControlTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 8, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitSmartCabinetControlTimestamp.setStatus('current')
if mibBuilder.loadTexts: pduUnitSmartCabinetControlTimestamp.setDescription('Indicates the date and time of information update')
pduUnitSmartCabinetControlDoor = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 8, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("HotAisle", 1), ("ColdAisle", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitSmartCabinetControlDoor.setStatus('current')
if mibBuilder.loadTexts: pduUnitSmartCabinetControlDoor.setDescription('Aisle of Smart Cabinet. ')
pduUnitSmartCabinetCardIDEdit = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 8, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("grant", 0), ("remove", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitSmartCabinetCardIDEdit.setStatus('current')
if mibBuilder.loadTexts: pduUnitSmartCabinetCardIDEdit.setDescription('Smart Cabinet edit CardID ')
pduUnitSmartCabinetColdAisleLockState = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 8, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unlock", 0), ("lock", 1), ("notPresent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitSmartCabinetColdAisleLockState.setStatus('current')
if mibBuilder.loadTexts: pduUnitSmartCabinetColdAisleLockState.setDescription('Smart Cabinet ColdAisle lock state ')
pduUnitSmartCabinetHotAisleLockState = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 8, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unlock", 0), ("lock", 1), ("notPresent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduUnitSmartCabinetHotAisleLockState.setStatus('current')
if mibBuilder.loadTexts: pduUnitSmartCabinetHotAisleLockState.setDescription('Smart Cabinet HotAisle lock state ')
trapsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1))
trapsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 1), )
if mibBuilder.loadTexts: trapsInfoTable.setStatus('current')
if mibBuilder.loadTexts: trapsInfoTable.setDescription('A list of Trap Information entries. The number of\n            entries are given by the value of pduUnitTableSize.')
trapsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 1, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "trapsInfoIndex"))
if mibBuilder.loadTexts: trapsInfoEntry.setStatus('current')
if mibBuilder.loadTexts: trapsInfoEntry.setDescription('An entry containing objects used in traps')
trapsInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: trapsInfoIndex.setStatus('current')
if mibBuilder.loadTexts: trapsInfoIndex.setDescription('The index of the traps table entry')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('The user currently logged in.')
userUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userUpdated.setStatus('current')
if mibBuilder.loadTexts: userUpdated.setDescription('The user added, deleted, or modified.')
firmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
if mibBuilder.loadTexts: firmwareVersion.setDescription('The version of Firmware.')
roleUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: roleUpdated.setStatus('current')
if mibBuilder.loadTexts: roleUpdated.setDescription('The role added, deleted, or modified.')
smtpRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecipients.setStatus('current')
if mibBuilder.loadTexts: smtpRecipients.setDescription('Comma separated list of SMTP  recipients')
smtpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpServer.setStatus('current')
if mibBuilder.loadTexts: smtpServer.setDescription('The IP address/host name of the SMTP server')
pduIndex = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pduIndex.setStatus('current')
if mibBuilder.loadTexts: pduIndex.setDescription('A unique value for PDU. Its value ranges between 1 \n\t\tand the value of PDU count')
externalSensorIndex = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: externalSensorIndex.setStatus('current')
if mibBuilder.loadTexts: externalSensorIndex.setDescription('A unique value for each sensor. Its value ranges between 1 \n\t\tand the value of external sensor count.')
serverPing = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pingEnable", 1), ("pingDisable", 2), ("serverReachable", 3), ("serverNotReachable", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: serverPing.setStatus('current')
if mibBuilder.loadTexts: serverPing.setDescription('Whether server ping has been enabled or disabled and \n\t\twhether the server is reachable or not reachable')
usbDevice = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: usbDevice.setStatus('current')
if mibBuilder.loadTexts: usbDevice.setDescription('Whether a USB device has been connected or disconnected')
errorDescription = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: errorDescription.setStatus('current')
if mibBuilder.loadTexts: errorDescription.setDescription('Description of the Error')
daisyChain = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: daisyChain.setStatus('current')
if mibBuilder.loadTexts: daisyChain.setDescription('Whether a daisy chain member has been connected or disconnected')
systemCommunication = MibScalar((1, 3, 6, 1, 4, 1, 38446, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("lost", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: systemCommunication.setStatus('current')
if mibBuilder.loadTexts: systemCommunication.setDescription('Whether the Network management card has lost contact with daisy a chain member.')
networkCardStart = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 2)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: networkCardStart.setStatus('current')
if mibBuilder.loadTexts: networkCardStart.setDescription('The network card has started')
networkCardReset = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 3)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: networkCardReset.setStatus('current')
if mibBuilder.loadTexts: networkCardReset.setDescription('The network card was reset via the web or command line interface.')
userLogin = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 4)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userLogin.setStatus('current')
if mibBuilder.loadTexts: userLogin.setDescription('A user logged in')
userLogoff = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 5)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userLogoff.setStatus('current')
if mibBuilder.loadTexts: userLogoff.setDescription(' A user logged off')
userAuthenticationFailed = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 6)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userAuthenticationFailed.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFailed.setDescription('A user authentication attempt failed.')
userSessionTimeout = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 7)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: userSessionTimeout.setDescription('A user session timed out')
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 8)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "userUpdated"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userAdded.setStatus('current')
if mibBuilder.loadTexts: userAdded.setDescription('A user account was added to system.')
userModified = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 9)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "userUpdated"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userModified.setStatus('current')
if mibBuilder.loadTexts: userModified.setDescription('A user account was modified.')
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 10)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "userUpdated"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userDeleted.setStatus('current')
if mibBuilder.loadTexts: userDeleted.setDescription('A user account was deleted.')
roleAdded = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 11)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "roleUpdated"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: roleAdded.setStatus('current')
if mibBuilder.loadTexts: roleAdded.setDescription('A user role was added.')
roleModified = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 12)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "roleUpdated"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: roleModified.setStatus('current')
if mibBuilder.loadTexts: roleModified.setDescription('A user role was modified.')
roleDeleted = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 13)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "roleUpdated"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: roleDeleted.setStatus('current')
if mibBuilder.loadTexts: roleDeleted.setDescription('A user role was deleted.')
firmwareUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 14)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "firmwareVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: firmwareUpdateStarted.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateStarted.setDescription('A firmware update has started.')
firmwareUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 15)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "firmwareVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: firmwareUpdateCompleted.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateCompleted.setDescription('The firmware update has completed.')
userBlocked = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 16)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userBlocked.setStatus('current')
if mibBuilder.loadTexts: userBlocked.setDescription('A user is blocked.')
outletControl = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 17)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "pduOutletSwitchedControlNumber"), ("ENLOGIC-PDU-MIB", "pduOutletSwitchedStatusState"), ("ENLOGIC-PDU-MIB", "pduOutletSwitchedControlCommand"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: outletControl.setStatus('current')
if mibBuilder.loadTexts: outletControl.setDescription('Outlet control operation applied.')
userPasswordChange = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 18)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "userUpdated"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userPasswordChange.setStatus('current')
if mibBuilder.loadTexts: userPasswordChange.setDescription('A user password was changed. ')
passwordSettingsChange = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 19)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: passwordSettingsChange.setStatus('current')
if mibBuilder.loadTexts: passwordSettingsChange.setDescription('One or more password policy settings were changed.')
logFileCleared = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 21)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: logFileCleared.setStatus('current')
if mibBuilder.loadTexts: logFileCleared.setDescription('The log file has been cleared.')
pduConfigurationFileImported = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 22)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: pduConfigurationFileImported.setStatus('current')
if mibBuilder.loadTexts: pduConfigurationFileImported.setDescription('PDU configuration file was imported.')
pduConfigurationFileExported = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 23)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: pduConfigurationFileExported.setStatus('current')
if mibBuilder.loadTexts: pduConfigurationFileExported.setDescription('PDU configuration file was exported')
pduUnitActivePowerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 24)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "pduUnitStatusLoadState"), ("ENLOGIC-PDU-MIB", "pduUnitStatusActivePower"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: pduUnitActivePowerStateChange.setStatus('current')
if mibBuilder.loadTexts: pduUnitActivePowerStateChange.setDescription('PDU unit active power state changes.')
pduInputphaseVoltageStateChange = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 25)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "pduInputPhaseStatusCount"), ("ENLOGIC-PDU-MIB", "pduInputPhaseStatusVoltageState"), ("ENLOGIC-PDU-MIB", "pduInputPhaseStatusVoltage"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: pduInputphaseVoltageStateChange.setStatus('current')
if mibBuilder.loadTexts: pduInputphaseVoltageStateChange.setDescription('PDU input phase voltage state changes.')
pduInputphaseCurrentStateChange = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 26)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "pduInputPhaseStatusCount"), ("ENLOGIC-PDU-MIB", "pduInputPhaseStatusCurrentState"), ("ENLOGIC-PDU-MIB", "pduInputPhaseStatusCurrent"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: pduInputphaseCurrentStateChange.setStatus('current')
if mibBuilder.loadTexts: pduInputphaseCurrentStateChange.setDescription('PDU input phase Current state changes.')
pduCircuitBreakerCurrentStateChange = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 27)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "pduCircuitBreakerStatusIndex"), ("ENLOGIC-PDU-MIB", "pduCircuitBreakerStatusLoadState"), ("ENLOGIC-PDU-MIB", "pduCircuitBreakerStatusCurrent"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: pduCircuitBreakerCurrentStateChange.setStatus('current')
if mibBuilder.loadTexts: pduCircuitBreakerCurrentStateChange.setDescription('PDU Circuit Breaker Current state changes.')
pduOutletActivePowerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 28)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "pduOutletMeteredStatusIndex"), ("ENLOGIC-PDU-MIB", "pduOutletMeteredStatusLoadState"), ("ENLOGIC-PDU-MIB", "pduOutletMeteredStatusActivePower"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: pduOutletActivePowerStateChange.setStatus('current')
if mibBuilder.loadTexts: pduOutletActivePowerStateChange.setDescription('PDU Metered Outlet Active Power state changes.')
pduExternalSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 29)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "pduExternalSensorStatusIndex"), ("ENLOGIC-PDU-MIB", "pduExternalSensorStatusName"), ("ENLOGIC-PDU-MIB", "pduExternalSensorNamePlateType"), ("ENLOGIC-PDU-MIB", "pduExternalSensorStatusAisle"), ("ENLOGIC-PDU-MIB", "pduExternalSensorNamePlateUnits"), ("ENLOGIC-PDU-MIB", "pduExternalSensorStatusState"), ("ENLOGIC-PDU-MIB", "pduExternalSensorStatusValue"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: pduExternalSensorStateChange.setStatus('current')
if mibBuilder.loadTexts: pduExternalSensorStateChange.setDescription('PDU External Sensor state changes.')
smtpTransmissionFailure = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 30)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "smtpRecipients"), ("ENLOGIC-PDU-MIB", "smtpServer"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: smtpTransmissionFailure.setStatus('current')
if mibBuilder.loadTexts: smtpTransmissionFailure.setDescription('SMTP message transmission failed.')
ldapError = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 31)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: ldapError.setStatus('current')
if mibBuilder.loadTexts: ldapError.setDescription('A LDAP error occurred')
firmwareUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 32)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "firmwareVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: firmwareUpdateFailed.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateFailed.setDescription('A firmware update has failed.')
serverPingState = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 33)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "pduServerPingServerIPAddress"), ("ENLOGIC-PDU-MIB", "serverPing"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: serverPingState.setStatus('current')
if mibBuilder.loadTexts: serverPingState.setDescription('The Ping feature has been enabled.')
bootloaderState = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 34)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: bootloaderState.setStatus('current')
if mibBuilder.loadTexts: bootloaderState.setDescription('Enter into Bootloader mode')
daisyChainState = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 35)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "daisyChain"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: daisyChainState.setStatus('current')
if mibBuilder.loadTexts: daisyChainState.setDescription('A daisy chain member has been connected or disconnected.')
systemInternalCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 36)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "systemCommunication"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: systemInternalCommunicationLost.setStatus('current')
if mibBuilder.loadTexts: systemInternalCommunicationLost.setDescription('Network management card has lost contaction with internal boards.')
SmartCabinetLockUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 37)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "pduUnitSmartCabinetDoor"), ("ENLOGIC-PDU-MIB", "pduExternalSensorStatusValue"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: SmartCabinetLockUnlocked.setStatus('current')
if mibBuilder.loadTexts: SmartCabinetLockUnlocked.setDescription('The Cabinet lock is unlocked.')
SmartCabinetLockLocked = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 38)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "pduUnitSmartCabinetDoor"), ("ENLOGIC-PDU-MIB", "pduExternalSensorStatusValue"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: SmartCabinetLockLocked.setStatus('current')
if mibBuilder.loadTexts: SmartCabinetLockLocked.setDescription('The Cabinet lock is locked')
SmartCabinetSwapCard = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 39)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "pduUnitSmartCabinetDoor"), ("ENLOGIC-PDU-MIB", "pduUnitSmartCabinetCardID"), ("ENLOGIC-PDU-MIB", "pduExternalSensorStatusValue"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: SmartCabinetSwapCard.setStatus('current')
if mibBuilder.loadTexts: SmartCabinetSwapCard.setDescription('Card is swapped')
SmartCabinetLockerLockDoorOpen = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 40)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "pduUnitSmartCabinetDoor"), ("ENLOGIC-PDU-MIB", "pduExternalSensorStatusValue"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: SmartCabinetLockerLockDoorOpen.setStatus('current')
if mibBuilder.loadTexts: SmartCabinetLockerLockDoorOpen.setDescription('Locker locked but door open')
SmartCabinetLockerUnlockDoorClose = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 41)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "pduUnitSmartCabinetDoor"), ("ENLOGIC-PDU-MIB", "pduExternalSensorStatusValue"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: SmartCabinetLockerUnlockDoorClose.setStatus('current')
if mibBuilder.loadTexts: SmartCabinetLockerUnlockDoorClose.setDescription('Locker unlocked but door close')
systemReboot = NotificationType((1, 3, 6, 1, 4, 1, 38446, 1, 9, 50)).setObjects(("ENLOGIC-PDU-MIB", "pduIndex"), ("ENLOGIC-PDU-MIB", "pduNamePlateName"), ("ENLOGIC-PDU-MIB", "pduNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "pduNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: systemReboot.setStatus('current')
if mibBuilder.loadTexts: systemReboot.setDescription('System has rebooted')
esp = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 2))
espNamePlate = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 2, 1))
espUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 2, 2))
espInputPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 2, 3))
espCircuitBreaker = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 2, 4))
espExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 2, 6))
espTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 38446, 2, 9))
espNamePlateTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2), )
if mibBuilder.loadTexts: espNamePlateTable.setStatus('current')
if mibBuilder.loadTexts: espNamePlateTable.setDescription('A table of es PDU nameplate data')
espNamePlateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "espNamePlateIndex"))
if mibBuilder.loadTexts: espNamePlateEntry.setStatus('current')
if mibBuilder.loadTexts: espNamePlateEntry.setDescription('Nameplate data from the PDU being queried. The numbers of entries equals the value of espNamePlateTableSize.')
espNamePlateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: espNamePlateIndex.setStatus('current')
if mibBuilder.loadTexts: espNamePlateIndex.setDescription('The index of the es PDU nameplate table entry')
espNamePlateName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espNamePlateName.setStatus('current')
if mibBuilder.loadTexts: espNamePlateName.setDescription('A user-defined string identifying the es PDU')
espNamePlateLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espNamePlateLocation.setStatus('current')
if mibBuilder.loadTexts: espNamePlateLocation.setDescription('A user-defined string identifying the location of PDU')
espNamePlateInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espNamePlateInetAddressType.setStatus('current')
if mibBuilder.loadTexts: espNamePlateInetAddressType.setDescription('The type of address format')
espNamePlateIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espNamePlateIPAddress.setStatus('current')
if mibBuilder.loadTexts: espNamePlateIPAddress.setDescription('The current IP address. A value of 0.0.0.0 indicates an error or an unset option')
espNamePlateInetNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espNamePlateInetNetMask.setStatus('current')
if mibBuilder.loadTexts: espNamePlateInetNetMask.setDescription('The current netmask. A value of 0.0.0.0 indiates an error or an unset option')
espNamePlateInetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espNamePlateInetGateway.setStatus('current')
if mibBuilder.loadTexts: espNamePlateInetGateway.setDescription('The current gateway. A value of 0.0.0.0 indicates an error or an unset option')
espNamePlateMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espNamePlateMACAddress.setStatus('current')
if mibBuilder.loadTexts: espNamePlateMACAddress.setDescription('The assigned MAC address for the PDU')
espNamePlateUTCTimeOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espNamePlateUTCTimeOffset.setStatus('current')
if mibBuilder.loadTexts: espNamePlateUTCTimeOffset.setDescription('The difference in hours and minutes from Coordinated Universal \n\t\tTime(UTC) for the time used in a particular time zone')
espNamePlateModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espNamePlateModelNumber.setStatus('current')
if mibBuilder.loadTexts: espNamePlateModelNumber.setDescription('The PDU model number')
espNamePlateSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espNamePlateSerialNumber.setStatus('current')
if mibBuilder.loadTexts: espNamePlateSerialNumber.setDescription('The PDU serial number')
espNamePlateDateofManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espNamePlateDateofManufacture.setStatus('current')
if mibBuilder.loadTexts: espNamePlateDateofManufacture.setDescription('The date the PDU was manufactured in mm/dd/yyyy format')
espNamePlateFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espNamePlateFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: espNamePlateFirmwareVersion.setDescription('The PDU firmware version')
espNamePlateFirmwareVersionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espNamePlateFirmwareVersionTimeStamp.setStatus('current')
if mibBuilder.loadTexts: espNamePlateFirmwareVersionTimeStamp.setDescription('Timestamp of when the PDU firmware was last updated')
espNamePlateType = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pdu", 0), ("inlineMeter", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espNamePlateType.setStatus('current')
if mibBuilder.loadTexts: espNamePlateType.setDescription('The type of Unit, PDU or Inline Meter')
espUnitConfigTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 2, 2, 2), )
if mibBuilder.loadTexts: espUnitConfigTable.setStatus('current')
if mibBuilder.loadTexts: espUnitConfigTable.setDescription('A table of PDU configuration data')
espUnitConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 2, 2, 2, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "espUnitConfigIndex"))
if mibBuilder.loadTexts: espUnitConfigEntry.setStatus('current')
if mibBuilder.loadTexts: espUnitConfigEntry.setDescription('Configuration data from the PDU being queried. The number of entries equals the value of espUnitTableSize')
espUnitConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: espUnitConfigIndex.setStatus('current')
if mibBuilder.loadTexts: espUnitConfigIndex.setDescription('The index of the PDU Unit Config Entry')
espUnitConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espUnitConfigName.setStatus('current')
if mibBuilder.loadTexts: espUnitConfigName.setDescription('A user-defined string identifying the PDU')
espUnitConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espUnitConfigLocation.setStatus('current')
if mibBuilder.loadTexts: espUnitConfigLocation.setDescription('A user-defined string identifying the location of the PDU')
espUnitConfigEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espUnitConfigEnergyReset.setStatus('current')
if mibBuilder.loadTexts: espUnitConfigEnergyReset.setDescription('Setting this OID to reset (2) will cause the device energy meter value \n\t\tto be reset to zero. Getting this OID in models that support this \n\t\tfeature will do nothing and return the noOperation(1) value. Models \n\t\tthat do not support this feature will respond to this OID with a \n\t\tvalue of notSupported (3). Attempts to set this OID in these models will fail. ')
espUnitConfigResetNetworkManagementCard = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOperation", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espUnitConfigResetNetworkManagementCard.setStatus('current')
if mibBuilder.loadTexts: espUnitConfigResetNetworkManagementCard.setDescription('Getting this OID will return noOperation(0). Setting this OID to reset(1) will reset NMC.')
espUnitPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 2, 2, 3), )
if mibBuilder.loadTexts: espUnitPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: espUnitPropertiesTable.setDescription('A table of PDU properties')
espUnitPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 2, 2, 3, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "espUnitPropertiesIndex"))
if mibBuilder.loadTexts: espUnitPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: espUnitPropertiesEntry.setDescription('A unit properties entry containing objects for a particular unit.')
espUnitPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: espUnitPropertiesIndex.setStatus('current')
if mibBuilder.loadTexts: espUnitPropertiesIndex.setDescription('The index of the PDU properties table entry')
espUnitPropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitPropertiesName.setStatus('current')
if mibBuilder.loadTexts: espUnitPropertiesName.setDescription('A user-defined string identifying the PDU')
espUnitPropertiesOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitPropertiesOutletCount.setStatus('current')
if mibBuilder.loadTexts: espUnitPropertiesOutletCount.setDescription('The total number of outlets on the PDU')
espUnitPropertiesSwitchedOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitPropertiesSwitchedOutletCount.setStatus('current')
if mibBuilder.loadTexts: espUnitPropertiesSwitchedOutletCount.setDescription('The total number of switched outlets on the PDU')
espUnitPropertiesMeteredOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitPropertiesMeteredOutletCount.setStatus('current')
if mibBuilder.loadTexts: espUnitPropertiesMeteredOutletCount.setDescription('The total number of metered outlets on the PDU')
espUnitPropertiesInputPhaseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitPropertiesInputPhaseCount.setStatus('current')
if mibBuilder.loadTexts: espUnitPropertiesInputPhaseCount.setDescription('The total number of phases on the PDU')
espUnitPropertiesCircuitBreakerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitPropertiesCircuitBreakerCount.setStatus('current')
if mibBuilder.loadTexts: espUnitPropertiesCircuitBreakerCount.setDescription('The total number of circuit breaker on the PDU')
espUnitPropertiesMaxExternalSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitPropertiesMaxExternalSensorCount.setStatus('current')
if mibBuilder.loadTexts: espUnitPropertiesMaxExternalSensorCount.setDescription('The maximum number of external sensors that can be connected to the PDU')
espUnitPropertiesConnExternalSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitPropertiesConnExternalSensorCount.setStatus('current')
if mibBuilder.loadTexts: espUnitPropertiesConnExternalSensorCount.setDescription('The current number of external sensors connected to the PDU')
espUnitPropertiesRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitPropertiesRatedVoltage.setStatus('current')
if mibBuilder.loadTexts: espUnitPropertiesRatedVoltage.setDescription('The PDU voltage rating in Volts')
espUnitPropertiesRatedMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitPropertiesRatedMaxCurrent.setStatus('current')
if mibBuilder.loadTexts: espUnitPropertiesRatedMaxCurrent.setDescription('The PDU current rating in Amps')
espUnitPropertiesRatedFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitPropertiesRatedFrequency.setStatus('current')
if mibBuilder.loadTexts: espUnitPropertiesRatedFrequency.setDescription('The PDU frequency rating in Hz')
espUnitPropertiesRatedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitPropertiesRatedPower.setStatus('current')
if mibBuilder.loadTexts: espUnitPropertiesRatedPower.setDescription('The PDU VA (VoltAmps) rating.')
espUnitStatusTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 2, 2, 4), )
if mibBuilder.loadTexts: espUnitStatusTable.setStatus('current')
if mibBuilder.loadTexts: espUnitStatusTable.setDescription('A table of PDU status information')
espUnitStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 2, 2, 4, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "espUnitStatusIndex"))
if mibBuilder.loadTexts: espUnitStatusEntry.setStatus('current')
if mibBuilder.loadTexts: espUnitStatusEntry.setDescription('Status information from the PDU being queried')
espUnitStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: espUnitStatusIndex.setStatus('current')
if mibBuilder.loadTexts: espUnitStatusIndex.setDescription('The index of the PDU status table entry')
espUnitStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitStatusName.setStatus('current')
if mibBuilder.loadTexts: espUnitStatusName.setDescription('A user-defined string identifying the PDU')
espUnitStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("upperCritical", 1), ("upperWarning", 2), ("lowerWarning", 3), ("lowerCritical", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitStatusLoadState.setStatus('current')
if mibBuilder.loadTexts: espUnitStatusLoadState.setDescription('Returns the present load status of the PDU based on Active Power.')
espUnitStatusActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitStatusActivePower.setStatus('current')
if mibBuilder.loadTexts: espUnitStatusActivePower.setDescription('Returns power consumption, in Watts(W), \n\t\tof the PDU being queried.')
espUnitStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitStatusApparentPower.setStatus('current')
if mibBuilder.loadTexts: espUnitStatusApparentPower.setDescription('Returns power consumption, in Volt-Amps(VA) \n\t\tof the PDU load being queried.')
espUnitStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitStatusEnergy.setStatus('current')
if mibBuilder.loadTexts: espUnitStatusEnergy.setDescription('Returns total energy consumed, in tenths of Kilowatt-Hours(kWh), of the PDU over its lifetime.')
espUnitStatusResettableEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitStatusResettableEnergy.setStatus('current')
if mibBuilder.loadTexts: espUnitStatusResettableEnergy.setDescription('A user resettable energy meter measuring PDU energy consumption \n\t\tin tenths of kilowatt-hours(kWh).')
espUnitStatusEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 2, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUnitStatusEnergyStartTime.setStatus('current')
if mibBuilder.loadTexts: espUnitStatusEnergyStartTime.setDescription('Indicates the date and time of the last device energy meter reset')
espInputPhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 2, 3, 2), )
if mibBuilder.loadTexts: espInputPhaseConfigTable.setStatus('current')
if mibBuilder.loadTexts: espInputPhaseConfigTable.setDescription('A table of PDU Input Phase configuration data')
espInputPhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 2, 3, 2, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "espUnitConfigIndex"), (0, "ENLOGIC-PDU-MIB", "espInputPhaseConfigIndex"))
if mibBuilder.loadTexts: espInputPhaseConfigEntry.setStatus('current')
if mibBuilder.loadTexts: espInputPhaseConfigEntry.setDescription('An input phase entry containing objects for a particular input phase.')
espInputPhaseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: espInputPhaseConfigIndex.setStatus('current')
if mibBuilder.loadTexts: espInputPhaseConfigIndex.setDescription('The index of the PDU Input Phase configuration table entry')
espInputPhaseConfigCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espInputPhaseConfigCount.setStatus('current')
if mibBuilder.loadTexts: espInputPhaseConfigCount.setDescription('The total number of Input Phases')
espInputPhaseStatusTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 2, 3, 4), )
if mibBuilder.loadTexts: espInputPhaseStatusTable.setStatus('current')
if mibBuilder.loadTexts: espInputPhaseStatusTable.setDescription('A table of PDU Input Phase status data')
espInputPhaseStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 2, 3, 4, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "espUnitStatusIndex"), (0, "ENLOGIC-PDU-MIB", "espInputPhaseStatusIndex"))
if mibBuilder.loadTexts: espInputPhaseStatusEntry.setStatus('current')
if mibBuilder.loadTexts: espInputPhaseStatusEntry.setDescription('An input phase status entry containing objects for a particular input phase.')
espInputPhaseStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: espInputPhaseStatusIndex.setStatus('current')
if mibBuilder.loadTexts: espInputPhaseStatusIndex.setDescription('The index of the PDU Input Phase status entry')
espInputPhaseStatusCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espInputPhaseStatusCount.setStatus('current')
if mibBuilder.loadTexts: espInputPhaseStatusCount.setDescription('The numeric Input Phase ID')
espInputPhaseStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("upperCritical", 1), ("upperWarning", 2), ("lowerWarning", 3), ("lowerCritical", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espInputPhaseStatusCurrentState.setStatus('current')
if mibBuilder.loadTexts: espInputPhaseStatusCurrentState.setDescription('Indicates the present current status of the PDU Input Phase being queried')
espInputPhaseStatusVoltageState = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("upperCritical", 1), ("upperWarning", 2), ("lowerWarning", 3), ("lowerCritical", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espInputPhaseStatusVoltageState.setStatus('current')
if mibBuilder.loadTexts: espInputPhaseStatusVoltageState.setDescription('Indicates the present voltage status of the PDU Input Phase being queried')
espInputPhaseStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espInputPhaseStatusCurrent.setStatus('current')
if mibBuilder.loadTexts: espInputPhaseStatusCurrent.setDescription('Returns the current draw, in hundredths of Amps(A), of the load on the \n\t\tPDU Input Phase being queried.')
espInputPhaseStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espInputPhaseStatusVoltage.setStatus('current')
if mibBuilder.loadTexts: espInputPhaseStatusVoltage.setDescription('Returns the voltage, in Volts(V), of the PDU Input Phase being queried.')
espInputPhaseStatusActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espInputPhaseStatusActivePower.setStatus('current')
if mibBuilder.loadTexts: espInputPhaseStatusActivePower.setDescription('Returns power consumption, in Watts(W), \n\t\tconsumed on the PDU Input Phase being queried.')
espInputPhaseStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espInputPhaseStatusApparentPower.setStatus('current')
if mibBuilder.loadTexts: espInputPhaseStatusApparentPower.setDescription('Returns power consumption, in Volt-Amps(VA), \n\t\tof the PDU Input Phase being queried.')
espInputPhaseStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espInputPhaseStatusPowerFactor.setStatus('current')
if mibBuilder.loadTexts: espInputPhaseStatusPowerFactor.setDescription('Returns the ratio of active to apparent power of the PDU Input Phase being queried.')
espCircuitBreakerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 2, 4, 2), )
if mibBuilder.loadTexts: espCircuitBreakerConfigTable.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerConfigTable.setDescription('A table of PDU Circuit Breaker configuration data')
espCircuitBreakerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 2, 4, 2, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "espUnitConfigIndex"), (0, "ENLOGIC-PDU-MIB", "espCircuitBreakerConfigIndex"))
if mibBuilder.loadTexts: espCircuitBreakerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerConfigEntry.setDescription('A circuit breaker configuration entry containing objects for a particular circuit breaker.')
espCircuitBreakerConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: espCircuitBreakerConfigIndex.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerConfigIndex.setDescription('The index of the PDU Circuit Breaker configuration table entry')
espCircuitBreakerConfigCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espCircuitBreakerConfigCount.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerConfigCount.setDescription('The number of circuit breakers on the PDU')
espCircuitBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espCircuitBreakerName.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerName.setDescription('The label of the circuit breaker')
espCircuitBreakerPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 2, 4, 3), )
if mibBuilder.loadTexts: espCircuitBreakerPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerPropertiesTable.setDescription('A table of PDU circuit breaker properties')
espCircuitBreakerPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 2, 4, 3, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "espUnitPropertiesIndex"), (0, "ENLOGIC-PDU-MIB", "espCircuitBreakerPropertiesIndex"))
if mibBuilder.loadTexts: espCircuitBreakerPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerPropertiesEntry.setDescription('A circuit breaker properties entry containing objects for a particular circuit breaker.')
espCircuitBreakerPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: espCircuitBreakerPropertiesIndex.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerPropertiesIndex.setDescription('The index of the PDU Circuit Breaker properties table entry')
espCircuitBreakerPropertiesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espCircuitBreakerPropertiesCount.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerPropertiesCount.setDescription('The number of Circuit Breakers')
espCircuitBreakerPropertiesInputLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("seqPhase1ToNeutral", 1), ("seqPhase2ToNeutral", 2), ("seqPhase3ToNeutral", 3), ("seqPhase1ToPhase2", 4), ("seqPhase2ToPhase3", 5), ("seqPhase3ToPhase1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espCircuitBreakerPropertiesInputLayout.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerPropertiesInputLayout.setDescription('This OID describes the outlet phase connections on \n\t\tthe referenced bank as follows: \n\t\tseqPhase1ToNeutral(1) indicates that outlets attached \n\t\tto circuit breaker are connected from Phase 1 to Neutral. \n\t\tseqPhase2ToNeutral(2) indicates that outlets attached \n\t\tto circuit breaker are connected from Phase 2 to Neutral. \n\t\tseqPhase3ToNeutral(3) indicates that outlets attached \n\t\tto circuit breaker are connected from Phase 3 to Neutral. \n\t\tseqPhase1ToPhase2(4) indicates that outlets attached \n\t\tto circuit breaker are connected from Phase 1 to Phase2. \n\t\tseqPhase2ToPhase3(5) indicates that outlets attached \n\t\tto circuit breaker are connected from Phase 2 to Phase3.  \n\t\tseqPhase3ToPhase1(6) indicates that outlets attached \n\t\tto circuit breaker are connected from Phase 3 to Phase1. ')
espCircuitBreakerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 2, 4, 4), )
if mibBuilder.loadTexts: espCircuitBreakerStatusTable.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerStatusTable.setDescription('A table of PDU circuit breaker status data')
espCircuitBreakerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 2, 4, 4, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "espUnitStatusIndex"), (0, "ENLOGIC-PDU-MIB", "espCircuitBreakerStatusIndex"))
if mibBuilder.loadTexts: espCircuitBreakerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerStatusEntry.setDescription('A circuit breaker status entry containing objects for a particular circuit breaker.')
espCircuitBreakerStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: espCircuitBreakerStatusIndex.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerStatusIndex.setDescription('The index of the PDU Circuit Breaker status table entry')
espCircuitBreakerStatusCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espCircuitBreakerStatusCount.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerStatusCount.setDescription('The number of Circuit Breakers')
espCircuitBreakerLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espCircuitBreakerLabel.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerLabel.setDescription('The label on the PDU identifying the circuit breaker')
espCircuitBreakerStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("upperCritical", 1), ("upperWarning", 2), ("lowerWarning", 3), ("lowerCritical", 4), ("normal", 5), ("off", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espCircuitBreakerStatusLoadState.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerStatusLoadState.setDescription('Indicates the present load status of the PDU Circuit \n\t\tBreaker being queried')
espCircuitBreakerStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espCircuitBreakerStatusCurrent.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerStatusCurrent.setDescription('Returns the current draw, in hundredths of Amps(A), of the load on \n\t\tthe PDU Circuit Breaker being queried.')
espExternalSensorNamePlateTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 2, 6, 2), )
if mibBuilder.loadTexts: espExternalSensorNamePlateTable.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorNamePlateTable.setDescription('A table of PDU ExternalSensorNamePlate data')
espExternalSensorNamePlateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 2, 6, 2, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "espNamePlateIndex"), (0, "ENLOGIC-PDU-MIB", "espExternalSensorNamePlateIndex"))
if mibBuilder.loadTexts: espExternalSensorNamePlateEntry.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorNamePlateEntry.setDescription('External Sensor Name Plate data from the external \n\t\tsensor being queried. The number of entries equals \n\t\tthe value of espExternalSensorNamePlateTableSize.')
espExternalSensorNamePlateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: espExternalSensorNamePlateIndex.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorNamePlateIndex.setDescription('The index of the PDU External Sensor status table entry')
espExternalSensorNamePlateName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espExternalSensorNamePlateName.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorNamePlateName.setDescription('A user-defined string identifying the external sensor')
espExternalSensorNamePlateSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espExternalSensorNamePlateSerialNumber.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorNamePlateSerialNumber.setDescription('The serial number of the external sensor being queried')
espExternalSensorNamePlateType = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("temperature", 1), ("humidity", 2), ("doorSwitch", 3), ("dryContact", 4), ("spotFluid", 5), ("ropeFluid", 6), ("smoke", 7), ("beacon", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espExternalSensorNamePlateType.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorNamePlateType.setDescription('The type of external sensor.')
espExternalSensorNamePlateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("logic", 0), ("degreeC", 1), ("degreeF", 2), ("percent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espExternalSensorNamePlateUnits.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorNamePlateUnits.setDescription('The base units the external sensor is measured in. \n\t\tThis parameter does not apply to onOff, trip, vibration,\n\t\t waterDetection, smokeDetection sensors. ')
espExternalSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 2, 6, 3), )
if mibBuilder.loadTexts: espExternalSensorConfigTable.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorConfigTable.setDescription('A table of PDU External Sensor configuration data')
espExternalSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 2, 6, 3, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "espUnitConfigIndex"), (0, "ENLOGIC-PDU-MIB", "espExternalSensorConfigIndex"))
if mibBuilder.loadTexts: espExternalSensorConfigEntry.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorConfigEntry.setDescription('Configuration data from the PDU External \n\t\tSensor being queried')
espExternalSensorConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: espExternalSensorConfigIndex.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorConfigIndex.setDescription('The index of the PDU External Sensor \n\t\tconfiguration table entry')
espExternalSensorConfigAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espExternalSensorConfigAlarmState.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorConfigAlarmState.setDescription('User defined alarm state of external sensor')
espExternalSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 38446, 2, 6, 4), )
if mibBuilder.loadTexts: espExternalSensorStatusTable.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorStatusTable.setDescription('A table of PDU External Sensor status data')
espExternalSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38446, 2, 6, 4, 1), ).setIndexNames((0, "ENLOGIC-PDU-MIB", "espUnitStatusIndex"), (0, "ENLOGIC-PDU-MIB", "espExternalSensorStatusIndex"))
if mibBuilder.loadTexts: espExternalSensorStatusEntry.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorStatusEntry.setDescription('Status data from the PDU External Sensor \n\t\tbeing queried')
espExternalSensorStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: espExternalSensorStatusIndex.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorStatusIndex.setDescription('The index of the PDU External Sensor status table entry')
espExternalSensorStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 6, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espExternalSensorStatusName.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorStatusName.setDescription('The user-defined name for the External Sensor')
espExternalSensorStatusAisle = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hotAisle", 1), ("coldAisle", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espExternalSensorStatusAisle.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorStatusAisle.setDescription('Indicates whether the external sensor is \n\t\tin a hot or cold aisle')
espExternalSensorStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInstalled", 1), ("commsOk", 2), ("commsLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espExternalSensorStatusCommStatus.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorStatusCommStatus.setDescription('The communications status of the sensor')
espExternalSensorStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notPresent", 0), ("alarmed", 1), ("normal", 2), ("belowLowerCritical", 3), ("belowLowerWarning", 4), ("aboveUpperWarning", 5), ("aboveUpperCritical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espExternalSensorStatusState.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorStatusState.setDescription('This OID reports the current state of the sensor. \n\t\t\tA notPresent (0) response indicates that no sensor is attached.\n\t\t\tAn alarmed (1) response indicates that the sensor is present \n\t\t\tand its measured reading indicates alarmed.\n\t\t\tA normal (2) response indicates that the sensor is present \n\t\t\tand its measured reading lies within all thresholds.\n\t\t\tA belowLowerCritical (3) response indicates that the sensor \n\t\t\tis present and its measured reading lies below the lower critical threshold.\n\t\t\tA belowLowerWarning (4) response indicates that the sensor \n\t\t\tis present and its measured reading lies below the lower warning threshold.\n\t\t\tAn aboveUpperWarning (5) response indicates that the sensor \n\t\t\tis present and its measured reading lies above the upper warning threshold.\n\t\t\tAn aboveUpperCritical (6) response indicates that the sensor \n\t\t\tis present and its measured reading lies above the upper critical threshold.')
espExternalSensorStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 6, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espExternalSensorStatusValue.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorStatusValue.setDescription('Sensor reading in espExternalSensorConfigUnits value.')
espExternalSensorStatusHighPrecisionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 38446, 2, 6, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espExternalSensorStatusHighPrecisionValue.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorStatusHighPrecisionValue.setDescription('Temperature sensor reading in tenths of espExternalSensorConfigUnits value.\n\t\tThis OID is applied to temperature sensor only')
espTrapsInfoIndex = MibScalar((1, 3, 6, 1, 4, 1, 38446, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: espTrapsInfoIndex.setStatus('current')
if mibBuilder.loadTexts: espTrapsInfoIndex.setDescription('The index of the traps table entry')
espUserName = MibScalar((1, 3, 6, 1, 4, 1, 38446, 2, 9, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espUserName.setStatus('current')
if mibBuilder.loadTexts: espUserName.setDescription('The user currently logged in.')
espFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 38446, 2, 9, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: espFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: espFirmwareVersion.setDescription('The version of Firmware.')
espIndex = MibScalar((1, 3, 6, 1, 4, 1, 38446, 2, 9, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: espIndex.setStatus('current')
if mibBuilder.loadTexts: espIndex.setDescription('A unique value for PDU. Its value ranges between 1 \n\t\tand the value of PDU count')
espExternalSensorIndex = MibScalar((1, 3, 6, 1, 4, 1, 38446, 2, 9, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: espExternalSensorIndex.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorIndex.setDescription('A unique value for each sensor. Its value ranges between 1 \n\t\tand the value of external sensor count.')
espErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 38446, 2, 9, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: espErrorDescription.setStatus('current')
if mibBuilder.loadTexts: espErrorDescription.setDescription('Description of the Error')
espNetworkCardStart = NotificationType((1, 3, 6, 1, 4, 1, 38446, 2, 9, 8)).setObjects(("ENLOGIC-PDU-MIB", "espIndex"), ("ENLOGIC-PDU-MIB", "espNamePlateName"), ("ENLOGIC-PDU-MIB", "espNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "espNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: espNetworkCardStart.setStatus('current')
if mibBuilder.loadTexts: espNetworkCardStart.setDescription('The network card has started')
espNetworkCardReset = NotificationType((1, 3, 6, 1, 4, 1, 38446, 2, 9, 9)).setObjects(("ENLOGIC-PDU-MIB", "espIndex"), ("ENLOGIC-PDU-MIB", "espNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "espNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "espNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: espNetworkCardReset.setStatus('current')
if mibBuilder.loadTexts: espNetworkCardReset.setDescription('The network card was reset via the web or command line interface.')
espFirmwareUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 38446, 2, 9, 10)).setObjects(("ENLOGIC-PDU-MIB", "espIndex"), ("ENLOGIC-PDU-MIB", "espNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "espNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "espNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "firmwareVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: espFirmwareUpdateCompleted.setStatus('current')
if mibBuilder.loadTexts: espFirmwareUpdateCompleted.setDescription('The firmware update has completed.')
espUserPasswordChange = NotificationType((1, 3, 6, 1, 4, 1, 38446, 2, 9, 11)).setObjects(("ENLOGIC-PDU-MIB", "espIndex"), ("ENLOGIC-PDU-MIB", "espNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "espNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "espNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "userUpdated"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: espUserPasswordChange.setStatus('current')
if mibBuilder.loadTexts: espUserPasswordChange.setDescription('A user password was changed. ')
espLogFileCleared = NotificationType((1, 3, 6, 1, 4, 1, 38446, 2, 9, 12)).setObjects(("ENLOGIC-PDU-MIB", "espIndex"), ("ENLOGIC-PDU-MIB", "espNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "espNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "espNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: espLogFileCleared.setStatus('current')
if mibBuilder.loadTexts: espLogFileCleared.setDescription('The log file has been cleared.')
espConfigurationFileExported = NotificationType((1, 3, 6, 1, 4, 1, 38446, 2, 9, 13)).setObjects(("ENLOGIC-PDU-MIB", "espIndex"), ("ENLOGIC-PDU-MIB", "espNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "espNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "espNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: espConfigurationFileExported.setStatus('current')
if mibBuilder.loadTexts: espConfigurationFileExported.setDescription('PDU configuration file was exported')
espUnitActivePowerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 38446, 2, 9, 14)).setObjects(("ENLOGIC-PDU-MIB", "espIndex"), ("ENLOGIC-PDU-MIB", "espNamePlateName"), ("ENLOGIC-PDU-MIB", "espNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "espNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "espUnitStatusLoadState"), ("ENLOGIC-PDU-MIB", "espUnitStatusActivePower"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: espUnitActivePowerStateChange.setStatus('current')
if mibBuilder.loadTexts: espUnitActivePowerStateChange.setDescription('PDU unit active power state changes.')
espInputphaseVoltageStateChange = NotificationType((1, 3, 6, 1, 4, 1, 38446, 2, 9, 15)).setObjects(("ENLOGIC-PDU-MIB", "espIndex"), ("ENLOGIC-PDU-MIB", "espNamePlateName"), ("ENLOGIC-PDU-MIB", "espNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "espNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "espInputPhaseStatusCount"), ("ENLOGIC-PDU-MIB", "espInputPhaseStatusVoltageState"), ("ENLOGIC-PDU-MIB", "espInputPhaseStatusVoltage"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: espInputphaseVoltageStateChange.setStatus('current')
if mibBuilder.loadTexts: espInputphaseVoltageStateChange.setDescription('PDU input phase voltage state changes.')
espInputphaseCurrentStateChange = NotificationType((1, 3, 6, 1, 4, 1, 38446, 2, 9, 16)).setObjects(("ENLOGIC-PDU-MIB", "espIndex"), ("ENLOGIC-PDU-MIB", "espNamePlateName"), ("ENLOGIC-PDU-MIB", "espNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "espNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "espInputPhaseStatusCount"), ("ENLOGIC-PDU-MIB", "espInputPhaseStatusCurrentState"), ("ENLOGIC-PDU-MIB", "espInputPhaseStatusCurrent"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: espInputphaseCurrentStateChange.setStatus('current')
if mibBuilder.loadTexts: espInputphaseCurrentStateChange.setDescription('PDU input phase Current state changes.')
espCircuitBreakerCurrentStateChange = NotificationType((1, 3, 6, 1, 4, 1, 38446, 2, 9, 17)).setObjects(("ENLOGIC-PDU-MIB", "espIndex"), ("ENLOGIC-PDU-MIB", "espNamePlateName"), ("ENLOGIC-PDU-MIB", "espNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "espNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "espCircuitBreakerStatusIndex"), ("ENLOGIC-PDU-MIB", "espCircuitBreakerStatusLoadState"), ("ENLOGIC-PDU-MIB", "espCircuitBreakerStatusCurrent"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: espCircuitBreakerCurrentStateChange.setStatus('current')
if mibBuilder.loadTexts: espCircuitBreakerCurrentStateChange.setDescription('PDU Circuit Breaker Current state changes.')
espExternalSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 38446, 2, 9, 18)).setObjects(("ENLOGIC-PDU-MIB", "espIndex"), ("ENLOGIC-PDU-MIB", "espNamePlateName"), ("ENLOGIC-PDU-MIB", "espNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "espNamePlateIPAddress"), ("ENLOGIC-PDU-MIB", "espExternalSensorStatusIndex"), ("ENLOGIC-PDU-MIB", "espExternalSensorStatusName"), ("ENLOGIC-PDU-MIB", "espExternalSensorNamePlateType"), ("ENLOGIC-PDU-MIB", "espExternalSensorStatusAisle"), ("ENLOGIC-PDU-MIB", "espExternalSensorNamePlateUnits"), ("ENLOGIC-PDU-MIB", "espExternalSensorStatusState"), ("ENLOGIC-PDU-MIB", "espExternalSensorStatusValue"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: espExternalSensorStateChange.setStatus('current')
if mibBuilder.loadTexts: espExternalSensorStateChange.setDescription('PDU External Sensor state changes.')
espConfigurationFileImported = NotificationType((1, 3, 6, 1, 4, 1, 38446, 2, 9, 19)).setObjects(("ENLOGIC-PDU-MIB", "espIndex"), ("ENLOGIC-PDU-MIB", "espNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "espNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "espNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: espConfigurationFileImported.setStatus('current')
if mibBuilder.loadTexts: espConfigurationFileImported.setDescription('PDU configuration file was imported')
espNetworkUp = NotificationType((1, 3, 6, 1, 4, 1, 38446, 2, 9, 20)).setObjects(("ENLOGIC-PDU-MIB", "espIndex"), ("ENLOGIC-PDU-MIB", "espNamePlateName"), ("ENLOGIC-PDU-MIB", "userName"), ("ENLOGIC-PDU-MIB", "espNamePlateInetAddressType"), ("ENLOGIC-PDU-MIB", "espNamePlateIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: espNetworkUp.setStatus('current')
if mibBuilder.loadTexts: espNetworkUp.setDescription('PDU Network is up ')
mibBuilder.exportSymbols("ENLOGIC-PDU-MIB", pduUnitConfigGlobalOutletStateOnStartup=pduUnitConfigGlobalOutletStateOnStartup, pduInputphaseVoltageStateChange=pduInputphaseVoltageStateChange, pduCircuitBreakerConfigEnabledThresholds=pduCircuitBreakerConfigEnabledThresholds, pduExternalSensorConfigAlarmResetThreshold=pduExternalSensorConfigAlarmResetThreshold, espExternalSensorConfigAlarmState=espExternalSensorConfigAlarmState, pduOutletMeteredConfigUpperCriticalThreshold=pduOutletMeteredConfigUpperCriticalThreshold, serverPingState=serverPingState, pduInputPhaseConfigCurrentUpperWarningThreshold=pduInputPhaseConfigCurrentUpperWarningThreshold, pduOutletSwitchedPropertiesEntry=pduOutletSwitchedPropertiesEntry, PYSNMP_MODULE_ID=enlogic, espUserName=espUserName, enlogic=enlogic, pduUnitConfigDisplayOrientation=pduUnitConfigDisplayOrientation, pduCircuitBreakerStatusLoadState=pduCircuitBreakerStatusLoadState, espNamePlateIndex=espNamePlateIndex, pduOutletSwitchedStatusEntry=pduOutletSwitchedStatusEntry, userAuthenticationFailed=userAuthenticationFailed, pduUnitConfigPeakPowerReset=pduUnitConfigPeakPowerReset, espNetworkCardStart=espNetworkCardStart, espErrorDescription=espErrorDescription, roleDeleted=roleDeleted, userName=userName, pduCircuitBreakerConfigLowerCriticalThreshold=pduCircuitBreakerConfigLowerCriticalThreshold, pduUnitPropertiesName=pduUnitPropertiesName, espInputPhaseStatusCount=espInputPhaseStatusCount, pduUnitPropertiesIndex=pduUnitPropertiesIndex, pduSmartCabinet=pduSmartCabinet, espCircuitBreakerStatusTable=espCircuitBreakerStatusTable, pduInputPhaseStatusActivePower=pduInputPhaseStatusActivePower, firmwareUpdateFailed=firmwareUpdateFailed, espExternalSensorNamePlateName=espExternalSensorNamePlateName, pduUnitStatusIndex=pduUnitStatusIndex, espNamePlateTable=espNamePlateTable, pduOutletSwitchedStatusIndex=pduOutletSwitchedStatusIndex, pduOutletMeteredStatusResettableEnergy=pduOutletMeteredStatusResettableEnergy, pduUnitConfigUpperWarningThreshold=pduUnitConfigUpperWarningThreshold, pduExternalSensorStatusHighPrecisionValue=pduExternalSensorStatusHighPrecisionValue, pduInputPhaseStatusVoltageState=pduInputPhaseStatusVoltageState, pduInputPhaseStatusVoltage=pduInputPhaseStatusVoltage, pduExternalSensorConfigAlarmState=pduExternalSensorConfigAlarmState, espInputPhaseStatusActivePower=espInputPhaseStatusActivePower, pduOutletMeteredConfigIndex=pduOutletMeteredConfigIndex, pduInputPhaseConfigVoltageUpperWarningThreshold=pduInputPhaseConfigVoltageUpperWarningThreshold, pduOutletMeteredPropertiesName=pduOutletMeteredPropertiesName, SmartCabinetSwapCard=SmartCabinetSwapCard, espCircuitBreakerPropertiesEntry=espCircuitBreakerPropertiesEntry, pduOutletMeteredStatusPeakPowerStartTime=pduOutletMeteredStatusPeakPowerStartTime, espNamePlateEntry=espNamePlateEntry, pduOutletMeteredStatusEntry=pduOutletMeteredStatusEntry, pduUnitConfigOutletPeakPowerReset=pduUnitConfigOutletPeakPowerReset, pduUnitConfigName=pduUnitConfigName, pduInputPhasePropertiesTable=pduInputPhasePropertiesTable, pduCircuitBreakerStatusTable=pduCircuitBreakerStatusTable, pduOutletMeteredStatusTable=pduOutletMeteredStatusTable, espExternalSensorNamePlateIndex=espExternalSensorNamePlateIndex, espUnitPropertiesEntry=espUnitPropertiesEntry, pduUnitSmartCabinetControlCardID=pduUnitSmartCabinetControlCardID, pduOutletMeteredStatusNumber=pduOutletMeteredStatusNumber, passwordSettingsChange=passwordSettingsChange, espCircuitBreakerStatusCurrent=espCircuitBreakerStatusCurrent, pduNamePlateIndex=pduNamePlateIndex, pduOutletMeteredConfigEntry=pduOutletMeteredConfigEntry, pduCircuitBreakerConfigAlarmStateChangeDelay=pduCircuitBreakerConfigAlarmStateChangeDelay, pduUnitPropertiesEntry=pduUnitPropertiesEntry, pduOutletSwitchedPropertiesCircuitBreaker=pduOutletSwitchedPropertiesCircuitBreaker, networkCardStart=networkCardStart, espExternalSensorStatusAisle=espExternalSensorStatusAisle, pduExternalSensorStatusIndex=pduExternalSensorStatusIndex, pduInputPhaseStatusCount=pduInputPhaseStatusCount, userBlocked=userBlocked, espUnitConfigName=espUnitConfigName, espExternalSensorStateChange=espExternalSensorStateChange, espInputPhaseStatusEntry=espInputPhaseStatusEntry, pduCircuitBreakerStatusCount=pduCircuitBreakerStatusCount, pduUnitConfigUsb=pduUnitConfigUsb, SmartCabinetLockerUnlockDoorClose=SmartCabinetLockerUnlockDoorClose, logFileCleared=logFileCleared, pduInputPhaseConfigVoltageAlarmResetThreshold=pduInputPhaseConfigVoltageAlarmResetThreshold, espCircuitBreakerLabel=espCircuitBreakerLabel, pduOutletMeteredPropertiesInputPhaseLayout=pduOutletMeteredPropertiesInputPhaseLayout, espNamePlateLocation=espNamePlateLocation, pduCircuitBreakerStatusEntry=pduCircuitBreakerStatusEntry, pduUnitConfigUpperCriticalThreshold=pduUnitConfigUpperCriticalThreshold, pduUnitPropertiesSwitchedOutletCount=pduUnitPropertiesSwitchedOutletCount, pduExternalSensorStatusState=pduExternalSensorStatusState, pduUnitPropertiesServerCount=pduUnitPropertiesServerCount, pduOutletMeteredPropertiesPowerRating=pduOutletMeteredPropertiesPowerRating, espNetworkUp=espNetworkUp, espUnitPropertiesMaxExternalSensorCount=espUnitPropertiesMaxExternalSensorCount, pduCircuitBreakerConfigEntry=pduCircuitBreakerConfigEntry, espUnitPropertiesIndex=espUnitPropertiesIndex, pduUnitSmartCabinetTable=pduUnitSmartCabinetTable, espExternalSensorNamePlateType=espExternalSensorNamePlateType, espUnitPropertiesRatedMaxCurrent=espUnitPropertiesRatedMaxCurrent, pduInputPhaseStatusCurrent=pduInputPhaseStatusCurrent, espUnitPropertiesRatedFrequency=espUnitPropertiesRatedFrequency, pduUnitPropertiesDaisyChainMemberType=pduUnitPropertiesDaisyChainMemberType, pduCircuitBreakerLabel=pduCircuitBreakerLabel, espUnitConfigResetNetworkManagementCard=espUnitConfigResetNetworkManagementCard, pduOutletMeteredStatusPeakPower=pduOutletMeteredStatusPeakPower, pduUnitSmartCabinetControlUserName=pduUnitSmartCabinetControlUserName, pduUnitStatusLoadState=pduUnitStatusLoadState, pduUnitPropertiesMaxExternalSensorCount=pduUnitPropertiesMaxExternalSensorCount, pduServerPingTableSize=pduServerPingTableSize, espInputPhaseStatusPowerFactor=espInputPhaseStatusPowerFactor, pduExternalSensorNamePlateType=pduExternalSensorNamePlateType, espTraps=espTraps, smtpTransmissionFailure=smtpTransmissionFailure, pduUnitStatusResettableEnergy=pduUnitStatusResettableEnergy, espExternalSensorNamePlateTable=espExternalSensorNamePlateTable, espConfigurationFileImported=espConfigurationFileImported, errorDescription=errorDescription, espNamePlateFirmwareVersionTimeStamp=espNamePlateFirmwareVersionTimeStamp, pduOutletSwitchedName=pduOutletSwitchedName, pduUnitTableSize=pduUnitTableSize, pduOutletSwitchedControlCommand=pduOutletSwitchedControlCommand, espInputphaseVoltageStateChange=espInputphaseVoltageStateChange, espExternalSensorNamePlateUnits=espExternalSensorNamePlateUnits, pduOutletMeteredStatusPeakPowerTimeStamp=pduOutletMeteredStatusPeakPowerTimeStamp, pduUnitConfigResetNetworkManagementCard=pduUnitConfigResetNetworkManagementCard, pduIndex=pduIndex, pduExternalSensorConfigUpperWarningThreshold=pduExternalSensorConfigUpperWarningThreshold, espNamePlateType=espNamePlateType, pduOutletMeteredConfigAlarmResetThreshold=pduOutletMeteredConfigAlarmResetThreshold, pduUnitPropertiesOutletLayout=pduUnitPropertiesOutletLayout, pduCircuitBreakerStatusIndex=pduCircuitBreakerStatusIndex, userDeleted=userDeleted, pduOutletMeteredPropertiesNumber=pduOutletMeteredPropertiesNumber, pduUnitPropertiesInputPhaseCount=pduUnitPropertiesInputPhaseCount, pduUnitSmartCabinetIndex=pduUnitSmartCabinetIndex, pduExternalSensorNamePlateName=pduExternalSensorNamePlateName, pduExternalSensorConfigTable=pduExternalSensorConfigTable, usbDevice=usbDevice, espCircuitBreakerCurrentStateChange=espCircuitBreakerCurrentStateChange, espExternalSensorStatusIndex=espExternalSensorStatusIndex, pduExternalSensorStatusEntry=pduExternalSensorStatusEntry, pduUnitPropertiesRatedPower=pduUnitPropertiesRatedPower, espInputPhase=espInputPhase, espCircuitBreakerStatusIndex=espCircuitBreakerStatusIndex, pduNamePlateMACAddress=pduNamePlateMACAddress, daisyChainState=daisyChainState, espUnitStatusApparentPower=espUnitStatusApparentPower, pduExternalSensorStateChange=pduExternalSensorStateChange, pduUnitConfigDaisyChainState=pduUnitConfigDaisyChainState, pduInputPhaseTableSize=pduInputPhaseTableSize, pduInputPhaseConfigCurrentLowerWarningThreshold=pduInputPhaseConfigCurrentLowerWarningThreshold, pduInputPhaseConfigCurrentAlarmStateChangeDelay=pduInputPhaseConfigCurrentAlarmStateChangeDelay, espUnitPropertiesInputPhaseCount=espUnitPropertiesInputPhaseCount, pduOutletSwitchedControlName=pduOutletSwitchedControlName, espUnitStatusLoadState=espUnitStatusLoadState, espCircuitBreakerConfigIndex=espCircuitBreakerConfigIndex, pduOutletSwitchedStateOnStartup=pduOutletSwitchedStateOnStartup, pduExternalSensor=pduExternalSensor, espCircuitBreakerName=espCircuitBreakerName, pduInputPhaseConfigTable=pduInputPhaseConfigTable, espUserPasswordChange=espUserPasswordChange, pduNamePlateInetAddressType=pduNamePlateInetAddressType, pduOutletMeteredPropertiesEntry=pduOutletMeteredPropertiesEntry, espUnitConfigLocation=espUnitConfigLocation, espInputPhaseConfigTable=espInputPhaseConfigTable, pduUnitConfigAlarmResetThreshold=pduUnitConfigAlarmResetThreshold, espExternalSensorStatusName=espExternalSensorStatusName, pduCircuitBreakerConfigLowerWarningThreshold=pduCircuitBreakerConfigLowerWarningThreshold, espInputPhaseStatusCurrent=espInputPhaseStatusCurrent, espUnitStatusEnergyStartTime=espUnitStatusEnergyStartTime, systemReboot=systemReboot, pduCircuitBreakerConfigOverloadRestriction=pduCircuitBreakerConfigOverloadRestriction, pduOutletMeteredName=pduOutletMeteredName, pduOutletSwitchedTableSize=pduOutletSwitchedTableSize, pduInputPhaseConfigCurrentLowerCriticalThreshold=pduInputPhaseConfigCurrentLowerCriticalThreshold, pduCircuitBreakerConfigUpperWarningThreshold=pduCircuitBreakerConfigUpperWarningThreshold, pduOutletSwitchedControlIndex=pduOutletSwitchedControlIndex, pduInputPhaseConfigVoltageLowerCriticalThreshold=pduInputPhaseConfigVoltageLowerCriticalThreshold, pduExternalSensorStatusAisle=pduExternalSensorStatusAisle, espExternalSensorConfigIndex=espExternalSensorConfigIndex, espFirmwareVersion=espFirmwareVersion, roleUpdated=roleUpdated, pduTraps=pduTraps, trapsInfoIndex=trapsInfoIndex, smtpRecipients=smtpRecipients, espLogFileCleared=espLogFileCleared, pduExternalSensorStatusTimeStamp=pduExternalSensorStatusTimeStamp, espExternalSensorStatusCommStatus=espExternalSensorStatusCommStatus, pduOutletMeteredConfigUpperWarningThreshold=pduOutletMeteredConfigUpperWarningThreshold, pduUnitSmartCabinetCardUserName=pduUnitSmartCabinetCardUserName, ldapError=ldapError, firmwareVersion=firmwareVersion, pduOutletMeteredConfigLowerWarningThreshold=pduOutletMeteredConfigLowerWarningThreshold, pduOutletSwitchedStatusNumber=pduOutletSwitchedStatusNumber, pduOutletSwitchedControlEntry=pduOutletSwitchedControlEntry, espInputPhaseStatusIndex=espInputPhaseStatusIndex, espCircuitBreakerStatusLoadState=espCircuitBreakerStatusLoadState, espConfigurationFileExported=espConfigurationFileExported, pduCircuitBreakerPropertiesTable=pduCircuitBreakerPropertiesTable, espUnitPropertiesName=espUnitPropertiesName, espExternalSensorNamePlateEntry=espExternalSensorNamePlateEntry, espCircuitBreakerConfigEntry=espCircuitBreakerConfigEntry, SmartCabinetLockUnlocked=SmartCabinetLockUnlocked, pduCircuitBreakerConfigTable=pduCircuitBreakerConfigTable, pduUnitConfigSsh=pduUnitConfigSsh, pduUnitSmartCabinetTableSize=pduUnitSmartCabinetTableSize, pduOutletMeteredConfigLowerCriticalThreshold=pduOutletMeteredConfigLowerCriticalThreshold, pduNamePlateLocation=pduNamePlateLocation, pduInputPhaseConfigVoltageLowerWarningThreshold=pduInputPhaseConfigVoltageLowerWarningThreshold, pduOutletSwitchedConfigRebootDuration=pduOutletSwitchedConfigRebootDuration, pduOutletSwitchedStatusState=pduOutletSwitchedStatusState, pduUnitSmartCabinetCardID=pduUnitSmartCabinetCardID, espCircuitBreakerPropertiesCount=espCircuitBreakerPropertiesCount, pduOutletActivePowerStateChange=pduOutletActivePowerStateChange, pduUnitPropertiesConnExternalSensorCount=pduUnitPropertiesConnExternalSensorCount, pduNamePlateModelNumber=pduNamePlateModelNumber, pduOutletMeteredTableSize=pduOutletMeteredTableSize, pduNamePlateInetGateway=pduNamePlateInetGateway, pduCircuitBreakerConfigUpperCriticalThreshold=pduCircuitBreakerConfigUpperCriticalThreshold, pduOutletSwitchedConfigPowerOffTime=pduOutletSwitchedConfigPowerOffTime, SmartCabinetLockerLockDoorOpen=SmartCabinetLockerLockDoorOpen, pduUnitPropertiesRatedFrequency=pduUnitPropertiesRatedFrequency, espCircuitBreakerPropertiesInputLayout=espCircuitBreakerPropertiesInputLayout, espNamePlateInetAddressType=espNamePlateInetAddressType, pduUnitPropertiesOutletCount=pduUnitPropertiesOutletCount, bootloaderState=bootloaderState, pduCircuitBreakerPropertiesCount=pduCircuitBreakerPropertiesCount, pduUnitStatusApparentPower=pduUnitStatusApparentPower, pduUnitConfigLowerCriticalThreshold=pduUnitConfigLowerCriticalThreshold, pduExternalSensorConfigIndex=pduExternalSensorConfigIndex, pduInputPhaseStatusTable=pduInputPhaseStatusTable, pduCircuitBreakerConfigAlarmResetThreshold=pduCircuitBreakerConfigAlarmResetThreshold, pduCircuitBreakerCurrentStateChange=pduCircuitBreakerCurrentStateChange, pduOutletMeteredConfigTable=pduOutletMeteredConfigTable, pduUnitStatusOutletsEnergyStartTime=pduUnitStatusOutletsEnergyStartTime, espUnitPropertiesCircuitBreakerCount=espUnitPropertiesCircuitBreakerCount, pduCircuitBreakerPropertiesIndex=pduCircuitBreakerPropertiesIndex, pduCircuitBreakerConfigIndex=pduCircuitBreakerConfigIndex, pduCircuitBreakerStatusCurrent=pduCircuitBreakerStatusCurrent, espInputPhaseStatusVoltageState=espInputPhaseStatusVoltageState, pduCircuitBreakerConfigCount=pduCircuitBreakerConfigCount, espUnitStatusActivePower=espUnitStatusActivePower, pduOutletSwitchedStatusName=pduOutletSwitchedStatusName, pduExternalSensorConfigUpperCriticalThreshold=pduExternalSensorConfigUpperCriticalThreshold, outletControl=outletControl, espNamePlateName=espNamePlateName, pduExternalSensorNamePlateSerialNumber=pduExternalSensorNamePlateSerialNumber, pduOutletMeteredStatusActivePower=pduOutletMeteredStatusActivePower, SmartCabinetLockLocked=SmartCabinetLockLocked, espExternalSensor=espExternalSensor, espUnitConfigIndex=espUnitConfigIndex, espUnitPropertiesConnExternalSensorCount=espUnitPropertiesConnExternalSensorCount, espInputPhaseStatusCurrentState=espInputPhaseStatusCurrentState, espExternalSensorStatusEntry=espExternalSensorStatusEntry, pduUnitStatusPeakPower=pduUnitStatusPeakPower, userSessionTimeout=userSessionTimeout, espNamePlateInetNetMask=espNamePlateInetNetMask, espNamePlateInetGateway=espNamePlateInetGateway, pduExternalSensorConfigAlarmStateChangeDelay=pduExternalSensorConfigAlarmStateChangeDelay)
mibBuilder.exportSymbols("ENLOGIC-PDU-MIB", pduInputPhaseStatusApparentPower=pduInputPhaseStatusApparentPower, pduNamePlateUTCTimeOffset=pduNamePlateUTCTimeOffset, pduUnitStatusEntry=pduUnitStatusEntry, pduUnitStatusEnergy=pduUnitStatusEnergy, pduUnitStatusName=pduUnitStatusName, pduInputPhaseConfigCurrentEnabledThresholds=pduInputPhaseConfigCurrentEnabledThresholds, pduServerPing=pduServerPing, pduUnitStatusTable=pduUnitStatusTable, espUnitStatusName=espUnitStatusName, espCircuitBreakerPropertiesIndex=espCircuitBreakerPropertiesIndex, trapsInfo=trapsInfo, espUnitPropertiesRatedVoltage=espUnitPropertiesRatedVoltage, pduOutletMeteredConfigEnabledThresholds=pduOutletMeteredConfigEnabledThresholds, pduExternalSensorTableSize=pduExternalSensorTableSize, espNamePlateUTCTimeOffset=espNamePlateUTCTimeOffset, pduInputPhase=pduInputPhase, espExternalSensorIndex=espExternalSensorIndex, pduExternalSensorConfigLowerWarningThreshold=pduExternalSensorConfigLowerWarningThreshold, pduUnitSmartCabinetCardIDEdit=pduUnitSmartCabinetCardIDEdit, pduExternalSensorNamePlateLocation=pduExternalSensorNamePlateLocation, pduServerPingEnabled=pduServerPingEnabled, pduServerPingEntry=pduServerPingEntry, userModified=userModified, espUnitPropertiesSwitchedOutletCount=espUnitPropertiesSwitchedOutletCount, pduNamePlateIPAddress=pduNamePlateIPAddress, pduUnitSmartCabinetControlDoor=pduUnitSmartCabinetControlDoor, pduUnitConfigAlarmStateChangeDelay=pduUnitConfigAlarmStateChangeDelay, espExternalSensorStatusValue=espExternalSensorStatusValue, pduInputPhasePropertiesEntry=pduInputPhasePropertiesEntry, espInputPhaseConfigCount=espInputPhaseConfigCount, espExternalSensorStatusHighPrecisionValue=espExternalSensorStatusHighPrecisionValue, userLogoff=userLogoff, pduServerPingIndex=pduServerPingIndex, espInputPhaseConfigEntry=espInputPhaseConfigEntry, pduInputPhaseConfigIndex=pduInputPhaseConfigIndex, pduUnitSmartCabinetColdAisleLockState=pduUnitSmartCabinetColdAisleLockState, espNamePlateMACAddress=espNamePlateMACAddress, pduUnitConfigEnabledThresholds=pduUnitConfigEnabledThresholds, pduInputPhaseConfigVoltageUpperCriticalThreshold=pduInputPhaseConfigVoltageUpperCriticalThreshold, pduOutletMeteredConfigAlarmStateChangeDelay=pduOutletMeteredConfigAlarmStateChangeDelay, pduExternalSensorConfigEntry=pduExternalSensorConfigEntry, pduCircuitBreakerName=pduCircuitBreakerName, firmwareUpdateStarted=firmwareUpdateStarted, pduServerPingTable=pduServerPingTable, pduUnitConfigEnergyReset=pduUnitConfigEnergyReset, pduInputPhaseStatusCurrentState=pduInputPhaseStatusCurrentState, pduServerPingServerIPAddress=pduServerPingServerIPAddress, userAdded=userAdded, espUnitConfigEnergyReset=espUnitConfigEnergyReset, pduInputPhaseConfigCount=pduInputPhaseConfigCount, pduUnitPropertiesRatedMaxCurrent=pduUnitPropertiesRatedMaxCurrent, pduOutletSwitchedControlNumber=pduOutletSwitchedControlNumber, serverPing=serverPing, espUnitPropertiesOutletCount=espUnitPropertiesOutletCount, pduUnitPropertiesMeteredOutletCount=pduUnitPropertiesMeteredOutletCount, pduNamePlateDateofManufacture=pduNamePlateDateofManufacture, esp=esp, pduExternalSensorStatusValue=pduExternalSensorStatusValue, smtpServer=smtpServer, daisyChain=daisyChain, pduExternalSensorNamePlateTable=pduExternalSensorNamePlateTable, pduOutletMeteredStatusCurrent=pduOutletMeteredStatusCurrent, espUnitStatusResettableEnergy=espUnitStatusResettableEnergy, espUnitStatusIndex=espUnitStatusIndex, espTrapsInfoIndex=espTrapsInfoIndex, pduNamePlate=pduNamePlate, pduExternalSensorNamePlateUnits=pduExternalSensorNamePlateUnits, pduInputPhaseStatusIndex=pduInputPhaseStatusIndex, pduOutletSwitchedControlTable=pduOutletSwitchedControlTable, pduOutletMeteredStatusLoadState=pduOutletMeteredStatusLoadState, pduOutletMeteredStatusPowerFactor=pduOutletMeteredStatusPowerFactor, espExternalSensorConfigTable=espExternalSensorConfigTable, espUnitPropertiesTable=espUnitPropertiesTable, pduConfigurationFileImported=pduConfigurationFileImported, pduNamePlateTable=pduNamePlateTable, pduOutletMeteredPropertiesTable=pduOutletMeteredPropertiesTable, userLogin=userLogin, espNamePlateFirmwareVersion=espNamePlateFirmwareVersion, espUnitStatusEntry=espUnitStatusEntry, pduUnitConfigLocation=pduUnitConfigLocation, espIndex=espIndex, espUnitConfigEntry=espUnitConfigEntry, espFirmwareUpdateCompleted=espFirmwareUpdateCompleted, espCircuitBreakerPropertiesTable=espCircuitBreakerPropertiesTable, pduNamePlateEntry=pduNamePlateEntry, pduExternalSensorNamePlateIdentifier=pduExternalSensorNamePlateIdentifier, pduExternalSensorNamePlateIndex=pduExternalSensorNamePlateIndex, pduUnitSmartCabinetControl=pduUnitSmartCabinetControl, pduUnitPropertiesOrientation=pduUnitPropertiesOrientation, pduUnitStatusPeakPowerTimestamp=pduUnitStatusPeakPowerTimestamp, pduOutletSwitchedConfigEntry=pduOutletSwitchedConfigEntry, pduUnitPropertiesRatedVoltage=pduUnitPropertiesRatedVoltage, pduExternalSensorStatusTable=pduExternalSensorStatusTable, pduOutletSwitchedPropertiesIndex=pduOutletSwitchedPropertiesIndex, espUnitPropertiesRatedPower=espUnitPropertiesRatedPower, pduInputPhaseConfigVoltageEnabledThresholds=pduInputPhaseConfigVoltageEnabledThresholds, espExternalSensorStatusTable=espExternalSensorStatusTable, espUnit=espUnit, pduNamePlateSerialNumber=pduNamePlateSerialNumber, pduOutlet=pduOutlet, pduNamePlateTableSize=pduNamePlateTableSize, pduUnitStatusPeakPowerStartTime=pduUnitStatusPeakPowerStartTime, espNamePlateSerialNumber=espNamePlateSerialNumber, pduOutletMeteredPropertiesCircuitBreaker=pduOutletMeteredPropertiesCircuitBreaker, espNamePlateIPAddress=espNamePlateIPAddress, pduCircuitBreakerPropertiesInputLayout=pduCircuitBreakerPropertiesInputLayout, pduOutletSwitchedConfigPowerOnTime=pduOutletSwitchedConfigPowerOnTime, trapsInfoEntry=trapsInfoEntry, pduUnitStatusActivePower=pduUnitStatusActivePower, pduCircuitBreakerTableSize=pduCircuitBreakerTableSize, pduNamePlateFirmwareVersionTimeStamp=pduNamePlateFirmwareVersionTimeStamp, pduInputPhaseConfigEntry=pduInputPhaseConfigEntry, espInputphaseCurrentStateChange=espInputphaseCurrentStateChange, espInputPhaseStatusVoltage=espInputPhaseStatusVoltage, pdu=pdu, espNamePlateModelNumber=espNamePlateModelNumber, espCircuitBreakerStatusCount=espCircuitBreakerStatusCount, pduCircuitBreakerPropertiesEntry=pduCircuitBreakerPropertiesEntry, espUnitPropertiesMeteredOutletCount=espUnitPropertiesMeteredOutletCount, pduUnitConfigTable=pduUnitConfigTable, espNamePlateDateofManufacture=espNamePlateDateofManufacture, pduOutletMeteredStatusIndex=pduOutletMeteredStatusIndex, pduOutletSwitchedConfigIndex=pduOutletSwitchedConfigIndex, pduNamePlateInetNetMask=pduNamePlateInetNetMask, pduInputPhaseConfigCurrentUpperCriticalThreshold=pduInputPhaseConfigCurrentUpperCriticalThreshold, espUnitStatusTable=espUnitStatusTable, espInputPhaseStatusApparentPower=espInputPhaseStatusApparentPower, systemInternalCommunicationLost=systemInternalCommunicationLost, pduUnitPropertiesCircuitBreakerCount=pduUnitPropertiesCircuitBreakerCount, pduUnitConfigColdstartDelay=pduUnitConfigColdstartDelay, pduExternalSensorNamePlateEntry=pduExternalSensorNamePlateEntry, pduUnitSmartCabinetHotAisleLockState=pduUnitSmartCabinetHotAisleLockState, espCircuitBreakerStatusEntry=espCircuitBreakerStatusEntry, pduInputPhasePropertiesCount=pduInputPhasePropertiesCount, pduNamePlateName=pduNamePlateName, pduCircuitBreaker=pduCircuitBreaker, pduInputPhaseConfigCurrentAlarmResetThreshold=pduInputPhaseConfigCurrentAlarmResetThreshold, espNamePlate=espNamePlate, espCircuitBreaker=espCircuitBreaker, pduUnitSmartCabinetEntry=pduUnitSmartCabinetEntry, espExternalSensorConfigEntry=espExternalSensorConfigEntry, pduInputphaseCurrentStateChange=pduInputphaseCurrentStateChange, pduOutletSwitchedStatusTable=pduOutletSwitchedStatusTable, pduUnitSmartCabinetControlTimestamp=pduUnitSmartCabinetControlTimestamp, pduNamePlateFirmwareVersion=pduNamePlateFirmwareVersion, espUnitStatusEnergy=espUnitStatusEnergy, espInputPhaseStatusTable=espInputPhaseStatusTable, pduInputPhaseConfigVoltageAlarmStateChangeDelay=pduInputPhaseConfigVoltageAlarmStateChangeDelay, pduInputPhaseStatusEntry=pduInputPhaseStatusEntry, pduUnitPropertiesTable=pduUnitPropertiesTable, networkCardReset=networkCardReset, roleModified=roleModified, firmwareUpdateCompleted=firmwareUpdateCompleted, pduUnitConfigEntry=pduUnitConfigEntry, pduUnitConfigIndex=pduUnitConfigIndex, pduInputPhaseStatusPowerFactor=pduInputPhaseStatusPowerFactor, pduInputPhaseConfigOverloadRestriction=pduInputPhaseConfigOverloadRestriction, pduOutletSwitchedPropertiesName=pduOutletSwitchedPropertiesName, pduOutletSwitchedPropertiesInputPhaseLayout=pduOutletSwitchedPropertiesInputPhaseLayout, pduExternalSensorStatusName=pduExternalSensorStatusName, pduOutletMeteredPropertiesIndex=pduOutletMeteredPropertiesIndex, espUnitConfigTable=espUnitConfigTable, systemCommunication=systemCommunication, pduUnitConfigOutletEnergyReset=pduUnitConfigOutletEnergyReset, pduUnitSmartCabinetDoor=pduUnitSmartCabinetDoor, pduOutletSwitchedPropertiesTable=pduOutletSwitchedPropertiesTable, pduOutletMeteredStatusName=pduOutletMeteredStatusName, externalSensorIndex=externalSensorIndex, roleAdded=roleAdded, pduUnit=pduUnit, pduExternalSensorConfigEnabledThresholds=pduExternalSensorConfigEnabledThresholds, pduUnitSmartCabinetTimestamp=pduUnitSmartCabinetTimestamp, espInputPhaseConfigIndex=espInputPhaseConfigIndex, pduInputPhasePropertiesIndex=pduInputPhasePropertiesIndex, pduConfigurationFileExported=pduConfigurationFileExported, pduExternalSensorNamePlateDescription=pduExternalSensorNamePlateDescription, espCircuitBreakerConfigCount=espCircuitBreakerConfigCount, espExternalSensorNamePlateSerialNumber=espExternalSensorNamePlateSerialNumber, pduExternalSensorStatusCommStatus=pduExternalSensorStatusCommStatus, espExternalSensorStatusState=espExternalSensorStatusState, pduOutletSwitchedConfigTable=pduOutletSwitchedConfigTable, espNetworkCardReset=espNetworkCardReset, pduUnitConfigLowerWarningThreshold=pduUnitConfigLowerWarningThreshold, pduNamePlateType=pduNamePlateType, espCircuitBreakerConfigTable=espCircuitBreakerConfigTable, pduExternalSensorConfigLowerCriticalThreshold=pduExternalSensorConfigLowerCriticalThreshold, pduUnitStatusEnergyStartTime=pduUnitStatusEnergyStartTime, trapsInfoTable=trapsInfoTable, userPasswordChange=userPasswordChange, pduUnitActivePowerStateChange=pduUnitActivePowerStateChange, pduOutletSwitchedPropertiesNumber=pduOutletSwitchedPropertiesNumber, espUnitActivePowerStateChange=espUnitActivePowerStateChange, userUpdated=userUpdated)
