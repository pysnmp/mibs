#
# PySNMP MIB module RADIO-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/siklu/RADIO-BRIDGE-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 10:11:17 2024
# On host fv-az1773-903 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
dot1agCfmMepEntry, = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "dot1agCfmMepEntry")
ieee8021QBridgeTpFdbEntry, = mibBuilder.importSymbols("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeTpFdbEntry")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, TimeTicks, ObjectIdentity, Counter32, IpAddress, Integer32, iso, ModuleIdentity, MibIdentifier, Gauge32, Unsigned32, enterprises, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "ObjectIdentity", "Counter32", "IpAddress", "Integer32", "iso", "ModuleIdentity", "MibIdentifier", "Gauge32", "Unsigned32", "enterprises", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
TruthValue, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TextualConvention")
radioBridgeRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 31926))
radioBridgeSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 1))
radioBridgeRf = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 2))
radioBridgeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 3))
radioBridgeRefClock = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 4))
radioBridgeEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 5))
radioBridgeQosClassifier = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 6))
radioBridgeQosIngressQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 7))
radioBridgeQosEgressQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 8))
radioBridgeIp = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 9))
radioBridgeCfm = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 10))
radioBridgeAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 11))
radioBridgeScheduler = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 12))
radioBridgeEncryption = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 13))
radioBridgeMeter = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 14))
radioBridgeEventConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 15))
radioBridgeSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 17))
radioBridgeLldp = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 19))
radioBridgeWred = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 20))
radioBridgeAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 21))
radioBridgeQuota = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 22))
radioBridgePcpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 23))
radioBridgeSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 24))
radioBridgeNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 25))
radioBridgeLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 26))
rbSysVoltage = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSysVoltage.setStatus('current')
if mibBuilder.loadTexts: rbSysVoltage.setDescription('')
rbSysTemperature = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSysTemperature.setStatus('current')
if mibBuilder.loadTexts: rbSysTemperature.setDescription('')
rbSysSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbSysSaveConfiguration.setStatus('current')
if mibBuilder.loadTexts: rbSysSaveConfiguration.setDescription('')
rbSysReset = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbSysReset.setStatus('current')
if mibBuilder.loadTexts: rbSysReset.setDescription('Read the variable value and then write this value for reset')
rbSwBank1Version = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSwBank1Version.setStatus('current')
if mibBuilder.loadTexts: rbSwBank1Version.setDescription('')
rbSwBank2Version = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSwBank2Version.setStatus('current')
if mibBuilder.loadTexts: rbSwBank2Version.setDescription('')
rbSwBank1Running = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noRunning", 1), ("running", 2), ("running-wait-accept", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSwBank1Running.setStatus('current')
if mibBuilder.loadTexts: rbSwBank1Running.setDescription('')
rbSwBank2Running = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noRunning", 1), ("running", 2), ("running-wait-accept", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSwBank2Running.setStatus('current')
if mibBuilder.loadTexts: rbSwBank2Running.setDescription('')
rbSwBank1ScheduledToRunNextReset = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSwBank1ScheduledToRunNextReset.setStatus('current')
if mibBuilder.loadTexts: rbSwBank1ScheduledToRunNextReset.setDescription('')
rbSwBank2ScheduledToRunNextReset = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSwBank2ScheduledToRunNextReset.setStatus('current')
if mibBuilder.loadTexts: rbSwBank2ScheduledToRunNextReset.setDescription('')
rbSystemUpAbsoluteTime = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSystemUpAbsoluteTime.setStatus('current')
if mibBuilder.loadTexts: rbSystemUpAbsoluteTime.setDescription('since the Epoch (00:00:00 UTC, January 1, 1970), measured in seconds.')
rbSystemAuthenticationMode = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("tacacs", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbSystemAuthenticationMode.setStatus('current')
if mibBuilder.loadTexts: rbSystemAuthenticationMode.setDescription('')
rbSystemAuthenticationSecret = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbSystemAuthenticationSecret.setStatus('current')
if mibBuilder.loadTexts: rbSystemAuthenticationSecret.setDescription('')
rbSystemCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 14), Bits().clone(namedValues=NamedValues(("nmsFtp", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSystemCapabilities.setStatus('current')
if mibBuilder.loadTexts: rbSystemCapabilities.setDescription('')
rbDate = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbDate.setStatus('current')
if mibBuilder.loadTexts: rbDate.setDescription('')
rbTime = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbTime.setStatus('current')
if mibBuilder.loadTexts: rbTime.setDescription('')
rbRfTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 2, 1), )
if mibBuilder.loadTexts: rbRfTable.setStatus('current')
if mibBuilder.loadTexts: rbRfTable.setDescription('')
rbRfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rfIndex"))
if mibBuilder.loadTexts: rbRfEntry.setStatus('current')
if mibBuilder.loadTexts: rbRfEntry.setDescription('')
rfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rfIndex.setStatus('current')
if mibBuilder.loadTexts: rfIndex.setDescription('')
rfNumOfChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfNumOfChannels.setStatus('current')
if mibBuilder.loadTexts: rfNumOfChannels.setDescription('')
rfChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfWidth250", 1), ("rfWidth500", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfChannelWidth.setStatus('current')
if mibBuilder.loadTexts: rfChannelWidth.setDescription('')
rfOperationalFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfOperationalFrequency.setStatus('current')
if mibBuilder.loadTexts: rfOperationalFrequency.setDescription('')
rfRole = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfMaster", 1), ("rfSlave", 2), ("rfAuto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfRole.setStatus('current')
if mibBuilder.loadTexts: rfRole.setDescription('')
rfModeSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfModeAdaptive", 1), ("rfModeStatic", 2), ("rfModeAlign", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfModeSelector.setStatus('current')
if mibBuilder.loadTexts: rfModeSelector.setDescription('')
rfModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfModulationQPSK", 1), ("rfModulationQAM-16", 2), ("rfModulationQAM-64", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfModulationType.setStatus('current')
if mibBuilder.loadTexts: rfModulationType.setDescription('')
rfNumOfSubchannels = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfNumOfSubchannels.setStatus('current')
if mibBuilder.loadTexts: rfNumOfSubchannels.setDescription('')
rfNumOfRepetitions = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfNumOfRepetitions.setStatus('current')
if mibBuilder.loadTexts: rfNumOfRepetitions.setDescription('')
rfFecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfFEC-05", 1), ("rfFEC-067", 2), ("rfFEC-08", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfFecRate.setStatus('current')
if mibBuilder.loadTexts: rfFecRate.setDescription('')
rfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOperationalState.setStatus('current')
if mibBuilder.loadTexts: rfOperationalState.setDescription('')
rfAverageCinr = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAverageCinr.setStatus('current')
if mibBuilder.loadTexts: rfAverageCinr.setDescription('')
rfAverageRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAverageRssi.setStatus('current')
if mibBuilder.loadTexts: rfAverageRssi.setDescription('')
rfTxSynthLock = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("txSynthUnlock", 0), ("txSynthLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxSynthLock.setStatus('current')
if mibBuilder.loadTexts: rfTxSynthLock.setDescription('')
rfRxSynthLock = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rxSynthUnlock", 0), ("rxSynthLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxSynthLock.setStatus('current')
if mibBuilder.loadTexts: rfRxSynthLock.setDescription('')
rfRxLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfRxLinkId.setStatus('current')
if mibBuilder.loadTexts: rfRxLinkId.setDescription('')
rfTxLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfTxLinkId.setStatus('current')
if mibBuilder.loadTexts: rfTxLinkId.setDescription('')
rfTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rf-sync", 1), ("rf-searchCountdown", 2), ("rf-foundCountdown", 3), ("rf-normal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxState.setStatus('current')
if mibBuilder.loadTexts: rfTxState.setDescription('')
rfRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rf-sync", 1), ("rf-searchCountdown", 2), ("rf-foundCountdown", 3), ("rf-normal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxState.setStatus('current')
if mibBuilder.loadTexts: rfRxState.setDescription('')
rfTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTemperature.setStatus('current')
if mibBuilder.loadTexts: rfTemperature.setDescription('')
rfAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rf-asymmetry-25tx-75rx", 1), ("rf-asymmetry-50tx-50rx", 2), ("rf-asymmetry-75tx-25rx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAsymmetry.setStatus('current')
if mibBuilder.loadTexts: rfAsymmetry.setDescription('')
rfLowestModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfModulationQPSK", 1), ("rfModulationQAM-16", 2), ("rfModulationQAM-64", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLowestModulationType.setStatus('current')
if mibBuilder.loadTexts: rfLowestModulationType.setDescription('')
rfLowestNumOfSubchannels = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLowestNumOfSubchannels.setStatus('current')
if mibBuilder.loadTexts: rfLowestNumOfSubchannels.setDescription('')
rfLowestNumOfRepetitions = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLowestNumOfRepetitions.setStatus('current')
if mibBuilder.loadTexts: rfLowestNumOfRepetitions.setDescription('')
rfLowestFecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfFEC-05", 1), ("rfFEC-067", 2), ("rfFEC-08", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLowestFecRate.setStatus('current')
if mibBuilder.loadTexts: rfLowestFecRate.setDescription('')
rfTxMute = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfTxMute.setStatus('current')
if mibBuilder.loadTexts: rfTxMute.setDescription('')
rfRoleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfMaster", 1), ("rfSlave", 2), ("rfAuto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRoleStatus.setStatus('current')
if mibBuilder.loadTexts: rfRoleStatus.setDescription('')
rfLoopModeSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfLoopDisabled", 1), ("rfLoopInternalMacSwap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLoopModeSelector.setStatus('current')
if mibBuilder.loadTexts: rfLoopModeSelector.setDescription('')
rfLoopModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfModulationQPSK", 1), ("rfModulationQAM-16", 2), ("rfModulationQAM-64", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLoopModulationType.setStatus('current')
if mibBuilder.loadTexts: rfLoopModulationType.setDescription('')
rfLoopNumOfSubchannels = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLoopNumOfSubchannels.setStatus('current')
if mibBuilder.loadTexts: rfLoopNumOfSubchannels.setDescription('')
rfLoopNumOfRepetitions = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLoopNumOfRepetitions.setStatus('current')
if mibBuilder.loadTexts: rfLoopNumOfRepetitions.setDescription('')
rfLoopFecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfFEC-05", 1), ("rfFEC-067", 2), ("rfFEC-08", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLoopFecRate.setStatus('current')
if mibBuilder.loadTexts: rfLoopFecRate.setDescription('')
rfLoopTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLoopTimeout.setStatus('current')
if mibBuilder.loadTexts: rfLoopTimeout.setDescription('')
rfTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-35, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfTxPower.setStatus('current')
if mibBuilder.loadTexts: rfTxPower.setDescription('')
rfTxMuteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfTxMuteTimeout.setStatus('current')
if mibBuilder.loadTexts: rfTxMuteTimeout.setDescription('')
rfAlignmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rfAlignmentInactive", 0), ("rfAlignmentActive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAlignmentStatus.setStatus('current')
if mibBuilder.loadTexts: rfAlignmentStatus.setDescription('')
rfLoopDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfLoop-tx", 1), ("rfLoop-rx", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLoopDirection.setStatus('current')
if mibBuilder.loadTexts: rfLoopDirection.setDescription('')
rbRfStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 2, 2), )
if mibBuilder.loadTexts: rbRfStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: rbRfStatisticsTable.setDescription('')
rbRfStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rfIndex"))
if mibBuilder.loadTexts: rbRfStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: rbRfStatisticsEntry.setDescription('')
rfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInOctets.setStatus('current')
if mibBuilder.loadTexts: rfInOctets.setDescription('')
rfInIdleOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInIdleOctets.setStatus('current')
if mibBuilder.loadTexts: rfInIdleOctets.setDescription('')
rfInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInGoodOctets.setStatus('current')
if mibBuilder.loadTexts: rfInGoodOctets.setDescription('')
rfInErroredOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInErroredOctets.setStatus('current')
if mibBuilder.loadTexts: rfInErroredOctets.setDescription('')
rfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutOctets.setStatus('current')
if mibBuilder.loadTexts: rfOutOctets.setDescription('')
rfOutIdleOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutIdleOctets.setStatus('current')
if mibBuilder.loadTexts: rfOutIdleOctets.setDescription('')
rfInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInPkts.setStatus('current')
if mibBuilder.loadTexts: rfInPkts.setDescription('')
rfInGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInGoodPkts.setStatus('current')
if mibBuilder.loadTexts: rfInGoodPkts.setDescription('')
rfInErroredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInErroredPkts.setStatus('current')
if mibBuilder.loadTexts: rfInErroredPkts.setDescription('')
rfInLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInLostPkts.setStatus('current')
if mibBuilder.loadTexts: rfInLostPkts.setDescription('')
rfOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutPkts.setStatus('current')
if mibBuilder.loadTexts: rfOutPkts.setDescription('')
rfMinCinr = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfMinCinr.setStatus('current')
if mibBuilder.loadTexts: rfMinCinr.setDescription('')
rfMaxCinr = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfMaxCinr.setStatus('current')
if mibBuilder.loadTexts: rfMaxCinr.setDescription('')
rfMinRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfMinRssi.setStatus('current')
if mibBuilder.loadTexts: rfMinRssi.setDescription('')
rfMaxRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfMaxRssi.setStatus('current')
if mibBuilder.loadTexts: rfMaxRssi.setDescription('')
rfMinModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfMinModulation.setStatus('current')
if mibBuilder.loadTexts: rfMinModulation.setDescription('\n\t\tbyte # 3: see rfModulationType;\n\t\tbyte # 2: see rfNumOfSubchannels;\n\t\tbyte # 1: see rfNumOfRepetitions;\n\t\tbyte # 0: see rfFecRate;\n\t')
rfMaxModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfMaxModulation.setStatus('current')
if mibBuilder.loadTexts: rfMaxModulation.setDescription('\n\t\tbyte # 3: see rfModulationType;\n\t\tbyte # 2: see rfNumOfSubchannels;\n\t\tbyte # 1: see rfNumOfRepetitions;\n\t\tbyte # 0: see rfFecRate;\n\t')
rfValid = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfValid.setStatus('current')
if mibBuilder.loadTexts: rfValid.setDescription('')
rfArqInLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfArqInLoss.setStatus('current')
if mibBuilder.loadTexts: rfArqInLoss.setDescription('')
rfArqOutLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfArqOutLoss.setStatus('current')
if mibBuilder.loadTexts: rfArqOutLoss.setDescription('')
rbRfStatisticsDaysTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 2, 3), )
if mibBuilder.loadTexts: rbRfStatisticsDaysTable.setStatus('current')
if mibBuilder.loadTexts: rbRfStatisticsDaysTable.setDescription('')
rbRfStatisticsDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rfIndex"), (0, "RADIO-BRIDGE-MIB", "rfDayIndex"))
if mibBuilder.loadTexts: rbRfStatisticsDaysEntry.setStatus('current')
if mibBuilder.loadTexts: rbRfStatisticsDaysEntry.setDescription('')
rfDayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 50), Integer32())
if mibBuilder.loadTexts: rfDayIndex.setStatus('current')
if mibBuilder.loadTexts: rfDayIndex.setDescription('')
rfDaysStart = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 51), TimeTicks())
if mibBuilder.loadTexts: rfDaysStart.setStatus('current')
if mibBuilder.loadTexts: rfDaysStart.setDescription('')
rfDaysInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInOctets.setStatus('current')
if mibBuilder.loadTexts: rfDaysInOctets.setDescription('')
rfDaysInIdleOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInIdleOctets.setStatus('current')
if mibBuilder.loadTexts: rfDaysInIdleOctets.setDescription('')
rfDaysInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInGoodOctets.setStatus('current')
if mibBuilder.loadTexts: rfDaysInGoodOctets.setDescription('')
rfDaysInErroredOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInErroredOctets.setStatus('current')
if mibBuilder.loadTexts: rfDaysInErroredOctets.setDescription('')
rfDaysOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysOutOctets.setStatus('current')
if mibBuilder.loadTexts: rfDaysOutOctets.setDescription('')
rfDaysOutIdleOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysOutIdleOctets.setStatus('current')
if mibBuilder.loadTexts: rfDaysOutIdleOctets.setDescription('')
rfDaysInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInPkts.setStatus('current')
if mibBuilder.loadTexts: rfDaysInPkts.setDescription('')
rfDaysInGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInGoodPkts.setStatus('current')
if mibBuilder.loadTexts: rfDaysInGoodPkts.setDescription('')
rfDaysInErroredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInErroredPkts.setStatus('current')
if mibBuilder.loadTexts: rfDaysInErroredPkts.setDescription('')
rfDaysInLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInLostPkts.setStatus('current')
if mibBuilder.loadTexts: rfDaysInLostPkts.setDescription('')
rfDaysOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysOutPkts.setStatus('current')
if mibBuilder.loadTexts: rfDaysOutPkts.setDescription('')
rfDaysMinCinr = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysMinCinr.setStatus('current')
if mibBuilder.loadTexts: rfDaysMinCinr.setDescription('')
rfDaysMaxCinr = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysMaxCinr.setStatus('current')
if mibBuilder.loadTexts: rfDaysMaxCinr.setDescription('')
rfDaysMinRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysMinRssi.setStatus('current')
if mibBuilder.loadTexts: rfDaysMinRssi.setDescription('')
rfDaysMaxRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysMaxRssi.setStatus('current')
if mibBuilder.loadTexts: rfDaysMaxRssi.setDescription('')
rfDaysMinModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysMinModulation.setStatus('current')
if mibBuilder.loadTexts: rfDaysMinModulation.setDescription('\n\t\tbyte # 3: see rfModulationType;\n\t\tbyte # 2: see rfNumOfSubchannels;\n\t\tbyte # 1: see rfNumOfRepetitions;\n\t\tbyte # 0: see rfFecRate;\n\t')
rfDaysMaxModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysMaxModulation.setStatus('current')
if mibBuilder.loadTexts: rfDaysMaxModulation.setDescription('\n\t\tbyte # 3: see rfModulationType;\n\t\tbyte # 2: see rfNumOfSubchannels;\n\t\tbyte # 1: see rfNumOfRepetitions;\n\t\tbyte # 0: see rfFecRate;\n\t')
rfDaysValid = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysValid.setStatus('current')
if mibBuilder.loadTexts: rfDaysValid.setDescription('')
rfDaysArqInLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysArqInLoss.setStatus('current')
if mibBuilder.loadTexts: rfDaysArqInLoss.setDescription('')
rfDaysArqOutLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysArqOutLoss.setStatus('current')
if mibBuilder.loadTexts: rfDaysArqOutLoss.setDescription('')
rbRefClockTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 4, 1), )
if mibBuilder.loadTexts: rbRefClockTable.setStatus('current')
if mibBuilder.loadTexts: rbRefClockTable.setDescription('')
rbRefClockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rbRefClockEntry.setStatus('current')
if mibBuilder.loadTexts: rbRefClockEntry.setDescription('')
refClockPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: refClockPrio.setStatus('current')
if mibBuilder.loadTexts: refClockPrio.setDescription('')
refClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 0), ("active", 1), ("backup-1", 2), ("backup-2", 3), ("backup-3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: refClockStatus.setStatus('current')
if mibBuilder.loadTexts: refClockStatus.setDescription('')
refClockQualityLevelActual = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: refClockQualityLevelActual.setStatus('current')
if mibBuilder.loadTexts: refClockQualityLevelActual.setDescription('')
refClockQualityLevelConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: refClockQualityLevelConfig.setStatus('current')
if mibBuilder.loadTexts: refClockQualityLevelConfig.setDescription('')
refClockQualityLevelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: refClockQualityLevelMode.setStatus('current')
if mibBuilder.loadTexts: refClockQualityLevelMode.setDescription('')
refClockSsmCvid = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: refClockSsmCvid.setStatus('current')
if mibBuilder.loadTexts: refClockSsmCvid.setDescription('')
refClockRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: refClockRowStatus.setStatus('current')
if mibBuilder.loadTexts: refClockRowStatus.setDescription('')
rbEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 5, 1), )
if mibBuilder.loadTexts: rbEthernetTable.setStatus('current')
if mibBuilder.loadTexts: rbEthernetTable.setDescription('')
rbEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rbEthernetEntry.setStatus('current')
if mibBuilder.loadTexts: rbEthernetEntry.setDescription('')
ethernetAlarmPropagation = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("backward", 1), ("forward", 2), ("both-direct", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetAlarmPropagation.setStatus('current')
if mibBuilder.loadTexts: ethernetAlarmPropagation.setDescription('')
ethernetLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("external", 1), ("external-mac-swap", 2), ("internal", 3), ("internal-mac-swap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetLoopMode.setStatus('current')
if mibBuilder.loadTexts: ethernetLoopMode.setDescription('')
ethernetLoopTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetLoopTimeout.setStatus('current')
if mibBuilder.loadTexts: ethernetLoopTimeout.setDescription('')
ethernetNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("provider-nni", 1), ("customer-uni", 2), ("customer-nni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNetworkType.setStatus('current')
if mibBuilder.loadTexts: ethernetNetworkType.setDescription('')
ethernetPcpWriteProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetPcpWriteProfileId.setStatus('current')
if mibBuilder.loadTexts: ethernetPcpWriteProfileId.setDescription('id of pcp write profile or none (0)')
ethernetClassifierMode = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("classifier-mode-dscp", 1), ("classifier-mode-pcp-dscp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetClassifierMode.setStatus('current')
if mibBuilder.loadTexts: ethernetClassifierMode.setDescription('')
rbClassifierCosTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 6, 1), )
if mibBuilder.loadTexts: rbClassifierCosTable.setStatus('current')
if mibBuilder.loadTexts: rbClassifierCosTable.setDescription('')
rbClassifierCosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "classifierCosId"))
if mibBuilder.loadTexts: rbClassifierCosEntry.setStatus('current')
if mibBuilder.loadTexts: rbClassifierCosEntry.setDescription('')
classifierCosId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248)))
if mibBuilder.loadTexts: classifierCosId.setStatus('current')
if mibBuilder.loadTexts: classifierCosId.setDescription('')
classifierCosPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosPortList.setStatus('current')
if mibBuilder.loadTexts: classifierCosPortList.setDescription('')
classifierCosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosPrecedence.setStatus('current')
if mibBuilder.loadTexts: classifierCosPrecedence.setDescription('')
classifierCosVidList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosVidList.setStatus('current')
if mibBuilder.loadTexts: classifierCosVidList.setDescription('')
classifierCosPcpList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosPcpList.setStatus('current')
if mibBuilder.loadTexts: classifierCosPcpList.setDescription('')
classifierCosCos = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosCos.setStatus('current')
if mibBuilder.loadTexts: classifierCosCos.setDescription('')
classifierCosIpCosType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip-cos-dscp", 1), ("ip-cos-mpls", 2), ("ip-cos-dont-care", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosIpCosType.setStatus('current')
if mibBuilder.loadTexts: classifierCosIpCosType.setDescription('')
classifierCosIpCosList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 8), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosIpCosList.setStatus('current')
if mibBuilder.loadTexts: classifierCosIpCosList.setDescription('')
classifierCosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosRowStatus.setStatus('current')
if mibBuilder.loadTexts: classifierCosRowStatus.setDescription('')
classifierCosPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("non-unicast", 2), ("all", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosPacketType.setStatus('current')
if mibBuilder.loadTexts: classifierCosPacketType.setDescription('')
rbClassifierEvcTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 6, 2), )
if mibBuilder.loadTexts: rbClassifierEvcTable.setStatus('current')
if mibBuilder.loadTexts: rbClassifierEvcTable.setDescription('')
rbClassifierEvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "classifierEvcId"))
if mibBuilder.loadTexts: rbClassifierEvcEntry.setStatus('current')
if mibBuilder.loadTexts: rbClassifierEvcEntry.setDescription('')
classifierEvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248)))
if mibBuilder.loadTexts: classifierEvcId.setStatus('current')
if mibBuilder.loadTexts: classifierEvcId.setDescription('')
classifierEvcPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcPortList.setStatus('current')
if mibBuilder.loadTexts: classifierEvcPortList.setDescription('')
classifierEvcPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcPrecedence.setStatus('current')
if mibBuilder.loadTexts: classifierEvcPrecedence.setDescription('')
classifierEvcVidList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcVidList.setStatus('current')
if mibBuilder.loadTexts: classifierEvcVidList.setDescription('')
classifierEvcPcpList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcPcpList.setStatus('current')
if mibBuilder.loadTexts: classifierEvcPcpList.setDescription('')
classifierEvcEvc = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcEvc.setStatus('current')
if mibBuilder.loadTexts: classifierEvcEvc.setDescription('')
classifierEvcIpCosType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip-cos-dscp", 1), ("ip-cos-mpls", 2), ("ip-cos-dont-care", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcIpCosType.setStatus('current')
if mibBuilder.loadTexts: classifierEvcIpCosType.setDescription('')
classifierEvcIpCosList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 8), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcIpCosList.setStatus('current')
if mibBuilder.loadTexts: classifierEvcIpCosList.setDescription('')
classifierEvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: classifierEvcRowStatus.setDescription('')
classifierEvcPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("non-unicast", 2), ("all", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcPacketType.setStatus('current')
if mibBuilder.loadTexts: classifierEvcPacketType.setDescription('')
rbQosIngressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 7, 1), )
if mibBuilder.loadTexts: rbQosIngressQueueTable.setStatus('current')
if mibBuilder.loadTexts: rbQosIngressQueueTable.setDescription('')
rbQosIngressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 7, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "qosIngressQueueEvcId"), (0, "RADIO-BRIDGE-MIB", "qosIngressQueueCosId"))
if mibBuilder.loadTexts: rbQosIngressQueueEntry.setStatus('current')
if mibBuilder.loadTexts: rbQosIngressQueueEntry.setDescription('')
qosIngressQueueEvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: qosIngressQueueEvcId.setStatus('current')
if mibBuilder.loadTexts: qosIngressQueueEvcId.setDescription('')
qosIngressQueueCosId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 7, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: qosIngressQueueCosId.setStatus('current')
if mibBuilder.loadTexts: qosIngressQueueCosId.setDescription('')
qosIngressQueueMeterId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 7, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosIngressQueueMeterId.setStatus('current')
if mibBuilder.loadTexts: qosIngressQueueMeterId.setDescription('')
qosIngressQueueMarking = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 7, 1, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosIngressQueueMarking.setStatus('current')
if mibBuilder.loadTexts: qosIngressQueueMarking.setDescription('')
qosIngressQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 7, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosIngressQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosIngressQueueRowStatus.setDescription('This object indicates the status of this entry.')
rbQosEgressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 8, 1), )
if mibBuilder.loadTexts: rbQosEgressQueueTable.setStatus('current')
if mibBuilder.loadTexts: rbQosEgressQueueTable.setDescription('')
rbQosEgressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "qosEgressQueuePortNum"), (0, "RADIO-BRIDGE-MIB", "qosEgressQueueCosId"))
if mibBuilder.loadTexts: rbQosEgressQueueEntry.setStatus('current')
if mibBuilder.loadTexts: rbQosEgressQueueEntry.setDescription('')
qosEgressQueuePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: qosEgressQueuePortNum.setStatus('current')
if mibBuilder.loadTexts: qosEgressQueuePortNum.setDescription('')
qosEgressQueueCosId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: qosEgressQueueCosId.setStatus('current')
if mibBuilder.loadTexts: qosEgressQueueCosId.setDescription('')
qosEgressQueueWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEgressQueueWfqWeight.setStatus('current')
if mibBuilder.loadTexts: qosEgressQueueWfqWeight.setDescription('')
qosEgressQueueCir = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEgressQueueCir.setStatus('current')
if mibBuilder.loadTexts: qosEgressQueueCir.setDescription('')
qosEgressQueueMode = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("strictPriority", 1), ("wfg", 2), ("priority-shaper", 3), ("wfq-shaper", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosEgressQueueMode.setStatus('current')
if mibBuilder.loadTexts: qosEgressQueueMode.setDescription('')
qosEgressQueueColorDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("color-aware", 1), ("color-drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEgressQueueColorDrop.setStatus('current')
if mibBuilder.loadTexts: qosEgressQueueColorDrop.setDescription('')
qosEgressDropMode = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEgressDropMode.setStatus('current')
if mibBuilder.loadTexts: qosEgressDropMode.setDescription('if negative then wred id, else queue length in microseconds')
rbIpTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 9, 1), )
if mibBuilder.loadTexts: rbIpTable.setStatus('current')
if mibBuilder.loadTexts: rbIpTable.setDescription('')
rbIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbIpIndex"))
if mibBuilder.loadTexts: rbIpEntry.setStatus('current')
if mibBuilder.loadTexts: rbIpEntry.setDescription('')
rbIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rbIpIndex.setStatus('current')
if mibBuilder.loadTexts: rbIpIndex.setDescription('')
rbIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbIpAddress.setStatus('current')
if mibBuilder.loadTexts: rbIpAddress.setDescription('')
rbIpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbIpPrefixLen.setStatus('current')
if mibBuilder.loadTexts: rbIpPrefixLen.setDescription('')
rbIpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbIpVlanId.setStatus('current')
if mibBuilder.loadTexts: rbIpVlanId.setDescription('')
rbIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbIpRowStatus.setDescription('This object indicates the status of this entry.')
rbIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip-static", 1), ("ip-dhcp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbIpType.setStatus('current')
if mibBuilder.loadTexts: rbIpType.setDescription('')
rbIpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbIpGateway.setStatus('current')
if mibBuilder.loadTexts: rbIpGateway.setDescription('')
rbPeerMep = MibTable((1, 3, 6, 1, 4, 1, 31926, 10, 1), )
if mibBuilder.loadTexts: rbPeerMep.setStatus('current')
if mibBuilder.loadTexts: rbPeerMep.setDescription('')
rbPeerMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbMdIndex"), (0, "RADIO-BRIDGE-MIB", "rbMaIndex"), (0, "RADIO-BRIDGE-MIB", "rbMepId"), (0, "RADIO-BRIDGE-MIB", "rbPeerMepId"))
if mibBuilder.loadTexts: rbPeerMepEntry.setStatus('current')
if mibBuilder.loadTexts: rbPeerMepEntry.setDescription('')
rbMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rbMdIndex.setStatus('current')
if mibBuilder.loadTexts: rbMdIndex.setDescription('')
rbMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: rbMaIndex.setStatus('current')
if mibBuilder.loadTexts: rbMaIndex.setDescription('')
rbMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: rbMepId.setStatus('current')
if mibBuilder.loadTexts: rbMepId.setDescription('')
rbPeerMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 4), Integer32())
if mibBuilder.loadTexts: rbPeerMepId.setStatus('current')
if mibBuilder.loadTexts: rbPeerMepId.setDescription('')
rbPeerMepFarEndLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 5), Counter64())
if mibBuilder.loadTexts: rbPeerMepFarEndLoss.setStatus('current')
if mibBuilder.loadTexts: rbPeerMepFarEndLoss.setDescription('')
rbPeerMepNearEndLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 6), Counter64())
if mibBuilder.loadTexts: rbPeerMepNearEndLoss.setStatus('current')
if mibBuilder.loadTexts: rbPeerMepNearEndLoss.setDescription('')
rbPeerMepTotalTxFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 7), Counter64())
if mibBuilder.loadTexts: rbPeerMepTotalTxFarEnd.setStatus('current')
if mibBuilder.loadTexts: rbPeerMepTotalTxFarEnd.setDescription('')
rbPeerMepTotalTxNearEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 8), Counter64())
if mibBuilder.loadTexts: rbPeerMepTotalTxNearEnd.setStatus('current')
if mibBuilder.loadTexts: rbPeerMepTotalTxNearEnd.setDescription('')
rbPeerMepFrameDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 9), Counter64())
if mibBuilder.loadTexts: rbPeerMepFrameDelay.setStatus('current')
if mibBuilder.loadTexts: rbPeerMepFrameDelay.setDescription('')
rbPeerMepFrameDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 10), Counter64())
if mibBuilder.loadTexts: rbPeerMepFrameDelayVariation.setStatus('current')
if mibBuilder.loadTexts: rbPeerMepFrameDelayVariation.setDescription('')
rbMep = MibTable((1, 3, 6, 1, 4, 1, 31926, 10, 2), )
if mibBuilder.loadTexts: rbMep.setStatus('current')
if mibBuilder.loadTexts: rbMep.setDescription('')
rbMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 10, 2, 1), )
dot1agCfmMepEntry.registerAugmentions(("RADIO-BRIDGE-MIB", "rbMepEntry"))
rbMepEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: rbMepEntry.setStatus('current')
if mibBuilder.loadTexts: rbMepEntry.setDescription('')
rbMepAisEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 2, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMepAisEnable.setStatus('current')
if mibBuilder.loadTexts: rbMepAisEnable.setDescription('')
rbMepAisPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6))).clone(namedValues=NamedValues(("aisPeriod-1-sec", 4), ("aisPeriod-1-min", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMepAisPeriod.setStatus('current')
if mibBuilder.loadTexts: rbMepAisPeriod.setDescription('')
rbMepAisSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 2, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMepAisSuppress.setStatus('current')
if mibBuilder.loadTexts: rbMepAisSuppress.setDescription('')
rbMepAisLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMepAisLevel.setStatus('current')
if mibBuilder.loadTexts: rbMepAisLevel.setDescription('')
rbMepAisDefects = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbMepAisDefects.setStatus('current')
if mibBuilder.loadTexts: rbMepAisDefects.setDescription('')
class AlarmSeverity(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("no-alarm", 5))

class AlarmType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("link-down", 1), ("temperature-out-of-range", 2), ("synthesizer-unlock", 3), ("pow-low", 4), ("cfm-mep-defect", 5), ("loopback-active", 6), ("tx-mute", 7), ("ql-eec1-or-worse", 8), ("poe-incompatible", 9), ("rssi-out-of-range", 10), ("cinr-out-of-range", 11), ("lowest-modulation", 12))

rbAlarmsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 11, 1))
rbCurrentAlarmChangeCounter = MibScalar((1, 3, 6, 1, 4, 1, 31926, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmChangeCounter.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmChangeCounter.setDescription('The counter is initialized by random number on power-up and incremented on each change\n\t\tin the current alarms table: alarm addition or deletion.')
rbCurrentAlarmMostSevere = MibScalar((1, 3, 6, 1, 4, 1, 31926, 11, 1, 2), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmMostSevere.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmMostSevere.setDescription('The severity of the most severe alarm in the system')
rbCurrentAlarmLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 31926, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmLastIndex.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmLastIndex.setDescription('The counter is initialized by random number on power-up and incremented when alarm is added to the alarms table.\n\t\tIt is used as alarm index in current alarms table.')
rbCurrentAlarmLastTrapType = MibScalar((1, 3, 6, 1, 4, 1, 31926, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm-up", 1), ("alarm-down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmLastTrapType.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmLastTrapType.setDescription('Type of last alarm trap.')
rbCurrentAlarmSourceAddr = MibScalar((1, 3, 6, 1, 4, 1, 31926, 11, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmSourceAddr.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmSourceAddr.setDescription('Alarm source IP Address.')
rbCurrentAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 11, 2), )
if mibBuilder.loadTexts: rbCurrentAlarmTable.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmTable.setDescription('Current alarms table.')
rbCurrentAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbCurrentAlarmIndex"))
if mibBuilder.loadTexts: rbCurrentAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmEntry.setDescription('')
rbCurrentAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmIndex.setDescription('Value of the rbCurrentAlarmLastIndex when alarm is inserted to the table.')
rbCurrentAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 2), AlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmType.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmType.setDescription('see AlarmType definition')
rbCurrentAlarmTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmTypeName.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmTypeName.setDescription('string presentation of the rbCurrentAlarmType')
rbCurrentAlarmSource = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmSource.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmSource.setDescription('name of the managed object originating the alarm: eth host, system, vlan s1 5   etc.')
rbCurrentAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 5), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmSeverity.setDescription('see AlarmSeverity definition')
rbCurrentAlarmRaisedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmRaisedTime.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmRaisedTime.setDescription('')
rbCurrentAlarmDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmDesc.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmDesc.setDescription('alarm description')
rbCurrentAlarmCause = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmCause.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmCause.setDescription('alarm probably cause')
rbCurrentAlarmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmAction.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmAction.setDescription('alarm corrective actions')
rbCurrentAlarmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmIfIndex.setStatus('current')
if mibBuilder.loadTexts: rbCurrentAlarmIfIndex.setDescription('port ifIndex if port is the alarm source, -1 otherwise')
trapModulationChange = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 1)).setObjects(("RADIO-BRIDGE-MIB", "rfModulationType"), ("RADIO-BRIDGE-MIB", "rfNumOfSubchannels"), ("RADIO-BRIDGE-MIB", "rfNumOfRepetitions"), ("RADIO-BRIDGE-MIB", "rfFecRate"))
if mibBuilder.loadTexts: trapModulationChange.setStatus('current')
if mibBuilder.loadTexts: trapModulationChange.setDescription('')
trapTemperatureOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 2))
if mibBuilder.loadTexts: trapTemperatureOutOfRange.setStatus('current')
if mibBuilder.loadTexts: trapTemperatureOutOfRange.setDescription('')
trapTemperatureInRange = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 3))
if mibBuilder.loadTexts: trapTemperatureInRange.setStatus('current')
if mibBuilder.loadTexts: trapTemperatureInRange.setDescription('')
trapSfpIn = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 4)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: trapSfpIn.setStatus('current')
if mibBuilder.loadTexts: trapSfpIn.setDescription('')
trapSfpOut = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 5)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: trapSfpOut.setStatus('current')
if mibBuilder.loadTexts: trapSfpOut.setDescription('')
trapRefClockChanged = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 6)).setObjects(("IF-MIB", "ifIndex"), ("RADIO-BRIDGE-MIB", "refClockQualityLevelActual"))
if mibBuilder.loadTexts: trapRefClockChanged.setStatus('current')
if mibBuilder.loadTexts: trapRefClockChanged.setDescription('')
trapCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 11)).setObjects(("RADIO-BRIDGE-MIB", "rbCurrentAlarmChangeCounter"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmMostSevere"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmType"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmTypeName"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmSourceAddr"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmSource"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmSeverity"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmRaisedTime"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmIfIndex"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmLastTrapType"))
if mibBuilder.loadTexts: trapCurrentAlarm.setStatus('current')
if mibBuilder.loadTexts: trapCurrentAlarm.setDescription('')
trapLoopEnabled = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 12)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: trapLoopEnabled.setStatus('current')
if mibBuilder.loadTexts: trapLoopEnabled.setDescription('')
trapLoopDisabled = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 13)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: trapLoopDisabled.setStatus('current')
if mibBuilder.loadTexts: trapLoopDisabled.setDescription('')
trapTxMuteEnabled = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 14))
if mibBuilder.loadTexts: trapTxMuteEnabled.setStatus('current')
if mibBuilder.loadTexts: trapTxMuteEnabled.setDescription('')
trapTxMuteDisabled = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 15))
if mibBuilder.loadTexts: trapTxMuteDisabled.setStatus('current')
if mibBuilder.loadTexts: trapTxMuteDisabled.setDescription('')
trapCinrOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 19))
if mibBuilder.loadTexts: trapCinrOutOfRange.setStatus('current')
if mibBuilder.loadTexts: trapCinrOutOfRange.setDescription('')
trapCinrInRange = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 20))
if mibBuilder.loadTexts: trapCinrInRange.setStatus('current')
if mibBuilder.loadTexts: trapCinrInRange.setDescription('')
trapRssiOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 21))
if mibBuilder.loadTexts: trapRssiOutOfRange.setStatus('current')
if mibBuilder.loadTexts: trapRssiOutOfRange.setDescription('')
trapRssiInRange = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 22))
if mibBuilder.loadTexts: trapRssiInRange.setStatus('current')
if mibBuilder.loadTexts: trapRssiInRange.setDescription('')
trapLowestModulation = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 23))
if mibBuilder.loadTexts: trapLowestModulation.setStatus('current')
if mibBuilder.loadTexts: trapLowestModulation.setDescription('')
trapNoLowestModulation = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 24))
if mibBuilder.loadTexts: trapNoLowestModulation.setStatus('current')
if mibBuilder.loadTexts: trapNoLowestModulation.setDescription('')
rbSchedulerMode = MibScalar((1, 3, 6, 1, 4, 1, 31926, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("strictPriority", 1), ("wfg", 2), ("priority-shaper", 3), ("wfq-shaper", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbSchedulerMode.setStatus('current')
if mibBuilder.loadTexts: rbSchedulerMode.setDescription('')
rbMeterTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 14, 1), )
if mibBuilder.loadTexts: rbMeterTable.setStatus('current')
if mibBuilder.loadTexts: rbMeterTable.setDescription('')
rbMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbMeterId"))
if mibBuilder.loadTexts: rbMeterEntry.setStatus('current')
if mibBuilder.loadTexts: rbMeterEntry.setDescription('')
rbMeterId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248)))
if mibBuilder.loadTexts: rbMeterId.setStatus('current')
if mibBuilder.loadTexts: rbMeterId.setDescription('')
rbMeterCir = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMeterCir.setStatus('current')
if mibBuilder.loadTexts: rbMeterCir.setDescription('')
rbMeterCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9216, 50000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMeterCbs.setStatus('current')
if mibBuilder.loadTexts: rbMeterCbs.setDescription('')
rbMeterEir = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMeterEir.setStatus('current')
if mibBuilder.loadTexts: rbMeterEir.setDescription('')
rbMeterEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9216, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMeterEbs.setStatus('current')
if mibBuilder.loadTexts: rbMeterEbs.setDescription('')
rbMeterColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("color-aware", 1), ("color-blind", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMeterColorMode.setStatus('current')
if mibBuilder.loadTexts: rbMeterColorMode.setDescription('')
rbMeterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMeterRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbMeterRowStatus.setDescription('')
rbEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 15, 1), )
if mibBuilder.loadTexts: rbEventConfigTable.setStatus('current')
if mibBuilder.loadTexts: rbEventConfigTable.setDescription('')
rbEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 15, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbEventConfigIndex"))
if mibBuilder.loadTexts: rbEventConfigEntry.setStatus('current')
if mibBuilder.loadTexts: rbEventConfigEntry.setDescription('')
rbEventConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 15, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rbEventConfigIndex.setStatus('current')
if mibBuilder.loadTexts: rbEventConfigIndex.setDescription('')
rbEventConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 15, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbEventConfigId.setStatus('current')
if mibBuilder.loadTexts: rbEventConfigId.setDescription('')
rbEventConfigMask = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 15, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbEventConfigMask.setStatus('current')
if mibBuilder.loadTexts: rbEventConfigMask.setDescription('')
rbRfEncryption = MibScalar((1, 3, 6, 1, 4, 1, 31926, 13, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbRfEncryption.setStatus('current')
if mibBuilder.loadTexts: rbRfEncryption.setDescription('')
rbRfStaticKey = MibScalar((1, 3, 6, 1, 4, 1, 31926, 13, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbRfStaticKey.setStatus('current')
if mibBuilder.loadTexts: rbRfStaticKey.setDescription('')
rbRfAuthenticationString = MibScalar((1, 3, 6, 1, 4, 1, 31926, 13, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbRfAuthenticationString.setStatus('current')
if mibBuilder.loadTexts: rbRfAuthenticationString.setDescription('')
rbAgentReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 31926, 17, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbAgentReadCommunity.setStatus('current')
if mibBuilder.loadTexts: rbAgentReadCommunity.setDescription('')
rbAgentWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 31926, 17, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbAgentWriteCommunity.setStatus('current')
if mibBuilder.loadTexts: rbAgentWriteCommunity.setDescription('')
rbAgentSnmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 31926, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("v2c", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbAgentSnmpVersion.setStatus('current')
if mibBuilder.loadTexts: rbAgentSnmpVersion.setDescription('')
rbSysFileOperationTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 18), )
if mibBuilder.loadTexts: rbSysFileOperationTable.setStatus('current')
if mibBuilder.loadTexts: rbSysFileOperationTable.setDescription('This table has a permanent row with index 1. It is not creatable, the fileSessionRowStatus\n\tis used to activate the file operation process if necessary variables are assigned.')
rbSysFileOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 18, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "fileSessionIndex"))
if mibBuilder.loadTexts: rbSysFileOperationEntry.setStatus('current')
if mibBuilder.loadTexts: rbSysFileOperationEntry.setDescription('')
fileSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 1), Integer32())
if mibBuilder.loadTexts: fileSessionIndex.setStatus('current')
if mibBuilder.loadTexts: fileSessionIndex.setDescription('')
fileSessionCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("copySwFromRemote", 1), ("copyLicenseFromRemote", 2), ("copyFileFromRemoteToLocal", 3), ("copyFileFromLocalToRemote", 4), ("acceptSw", 5), ("runSw", 6), ("copyDirToRemote", 7), ("copyEventLog", 9), ("copyUserActivityLog", 10), ("runScript", 11), ("copyInventory", 12), ("copyStatsHistory", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileSessionCommand.setStatus('current')
if mibBuilder.loadTexts: fileSessionCommand.setDescription('')
fileSessionLocalParams = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileSessionLocalParams.setStatus('current')
if mibBuilder.loadTexts: fileSessionLocalParams.setDescription('')
fileSessionRemotePath = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileSessionRemotePath.setStatus('current')
if mibBuilder.loadTexts: fileSessionRemotePath.setDescription('')
fileSessionServer = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileSessionServer.setStatus('current')
if mibBuilder.loadTexts: fileSessionServer.setDescription('')
fileSessionUser = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileSessionUser.setStatus('current')
if mibBuilder.loadTexts: fileSessionUser.setDescription('')
fileSessionPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileSessionPassword.setStatus('current')
if mibBuilder.loadTexts: fileSessionPassword.setDescription('')
fileSessionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSessionResult.setStatus('current')
if mibBuilder.loadTexts: fileSessionResult.setDescription('')
fileSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("terminated-ok", 2), ("terminated-error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSessionState.setStatus('current')
if mibBuilder.loadTexts: fileSessionState.setDescription('')
fileSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileSessionRowStatus.setStatus('current')
if mibBuilder.loadTexts: fileSessionRowStatus.setDescription('see rbSysFileOperationTable description')
fileSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ftp", 1), ("sftp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSessionProtocol.setStatus('current')
if mibBuilder.loadTexts: fileSessionProtocol.setDescription('')
rbLldpPortExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 19, 1), )
if mibBuilder.loadTexts: rbLldpPortExtensionTable.setStatus('current')
if mibBuilder.loadTexts: rbLldpPortExtensionTable.setDescription('extends lldpV2PortConfigTable')
rbLldpPortExtensionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 19, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbLldpPortIfIndex"), (0, "RADIO-BRIDGE-MIB", "rbLldpPortDestAddressIndex"))
if mibBuilder.loadTexts: rbLldpPortExtensionEntry.setStatus('current')
if mibBuilder.loadTexts: rbLldpPortExtensionEntry.setDescription('')
rbLldpPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 19, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rbLldpPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: rbLldpPortIfIndex.setDescription('equal to lldpV2PortConfigIfIndex from RbLldpPortExtensionEntry')
rbLldpPortDestAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 19, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: rbLldpPortDestAddressIndex.setStatus('current')
if mibBuilder.loadTexts: rbLldpPortDestAddressIndex.setDescription('equal to lldpV2PortConfigDestAddressIndex from RbLldpPortExtensionEntry')
rbLldpPortVid = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 19, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbLldpPortVid.setStatus('current')
if mibBuilder.loadTexts: rbLldpPortVid.setDescription('')
rbWredTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 20, 1), )
if mibBuilder.loadTexts: rbWredTable.setStatus('current')
if mibBuilder.loadTexts: rbWredTable.setDescription('')
rbWredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbWredId"))
if mibBuilder.loadTexts: rbWredEntry.setStatus('current')
if mibBuilder.loadTexts: rbWredEntry.setDescription('')
rbWredId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rbWredId.setStatus('current')
if mibBuilder.loadTexts: rbWredId.setDescription('')
rbWredNfactor = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredNfactor.setStatus('current')
if mibBuilder.loadTexts: rbWredNfactor.setDescription('')
rbWredMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredMinThreshold.setStatus('current')
if mibBuilder.loadTexts: rbWredMinThreshold.setDescription('')
rbWredMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: rbWredMaxThreshold.setDescription('')
rbWredProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredProbability.setStatus('current')
if mibBuilder.loadTexts: rbWredProbability.setDescription('')
rbWredMinThresholdYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredMinThresholdYellow.setStatus('current')
if mibBuilder.loadTexts: rbWredMinThresholdYellow.setDescription('')
rbWredMaxThresholdYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredMaxThresholdYellow.setStatus('current')
if mibBuilder.loadTexts: rbWredMaxThresholdYellow.setDescription('')
rbWredProbabilityYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredProbabilityYellow.setStatus('current')
if mibBuilder.loadTexts: rbWredProbabilityYellow.setDescription('')
rbWredRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbWredRowStatus.setDescription('')
rbAuthServersTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 21, 1), )
if mibBuilder.loadTexts: rbAuthServersTable.setStatus('current')
if mibBuilder.loadTexts: rbAuthServersTable.setDescription('')
rbAuthServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 21, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbAuthServerId"))
if mibBuilder.loadTexts: rbAuthServersEntry.setStatus('current')
if mibBuilder.loadTexts: rbAuthServersEntry.setDescription('')
rbAuthServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: rbAuthServerId.setStatus('current')
if mibBuilder.loadTexts: rbAuthServerId.setDescription('')
rbAuthServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 21, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbAuthServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: rbAuthServerIpAddress.setDescription('')
rbAuthServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 21, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbAuthServerPort.setStatus('current')
if mibBuilder.loadTexts: rbAuthServerPort.setDescription('')
rbAuthServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 21, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbAuthServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbAuthServerRowStatus.setDescription('')
rbFdbQuotaTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 22, 1), )
if mibBuilder.loadTexts: rbFdbQuotaTable.setStatus('current')
if mibBuilder.loadTexts: rbFdbQuotaTable.setDescription('')
rbFdbQuotaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbFdbQuotaId"))
if mibBuilder.loadTexts: rbFdbQuotaEntry.setStatus('current')
if mibBuilder.loadTexts: rbFdbQuotaEntry.setDescription('')
rbFdbQuotaId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: rbFdbQuotaId.setStatus('current')
if mibBuilder.loadTexts: rbFdbQuotaId.setDescription('')
rbFdbQuotaSize = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbFdbQuotaSize.setStatus('current')
if mibBuilder.loadTexts: rbFdbQuotaSize.setDescription('')
rbFdbQuotaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbFdbQuotaRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbFdbQuotaRowStatus.setDescription('')
rbFdbQuotaMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbFdbQuotaMaxSize.setStatus('current')
if mibBuilder.loadTexts: rbFdbQuotaMaxSize.setDescription('')
rbFdbQuotaUsedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbFdbQuotaUsedEntries.setStatus('current')
if mibBuilder.loadTexts: rbFdbQuotaUsedEntries.setDescription('')
rbFdbQuotaStaticEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbFdbQuotaStaticEntries.setStatus('current')
if mibBuilder.loadTexts: rbFdbQuotaStaticEntries.setDescription('')
rbFdbQuotaDynamicEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbFdbQuotaDynamicEntries.setStatus('current')
if mibBuilder.loadTexts: rbFdbQuotaDynamicEntries.setDescription('')
rbFdbQuotaUnusedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbFdbQuotaUnusedEntries.setStatus('current')
if mibBuilder.loadTexts: rbFdbQuotaUnusedEntries.setDescription('')
rbFdbEvcQuotaTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 22, 2), )
if mibBuilder.loadTexts: rbFdbEvcQuotaTable.setStatus('current')
if mibBuilder.loadTexts: rbFdbEvcQuotaTable.setDescription('')
rbFdbEvcQuotaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 22, 2, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbFdbEvcQuotaId"))
if mibBuilder.loadTexts: rbFdbEvcQuotaEntry.setStatus('current')
if mibBuilder.loadTexts: rbFdbEvcQuotaEntry.setDescription('')
rbFdbEvcQuotaId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: rbFdbEvcQuotaId.setStatus('current')
if mibBuilder.loadTexts: rbFdbEvcQuotaId.setDescription('')
rbRefEvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbRefEvcId.setStatus('current')
if mibBuilder.loadTexts: rbRefEvcId.setDescription('')
rbRefFdbQuotaId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbRefFdbQuotaId.setStatus('current')
if mibBuilder.loadTexts: rbRefFdbQuotaId.setDescription('')
rbFdbEvcQuotaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbFdbEvcQuotaRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbFdbEvcQuotaRowStatus.setDescription('')
rbFdbExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 22, 3), )
if mibBuilder.loadTexts: rbFdbExtensionTable.setStatus('current')
if mibBuilder.loadTexts: rbFdbExtensionTable.setDescription('extends the ieee8021QBridgeTpFdbTable')
rbFdbExtensionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 22, 3, 1), )
ieee8021QBridgeTpFdbEntry.registerAugmentions(("RADIO-BRIDGE-MIB", "rbFdbExtensionEntry"))
rbFdbExtensionEntry.setIndexNames(*ieee8021QBridgeTpFdbEntry.getIndexNames())
if mibBuilder.loadTexts: rbFdbExtensionEntry.setStatus('current')
if mibBuilder.loadTexts: rbFdbExtensionEntry.setDescription('An entry containing additional management information applicable to a fdb entry.')
rbRefExtFdbQuotaId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbRefExtFdbQuotaId.setStatus('current')
if mibBuilder.loadTexts: rbRefExtFdbQuotaId.setDescription('')
rbPcpWriteProfileTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 23, 1), )
if mibBuilder.loadTexts: rbPcpWriteProfileTable.setStatus('current')
if mibBuilder.loadTexts: rbPcpWriteProfileTable.setDescription('')
rbPcpWriteProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 23, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbPcpWriteProfileId"))
if mibBuilder.loadTexts: rbPcpWriteProfileEntry.setStatus('current')
if mibBuilder.loadTexts: rbPcpWriteProfileEntry.setDescription('')
rbPcpWriteProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: rbPcpWriteProfileId.setStatus('current')
if mibBuilder.loadTexts: rbPcpWriteProfileId.setDescription('')
rbPcpWriteProfilePcp = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 23, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbPcpWriteProfilePcp.setStatus('current')
if mibBuilder.loadTexts: rbPcpWriteProfilePcp.setDescription('')
rbPcpWriteProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 23, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbPcpWriteProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbPcpWriteProfileRowStatus.setDescription('')
rbSyslogTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 24, 1), )
if mibBuilder.loadTexts: rbSyslogTable.setStatus('current')
if mibBuilder.loadTexts: rbSyslogTable.setDescription('')
rbSyslogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 24, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbSyslogId"))
if mibBuilder.loadTexts: rbSyslogEntry.setStatus('current')
if mibBuilder.loadTexts: rbSyslogEntry.setDescription('')
rbSyslogId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 24, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rbSyslogId.setStatus('current')
if mibBuilder.loadTexts: rbSyslogId.setDescription('')
rbSyslogServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 24, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbSyslogServerIp.setStatus('current')
if mibBuilder.loadTexts: rbSyslogServerIp.setDescription('')
rbSyslogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 24, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbSyslogRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbSyslogRowStatus.setDescription('')
rbNtpTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 25, 1), )
if mibBuilder.loadTexts: rbNtpTable.setStatus('current')
if mibBuilder.loadTexts: rbNtpTable.setDescription('')
rbNtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 25, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbNtpId"))
if mibBuilder.loadTexts: rbNtpEntry.setStatus('current')
if mibBuilder.loadTexts: rbNtpEntry.setDescription('')
rbNtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 25, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rbNtpId.setStatus('current')
if mibBuilder.loadTexts: rbNtpId.setDescription('')
rbNtpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 25, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbNtpServerIp.setStatus('current')
if mibBuilder.loadTexts: rbNtpServerIp.setDescription('')
rbNtpSecondaryServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 25, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbNtpSecondaryServerIp.setStatus('current')
if mibBuilder.loadTexts: rbNtpSecondaryServerIp.setDescription('')
rbNtpTmz = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 25, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 14))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbNtpTmz.setStatus('current')
if mibBuilder.loadTexts: rbNtpTmz.setDescription('')
rbNtpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 25, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbNtpRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbNtpRowStatus.setDescription('')
rbLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 26, 1), )
if mibBuilder.loadTexts: rbLicenseTable.setStatus('current')
if mibBuilder.loadTexts: rbLicenseTable.setDescription('')
rbLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 26, 1, 1), ).setIndexNames((1, "RADIO-BRIDGE-MIB", "rbLicenseId"))
if mibBuilder.loadTexts: rbLicenseEntry.setStatus('current')
if mibBuilder.loadTexts: rbLicenseEntry.setDescription('')
rbLicenseId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 26, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rbLicenseId.setStatus('current')
if mibBuilder.loadTexts: rbLicenseId.setDescription('')
rbLicenseCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 26, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbLicenseCurrentValue.setStatus('current')
if mibBuilder.loadTexts: rbLicenseCurrentValue.setDescription('for data-rate means data rate value, for enable similar to TruthValue')
rbLicenseMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 26, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbLicenseMaxValue.setStatus('current')
if mibBuilder.loadTexts: rbLicenseMaxValue.setDescription('')
mibBuilder.exportSymbols("RADIO-BRIDGE-MIB", qosIngressQueueMeterId=qosIngressQueueMeterId, rbIpRowStatus=rbIpRowStatus, rbCurrentAlarmRaisedTime=rbCurrentAlarmRaisedTime, rbPeerMepFrameDelayVariation=rbPeerMepFrameDelayVariation, rfNumOfSubchannels=rfNumOfSubchannels, rbSwBank1Running=rbSwBank1Running, rbMeterEntry=rbMeterEntry, fileSessionServer=fileSessionServer, rbLldpPortExtensionTable=rbLldpPortExtensionTable, radioBridgeEncryption=radioBridgeEncryption, rfLowestFecRate=rfLowestFecRate, rbLldpPortVid=rbLldpPortVid, rbCurrentAlarmTypeName=rbCurrentAlarmTypeName, rbPeerMepNearEndLoss=rbPeerMepNearEndLoss, rbSyslogId=rbSyslogId, classifierEvcId=classifierEvcId, rfRoleStatus=rfRoleStatus, trapRssiOutOfRange=trapRssiOutOfRange, rbPeerMepFrameDelay=rbPeerMepFrameDelay, rfDaysMaxRssi=rfDaysMaxRssi, rfMinModulation=rfMinModulation, rbCurrentAlarmDesc=rbCurrentAlarmDesc, refClockRowStatus=refClockRowStatus, rbFdbQuotaTable=rbFdbQuotaTable, rbNtpSecondaryServerIp=rbNtpSecondaryServerIp, trapSfpOut=trapSfpOut, rbMdIndex=rbMdIndex, rbSwBank1Version=rbSwBank1Version, radioBridgeQosClassifier=radioBridgeQosClassifier, rbAuthServersTable=rbAuthServersTable, rbAgentSnmpVersion=rbAgentSnmpVersion, fileSessionUser=fileSessionUser, rbIpType=rbIpType, rfTxSynthLock=rfTxSynthLock, rbSwBank2Version=rbSwBank2Version, rbMeterId=rbMeterId, rbIpEntry=rbIpEntry, rbMepId=rbMepId, rbRfStatisticsTable=rbRfStatisticsTable, rbRfTable=rbRfTable, rbRefExtFdbQuotaId=rbRefExtFdbQuotaId, rfTxMuteTimeout=rfTxMuteTimeout, rbMeterEir=rbMeterEir, rbIpAddress=rbIpAddress, rfDaysStart=rfDaysStart, classifierCosPortList=classifierCosPortList, rbCurrentAlarmType=rbCurrentAlarmType, qosEgressQueueCosId=qosEgressQueueCosId, rbRfStatisticsEntry=rbRfStatisticsEntry, rbRefEvcId=rbRefEvcId, rbAuthServerPort=rbAuthServerPort, rbFdbQuotaRowStatus=rbFdbQuotaRowStatus, rbFdbQuotaUnusedEntries=rbFdbQuotaUnusedEntries, rbRfAuthenticationString=rbRfAuthenticationString, rbCurrentAlarmLastTrapType=rbCurrentAlarmLastTrapType, classifierCosPacketType=classifierCosPacketType, rbMeterEbs=rbMeterEbs, refClockQualityLevelMode=refClockQualityLevelMode, rfLoopModulationType=rfLoopModulationType, rfAverageRssi=rfAverageRssi, fileSessionRowStatus=fileSessionRowStatus, rbFdbQuotaUsedEntries=rbFdbQuotaUsedEntries, trapRefClockChanged=trapRefClockChanged, rfDayIndex=rfDayIndex, rfMaxRssi=rfMaxRssi, rfOutOctets=rfOutOctets, rbRfStatisticsDaysEntry=rbRfStatisticsDaysEntry, rbCurrentAlarmIndex=rbCurrentAlarmIndex, classifierCosPcpList=classifierCosPcpList, radioBridgePcpProfile=radioBridgePcpProfile, classifierEvcPacketType=classifierEvcPacketType, rfLoopModeSelector=rfLoopModeSelector, rbIpVlanId=rbIpVlanId, radioBridgeIp=radioBridgeIp, trapCinrOutOfRange=trapCinrOutOfRange, rbFdbQuotaId=rbFdbQuotaId, rbFdbQuotaStaticEntries=rbFdbQuotaStaticEntries, rbMepAisDefects=rbMepAisDefects, rfAlignmentStatus=rfAlignmentStatus, rbWredMaxThreshold=rbWredMaxThreshold, rbSysFileOperationTable=rbSysFileOperationTable, rbCurrentAlarmSeverity=rbCurrentAlarmSeverity, rfDaysInOctets=rfDaysInOctets, radioBridgeRoot=radioBridgeRoot, fileSessionState=fileSessionState, radioBridgeRefClock=radioBridgeRefClock, rfDaysOutPkts=rfDaysOutPkts, rbFdbQuotaEntry=rbFdbQuotaEntry, rbWredEntry=rbWredEntry, rfIndex=rfIndex, rfMinRssi=rfMinRssi, radioBridgeAuthentication=radioBridgeAuthentication, rfInLostPkts=rfInLostPkts, rfDaysArqInLoss=rfDaysArqInLoss, rfAsymmetry=rfAsymmetry, rfMaxModulation=rfMaxModulation, rfArqOutLoss=rfArqOutLoss, rfLoopTimeout=rfLoopTimeout, qosEgressDropMode=qosEgressDropMode, fileSessionLocalParams=fileSessionLocalParams, rbClassifierEvcEntry=rbClassifierEvcEntry, AlarmSeverity=AlarmSeverity, rbAgentWriteCommunity=rbAgentWriteCommunity, rbEventConfigIndex=rbEventConfigIndex, rbPeerMepFarEndLoss=rbPeerMepFarEndLoss, rfRxState=rfRxState, classifierEvcPortList=classifierEvcPortList, fileSessionCommand=fileSessionCommand, rfTxState=rfTxState, rbIpPrefixLen=rbIpPrefixLen, rfTxPower=rfTxPower, rbPeerMep=rbPeerMep, trapLoopDisabled=trapLoopDisabled, rbFdbExtensionEntry=rbFdbExtensionEntry, rbNtpTmz=rbNtpTmz, radioBridgeSnmp=radioBridgeSnmp, rfInGoodPkts=rfInGoodPkts, qosIngressQueueCosId=qosIngressQueueCosId, rbCurrentAlarmTable=rbCurrentAlarmTable, classifierEvcEvc=classifierEvcEvc, rbMepEntry=rbMepEntry, rfLowestModulationType=rfLowestModulationType, rbPcpWriteProfileTable=rbPcpWriteProfileTable, trapNoLowestModulation=trapNoLowestModulation, rbLicenseId=rbLicenseId, rbLicenseTable=rbLicenseTable, radioBridgeWred=radioBridgeWred, rbFdbQuotaSize=rbFdbQuotaSize, rbFdbEvcQuotaEntry=rbFdbEvcQuotaEntry, rfInIdleOctets=rfInIdleOctets, rbRefClockEntry=rbRefClockEntry, rfAverageCinr=rfAverageCinr, rbClassifierEvcTable=rbClassifierEvcTable, rbFdbEvcQuotaRowStatus=rbFdbEvcQuotaRowStatus, rbLldpPortIfIndex=rbLldpPortIfIndex, rbSysFileOperationEntry=rbSysFileOperationEntry, rbPcpWriteProfileRowStatus=rbPcpWriteProfileRowStatus, ethernetClassifierMode=ethernetClassifierMode, qosEgressQueuePortNum=qosEgressQueuePortNum, rbQosIngressQueueEntry=rbQosIngressQueueEntry, rbDate=rbDate, rfMinCinr=rfMinCinr, rbRfEntry=rbRfEntry, rfLoopNumOfRepetitions=rfLoopNumOfRepetitions, refClockPrio=refClockPrio, rfDaysMaxCinr=rfDaysMaxCinr, rbSyslogTable=rbSyslogTable, rbWredNfactor=rbWredNfactor, rbRefClockTable=rbRefClockTable, rbMepAisPeriod=rbMepAisPeriod, qosEgressQueueMode=qosEgressQueueMode, rbSysSaveConfiguration=rbSysSaveConfiguration, rfDaysInErroredPkts=rfDaysInErroredPkts, rbLicenseMaxValue=rbLicenseMaxValue, rfRxSynthLock=rfRxSynthLock, fileSessionIndex=fileSessionIndex, rfLoopFecRate=rfLoopFecRate, rfInOctets=rfInOctets, rbIpIndex=rbIpIndex, radioBridgeMeter=radioBridgeMeter, rbSyslogServerIp=rbSyslogServerIp, rbSwBank1ScheduledToRunNextReset=rbSwBank1ScheduledToRunNextReset, rbSysVoltage=rbSysVoltage, rfMaxCinr=rfMaxCinr, rbMepAisEnable=rbMepAisEnable, rbPcpWriteProfileEntry=rbPcpWriteProfileEntry, ethernetLoopMode=ethernetLoopMode, refClockSsmCvid=refClockSsmCvid, classifierEvcVidList=classifierEvcVidList, rfDaysMinRssi=rfDaysMinRssi, classifierEvcPrecedence=classifierEvcPrecedence, rbSystemAuthenticationMode=rbSystemAuthenticationMode, rfDaysInIdleOctets=rfDaysInIdleOctets, rbMeterCir=rbMeterCir, qosIngressQueueMarking=qosIngressQueueMarking, rbSystemUpAbsoluteTime=rbSystemUpAbsoluteTime, rbSystemAuthenticationSecret=rbSystemAuthenticationSecret, rbRfStatisticsDaysTable=rbRfStatisticsDaysTable, radioBridgeSystem=radioBridgeSystem, trapTemperatureOutOfRange=trapTemperatureOutOfRange, rbNtpEntry=rbNtpEntry, rfArqInLoss=rfArqInLoss, trapModulationChange=trapModulationChange, rfValid=rfValid, rbFdbQuotaMaxSize=rbFdbQuotaMaxSize, rbWredMaxThresholdYellow=rbWredMaxThresholdYellow, ethernetLoopTimeout=ethernetLoopTimeout, qosIngressQueueRowStatus=qosIngressQueueRowStatus, rbCurrentAlarmEntry=rbCurrentAlarmEntry, radioBridgeQosIngressQueue=radioBridgeQosIngressQueue, rbAgentReadCommunity=rbAgentReadCommunity, rbIpGateway=rbIpGateway, rbNtpRowStatus=rbNtpRowStatus, rbFdbEvcQuotaTable=rbFdbEvcQuotaTable, rbPeerMepId=rbPeerMepId, rfOperationalFrequency=rfOperationalFrequency, rbCurrentAlarmSourceAddr=rbCurrentAlarmSourceAddr, rfNumOfRepetitions=rfNumOfRepetitions, radioBridgeTraps=radioBridgeTraps, rbAuthServerRowStatus=rbAuthServerRowStatus, ethernetPcpWriteProfileId=ethernetPcpWriteProfileId, rbPeerMepEntry=rbPeerMepEntry, classifierCosIpCosList=classifierCosIpCosList, rfLoopNumOfSubchannels=rfLoopNumOfSubchannels, trapCinrInRange=trapCinrInRange, rbCurrentAlarmLastIndex=rbCurrentAlarmLastIndex, rfOutPkts=rfOutPkts, rbWredMinThreshold=rbWredMinThreshold, fileSessionPassword=fileSessionPassword, trapLowestModulation=trapLowestModulation, fileSessionProtocol=fileSessionProtocol, rfTxMute=rfTxMute, rbCurrentAlarmCause=rbCurrentAlarmCause, rbWredTable=rbWredTable, radioBridgeRf=radioBridgeRf, rbSchedulerMode=rbSchedulerMode, rfDaysArqOutLoss=rfDaysArqOutLoss, fileSessionRemotePath=fileSessionRemotePath, rbClassifierCosTable=rbClassifierCosTable, rbFdbExtensionTable=rbFdbExtensionTable, rfDaysValid=rfDaysValid, rfOutIdleOctets=rfOutIdleOctets, rbRfStaticKey=rbRfStaticKey, rbWredId=rbWredId, rfDaysMaxModulation=rfDaysMaxModulation, rbWredMinThresholdYellow=rbWredMinThresholdYellow, trapCurrentAlarm=trapCurrentAlarm, rbEventConfigTable=rbEventConfigTable, AlarmType=AlarmType, rfDaysInGoodOctets=rfDaysInGoodOctets, classifierCosId=classifierCosId, radioBridgeScheduler=radioBridgeScheduler, radioBridgeQuota=radioBridgeQuota, rbNtpTable=rbNtpTable, ethernetNetworkType=ethernetNetworkType, rfRxLinkId=rfRxLinkId, rbMeterCbs=rbMeterCbs, trapTxMuteDisabled=trapTxMuteDisabled, rbSwBank2Running=rbSwBank2Running, radioBridgeEthernet=radioBridgeEthernet, rbMep=rbMep, rfModeSelector=rfModeSelector, radioBridgeEventConfig=radioBridgeEventConfig, classifierEvcIpCosType=classifierEvcIpCosType, rbEthernetEntry=rbEthernetEntry, rbMeterRowStatus=rbMeterRowStatus, rfDaysOutIdleOctets=rfDaysOutIdleOctets, rfFecRate=rfFecRate, rbPcpWriteProfileId=rbPcpWriteProfileId, rbLicenseEntry=rbLicenseEntry, rfDaysInPkts=rfDaysInPkts, rfDaysOutOctets=rfDaysOutOctets, rbNtpId=rbNtpId, classifierCosRowStatus=classifierCosRowStatus)
mibBuilder.exportSymbols("RADIO-BRIDGE-MIB", radioBridgeSyslog=radioBridgeSyslog, rfLoopDirection=rfLoopDirection, radioBridgeCfm=radioBridgeCfm, rbRfEncryption=rbRfEncryption, rfModulationType=rfModulationType, classifierEvcIpCosList=classifierEvcIpCosList, rfInErroredPkts=rfInErroredPkts, rbWredProbability=rbWredProbability, classifierEvcPcpList=classifierEvcPcpList, radioBridgeQosEgressQueue=radioBridgeQosEgressQueue, rbSysTemperature=rbSysTemperature, qosEgressQueueWfqWeight=qosEgressQueueWfqWeight, rbFdbQuotaDynamicEntries=rbFdbQuotaDynamicEntries, rbCurrentAlarmMostSevere=rbCurrentAlarmMostSevere, radioBridgeLldp=radioBridgeLldp, rbAuthServerId=rbAuthServerId, trapLoopEnabled=trapLoopEnabled, ethernetAlarmPropagation=ethernetAlarmPropagation, rfInPkts=rfInPkts, fileSessionResult=fileSessionResult, rbAuthServersEntry=rbAuthServersEntry, classifierEvcRowStatus=classifierEvcRowStatus, rfInGoodOctets=rfInGoodOctets, rbLldpPortDestAddressIndex=rbLldpPortDestAddressIndex, rfRole=rfRole, classifierCosCos=classifierCosCos, rbLldpPortExtensionEntry=rbLldpPortExtensionEntry, rfChannelWidth=rfChannelWidth, rbMeterColorMode=rbMeterColorMode, rbCurrentAlarmChangeCounter=rbCurrentAlarmChangeCounter, rbLicenseCurrentValue=rbLicenseCurrentValue, radioBridgeAlarms=radioBridgeAlarms, rbEventConfigMask=rbEventConfigMask, rbMaIndex=rbMaIndex, rbPeerMepTotalTxNearEnd=rbPeerMepTotalTxNearEnd, rbFdbEvcQuotaId=rbFdbEvcQuotaId, rbMepAisSuppress=rbMepAisSuppress, qosIngressQueueEvcId=qosIngressQueueEvcId, rbIpTable=rbIpTable, rbEthernetTable=rbEthernetTable, radioBridgeNtp=radioBridgeNtp, refClockQualityLevelConfig=refClockQualityLevelConfig, qosEgressQueueCir=qosEgressQueueCir, rbPcpWriteProfilePcp=rbPcpWriteProfilePcp, rfInErroredOctets=rfInErroredOctets, rbSwBank2ScheduledToRunNextReset=rbSwBank2ScheduledToRunNextReset, rbSyslogEntry=rbSyslogEntry, rfDaysMinCinr=rfDaysMinCinr, rbCurrentAlarmAction=rbCurrentAlarmAction, rfDaysMinModulation=rfDaysMinModulation, rfNumOfChannels=rfNumOfChannels, trapTemperatureInRange=trapTemperatureInRange, radioBridgeLicense=radioBridgeLicense, rfDaysInGoodPkts=rfDaysInGoodPkts, trapRssiInRange=trapRssiInRange, rfTemperature=rfTemperature, rbClassifierCosEntry=rbClassifierCosEntry, rfDaysInLostPkts=rfDaysInLostPkts, rfOperationalState=rfOperationalState, rfLowestNumOfRepetitions=rfLowestNumOfRepetitions, qosEgressQueueColorDrop=qosEgressQueueColorDrop, trapSfpIn=trapSfpIn, rbSystemCapabilities=rbSystemCapabilities, rbWredProbabilityYellow=rbWredProbabilityYellow, rbPeerMepTotalTxFarEnd=rbPeerMepTotalTxFarEnd, rbMepAisLevel=rbMepAisLevel, rbQosEgressQueueEntry=rbQosEgressQueueEntry, rbAlarmsCommon=rbAlarmsCommon, rbQosEgressQueueTable=rbQosEgressQueueTable, rbQosIngressQueueTable=rbQosIngressQueueTable, rbTime=rbTime, rbAuthServerIpAddress=rbAuthServerIpAddress, rfTxLinkId=rfTxLinkId, rbRefFdbQuotaId=rbRefFdbQuotaId, rbCurrentAlarmIfIndex=rbCurrentAlarmIfIndex, refClockStatus=refClockStatus, rbWredRowStatus=rbWredRowStatus, trapTxMuteEnabled=trapTxMuteEnabled, classifierCosVidList=classifierCosVidList, rbSysReset=rbSysReset, rbEventConfigEntry=rbEventConfigEntry, rfLowestNumOfSubchannels=rfLowestNumOfSubchannels, classifierCosIpCosType=classifierCosIpCosType, refClockQualityLevelActual=refClockQualityLevelActual, rbCurrentAlarmSource=rbCurrentAlarmSource, rbMeterTable=rbMeterTable, rfDaysInErroredOctets=rfDaysInErroredOctets, rbSyslogRowStatus=rbSyslogRowStatus, rbNtpServerIp=rbNtpServerIp, rbEventConfigId=rbEventConfigId, classifierCosPrecedence=classifierCosPrecedence)
