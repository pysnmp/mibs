#
# PySNMP MIB module CAMBIUM-PTP500-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/cambium/CAMBIUM-PTP500-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:08:01 2024
# On host fv-az692-788 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, Bits, TimeTicks, MibIdentifier, Counter64, NotificationType, Unsigned32, enterprises, Counter32, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "Bits", "TimeTicks", "MibIdentifier", "Counter64", "NotificationType", "Unsigned32", "enterprises", "Counter32", "iso", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cambium = ModuleIdentity((1, 3, 6, 1, 4, 1, 17713))
cambium.setRevisions(('2014-03-14 16:04', '2013-02-08 08:38', '2012-07-09 17:50', '2012-03-28 10:37', '2011-07-13 16:57', '2010-09-22 14:49', '2009-05-29 09:25', '2008-11-04 10:22', '2008-06-26 16:44', '2008-04-11 18:08',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cambium.setRevisionsDescriptions(('PTP500-05-04:\n         Added aAAControl group containing user table.', 'PTP500-05-03:\n         Removed encryptionEnabledMismatchTrap.\n         Renamed dfsChannelChangeTrap to channelChangeTrap.', 'PTP500-05-02:\n         Corrected REVISION DESCRIPTION clause for 05-01.', 'PTP500-05-01:\n         Updated ORGANIZATION and CONTACT-INFO.\n         Replaced syslogLocalLog with syslogState.\n         Added licensedCapacity and capacityLicenseMismatchTrap as part of SKU reduction.\n         Added support for HTTPS.\n         Added enabledDiagnosticAlarms attribute.\n         Added support for syslog client.\n         Removed lineOfSightModeInactive trap as part of SKU reduction (LOS no longer supported).', 'PTP500-04-01:\n         Added latitude, longitude, altitude, searchState, accessMethod and groupID.', 'PTP500-04-00:\n         Changed root OID.\n         Added SNMPv3 support, TDD sync, DFS Table, BIT STRING types now OCTET STRING.\n         Added linkName, siteName.\n         Renamed ethernet attributes & traps.', 'PTP500-03-02: Added Telecoms circuit emulation.', 'PTP500-03-00: Added Link Symmetry.', 'PTP500-02-00: Added IEEE 802.1q & 802.1ad VLAN support.', 'PTP500-01-00',))
if mibBuilder.loadTexts: cambium.setLastUpdated('201403141604Z')
if mibBuilder.loadTexts: cambium.setOrganization('Cambium Networks Ltd.')
if mibBuilder.loadTexts: cambium.setContactInfo('Post:  Simon Whitaker\n                 Cambium Networks Ltd.\n                 Unit B2,\n                 Linhay Business Park,\n                 Eastern Road,\n                 Ashburton,\n                 Devon.\n                 TQ13 7UP\n                 United Kingdom\n         Phone:  +44 (0) 1364 655 500\n         Email:  simon.whitaker@cambiumnetworks.com')
if mibBuilder.loadTexts: cambium.setDescription('MIB for 105Mbps non-line-of-sight (NLOS) wireless ethernet bridge.')
ptp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1))
ptmp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 2))
ptp500 = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5))
dfs = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 3))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 5))
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 6))
telecom = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 7))
licence = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 8))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 9))
phyControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 10))
phyStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 12))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 13))
smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 15))
snmpControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 16))
sntp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 17))
reset = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 18))
versions = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 19))
pubStats = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 20))
encryption = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 22))
tDDControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 23))
aAAControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 25))
syslogControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 24))
supplementary = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 96))
ptpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 98))
ptpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 99))
ptpTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0))
ptpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 17713, 5, 97)).setObjects(("CAMBIUM-PTP500-MIB", "dfsGroup"), ("CAMBIUM-PTP500-MIB", "configurationGroup"), ("CAMBIUM-PTP500-MIB", "ethernetGroup"), ("CAMBIUM-PTP500-MIB", "telecomGroup"), ("CAMBIUM-PTP500-MIB", "licenceGroup"), ("CAMBIUM-PTP500-MIB", "managementGroup"), ("CAMBIUM-PTP500-MIB", "phyControlGroup"), ("CAMBIUM-PTP500-MIB", "phyStatusGroup"), ("CAMBIUM-PTP500-MIB", "alarmsGroup"), ("CAMBIUM-PTP500-MIB", "smtpGroup"), ("CAMBIUM-PTP500-MIB", "snmpControlGroup"), ("CAMBIUM-PTP500-MIB", "sntpGroup"), ("CAMBIUM-PTP500-MIB", "resetGroup"), ("CAMBIUM-PTP500-MIB", "versionsGroup"), ("CAMBIUM-PTP500-MIB", "pubStatsGroup"), ("CAMBIUM-PTP500-MIB", "encryptionGroup"), ("CAMBIUM-PTP500-MIB", "tDDControlGroup"), ("CAMBIUM-PTP500-MIB", "aAAControlGroup"), ("CAMBIUM-PTP500-MIB", "syslogControlGroup"), ("CAMBIUM-PTP500-MIB", "supplementaryGroup"), ("CAMBIUM-PTP500-MIB", "notificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ptpCompliance = ptpCompliance.setStatus('current')
if mibBuilder.loadTexts: ptpCompliance.setDescription('The compliance statement for the Cambium PTP MIB')
dfsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 3)).setObjects(("CAMBIUM-PTP500-MIB", "dfsTableNumber"), ("CAMBIUM-PTP500-MIB", "dfsMeans"), ("CAMBIUM-PTP500-MIB", "dfsNineNinePointNinePercentiles"), ("CAMBIUM-PTP500-MIB", "dfsPeaks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfsGroup = dfsGroup.setStatus('current')
if mibBuilder.loadTexts: dfsGroup.setDescription('The dfs object group.')
configurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 5)).setObjects(("CAMBIUM-PTP500-MIB", "iPAddress"), ("CAMBIUM-PTP500-MIB", "subnetMask"), ("CAMBIUM-PTP500-MIB", "gatewayIPAddress"), ("CAMBIUM-PTP500-MIB", "targetMACAddress"), ("CAMBIUM-PTP500-MIB", "masterSlaveMode"), ("CAMBIUM-PTP500-MIB", "maximumTransmitPower"), ("CAMBIUM-PTP500-MIB", "antennaGain"), ("CAMBIUM-PTP500-MIB", "cableLoss"), ("CAMBIUM-PTP500-MIB", "eIRP"), ("CAMBIUM-PTP500-MIB", "channelBandwidth"), ("CAMBIUM-PTP500-MIB", "remoteIPAddress"), ("CAMBIUM-PTP500-MIB", "linkName"), ("CAMBIUM-PTP500-MIB", "siteName"), ("CAMBIUM-PTP500-MIB", "accessMethod"), ("CAMBIUM-PTP500-MIB", "groupID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configurationGroup = configurationGroup.setStatus('current')
if mibBuilder.loadTexts: configurationGroup.setDescription('The configuration object group.')
ethernetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 6)).setObjects(("CAMBIUM-PTP500-MIB", "dataPortAutoNegotiation"), ("CAMBIUM-PTP500-MIB", "dataPortAutoNegAdvertisement"), ("CAMBIUM-PTP500-MIB", "dataPortAutoMdix"), ("CAMBIUM-PTP500-MIB", "dataPortStatus"), ("CAMBIUM-PTP500-MIB", "dataPortSpeedAndDuplex"), ("CAMBIUM-PTP500-MIB", "dataPortWirelessDownAlert"), ("CAMBIUM-PTP500-MIB", "useVLANForManagementInterfaces"), ("CAMBIUM-PTP500-MIB", "vLANManagementPriority"), ("CAMBIUM-PTP500-MIB", "vLANManagementVID"), ("CAMBIUM-PTP500-MIB", "vLANPriorityTableNumber"), ("CAMBIUM-PTP500-MIB", "vLANPriorityQueueMapping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetGroup = ethernetGroup.setStatus('current')
if mibBuilder.loadTexts: ethernetGroup.setDescription('The ethernet object group.')
telecomGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 7)).setObjects(("CAMBIUM-PTP500-MIB", "telecomsInterface"), ("CAMBIUM-PTP500-MIB", "telecomsChannelStatus"), ("CAMBIUM-PTP500-MIB", "telecomsLineCode"), ("CAMBIUM-PTP500-MIB", "telecomsCableLength"), ("CAMBIUM-PTP500-MIB", "telecomsLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    telecomGroup = telecomGroup.setStatus('current')
if mibBuilder.loadTexts: telecomGroup.setDescription('The telecom object group.')
licenceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 8)).setObjects(("CAMBIUM-PTP500-MIB", "regionCode"), ("CAMBIUM-PTP500-MIB", "productVariant"), ("CAMBIUM-PTP500-MIB", "productName"), ("CAMBIUM-PTP500-MIB", "ethernetFiberSupport"), ("CAMBIUM-PTP500-MIB", "frequencyVariant"), ("CAMBIUM-PTP500-MIB", "bandwidthVariant"), ("CAMBIUM-PTP500-MIB", "constantPowerSpectralDensity"), ("CAMBIUM-PTP500-MIB", "sNMPv3Enable"), ("CAMBIUM-PTP500-MIB", "licensedCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    licenceGroup = licenceGroup.setStatus('current')
if mibBuilder.loadTexts: licenceGroup.setDescription('The licence object group.')
managementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 9)).setObjects(("CAMBIUM-PTP500-MIB", "installStatus"), ("CAMBIUM-PTP500-MIB", "installArmState"), ("CAMBIUM-PTP500-MIB", "tFTPServerIPAddress"), ("CAMBIUM-PTP500-MIB", "tFTPServerPortNumber"), ("CAMBIUM-PTP500-MIB", "tFTPSoftwareUpgradeFileName"), ("CAMBIUM-PTP500-MIB", "tFTPStartSoftwareUpgrade"), ("CAMBIUM-PTP500-MIB", "tFTPSoftwareUpgradeStatus"), ("CAMBIUM-PTP500-MIB", "tFTPSoftwareUpgradeStatusText"), ("CAMBIUM-PTP500-MIB", "tFTPSoftwareUpgradeStatusAdditionalText"), ("CAMBIUM-PTP500-MIB", "hTTPAccessEnabled"), ("CAMBIUM-PTP500-MIB", "telnetAccessEnabled"), ("CAMBIUM-PTP500-MIB", "hTTPPortNumber"), ("CAMBIUM-PTP500-MIB", "hTTPSPortNumber"), ("CAMBIUM-PTP500-MIB", "telnetPortNumber"), ("CAMBIUM-PTP500-MIB", "hTTPSAccessEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    managementGroup = managementGroup.setStatus('current')
if mibBuilder.loadTexts: managementGroup.setDescription('The management object group.')
phyControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 10)).setObjects(("CAMBIUM-PTP500-MIB", "linkSymmetry"), ("CAMBIUM-PTP500-MIB", "linkModeOptimisation"), ("CAMBIUM-PTP500-MIB", "userConfiguredMaxModulationMode"), ("CAMBIUM-PTP500-MIB", "remoteMaximumTransmitPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyControlGroup = phyControlGroup.setStatus('current')
if mibBuilder.loadTexts: phyControlGroup.setDescription('The phyControl object group.')
phyStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 12)).setObjects(("CAMBIUM-PTP500-MIB", "receivePower"), ("CAMBIUM-PTP500-MIB", "vectorError"), ("CAMBIUM-PTP500-MIB", "transmitPower"), ("CAMBIUM-PTP500-MIB", "range"), ("CAMBIUM-PTP500-MIB", "linkLoss"), ("CAMBIUM-PTP500-MIB", "receiveChannel"), ("CAMBIUM-PTP500-MIB", "transmitChannel"), ("CAMBIUM-PTP500-MIB", "receiveModulationMode"), ("CAMBIUM-PTP500-MIB", "transmitModulationMode"), ("CAMBIUM-PTP500-MIB", "receiveFreqMHz"), ("CAMBIUM-PTP500-MIB", "transmitFreqMHz"), ("CAMBIUM-PTP500-MIB", "signalStrengthRatio"), ("CAMBIUM-PTP500-MIB", "receiveFreqKHz"), ("CAMBIUM-PTP500-MIB", "transmitFreqKHz"), ("CAMBIUM-PTP500-MIB", "searchState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyStatusGroup = phyStatusGroup.setStatus('current')
if mibBuilder.loadTexts: phyStatusGroup.setDescription('The phyStatus object group.')
alarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 13)).setObjects(("CAMBIUM-PTP500-MIB", "unitOutOfCalibration"), ("CAMBIUM-PTP500-MIB", "incompatibleRegionCodes"), ("CAMBIUM-PTP500-MIB", "noWirelessChannelAvailable"), ("CAMBIUM-PTP500-MIB", "wirelessLinkDisabledWarning"), ("CAMBIUM-PTP500-MIB", "dataPortDisabledWarning"), ("CAMBIUM-PTP500-MIB", "dataPortConfigurationMismatch"), ("CAMBIUM-PTP500-MIB", "incompatibleMasterAndSlave"), ("CAMBIUM-PTP500-MIB", "tDDSynchronizationStatus"), ("CAMBIUM-PTP500-MIB", "tDDSynchronizationAlarm"), ("CAMBIUM-PTP500-MIB", "linkModeOptimizationMismatch"), ("CAMBIUM-PTP500-MIB", "capacityLicenseMismatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alarmsGroup = alarmsGroup.setStatus('current')
if mibBuilder.loadTexts: alarmsGroup.setDescription('The alarms object group.')
smtpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 15)).setObjects(("CAMBIUM-PTP500-MIB", "sMTPEmailAlert"), ("CAMBIUM-PTP500-MIB", "sMTPServerIPAddress"), ("CAMBIUM-PTP500-MIB", "sMTPServerPortNumber"), ("CAMBIUM-PTP500-MIB", "sMTPSourceEmailAddress"), ("CAMBIUM-PTP500-MIB", "sMTPDestinationEmailAddress"), ("CAMBIUM-PTP500-MIB", "sMTPEnabledMessages"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smtpGroup = smtpGroup.setStatus('current')
if mibBuilder.loadTexts: smtpGroup.setDescription('The smtp object group.')
snmpControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 16)).setObjects(("CAMBIUM-PTP500-MIB", "sNMPPortNumber"), ("CAMBIUM-PTP500-MIB", "sNMPCommunityString"), ("CAMBIUM-PTP500-MIB", "sNMPTrapTableNumber"), ("CAMBIUM-PTP500-MIB", "sNMPTrapVersion"), ("CAMBIUM-PTP500-MIB", "sNMPEnabledTraps"), ("CAMBIUM-PTP500-MIB", "enabledDiagnosticAlarms"), ("CAMBIUM-PTP500-MIB", "sNMPSendAllTrapsAtStartup"), ("CAMBIUM-PTP500-MIB", "sNMPTrapIPAddress"), ("CAMBIUM-PTP500-MIB", "sNMPTrapPortNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpControlGroup = snmpControlGroup.setStatus('current')
if mibBuilder.loadTexts: snmpControlGroup.setDescription('The snmpControl object group.')
sntpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 17)).setObjects(("CAMBIUM-PTP500-MIB", "sNTPState"), ("CAMBIUM-PTP500-MIB", "sNTPServerIPAddress"), ("CAMBIUM-PTP500-MIB", "sNTPServerPortNumber"), ("CAMBIUM-PTP500-MIB", "sNTPPollInterval"), ("CAMBIUM-PTP500-MIB", "sNTPSync"), ("CAMBIUM-PTP500-MIB", "sNTPLastSync"), ("CAMBIUM-PTP500-MIB", "systemClock"), ("CAMBIUM-PTP500-MIB", "timeZone"), ("CAMBIUM-PTP500-MIB", "daylightSaving"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sntpGroup = sntpGroup.setStatus('current')
if mibBuilder.loadTexts: sntpGroup.setDescription('The sntp object group.')
resetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 18)).setObjects(("CAMBIUM-PTP500-MIB", "systemReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resetGroup = resetGroup.setStatus('current')
if mibBuilder.loadTexts: resetGroup.setDescription('The reset object group.')
versionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 19)).setObjects(("CAMBIUM-PTP500-MIB", "softwareVersion"), ("CAMBIUM-PTP500-MIB", "hardwareVersion"), ("CAMBIUM-PTP500-MIB", "secondarySoftwareVersion"), ("CAMBIUM-PTP500-MIB", "bootVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    versionsGroup = versionsGroup.setStatus('current')
if mibBuilder.loadTexts: versionsGroup.setDescription('The versions object group.')
pubStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 20)).setObjects(("CAMBIUM-PTP500-MIB", "receiveDataRate"), ("CAMBIUM-PTP500-MIB", "transmitDataRate"), ("CAMBIUM-PTP500-MIB", "aggregateDataRate"), ("CAMBIUM-PTP500-MIB", "wirelessLinkAvailability"), ("CAMBIUM-PTP500-MIB", "wirelessLinkStatus"), ("CAMBIUM-PTP500-MIB", "byteErrorRatio"), ("CAMBIUM-PTP500-MIB", "receiveModulationModeDetail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pubStatsGroup = pubStatsGroup.setStatus('current')
if mibBuilder.loadTexts: pubStatsGroup.setDescription('The pubStats object group.')
encryptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 22)).setObjects(("CAMBIUM-PTP500-MIB", "encryptionAlgorithm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    encryptionGroup = encryptionGroup.setStatus('current')
if mibBuilder.loadTexts: encryptionGroup.setDescription('The encryption object group.')
tDDControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 23)).setObjects(("CAMBIUM-PTP500-MIB", "tDDSynchronizationMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tDDControlGroup = tDDControlGroup.setStatus('current')
if mibBuilder.loadTexts: tDDControlGroup.setDescription('The tDDControl object group.')
aAAControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 25)).setObjects(("CAMBIUM-PTP500-MIB", "userTableNumber"), ("CAMBIUM-PTP500-MIB", "userName"), ("CAMBIUM-PTP500-MIB", "userRole"), ("CAMBIUM-PTP500-MIB", "userEnabled"), ("CAMBIUM-PTP500-MIB", "userPassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aAAControlGroup = aAAControlGroup.setStatus('current')
if mibBuilder.loadTexts: aAAControlGroup.setDescription('The aAAControl object group.')
syslogControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 24)).setObjects(("CAMBIUM-PTP500-MIB", "syslogClient"), ("CAMBIUM-PTP500-MIB", "syslogState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogControlGroup = syslogControlGroup.setStatus('current')
if mibBuilder.loadTexts: syslogControlGroup.setDescription('The syslogControl object group.')
supplementaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 96)).setObjects(("CAMBIUM-PTP500-MIB", "longitude"), ("CAMBIUM-PTP500-MIB", "latitude"), ("CAMBIUM-PTP500-MIB", "altitude"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    supplementaryGroup = supplementaryGroup.setStatus('current')
if mibBuilder.loadTexts: supplementaryGroup.setDescription('The supplementary object group.')
notificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 17713, 5, 98, 99)).setObjects(("CAMBIUM-PTP500-MIB", "channelChangeTrap"), ("CAMBIUM-PTP500-MIB", "dfsImpulsiveInterferenceTrap"), ("CAMBIUM-PTP500-MIB", "dataPortStatusTrap"), ("CAMBIUM-PTP500-MIB", "telecomsChannelStatusTrap"), ("CAMBIUM-PTP500-MIB", "telecomsLoopbackTrap"), ("CAMBIUM-PTP500-MIB", "regionCodeTrap"), ("CAMBIUM-PTP500-MIB", "installStatusTrap"), ("CAMBIUM-PTP500-MIB", "installArmStateTrap"), ("CAMBIUM-PTP500-MIB", "unitOutOfCalibrationTrap"), ("CAMBIUM-PTP500-MIB", "incompatibleRegionCodesTrap"), ("CAMBIUM-PTP500-MIB", "noWirelessChannelAvailableTrap"), ("CAMBIUM-PTP500-MIB", "wirelessLinkDisabledWarningTrap"), ("CAMBIUM-PTP500-MIB", "dataPortDisabledWarningTrap"), ("CAMBIUM-PTP500-MIB", "dataPortConfigurationMismatchTrap"), ("CAMBIUM-PTP500-MIB", "incompatibleMasterAndSlaveTrap"), ("CAMBIUM-PTP500-MIB", "sNTPSyncTrap"), ("CAMBIUM-PTP500-MIB", "tDDSynchronizationAlarmTrap"), ("CAMBIUM-PTP500-MIB", "linkModeOptimizationMismatchTrap"), ("CAMBIUM-PTP500-MIB", "capacityLicenseMismatchTrap"), ("CAMBIUM-PTP500-MIB", "syslogStateTrap"), ("CAMBIUM-PTP500-MIB", "syslogLocalNearlyFullTrap"), ("CAMBIUM-PTP500-MIB", "syslogLocalWrappedTrap"), ("CAMBIUM-PTP500-MIB", "syslogClientTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    notificationsGroup = notificationsGroup.setStatus('current')
if mibBuilder.loadTexts: notificationsGroup.setDescription('The notifications group.')
dfsTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 5, 3, 2), )
if mibBuilder.loadTexts: dfsTable.setStatus('current')
if mibBuilder.loadTexts: dfsTable.setDescription(' A table storing a snapshot of various DFS measurements for each channel')
dfsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 5, 3, 2, 1), ).setIndexNames((0, "CAMBIUM-PTP500-MIB", "dfsTableIndex"))
if mibBuilder.loadTexts: dfsTableEntry.setStatus('current')
if mibBuilder.loadTexts: dfsTableEntry.setDescription('Table DfsTable')
vLANPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 5, 6, 15), )
if mibBuilder.loadTexts: vLANPriorityTable.setStatus('current')
if mibBuilder.loadTexts: vLANPriorityTable.setDescription(' A priority queue mapping table. This is a list of packet queues indexed by VLAN priority.')
vLANPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 5, 6, 15, 1), ).setIndexNames((0, "CAMBIUM-PTP500-MIB", "vLANPriorityTableIndex"))
if mibBuilder.loadTexts: vLANPriorityTableEntry.setStatus('current')
if mibBuilder.loadTexts: vLANPriorityTableEntry.setDescription('Table VLANPriorityTable')
sNMPTrapTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 5, 16, 4), )
if mibBuilder.loadTexts: sNMPTrapTable.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTable.setDescription(' SNMP trap configuration table.')
sNMPTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 5, 16, 4, 1), ).setIndexNames((0, "CAMBIUM-PTP500-MIB", "sNMPTrapTableIndex"))
if mibBuilder.loadTexts: sNMPTrapTableEntry.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTableEntry.setDescription('Table SNMPTrapTable')
userTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 5, 25, 2), )
if mibBuilder.loadTexts: userTable.setStatus('current')
if mibBuilder.loadTexts: userTable.setDescription(' The User Table Control group contains objects specifically for user account management.')
userTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 5, 25, 2, 1), ).setIndexNames((0, "CAMBIUM-PTP500-MIB", "userTableIndex"))
if mibBuilder.loadTexts: userTableEntry.setStatus('current')
if mibBuilder.loadTexts: userTableEntry.setDescription('Table UserTable')
dfsTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsTableNumber.setStatus('current')
if mibBuilder.loadTexts: dfsTableNumber.setDescription('Number of entries in the dfsTable')
dfsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)))
if mibBuilder.loadTexts: dfsTableIndex.setStatus('current')
if mibBuilder.loadTexts: dfsTableIndex.setDescription('used to index values in the dfsTable.')
dfsMeans = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsMeans.setStatus('current')
if mibBuilder.loadTexts: dfsMeans.setDescription('Snapshot of DFS means')
dfsNineNinePointNinePercentiles = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsNineNinePointNinePercentiles.setStatus('current')
if mibBuilder.loadTexts: dfsNineNinePointNinePercentiles.setDescription('Snapshot of DFS 99.9 percentiles')
dfsPeaks = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsPeaks.setStatus('current')
if mibBuilder.loadTexts: dfsPeaks.setDescription('Snapshot of DFS peaks')
iPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPAddress.setStatus('current')
if mibBuilder.loadTexts: iPAddress.setDescription('Internet protocol (IP) address. This address is used by \n             the family of Internet protocols to uniquely identify the \n             unit on a network. NB: A system reboot is required to \n             activate changes to this attribute.')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
if mibBuilder.loadTexts: subnetMask.setDescription('A subnet allows the flow of network traffic between \n             hosts to be segregated based on a network configuration. \n             By organizing hosts into logical groups, subnetting can \n             improve network security and performance. NB: A system \n             reboot is required to activate changes to this attribute')
gatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIPAddress.setStatus('current')
if mibBuilder.loadTexts: gatewayIPAddress.setDescription('The IP address of a computer on the current network that \n             is currently acting as a network gateway. A gateway acts \n             as an entrance / exit to packets from / to other \n             networks. NB: A system reboot is required to activate \n             changes to this attribute')
targetMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetMACAddress.setStatus('current')
if mibBuilder.loadTexts: targetMACAddress.setDescription('MAC address of the PTP wireless unit forming the other \n             end of the PTP link')
masterSlaveMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("master", 0), ("slave", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: masterSlaveMode.setStatus('current')
if mibBuilder.loadTexts: masterSlaveMode.setDescription('The PTP wireless link operates using a master and slave \n             relationship')
maximumTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumTransmitPower.setStatus('current')
if mibBuilder.loadTexts: maximumTransmitPower.setDescription('Maximum transmit power the wireless unit is permitted to \n             use when establishing and maintaining the wireless link')
antennaGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 610))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaGain.setStatus('current')
if mibBuilder.loadTexts: antennaGain.setDescription('Antenna Gain. Expressed in 10ths of dBi. NB: This \n             attribute is ignored for variants with an integral \n             antenna.')
cableLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableLoss.setStatus('current')
if mibBuilder.loadTexts: cableLoss.setDescription('Loss in the cable between the ODU and the antenna. \n             Expressed in 10ths of dB. NB: This attribute is ignored \n             for variants with an integral antenna.')
eIRP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eIRP.setStatus('current')
if mibBuilder.loadTexts: eIRP.setDescription('Effective Isotropic Radiated Power (EIRP) describes the \n             strength of the radio signal leaving the wireless unit. \n             Expressed in 10ths of dBm')
channelBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("bw30MHz", 0), ("bw15MHz", 1), ("bw10MHz", 2), ("bw5MHz", 3), ("bw20MHz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelBandwidth.setStatus('current')
if mibBuilder.loadTexts: channelBandwidth.setDescription('This control sets the bandwidth of the transmit and \n             receive radio channels')
remoteIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteIPAddress.setStatus('current')
if mibBuilder.loadTexts: remoteIPAddress.setDescription('IP Address of the peer wireless unit')
linkName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkName.setStatus('current')
if mibBuilder.loadTexts: linkName.setDescription('Name of the PTP link allocated by the System \n             Administrator. Used to establish a connection with the \n             correct PTP wireless unit at the other end of the link. \n             NOTE: The link name MUST be the same at both ends of the \n             PTP link.')
siteName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteName.setStatus('current')
if mibBuilder.loadTexts: siteName.setDescription('This field contains a user-provided description of the \n             site name together with any additional notes')
accessMethod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("linkAccess", 0), ("linkNameAccess", 1), ("groupAccess", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessMethod.setStatus('current')
if mibBuilder.loadTexts: accessMethod.setDescription('This controls whether the link can be established \n             between pre-paired Master-Slave using MAC addresses (Link \n             Access) or by using link name (Link Name Access)')
groupID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 5, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupID.setStatus('current')
if mibBuilder.loadTexts: groupID.setDescription('When Access Method is set to Group Access, the Group ID \n             identifies all the units belonging to the same group. \n             Group Access is only supported on some platforms')
dataPortAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: dataPortAutoNegotiation.setDescription('This controls whether the local Ethernet interface \n             configuration is automatically negotiated or forced. Do \n             not use a forced setting together with auto negotiation \n             at the Ethernet link partner. If you want to run your \n             Ethernet link at a fixed speed and duplex then you would \n             normally leave auto negotiation enabled and only enable \n             the single Auto Neg Advertisement option that you want \n             the link to run in - FORCING ETHERNET CONFIGURATION IS A \n             LAST RESORT WHICH SHOULD ONLY BE PERFORMED IF YOU ARE \n             HAVING PROBLEMS WITH AUTO NEGOTIATION - AND YOU MUST \n             ENSURE THAT YOU CONFIGURE BOTH THIS UNIT AND THE ETHERNET \n             LINK PARTNER TO WHICH IT IS CONNECTED IDENTICALLY (THE \n             LINK PARTNER MUST NOT HAVE AUTO NEGOTIATION ENABLED \n             EITHER, OTHERWISE A DUPLEX MISMATCH WILL OCCUR). NB: The \n             new setting will only take effect after a system reboot.')
dataPortAutoNegAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 2), Bits().clone(namedValues=NamedValues(("negInvalid", 2), ("neg10MbpsHalfDuplex", 3), ("neg10MbpsFullDuplex", 4), ("neg100MbpsHalfDuplex", 5), ("neg100MbpsFullDuplex", 6), ("negUnknown1", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortAutoNegAdvertisement.setStatus('current')
if mibBuilder.loadTexts: dataPortAutoNegAdvertisement.setDescription('This sets the different Ethernet configurations that \n             will be advertised during auto negotiation. NB: The new \n             setting will only take effect after a system reboot. \n             WARNING: Duplex mismatch may result if both ends of the \n             Ethernet link do not have the same settings. Do not auto \n             negotiation together with a fixed setting at the Ethernet \n             link partner. WARNING: Make sure that you select \n             option(s) that you know your connected equipment can \n             cater for!')
dataPortAutoMdix = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortAutoMdix.setStatus('current')
if mibBuilder.loadTexts: dataPortAutoMdix.setDescription('This enables/disables the Auto MDI/MDIX capability. NB: \n             The new setting will only take effect after a system \n             reboot')
dataPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("copperLinkUp", 1), ("fiberLinkUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortStatus.setStatus('current')
if mibBuilder.loadTexts: dataPortStatus.setDescription('Current status of the Ethernet link. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
dataPortSpeedAndDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("speed1000MbpsFullDuplex", 0), ("speed100MbpsFullDuplex", 1), ("speed100MbpsHalfDuplex", 2), ("speed10MbpsFullDuplex", 3), ("speed10MbpsHalfDuplex", 4), ("speedUnknown6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortSpeedAndDuplex.setStatus('current')
if mibBuilder.loadTexts: dataPortSpeedAndDuplex.setDescription('The current speed and duplex of the Ethernet link')
dataPortWirelessDownAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortWirelessDownAlert.setStatus('current')
if mibBuilder.loadTexts: dataPortWirelessDownAlert.setDescription('When enabled, this causes the Ethernet link to be \n             dropped briefly when the wireless link drops. This is so \n             that spanning tree algorithms can quickly detect that \n             there is a problem.')
useVLANForManagementInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noVLANTagging", 0), ("iEEE8021QTaggedCTagType8100", 1), ("iEEE8021adTaggedSTagorBTagType88a8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useVLANForManagementInterfaces.setStatus('current')
if mibBuilder.loadTexts: useVLANForManagementInterfaces.setDescription('This controls whether the management interfaces \n             (WWW/SNMP/SMTP/SNTP) use VLAN tags or not. NB: The new \n             setting will only take effect after a system reboot')
vLANManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementPriority.setStatus('current')
if mibBuilder.loadTexts: vLANManagementPriority.setDescription('This VLAN Priority (0-7) will be included in packets \n             generated by the management interfaces. NB: The new \n             setting will only take effect after a system reboot')
vLANManagementVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementVID.setStatus('current')
if mibBuilder.loadTexts: vLANManagementVID.setDescription('This VLAN VID (0-4094) will be included in packets \n             generated by the management interfaces. NB: The new \n             setting will only take effect after a system reboot')
vLANPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLANPriorityTableNumber.setStatus('current')
if mibBuilder.loadTexts: vLANPriorityTableNumber.setDescription('Number of entries in the vLANPriorityTable.')
vLANPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 6, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANPriorityQueueMapping.setStatus('current')
if mibBuilder.loadTexts: vLANPriorityQueueMapping.setDescription('Mapping of VLAN priority flag to packet queue. The \n             higher the queue number the greater its priority.')
vLANPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 6, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("p0", 1), ("p1", 2), ("p2", 3), ("p3", 4), ("p4", 5), ("p5", 6), ("p6", 7), ("p7", 8), ("untagged", 9))))
if mibBuilder.loadTexts: vLANPriorityTableIndex.setStatus('current')
if mibBuilder.loadTexts: vLANPriorityTableIndex.setDescription('VLAN priority flag, used to index values in the \n             vLANPriorityTable.')
telecomsInterface = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("e1", 1), ("t1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telecomsInterface.setStatus('current')
if mibBuilder.loadTexts: telecomsInterface.setDescription("The line interface type. If this is set to 'None' then \n             the telecoms interfaces are disabled, and the telecom \n             group attributes will be ignored.")
telecomsChannelStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 0), ("noSignalLocal", 1), ("noSignalRemote", 2), ("noSignalLocalandRemote", 3), ("up", 4), ("remoteTiming", 5), ("noSignalLocalandRemoteTiming", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telecomsChannelStatus.setStatus('current')
if mibBuilder.loadTexts: telecomsChannelStatus.setDescription('Current status of telecoms channel. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
telecomsLineCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("aMI", 0), ("b8ZSHDB3", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telecomsLineCode.setStatus('current')
if mibBuilder.loadTexts: telecomsLineCode.setDescription('The line code setting of the telecoms interface. This \n             must match the setting of the device connected to this \n             interface')
telecomsCableLength = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("feet133", 0), ("feet266", 1), ("feet399", 2), ("feet533", 3), ("feet655", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telecomsCableLength.setStatus('current')
if mibBuilder.loadTexts: telecomsCableLength.setDescription('The length of the cable connected to the telecoms \n             interface, measured in feet')
telecomsLoopback = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("copper", 1), ("wireless", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telecomsLoopback.setStatus('current')
if mibBuilder.loadTexts: telecomsLoopback.setDescription("The loopback status of telecoms channel. This is \n             intended for installation testing and should be set to \n             'None' for normal operation. The wire connections to a \n             unit can be tested by applying a 'Copper' loopback to the \n             local unit. The wireless connection to the remote unit \n             can be tested by applying a 'Wireless' loopback to the \n             remote unit with no loopback on the local unit. When \n             applying a wireless loopback, please ensure that the \n             other end of the link has a loopback setting of 'None'. \n             NB: a change of state may generate an SNMP trap and/or \n             SMTP email alert")
regionCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("regionCodeInvalid", 0), ("regionCode1", 1), ("regionCode2", 2), ("regionCode3", 3), ("regionCode4", 4), ("regionCode5", 5), ("regionCode6", 6), ("regionCode7", 7), ("regionCode8", 8), ("regionCode9", 9), ("regionCode10", 10), ("regionCode11", 11), ("regionCode12", 12), ("regionCode13", 13), ("regionCode14", 14), ("regionCode15", 15), ("regionCode16", 16), ("regionCode17", 17), ("regionCode18", 18), ("regionCode19", 19), ("regionCode20", 20), ("regionCode21", 21), ("regionCode22", 22), ("regionCode23", 23), ("regionCode24", 24), ("regionCode25", 25), ("regionCode26", 26), ("regionCode27", 27), ("regionCode28", 28), ("regionCode29", 29), ("regionCode30", 30), ("regionCode31", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: regionCode.setStatus('current')
if mibBuilder.loadTexts: regionCode.setDescription('The region code prohibits the wireless unit from \n             operating outside the regulated limits. An invalid region \n             code indicates a corrupted licence key. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
productVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("pTPxx400Full", 0), ("pTPxx400Deprecated1", 1), ("pTPxx400Deprecated2", 2), ("pTPxx400Lite", 3), ("spare1", 4), ("pTPxx300", 5), ("spare2", 6), ("spare3", 7), ("pTPxx500FullDeprecated", 8), ("pTPxx500LiteDeprecated", 9), ("pTPxx500", 10), ("pTPxx600Lite", 11), ("pTPxx600Full", 12), ("spare5", 13), ("spare6", 14), ("pTP800", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVariant.setStatus('current')
if mibBuilder.loadTexts: productVariant.setDescription('The product variant')
productName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('current')
if mibBuilder.loadTexts: productName.setDescription('Name of the product variant')
ethernetFiberSupport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetFiberSupport.setStatus('current')
if mibBuilder.loadTexts: ethernetFiberSupport.setDescription('Ethernet fiber support availability on this wireless \n             unit')
frequencyVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("freq5800MHz", 0), ("freq5400MHz", 1), ("freq4900MHz", 2), ("freq2500MHz", 3), ("freq5800MHz2", 4), ("freq5400MHz2", 5), ("freq4500MHz", 6), ("freq5900MHz", 7), ("freq5200MHz", 8), ("freq5100MHz", 9), ("freq4800MHz", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyVariant.setStatus('current')
if mibBuilder.loadTexts: frequencyVariant.setDescription('Frequency variant of the wireless unit')
bandwidthVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("bw30MHz", 0), ("bw15MHz", 1), ("bw10MHz", 2), ("bw5MHz", 3), ("bw20MHz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthVariant.setStatus('current')
if mibBuilder.loadTexts: bandwidthVariant.setDescription('Bandwidth variant of the wireless unit')
constantPowerSpectralDensity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("constant", 0), ("fullPower", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: constantPowerSpectralDensity.setStatus('current')
if mibBuilder.loadTexts: constantPowerSpectralDensity.setDescription('Constant power spectral density mode control')
sNMPv3Enable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPv3Enable.setStatus('current')
if mibBuilder.loadTexts: sNMPv3Enable.setDescription('SNMPv3 availability control')
licensedCapacity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("capacity25Mbps", 0), ("capacity52Mbps", 1), ("capacity105Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensedCapacity.setStatus('current')
if mibBuilder.loadTexts: licensedCapacity.setDescription('Maximum allowable data rate for ethernet frames \n             permitted by the licence key. The actual data rate \n             depends upon the prevailing wireless conditions')
installStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("wrongPeer", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: installStatus.setStatus('current')
if mibBuilder.loadTexts: installStatus.setDescription('A non-zero value indicates that signalling was received \n             with the wrong MAC address or a mismatched link name. NB: \n             It is very unusual to detect this, because units with \n             mis-configured Target MAC Address will normally fail to \n             establish a wireless link. However, rare circumstances \n             may establish a partial wireless link and detect this \n             situation. NB: A non-zero value on start-up, or a change \n             of value during operation, may generate an SNMP trap \n             and/or SMTP email alert')
installArmState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disarmed", 0), ("armed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: installArmState.setStatus('current')
if mibBuilder.loadTexts: installArmState.setDescription("Indicates if the unit is being installed. NB: a value \n             other than 'disarmed' on startup, or a change of state \n             during operation may generate an SNMP trap and/or SMTP \n             email alert")
tFTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: tFTPServerIPAddress.setDescription('IP address of the TFTP Server from which the TFTP \n             Software Upgrade File Name will be retrieved')
tFTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: tFTPServerPortNumber.setDescription('The port number of the TFTP Server from which the TFTP \n             Software Upgrade File Name will be retrieved')
tFTPSoftwareUpgradeFileName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeFileName.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeFileName.setDescription('Filename of the Software Upgrade to be loaded from the \n             TFTP Server')
tFTPStartSoftwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPStartSoftwareUpgrade.setStatus('current')
if mibBuilder.loadTexts: tFTPStartSoftwareUpgrade.setDescription("Write '1' to this attribute to start the TFTP software \n             upgrade process. The attribute will be reset to 0 when \n             the upgrade process has finished")
tFTPSoftwareUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("uploadinprogress", 1), ("uploadsuccessfulprogrammingFLASH", 2), ("upgradesuccessfulreboottorunthenewsoftwareimage", 3), ("upgradefailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatus.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatus.setDescription('The current status of the TFTP Software upgrade process')
tFTPSoftwareUpgradeStatusText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusText.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusText.setDescription('Descriptive text describing the status of the TFTP \n             Software upgrade process, including any error details')
tFTPSoftwareUpgradeStatusAdditionalText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusAdditionalText.setStatus('current')
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusAdditionalText.setDescription('Any additional text describing the status of the TFTP \n             Software upgrade process, including any error details')
hTTPAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPAccessEnabled.setStatus('current')
if mibBuilder.loadTexts: hTTPAccessEnabled.setDescription('This controls whether or not HTTP access is enabled, \n             i.e. if this is disabled (0) then the unit will not \n             respond to any requests on the HTTP port. Remote \n             management via HTTPS is not affected by this setting. Any \n             change in this setting will not take effect until the \n             unit has been rebooted. (Factory default = Enabled)')
telnetAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetAccessEnabled.setStatus('current')
if mibBuilder.loadTexts: telnetAccessEnabled.setDescription('This controls whether or not Telnet access is enabled, \n             i.e. if this is disabled (0) then the unit will not \n             respond to any requests on the TELNET port. Any change in \n             this setting will not take effect until the unit has been \n             rebooted. (Factory default = Disabled)')
hTTPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPPortNumber.setStatus('current')
if mibBuilder.loadTexts: hTTPPortNumber.setDescription('This controls the port number for HTTP access. A value \n             of zero will use the default port number. Any change in \n             this setting will not take effect until the unit has been \n             rebooted. (Factory default = 80)')
hTTPSPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPSPortNumber.setStatus('current')
if mibBuilder.loadTexts: hTTPSPortNumber.setDescription('This controls the port number for HTTPS access. A value \n             of zero will use the default port number. Availability of \n             HTTPS is controlled via the Licence Key. Any change in \n             this setting will not take effect until the unit has been \n             rebooted. (Factory default = 443)')
telnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortNumber.setStatus('current')
if mibBuilder.loadTexts: telnetPortNumber.setDescription('This controls the port number for TELNET access. A value \n             of zero will use the default port number. Any change in \n             this setting will not take effect until the unit has been \n             rebooted. (Factory default = 23)')
hTTPSAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPSAccessEnabled.setStatus('current')
if mibBuilder.loadTexts: hTTPSAccessEnabled.setDescription('This controls whether or not HTTPS access is enabled, \n             i.e. if this is disabled (0) then the unit will not \n             respond to any requests on the HTTPS port. Remote \n             management via HTTP is not affected by this setting. Any \n             change in this setting will not take effect until the \n             unit has been rebooted. (Factory default = Enabled)')
linkSymmetry = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("symmetryAdaptive", 0), ("symmetry3to1", 1), ("symmetry1to1", 2), ("symmetry1to3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSymmetry.setStatus('current')
if mibBuilder.loadTexts: linkSymmetry.setDescription('In fixed asymmetric mode (3 to 1) the transmit time is \n             three times as long as the receive time. In fixed \n             symmetric mode (1 to 1) the unit spends an equal amount \n             of time transmitting and receiving. In fixed asymmetric \n             mode (1 to 3) the receive time is three times as long as \n             the transmit time. In adaptive mode the transmit and \n             receive periods adjust with applied load. NB: only \n             applicable for master nodes.')
linkModeOptimisation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("iPTraffic", 0), ("tDMTraffic", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkModeOptimisation.setStatus('current')
if mibBuilder.loadTexts: linkModeOptimisation.setDescription("Optimises the wireless link behavior for the type of \n             traffic to be carried. In 'IP Traffic' mode, the wireless \n             link will minimise transmission errors by automatically \n             adapting the modulation mode. In 'TDM Traffic' mode, the \n             wireless link will minimise transmission latency and \n             preserve throughput by maintaining a higher modulation \n             mode in the presence of a limited number of errors. The \n             'TDM Traffic' mode is recommended for E1/T1 applications \n             and connectionless protocols.")
userConfiguredMaxModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modBpsk50percent", 0), ("modQpsk50percent", 1), ("modQpsk75percent", 2), ("mod16qam50percent", 3), ("mod16qam75percent", 4), ("mod64qam67percent", 5), ("mod64qam83percent", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userConfiguredMaxModulationMode.setStatus('current')
if mibBuilder.loadTexts: userConfiguredMaxModulationMode.setDescription('The maximum receive modulation mode controls the MAX \n             mode used for adaptive modulation. NOTE: This attribute \n             is automatically disabled when the installation agent is \n             armed. To disarm the installation agent use the \n             installation wizard')
remoteMaximumTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteMaximumTransmitPower.setStatus('current')
if mibBuilder.loadTexts: remoteMaximumTransmitPower.setDescription('Maximum transmit power the remote wireless unit is \n             permitted to use when establishing and maintaining the \n             wireless link')
receivePower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receivePower.setStatus('current')
if mibBuilder.loadTexts: receivePower.setDescription('Receive power expressed in tenths of a dBm')
vectorError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vectorError.setStatus('current')
if mibBuilder.loadTexts: vectorError.setDescription("The vector error measurement compares the received \n             signal's IQ modulation characteristics to an ideal signal \n             to determine the composite error vector magnitude. The \n             value represented by this attribute is the average vector \n             error over the previous second expressed in tenths of a \n             dB")
transmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitPower.setStatus('current')
if mibBuilder.loadTexts: transmitPower.setDescription('Transmit power expressed in tenths of a dBm')
range = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range.setStatus('current')
if mibBuilder.loadTexts: range.setDescription('Distance between the two peer wireless units expressed \n             in tenths of a kilometer')
linkLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLoss.setStatus('current')
if mibBuilder.loadTexts: linkLoss.setDescription('The wireless link loss expressed in tenths of a dB')
receiveChannel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveChannel.setStatus('current')
if mibBuilder.loadTexts: receiveChannel.setDescription('Current active receive channel')
transmitChannel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitChannel.setStatus('current')
if mibBuilder.loadTexts: transmitChannel.setDescription('Current active transmit channel')
receiveModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("modAcquisition", 0), ("modBpsk50percent", 1), ("modQpsk50percentSingle", 2), ("modQpsk75percentSingle", 3), ("mod16qam50percentSingle", 4), ("mod16qam75percentSingle", 5), ("mod64qam67percentSingle", 6), ("mod64qam83percentSingle", 7), ("modReserved1", 8), ("modQpsk50percentDual", 9), ("modQpsk75percentDual", 10), ("mod16qam50percentDual", 11), ("mod16qam75percentDual", 12), ("mod64qam67percentDual", 13), ("mod64qam83percentDual", 14), ("modReserved2", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveModulationMode.setStatus('current')
if mibBuilder.loadTexts: receiveModulationMode.setDescription('Current active receive modulation mode')
transmitModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("modAcquisition", 0), ("modBpsk50percent", 1), ("modQpsk50percentSingle", 2), ("modQpsk75percentSingle", 3), ("mod16qam50percentSingle", 4), ("mod16qam75percentSingle", 5), ("mod64qam67percentSingle", 6), ("mod64qam83percentSingle", 7), ("modReserved1", 8), ("modQpsk50percentDual", 9), ("modQpsk75percentDual", 10), ("mod16qam50percentDual", 11), ("mod16qam75percentDual", 12), ("mod64qam67percentDual", 13), ("mod64qam83percentDual", 14), ("modReserved2", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitModulationMode.setStatus('current')
if mibBuilder.loadTexts: transmitModulationMode.setDescription('Current active transmit modulation mode')
receiveFreqMHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5925))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveFreqMHz.setStatus('current')
if mibBuilder.loadTexts: receiveFreqMHz.setDescription('Current receive frequency expressed in integer MHz')
transmitFreqMHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5925))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitFreqMHz.setStatus('current')
if mibBuilder.loadTexts: transmitFreqMHz.setDescription('Current transmit frequency expressed in integer MHz')
signalStrengthRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalStrengthRatio.setStatus('current')
if mibBuilder.loadTexts: signalStrengthRatio.setDescription('Signal strength ratio (Vertical / Horizontal) : the \n             number of dB larger the Vertical antenna input is than \n             the Horizontal antenna input expressed in tenths of a dB')
receiveFreqKHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5925000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveFreqKHz.setStatus('current')
if mibBuilder.loadTexts: receiveFreqKHz.setDescription('Current receive frequency expressed as KHz')
transmitFreqKHz = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5925000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitFreqKHz.setStatus('current')
if mibBuilder.loadTexts: transmitFreqKHz.setDescription('Current transmit frequency expressed as KHz')
searchState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 12, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("registering", 0), ("searching", 1), ("acquiring", 2), ("registeringAcquiring2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: searchState.setStatus('current')
if mibBuilder.loadTexts: searchState.setDescription("Search status of the wireless modem. 'Registering' means \n             that the modem has locked to an OFDM signal, and the \n             wireless link is up. 'Searching' means that no wireless \n             signal has been detected. 'Acquiring' means that a \n             wireless signal has been detected, but the modem has not \n             locked to an OFDM signal.")
unitOutOfCalibration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("calibrated", 0), ("partialCalibration", 1), ("invalidCalibration", 2), ("bandwidthvariantunsupportedPAsShutdown", 3), ("outOfCalibrationPAsShutdown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitOutOfCalibration.setStatus('current')
if mibBuilder.loadTexts: unitOutOfCalibration.setDescription('The unit is out of calibration')
incompatibleRegionCodes = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("incompatibleLicenceKeys", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: incompatibleRegionCodes.setStatus('current')
if mibBuilder.loadTexts: incompatibleRegionCodes.setDescription('The master and slave units have incompatible region \n             codes. NB: Both units must have compatible licence keys')
noWirelessChannelAvailable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("noWirelessChannelAvailable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: noWirelessChannelAvailable.setStatus('current')
if mibBuilder.loadTexts: noWirelessChannelAvailable.setDescription('Spectrum Management was unable to locate a suitable \n             wireless channel to operate on')
wirelessLinkDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkDisabledWarning.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkDisabledWarning.setDescription('The SNMP ifAdminStatus of the wireless interface has \n             disabled wireless traffic')
dataPortDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortDisabledWarning.setStatus('current')
if mibBuilder.loadTexts: dataPortDisabledWarning.setDescription('The SNMP ifAdminStatus of the Ethernet interface has \n             disabled Ethernet traffic')
dataPortConfigurationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noError", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortConfigurationMismatch.setStatus('current')
if mibBuilder.loadTexts: dataPortConfigurationMismatch.setDescription('The detection of Ethernet fragments (runt packets) when \n             the link is in full duplex is an indication of an \n             auto-negotiation or forced configuration mismatch')
incompatibleMasterAndSlave = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("incompatibleProductVariants", 1), ("differentSoftwareVersionsRunning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: incompatibleMasterAndSlave.setStatus('current')
if mibBuilder.loadTexts: incompatibleMasterAndSlave.setDescription('A non-zero value indicates that the master and slave \n             ends of a link are different hardware products, or have \n             different software versions. NB: It is very unusual to \n             detect this, because incompatible units will normally \n             fail to establish a wireless link. However, some \n             combinations may establish a partial wireless link and \n             detect this situation. NB: A non-zero value may generate \n             an SNMP trap and/or SMTP email alert')
tDDSynchronizationStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("locked", 0), ("holdover", 1), ("holdoverNotConnected", 2), ("acquiringLock", 3), ("noTimingReference", 4), ("timingSystemNotConnected", 5), ("initialising", 6), ("clusterTimingMaster", 7), ("tDDSyncNotActive", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDDSynchronizationStatus.setStatus('current')
if mibBuilder.loadTexts: tDDSynchronizationStatus.setDescription('An alarm value (displayed in red) indicates that one of \n             the following conditions has not been met (i) An external \n             timing system is connected or internal timing has been \n             configured. (ii) The timing system is providing a useable \n             reference. (iii) The ODU is locked to this reference.')
tDDSynchronizationAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("notSynchronized", 1), ("timingSystemFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDDSynchronizationAlarm.setStatus('current')
if mibBuilder.loadTexts: tDDSynchronizationAlarm.setDescription('Not Synchronized indicates failure of the external \n             timing system for a period greater than the holdover \n             timer. TDD frame timing will have drifted, and this link \n             may cause interference with other links in a synchronized \n             network. Timing System Failure is an early warning, \n             indicating that 80% of the holdover period has expired.')
linkModeOptimizationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("linkModeOptimizationMismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkModeOptimizationMismatch.setStatus('current')
if mibBuilder.loadTexts: linkModeOptimizationMismatch.setDescription('The remote node of this link has been configured with a \n             different link mode optimization')
capacityLicenseMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 13, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: capacityLicenseMismatch.setStatus('current')
if mibBuilder.loadTexts: capacityLicenseMismatch.setDescription('The local and remote units have different licensed \n             capacity and/or the full capacity trial has been \n             activated at only one unit. The wireless link is \n             operating at the capacity of the lowest capacity unit')
sMTPEmailAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPEmailAlert.setStatus('current')
if mibBuilder.loadTexts: sMTPEmailAlert.setDescription('Simple Mail Transfer Protocol is used to send equipment \n             alerts via email to a specified email address. This \n             utility can only be configured by the system \n             administrator')
sMTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 15, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: sMTPServerIPAddress.setDescription('IP address of the SMTP server')
sMTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: sMTPServerPortNumber.setDescription('Port number of the SMTP server')
sMTPSourceEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 15, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPSourceEmailAddress.setStatus('current')
if mibBuilder.loadTexts: sMTPSourceEmailAddress.setDescription("The 'from' email address used when constructing the \n             automatically generated e-mail message")
sMTPDestinationEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 15, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPDestinationEmailAddress.setStatus('current')
if mibBuilder.loadTexts: sMTPDestinationEmailAddress.setDescription("The 'to' email address used when constructing the \n             automatically generated e-mail message")
sMTPEnabledMessages = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 15, 6), Bits().clone(namedValues=NamedValues(("telecomsChannelUpDown", 1), ("unknown6", 2), ("dataPortUpDown", 3), ("enabledDiagnosticAlarms", 4), ("dFSImpulseInterference", 5), ("channelChange", 6), ("wirelessLinkUpDown", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPEnabledMessages.setStatus('current')
if mibBuilder.loadTexts: sMTPEnabledMessages.setDescription('This controls which SMTP messages the unit will send')
sNMPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPPortNumber.setStatus('current')
if mibBuilder.loadTexts: sNMPPortNumber.setDescription('The IP port number used to access the SNMP MIB (i.e. \n             Gets and Sets) (default = 161). NB: A system reboot is \n             required to activate changes to this attribute')
sNMPCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPCommunityString.setStatus('current')
if mibBuilder.loadTexts: sNMPCommunityString.setDescription('The SNMP community string. NB: A system reboot is \n             required to activate changes to this attribute')
sNMPTrapTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 16, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapTableNumber.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTableNumber.setDescription('Number of entries in the sNMPTrapTable.')
sNMPTrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 16, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("v1", 0), ("v2c", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapVersion.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapVersion.setDescription('The SNMP protocol version to use for SNMP Traps. NB: A \n             system reboot is required to activate changes to this \n             attribute')
sNMPEnabledTraps = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 16, 6), Bits().clone(namedValues=NamedValues(("unknown8", 0), ("dataPortUpDown", 1), ("authenticationFailure", 2), ("enabledDiagnosticAlarms", 3), ("dFSImpulseInterference", 4), ("channelChange", 5), ("wirelessLinkUpDown", 6), ("coldStart", 7), ("telecomsChannelUpDown", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPEnabledTraps.setStatus('current')
if mibBuilder.loadTexts: sNMPEnabledTraps.setDescription('This controls which SNMP Traps the unit will send')
enabledDiagnosticAlarms = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 16, 7), Bits().clone(namedValues=NamedValues(("incompatibleMasterAndSlave", 0), ("incompatibleRegionCodes", 1), ("unknown6", 2), ("unknown5", 3), ("unitOutOfCalibration", 4), ("installArmState", 5), ("installStatus", 6), ("regionCode", 7), ("telecomsChannelStatus", 8), ("unknown15", 9), ("dataPortStatus", 10), ("dataPortDisabledWarning", 11), ("wirelessLinkDisabledWarning", 12), ("sNTPSynchronizationFailed", 13), ("noWirelessChannelAvailable", 14), ("dataPortConfigurationMismatch", 15), ("syslogClientDisabledWarning", 16), ("licensedCapacityMismatch", 17), ("syslogLocalWrapped", 18), ("syslogLocalNearlyFull", 19), ("syslogLocalEnableDisable", 20), ("linkModeOptimizationMismatch", 21), ("tDDSynchronizationAlarm", 22), ("telecomsChannelLoopback", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enabledDiagnosticAlarms.setStatus('current')
if mibBuilder.loadTexts: enabledDiagnosticAlarms.setDescription("Controls which individual diagnostic alarms are enabled. \n             The unit may be configured to generate SNMP traps and/or \n             SMTP email alerts for these enabled alarms by selecting \n             'Enabled Diagnostic Alarms' on the 'SNMP Enabled Traps' \n             and/or 'SMTP Enabled Messages' attributes")
sNMPSendAllTrapsAtStartup = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 16, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPSendAllTrapsAtStartup.setStatus('current')
if mibBuilder.loadTexts: sNMPSendAllTrapsAtStartup.setDescription('Controls whether cleared traps are reported at start-up \n             as well as raised traps. Only enabled traps will be \n             reported. NB: Traps corresponding to transient events \n             (i.e. not associated with an alarm or status value) are \n             only sent when required and not at start-up.')
sNMPTrapTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sNMPTrapTableIndex.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapTableIndex.setDescription('SNMP trap value, used to index the SNMPTrapTable.')
sNMPTrapIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 16, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapIPAddress.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapIPAddress.setDescription('The IP address to which all SNMP Traps are sent. An IP \n             Address of 0.0.0.0 disables all TRAP generation. NB: A \n             system reboot is required to activate changes to this \n             attribute.')
sNMPTrapPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapPortNumber.setStatus('current')
if mibBuilder.loadTexts: sNMPTrapPortNumber.setDescription('Destination port for SNMP Traps (default=162). A value \n             of 0 will disable the trap receiver. NB: A system reboot \n             is required to activate changes to this attribute.')
sNTPState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPState.setStatus('current')
if mibBuilder.loadTexts: sNTPState.setDescription('SNTP control state')
sNTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: sNTPServerIPAddress.setDescription('The IP address of a valid SNTP server')
sNTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: sNTPServerPortNumber.setDescription('The IP port number of the SNTP server. Defaults to port \n             123.')
sNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 43200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPollInterval.setStatus('current')
if mibBuilder.loadTexts: sNTPPollInterval.setDescription('The SNTP server polling interval')
sNTPSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noSync", 0), ("inSync", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPSync.setStatus('current')
if mibBuilder.loadTexts: sNTPSync.setDescription('If SNTP Sync fails then check the server settings in the \n             Remote Management page, or disable SNTP. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
sNTPLastSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPLastSync.setStatus('current')
if mibBuilder.loadTexts: sNTPLastSync.setDescription('Last SNTP sync time')
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemClock.setStatus('current')
if mibBuilder.loadTexts: systemClock.setDescription('System clock presented as local time')
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50))).clone(namedValues=NamedValues(("gmtMinus1200", 0), ("gmtMinus1130", 1), ("gmtMinus1100", 2), ("gmtMinus1030", 3), ("gmtMinus1000", 4), ("gmtMinus0930", 5), ("gmtMinus0900", 6), ("gmtMinus0830", 7), ("gmtMinus0800", 8), ("gmtMinus0730", 9), ("gmtMinus0700", 10), ("gmtMinus0630", 11), ("gmtMinus0600", 12), ("gmtMinus0530", 13), ("gmtMinus0500", 14), ("gmtMinus0430", 15), ("gmtMinus0400", 16), ("gmtMinus0330", 17), ("gmtMinus0300", 18), ("gmtMinus0230", 19), ("gmtMinus0200", 20), ("gmtMinus0130", 21), ("gmtMinus0100", 22), ("gmtMinus0030", 23), ("gmtZero", 24), ("gmtPlus0030", 25), ("gmtPlus0100", 26), ("gmtPlus0130", 27), ("gmtPlus0200", 28), ("gmtPlus0230", 29), ("gmtPlus0300", 30), ("gmtPlus0330", 31), ("gmtPlus0400", 32), ("gmtPlus0430", 33), ("gmtPlus0500", 34), ("gmtPlus0530", 35), ("gmtPlus0600", 36), ("gmtPlus0630", 37), ("gmtPlus0700", 38), ("gmtPlus0730", 39), ("gmtPlus0800", 40), ("gmtPlus0830", 41), ("gmtPlus0900", 42), ("gmtPlus0930", 43), ("gmtPlus1000", 44), ("gmtPlus1030", 45), ("gmtPlus1100", 46), ("gmtPlus1130", 47), ("gmtPlus1200", 48), ("gmtPlus1230", 49), ("gmtPlus1300", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('current')
if mibBuilder.loadTexts: timeZone.setDescription('Time zone offsets from Greenwich Mean Time (GMT)')
daylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightSaving.setStatus('current')
if mibBuilder.loadTexts: daylightSaving.setDescription('Daylight Saving Time')
systemReset = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("running", 0), ("consoleReboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReset.setStatus('current')
if mibBuilder.loadTexts: systemReset.setDescription("Setting this attribute to '1' will cause a system \n             reboot. NB: a system reboot will apply any pending new \n             settings held in memory")
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 19, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
if mibBuilder.loadTexts: softwareVersion.setDescription('Current software version')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 19, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hardwareVersion.setDescription('Hardware platform version')
secondarySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 19, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondarySoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: secondarySoftwareVersion.setDescription('Secondary software version, used when the primary \n             software image is invalid or erased')
bootVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 19, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersion.setStatus('current')
if mibBuilder.loadTexts: bootVersion.setDescription('Boot code software version')
receiveDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveDataRate.setStatus('current')
if mibBuilder.loadTexts: receiveDataRate.setDescription('Average data rate over the last one second interval \n             (kbps)')
transmitDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitDataRate.setStatus('current')
if mibBuilder.loadTexts: transmitDataRate.setDescription('Average data rate over the last one second interval \n             (kbps)')
aggregateDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregateDataRate.setStatus('current')
if mibBuilder.loadTexts: aggregateDataRate.setDescription('Average data rate over the last one second interval \n             (kbps)')
wirelessLinkAvailability = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkAvailability.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkAvailability.setDescription('Link availability calculated since the last reset of the \n             system counters, as a percentage multiplied by 10000 to \n             give four decimal places of precision')
wirelessLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 0), ("registering", 1), ("acquiring", 2), ("searching", 3), ("radarCAC", 4), ("initialising", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatus.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatus.setDescription('Current status of the wireless link')
byteErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 20, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: byteErrorRatio.setStatus('current')
if mibBuilder.loadTexts: byteErrorRatio.setDescription('Reciprocal of the byte error ratio calculated since the \n             last reset of the system counters')
receiveModulationModeDetail = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 20, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("runningAtMaximumReceiveMode", 0), ("runningAtUserConfiguredMaxModulationMode", 1), ("restrictedBecauseInstallationIsArmed", 2), ("restrictedBecauseOfByteErrorsOnTheWirelessLink", 3), ("restrictedBecauseTheLinkParametersAreUpdating", 4), ("restrictedBecauseChannelChangeIsInProgress", 5), ("restrictedDueToTheLowEthernetLinkSpeed", 6), ("runningAtMaximumReceiveModeForChannelBandwidth", 7), ("limitedByTheWirelessConditions", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveModulationModeDetail.setStatus('current')
if mibBuilder.loadTexts: receiveModulationModeDetail.setDescription('The reason for the current receive modulation mode')
encryptionAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("aESRijndael", 1), ("aES256bitRijndael", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: encryptionAlgorithm.setDescription('The Encryption Algorithm used by the wireless link. NB: \n             A system reboot is required to activate changes to this \n             attribute. NB: The same Encryption Algorithm must be \n             configured at BOTH ends of the link for it to function \n             correctly')
tDDSynchronizationMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDDSynchronizationMode.setStatus('current')
if mibBuilder.loadTexts: tDDSynchronizationMode.setDescription('TDD Synchronization Mode selection')
userTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 25, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userTableNumber.setStatus('current')
if mibBuilder.loadTexts: userTableNumber.setDescription('Number of entries in the userTable')
userTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 25, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: userTableIndex.setStatus('current')
if mibBuilder.loadTexts: userTableIndex.setDescription('used to index values in the userTable.')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 25, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('User name which must be entered, along with the \n             appropriate password, in order to gain access to the \n             system.')
userRole = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("readOnly", 0), ("systemAdministrator", 1), ("securityOfficer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userRole.setStatus('current')
if mibBuilder.loadTexts: userRole.setDescription('Role of the selected user. A Security Officer has access \n             to and can modify all settings. A System Administrator \n             has access to and can modify all non-security settings. A \n             Read Only user can view settings, but cannot make any \n             changes.')
userEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 25, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userEnabled.setStatus('current')
if mibBuilder.loadTexts: userEnabled.setDescription('Enable / Disable the selected user')
userPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 5, 25, 2, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('current')
if mibBuilder.loadTexts: userPassword.setDescription('User password, which must be entered in order to gain \n             access to the system.')
syslogClient = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogClient.setStatus('current')
if mibBuilder.loadTexts: syslogClient.setDescription('Enable or disable the syslog client')
syslogState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogState.setStatus('current')
if mibBuilder.loadTexts: syslogState.setDescription('The syslog service has been enabled or disabled')
longitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 96, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: longitude.setStatus('current')
if mibBuilder.loadTexts: longitude.setDescription('The longitude of the unit, measured in decimal degrees. \n             This object is set by the SNMP manager and has no \n             internal function.')
latitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 96, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latitude.setStatus('current')
if mibBuilder.loadTexts: latitude.setDescription('The latitude of the unit, measured in decimal degrees. \n             This object is set by the SNMP manager and has no \n             internal function.')
altitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 5, 96, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altitude.setStatus('current')
if mibBuilder.loadTexts: altitude.setDescription('The altitude of the unit, measured in metres. This \n             object is set by the SNMP manager and has no internal \n             function.')
channelChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 1)).setObjects(("CAMBIUM-PTP500-MIB", "receiveChannel"))
if mibBuilder.loadTexts: channelChangeTrap.setStatus('current')
if mibBuilder.loadTexts: channelChangeTrap.setDescription('The PTP radio has changed wireless channel.\n                 This has been caused by either\n                 i) mandatory radar avoidance,\n                    a DFS impulsive interference event will also be\n                    detected,\n                 or\n                 ii) Dynamic Spectrum Optimization, (DSO)\n                     DSO improves link performance by selecting the\n                     most appropriate transmit and receive channels\n                     with the lowest level of interference.')
dfsImpulsiveInterferenceTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 2)).setObjects(("CAMBIUM-PTP500-MIB", "receiveChannel"))
if mibBuilder.loadTexts: dfsImpulsiveInterferenceTrap.setStatus('current')
if mibBuilder.loadTexts: dfsImpulsiveInterferenceTrap.setDescription('DFS impulsive interference detected event')
dataPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 3)).setObjects(("CAMBIUM-PTP500-MIB", "dataPortStatus"))
if mibBuilder.loadTexts: dataPortStatusTrap.setStatus('current')
if mibBuilder.loadTexts: dataPortStatusTrap.setDescription('Current status of the Ethernet link. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
telecomsChannelStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 4)).setObjects(("CAMBIUM-PTP500-MIB", "telecomsChannelStatus"))
if mibBuilder.loadTexts: telecomsChannelStatusTrap.setStatus('current')
if mibBuilder.loadTexts: telecomsChannelStatusTrap.setDescription('Current status of telecoms channel. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
telecomsLoopbackTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 6)).setObjects(("CAMBIUM-PTP500-MIB", "telecomsLoopback"))
if mibBuilder.loadTexts: telecomsLoopbackTrap.setStatus('current')
if mibBuilder.loadTexts: telecomsLoopbackTrap.setDescription("The loopback status of telecoms channel. This is \n             intended for installation testing and should be set to \n             'None' for normal operation. The wire connections to a \n             unit can be tested by applying a 'Copper' loopback to the \n             local unit. The wireless connection to the remote unit \n             can be tested by applying a 'Wireless' loopback to the \n             remote unit with no loopback on the local unit. When \n             applying a wireless loopback, please ensure that the \n             other end of the link has a loopback setting of 'None'. \n             NB: a change of state may generate an SNMP trap and/or \n             SMTP email alert")
regionCodeTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 8)).setObjects(("CAMBIUM-PTP500-MIB", "regionCode"))
if mibBuilder.loadTexts: regionCodeTrap.setStatus('current')
if mibBuilder.loadTexts: regionCodeTrap.setDescription('The region code prohibits the wireless unit from \n             operating outside the regulated limits. An invalid region \n             code indicates a corrupted licence key. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
installStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 9)).setObjects(("CAMBIUM-PTP500-MIB", "installStatus"))
if mibBuilder.loadTexts: installStatusTrap.setStatus('current')
if mibBuilder.loadTexts: installStatusTrap.setDescription('A non-zero value indicates that signalling was received \n             with the wrong MAC address or a mismatched link name. NB: \n             It is very unusual to detect this, because units with \n             mis-configured Target MAC Address will normally fail to \n             establish a wireless link. However, rare circumstances \n             may establish a partial wireless link and detect this \n             situation. NB: A non-zero value on start-up, or a change \n             of value during operation, may generate an SNMP trap \n             and/or SMTP email alert')
installArmStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 10)).setObjects(("CAMBIUM-PTP500-MIB", "installArmState"))
if mibBuilder.loadTexts: installArmStateTrap.setStatus('current')
if mibBuilder.loadTexts: installArmStateTrap.setDescription("Indicates if the unit is being installed. NB: a value \n             other than 'disarmed' on startup, or a change of state \n             during operation may generate an SNMP trap and/or SMTP \n             email alert")
unitOutOfCalibrationTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 11)).setObjects(("CAMBIUM-PTP500-MIB", "unitOutOfCalibration"))
if mibBuilder.loadTexts: unitOutOfCalibrationTrap.setStatus('current')
if mibBuilder.loadTexts: unitOutOfCalibrationTrap.setDescription('The unit is out of calibration')
incompatibleRegionCodesTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 14)).setObjects(("CAMBIUM-PTP500-MIB", "incompatibleRegionCodes"))
if mibBuilder.loadTexts: incompatibleRegionCodesTrap.setStatus('current')
if mibBuilder.loadTexts: incompatibleRegionCodesTrap.setDescription('The master and slave units have incompatible region \n             codes. NB: Both units must have compatible licence keys')
noWirelessChannelAvailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 15)).setObjects(("CAMBIUM-PTP500-MIB", "noWirelessChannelAvailable"))
if mibBuilder.loadTexts: noWirelessChannelAvailableTrap.setStatus('current')
if mibBuilder.loadTexts: noWirelessChannelAvailableTrap.setDescription('Spectrum Management was unable to locate a suitable \n             wireless channel to operate on')
wirelessLinkDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 16)).setObjects(("CAMBIUM-PTP500-MIB", "wirelessLinkDisabledWarning"))
if mibBuilder.loadTexts: wirelessLinkDisabledWarningTrap.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkDisabledWarningTrap.setDescription('The SNMP ifAdminStatus of the wireless interface has \n             disabled wireless traffic')
dataPortDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 17)).setObjects(("CAMBIUM-PTP500-MIB", "dataPortDisabledWarning"))
if mibBuilder.loadTexts: dataPortDisabledWarningTrap.setStatus('current')
if mibBuilder.loadTexts: dataPortDisabledWarningTrap.setDescription('The SNMP ifAdminStatus of the Ethernet interface has \n             disabled Ethernet traffic')
dataPortConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 19)).setObjects(("CAMBIUM-PTP500-MIB", "dataPortConfigurationMismatch"))
if mibBuilder.loadTexts: dataPortConfigurationMismatchTrap.setStatus('current')
if mibBuilder.loadTexts: dataPortConfigurationMismatchTrap.setDescription('The detection of Ethernet fragments (runt packets) when \n             the link is in full duplex is an indication of an \n             auto-negotiation or forced configuration mismatch')
incompatibleMasterAndSlaveTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 20)).setObjects(("CAMBIUM-PTP500-MIB", "incompatibleMasterAndSlave"))
if mibBuilder.loadTexts: incompatibleMasterAndSlaveTrap.setStatus('current')
if mibBuilder.loadTexts: incompatibleMasterAndSlaveTrap.setDescription('A non-zero value indicates that the master and slave \n             ends of a link are different hardware products, or have \n             different software versions. NB: It is very unusual to \n             detect this, because incompatible units will normally \n             fail to establish a wireless link. However, some \n             combinations may establish a partial wireless link and \n             detect this situation. NB: A non-zero value may generate \n             an SNMP trap and/or SMTP email alert')
sNTPSyncTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 21)).setObjects(("CAMBIUM-PTP500-MIB", "sNTPSync"))
if mibBuilder.loadTexts: sNTPSyncTrap.setStatus('current')
if mibBuilder.loadTexts: sNTPSyncTrap.setDescription('If SNTP Sync fails then check the server settings in the \n             Remote Management page, or disable SNTP. NB: a change of \n             state may generate an SNMP trap and/or SMTP email alert')
tDDSynchronizationAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 22)).setObjects(("CAMBIUM-PTP500-MIB", "tDDSynchronizationAlarm"))
if mibBuilder.loadTexts: tDDSynchronizationAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: tDDSynchronizationAlarmTrap.setDescription('Not Synchronized indicates failure of the external \n             timing system for a period greater than the holdover \n             timer. TDD frame timing will have drifted, and this link \n             may cause interference with other links in a synchronized \n             network. Timing System Failure is an early warning, \n             indicating that 80% of the holdover period has expired.')
linkModeOptimizationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 25)).setObjects(("CAMBIUM-PTP500-MIB", "linkModeOptimizationMismatch"))
if mibBuilder.loadTexts: linkModeOptimizationMismatchTrap.setStatus('current')
if mibBuilder.loadTexts: linkModeOptimizationMismatchTrap.setDescription('The remote node of this link has been configured with a \n             different link mode optimization')
capacityLicenseMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 27)).setObjects(("CAMBIUM-PTP500-MIB", "capacityLicenseMismatch"))
if mibBuilder.loadTexts: capacityLicenseMismatchTrap.setStatus('current')
if mibBuilder.loadTexts: capacityLicenseMismatchTrap.setDescription('The local and remote units have different licensed \n             capacity and/or the full capacity trial has been \n             activated at only one unit. The wireless link is \n             operating at the capacity of the lowest capacity unit')
syslogStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 30)).setObjects(("CAMBIUM-PTP500-MIB", "syslogState"))
if mibBuilder.loadTexts: syslogStateTrap.setStatus('current')
if mibBuilder.loadTexts: syslogStateTrap.setDescription('The syslog service has been enabled or disabled')
syslogLocalNearlyFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 31))
if mibBuilder.loadTexts: syslogLocalNearlyFullTrap.setStatus('current')
if mibBuilder.loadTexts: syslogLocalNearlyFullTrap.setDescription('The syslog local log is nearly full (90%)')
syslogLocalWrappedTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 32))
if mibBuilder.loadTexts: syslogLocalWrappedTrap.setStatus('current')
if mibBuilder.loadTexts: syslogLocalWrappedTrap.setDescription('The syslog local log has wrapped')
syslogClientTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 5, 99, 0, 33)).setObjects(("CAMBIUM-PTP500-MIB", "syslogClient"))
if mibBuilder.loadTexts: syslogClientTrap.setStatus('current')
if mibBuilder.loadTexts: syslogClientTrap.setDescription('Enable or disable the syslog client')
mibBuilder.exportSymbols("CAMBIUM-PTP500-MIB", tFTPSoftwareUpgradeStatusAdditionalText=tFTPSoftwareUpgradeStatusAdditionalText, wirelessLinkAvailability=wirelessLinkAvailability, dataPortDisabledWarningTrap=dataPortDisabledWarningTrap, vLANPriorityTable=vLANPriorityTable, receiveModulationMode=receiveModulationMode, dataPortConfigurationMismatch=dataPortConfigurationMismatch, sNMPTrapTableIndex=sNMPTrapTableIndex, snmpControl=snmpControl, sNMPTrapIPAddress=sNMPTrapIPAddress, licensedCapacity=licensedCapacity, dfsTableNumber=dfsTableNumber, telecomsLoopbackTrap=telecomsLoopbackTrap, bandwidthVariant=bandwidthVariant, vLANManagementVID=vLANManagementVID, softwareVersion=softwareVersion, capacityLicenseMismatchTrap=capacityLicenseMismatchTrap, management=management, searchState=searchState, wirelessLinkDisabledWarning=wirelessLinkDisabledWarning, sNMPTrapVersion=sNMPTrapVersion, syslogLocalWrappedTrap=syslogLocalWrappedTrap, remoteIPAddress=remoteIPAddress, hardwareVersion=hardwareVersion, vLANPriorityTableEntry=vLANPriorityTableEntry, telnetAccessEnabled=telnetAccessEnabled, unitOutOfCalibration=unitOutOfCalibration, dataPortStatus=dataPortStatus, sNTPLastSync=sNTPLastSync, masterSlaveMode=masterSlaveMode, reset=reset, timeZone=timeZone, ptmp=ptmp, vectorError=vectorError, telecomsChannelStatus=telecomsChannelStatus, syslogClientTrap=syslogClientTrap, snmpControlGroup=snmpControlGroup, hTTPSAccessEnabled=hTTPSAccessEnabled, userTable=userTable, notificationsGroup=notificationsGroup, sNMPTrapTableEntry=sNMPTrapTableEntry, receiveFreqMHz=receiveFreqMHz, dfsGroup=dfsGroup, remoteMaximumTransmitPower=remoteMaximumTransmitPower, receiveFreqKHz=receiveFreqKHz, wirelessLinkDisabledWarningTrap=wirelessLinkDisabledWarningTrap, receiveDataRate=receiveDataRate, pubStatsGroup=pubStatsGroup, telecomsCableLength=telecomsCableLength, channelChangeTrap=channelChangeTrap, dfsMeans=dfsMeans, sNMPTrapTable=sNMPTrapTable, groupID=groupID, signalStrengthRatio=signalStrengthRatio, sNMPv3Enable=sNMPv3Enable, transmitPower=transmitPower, tDDControl=tDDControl, phyStatus=phyStatus, tDDSynchronizationStatus=tDDSynchronizationStatus, phyControlGroup=phyControlGroup, dataPortDisabledWarning=dataPortDisabledWarning, dfsNineNinePointNinePercentiles=dfsNineNinePointNinePercentiles, ethernet=ethernet, telecomsInterface=telecomsInterface, licence=licence, incompatibleRegionCodes=incompatibleRegionCodes, userPassword=userPassword, cableLoss=cableLoss, linkName=linkName, linkModeOptimizationMismatch=linkModeOptimizationMismatch, linkModeOptimisation=linkModeOptimisation, alarms=alarms, sNTPServerIPAddress=sNTPServerIPAddress, maximumTransmitPower=maximumTransmitPower, bootVersion=bootVersion, eIRP=eIRP, tDDSynchronizationAlarm=tDDSynchronizationAlarm, aggregateDataRate=aggregateDataRate, latitude=latitude, dfsImpulsiveInterferenceTrap=dfsImpulsiveInterferenceTrap, userConfiguredMaxModulationMode=userConfiguredMaxModulationMode, tFTPSoftwareUpgradeStatusText=tFTPSoftwareUpgradeStatusText, linkLoss=linkLoss, userRole=userRole, syslogClient=syslogClient, syslogControl=syslogControl, noWirelessChannelAvailable=noWirelessChannelAvailable, syslogState=syslogState, installArmState=installArmState, tDDSynchronizationAlarmTrap=tDDSynchronizationAlarmTrap, smtpGroup=smtpGroup, ptp500=ptp500, tFTPServerPortNumber=tFTPServerPortNumber, hTTPAccessEnabled=hTTPAccessEnabled, tDDSynchronizationMode=tDDSynchronizationMode, ethernetFiberSupport=ethernetFiberSupport, telecomsLineCode=telecomsLineCode, sNMPEnabledTraps=sNMPEnabledTraps, sMTPEmailAlert=sMTPEmailAlert, byteErrorRatio=byteErrorRatio, aAAControlGroup=aAAControlGroup, encryptionGroup=encryptionGroup, encryptionAlgorithm=encryptionAlgorithm, linkSymmetry=linkSymmetry, gatewayIPAddress=gatewayIPAddress, telecomsLoopback=telecomsLoopback, telecom=telecom, syslogControlGroup=syslogControlGroup, incompatibleMasterAndSlave=incompatibleMasterAndSlave, ptpTrapPrefix=ptpTrapPrefix, userTableEntry=userTableEntry, resetGroup=resetGroup, regionCodeTrap=regionCodeTrap, ptpGroups=ptpGroups, telnetPortNumber=telnetPortNumber, tFTPStartSoftwareUpgrade=tFTPStartSoftwareUpgrade, capacityLicenseMismatch=capacityLicenseMismatch, PYSNMP_MODULE_ID=cambium, sNTPPollInterval=sNTPPollInterval, supplementary=supplementary, useVLANForManagementInterfaces=useVLANForManagementInterfaces, phyControl=phyControl, vLANPriorityTableIndex=vLANPriorityTableIndex, userName=userName, productVariant=productVariant, sMTPServerPortNumber=sMTPServerPortNumber, sNMPSendAllTrapsAtStartup=sNMPSendAllTrapsAtStartup, systemClock=systemClock, ptp=ptp, installStatus=installStatus, dataPortConfigurationMismatchTrap=dataPortConfigurationMismatchTrap, userTableNumber=userTableNumber, dfs=dfs, sNTPState=sNTPState, supplementaryGroup=supplementaryGroup, tFTPSoftwareUpgradeStatus=tFTPSoftwareUpgradeStatus, telecomGroup=telecomGroup, enabledDiagnosticAlarms=enabledDiagnosticAlarms, systemReset=systemReset, sNTPSync=sNTPSync, ptpCompliance=ptpCompliance, sNTPSyncTrap=sNTPSyncTrap, tFTPSoftwareUpgradeFileName=tFTPSoftwareUpgradeFileName, pubStats=pubStats, channelBandwidth=channelBandwidth, dataPortAutoNegotiation=dataPortAutoNegotiation, managementGroup=managementGroup, sNTPServerPortNumber=sNTPServerPortNumber, longitude=longitude, telecomsChannelStatusTrap=telecomsChannelStatusTrap, syslogLocalNearlyFullTrap=syslogLocalNearlyFullTrap, versions=versions, regionCode=regionCode, dataPortWirelessDownAlert=dataPortWirelessDownAlert, accessMethod=accessMethod, sMTPServerIPAddress=sMTPServerIPAddress, cambium=cambium, unitOutOfCalibrationTrap=unitOutOfCalibrationTrap, ethernetGroup=ethernetGroup, incompatibleRegionCodesTrap=incompatibleRegionCodesTrap, transmitChannel=transmitChannel, dfsTableIndex=dfsTableIndex, wirelessLinkStatus=wirelessLinkStatus, configurationGroup=configurationGroup, ptpTraps=ptpTraps, dfsTable=dfsTable, userEnabled=userEnabled, antennaGain=antennaGain, alarmsGroup=alarmsGroup, siteName=siteName, transmitFreqMHz=transmitFreqMHz, dataPortSpeedAndDuplex=dataPortSpeedAndDuplex, sNMPTrapTableNumber=sNMPTrapTableNumber, productName=productName, vLANPriorityQueueMapping=vLANPriorityQueueMapping, aAAControl=aAAControl, installStatusTrap=installStatusTrap, encryption=encryption, smtp=smtp, sntpGroup=sntpGroup, tDDControlGroup=tDDControlGroup, configuration=configuration, installArmStateTrap=installArmStateTrap, secondarySoftwareVersion=secondarySoftwareVersion, hTTPSPortNumber=hTTPSPortNumber, daylightSaving=daylightSaving, sMTPDestinationEmailAddress=sMTPDestinationEmailAddress, syslogStateTrap=syslogStateTrap, constantPowerSpectralDensity=constantPowerSpectralDensity, licenceGroup=licenceGroup, dfsTableEntry=dfsTableEntry, hTTPPortNumber=hTTPPortNumber, linkModeOptimizationMismatchTrap=linkModeOptimizationMismatchTrap, vLANManagementPriority=vLANManagementPriority, versionsGroup=versionsGroup, dfsPeaks=dfsPeaks, vLANPriorityTableNumber=vLANPriorityTableNumber, receivePower=receivePower, targetMACAddress=targetMACAddress, transmitModulationMode=transmitModulationMode, sntp=sntp, range=range, sNMPTrapPortNumber=sNMPTrapPortNumber, transmitDataRate=transmitDataRate, sMTPEnabledMessages=sMTPEnabledMessages, noWirelessChannelAvailableTrap=noWirelessChannelAvailableTrap, receiveChannel=receiveChannel, transmitFreqKHz=transmitFreqKHz, subnetMask=subnetMask, receiveModulationModeDetail=receiveModulationModeDetail, incompatibleMasterAndSlaveTrap=incompatibleMasterAndSlaveTrap, iPAddress=iPAddress, altitude=altitude, phyStatusGroup=phyStatusGroup, sMTPSourceEmailAddress=sMTPSourceEmailAddress, dataPortAutoNegAdvertisement=dataPortAutoNegAdvertisement, dataPortAutoMdix=dataPortAutoMdix, frequencyVariant=frequencyVariant, userTableIndex=userTableIndex, tFTPServerIPAddress=tFTPServerIPAddress, dataPortStatusTrap=dataPortStatusTrap, sNMPPortNumber=sNMPPortNumber, sNMPCommunityString=sNMPCommunityString)
