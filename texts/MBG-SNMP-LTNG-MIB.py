#
# PySNMP MIB module MBG-SNMP-LTNG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/meinberg/MBG-SNMP-LTNG-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 10:48:51 2024
# On host fv-az1251-584 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
MeinbergSwitch, mbgSnmpRoot = mibBuilder.importSymbols("MBG-SNMP-ROOT-MIB", "MeinbergSwitch", "mbgSnmpRoot")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Bits, NotificationType, Unsigned32, Gauge32, TimeTicks, Counter32, IpAddress, Counter64, MibIdentifier, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Bits", "NotificationType", "Unsigned32", "Gauge32", "TimeTicks", "Counter32", "IpAddress", "Counter64", "MibIdentifier", "ModuleIdentity", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
mbgLantimeNG = ModuleIdentity((1, 3, 6, 1, 4, 1, 5597, 30))
mbgLantimeNG.setRevisions(('2016-05-18 05:17', '2015-08-27 08:44', '2015-04-17 06:32', '2014-11-25 07:24', '2014-08-29 08:10', '2014-01-30 09:19', '2013-11-01 09:39', '2013-10-09 11:50', '2013-10-01 08:10', '2013-09-18 12:16', '2013-02-20 07:00', '2012-11-07 14:20', '2012-03-30 07:13', '2012-01-25 07:45', '2011-09-12 08:18', '2011-09-02 11:10', '2011-06-21 09:30', '2011-05-20 10:00', '2011-05-16 13:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mbgLantimeNG.setRevisionsDescriptions((' Rev 6.20.001  18 Mai 2015 05:17 UTC Philipp Rahns\n          Added traps mbgLtNgTrapFDMOk, mbgLtNgTrapNTPOffsetLimitExceeded and\n          mbgLtNgTrapNTPOffsetLimitOk', ' Rev 6.18.005  27 August 2015 08:44 UTC Philipp Rahns\n          Added mbgLtNgCpuSerialNumber object.', ' Rev 6.17.xxx  17 April 2015 06:32 UTC Philipp Rahns\n          Added / updated new PTP configuration objects.\n          Added trap mbgLtNgTrapSHSTimeLimitOk.\n          Added object mbgLtNgCmdSetTime.\n          Added trap mbgLtNgTrapIMSError.\n          Added trap mbgLtNgTrapIMSOk.\n          Added sendTestNotification command.', ' Rev 6.16.006  25 November 2014 07:24 UTC Philipp Rahns\n          Added mbgLtNgTrapSufficientSystemResources trap.', ' Rev 6.16.001  29 August 2014 08:10 UTC Philipp Rahns\n          Added support for MRS input references.\n          Fixed power supply detection and state.', ' Rev 6.15.016  30 January 2014 09:19 UTC Philipp Rahns\n          Fixed datatypes in MbgLtNgCfgPtpTableEntry.', ' Rev 6.15.011  01 November 2013 09:39 UTC Philipp Rahns\n          Added cluster traps.', ' Rev 6.15.010  09 October 2013 11:50 UTC Philipp Rahns\n          Added NTP client counter objects concerning statistics.\n          Added external NTP server and its offset when MRS.\n          Additional GPS related information.\n          Added traps.\n          Redesigned PTP port state table.', ' Rev 6.14.020  07 October 2013 08:10 UTC Philipp Rahns\n          Added GRC180 refclock support.\n          Added object mbgLtNgRefclockTimeDiff.\n          Added object mbgLtNgRefclockGpsPos.', ' Rev 6.14.019  18 September 2013 12:16 UTC Philipp Rahns\n          Fixed PTP port states', ' Rev 6.14.012  20 February 2013 07:00 UTC Philipp Rahns\n          Added objects for physical ethernet port link state', ' Rev 6.14.009  07 November 2012 14:20 UTC Philipp Rahns\n          Changed FDM frequency units', ' Rev 6.14.001  30 March 2012 07:13 UTC Philipp Rahns\n\t\t  Added object mbgLtNgRefclockLeapSecondDate', ' Rev 6.14.001  25 January 2012 07:45 UTC Philipp Rahns\n          Added trap object mbgLtNgTrapCertificateExpired.\n          Split MIB in root-mib-header and sub-mibs. Changed MIB module name.', ' Rev 6.12.002  12 September 2011 08:18 UTC Philipp Rahns\n          Added object mbgLtNgSubagentTimeticks', ' Rev 6.10.012  01 September 2011 11:10 UTC Philipp Rahns\n          Changed mbgLtNgNtp objects', ' Rev 6.10.009  21 June 2011 09:30 UTC Philipp Rahns\n          Added cluster support.', " Rev 6.10.006  20 May 2011 10:00 UTC Philipp Rahns\n          Changed default value of 'mbgLtNgSysNumberOfPowerSupplies'\n          from '0' to '1'.", ' Rev 6.10.005  16 May 2011 13:30 UTC Philipp Rahns\n          Initial MIB version for LANTIME V6.',))
if mibBuilder.loadTexts: mbgLantimeNG.setLastUpdated('201605180517Z')
if mibBuilder.loadTexts: mbgLantimeNG.setOrganization('Meinberg Radio Clocks GmbH & Co. KG')
if mibBuilder.loadTexts: mbgLantimeNG.setContactInfo('postal:   Meinberg Funkuhren\n                    Lange Wand 9\n                    31812 Bad Pyrmont\n                    Germany\n\n          email:    info@meinberg.de\n            web:    http://www.meinberg.de\n            tel:    +49 (0) 52 81 / 93 09 - 0\n            fax:    +49 (0) 52 81 / 93 09 - 30')
if mibBuilder.loadTexts: mbgLantimeNG.setDescription(' Meinberg LANTIME SNMP Management Information Base ')
mbgLantimeNGStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0))
mbgLtNgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 0))
mbgLtNgSnmpSubagentVersion = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 0, 1), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSnmpSubagentVersion.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgSnmpSubagentVersion.setDescription('version of this SNMP subagent')
mbgLtNgFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 0, 2), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgFirmwareVersion.setDescription('installed LANTIME firmware version')
mbgLtNgSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 0, 3), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSerialNumber.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgSerialNumber.setDescription('LANTIME serial number')
mbgLtNgSubagentTimeticks = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 0, 4), Counter64()).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSubagentTimeticks.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgSubagentTimeticks.setDescription("Subdaemons' time alive in seconds")
mbgLtNgCpuSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 0, 5), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCpuSerialNumber.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCpuSerialNumber.setDescription("CPU's serial number")
mbgLtNgRefclock = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1))
mbgLtNgNumberOfRefclocks = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNumberOfRefclocks.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNumberOfRefclocks.setDescription('currently installed number of refclocks')
mbgLtNgRefclockTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2), )
if mibBuilder.loadTexts: mbgLtNgRefclockTable.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockTable.setDescription('a table of refclock related variables')
mbgLtNgRefclockTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockIndex"))
if mibBuilder.loadTexts: mbgLtNgRefclockTableEntry.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockTableEntry.setDescription('a list of objects pertaining to a refclock')
mbgLtNgRefclockIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: mbgLtNgRefclockIndex.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockIndex.setDescription('index for refclock')
mbgLtNgRefclockType = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("unknown", 0), ("gps166", 1), ("gps167", 2), ("gps167SV", 3), ("gps167PC", 4), ("gps167PCI", 5), ("gps163", 6), ("gps168PCI", 7), ("gps161", 8), ("gps169PCI", 9), ("tcr167PCI", 10), ("gps164", 11), ("gps170PCI", 12), ("pzf511", 13), ("gps170", 14), ("tcr511", 15), ("am511", 16), ("msf511", 17), ("grc170", 18), ("gps170PEX", 19), ("gps162", 20), ("ptp270PEX", 21), ("frc511PEX", 22), ("gen170", 23), ("tcr170PEX", 24), ("wwvb511", 25), ("mgr170", 26), ("jjy511", 27), ("pzf600", 28), ("tcr600", 29), ("gps180", 30), ("gln170", 31), ("gps180PEX", 32), ("tcr180PEX", 33), ("pzf180PEX", 34), ("mgr180", 35), ("msf600", 36), ("wwvb600", 37), ("jjy600", 38), ("gps180HS", 39), ("gps180AMC", 40), ("esi180", 41), ("cpe180", 42), ("lno180", 43), ("grc180", 44), ("liu", 45), ("dcf600HS", 46), ("dcf600RS", 47), ("mri", 48), ("bpe", 49), ("gln180Pex", 50), ("n2x", 51), ("rsc180", 52), ("lneGb", 53), ("lnePpg180", 54), ("scg", 55), ("mdu300", 56), ("sdi", 57), ("fdm180", 58), ("spt", 59), ("pzf180", 60), ("rel1000", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockType.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockType.setDescription('type of refclock')
mbgLtNgRefclockUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 0), ("secondary", 1), ("compare", 2), ("primary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockUsage.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockUsage.setDescription('what this refclock is used for')
mbgLtNgRefclockState = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("synchronized", 1), ("notSynchronized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockState.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockState.setDescription('state of GPS refclock conneted to NTP time server as value\n          0: not available\n          1: synchronized\n          2: not synchronized')
mbgLtNgRefclockSubstate = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 50, 51, 52, 100, 101, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167))).clone(namedValues=NamedValues(("mrsRefNone", -1), ("notAvailable", 0), ("gpsSync", 1), ("gpsTracking", 2), ("gpsAntennaDisconnected", 3), ("gpsWarmBoot", 4), ("gpsColdBoot", 5), ("gpsAntennaShortCircuit", 6), ("lwNeverSync", 50), ("lwNotSync", 51), ("lwSync", 52), ("tcrNotSync", 100), ("tcrSync", 101), ("mrsGpsSync", 150), ("mrs10MhzSync", 151), ("mrsPpsInSync", 152), ("mrs10MhzPpsInSync", 153), ("mrsIrigSync", 154), ("mrsNtpSync", 155), ("mrsPtpIeee1588Sync", 156), ("mrsPtpOverE1Sync", 157), ("mrsFixedFreqInSync", 158), ("mrsPpsStringSync", 159), ("mrsVarFreqGpioSync", 160), ("mrsReserved", 161), ("mrsDcf77PzfSync", 162), ("mrsLongwaveSync", 163), ("mrsGlonassGpsSync", 164), ("mrsHavequickSync", 165), ("mrsExtOscSync", 166), ("mrsIntOscSync", 167)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockSubstate.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockSubstate.setDescription('more detailed state depending on refclock type\n          0: no substate available\n          gps: 1-4\n          long waves (PZF,WWVB,MSF,...): 50-52 (not supported by all types)\n          irig: 100-101')
mbgLtNgRefclockStatusA = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockStatusA.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockStatusA.setDescription('status A depending on reflcock\n          gps         : indicates number of good satellites in view\n          long wave\n            - pzf     : correlation\n            - other   : not supported\n          irig        : not supported')
mbgLtNgRefclockMaxStatusA = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockMaxStatusA.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockMaxStatusA.setDescription('maximum status A depending on reflcock\n          gps         : indicates number of satellites in view\n          long wave\n            - pzf     : 100\n            - other   : not supported\n          irig        : not supported')
mbgLtNgRefclockStatusB = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockStatusB.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockStatusB.setDescription('maximum status B depending on reflcock\n          gps         : not supported\n          long wave\n            - all     : field strength\n          irig        : not supported')
mbgLtNgRefclockMaxStatusB = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockMaxStatusB.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockMaxStatusB.setDescription('maximum status B depending on reflcock\n          gps         : not supported\n          long wave\n            - all     : 100\n          irig        : not supported')
mbgLtNgRefclockAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAvailable", 0), ("leapSecondAnnounced", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockAdditionalInfo.setDescription('any kind of additional information concerning a refclock')
mbgLtNgRefclockLeapSecondDate = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 2, 1, 11), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockLeapSecondDate.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockLeapSecondDate.setDescription('Date for next leap second')
mbgLtNgRefclockGpsTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3), )
if mibBuilder.loadTexts: mbgLtNgRefclockGpsTable.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockGpsTable.setDescription('a table of gps only related variables')
mbgLtNgRefclockGpsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsIndex"))
if mibBuilder.loadTexts: mbgLtNgRefclockGpsTableEntry.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockGpsTableEntry.setDescription('a list of objects pertaining to a GPS refclock')
mbgLtNgRefclockGpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgRefclockGpsIndex.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockGpsIndex.setDescription('index for GPS')
mbgLtNgRefclockGpsLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockGpsLatitude.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockGpsLatitude.setDescription("GPS' latitude")
mbgLtNgRefclockGpsLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1, 3), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockGpsLongitude.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockGpsLongitude.setDescription("GPS' longitude")
mbgLtNgRefclockGpsAltitude = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1, 4), Integer32().clone(-1)).setUnits('m').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockGpsAltitude.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockGpsAltitude.setDescription("GPS' altitude")
mbgLtNgRefclockGpsTdop = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1, 5), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockGpsTdop.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockGpsTdop.setDescription("GPS' timing dillution of precision")
mbgLtNgRefclockGpsPdop = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1, 6), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockGpsPdop.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockGpsPdop.setDescription("GPS' positional dillution of precision")
mbgLtNgRefclockGpsUtcOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 3, 1, 7), Integer32().clone(-1)).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockGpsUtcOffset.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockGpsUtcOffset.setDescription("GPS' offset to UTC in seconds")
mbgLtNgRefclockTimeDiff = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 4), Integer32()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockTimeDiff.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockTimeDiff.setDescription('when there is more than one refclock\n         this object shows the internal time\n         difference in milliseconds')
mbgLtNgRefclockGpsPos = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 1, 5), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgRefclockGpsPos.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgRefclockGpsPos.setDescription('shows current GPS receiver position')
mbgLtNgNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2))
mbgLtNgNtpCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("notSynchronized", 1), ("synchronized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCurrentState.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNtpCurrentState.setDescription("Current NTP's synchronization status")
mbgLtNgNtpStratum = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpStratum.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNtpStratum.setDescription('Stratum value of the NTP')
mbgLtNgNtpRefclockName = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 3), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpRefclockName.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNtpRefclockName.setDescription('Name of the current refclock selected by the NTP')
mbgLtNgNtpRefclockOffset = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 4), DisplayString().clone('n/a')).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpRefclockOffset.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNtpRefclockOffset.setDescription('Time offset between the current selected refclock and time of NTP as string in milliseconds')
mbgLtNgNtpVersion = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 5), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpVersion.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNtpVersion.setDescription('integrated NTP version')
mbgLtNgNtpClientCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8))
mbgLtNgNtpCCStartedAt = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCStartedAt.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNtpCCStartedAt.setDescription('start time of current NTP client counter session as timestamp')
mbgLtNgNtpCCDuration = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 2), Unsigned32()).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCDuration.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNtpCCDuration.setDescription('total duration of NTP client counter in seconds')
mbgLtNgNtpCCNumberOfClients = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCNumberOfClients.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNtpCCNumberOfClients.setDescription('total number of different clients requesting time')
mbgLtNgNtpCCTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCTotalRequests.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNtpCCTotalRequests.setDescription('total requests since starting the daemon')
mbgLtNgNtpCCTotalRequestsCurrentDay = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCTotalRequestsCurrentDay.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNtpCCTotalRequestsCurrentDay.setDescription("today's total requests")
mbgLtNgNtpCCTotalRequestsLastHour = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCTotalRequestsLastHour.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNtpCCTotalRequestsLastHour.setDescription("today's requests within the last completed hour")
mbgLtNgNtpCCTotalRequestsLastMinute = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCTotalRequestsLastMinute.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNtpCCTotalRequestsLastMinute.setDescription("today's requests within the last completed minute")
mbgLtNgNtpCCTodaysClients = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 8, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpCCTodaysClients.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNtpCCTodaysClients.setDescription("today's number of different clients requesting time")
mbgLtNgNtpMrs = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 9))
mbgLtNgNtpMrsServer = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 9, 1), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpMrsServer.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNtpMrsServer.setDescription('external NTP server being used for synchronization')
mbgLtNgNtpMrsOffset = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 2, 9, 2), DisplayString().clone('n/a')).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNtpMrsOffset.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNtpMrsOffset.setDescription("external NTP server's offset")
mbgLtNgPtp = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3))
mbgLtNgPtpNumberOfModules = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpNumberOfModules.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpNumberOfModules.setDescription('number of available PTPv2 modules')
mbgLtNgPtpTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2), )
if mibBuilder.loadTexts: mbgLtNgPtpTable.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpTable.setDescription('a table of PTPv2 related variables')
mbgLtNgPtpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgPtpIndex"))
if mibBuilder.loadTexts: mbgLtNgPtpTableEntry.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpTableEntry.setDescription('a list of objects pertaining to a PTPv2 module')
mbgLtNgPtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgPtpIndex.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpIndex.setDescription('index for PTPv2 module')
mbgLtNgPtpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notAvailable", 0), ("stopped", 1), ("master", 2), ("slave", 3), ("ordinary", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpMode.setStatus('obsolete')
if mibBuilder.loadTexts: mbgLtNgPtpMode.setDescription("PTPv2 modus as integer. This object is obsolete and\n         always returns '0'. Please see alternates\n         mbgLtNgPtpPortState and mbgLtNgPtpRole.")
mbgLtNgPtpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("uninitialized", 0), ("initializing", 1), ("faulty", 2), ("disabled", 3), ("listening", 4), ("preMaster", 5), ("master", 6), ("passive", 7), ("uncalibrated", 8), ("slave", 9))).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpPortState.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpPortState.setDescription('port state as integer')
mbgLtNgPtpGrandmasterMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 4), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpGrandmasterMac.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpGrandmasterMac.setDescription('MAC address of current grandmaster')
mbgLtNgPtpClockAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 254))).clone(namedValues=NamedValues(("notAvailable", 0), ("timeAccurateTo25ns", 32), ("timeAccurateTo100ns", 33), ("timeAccurateTo250ns", 34), ("timeAccurateTo1us", 35), ("timeAccurateTo2Point5us", 36), ("timeAccurateTo10us", 37), ("timeAccurateTo25us", 38), ("timeAccurateTo100us", 39), ("timeAccurateTo250us", 40), ("timeAccurateTo1ms", 41), ("timeAccurateTo2to5ms", 42), ("timeAccurateTo10ms", 43), ("timeAccurateTo25ms", 44), ("timeAccurateTo100ms", 45), ("timeAccurateTo250ms", 46), ("timeAccurateTo1s", 47), ("timeAccurateTo10s", 48), ("timeAccurateToGT10s", 49), ("timeAccurateToUnknown", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpClockAccuracy.setReference('IEEE Std. 1588-2008')
if mibBuilder.loadTexts: mbgLtNgPtpClockAccuracy.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpClockAccuracy.setDescription('indicates the source of time')
mbgLtNgPtpClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpClockClass.setReference('IEEE Std. 1588-2008')
if mibBuilder.loadTexts: mbgLtNgPtpClockClass.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpClockClass.setDescription('denotes the traceability of the time or frequency')
mbgLtNgPtpTimeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 16, 32, 48, 64, 80, 96, 144, 160))).clone(namedValues=NamedValues(("notAvailable", 0), ("atomicClock", 16), ("gps", 32), ("terrestrialRadio", 48), ("ptp", 64), ("ntp", 80), ("handSet", 96), ("other", 144), ("internalOscillator", 160)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpTimeSource.setReference('IEEE Std. 1588-2008')
if mibBuilder.loadTexts: mbgLtNgPtpTimeSource.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpTimeSource.setDescription('source of time being used')
mbgLtNgPtpUtcOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 8), Unsigned32().clone(35)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpUtcOffset.setReference('IEEE Std. 1588-2008')
if mibBuilder.loadTexts: mbgLtNgPtpUtcOffset.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpUtcOffset.setDescription("offset from PTP's TAI time to UTC time")
mbgLtNgPtpTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 9), Counter64()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpTimeSeconds.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpTimeSeconds.setDescription('PTP seconds')
mbgLtNgPtpTsuTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 10), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpTsuTime.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpTsuTime.setDescription('current time on PTP TSU')
mbgLtNgPtpSysTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 11), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpSysTime.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpSysTime.setDescription('current system time')
mbgLtNgPtpPortLinkup = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 12), MeinbergSwitch()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpPortLinkup.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpPortLinkup.setDescription("PTP port's physical link-up")
mbgLtNgPtpOffsetFromGM = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 13), DisplayString().clone('n/a')).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpOffsetFromGM.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpOffsetFromGM.setDescription('offset from grandmaster in nanoseconds')
mbgLtNgPtpPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 14), DisplayString().clone('n/a')).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpPathDelay.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpPathDelay.setDescription('network delay in nanoseconds')
mbgLtNgPtpDelayMec = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("end2End", 0), ("peer2Peer", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpDelayMec.setReference('IEEE Std. 1588-2008')
if mibBuilder.loadTexts: mbgLtNgPtpDelayMec.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpDelayMec.setDescription('delay mechanism')
mbgLtNgPtpDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpDomain.setReference('IEEE Std. 1588-2008')
if mibBuilder.loadTexts: mbgLtNgPtpDomain.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpDomain.setDescription('domain number')
mbgLtNgPtpGrandmasterUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 17), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpGrandmasterUuid.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpGrandmasterUuid.setDescription('grandmaster uuid')
mbgLtNgPtpLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 18), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpLocalMac.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpLocalMac.setDescription('local MAC address')
mbgLtNgPtpDelayAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 19), DisplayString().clone('n/a')).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpDelayAsymmetry.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpDelayAsymmetry.setDescription('asymmetric network delay in nanoseconds')
mbgLtNgPtpAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgPtpAvail.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgPtpAvail.setDescription('Signals whether PTP instance is avail or not')
mbgLtNgFdm = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 4))
mbgLtNgFdmFreq = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 4, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(45000, 65000), ))).setUnits('mHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgFdmFreq.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgFdmFreq.setDescription('powerline frequency in mHz; 0 indicates that no data is available')
mbgLtNgFdmFreqDev = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15000, 15000))).setUnits('mHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgFdmFreqDev.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgFdmFreqDev.setDescription("frequency deviation in mHz depending on the configured nominal frequency; check 'mbgLtNgFdmFreq' for error")
mbgLtNgFdmNomFreq = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 4, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(60000, 60000), ))).setUnits('mHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgFdmNomFreq.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgFdmNomFreq.setDescription('nominal frequency in mHz; can be 50000 (50Hz) or 60000 (60Hz); 0 indicates that no value is configured')
mbgLtNgSystemHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5))
mbgLtNgSysPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 0))
mbgLtNgSysNumberOfPowerSupplies = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 0, 1), Unsigned32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSysNumberOfPowerSupplies.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgSysNumberOfPowerSupplies.setDescription('number of available power supplies')
mbgLtNgSysPsTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 0, 2), )
if mibBuilder.loadTexts: mbgLtNgSysPsTable.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgSysPsTable.setDescription('a table of power supply stati')
mbgLtNgSysPsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 0, 2, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgSysPsIndex"))
if mibBuilder.loadTexts: mbgLtNgSysPsTableEntry.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgSysPsTableEntry.setDescription('a list of objects pertaining to power supplies')
mbgLtNgSysPsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 0, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgSysPsIndex.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgSysPsIndex.setDescription('index of power supply')
mbgLtNgSysPsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 0, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSysPsStatus.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgSysPsStatus.setDescription('Status of power supply')
mbgLtNgSysFan = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 1))
mbgLtNgSysNumberOfFans = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSysNumberOfFans.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgSysNumberOfFans.setDescription('number of available fans')
mbgLtNgSysFanTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 1, 2), )
if mibBuilder.loadTexts: mbgLtNgSysFanTable.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgSysFanTable.setDescription('a table of power supply stati')
mbgLtNgSysFanTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 1, 2, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgSysFanIndex"))
if mibBuilder.loadTexts: mbgLtNgSysFanTableEntry.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgSysFanTableEntry.setDescription('a list of objects pertaining to fans')
mbgLtNgSysFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgSysFanIndex.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgSysFanIndex.setDescription('index of fan')
mbgLtNgSysFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSysFanStatus.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgSysFanStatus.setDescription('Status of fan')
mbgLtNgSysFanError = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSysFanError.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgSysFanError.setDescription("fan's error field")
mbgLtNgSysTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 2))
mbgLtNgSysTempCelsius = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 5, 2, 1), Unsigned32()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgSysTempCelsius.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgSysTempCelsius.setDescription('temperature in degree Celsius')
mbgLtNgCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6))
mbgLtNgNumberOfClusters = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgNumberOfClusters.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgNumberOfClusters.setDescription('number of active running clusters')
mbgLtNgClusterTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2), )
if mibBuilder.loadTexts: mbgLtNgClusterTable.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgClusterTable.setDescription('a table of cluster status information')
mbgLtNgClusterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgClusterIndex"))
if mibBuilder.loadTexts: mbgLtNgClusterTableEntry.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgClusterTableEntry.setDescription('a list of objects pertaining to running and active clusters')
mbgLtNgClusterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgClusterIndex.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgClusterIndex.setDescription('index of power supply')
mbgLtNgClusterCommunicationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterCommunicationIp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgClusterCommunicationIp.setDescription('ip of cluster interface')
mbgLtNgClusterPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 0), ("master", 1), ("slave", 2), ("listening", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterPortState.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgClusterPortState.setDescription('state of cluster')
mbgLtNgClusterMasterSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 4), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterMasterSerial.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgClusterMasterSerial.setDescription("serial number of cluster's master")
mbgLtNgClusterMasterIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 5), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterMasterIp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgClusterMasterIp.setDescription("ip address of cluster's master")
mbgLtNgClusterMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterMasterPriority.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgClusterMasterPriority.setDescription('priority of cluster master')
mbgLtNgClusterClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notAvailable", 0), ("gps", 3), ("pzf", 4), ("am", 5), ("irig", 6), ("pps", 7), ("ptp", 8), ("ntp", 9), ("e1", 10), ("rdt", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterClockClass.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgClusterClockClass.setDescription("reference's clock class")
mbgLtNgClusterClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notAvailable", 0), ("normalOperation", 1), ("freeRunningOrTracking", 2), ("antennaFailure", 3), ("invalid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterClockStatus.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgClusterClockStatus.setDescription("reference's clock status")
mbgLtNgClusterReconfigurationState = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 0), ("normal", 1), ("masterToSlave", 2), ("slaveToMaster", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterReconfigurationState.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgClusterReconfigurationState.setDescription('current reconfiguration state')
mbgLtNgClusterIsFalseticker = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgClusterIsFalseticker.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgClusterIsFalseticker.setDescription('am I a falseticker?')
mbgLtNgMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 0, 7))
mbgLtNgEthPortLinkTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 0, 7, 1), )
if mibBuilder.loadTexts: mbgLtNgEthPortLinkTable.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgEthPortLinkTable.setDescription('a table of physical ethernet interface port link states')
mbgLtNgEthPortLinkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 0, 7, 1, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgEthPortLinkIndex"))
if mibBuilder.loadTexts: mbgLtNgEthPortLinkTableEntry.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgEthPortLinkTableEntry.setDescription('port link states for each physical ethernet interface')
mbgLtNgEthPortLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgEthPortLinkIndex.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgEthPortLinkIndex.setDescription('interface index')
mbgLtNgEthPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 0, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgEthPortLinkState.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgEthPortLinkState.setDescription('link state')
mbgLtNgConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1))
mbgLtNgCfgEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0))
mbgLtNgCfgEthernetHostname = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 1), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetHostname.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEthernetHostname.setDescription("devices' hostname")
mbgLtNgCfgEthernetDomain = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetDomain.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEthernetDomain.setDescription("devices' domain membership")
mbgLtNgCfgEthernetNameserver1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 3), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetNameserver1.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEthernetNameserver1.setDescription("first nameserver's ip address")
mbgLtNgCfgEthernetNameserver2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 4), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetNameserver2.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEthernetNameserver2.setDescription("second nameserver's ip address")
mbgLtNgCfgEthernetIpv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 5), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetIpv4Gateway.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEthernetIpv4Gateway.setDescription("device's ethernet ipv4 gateway")
mbgLtNgCfgEthernetIpv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 6), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetIpv6Gateway.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEthernetIpv6Gateway.setDescription("device's ethernet ipv6 gateway")
mbgLtNgCfgNumberOfPhysicalIf = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgNumberOfPhysicalIf.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNumberOfPhysicalIf.setDescription('number of virtual interfaces interfaces')
mbgLtNgCfgNumberOfVirtualIf = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgNumberOfVirtualIf.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNumberOfVirtualIf.setDescription('number of virtual interfaces interfaces')
mbgLtNgCfgPhysicalIfTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9), )
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfTable.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfTable.setDescription('a table of service stati for the ethernet interfaces')
mbgLtNgCfgPhysicalIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPhysicalIfIndex"))
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfTableEntry.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfTableEntry.setDescription('a list of objects pertaining to a mrs input reference')
mbgLtNgCfgPhysicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfIndex.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfIndex.setDescription('specifies the physical interface index')
mbgLtNgCfgPhysicalIfMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfMac.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfMac.setDescription("interface's physical MAC address")
mbgLtNgCfgPhysicalIfNetLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("auto", 0), ("hd10Mbit", 1), ("fd10Mbit", 2), ("hd100Mbit", 3), ("fd100Mbit", 4), ("hd1000Mbit", 5), ("fd1000Mbit", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfNetLinkMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfNetLinkMode.setDescription("interface's net link mode; hd = half-duplex; fd = full-duplex")
mbgLtNgCfgPhysicalIfIndicateLink = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9, 1, 4), MeinbergSwitch().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfIndicateLink.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfIndicateLink.setDescription('indicate link via front panel LED')
mbgLtNgCfgPhysicalIfBondingGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfBondingGroup.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfBondingGroup.setDescription("assign interface to bonding group; '0' means not assigned")
mbgLtNgCfgPhysicalIfIpv6Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("deactivated", 0), ("activated", 1), ("activatedWithAutoconf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfIpv6Mode.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPhysicalIfIpv6Mode.setDescription('enable IPv6 mode')
mbgLtNgCfgVirtualIfTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10), )
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfTable.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfTable.setDescription('a table of service stati for the ethernet interfaces')
mbgLtNgCfgVirtualIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIndex"))
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfTableEntry.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfTableEntry.setDescription('a list of objects pertaining to a mrs input reference')
mbgLtNgCfgVirtualIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIndex.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIndex.setDescription('specifies the virtual interface index')
mbgLtNgCfgVirtualIfIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4Addr.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4Addr.setDescription("interfaces' ipv4 address")
mbgLtNgCfgVirtualIfIpv4Netmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 3), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4Netmask.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4Netmask.setDescription("interfaces' ipv4 netmask")
mbgLtNgCfgVirtualIfIpv4Dhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 4), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4Dhcp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4Dhcp.setDescription('interface uses ipv4 dhcp?')
mbgLtNgCfgVirtualIfIpv4AddrFromDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 5), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4AddrFromDhcp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4AddrFromDhcp.setDescription("interfaces' ipv4 address received from dhcp")
mbgLtNgCfgVirtualIfIpv4NetmaskFromDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 6), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4NetmaskFromDhcp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4NetmaskFromDhcp.setDescription("interfaces' ipv4 netmask received from dhcp")
mbgLtNgCfgVirtualIfIpv4BroadcastFromDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 7), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4BroadcastFromDhcp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4BroadcastFromDhcp.setDescription("interfaces' ipv4 broadcast received from dhcp")
mbgLtNgCfgVirtualIfIpv4GatewayFromDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 8), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4GatewayFromDhcp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4GatewayFromDhcp.setDescription("interfaces' ipv4 gateway received from dhcp")
mbgLtNgCfgVirtualIfIpv4DnsFromDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 9), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4DnsFromDhcp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4DnsFromDhcp.setDescription("interfaces' ipv4 dns server received from dhcp")
mbgLtNgCfgVirtualIfIpv4DomainFromDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 10), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4DomainFromDhcp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv4DomainFromDhcp.setDescription("interfaces' ipv4 dns server received from dhcp")
mbgLtNgCfgVirtualIfIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 11), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv6Addr.setDescription("interfaces' ipv6 address")
mbgLtNgCfgVirtualIfIpv6Dhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 12), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv6Dhcp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv6Dhcp.setDescription('interfaces uses ipv6 dhcp')
mbgLtNgCfgVirtualIfIpv6RoutAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 13), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv6RoutAdd.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv6RoutAdd.setDescription("interfaces' router advertisement ipv6 address")
mbgLtNgCfgVirtualIfIpv6LinkLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 14), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv6LinkLocal.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfIpv6LinkLocal.setDescription("interfaces' ipv6 link local address")
mbgLtNgCfgVirtualIfAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfAssigned.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfAssigned.setDescription('mapping to the physical interface this virtual one is assigned to')
mbgLtNgCfgVirtualIfMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 16), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfMac.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfMac.setDescription('MAC-address of this virtual interface')
mbgLtNgCfgVirtualIfLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 17), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfLabel.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfLabel.setDescription('user description for this label (like an alias)')
mbgLtNgCfgVirtualIfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 18), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfVlan.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfVlan.setDescription('is vlan enabled')
mbgLtNgCfgVirtualIfVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfVlanTag.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfVlanTag.setDescription('vlan tag')
mbgLtNgCfgVirtualIfVlanPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfVlanPrio.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfVlanPrio.setDescription('vlan priority')
mbgLtNgCfgVirtualIfCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 21), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfCluster.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfCluster.setDescription('is cluster mode enabled')
mbgLtNgCfgVirtualIfClusterIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 22), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfClusterIpv4Addr.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfClusterIpv4Addr.setDescription('ipv4 cluster address')
mbgLtNgCfgVirtualIfClusterIpv4Netmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 23), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfClusterIpv4Netmask.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfClusterIpv4Netmask.setDescription('cluster ipv4 netmask')
mbgLtNgCfgVirtualIfClusterPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfClusterPrio.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfClusterPrio.setDescription('cluster priority')
mbgLtNgCfgVirtualIfServiceNtp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 25), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceNtp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceNtp.setDescription('is ntp active on this interface')
mbgLtNgCfgVirtualIfServiceHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 26), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceHttp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceHttp.setDescription('is http active on this interface')
mbgLtNgCfgVirtualIfServiceHttps = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 27), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceHttps.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceHttps.setDescription('is https active on this interface')
mbgLtNgCfgVirtualIfServiceTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 28), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceTelnet.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceTelnet.setDescription('is telnet active on this interface')
mbgLtNgCfgVirtualIfServiceSsh = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 29), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceSsh.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceSsh.setDescription('is ssh active on this interface')
mbgLtNgCfgVirtualIfServiceSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 30), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceSnmp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceSnmp.setDescription('is snmp active on this interface')
mbgLtNgCfgVirtualIfServiceFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 31), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceFtp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceFtp.setDescription('is ftp active on this interface')
mbgLtNgCfgVirtualIfServiceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 32), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceTime.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceTime.setDescription('is time active on this interface')
mbgLtNgCfgVirtualIfServiceDaytime = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 33), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceDaytime.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceDaytime.setDescription('is daytime active on this interface')
mbgLtNgCfgVirtualIfServiceFpc = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 10, 1, 34), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceFpc.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVirtualIfServiceFpc.setDescription('is fpc active on this interface')
mbgLtNgCfgEthernetGenClusterPort = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetGenClusterPort.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEthernetGenClusterPort.setDescription('general cluster port')
mbgLtNgCfgEthernetGenClusterIp = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 0, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEthernetGenClusterIp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEthernetGenClusterIp.setDescription('general multicast cluster address')
mbgLtNgCfgNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1))
mbgLtNgCfgSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 0))
mbgLtNgCfgSyslogServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 0, 1), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSyslogServerAddr.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSyslogServerAddr.setDescription('comma separated string of all configured syslog servers;\n         use such a list to set syslog servers')
mbgLtNgCfgSyslogLoglevel = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 0, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSyslogLoglevel.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSyslogLoglevel.setDescription('loglevel for syslog server')
mbgLtNgCfgEmail = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1))
mbgLtNgCfgEmailTo = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1, 1), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEmailTo.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEmailTo.setDescription('email address to send alerts etc. to (receiving address)')
mbgLtNgCfgEmailFrom = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEmailFrom.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEmailFrom.setDescription('email address to send alerts etc. from (sending address)')
mbgLtNgCfgEmailSmarthostAddr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1, 3), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEmailSmarthostAddr.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEmailSmarthostAddr.setDescription('SMTP smarthost used to send mail (ip or hostname)')
mbgLtNgCfgEmailSmarthostPort = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEmailSmarthostPort.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEmailSmarthostPort.setDescription('SMTP smarthost listenning port')
mbgLtNgCfgEmailSmarthostAuth = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1, 5), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEmailSmarthostAuth.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEmailSmarthostAuth.setDescription('use authentication for smarthost')
mbgLtNgCfgEmailSmarthostAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1, 6), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEmailSmarthostAuthUser.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEmailSmarthostAuthUser.setDescription('user to authenticate at smarthost')
mbgLtNgCfgEmailSmarthostAuthPw = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 1, 7), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEmailSmarthostAuthPw.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEmailSmarthostAuthPw.setDescription('password to authenticate user at smarthost')
mbgLtNgCfgWinpopup = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 2))
mbgLtNgCfgWmailAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 2, 1), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgWmailAddress1.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgWmailAddress1.setDescription('first windows popup alert receiver (ip or hostname)')
mbgLtNgCfgWmailAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 2, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgWmailAddress2.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgWmailAddress2.setDescription('second windows popup alert receiver (ip or hostname)')
mbgLtNgCfgSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3))
mbgLtNgCfgSnmpTrapRecTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 1), )
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecTable.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecTable.setDescription('a table of SNMP trap receiver information')
mbgLtNgCfgSnmpTrapRecTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 1, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpTrapRecIndex"))
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecTableEntry.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecTableEntry.setDescription('a list of objects pertaining to an interface and concerning broad-, multi- and manycast')
mbgLtNgCfgSnmpTrapRecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecIndex.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecIndex.setDescription('index of different SNMP trap receivers')
mbgLtNgCfgSnmpTrapRecAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 1, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecAddr.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecAddr.setDescription('SNMP trap receiver address (ip or hostname)')
mbgLtNgCfgSnmpTrapRecCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 1, 1, 3), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecCommunity.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecCommunity.setDescription('SNMP trap receiver community')
mbgLtNgCfgSnmpTrapRecVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecVersion.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTrapRecVersion.setDescription('SNMP trap receiver version')
mbgLtNgCfgSnmpReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 2), DisplayString().clone('****')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpReadCommunity.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpReadCommunity.setDescription('read community for SNMPv1 and SNMPv2c')
mbgLtNgCfgSnmpWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 3), DisplayString().clone('****')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpWriteCommunity.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpWriteCommunity.setDescription('read community for SNMPv1 and SNMPv2c')
mbgLtNgCfgSnmpContact = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 4), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpContact.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpContact.setDescription('SNMP contact string for Lantime')
mbgLtNgCfgSnmpLocation = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 5), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpLocation.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpLocation.setDescription('SNMP location string for Lantime')
mbgLtNgCfgSnmpV3UserName = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 6), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3UserName.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3UserName.setDescription('username for SNMPv3')
mbgLtNgCfgSnmpV3UserRights = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("readonly", 0), ("readwrite", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3UserRights.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3UserRights.setDescription('privacy protocol for SNMPv3')
mbgLtNgCfgSnmpV3Context = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 8), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3Context.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3Context.setDescription('context string for SNMPv3')
mbgLtNgCfgSnmpV3SecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAuthNoPriv", 0), ("authNoPriv", 1), ("authPriv", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3SecurityLevel.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3SecurityLevel.setDescription('authentication level for SNMPv3')
mbgLtNgCfgSnmpV3AuthProtocol = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("md5", 0), ("sha", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3AuthProtocol.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3AuthProtocol.setDescription('authentication protocol for SNMPv3')
mbgLtNgCfgSnmpV3AuthPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 11), DisplayString().clone('****')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3AuthPassphrase.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3AuthPassphrase.setDescription('authentication passphrase for SNMPv3')
mbgLtNgCfgSnmpV3PrivProtocol = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("des", 0), ("aes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3PrivProtocol.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3PrivProtocol.setDescription('privacy protocol for SNMPv3')
mbgLtNgCfgSnmpV3PrivPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 13), DisplayString().clone('****')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3PrivPassphrase.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpV3PrivPassphrase.setDescription('privacy passphrase for SNMPv3')
mbgLtNgCfgSnmpRetries = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 14), Unsigned32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpRetries.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpRetries.setDescription('number of retries for sending traps')
mbgLtNgCfgSnmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 15), Unsigned32().clone(3)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTimeout.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpTimeout.setDescription('timeout for sending traps (in seconds)')
mbgLtNgCfgSnmpEnabledVersion = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("v1ANDv2c", 0), ("v3only", 1), ("v1ANDv2cANDv3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSnmpEnabledVersion.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSnmpEnabledVersion.setDescription('currently enabled SNMP version')
mbgLtNgCfgWalldisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 4))
mbgLtNgCfgVP100Display1Addr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 4, 1), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVP100Display1Addr.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVP100Display1Addr.setDescription('address of wall display (ip or hostname)')
mbgLtNgCfgVP100Display1SN = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 4, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVP100Display1SN.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVP100Display1SN.setDescription('serial number of first VP100 wall display')
mbgLtNgCfgVP100Display2Addr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 4, 3), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVP100Display2Addr.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVP100Display2Addr.setDescription('address of wall display (ip or hostname)')
mbgLtNgCfgVP100Display2SN = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 4, 4), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgVP100Display2SN.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgVP100Display2SN.setDescription('serial number of second VP100 wall display')
mbgLtNgCfgNtpClientMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 5))
mbgLtNgCfgNtpMaxClientOffset = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 5, 1), Unsigned32().clone(10)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpMaxClientOffset.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpMaxClientOffset.setDescription('max NTP client offset limit in milliseconds')
mbgLtNgCfgNtpMaxClientStratum = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 5, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpMaxClientStratum.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpMaxClientStratum.setDescription('max NTP client stratum level')
mbgLtNgCfgTrapTrigger = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6))
mbgLtNgCfgTrapNormalOperation = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 1), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNormalOperation.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapNormalOperation.setDescription("string containing signaling information ( comma-separated ); use the following aliases to set params:\n        Email\t-> email\n        Wmail\t-> wmail\n        Snmp\t-> snmp\n        VP100\t-> disp\n        User\t-> own\n        Alarm\t-> led\n        Relay\t-> relais\n        Following string is perfectly valid to enable signaling for SNMP and Email: 'snmp,email'.\n        Please note that some objects do not suppurt relay and led but this is announced at each MIB object itself.\n        This object, for example, does not support them.")
mbgLtNgCfgTrapNtpNotSync = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNtpNotSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapNtpNotSync.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapNtpSync = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 3), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNtpSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapNtpSync.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapNtpStopped = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 4), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNtpStopped.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapNtpStopped.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapServerBoot = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 5), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapServerBoot.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapServerBoot.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapRefclockNotResponding = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 6), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefclockNotResponding.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefclockNotResponding.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapRefclockSynchronized = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 7), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefclockSynchronized.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefclockSynchronized.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapRefclockNotSynchronized = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 8), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefclockNotSynchronized.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefclockNotSynchronized.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapSecRefclockNotResponding = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 9), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapSecRefclockNotResponding.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapSecRefclockNotResponding.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapSecRefclockSynchronized = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 10), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapSecRefclockSynchronized.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapSecRefclockSynchronized.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapSecRefclockNotSynchronized = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 11), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapSecRefclockNotSynchronized.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapSecRefclockNotSynchronized.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapAntennaFaulty = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 12), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapAntennaFaulty.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapAntennaFaulty.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapAntennaReconnect = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 13), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapAntennaReconnect.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapAntennaReconnect.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapAntennaShortCircuit = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 14), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapAntennaShortCircuit.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapAntennaShortCircuit.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapConfigChanged = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 15), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapConfigChanged.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapConfigChanged.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapLeapSecAnnounced = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 16), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapLeapSecAnnounced.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapLeapSecAnnounced.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapNtpClientLimitExceeded = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 17), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNtpClientLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapNtpClientLimitExceeded.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapRefSrcLimitExceeded = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 18), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefSrcLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefSrcLimitExceeded.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapRefSrcDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 19), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefSrcDisconnected.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefSrcDisconnected.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapRefSrcReconnected = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 20), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefSrcReconnected.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapRefSrcReconnected.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapShsTimeLimitError = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 21), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapShsTimeLimitError.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapShsTimeLimitError.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapShsTimeLimitWarning = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 22), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapShsTimeLimitWarning.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapShsTimeLimitWarning.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapNetworkDown = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 23), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNetworkDown.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapNetworkDown.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapNetworkUp = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 24), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNetworkUp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapNetworkUp.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapPowerSupplyUp = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 25), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapPowerSupplyUp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapPowerSupplyUp.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapPowerSupplyDown = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 26), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapPowerSupplyDown.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapPowerSupplyDown.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapFdmError = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 27), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapFdmError.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapFdmError.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapLowSystemResources = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 28), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapLowSystemResources.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapLowSystemResources.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapPtpNetworkDown = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 29), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapPtpNetworkDown.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapPtpNetworkDown.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapPtpNetworkUp = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 30), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapPtpNetworkUp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapPtpNetworkUp.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapPtpStateChanged = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 31), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapPtpStateChanged.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapPtpStateChanged.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapPtpError = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 32), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapPtpError.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapPtpError.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapFanDown = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 33), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapFanDown.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapFanDown.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapFanUp = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 34), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapFanUp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapFanUp.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgRepeatEvent = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("never", 0), ("everyMinute", 1), ("everyHour", 2), ("everyDay", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgRepeatEvent.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgRepeatEvent.setDescription('when to send last error trap message again')
mbgLtNgCfgRepetitions = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgRepetitions.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgRepetitions.setDescription('how often do you want to resend an error trap')
mbgLtNgCfgTrapWarmedUp = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 37), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapWarmedUp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapWarmedUp.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgTrapNotWarmedUp = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 1, 6, 38), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgTrapNotWarmedUp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgTrapNotWarmedUp.setDescription("see 'mbgLtNgCfgTrapNormalOperation' for a detailed explanation")
mbgLtNgCfgSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2))
mbgLtNgCfgLoginAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 0))
mbgLtNgCfgDisableRootLogin = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 0, 1), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgDisableRootLogin.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgDisableRootLogin.setDescription("do not allow user 'root' to login")
mbgLtNgCfgAllowNetworkDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 0, 2), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgAllowNetworkDiscovery.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgAllowNetworkDiscovery.setDescription('allow LANTIME to be discovered via network mdns')
mbgLtNgCfgFrontPanel = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 1))
mbgLtNgCfgLockFrontPanel = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 1, 1), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgLockFrontPanel.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgLockFrontPanel.setDescription('do not allow usage of the front panel')
mbgLtNgCfgDisableUsbPort = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 1, 2), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgDisableUsbPort.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgDisableUsbPort.setDescription('do not allow usage of front USB port')
mbgLtNgCfgSsh = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 2))
mbgLtNgCfgSshKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 2, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(768, 768), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), ValueRangeConstraint(8192, 8192), ValueRangeConstraint(16384, 16384), ValueRangeConstraint(32768, 32768), )).clone(1024)).setUnits('bits').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSshKeyLength.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSshKeyLength.setDescription('ssh key length in bits')
mbgLtNgCfgSshShellTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 2, 2, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 60), ValueRangeConstraint(120, 120), ValueRangeConstraint(300, 300), ValueRangeConstraint(600, 600), ValueRangeConstraint(3600, 3600), ValueRangeConstraint(10800, 10800), ValueRangeConstraint(18000, 18000), ValueRangeConstraint(86400, 86400), )).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgSshShellTimeout.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgSshShellTimeout.setDescription('ssh shell timeout in seconds')
mbgLtNgCfgNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3))
mbgLtNgCfgNtpTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1), )
if mibBuilder.loadTexts: mbgLtNgCfgNtpTable.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpTable.setDescription('a table of configured, external NTP servers')
mbgLtNgCfgNtpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpIndex"))
if mibBuilder.loadTexts: mbgLtNgCfgNtpTableEntry.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpTableEntry.setDescription('a list of objects pertaining to a configured,external NTP server')
mbgLtNgCfgNtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: mbgLtNgCfgNtpIndex.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpIndex.setDescription('index (and no.) of external NTP server')
mbgLtNgCfgNtpServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerIP.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerIP.setDescription('ip address for external NTP server')
mbgLtNgCfgNtpServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerKey.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerKey.setDescription('key for external NTP server')
mbgLtNgCfgNtpServerAutokey = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1, 4), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerAutokey.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerAutokey.setDescription('is autokey enabled for the external NTP server')
mbgLtNgCfgNtpServerMinpoll = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerMinpoll.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerMinpoll.setDescription('is autokey enabled for the external NTP server')
mbgLtNgCfgNtpServerMaxpoll = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerMaxpoll.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerMaxpoll.setDescription('is autokey enabled for the external NTP server')
mbgLtNgCfgNtpServerIburst = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 1, 1, 7), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerIburst.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpServerIburst.setDescription('is autokey enabled for the external NTP server')
mbgLtNgCfgNtpBMTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 2), )
if mibBuilder.loadTexts: mbgLtNgCfgNtpBMTable.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpBMTable.setDescription('a table of configured, external NTP servers')
mbgLtNgCfgNtpBMTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 2, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpBMIndex"))
if mibBuilder.loadTexts: mbgLtNgCfgNtpBMTableEntry.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpBMTableEntry.setDescription('a list of objects pertaining to an interface and concerning broad-, multi- and manycast')
mbgLtNgCfgNtpBMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: mbgLtNgCfgNtpBMIndex.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpBMIndex.setDescription('index of interface concerning different NTP modes')
mbgLtNgCfgNtpBroadAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 2, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgNtpBroadAddr.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpBroadAddr.setDescription('address for NTP broadcast mode')
mbgLtNgCfgNtpBroadSymKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgNtpBroadSymKey.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpBroadSymKey.setDescription('symmetric key number for broadcast')
mbgLtNgCfgNtpBroadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgNtpBroadInterval.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpBroadInterval.setDescription('NTP broadcast interval on specific interval')
mbgLtNgCfgNtpBroadUseAutokey = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 2, 1, 5), MeinbergSwitch()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgNtpBroadUseAutokey.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpBroadUseAutokey.setDescription('use autokey for broadcast')
mbgLtNgCfgNtpEnableMulticast = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 3), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpEnableMulticast.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpEnableMulticast.setDescription('enable or disable multicast mode')
mbgLtNgCfgNtpMultiAddr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 4), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpMultiAddr.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpMultiAddr.setDescription('address for NTP multicast mode')
mbgLtNgCfgNtpMultiInterval = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpMultiInterval.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpMultiInterval.setDescription('NTP multicast interval on specific interval')
mbgLtNgCfgNtpMultiSymKey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpMultiSymKey.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpMultiSymKey.setDescription('symmetric key number for multicast')
mbgLtNgCfgNtpMultiUseAutokey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 7), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpMultiUseAutokey.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpMultiUseAutokey.setDescription('use autokey for multicast')
mbgLtNgCfgNtpEnableManycast = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 8), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpEnableManycast.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpEnableManycast.setDescription('enable or disable manycast mode for this interface')
mbgLtNgCfgNtpManyAddr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 9), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpManyAddr.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpManyAddr.setDescription('address for NTP manycast mode')
mbgLtNgCfgNtpManySymKey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpManySymKey.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpManySymKey.setDescription('symmetric key number for manycast')
mbgLtNgCfgNtpManyUseAutokey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 12), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpManyUseAutokey.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpManyUseAutokey.setDescription('use autokey for manycast')
mbgLtNgCfgNtpLocalClkStratum = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpLocalClkStratum.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpLocalClkStratum.setDescription('stratum of local clock')
mbgLtNgCfgNtpDisableLocalClk = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 14), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpDisableLocalClk.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpDisableLocalClk.setDescription('disable local clock')
mbgLtNgCfgNtpSpoofLocalTime = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 15), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpSpoofLocalTime.setStatus('obsolete')
if mibBuilder.loadTexts: mbgLtNgCfgNtpSpoofLocalTime.setDescription('NTP outputs local time instead of UTC; see mbgLtNgCfgNtpTimeScale')
mbgLtNgCfgNtpLocalTrustedKeys = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 16), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpLocalTrustedKeys.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpLocalTrustedKeys.setDescription('local trusted key')
mbgLtNgCfgNtpTrusttime = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 17), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpTrusttime.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpTrusttime.setDescription('accept async reference clock for this amount of time in seconds')
mbgLtNgCfgNtpTimeScale = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("utc", 0), ("local", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpTimeScale.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpTimeScale.setDescription('timescale')
mbgLtNgCfgNtpEnableClientCounter = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 19), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpEnableClientCounter.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpEnableClientCounter.setDescription('enable NTP request client counting')
mbgLtNgCfgNtpEnableClientCounterDuration = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgNtpEnableClientCounterDuration.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgNtpEnableClientCounterDuration.setDescription('NTP client counter duration in seconds; 0 means continuously')
mbgLtNgCfgPtp = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4))
mbgLtNgCfgPtpTable = MibTable((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1), )
if mibBuilder.loadTexts: mbgLtNgCfgPtpTable.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpTable.setDescription('a table of PTPv2 related configurtion variables')
mbgLtNgCfgPtpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1), ).setIndexNames((0, "MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpIndex"))
if mibBuilder.loadTexts: mbgLtNgCfgPtpTableEntry.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpTableEntry.setDescription('a list of configuration objects pertaining to a PTPv2 module')
mbgLtNgCfgPtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mbgLtNgCfgPtpIndex.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpIndex.setDescription('index for PTPv2 module')
mbgLtNgCfgPtpHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpHostname.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpHostname.setDescription('network hostname')
mbgLtNgCfgPtpDomainname = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 3), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpDomainname.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpDomainname.setDescription('network domain')
mbgLtNgCfgPtpNameserver1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 4), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpNameserver1.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpNameserver1.setDescription('ethernet nameserver for hostname resolving')
mbgLtNgCfgPtpNameserver2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 5), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpNameserver2.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpNameserver2.setDescription('ethernet nameserver for hostname resolving')
mbgLtNgCfgPtpIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 6), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpIpv4.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpIpv4.setDescription('ip address')
mbgLtNgCfgPtpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 7), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpNetmask.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpNetmask.setDescription('netmask')
mbgLtNgCfgPtpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 8), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpGateway.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpGateway.setDescription('default gateway')
mbgLtNgCfgPtpEnableVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 9), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpEnableVlan.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpEnableVlan.setDescription('Enable VLAN if it is supported')
mbgLtNgCfgPtpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpVlanId.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpVlanId.setDescription('VLAN id ranges from 0-4096')
mbgLtNgCfgPtpVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpVlanPriority.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpVlanPriority.setDescription('VLAN priority ranges from 0-7')
mbgLtNgCfgPtpEnableDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 12), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpEnableDhcp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpEnableDhcp.setDescription('Enable DCHP for PTPv2 module')
mbgLtNgCfgPtpIpv6Avail = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgPtpIpv6Avail.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpIpv6Avail.setDescription('Is IPv6 supported?')
mbgLtNgCfgPtpIpv6Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("static", 0), ("ra", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpIpv6Mode.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpIpv6Mode.setDescription('IPv6 addressing mode')
mbgLtNgCfgPtpIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 25), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpIpv6Address.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpIpv6Address.setDescription('IPv6 address if supported, else n/a')
mbgLtNgCfgPtpIpv6McastScope = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 14))).clone(namedValues=NamedValues(("intfLocal", 1), ("linkLocal", 2), ("realmLocal", 3), ("adminLocal", 4), ("siteLocal", 5), ("orgaLocal", 8), ("globalScope", 14))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpIpv6McastScope.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpIpv6McastScope.setDescription('Multicast scope. See RFC 7346 and RFC 4291')
mbgLtNgCfgPtpDisableSsh = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 27), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpDisableSsh.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpDisableSsh.setDescription('Disable SSH for PTP port')
mbgLtNgCfgPtpDscpClass = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpDscpClass.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpDscpClass.setDescription('DSCP classification value ranges from 0-64')
mbgLtNgCfgPtpMcastTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpMcastTtl.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpMcastTtl.setDescription('Multicast TTL value ranges from 0-255')
mbgLtNgCfgPtpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("multicastSlave", 0), ("unicastSlave", 1), ("multicastMaster", 2), ("unicastMaster", 3), ("multicastAuto", 4), ("bothMaster", 5), ("ntpServer", 6), ("ntpClient", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpMode.setDescription('PTP mode')
mbgLtNgCfgPtpDelayMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("e2e", 0), ("p2p", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpDelayMechanism.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpDelayMechanism.setDescription('how to calculate delay mechanism')
mbgLtNgCfgPtpNetworkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("reserved", 0), ("udpIpv4", 1), ("udpIpv6", 2), ("ieee8023", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpNetworkProtocol.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpNetworkProtocol.setDescription('how to calculate delay mechanism')
mbgLtNgCfgPtpDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpDomainNumber.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpDomainNumber.setDescription('ptp domain membership')
mbgLtNgCfgPtpPriority1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpPriority1.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpPriority1.setDescription('ptp user defined major priority')
mbgLtNgCfgPtpPriority2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpPriority2.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpPriority2.setDescription('ptp user defined minor priority')
mbgLtNgCfgPtpSyncInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-7, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncInterval.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncInterval.setDescription('value is defined as power of 2;\n          for example:\n             2 = one message every 4 seconds,\n            -2 = 4 messages every second')
mbgLtNgCfgPtpAnnounceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-7, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpAnnounceInterval.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpAnnounceInterval.setDescription("see 'mbgLtNgCfPtpSyncInterval' for explanation")
mbgLtNgCfgPtpDelayReqInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-7, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpDelayReqInterval.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpDelayReqInterval.setDescription("see 'mbgLtNgCfPtpSyncInterval' for explanation")
mbgLtNgCfgPtpTimescale = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("arbitrary", 0), ("ptp", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpTimescale.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpTimescale.setDescription("see 'mbgLtNgCfPtpSyncInterval' for explanation")
mbgLtNgCfgPtpOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ptp", 0), ("ntp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpOpMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpOpMode.setDescription('General PTP operation mode')
mbgLtNgCfgPtpProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("custom", 0), ("defE2eIeee15882008", 1), ("defP2pIeee15882008", 2), ("powIeeeC37238", 3), ("telItuTG82651", 4), ("telItuTG82751", 5), ("smpteSt20592", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgPtpProfile.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpProfile.setDescription('PTP profile')
mbgLtNgCfgPtpHybridMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 32), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpHybridMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpHybridMode.setDescription('Run card in hybrid mode')
mbgLtNgCfgPtpUcastMstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 33), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpUcastMstAddr.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpUcastMstAddr.setDescription('IP address of unicast master\n         when in slave mode. Only 1!!!\n         is shown and can be set.')
mbgLtNgCfgPtpAnnRcptTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpAnnRcptTmout.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpAnnRcptTmout.setDescription('Timeout for announce messages')
mbgLtNgCfgPtpMessageDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpMessageDuration.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpMessageDuration.setDescription('Time period until master stops\n          sending messages [s]')
mbgLtNgCfgPtpSyncEAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 36), MeinbergSwitch()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEAvail.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEAvail.setDescription('Is SyncE supported?')
mbgLtNgCfgPtpSyncEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 37), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEEnabled.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEEnabled.setDescription('Is Sync-E enabled if supported?')
mbgLtNgCfgPtpSyncEQltLvlSelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 38), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEQltLvlSelEnable.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEQltLvlSelEnable.setDescription('Enable quality selection?')
mbgLtNgCfgPtpSyncESdhNwOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("opt1", 0), ("opt2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncESdhNwOption.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncESdhNwOption.setDescription('Sdh network option')
mbgLtNgCfgPtpSyncEInputSsm = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("stuUkn", 0), ("prs", 1), ("prc", 2), ("inv3", 3), ("ssuATnc", 4), ("inv5", 5), ("inv6", 6), ("st2", 7), ("ssuB", 8), ("inv9", 9), ("eec2St3", 10), ("eec1Sec", 11), ("smc", 12), ("st3e", 13), ("prov", 14), ("dnuDus", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEInputSsm.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEInputSsm.setDescription('Input SSMs combied for both options.\n          You should be aware of using which code when.')
mbgLtNgCfgPtpSyncEOutputSsm = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("stuUkn", 0), ("prs", 1), ("prc", 2), ("inv3", 3), ("ssuATnc", 4), ("inv5", 5), ("inv6", 6), ("st2", 7), ("ssuB", 8), ("inv9", 9), ("eec2St3", 10), ("eec1Sec", 11), ("smc", 12), ("st3e", 13), ("prov", 14), ("dnuDus", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEOutputSsm.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEOutputSsm.setDescription('Input SSMs combined for both options.\n          You should be aware of using which code when.')
mbgLtNgCfgPtpSyncEGbitCopperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 0), ("forceSyncEAuto", 1), ("forceOrIsMaster", 2), ("forceOrIsSlave", 3), ("preferMaster", 4), ("preferSlave", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEGbitCopperMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpSyncEGbitCopperMode.setDescription('Gigabit copper modes')
mbgLtNgCfgPtpMiscEnable1Step = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 43), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpMiscEnable1Step.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpMiscEnable1Step.setDescription('Enable PTP 1 step if supported')
mbgLtNgCfgPtpDisableMgmtMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 44), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpDisableMgmtMsgs.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpDisableMgmtMsgs.setDescription('Disable management messages if suppported')
mbgLtNgCfgPtpOutput1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 0), ("pps", 1), ("mhz10", 2), ("khzGPS2048", 3), ("mhzGPS10", 4), ("ppsGPS", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpOutput1.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpOutput1.setDescription('Additional I/O output if suppported')
mbgLtNgCfgPtpOutput2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 0), ("pps", 1), ("mhz10", 2), ("khzGPS2048", 3), ("mhzGPS10", 4), ("ppsGPS", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpOutput2.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpOutput2.setDescription('Additional I/O output if suppported')
mbgLtNgCfgPtpCmd = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("configure", 1), ("reset", 2), ("apply", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgPtpCmd.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgPtpCmd.setDescription('Configuration commands')
mbgLtNgCfgSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 5))
mbgLtNgCfgGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 5, 0))
mbgLtNgCfgWebLanguage = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 5, 0, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("englisch", 1), ("german", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgCfgWebLanguage.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgWebLanguage.setDescription('set language for web interface')
mbgLtNgCfgActivateChangesAsStartup = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 5, 0, 2), MeinbergSwitch().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgActivateChangesAsStartup.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgActivateChangesAsStartup.setDescription('activate changes automatically as startup configuration')
mbgLtNgCfgDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 1, 5, 1))
mbgLtNgCfgEnableFrontPanelLight = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 1, 5, 1, 1), MeinbergSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCfgEnableFrontPanelLight.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCfgEnableFrontPanelLight.setDescription('active light at front panel')
mbgLtNgCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 2))
mbgLtNgCmdExecute = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("applyChanges", 1), ("saveChanges", 2), ("saveAndApplyChanges", 3), ("startFirmwareUpdate", 4), ("reboot", 5), ("resendErrorConditions", 6), ("sendTestNotifications", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCmdExecute.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCmdExecute.setDescription('Send a command to the timeserver to be executed;\n         Attention: Command should be executed with a timeout of 120 seconds and 0 retries')
mbgLtNgCmdSetTime = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 2, 2), DisplayString().clone('n/a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtNgCmdSetTime.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCmdSetTime.setDescription("Reference time can be set via a date-time string in format:\n             yyyy-mm-dd hh:mm:ss\n             Time is interpreted as configured via web interface at menu:\n             'Receiver'->'Time Zone'\n             It is mandatory to unplug the receiver's antenna to make this work.\n             and strongly advised to execute a SNMPSET WITHOUT retries\n             and a timeout value greater than 60 seconds. Otherwise\n             there might come up unforeseen issues.\n             SNMPGET always returns default value.")
mbgLtNgTrapNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 3))
mbgLtNgTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0))
mbgLtNgTrapNTPNotSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 1))
if mibBuilder.loadTexts: mbgLtNgTrapNTPNotSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapNTPNotSync.setDescription('trap to be sent when NTP is not synchronised ')
mbgLtNgTrapNTPStopped = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 2))
if mibBuilder.loadTexts: mbgLtNgTrapNTPStopped.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapNTPStopped.setDescription('trap to be sent when NTP is stopped ')
mbgLtNgTrapServerBoot = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 3))
if mibBuilder.loadTexts: mbgLtNgTrapServerBoot.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapServerBoot.setDescription('trap to be sent when time server has finished boot sequence ')
mbgLtNgTrapReceiverNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 4))
if mibBuilder.loadTexts: mbgLtNgTrapReceiverNotResponding.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapReceiverNotResponding.setDescription('trap to be sent when receiver is not responding ')
mbgLtNgTrapReceiverNotSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 5))
if mibBuilder.loadTexts: mbgLtNgTrapReceiverNotSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapReceiverNotSync.setDescription('trap to be sent when receiver is not synchronised ')
mbgLtNgTrapAntennaFaulty = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 6))
if mibBuilder.loadTexts: mbgLtNgTrapAntennaFaulty.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapAntennaFaulty.setDescription('trap to be sent when connection to antenna is broken ')
mbgLtNgTrapAntennaReconnect = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 7))
if mibBuilder.loadTexts: mbgLtNgTrapAntennaReconnect.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapAntennaReconnect.setDescription('trap to be sent when antenna has been reconnected ')
mbgLtNgTrapConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 8))
if mibBuilder.loadTexts: mbgLtNgTrapConfigChanged.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapConfigChanged.setDescription('trap to be sent when timeserver reloaded its configuration ')
mbgLtNgTrapLeapSecondAnnounced = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 9))
if mibBuilder.loadTexts: mbgLtNgTrapLeapSecondAnnounced.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapLeapSecondAnnounced.setDescription('trap to be sent when a leap second has been announced ')
mbgLtNgTrapSHSTimeLimitError = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 10))
if mibBuilder.loadTexts: mbgLtNgTrapSHSTimeLimitError.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapSHSTimeLimitError.setDescription('trap to be sent when SHS timelimit exceeded ')
mbgLtNgTrapSecondaryRecNotSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 11))
if mibBuilder.loadTexts: mbgLtNgTrapSecondaryRecNotSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapSecondaryRecNotSync.setDescription('trap to be sent when secondary receiver in SHS system is not synchronised ')
mbgLtNgTrapPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 12))
if mibBuilder.loadTexts: mbgLtNgTrapPowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapPowerSupplyFailure.setDescription('trap to be sent when one of the redundant power supplies fails')
mbgLtNgTrapAntennaShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 13))
if mibBuilder.loadTexts: mbgLtNgTrapAntennaShortCircuit.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapAntennaShortCircuit.setDescription('trap to be sent when a connected antenna fails due to a short circuit')
mbgLtNgTrapReceiverSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 14))
if mibBuilder.loadTexts: mbgLtNgTrapReceiverSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapReceiverSync.setDescription('trap to be sent when receiver is synchronised ')
mbgLtNgTrapNTPClientAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 15))
if mibBuilder.loadTexts: mbgLtNgTrapNTPClientAlarm.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapNTPClientAlarm.setDescription('trap to be sent when an NTP Client Monitoring alarm occurs, e.g. when a monitored client is not reachable. ')
mbgLtNgTrapPowerSupplyUp = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 16))
if mibBuilder.loadTexts: mbgLtNgTrapPowerSupplyUp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapPowerSupplyUp.setDescription('trap to be sent when a power supply returned to a healthy state. ')
mbgLtNgTrapNetworkDown = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 17))
if mibBuilder.loadTexts: mbgLtNgTrapNetworkDown.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapNetworkDown.setDescription('trap to be sent when a monitored network port is down. ')
mbgLtNgTrapNetworkUp = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 18))
if mibBuilder.loadTexts: mbgLtNgTrapNetworkUp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapNetworkUp.setDescription('trap to be sent when a monitored network port is up. ')
mbgLtNgTrapSecondaryRecNotResp = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 19))
if mibBuilder.loadTexts: mbgLtNgTrapSecondaryRecNotResp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapSecondaryRecNotResp.setDescription('trap to be sent when secondary receiver is not responding ')
mbgLtNgTrapXmrLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 30))
if mibBuilder.loadTexts: mbgLtNgTrapXmrLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapXmrLimitExceeded.setDescription('trap to be sent when a reference offset exceeds the configured limit')
mbgLtNgTrapXmrRefDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 31))
if mibBuilder.loadTexts: mbgLtNgTrapXmrRefDisconnect.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapXmrRefDisconnect.setDescription('trap to be sent when a reference signal has been lost')
mbgLtNgTrapXmrRefReconnect = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 32))
if mibBuilder.loadTexts: mbgLtNgTrapXmrRefReconnect.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapXmrRefReconnect.setDescription('trap to be sent when a reference signal recovered')
mbgLtNgTrapFdmError = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 33))
if mibBuilder.loadTexts: mbgLtNgTrapFdmError.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapFdmError.setDescription('trap to be sent when the Fdm module generates an alarm ')
mbgLtNgTrapSHSTimeLimitWarning = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 34))
if mibBuilder.loadTexts: mbgLtNgTrapSHSTimeLimitWarning.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapSHSTimeLimitWarning.setDescription('trap to be sent when SHS warning limit exceeded ')
mbgLtNgTrapSecondaryRecSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 35))
if mibBuilder.loadTexts: mbgLtNgTrapSecondaryRecSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapSecondaryRecSync.setDescription('trap to be sent when secondary receiver is synchronised ')
mbgLtNgTrapNTPSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 36))
if mibBuilder.loadTexts: mbgLtNgTrapNTPSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapNTPSync.setDescription('trap to be sent when NTP is synchronised ')
mbgLtNgTrapPtpPortDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 37))
if mibBuilder.loadTexts: mbgLtNgTrapPtpPortDisconnected.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapPtpPortDisconnected.setDescription('trap to be sent when PTP network port got disconnected')
mbgLtNgTrapPtpPortConnected = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 38))
if mibBuilder.loadTexts: mbgLtNgTrapPtpPortConnected.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapPtpPortConnected.setDescription('trap to be sent when PTP network port got connected')
mbgLtNgTrapPtpStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 39))
if mibBuilder.loadTexts: mbgLtNgTrapPtpStateChanged.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapPtpStateChanged.setDescription("trap to be sent when PTP state changed (e.g. from 'passive' to 'master')")
mbgLtNgTrapPtpError = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 40))
if mibBuilder.loadTexts: mbgLtNgTrapPtpError.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapPtpError.setDescription('trap to be sent when PTP raised an error')
mbgLtNgTrapLowSystemResources = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 41))
if mibBuilder.loadTexts: mbgLtNgTrapLowSystemResources.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapLowSystemResources.setDescription('trap to be sent when system is running on low resources')
mbgLtNgTrapFanDown = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 45))
if mibBuilder.loadTexts: mbgLtNgTrapFanDown.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapFanDown.setDescription('trap to be sent when fan goes down')
mbgLtNgTrapFanUp = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 46))
if mibBuilder.loadTexts: mbgLtNgTrapFanUp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapFanUp.setDescription('trap to be sent when fan comes up')
mbgLtNgTrapCertificateExpired = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 47))
if mibBuilder.loadTexts: mbgLtNgTrapCertificateExpired.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapCertificateExpired.setDescription('trap to be sent when certificate expired or will expire')
mbgLtNgTrapSufficientSystemResources = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 48))
if mibBuilder.loadTexts: mbgLtNgTrapSufficientSystemResources.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapSufficientSystemResources.setDescription('trap to be sent when system has regained sufficient resources')
mbgLtNgTrapOscillatorWarmedUp = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 49))
if mibBuilder.loadTexts: mbgLtNgTrapOscillatorWarmedUp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapOscillatorWarmedUp.setDescription('trap to be sent when oscillator is not warmed up')
mbgLtNgTrapOscillatorNotWarmedUp = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 50))
if mibBuilder.loadTexts: mbgLtNgTrapOscillatorNotWarmedUp.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapOscillatorNotWarmedUp.setDescription('trap to be sent when oscillator is warmed up')
mbgLtNgTrapXmrRefChanged = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 51))
if mibBuilder.loadTexts: mbgLtNgTrapXmrRefChanged.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapXmrRefChanged.setDescription('trap to be sent when XMR reference source changed')
mbgLtNgTrapClusterMasterChanged = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 52))
if mibBuilder.loadTexts: mbgLtNgTrapClusterMasterChanged.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapClusterMasterChanged.setDescription('trap to be sent when cluster mode is active and cluster changed')
mbgLtNgTrapClusterFalsetickerDetected = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 53))
if mibBuilder.loadTexts: mbgLtNgTrapClusterFalsetickerDetected.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapClusterFalsetickerDetected.setDescription('trap to be sent when cluster mode is active and\n         a cluster member is dectected as falseticker')
mbgLtNgTrapClusterFalsetickerCleared = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 54))
if mibBuilder.loadTexts: mbgLtNgTrapClusterFalsetickerCleared.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapClusterFalsetickerCleared.setDescription('trap to be sent when cluster mode is active and\n         a cluster member is no longer a falseticker')
mbgLtNgTrapSHSTimeLimitOk = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 55))
if mibBuilder.loadTexts: mbgLtNgTrapSHSTimeLimitOk.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapSHSTimeLimitOk.setDescription('trap to be sent when SHS timelimit error has\n         been acknowledged or time difference drops\n         below warning limit.')
mbgLtNgTrapIMSError = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 56))
if mibBuilder.loadTexts: mbgLtNgTrapIMSError.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapIMSError.setDescription('trap to be sent when an IMS module is not\n         responsive anymore, has got temperature issues,\n         etc. ...')
mbgLtNgTrapIMSOk = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 57))
if mibBuilder.loadTexts: mbgLtNgTrapIMSOk.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapIMSOk.setDescription('trap to be sent when an IMS module returns\n         to healthy state.')
mbgLtNgTrapFDMOk = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 58))
if mibBuilder.loadTexts: mbgLtNgTrapFDMOk.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapFDMOk.setDescription('trap to be sent when an FDM module returns\n         to healthy state.')
mbgLtNgTrapNTPOffsetLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 59))
if mibBuilder.loadTexts: mbgLtNgTrapNTPOffsetLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapNTPOffsetLimitExceeded.setDescription('trap to be sent when monitoring an NTP client and its\n         offset limit is exceeded')
mbgLtNgTrapNTPOffsetLimitOk = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 60))
if mibBuilder.loadTexts: mbgLtNgTrapNTPOffsetLimitOk.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapNTPOffsetLimitOk.setDescription('trap to be sent when monitoring an NTP client and its\n         offset limit is back again in a valid range')
mbgLtNgTrapNormalOperation = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 77))
if mibBuilder.loadTexts: mbgLtNgTrapNormalOperation.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapNormalOperation.setDescription('trap to be sent when the system returned to a healthy state ')
mbgLtNgTrapHeartbeat = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 88))
if mibBuilder.loadTexts: mbgLtNgTrapHeartbeat.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapHeartbeat.setDescription('trap to be sent periodically to indicate that time server is still alive ')
mbgLtNgTrapTestNotification = NotificationType((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 99))
if mibBuilder.loadTexts: mbgLtNgTrapTestNotification.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapTestNotification.setDescription('trap to be sent when a test notification has been requested ')
mbgLtNgTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 5597, 30, 3, 0, 100), DisplayString().clone('no event')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNgTrapMessage.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapMessage.setDescription('used as a payload object for all traps, holds a clear text event message')
mbgLtNgConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 90))
mbgLtNgCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 90, 1))
mbgLtNgGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 30, 90, 2))
mbgLtNgCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5597, 30, 90, 1, 1)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgObjectsGroup"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbgLtNgCompliance = mbgLtNgCompliance.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgCompliance.setDescription('The compliance statement for SNMP entities which implement version 2\n                        of the LANTIME MIB')
mbgLtNgObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5597, 30, 90, 2, 1))
for _mbgLtNgObjectsGroup_obj in [[("MBG-SNMP-LTNG-MIB", "mbgLtNgSnmpSubagentVersion"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgFirmwareVersion"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSerialNumber"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSubagentTimeticks"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCpuSerialNumber"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCurrentState"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpStratum"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpRefclockName"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpRefclockOffset"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpVersion"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCStartedAt"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCDuration"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCNumberOfClients"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCTotalRequests"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCTotalRequestsLastHour"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCTotalRequestsLastMinute"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCTotalRequestsCurrentDay"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpCCTodaysClients"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpMrsServer"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNtpMrsOffset"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNumberOfRefclocks"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockType"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockUsage"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockState"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockSubstate"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockStatusA"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockMaxStatusA"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockStatusB"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockMaxStatusB"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockAdditionalInfo"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockLeapSecondDate"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsLatitude"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsLongitude"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsTdop"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsPdop"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsUtcOffset"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsAltitude"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockTimeDiff"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgRefclockGpsPos"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapMessage"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgNumberOfClusters"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterCommunicationIp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterPortState"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterMasterSerial"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterMasterIp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterMasterPriority"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterClockStatus"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterClockClass"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterReconfigurationState"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgClusterIsFalseticker"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpServerIP"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpServerKey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpServerAutokey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpServerMinpoll"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpServerMaxpoll"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpServerIburst"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpBroadAddr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpBroadInterval"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpBroadSymKey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpBroadUseAutokey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpEnableMulticast"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpMultiAddr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpMultiInterval"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpMultiSymKey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpMultiUseAutokey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpEnableManycast"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpManyAddr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpManySymKey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpManyUseAutokey"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpLocalTrustedKeys"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpTrusttime"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpTimeScale"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpLocalClkStratum"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpDisableLocalClk"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpSpoofLocalTime"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpEnableClientCounter"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpEnableClientCounterDuration"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpHostname"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpDomainname"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpNameserver1"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpNameserver2"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpIpv4"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpNetmask"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpGateway"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpEnableVlan"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpVlanId"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpVlanPriority"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpEnableDhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpIpv6Avail"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpIpv6Mode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpIpv6Address"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpIpv6McastScope"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpDisableSsh"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpDscpClass"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpMcastTtl"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpOpMode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpMode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpHybridMode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpUcastMstAddr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpProfile"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpDelayMechanism"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpNetworkProtocol"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpDomainNumber"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpPriority1"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpPriority2"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncInterval"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpAnnounceInterval"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpDelayReqInterval"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpTimescale"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpAnnRcptTmout"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpMessageDuration"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpCmd"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncEAvail"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncEEnabled"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncEQltLvlSelEnable"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncESdhNwOption"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncEInputSsm"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncEOutputSsm"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpSyncEGbitCopperMode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpMiscEnable1Step"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpDisableMgmtMsgs"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpOutput1"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPtpOutput2"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEmailTo"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgEthPortLinkState"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEmailFrom"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEmailSmarthostAddr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEmailSmarthostPort"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEmailSmarthostAuth"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEmailSmarthostAuthUser"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEmailSmarthostAuthPw"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpContact"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpLocation"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVP100Display1Addr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVP100Display1SN"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVP100Display2Addr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVP100Display2SN"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetHostname"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetDomain"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetNameserver1"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetNameserver2"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetIpv4Gateway"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetIpv6Gateway"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNumberOfPhysicalIf"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNumberOfVirtualIf"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPhysicalIfMac"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPhysicalIfNetLinkMode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPhysicalIfIndicateLink"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPhysicalIfBondingGroup"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgPhysicalIfIpv6Mode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4AddrFromDhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4NetmaskFromDhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4BroadcastFromDhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4GatewayFromDhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4DnsFromDhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4DomainFromDhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfAssigned"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfMac"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfLabel"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceNtp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceHttp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceHttps"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceTelnet"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceSsh"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceSnmp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceFtp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceTime"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceDaytime"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfServiceFpc"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4Addr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4Netmask"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv4Dhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv6Addr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv6Dhcp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv6RoutAdd"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfIpv6LinkLocal"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfVlan"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfVlanTag"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfVlanPrio"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfCluster"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfClusterIpv4Addr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfClusterIpv4Netmask"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgVirtualIfClusterPrio"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetGenClusterIp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEthernetGenClusterPort"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSyslogServerAddr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSyslogLoglevel"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgWmailAddress1"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgWmailAddress2"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpTrapRecAddr"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpTrapRecCommunity"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpTrapRecVersion"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpReadCommunity"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpWriteCommunity"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3UserName"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3UserRights"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3Context"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3SecurityLevel"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3AuthProtocol"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3AuthPassphrase"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3PrivProtocol"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpV3PrivPassphrase"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpRetries"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpTimeout"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSnmpEnabledVersion"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpMaxClientOffset"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgNtpMaxClientStratum"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNormalOperation"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNtpNotSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNtpSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNtpStopped"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapServerBoot"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapRefclockNotResponding"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapRefclockSynchronized"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapRefclockNotSynchronized"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapSecRefclockNotResponding"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapSecRefclockSynchronized"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapSecRefclockNotSynchronized"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapAntennaFaulty"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapAntennaReconnect"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapAntennaShortCircuit"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapConfigChanged"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapLeapSecAnnounced"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNtpClientLimitExceeded"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapRefSrcDisconnected"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapRefSrcReconnected"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapShsTimeLimitError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapShsTimeLimitWarning"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNetworkDown"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNetworkUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapPowerSupplyUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapPowerSupplyDown"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapFdmError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapLowSystemResources"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapPtpNetworkDown"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapPtpNetworkUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapPtpStateChanged"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapPtpError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapRefSrcLimitExceeded"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapFanDown"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapFanUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgRepeatEvent"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgRepetitions"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapWarmedUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgTrapNotWarmedUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgDisableRootLogin"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgDisableUsbPort"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgAllowNetworkDiscovery"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgLockFrontPanel"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSshKeyLength"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgSshShellTimeout"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgWebLanguage"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgActivateChangesAsStartup"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCfgEnableFrontPanelLight"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgCmdExecute")], [("MBG-SNMP-LTNG-MIB", "mbgLtNgCmdSetTime"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgFdmFreq"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgFdmFreqDev"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgFdmNomFreq"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpNumberOfModules"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpMode"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpPortState"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpLocalMac"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpGrandmasterMac"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpGrandmasterUuid"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpClockAccuracy"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpClockClass"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpTimeSource"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpUtcOffset"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpTimeSeconds"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpTsuTime"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpSysTime"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpPortLinkup"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpOffsetFromGM"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpPathDelay"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpDelayMec"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpDomain"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpDelayAsymmetry"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgPtpAvail"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSysNumberOfPowerSupplies"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSysPsStatus"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSysNumberOfFans"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSysFanStatus"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSysFanError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgSysTempCelsius")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        mbgLtNgObjectsGroup = mbgLtNgObjectsGroup.setObjects(*_mbgLtNgObjectsGroup_obj)
    else:
        mbgLtNgObjectsGroup = mbgLtNgObjectsGroup.setObjects(*_mbgLtNgObjectsGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbgLtNgObjectsGroup = mbgLtNgObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgObjectsGroup.setDescription('The collection of objects for the LANTIME MIB')
mbgLtNgTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5597, 30, 90, 2, 2)).setObjects(("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNTPNotSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNTPStopped"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapServerBoot"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapReceiverNotResponding"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapReceiverNotSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapAntennaFaulty"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapAntennaReconnect"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapConfigChanged"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapLeapSecondAnnounced"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapSHSTimeLimitError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapSecondaryRecNotSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPowerSupplyFailure"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapAntennaShortCircuit"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapReceiverSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNTPClientAlarm"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPowerSupplyUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNetworkDown"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNetworkUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapSecondaryRecNotResp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapXmrLimitExceeded"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapXmrRefDisconnect"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapXmrRefReconnect"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapFdmError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapSHSTimeLimitWarning"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapSecondaryRecSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNTPSync"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNormalOperation"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapHeartbeat"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapTestNotification"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPtpPortDisconnected"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPtpPortConnected"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPtpStateChanged"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapPtpError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapLowSystemResources"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapSufficientSystemResources"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapFanDown"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapFanUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapCertificateExpired"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapOscillatorWarmedUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapOscillatorNotWarmedUp"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapXmrRefChanged"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapClusterMasterChanged"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapClusterFalsetickerDetected"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapClusterFalsetickerCleared"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapSHSTimeLimitOk"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapIMSError"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapIMSOk"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapFDMOk"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNTPOffsetLimitExceeded"), ("MBG-SNMP-LTNG-MIB", "mbgLtNgTrapNTPOffsetLimitOk"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbgLtNgTrapsGroup = mbgLtNgTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: mbgLtNgTrapsGroup.setDescription('The collection of traps for the LANTIME MIB')
mibBuilder.exportSymbols("MBG-SNMP-LTNG-MIB", mbgLtNgCfgPtpSyncEGbitCopperMode=mbgLtNgCfgPtpSyncEGbitCopperMode, mbgLtNgCfgSnmpWriteCommunity=mbgLtNgCfgSnmpWriteCommunity, mbgLtNgPtpClockClass=mbgLtNgPtpClockClass, mbgLtNgCfgTrapRefSrcReconnected=mbgLtNgCfgTrapRefSrcReconnected, mbgLtNgCfgPtpDomainname=mbgLtNgCfgPtpDomainname, mbgLtNgCfgVirtualIfServiceTelnet=mbgLtNgCfgVirtualIfServiceTelnet, mbgLtNgCfgSnmpV3AuthPassphrase=mbgLtNgCfgSnmpV3AuthPassphrase, mbgLtNgRefclockGpsUtcOffset=mbgLtNgRefclockGpsUtcOffset, mbgLtNgCfgTrapRefSrcLimitExceeded=mbgLtNgCfgTrapRefSrcLimitExceeded, mbgLtNgCfgEmailSmarthostAuthUser=mbgLtNgCfgEmailSmarthostAuthUser, mbgLtNgCfgVirtualIfIpv4DnsFromDhcp=mbgLtNgCfgVirtualIfIpv4DnsFromDhcp, mbgLtNgCfgNtpMaxClientOffset=mbgLtNgCfgNtpMaxClientOffset, mbgLtNgCfgNtpServerIP=mbgLtNgCfgNtpServerIP, mbgLtNgTrapSecondaryRecNotResp=mbgLtNgTrapSecondaryRecNotResp, mbgLtNgCfgPtpSyncEInputSsm=mbgLtNgCfgPtpSyncEInputSsm, mbgLtNgCfgSnmpContact=mbgLtNgCfgSnmpContact, mbgLtNgRefclockType=mbgLtNgRefclockType, mbgLtNgCfgVirtualIfClusterPrio=mbgLtNgCfgVirtualIfClusterPrio, mbgLtNgCfgVirtualIfMac=mbgLtNgCfgVirtualIfMac, mbgLtNgCfgEmail=mbgLtNgCfgEmail, mbgLtNgCfgTrapConfigChanged=mbgLtNgCfgTrapConfigChanged, mbgLtNgCfgEnableFrontPanelLight=mbgLtNgCfgEnableFrontPanelLight, mbgLtNgCompliances=mbgLtNgCompliances, mbgLtNgRefclockUsage=mbgLtNgRefclockUsage, mbgLtNgCfgTrapNtpSync=mbgLtNgCfgTrapNtpSync, mbgLtNgNtpCCStartedAt=mbgLtNgNtpCCStartedAt, mbgLtNgCfgVirtualIfIpv4GatewayFromDhcp=mbgLtNgCfgVirtualIfIpv4GatewayFromDhcp, mbgLtNgCfgTrapServerBoot=mbgLtNgCfgTrapServerBoot, mbgLtNgClusterClockStatus=mbgLtNgClusterClockStatus, mbgLtNgTrapNTPSync=mbgLtNgTrapNTPSync, mbgLtNgCfgTrapNormalOperation=mbgLtNgCfgTrapNormalOperation, mbgLtNgCfgPhysicalIfMac=mbgLtNgCfgPhysicalIfMac, mbgLtNgCfgSshShellTimeout=mbgLtNgCfgSshShellTimeout, mbgLtNgCfgPhysicalIfBondingGroup=mbgLtNgCfgPhysicalIfBondingGroup, mbgLtNgCfgVP100Display2SN=mbgLtNgCfgVP100Display2SN, mbgLtNgCfgTrapRefclockSynchronized=mbgLtNgCfgTrapRefclockSynchronized, mbgLtNgCfgTrapLeapSecAnnounced=mbgLtNgCfgTrapLeapSecAnnounced, mbgLantimeNG=mbgLantimeNG, mbgLtNgCfgEthernetGenClusterPort=mbgLtNgCfgEthernetGenClusterPort, mbgLtNgNtpMrsServer=mbgLtNgNtpMrsServer, mbgLtNgCfgDisableUsbPort=mbgLtNgCfgDisableUsbPort, mbgLtNgCfgTrapNtpNotSync=mbgLtNgCfgTrapNtpNotSync, mbgLtNgCfgNtpMultiInterval=mbgLtNgCfgNtpMultiInterval, mbgLtNgCfgPtpIpv6Avail=mbgLtNgCfgPtpIpv6Avail, mbgLtNgCfgSnmpV3UserRights=mbgLtNgCfgSnmpV3UserRights, mbgLtNgRefclockTable=mbgLtNgRefclockTable, mbgLtNgTrapNTPOffsetLimitOk=mbgLtNgTrapNTPOffsetLimitOk, mbgLtNgCfgNtpTableEntry=mbgLtNgCfgNtpTableEntry, mbgLtNgCfgPtpSyncInterval=mbgLtNgCfgPtpSyncInterval, mbgLtNgNtp=mbgLtNgNtp, mbgLtNgCfgSyslogLoglevel=mbgLtNgCfgSyslogLoglevel, mbgLtNgCfgVirtualIfIpv4AddrFromDhcp=mbgLtNgCfgVirtualIfIpv4AddrFromDhcp, mbgLtNgTrapIMSOk=mbgLtNgTrapIMSOk, mbgLtNgCfgPtpOpMode=mbgLtNgCfgPtpOpMode, mbgLtNgCfgSystem=mbgLtNgCfgSystem, mbgLtNgTrapPowerSupplyUp=mbgLtNgTrapPowerSupplyUp, mbgLtNgCfgPtpDscpClass=mbgLtNgCfgPtpDscpClass, mbgLtNgCfgEthernetNameserver1=mbgLtNgCfgEthernetNameserver1, mbgLtNgTrapPtpError=mbgLtNgTrapPtpError, mbgLtNgPtpClockAccuracy=mbgLtNgPtpClockAccuracy, mbgLtNgCfgPtpMiscEnable1Step=mbgLtNgCfgPtpMiscEnable1Step, mbgLtNgCfgPtpOutput2=mbgLtNgCfgPtpOutput2, mbgLtNgCfgSnmpV3AuthProtocol=mbgLtNgCfgSnmpV3AuthProtocol, mbgLtNgPtpTimeSeconds=mbgLtNgPtpTimeSeconds, mbgLtNgRefclockGpsTable=mbgLtNgRefclockGpsTable, mbgLtNgRefclockLeapSecondDate=mbgLtNgRefclockLeapSecondDate, mbgLtNgSnmpSubagentVersion=mbgLtNgSnmpSubagentVersion, mbgLtNgTrapAntennaShortCircuit=mbgLtNgTrapAntennaShortCircuit, mbgLtNgCfgNtpMultiAddr=mbgLtNgCfgNtpMultiAddr, mbgLtNgClusterPortState=mbgLtNgClusterPortState, mbgLtNgRefclockTableEntry=mbgLtNgRefclockTableEntry, mbgLtNgTrapXmrLimitExceeded=mbgLtNgTrapXmrLimitExceeded, mbgLtNgCfgVirtualIfClusterIpv4Netmask=mbgLtNgCfgVirtualIfClusterIpv4Netmask, mbgLtNgCfgPtpIndex=mbgLtNgCfgPtpIndex, mbgLtNgTrapReceiverSync=mbgLtNgTrapReceiverSync, mbgLtNgCfgTrapSecRefclockSynchronized=mbgLtNgCfgTrapSecRefclockSynchronized, mbgLtNgInfo=mbgLtNgInfo, mbgLtNgCfgSnmpTrapRecVersion=mbgLtNgCfgSnmpTrapRecVersion, mbgLtNgPtp=mbgLtNgPtp, mbgLtNgTrapClusterMasterChanged=mbgLtNgTrapClusterMasterChanged, mbgLtNgCfgNtpManyAddr=mbgLtNgCfgNtpManyAddr, mbgLtNgCfgVirtualIfServiceSsh=mbgLtNgCfgVirtualIfServiceSsh, mbgLtNgTrapNetworkUp=mbgLtNgTrapNetworkUp, mbgLtNgSysFanTable=mbgLtNgSysFanTable, mbgLtNgRefclockMaxStatusB=mbgLtNgRefclockMaxStatusB, mbgLtNgCfgTrapPtpError=mbgLtNgCfgTrapPtpError, mbgLtNgTrapNTPOffsetLimitExceeded=mbgLtNgTrapNTPOffsetLimitExceeded, mbgLtNgCfgEmailSmarthostAddr=mbgLtNgCfgEmailSmarthostAddr, mbgLtNgCfgRepetitions=mbgLtNgCfgRepetitions, mbgLantimeNGStatus=mbgLantimeNGStatus, mbgLtNgRefclockGpsTdop=mbgLtNgRefclockGpsTdop, mbgLtNgCfgTrapPowerSupplyDown=mbgLtNgCfgTrapPowerSupplyDown, mbgLtNgEthPortLinkIndex=mbgLtNgEthPortLinkIndex, mbgLtNgCfgTrapAntennaReconnect=mbgLtNgCfgTrapAntennaReconnect, mbgLtNgTrapSecondaryRecSync=mbgLtNgTrapSecondaryRecSync, mbgLtNgCfgPtpUcastMstAddr=mbgLtNgCfgPtpUcastMstAddr, mbgLtNgCpuSerialNumber=mbgLtNgCpuSerialNumber, mbgLtNgCfgPtpDisableMgmtMsgs=mbgLtNgCfgPtpDisableMgmtMsgs, mbgLtNgCfgPtpSyncESdhNwOption=mbgLtNgCfgPtpSyncESdhNwOption, mbgLtNgFdmFreq=mbgLtNgFdmFreq, mbgLtNgPtpIndex=mbgLtNgPtpIndex, mbgLtNgSysTempCelsius=mbgLtNgSysTempCelsius, mbgLtNgTrapHeartbeat=mbgLtNgTrapHeartbeat, mbgLtNgCfgSnmpV3Context=mbgLtNgCfgSnmpV3Context, mbgLtNgNtpCurrentState=mbgLtNgNtpCurrentState, mbgLtNgCfgNtpEnableManycast=mbgLtNgCfgNtpEnableManycast, mbgLtNgTrapNotifications=mbgLtNgTrapNotifications, mbgLtNgTrapCertificateExpired=mbgLtNgTrapCertificateExpired, mbgLtNgCfgTrapNtpClientLimitExceeded=mbgLtNgCfgTrapNtpClientLimitExceeded, mbgLtNgCfgVirtualIfIpv4BroadcastFromDhcp=mbgLtNgCfgVirtualIfIpv4BroadcastFromDhcp, mbgLtNgCfgVirtualIfIpv4NetmaskFromDhcp=mbgLtNgCfgVirtualIfIpv4NetmaskFromDhcp, mbgLtNgCommands=mbgLtNgCommands, mbgLtNgCfgTrapLowSystemResources=mbgLtNgCfgTrapLowSystemResources, mbgLtNgCfgVirtualIfAssigned=mbgLtNgCfgVirtualIfAssigned, mbgLtNgNumberOfClusters=mbgLtNgNumberOfClusters, mbgLtNgCfgPtpProfile=mbgLtNgCfgPtpProfile, mbgLtNgCfgSnmpTrapRecTable=mbgLtNgCfgSnmpTrapRecTable, mbgLtNgCmdExecute=mbgLtNgCmdExecute, mbgLtNgCfgPtpSyncEAvail=mbgLtNgCfgPtpSyncEAvail, mbgLtNgTrapAntennaReconnect=mbgLtNgTrapAntennaReconnect, mbgLtNgTrapLeapSecondAnnounced=mbgLtNgTrapLeapSecondAnnounced, mbgLtNgCfgVirtualIfServiceFtp=mbgLtNgCfgVirtualIfServiceFtp, mbgLtNgPtpOffsetFromGM=mbgLtNgPtpOffsetFromGM, mbgLtNgCfgEthernet=mbgLtNgCfgEthernet, mbgLtNgCfgTrapNetworkUp=mbgLtNgCfgTrapNetworkUp, mbgLtNgObjectsGroup=mbgLtNgObjectsGroup, mbgLtNgRefclockIndex=mbgLtNgRefclockIndex, mbgLtNgCfgTrapPowerSupplyUp=mbgLtNgCfgTrapPowerSupplyUp, mbgLtNgCfgSnmpTrapRecIndex=mbgLtNgCfgSnmpTrapRecIndex, mbgLtNgRefclockState=mbgLtNgRefclockState, mbgLtNgPtpGrandmasterUuid=mbgLtNgPtpGrandmasterUuid, mbgLtNgCfgDisableRootLogin=mbgLtNgCfgDisableRootLogin, mbgLtNgCfgVirtualIfServiceHttp=mbgLtNgCfgVirtualIfServiceHttp, mbgLtNgCfgPtpMessageDuration=mbgLtNgCfgPtpMessageDuration, mbgLtNgCfgWmailAddress2=mbgLtNgCfgWmailAddress2, mbgLtNgCfgGeneral=mbgLtNgCfgGeneral, mbgLtNgTrapPowerSupplyFailure=mbgLtNgTrapPowerSupplyFailure, mbgLtNgTrapPtpStateChanged=mbgLtNgTrapPtpStateChanged, mbgLtNgTrapAntennaFaulty=mbgLtNgTrapAntennaFaulty, mbgLtNgSysPsIndex=mbgLtNgSysPsIndex, mbgLtNgTrapNTPStopped=mbgLtNgTrapNTPStopped, mbgLtNgClusterMasterSerial=mbgLtNgClusterMasterSerial, mbgLtNgSysTemperature=mbgLtNgSysTemperature, mbgLtNgNtpRefclockOffset=mbgLtNgNtpRefclockOffset, mbgLtNgCfgPtpTableEntry=mbgLtNgCfgPtpTableEntry, mbgLtNgCfgPtpPriority1=mbgLtNgCfgPtpPriority1, mbgLtNgCfgVirtualIfIpv4Dhcp=mbgLtNgCfgVirtualIfIpv4Dhcp, mbgLtNgCfgNtpIndex=mbgLtNgCfgNtpIndex, mbgLtNgTrapConfigChanged=mbgLtNgTrapConfigChanged, mbgLtNgClusterClockClass=mbgLtNgClusterClockClass, mbgLtNgCmdSetTime=mbgLtNgCmdSetTime, mbgLtNgTrapNTPClientAlarm=mbgLtNgTrapNTPClientAlarm, mbgLtNgEthPortLinkTableEntry=mbgLtNgEthPortLinkTableEntry, mbgLtNgCfgNtpBroadAddr=mbgLtNgCfgNtpBroadAddr, mbgLtNgCfgPtpVlanId=mbgLtNgCfgPtpVlanId, mbgLtNgSysFan=mbgLtNgSysFan, mbgLtNgCfgWmailAddress1=mbgLtNgCfgWmailAddress1, mbgLtNgSysFanIndex=mbgLtNgSysFanIndex, mbgLtNgEthPortLinkTable=mbgLtNgEthPortLinkTable, mbgLtNgCfgNtp=mbgLtNgCfgNtp, mbgLtNgPtpNumberOfModules=mbgLtNgPtpNumberOfModules, mbgLtNgNtpMrs=mbgLtNgNtpMrs, mbgLtNgTrapNTPNotSync=mbgLtNgTrapNTPNotSync, mbgLtNgTrapFanUp=mbgLtNgTrapFanUp, mbgLtNgCfgVP100Display2Addr=mbgLtNgCfgVP100Display2Addr, mbgLtNgClusterMasterIp=mbgLtNgClusterMasterIp, mbgLtNgCfgWebLanguage=mbgLtNgCfgWebLanguage, mbgLtNgCfgEthernetIpv6Gateway=mbgLtNgCfgEthernetIpv6Gateway, mbgLtNgCfgSnmpEnabledVersion=mbgLtNgCfgSnmpEnabledVersion, mbgLtNgRefclockGpsLongitude=mbgLtNgRefclockGpsLongitude, mbgLtNgCfgSyslogServerAddr=mbgLtNgCfgSyslogServerAddr, mbgLtNgCfgTrapShsTimeLimitError=mbgLtNgCfgTrapShsTimeLimitError, mbgLtNgCfgAllowNetworkDiscovery=mbgLtNgCfgAllowNetworkDiscovery, mbgLtNgEthPortLinkState=mbgLtNgEthPortLinkState, mbgLtNgCfgTrapPtpStateChanged=mbgLtNgCfgTrapPtpStateChanged, mbgLtNgClusterMasterPriority=mbgLtNgClusterMasterPriority, mbgLtNgCfgTrapAntennaFaulty=mbgLtNgCfgTrapAntennaFaulty, mbgLtNgCfgVirtualIfVlan=mbgLtNgCfgVirtualIfVlan, mbgLtNgTrapsGroup=mbgLtNgTrapsGroup, mbgLtNgCfgNtpBMIndex=mbgLtNgCfgNtpBMIndex, mbgLtNgCfgEthernetHostname=mbgLtNgCfgEthernetHostname, mbgLtNgGroups=mbgLtNgGroups, mbgLtNgCfgVirtualIfServiceHttps=mbgLtNgCfgVirtualIfServiceHttps, mbgLtNgCfgNtpTimeScale=mbgLtNgCfgNtpTimeScale, mbgLtNgNtpMrsOffset=mbgLtNgNtpMrsOffset, mbgLtNgTrapIMSError=mbgLtNgTrapIMSError, mbgLtNgConformance=mbgLtNgConformance, mbgLtNgTrapSHSTimeLimitError=mbgLtNgTrapSHSTimeLimitError, mbgLtNgCfgSsh=mbgLtNgCfgSsh, mbgLtNgSysNumberOfFans=mbgLtNgSysNumberOfFans, mbgLtNgCfgSnmpTrapRecAddr=mbgLtNgCfgSnmpTrapRecAddr, mbgLtNgCfgNtpServerMaxpoll=mbgLtNgCfgNtpServerMaxpoll, mbgLtNgCfgPtpDisableSsh=mbgLtNgCfgPtpDisableSsh, mbgLtNgCfgNtpServerIburst=mbgLtNgCfgNtpServerIburst, mbgLtNgCfgSnmpV3UserName=mbgLtNgCfgSnmpV3UserName, mbgLtNgCfgSnmpTrapRecCommunity=mbgLtNgCfgSnmpTrapRecCommunity, mbgLtNgRefclockStatusB=mbgLtNgRefclockStatusB, mbgLtNgCfgVirtualIfIpv4DomainFromDhcp=mbgLtNgCfgVirtualIfIpv4DomainFromDhcp, mbgLtNgRefclockGpsPdop=mbgLtNgRefclockGpsPdop, mbgLtNgCfgNtpDisableLocalClk=mbgLtNgCfgNtpDisableLocalClk, mbgLtNgCfgPtpSyncEOutputSsm=mbgLtNgCfgPtpSyncEOutputSsm, mbgLtNgCfgNtpServerAutokey=mbgLtNgCfgNtpServerAutokey, mbgLtNgCfgVirtualIfTableEntry=mbgLtNgCfgVirtualIfTableEntry, mbgLtNgCfgPtpSyncEQltLvlSelEnable=mbgLtNgCfgPtpSyncEQltLvlSelEnable, mbgLtNgCfgEthernetIpv4Gateway=mbgLtNgCfgEthernetIpv4Gateway, mbgLtNgSysPowerSupply=mbgLtNgSysPowerSupply, mbgLtNgCfgPtpHybridMode=mbgLtNgCfgPtpHybridMode, mbgLtNgCfgTrapTrigger=mbgLtNgCfgTrapTrigger, mbgLtNgClusterReconfigurationState=mbgLtNgClusterReconfigurationState, mbgLtNgTrapNetworkDown=mbgLtNgTrapNetworkDown, mbgLtNgCfgNtpEnableClientCounter=mbgLtNgCfgNtpEnableClientCounter, mbgLtNgCfgPtpCmd=mbgLtNgCfgPtpCmd, mbgLtNgCfgVirtualIfServiceNtp=mbgLtNgCfgVirtualIfServiceNtp, mbgLtNgCfgTrapSecRefclockNotResponding=mbgLtNgCfgTrapSecRefclockNotResponding, mbgLtNgTrapFanDown=mbgLtNgTrapFanDown, mbgLtNgPtpMode=mbgLtNgPtpMode, mbgLtNgTrapClusterFalsetickerCleared=mbgLtNgTrapClusterFalsetickerCleared, mbgLtNgCfgEmailSmarthostAuth=mbgLtNgCfgEmailSmarthostAuth, mbgLtNgTrapServerBoot=mbgLtNgTrapServerBoot, mbgLtNgSerialNumber=mbgLtNgSerialNumber, mbgLtNgCfgEthernetGenClusterIp=mbgLtNgCfgEthernetGenClusterIp, mbgLtNgTrapSufficientSystemResources=mbgLtNgTrapSufficientSystemResources, mbgLtNgClusterIsFalseticker=mbgLtNgClusterIsFalseticker, mbgLtNgCfgPhysicalIfIndicateLink=mbgLtNgCfgPhysicalIfIndicateLink, mbgLtNgCfgEmailSmarthostPort=mbgLtNgCfgEmailSmarthostPort, mbgLtNgTrapXmrRefDisconnect=mbgLtNgTrapXmrRefDisconnect, mbgLtNgNtpCCTodaysClients=mbgLtNgNtpCCTodaysClients, PYSNMP_MODULE_ID=mbgLantimeNG, mbgLtNgNtpCCTotalRequestsLastMinute=mbgLtNgNtpCCTotalRequestsLastMinute, mbgLtNgRefclockGpsLatitude=mbgLtNgRefclockGpsLatitude, mbgLtNgCfgPtpGateway=mbgLtNgCfgPtpGateway, mbgLtNgCfgNtpBroadSymKey=mbgLtNgCfgNtpBroadSymKey, mbgLtNgTrapLowSystemResources=mbgLtNgTrapLowSystemResources, mbgLtNgCfgPtpEnableVlan=mbgLtNgCfgPtpEnableVlan, mbgLtNgCfgPtpMode=mbgLtNgCfgPtpMode, mbgLtNgCfgSNMP=mbgLtNgCfgSNMP, mbgLtNgSysPsStatus=mbgLtNgSysPsStatus, mbgLtNgCfgTrapFanUp=mbgLtNgCfgTrapFanUp, mbgLtNgCfgNtpMultiSymKey=mbgLtNgCfgNtpMultiSymKey, mbgLtNgPtpTable=mbgLtNgPtpTable, mbgLtNgPtpPortLinkup=mbgLtNgPtpPortLinkup, mbgLtNgCluster=mbgLtNgCluster, mbgLtNgCfgPtp=mbgLtNgCfgPtp, mbgLtNgCfgPtpNetworkProtocol=mbgLtNgCfgPtpNetworkProtocol, mbgLtNgCfgPtpPriority2=mbgLtNgCfgPtpPriority2, mbgLtNgCfgVirtualIfTable=mbgLtNgCfgVirtualIfTable, mbgLtNgCfgTrapRefSrcDisconnected=mbgLtNgCfgTrapRefSrcDisconnected, mbgLtNgCfgNtpSpoofLocalTime=mbgLtNgCfgNtpSpoofLocalTime, mbgLtNgCfgVirtualIfIpv4Netmask=mbgLtNgCfgVirtualIfIpv4Netmask, mbgLtNgCfgNtpBroadInterval=mbgLtNgCfgNtpBroadInterval, mbgLtNgPtpTableEntry=mbgLtNgPtpTableEntry, mbgLtNgCfgTrapFdmError=mbgLtNgCfgTrapFdmError, mbgLtNgCfgPhysicalIfTable=mbgLtNgCfgPhysicalIfTable, mbgLtNgCfgNtpLocalClkStratum=mbgLtNgCfgNtpLocalClkStratum)
mibBuilder.exportSymbols("MBG-SNMP-LTNG-MIB", mbgLtNgSystemHardware=mbgLtNgSystemHardware, mbgLtNgCfgNumberOfVirtualIf=mbgLtNgCfgNumberOfVirtualIf, mbgLtNgCfgVirtualIfIndex=mbgLtNgCfgVirtualIfIndex, mbgLtNgCfgNtpClientMonitoring=mbgLtNgCfgNtpClientMonitoring, mbgLtNgSubagentTimeticks=mbgLtNgSubagentTimeticks, mbgLtNgTrapOscillatorNotWarmedUp=mbgLtNgTrapOscillatorNotWarmedUp, mbgLtNgCfgTrapRefclockNotSynchronized=mbgLtNgCfgTrapRefclockNotSynchronized, mbgLtNgCfgEthernetDomain=mbgLtNgCfgEthernetDomain, mbgLtNgCfgSecurity=mbgLtNgCfgSecurity, mbgLtNgCfgPtpIpv6Address=mbgLtNgCfgPtpIpv6Address, mbgLtNgNtpClientCounter=mbgLtNgNtpClientCounter, mbgLtNgCfgVP100Display1Addr=mbgLtNgCfgVP100Display1Addr, mbgLtNgCfgPtpSyncEEnabled=mbgLtNgCfgPtpSyncEEnabled, mbgLtNgCfgVirtualIfVlanTag=mbgLtNgCfgVirtualIfVlanTag, mbgLtNgRefclock=mbgLtNgRefclock, mbgLtNgTrapFdmError=mbgLtNgTrapFdmError, mbgLtNgPtpDelayAsymmetry=mbgLtNgPtpDelayAsymmetry, mbgLtNgPtpTimeSource=mbgLtNgPtpTimeSource, mbgLtNgSysPsTableEntry=mbgLtNgSysPsTableEntry, mbgLtNgCfgSnmpV3PrivPassphrase=mbgLtNgCfgSnmpV3PrivPassphrase, mbgLtNgTrapPtpPortDisconnected=mbgLtNgTrapPtpPortDisconnected, mbgLtNgPtpTsuTime=mbgLtNgPtpTsuTime, mbgLtNgClusterTable=mbgLtNgClusterTable, mbgLtNgNtpCCNumberOfClients=mbgLtNgNtpCCNumberOfClients, mbgLtNgCfgNtpEnableClientCounterDuration=mbgLtNgCfgNtpEnableClientCounterDuration, mbgLtNgCfgEmailTo=mbgLtNgCfgEmailTo, mbgLtNgCfgPtpMcastTtl=mbgLtNgCfgPtpMcastTtl, mbgLtNgPtpAvail=mbgLtNgPtpAvail, mbgLtNgCfgPhysicalIfNetLinkMode=mbgLtNgCfgPhysicalIfNetLinkMode, mbgLtNgCfgVirtualIfClusterIpv4Addr=mbgLtNgCfgVirtualIfClusterIpv4Addr, mbgLtNgCfgPtpNameserver1=mbgLtNgCfgPtpNameserver1, mbgLtNgCfgNtpTable=mbgLtNgCfgNtpTable, mbgLtNgCfgPtpNameserver2=mbgLtNgCfgPtpNameserver2, mbgLtNgRefclockAdditionalInfo=mbgLtNgRefclockAdditionalInfo, mbgLtNgCfgVirtualIfServiceSnmp=mbgLtNgCfgVirtualIfServiceSnmp, mbgLtNgCfgTrapAntennaShortCircuit=mbgLtNgCfgTrapAntennaShortCircuit, mbgLtNgCfgNtpManyUseAutokey=mbgLtNgCfgNtpManyUseAutokey, mbgLtNgCfgPhysicalIfTableEntry=mbgLtNgCfgPhysicalIfTableEntry, mbgLtNgCfgPtpDomainNumber=mbgLtNgCfgPtpDomainNumber, mbgLtNgCfgTrapNotWarmedUp=mbgLtNgCfgTrapNotWarmedUp, mbgLtNgTrapSecondaryRecNotSync=mbgLtNgTrapSecondaryRecNotSync, mbgLtNgSysFanError=mbgLtNgSysFanError, mbgLtNgCfgPhysicalIfIpv6Mode=mbgLtNgCfgPhysicalIfIpv6Mode, mbgLtNgCfgNtpBMTable=mbgLtNgCfgNtpBMTable, mbgLtNgCfgTrapRefclockNotResponding=mbgLtNgCfgTrapRefclockNotResponding, mbgLtNgCfgSnmpV3PrivProtocol=mbgLtNgCfgSnmpV3PrivProtocol, mbgLtNgRefclockMaxStatusA=mbgLtNgRefclockMaxStatusA, mbgLtNgRefclockGpsPos=mbgLtNgRefclockGpsPos, mbgLtNgCfgSnmpV3SecurityLevel=mbgLtNgCfgSnmpV3SecurityLevel, mbgLtNgClusterIndex=mbgLtNgClusterIndex, mbgLtNgTraps=mbgLtNgTraps, mbgLtNgRefclockStatusA=mbgLtNgRefclockStatusA, mbgLtNgCfgVP100Display1SN=mbgLtNgCfgVP100Display1SN, mbgLtNgNtpCCTotalRequestsCurrentDay=mbgLtNgNtpCCTotalRequestsCurrentDay, mbgLtNgCfgSnmpTimeout=mbgLtNgCfgSnmpTimeout, mbgLtNgTrapTestNotification=mbgLtNgTrapTestNotification, mbgLtNgRefclockGpsIndex=mbgLtNgRefclockGpsIndex, mbgLtNgFirmwareVersion=mbgLtNgFirmwareVersion, mbgLtNgNumberOfRefclocks=mbgLtNgNumberOfRefclocks, mbgLtNgNtpCCTotalRequests=mbgLtNgNtpCCTotalRequests, mbgLtNgCfgNtpBroadUseAutokey=mbgLtNgCfgNtpBroadUseAutokey, mbgLtNgCfgVirtualIfIpv4Addr=mbgLtNgCfgVirtualIfIpv4Addr, mbgLtNgCfgVirtualIfServiceTime=mbgLtNgCfgVirtualIfServiceTime, mbgLtNgCfgVirtualIfLabel=mbgLtNgCfgVirtualIfLabel, mbgLtNgCfgNtpMultiUseAutokey=mbgLtNgCfgNtpMultiUseAutokey, mbgLtNgNtpVersion=mbgLtNgNtpVersion, mbgLtNgCfgPtpNetmask=mbgLtNgCfgPtpNetmask, mbgLtNgCfgSnmpRetries=mbgLtNgCfgSnmpRetries, mbgLtNgCfgNtpBMTableEntry=mbgLtNgCfgNtpBMTableEntry, mbgLtNgCfgPtpHostname=mbgLtNgCfgPtpHostname, mbgLtNgRefclockTimeDiff=mbgLtNgRefclockTimeDiff, mbgLtNgCfgEthernetNameserver2=mbgLtNgCfgEthernetNameserver2, mbgLtNgTrapXmrRefReconnect=mbgLtNgTrapXmrRefReconnect, mbgLtNgCfgNtpMaxClientStratum=mbgLtNgCfgNtpMaxClientStratum, mbgLtNgTrapReceiverNotResponding=mbgLtNgTrapReceiverNotResponding, mbgLtNgPtpPathDelay=mbgLtNgPtpPathDelay, mbgLtNgRefclockSubstate=mbgLtNgRefclockSubstate, mbgLtNgCfgTrapFanDown=mbgLtNgCfgTrapFanDown, mbgLtNgPtpDelayMec=mbgLtNgPtpDelayMec, mbgLtNgCfgPtpAnnRcptTmout=mbgLtNgCfgPtpAnnRcptTmout, mbgLtNgTrapClusterFalsetickerDetected=mbgLtNgTrapClusterFalsetickerDetected, mbgLtNgCfgPtpIpv6Mode=mbgLtNgCfgPtpIpv6Mode, mbgLtNgFdmNomFreq=mbgLtNgFdmNomFreq, mbgLtNgCfgFrontPanel=mbgLtNgCfgFrontPanel, mbgLtNgTrapNormalOperation=mbgLtNgTrapNormalOperation, mbgLtNgCfgVirtualIfIpv6Addr=mbgLtNgCfgVirtualIfIpv6Addr, mbgLtNgCfgSnmpTrapRecTableEntry=mbgLtNgCfgSnmpTrapRecTableEntry, mbgLtNgCfgNtpTrusttime=mbgLtNgCfgNtpTrusttime, mbgLtNgCfgPtpTable=mbgLtNgCfgPtpTable, mbgLtNgCfgPtpEnableDhcp=mbgLtNgCfgPtpEnableDhcp, mbgLtNgCfgRepeatEvent=mbgLtNgCfgRepeatEvent, mbgLtNgCfgVirtualIfIpv6LinkLocal=mbgLtNgCfgVirtualIfIpv6LinkLocal, mbgLtNgTrapFDMOk=mbgLtNgTrapFDMOk, mbgLtNgCfgPtpOutput1=mbgLtNgCfgPtpOutput1, mbgLtNgSysPsTable=mbgLtNgSysPsTable, mbgLtNgCfgLoginAccess=mbgLtNgCfgLoginAccess, mbgLtNgCfgNtpServerKey=mbgLtNgCfgNtpServerKey, mbgLtNgPtpUtcOffset=mbgLtNgPtpUtcOffset, mbgLtNgCfgVirtualIfIpv6Dhcp=mbgLtNgCfgVirtualIfIpv6Dhcp, mbgLtNgPtpDomain=mbgLtNgPtpDomain, mbgLtNgCfgSnmpReadCommunity=mbgLtNgCfgSnmpReadCommunity, mbgLtNgTrapSHSTimeLimitOk=mbgLtNgTrapSHSTimeLimitOk, mbgLtNgCfgPtpIpv4=mbgLtNgCfgPtpIpv4, mbgLtNgTrapXmrRefChanged=mbgLtNgTrapXmrRefChanged, mbgLtNgPtpPortState=mbgLtNgPtpPortState, mbgLtNgCfgPtpVlanPriority=mbgLtNgCfgPtpVlanPriority, mbgLtNgCfgNtpLocalTrustedKeys=mbgLtNgCfgNtpLocalTrustedKeys, mbgLtNgCfgPtpAnnounceInterval=mbgLtNgCfgPtpAnnounceInterval, mbgLtNgCfgPhysicalIfIndex=mbgLtNgCfgPhysicalIfIndex, mbgLtNgCfgWalldisplay=mbgLtNgCfgWalldisplay, mbgLtNgPtpSysTime=mbgLtNgPtpSysTime, mbgLtNgCfgNtpServerMinpoll=mbgLtNgCfgNtpServerMinpoll, mbgLtNgCfgSshKeyLength=mbgLtNgCfgSshKeyLength, mbgLtNgCfgTrapNetworkDown=mbgLtNgCfgTrapNetworkDown, mbgLtNgRefclockGpsAltitude=mbgLtNgRefclockGpsAltitude, mbgLtNgNtpCCTotalRequestsLastHour=mbgLtNgNtpCCTotalRequestsLastHour, mbgLtNgCfgPtpDelayReqInterval=mbgLtNgCfgPtpDelayReqInterval, mbgLtNgTrapOscillatorWarmedUp=mbgLtNgTrapOscillatorWarmedUp, mbgLtNgTrapSHSTimeLimitWarning=mbgLtNgTrapSHSTimeLimitWarning, mbgLtNgCfgNtpManySymKey=mbgLtNgCfgNtpManySymKey, mbgLtNgCfgPtpTimescale=mbgLtNgCfgPtpTimescale, mbgLtNgCfgNotifications=mbgLtNgCfgNotifications, mbgLtNgCfgDisplay=mbgLtNgCfgDisplay, mbgLtNgTrapReceiverNotSync=mbgLtNgTrapReceiverNotSync, mbgLtNgCfgPtpDelayMechanism=mbgLtNgCfgPtpDelayMechanism, mbgLtNgNtpCCDuration=mbgLtNgNtpCCDuration, mbgLtNgFdm=mbgLtNgFdm, mbgLtNgCompliance=mbgLtNgCompliance, mbgLtNgCfgVirtualIfServiceDaytime=mbgLtNgCfgVirtualIfServiceDaytime, mbgLtNgCfgTrapShsTimeLimitWarning=mbgLtNgCfgTrapShsTimeLimitWarning, mbgLtNgCfgTrapPtpNetworkUp=mbgLtNgCfgTrapPtpNetworkUp, mbgLtNgClusterTableEntry=mbgLtNgClusterTableEntry, mbgLtNgTrapMessage=mbgLtNgTrapMessage, mbgLtNgCfgSyslog=mbgLtNgCfgSyslog, mbgLtNgConfig=mbgLtNgConfig, mbgLtNgPtpGrandmasterMac=mbgLtNgPtpGrandmasterMac, mbgLtNgCfgTrapNtpStopped=mbgLtNgCfgTrapNtpStopped, mbgLtNgSysFanStatus=mbgLtNgSysFanStatus, mbgLtNgCfgVirtualIfVlanPrio=mbgLtNgCfgVirtualIfVlanPrio, mbgLtNgNtpRefclockName=mbgLtNgNtpRefclockName, mbgLtNgCfgTrapSecRefclockNotSynchronized=mbgLtNgCfgTrapSecRefclockNotSynchronized, mbgLtNgCfgWinpopup=mbgLtNgCfgWinpopup, mbgLtNgTrapPtpPortConnected=mbgLtNgTrapPtpPortConnected, mbgLtNgCfgActivateChangesAsStartup=mbgLtNgCfgActivateChangesAsStartup, mbgLtNgSysNumberOfPowerSupplies=mbgLtNgSysNumberOfPowerSupplies, mbgLtNgPtpLocalMac=mbgLtNgPtpLocalMac, mbgLtNgCfgSnmpLocation=mbgLtNgCfgSnmpLocation, mbgLtNgCfgPtpIpv6McastScope=mbgLtNgCfgPtpIpv6McastScope, mbgLtNgCfgEmailSmarthostAuthPw=mbgLtNgCfgEmailSmarthostAuthPw, mbgLtNgFdmFreqDev=mbgLtNgFdmFreqDev, mbgLtNgCfgVirtualIfIpv6RoutAdd=mbgLtNgCfgVirtualIfIpv6RoutAdd, mbgLtNgCfgTrapWarmedUp=mbgLtNgCfgTrapWarmedUp, mbgLtNgNtpStratum=mbgLtNgNtpStratum, mbgLtNgRefclockGpsTableEntry=mbgLtNgRefclockGpsTableEntry, mbgLtNgMisc=mbgLtNgMisc, mbgLtNgCfgVirtualIfCluster=mbgLtNgCfgVirtualIfCluster, mbgLtNgCfgEmailFrom=mbgLtNgCfgEmailFrom, mbgLtNgCfgNtpEnableMulticast=mbgLtNgCfgNtpEnableMulticast, mbgLtNgCfgVirtualIfServiceFpc=mbgLtNgCfgVirtualIfServiceFpc, mbgLtNgCfgTrapPtpNetworkDown=mbgLtNgCfgTrapPtpNetworkDown, mbgLtNgCfgLockFrontPanel=mbgLtNgCfgLockFrontPanel, mbgLtNgCfgNumberOfPhysicalIf=mbgLtNgCfgNumberOfPhysicalIf, mbgLtNgSysFanTableEntry=mbgLtNgSysFanTableEntry, mbgLtNgClusterCommunicationIp=mbgLtNgClusterCommunicationIp)
