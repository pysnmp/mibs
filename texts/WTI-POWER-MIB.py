#
# PySNMP MIB module WTI-POWER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/wti/WTI-POWER-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 09:42:10 2024
# On host fv-az1110-714 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, MibIdentifier, TimeTicks, Counter32, Unsigned32, ModuleIdentity, Counter64, Gauge32, enterprises, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "TimeTicks", "Counter32", "Unsigned32", "ModuleIdentity", "Counter64", "Gauge32", "enterprises", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "Bits", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
westernTelematic = MibIdentifier((1, 3, 6, 1, 4, 1, 2634))
power = ModuleIdentity((1, 3, 6, 1, 4, 1, 2634, 3))
power.setRevisions(('2016-04-01 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: power.setRevisionsDescriptions(('V6.00 for power products ',))
if mibBuilder.loadTexts: power.setLastUpdated('201604011600Z')
if mibBuilder.loadTexts: power.setOrganization('Western Telematic, Inc.')
if mibBuilder.loadTexts: power.setContactInfo('Western Telematic, Inc.\n  5 Sterling\n  Irvine, Ca 92618\n  Email: anthonyb@wti.com')
if mibBuilder.loadTexts: power.setDescription('This is the MIB module for power products')
systemTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 100))
plugTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200), )
if mibBuilder.loadTexts: plugTable.setStatus('current')
if mibBuilder.loadTexts: plugTable.setDescription('A table of plugs.')
plugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1), ).setIndexNames((0, "WTI-POWER-MIB", "plugIndex"))
if mibBuilder.loadTexts: plugEntry.setStatus('current')
if mibBuilder.loadTexts: plugEntry.setDescription('Row definition for the plug table.')
plugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80)))
if mibBuilder.loadTexts: plugIndex.setStatus('current')
if mibBuilder.loadTexts: plugIndex.setDescription('Index for the plug table.')
plugID = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugID.setStatus('current')
if mibBuilder.loadTexts: plugID.setDescription('The ID of the plug.')
plugStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugStatus.setStatus('current')
if mibBuilder.loadTexts: plugStatus.setDescription('Plug status')
plugAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plugAction.setStatus('current')
if mibBuilder.loadTexts: plugAction.setDescription('Plug action')
plugName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugName.setStatus('current')
if mibBuilder.loadTexts: plugName.setDescription('The Name of the plug.')
plugCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCurrent.setStatus('current')
if mibBuilder.loadTexts: plugCurrent.setDescription('Plug current (In tenths of amps, divide by 10 for value in amps)')
plugPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugPower.setStatus('current')
if mibBuilder.loadTexts: plugPower.setDescription('Plug power (Watts)')
plugGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300), )
if mibBuilder.loadTexts: plugGroupTable.setStatus('current')
if mibBuilder.loadTexts: plugGroupTable.setDescription('A table of plug groups.')
plugGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300, 1), ).setIndexNames((0, "WTI-POWER-MIB", "plugGroupIndex"))
if mibBuilder.loadTexts: plugGroupEntry.setStatus('current')
if mibBuilder.loadTexts: plugGroupEntry.setDescription('Row definition for the plug group table.')
plugGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 54)))
if mibBuilder.loadTexts: plugGroupIndex.setStatus('current')
if mibBuilder.loadTexts: plugGroupIndex.setDescription('Index for the plug group table.')
plugGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugGroupName.setStatus('current')
if mibBuilder.loadTexts: plugGroupName.setDescription('The name of the plug group.')
plugGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plugGroupAction.setStatus('current')
if mibBuilder.loadTexts: plugGroupAction.setDescription('Plug group action')
plugGroupCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugGroupCurrent.setStatus('current')
if mibBuilder.loadTexts: plugGroupCurrent.setDescription('Plug group current (In tenths of amps, divide by 10 for value in amps)')
plugGroupPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugGroupPower.setStatus('current')
if mibBuilder.loadTexts: plugGroupPower.setDescription('Plug group power (Watts)')
userTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400), )
if mibBuilder.loadTexts: userTable.setStatus('current')
if mibBuilder.loadTexts: userTable.setDescription('A table of users.')
userEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1), ).setIndexNames((0, "WTI-POWER-MIB", "userIndex"))
if mibBuilder.loadTexts: userEntry.setStatus('current')
if mibBuilder.loadTexts: userEntry.setDescription('Row definition for the user table.')
userIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: userIndex.setStatus('current')
if mibBuilder.loadTexts: userIndex.setDescription('Index for the user table.')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('The name of the user.')
userPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPasswd.setStatus('current')
if mibBuilder.loadTexts: userPasswd.setDescription('The password of the user.')
userAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAccessLevel.setStatus('current')
if mibBuilder.loadTexts: userAccessLevel.setDescription('Users access level')
userPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPortAccess.setStatus('current')
if mibBuilder.loadTexts: userPortAccess.setDescription('Access to ports.')
userLocalAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLocalAccess.setStatus('current')
if mibBuilder.loadTexts: userLocalAccess.setDescription('Access to LOCAL plugs.')
userGroupAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 54))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupAccess.setStatus('current')
if mibBuilder.loadTexts: userGroupAccess.setDescription('Access to plug groups.')
userSerialAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSerialAccess.setStatus('current')
if mibBuilder.loadTexts: userSerialAccess.setDescription('Access to serial interface.')
userTelnetSshAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userTelnetSshAccess.setStatus('current')
if mibBuilder.loadTexts: userTelnetSshAccess.setDescription('Access to Telnet/SSH interface.')
userWebAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userWebAccess.setStatus('current')
if mibBuilder.loadTexts: userWebAccess.setDescription('Access to web interface.')
userCurrentPowerMetering = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userCurrentPowerMetering.setStatus('current')
if mibBuilder.loadTexts: userCurrentPowerMetering.setDescription('Access to Current/Power Metering.')
userCallbackNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userCallbackNum.setStatus('current')
if mibBuilder.loadTexts: userCallbackNum.setDescription('Callback number.')
userSubmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSubmit.setStatus('current')
if mibBuilder.loadTexts: userSubmit.setDescription('Submit changes to user.')
environmentTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 200))
environmentUnitTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10), )
if mibBuilder.loadTexts: environmentUnitTable.setStatus('current')
if mibBuilder.loadTexts: environmentUnitTable.setDescription('A table of environment status for units.')
environmentUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1), ).setIndexNames((0, "WTI-POWER-MIB", "environmentUnitIndex"))
if mibBuilder.loadTexts: environmentUnitEntry.setStatus('current')
if mibBuilder.loadTexts: environmentUnitEntry.setDescription('Row definition for the environment unit table.')
environmentUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: environmentUnitIndex.setStatus('current')
if mibBuilder.loadTexts: environmentUnitIndex.setDescription('Index for the environment unit table.')
environmentUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitName.setStatus('current')
if mibBuilder.loadTexts: environmentUnitName.setDescription('The name of the unit.')
environmentUnitTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitTemperature.setStatus('current')
if mibBuilder.loadTexts: environmentUnitTemperature.setDescription('The temperature of the unit.')
environmentUnitCurrentA = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitCurrentA.setStatus('current')
if mibBuilder.loadTexts: environmentUnitCurrentA.setDescription('The number of amps in branch A for unit (In tenths of amps, divide by 10 for value in amps).')
environmentUnitVoltageA = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitVoltageA.setStatus('current')
if mibBuilder.loadTexts: environmentUnitVoltageA.setDescription('The voltage of branch A for unit.')
environmentUnitPowerA = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitPowerA.setStatus('current')
if mibBuilder.loadTexts: environmentUnitPowerA.setDescription('The number of watts used by branch A for unit.')
environmentUnitCurrentB = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitCurrentB.setStatus('current')
if mibBuilder.loadTexts: environmentUnitCurrentB.setDescription('The number of amps in branch B for unit (In tenths of amps, divide by 10 for value in amps).')
environmentUnitVoltageB = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitVoltageB.setStatus('current')
if mibBuilder.loadTexts: environmentUnitVoltageB.setDescription('The voltage of branch B for unit.')
environmentUnitPowerB = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitPowerB.setStatus('current')
if mibBuilder.loadTexts: environmentUnitPowerB.setDescription('The number of watts used by branch b for unit.')
environmentUnitCurrentC = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitCurrentC.setStatus('current')
if mibBuilder.loadTexts: environmentUnitCurrentC.setDescription('The number of amps in branch C for unit (In tenths of amps, divide by 10 for value in amps).')
environmentUnitVoltageC = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitVoltageC.setStatus('current')
if mibBuilder.loadTexts: environmentUnitVoltageC.setDescription('The voltage of branch C for unit.')
environmentUnitPowerC = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitPowerC.setStatus('current')
if mibBuilder.loadTexts: environmentUnitPowerC.setDescription('The number of watts used by branch c for unit.')
environmentUnitCurrentD = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitCurrentD.setStatus('current')
if mibBuilder.loadTexts: environmentUnitCurrentD.setDescription('The number of amps in branch D for unit (In tenths of amps, divide by 10 for value in amps).')
environmentUnitVoltageD = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitVoltageD.setStatus('current')
if mibBuilder.loadTexts: environmentUnitVoltageD.setDescription('The voltage of branch D for unit.')
environmentUnitPowerD = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitPowerD.setStatus('current')
if mibBuilder.loadTexts: environmentUnitPowerD.setDescription('The number of watts used by branch d for unit.')
environmentSysRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentSysRAM.setStatus('current')
if mibBuilder.loadTexts: environmentSysRAM.setDescription('Total system RAM.')
environmentSysFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentSysFlash.setStatus('current')
if mibBuilder.loadTexts: environmentSysFlash.setDescription('Total system Flash.')
environmentMacEth0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentMacEth0.setStatus('current')
if mibBuilder.loadTexts: environmentMacEth0.setDescription('MAC Address Eth0')
environmentMacEth1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentMacEth1.setStatus('current')
if mibBuilder.loadTexts: environmentMacEth1.setDescription('MAC Address Eth1')
environmentInputPower1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentInputPower1.setStatus('current')
if mibBuilder.loadTexts: environmentInputPower1.setDescription('Status of first power input.')
environmentInputPower2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentInputPower2.setStatus('current')
if mibBuilder.loadTexts: environmentInputPower2.setDescription('Status of second power input.')
environmentInputPower3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentInputPower3.setStatus('current')
if mibBuilder.loadTexts: environmentInputPower3.setDescription('Status of third power input.')
environmentInputPower4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentInputPower4.setStatus('current')
if mibBuilder.loadTexts: environmentInputPower4.setDescription('Status of fourth power input.')
environmentBranchATotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchATotalCurrent.setStatus('current')
if mibBuilder.loadTexts: environmentBranchATotalCurrent.setDescription('Total Current on BRANCH A (In tenths of amps, divide by 10 for value in amps).')
environmentBranchATotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchATotalPower.setStatus('current')
if mibBuilder.loadTexts: environmentBranchATotalPower.setDescription('Total Power on BRANCH A.')
environmentBranchBTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchBTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: environmentBranchBTotalCurrent.setDescription('Total Current on BRANCH B (In tenths of amps, divide by 10 for value in amps).')
environmentBranchBTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchBTotalPower.setStatus('current')
if mibBuilder.loadTexts: environmentBranchBTotalPower.setDescription('Total Power on BRANCH B.')
environmentBranchCTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchCTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: environmentBranchCTotalCurrent.setDescription('Total Current on BRANCH C (In tenths of amps, divide by 10 for value in amps).')
environmentBranchCTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchCTotalPower.setStatus('current')
if mibBuilder.loadTexts: environmentBranchCTotalPower.setDescription('Total Power on BRANCH C.')
environmentBranchDTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchDTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: environmentBranchDTotalCurrent.setDescription('Total Current on BRANCH D (In tenths of amps, divide by 10 for value in amps).')
environmentBranchDTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchDTotalPower.setStatus('current')
if mibBuilder.loadTexts: environmentBranchDTotalPower.setDescription('Total Power on BRANCH D.')
environmentSystemTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentSystemTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: environmentSystemTotalCurrent.setDescription('Total current for system  (In tenths of amps, divide by 10 for value in amps).')
environmentSystemTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentSystemTotalPower.setStatus('current')
if mibBuilder.loadTexts: environmentSystemTotalPower.setDescription('Total power on system.')
environmentMonthlyPowerLog = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 80), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentMonthlyPowerLog.setStatus('current')
if mibBuilder.loadTexts: environmentMonthlyPowerLog.setDescription('The monthly power usage log')
alarmTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 280))
alarmOverCurrentInitial = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 280, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOverCurrentInitial.setStatus('current')
if mibBuilder.loadTexts: alarmOverCurrentInitial.setDescription('State of the Over Current Initial Alarm (0 = Inactive, 1 = Active)')
alarmOverCurrentCritical = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 280, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOverCurrentCritical.setStatus('current')
if mibBuilder.loadTexts: alarmOverCurrentCritical.setDescription('State of the Over Current Critical Alarm (0 = Inactive, 1 = Active)')
alarmOverTemperatureInitial = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 280, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOverTemperatureInitial.setStatus('current')
if mibBuilder.loadTexts: alarmOverTemperatureInitial.setDescription('State of the Over Temperature Initial Alarm (0 = Inactive, 1 = Active)')
alarmOverTemperatureCritical = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 280, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOverTemperatureCritical.setStatus('current')
if mibBuilder.loadTexts: alarmOverTemperatureCritical.setDescription('State of the Over Temperature Critical Alarm (0 = Inactive, 1 = Active)')
alarmCircuitBreakerOpen = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 280, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCircuitBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: alarmCircuitBreakerOpen.setDescription('State of the Circuit Breaker Open Alarm (0 = Inactive, 1 = Active)')
alarmCommLoss = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 280, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCommLoss.setStatus('current')
if mibBuilder.loadTexts: alarmCommLoss.setDescription('State of the Communication Loss Alarm (0 = Inactive, 1 = Active)')
alarmLostVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 280, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLostVoltage.setStatus('current')
if mibBuilder.loadTexts: alarmLostVoltage.setDescription('State of the Lost Voltage (Line Input) Alarm (0 = Inactive, 1 = Active)')
alarmPingNoAnswer = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 280, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPingNoAnswer.setStatus('current')
if mibBuilder.loadTexts: alarmPingNoAnswer.setDescription('State of the Ping No Answer Alarm (0 = Inactive, 1 = Active)')
alarmInvalidAccessLockout = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 280, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmInvalidAccessLockout.setStatus('current')
if mibBuilder.loadTexts: alarmInvalidAccessLockout.setDescription('State of the Invalid Access Lockout Alarm (0 = Inactive, 1 = Active)')
alarmPowerCycle = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 280, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPowerCycle.setStatus('current')
if mibBuilder.loadTexts: alarmPowerCycle.setDescription('State of the Power Cycle Alarm (0 = Inactive, 1 = Active)')
alarmAlarmInput = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 280, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmAlarmInput.setStatus('current')
if mibBuilder.loadTexts: alarmAlarmInput.setDescription('State of the Alarm Input Alarm (0 = Inactive, 1 = Active)')
alarmPlugCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 280, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPlugCurrent.setStatus('current')
if mibBuilder.loadTexts: alarmPlugCurrent.setDescription('State of the Plug Current Alarm (0 = Inactive, 1 = Active)')
alarmLostOptoVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 280, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLostOptoVoltage.setStatus('current')
if mibBuilder.loadTexts: alarmLostOptoVoltage.setDescription('State of the Lost Voltage (Line Input) Alarm (0 = Inactive, 1 = Active)')
alarmEmergencyShutoff = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 280, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEmergencyShutoff.setStatus('current')
if mibBuilder.loadTexts: alarmEmergencyShutoff.setDescription('State of the Emergency Shutoff Alarm (0 = Inactive, 1 = Active)')
alarmNoDialtone = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 280, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNoDialtone.setStatus('current')
if mibBuilder.loadTexts: alarmNoDialtone.setDescription('State of the No Dialtone Alarm (0 = Inactive, 1 = Active)')
wtiTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300))
trapInfo = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 300, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapInfo.setStatus('current')
if mibBuilder.loadTexts: trapInfo.setDescription('Alarm information')
testTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 2))
testTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 2) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: testTrap.setDescription('A test trap')
overCurrentInitialTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 4))
overCurrentInitialSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 4) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: overCurrentInitialSetTrap.setDescription('Over Current Initial Alarm')
overCurrentInitialClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 4) + (0,2)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: overCurrentInitialClearTrap.setDescription('Over Current Initial Alarm (Clear)')
overCurrentCriticalTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 5))
overCurrentCriticalSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 5) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: overCurrentCriticalSetTrap.setDescription('Over Current Critical Alarm')
overCurrentCriticalClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 5) + (0,2)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: overCurrentCriticalClearTrap.setDescription('Over Current Critical Alarm (Clear)')
overTemperatureInitialTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 6))
overTemperatureInitialSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 6) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: overTemperatureInitialSetTrap.setDescription('Over Temperature Initial Alarm')
overTemperatureInitialClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 6) + (0,2)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: overTemperatureInitialClearTrap.setDescription('Over Temperature Initial Alarm (Clear)')
overTemperatureCriticalTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 7))
overTemperatureCriticalSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 7) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: overTemperatureCriticalSetTrap.setDescription('Over Temperature Critical Alarm')
overTemperatureCriticalClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 7) + (0,2)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: overTemperatureCriticalClearTrap.setDescription('Over Temperature Critical Alarm (Clear)')
circuitBreakerOpenTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 8))
circuitBreakerOpenSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 8) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: circuitBreakerOpenSetTrap.setDescription('Circuit Breaker Open Alarm')
circuitBreakerOpenClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 8) + (0,2)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: circuitBreakerOpenClearTrap.setDescription('Circuit Breaker Open Alarm (Clear)')
lostCommTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 9))
lostCommSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 9) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: lostCommSetTrap.setDescription('Lost Communication with AUX Unit')
lostCommClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 9) + (0,2)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: lostCommClearTrap.setDescription('Lost Communication with AUX Unit (Clear)')
lostVoltageTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 10))
lostVoltageSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 10) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: lostVoltageSetTrap.setDescription('Lost Voltage (Line In)')
lostVoltageClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 10) + (0,2)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: lostVoltageClearTrap.setDescription('Lost Voltage (Line In) (Clear)')
pingNoAnswerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 11))
pingNoAnswerSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 11) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: pingNoAnswerSetTrap.setDescription('Ping No Answer')
pingNoAnswerClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 11) + (0,2)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: pingNoAnswerClearTrap.setDescription('Ping No Answer (Clear)')
lockoutTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 12))
lockoutSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 12) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: lockoutSetTrap.setDescription('Invalid Access Lockout')
lockoutClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 12) + (0,2)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: lockoutClearTrap.setDescription('Invalid Access Lockout (Clear)')
powercycleTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 13))
powercycleSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 13) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: powercycleSetTrap.setDescription('Power Cycle')
alarmInputTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 14))
alarmInputSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 14) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: alarmInputSetTrap.setDescription('Alarm Input')
alarmInputClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 14) + (0,2)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: alarmInputClearTrap.setDescription('Alarm Input (Clear)')
plugCurrentTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 15))
plugCurrentSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 15) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: plugCurrentSetTrap.setDescription('Plug Current')
plugCurrentClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 15) + (0,2)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: plugCurrentClearTrap.setDescription('Plug Current (Clear)')
lostOptoVoltageTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 16))
lostOptoVoltageSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 16) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: lostOptoVoltageSetTrap.setDescription('Lost Voltage')
lostOptoVoltageClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 16) + (0,2)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: lostOptoVoltageClearTrap.setDescription('Lost Voltage (Clear)')
emergencyShutoffTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 17))
emergencyShutoffSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 17) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: emergencyShutoffSetTrap.setDescription('Emergency Shutoff')
emergencyShutoffClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 17) + (0,2)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: emergencyShutoffClearTrap.setDescription('Emergency Shutoff (Clear)')
noDialtoneTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 18))
noDialtoneSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 18) + (0,1)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: noDialtoneSetTrap.setDescription('No Dialtone')
noDialtoneClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 18) + (0,2)).setObjects(("WTI-POWER-MIB", "trapInfo"))
if mibBuilder.loadTexts: noDialtoneClearTrap.setDescription('No Dialtone (Clear)')
mibBuilder.exportSymbols("WTI-POWER-MIB", environmentUnitCurrentC=environmentUnitCurrentC, lostOptoVoltageTraps=lostOptoVoltageTraps, emergencyShutoffSetTrap=emergencyShutoffSetTrap, environmentMacEth1=environmentMacEth1, userCurrentPowerMetering=userCurrentPowerMetering, environmentUnitTemperature=environmentUnitTemperature, environmentBranchBTotalPower=environmentBranchBTotalPower, plugEntry=plugEntry, userGroupAccess=userGroupAccess, overTemperatureInitialSetTrap=overTemperatureInitialSetTrap, plugCurrentClearTrap=plugCurrentClearTrap, lostCommTraps=lostCommTraps, alarmCommLoss=alarmCommLoss, plugTable=plugTable, lostOptoVoltageSetTrap=lostOptoVoltageSetTrap, alarmOverCurrentCritical=alarmOverCurrentCritical, noDialtoneTraps=noDialtoneTraps, environmentBranchATotalPower=environmentBranchATotalPower, overCurrentInitialTraps=overCurrentInitialTraps, pingNoAnswerClearTrap=pingNoAnswerClearTrap, environmentSystemTotalCurrent=environmentSystemTotalCurrent, overTemperatureCriticalTraps=overTemperatureCriticalTraps, environmentUnitPowerB=environmentUnitPowerB, PYSNMP_MODULE_ID=power, environmentBranchDTotalPower=environmentBranchDTotalPower, alarmOverTemperatureInitial=alarmOverTemperatureInitial, systemTables=systemTables, plugGroupIndex=plugGroupIndex, circuitBreakerOpenClearTrap=circuitBreakerOpenClearTrap, environmentUnitVoltageD=environmentUnitVoltageD, environmentBranchDTotalCurrent=environmentBranchDTotalCurrent, pingNoAnswerSetTrap=pingNoAnswerSetTrap, plugIndex=plugIndex, userAccessLevel=userAccessLevel, userPasswd=userPasswd, userTelnetSshAccess=userTelnetSshAccess, environmentUnitPowerC=environmentUnitPowerC, alarmPlugCurrent=alarmPlugCurrent, trapInfo=trapInfo, alarmNoDialtone=alarmNoDialtone, userWebAccess=userWebAccess, lostCommSetTrap=lostCommSetTrap, overCurrentCriticalSetTrap=overCurrentCriticalSetTrap, userSubmit=userSubmit, noDialtoneClearTrap=noDialtoneClearTrap, environmentSysRAM=environmentSysRAM, alarmPowerCycle=alarmPowerCycle, plugCurrent=plugCurrent, plugGroupPower=plugGroupPower, userTable=userTable, westernTelematic=westernTelematic, plugGroupTable=plugGroupTable, overCurrentCriticalClearTrap=overCurrentCriticalClearTrap, userPortAccess=userPortAccess, overTemperatureInitialTraps=overTemperatureInitialTraps, emergencyShutoffClearTrap=emergencyShutoffClearTrap, overCurrentCriticalTraps=overCurrentCriticalTraps, environmentUnitVoltageC=environmentUnitVoltageC, environmentUnitCurrentB=environmentUnitCurrentB, environmentSysFlash=environmentSysFlash, plugPower=plugPower, environmentMacEth0=environmentMacEth0, alarmCircuitBreakerOpen=alarmCircuitBreakerOpen, environmentInputPower3=environmentInputPower3, alarmOverCurrentInitial=alarmOverCurrentInitial, userSerialAccess=userSerialAccess, alarmInputSetTrap=alarmInputSetTrap, environmentTables=environmentTables, alarmPingNoAnswer=alarmPingNoAnswer, lockoutSetTrap=lockoutSetTrap, plugGroupCurrent=plugGroupCurrent, overTemperatureCriticalSetTrap=overTemperatureCriticalSetTrap, circuitBreakerOpenTraps=circuitBreakerOpenTraps, environmentMonthlyPowerLog=environmentMonthlyPowerLog, overCurrentInitialClearTrap=overCurrentInitialClearTrap, lostOptoVoltageClearTrap=lostOptoVoltageClearTrap, environmentUnitPowerD=environmentUnitPowerD, lostVoltageSetTrap=lostVoltageSetTrap, emergencyShutoffTraps=emergencyShutoffTraps, power=power, environmentInputPower2=environmentInputPower2, alarmInvalidAccessLockout=alarmInvalidAccessLockout, userIndex=userIndex, alarmInputTraps=alarmInputTraps, lockoutTraps=lockoutTraps, environmentInputPower4=environmentInputPower4, userLocalAccess=userLocalAccess, environmentUnitName=environmentUnitName, plugName=plugName, environmentBranchCTotalPower=environmentBranchCTotalPower, environmentUnitCurrentA=environmentUnitCurrentA, environmentUnitPowerA=environmentUnitPowerA, alarmOverTemperatureCritical=alarmOverTemperatureCritical, environmentUnitVoltageA=environmentUnitVoltageA, environmentUnitTable=environmentUnitTable, environmentUnitVoltageB=environmentUnitVoltageB, environmentUnitEntry=environmentUnitEntry, powercycleTraps=powercycleTraps, environmentInputPower1=environmentInputPower1, lockoutClearTrap=lockoutClearTrap, alarmInputClearTrap=alarmInputClearTrap, lostCommClearTrap=lostCommClearTrap, plugAction=plugAction, alarmLostOptoVoltage=alarmLostOptoVoltage, alarmEmergencyShutoff=alarmEmergencyShutoff, alarmLostVoltage=alarmLostVoltage, plugCurrentTraps=plugCurrentTraps, alarmTables=alarmTables, testTrap=testTrap, overCurrentInitialSetTrap=overCurrentInitialSetTrap, lostVoltageClearTrap=lostVoltageClearTrap, plugGroupEntry=plugGroupEntry, overTemperatureInitialClearTrap=overTemperatureInitialClearTrap, overTemperatureCriticalClearTrap=overTemperatureCriticalClearTrap, environmentBranchCTotalCurrent=environmentBranchCTotalCurrent, userName=userName, environmentUnitCurrentD=environmentUnitCurrentD, environmentSystemTotalPower=environmentSystemTotalPower, wtiTraps=wtiTraps, plugGroupName=plugGroupName, noDialtoneSetTrap=noDialtoneSetTrap, plugStatus=plugStatus, powercycleSetTrap=powercycleSetTrap, userCallbackNum=userCallbackNum, plugGroupAction=plugGroupAction, testTraps=testTraps, lostVoltageTraps=lostVoltageTraps, plugID=plugID, userEntry=userEntry, pingNoAnswerTraps=pingNoAnswerTraps, plugCurrentSetTrap=plugCurrentSetTrap, alarmAlarmInput=alarmAlarmInput, environmentBranchATotalCurrent=environmentBranchATotalCurrent, circuitBreakerOpenSetTrap=circuitBreakerOpenSetTrap, environmentUnitIndex=environmentUnitIndex, environmentBranchBTotalCurrent=environmentBranchBTotalCurrent)
