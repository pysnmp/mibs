#
# PySNMP MIB module FspR7-LAYER2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/FspR7-LAYER2-MIB
# Produced by pysmi-1.1.12 at Wed May 29 10:18:44 2024
# On host fv-az1984-402 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
entityClass, neEventLogIdentityTranslation, Counter64String, ProtectionMechCaps, LoopConfig, snmpProxyServerSynchroStage, TrapAlarmSeverity, snmpProxyEntrySingleTargetOutNodeAgentStatus, fspR7, ServiceImpairment, EntityClass, neEventLogTimeStamp, ProtectionMech, EntityIndex, entityIndex = mibBuilder.importSymbols("ADVA-MIB", "entityClass", "neEventLogIdentityTranslation", "Counter64String", "ProtectionMechCaps", "LoopConfig", "snmpProxyServerSynchroStage", "TrapAlarmSeverity", "snmpProxyEntrySingleTargetOutNodeAgentStatus", "fspR7", "ServiceImpairment", "EntityClass", "neEventLogTimeStamp", "ProtectionMech", "EntityIndex", "entityIndex")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ApsType, FspR7ProtectionRole, FspR7PmReset, FspR7ProtectionType, FspR7YesNo, FspR7APSCommand, FspR7Unsigned32Caps, FspR7ForcedStatusCaps, FspR7OperState, FspR7ForcedStatus, FspR7YesNoCaps, FspR7InterfaceFunction, FspR7PmResetCaps, FspR7Integer32Caps, FspR7AdminState, FspR7AdminStateCaps, FspR7APSCommandCaps, FspR7Conn, ApsRevertMode, FspR7FunctionCrs, ApsDirection, FspR7TypeCrsCaps, FspR7TypeCrs, FspR7ConnectState, FspR7RowStatusCaps, FspR7InterfaceTypeCaps, FspR7InterfaceType, ApsRevertModeCaps, FspR7EntitySecondaryStates, FspR7ConnCaps = mibBuilder.importSymbols("FspR7-MIB", "ApsType", "FspR7ProtectionRole", "FspR7PmReset", "FspR7ProtectionType", "FspR7YesNo", "FspR7APSCommand", "FspR7Unsigned32Caps", "FspR7ForcedStatusCaps", "FspR7OperState", "FspR7ForcedStatus", "FspR7YesNoCaps", "FspR7InterfaceFunction", "FspR7PmResetCaps", "FspR7Integer32Caps", "FspR7AdminState", "FspR7AdminStateCaps", "FspR7APSCommandCaps", "FspR7Conn", "ApsRevertMode", "FspR7FunctionCrs", "ApsDirection", "FspR7TypeCrsCaps", "FspR7TypeCrs", "FspR7ConnectState", "FspR7RowStatusCaps", "FspR7InterfaceTypeCaps", "FspR7InterfaceType", "ApsRevertModeCaps", "FspR7EntitySecondaryStates", "FspR7ConnCaps")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Unsigned32, Gauge32, Bits, Integer32, Counter32, IpAddress, snmpModules, mib_2, MibIdentifier, enterprises, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Unsigned32", "Gauge32", "Bits", "Integer32", "Counter32", "IpAddress", "snmpModules", "mib-2", "MibIdentifier", "enterprises", "ObjectIdentity", "iso")
TimeStamp, DisplayString, RowStatus, TruthValue, TextualConvention, DateAndTime, TestAndIncr = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "RowStatus", "TruthValue", "TextualConvention", "DateAndTime", "TestAndIncr")
layer2MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3))
layer2MIB.setRevisions(('2011-02-21 00:00', '2010-10-29 00:00', '2010-10-22 00:00', '2010-08-31 00:00', '2010-06-14 00:00', '2010-03-24 00:00', '2009-11-20 00:00', '2009-06-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: layer2MIB.setRevisionsDescriptions(('FSP3000 F7 Release 10.3 MIB.', 'FSP3000 F7 Release 10.2 MIB.', 'FSP3000 F7 Release 10.2.0 MIB.', 'FSP3000 F7 Release 10.1 MIB.', 'FSP3000 F7 Release 9.4 MIB.', 'FSP3000 F7 Release 9.3 MIB.', 'FSP3000 F7 Release 9.2 MIB.', 'FSP3000 F7 Release 9.1 MIB.',))
if mibBuilder.loadTexts: layer2MIB.setLastUpdated('201102210000Z')
if mibBuilder.loadTexts: layer2MIB.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: layer2MIB.setContactInfo('EMEA Support\n                  Phone : +49 89 89 0665 848\n                  Fax   : +49 89 89 0665 22848\n                  Email : support@advaoptical.com\n\n                  North American Support\n                  Phone : 886 442 ADVA (2382) (toll-free within the US, Canada and Mexico)\n                  Fax   : + 1 806 741 8529 (elsewhere)\n                  Email : support-usa@advaoptical.com\n\n                  Asia Pacific Support\n                  Phone : + 1 866 442 2382 (other toll-free numbers available in some countries)\n                  Email : support-asia@advaoptical.com')
if mibBuilder.loadTexts: layer2MIB.setDescription('This is a MIB definition for L2MUX functionality.')
layer2EntitiesMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11))
layer2ProvisioningMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12))
flowProvisioning = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11))
ctransProvisioning = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12))
bridgeProvisioning = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13))
layer2ConfigurationMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13))
flowConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11))
bridgeConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12))
queOnBridgeConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 13))
layer2StatusMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14))
flowStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 11))
ctransStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 12))
policerStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 13))
queStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14))
bridgeStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 15))
layer2CrossConnections = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15))
layer2PerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16))
flowPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1))
policerPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2))
quePerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3))
layer2Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17))
layer2Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1))
layer2TrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0))
layer2Conditions = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2))
layer2FlowProtection = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18))
class BridgeEntityIndex(TextualConvention, Integer32):
    description = 'The index of a BRIDGE entity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class FspR7DisableEnable(TextualConvention, Integer32):
    description = 'Disable/Enable variable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("disable", 1), ("enable", 2))

class FspR7DisableEnableCaps(TextualConvention, Bits):
    description = 'Disable/Enable variable.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capDisable", 1), ("capEnable", 2))

class FspR7Brigde(TextualConvention, Integer32):
    description = 'To select between diffenrent protection types'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("bridge1plus1", 1), ("bridge1for1", 2), ("bridge1plus1back2back", 3), ("bridge1for1extra", 4))

class FspR7BrigdeCaps(TextualConvention, Bits):
    description = 'To select between diffenrent protection types'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capBridge1plus1", 1), ("capBridge1for1", 2), ("capBridge1plus1back2back", 3), ("capBridge1for1extra", 4))

class FspR7L2Brigde(TextualConvention, Integer32):
    description = 'To select between diffenrent protection types'
    status = 'obsolete'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("bridge1plus1", 1), ("bridge1to1", 2))

class FspR7L2BrigdeCaps(TextualConvention, Bits):
    description = 'To select between diffenrent protection types'
    status = 'obsolete'
    namedValues = NamedValues(("capUndefined", 0), ("capBridge1plus1", 1), ("capBridge1to1", 2))

class FspR7L2FlowType(TextualConvention, Integer32):
    description = 'EVC type according to MEF'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("eline", 1), ("etree", 2), ("elan", 3))

class FspR7L2FlowTypeCaps(TextualConvention, Bits):
    description = 'EVC type according to MEF'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEline", 1), ("capEtree", 2), ("capElan", 3))

class FspR7L2LevelDomainMonitored(TextualConvention, Integer32):
    description = 'Maintenance Domain Level monitored'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("undefined", 0), ("notSupported", 1), ("levelMD0", 2), ("levelMD1", 3), ("levelMD2", 4), ("levelMD3", 5), ("levelMD4", 6), ("levelMD5", 7), ("levelMD6", 8), ("levelMD7", 9))

class FspR7L2LevelDomainMonitoredCaps(TextualConvention, Bits):
    description = 'Maintenance Domain Level monitored'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capNotSupported", 1), ("capLevelMD0", 2), ("capLevelMD1", 3), ("capLevelMD2", 4), ("capLevelMD3", 5), ("capLevelMD4", 6), ("capLevelMD5", 7), ("capLevelMD6", 8), ("capLevelMD7", 9))

class FspR7L2PmMode(TextualConvention, Integer32):
    description = 'Mode of PM counters'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("enableAll", 1), ("enableCurrent", 2), ("disable", 3))

class FspR7L2PmModeCaps(TextualConvention, Bits):
    description = 'Mode of PM counters'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnableAll", 1), ("capEnableCurrent", 2), ("capDisable", 3))

class FspR7L2StandingConditionTypes(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 100000, 100001, 100002, 100003, 100004, 100005, 100006, 100007, 100008, 100009, 100010, 100011, 100012, 100013, 100014, 100015, 100016, 100019))
    namedValues = NamedValues(("undefined", 0), ("oosDisabledL2", 100000), ("oosManagementL2", 100001), ("oosMaintenanceL2", 100002), ("oosAinsL2", 100003), ("serverSignalFailL2", 100004), ("mepNotPresentL2", 100005), ("priVidNotEqualExtVidL2", 100006), ("switchtoProtectionInhibitedL2", 100007), ("manswL2", 100008), ("sfCfmLevel0L2", 100009), ("sfCfmLevel1L2", 100010), ("sfCfmLevel2L2", 100011), ("sfCfmLevel3L2", 100012), ("sfCfmLevel4L2", 100013), ("sfCfmLevel5L2", 100014), ("sfCfmLevel6L2", 100015), ("sfCfmLevel7L2", 100016), ("switchtoWorkingInhibitedL2", 100019))

class BridgeStandingConditionTypes(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 100017, 100018))
    namedValues = NamedValues(("undefined", 0), ("bridgeOosManagement", 100017), ("bridgeOosAins", 100018))

class FspR7RedLinedState(TextualConvention, Integer32):
    description = 'will be set by higher level software to act as a barrier to deletion'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("yes", 1), ("no", 2))

class FspR7RedLinedStateCaps(TextualConvention, Bits):
    description = 'will be set by higher level software to act as a barrier to deletion'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capYes", 1), ("capNo", 2))

class QueueEntityIndex(TextualConvention, Integer32):
    description = 'The index of a QUEUE entity. The QUEUE entity may be defined on PORT, FLOW or\n         BRIDGE depending on QUEUE type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

flowEntityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 10), )
if mibBuilder.loadTexts: flowEntityTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityTable.setDescription('')
flowEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 10, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: flowEntityEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityEntry.setDescription('')
flowEntityIndexEth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 10, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: flowEntityIndexEth.setStatus('current')
if mibBuilder.loadTexts: flowEntityIndexEth.setDescription('First index of a flow entity referencing to eth entity (parent).')
flowEntityIndexFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 10, 1, 2), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: flowEntityIndexFlow.setStatus('current')
if mibBuilder.loadTexts: flowEntityIndexFlow.setDescription('Second index of a flow entity referencing to svid value.')
flowEntityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 10, 1, 3), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityClass.setStatus('current')
if mibBuilder.loadTexts: flowEntityClass.setDescription('See EntityClass')
flowEntityClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: flowEntityClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
flowEntityIndexAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 10, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityIndexAid.setStatus('current')
if mibBuilder.loadTexts: flowEntityIndexAid.setDescription('Name')
ctransEntityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 11), )
if mibBuilder.loadTexts: ctransEntityTable.setStatus('current')
if mibBuilder.loadTexts: ctransEntityTable.setDescription('')
ctransEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 11, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "ctransEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "ctransEntityIndexCVlanId"))
if mibBuilder.loadTexts: ctransEntityEntry.setStatus('current')
if mibBuilder.loadTexts: ctransEntityEntry.setDescription('')
ctransEntityIndexEth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 11, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctransEntityIndexEth.setStatus('current')
if mibBuilder.loadTexts: ctransEntityIndexEth.setDescription('First index of a ctrans entity referencing to eth entity (parent).')
ctransEntityIndexCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 11, 1, 2), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctransEntityIndexCVlanId.setStatus('current')
if mibBuilder.loadTexts: ctransEntityIndexCVlanId.setDescription('Second index of a ctrans entity referencing to svid value.')
ctransEntityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 11, 1, 3), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctransEntityClass.setStatus('current')
if mibBuilder.loadTexts: ctransEntityClass.setDescription('See EntityClass')
ctransEntityClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctransEntityClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: ctransEntityClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
ctransEntityIndexAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 11, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctransEntityIndexAid.setStatus('current')
if mibBuilder.loadTexts: ctransEntityIndexAid.setDescription('Name')
bridgeEntityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 12), )
if mibBuilder.loadTexts: bridgeEntityTable.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityTable.setDescription('This table contains entries presenting the BRIDGE entities.')
bridgeEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 12, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "bridgeEntityContainedIn"), (0, "FspR7-LAYER2-MIB", "bridgeEntitySvid"))
if mibBuilder.loadTexts: bridgeEntityEntry.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityEntry.setDescription('The BRIDGE entity.')
bridgeEntityContainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 12, 1, 1), EntityIndex())
if mibBuilder.loadTexts: bridgeEntityContainedIn.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityContainedIn.setDescription('Index of BRIDGE entity pointing to its parent MODULE entity.')
bridgeEntitySvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 12, 1, 2), BridgeEntityIndex())
if mibBuilder.loadTexts: bridgeEntitySvid.setStatus('current')
if mibBuilder.loadTexts: bridgeEntitySvid.setDescription('The SVID value for this BRIDGE entity. This index points\n         to flow entity with the same SVID.')
bridgeEntityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 12, 1, 3), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityClass.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityClass.setDescription('See EntityClass Textual-Convention.')
bridgeEntityClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityClassInstanceNumber.setDescription('Order number for the BRIDGE entity present in the system.')
bridgeEntityIndexAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 12, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityIndexAid.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityIndexAid.setDescription('This column presents a text-based entity address description.')
policerOnFlowEntityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 13), )
if mibBuilder.loadTexts: policerOnFlowEntityTable.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityTable.setDescription('')
policerOnFlowEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 13, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexPolicer"))
if mibBuilder.loadTexts: policerOnFlowEntityEntry.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityEntry.setDescription('')
policerOnFlowEntityIndexEth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 13, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: policerOnFlowEntityIndexEth.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityIndexEth.setDescription('Index of a policer entity referencing to eth entity (parent).')
policerOnFlowEntityIndexFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 13, 1, 2), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: policerOnFlowEntityIndexFlow.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityIndexFlow.setDescription('Index of a policer entity referencing to svid value.')
policerOnFlowEntityIndexPolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 13, 1, 3), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: policerOnFlowEntityIndexPolicer.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityIndexPolicer.setDescription('Index of a policer entity referencing to prio value.')
policerOnFlowEntityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 13, 1, 4), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policerOnFlowEntityClass.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityClass.setDescription('See EntityClass')
policerOnFlowEntityClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: policerOnFlowEntityClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
policerOnFlowEntityIndexAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 13, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policerOnFlowEntityIndexAid.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityIndexAid.setDescription('Name')
queOnPortEntityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 15), )
if mibBuilder.loadTexts: queOnPortEntityTable.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityTable.setDescription('')
queOnPortEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 15, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnPortEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "queOnPortEntityIndexPrio"))
if mibBuilder.loadTexts: queOnPortEntityEntry.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityEntry.setDescription('')
queOnPortEntityIndexEth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 15, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: queOnPortEntityIndexEth.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityIndexEth.setDescription('First index of a que entity referencing to eth entity (parent).')
queOnPortEntityIndexPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 15, 1, 2), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: queOnPortEntityIndexPrio.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityIndexPrio.setDescription('Third index of a que entity referencing to priority value.')
queOnPortEntityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 15, 1, 3), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnPortEntityClass.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityClass.setDescription('See EntityClass')
queOnPortEntityClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnPortEntityClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
queOnPortEntityIndexAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 15, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnPortEntityIndexAid.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityIndexAid.setDescription('Name')
queOnFlowEntityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 16), )
if mibBuilder.loadTexts: queOnFlowEntityTable.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityTable.setDescription('')
queOnFlowEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 16, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexPrio"))
if mibBuilder.loadTexts: queOnFlowEntityEntry.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityEntry.setDescription('')
queOnFlowEntityIndexEth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 16, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: queOnFlowEntityIndexEth.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityIndexEth.setDescription('First index of a que entity referencing to eth entity (parent).')
queOnFlowEntityIndexFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 16, 1, 2), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: queOnFlowEntityIndexFlow.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityIndexFlow.setDescription('Third index of a que entity referencing to priority value.')
queOnFlowEntityIndexPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 16, 1, 3), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: queOnFlowEntityIndexPrio.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityIndexPrio.setDescription('Third index of a que entity referencing to priority value.')
queOnFlowEntityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 16, 1, 4), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnFlowEntityClass.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityClass.setDescription('See EntityClass')
queOnFlowEntityClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnFlowEntityClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
queOnFlowEntityIndexAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 16, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnFlowEntityIndexAid.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityIndexAid.setDescription('Name')
queOnBridgeEntityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 17), )
if mibBuilder.loadTexts: queOnBridgeEntityTable.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityTable.setDescription('This table lists all assigned QUE on BRIDGE entities.')
queOnBridgeEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 17, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnBridgeEntityIndex"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntitySvid"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntityPrio"))
if mibBuilder.loadTexts: queOnBridgeEntityEntry.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityEntry.setDescription('Table entry represents QUE on BRIDGE entity.')
queOnBridgeEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 17, 1, 1), QueueEntityIndex())
if mibBuilder.loadTexts: queOnBridgeEntityIndex.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityIndex.setDescription('First index of a QUE on BRIDGE inherits value from parent entity.')
queOnBridgeEntitySvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 17, 1, 2), QueueEntityIndex())
if mibBuilder.loadTexts: queOnBridgeEntitySvid.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntitySvid.setDescription('Second index of a QUE on BRIDGE inherits value from parent entity.')
queOnBridgeEntityPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 17, 1, 3), QueueEntityIndex())
if mibBuilder.loadTexts: queOnBridgeEntityPrio.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityPrio.setDescription('Third index of a QUE on BRIDGE points its priority.')
queOnBridgeEntityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 17, 1, 4), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnBridgeEntityClass.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityClass.setDescription('See EntityClass Textual-Convention.')
queOnBridgeEntityClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnBridgeEntityClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityClassInstanceNumber.setDescription('System-wide, entity type unique number indicating its position in the system.')
queOnBridgeEntityIndexAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 11, 17, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnBridgeEntityIndexAid.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityIndexAid.setDescription('Printable entity name.')
flowEntityProvisionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11), )
if mibBuilder.loadTexts: flowEntityProvisionTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionTable.setDescription('')
flowEntityProvisionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: flowEntityProvisionEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionEntry.setDescription('')
flowEntityProvisionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionRowStatus.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionRowStatus.setDescription('This object is used to create, or delete a row in this table.')
flowEntityProvisionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 2), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionType.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionType.setDescription('')
flowEntityProvisionAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 3), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionAdmin.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
flowEntityProvisionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionAlias.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionAlias.setDescription('User Applied Descriptor')
flowEntityProvisionPopCtagRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionPopCtagRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPopCtagRcv.setDescription("'c-vid tag is removed in receive to an EVC. This is equivalent to untagged PEP in PB'")
flowEntityProvisionPopCtagTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionPopCtagTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPopCtagTrmt.setDescription("'c-vid tag is removed on transmit from EVC. This is equivalent to the untagged CEP in PB'")
flowEntityProvisionCvidRegisteredInFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionCvidRegisteredInFlow.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCvidRegisteredInFlow.setDescription('CVLANs Registered with the Flow')
flowEntityProvisionExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionExternalVid.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionExternalVid.setDescription('External VID')
flowEntityProvisionPmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 9), FspR7L2PmMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionPmMode.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPmMode.setDescription('Mode of PM counters')
flowEntityProvisionShape = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 10), FspR7DisableEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionShape.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionShape.setDescription('Shape Enablement')
flowEntityProvisionPolice = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 11), FspR7DisableEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionPolice.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPolice.setDescription('Police Enablement')
flowEntityProvisionDefaultEvcCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(7, 7), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionDefaultEvcCos.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultEvcCos.setDescription('Default COS for frames not matching classification scheme PCP/DSCP, or used as CoS for EVC based classification.')
flowEntityProvisionCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 13), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionCirRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCirRcv.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
flowEntityProvisionCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 14), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionCirTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
flowEntityProvisionCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 26214400), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionCbsRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCbsRcv.setDescription('Committed Burst Size')
flowEntityProvisionCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCbsTrmt.setDescription('Committed Burst Size')
flowEntityProvisionPushPvidTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionPushPvidTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPushPvidTrmt.setDescription('C-VID tag is added on transmit from EVC. PEP.')
flowEntityProvisionPrioPvidTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionPrioPvidTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPrioPvidTrmt.setDescription('Added PRIO when CTAG is pushed on untagged frame. PEP.')
flowEntityProvisionRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 19), FspR7RedLinedState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionRedLineState.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
flowEntityProvisionTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 11, 1, 20), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityProvisionTunnelAid.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionTunnelAid.setDescription('Tunnel AID')
flowEntityProvisionCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12), )
if mibBuilder.loadTexts: flowEntityProvisionCapTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapTable.setDescription('')
flowEntityProvisionCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: flowEntityProvisionCapEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapEntry.setDescription('')
flowEntityProvisionCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapRowStatus.setDescription('This object is used to create, or delete a row in this table.')
flowEntityProvisionCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapType.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapType.setDescription('')
flowEntityProvisionCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 3), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapAdmin.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
flowEntityProvisionCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapAlias.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapAlias.setDescription('User Applied Descriptor')
flowEntityProvisionCapPopCtagRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapPopCtagRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapPopCtagRcv.setDescription("'c-vid tag is removed in receive to an EVC. This is equivalent to untagged PEP in PB'")
flowEntityProvisionCapPopCtagTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapPopCtagTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapPopCtagTrmt.setDescription("'c-vid tag is removed on transmit from EVC. This is equivalent to the untagged CEP in PB'")
flowEntityProvisionCapCvidRegisteredInFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapCvidRegisteredInFlow.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapCvidRegisteredInFlow.setDescription('CVLANs Registered with the Flow')
flowEntityProvisionCapExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapExternalVid.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapExternalVid.setDescription('External VID')
flowEntityProvisionCapPmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 9), FspR7L2PmModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapPmMode.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapPmMode.setDescription('Mode of PM counters')
flowEntityProvisionCapShape = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 10), FspR7DisableEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapShape.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapShape.setDescription('Shape Enablement')
flowEntityProvisionCapPolice = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 11), FspR7DisableEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapPolice.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapPolice.setDescription('Police Enablement')
flowEntityProvisionCapDefaultEvcCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 12), FspR7Integer32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapDefaultEvcCos.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapDefaultEvcCos.setDescription('Default COS for frames not matching classification scheme PCP/DSCP, or used as CoS for EVC based classification.')
flowEntityProvisionCapCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 13), FspR7Unsigned32Caps()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapCirRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapCirRcv.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
flowEntityProvisionCapCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 14), FspR7Unsigned32Caps()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapCirTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
flowEntityProvisionCapCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 15), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapCbsRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapCbsRcv.setDescription('Committed Burst Size')
flowEntityProvisionCapCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 16), FspR7Unsigned32Caps()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapCbsTrmt.setDescription('Committed Burst Size')
flowEntityProvisionCapPushPvidTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapPushPvidTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapPushPvidTrmt.setDescription('C-VID tag is added on transmit from EVC. PEP.')
flowEntityProvisionCapPrioPvidTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 18), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapPrioPvidTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapPrioPvidTrmt.setDescription('Added PRIO when CTAG is pushed on untagged frame. PEP.')
flowEntityProvisionCapRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 19), FspR7RedLinedStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapRedLineState.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
flowEntityProvisionCapTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 12, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCapTunnelAid.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCapTunnelAid.setDescription('Tunnel AID')
flowEntityProvisionDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13), )
if mibBuilder.loadTexts: flowEntityProvisionDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsTable.setDescription('')
flowEntityProvisionDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: flowEntityProvisionDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsEntry.setDescription('')
flowEntityProvisionDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsRowStatus.setDescription('This object is used to create, or delete a row in this table.')
flowEntityProvisionDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsType.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsType.setDescription('')
flowEntityProvisionDefaultsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 3), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsAdmin.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
flowEntityProvisionDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsAlias.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsAlias.setDescription('User Applied Descriptor')
flowEntityProvisionDefaultsPopCtagRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsPopCtagRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsPopCtagRcv.setDescription("'c-vid tag is removed in receive to an EVC. This is equivalent to untagged PEP in PB'")
flowEntityProvisionDefaultsPopCtagTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsPopCtagTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsPopCtagTrmt.setDescription("'c-vid tag is removed on transmit from EVC. This is equivalent to the untagged CEP in PB'")
flowEntityProvisionDefaultsCvidRegisteredInFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsCvidRegisteredInFlow.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsCvidRegisteredInFlow.setDescription('CVLANs Registered with the Flow')
flowEntityProvisionDefaultsExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsExternalVid.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsExternalVid.setDescription('External VID')
flowEntityProvisionDefaultsPmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 9), FspR7L2PmMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsPmMode.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsPmMode.setDescription('Mode of PM counters')
flowEntityProvisionDefaultsShape = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 10), FspR7DisableEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsShape.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsShape.setDescription('Shape Enablement')
flowEntityProvisionDefaultsPolice = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 11), FspR7DisableEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsPolice.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsPolice.setDescription('Police Enablement')
flowEntityProvisionDefaultsDefaultEvcCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(7, 7), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsDefaultEvcCos.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsDefaultEvcCos.setDescription('Default COS for frames not matching classification scheme PCP/DSCP, or used as CoS for EVC based classification.')
flowEntityProvisionDefaultsCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 13), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsCirRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsCirRcv.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
flowEntityProvisionDefaultsCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 14), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsCirTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
flowEntityProvisionDefaultsCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 26214400), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsCbsRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsCbsRcv.setDescription('Committed Burst Size')
flowEntityProvisionDefaultsCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsCbsTrmt.setDescription('Committed Burst Size')
flowEntityProvisionDefaultsPushPvidTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsPushPvidTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsPushPvidTrmt.setDescription('C-VID tag is added on transmit from EVC. PEP.')
flowEntityProvisionDefaultsPrioPvidTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsPrioPvidTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsPrioPvidTrmt.setDescription('Added PRIO when CTAG is pushed on untagged frame. PEP.')
flowEntityProvisionDefaultsRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 19), FspR7RedLinedState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsRedLineState.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
flowEntityProvisionDefaultsTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 13, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionDefaultsTunnelAid.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionDefaultsTunnelAid.setDescription('Tunnel AID')
flowEntityProvisionCbsRcvCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 14), )
if mibBuilder.loadTexts: flowEntityProvisionCbsRcvCapTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCbsRcvCapTable.setDescription("This table is used to get capabilities for CBS-RCV parameter. Regular\n         cap tables including CBS-RCV show the number of capabilities for a specific entity.\n         Value 0 in regular cap tables means 'no capabilities'.\n         Each capability for a specific entity has a separate third index.")
flowEntityProvisionCbsRcvCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 14, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "flowEntityProvisionCbsRcvCapIndexCap"))
if mibBuilder.loadTexts: flowEntityProvisionCbsRcvCapEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCbsRcvCapEntry.setDescription('')
flowEntityProvisionCbsRcvCapIndexCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 14, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: flowEntityProvisionCbsRcvCapIndexCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCbsRcvCapIndexCap.setDescription('Used to display capability value per index. The number of capabilities determines the number of indexes.')
flowEntityProvisionCbsRcvCapCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 14, 1, 2), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionCbsRcvCapCbsRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionCbsRcvCapCbsRcv.setDescription('Committed Burst Size')
flowEntityProvisionRegisterCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 15), )
if mibBuilder.loadTexts: flowEntityProvisionRegisterCapTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionRegisterCapTable.setDescription("This table is used to get capabilities for REGISTER parameter. Regular\n         cap tables including REGISTER show the length of output string.\n         Value 0 in regular cap tables means 'no capabilities'.\n         The third index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 512 bytes. n = output string / 512.")
flowEntityProvisionRegisterCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 15, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "flowEntityProvisionRegisterCapIndexCap"))
if mibBuilder.loadTexts: flowEntityProvisionRegisterCapEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionRegisterCapEntry.setDescription('')
flowEntityProvisionRegisterCapIndexCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 15, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: flowEntityProvisionRegisterCapIndexCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionRegisterCapIndexCap.setDescription('Used to display capability value per index. The number of capabilities determines the number of indexes.')
flowEntityProvisionRegisterCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 15, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionRegisterCapStringCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionRegisterCapStringCap.setDescription('')
flowEntityProvisionExternalVidCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 16), )
if mibBuilder.loadTexts: flowEntityProvisionExternalVidCapTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionExternalVidCapTable.setDescription("This table is used to get capabilities for EXTVID parameter. Regular\n         cap tables including EXTVID show the length of output string.\n         Value 0 in regular cap tables means 'no capabilities'.\n         The third index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 512 bytes. n = output string / 512.")
flowEntityProvisionExternalVidCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 16, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "flowEntityProvisionExternalVidCapIndexCap"))
if mibBuilder.loadTexts: flowEntityProvisionExternalVidCapEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionExternalVidCapEntry.setDescription('')
flowEntityProvisionExternalVidCapIndexCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 16, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: flowEntityProvisionExternalVidCapIndexCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionExternalVidCapIndexCap.setDescription('Used to display capability value per index. The number of capabilities determines the number of indexes.')
flowEntityProvisionExternalVidCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 16, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionExternalVidCapStringCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionExternalVidCapStringCap.setDescription('')
flowEntityProvisionPopCtagRcvCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 17), )
if mibBuilder.loadTexts: flowEntityProvisionPopCtagRcvCapTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPopCtagRcvCapTable.setDescription("This table is used to get capabilities for POP_RCV parameter. Regular\n         cap tables including POP_RCV show the length of output string.\n         Value 0 in regular cap tables means 'no capabilities'.\n         The third index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 512 bytes. n = output string / 512.")
flowEntityProvisionPopCtagRcvCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 17, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "flowEntityProvisionPopCtagRcvCapIndexCap"))
if mibBuilder.loadTexts: flowEntityProvisionPopCtagRcvCapEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPopCtagRcvCapEntry.setDescription('')
flowEntityProvisionPopCtagRcvCapIndexCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 17, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: flowEntityProvisionPopCtagRcvCapIndexCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPopCtagRcvCapIndexCap.setDescription('Used to display capability value per index. The number of capabilities determines the number of indexes.')
flowEntityProvisionPopCtagRcvCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 17, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionPopCtagRcvCapStringCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPopCtagRcvCapStringCap.setDescription('')
flowEntityProvisionPopCtagTrmtCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 18), )
if mibBuilder.loadTexts: flowEntityProvisionPopCtagTrmtCapTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPopCtagTrmtCapTable.setDescription("This table is used to get capabilities for POP_TRMT parameter. Regular\n         cap tables including POP_TRMT show the length of output string.\n         Value 0 in regular cap tables means 'no capabilities'.\n         The third index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 512 bytes. n = output string / 512.")
flowEntityProvisionPopCtagTrmtCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 18, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "flowEntityProvisionPopCtagTrmtCapIndexCap"))
if mibBuilder.loadTexts: flowEntityProvisionPopCtagTrmtCapEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPopCtagTrmtCapEntry.setDescription('')
flowEntityProvisionPopCtagTrmtCapIndexCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 18, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: flowEntityProvisionPopCtagTrmtCapIndexCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPopCtagTrmtCapIndexCap.setDescription('Used to display capability value per index. The number of capabilities determines the number of indexes.')
flowEntityProvisionPopCtagTrmtCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 18, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionPopCtagTrmtCapStringCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPopCtagTrmtCapStringCap.setDescription('')
flowEntityProvisionPushTrmtCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 19), )
if mibBuilder.loadTexts: flowEntityProvisionPushTrmtCapTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPushTrmtCapTable.setDescription("This table is used to get capabilities for PUSH-TRMT parameter. Regular\n         cap tables including PUSH-TRMT show the length of output string.\n         Value 0 in regular cap tables means 'no capabilities'.\n         The third index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 512 bytes. n = output string / 512.")
flowEntityProvisionPushTrmtCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 19, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "flowEntityProvisionPushTrmtCapIndexCap"))
if mibBuilder.loadTexts: flowEntityProvisionPushTrmtCapEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPushTrmtCapEntry.setDescription('')
flowEntityProvisionPushTrmtCapIndexCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 19, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: flowEntityProvisionPushTrmtCapIndexCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPushTrmtCapIndexCap.setDescription('Used to display capability value per index. The number of capabilities determines the number of indexes.')
flowEntityProvisionPushTrmtCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 11, 19, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityProvisionPushTrmtCapStringCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityProvisionPushTrmtCapStringCap.setDescription('')
ctransEntityProvisionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 11), )
if mibBuilder.loadTexts: ctransEntityProvisionTable.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionTable.setDescription('')
ctransEntityProvisionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 11, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "ctransEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "ctransEntityIndexCVlanId"))
if mibBuilder.loadTexts: ctransEntityProvisionEntry.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionEntry.setDescription('')
ctransEntityProvisionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 11, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctransEntityProvisionRowStatus.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionRowStatus.setDescription('This object is used to create, or delete a row in this table.')
ctransEntityProvisionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 11, 1, 2), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctransEntityProvisionType.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionType.setDescription('')
ctransEntityProvisionCvidInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctransEntityProvisionCvidInternal.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionCvidInternal.setDescription('Internal CVID')
ctransEntityProvisionRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctransEntityProvisionRange.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionRange.setDescription('Range of the translated CVID.')
ctransEntityProvisionCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 12), )
if mibBuilder.loadTexts: ctransEntityProvisionCapTable.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionCapTable.setDescription('')
ctransEntityProvisionCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 12, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "ctransEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "ctransEntityIndexCVlanId"))
if mibBuilder.loadTexts: ctransEntityProvisionCapEntry.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionCapEntry.setDescription('')
ctransEntityProvisionCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 12, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctransEntityProvisionCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionCapRowStatus.setDescription('This object is used to create, or delete a row in this table.')
ctransEntityProvisionCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 12, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctransEntityProvisionCapType.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionCapType.setDescription('')
ctransEntityProvisionCapCvidInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 12, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctransEntityProvisionCapCvidInternal.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionCapCvidInternal.setDescription('Internal CVID')
ctransEntityProvisionCapRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 12, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctransEntityProvisionCapRange.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionCapRange.setDescription('Range of the translated CVID.')
ctransEntityProvisionDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 13), )
if mibBuilder.loadTexts: ctransEntityProvisionDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionDefaultsTable.setDescription('')
ctransEntityProvisionDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 13, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "ctransEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "ctransEntityIndexCVlanId"))
if mibBuilder.loadTexts: ctransEntityProvisionDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionDefaultsEntry.setDescription('')
ctransEntityProvisionDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 13, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctransEntityProvisionDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionDefaultsRowStatus.setDescription('This object is used to create, or delete a row in this table.')
ctransEntityProvisionDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 13, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctransEntityProvisionDefaultsType.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionDefaultsType.setDescription('')
ctransEntityProvisionDefaultsCvidInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctransEntityProvisionDefaultsCvidInternal.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionDefaultsCvidInternal.setDescription('Internal CVID')
ctransEntityProvisionDefaultsRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 13, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctransEntityProvisionDefaultsRange.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionDefaultsRange.setDescription('Range of the translated CVID.')
ctransEntityProvisionCvidInternalCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 14), )
if mibBuilder.loadTexts: ctransEntityProvisionCvidInternalCapTable.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionCvidInternalCapTable.setDescription("This table is used to get capabilities for INT_CVID parameter. Regular\n         cap tables including INT_CVID show the length of output string.\n         Value 0 in regular cap tables means 'no capabilities'.\n         The third index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 512 bytes. n = output string / 512.")
ctransEntityProvisionCvidInternalCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 14, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "ctransEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "ctransEntityIndexCVlanId"), (0, "FspR7-LAYER2-MIB", "ctransEntityProvisionCvidInternalCapIndexCap"))
if mibBuilder.loadTexts: ctransEntityProvisionCvidInternalCapEntry.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionCvidInternalCapEntry.setDescription('')
ctransEntityProvisionCvidInternalCapIndexCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 14, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctransEntityProvisionCvidInternalCapIndexCap.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionCvidInternalCapIndexCap.setDescription('Used to display capability value per index. The number of capabilities determines the number of indexes.')
ctransEntityProvisionCvidInternalCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 12, 14, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctransEntityProvisionCvidInternalCapStringCap.setStatus('current')
if mibBuilder.loadTexts: ctransEntityProvisionCvidInternalCapStringCap.setDescription('')
bridgeToAssignEntityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 11), )
if mibBuilder.loadTexts: bridgeToAssignEntityTable.setStatus('current')
if mibBuilder.loadTexts: bridgeToAssignEntityTable.setDescription('This table lists first unusued BRIDGE entity per MODULE.')
bridgeToAssignEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 11, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "bridgeEntityContainedIn"), (0, "FspR7-LAYER2-MIB", "bridgeEntitySvid"))
if mibBuilder.loadTexts: bridgeToAssignEntityEntry.setStatus('current')
if mibBuilder.loadTexts: bridgeToAssignEntityEntry.setDescription('Table entry represents unused BRIDGE placeholder which may be assigned.')
bridgeToAssignEntityIndexAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 11, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeToAssignEntityIndexAid.setStatus('current')
if mibBuilder.loadTexts: bridgeToAssignEntityIndexAid.setDescription('Printable entity name.')
bridgeEntityProvisionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 12), )
if mibBuilder.loadTexts: bridgeEntityProvisionTable.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionTable.setDescription('This table is used for creating or destroying BRIDGE entities.')
bridgeEntityProvisionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 12, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "bridgeEntityContainedIn"), (0, "FspR7-LAYER2-MIB", "bridgeEntitySvid"))
if mibBuilder.loadTexts: bridgeEntityProvisionEntry.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionEntry.setDescription('Entry represents an assigned or unassigned but initiated for creation BRIDGE entity.')
bridgeEntityProvisionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 12, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeEntityProvisionRowStatus.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionRowStatus.setDescription('This object is used to create or delete a row in this table.')
bridgeEntityProvisionFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 12, 1, 2), FspR7InterfaceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeEntityProvisionFacilityType.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionFacilityType.setDescription('')
bridgeEntityProvisionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 12, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeEntityProvisionAlias.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionAlias.setDescription('User Applied Descriptor')
bridgeEntityProvisionShapeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 12, 1, 4), FspR7DisableEnable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeEntityProvisionShapeState.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionShapeState.setDescription('E-LAN Shape Enablement')
bridgeEntityProvisionPmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 12, 1, 5), FspR7L2PmMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeEntityProvisionPmMode.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionPmMode.setDescription('Mode of PM counters')
bridgeEntityProvisionCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 12, 1, 6), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeEntityProvisionCirTrmt.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
bridgeEntityProvisionCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeEntityProvisionCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionCbsTrmt.setDescription('Committed Burst Size')
bridgeEntityProvisionAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 12, 1, 8), FspR7AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bridgeEntityProvisionAdminState.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionAdminState.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
bridgeEntityProvisionCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 13), )
if mibBuilder.loadTexts: bridgeEntityProvisionCapTable.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionCapTable.setDescription('This table is used for creating or destroying BRIDGE entities.')
bridgeEntityProvisionCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 13, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "bridgeEntityContainedIn"), (0, "FspR7-LAYER2-MIB", "bridgeEntitySvid"))
if mibBuilder.loadTexts: bridgeEntityProvisionCapEntry.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionCapEntry.setDescription('Entry represents an assigned or unassigned but initiated for creation BRIDGE entity.')
bridgeEntityProvisionCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 13, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionCapRowStatus.setDescription('This object is used to create or delete a row in this table.')
bridgeEntityProvisionCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 13, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionCapFacilityType.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionCapFacilityType.setDescription('')
bridgeEntityProvisionCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionCapAlias.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionCapAlias.setDescription('User Applied Descriptor')
bridgeEntityProvisionCapShapeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 13, 1, 4), FspR7DisableEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionCapShapeState.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionCapShapeState.setDescription('E-LAN Shape Enablement')
bridgeEntityProvisionCapPmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 13, 1, 5), FspR7L2PmModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionCapPmMode.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionCapPmMode.setDescription('Mode of PM counters')
bridgeEntityProvisionCapCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 13, 1, 6), FspR7Unsigned32Caps()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionCapCirTrmt.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionCapCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
bridgeEntityProvisionCapCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 13, 1, 7), FspR7Unsigned32Caps()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionCapCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionCapCbsTrmt.setDescription('Committed Burst Size')
bridgeEntityProvisionCapAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 13, 1, 8), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionCapAdminState.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionCapAdminState.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
bridgeEntityProvisionDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 14), )
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsTable.setDescription('This table is used for creating or destroying BRIDGE entities.')
bridgeEntityProvisionDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 14, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "bridgeEntityContainedIn"), (0, "FspR7-LAYER2-MIB", "bridgeEntitySvid"))
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsEntry.setDescription('Entry represents an assigned or unassigned but initiated for creation BRIDGE entity.')
bridgeEntityProvisionDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 14, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsRowStatus.setDescription('This object is used to create or delete a row in this table.')
bridgeEntityProvisionDefaultsFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 14, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsFacilityType.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsFacilityType.setDescription('')
bridgeEntityProvisionDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 14, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsAlias.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsAlias.setDescription('User Applied Descriptor')
bridgeEntityProvisionDefaultsShapeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 14, 1, 4), FspR7DisableEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsShapeState.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsShapeState.setDescription('E-LAN Shape Enablement')
bridgeEntityProvisionDefaultsPmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 14, 1, 5), FspR7L2PmMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsPmMode.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsPmMode.setDescription('Mode of PM counters')
bridgeEntityProvisionDefaultsCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 14, 1, 6), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsCirTrmt.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
bridgeEntityProvisionDefaultsCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsCbsTrmt.setDescription('Committed Burst Size')
bridgeEntityProvisionDefaultsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 12, 13, 14, 1, 8), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsAdminState.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityProvisionDefaultsAdminState.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
flowEntityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11), )
if mibBuilder.loadTexts: flowEntityConfigTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigTable.setDescription('')
flowEntityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: flowEntityConfigEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigEntry.setDescription('')
flowEntityConfigAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 1), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigAdmin.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
flowEntityConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigAlias.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigAlias.setDescription('User Applied Descriptor')
flowEntityConfigPopCtagRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigPopCtagRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigPopCtagRcv.setDescription("'c-vid tag is removed in receive to an EVC. This is equivalent to untagged PEP in PB'")
flowEntityConfigPopCtagTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigPopCtagTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigPopCtagTrmt.setDescription("'c-vid tag is removed on transmit from EVC. This is equivalent to the untagged CEP in PB'")
flowEntityConfigCvidRegisteredInFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigCvidRegisteredInFlow.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCvidRegisteredInFlow.setDescription('CVLANs Registered with the Flow')
flowEntityConfigExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigExternalVid.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigExternalVid.setDescription('External VID')
flowEntityConfigPmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 7), FspR7L2PmMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigPmMode.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigPmMode.setDescription('Mode of PM counters')
flowEntityConfigShape = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 8), FspR7DisableEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigShape.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigShape.setDescription('Shape Enablement')
flowEntityConfigPolice = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 9), FspR7DisableEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigPolice.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigPolice.setDescription('Police Enablement')
flowEntityConfigDefaultEvcCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(7, 7), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigDefaultEvcCos.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigDefaultEvcCos.setDescription('Default COS for frames not matching classification scheme PCP/DSCP, or used as CoS for EVC based classification.')
flowEntityConfigCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 11), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigCirRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCirRcv.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
flowEntityConfigCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 12), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigCirTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
flowEntityConfigCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 26214400), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigCbsRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCbsRcv.setDescription('Committed Burst Size')
flowEntityConfigCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCbsTrmt.setDescription('Committed Burst Size')
flowEntityConfigDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 15), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigDataLayerPmReset.setDescription('Reset data-layer Performance registers')
flowEntityConfigPushPvidTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigPushPvidTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigPushPvidTrmt.setDescription('C-VID tag is added on transmit from EVC. PEP.')
flowEntityConfigPrioPvidTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigPrioPvidTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigPrioPvidTrmt.setDescription('Added PRIO when CTAG is pushed on untagged frame. PEP.')
flowEntityConfigRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 18), FspR7RedLinedState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigRedLineState.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
flowEntityConfigTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 19), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigTunnelAid.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigTunnelAid.setDescription('Tunnel AID')
flowEntityConfigSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 20), FspR7APSCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigSwitchCommand.setDescription("Protection Switch commands: Manual, Lock or Release.\n         The 'Manual Switch' switches manually from addressed facility to\n         the partner but does not force the traffic onto a broken fiber and\n         it does not block the subsequent automatic functioning of the switch.\n         The 'Lock Switch' - ask Gerald for description.......\n         The 'Release Switch' releases the current switch command.\n         Relevant especially to 'Lock Switch' command. For 'Manual Switch' relevant\n         only if revertivity is supported.")
flowEntityConfigInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 21), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigInhibitSwitchToProt.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigInhibitSwitchToProt.setDescription('Inhibit Switch To PROTN facility. Inhibition blocks\n         switch to the PROTN facility (protection path).\n         Applicable only for the WKG facility in ACT state.')
flowEntityConfigInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 11, 1, 22), FspR7YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowEntityConfigInhibitSwitchToWork.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigInhibitSwitchToWork.setDescription('Inhibit Switch To Working. Inhibition blocks a switch\n         to the WKG facility (working path).\n         Applicable for the PROTN facility in ACT state.')
flowEntityConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12), )
if mibBuilder.loadTexts: flowEntityConfigCapTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapTable.setDescription('')
flowEntityConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: flowEntityConfigCapEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapEntry.setDescription('')
flowEntityConfigCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 1), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapAdmin.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
flowEntityConfigCapPmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 2), FspR7L2PmModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapPmMode.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapPmMode.setDescription('Mode of PM counters')
flowEntityConfigCapShape = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 3), FspR7DisableEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapShape.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapShape.setDescription('Shape Enablement')
flowEntityConfigCapPolice = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 4), FspR7DisableEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapPolice.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapPolice.setDescription('Police Enablement')
flowEntityConfigCapDefaultEvcCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 5), FspR7Integer32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapDefaultEvcCos.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapDefaultEvcCos.setDescription('Default COS for frames not matching classification scheme PCP/DSCP, or used as CoS for EVC based classification.')
flowEntityConfigCapDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 6), FspR7PmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapDataLayerPmReset.setDescription('Reset data-layer Performance registers')
flowEntityConfigCapPopCtagRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapPopCtagRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapPopCtagRcv.setDescription("'c-vid tag is removed in receive to an EVC. This is equivalent to untagged PEP in PB'")
flowEntityConfigCapPopCtagTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapPopCtagTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapPopCtagTrmt.setDescription("'c-vid tag is removed on transmit from EVC. This is equivalent to the untagged CEP in PB'")
flowEntityConfigCapCvidRegisteredInFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapCvidRegisteredInFlow.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapCvidRegisteredInFlow.setDescription('CVLANs Registered with the Flow')
flowEntityConfigCapExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapExternalVid.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapExternalVid.setDescription('External VID')
flowEntityConfigCapCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 11), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapCbsRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapCbsRcv.setDescription('Committed Burst Size')
flowEntityConfigCapPushTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapPushTrmt.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapPushTrmt.setDescription('C-VID tag is added on transmit from EVC. PEP.')
flowEntityConfigCapRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 13), FspR7RedLinedStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapRedLineState.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
flowEntityConfigCapSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 14), FspR7APSCommandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapSwitchCommand.setDescription("Protection Switch commands: Manual, Lock or Release.\n         The 'Manual Switch' switches manually from addressed facility to\n         the partner but does not force the traffic onto a broken fiber and\n         it does not block the subsequent automatic functioning of the switch.\n         The 'Lock Switch' - ask Gerald for description.......\n         The 'Release Switch' releases the current switch command.\n         Relevant especially to 'Lock Switch' command. For 'Manual Switch' relevant\n         only if revertivity is supported.")
flowEntityConfigCapInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 15), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapInhibitSwitchToProt.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapInhibitSwitchToProt.setDescription('Inhibit Switch To PROTN facility. Inhibition blocks\n         switch to the PROTN facility (protection path).\n         Applicable only for the WKG facility in ACT state.')
flowEntityConfigCapInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 12, 1, 16), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCapInhibitSwitchToWork.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCapInhibitSwitchToWork.setDescription('Inhibit Switch To Working. Inhibition blocks a switch\n         to the WKG facility (working path).\n         Applicable for the PROTN facility in ACT state.')
flowEntityConfigCbsRcvCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 13), )
if mibBuilder.loadTexts: flowEntityConfigCbsRcvCapTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCbsRcvCapTable.setDescription("This table is used to get capabilities for CBS-RCV parameter. Regular\n         cap tables including CBS-RCV show the number of capabilities for a specific entity.\n         Value 0 in regular cap tables means 'no capabilities'.\n         Each capability for a specific entity has a separate third index.")
flowEntityConfigCbsRcvCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 13, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "flowEntityProvisionCbsRcvCapIndexCap"))
if mibBuilder.loadTexts: flowEntityConfigCbsRcvCapEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCbsRcvCapEntry.setDescription('')
flowEntityConfigCbsRcvCapCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 13, 1, 1), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigCbsRcvCapCbsRcv.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigCbsRcvCapCbsRcv.setDescription('Committed Burst Size')
flowEntityConfigRegisterCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 14), )
if mibBuilder.loadTexts: flowEntityConfigRegisterCapTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigRegisterCapTable.setDescription("This table is used to get capabilities for REGISTER parameter. Regular\n         cap tables including REGISTER show the length of output string.\n         Value 0 in regular cap tables means 'no capabilities'.\n         The third index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 512 bytes. n = output string / 512.")
flowEntityConfigRegisterCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 14, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "flowEntityProvisionRegisterCapIndexCap"))
if mibBuilder.loadTexts: flowEntityConfigRegisterCapEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigRegisterCapEntry.setDescription('')
flowEntityConfigRegisterCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 14, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigRegisterCapStringCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigRegisterCapStringCap.setDescription('')
flowEntityConfigExternalVidCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 15), )
if mibBuilder.loadTexts: flowEntityConfigExternalVidCapTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigExternalVidCapTable.setDescription("This table is used to get capabilities for EXTVID parameter. Regular\n         cap tables including EXTVID show the length of output string.\n         Value 0 in regular cap tables means 'no capabilities'.\n         The third index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 512 bytes. n = output string / 512.")
flowEntityConfigExternalVidCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 15, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "flowEntityProvisionExternalVidCapIndexCap"))
if mibBuilder.loadTexts: flowEntityConfigExternalVidCapEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigExternalVidCapEntry.setDescription('')
flowEntityConfigExternalVidCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 15, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigExternalVidCapStringCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigExternalVidCapStringCap.setDescription('')
flowEntityConfigPopCtagRcvCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 16), )
if mibBuilder.loadTexts: flowEntityConfigPopCtagRcvCapTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigPopCtagRcvCapTable.setDescription("This table is used to get capabilities for POP_RCV parameter. Regular\n         cap tables including POP_RCV show the length of output string.\n         Value 0 in regular cap tables means 'no capabilities'.\n         The third index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 512 bytes. n = output string / 512.")
flowEntityConfigPopCtagRcvCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 16, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "flowEntityProvisionPopCtagRcvCapIndexCap"))
if mibBuilder.loadTexts: flowEntityConfigPopCtagRcvCapEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigPopCtagRcvCapEntry.setDescription('')
flowEntityConfigPopCtagRcvCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 16, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigPopCtagRcvCapStringCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigPopCtagRcvCapStringCap.setDescription('')
flowEntityConfigPopCtagTrmtCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 17), )
if mibBuilder.loadTexts: flowEntityConfigPopCtagTrmtCapTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigPopCtagTrmtCapTable.setDescription("This table is used to get capabilities for POP_TRMT parameter. Regular\n         cap tables including POP_TRMT show the length of output string.\n         Value 0 in regular cap tables means 'no capabilities'.\n         The third index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 512 bytes. n = output string / 512.")
flowEntityConfigPopCtagTrmtCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 17, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "flowEntityProvisionPopCtagTrmtCapIndexCap"))
if mibBuilder.loadTexts: flowEntityConfigPopCtagTrmtCapEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigPopCtagTrmtCapEntry.setDescription('')
flowEntityConfigPopCtagTrmtCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 17, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigPopCtagTrmtCapStringCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigPopCtagTrmtCapStringCap.setDescription('')
flowEntityConfigPushTrmtCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 18), )
if mibBuilder.loadTexts: flowEntityConfigPushTrmtCapTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigPushTrmtCapTable.setDescription("This table is used to get capabilities for PUSH-TRMT parameter. Regular\n         cap tables including PUSH-TRMT show the length of output string.\n         Value 0 in regular cap tables means 'no capabilities'.\n         The third index (n) is used to devide the output string to n string blocks.\n         Each block has a maximum of 512 bytes. n = output string / 512.")
flowEntityConfigPushTrmtCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 18, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "flowEntityProvisionPushTrmtCapIndexCap"))
if mibBuilder.loadTexts: flowEntityConfigPushTrmtCapEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigPushTrmtCapEntry.setDescription('')
flowEntityConfigPushTrmtCapStringCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 11, 18, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityConfigPushTrmtCapStringCap.setStatus('current')
if mibBuilder.loadTexts: flowEntityConfigPushTrmtCapStringCap.setDescription('')
bridgeEntityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 11), )
if mibBuilder.loadTexts: bridgeEntityConfigTable.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigTable.setDescription('This table is used for configuration of BRIDGE entities.')
bridgeEntityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 11, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "bridgeEntityContainedIn"), (0, "FspR7-LAYER2-MIB", "bridgeEntitySvid"))
if mibBuilder.loadTexts: bridgeEntityConfigEntry.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigEntry.setDescription('Entry represents an assigned BRIDGE entity.')
bridgeEntityConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 11, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEntityConfigAlias.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigAlias.setDescription('User Applied Descriptor')
bridgeEntityConfigShapeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 11, 1, 2), FspR7DisableEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEntityConfigShapeState.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigShapeState.setDescription('E-LAN Shape Enablement')
bridgeEntityConfigPmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 11, 1, 3), FspR7L2PmMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEntityConfigPmMode.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigPmMode.setDescription('Mode of PM counters')
bridgeEntityConfigCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 11, 1, 4), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEntityConfigCirTrmt.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
bridgeEntityConfigCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEntityConfigCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigCbsTrmt.setDescription('Committed Burst Size')
bridgeEntityConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 11, 1, 6), FspR7AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEntityConfigAdminState.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigAdminState.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
bridgeEntityConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 12), )
if mibBuilder.loadTexts: bridgeEntityConfigCapTable.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigCapTable.setDescription('This table is used for configuration of BRIDGE entities.')
bridgeEntityConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 12, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "bridgeEntityContainedIn"), (0, "FspR7-LAYER2-MIB", "bridgeEntitySvid"))
if mibBuilder.loadTexts: bridgeEntityConfigCapEntry.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigCapEntry.setDescription('Entry represents an assigned BRIDGE entity.')
bridgeEntityConfigCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityConfigCapAlias.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigCapAlias.setDescription('User Applied Descriptor')
bridgeEntityConfigCapShapeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 12, 1, 2), FspR7DisableEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityConfigCapShapeState.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigCapShapeState.setDescription('E-LAN Shape Enablement')
bridgeEntityConfigCapPmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 12, 1, 3), FspR7L2PmModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityConfigCapPmMode.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigCapPmMode.setDescription('Mode of PM counters')
bridgeEntityConfigCapCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 12, 1, 4), FspR7Unsigned32Caps()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityConfigCapCirTrmt.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigCapCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
bridgeEntityConfigCapCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 12, 1, 5), FspR7Unsigned32Caps()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityConfigCapCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigCapCbsTrmt.setDescription('Committed Burst Size')
bridgeEntityConfigCapAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 12, 12, 1, 6), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityConfigCapAdminState.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityConfigCapAdminState.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
queOnBridgeEntityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 13, 11), )
if mibBuilder.loadTexts: queOnBridgeEntityConfigTable.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityConfigTable.setDescription('This table is used for configuration of QUE entities.')
queOnBridgeEntityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 13, 11, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnBridgeEntityIndex"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntitySvid"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntityPrio"))
if mibBuilder.loadTexts: queOnBridgeEntityConfigEntry.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityConfigEntry.setDescription('Entry represents an assigned QUE entity.')
queOnBridgeEntityConfigDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 13, 11, 1, 1), FspR7PmReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queOnBridgeEntityConfigDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityConfigDataLayerPmReset.setDescription('Reset data-layer Performance registers')
queOnBridgeEntityConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 13, 12), )
if mibBuilder.loadTexts: queOnBridgeEntityConfigCapTable.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityConfigCapTable.setDescription('This table is used for configuration of QUE entities.')
queOnBridgeEntityConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 13, 12, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnBridgeEntityIndex"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntitySvid"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntityPrio"))
if mibBuilder.loadTexts: queOnBridgeEntityConfigCapEntry.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityConfigCapEntry.setDescription('Entry represents an assigned QUE entity.')
queOnBridgeEntityConfigCapDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 13, 13, 12, 1, 1), FspR7PmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnBridgeEntityConfigCapDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityConfigCapDataLayerPmReset.setDescription('Reset data-layer Performance registers')
flowEntityStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 11, 11), )
if mibBuilder.loadTexts: flowEntityStatusTable.setStatus('current')
if mibBuilder.loadTexts: flowEntityStatusTable.setDescription('')
flowEntityStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 11, 11, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: flowEntityStatusEntry.setStatus('current')
if mibBuilder.loadTexts: flowEntityStatusEntry.setDescription('')
flowEntityStatusOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 11, 11, 1, 1), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityStatusOper.setStatus('current')
if mibBuilder.loadTexts: flowEntityStatusOper.setDescription('The Operational State will be displayed on the GUI with full name values;\n         it will be differently displayed in TL1 SYNTAX according to TL1 display rules')
flowEntityStatusSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 11, 11, 1, 2), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityStatusSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: flowEntityStatusSecondaryStates.setDescription('Secondary states of an entity.')
flowEntityStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 11, 11, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityStatusType.setStatus('current')
if mibBuilder.loadTexts: flowEntityStatusType.setDescription('')
flowEntityStatusInternalSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 11, 11, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityStatusInternalSvid.setStatus('current')
if mibBuilder.loadTexts: flowEntityStatusInternalSvid.setDescription('Index of svid')
flowEntityStatusConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 11, 11, 1, 5), FspR7ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityStatusConnectionState.setStatus('current')
if mibBuilder.loadTexts: flowEntityStatusConnectionState.setDescription('Connection State')
flowEntityStatusValidSignalTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 11, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 5760), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityStatusValidSignalTimer.setStatus('current')
if mibBuilder.loadTexts: flowEntityStatusValidSignalTimer.setDescription('AINS state signal quality soak time remaining until transition to IS.')
flowEntityStatusProtectionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 11, 11, 1, 7), FspR7ProtectionRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityStatusProtectionRole.setStatus('current')
if mibBuilder.loadTexts: flowEntityStatusProtectionRole.setDescription('The Path is Labelled Working or Protection')
flowEntityStatusIngressTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 11, 11, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityStatusIngressTid.setStatus('current')
if mibBuilder.loadTexts: flowEntityStatusIngressTid.setDescription('Ingress Target ID')
flowEntityStatusIngressNodeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 11, 11, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowEntityStatusIngressNodeIp.setStatus('current')
if mibBuilder.loadTexts: flowEntityStatusIngressNodeIp.setDescription('Ingress Node IP')
ctransEntityStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 12, 11), )
if mibBuilder.loadTexts: ctransEntityStatusTable.setStatus('current')
if mibBuilder.loadTexts: ctransEntityStatusTable.setDescription('')
ctransEntityStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 12, 11, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "ctransEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "ctransEntityIndexCVlanId"))
if mibBuilder.loadTexts: ctransEntityStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ctransEntityStatusEntry.setDescription('')
ctransEntityStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 12, 11, 1, 1), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctransEntityStatusType.setStatus('current')
if mibBuilder.loadTexts: ctransEntityStatusType.setDescription('')
ctransEntityStatusCvidInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 12, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctransEntityStatusCvidInternal.setStatus('current')
if mibBuilder.loadTexts: ctransEntityStatusCvidInternal.setDescription('Internal CVID')
ctransEntityStatusRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 12, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4095), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctransEntityStatusRange.setStatus('current')
if mibBuilder.loadTexts: ctransEntityStatusRange.setDescription('Range of the translated CVID.')
policerOnFlowEntityStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 13, 12), )
if mibBuilder.loadTexts: policerOnFlowEntityStatusTable.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityStatusTable.setDescription('')
policerOnFlowEntityStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 13, 12, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexPolicer"))
if mibBuilder.loadTexts: policerOnFlowEntityStatusEntry.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityStatusEntry.setDescription('')
policerOnFlowEntityStatusOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 13, 12, 1, 1), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policerOnFlowEntityStatusOper.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityStatusOper.setDescription('The Operational State will be displayed on the GUI with full name values;\n         it will be differently displayed in TL1 SYNTAX according to TL1 display rules')
policerOnFlowEntityStatusSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 13, 12, 1, 2), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policerOnFlowEntityStatusSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityStatusSecondaryStates.setDescription('Secondary states of an entity.')
policerOnFlowEntityStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 13, 12, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policerOnFlowEntityStatusType.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityStatusType.setDescription('')
policerOnFlowEntityStatusAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 13, 12, 1, 4), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policerOnFlowEntityStatusAdmin.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityStatusAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
policerOnFlowEntityStatusAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 13, 12, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policerOnFlowEntityStatusAlias.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityStatusAlias.setDescription('User Applied Descriptor')
policerOnFlowEntityStatusCirRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 13, 12, 1, 6), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: policerOnFlowEntityStatusCirRcv.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityStatusCirRcv.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
policerOnFlowEntityStatusCbsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 13, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 26214400), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: policerOnFlowEntityStatusCbsRcv.setStatus('current')
if mibBuilder.loadTexts: policerOnFlowEntityStatusCbsRcv.setDescription('Committed Burst Size')
queOnPortEntityStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 11), )
if mibBuilder.loadTexts: queOnPortEntityStatusTable.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityStatusTable.setDescription('This table is used for reading non-configurable parameters of QUE on PORT entities.')
queOnPortEntityStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 11, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnPortEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "queOnPortEntityIndexPrio"))
if mibBuilder.loadTexts: queOnPortEntityStatusEntry.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityStatusEntry.setDescription('Entry represents an assigned QUE on PORT entity.')
queOnPortEntityStatusOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 11, 1, 1), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnPortEntityStatusOper.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityStatusOper.setDescription('The Operational State will be displayed on the GUI with full name values;\n         it will be differently displayed in TL1 SYNTAX according to TL1 display rules')
queOnPortEntityStatusSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 11, 1, 2), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnPortEntityStatusSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityStatusSecondaryStates.setDescription('Secondary states of an entity.')
queOnPortEntityStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 11, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnPortEntityStatusType.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityStatusType.setDescription('')
queOnPortEntityStatusAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 11, 1, 4), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnPortEntityStatusAdmin.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityStatusAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
queOnPortEntityStatusAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 11, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnPortEntityStatusAlias.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityStatusAlias.setDescription('User Applied Descriptor')
queOnPortEntityStatusCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 11, 1, 6), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnPortEntityStatusCirTrmt.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityStatusCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
queOnPortEntityStatusCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnPortEntityStatusCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: queOnPortEntityStatusCbsTrmt.setDescription('Committed Burst Size')
queOnFlowEntityStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 12), )
if mibBuilder.loadTexts: queOnFlowEntityStatusTable.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityStatusTable.setDescription('This table is used for reading non-configurable parameters of QUE on FLOW entities.')
queOnFlowEntityStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 12, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexPrio"))
if mibBuilder.loadTexts: queOnFlowEntityStatusEntry.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityStatusEntry.setDescription('Entry represents an assigned QUE on FLOW entity.')
queOnFlowEntityStatusOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 12, 1, 1), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnFlowEntityStatusOper.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityStatusOper.setDescription('The Operational State will be displayed on the GUI with full name values;\n         it will be differently displayed in TL1 SYNTAX according to TL1 display rules')
queOnFlowEntityStatusSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 12, 1, 2), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnFlowEntityStatusSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityStatusSecondaryStates.setDescription('Secondary states of an entity.')
queOnFlowEntityStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 12, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnFlowEntityStatusType.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityStatusType.setDescription('')
queOnFlowEntityStatusAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 12, 1, 4), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnFlowEntityStatusAdmin.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityStatusAdmin.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
queOnFlowEntityStatusAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 12, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnFlowEntityStatusAlias.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityStatusAlias.setDescription('User Applied Descriptor')
queOnFlowEntityStatusCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 12, 1, 6), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnFlowEntityStatusCirTrmt.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityStatusCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
queOnFlowEntityStatusCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnFlowEntityStatusCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: queOnFlowEntityStatusCbsTrmt.setDescription('Committed Burst Size')
queOnBridgeEntityStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 13), )
if mibBuilder.loadTexts: queOnBridgeEntityStatusTable.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityStatusTable.setDescription('This table is used for reading non-configurable parameters of QUE on BRIDGE entities.')
queOnBridgeEntityStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 13, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnBridgeEntityIndex"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntitySvid"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntityPrio"))
if mibBuilder.loadTexts: queOnBridgeEntityStatusEntry.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityStatusEntry.setDescription('Entry represents an assigned QUE on BRIDGE entity.')
queOnBridgeEntityStatusAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 13, 1, 1), FspR7AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnBridgeEntityStatusAdminState.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityStatusAdminState.setDescription('The Adminstrative State will be displayed in the GUI with full\n         name values; it will be differently displayed in TL1 syntax according\n         to TL1 display rules. The transaction into the UAS state requires\n         a special destroy/delete function.')
queOnBridgeEntityStatusFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 13, 1, 2), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnBridgeEntityStatusFacilityType.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityStatusFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
queOnBridgeEntityStatusFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 13, 1, 3), FspR7InterfaceFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnBridgeEntityStatusFunction.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityStatusFunction.setDescription('Interface Function')
queOnBridgeEntityStatusAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 13, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnBridgeEntityStatusAlias.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityStatusAlias.setDescription('User Applied Descriptor')
queOnBridgeEntityStatusCirTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 13, 1, 5), Unsigned32()).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnBridgeEntityStatusCirTrmt.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityStatusCirTrmt.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
queOnBridgeEntityStatusCbsTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25600), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnBridgeEntityStatusCbsTrmt.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityStatusCbsTrmt.setDescription('Committed Burst Size')
queOnBridgeEntityStatusShapeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 13, 1, 7), FspR7DisableEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnBridgeEntityStatusShapeState.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityStatusShapeState.setDescription('Shape Enablement')
queOnBridgeEntityStatusPmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 13, 1, 8), FspR7L2PmMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnBridgeEntityStatusPmMode.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityStatusPmMode.setDescription('Mode of PM counters')
queOnBridgeEntityStatusOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 13, 1, 9), FspR7OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnBridgeEntityStatusOper.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityStatusOper.setDescription('The Operational State will be displayed on the GUI with full name values;\n         it will be differently displayed in TL1 SYNTAX according to TL1 display rules.')
queOnBridgeEntityStatusSecondaryStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 14, 13, 1, 10), FspR7EntitySecondaryStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOnBridgeEntityStatusSecondaryStates.setStatus('current')
if mibBuilder.loadTexts: queOnBridgeEntityStatusSecondaryStates.setDescription('Secondary states.')
bridgeEntityStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 15, 11), )
if mibBuilder.loadTexts: bridgeEntityStatusTable.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityStatusTable.setDescription('This table lists all read-only parameters existing on BRIDGE entity.')
bridgeEntityStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 15, 11, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "bridgeEntityContainedIn"), (0, "FspR7-LAYER2-MIB", "bridgeEntitySvid"))
if mibBuilder.loadTexts: bridgeEntityStatusEntry.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityStatusEntry.setDescription('Table entry presents BRIDGE entity.')
bridgeEntityStatusFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 15, 11, 1, 1), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityStatusFacilityType.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityStatusFacilityType.setDescription('')
bridgeEntityFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 15, 12), )
if mibBuilder.loadTexts: bridgeEntityFlowTable.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityFlowTable.setDescription('This table lists all FLOW entities associated with particular BRIDGE entity.')
bridgeEntityFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 15, 12, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "bridgeEntityContainedIn"), (0, "FspR7-LAYER2-MIB", "bridgeEntitySvid"), (0, "FspR7-LAYER2-MIB", "bridgeEntityFlowId"))
if mibBuilder.loadTexts: bridgeEntityFlowEntry.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityFlowEntry.setDescription('Table entry presents BRIDGE entity. Third table index is the order number.')
bridgeEntityFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 15, 12, 1, 1), BridgeEntityIndex())
if mibBuilder.loadTexts: bridgeEntityFlowId.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityFlowId.setDescription('Index of BRIDGE entity.')
bridgeEntityFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 14, 15, 12, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeEntityFlowIndex.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityFlowIndex.setDescription('First index of a flow entity referencing to eth/veth parent entity.')
crossConnectionsProvisioningTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 11), )
if mibBuilder.loadTexts: crossConnectionsProvisioningTable.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningTable.setDescription('')
crossConnectionsProvisioningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 11, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexEthFrom"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexFlowFrom"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexEthTo"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexFlowTo"))
if mibBuilder.loadTexts: crossConnectionsProvisioningEntry.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningEntry.setDescription('')
crossConnectionsProvisioningIndexEthFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 11, 1, 1), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: crossConnectionsProvisioningIndexEthFrom.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningIndexEthFrom.setDescription('First index of the flow entity being a start-point of the given cross-connection (from-point).')
crossConnectionsProvisioningIndexFlowFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 11, 1, 2), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: crossConnectionsProvisioningIndexFlowFrom.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningIndexFlowFrom.setDescription('Second index of the flow entity being a start-point of the given cross-connection (from-point).')
crossConnectionsProvisioningIndexEthTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 11, 1, 3), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: crossConnectionsProvisioningIndexEthTo.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningIndexEthTo.setDescription('First index of the flow entity being an end-point of the given cross-connection (to-point).')
crossConnectionsProvisioningIndexFlowTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 11, 1, 4), EntityIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: crossConnectionsProvisioningIndexFlowTo.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningIndexFlowTo.setDescription('Second index of the flow entity being an end-point of the given cross-connection (to-point).')
crossConnectionsProvisioningRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 11, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crossConnectionsProvisioningRowStatus.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningRowStatus.setDescription('This object is used to create, or delete a row in this table.')
crossConnectionsProvisioningAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 11, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crossConnectionsProvisioningAlias.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningAlias.setDescription('User Applied Descriptor')
crossConnectionsProvisioningType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 11, 1, 7), FspR7InterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crossConnectionsProvisioningType.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
crossConnectionsProvisioningCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 11, 1, 8), FspR7TypeCrs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crossConnectionsProvisioningCrsType.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningCrsType.setDescription('Type of Cross-Connect')
crossConnectionsProvisioningConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 11, 1, 9), FspR7Conn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crossConnectionsProvisioningConn.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningConn.setDescription('Bidirectional | Unidirectional')
crossConnectionsProvisioningCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 12), )
if mibBuilder.loadTexts: crossConnectionsProvisioningCapTable.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningCapTable.setDescription('')
crossConnectionsProvisioningCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 12, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexEthFrom"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexFlowFrom"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexEthTo"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexFlowTo"))
if mibBuilder.loadTexts: crossConnectionsProvisioningCapEntry.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningCapEntry.setDescription('')
crossConnectionsProvisioningCapIndexEthFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningCapIndexEthFrom.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningCapIndexEthFrom.setDescription('First index of the flow entity being a start-point of the given cross-connection (from-point).')
crossConnectionsProvisioningCapIndexFlowFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningCapIndexFlowFrom.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningCapIndexFlowFrom.setDescription('Second index of the flow entity being a start-point of the given cross-connection (from-point).')
crossConnectionsProvisioningCapIndexEthTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningCapIndexEthTo.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningCapIndexEthTo.setDescription('First index of the flow entity being an end-point of the given cross-connection (to-point).')
crossConnectionsProvisioningCapIndexFlowTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningCapIndexFlowTo.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningCapIndexFlowTo.setDescription('Second index of the flow entity being an end-point of the given cross-connection (to-point).')
crossConnectionsProvisioningCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 12, 1, 5), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningCapRowStatus.setDescription('This object is used to create, or delete a row in this table.')
crossConnectionsProvisioningCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningCapAlias.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningCapAlias.setDescription('User Applied Descriptor')
crossConnectionsProvisioningCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 12, 1, 7), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningCapType.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningCapType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
crossConnectionsProvisioningCapCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 12, 1, 8), FspR7TypeCrsCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningCapCrsType.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningCapCrsType.setDescription('Type of Cross-Connect')
crossConnectionsProvisioningCapConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 12, 1, 9), FspR7ConnCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningCapConn.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningCapConn.setDescription('Bidirectional | Unidirectional')
crossConnectionsProvisioningDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 13), )
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsTable.setDescription('')
crossConnectionsProvisioningDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 13, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexEthFrom"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexFlowFrom"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexEthTo"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexFlowTo"))
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsEntry.setDescription('')
crossConnectionsProvisioningDefaultsIndexEthFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 13, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsIndexEthFrom.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsIndexEthFrom.setDescription('First index of the flow entity being a start-point of the given cross-connection (from-point).')
crossConnectionsProvisioningDefaultsIndexFlowFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 13, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsIndexFlowFrom.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsIndexFlowFrom.setDescription('Second index of the flow entity being a start-point of the given cross-connection (from-point).')
crossConnectionsProvisioningDefaultsIndexEthTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 13, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsIndexEthTo.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsIndexEthTo.setDescription('First index of the flow entity being an end-point of the given cross-connection (to-point).')
crossConnectionsProvisioningDefaultsIndexFlowTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 13, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsIndexFlowTo.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsIndexFlowTo.setDescription('Second index of the flow entity being an end-point of the given cross-connection (to-point).')
crossConnectionsProvisioningDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 13, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsRowStatus.setDescription('This object is used to create, or delete a row in this table.')
crossConnectionsProvisioningDefaultsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 13, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsAlias.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsAlias.setDescription('User Applied Descriptor')
crossConnectionsProvisioningDefaultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 13, 1, 7), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsType.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
crossConnectionsProvisioningDefaultsCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 13, 1, 8), FspR7TypeCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsCrsType.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsCrsType.setDescription('Type of Cross-Connect')
crossConnectionsProvisioningDefaultsConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 13, 1, 9), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsConn.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsProvisioningDefaultsConn.setDescription('Bidirectional | Unidirectional')
crossConnectionsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 14), )
if mibBuilder.loadTexts: crossConnectionsConfigTable.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsConfigTable.setDescription('')
crossConnectionsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 14, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexEthFrom"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexFlowFrom"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexEthTo"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexFlowFrom"))
if mibBuilder.loadTexts: crossConnectionsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsConfigEntry.setDescription('')
crossConnectionsConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 14, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crossConnectionsConfigAlias.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsConfigAlias.setDescription('User Applied Descriptor')
crossConnectionsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 16), )
if mibBuilder.loadTexts: crossConnectionsStatusTable.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsStatusTable.setDescription('')
crossConnectionsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 16, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexEthFrom"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexFlowFrom"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexEthTo"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexFlowTo"))
if mibBuilder.loadTexts: crossConnectionsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsStatusEntry.setDescription('')
crossConnectionsStatusFromEth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 16, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsStatusFromEth.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsStatusFromEth.setDescription('AID of a CH-C# or VCH instance.')
crossConnectionsStatusToEth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 16, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsStatusToEth.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsStatusToEth.setDescription('AID of a CH-C# or VCH instance.')
crossConnectionsStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 16, 1, 3), FspR7InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsStatusType.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsStatusType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
crossConnectionsStatusCrsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 16, 1, 4), FspR7FunctionCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsStatusCrsFunction.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsStatusCrsFunction.setDescription('Describes the Cross Connect Functionality')
crossConnectionsStatusCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 16, 1, 5), FspR7TypeCrs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsStatusCrsType.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsStatusCrsType.setDescription('Type of Cross-Connect')
crossConnectionsStatusConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 16, 1, 6), FspR7Conn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsStatusConn.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsStatusConn.setDescription('Bidirectional | Unidirectional')
crossConnectionsPointsFromTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 17), )
if mibBuilder.loadTexts: crossConnectionsPointsFromTable.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsPointsFromTable.setDescription('This table contains unused flow startpoints which can be used as an\n         element of cross-connection.\n        ')
crossConnectionsPointsFromEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 17, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexEthFrom"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexFlowFrom"))
if mibBuilder.loadTexts: crossConnectionsPointsFromEntry.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsPointsFromEntry.setDescription('')
crossConnectionsPointsFromFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 17, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsPointsFromFlow.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsPointsFromFlow.setDescription('Unused flow value which can be used as a start-point\n         for creating a cross-connection between two flows.\n        ')
crossConnectionsPointsToTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 18), )
if mibBuilder.loadTexts: crossConnectionsPointsToTable.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsPointsToTable.setDescription('This table contains unused flow endpoints which can be used as an\n         element of cross-connection.\n        ')
crossConnectionsPointsToEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 18, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexEthFrom"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexFlowFrom"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexEthTo"), (0, "FspR7-LAYER2-MIB", "crossConnectionsProvisioningIndexFlowTo"))
if mibBuilder.loadTexts: crossConnectionsPointsToEntry.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsPointsToEntry.setDescription('')
crossConnectionsPointsToFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 15, 18, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionsPointsToFlow.setStatus('current')
if mibBuilder.loadTexts: crossConnectionsPointsToFlow.setDescription('Unused flow value which can be used as an end-point\n         for creating a cross-connection between two flows.\n        ')
currentFlowEntityRx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 1), )
if mibBuilder.loadTexts: currentFlowEntityRx15minTable.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityRx15minTable.setDescription('')
currentFlowEntityRx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 1, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: currentFlowEntityRx15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityRx15minEntry.setDescription('')
currentFlowEntityRx15minUnicastFramesPerEvcRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 1, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFlowEntityRx15minUnicastFramesPerEvcRcv.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityRx15minUnicastFramesPerEvcRcv.setDescription('Received Unicast Frames per EVC(prior to policing)')
currentFlowEntityRx15minMcBcFramesPerEvcRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 1, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFlowEntityRx15minMcBcFramesPerEvcRcv.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityRx15minMcBcFramesPerEvcRcv.setDescription('Received MC/BC Frames per EVC(prior to policing)')
currentFlowEntityRx15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFlowEntityRx15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityRx15minElapsedTime.setDescription('Elapsed 15Min')
currentFlowEntityRx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 2), )
if mibBuilder.loadTexts: currentFlowEntityRx1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityRx1dayTable.setDescription('')
currentFlowEntityRx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 2, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: currentFlowEntityRx1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityRx1dayEntry.setDescription('')
currentFlowEntityRx1dayUnicastFramesPerEvcRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 2, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFlowEntityRx1dayUnicastFramesPerEvcRcv.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityRx1dayUnicastFramesPerEvcRcv.setDescription('Received Unicast Frames per EVC(prior to policing)')
currentFlowEntityRx1dayMcBcFramesPerEvcRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 2, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFlowEntityRx1dayMcBcFramesPerEvcRcv.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityRx1dayMcBcFramesPerEvcRcv.setDescription('Received MC/BC Frames per EVC(prior to policing)')
currentFlowEntityRx1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFlowEntityRx1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityRx1dayElapsedTime.setDescription('Elapsed 1Day')
intervalFlowEntityRx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 3), )
if mibBuilder.loadTexts: intervalFlowEntityRx15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityRx15minTable.setDescription('')
intervalFlowEntityRx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 3, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "intervalFlowEntityRx15minNumber"))
if mibBuilder.loadTexts: intervalFlowEntityRx15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityRx15minEntry.setDescription('')
intervalFlowEntityRx15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalFlowEntityRx15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityRx15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalFlowEntityRx15minUnicastFramesPerEvcRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 3, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityRx15minUnicastFramesPerEvcRcv.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityRx15minUnicastFramesPerEvcRcv.setDescription('Received Unicast Frames per EVC(prior to policing)')
intervalFlowEntityRx15minMcBcFramesPerEvcRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 3, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityRx15minMcBcFramesPerEvcRcv.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityRx15minMcBcFramesPerEvcRcv.setDescription('Received MC/BC Frames per EVC(prior to policing)')
intervalFlowEntityRx15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityRx15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityRx15minValidFlag.setDescription('Valid Flag')
intervalFlowEntityRx15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityRx15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityRx15minTimeStamp.setDescription('Timestamp')
intervalFlowEntityRx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 4), )
if mibBuilder.loadTexts: intervalFlowEntityRx1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityRx1dayTable.setDescription('')
intervalFlowEntityRx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 4, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "intervalFlowEntityRx1dayNumber"))
if mibBuilder.loadTexts: intervalFlowEntityRx1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityRx1dayEntry.setDescription('')
intervalFlowEntityRx1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalFlowEntityRx1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityRx1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalFlowEntityRx1dayUnicastFramesPerEvcRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 4, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityRx1dayUnicastFramesPerEvcRcv.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityRx1dayUnicastFramesPerEvcRcv.setDescription('Received Unicast Frames per EVC(prior to policing)')
intervalFlowEntityRx1dayMcBcFramesPerEvcRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 4, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityRx1dayMcBcFramesPerEvcRcv.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityRx1dayMcBcFramesPerEvcRcv.setDescription('Received MC/BC Frames per EVC(prior to policing)')
intervalFlowEntityRx1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityRx1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityRx1dayValidFlag.setDescription('Valid Flag')
intervalFlowEntityRx1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityRx1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityRx1dayTimeStamp.setDescription('Timestamp')
currentFlowEntityTx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 5), )
if mibBuilder.loadTexts: currentFlowEntityTx15minTable.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityTx15minTable.setDescription('')
currentFlowEntityTx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 5, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: currentFlowEntityTx15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityTx15minEntry.setDescription('')
currentFlowEntityTx15minUnicastFramesPerEvcTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 5, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFlowEntityTx15minUnicastFramesPerEvcTrmt.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityTx15minUnicastFramesPerEvcTrmt.setDescription('Transmitted Unicast Frames per EVC(prior to policing)')
currentFlowEntityTx15minMcBcFramesPerEvcTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 5, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFlowEntityTx15minMcBcFramesPerEvcTrmt.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityTx15minMcBcFramesPerEvcTrmt.setDescription('Transmitted MC/BC Frames per EVC(prior to policing)')
currentFlowEntityTx15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFlowEntityTx15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityTx15minElapsedTime.setDescription('Elapsed 15Min')
currentFlowEntityTx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 6), )
if mibBuilder.loadTexts: currentFlowEntityTx1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityTx1dayTable.setDescription('')
currentFlowEntityTx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 6, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: currentFlowEntityTx1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityTx1dayEntry.setDescription('')
currentFlowEntityTx1dayUnicastFramesPerEvcTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 6, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFlowEntityTx1dayUnicastFramesPerEvcTrmt.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityTx1dayUnicastFramesPerEvcTrmt.setDescription('Transmitted Unicast Frames per EVC(prior to policing)')
currentFlowEntityTx1dayMcBcFramesPerEvcTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 6, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFlowEntityTx1dayMcBcFramesPerEvcTrmt.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityTx1dayMcBcFramesPerEvcTrmt.setDescription('Transmitted MC/BC Frames per EVC(prior to policing)')
currentFlowEntityTx1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFlowEntityTx1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentFlowEntityTx1dayElapsedTime.setDescription('Elapsed 1Day')
intervalFlowEntityTx15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 7), )
if mibBuilder.loadTexts: intervalFlowEntityTx15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityTx15minTable.setDescription('')
intervalFlowEntityTx15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 7, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "intervalFlowEntityTx15minNumber"))
if mibBuilder.loadTexts: intervalFlowEntityTx15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityTx15minEntry.setDescription('')
intervalFlowEntityTx15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalFlowEntityTx15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityTx15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalFlowEntityTx15minUnicastFramesPerEvcTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 7, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityTx15minUnicastFramesPerEvcTrmt.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityTx15minUnicastFramesPerEvcTrmt.setDescription('Transmitted Unicast Frames per EVC(prior to policing)')
intervalFlowEntityTx15minMcBcFramesPerEvcTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 7, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityTx15minMcBcFramesPerEvcTrmt.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityTx15minMcBcFramesPerEvcTrmt.setDescription('Transmitted MC/BC Frames per EVC(prior to policing)')
intervalFlowEntityTx15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 7, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityTx15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityTx15minValidFlag.setDescription('Valid Flag')
intervalFlowEntityTx15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 7, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityTx15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityTx15minTimeStamp.setDescription('Timestamp')
intervalFlowEntityTx1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 8), )
if mibBuilder.loadTexts: intervalFlowEntityTx1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityTx1dayTable.setDescription('')
intervalFlowEntityTx1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 8, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "intervalFlowEntityTx15minNumber"))
if mibBuilder.loadTexts: intervalFlowEntityTx1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityTx1dayEntry.setDescription('')
intervalFlowEntityTx1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalFlowEntityTx1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityTx1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalFlowEntityTx1dayUnicastFramesPerEvcTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 8, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityTx1dayUnicastFramesPerEvcTrmt.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityTx1dayUnicastFramesPerEvcTrmt.setDescription('Transmitted Unicast Frames per EVC(prior to policing)')
intervalFlowEntityTx1dayMcBcFramesPerEvcTrmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 8, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityTx1dayMcBcFramesPerEvcTrmt.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityTx1dayMcBcFramesPerEvcTrmt.setDescription('Transmitted MC/BC Frames per EVC(prior to policing)')
intervalFlowEntityTx1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 8, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityTx1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityTx1dayValidFlag.setDescription('Valid Flag')
intervalFlowEntityTx1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 1, 8, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalFlowEntityTx1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalFlowEntityTx1dayTimeStamp.setDescription('Timestamp')
currentpolicerOnFlowEntity15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 5), )
if mibBuilder.loadTexts: currentpolicerOnFlowEntity15minTable.setStatus('current')
if mibBuilder.loadTexts: currentpolicerOnFlowEntity15minTable.setDescription('')
currentpolicerOnFlowEntity15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 5, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexPolicer"))
if mibBuilder.loadTexts: currentpolicerOnFlowEntity15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentpolicerOnFlowEntity15minEntry.setDescription('')
currentpolicerOnFlowEntity15minBytesMarkedGreen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 5, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentpolicerOnFlowEntity15minBytesMarkedGreen.setStatus('current')
if mibBuilder.loadTexts: currentpolicerOnFlowEntity15minBytesMarkedGreen.setDescription('Bytes marked green per EVC COS')
currentpolicerOnFlowEntity15minFramesMarkedGreen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 5, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentpolicerOnFlowEntity15minFramesMarkedGreen.setStatus('current')
if mibBuilder.loadTexts: currentpolicerOnFlowEntity15minFramesMarkedGreen.setDescription('Frames marked green per EVC COS')
currentpolicerOnFlowEntity15minBytesMarkedRed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 5, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentpolicerOnFlowEntity15minBytesMarkedRed.setStatus('current')
if mibBuilder.loadTexts: currentpolicerOnFlowEntity15minBytesMarkedRed.setDescription('Bytes marked red per EVC COS')
currentpolicerOnFlowEntity15minFramesMarkedRed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 5, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentpolicerOnFlowEntity15minFramesMarkedRed.setStatus('current')
if mibBuilder.loadTexts: currentpolicerOnFlowEntity15minFramesMarkedRed.setDescription('Frames marked red per EVC COS')
currentpolicerOnFlowEntity15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentpolicerOnFlowEntity15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentpolicerOnFlowEntity15minElapsedTime.setDescription('Elapsed 15Min')
currentpolicerOnFlowEntity1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 6), )
if mibBuilder.loadTexts: currentpolicerOnFlowEntity1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentpolicerOnFlowEntity1dayTable.setDescription('')
currentpolicerOnFlowEntity1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 6, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexPolicer"))
if mibBuilder.loadTexts: currentpolicerOnFlowEntity1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentpolicerOnFlowEntity1dayEntry.setDescription('')
currentpolicerOnFlowEntity1dayBytesMarkedGreen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 6, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentpolicerOnFlowEntity1dayBytesMarkedGreen.setStatus('current')
if mibBuilder.loadTexts: currentpolicerOnFlowEntity1dayBytesMarkedGreen.setDescription('Bytes marked green per EVC COS')
currentpolicerOnFlowEntity1dayFramesMarkedGreen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 6, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentpolicerOnFlowEntity1dayFramesMarkedGreen.setStatus('current')
if mibBuilder.loadTexts: currentpolicerOnFlowEntity1dayFramesMarkedGreen.setDescription('Frames marked green per EVC COS')
currentpolicerOnFlowEntity1dayBytesMarkedRed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 6, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentpolicerOnFlowEntity1dayBytesMarkedRed.setStatus('current')
if mibBuilder.loadTexts: currentpolicerOnFlowEntity1dayBytesMarkedRed.setDescription('Bytes marked red per EVC COS')
currentpolicerOnFlowEntity1dayFramesMarkedRed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 6, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentpolicerOnFlowEntity1dayFramesMarkedRed.setStatus('current')
if mibBuilder.loadTexts: currentpolicerOnFlowEntity1dayFramesMarkedRed.setDescription('Frames marked red per EVC COS')
currentpolicerOnFlowEntity1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentpolicerOnFlowEntity1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentpolicerOnFlowEntity1dayElapsedTime.setDescription('Elapsed 1Day')
intervalpolicerOnFlowEntity15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 7), )
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minTable.setDescription('')
intervalpolicerOnFlowEntity15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 7, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexPolicer"), (0, "FspR7-LAYER2-MIB", "intervalpolicerOnFlowEntity15minNumber"))
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minEntry.setDescription('')
intervalpolicerOnFlowEntity15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalpolicerOnFlowEntity15minBytesMarkedGreen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 7, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minBytesMarkedGreen.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minBytesMarkedGreen.setDescription('Bytes marked green per EVC COS')
intervalpolicerOnFlowEntity15minFramesMarkedGreen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 7, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minFramesMarkedGreen.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minFramesMarkedGreen.setDescription('Frames marked green per EVC COS')
intervalpolicerOnFlowEntity15minBytesMarkedRed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 7, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minBytesMarkedRed.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minBytesMarkedRed.setDescription('Bytes marked red per EVC COS')
intervalpolicerOnFlowEntity15minFramesMarkedRed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 7, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minFramesMarkedRed.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minFramesMarkedRed.setDescription('Frames marked red per EVC COS')
intervalpolicerOnFlowEntity15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 7, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minValidFlag.setDescription('Valid Flag')
intervalpolicerOnFlowEntity15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 7, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity15minTimeStamp.setDescription('Timestamp')
intervalpolicerOnFlowEntity1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 8), )
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayTable.setDescription('')
intervalpolicerOnFlowEntity1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 8, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "policerOnFlowEntityIndexPolicer"), (0, "FspR7-LAYER2-MIB", "intervalpolicerOnFlowEntity1dayNumber"))
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayEntry.setDescription('')
intervalpolicerOnFlowEntity1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalpolicerOnFlowEntity1dayBytesMarkedGreen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 8, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayBytesMarkedGreen.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayBytesMarkedGreen.setDescription('Bytes marked green per EVC COS')
intervalpolicerOnFlowEntity1dayFramesMarkedGreen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 8, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayFramesMarkedGreen.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayFramesMarkedGreen.setDescription('Frames marked green per EVC COS')
intervalpolicerOnFlowEntity1dayBytesMarkedRed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 8, 1, 4), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayBytesMarkedRed.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayBytesMarkedRed.setDescription('Bytes marked red per EVC COS')
intervalpolicerOnFlowEntity1dayFramesMarkedRed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 8, 1, 5), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayFramesMarkedRed.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayFramesMarkedRed.setDescription('Frames marked red per EVC COS')
intervalpolicerOnFlowEntity1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 8, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayValidFlag.setDescription('Valid Flag')
intervalpolicerOnFlowEntity1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 2, 8, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalpolicerOnFlowEntity1dayTimeStamp.setDescription('Timestamp')
currentQueOnPortEntity15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 1), )
if mibBuilder.loadTexts: currentQueOnPortEntity15minTable.setStatus('current')
if mibBuilder.loadTexts: currentQueOnPortEntity15minTable.setDescription('')
currentQueOnPortEntity15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 1, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnPortEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "queOnPortEntityIndexPrio"))
if mibBuilder.loadTexts: currentQueOnPortEntity15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentQueOnPortEntity15minEntry.setDescription('')
currentQueOnPortEntity15minBytesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 1, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnPortEntity15minBytesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: currentQueOnPortEntity15minBytesDroppedBufOverflow.setDescription('Bytes dropped due to buffer overflow')
currentQueOnPortEntity15minFramesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 1, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnPortEntity15minFramesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: currentQueOnPortEntity15minFramesDroppedBufOverflow.setDescription('Frames dropped due to buffer overflow')
currentQueOnPortEntity15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnPortEntity15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentQueOnPortEntity15minElapsedTime.setDescription('Elapsed 15Min')
currentQueOnPortEntity1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 2), )
if mibBuilder.loadTexts: currentQueOnPortEntity1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentQueOnPortEntity1dayTable.setDescription('')
currentQueOnPortEntity1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 2, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnPortEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "queOnPortEntityIndexPrio"))
if mibBuilder.loadTexts: currentQueOnPortEntity1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentQueOnPortEntity1dayEntry.setDescription('')
currentQueOnPortEntity1dayBytesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 2, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnPortEntity1dayBytesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: currentQueOnPortEntity1dayBytesDroppedBufOverflow.setDescription('Bytes dropped due to buffer overflow')
currentQueOnPortEntity1dayFramesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 2, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnPortEntity1dayFramesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: currentQueOnPortEntity1dayFramesDroppedBufOverflow.setDescription('Frames dropped due to buffer overflow')
currentQueOnPortEntity1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnPortEntity1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentQueOnPortEntity1dayElapsedTime.setDescription('Elapsed 1Day')
intervalQueOnPortEntity15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 3), )
if mibBuilder.loadTexts: intervalQueOnPortEntity15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnPortEntity15minTable.setDescription('')
intervalQueOnPortEntity15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 3, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnPortEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "queOnPortEntityIndexPrio"), (0, "FspR7-LAYER2-MIB", "intervalQueOnPortEntity15minNumber"))
if mibBuilder.loadTexts: intervalQueOnPortEntity15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnPortEntity15minEntry.setDescription('')
intervalQueOnPortEntity15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalQueOnPortEntity15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnPortEntity15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalQueOnPortEntity15minBytesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 3, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnPortEntity15minBytesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnPortEntity15minBytesDroppedBufOverflow.setDescription('Bytes dropped due to buffer overflow')
intervalQueOnPortEntity15minFramesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 3, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnPortEntity15minFramesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnPortEntity15minFramesDroppedBufOverflow.setDescription('Frames dropped due to buffer overflow')
intervalQueOnPortEntity15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnPortEntity15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnPortEntity15minValidFlag.setDescription('Valid Flag')
intervalQueOnPortEntity15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnPortEntity15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnPortEntity15minTimeStamp.setDescription('Timestamp')
intervalQueOnPortEntity1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 4), )
if mibBuilder.loadTexts: intervalQueOnPortEntity1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnPortEntity1dayTable.setDescription('')
intervalQueOnPortEntity1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 4, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnPortEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "queOnPortEntityIndexPrio"), (0, "FspR7-LAYER2-MIB", "intervalQueOnPortEntity1dayNumber"))
if mibBuilder.loadTexts: intervalQueOnPortEntity1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnPortEntity1dayEntry.setDescription('')
intervalQueOnPortEntity1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalQueOnPortEntity1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnPortEntity1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalQueOnPortEntity1dayBytesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 4, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnPortEntity1dayBytesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnPortEntity1dayBytesDroppedBufOverflow.setDescription('Bytes dropped due to buffer overflow')
intervalQueOnPortEntity1dayFramesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 4, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnPortEntity1dayFramesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnPortEntity1dayFramesDroppedBufOverflow.setDescription('Frames dropped due to buffer overflow')
intervalQueOnPortEntity1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnPortEntity1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnPortEntity1dayValidFlag.setDescription('Valid Flag')
intervalQueOnPortEntity1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnPortEntity1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnPortEntity1dayTimeStamp.setDescription('Timestamp')
currentQueOnFlowEntity15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 5), )
if mibBuilder.loadTexts: currentQueOnFlowEntity15minTable.setStatus('current')
if mibBuilder.loadTexts: currentQueOnFlowEntity15minTable.setDescription('')
currentQueOnFlowEntity15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 5, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexPrio"))
if mibBuilder.loadTexts: currentQueOnFlowEntity15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentQueOnFlowEntity15minEntry.setDescription('')
currentQueOnFlowEntity15minBytesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 5, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnFlowEntity15minBytesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: currentQueOnFlowEntity15minBytesDroppedBufOverflow.setDescription('Bytes dropped due to buffer overflow')
currentQueOnFlowEntity15minFramesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 5, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnFlowEntity15minFramesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: currentQueOnFlowEntity15minFramesDroppedBufOverflow.setDescription('Frames dropped due to buffer overflow')
currentQueOnFlowEntity15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnFlowEntity15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentQueOnFlowEntity15minElapsedTime.setDescription('Elapsed 15Min')
currentQueOnFlowEntity1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 6), )
if mibBuilder.loadTexts: currentQueOnFlowEntity1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentQueOnFlowEntity1dayTable.setDescription('')
currentQueOnFlowEntity1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 6, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexPrio"))
if mibBuilder.loadTexts: currentQueOnFlowEntity1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentQueOnFlowEntity1dayEntry.setDescription('')
currentQueOnFlowEntity1dayBytesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 6, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnFlowEntity1dayBytesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: currentQueOnFlowEntity1dayBytesDroppedBufOverflow.setDescription('Bytes dropped due to buffer overflow')
currentQueOnFlowEntity1dayFramesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 6, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnFlowEntity1dayFramesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: currentQueOnFlowEntity1dayFramesDroppedBufOverflow.setDescription('Frames dropped due to buffer overflow')
currentQueOnFlowEntity1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnFlowEntity1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentQueOnFlowEntity1dayElapsedTime.setDescription('Elapsed 1Day')
intervalQueOnFlowEntity15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 7), )
if mibBuilder.loadTexts: intervalQueOnFlowEntity15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnFlowEntity15minTable.setDescription('')
intervalQueOnFlowEntity15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 7, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexPrio"), (0, "FspR7-LAYER2-MIB", "intervalQueOnFlowEntity15minNumber"))
if mibBuilder.loadTexts: intervalQueOnFlowEntity15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnFlowEntity15minEntry.setDescription('')
intervalQueOnFlowEntity15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalQueOnFlowEntity15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnFlowEntity15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalQueOnFlowEntity15minBytesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 7, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnFlowEntity15minBytesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnFlowEntity15minBytesDroppedBufOverflow.setDescription('Bytes dropped due to buffer overflow')
intervalQueOnFlowEntity15minFramesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 7, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnFlowEntity15minFramesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnFlowEntity15minFramesDroppedBufOverflow.setDescription('Frames dropped due to buffer overflow')
intervalQueOnFlowEntity15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 7, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnFlowEntity15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnFlowEntity15minValidFlag.setDescription('Valid Flag')
intervalQueOnFlowEntity15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 7, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnFlowEntity15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnFlowEntity15minTimeStamp.setDescription('Timestamp')
intervalQueOnFlowEntity1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 8), )
if mibBuilder.loadTexts: intervalQueOnFlowEntity1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnFlowEntity1dayTable.setDescription('')
intervalQueOnFlowEntity1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 8, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "queOnFlowEntityIndexPrio"), (0, "FspR7-LAYER2-MIB", "intervalQueOnFlowEntity1dayNumber"))
if mibBuilder.loadTexts: intervalQueOnFlowEntity1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnFlowEntity1dayEntry.setDescription('')
intervalQueOnFlowEntity1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalQueOnFlowEntity1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnFlowEntity1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalQueOnFlowEntity1dayBytesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 8, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnFlowEntity1dayBytesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnFlowEntity1dayBytesDroppedBufOverflow.setDescription('Bytes dropped due to buffer overflow')
intervalQueOnFlowEntity1dayFramesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 8, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnFlowEntity1dayFramesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnFlowEntity1dayFramesDroppedBufOverflow.setDescription('Frames dropped due to buffer overflow')
intervalQueOnFlowEntity1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 8, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnFlowEntity1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnFlowEntity1dayValidFlag.setDescription('Valid Flag')
intervalQueOnFlowEntity1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 8, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnFlowEntity1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnFlowEntity1dayTimeStamp.setDescription('Timestamp')
currentQueOnBridgeEntity15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 9), )
if mibBuilder.loadTexts: currentQueOnBridgeEntity15minTable.setStatus('current')
if mibBuilder.loadTexts: currentQueOnBridgeEntity15minTable.setDescription('This table contains for QUE on BRIDGE entities. It is used for reading\n         non-configurable, currently counted performance monitoring parameters with\n         1-day counting period.')
currentQueOnBridgeEntity15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 9, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnBridgeEntityIndex"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntitySvid"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntityPrio"))
if mibBuilder.loadTexts: currentQueOnBridgeEntity15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentQueOnBridgeEntity15minEntry.setDescription('')
currentQueOnBridgeEntity15minBytesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 9, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnBridgeEntity15minBytesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: currentQueOnBridgeEntity15minBytesDroppedBufOverflow.setDescription('Bytes dropped due to buffer overflow')
currentQueOnBridgeEntity15minFramesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 9, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnBridgeEntity15minFramesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: currentQueOnBridgeEntity15minFramesDroppedBufOverflow.setDescription('Frames dropped due to buffer overflow')
currentQueOnBridgeEntity15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnBridgeEntity15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentQueOnBridgeEntity15minElapsedTime.setDescription('Elapsed 15Min')
currentQueOnBridgeEntity1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 10), )
if mibBuilder.loadTexts: currentQueOnBridgeEntity1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentQueOnBridgeEntity1dayTable.setDescription('This table contains for QUE on BRIDGE entities. It is used for reading\n         non-configurable, currently counted performance monitoring parameters with\n         1-day counting period.')
currentQueOnBridgeEntity1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 10, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnBridgeEntityIndex"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntitySvid"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntityPrio"))
if mibBuilder.loadTexts: currentQueOnBridgeEntity1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentQueOnBridgeEntity1dayEntry.setDescription('Entry represents an assigned QUE on BRIDGE entity.')
currentQueOnBridgeEntity1dayBytesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 10, 1, 1), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnBridgeEntity1dayBytesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: currentQueOnBridgeEntity1dayBytesDroppedBufOverflow.setDescription('Bytes dropped due to buffer overflow')
currentQueOnBridgeEntity1dayFramesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 10, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnBridgeEntity1dayFramesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: currentQueOnBridgeEntity1dayFramesDroppedBufOverflow.setDescription('Frames dropped due to buffer overflow')
currentQueOnBridgeEntity1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentQueOnBridgeEntity1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentQueOnBridgeEntity1dayElapsedTime.setDescription('Elapsed 1Day')
intervalQueOnBridgeEntity15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 11), )
if mibBuilder.loadTexts: intervalQueOnBridgeEntity15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnBridgeEntity15minTable.setDescription('This table contains for QUE on BRIDGE entities. It is used for reading\n         non-configurable, already counted performance monitoring parameters with\n         15-minutes counting period.')
intervalQueOnBridgeEntity15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 11, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnBridgeEntityIndex"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntitySvid"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntityPrio"), (0, "FspR7-LAYER2-MIB", "intervalQueOnBridgeEntity15minNumber"))
if mibBuilder.loadTexts: intervalQueOnBridgeEntity15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnBridgeEntity15minEntry.setDescription('Entry represents an assigned QUE on BRIDGE entity.')
intervalQueOnBridgeEntity15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalQueOnBridgeEntity15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnBridgeEntity15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 15 minute\n         interval, and the interval identified by N is the interval\n         immediately preceding the one identified by N-1.')
intervalQueOnBridgeEntity15minBytesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 11, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnBridgeEntity15minBytesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnBridgeEntity15minBytesDroppedBufOverflow.setDescription('Bytes dropped due to buffer overflow')
intervalQueOnBridgeEntity15minFramesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 11, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnBridgeEntity15minFramesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnBridgeEntity15minFramesDroppedBufOverflow.setDescription('Frames dropped due to buffer overflow')
intervalQueOnBridgeEntity15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 11, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnBridgeEntity15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnBridgeEntity15minValidFlag.setDescription('Valid Flag')
intervalQueOnBridgeEntity15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 11, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnBridgeEntity15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnBridgeEntity15minTimeStamp.setDescription('Timestamp')
intervalQueOnBridgeEntity1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 12), )
if mibBuilder.loadTexts: intervalQueOnBridgeEntity1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnBridgeEntity1dayTable.setDescription('This table contains for QUE on BRIDGE entities. It is used for reading\n         non-configurable, already counted performance monitoring parameters with\n         1-day counting period.')
intervalQueOnBridgeEntity1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 12, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "queOnBridgeEntityIndex"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntitySvid"), (0, "FspR7-LAYER2-MIB", "queOnBridgeEntityPrio"), (0, "FspR7-LAYER2-MIB", "intervalQueOnBridgeEntity1dayNumber"))
if mibBuilder.loadTexts: intervalQueOnBridgeEntity1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnBridgeEntity1dayEntry.setDescription('Entry represents an assigned QUE on BRIDGE entity.')
intervalQueOnBridgeEntity1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalQueOnBridgeEntity1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnBridgeEntity1dayNumber.setDescription('A number, which identifies the interval for\n         which the set of statistics is available. The interval\n         identified by 1 is the most recently completed 1 day\n         interval.')
intervalQueOnBridgeEntity1dayBytesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 12, 1, 2), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnBridgeEntity1dayBytesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnBridgeEntity1dayBytesDroppedBufOverflow.setDescription('Bytes dropped due to buffer overflow')
intervalQueOnBridgeEntity1dayFramesDroppedBufOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 12, 1, 3), Counter64String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnBridgeEntity1dayFramesDroppedBufOverflow.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnBridgeEntity1dayFramesDroppedBufOverflow.setDescription('Frames dropped due to buffer overflow')
intervalQueOnBridgeEntity1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 12, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnBridgeEntity1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnBridgeEntity1dayValidFlag.setDescription('Valid Flag')
intervalQueOnBridgeEntity1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 16, 3, 12, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalQueOnBridgeEntity1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalQueOnBridgeEntity1dayTimeStamp.setDescription('Timestamp')
alarmOosDisabledL2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100000)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosDisabledL2.setStatus('current')
if mibBuilder.loadTexts: alarmOosDisabledL2.setDescription('Non-Specific Disablement of Management Access')
alarmOosManagementL2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100001)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosManagementL2.setStatus('current')
if mibBuilder.loadTexts: alarmOosManagementL2.setDescription('Alarms are logged but not notified, service affecting changes are permitted')
alarmOosMaintenanceL2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100002)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosMaintenanceL2.setStatus('current')
if mibBuilder.loadTexts: alarmOosMaintenanceL2.setDescription('Alarms are logged but not notified, service affecting changes and operations are permitted')
alarmOosAinsL2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100003)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmOosAinsL2.setStatus('current')
if mibBuilder.loadTexts: alarmOosAinsL2.setDescription('Automatic In Service')
alarmServerSignalFailL2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100004)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmServerSignalFailL2.setStatus('current')
if mibBuilder.loadTexts: alarmServerSignalFailL2.setDescription('All member ports signals have failed')
alarmMepNotPresentL2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100005)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmMepNotPresentL2.setStatus('current')
if mibBuilder.loadTexts: alarmMepNotPresentL2.setDescription('No MEP is attached to this FLW.')
alarmPriVidNotEqualExtVidL2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100006)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmPriVidNotEqualExtVidL2.setStatus('current')
if mibBuilder.loadTexts: alarmPriVidNotEqualExtVidL2.setDescription('The MEP PRIMARY-VID and the EXT-VID/SVID on the FLW is not equal')
alarmSwitchtoProtectionInhibitedL2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100007)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSwitchtoProtectionInhibitedL2.setStatus('current')
if mibBuilder.loadTexts: alarmSwitchtoProtectionInhibitedL2.setDescription('Protection Switch Inhibited. Switch to PROTN facility Locked Out. Reported by WKG facility. Leads to PSI state.')
alarmManswL2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100008)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmManswL2.setStatus('current')
if mibBuilder.loadTexts: alarmManswL2.setDescription('This condition will only be shown on the working entity, meaning the MANSW has switched traffic from the working entity to the protection entity.')
alarmSfCfmLevel0L2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100009)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSfCfmLevel0L2.setStatus('current')
if mibBuilder.loadTexts: alarmSfCfmLevel0L2.setDescription('SF alarm on Level 0')
alarmSfCfmLevel1L2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100010)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSfCfmLevel1L2.setStatus('current')
if mibBuilder.loadTexts: alarmSfCfmLevel1L2.setDescription('SF alarm on Level 1')
alarmSfCfmLevel2L2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100011)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSfCfmLevel2L2.setStatus('current')
if mibBuilder.loadTexts: alarmSfCfmLevel2L2.setDescription('SF alarm on Level 2')
alarmSfCfmLevel3L2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100012)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSfCfmLevel3L2.setStatus('current')
if mibBuilder.loadTexts: alarmSfCfmLevel3L2.setDescription('SF alarm on Level 3')
alarmSfCfmLevel4L2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100013)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSfCfmLevel4L2.setStatus('current')
if mibBuilder.loadTexts: alarmSfCfmLevel4L2.setDescription('SF alarm on Level 4')
alarmSfCfmLevel5L2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100014)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSfCfmLevel5L2.setStatus('current')
if mibBuilder.loadTexts: alarmSfCfmLevel5L2.setDescription('SF alarm on Level 5')
alarmSfCfmLevel6L2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100015)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSfCfmLevel6L2.setStatus('current')
if mibBuilder.loadTexts: alarmSfCfmLevel6L2.setDescription('SF alarm on Level 6')
alarmSfCfmLevel7L2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100016)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSfCfmLevel7L2.setStatus('current')
if mibBuilder.loadTexts: alarmSfCfmLevel7L2.setDescription('SF alarm on Level 7')
alarmSwitchtoWorkingInhibitedL2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100019)).setObjects(("FspR7-LAYER2-MIB", "flowCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "flowCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmSwitchtoWorkingInhibitedL2.setStatus('current')
if mibBuilder.loadTexts: alarmSwitchtoWorkingInhibitedL2.setDescription('Protection Release Inhibited. Switch back to WKG facility Locked Out. Reported by PROTN facility. Leads to PRI state.')
alarmBridgeOosManagement = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100017)).setObjects(("FspR7-LAYER2-MIB", "bridgeCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "bridgeCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmBridgeOosManagement.setStatus('current')
if mibBuilder.loadTexts: alarmBridgeOosManagement.setDescription('Alarms are logged but not notified, service affecting changes are permitted')
alarmBridgeOosAins = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 100018)).setObjects(("FspR7-LAYER2-MIB", "bridgeCurrentConditionSeverity"), ("FspR7-LAYER2-MIB", "bridgeCurrentConditionAffect"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: alarmBridgeOosAins.setStatus('current')
if mibBuilder.loadTexts: alarmBridgeOosAins.setDescription('Automatic In Service')
flowEntityCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110001)).setObjects(("FspR7-LAYER2-MIB", "flowEntityIndexEth"), ("FspR7-LAYER2-MIB", "flowEntityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: flowEntityCreation.setStatus('current')
if mibBuilder.loadTexts: flowEntityCreation.setDescription('This trap is sent every time an entity is created. No containers\n         or other sub-entities in the chassis are reported created by this trap,\n         the NMS must read these data.')
ctransEntityCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110002)).setObjects(("FspR7-LAYER2-MIB", "ctransEntityIndexEth"), ("FspR7-LAYER2-MIB", "ctransEntityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: ctransEntityCreation.setStatus('current')
if mibBuilder.loadTexts: ctransEntityCreation.setDescription('This trap is sent every time an entity is created. No containers\n         or other sub-entities in the chassis are reported created by this trap,\n         the NMS must read these data.')
bridgeEntityCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110003)).setObjects(("FspR7-LAYER2-MIB", "bridgeEntityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: bridgeEntityCreation.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityCreation.setDescription('This trap indicates BRIDGE entity creation.')
flowEntityDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110008)).setObjects(("FspR7-LAYER2-MIB", "flowEntityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: flowEntityDeletion.setStatus('current')
if mibBuilder.loadTexts: flowEntityDeletion.setDescription('This trap is sent every time an entity is deleted. The\n         sub-entities (containers, modules, etc.) are not reported deleted.\n        ')
ctransEntityDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110009)).setObjects(("FspR7-LAYER2-MIB", "ctransEntityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: ctransEntityDeletion.setStatus('current')
if mibBuilder.loadTexts: ctransEntityDeletion.setDescription('This trap is sent every time an entity is deleted. The\n         sub-entities (containers, modules, etc.) are not reported deleted.\n        ')
bridgeEntityDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110010)).setObjects(("FspR7-LAYER2-MIB", "bridgeEntityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: bridgeEntityDeletion.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityDeletion.setDescription('This trap indicates BRIDGE entity deletion.')
layer2EntityStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110015)).setObjects(("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: layer2EntityStateChange.setStatus('current')
if mibBuilder.loadTexts: layer2EntityStateChange.setDescription('This trap is sent to indicate an entity state change.')
flowEntityObjectChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110016)).setObjects(("FspR7-LAYER2-MIB", "flowEntityIndexEth"), ("FspR7-LAYER2-MIB", "flowEntityIndexFlow"), ("FspR7-LAYER2-MIB", "flowEntityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: flowEntityObjectChange.setStatus('current')
if mibBuilder.loadTexts: flowEntityObjectChange.setDescription('This trap is sent some object is changed.')
ctransEntityObjectChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110017)).setObjects(("FspR7-LAYER2-MIB", "ctransEntityIndexEth"), ("FspR7-LAYER2-MIB", "ctransEntityIndexCVlanId"), ("FspR7-LAYER2-MIB", "ctransEntityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: ctransEntityObjectChange.setStatus('current')
if mibBuilder.loadTexts: ctransEntityObjectChange.setDescription('This trap is sent some object is changed.')
bridgeEntityObjectChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110018)).setObjects(("FspR7-LAYER2-MIB", "bridgeEntityContainedIn"), ("FspR7-LAYER2-MIB", "bridgeEntitySvid"), ("FspR7-LAYER2-MIB", "bridgeEntityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: bridgeEntityObjectChange.setStatus('current')
if mibBuilder.loadTexts: bridgeEntityObjectChange.setDescription('This trap indicates properties change of BRIDGE entity.')
crossConnectionCreationLayer2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110030)).setObjects(("FspR7-LAYER2-MIB", "crossConnectionsStatusFromEth"), ("FspR7-LAYER2-MIB", "crossConnectionsStatusToEth"), ("FspR7-LAYER2-MIB", "crossConnectionsProvisioningConn"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: crossConnectionCreationLayer2.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCreationLayer2.setDescription('This trap is sent every time an cross connection is created.')
crossConnectionDeletionLayer2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110031)).setObjects(("FspR7-LAYER2-MIB", "crossConnectionsStatusFromEth"), ("FspR7-LAYER2-MIB", "crossConnectionsStatusToEth"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: crossConnectionDeletionLayer2.setStatus('current')
if mibBuilder.loadTexts: crossConnectionDeletionLayer2.setDescription('This trap is sent every time an cross connection is deleted.')
crossConnectionObjectChangeLayer2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110032)).setObjects(("FspR7-LAYER2-MIB", "crossConnectionsStatusFromEth"), ("FspR7-LAYER2-MIB", "crossConnectionsStatusToEth"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: crossConnectionObjectChangeLayer2.setStatus('current')
if mibBuilder.loadTexts: crossConnectionObjectChangeLayer2.setDescription('This trap is sent some cross connect object is changed.')
ffpFlowEntityCreation = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110033)).setObjects(("FspR7-LAYER2-MIB", "flowEntityIndexEth"), ("FspR7-LAYER2-MIB", "flowProtectionAssignedEntityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: ffpFlowEntityCreation.setStatus('current')
if mibBuilder.loadTexts: ffpFlowEntityCreation.setDescription('This trap is sent every time an entity is created. No containers\n         or other sub-entities in the chassis are reported created by this trap,\n         the NMS must read these data.')
ffpFlowEntityDeletion = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110034)).setObjects(("FspR7-LAYER2-MIB", "flowProtectionAssignedEntityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: ffpFlowEntityDeletion.setStatus('current')
if mibBuilder.loadTexts: ffpFlowEntityDeletion.setDescription('This trap is sent every time an entity is deleted. The deletion of\n         sub-entities (containers, modules, etc.) are not reported.\n        ')
ffpFlowEntityObjectChange = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 110035)).setObjects(("FspR7-LAYER2-MIB", "flowEntityIndexEth"), ("FspR7-LAYER2-MIB", "flowEntityIndexFlow"), ("FspR7-LAYER2-MIB", "flowProtectionAssignedEntityClass"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: ffpFlowEntityObjectChange.setStatus('current')
if mibBuilder.loadTexts: ffpFlowEntityObjectChange.setDescription('This trap is sent some object is changed.')
transientWorkingSwitchedtoProtectionL2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 111001)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientWorkingSwitchedtoProtectionL2.setStatus('current')
if mibBuilder.loadTexts: transientWorkingSwitchedtoProtectionL2.setDescription('Working Traffic (ACT) switched from WKG facility to PROTN facility automatically, sent by WKG.')
transientWorkingSwitchedBacktoWorkingL2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 111002)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientWorkingSwitchedBacktoWorkingL2.setStatus('current')
if mibBuilder.loadTexts: transientWorkingSwitchedBacktoWorkingL2.setDescription('Working Traffic (ACT) switched back to WKG facilty from PROTN facility automatically: sent by PROTN.')
transientManualWorkingSwitchedtoProtectionL2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 111003)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientManualWorkingSwitchedtoProtectionL2.setStatus('current')
if mibBuilder.loadTexts: transientManualWorkingSwitchedtoProtectionL2.setDescription('Working Traffic (ACT) switched from WKG facility to PROTN facility manually: sent by WKG.')
transientManualWorkingSwitchedBacktoWorkingL2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 1, 0, 111004)).setObjects(("ADVA-MIB", "entityIndex"), ("ADVA-MIB", "neEventLogTimeStamp"), ("ADVA-MIB", "neEventLogIdentityTranslation"))
if mibBuilder.loadTexts: transientManualWorkingSwitchedBacktoWorkingL2.setStatus('current')
if mibBuilder.loadTexts: transientManualWorkingSwitchedBacktoWorkingL2.setDescription('Working Traffic (ACT) switched back to WKG facility from PROTN facility manually: sent by PROTN.')
flowConditionSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 1), )
if mibBuilder.loadTexts: flowConditionSeverityTable.setStatus('current')
if mibBuilder.loadTexts: flowConditionSeverityTable.setDescription('This table contains a severity value for each defined standing condition reported by an entity in the NE.')
flowConditionSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 1, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "flowConditionSeverityType"))
if mibBuilder.loadTexts: flowConditionSeverityEntry.setStatus('current')
if mibBuilder.loadTexts: flowConditionSeverityEntry.setDescription("Each entry in the table represents the severity assigned to a condition.'")
flowConditionSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 1, 1, 1), FspR7L2StandingConditionTypes())
if mibBuilder.loadTexts: flowConditionSeverityType.setStatus('current')
if mibBuilder.loadTexts: flowConditionSeverityType.setDescription('This object identifies the type of alarm.')
flowConditionSeverityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 1, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowConditionSeverityValue.setStatus('current')
if mibBuilder.loadTexts: flowConditionSeverityValue.setDescription('This object identifies the severity assigned to this alarm.')
bridgeConditionSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 2), )
if mibBuilder.loadTexts: bridgeConditionSeverityTable.setStatus('current')
if mibBuilder.loadTexts: bridgeConditionSeverityTable.setDescription('This table contains a severity value for each defined standing condition reported by an entity on the NE in case of BRIDGE entities.')
bridgeConditionSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 2, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "bridgeEntityContainedIn"), (0, "FspR7-LAYER2-MIB", "bridgeEntitySvid"), (0, "FspR7-LAYER2-MIB", "bridgeConditionSeverityType"))
if mibBuilder.loadTexts: bridgeConditionSeverityEntry.setStatus('current')
if mibBuilder.loadTexts: bridgeConditionSeverityEntry.setDescription('Each entry in the table represents the severity assigned to a condition for BRIDGE entities.')
bridgeConditionSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 2, 1, 1), BridgeStandingConditionTypes())
if mibBuilder.loadTexts: bridgeConditionSeverityType.setStatus('current')
if mibBuilder.loadTexts: bridgeConditionSeverityType.setDescription('This object identifies the type of alarm.')
bridgeConditionSeverityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 2, 1, 2), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeConditionSeverityValue.setStatus('current')
if mibBuilder.loadTexts: bridgeConditionSeverityValue.setDescription('This object identifies the severity assigned to this alarm.')
flowCurrentConditionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 6), )
if mibBuilder.loadTexts: flowCurrentConditionTable.setStatus('current')
if mibBuilder.loadTexts: flowCurrentConditionTable.setDescription('')
flowCurrentConditionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 6, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"), (0, "FspR7-LAYER2-MIB", "flowCurrentConditionType"))
if mibBuilder.loadTexts: flowCurrentConditionEntry.setStatus('current')
if mibBuilder.loadTexts: flowCurrentConditionEntry.setDescription('')
flowCurrentConditionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 6, 1, 1), FspR7L2StandingConditionTypes())
if mibBuilder.loadTexts: flowCurrentConditionType.setStatus('current')
if mibBuilder.loadTexts: flowCurrentConditionType.setDescription('List of all interface conditions')
flowCurrentConditionSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 6, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCurrentConditionSeverity.setStatus('current')
if mibBuilder.loadTexts: flowCurrentConditionSeverity.setDescription('This object identifies the current severity of alarm.')
flowCurrentConditionAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 6, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCurrentConditionAffect.setStatus('current')
if mibBuilder.loadTexts: flowCurrentConditionAffect.setDescription('This object indicates the service impairment affect of the alarm.')
flowCurrentConditionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 6, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowCurrentConditionTimeStamp.setStatus('current')
if mibBuilder.loadTexts: flowCurrentConditionTimeStamp.setDescription('Timestamp')
bridgeCurrentConditionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 7), )
if mibBuilder.loadTexts: bridgeCurrentConditionTable.setStatus('current')
if mibBuilder.loadTexts: bridgeCurrentConditionTable.setDescription('This table contains all currently raised standing condition reported by an entity on the NE in case of BRIDGE entities.')
bridgeCurrentConditionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 7, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "bridgeEntityContainedIn"), (0, "FspR7-LAYER2-MIB", "bridgeEntitySvid"), (0, "FspR7-LAYER2-MIB", "bridgeCurrentConditionType"))
if mibBuilder.loadTexts: bridgeCurrentConditionEntry.setStatus('current')
if mibBuilder.loadTexts: bridgeCurrentConditionEntry.setDescription('Each entry in the table represents currently raised standing conditions for BRIDGE entities.')
bridgeCurrentConditionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 7, 1, 1), BridgeStandingConditionTypes())
if mibBuilder.loadTexts: bridgeCurrentConditionType.setStatus('current')
if mibBuilder.loadTexts: bridgeCurrentConditionType.setDescription('List of all interface conditions')
bridgeCurrentConditionSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 7, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCurrentConditionSeverity.setStatus('current')
if mibBuilder.loadTexts: bridgeCurrentConditionSeverity.setDescription('This object identifies the current severity of alarm.')
bridgeCurrentConditionAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 7, 1, 3), ServiceImpairment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCurrentConditionAffect.setStatus('current')
if mibBuilder.loadTexts: bridgeCurrentConditionAffect.setDescription('This object indicates the service impairment affect of the alarm.')
bridgeCurrentConditionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 17, 2, 7, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCurrentConditionTimeStamp.setStatus('current')
if mibBuilder.loadTexts: bridgeCurrentConditionTimeStamp.setDescription('Timestamp.')
flowProtectionToAssignEntityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 11), )
if mibBuilder.loadTexts: flowProtectionToAssignEntityTable.setStatus('current')
if mibBuilder.loadTexts: flowProtectionToAssignEntityTable.setDescription('')
flowProtectionToAssignEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 11, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: flowProtectionToAssignEntityEntry.setStatus('current')
if mibBuilder.loadTexts: flowProtectionToAssignEntityEntry.setDescription('')
flowProtectionToAssignEntityIndexAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 11, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionToAssignEntityIndexAid.setStatus('current')
if mibBuilder.loadTexts: flowProtectionToAssignEntityIndexAid.setDescription('Name')
flowProtectionToAssignEntityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 11, 1, 2), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionToAssignEntityClass.setStatus('current')
if mibBuilder.loadTexts: flowProtectionToAssignEntityClass.setDescription('See EntityClass')
flowProtectionToAssignEntityClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionToAssignEntityClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: flowProtectionToAssignEntityClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
flowProtectionAssignedEntityTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 12), )
if mibBuilder.loadTexts: flowProtectionAssignedEntityTable.setStatus('current')
if mibBuilder.loadTexts: flowProtectionAssignedEntityTable.setDescription('')
flowProtectionAssignedEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 12, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: flowProtectionAssignedEntityEntry.setStatus('current')
if mibBuilder.loadTexts: flowProtectionAssignedEntityEntry.setDescription('')
flowProtectionAssignedEntityIndexAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 12, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionAssignedEntityIndexAid.setStatus('current')
if mibBuilder.loadTexts: flowProtectionAssignedEntityIndexAid.setDescription('Name')
flowProtectionAssignedEntityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 12, 1, 2), EntityClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionAssignedEntityClass.setStatus('current')
if mibBuilder.loadTexts: flowProtectionAssignedEntityClass.setDescription('See EntityClass')
flowProtectionAssignedEntityClassInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionAssignedEntityClassInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: flowProtectionAssignedEntityClassInstanceNumber.setDescription('The class instance number of this entity within the module(card)')
flowProtectionProvisionTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 13), )
if mibBuilder.loadTexts: flowProtectionProvisionTable.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionTable.setDescription('')
flowProtectionProvisionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 13, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: flowProtectionProvisionEntry.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionEntry.setDescription('')
flowProtectionProvisionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 13, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flowProtectionProvisionRowStatus.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionRowStatus.setDescription('This object is used to create, or delete a row in this table.')
flowProtectionProvisionWorkingEthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 13, 1, 2), EntityIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flowProtectionProvisionWorkingEthIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionWorkingEthIndex.setDescription('The entityIndex (ETH part) of the working section in the APS group.')
flowProtectionProvisionWorkingFlwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 13, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flowProtectionProvisionWorkingFlwIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionWorkingFlwIndex.setDescription('The entityIndex (FLW part) of the working section in the APS group.')
flowProtectionProvisionProtectionEthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 13, 1, 4), EntityIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flowProtectionProvisionProtectionEthIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionProtectionEthIndex.setDescription('The entityIndex (ETH part) of the protection section in the APS group.')
flowProtectionProvisionProtectionFlwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 13, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flowProtectionProvisionProtectionFlwIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionProtectionFlwIndex.setDescription('The entityIndex (FLW part) of the protection section in the APS group.')
flowProtectionProvisionProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 13, 1, 6), ProtectionMech()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flowProtectionProvisionProtectionMech.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionProtectionMech.setDescription('Port Based refers to HST Cards and Switches: Card Based refers to additional equipment protection')
flowProtectionProvisionRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 13, 1, 7), ApsRevertMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flowProtectionProvisionRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionRevertiveMode.setDescription('Revertive Protection Switching')
flowProtectionProvisionBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 13, 1, 8), FspR7L2Brigde()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flowProtectionProvisionBridge.setStatus('obsolete')
if mibBuilder.loadTexts: flowProtectionProvisionBridge.setDescription('To select between diffenrent protection types')
flowProtectionProvisionLevelDomainMonitored = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 13, 1, 9), FspR7L2LevelDomainMonitored()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flowProtectionProvisionLevelDomainMonitored.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionLevelDomainMonitored.setDescription('Maintenance Domain Level monitored')
flowProtectionProvisionBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 13, 1, 10), FspR7Brigde()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flowProtectionProvisionBridgeType.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionBridgeType.setDescription('To select between diffenrent protection types')
flowProtectionProvisionCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 14), )
if mibBuilder.loadTexts: flowProtectionProvisionCapTable.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionCapTable.setDescription('')
flowProtectionProvisionCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 14, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: flowProtectionProvisionCapEntry.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionCapEntry.setDescription('')
flowProtectionProvisionCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 14, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionCapRowStatus.setDescription('This object is used to create, or delete a row in this table.')
flowProtectionProvisionCapWorkingEthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionCapWorkingEthIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionCapWorkingEthIndex.setDescription('The entityIndex (ETH part) of the working section in the APS group.')
flowProtectionProvisionCapWorkingFlwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 14, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionCapWorkingFlwIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionCapWorkingFlwIndex.setDescription('The entityIndex (FLW part) of the working section in the APS group.')
flowProtectionProvisionCapProtectionEthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionCapProtectionEthIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionCapProtectionEthIndex.setDescription('The entityIndex (ETH part) of the protection section in the APS group.')
flowProtectionProvisionCapProtectionFlwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 14, 1, 5), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionCapProtectionFlwIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionCapProtectionFlwIndex.setDescription('The entityIndex (FLW part) of the protection section in the APS group.')
flowProtectionProvisionCapProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 14, 1, 6), ProtectionMechCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionCapProtectionMech.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionCapProtectionMech.setDescription('Port Based refers to HST Cards and Switches: Card Based refers to additional equipment protection')
flowProtectionProvisionCapRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 14, 1, 7), ApsRevertModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionCapRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionCapRevertiveMode.setDescription('Revertive Protection Switching')
flowProtectionProvisionCapBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 14, 1, 8), FspR7L2BrigdeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionCapBridge.setStatus('obsolete')
if mibBuilder.loadTexts: flowProtectionProvisionCapBridge.setDescription('To select between diffenrent protection types')
flowProtectionProvisionCapLevelDomainMonitored = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 14, 1, 9), FspR7L2LevelDomainMonitoredCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionCapLevelDomainMonitored.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionCapLevelDomainMonitored.setDescription('Maintenance Domain Level monitored')
flowProtectionProvisionCapBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 14, 1, 10), FspR7BrigdeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionCapBridgeType.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionCapBridgeType.setDescription('To select between diffenrent protection types')
flowProtectionProvisionDefaultsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 15), )
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsTable.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsTable.setDescription('')
flowProtectionProvisionDefaultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 15, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsEntry.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsEntry.setDescription('')
flowProtectionProvisionDefaultsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 15, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsRowStatus.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsRowStatus.setDescription('This object is used to create, or delete a row in this table.')
flowProtectionProvisionDefaultsWorkingEthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 15, 1, 2), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsWorkingEthIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsWorkingEthIndex.setDescription('The entityIndex (ETH part) of the working section in the APS group.')
flowProtectionProvisionDefaultsWorkingFlwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 15, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsWorkingFlwIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsWorkingFlwIndex.setDescription('The entityIndex (FLW part) of the working section in the APS group.')
flowProtectionProvisionDefaultsProtectionEthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 15, 1, 4), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsProtectionEthIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsProtectionEthIndex.setDescription('The entityIndex (ETH part) of the protection section in the APS group.')
flowProtectionProvisionDefaultsProtectionFlwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 15, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsProtectionFlwIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsProtectionFlwIndex.setDescription('The entityIndex (FLW part) of the protection section in the APS group.')
flowProtectionProvisionDefaultsProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 15, 1, 6), ProtectionMech()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsProtectionMech.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsProtectionMech.setDescription('Port Based refers to HST Cards and Switches: Card Based refers to additional equipment protection')
flowProtectionProvisionDefaultsRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 15, 1, 7), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsRevertiveMode.setDescription('Revertive Protection Switching')
flowProtectionProvisionDefaultsBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 15, 1, 8), FspR7L2Brigde()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsBridge.setStatus('obsolete')
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsBridge.setDescription('To select between diffenrent protection types')
flowProtectionProvisionDefaultsLevelDomainMonitored = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 15, 1, 9), FspR7L2LevelDomainMonitored()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsLevelDomainMonitored.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsLevelDomainMonitored.setDescription('Maintenance Domain Level monitored')
flowProtectionProvisionDefaultsBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 15, 1, 10), FspR7Brigde()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsBridgeType.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionDefaultsBridgeType.setDescription('To select between diffenrent protection types')
flowProtectionProvisionProtectionAidCapsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 16), )
if mibBuilder.loadTexts: flowProtectionProvisionProtectionAidCapsTable.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionProtectionAidCapsTable.setDescription('')
flowProtectionProvisionProtectionAidCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 16, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: flowProtectionProvisionProtectionAidCapsEntry.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionProtectionAidCapsEntry.setDescription('')
flowProtectionProvisionProtectionAidCapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 16, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionProvisionProtectionAidCapsIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionProvisionProtectionAidCapsIndex.setDescription('Protection AID (ETH part)')
flowProtectionStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 23), )
if mibBuilder.loadTexts: flowProtectionStatusTable.setStatus('current')
if mibBuilder.loadTexts: flowProtectionStatusTable.setDescription('')
flowProtectionStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 23, 1), ).setIndexNames((0, "FspR7-LAYER2-MIB", "flowEntityIndexEth"), (0, "FspR7-LAYER2-MIB", "flowEntityIndexFlow"))
if mibBuilder.loadTexts: flowProtectionStatusEntry.setStatus('current')
if mibBuilder.loadTexts: flowProtectionStatusEntry.setDescription('')
flowProtectionStatusWorkingEthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 23, 1, 1), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionStatusWorkingEthIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionStatusWorkingEthIndex.setDescription('The entityIndex (ETH part) of the working section in the APS group.')
flowProtectionStatusWorkingFlwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 23, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionStatusWorkingFlwIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionStatusWorkingFlwIndex.setDescription('The entityIndex (FLW part) of the working section in the APS group.')
flowProtectionStatusProtectionEthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 23, 1, 3), EntityIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionStatusProtectionEthIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionStatusProtectionEthIndex.setDescription('The entityIndex (ETH part) of the protection section in the APS group.')
flowProtectionStatusProtectionFlwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 23, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionStatusProtectionFlwIndex.setStatus('current')
if mibBuilder.loadTexts: flowProtectionStatusProtectionFlwIndex.setDescription('The entityIndex (FLW part) of the protection section in the APS group.')
flowProtectionStatusApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 23, 1, 5), ApsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionStatusApsType.setStatus('current')
if mibBuilder.loadTexts: flowProtectionStatusApsType.setDescription('Type of Automatic Protection Switching; triggered by standing conditions')
flowProtectionStatusProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 23, 1, 6), FspR7ProtectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionStatusProtectionType.setStatus('current')
if mibBuilder.loadTexts: flowProtectionStatusProtectionType.setDescription('This describes the topology and level of the protection (OCH or\n         OM -Level on a ring; Line in PT-PT and Line or Dualhomed on a Feeder).')
flowProtectionStatusProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 23, 1, 7), ProtectionMech()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionStatusProtectionMech.setStatus('current')
if mibBuilder.loadTexts: flowProtectionStatusProtectionMech.setDescription('Port Based refers to HST Cards and Switches: Card Based refers to additional equipment protection')
flowProtectionStatusDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 23, 1, 8), ApsDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionStatusDirection.setStatus('current')
if mibBuilder.loadTexts: flowProtectionStatusDirection.setDescription('Bi-Directional | Unidirectional setup used in protection setup: Not to be used by others')
flowProtectionStatusRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 23, 1, 9), ApsRevertMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionStatusRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: flowProtectionStatusRevertiveMode.setDescription('Revertive Protection Switching')
flowProtectionStatusBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 23, 1, 10), FspR7L2Brigde()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionStatusBridge.setStatus('obsolete')
if mibBuilder.loadTexts: flowProtectionStatusBridge.setDescription('To select between diffenrent protection types')
flowProtectionStatusLevelDomainMonitored = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 23, 1, 11), FspR7L2LevelDomainMonitored()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionStatusLevelDomainMonitored.setStatus('current')
if mibBuilder.loadTexts: flowProtectionStatusLevelDomainMonitored.setDescription('Maintenance Domain Level monitored')
flowProtectionStatusBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 3, 18, 23, 1, 12), FspR7L2Brigde()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowProtectionStatusBridgeType.setStatus('current')
if mibBuilder.loadTexts: flowProtectionStatusBridgeType.setDescription('To select between diffenrent protection types')
mibBuilder.exportSymbols("FspR7-LAYER2-MIB", crossConnectionsProvisioningIndexFlowTo=crossConnectionsProvisioningIndexFlowTo, flowEntityProvisionAlias=flowEntityProvisionAlias, bridgeEntityConfigEntry=bridgeEntityConfigEntry, bridgeConditionSeverityEntry=bridgeConditionSeverityEntry, intervalQueOnBridgeEntity1dayNumber=intervalQueOnBridgeEntity1dayNumber, flowEntityProvisionShape=flowEntityProvisionShape, currentFlowEntityRx1dayElapsedTime=currentFlowEntityRx1dayElapsedTime, crossConnectionsProvisioningIndexFlowFrom=crossConnectionsProvisioningIndexFlowFrom, queOnPortEntityStatusTable=queOnPortEntityStatusTable, policerOnFlowEntityStatusEntry=policerOnFlowEntityStatusEntry, crossConnectionsStatusTable=crossConnectionsStatusTable, flowProtectionProvisionDefaultsProtectionFlwIndex=flowProtectionProvisionDefaultsProtectionFlwIndex, currentQueOnBridgeEntity15minElapsedTime=currentQueOnBridgeEntity15minElapsedTime, intervalFlowEntityRx15minValidFlag=intervalFlowEntityRx15minValidFlag, queOnBridgeEntityConfigEntry=queOnBridgeEntityConfigEntry, currentQueOnPortEntity15minEntry=currentQueOnPortEntity15minEntry, queOnBridgeEntityStatusAlias=queOnBridgeEntityStatusAlias, ctransEntityProvisionCvidInternalCapTable=ctransEntityProvisionCvidInternalCapTable, flowProtectionProvisionProtectionAidCapsIndex=flowProtectionProvisionProtectionAidCapsIndex, intervalQueOnPortEntity1dayTable=intervalQueOnPortEntity1dayTable, intervalQueOnBridgeEntity15minTimeStamp=intervalQueOnBridgeEntity15minTimeStamp, queOnFlowEntityEntry=queOnFlowEntityEntry, ctransEntityDeletion=ctransEntityDeletion, bridgeCurrentConditionTimeStamp=bridgeCurrentConditionTimeStamp, crossConnectionsPointsToFlow=crossConnectionsPointsToFlow, flowEntityConfigPopCtagRcvCapStringCap=flowEntityConfigPopCtagRcvCapStringCap, flowEntityConfigCapTable=flowEntityConfigCapTable, bridgeEntityProvisionEntry=bridgeEntityProvisionEntry, queOnBridgeConfiguration=queOnBridgeConfiguration, flowEntityProvisionPushPvidTrmt=flowEntityProvisionPushPvidTrmt, flowEntityProvisionCbsRcvCapCbsRcv=flowEntityProvisionCbsRcvCapCbsRcv, layer2EntityStateChange=layer2EntityStateChange, flowEntityProvisionDefaultsExternalVid=flowEntityProvisionDefaultsExternalVid, alarmSwitchtoWorkingInhibitedL2=alarmSwitchtoWorkingInhibitedL2, ffpFlowEntityDeletion=ffpFlowEntityDeletion, flowEntityConfigPopCtagRcvCapTable=flowEntityConfigPopCtagRcvCapTable, flowEntityStatusTable=flowEntityStatusTable, policerOnFlowEntityStatusSecondaryStates=policerOnFlowEntityStatusSecondaryStates, flowEntityConfigPushTrmtCapStringCap=flowEntityConfigPushTrmtCapStringCap, currentFlowEntityRx1dayTable=currentFlowEntityRx1dayTable, flowEntityProvisionRegisterCapEntry=flowEntityProvisionRegisterCapEntry, layer2CrossConnections=layer2CrossConnections, bridgeEntityProvisionCapAdminState=bridgeEntityProvisionCapAdminState, alarmOosAinsL2=alarmOosAinsL2, currentpolicerOnFlowEntity1dayBytesMarkedRed=currentpolicerOnFlowEntity1dayBytesMarkedRed, flowEntityConfigCapDataLayerPmReset=flowEntityConfigCapDataLayerPmReset, queOnFlowEntityClass=queOnFlowEntityClass, intervalQueOnBridgeEntity15minEntry=intervalQueOnBridgeEntity15minEntry, flowEntityProvisionDefaultsPolice=flowEntityProvisionDefaultsPolice, intervalFlowEntityTx1dayTimeStamp=intervalFlowEntityTx1dayTimeStamp, queOnBridgeEntityClass=queOnBridgeEntityClass, queOnPortEntityStatusOper=queOnPortEntityStatusOper, flowEntityConfigPushTrmtCapEntry=flowEntityConfigPushTrmtCapEntry, ctransEntityProvisionTable=ctransEntityProvisionTable, flowEntityProvisionCapEntry=flowEntityProvisionCapEntry, policerOnFlowEntityClassInstanceNumber=policerOnFlowEntityClassInstanceNumber, flowProtectionProvisionCapRevertiveMode=flowProtectionProvisionCapRevertiveMode, ctransEntityProvisionCapRowStatus=ctransEntityProvisionCapRowStatus, flowEntityProvisionPopCtagTrmtCapIndexCap=flowEntityProvisionPopCtagTrmtCapIndexCap, bridgeEntityClass=bridgeEntityClass, intervalQueOnBridgeEntity1dayTable=intervalQueOnBridgeEntity1dayTable, flowEntityConfigRegisterCapTable=flowEntityConfigRegisterCapTable, FspR7L2FlowTypeCaps=FspR7L2FlowTypeCaps, flowProtectionProvisionCapProtectionMech=flowProtectionProvisionCapProtectionMech, flowProtectionProvisionTable=flowProtectionProvisionTable, crossConnectionsProvisioningCapCrsType=crossConnectionsProvisioningCapCrsType, flowProtectionProvisionCapBridge=flowProtectionProvisionCapBridge, queOnPortEntityEntry=queOnPortEntityEntry, policerOnFlowEntityStatusTable=policerOnFlowEntityStatusTable, flowEntityConfigPolice=flowEntityConfigPolice, bridgeEntityConfigCapCbsTrmt=bridgeEntityConfigCapCbsTrmt, flowEntityStatusConnectionState=flowEntityStatusConnectionState, ctransEntityProvisionCapCvidInternal=ctransEntityProvisionCapCvidInternal, queOnBridgeEntityConfigCapEntry=queOnBridgeEntityConfigCapEntry, alarmOosManagementL2=alarmOosManagementL2, currentQueOnPortEntity15minFramesDroppedBufOverflow=currentQueOnPortEntity15minFramesDroppedBufOverflow, bridgeEntityProvisionDefaultsShapeState=bridgeEntityProvisionDefaultsShapeState, currentFlowEntityTx15minElapsedTime=currentFlowEntityTx15minElapsedTime, flowProtectionToAssignEntityEntry=flowProtectionToAssignEntityEntry, flowEntityDeletion=flowEntityDeletion, flowEntityProvisionDefaultsShape=flowEntityProvisionDefaultsShape, intervalFlowEntityRx15minEntry=intervalFlowEntityRx15minEntry, queOnBridgeEntityClassInstanceNumber=queOnBridgeEntityClassInstanceNumber, currentpolicerOnFlowEntity1dayFramesMarkedGreen=currentpolicerOnFlowEntity1dayFramesMarkedGreen, bridgeEntityProvisionCapCirTrmt=bridgeEntityProvisionCapCirTrmt, crossConnectionsConfigTable=crossConnectionsConfigTable, intervalFlowEntityRx1dayValidFlag=intervalFlowEntityRx1dayValidFlag, layer2FlowProtection=layer2FlowProtection, layer2MIB=layer2MIB, queOnFlowEntityStatusAdmin=queOnFlowEntityStatusAdmin, flowProtectionProvisionCapProtectionEthIndex=flowProtectionProvisionCapProtectionEthIndex, queOnBridgeEntityStatusCbsTrmt=queOnBridgeEntityStatusCbsTrmt, bridgeEntityConfigTable=bridgeEntityConfigTable, flowEntityIndexAid=flowEntityIndexAid, bridgeEntityObjectChange=bridgeEntityObjectChange, currentQueOnBridgeEntity15minTable=currentQueOnBridgeEntity15minTable, crossConnectionsProvisioningConn=crossConnectionsProvisioningConn, bridgeEntityFlowIndex=bridgeEntityFlowIndex, flowProtectionProvisionDefaultsTable=flowProtectionProvisionDefaultsTable, intervalFlowEntityTx15minTable=intervalFlowEntityTx15minTable, queOnBridgeEntityConfigDataLayerPmReset=queOnBridgeEntityConfigDataLayerPmReset, intervalQueOnPortEntity1dayValidFlag=intervalQueOnPortEntity1dayValidFlag, alarmSwitchtoProtectionInhibitedL2=alarmSwitchtoProtectionInhibitedL2, queOnBridgeEntityTable=queOnBridgeEntityTable, queOnBridgeEntityIndex=queOnBridgeEntityIndex, alarmSfCfmLevel4L2=alarmSfCfmLevel4L2, currentpolicerOnFlowEntity15minFramesMarkedGreen=currentpolicerOnFlowEntity15minFramesMarkedGreen, flowEntityProvisionPopCtagTrmt=flowEntityProvisionPopCtagTrmt, bridgeToAssignEntityEntry=bridgeToAssignEntityEntry, queOnPortEntityTable=queOnPortEntityTable, queOnPortEntityStatusAdmin=queOnPortEntityStatusAdmin, bridgeEntityConfigCapAlias=bridgeEntityConfigCapAlias, crossConnectionsStatusToEth=crossConnectionsStatusToEth, intervalQueOnFlowEntity1dayTable=intervalQueOnFlowEntity1dayTable, bridgeEntityDeletion=bridgeEntityDeletion, currentQueOnFlowEntity15minFramesDroppedBufOverflow=currentQueOnFlowEntity15minFramesDroppedBufOverflow, currentQueOnBridgeEntity1dayFramesDroppedBufOverflow=currentQueOnBridgeEntity1dayFramesDroppedBufOverflow, intervalQueOnPortEntity15minBytesDroppedBufOverflow=intervalQueOnPortEntity15minBytesDroppedBufOverflow, flowEntityProvisionRowStatus=flowEntityProvisionRowStatus, intervalQueOnPortEntity1dayNumber=intervalQueOnPortEntity1dayNumber, crossConnectionsPointsFromEntry=crossConnectionsPointsFromEntry, flowProtectionProvisionDefaultsProtectionMech=flowProtectionProvisionDefaultsProtectionMech, flowEntityProvisionPopCtagTrmtCapTable=flowEntityProvisionPopCtagTrmtCapTable, intervalFlowEntityTx1dayValidFlag=intervalFlowEntityTx1dayValidFlag, intervalQueOnBridgeEntity1dayTimeStamp=intervalQueOnBridgeEntity1dayTimeStamp, flowEntityStatusEntry=flowEntityStatusEntry, flowEntityConfigShape=flowEntityConfigShape, crossConnectionsStatusCrsFunction=crossConnectionsStatusCrsFunction, flowProtectionProvisionCapRowStatus=flowProtectionProvisionCapRowStatus, flowCurrentConditionSeverity=flowCurrentConditionSeverity, crossConnectionsStatusFromEth=crossConnectionsStatusFromEth, flowEntityProvisionCbsRcvCapEntry=flowEntityProvisionCbsRcvCapEntry, bridgeEntityConfigAdminState=bridgeEntityConfigAdminState, ctransEntityStatusEntry=ctransEntityStatusEntry, currentQueOnBridgeEntity15minFramesDroppedBufOverflow=currentQueOnBridgeEntity15minFramesDroppedBufOverflow, intervalFlowEntityTx15minValidFlag=intervalFlowEntityTx15minValidFlag, alarmSfCfmLevel0L2=alarmSfCfmLevel0L2, currentQueOnFlowEntity1dayTable=currentQueOnFlowEntity1dayTable, ctransEntityIndexCVlanId=ctransEntityIndexCVlanId, currentQueOnFlowEntity1dayBytesDroppedBufOverflow=currentQueOnFlowEntity1dayBytesDroppedBufOverflow, bridgeConfiguration=bridgeConfiguration, intervalFlowEntityRx1dayNumber=intervalFlowEntityRx1dayNumber, flowEntityProvisionType=flowEntityProvisionType, ctransEntityStatusCvidInternal=ctransEntityStatusCvidInternal, intervalQueOnFlowEntity1dayNumber=intervalQueOnFlowEntity1dayNumber, bridgeEntityProvisionShapeState=bridgeEntityProvisionShapeState, flowProtectionProvisionDefaultsRevertiveMode=flowProtectionProvisionDefaultsRevertiveMode, queOnBridgeEntityStatusAdminState=queOnBridgeEntityStatusAdminState, intervalpolicerOnFlowEntity1dayFramesMarkedGreen=intervalpolicerOnFlowEntity1dayFramesMarkedGreen, flowConditionSeverityEntry=flowConditionSeverityEntry, flowEntityClassInstanceNumber=flowEntityClassInstanceNumber, crossConnectionsProvisioningCapAlias=crossConnectionsProvisioningCapAlias, bridgeStatus=bridgeStatus, policerOnFlowEntityStatusAlias=policerOnFlowEntityStatusAlias, BridgeStandingConditionTypes=BridgeStandingConditionTypes, flowEntityProvisionDefaultsTunnelAid=flowEntityProvisionDefaultsTunnelAid, flowEntityProvisionDefaultsPrioPvidTrmt=flowEntityProvisionDefaultsPrioPvidTrmt, currentpolicerOnFlowEntity15minBytesMarkedGreen=currentpolicerOnFlowEntity15minBytesMarkedGreen, queOnPortEntityIndexEth=queOnPortEntityIndexEth, intervalQueOnPortEntity1dayEntry=intervalQueOnPortEntity1dayEntry, policerPerformanceMonitoring=policerPerformanceMonitoring, flowEntityProvisionCapPushPvidTrmt=flowEntityProvisionCapPushPvidTrmt, flowEntityProvisionDefaultsAdmin=flowEntityProvisionDefaultsAdmin, flowEntityConfigPopCtagRcv=flowEntityConfigPopCtagRcv, bridgeEntityProvisionCapPmMode=bridgeEntityProvisionCapPmMode, ctransEntityIndexEth=ctransEntityIndexEth, ctransEntityProvisionCvidInternal=ctransEntityProvisionCvidInternal, bridgeEntityConfigCapCirTrmt=bridgeEntityConfigCapCirTrmt, currentQueOnFlowEntity15minEntry=currentQueOnFlowEntity15minEntry, intervalQueOnBridgeEntity1dayBytesDroppedBufOverflow=intervalQueOnBridgeEntity1dayBytesDroppedBufOverflow, ctransEntityProvisionCvidInternalCapIndexCap=ctransEntityProvisionCvidInternalCapIndexCap, flowProtectionProvisionProtectionEthIndex=flowProtectionProvisionProtectionEthIndex, queOnBridgeEntityEntry=queOnBridgeEntityEntry, flowEntityProvisionDefaultsPmMode=flowEntityProvisionDefaultsPmMode, flowEntityProvisionDefaultsEntry=flowEntityProvisionDefaultsEntry, flowEntityConfigPmMode=flowEntityConfigPmMode, bridgeEntityConfigCapShapeState=bridgeEntityConfigCapShapeState, bridgeEntityTable=bridgeEntityTable, flowEntityProvisionDefaultEvcCos=flowEntityProvisionDefaultEvcCos, queOnFlowEntityStatusType=queOnFlowEntityStatusType, currentFlowEntityRx15minTable=currentFlowEntityRx15minTable, ctransEntityStatusTable=ctransEntityStatusTable, crossConnectionsProvisioningDefaultsCrsType=crossConnectionsProvisioningDefaultsCrsType, bridgeEntityProvisionDefaultsCirTrmt=bridgeEntityProvisionDefaultsCirTrmt, queOnFlowEntityStatusOper=queOnFlowEntityStatusOper, bridgeEntityProvisionFacilityType=bridgeEntityProvisionFacilityType, flowProtectionStatusLevelDomainMonitored=flowProtectionStatusLevelDomainMonitored, intervalQueOnBridgeEntity1dayFramesDroppedBufOverflow=intervalQueOnBridgeEntity1dayFramesDroppedBufOverflow, flowEntityConfigExternalVidCapEntry=flowEntityConfigExternalVidCapEntry, bridgeEntitySvid=bridgeEntitySvid, flowEntityProvisionCbsRcvCapTable=flowEntityProvisionCbsRcvCapTable, FspR7L2PmMode=FspR7L2PmMode, bridgeEntityConfigCbsTrmt=bridgeEntityConfigCbsTrmt, bridgeEntityFlowEntry=bridgeEntityFlowEntry, FspR7RedLinedStateCaps=FspR7RedLinedStateCaps, intervalQueOnFlowEntity1dayTimeStamp=intervalQueOnFlowEntity1dayTimeStamp, currentFlowEntityRx15minUnicastFramesPerEvcRcv=currentFlowEntityRx15minUnicastFramesPerEvcRcv, transientManualWorkingSwitchedtoProtectionL2=transientManualWorkingSwitchedtoProtectionL2, queOnPortEntityIndexPrio=queOnPortEntityIndexPrio, flowEntityConfigCapEntry=flowEntityConfigCapEntry, bridgeEntityConfigCirTrmt=bridgeEntityConfigCirTrmt, flowProtectionProvisionProtectionAidCapsTable=flowProtectionProvisionProtectionAidCapsTable, crossConnectionsProvisioningDefaultsAlias=crossConnectionsProvisioningDefaultsAlias, currentFlowEntityTx1dayTable=currentFlowEntityTx1dayTable, FspR7L2PmModeCaps=FspR7L2PmModeCaps, flowEntityProvisionPrioPvidTrmt=flowEntityProvisionPrioPvidTrmt, currentQueOnBridgeEntity1dayBytesDroppedBufOverflow=currentQueOnBridgeEntity1dayBytesDroppedBufOverflow, flowProtectionAssignedEntityClass=flowProtectionAssignedEntityClass, ctransEntityStatusType=ctransEntityStatusType, currentpolicerOnFlowEntity1dayBytesMarkedGreen=currentpolicerOnFlowEntity1dayBytesMarkedGreen, queOnBridgeEntityStatusCirTrmt=queOnBridgeEntityStatusCirTrmt, crossConnectionsProvisioningCrsType=crossConnectionsProvisioningCrsType, layer2ConfigurationMIB=layer2ConfigurationMIB, flowEntityConfigCapInhibitSwitchToProt=flowEntityConfigCapInhibitSwitchToProt, flowEntityConfigExternalVidCapStringCap=flowEntityConfigExternalVidCapStringCap, currentFlowEntityTx15minTable=currentFlowEntityTx15minTable, ctransEntityProvisionCapEntry=ctransEntityProvisionCapEntry, crossConnectionsProvisioningRowStatus=crossConnectionsProvisioningRowStatus, flowProtectionToAssignEntityTable=flowProtectionToAssignEntityTable, crossConnectionsProvisioningDefaultsIndexFlowFrom=crossConnectionsProvisioningDefaultsIndexFlowFrom, queOnFlowEntityIndexAid=queOnFlowEntityIndexAid, flowEntityStatusIngressNodeIp=flowEntityStatusIngressNodeIp, alarmSfCfmLevel3L2=alarmSfCfmLevel3L2, intervalpolicerOnFlowEntity15minNumber=intervalpolicerOnFlowEntity15minNumber, bridgeEntityProvisionPmMode=bridgeEntityProvisionPmMode, currentFlowEntityTx1dayMcBcFramesPerEvcTrmt=currentFlowEntityTx1dayMcBcFramesPerEvcTrmt, intervalpolicerOnFlowEntity15minFramesMarkedGreen=intervalpolicerOnFlowEntity15minFramesMarkedGreen, flowEntityProvisionCapCvidRegisteredInFlow=flowEntityProvisionCapCvidRegisteredInFlow, flowProtectionStatusBridge=flowProtectionStatusBridge, ctransEntityProvisionDefaultsCvidInternal=ctransEntityProvisionDefaultsCvidInternal, flowProtectionProvisionDefaultsBridgeType=flowProtectionProvisionDefaultsBridgeType, ctransStatus=ctransStatus, queOnFlowEntityStatusCbsTrmt=queOnFlowEntityStatusCbsTrmt, flowProtectionProvisionProtectionFlwIndex=flowProtectionProvisionProtectionFlwIndex, crossConnectionsProvisioningCapIndexEthTo=crossConnectionsProvisioningCapIndexEthTo, flowEntityProvisionExternalVidCapStringCap=flowEntityProvisionExternalVidCapStringCap, flowProtectionProvisionCapWorkingEthIndex=flowProtectionProvisionCapWorkingEthIndex, flowEntityConfigInhibitSwitchToProt=flowEntityConfigInhibitSwitchToProt, bridgeEntityProvisionDefaultsFacilityType=bridgeEntityProvisionDefaultsFacilityType, intervalFlowEntityRx15minTable=intervalFlowEntityRx15minTable, flowEntityConfigSwitchCommand=flowEntityConfigSwitchCommand, flowEntityConfigExternalVid=flowEntityConfigExternalVid, intervalQueOnBridgeEntity15minBytesDroppedBufOverflow=intervalQueOnBridgeEntity15minBytesDroppedBufOverflow, queStatus=queStatus, flowEntityProvisionPushTrmtCapTable=flowEntityProvisionPushTrmtCapTable, flowEntityStatusValidSignalTimer=flowEntityStatusValidSignalTimer, bridgeEntityStatusEntry=bridgeEntityStatusEntry, currentQueOnFlowEntity1dayEntry=currentQueOnFlowEntity1dayEntry, flowProtectionToAssignEntityClassInstanceNumber=flowProtectionToAssignEntityClassInstanceNumber, bridgeEntityContainedIn=bridgeEntityContainedIn, currentQueOnFlowEntity15minBytesDroppedBufOverflow=currentQueOnFlowEntity15minBytesDroppedBufOverflow, intervalpolicerOnFlowEntity15minBytesMarkedRed=intervalpolicerOnFlowEntity15minBytesMarkedRed, bridgeEntityProvisionRowStatus=bridgeEntityProvisionRowStatus, flowEntityProvisionPopCtagRcvCapTable=flowEntityProvisionPopCtagRcvCapTable)
mibBuilder.exportSymbols("FspR7-LAYER2-MIB", intervalpolicerOnFlowEntity1dayFramesMarkedRed=intervalpolicerOnFlowEntity1dayFramesMarkedRed, flowEntityConfigPopCtagTrmt=flowEntityConfigPopCtagTrmt, bridgeEntityConfigCapAdminState=bridgeEntityConfigCapAdminState, intervalQueOnPortEntity15minEntry=intervalQueOnPortEntity15minEntry, flowEntityCreation=flowEntityCreation, ctransEntityProvisionEntry=ctransEntityProvisionEntry, currentFlowEntityRx15minMcBcFramesPerEvcRcv=currentFlowEntityRx15minMcBcFramesPerEvcRcv, currentFlowEntityTx1dayUnicastFramesPerEvcTrmt=currentFlowEntityTx1dayUnicastFramesPerEvcTrmt, ctransEntityObjectChange=ctransEntityObjectChange, intervalFlowEntityRx1dayMcBcFramesPerEvcRcv=intervalFlowEntityRx1dayMcBcFramesPerEvcRcv, policerOnFlowEntityTable=policerOnFlowEntityTable, flowEntityProvisionCapTable=flowEntityProvisionCapTable, ctransEntityProvisionRowStatus=ctransEntityProvisionRowStatus, crossConnectionsProvisioningDefaultsTable=crossConnectionsProvisioningDefaultsTable, queOnPortEntityStatusCirTrmt=queOnPortEntityStatusCirTrmt, flowEntityConfigCapExternalVid=flowEntityConfigCapExternalVid, queOnBridgeEntityStatusTable=queOnBridgeEntityStatusTable, queOnBridgeEntityStatusEntry=queOnBridgeEntityStatusEntry, crossConnectionsProvisioningType=crossConnectionsProvisioningType, crossConnectionsProvisioningIndexEthFrom=crossConnectionsProvisioningIndexEthFrom, queOnFlowEntityClassInstanceNumber=queOnFlowEntityClassInstanceNumber, queOnBridgeEntityPrio=queOnBridgeEntityPrio, intervalFlowEntityTx1dayMcBcFramesPerEvcTrmt=intervalFlowEntityTx1dayMcBcFramesPerEvcTrmt, flowEntityConfigExternalVidCapTable=flowEntityConfigExternalVidCapTable, crossConnectionsProvisioningDefaultsIndexFlowTo=crossConnectionsProvisioningDefaultsIndexFlowTo, flowEntityConfigCapPolice=flowEntityConfigCapPolice, ctransEntityProvisionDefaultsTable=ctransEntityProvisionDefaultsTable, flowEntityConfigPopCtagTrmtCapEntry=flowEntityConfigPopCtagTrmtCapEntry, transientWorkingSwitchedBacktoWorkingL2=transientWorkingSwitchedBacktoWorkingL2, policerOnFlowEntityIndexFlow=policerOnFlowEntityIndexFlow, queOnPortEntityClass=queOnPortEntityClass, flowEntityStatusOper=flowEntityStatusOper, crossConnectionsProvisioningCapEntry=crossConnectionsProvisioningCapEntry, currentQueOnFlowEntity1dayElapsedTime=currentQueOnFlowEntity1dayElapsedTime, flowEntityConfigRegisterCapEntry=flowEntityConfigRegisterCapEntry, crossConnectionsProvisioningEntry=crossConnectionsProvisioningEntry, policerStatus=policerStatus, bridgeEntityConfigCapPmMode=bridgeEntityConfigCapPmMode, bridgeCurrentConditionEntry=bridgeCurrentConditionEntry, crossConnectionsProvisioningCapConn=crossConnectionsProvisioningCapConn, flowEntityConfigPopCtagTrmtCapStringCap=flowEntityConfigPopCtagTrmtCapStringCap, flowEntityProvisionCbsRcvCapIndexCap=flowEntityProvisionCbsRcvCapIndexCap, flowProtectionProvisionDefaultsRowStatus=flowProtectionProvisionDefaultsRowStatus, intervalQueOnFlowEntity15minBytesDroppedBufOverflow=intervalQueOnFlowEntity15minBytesDroppedBufOverflow, policerOnFlowEntityEntry=policerOnFlowEntityEntry, flowConditionSeverityValue=flowConditionSeverityValue, queOnBridgeEntityConfigCapDataLayerPmReset=queOnBridgeEntityConfigCapDataLayerPmReset, intervalQueOnFlowEntity1dayEntry=intervalQueOnFlowEntity1dayEntry, currentQueOnPortEntity1dayElapsedTime=currentQueOnPortEntity1dayElapsedTime, bridgeEntityEntry=bridgeEntityEntry, flowEntityProvisionCapPolice=flowEntityProvisionCapPolice, crossConnectionsProvisioningCapIndexEthFrom=crossConnectionsProvisioningCapIndexEthFrom, bridgeConditionSeverityTable=bridgeConditionSeverityTable, currentQueOnPortEntity1dayTable=currentQueOnPortEntity1dayTable, currentQueOnPortEntity1dayFramesDroppedBufOverflow=currentQueOnPortEntity1dayFramesDroppedBufOverflow, policerOnFlowEntityIndexEth=policerOnFlowEntityIndexEth, intervalQueOnBridgeEntity1dayEntry=intervalQueOnBridgeEntity1dayEntry, bridgeEntityProvisionCbsTrmt=bridgeEntityProvisionCbsTrmt, flowEntityProvisionTunnelAid=flowEntityProvisionTunnelAid, intervalQueOnPortEntity1dayBytesDroppedBufOverflow=intervalQueOnPortEntity1dayBytesDroppedBufOverflow, flowEntityConfigRegisterCapStringCap=flowEntityConfigRegisterCapStringCap, crossConnectionsProvisioningDefaultsRowStatus=crossConnectionsProvisioningDefaultsRowStatus, quePerformanceMonitoring=quePerformanceMonitoring, flowProtectionProvisionDefaultsLevelDomainMonitored=flowProtectionProvisionDefaultsLevelDomainMonitored, bridgeCurrentConditionType=bridgeCurrentConditionType, flowEntityConfigPopCtagTrmtCapTable=flowEntityConfigPopCtagTrmtCapTable, flowEntityProvisionRegisterCapTable=flowEntityProvisionRegisterCapTable, crossConnectionsProvisioningCapIndexFlowFrom=crossConnectionsProvisioningCapIndexFlowFrom, flowEntityProvisionDefaultsCirTrmt=flowEntityProvisionDefaultsCirTrmt, flowEntityProvisionExternalVidCapTable=flowEntityProvisionExternalVidCapTable, flowEntityConfigInhibitSwitchToWork=flowEntityConfigInhibitSwitchToWork, bridgeEntityConfigPmMode=bridgeEntityConfigPmMode, crossConnectionsProvisioningCapType=crossConnectionsProvisioningCapType, flowCurrentConditionTimeStamp=flowCurrentConditionTimeStamp, queOnFlowEntityStatusCirTrmt=queOnFlowEntityStatusCirTrmt, bridgeEntityProvisionTable=bridgeEntityProvisionTable, flowEntityProvisionAdmin=flowEntityProvisionAdmin, flowEntityConfigCbsTrmt=flowEntityConfigCbsTrmt, flowProtectionProvisionProtectionAidCapsEntry=flowProtectionProvisionProtectionAidCapsEntry, intervalQueOnPortEntity1dayFramesDroppedBufOverflow=intervalQueOnPortEntity1dayFramesDroppedBufOverflow, flowEntityProvisionCbsRcv=flowEntityProvisionCbsRcv, queOnPortEntityStatusType=queOnPortEntityStatusType, flowEntityEntry=flowEntityEntry, queOnBridgeEntityStatusFacilityType=queOnBridgeEntityStatusFacilityType, intervalFlowEntityTx15minUnicastFramesPerEvcTrmt=intervalFlowEntityTx15minUnicastFramesPerEvcTrmt, ctransEntityStatusRange=ctransEntityStatusRange, flowEntityProvisionTable=flowEntityProvisionTable, flowEntityProvisionDefaultsPushPvidTrmt=flowEntityProvisionDefaultsPushPvidTrmt, ctransEntityProvisionCvidInternalCapStringCap=ctransEntityProvisionCvidInternalCapStringCap, flowEntityProvisionPopCtagTrmtCapEntry=flowEntityProvisionPopCtagTrmtCapEntry, currentQueOnBridgeEntity15minEntry=currentQueOnBridgeEntity15minEntry, flowEntityProvisionDefaultsRedLineState=flowEntityProvisionDefaultsRedLineState, intervalpolicerOnFlowEntity15minBytesMarkedGreen=intervalpolicerOnFlowEntity15minBytesMarkedGreen, intervalpolicerOnFlowEntity15minFramesMarkedRed=intervalpolicerOnFlowEntity15minFramesMarkedRed, policerOnFlowEntityIndexAid=policerOnFlowEntityIndexAid, ctransEntityProvisionType=ctransEntityProvisionType, queOnFlowEntityStatusAlias=queOnFlowEntityStatusAlias, flowEntityConfigAdmin=flowEntityConfigAdmin, queOnFlowEntityStatusTable=queOnFlowEntityStatusTable, intervalQueOnPortEntity15minTimeStamp=intervalQueOnPortEntity15minTimeStamp, flowProtectionAssignedEntityTable=flowProtectionAssignedEntityTable, currentFlowEntityTx15minEntry=currentFlowEntityTx15minEntry, flowEntityProvisionCapShape=flowEntityProvisionCapShape, crossConnectionsConfigEntry=crossConnectionsConfigEntry, bridgeEntityProvisionAlias=bridgeEntityProvisionAlias, bridgeEntityConfigAlias=bridgeEntityConfigAlias, intervalFlowEntityRx15minMcBcFramesPerEvcRcv=intervalFlowEntityRx15minMcBcFramesPerEvcRcv, flowEntityClass=flowEntityClass, queOnPortEntityStatusCbsTrmt=queOnPortEntityStatusCbsTrmt, bridgeEntityIndexAid=bridgeEntityIndexAid, flowEntityConfigTable=flowEntityConfigTable, currentQueOnPortEntity15minElapsedTime=currentQueOnPortEntity15minElapsedTime, flowProtectionStatusProtectionType=flowProtectionStatusProtectionType, crossConnectionsProvisioningCapIndexFlowTo=crossConnectionsProvisioningCapIndexFlowTo, flowProtectionAssignedEntityClassInstanceNumber=flowProtectionAssignedEntityClassInstanceNumber, intervalFlowEntityRx15minNumber=intervalFlowEntityRx15minNumber, queOnPortEntityClassInstanceNumber=queOnPortEntityClassInstanceNumber, crossConnectionsPointsToTable=crossConnectionsPointsToTable, flowProtectionStatusRevertiveMode=flowProtectionStatusRevertiveMode, flowEntityProvisionDefaultsDefaultEvcCos=flowEntityProvisionDefaultsDefaultEvcCos, queOnBridgeEntityConfigTable=queOnBridgeEntityConfigTable, flowEntityProvisionRegisterCapStringCap=flowEntityProvisionRegisterCapStringCap, currentFlowEntityTx15minMcBcFramesPerEvcTrmt=currentFlowEntityTx15minMcBcFramesPerEvcTrmt, flowProtectionProvisionCapWorkingFlwIndex=flowProtectionProvisionCapWorkingFlwIndex, flowProtectionProvisionDefaultsBridge=flowProtectionProvisionDefaultsBridge, flowProtectionStatusProtectionMech=flowProtectionStatusProtectionMech, flowEntityProvisionCapExternalVid=flowEntityProvisionCapExternalVid, alarmOosMaintenanceL2=alarmOosMaintenanceL2, bridgeEntityProvisionCirTrmt=bridgeEntityProvisionCirTrmt, flowEntityConfigCapDefaultEvcCos=flowEntityConfigCapDefaultEvcCos, bridgeEntityFlowId=bridgeEntityFlowId, alarmBridgeOosAins=alarmBridgeOosAins, intervalpolicerOnFlowEntity1dayValidFlag=intervalpolicerOnFlowEntity1dayValidFlag, ctransProvisioning=ctransProvisioning, flowEntityTable=flowEntityTable, flowEntityIndexEth=flowEntityIndexEth, currentFlowEntityRx1dayMcBcFramesPerEvcRcv=currentFlowEntityRx1dayMcBcFramesPerEvcRcv, intervalFlowEntityRx15minTimeStamp=intervalFlowEntityRx15minTimeStamp, flowEntityProvisionPopCtagRcvCapIndexCap=flowEntityProvisionPopCtagRcvCapIndexCap, intervalQueOnFlowEntity15minFramesDroppedBufOverflow=intervalQueOnFlowEntity15minFramesDroppedBufOverflow, flowEntityProvisionPmMode=flowEntityProvisionPmMode, flowEntityConfigCapAdmin=flowEntityConfigCapAdmin, flowCurrentConditionTable=flowCurrentConditionTable, flowEntityConfigCbsRcvCapEntry=flowEntityConfigCbsRcvCapEntry, currentpolicerOnFlowEntity1dayTable=currentpolicerOnFlowEntity1dayTable, flowEntityStatusProtectionRole=flowEntityStatusProtectionRole, queOnFlowEntityIndexFlow=queOnFlowEntityIndexFlow, flowEntityConfigDataLayerPmReset=flowEntityConfigDataLayerPmReset, layer2Traps=layer2Traps, crossConnectionsProvisioningIndexEthTo=crossConnectionsProvisioningIndexEthTo, flowProtectionStatusProtectionFlwIndex=flowProtectionStatusProtectionFlwIndex, flowEntityProvisionCapRedLineState=flowEntityProvisionCapRedLineState, flowProtectionProvisionRevertiveMode=flowProtectionProvisionRevertiveMode, flowEntityProvisionPopCtagRcv=flowEntityProvisionPopCtagRcv, bridgeConditionSeverityType=bridgeConditionSeverityType, queOnBridgeEntitySvid=queOnBridgeEntitySvid, currentpolicerOnFlowEntity15minElapsedTime=currentpolicerOnFlowEntity15minElapsedTime, currentQueOnBridgeEntity15minBytesDroppedBufOverflow=currentQueOnBridgeEntity15minBytesDroppedBufOverflow, currentQueOnFlowEntity1dayFramesDroppedBufOverflow=currentQueOnFlowEntity1dayFramesDroppedBufOverflow, flowEntityConfigCapInhibitSwitchToWork=flowEntityConfigCapInhibitSwitchToWork, FspR7L2StandingConditionTypes=FspR7L2StandingConditionTypes, intervalQueOnPortEntity15minTable=intervalQueOnPortEntity15minTable, flowConfiguration=flowConfiguration, crossConnectionsProvisioningAlias=crossConnectionsProvisioningAlias, bridgeEntityProvisionDefaultsAdminState=bridgeEntityProvisionDefaultsAdminState, intervalQueOnFlowEntity1dayValidFlag=intervalQueOnFlowEntity1dayValidFlag, flowProtectionProvisionWorkingEthIndex=flowProtectionProvisionWorkingEthIndex, currentpolicerOnFlowEntity1dayElapsedTime=currentpolicerOnFlowEntity1dayElapsedTime, flowEntityProvisionPopCtagTrmtCapStringCap=flowEntityProvisionPopCtagTrmtCapStringCap, flowEntityProvisionPushTrmtCapEntry=flowEntityProvisionPushTrmtCapEntry, bridgeToAssignEntityTable=bridgeToAssignEntityTable, bridgeEntityProvisionDefaultsTable=bridgeEntityProvisionDefaultsTable, currentpolicerOnFlowEntity1dayEntry=currentpolicerOnFlowEntity1dayEntry, crossConnectionObjectChangeLayer2=crossConnectionObjectChangeLayer2, flowConditionSeverityType=flowConditionSeverityType, bridgeEntityProvisionCapRowStatus=bridgeEntityProvisionCapRowStatus, FspR7BrigdeCaps=FspR7BrigdeCaps, flowEntityProvisionDefaultsType=flowEntityProvisionDefaultsType, flowProtectionProvisionCapEntry=flowProtectionProvisionCapEntry, flowEntityConfigAlias=flowEntityConfigAlias, flowEntityProvisionCirRcv=flowEntityProvisionCirRcv, intervalFlowEntityTx1dayTable=intervalFlowEntityTx1dayTable, flowEntityProvisionDefaultsPopCtagTrmt=flowEntityProvisionDefaultsPopCtagTrmt, flowEntityProvisionPushTrmtCapIndexCap=flowEntityProvisionPushTrmtCapIndexCap, currentpolicerOnFlowEntity15minEntry=currentpolicerOnFlowEntity15minEntry, crossConnectionsStatusType=crossConnectionsStatusType, flowEntityProvisionDefaultsPopCtagRcv=flowEntityProvisionDefaultsPopCtagRcv, flowEntityConfigCapSwitchCommand=flowEntityConfigCapSwitchCommand, flowProtectionProvisionCapBridgeType=flowProtectionProvisionCapBridgeType, bridgeEntityClassInstanceNumber=bridgeEntityClassInstanceNumber, flowStatus=flowStatus, flowEntityConfigRedLineState=flowEntityConfigRedLineState, flowEntityConfigCapPushTrmt=flowEntityConfigCapPushTrmt, queOnBridgeEntityStatusSecondaryStates=queOnBridgeEntityStatusSecondaryStates, intervalFlowEntityRx1dayUnicastFramesPerEvcRcv=intervalFlowEntityRx1dayUnicastFramesPerEvcRcv, intervalFlowEntityRx1dayTimeStamp=intervalFlowEntityRx1dayTimeStamp, bridgeEntityCreation=bridgeEntityCreation, ctransEntityEntry=ctransEntityEntry, crossConnectionsPointsFromTable=crossConnectionsPointsFromTable, crossConnectionsStatusCrsType=crossConnectionsStatusCrsType, alarmSfCfmLevel1L2=alarmSfCfmLevel1L2, flowProtectionStatusProtectionEthIndex=flowProtectionStatusProtectionEthIndex, flowProvisioning=flowProvisioning, queOnFlowEntityStatusSecondaryStates=queOnFlowEntityStatusSecondaryStates, flowEntityStatusSecondaryStates=flowEntityStatusSecondaryStates, bridgeEntityFlowTable=bridgeEntityFlowTable, alarmPriVidNotEqualExtVidL2=alarmPriVidNotEqualExtVidL2, bridgeEntityProvisionDefaultsPmMode=bridgeEntityProvisionDefaultsPmMode, bridgeProvisioning=bridgeProvisioning, policerOnFlowEntityClass=policerOnFlowEntityClass, flowEntityConfigEntry=flowEntityConfigEntry, currentFlowEntityTx1dayElapsedTime=currentFlowEntityTx1dayElapsedTime, flowCurrentConditionType=flowCurrentConditionType, bridgeCurrentConditionTable=bridgeCurrentConditionTable, flowEntityProvisionExternalVidCapIndexCap=flowEntityProvisionExternalVidCapIndexCap, alarmSfCfmLevel5L2=alarmSfCfmLevel5L2, layer2Alarms=layer2Alarms, currentpolicerOnFlowEntity15minTable=currentpolicerOnFlowEntity15minTable, crossConnectionsProvisioningTable=crossConnectionsProvisioningTable, ctransEntityCreation=ctransEntityCreation, flowEntityIndexFlow=flowEntityIndexFlow, flowEntityProvisionRedLineState=flowEntityProvisionRedLineState, flowCurrentConditionEntry=flowCurrentConditionEntry, flowProtectionProvisionEntry=flowProtectionProvisionEntry, flowProtectionStatusTable=flowProtectionStatusTable, intervalFlowEntityRx1dayEntry=intervalFlowEntityRx1dayEntry, currentQueOnFlowEntity15minElapsedTime=currentQueOnFlowEntity15minElapsedTime, intervalQueOnFlowEntity1dayBytesDroppedBufOverflow=intervalQueOnFlowEntity1dayBytesDroppedBufOverflow, bridgeCurrentConditionAffect=bridgeCurrentConditionAffect, flowEntityProvisionDefaultsCbsTrmt=flowEntityProvisionDefaultsCbsTrmt, flowEntityProvisionCvidRegisteredInFlow=flowEntityProvisionCvidRegisteredInFlow, bridgeEntityProvisionCapTable=bridgeEntityProvisionCapTable, flowCurrentConditionAffect=flowCurrentConditionAffect, flowEntityProvisionCapCbsTrmt=flowEntityProvisionCapCbsTrmt, policerOnFlowEntityStatusType=policerOnFlowEntityStatusType, FspR7L2LevelDomainMonitored=FspR7L2LevelDomainMonitored, FspR7RedLinedState=FspR7RedLinedState, flowEntityProvisionDefaultsCirRcv=flowEntityProvisionDefaultsCirRcv, ctransEntityProvisionCvidInternalCapEntry=ctransEntityProvisionCvidInternalCapEntry, alarmBridgeOosManagement=alarmBridgeOosManagement, flowProtectionProvisionBridgeType=flowProtectionProvisionBridgeType, crossConnectionsProvisioningDefaultsEntry=crossConnectionsProvisioningDefaultsEntry, layer2StatusMIB=layer2StatusMIB, flowEntityProvisionCapType=flowEntityProvisionCapType, queOnBridgeEntityConfigCapTable=queOnBridgeEntityConfigCapTable, intervalQueOnBridgeEntity1dayValidFlag=intervalQueOnBridgeEntity1dayValidFlag, flowEntityProvisionCapCirTrmt=flowEntityProvisionCapCirTrmt, policerOnFlowEntityStatusCbsRcv=policerOnFlowEntityStatusCbsRcv, flowEntityObjectChange=flowEntityObjectChange, flowEntityConfigCapShape=flowEntityConfigCapShape, flowEntityConfigCvidRegisteredInFlow=flowEntityConfigCvidRegisteredInFlow, currentQueOnPortEntity1dayBytesDroppedBufOverflow=currentQueOnPortEntity1dayBytesDroppedBufOverflow, QueueEntityIndex=QueueEntityIndex, flowEntityProvisionPushTrmtCapStringCap=flowEntityProvisionPushTrmtCapStringCap)
mibBuilder.exportSymbols("FspR7-LAYER2-MIB", intervalpolicerOnFlowEntity1dayNumber=intervalpolicerOnFlowEntity1dayNumber, flowEntityConfigDefaultEvcCos=flowEntityConfigDefaultEvcCos, bridgeEntityProvisionCapShapeState=bridgeEntityProvisionCapShapeState, bridgeEntityConfigCapEntry=bridgeEntityConfigCapEntry, flowConditionSeverityTable=flowConditionSeverityTable, ctransEntityProvisionCapType=ctransEntityProvisionCapType, currentQueOnBridgeEntity1dayTable=currentQueOnBridgeEntity1dayTable, currentQueOnBridgeEntity1dayEntry=currentQueOnBridgeEntity1dayEntry, ffpFlowEntityCreation=ffpFlowEntityCreation, flowProtectionProvisionDefaultsWorkingFlwIndex=flowProtectionProvisionDefaultsWorkingFlwIndex, ctransEntityProvisionCapTable=ctransEntityProvisionCapTable, crossConnectionsPointsToEntry=crossConnectionsPointsToEntry, bridgeEntityProvisionAdminState=bridgeEntityProvisionAdminState, layer2EntitiesMIB=layer2EntitiesMIB, flowProtectionAssignedEntityIndexAid=flowProtectionAssignedEntityIndexAid, intervalFlowEntityTx1dayUnicastFramesPerEvcTrmt=intervalFlowEntityTx1dayUnicastFramesPerEvcTrmt, alarmSfCfmLevel2L2=alarmSfCfmLevel2L2, flowEntityProvisionExternalVidCapEntry=flowEntityProvisionExternalVidCapEntry, intervalQueOnFlowEntity15minTable=intervalQueOnFlowEntity15minTable, flowEntityProvisionPopCtagRcvCapStringCap=flowEntityProvisionPopCtagRcvCapStringCap, intervalQueOnFlowEntity15minTimeStamp=intervalQueOnFlowEntity15minTimeStamp, alarmServerSignalFailL2=alarmServerSignalFailL2, intervalpolicerOnFlowEntity1dayBytesMarkedGreen=intervalpolicerOnFlowEntity1dayBytesMarkedGreen, flowProtectionStatusWorkingFlwIndex=flowProtectionStatusWorkingFlwIndex, ctransEntityProvisionDefaultsEntry=ctransEntityProvisionDefaultsEntry, flowEntityProvisionDefaultsAlias=flowEntityProvisionDefaultsAlias, flowEntityConfigCapRedLineState=flowEntityConfigCapRedLineState, intervalpolicerOnFlowEntity1dayBytesMarkedRed=intervalpolicerOnFlowEntity1dayBytesMarkedRed, FspR7L2LevelDomainMonitoredCaps=FspR7L2LevelDomainMonitoredCaps, ctransEntityTable=ctransEntityTable, FspR7Brigde=FspR7Brigde, FspR7L2FlowType=FspR7L2FlowType, bridgeEntityConfigCapTable=bridgeEntityConfigCapTable, flowProtectionProvisionWorkingFlwIndex=flowProtectionProvisionWorkingFlwIndex, flowEntityConfigCapCvidRegisteredInFlow=flowEntityConfigCapCvidRegisteredInFlow, flowEntityProvisionPolice=flowEntityProvisionPolice, queOnFlowEntityIndexPrio=queOnFlowEntityIndexPrio, flowEntityConfigPopCtagRcvCapEntry=flowEntityConfigPopCtagRcvCapEntry, intervalQueOnBridgeEntity15minNumber=intervalQueOnBridgeEntity15minNumber, queOnPortEntityIndexAid=queOnPortEntityIndexAid, currentQueOnPortEntity1dayEntry=currentQueOnPortEntity1dayEntry, intervalFlowEntityRx15minUnicastFramesPerEvcRcv=intervalFlowEntityRx15minUnicastFramesPerEvcRcv, intervalFlowEntityTx15minTimeStamp=intervalFlowEntityTx15minTimeStamp, currentFlowEntityRx1dayUnicastFramesPerEvcRcv=currentFlowEntityRx1dayUnicastFramesPerEvcRcv, crossConnectionDeletionLayer2=crossConnectionDeletionLayer2, crossConnectionsProvisioningDefaultsType=crossConnectionsProvisioningDefaultsType, crossConnectionsPointsFromFlow=crossConnectionsPointsFromFlow, flowProtectionStatusEntry=flowProtectionStatusEntry, flowEntityConfigCapPopCtagTrmt=flowEntityConfigCapPopCtagTrmt, transientWorkingSwitchedtoProtectionL2=transientWorkingSwitchedtoProtectionL2, crossConnectionsStatusConn=crossConnectionsStatusConn, bridgeToAssignEntityIndexAid=bridgeToAssignEntityIndexAid, currentFlowEntityRx15minEntry=currentFlowEntityRx15minEntry, queOnPortEntityStatusEntry=queOnPortEntityStatusEntry, flowEntityConfigCbsRcv=flowEntityConfigCbsRcv, flowEntityStatusInternalSvid=flowEntityStatusInternalSvid, flowEntityProvisionCapAdmin=flowEntityProvisionCapAdmin, flowProtectionProvisionProtectionMech=flowProtectionProvisionProtectionMech, flowEntityProvisionCapRowStatus=flowEntityProvisionCapRowStatus, intervalFlowEntityRx1dayTable=intervalFlowEntityRx1dayTable, bridgeEntityProvisionDefaultsRowStatus=bridgeEntityProvisionDefaultsRowStatus, flowEntityStatusType=flowEntityStatusType, bridgeEntityStatusFacilityType=bridgeEntityStatusFacilityType, currentpolicerOnFlowEntity15minFramesMarkedRed=currentpolicerOnFlowEntity15minFramesMarkedRed, intervalpolicerOnFlowEntity1dayEntry=intervalpolicerOnFlowEntity1dayEntry, flowEntityProvisionCapAlias=flowEntityProvisionCapAlias, flowProtectionProvisionRowStatus=flowProtectionProvisionRowStatus, flowProtectionToAssignEntityClass=flowProtectionToAssignEntityClass, queOnFlowEntityTable=queOnFlowEntityTable, currentQueOnPortEntity15minBytesDroppedBufOverflow=currentQueOnPortEntity15minBytesDroppedBufOverflow, intervalQueOnPortEntity1dayTimeStamp=intervalQueOnPortEntity1dayTimeStamp, crossConnectionsProvisioningCapRowStatus=crossConnectionsProvisioningCapRowStatus, FspR7L2BrigdeCaps=FspR7L2BrigdeCaps, queOnBridgeEntityIndexAid=queOnBridgeEntityIndexAid, transientManualWorkingSwitchedBacktoWorkingL2=transientManualWorkingSwitchedBacktoWorkingL2, bridgeCurrentConditionSeverity=bridgeCurrentConditionSeverity, ctransEntityProvisionDefaultsRowStatus=ctransEntityProvisionDefaultsRowStatus, intervalQueOnFlowEntity15minEntry=intervalQueOnFlowEntity15minEntry, currentQueOnPortEntity15minTable=currentQueOnPortEntity15minTable, bridgeEntityProvisionCapAlias=bridgeEntityProvisionCapAlias, intervalQueOnFlowEntity1dayFramesDroppedBufOverflow=intervalQueOnFlowEntity1dayFramesDroppedBufOverflow, intervalQueOnPortEntity15minFramesDroppedBufOverflow=intervalQueOnPortEntity15minFramesDroppedBufOverflow, flowEntityProvisionCapPmMode=flowEntityProvisionCapPmMode, layer2PerformanceMonitoring=layer2PerformanceMonitoring, flowEntityConfigCirRcv=flowEntityConfigCirRcv, flowProtectionProvisionDefaultsEntry=flowProtectionProvisionDefaultsEntry, flowEntityProvisionDefaultsCbsRcv=flowEntityProvisionDefaultsCbsRcv, flowEntityProvisionEntry=flowEntityProvisionEntry, BridgeEntityIndex=BridgeEntityIndex, bridgeEntityConfigShapeState=bridgeEntityConfigShapeState, crossConnectionsProvisioningDefaultsIndexEthTo=crossConnectionsProvisioningDefaultsIndexEthTo, intervalFlowEntityTx15minMcBcFramesPerEvcTrmt=intervalFlowEntityTx15minMcBcFramesPerEvcTrmt, flowEntityProvisionPopCtagRcvCapEntry=flowEntityProvisionPopCtagRcvCapEntry, flowEntityConfigPrioPvidTrmt=flowEntityConfigPrioPvidTrmt, flowEntityConfigCapCbsRcv=flowEntityConfigCapCbsRcv, flowProtectionProvisionCapLevelDomainMonitored=flowProtectionProvisionCapLevelDomainMonitored, flowProtectionStatusDirection=flowProtectionStatusDirection, bridgeEntityProvisionDefaultsCbsTrmt=bridgeEntityProvisionDefaultsCbsTrmt, intervalFlowEntityTx1dayEntry=intervalFlowEntityTx1dayEntry, ctransEntityClassInstanceNumber=ctransEntityClassInstanceNumber, alarmSfCfmLevel6L2=alarmSfCfmLevel6L2, bridgeEntityProvisionDefaultsEntry=bridgeEntityProvisionDefaultsEntry, flowProtectionAssignedEntityEntry=flowProtectionAssignedEntityEntry, crossConnectionsProvisioningDefaultsIndexEthFrom=crossConnectionsProvisioningDefaultsIndexEthFrom, queOnBridgeEntityStatusShapeState=queOnBridgeEntityStatusShapeState, bridgeEntityStatusTable=bridgeEntityStatusTable, flowEntityProvisionCapPopCtagRcv=flowEntityProvisionCapPopCtagRcv, flowEntityConfigCapPmMode=flowEntityConfigCapPmMode, flowEntityStatusIngressTid=flowEntityStatusIngressTid, flowProtectionProvisionBridge=flowProtectionProvisionBridge, currentFlowEntityRx1dayEntry=currentFlowEntityRx1dayEntry, crossConnectionCreationLayer2=crossConnectionCreationLayer2, intervalFlowEntityTx15minNumber=intervalFlowEntityTx15minNumber, intervalpolicerOnFlowEntity15minTable=intervalpolicerOnFlowEntity15minTable, flowEntityProvisionExternalVid=flowEntityProvisionExternalVid, flowEntityProvisionDefaultsRowStatus=flowEntityProvisionDefaultsRowStatus, layer2ProvisioningMIB=layer2ProvisioningMIB, bridgeEntityProvisionCapCbsTrmt=bridgeEntityProvisionCapCbsTrmt, flowProtectionToAssignEntityIndexAid=flowProtectionToAssignEntityIndexAid, bridgeEntityProvisionDefaultsAlias=bridgeEntityProvisionDefaultsAlias, currentQueOnBridgeEntity1dayElapsedTime=currentQueOnBridgeEntity1dayElapsedTime, PYSNMP_MODULE_ID=layer2MIB, flowEntityConfigTunnelAid=flowEntityConfigTunnelAid, ctransEntityClass=ctransEntityClass, queOnFlowEntityIndexEth=queOnFlowEntityIndexEth, crossConnectionsConfigAlias=crossConnectionsConfigAlias, ctransEntityProvisionDefaultsType=ctransEntityProvisionDefaultsType, ctransEntityIndexAid=ctransEntityIndexAid, flowPerformanceMonitoring=flowPerformanceMonitoring, ctransEntityProvisionCapRange=ctransEntityProvisionCapRange, flowProtectionStatusWorkingEthIndex=flowProtectionStatusWorkingEthIndex, crossConnectionsStatusEntry=crossConnectionsStatusEntry, queOnPortEntityStatusAlias=queOnPortEntityStatusAlias, flowEntityConfigCbsRcvCapCbsRcv=flowEntityConfigCbsRcvCapCbsRcv, ctransEntityProvisionRange=ctransEntityProvisionRange, intervalFlowEntityTx1dayNumber=intervalFlowEntityTx1dayNumber, currentpolicerOnFlowEntity1dayFramesMarkedRed=currentpolicerOnFlowEntity1dayFramesMarkedRed, ffpFlowEntityObjectChange=ffpFlowEntityObjectChange, ctransEntityProvisionDefaultsRange=ctransEntityProvisionDefaultsRange, flowProtectionProvisionCapProtectionFlwIndex=flowProtectionProvisionCapProtectionFlwIndex, intervalpolicerOnFlowEntity15minValidFlag=intervalpolicerOnFlowEntity15minValidFlag, intervalQueOnBridgeEntity15minTable=intervalQueOnBridgeEntity15minTable, bridgeConditionSeverityValue=bridgeConditionSeverityValue, intervalQueOnBridgeEntity15minFramesDroppedBufOverflow=intervalQueOnBridgeEntity15minFramesDroppedBufOverflow, intervalQueOnPortEntity15minNumber=intervalQueOnPortEntity15minNumber, flowEntityProvisionRegisterCapIndexCap=flowEntityProvisionRegisterCapIndexCap, layer2Conditions=layer2Conditions, flowProtectionProvisionCapTable=flowProtectionProvisionCapTable, policerOnFlowEntityStatusOper=policerOnFlowEntityStatusOper, currentQueOnFlowEntity15minTable=currentQueOnFlowEntity15minTable, intervalQueOnPortEntity15minValidFlag=intervalQueOnPortEntity15minValidFlag, intervalpolicerOnFlowEntity15minEntry=intervalpolicerOnFlowEntity15minEntry, flowEntityProvisionCapPopCtagTrmt=flowEntityProvisionCapPopCtagTrmt, alarmOosDisabledL2=alarmOosDisabledL2, intervalpolicerOnFlowEntity15minTimeStamp=intervalpolicerOnFlowEntity15minTimeStamp, alarmMepNotPresentL2=alarmMepNotPresentL2, flowEntityProvisionCapPrioPvidTrmt=flowEntityProvisionCapPrioPvidTrmt, flowEntityConfigPushPvidTrmt=flowEntityConfigPushPvidTrmt, flowEntityProvisionDefaultsCvidRegisteredInFlow=flowEntityProvisionDefaultsCvidRegisteredInFlow, flowEntityProvisionCirTrmt=flowEntityProvisionCirTrmt, FspR7DisableEnableCaps=FspR7DisableEnableCaps, flowEntityConfigCirTrmt=flowEntityConfigCirTrmt, flowProtectionStatusApsType=flowProtectionStatusApsType, queOnFlowEntityStatusEntry=queOnFlowEntityStatusEntry, queOnBridgeEntityStatusPmMode=queOnBridgeEntityStatusPmMode, policerOnFlowEntityStatusCirRcv=policerOnFlowEntityStatusCirRcv, flowEntityProvisionCapCbsRcv=flowEntityProvisionCapCbsRcv, currentFlowEntityRx15minElapsedTime=currentFlowEntityRx15minElapsedTime, currentFlowEntityTx15minUnicastFramesPerEvcTrmt=currentFlowEntityTx15minUnicastFramesPerEvcTrmt, queOnBridgeEntityStatusOper=queOnBridgeEntityStatusOper, intervalQueOnFlowEntity15minValidFlag=intervalQueOnFlowEntity15minValidFlag, alarmManswL2=alarmManswL2, intervalpolicerOnFlowEntity1dayTable=intervalpolicerOnFlowEntity1dayTable, flowEntityProvisionCapTunnelAid=flowEntityProvisionCapTunnelAid, flowProtectionProvisionLevelDomainMonitored=flowProtectionProvisionLevelDomainMonitored, policerOnFlowEntityStatusAdmin=policerOnFlowEntityStatusAdmin, flowEntityConfigCbsRcvCapTable=flowEntityConfigCbsRcvCapTable, flowEntityConfigCapPopCtagRcv=flowEntityConfigCapPopCtagRcv, flowProtectionProvisionDefaultsProtectionEthIndex=flowProtectionProvisionDefaultsProtectionEthIndex, queOnBridgeEntityStatusFunction=queOnBridgeEntityStatusFunction, layer2TrapsPrefix=layer2TrapsPrefix, queOnPortEntityStatusSecondaryStates=queOnPortEntityStatusSecondaryStates, crossConnectionsProvisioningDefaultsConn=crossConnectionsProvisioningDefaultsConn, flowEntityConfigPushTrmtCapTable=flowEntityConfigPushTrmtCapTable, currentFlowEntityTx1dayEntry=currentFlowEntityTx1dayEntry, intervalQueOnBridgeEntity15minValidFlag=intervalQueOnBridgeEntity15minValidFlag, FspR7L2Brigde=FspR7L2Brigde, bridgeEntityProvisionCapEntry=bridgeEntityProvisionCapEntry, alarmSfCfmLevel7L2=alarmSfCfmLevel7L2, currentpolicerOnFlowEntity15minBytesMarkedRed=currentpolicerOnFlowEntity15minBytesMarkedRed, flowEntityProvisionCapCirRcv=flowEntityProvisionCapCirRcv, crossConnectionsProvisioningCapTable=crossConnectionsProvisioningCapTable, bridgeEntityProvisionCapFacilityType=bridgeEntityProvisionCapFacilityType, flowEntityProvisionCapDefaultEvcCos=flowEntityProvisionCapDefaultEvcCos, intervalpolicerOnFlowEntity1dayTimeStamp=intervalpolicerOnFlowEntity1dayTimeStamp, intervalFlowEntityTx15minEntry=intervalFlowEntityTx15minEntry, flowProtectionProvisionDefaultsWorkingEthIndex=flowProtectionProvisionDefaultsWorkingEthIndex, flowProtectionStatusBridgeType=flowProtectionStatusBridgeType, FspR7DisableEnable=FspR7DisableEnable, flowEntityProvisionDefaultsTable=flowEntityProvisionDefaultsTable, flowEntityProvisionCbsTrmt=flowEntityProvisionCbsTrmt, intervalQueOnFlowEntity15minNumber=intervalQueOnFlowEntity15minNumber, policerOnFlowEntityIndexPolicer=policerOnFlowEntityIndexPolicer)
