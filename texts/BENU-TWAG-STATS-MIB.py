#
# PySNMP MIB module BENU-TWAG-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/benuos/BENU-TWAG-STATS-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 12:32:18 2024
# On host fv-az658-333 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
benuWAG, = mibBuilder.importSymbols("BENU-WAG-MIB", "benuWAG")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, iso, Bits, Integer32, Counter32, NotificationType, Unsigned32, TimeTicks, IpAddress, Gauge32, MibIdentifier, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "Bits", "Integer32", "Counter32", "NotificationType", "Unsigned32", "TimeTicks", "IpAddress", "Gauge32", "MibIdentifier", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
benuTWagStatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7))
benuTWagStatsMIB.setRevisions(('2016-07-19 00:00', '2016-07-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: benuTWagStatsMIB.setRevisionsDescriptions(('Initial Version', 'Added counter bTWagPmip6DeletedDueToLmaInitBriMsg to indicate subs del by lma',))
if mibBuilder.loadTexts: benuTWagStatsMIB.setLastUpdated('201607270000Z')
if mibBuilder.loadTexts: benuTWagStatsMIB.setOrganization('Benu Networks,Inc')
if mibBuilder.loadTexts: benuTWagStatsMIB.setContactInfo('Benu Networks,Inc\n                          Corporate Headquarters\n                          300 Concord Road, Suite 110\n                          Billerica, MA 01821 USA\n                          Tel: +1 978-223-4700\n                          Fax: +1 978-362-1908\n                          Email: info@benunets.com')
if mibBuilder.loadTexts: benuTWagStatsMIB.setDescription('This MIB module defines statistics of\n                Benu Wireless Access Gateway.\n\n                Copyright (C)  2012 by Benu Networks, Inc.\n                All rights reserved.')
bTWagNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 0))
if mibBuilder.loadTexts: bTWagNotifications.setStatus('current')
if mibBuilder.loadTexts: bTWagNotifications.setDescription('TWAG notifications are defined in this branch.')
bTWagS2aSubscriberMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1))
if mibBuilder.loadTexts: bTWagS2aSubscriberMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubscriberMIBObjects.setDescription('TWAG S2a subscriber statistics are defined in this branch.')
bTWagS2aSubscriberNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 2))
if mibBuilder.loadTexts: bTWagS2aSubscriberNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubscriberNotifObjects.setDescription('Notifications of TWAG S2a subscriber statistics are defined in this branch.')
bTWagS2aStatsMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3))
if mibBuilder.loadTexts: bTWagS2aStatsMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aStatsMIBObjects.setDescription('TWAG s2a interface statistics are defined in this branch.')
bTWagS2aNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 4))
if mibBuilder.loadTexts: bTWagS2aNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aNotifObjects.setDescription('Notifications of TWAG s2a interface statistics are defined in this branch.')
bTWagGTPStatsMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 5))
if mibBuilder.loadTexts: bTWagGTPStatsMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bTWagGTPStatsMIBObjects.setDescription('TWAG GTP  statistics are defined in this branch.')
bTWagGTPNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 6))
if mibBuilder.loadTexts: bTWagGTPNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bTWagGTPNotifObjects.setDescription('Notifications of TWAG GTP statistics are defined in this branch.')
bTWagGnGpSubscriberMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7))
if mibBuilder.loadTexts: bTWagGnGpSubscriberMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubscriberMIBObjects.setDescription('TWAG GnGp subscriber statistics are defined in this branch.')
bTWagGnGpSubscriberNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 8))
if mibBuilder.loadTexts: bTWagGnGpSubscriberNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubscriberNotifObjects.setDescription('Notifications of TWAG GnGp subscriber statistics are defined in this branch.')
bTWagGnGpStatsMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9))
if mibBuilder.loadTexts: bTWagGnGpStatsMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpStatsMIBObjects.setDescription('TWAG GnGp interface statistics are defined in this branch.')
bTWagGnGpNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 10))
if mibBuilder.loadTexts: bTWagGnGpNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpNotifObjects.setDescription('Notifications of TWAG GnGp interface statistics are defined in this branch.')
bTWagPmip6MIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11))
if mibBuilder.loadTexts: bTWagPmip6MIBObjects.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6MIBObjects.setDescription('TWAG Pmip6 statistics are defined in this branch.')
bTWagGTPCurrentNumOfTunnels = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGTPCurrentNumOfTunnels.setStatus('current')
if mibBuilder.loadTexts: bTWagGTPCurrentNumOfTunnels.setDescription('The current number of GTP Tunnels.')
bTWagNumCurrentSecureSSIDS2aSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagNumCurrentSecureSSIDS2aSubscribers.setStatus('current')
if mibBuilder.loadTexts: bTWagNumCurrentSecureSSIDS2aSubscribers.setDescription('The current number of 802.1x subscribers.')
bTWagNumPreAuthenticatedS2aSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagNumPreAuthenticatedS2aSubscribers.setStatus('current')
if mibBuilder.loadTexts: bTWagNumPreAuthenticatedS2aSubscribers.setDescription('The total number of pre-authenticated subscribers.')
bTWagNumCurrentSecureSSIDGnGpSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagNumCurrentSecureSSIDGnGpSubscribers.setStatus('current')
if mibBuilder.loadTexts: bTWagNumCurrentSecureSSIDGnGpSubscribers.setDescription('The current number of 802.1x subscribers.')
bTWagNumPreAuthenticatedGnGpSubscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagNumPreAuthenticatedGnGpSubscribers.setStatus('current')
if mibBuilder.loadTexts: bTWagNumPreAuthenticatedGnGpSubscribers.setDescription('The total number of pre-authenticated subscribers.')
bTWagNumPreAuthenticatedPmip6Subscribers = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagNumPreAuthenticatedPmip6Subscribers.setStatus('current')
if mibBuilder.loadTexts: bTWagNumPreAuthenticatedPmip6Subscribers.setDescription('The current total number of pre-authenticated subscribers.')
bTWagNumGrePmip6Tunnels = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagNumGrePmip6Tunnels.setStatus('current')
if mibBuilder.loadTexts: bTWagNumGrePmip6Tunnels.setDescription('The current total number of Gre Pmip6 tunnels.')
bTWagPmip6StatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3), )
if mibBuilder.loadTexts: bTWagPmip6StatsTable.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6StatsTable.setDescription('A list of TWAG Pmip6 statistics.')
bTWagPmip6StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1), ).setIndexNames((0, "BENU-TWAG-STATS-MIB", "bTWagPmip6StatsInterval"))
if mibBuilder.loadTexts: bTWagPmip6StatsEntry.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6StatsEntry.setDescription('A logical row in the bTWagPmip6StatsTable.')
bTWagPmip6StatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: bTWagPmip6StatsInterval.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6StatsInterval.setDescription('The interval during which the measurements are accumlated.\n        Interval index 1 indicates the latest interval for which\n        statistics accumulation is completed. Older the statistics,\n        greater the interval index value. In a system supporting a\n        history of n intervals with interval count 1 and interval\n        count n, the most and the least recent intervals respectively,\n        the following apply at the end of an interval:\n        - statistics for interval count n are discarded\n        - the statistics for interval count i become statistics\n          for interval count i + 1, where 1 <= i < n\n        - current statistics become statistics for interval count 1.')
bTWagPmip6IntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPmip6IntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6IntervalDuration.setDescription('Duration of statistics interval (or reporting period) in minutes')
bTWagPmip6TotalPacketsRxvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPmip6TotalPacketsRxvd.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6TotalPacketsRxvd.setDescription('The total number of Pmip6 packets received')
bTWagPmip6TotalPacketsRxvdError = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPmip6TotalPacketsRxvdError.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6TotalPacketsRxvdError.setDescription('The total number of Pmip6 error packets received')
bTWagPmip6TotalPacketHeaderDecodeError = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPmip6TotalPacketHeaderDecodeError.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6TotalPacketHeaderDecodeError.setDescription('The total number of Pmip6 packet header decode errors')
bTWagPmip6TotalPbuSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPmip6TotalPbuSent.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6TotalPbuSent.setDescription('The total number of Pmip6 proxy binding update packets sent')
bTWagPmip6TotalPbuSendError = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPmip6TotalPbuSendError.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6TotalPbuSendError.setDescription('The total number of Pmip6 proxy binding update packets send error')
bTWagPmip6TotalPbaReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPmip6TotalPbaReceived.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6TotalPbaReceived.setDescription('The total number of Pmip6 proxy binding ack packets received ')
bTWagPmip6TotalBriReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPmip6TotalBriReceived.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6TotalBriReceived.setDescription('The total number of Pmip6 binding revocation indication packets received')
bTWagPmip6TotalBraSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPmip6TotalBraSent.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6TotalBraSent.setDescription('The total number of Pmip6 binding revocation ack packets sent')
bTWagPmip6HeartBeatReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPmip6HeartBeatReqSent.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6HeartBeatReqSent.setDescription('The total number of Pmip6 heartbeat request sent')
bTWagPmip6HeartBeatRspSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPmip6HeartBeatRspSent.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6HeartBeatRspSent.setDescription('The total number of Pmip6 heartbeat response sent')
bTWagPmip6HeartBeatReqRestartCountMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPmip6HeartBeatReqRestartCountMismatch.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6HeartBeatReqRestartCountMismatch.setDescription('The total number of Pmip6 heartbeat request restart counter mismatch')
bTWagPmip6HeartBeatReqSeqMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPmip6HeartBeatReqSeqMismatch.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6HeartBeatReqSeqMismatch.setDescription('The total number of Pmip6 heartbeat request restart sequence mismatch')
bTWagPmip6DeletedDueToLmaInitBriMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 11, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPmip6DeletedDueToLmaInitBriMsg.setStatus('current')
if mibBuilder.loadTexts: bTWagPmip6DeletedDueToLmaInitBriMsg.setDescription('The total number of Pmip6 subscribers deleted due to Lma initiated Bri message')
bTWagS2aSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3), )
if mibBuilder.loadTexts: bTWagS2aSubscriberTable.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubscriberTable.setDescription('A list of TWAG S2a subscriber statistics.')
bTWagS2aSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1), ).setIndexNames((0, "BENU-TWAG-STATS-MIB", "bTWagS2aSubsStatsInterval"))
if mibBuilder.loadTexts: bTWagS2aSubscriberEntry.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubscriberEntry.setDescription('A logical row in the bTWagS2aSubscriberTable.')
bTWagS2aSubsStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: bTWagS2aSubsStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubsStatsInterval.setDescription('The interval during which the measurements are accumlated.\n        Interval index 1 indicates the latest interval for which\n        statistics accumulation is completed. Older the statistics,\n        greater the interval index value. In a system supporting a\n        history of n intervals with interval count 1 and interval\n        count n, the most and the least recent intervals respectively,\n        the following apply at the end of an interval:\n        - statistics for interval count n are discarded\n        - the statistics for interval count i become statistics\n          for interval count i + 1, where 1 <= i < n\n        - current statistics become statistics for interval count 1.')
bTWagS2aSubsIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSubsIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubsIntervalDuration.setDescription('Duration of statistics interval (or reporting period) in minutes')
bTWagSecureSSIDS2aSubsAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagSecureSSIDS2aSubsAdded.setStatus('current')
if mibBuilder.loadTexts: bTWagSecureSSIDS2aSubsAdded.setDescription('The total number of secure SSID S2a subscribers added')
bTWagPreAuthenticatedS2aSubsAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPreAuthenticatedS2aSubsAdded.setStatus('current')
if mibBuilder.loadTexts: bTWagPreAuthenticatedS2aSubsAdded.setDescription('The total number of pre authenticated S2a subscribers added')
bTWagS2aSubsDeletionsByDMinitiatedByPGW = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSubsDeletionsByDMinitiatedByPGW.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubsDeletionsByDMinitiatedByPGW.setDescription('The total number of S2a subscribers deleted due to PGW initiated\n        Disconnect Message')
bTWagS2aSubsGtpSessionCreateFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSubsGtpSessionCreateFailed.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubsGtpSessionCreateFailed.setDescription('The total number of S2a GTP subscriber session creation failed')
bTWagS2aSubsCSRQSendFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSubsCSRQSendFailed.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubsCSRQSendFailed.setDescription('The total number of CSRQ message send failed for S2a subscribers.')
bTWagS2aSubsInvalidGtpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSubsInvalidGtpVersion.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubsInvalidGtpVersion.setDescription('The total number of subscribers encountered with invalid GTP version')
bTWagS2aSubsRadiusMissingMandatoryParams = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSubsRadiusMissingMandatoryParams.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubsRadiusMissingMandatoryParams.setDescription('The total number of subscribers with missing mandatory params in\n        radius messages. ')
bTWagS2aSubsRadiusInvalidPGWIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSubsRadiusInvalidPGWIPAddr.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubsRadiusInvalidPGWIPAddr.setDescription('The total number of subscriber with invalid PGW IP address in radius\n         messages. ')
bTWagS2aSubsRadiusMSISDN = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSubsRadiusMSISDN.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubsRadiusMSISDN.setDescription('The total number of subscriber with MSISDN received in radius\n         messages. ')
bTWagS2aSubsRadiusQoSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSubsRadiusQoSProfile.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubsRadiusQoSProfile.setDescription('The total number of subscriber with QoS Profile received in radius\n         messages. ')
bTWagS2aSubsRadiusGBRQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSubsRadiusGBRQoS.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubsRadiusGBRQoS.setDescription('The total number of subscriber with GBRQoS received in radius\n         messages. ')
bTWagS2aSubsRadiusNonGBRQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSubsRadiusNonGBRQoS.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubsRadiusNonGBRQoS.setDescription('The total number of subscriber with NonGBRQoS received in radius\n         messages. ')
bTWagS2aSubsGtpIPAddFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSubsGtpIPAddFailed.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubsGtpIPAddFailed.setDescription('The total number of subscriber for whom GTP IP Add failed ')
bTWagS2aSubsRadiusEapAkaHash = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 1, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSubsRadiusEapAkaHash.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSubsRadiusEapAkaHash.setDescription('The total number of subscriber authenticated via EAP-AKA HASH')
bTWagS2aTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1), )
if mibBuilder.loadTexts: bTWagS2aTable.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aTable.setDescription('A list of TWAG S2a interface  statistics.')
bTWagS2aEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1), ).setIndexNames((0, "BENU-TWAG-STATS-MIB", "bTWagS2aStatsInterval"))
if mibBuilder.loadTexts: bTWagS2aEntry.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aEntry.setDescription('A logical row in the bTWagS2aTable.')
bTWagS2aStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bTWagS2aStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aStatsInterval.setDescription('The interval during which the measurements are accumlated.\n        Interval index 1 indicates the latest interval for which\n        statistics accumulation is completed. Older the statistics,\n        greater the interval index value. In a system supporting a\n        history of n intervals with interval count 1 and interval\n        count n, the most and the least recent intervals respectively,\n        the following apply at the end of an interval:\n        - statistics for interval count n are discarded\n        - the statistics for interval count i become statistics\n          for interval count i + 1, where 1 <= i < n\n        - current statistics become statistics for interval count 1.')
bTWagS2aIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aIntervalDuration.setDescription('Duration of statistics accumulation interval in minutes.')
bTWagS2aSessCreateReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSessCreateReqSent.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSessCreateReqSent.setDescription('The total number of Create Session Requests(CSRQ) initiated by the TWAG\n         during the measurement interval.')
bTWagS2aSessCreateRespRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSessCreateRespRcvd.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSessCreateRespRcvd.setDescription('The total number of Create Session Responses(CSRP) received  by the TWAG\n         during the measurement interval.')
bTWagS2aSessCreateRespAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSessCreateRespAccepted.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSessCreateRespAccepted.setDescription('The total number of Create Session Responses with cause\n         REQUEST_ACCEPTED received  by the TWAG during the measurement interval.')
bTWagS2aSessCreateRespRej = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSessCreateRespRej.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSessCreateRespRej.setDescription('The total number of Create Session Responses with cause\n         REJECT received by the TWAG during the measurement interval.')
bTWagS2aSessDelReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSessDelReqSent.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSessDelReqSent.setDescription('The total number of Delete Session Requests initiated  by the TWAG\n         during the measurement interval.')
bTWagS2aSessDelRespRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSessDelRespRcvd.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSessDelRespRcvd.setDescription('The total number of delete Session  Response messages received \n         during measurement interval.')
bTWagS2aSessDelRespRejRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aSessDelRespRejRcvd.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aSessDelRespRejRcvd.setDescription('The total number of delete Session  Response messages received \n         with cause REJECT during measurement interval.')
bTWagS2aDBRQRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aDBRQRcvd.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aDBRQRcvd.setDescription('The total number of Delete Bearer Request(DBRQ) messages received\n          during measurement interval.')
bTWagS2aDBRPSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aDBRPSent.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aDBRPSent.setDescription('The total number of Delete Bearer Response(DBRP) messages sent\n          during measurement interval.')
bTWagS2aCBRQRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aCBRQRcvd.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aCBRQRcvd.setDescription('The total number of Create Bearer Request(CBRQ) messages received\n          during measurement interval.')
bTWagS2aCBRPSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aCBRPSent.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aCBRPSent.setDescription('The total number of Create Bearer Response(CBRP) messages sent\n          during measurement interval.')
bTWagS2aUBRQRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aUBRQRcvd.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aUBRQRcvd.setDescription('The total number of Update Bearer Request(UBRQ) messages received\n          during measurement interval.')
bTWagS2aUBRPSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagS2aUBRPSent.setStatus('current')
if mibBuilder.loadTexts: bTWagS2aUBRPSent.setDescription('The total number of Update Bearer Response(UBRP) messages sent\n          during measurement interval.')
bTWagGnGpSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3), )
if mibBuilder.loadTexts: bTWagGnGpSubscriberTable.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubscriberTable.setDescription('A list of TWAG subscriber statistics.')
bTWagGnGpSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1), ).setIndexNames((0, "BENU-TWAG-STATS-MIB", "bTWagGnGpSubsStatsInterval"))
if mibBuilder.loadTexts: bTWagGnGpSubscriberEntry.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubscriberEntry.setDescription('A logical row in the bTWagGnGpSubscriberTable.')
bTWagGnGpSubsStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: bTWagGnGpSubsStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubsStatsInterval.setDescription('The interval during which the measurements are accumlated.\n        Interval index 1 indicates the latest interval for which\n        statistics accumulation is completed. Older the statistics,\n        greater the interval index value. In a system supporting a\n        history of n intervals with interval count 1 and interval\n        count n, the most and the least recent intervals respectively,\n        the following apply at the end of an interval:\n        - statistics for interval count n are discarded\n        - the statistics for interval count i become statistics\n          for interval count i + 1, where 1 <= i < n\n        - current statistics become statistics for interval count 1.')
bTWagGnGpSubsIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpSubsIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubsIntervalDuration.setDescription('Duration of statistics interval (or reporting period) in minutes')
bTWagSecureSSIDGnGpSubsAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagSecureSSIDGnGpSubsAdded.setStatus('current')
if mibBuilder.loadTexts: bTWagSecureSSIDGnGpSubsAdded.setDescription('The total number of secure SSID GnGp subscribers added')
bTWagPreAuthenticatedGnGpSubsAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagPreAuthenticatedGnGpSubsAdded.setStatus('current')
if mibBuilder.loadTexts: bTWagPreAuthenticatedGnGpSubsAdded.setDescription('The total number of pre authenticated GnGp subscribers added')
bTWagGnGpSubsDeletionsByDMinitiatedByGGSN = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpSubsDeletionsByDMinitiatedByGGSN.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubsDeletionsByDMinitiatedByGGSN.setDescription('The total number of GnGp subscribers deleted due to GGSN initiated\n        Disconnect Message')
bTWagGnGpSubsGtpSessionCreateFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpSubsGtpSessionCreateFailed.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubsGtpSessionCreateFailed.setDescription('The total number of GnGp GTP subscriber session creation failed')
bTWagGnGpSubsCPCRQSendFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpSubsCPCRQSendFailed.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubsCPCRQSendFailed.setDescription('The total number of CSRQ message send failed for GnGp subscribers.')
bTWagGnGpSubsPDPCtxSendFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpSubsPDPCtxSendFailed.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubsPDPCtxSendFailed.setDescription('The total number of CPCQ QoS message send failed for GnGp subscribers.')
bTWagGnGpSubsInvalidGtpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpSubsInvalidGtpVersion.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubsInvalidGtpVersion.setDescription('The total number of subscribers encountered with invalid GTP version')
bTWagGnGpSubsRadiusMissingMandatoryParams = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpSubsRadiusMissingMandatoryParams.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubsRadiusMissingMandatoryParams.setDescription('The total number of subscribers with missing mandatory params in\n        radius messages. ')
bTWagGnGpSubsRadiusInvalidGGSNIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpSubsRadiusInvalidGGSNIPAddr.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubsRadiusInvalidGGSNIPAddr.setDescription('The total number of subscriber with invalid PGW IP address in radius\n         messages. ')
bTWagGnGpSubsRadiusMSISDN = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpSubsRadiusMSISDN.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubsRadiusMSISDN.setDescription('The total number of subscriber with MSISDN received in radius\n         messages. ')
bTWagGnGpSubsRadiusQoSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpSubsRadiusQoSProfile.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubsRadiusQoSProfile.setDescription('The total number of subscriber with QoS Profile received in radius\n         messages. ')
bTWagGnGpSubsRadiusGBRQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpSubsRadiusGBRQoS.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubsRadiusGBRQoS.setDescription('The total number of subscriber with GBRQoS received in radius\n         messages. ')
bTWagGnGpSubsRadiusNonGBRQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpSubsRadiusNonGBRQoS.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubsRadiusNonGBRQoS.setDescription('The total number of subscriber with NonGBRQoS received in radius\n         messages. ')
bTWagGnGpSubsGtpIPAddFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpSubsGtpIPAddFailed.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubsGtpIPAddFailed.setDescription('The total number of subscriber for whom GTP IP Add failed ')
bTWagGnGpSubsRadiusEapAkaHash = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 7, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpSubsRadiusEapAkaHash.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpSubsRadiusEapAkaHash.setDescription('The total number of subscriber authenticated via EAP-AKA HASH')
bTWagGnGpTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1), )
if mibBuilder.loadTexts: bTWagGnGpTable.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpTable.setDescription('A list of TWAG GnGp interface statistics.')
bTWagGnGpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1), ).setIndexNames((0, "BENU-TWAG-STATS-MIB", "bTWagGnGpStatsInterval"))
if mibBuilder.loadTexts: bTWagGnGpEntry.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpEntry.setDescription('A logical row in the bTWagGnGpTable.')
bTWagGnGpStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bTWagGnGpStatsInterval.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpStatsInterval.setDescription('The interval during which the measurements are accumlated.\n        Interval index 1 indicates the latest interval for which\n        statistics accumulation is completed. Older the statistics,\n        greater the interval index value. In a system supporting a\n        history of n intervals with interval count 1 and interval\n        count n, the most and the least recent intervals respectively,\n        the following apply at the end of an interval:\n        - statistics for interval count n are discarded\n        - the statistics for interval count i become statistics\n          for interval count i + 1, where 1 <= i < n\n        - current statistics become statistics for interval count 1.')
bTWagGnGpIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpIntervalDuration.setDescription('Duration of statistics accumulation interval in minutes.')
bTWagGnGpCPCRQSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpCPCRQSent.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpCPCRQSent.setDescription('The total number of Create PDP Context requests(CPCRQ) initiated by the TWAG\n         during the measurement interval.')
bTWagGnGpCPCRPRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpCPCRPRcvd.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpCPCRPRcvd.setDescription('The total number of Create PDP Context Responses(CPCRP) received by the TWAG\n         during the measurement interval.')
bTWagGnGpCPCRPAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpCPCRPAccepted.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpCPCRPAccepted.setDescription('The total number of Create PDP Context Responses(CPCRP) with cause\n         REQUEST_ACCEPTED received by the TWAG during the measurement interval.')
bTWagGnGpCPCRPRej = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpCPCRPRej.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpCPCRPRej.setDescription('The total number of Create PDP Context Responses(CPCRP) with cause\n         REJECT received by the TWAG during the measurement interval.')
bTWagGnGpDPCRQSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpDPCRQSent.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpDPCRQSent.setDescription('The total number of Delete PDP Context Requests(DPCRQ) initiated by the TWAG\n         during the measurement interval.')
bTWagGnGpDPCRPRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpDPCRPRcvd.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpDPCRPRcvd.setDescription('The total number of Delete PDP Context Response(DPCRP) messages received \n         during measurement interval.')
bTWagGnGpDPCRPRejRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpDPCRPRejRcvd.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpDPCRPRejRcvd.setDescription('The total number of Delete PDP Context Response(DPCRP) messages received \n         with cause REJECT during measurement interval.')
bTWagGnGpDPCRQRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpDPCRQRcvd.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpDPCRQRcvd.setDescription('The total number of Delete PDP Context Request(DPCRQ) messages received\n          during measurement interval.')
bTWagGnGpDPCRPSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpDPCRPSent.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpDPCRPSent.setDescription('The total number of Delete PDP Context Response(DPCRP) messages sent\n          during measurement interval.')
bTWagGnGpCPCRQRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpCPCRQRcvd.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpCPCRQRcvd.setDescription('The total number of Create PDP Context Request(CPCRQ) messages received\n          during measurement interval.')
bTWagGnGpCPCRPSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpCPCRPSent.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpCPCRPSent.setDescription('The total number of Create PDP Context Response(CPCRP) messages sent\n          during measurement interval.')
bTWagGnGpUPCRQRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpUPCRQRcvd.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpUPCRQRcvd.setDescription('The total number of Update PDP Conetxt Request(UPCRQ) messages received\n          during measurement interval.')
bTWagGnGpUPCRPSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 9, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bTWagGnGpUPCRPSent.setStatus('current')
if mibBuilder.loadTexts: bTWagGnGpUPCRPSent.setDescription('The total number of Update PDP Context Response(UPCRP) messages sent\n          during measurement interval.')
bTWagGTPMaxNumOfTunnels = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 6, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bTWagGTPMaxNumOfTunnels.setStatus('current')
if mibBuilder.loadTexts: bTWagGTPMaxNumOfTunnels.setDescription('Max Number of GTP-U that can exist at a given time. \n        Any new GTP-U request beyond this number will be rejected')
bTWagGTPHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 6, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bTWagGTPHighThreshold.setStatus('current')
if mibBuilder.loadTexts: bTWagGTPHighThreshold.setDescription('The high threshold for number of GTP-U that can exist at any \n        given time . If a bTWagGTPLowThresholdReached event has\n        been generated , and the value number of GTP-U in use\n        has exceeded the value of bTWagGTPHighThreshold, then a\n        bTWagGTPHighThresholdReached event will be generated.  No more\n        bTWagGTPHighThresholdReached events will be generated\n        until the  value for number of tunnels in use becomes equal to or less\n        than the value of bTWagGTPLowThreshold.')
bTWagGTPLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 6, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bTWagGTPLowThreshold.setStatus('current')
if mibBuilder.loadTexts: bTWagGTPLowThreshold.setDescription('The Lower threshold for number of GTP-U that can exist at any\n        given time . If a bTWagGTPHighThresholdReached event has\n        been generated , and the value number of tunnels in use\n        falls below the value of bTWagGTPLowThreshold, then a\n        bTWagGTPLowThresholdReached event will be generated.  No more\n        bTWagGTPLowThresholdReached events will be generated\n        until the  value for number of tunnels in use becomes equal to\n        or greater than the value of bTWagGTPHighThreshold.')
bTWagGTPHighThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 0, 1)).setObjects(("BENU-TWAG-STATS-MIB", "bTWagGTPMaxNumOfTunnels"), ("BENU-TWAG-STATS-MIB", "bTWagGTPHighThreshold"))
if mibBuilder.loadTexts: bTWagGTPHighThresholdReached.setStatus('current')
if mibBuilder.loadTexts: bTWagGTPHighThresholdReached.setDescription('This notification signifies that the current number of\n        GTP-U has risen above the  value of bTWagGTPHighThreshold.')
bTWagGTPLowThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 7, 0, 2)).setObjects(("BENU-TWAG-STATS-MIB", "bTWagGTPMaxNumOfTunnels"), ("BENU-TWAG-STATS-MIB", "bTWagGTPLowThreshold"))
if mibBuilder.loadTexts: bTWagGTPLowThresholdReached.setStatus('current')
if mibBuilder.loadTexts: bTWagGTPLowThresholdReached.setDescription('This notification signifies that the current number of\n        GTP-U has fallen below the value of bTWagGTPLowThreshold.')
mibBuilder.exportSymbols("BENU-TWAG-STATS-MIB", bTWagS2aSessDelRespRejRcvd=bTWagS2aSessDelRespRejRcvd, bTWagS2aSessDelReqSent=bTWagS2aSessDelReqSent, bTWagGnGpSubsRadiusQoSProfile=bTWagGnGpSubsRadiusQoSProfile, bTWagS2aCBRPSent=bTWagS2aCBRPSent, bTWagGnGpDPCRPRcvd=bTWagGnGpDPCRPRcvd, bTWagS2aSubsDeletionsByDMinitiatedByPGW=bTWagS2aSubsDeletionsByDMinitiatedByPGW, bTWagS2aSubsInvalidGtpVersion=bTWagS2aSubsInvalidGtpVersion, bTWagNotifications=bTWagNotifications, bTWagS2aSubsRadiusInvalidPGWIPAddr=bTWagS2aSubsRadiusInvalidPGWIPAddr, bTWagGnGpSubscriberTable=bTWagGnGpSubscriberTable, bTWagGnGpIntervalDuration=bTWagGnGpIntervalDuration, bTWagGnGpSubsDeletionsByDMinitiatedByGGSN=bTWagGnGpSubsDeletionsByDMinitiatedByGGSN, bTWagGnGpSubsRadiusGBRQoS=bTWagGnGpSubsRadiusGBRQoS, bTWagGnGpSubsRadiusNonGBRQoS=bTWagGnGpSubsRadiusNonGBRQoS, bTWagGnGpCPCRPAccepted=bTWagGnGpCPCRPAccepted, bTWagS2aStatsInterval=bTWagS2aStatsInterval, bTWagNumCurrentSecureSSIDS2aSubscribers=bTWagNumCurrentSecureSSIDS2aSubscribers, bTWagGnGpSubsRadiusInvalidGGSNIPAddr=bTWagGnGpSubsRadiusInvalidGGSNIPAddr, bTWagS2aSessCreateReqSent=bTWagS2aSessCreateReqSent, bTWagS2aSubsRadiusQoSProfile=bTWagS2aSubsRadiusQoSProfile, bTWagS2aSessDelRespRcvd=bTWagS2aSessDelRespRcvd, bTWagGTPNotifObjects=bTWagGTPNotifObjects, bTWagS2aSessCreateRespRcvd=bTWagS2aSessCreateRespRcvd, bTWagS2aSubsRadiusGBRQoS=bTWagS2aSubsRadiusGBRQoS, bTWagNumPreAuthenticatedPmip6Subscribers=bTWagNumPreAuthenticatedPmip6Subscribers, bTWagGnGpCPCRPRej=bTWagGnGpCPCRPRej, bTWagS2aTable=bTWagS2aTable, bTWagS2aSessCreateRespAccepted=bTWagS2aSessCreateRespAccepted, bTWagPreAuthenticatedS2aSubsAdded=bTWagPreAuthenticatedS2aSubsAdded, bTWagS2aDBRPSent=bTWagS2aDBRPSent, bTWagGnGpSubsRadiusMissingMandatoryParams=bTWagGnGpSubsRadiusMissingMandatoryParams, bTWagGnGpCPCRQRcvd=bTWagGnGpCPCRQRcvd, bTWagGnGpCPCRPSent=bTWagGnGpCPCRPSent, bTWagS2aSubscriberNotifObjects=bTWagS2aSubscriberNotifObjects, bTWagSecureSSIDGnGpSubsAdded=bTWagSecureSSIDGnGpSubsAdded, bTWagPmip6StatsInterval=bTWagPmip6StatsInterval, bTWagGnGpCPCRQSent=bTWagGnGpCPCRQSent, bTWagGnGpSubsIntervalDuration=bTWagGnGpSubsIntervalDuration, bTWagGnGpDPCRQRcvd=bTWagGnGpDPCRQRcvd, bTWagGTPMaxNumOfTunnels=bTWagGTPMaxNumOfTunnels, bTWagPmip6HeartBeatRspSent=bTWagPmip6HeartBeatRspSent, bTWagPmip6TotalPbuSent=bTWagPmip6TotalPbuSent, bTWagPmip6TotalPacketHeaderDecodeError=bTWagPmip6TotalPacketHeaderDecodeError, bTWagGnGpDPCRPSent=bTWagGnGpDPCRPSent, bTWagS2aSubscriberMIBObjects=bTWagS2aSubscriberMIBObjects, bTWagS2aSubsGtpSessionCreateFailed=bTWagS2aSubsGtpSessionCreateFailed, bTWagPreAuthenticatedGnGpSubsAdded=bTWagPreAuthenticatedGnGpSubsAdded, bTWagPmip6TotalPacketsRxvd=bTWagPmip6TotalPacketsRxvd, bTWagPmip6TotalPbaReceived=bTWagPmip6TotalPbaReceived, bTWagPmip6TotalPbuSendError=bTWagPmip6TotalPbuSendError, bTWagGTPCurrentNumOfTunnels=bTWagGTPCurrentNumOfTunnels, bTWagS2aSubsCSRQSendFailed=bTWagS2aSubsCSRQSendFailed, bTWagS2aSubsRadiusMSISDN=bTWagS2aSubsRadiusMSISDN, bTWagGnGpSubsPDPCtxSendFailed=bTWagGnGpSubsPDPCtxSendFailed, bTWagS2aCBRQRcvd=bTWagS2aCBRQRcvd, bTWagGnGpSubsStatsInterval=bTWagGnGpSubsStatsInterval, bTWagNumPreAuthenticatedS2aSubscribers=bTWagNumPreAuthenticatedS2aSubscribers, bTWagGnGpTable=bTWagGnGpTable, bTWagS2aStatsMIBObjects=bTWagS2aStatsMIBObjects, bTWagGnGpSubsGtpSessionCreateFailed=bTWagGnGpSubsGtpSessionCreateFailed, bTWagGnGpDPCRPRejRcvd=bTWagGnGpDPCRPRejRcvd, bTWagS2aSubsRadiusEapAkaHash=bTWagS2aSubsRadiusEapAkaHash, bTWagGnGpEntry=bTWagGnGpEntry, bTWagGnGpSubsCPCRQSendFailed=bTWagGnGpSubsCPCRQSendFailed, bTWagPmip6StatsTable=bTWagPmip6StatsTable, bTWagS2aSubsIntervalDuration=bTWagS2aSubsIntervalDuration, bTWagS2aIntervalDuration=bTWagS2aIntervalDuration, bTWagS2aDBRQRcvd=bTWagS2aDBRQRcvd, bTWagGnGpUPCRPSent=bTWagGnGpUPCRPSent, bTWagS2aSubsGtpIPAddFailed=bTWagS2aSubsGtpIPAddFailed, bTWagNumPreAuthenticatedGnGpSubscribers=bTWagNumPreAuthenticatedGnGpSubscribers, bTWagS2aSubsRadiusMissingMandatoryParams=bTWagS2aSubsRadiusMissingMandatoryParams, benuTWagStatsMIB=benuTWagStatsMIB, bTWagS2aUBRPSent=bTWagS2aUBRPSent, bTWagGnGpCPCRPRcvd=bTWagGnGpCPCRPRcvd, bTWagGnGpSubsRadiusEapAkaHash=bTWagGnGpSubsRadiusEapAkaHash, bTWagPmip6TotalBraSent=bTWagPmip6TotalBraSent, bTWagGnGpSubscriberEntry=bTWagGnGpSubscriberEntry, bTWagS2aSubscriberEntry=bTWagS2aSubscriberEntry, bTWagSecureSSIDS2aSubsAdded=bTWagSecureSSIDS2aSubsAdded, bTWagGTPLowThresholdReached=bTWagGTPLowThresholdReached, bTWagPmip6HeartBeatReqSeqMismatch=bTWagPmip6HeartBeatReqSeqMismatch, bTWagGnGpStatsInterval=bTWagGnGpStatsInterval, bTWagGTPHighThresholdReached=bTWagGTPHighThresholdReached, bTWagS2aEntry=bTWagS2aEntry, bTWagGTPStatsMIBObjects=bTWagGTPStatsMIBObjects, bTWagGnGpDPCRQSent=bTWagGnGpDPCRQSent, bTWagNumGrePmip6Tunnels=bTWagNumGrePmip6Tunnels, bTWagS2aSubscriberTable=bTWagS2aSubscriberTable, bTWagGnGpStatsMIBObjects=bTWagGnGpStatsMIBObjects, bTWagPmip6TotalPacketsRxvdError=bTWagPmip6TotalPacketsRxvdError, bTWagGnGpUPCRQRcvd=bTWagGnGpUPCRQRcvd, bTWagPmip6TotalBriReceived=bTWagPmip6TotalBriReceived, bTWagS2aSessCreateRespRej=bTWagS2aSessCreateRespRej, bTWagS2aUBRQRcvd=bTWagS2aUBRQRcvd, bTWagGnGpSubsInvalidGtpVersion=bTWagGnGpSubsInvalidGtpVersion, bTWagNumCurrentSecureSSIDGnGpSubscribers=bTWagNumCurrentSecureSSIDGnGpSubscribers, bTWagPmip6DeletedDueToLmaInitBriMsg=bTWagPmip6DeletedDueToLmaInitBriMsg, bTWagGTPLowThreshold=bTWagGTPLowThreshold, bTWagGnGpSubscriberMIBObjects=bTWagGnGpSubscriberMIBObjects, bTWagPmip6IntervalDuration=bTWagPmip6IntervalDuration, bTWagGnGpNotifObjects=bTWagGnGpNotifObjects, bTWagS2aNotifObjects=bTWagS2aNotifObjects, bTWagGTPHighThreshold=bTWagGTPHighThreshold, bTWagGnGpSubsRadiusMSISDN=bTWagGnGpSubsRadiusMSISDN, bTWagGnGpSubsGtpIPAddFailed=bTWagGnGpSubsGtpIPAddFailed, bTWagPmip6StatsEntry=bTWagPmip6StatsEntry, bTWagGnGpSubscriberNotifObjects=bTWagGnGpSubscriberNotifObjects, bTWagPmip6HeartBeatReqSent=bTWagPmip6HeartBeatReqSent, bTWagS2aSubsStatsInterval=bTWagS2aSubsStatsInterval, bTWagPmip6HeartBeatReqRestartCountMismatch=bTWagPmip6HeartBeatReqRestartCountMismatch, PYSNMP_MODULE_ID=benuTWagStatsMIB, bTWagPmip6MIBObjects=bTWagPmip6MIBObjects, bTWagS2aSubsRadiusNonGBRQoS=bTWagS2aSubsRadiusNonGBRQoS)
