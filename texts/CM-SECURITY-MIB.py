#
# PySNMP MIB module CM-SECURITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/CM-SECURITY-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 10:02:22 2024
# On host fv-az1773-903 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
UserInterfaceType, IpVersion = mibBuilder.importSymbols("CM-COMMON-MIB", "UserInterfaceType", "IpVersion")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
usmUserEntry, = mibBuilder.importSymbols("SNMP-USER-BASED-SM-MIB", "usmUserEntry")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, Bits, Counter32, NotificationType, Unsigned32, ModuleIdentity, iso, Integer32, IpAddress, ObjectIdentity, TimeTicks, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "Counter32", "NotificationType", "Unsigned32", "ModuleIdentity", "iso", "Integer32", "IpAddress", "ObjectIdentity", "TimeTicks", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, DisplayString, VariablePointer, TruthValue, TextualConvention, StorageType, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "VariablePointer", "TruthValue", "TextualConvention", "StorageType", "DateAndTime")
cmSecurityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10))
cmSecurityMIB.setRevisions(('2021-01-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cmSecurityMIB.setRevisionsDescriptions(('Notes from release 202007270000Z:\n              (1) Added new tables: f3CaProfileTable, f3CaTable.\n              (2) Added new textual conventions: CaAction,\n                  SslCertificatePrivateKeyPairAction, CertificateType,\n                  CertificateStatus, AutoEnrollmentStatus, CaRootCertStatus.\n              (3) Added new columns to f3SslCertificatePrivateKeyPairTable:\n                  f3SslCertificatePrivateKeyPairRsaKeyPairName,\n                  f3SslCertificatePrivateKeyPairCertificateType,\n                  f3SslCertificatePrivateKeyPairCertificateStatus,\n                  f3SslCertificatePrivateKeyPairAction.\n              (4) Added new column to f3CertSigningRequestTable:\n                  f3CertSigningRequestAutoEnrollmentStatus.\n              (5) Added new scalar to f3SshCipherStrengthHighControl.\n\n              Notes from release 202006180000Z:\n              (1) Changed MAX-ACCESS for f3HttpsSslKeyPair from read-only to read-write\n              \n              Notes from release 201912010000Z\n              (1) Added f3NasIpAddressType,\n                  f3SslCertificateActionKeyName,\n              \n              Notes from release 201910010000Z\n              (1) Added scalars f3HttpsSslCertExpNotifPeriod,\n                  f3HttpsSslKeyPair,\n                  f3SslCertificateAction,\n                  f3SslCertificateActionPairName,\n                  \n                  Added f3SslCertificatePrivateKeyPairTable with columns:\n                  f3SslCertificatePrivateKeyPairName,\n                  f3SslCertificatePrivateKeyPairSslCertificate,\n                  f3SslCertificatePrivateKeyPairPrivateKeyPresent\n\n              Notes from release 201905280000Z\n              (1) added cmSecurityUserSso2fa to cmSecurityUserTable\n              (2) added scalar f3Sso2faControl\n\n              Notes from release 201706270000Z\n              (1) Added Object Identifier cmIcmpV4Objects with scalar objects:\n                  icmpV4Filter, icmpV4DropEchoRequests\n              (2) Added Object Identifier cmIcmpV6Objects with scalar objects:\n                  icmpV6Filter, icmpV6DropEchoRequests, icmpV6DropNeighborSolicitation,\n                  icmpV6DropRouterAdvertisement, icmpV6DropNeighborAdvertisement,\n                  icmpV6DropRouterSolicitation\n\t      \n\t      Notes from release 201704030000Z\n              (1) add f3RadiusSendVendorAvpEnabled and f3RadiusRealm to the MIB\n\n              Notes from release 201606140000Z\n              (1) added cmSecurityUserRemoteCryptoUser to cmSecurityUserTable\n\n              Notes from release 201602080000Z\n              (1)Added literal netconf to CmSecurityPrivLevel\n\n              Notes from release 201509180000Z\n              (1)Added cmSecurityCryptoPassword attribute to cmSecurityUserTable\n\n              Note from release  201106270000Z,\n              (1)Added f3TacacsPrivLevelControlEnabled, f3TacacsDefaultPrivLevel\n\n              Note from release 201104140000Z,\n              (1)Added cmSecurityUserAction to support remove-lockout\n\n              Note from release 201101050000Z,\n              (1)Added f3UsmUserTable - an augment to UsmUserTable\n\n              Note from release 201002120000Z,\n              (1)MIBs updated for supported functionality in R4.3CC and R4.1CM \n                 (a)cmRemoteAuthServerTable has new objects \n                    cmRemoteAuthServerAccountingPort to support RADIUS accounting\n              \n              Notes from release 200903190000Z,\n             (1)MIB version ready for release FSP150CC GE101, GE206 devices\n               (a)Added Textual convention CmSecurityPolicyStrength\n               (b)Added MIB scalar cmSecurityPolicyStrength\n\n             (2)Following changes are made to the cmSecurityUserTable,\n                (a)cmSecurityUserPassword column to modify security user password\n                (b)cmSecurityUserStorageType and cmSecurityUserRowStatus columns added \n                   thereby allowing creation/deletion of Security Users\n                (c)cmSecurityUserComment, cmSecurityUserPrivLevel, \n                   cmSecurityUserLoginTimeout, cmSecurityUserNumFailedLoginAttempts, \n                   cmSecurityUserCliPagingEnable columns are now read-write\n                   to allow write access. \n\n            Notes from release 200803030000Z,\n             (1)MIB version ready for release FSP150CM 3.1.',))
if mibBuilder.loadTexts: cmSecurityMIB.setLastUpdated('202101280000Z')
if mibBuilder.loadTexts: cmSecurityMIB.setOrganization('ADVA Optical Networking SE')
if mibBuilder.loadTexts: cmSecurityMIB.setContactInfo('Web URL: http://adva.com/\n        E-mail:  support@adva.com\n        Postal:  ADVA Optical Networking SE\n             Campus Martinsried\n             Fraunhoferstrasse 9a\n             82152 Martinsried/Munich\n             Germany\n        Phone: +49 089 89 06 65 0\n        Fax:  +49 089 89 06 65 199 ')
if mibBuilder.loadTexts: cmSecurityMIB.setDescription('This module defines the Security MIB definitions \n             used by the F3 (FSP150CM/CC) product lines.  These are used\n             to manage the user/authentication for CLI/GUI sessions.\n             Copyright (C) ADVA.')
cmSecurityObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1))
cmSecurityConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 2))
cmSecurityNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 3))
cmIcmpV4Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 20))
cmIcmpV6Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 21))
f3FipsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 23))
f3SslCertificateObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 25))
f3RsaKeyPairObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 26))
f3CertSigningRequestObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27))
class SecuritySelfTestResult(TextualConvention, Integer32):
    description = 'Enumerations for Security Self Test Result \n          fail     - fail to pass the test, \n          success  - success to pass the test.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("fail", 1), ("success", 2))

class SecuritySelfTestStatus(TextualConvention, Integer32):
    description = 'Enumerations for Security Self Test Status \n          notStarted - test not started.\n          inprogress - test is in progress.\n          complete   - test has completed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("notStarted", 1), ("inprogress", 2), ("complete", 3))

class CmRemoteAuthProtocol(TextualConvention, Integer32):
    description = 'Enumerations for remote authentication protocol.\n          none   - No remote authentication protocol, \n          radius - RADIUS (Remote Authentication Dial-In User Service), \n          tacacs - TACACS+(Terminal Access Controller Access Control System).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("radius", 2), ("tacacs", 3))

class CmSecurityAccessOrder(TextualConvention, Integer32):
    description = 'Enumerations for order for security access.\n             local  - Local database for user/security validation, \n             remote - Remote protocol for user/security validation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("local", 1), ("remote", 2))

class CmSecurityAuthType(TextualConvention, Integer32):
    description = 'Enumerations for remote authentication protocol types.\n             pap  - Password Authentication Protocol, \n             chap - Challenge-Handshake Authentication Protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("pap", 1), ("chap", 2), ("ascii", 3))

class CmSecurityPrivLevel(TextualConvention, Integer32):
    description = 'Enumerations for Security Privilege Level.\n             retrieve         - Retrieve Privilege Level (can only \n                                VIEW management information), \n             maintenance      - Maintenance Privilege Level \n                                (can VIEW management, as well as perform \n                                maintenance operations such as loopbacks,\n                                etherjack diagnosis etc.)\n             provisioning     - Provisioning Privilege Level\n                                (can perform Provisioning operations) \n             superuser        - Super User Privilege Level\n                                (can perform all operations)\n             testuser         - Retrieve Privilege Level\n                                and some maintenance, \n                                provisioning operations.\n             cryptouser       - Crypto User Privilege Level \n                                (can perform security operations)\n             netconf          - NETCONF Privilege Level'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("not-applicable", 0), ("retrieve", 1), ("maintenance", 2), ("provisioning", 3), ("superuser", 4), ("testuser", 5), ("cryptouser", 6), ("netconf", 7))

class CmRemoteAuthOrder(TextualConvention, Integer32):
    description = 'Enumerations for order for remote authentication access.\n             first  - first to access the remote authentication, \n             second - second to access the remote authentication,\n             third  - third to access the remote authentication.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("first", 1), ("second", 2), ("third", 3))

class CmSecurityPolicyStrength(TextualConvention, Integer32):
    description = 'Enumerations for security policy strength \n             low  - Low Security Policy, \n             medium - Medium Security Policy,\n             high  - High Security Policy.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("low", 1), ("medium", 2), ("high", 3))

class UsmUserAccessType(TextualConvention, Integer32):
    description = 'Enumerations for type of USM User \n             read-only  - Read only, \n             read-write - Read write ,\n             trap-only  - Trap Only.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("read-only", 1), ("read-write", 2), ("trap-only", 3))

class SecurityUserAction(TextualConvention, Integer32):
    description = 'Provides ability to manage security users.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("not-applicable", 0), ("remove-lockout", 1))

class SnmpSecurityTrapType(TextualConvention, Integer32):
    description = 'Provides ability to manage security traps.\n             all - trap is reported when user logs in, logs out or is locked out\n             loginFailed  - trap is reported only when user failed to log in\n             disabled  - security traps are disabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("all", 1), ("loginFailed", 2), ("disabled", 3))

class PrivilegeRequestAction(TextualConvention, Integer32):
    description = 'Privilege request action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("none", 1), ("approve", 2), ("deny", 3), ("cancel", 4))

class PrivilegeRequestState(TextualConvention, Integer32):
    description = 'Privilege request state.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("requestSent", 2), ("requestCanceled", 3), ("requestApproved", 4), ("requestDenied", 5), ("requestTimeout", 6), ("accessExpired", 7), ("accessCanceled", 8))

class RsaKeyLengthType(TextualConvention, Integer32):
    description = 'RSA key length.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("rsaKeyLength2048", 1), ("rsaKeyLength4096", 2))

class ZeroizeKeysAction(TextualConvention, Integer32):
    description = 'Zeroize Keys.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("notApplicable", 0), ("ZeroizeKeys", 1))

class RunSelfTestAction(TextualConvention, Integer32):
    description = 'Run Self-Test.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("notApplicable", 0), ("RunSelfTest", 1))

class SslCertificateAction(TextualConvention, Integer32):
    description = 'Provides ability to manage SSL Certificate/Private Key pair.\n         deleteSslKeyPair - delete SSL Certificate/Private Key pair\n         setHttpsSslKeyPair - set SSL Certificate/Private Key pair used for HTTPS\n         addRsaPrivateKey - add RSA Private Key to SSL Certificate/Private Key pair'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("deleteSslKeyPair", 1), ("setHttpsSslKeyPair", 2), ("addRsaPrivateKey", 3))

class RsaKeyPairAction(TextualConvention, Integer32):
    description = 'generate or delete RSA key pair.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("genRsaKeyPair", 1), ("delRsaKeyPair", 2))

class CsrAction(TextualConvention, Integer32):
    description = 'generate or delete CSR.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("genCsr", 1), ("delCsr", 2))

class NasIpAddressType(TextualConvention, Integer32):
    description = 'Nas Ip Address Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("userDefined", 1), ("packetSourceIp", 2))

class CertificateEnrollmentProtocol(TextualConvention, Integer32):
    description = 'Protocol type used for automatic certificate enrollment.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("scep", 1))

class CaAction(TextualConvention, Integer32):
    description = 'Certificate authority action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("updateCACertificates", 2), ("startAutoEnrollment", 3), ("getCACertificates", 4))

class SslCertificatePrivateKeyPairAction(TextualConvention, Integer32):
    description = 'SSL certificate/private key pair action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("trustRootCACertificate", 2))

class CertificateType(TextualConvention, Integer32):
    description = 'Certificate type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("root", 1), ("intermediate", 2), ("device", 3))

class CertificateStatus(TextualConvention, Integer32):
    description = 'Certificate status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("trusted", 1), ("untrusted", 2), ("valid", 3), ("invalid", 4))

class AutoEnrollmentStatus(TextualConvention, Integer32):
    description = 'Auto enrollment status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("failure", 2), ("success", 3), ("pending", 4), ("aborted", 5), ("timedout", 6))

class CaRootCertStatus(TextualConvention, Integer32):
    description = 'Certificate authority root certificate status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("pending", 1), ("active", 2), ("failed", 3), ("renewing", 4), ("renewalFailed", 5))

cmAuthProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 1), CmRemoteAuthProtocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAuthProtocol.setStatus('current')
if mibBuilder.loadTexts: cmAuthProtocol.setDescription('Remote user authentication protocol.')
cmAccessOrder = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 2), CmSecurityAccessOrder()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccessOrder.setStatus('current')
if mibBuilder.loadTexts: cmAccessOrder.setDescription("Order of access for security, i.e. try 'local' first or\n             'remote' first.")
cmAuthType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 3), CmSecurityAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAuthType.setStatus('current')
if mibBuilder.loadTexts: cmAuthType.setDescription('In case of remote authentication, the chosen protocol.')
cmNASIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNASIpAddress.setStatus('current')
if mibBuilder.loadTexts: cmNASIpAddress.setDescription("In case of remote authentication RADIUS, \n             the Network Access Server's IP Address.")
cmSecurityPolicyStrength = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 7), CmSecurityPolicyStrength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSecurityPolicyStrength.setStatus('current')
if mibBuilder.loadTexts: cmSecurityPolicyStrength.setDescription('This object represents the security policy\n             strength of the system.  Based on this value,\n             the system puts additional restrictions on\n             the user id and password rules.')
cmRemoteAuthServerAccountingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmRemoteAuthServerAccountingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmRemoteAuthServerAccountingEnabled.setDescription('This object allows to enable/disable RADIUS/TACACS+ Accounting \n          on all authentication servers.')
f3TacacsPrivLevelControlEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TacacsPrivLevelControlEnabled.setStatus('current')
if mibBuilder.loadTexts: f3TacacsPrivLevelControlEnabled.setDescription('This object allows to enable/disable the use of ENABLE authorization \n          control to determine\n          the Privilege Level configured by the remote authentication server.\n          This object is only valid for TACACS+. Default value of this object is\n          TRUE.')
f3TacacsDefaultPrivLevel = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 11), CmSecurityPrivLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TacacsDefaultPrivLevel.setStatus('current')
if mibBuilder.loadTexts: f3TacacsDefaultPrivLevel.setDescription('This object allows specification of the default privilege level of the\n          TACACS+ user, when the use of  ENABLE authorization control is DISABLED, i.e.\n          f3TacacsPrivLevelControlEnabled is set to FALSE.')
f3NasIpv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 12), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NasIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: f3NasIpv6Addr.setDescription('This object describe the ipv6 address.')
f3SecurityTrapType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 13), SnmpSecurityTrapType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SecurityTrapType.setStatus('current')
if mibBuilder.loadTexts: f3SecurityTrapType.setDescription('This object provides ability to manage whether report security trap.')
f3SecurityTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SecurityTrapInfo.setStatus('current')
if mibBuilder.loadTexts: f3SecurityTrapInfo.setDescription('This object is used to describe the security trap info.\n          This object is used only in trap and GET operation on this object\n          will return empty string.')
f3UserPrivMgmtControl = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UserPrivMgmtControl.setStatus('current')
if mibBuilder.loadTexts: f3UserPrivMgmtControl.setDescription('This object is used to enable/disable User Privilege Management.')
f3UserPrivRspTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UserPrivRspTimeout.setStatus('current')
if mibBuilder.loadTexts: f3UserPrivRspTimeout.setDescription('This object is used to set response timeout for user privilege\n          upgrade request in minutes.')
f3RadiusSendVendorAvpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3RadiusSendVendorAvpEnabled.setStatus('current')
if mibBuilder.loadTexts: f3RadiusSendVendorAvpEnabled.setDescription('If enabled, Vendor-ID AVP is sent in Access-Request Messages.')
f3RadiusRealm = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3RadiusRealm.setStatus('current')
if mibBuilder.loadTexts: f3RadiusRealm.setDescription("When the value of radiusRealm is not a null string, the system shall append an '@' \n                 character and the radiusRealm string to the User-Name attribute included in \n                 Access-Request Messages. ")
cmAnonymizeLogTimeInDays = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAnonymizeLogTimeInDays.setStatus('current')
if mibBuilder.loadTexts: cmAnonymizeLogTimeInDays.setDescription('This object represents the logging anonymization interval in days. \n            After the configured number of days have passed, the system anonymizes the user names. \n            At midnight of that day, the system anonymizes all the log entries that precede the configured value.\n            0 means NEVER anonymize.')
f3Sso2faControl = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Sso2faControl.setStatus('current')
if mibBuilder.loadTexts: f3Sso2faControl.setDescription('When enabled, the f3 device will allow the creation of a cmSecurityUserEntry with\n    the cmSecurityUserSso2fa set to enabled.')
f3NasIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 28), NasIpAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NasIpAddressType.setStatus('current')
if mibBuilder.loadTexts: f3NasIpAddressType.setDescription('TThis object describe the ip address type.')
f3SshCipherStrengthHighControl = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SshCipherStrengthHighControl.setStatus('current')
if mibBuilder.loadTexts: f3SshCipherStrengthHighControl.setDescription('When enabled, high cipher strength is enforced.')
f3FipsOperationMode = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 23, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FipsOperationMode.setStatus('current')
if mibBuilder.loadTexts: f3FipsOperationMode.setDescription('Fips Operation Mode.')
f3FipsSecuritySelfTestFailureCount = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 23, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FipsSecuritySelfTestFailureCount.setStatus('current')
if mibBuilder.loadTexts: f3FipsSecuritySelfTestFailureCount.setDescription('Fips Security Self Test Failure Count.')
f3FipsSecuritySelfTestResult = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 23, 3), SecuritySelfTestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FipsSecuritySelfTestResult.setStatus('current')
if mibBuilder.loadTexts: f3FipsSecuritySelfTestResult.setDescription('Fips Security Self Test Result.')
f3FipsSecuritySelfTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 23, 4), SecuritySelfTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FipsSecuritySelfTestStatus.setStatus('current')
if mibBuilder.loadTexts: f3FipsSecuritySelfTestStatus.setDescription('Fips Security Self Test Status.')
f3FipsAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 23, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("zeroize", 1), ("startSecSelfTest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FipsAction.setStatus('current')
if mibBuilder.loadTexts: f3FipsAction.setDescription('Fips Security Self Test Action.')
icmpV4Filter = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpV4Filter.setStatus('current')
if mibBuilder.loadTexts: icmpV4Filter.setDescription('This object is used to enable/disable ICMP Filter. When disabled\n          is set, all IcmpV4 dropping filters are not applied. \n          Only when enabled is set, IcmpV4 dropping filter can be set.')
icmpV4DropEchoRequests = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpV4DropEchoRequests.setStatus('current')
if mibBuilder.loadTexts: icmpV4DropEchoRequests.setDescription('This object is used to enable/disable Dropping Echo Requests.')
icmpV6Filter = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpV6Filter.setStatus('current')
if mibBuilder.loadTexts: icmpV6Filter.setDescription('This object is used to enable/disable ICMP Filter. When disabled\n          is set, all IcmpV6 dropping filters are not applied. \n          Only when enabled is set, IcmpV6 dropping filters can be set\n          individually.')
icmpV6DropEchoRequests = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpV6DropEchoRequests.setStatus('current')
if mibBuilder.loadTexts: icmpV6DropEchoRequests.setDescription('This object is used to enable/disable Dropping Echo Requests.')
icmpV6DropNeighborSolicitation = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 21, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpV6DropNeighborSolicitation.setStatus('current')
if mibBuilder.loadTexts: icmpV6DropNeighborSolicitation.setDescription('This object is used to enable/disable Dropping Neighbor Solicitation.')
icmpV6DropRouterAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpV6DropRouterAdvertisement.setStatus('current')
if mibBuilder.loadTexts: icmpV6DropRouterAdvertisement.setDescription('This object is used to enable/disable Dropping Router Advertisement.')
icmpV6DropNeighborAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 21, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpV6DropNeighborAdvertisement.setStatus('current')
if mibBuilder.loadTexts: icmpV6DropNeighborAdvertisement.setDescription('This object is used to enable/disable Dropping Neighbor Advertisement.')
icmpV6DropRouterSolicitation = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 21, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpV6DropRouterSolicitation.setStatus('current')
if mibBuilder.loadTexts: icmpV6DropRouterSolicitation.setDescription('This object is used to enable/disable Dropping Router Solicitation.')
f3HttpsSslCertExpNotifPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 25, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3HttpsSslCertExpNotifPeriod.setStatus('current')
if mibBuilder.loadTexts: f3HttpsSslCertExpNotifPeriod.setDescription('Number of days prior to expiration of the HTTPS SSL Certificate \n          that the Expiry Notification Alarm will be raised.')
f3HttpsSslKeyPair = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 25, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3HttpsSslKeyPair.setStatus('current')
if mibBuilder.loadTexts: f3HttpsSslKeyPair.setDescription('This is the SSL certificate/private key pair used for HTTPS.')
f3SslCertificateAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 25, 3), SslCertificateAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SslCertificateAction.setStatus('current')
if mibBuilder.loadTexts: f3SslCertificateAction.setDescription('This is the action to take on SSL certificate objects.')
f3SslCertificateActionPairName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 25, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SslCertificateActionPairName.setStatus('current')
if mibBuilder.loadTexts: f3SslCertificateActionPairName.setDescription('This is the name of the SSL Certificate/Private Key pair to delete or set for HTTPS.')
f3SslCertificateActionKeyName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 25, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SslCertificateActionKeyName.setStatus('current')
if mibBuilder.loadTexts: f3SslCertificateActionKeyName.setDescription('This is the name of the Certificate/Private Key pair to add.')
f3SslCertificatePrivateKeyPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 25, 5), )
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairTable.setStatus('current')
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairTable.setDescription('A list of entries for the SSL Certificate/Private Key Pairs.')
f3SslCertificatePrivateKeyPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 25, 5, 1), ).setIndexNames((0, "CM-SECURITY-MIB", "f3SslCertificatePrivateKeyPairName"))
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairEntry.setStatus('current')
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairEntry.setDescription('A conceptual row in the f3SslCertificatePrivateKeyPairTable.')
f3SslCertificatePrivateKeyPairName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 25, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairName.setStatus('current')
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairName.setDescription('This is a unique name for the key pair.')
f3SslCertificatePrivateKeyPairSslCertificate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 25, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairSslCertificate.setStatus('current')
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairSslCertificate.setDescription('This is the contents of the SSL certificate.')
f3SslCertificatePrivateKeyPairPrivateKeyPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 25, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairPrivateKeyPresent.setStatus('current')
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairPrivateKeyPresent.setDescription('This indicates that a private key is present in the key pair.')
f3SslCertificatePrivateKeyPairRsaKeyPairName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 25, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairRsaKeyPairName.setStatus('current')
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairRsaKeyPairName.setDescription('This is the Rsa key of the SSL certificate.')
f3SslCertificatePrivateKeyPairCertificateType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 25, 5, 1, 5), CertificateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairCertificateType.setStatus('current')
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairCertificateType.setDescription('This is the SSL certificate type.')
f3SslCertificatePrivateKeyPairCertificateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 25, 5, 1, 6), CertificateStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairCertificateStatus.setStatus('current')
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairCertificateStatus.setDescription('This is the SSL certificate status.')
f3SslCertificatePrivateKeyPairAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 25, 5, 1, 7), SslCertificatePrivateKeyPairAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairAction.setStatus('current')
if mibBuilder.loadTexts: f3SslCertificatePrivateKeyPairAction.setDescription('This is the SSL Certificate/Private Key Pair Action.')
f3RsaKeyPairAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 26, 1), RsaKeyPairAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3RsaKeyPairAction.setStatus('current')
if mibBuilder.loadTexts: f3RsaKeyPairAction.setDescription('This is the action to RSA key pair.')
f3RsaKeyPairActionName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 26, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3RsaKeyPairActionName.setStatus('current')
if mibBuilder.loadTexts: f3RsaKeyPairActionName.setDescription('This is the name of RSA key pair action.')
f3RsaKeyPairActionLength = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 26, 3), RsaKeyLengthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3RsaKeyPairActionLength.setStatus('current')
if mibBuilder.loadTexts: f3RsaKeyPairActionLength.setDescription('This is the length of RSA key pair action.')
f3RsaKeyPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 26, 4), )
if mibBuilder.loadTexts: f3RsaKeyPairTable.setStatus('current')
if mibBuilder.loadTexts: f3RsaKeyPairTable.setDescription('A list of RSA key pairs.')
f3RsaKeyPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 26, 4, 1), ).setIndexNames((0, "CM-SECURITY-MIB", "f3RsaKeyPairName"))
if mibBuilder.loadTexts: f3RsaKeyPairEntry.setStatus('current')
if mibBuilder.loadTexts: f3RsaKeyPairEntry.setDescription('A conceptual row in the f3RsaKeyPairTable.')
f3RsaKeyPairName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 26, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: f3RsaKeyPairName.setStatus('current')
if mibBuilder.loadTexts: f3RsaKeyPairName.setDescription('This is a unique name for the key pair.')
f3RsaKeyPairPublicKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 26, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3RsaKeyPairPublicKey.setStatus('current')
if mibBuilder.loadTexts: f3RsaKeyPairPublicKey.setDescription('This is a public key.')
f3CsrAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 1), CsrAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CsrAction.setStatus('current')
if mibBuilder.loadTexts: f3CsrAction.setDescription('This is the action to CSR.')
f3CsrActionCsrName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CsrActionCsrName.setStatus('current')
if mibBuilder.loadTexts: f3CsrActionCsrName.setDescription('This is the name of CSR action.')
f3CsrActionRsaKeyName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CsrActionRsaKeyName.setStatus('current')
if mibBuilder.loadTexts: f3CsrActionRsaKeyName.setDescription('This is the RSA key name of CSR action.')
f3CsrActionCountry = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CsrActionCountry.setStatus('current')
if mibBuilder.loadTexts: f3CsrActionCountry.setDescription('This is the country of CSR action.')
f3CsrActionState = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CsrActionState.setStatus('current')
if mibBuilder.loadTexts: f3CsrActionState.setDescription('This is the state of CSR action.')
f3CsrActionLocality = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CsrActionLocality.setStatus('current')
if mibBuilder.loadTexts: f3CsrActionLocality.setDescription('This is the locality of CSR action.')
f3CsrActionOrganization = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CsrActionOrganization.setStatus('current')
if mibBuilder.loadTexts: f3CsrActionOrganization.setDescription('This is the organization of CSR action.')
f3CsrActionOrganizationUnit = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CsrActionOrganizationUnit.setStatus('current')
if mibBuilder.loadTexts: f3CsrActionOrganizationUnit.setDescription('This is the organization unit of CSR action.')
f3CsrActionCommonName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CsrActionCommonName.setStatus('current')
if mibBuilder.loadTexts: f3CsrActionCommonName.setDescription('This is the common name of CSR action.')
f3CsrActionEmail = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CsrActionEmail.setStatus('current')
if mibBuilder.loadTexts: f3CsrActionEmail.setDescription('This is the email of CSR action.')
f3CsrActionSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CsrActionSerialNumber.setStatus('current')
if mibBuilder.loadTexts: f3CsrActionSerialNumber.setDescription('This is the serial number of CSR action.')
f3CsrActionAlternativeName = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CsrActionAlternativeName.setStatus('current')
if mibBuilder.loadTexts: f3CsrActionAlternativeName.setDescription('This is the alternative name of CSR action.')
f3CertSigningRequestTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 13), )
if mibBuilder.loadTexts: f3CertSigningRequestTable.setStatus('current')
if mibBuilder.loadTexts: f3CertSigningRequestTable.setDescription('A list of CSR.')
f3CertSigningRequestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 13, 1), ).setIndexNames((0, "CM-SECURITY-MIB", "f3CertSigningRequestName"))
if mibBuilder.loadTexts: f3CertSigningRequestEntry.setStatus('current')
if mibBuilder.loadTexts: f3CertSigningRequestEntry.setDescription('A conceptual row in the f3CertSigningRequestTable.')
f3CertSigningRequestName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 13, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: f3CertSigningRequestName.setStatus('current')
if mibBuilder.loadTexts: f3CertSigningRequestName.setDescription('This is a unique name for CSR.')
f3CertSigningRequestRsaKeyPairName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CertSigningRequestRsaKeyPairName.setStatus('current')
if mibBuilder.loadTexts: f3CertSigningRequestRsaKeyPairName.setDescription('This is the Key pair name.')
f3CertSigningRequestCsrData = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CertSigningRequestCsrData.setStatus('current')
if mibBuilder.loadTexts: f3CertSigningRequestCsrData.setDescription('This is the CSR data.')
f3CertSigningRequestAutoEnrollmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 27, 13, 1, 4), AutoEnrollmentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CertSigningRequestAutoEnrollmentStatus.setStatus('current')
if mibBuilder.loadTexts: f3CertSigningRequestAutoEnrollmentStatus.setDescription('This is the auto enrollment status.')
cmSecurityUserTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5), )
if mibBuilder.loadTexts: cmSecurityUserTable.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserTable.setDescription('A list of entries corresponding to the security users. \n             Entries cannot be created in this table by management\n             application action.')
cmSecurityUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1), ).setIndexNames((0, "CM-SECURITY-MIB", "cmSecurityUserName"), (0, "CM-SECURITY-MIB", "cmSecurityUserRemoteUser"))
if mibBuilder.loadTexts: cmSecurityUserEntry.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserEntry.setDescription('An entry containing information applicable to a particular\n             security user.')
cmSecurityUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSecurityUserName.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserName.setDescription('Security User Name.')
cmSecurityUserComment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSecurityUserComment.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserComment.setDescription('Notes on Security User.')
cmSecurityUserPrivLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 3), CmSecurityPrivLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSecurityUserPrivLevel.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserPrivLevel.setDescription('Security User Privilege Level.')
cmSecurityUserLoginTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSecurityUserLoginTimeout.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserLoginTimeout.setDescription('Security User Login Timeout.')
cmSecurityUserNumFailedLoginAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSecurityUserNumFailedLoginAttempts.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserNumFailedLoginAttempts.setDescription('Security User Number of Failed Login Attempts.')
cmSecurityUserLastLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSecurityUserLastLoginTime.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserLastLoginTime.setDescription('Security User Last Login Time.')
cmSecurityUserLockedout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSecurityUserLockedout.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserLockedout.setDescription('Whether the security user has been locked out.')
cmSecurityUserLastLockedoutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSecurityUserLastLockedoutTime.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserLastLockedoutTime.setDescription('Security User Last Locked out Time.')
cmSecurityUserCliPagingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSecurityUserCliPagingEnable.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserCliPagingEnable.setDescription('Whether the security user has CLI paging enabled.')
cmSecurityUserRemoteUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSecurityUserRemoteUser.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserRemoteUser.setDescription('Whether the security user is a remote user.')
cmSecurityUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSecurityUserPassword.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserPassword.setDescription('Password of the security user. \n          Note that this attribute is a SET only attribute.')
cmSecurityUserStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 12), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSecurityUserStorageType.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserStorageType.setDescription('The type of storage configured for this entry.')
cmSecurityUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSecurityUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmSecurityUserRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmSecurityUserRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmSecurityUserRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmSecurityUserAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 14), SecurityUserAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSecurityUserAction.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserAction.setDescription('This object provides ability to perform specific actions on security user.\n                 remove-lockout - this removes the locked out condition on the security user\n            .')
cmSecurityCryptoPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSecurityCryptoPassword.setStatus('current')
if mibBuilder.loadTexts: cmSecurityCryptoPassword.setDescription('Second level password used in connectguard configurations.\n          This applies only to crypto users.\n          Note that this attribute is a SET only attribute.')
cmSecurityUserRemoteCryptoUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSecurityUserRemoteCryptoUser.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserRemoteCryptoUser.setDescription('Indicates if a security user is a remote crypto user.')
cmSecurityUserSso2fa = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 5, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmSecurityUserSso2fa.setStatus('current')
if mibBuilder.loadTexts: cmSecurityUserSso2fa.setDescription('If enabled, user can be used to bypass remote authentication if\n          cmSso2faControl is enabled. This parameter can only be set on user creation')
cmRemoteAuthServerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 6), )
if mibBuilder.loadTexts: cmRemoteAuthServerTable.setStatus('current')
if mibBuilder.loadTexts: cmRemoteAuthServerTable.setDescription('A list of entries corresponding to the remote authentication \n             servers.\n             Entries cannot be created in this table by management\n             application action.')
cmRemoteAuthServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 6, 1), ).setIndexNames((0, "CM-SECURITY-MIB", "cmRemoteAuthServerIndex"))
if mibBuilder.loadTexts: cmRemoteAuthServerEntry.setStatus('current')
if mibBuilder.loadTexts: cmRemoteAuthServerEntry.setDescription('An entry containing information applicable to a particular\n             remote authentication server.')
cmRemoteAuthServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRemoteAuthServerIndex.setStatus('current')
if mibBuilder.loadTexts: cmRemoteAuthServerIndex.setDescription('Unique index to address/configure a specific Remote \n          Authentication Server.')
cmRemoteAuthServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 6, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmRemoteAuthServerEnabled.setStatus('current')
if mibBuilder.loadTexts: cmRemoteAuthServerEnabled.setDescription('This object allows enabling/disabling a Remote Authentication Server.')
cmRemoteAuthServerOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 6, 1, 3), CmRemoteAuthOrder()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmRemoteAuthServerOrder.setStatus('current')
if mibBuilder.loadTexts: cmRemoteAuthServerOrder.setDescription('This object determines the order in which the Remote \n          Authentication Servers are accessed for security information.')
cmRemoteAuthServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 6, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmRemoteAuthServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: cmRemoteAuthServerIpAddress.setDescription('This object allows to specify an IP Address for the Remote\n          Authentication Server.')
cmRemoteAuthServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmRemoteAuthServerPort.setStatus('current')
if mibBuilder.loadTexts: cmRemoteAuthServerPort.setDescription('This object allows to specify a Port for Remote Authentication\n          Server.')
cmRemoteAuthServerNumRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmRemoteAuthServerNumRetries.setStatus('current')
if mibBuilder.loadTexts: cmRemoteAuthServerNumRetries.setDescription('This object allows to specify the number of retries the Remote \n          Authentication Server must be tried for security access before\n          giving up.')
cmRemoteAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmRemoteAuthServerTimeout.setStatus('current')
if mibBuilder.loadTexts: cmRemoteAuthServerTimeout.setDescription('This object allows to specify the timeout period for timing\n          out a security access request to the Remote Authentication Server.')
cmRemoteAuthServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmRemoteAuthServerSecret.setStatus('current')
if mibBuilder.loadTexts: cmRemoteAuthServerSecret.setDescription('This allows configuration of secret password for Remote \n          Authentication Server request.')
cmRemoteAuthServerAccountingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmRemoteAuthServerAccountingPort.setStatus('current')
if mibBuilder.loadTexts: cmRemoteAuthServerAccountingPort.setDescription('This object allows to specify a Port for RADIUS Accounting.')
cmRemoteAuthServerIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 6, 1, 10), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmRemoteAuthServerIpVersion.setStatus('current')
if mibBuilder.loadTexts: cmRemoteAuthServerIpVersion.setDescription('This object describe the Ip Version.')
cmRemoteAuthServerIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 6, 1, 11), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmRemoteAuthServerIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: cmRemoteAuthServerIpv6Addr.setDescription('This object describe the Ipv6 Address.')
f3UsmUserTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 9), )
if mibBuilder.loadTexts: f3UsmUserTable.setStatus('current')
if mibBuilder.loadTexts: f3UsmUserTable.setDescription('This table is the extension of the F3 USM User Table.')
f3UsmUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 9, 1), )
usmUserEntry.registerAugmentions(("CM-SECURITY-MIB", "f3UsmUserEntry"))
f3UsmUserEntry.setIndexNames(*usmUserEntry.getIndexNames())
if mibBuilder.loadTexts: f3UsmUserEntry.setStatus('current')
if mibBuilder.loadTexts: f3UsmUserEntry.setDescription('An entry in the F3 USM User Table.')
f3UsmUserAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 9, 1, 1), UsmUserAccessType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsmUserAccessType.setStatus('current')
if mibBuilder.loadTexts: f3UsmUserAccessType.setDescription('This indicates the type of USM User, read-only, read-write, trap-only.')
f3PrivilegeChangeTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15), )
if mibBuilder.loadTexts: f3PrivilegeChangeTable.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeTable.setDescription('This table is used for Restricted User Login via NMS.\n         This is for users with lower privileges to elevate them to higher ones for limited amount of time.')
f3PrivilegeChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15, 1), ).setIndexNames((0, "CM-SECURITY-MIB", "f3PrivilegeChangeId"))
if mibBuilder.loadTexts: f3PrivilegeChangeEntry.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeEntry.setDescription('Column for privilegeChangeTable.')
f3PrivilegeChangeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: f3PrivilegeChangeId.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeId.setDescription('Unique index identifying a request.')
f3PrivilegeChangeUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrivilegeChangeUserName.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeUserName.setDescription('The name string for user authentication purposes')
f3PrivilegeChangeIpv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrivilegeChangeIpv4Address.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeIpv4Address.setDescription("IPv4 address of interface to which user's terminal is connected.")
f3PrivilegeChangeIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrivilegeChangeIpv6Address.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeIpv6Address.setDescription("IPv6 address of interface to which user's terminal is connected.")
f3PrivilegeChangeTerminalIpv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrivilegeChangeTerminalIpv4Address.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeTerminalIpv4Address.setDescription('Source IPv4 address of connected terminal.')
f3PrivilegeChangeTerminalIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15, 1, 6), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrivilegeChangeTerminalIpv6Address.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeTerminalIpv6Address.setDescription('Source IPv6 address of connected terminal.')
f3PrivilegeChangeInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15, 1, 7), UserInterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrivilegeChangeInterface.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeInterface.setDescription('Interface used by the user')
f3PrivilegeChangeCurrentPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15, 1, 8), CmSecurityPrivLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrivilegeChangeCurrentPrivilege.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeCurrentPrivilege.setDescription('Current privilege level of the user, who is requesting role upgrade.')
f3PrivilegeChangeRequestedPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15, 1, 9), CmSecurityPrivLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrivilegeChangeRequestedPrivilege.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeRequestedPrivilege.setDescription('Privilege requested by user for session.')
f3PrivilegeChangeDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 480))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrivilegeChangeDuration.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeDuration.setDescription('Requested time period by user (in minutes).')
f3PrivilegeChangeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15, 1, 11), PrivilegeRequestAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PrivilegeChangeAction.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeAction.setDescription('Privilege request action.')
f3PrivilegeChangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15, 1, 12), PrivilegeRequestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrivilegeChangeState.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeState.setDescription('Privilege request state.')
f3PrivilegeChangeRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15, 1, 13), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrivilegeChangeRemainingTime.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeRemainingTime.setDescription('Time remaining in session with upgrade user privilege (in seconds).')
f3PrivilegeChangeRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 15, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PrivilegeChangeRemoteName.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeRemoteName.setDescription('The name string for Radius/Tacacs authentication purposes.')
f3CaProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 29), )
if mibBuilder.loadTexts: f3CaProfileTable.setStatus('current')
if mibBuilder.loadTexts: f3CaProfileTable.setDescription('A list of Certificate Authority Profiles.')
f3CaProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 29, 1), ).setIndexNames((0, "CM-SECURITY-MIB", "f3CaProfileIndex"))
if mibBuilder.loadTexts: f3CaProfileEntry.setStatus('current')
if mibBuilder.loadTexts: f3CaProfileEntry.setDescription('A conceptual row in the f3CaProfileTable.')
f3CaProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 29, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3CaProfileIndex.setStatus('current')
if mibBuilder.loadTexts: f3CaProfileIndex.setDescription('An integer index used to identify this CA Profile.')
f3CaProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 29, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3CaProfileName.setStatus('current')
if mibBuilder.loadTexts: f3CaProfileName.setDescription('This object provides name for this CA Profile.')
f3CaProfileEnrollmentProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 29, 1, 3), CertificateEnrollmentProtocol().clone('scep')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3CaProfileEnrollmentProtocol.setStatus('current')
if mibBuilder.loadTexts: f3CaProfileEnrollmentProtocol.setDescription('This object allows to specify type of protocol used for\n            automatic certificate enrollment.')
f3CaProfileHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 29, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(80)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3CaProfileHttpPort.setStatus('current')
if mibBuilder.loadTexts: f3CaProfileHttpPort.setDescription('This obect allows to specify TCP port number used by \n            enrollment protocol.')
f3CaProfileAutoRenewalControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 29, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3CaProfileAutoRenewalControl.setStatus('current')
if mibBuilder.loadTexts: f3CaProfileAutoRenewalControl.setDescription('This obect allows to specify whether the client \n            certificate is automatically renewed or re-enrolled.')
f3CaProfileRenewalPercentLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 29, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(75)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3CaProfileRenewalPercentLifetime.setStatus('current')
if mibBuilder.loadTexts: f3CaProfileRenewalPercentLifetime.setDescription('This obect allows to specify percentage of certificate \n            lifetime at which point the automatic certificate \n            renewal process begins.')
f3CaProfileRenewalNewKeyPairGenControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 29, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3CaProfileRenewalNewKeyPairGenControl.setStatus('current')
if mibBuilder.loadTexts: f3CaProfileRenewalNewKeyPairGenControl.setDescription('This obect allows to specify if the RSA key pair is \n            regenerated prior to each certificate renewal.')
f3CaProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 29, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3CaProfileStorageType.setStatus('current')
if mibBuilder.loadTexts: f3CaProfileStorageType.setDescription('The type of storage configured for this entry.')
f3CaProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 29, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3CaProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3CaProfileRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n        \n            The values of f3CaProfileRowStatus supported are\n            createAndGo(4) and destroy(6). All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3CaProfileRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n        \n            The f3CaProfileRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3CaTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 30), )
if mibBuilder.loadTexts: f3CaTable.setStatus('current')
if mibBuilder.loadTexts: f3CaTable.setDescription('A list of Certificate Authority object used for certificate \n         enrollment with CA.')
f3CaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 30, 1), ).setIndexNames((0, "CM-SECURITY-MIB", "f3CaName"))
if mibBuilder.loadTexts: f3CaEntry.setStatus('current')
if mibBuilder.loadTexts: f3CaEntry.setDescription('The conceptual row in f3CaTable.')
f3CaName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 30, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: f3CaName.setStatus('current')
if mibBuilder.loadTexts: f3CaName.setDescription('Unique name used to identify this CA.')
f3CaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 30, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3CaProfile.setStatus('current')
if mibBuilder.loadTexts: f3CaProfile.setDescription('This object provides a pointer to CA Profile used for this CA.')
f3CaUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 30, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3CaUrl.setStatus('current')
if mibBuilder.loadTexts: f3CaUrl.setDescription('This object provides the URL for certificate enrollment with CA.')
f3CaScepQueryMessage = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 30, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3CaScepQueryMessage.setStatus('current')
if mibBuilder.loadTexts: f3CaScepQueryMessage.setDescription('This object provides the SCEP Query Message for certificate\n         enrollment with CA.')
f3CaCertList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 30, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CaCertList.setStatus('current')
if mibBuilder.loadTexts: f3CaCertList.setDescription('This object provides list of CA certificates sent by the CA as\n         the chain of trust.')
f3CaRootCertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 30, 1, 6), CaRootCertStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CaRootCertStatus.setStatus('current')
if mibBuilder.loadTexts: f3CaRootCertStatus.setDescription('This object provides CA root certificate status.')
f3CaLastCsr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 30, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CaLastCsr.setStatus('current')
if mibBuilder.loadTexts: f3CaLastCsr.setDescription('This object provides last CSR name in an enrollment process.')
f3CaAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 30, 1, 8), CaAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CaAction.setStatus('current')
if mibBuilder.loadTexts: f3CaAction.setDescription('This object specifies a CA Action.')
f3CaActionCsrName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 30, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CaActionCsrName.setStatus('current')
if mibBuilder.loadTexts: f3CaActionCsrName.setDescription('This object specifies a CSR Name.\n         Applicable to startAutoEnrollment action.')
f3CaActionChallengePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 30, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CaActionChallengePassword.setStatus('current')
if mibBuilder.loadTexts: f3CaActionChallengePassword.setDescription('This object specifies a challenge password.\n         Applicable to startAutoEnrollment action.')
f3CaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 30, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3CaStorageType.setStatus('current')
if mibBuilder.loadTexts: f3CaStorageType.setDescription('The type of storage configured for this entry.')
f3CaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 1, 30, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3CaRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3CaRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3CaRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3CaRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The f3CaRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3SecurityTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 3, 1))
if mibBuilder.loadTexts: f3SecurityTrap.setStatus('current')
if mibBuilder.loadTexts: f3SecurityTrap.setDescription('This is security trap. Security traps are reported\n             according to value of f3SecurityTrapType object.')
f3PrivilegeChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 3, 2)).setObjects(("CM-SECURITY-MIB", "f3PrivilegeChangeState"), ("CM-SECURITY-MIB", "f3PrivilegeChangeUserName"), ("CM-SECURITY-MIB", "f3PrivilegeChangeIpv4Address"), ("CM-SECURITY-MIB", "f3PrivilegeChangeIpv6Address"), ("CM-SECURITY-MIB", "f3PrivilegeChangeTerminalIpv4Address"), ("CM-SECURITY-MIB", "f3PrivilegeChangeTerminalIpv6Address"), ("CM-SECURITY-MIB", "f3PrivilegeChangeInterface"), ("CM-SECURITY-MIB", "f3PrivilegeChangeCurrentPrivilege"), ("CM-SECURITY-MIB", "f3PrivilegeChangeRequestedPrivilege"), ("CM-SECURITY-MIB", "f3PrivilegeChangeDuration"))
if mibBuilder.loadTexts: f3PrivilegeChangeTrap.setStatus('current')
if mibBuilder.loadTexts: f3PrivilegeChangeTrap.setDescription('This trap is sent every time a privilege change request is changed (added, modified, removed).')
cmSecurityCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 2, 1))
cmSecurityGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 2, 2))
cmSecurityCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 2, 1, 1)).setObjects(("CM-SECURITY-MIB", "cmSecurityObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmSecurityCompliance = cmSecurityCompliance.setStatus('current')
if mibBuilder.loadTexts: cmSecurityCompliance.setDescription('Describes the requirements for conformance to the CM Security\n             group.')
cmSecurityObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 2, 2, 1)).setObjects(("CM-SECURITY-MIB", "cmAuthProtocol"), ("CM-SECURITY-MIB", "cmAccessOrder"), ("CM-SECURITY-MIB", "cmAuthType"), ("CM-SECURITY-MIB", "cmNASIpAddress"), ("CM-SECURITY-MIB", "cmSecurityPolicyStrength"), ("CM-SECURITY-MIB", "cmRemoteAuthServerAccountingEnabled"), ("CM-SECURITY-MIB", "cmAnonymizeLogTimeInDays"), ("CM-SECURITY-MIB", "f3Sso2faControl"), ("CM-SECURITY-MIB", "f3NasIpAddressType"), ("CM-SECURITY-MIB", "f3SshCipherStrengthHighControl"), ("CM-SECURITY-MIB", "f3TacacsPrivLevelControlEnabled"), ("CM-SECURITY-MIB", "f3TacacsDefaultPrivLevel"), ("CM-SECURITY-MIB", "f3NasIpv6Addr"), ("CM-SECURITY-MIB", "f3SecurityTrapType"), ("CM-SECURITY-MIB", "f3SecurityTrapInfo"), ("CM-SECURITY-MIB", "cmSecurityUserName"), ("CM-SECURITY-MIB", "cmSecurityUserComment"), ("CM-SECURITY-MIB", "cmSecurityUserPrivLevel"), ("CM-SECURITY-MIB", "cmSecurityUserLoginTimeout"), ("CM-SECURITY-MIB", "cmSecurityUserNumFailedLoginAttempts"), ("CM-SECURITY-MIB", "cmSecurityUserLastLoginTime"), ("CM-SECURITY-MIB", "cmSecurityUserLockedout"), ("CM-SECURITY-MIB", "cmSecurityUserLastLockedoutTime"), ("CM-SECURITY-MIB", "cmSecurityUserCliPagingEnable"), ("CM-SECURITY-MIB", "cmSecurityUserRemoteUser"), ("CM-SECURITY-MIB", "cmSecurityUserPassword"), ("CM-SECURITY-MIB", "cmSecurityUserStorageType"), ("CM-SECURITY-MIB", "cmSecurityUserRowStatus"), ("CM-SECURITY-MIB", "cmSecurityUserAction"), ("CM-SECURITY-MIB", "cmSecurityCryptoPassword"), ("CM-SECURITY-MIB", "cmSecurityUserRemoteCryptoUser"), ("CM-SECURITY-MIB", "cmSecurityUserSso2fa"), ("CM-SECURITY-MIB", "cmRemoteAuthServerIndex"), ("CM-SECURITY-MIB", "cmRemoteAuthServerEnabled"), ("CM-SECURITY-MIB", "cmRemoteAuthServerOrder"), ("CM-SECURITY-MIB", "cmRemoteAuthServerIpAddress"), ("CM-SECURITY-MIB", "cmRemoteAuthServerPort"), ("CM-SECURITY-MIB", "cmRemoteAuthServerNumRetries"), ("CM-SECURITY-MIB", "cmRemoteAuthServerTimeout"), ("CM-SECURITY-MIB", "cmRemoteAuthServerSecret"), ("CM-SECURITY-MIB", "cmRemoteAuthServerAccountingPort"), ("CM-SECURITY-MIB", "cmRemoteAuthServerIpVersion"), ("CM-SECURITY-MIB", "cmRemoteAuthServerIpv6Addr"), ("CM-SECURITY-MIB", "f3UsmUserAccessType"), ("CM-SECURITY-MIB", "f3PrivilegeChangeUserName"), ("CM-SECURITY-MIB", "f3PrivilegeChangeIpv4Address"), ("CM-SECURITY-MIB", "f3PrivilegeChangeIpv6Address"), ("CM-SECURITY-MIB", "f3PrivilegeChangeTerminalIpv4Address"), ("CM-SECURITY-MIB", "f3PrivilegeChangeTerminalIpv6Address"), ("CM-SECURITY-MIB", "f3PrivilegeChangeInterface"), ("CM-SECURITY-MIB", "f3PrivilegeChangeCurrentPrivilege"), ("CM-SECURITY-MIB", "f3PrivilegeChangeRequestedPrivilege"), ("CM-SECURITY-MIB", "f3PrivilegeChangeDuration"), ("CM-SECURITY-MIB", "f3PrivilegeChangeAction"), ("CM-SECURITY-MIB", "f3PrivilegeChangeState"), ("CM-SECURITY-MIB", "f3PrivilegeChangeRemainingTime"), ("CM-SECURITY-MIB", "f3PrivilegeChangeRemoteName"), ("CM-SECURITY-MIB", "f3RadiusSendVendorAvpEnabled"), ("CM-SECURITY-MIB", "f3RadiusRealm"), ("CM-SECURITY-MIB", "icmpV4Filter"), ("CM-SECURITY-MIB", "icmpV4DropEchoRequests"), ("CM-SECURITY-MIB", "icmpV6Filter"), ("CM-SECURITY-MIB", "icmpV6DropEchoRequests"), ("CM-SECURITY-MIB", "icmpV6DropNeighborSolicitation"), ("CM-SECURITY-MIB", "icmpV6DropRouterAdvertisement"), ("CM-SECURITY-MIB", "icmpV6DropNeighborAdvertisement"), ("CM-SECURITY-MIB", "icmpV6DropRouterSolicitation"), ("CM-SECURITY-MIB", "f3FipsOperationMode"), ("CM-SECURITY-MIB", "f3FipsSecuritySelfTestFailureCount"), ("CM-SECURITY-MIB", "f3FipsSecuritySelfTestResult"), ("CM-SECURITY-MIB", "f3FipsSecuritySelfTestStatus"), ("CM-SECURITY-MIB", "f3FipsAction"), ("CM-SECURITY-MIB", "f3HttpsSslCertExpNotifPeriod"), ("CM-SECURITY-MIB", "f3HttpsSslKeyPair"), ("CM-SECURITY-MIB", "f3SslCertificateAction"), ("CM-SECURITY-MIB", "f3SslCertificateActionPairName"), ("CM-SECURITY-MIB", "f3SslCertificatePrivateKeyPairName"), ("CM-SECURITY-MIB", "f3SslCertificatePrivateKeyPairSslCertificate"), ("CM-SECURITY-MIB", "f3SslCertificatePrivateKeyPairPrivateKeyPresent"), ("CM-SECURITY-MIB", "f3RsaKeyPairName"), ("CM-SECURITY-MIB", "f3RsaKeyPairPublicKey"), ("CM-SECURITY-MIB", "f3RsaKeyPairAction"), ("CM-SECURITY-MIB", "f3RsaKeyPairActionName"), ("CM-SECURITY-MIB", "f3RsaKeyPairActionLength"), ("CM-SECURITY-MIB", "f3CsrAction"), ("CM-SECURITY-MIB", "f3CsrActionCsrName"), ("CM-SECURITY-MIB", "f3CsrActionRsaKeyName"), ("CM-SECURITY-MIB", "f3CsrActionCountry"), ("CM-SECURITY-MIB", "f3CsrActionState"), ("CM-SECURITY-MIB", "f3CsrActionLocality"), ("CM-SECURITY-MIB", "f3CsrActionOrganization"), ("CM-SECURITY-MIB", "f3CsrActionOrganizationUnit"), ("CM-SECURITY-MIB", "f3CsrActionCommonName"), ("CM-SECURITY-MIB", "f3CsrActionEmail"), ("CM-SECURITY-MIB", "f3CsrActionSerialNumber"), ("CM-SECURITY-MIB", "f3CsrActionAlternativeName"), ("CM-SECURITY-MIB", "f3CertSigningRequestName"), ("CM-SECURITY-MIB", "f3CertSigningRequestRsaKeyPairName"), ("CM-SECURITY-MIB", "f3CertSigningRequestCsrData"), ("CM-SECURITY-MIB", "f3CertSigningRequestAutoEnrollmentStatus"), ("CM-SECURITY-MIB", "f3SslCertificatePrivateKeyPairRsaKeyPairName"), ("CM-SECURITY-MIB", "f3SslCertificatePrivateKeyPairCertificateType"), ("CM-SECURITY-MIB", "f3SslCertificatePrivateKeyPairCertificateStatus"), ("CM-SECURITY-MIB", "f3SslCertificatePrivateKeyPairAction"), ("CM-SECURITY-MIB", "f3SslCertificateActionKeyName"), ("CM-SECURITY-MIB", "f3CaProfileName"), ("CM-SECURITY-MIB", "f3CaProfileEnrollmentProtocol"), ("CM-SECURITY-MIB", "f3CaProfileHttpPort"), ("CM-SECURITY-MIB", "f3CaProfileAutoRenewalControl"), ("CM-SECURITY-MIB", "f3CaProfileRenewalPercentLifetime"), ("CM-SECURITY-MIB", "f3CaProfileRenewalNewKeyPairGenControl"), ("CM-SECURITY-MIB", "f3CaProfileStorageType"), ("CM-SECURITY-MIB", "f3CaProfileRowStatus"), ("CM-SECURITY-MIB", "f3CaProfile"), ("CM-SECURITY-MIB", "f3CaScepQueryMessage"), ("CM-SECURITY-MIB", "f3CaUrl"), ("CM-SECURITY-MIB", "f3CaCertList"), ("CM-SECURITY-MIB", "f3CaRootCertStatus"), ("CM-SECURITY-MIB", "f3CaLastCsr"), ("CM-SECURITY-MIB", "f3CaAction"), ("CM-SECURITY-MIB", "f3CaActionCsrName"), ("CM-SECURITY-MIB", "f3CaActionChallengePassword"), ("CM-SECURITY-MIB", "f3CaStorageType"), ("CM-SECURITY-MIB", "f3CaRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmSecurityObjectGroup = cmSecurityObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cmSecurityObjectGroup.setDescription('A collection of objects used to manage the CM Security\n             group.')
cmSecurityNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 10, 2, 2, 2)).setObjects(("CM-SECURITY-MIB", "f3SecurityTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmSecurityNotifGroup = cmSecurityNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cmSecurityNotifGroup.setDescription('A collection of notifications used in the CM Security\n              group.')
mibBuilder.exportSymbols("CM-SECURITY-MIB", icmpV6DropRouterSolicitation=icmpV6DropRouterSolicitation, f3CaProfile=f3CaProfile, CaRootCertStatus=CaRootCertStatus, CertificateEnrollmentProtocol=CertificateEnrollmentProtocol, icmpV6Filter=icmpV6Filter, f3RsaKeyPairActionLength=f3RsaKeyPairActionLength, PrivilegeRequestState=PrivilegeRequestState, f3CaActionCsrName=f3CaActionCsrName, f3FipsSecuritySelfTestStatus=f3FipsSecuritySelfTestStatus, cmSecurityUserRemoteCryptoUser=cmSecurityUserRemoteCryptoUser, ZeroizeKeysAction=ZeroizeKeysAction, f3RsaKeyPairName=f3RsaKeyPairName, f3UsmUserTable=f3UsmUserTable, f3TacacsDefaultPrivLevel=f3TacacsDefaultPrivLevel, f3RsaKeyPairEntry=f3RsaKeyPairEntry, cmRemoteAuthServerPort=cmRemoteAuthServerPort, cmIcmpV6Objects=cmIcmpV6Objects, f3RsaKeyPairAction=f3RsaKeyPairAction, cmAuthProtocol=cmAuthProtocol, f3CsrActionCountry=f3CsrActionCountry, f3CsrActionCommonName=f3CsrActionCommonName, CertificateStatus=CertificateStatus, cmRemoteAuthServerTimeout=cmRemoteAuthServerTimeout, f3SslCertificateActionKeyName=f3SslCertificateActionKeyName, f3NasIpv6Addr=f3NasIpv6Addr, cmSecurityUserCliPagingEnable=cmSecurityUserCliPagingEnable, f3PrivilegeChangeTerminalIpv4Address=f3PrivilegeChangeTerminalIpv4Address, AutoEnrollmentStatus=AutoEnrollmentStatus, icmpV6DropNeighborAdvertisement=icmpV6DropNeighborAdvertisement, f3CsrActionOrganization=f3CsrActionOrganization, cmSecurityUserComment=cmSecurityUserComment, cmSecurityUserLockedout=cmSecurityUserLockedout, SnmpSecurityTrapType=SnmpSecurityTrapType, f3SslCertificatePrivateKeyPairRsaKeyPairName=f3SslCertificatePrivateKeyPairRsaKeyPairName, CmRemoteAuthOrder=CmRemoteAuthOrder, f3SslCertificatePrivateKeyPairTable=f3SslCertificatePrivateKeyPairTable, f3SecurityTrapInfo=f3SecurityTrapInfo, cmSecurityObjects=cmSecurityObjects, f3NasIpAddressType=f3NasIpAddressType, cmSecurityUserRemoteUser=cmSecurityUserRemoteUser, f3PrivilegeChangeTable=f3PrivilegeChangeTable, cmSecurityCompliance=cmSecurityCompliance, icmpV4Filter=icmpV4Filter, f3FipsAction=f3FipsAction, f3PrivilegeChangeRemoteName=f3PrivilegeChangeRemoteName, f3CsrActionAlternativeName=f3CsrActionAlternativeName, f3RsaKeyPairPublicKey=f3RsaKeyPairPublicKey, cmSecurityCryptoPassword=cmSecurityCryptoPassword, PrivilegeRequestAction=PrivilegeRequestAction, f3HttpsSslCertExpNotifPeriod=f3HttpsSslCertExpNotifPeriod, f3PrivilegeChangeInterface=f3PrivilegeChangeInterface, RunSelfTestAction=RunSelfTestAction, icmpV6DropRouterAdvertisement=icmpV6DropRouterAdvertisement, f3RadiusRealm=f3RadiusRealm, f3SslCertificateObjects=f3SslCertificateObjects, f3RsaKeyPairObjects=f3RsaKeyPairObjects, f3UsmUserAccessType=f3UsmUserAccessType, cmSecurityUserRowStatus=cmSecurityUserRowStatus, cmIcmpV4Objects=cmIcmpV4Objects, SslCertificateAction=SslCertificateAction, f3SecurityTrapType=f3SecurityTrapType, cmSecurityUserSso2fa=cmSecurityUserSso2fa, f3CsrActionEmail=f3CsrActionEmail, cmRemoteAuthServerNumRetries=cmRemoteAuthServerNumRetries, cmRemoteAuthServerAccountingPort=cmRemoteAuthServerAccountingPort, f3CertSigningRequestObjects=f3CertSigningRequestObjects, SecuritySelfTestStatus=SecuritySelfTestStatus, f3CaTable=f3CaTable, f3PrivilegeChangeId=f3PrivilegeChangeId, f3FipsObjects=f3FipsObjects, f3CertSigningRequestName=f3CertSigningRequestName, f3CsrActionCsrName=f3CsrActionCsrName, cmSecurityNotifGroup=cmSecurityNotifGroup, f3HttpsSslKeyPair=f3HttpsSslKeyPair, f3CaProfileRenewalNewKeyPairGenControl=f3CaProfileRenewalNewKeyPairGenControl, f3CsrAction=f3CsrAction, f3SecurityTrap=f3SecurityTrap, f3Sso2faControl=f3Sso2faControl, icmpV6DropNeighborSolicitation=icmpV6DropNeighborSolicitation, CmSecurityAccessOrder=CmSecurityAccessOrder, cmAccessOrder=cmAccessOrder, CmRemoteAuthProtocol=CmRemoteAuthProtocol, cmSecurityUserNumFailedLoginAttempts=cmSecurityUserNumFailedLoginAttempts, f3PrivilegeChangeCurrentPrivilege=f3PrivilegeChangeCurrentPrivilege, f3CaLastCsr=f3CaLastCsr, f3SslCertificateActionPairName=f3SslCertificateActionPairName, RsaKeyPairAction=RsaKeyPairAction, cmRemoteAuthServerIpAddress=cmRemoteAuthServerIpAddress, f3CsrActionSerialNumber=f3CsrActionSerialNumber, f3PrivilegeChangeTerminalIpv6Address=f3PrivilegeChangeTerminalIpv6Address, cmSecurityUserStorageType=cmSecurityUserStorageType, f3RadiusSendVendorAvpEnabled=f3RadiusSendVendorAvpEnabled, f3CaProfileStorageType=f3CaProfileStorageType, PYSNMP_MODULE_ID=cmSecurityMIB, f3SslCertificatePrivateKeyPairCertificateType=f3SslCertificatePrivateKeyPairCertificateType, cmRemoteAuthServerEnabled=cmRemoteAuthServerEnabled, f3PrivilegeChangeAction=f3PrivilegeChangeAction, SslCertificatePrivateKeyPairAction=SslCertificatePrivateKeyPairAction, f3CsrActionState=f3CsrActionState, f3FipsSecuritySelfTestFailureCount=f3FipsSecuritySelfTestFailureCount, cmSecurityUserTable=cmSecurityUserTable, cmAuthType=cmAuthType, UsmUserAccessType=UsmUserAccessType, f3CsrActionRsaKeyName=f3CsrActionRsaKeyName, f3SslCertificatePrivateKeyPairSslCertificate=f3SslCertificatePrivateKeyPairSslCertificate, f3CsrActionLocality=f3CsrActionLocality, RsaKeyLengthType=RsaKeyLengthType, cmSecurityUserPrivLevel=cmSecurityUserPrivLevel, cmSecurityUserLoginTimeout=cmSecurityUserLoginTimeout, f3PrivilegeChangeIpv4Address=f3PrivilegeChangeIpv4Address, f3PrivilegeChangeRemainingTime=f3PrivilegeChangeRemainingTime, cmRemoteAuthServerIpVersion=cmRemoteAuthServerIpVersion, f3CertSigningRequestEntry=f3CertSigningRequestEntry, f3CaProfileEntry=f3CaProfileEntry, f3SslCertificateAction=f3SslCertificateAction, cmSecurityObjectGroup=cmSecurityObjectGroup, f3CaProfileEnrollmentProtocol=f3CaProfileEnrollmentProtocol, cmSecurityCompliances=cmSecurityCompliances, cmAnonymizeLogTimeInDays=cmAnonymizeLogTimeInDays, cmSecurityUserAction=cmSecurityUserAction, f3TacacsPrivLevelControlEnabled=f3TacacsPrivLevelControlEnabled, f3CaProfileHttpPort=f3CaProfileHttpPort, f3SslCertificatePrivateKeyPairEntry=f3SslCertificatePrivateKeyPairEntry, NasIpAddressType=NasIpAddressType, f3PrivilegeChangeDuration=f3PrivilegeChangeDuration, SecuritySelfTestResult=SecuritySelfTestResult, icmpV4DropEchoRequests=icmpV4DropEchoRequests, f3RsaKeyPairActionName=f3RsaKeyPairActionName, f3CaScepQueryMessage=f3CaScepQueryMessage, cmRemoteAuthServerAccountingEnabled=cmRemoteAuthServerAccountingEnabled, cmNASIpAddress=cmNASIpAddress, CmSecurityPrivLevel=CmSecurityPrivLevel, f3PrivilegeChangeEntry=f3PrivilegeChangeEntry, f3CaProfileTable=f3CaProfileTable, f3CaProfileName=f3CaProfileName, f3UserPrivRspTimeout=f3UserPrivRspTimeout, f3CertSigningRequestAutoEnrollmentStatus=f3CertSigningRequestAutoEnrollmentStatus, cmSecurityGroups=cmSecurityGroups, f3CaProfileRowStatus=f3CaProfileRowStatus, f3CaProfileRenewalPercentLifetime=f3CaProfileRenewalPercentLifetime, f3SslCertificatePrivateKeyPairCertificateStatus=f3SslCertificatePrivateKeyPairCertificateStatus, f3UserPrivMgmtControl=f3UserPrivMgmtControl, f3CaRowStatus=f3CaRowStatus, f3CaUrl=f3CaUrl, f3CaAction=f3CaAction, cmRemoteAuthServerOrder=cmRemoteAuthServerOrder, f3CsrActionOrganizationUnit=f3CsrActionOrganizationUnit, cmSecurityUserPassword=cmSecurityUserPassword, f3CertSigningRequestRsaKeyPairName=f3CertSigningRequestRsaKeyPairName, f3PrivilegeChangeRequestedPrivilege=f3PrivilegeChangeRequestedPrivilege, SecurityUserAction=SecurityUserAction, f3PrivilegeChangeUserName=f3PrivilegeChangeUserName, f3FipsSecuritySelfTestResult=f3FipsSecuritySelfTestResult, icmpV6DropEchoRequests=icmpV6DropEchoRequests, cmSecurityNotifications=cmSecurityNotifications, cmSecurityUserLastLockedoutTime=cmSecurityUserLastLockedoutTime, f3CaCertList=f3CaCertList, f3CaActionChallengePassword=f3CaActionChallengePassword, cmSecurityUserEntry=cmSecurityUserEntry, f3CertSigningRequestTable=f3CertSigningRequestTable, f3CaProfileAutoRenewalControl=f3CaProfileAutoRenewalControl, CaAction=CaAction, CmSecurityAuthType=CmSecurityAuthType, f3SslCertificatePrivateKeyPairAction=f3SslCertificatePrivateKeyPairAction, f3PrivilegeChangeState=f3PrivilegeChangeState, f3RsaKeyPairTable=f3RsaKeyPairTable, cmRemoteAuthServerEntry=cmRemoteAuthServerEntry, f3FipsOperationMode=f3FipsOperationMode, cmRemoteAuthServerTable=cmRemoteAuthServerTable, cmRemoteAuthServerSecret=cmRemoteAuthServerSecret, cmRemoteAuthServerIpv6Addr=cmRemoteAuthServerIpv6Addr, cmSecurityUserLastLoginTime=cmSecurityUserLastLoginTime, f3PrivilegeChangeTrap=f3PrivilegeChangeTrap, CmSecurityPolicyStrength=CmSecurityPolicyStrength, f3SshCipherStrengthHighControl=f3SshCipherStrengthHighControl, cmSecurityConformance=cmSecurityConformance, cmSecurityUserName=cmSecurityUserName, f3CaProfileIndex=f3CaProfileIndex, f3CaName=f3CaName, f3UsmUserEntry=f3UsmUserEntry, cmSecurityPolicyStrength=cmSecurityPolicyStrength, f3CaRootCertStatus=f3CaRootCertStatus, CsrAction=CsrAction, f3CaStorageType=f3CaStorageType, f3CaEntry=f3CaEntry, CertificateType=CertificateType, f3SslCertificatePrivateKeyPairPrivateKeyPresent=f3SslCertificatePrivateKeyPairPrivateKeyPresent, cmSecurityMIB=cmSecurityMIB, f3SslCertificatePrivateKeyPairName=f3SslCertificatePrivateKeyPairName, f3CertSigningRequestCsrData=f3CertSigningRequestCsrData, cmRemoteAuthServerIndex=cmRemoteAuthServerIndex, f3PrivilegeChangeIpv6Address=f3PrivilegeChangeIpv6Address)
