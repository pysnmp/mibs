#
# PySNMP MIB module CM-ENTITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/CM-ENTITY-MIB
# Produced by pysmi-1.1.12 at Wed Sep 18 06:42:26 2024
# On host fv-az1780-151 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
CmPmIntervalType, UsbOperationalMode, SecondaryState, RestartType, AdminState, VlanId, OperationalState, TDMFrequencySourceType = mibBuilder.importSymbols("CM-COMMON-MIB", "CmPmIntervalType", "UsbOperationalMode", "SecondaryState", "RestartType", "AdminState", "VlanId", "OperationalState", "TDMFrequencySourceType")
CmAutoProvMode, = mibBuilder.importSymbols("CM-SYSTEM-MIB", "CmAutoProvMode")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, ModuleIdentity, Unsigned32, MibIdentifier, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, ObjectIdentity, NotificationType, Counter64, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "Unsigned32", "MibIdentifier", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "ObjectIdentity", "NotificationType", "Counter64", "Bits", "TimeTicks")
StorageType, VariablePointer, TruthValue, RowStatus, DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "VariablePointer", "TruthValue", "RowStatus", "DateAndTime", "DisplayString", "TextualConvention")
cmEntityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3))
cmEntityMIB.setRevisions(('2021-01-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cmEntityMIB.setRevisionsDescriptions(('  \n               Notes from release 202002170000Z\n               (1) Added new table f3StorageDeviceTable\n\n               Notes from release 202002060000Z\n               (1) Added new attribute to serverCardTable\n               \n               Notes from release 201911050000Z\n               (1) Added new literal CompositeClock to CardType\n               (2) New compositeClockCardTable, with columns:\n                    compositeClockCardEntityIndex, \n                    compositeClockCardAdminState,\n                    compositeClockCardOperationalState, \n                    compositeClockCardSecondaryState,\n                    compositeClockCardRowStatus,    \n                    compositeClockCardAlias\n               (3) New Conformance Group: compositeClockCardGroup \n\n               Notes from release 201909150000Z\n               (1) Added new literal MbGnss to CardType\n               (2) New mbGnssCardTable, with columns:\n                    mbGnssCardEntityIndex, \n                    mbGnssCardAdminState,\n                    mbGnssCardOperationalState, \n                    mbGnssCardSecondaryState,\n                    mbGnssCardRowStatus,    \n                    mbGnssCardAlias\n               (3) New Conformance Group: mbGnssCardGroup \n\n               Notes from release 201909130000Z\n               (1) Added new literal irig to CardType\n               (2) New f3IrigCardTable, with columns:\n                  f3IrigCardEntityIndex, f3IrigCardAlias,\n                  f3IrigCardAdminState, ff3IrigCardOperationalState,\n                  f3IrigCardSecondaryState, f3IrigCardTemperature,\n                  f3IrigCardStorageType, f3IrigCardRowStatus\n               (3) New Conformance Group: f3IrigCardGroup \n\t       \n               Notes from release 201903070000Z\n               (1) Added new literal eth-xg-118proac-sh to CardType\n               (2) Added new literal onerackunit-xg118proacSH to ShelfType\n               (3) Added new literal eth-xg-118proac-sh to CardType\n               (4) Added ethernetNTEXG118PROACSHCardTable\n               (5) Added nteXg118ProacSHCardGroup\n\n               Notes from release 201901300000Z\n               (1) Added auxPortCardTemperature column\n                   in auxPortCardTable entry\n               (2) Added ge4PortCardTemperature column\n                   in ge4PortCardTable entry\n               (3) Added bits16PortCardTemperature column\n                   in bits16PortCardTable entry\n           \n               Notes from release 201901070000Z\n               (1) Added ethernetNTEOSA5401CardTableRestartAction \n               (2) Added ethernetNTEOSA5405CardTableRestartAction\n\n               Notes from release 201809240000Z\n               (1) Added new literal ccxg118proSH to NetworkElementType\n               (2) Added new literal onerackunit-xg118proSH to ShelfType\n               (3) Added new literal eth-xg-118pro-sh to CardType\n               (4) Added ethernetNTEXG118PROSHCardTable\n               (5) Added nteXg118ProSHCardGroup\n               \n               Notes from release 201804190000Z\n               (1) Added new literal ccxg116proH to NetworkElementType\n               (2) Added new literal onerackunit-xg116proH to ShelfType\n               (3) Added new literal eth-xg-116pro-h to CardType\n               (4) Added ethernetNTEXG116PROHCardTable\n               (5) Added nteXg116ProHCardGroup\n\n               Notes from release 201802210000Z\n               (1) Added table: ethernetOsa3350MgntCardTable\n               (2) New textual convention: ResyncType\n\n               Notes from release 201802020000Z\n               (1) Added ethernetNTEGE102ProHCardTable and ethernetNTEGE102ProEFMHCardTable\n               (2) Added new literals to NetworkElementType, ShelfType and CardType.\n               \n               Notes from release 201709050000Z\n               (1) add auxPortCardTable\n\n               Notes from release 201708220000Z\n               (1) add ccosa5430, ccosa5440 to NetworkElementType\n               (2) add onerackunit-osa5430, threerackunit-osa5440 to ShelfType\n               (3) add ethernetCSMCardTable\n\n               Notes from release 201705290000Z\n               (1) add osa5401, osa5405 to ShelfType\n               (2) add eth-osa5401, eth-osa5405 to CardType\n               (3) add ethernetNTEOSA5401CardTable\n               (4) add ethernetNTEOSA5405CardTable\n\n               Notes from release 201603170000Z\n               (1) add ethGe112ProVm to CardType\n               (2) add ethGe112ProVmTable\n\n               Notes from release 201603170000Z\n               (1) add ethGe114ProVmH, ethGe114ProVmCH, ethGe114ProVmCSH, serverCard to CardType\n               (2) add serverCardTable\n\n               Notes from release 201603060000Z\n               (1) add bits-x16 bits-x16 to CardType\n               (2) add bits16PortCardTable\n\n           Notes from release 20150519000Z\n               1) change the OID of ethernetNTEXG210CCardTable to 55 \n               2) change the OID of ethernetGE8SCryptoConnectorCardTable to 56\n\n               Notes from release 201502040000Z\n               (1) add ccxg210c to NetworkElementType\n               (2) add eth-ge-8sc-cc to CardType\n               (3) add onerackunit-xg210c to ShelfType\n               (4) add ethernetNTEXG210CardTable\n               (5) add ethernetGE8SCryptoConnectorCardTable\n\n             Notes from release 201501270000Z,\n             (1) Added new NetworkElementType literal:\n                 - ccosa5411.\n\n             (2) Added new ShelfType literal:\n                 - onerackunit-osa5411.\n\n             (3) Added new CardType literal:\n                 - eth-osa5411.\n\n             Notes from release 201407180000Z,\n             (1) Added new NetworkElementType literal:\n                 - sh1pcs.\n\n             (2) Added new ShelfType literal:\n                 - onerackunit-sh1pcs.\n\n             (3) Added new CardType literal:\n                 - eth-sh1pcs.\n\n             Notes from release 201209180000Z,\n             (1) New table ethernetGE8SCCCardTable  \n\n             Notes from release 201207190000Z,\n             (1) New textual convention: PSNEncapsulationMode\n             (2) New pseudoWireOcnStmCardTable object: pseudoWireOcnStmCardPSNEncapsulation\n             (3) New pseudoWireE1T1CardTable object: pseudoWireE1T1CardPSNEncapsulation\n\n             Notes from release 201201090000Z\n             (1)Added the following new objects,\n                  scuFlashModelNum, scuFlashFirmwareRev, scuFlashSerialNum, \n                  nemiFlashModelNum, nemiFlashFirmwareRev, nemiFlashSerialNum\n\n             Notes from release 201002120000Z\n             (1)Updated NetworkElementType TC with ccge201 and ccge201se\n             (2)Updated ShelfType TC with onerackunit-ge201, onerackunit-ge201se\n             (3)Updated CardType TC with eth-ge-201, eth-ge-201se, \n                   eth-10-100-1000-nte and scu-t\n             (4)New tables for scuTTable, ethernetNTECardTable, \n                ethernetNTEGE201CardTable and ethernetNTEGE201SyncECardTable  \n             (5)Added lag as SlotType\n\n             Notes from release 200903160000Z\n             This release is applicable to the FSP150CC Release 4.1 \n             devices GE101 and GE206.\n             (1)Textual Convention NetworkElementType is updated \n                with additional enumeration literals, \n                  ccge101, ccge206 \n             (2)Textual Convention ShelfType is updated \n                with additional enumeration literals, \n                  onerackunit-ge101, onerackunit-ge206 \n             (3)Textual Convention CardType is updated \n                with additional enumeration literals, \n                  eth-ge-101, eth-ge-206\n             (4)ethernetNTEGE101CardTable is the new table that \n                  represents the GE101. \n             (5)ethernetNTEGE206CardTable is the new table that \n                  represents the GE206. \n             (6)pseudoWireE3CardTable is the new table that \n                  represents the Pseudo Wire E3 card.\n             (7)slotTable has new attribute slotCardPhysicalAddress \n             (8)ethernet1x10GCardTable is the new table that \n                  represents the 1x10GCard.\n             (9)ethernet10x1GCardTable is the new table that \n                  represents the 10x1GCard.\n             (10)ethernetSWFCardTable is the new table that \n                  represents the SWF Card.\n                  \n             (11)stuTable is the new table that \n                  represents the stu Card.\n             (12)amiTable is the new table that \n                  represents the ami Card.\n             (13)stiTable is the new table that \n                  represents the sti Card.\n                            \n             Notes from release 200803030000Z,\n             (1)MIB version ready for release FSP150CM 3.1.',))
if mibBuilder.loadTexts: cmEntityMIB.setLastUpdated('202101270000Z')
if mibBuilder.loadTexts: cmEntityMIB.setOrganization('ADVA Optical Networking SE')
if mibBuilder.loadTexts: cmEntityMIB.setContactInfo('Web URL: http://adva.com/\n        E-mail:  support@adva.com\n        Postal:  ADVA Optical Networking SE\n             Campus Martinsried\n             Fraunhoferstrasse 9a\n             82152 Martinsried/Munich\n             Germany\n        Phone: +49 089 89 06 65 0\n        Fax:  +49 089 89 06 65 199 ')
if mibBuilder.loadTexts: cmEntityMIB.setDescription('This module defines the Entity MIB definitions used by \n             the F3 (FSP150CM/CC) product lines.  These definitions are \n             vendor specific extensions to the standard ENTITY MIB (RFC2737). \n             Copyright (C) ADVA.')
cmEntityObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1))
cmEntityConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2))
class NeProvAction(TextualConvention, Integer32):
    description = 'Network Element Action to accept or decline the Network Element.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("accept", 1), ("decline", 2))

class NetworkElementType(TextualConvention, Integer32):
    description = 'Network Element Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57))
    namedValues = NamedValues(("onerackunit", 1), ("hubshelf", 2), ("cle", 3), ("aggregation", 4), ("cpmr", 5), ("ccge101", 6), ("ccge206", 7), ("ccge201", 8), ("ccge201se", 9), ("ccge206f", 10), ("ccge112", 11), ("ccge114", 12), ("ccge206v", 13), ("ccxg210", 14), ("cct1804", 15), ("cct3204", 16), ("ccsyncprobe", 17), ("ccge114h", 18), ("ccge114ph", 19), ("ccge114sh", 20), ("ccge114s", 21), ("sh1pcs", 22), ("ccosa5411", 23), ("ccge112pro", 24), ("ccge112proM", 25), ("ccge114pro", 26), ("ccge114proC", 27), ("ccge114proSH", 28), ("ccge114proCSH", 29), ("ccge114proHE", 30), ("ccge112proH", 31), ("ccxg210c", 32), ("ccosa5420", 33), ("ccosa5421", 34), ("ccge114g", 35), ("ccge114proVmH", 36), ("ccge114proVmCH", 37), ("ccge114proVmCSH", 38), ("ccge101pro", 39), ("ccgo102ProS", 40), ("ccgo102ProSP", 41), ("cccx101Pro30A", 42), ("cccx102Pro30A", 43), ("ccxg116pro", 44), ("ccxg120pro", 45), ("ccge112proVm", 46), ("ccosa5430", 47), ("ccosa5440", 48), ("ge102proh", 49), ("ge102proefmh", 50), ("ccxg116proH", 51), ("ccgo102ProSM", 52), ("ccxg118proSH", 53), ("ccxg118proacSH", 54), ("ccge114proVmSH", 55), ("ccge104", 56), ("ccxg120proSH", 57))

class SlotType(TextualConvention, Integer32):
    description = 'Slot Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("scu", 1), ("psu", 2), ("fan", 3), ("generic", 4), ("lag", 5), ("nemi", 6), ("stu", 7), ("swf-140g", 8), ("ami", 9), ("sti", 10))

class ShelfType(TextualConvention, Integer32):
    description = 'Shelf Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59))
    namedValues = NamedValues(("onerackunit", 1), ("hubshelf", 2), ("cle", 3), ("aggregation", 4), ("cpmr", 5), ("onerackunit-ge101", 6), ("onerackunit-ge206", 7), ("onerackunit-ge201", 8), ("onerackunit-ge201se", 9), ("onerackunit-ge206f", 10), ("onerackunit-ge112", 11), ("onerackunit-ge114", 12), ("onerackunit-ge206v", 13), ("onerackunit-xg210", 14), ("onerackunit-t1804", 15), ("onerackunit-t3204", 16), ("onerackunit-syncprobe", 17), ("onerackunit-ge114h", 18), ("onerackunit-ge114ph", 19), ("onerackunit-ge114sh", 20), ("onerackunit-ge114s", 21), ("onerackunit-sh1pcs", 22), ("onerackunit-osa5411", 23), ("onerackunitGe112Pro", 24), ("ge112ProM", 25), ("onerackunitGe114Pro", 26), ("onerackunitGe114ProC", 27), ("onerackunitGe114ProSH", 28), ("onerackunitGe114ProCSH", 29), ("onerackunitGe114ProHE", 30), ("onerackunitGe112ProH", 31), ("onerackunit-xg210c", 32), ("onerackunit-osa5420", 33), ("onerackunit-osa5421", 34), ("onerackunit-ge114g", 35), ("onerackunitGe114ProVmH", 36), ("onerackunitGe114ProVmCH", 37), ("onerackunitGe114ProVmCSH", 38), ("ge101pro", 39), ("go102proS", 40), ("go102proSP", 41), ("onerackunit-cx101pro30A", 42), ("onerackunit-cx102pro30A", 43), ("onerackunit-xg116pro", 44), ("onerackunit-xg120pro", 45), ("onerackunitGe112ProVm", 46), ("osa5401", 47), ("osa5405", 48), ("onerackunit-osa5430", 49), ("threerackunit-osa5440", 50), ("ge102proh", 51), ("ge102proefmh", 52), ("onerackunit-xg116proH", 53), ("go102proSM", 54), ("onerackunit-xg118proSH", 55), ("onerackunit-xg118proacSH", 56), ("onerackunitGe114ProVmSH", 57), ("onerackunitGe104", 58), ("onerackunit-xg120proSH", 59))

class ShelfAction(TextualConvention, Integer32):
    description = 'Shelf Action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("initiateLampTest", 1), ("initiateACO", 2), ("coldRestart", 3))

class PsuType(TextualConvention, Integer32):
    description = 'Power Supply Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("ac", 1), ("dc", 2))

class CardType(TextualConvention, Integer32):
    description = 'Card Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99))
    namedValues = NamedValues(("none", 1), ("psu", 2), ("fan", 3), ("nemi", 4), ("scu", 5), ("eth-10-100-1000-ntu", 6), ("eth-cpmr", 7), ("eth-ge-101", 8), ("eth-ge-206", 9), ("eth-ge-201", 10), ("eth-ge-201se", 11), ("eth-10-100-1000-nte", 12), ("scu-t", 13), ("eth-ge-206f", 14), ("eth-xg-1x", 15), ("swf-140g", 16), ("stu", 17), ("eth-ge-10s", 18), ("ami", 19), ("sti", 20), ("eth-ge-112", 21), ("eth-ge-114", 22), ("eth-ge-206v", 23), ("eth-ge-4e-cc", 24), ("eth-ge-4s-cc", 25), ("eth-xg-210", 26), ("eth-xg-1x-cc", 27), ("eth-xg-1s-cc", 28), ("stm1-4-et", 29), ("pwe3-ocnstm", 30), ("pwe3-e1t1", 31), ("eth-xg-1x-h", 32), ("eth-ge-10s-h", 33), ("eth-t1804", 34), ("eth-t3204", 35), ("eth-ge-syncprobe", 36), ("eth-ge-8s-cc", 37), ("eth-ge-114h", 38), ("eth-ge-114ph", 39), ("eth-fe-36e", 40), ("eth-ge-114sh", 41), ("eth-ge-114s", 42), ("sti-h", 43), ("stu-h", 44), ("eth-ge-8e-cc", 45), ("eth-sh1pcs", 46), ("eth-osa5411", 47), ("ethGe112Pro", 48), ("ethGe112ProM", 49), ("ethGe114Pro", 50), ("ethGe114ProC", 51), ("ethGe114ProSH", 52), ("ethGe114ProCSH", 53), ("ethGe114ProHE", 54), ("ethGe112ProH", 55), ("eth-xg-210c", 56), ("eth-ge-8sc-cc", 57), ("eth-osa5420", 58), ("eth-osa5421", 59), ("bits-x16", 60), ("eth-ge-114g", 61), ("ethGe114ProVmH", 62), ("ethGe114ProVmCH", 63), ("ethGe114ProVmCSH", 64), ("serverCard", 65), ("eth-ptpv2-osa", 66), ("gnss-osa", 67), ("thc-osa", 68), ("sgc-osa", 69), ("pps-x16", 70), ("clk-x16", 71), ("todAndPps-x16", 72), ("eth-ge-101pro", 73), ("ethgo102proS", 74), ("ethgo102proSP", 75), ("ethcx101pro30A", 76), ("ethcx102pro30A", 77), ("osa-ge-4s", 78), ("eth-xg-116pro", 79), ("eth-xg-120pro", 80), ("ethGe112ProVm", 81), ("eth-osa5401", 82), ("eth-osa5405", 83), ("eth-csm", 84), ("aux-osa", 85), ("bits-x16-enhanced", 86), ("osa-ge-4s-protected", 87), ("eth-ge-102pro-h", 88), ("eth-ge-102pro-efmh", 89), ("eth-xg-116pro-h", 90), ("ethgo102proSM", 91), ("eth-xg-118pro-sh", 92), ("eth-xg-118proac-sh", 93), ("ethGe114ProVmSH", 94), ("ethGe104", 95), ("eth-xg-120pro-sh", 96), ("irig", 97), ("mb-gnss", 98), ("composite-clock", 99))

class CmCPMRLinkLossFwdMode(TextualConvention, Integer32):
    description = 'Link Loss Forwarding Mode on the CPMR.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("llfmode-none", 1), ("llfmode-acc2acc", 2), ("llfmode-net2acc", 3), ("llfmode-both", 4))

class PWE3OCNSTMCardMode(TextualConvention, Integer32):
    description = 'OCN/STM Card Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("stm4", 1), ("oc12", 2), ("stm1", 3), ("oc3", 4))

class PWE3E1T1CardMode(TextualConvention, Integer32):
    description = 'OCN/STM Card Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("t1-16", 1), ("e1-16", 2))

class PSNEncapsulationMode(TextualConvention, Integer32):
    description = 'OCN/STM Card Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ethernet", 1), ("mpls", 2))

class LLDPEnableAction(TextualConvention, Integer32):
    description = 'Enable (TxAndRx, Tx-Only, Rx-Only) LLDP or Disable LLDP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("enableLLDP", 1), ("disableLLDP", 2), ("enableLLDPTxOnly", 3), ("enableLLDPRxOnly", 4))

class LedControlType(TextualConvention, Integer32):
    description = '.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("normal", 1), ("status-led-only", 2), ("all-disabled", 3))

class ResyncType(TextualConvention, Integer32):
    description = 'Enumerations for Resync Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("no-action", 1), ("resync-to-pps", 2))

class StorageStatus(TextualConvention, Integer32):
    description = 'Enumerations for Storage Status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("formatting", 1), ("empty", 2), ("ready", 3), ("unformatted", 4), ("unmounted", 5))

networkElementTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1), )
if mibBuilder.loadTexts: networkElementTable.setStatus('current')
if mibBuilder.loadTexts: networkElementTable.setDescription('Entries may be auto discovered, or can be explicitly created by \n          SNMP Manager.  Each remotely discovered shelf is represented as \n          a row in this table.')
networkElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"))
if mibBuilder.loadTexts: networkElementEntry.setStatus('current')
if mibBuilder.loadTexts: networkElementEntry.setDescription('A conceptual row in the networkElementTable.')
neIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neIndex.setStatus('current')
if mibBuilder.loadTexts: neIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            a NetworkElement.')
neName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neName.setStatus('current')
if mibBuilder.loadTexts: neName.setDescription("An administratively-assigned name for the\n              Network Element.  By convention, this is the node's\n              fully-qualified domain name.")
neType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 3), NetworkElementType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neType.setStatus('current')
if mibBuilder.loadTexts: neType.setDescription('Type of Network Element.')
neContact = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neContact.setStatus('current')
if mibBuilder.loadTexts: neContact.setDescription('The textual identification of the contact person\n              for the Network Element, together with information\n              on how to contact this person.')
neLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neLocation.setStatus('current')
if mibBuilder.loadTexts: neLocation.setDescription("The physical location of this node (e.g.,\n              `telephone closet, 3rd floor').")
neDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neDescription.setStatus('current')
if mibBuilder.loadTexts: neDescription.setDescription("A textual description of the Network Element.  This value\n              should include the full name and version\n              identification of the system's hardware type,\n              software operating-system, and networking\n              software.  It is mandatory that this only contain\n              printable ASCII characters.")
neCmdPromptPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neCmdPromptPrefix.setStatus('current')
if mibBuilder.loadTexts: neCmdPromptPrefix.setDescription('User specified command prompt prefix, used by the CLI, \n          at the Network Element level.')
neAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neAccepted.setStatus('current')
if mibBuilder.loadTexts: neAccepted.setDescription("Indicates whether or not the Network Element is accepted or not.\n               When the system's autoProvMode(CM-SYSTEM-MIB) is 'confirm',\n               NetworkElement's are discovered with this object as 'false'.\n               User must invoke the 'accept' action on neProvAction object\n               to accept the NetworkElement.")
neFromPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 9), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neFromPort.setStatus('current')
if mibBuilder.loadTexts: neFromPort.setDescription('The Network Element port to which this \n          Network Element is connected.')
neProvAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 10), NeProvAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neProvAction.setStatus('current')
if mibBuilder.loadTexts: neProvAction.setDescription("When the system's autoProvMode(CM-SYSTEM-MIB) is 'confirm',\n           NetworkElement's are discovered with 'neAccepted' \n           object as 'false'.\n           User must invoke the 'accept' action on this object\n           to accept the NetworkElement.  User can invoke the 'decline'\n           action on this object to decline the NetworkElement.")
neStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neStorageType.setStatus('current')
if mibBuilder.loadTexts: neStorageType.setDescription('The type of storage configured for this entry.')
neRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neRowStatus.setStatus('current')
if mibBuilder.loadTexts: neRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of neRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            neRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The neRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
neAutoProvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 13), CmAutoProvMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neAutoProvMode.setStatus('current')
if mibBuilder.loadTexts: neAutoProvMode.setDescription('Autoprovisioning mode which controls automatic creation of cards plugged\n             into the slots of Network Element.\n             Supported values are off(1) and auto(3). When neAutoProvMode is auto then\n             the cards inserted into the slots of Network Element will be automatically\n             provisioned. When neAutoProvMode is off no auto-provisioning will occur.')
neFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 1, 1, 14), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: neFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the Network Element level.\n              Value of this objec is propagated to all the cards beloning to the Network Element.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
shelfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2), )
if mibBuilder.loadTexts: shelfTable.setStatus('current')
if mibBuilder.loadTexts: shelfTable.setDescription('Contains information on shelf within the NetworkElement.\n          In the case of FSP150CM, there is a single shelf for each\n          NetworkElement.')
shelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"))
if mibBuilder.loadTexts: shelfEntry.setStatus('current')
if mibBuilder.loadTexts: shelfEntry.setDescription('A conceptual row in the shelfTable.')
shelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfIndex.setStatus('current')
if mibBuilder.loadTexts: shelfIndex.setDescription('An integer index value used to uniquely identify a Shelf \n            within a NetworkElement.')
shelfEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 2), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfEntityIndex.setStatus('current')
if mibBuilder.loadTexts: shelfEntityIndex.setDescription('Entity Index from ENTITY-MIB for this shelf.')
shelfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 3), ShelfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfType.setStatus('current')
if mibBuilder.loadTexts: shelfType.setDescription('Shelf Type of the shelf.')
shelfbackplaneRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfbackplaneRev.setStatus('current')
if mibBuilder.loadTexts: shelfbackplaneRev.setDescription('The backplane revision number.')
shelfbackplaneDOM = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfbackplaneDOM.setStatus('current')
if mibBuilder.loadTexts: shelfbackplaneDOM.setDescription('Backplane Date of Manufacture.')
shelfbackplaneSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfbackplaneSerialNo.setStatus('current')
if mibBuilder.loadTexts: shelfbackplaneSerialNo.setDescription('Backplane Serial Number.')
shelfAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 7), ShelfAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfAction.setStatus('current')
if mibBuilder.loadTexts: shelfAction.setDescription('Invoke action on the shelf, such as lamp test.')
shelfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 8), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfAdminState.setStatus('current')
if mibBuilder.loadTexts: shelfAdminState.setDescription('Administrative State of the Shelf.')
shelfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 9), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOperationalState.setStatus('current')
if mibBuilder.loadTexts: shelfOperationalState.setDescription('Operational State of the Shelf.')
shelfSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 10), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfSecondaryState.setStatus('current')
if mibBuilder.loadTexts: shelfSecondaryState.setDescription('Secondary State of the Shelf.')
shelfMfgSite = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfMfgSite.setStatus('current')
if mibBuilder.loadTexts: shelfMfgSite.setDescription("This is the shelf's Manufacturer site.")
shelfOscillatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOscillatorType.setStatus('current')
if mibBuilder.loadTexts: shelfOscillatorType.setDescription('The mOscillatorType.')
shelfLedControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 2, 1, 13), LedControlType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfLedControl.setStatus('current')
if mibBuilder.loadTexts: shelfLedControl.setDescription('Led Control of the shelf.')
slotTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3), )
if mibBuilder.loadTexts: slotTable.setStatus('current')
if mibBuilder.loadTexts: slotTable.setDescription('Contains information on slot within the Shelf.')
slotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: slotEntry.setStatus('current')
if mibBuilder.loadTexts: slotEntry.setDescription('A conceptual row in the slotTable.')
slotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIndex.setStatus('current')
if mibBuilder.loadTexts: slotIndex.setDescription('The actual physical slot index that uniquely identify \n            a Slot within a shelf. Slot number 255 is used to indicate system level entities.')
slotEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 2), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotEntityIndex.setStatus('current')
if mibBuilder.loadTexts: slotEntityIndex.setDescription('Entity Index from ENTITY-MIB for this slot.')
slotType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 3), SlotType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotType.setStatus('current')
if mibBuilder.loadTexts: slotType.setDescription("Slot Type of the slot.  'generic' slots can hold NEMI card\n              as well as line cards.")
slotCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 4), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardType.setStatus('current')
if mibBuilder.loadTexts: slotCardType.setDescription('Card Type of the slot.')
slotCardUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardUnitName.setStatus('current')
if mibBuilder.loadTexts: slotCardUnitName.setDescription("This is the inserted card's unit name.")
slotCardFormatVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardFormatVersion.setStatus('current')
if mibBuilder.loadTexts: slotCardFormatVersion.setDescription("This is the inserted card's format version.")
slotCardCLEICode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardCLEICode.setStatus('current')
if mibBuilder.loadTexts: slotCardCLEICode.setDescription("This is the inserted card's CLEI code.")
slotCardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardPartNumber.setStatus('current')
if mibBuilder.loadTexts: slotCardPartNumber.setDescription("This is the inserted card's Part Number.")
slotCardHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardHwRev.setStatus('current')
if mibBuilder.loadTexts: slotCardHwRev.setDescription("This is the inserted card's Hardware Revision.")
slotCardSwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardSwRev.setStatus('current')
if mibBuilder.loadTexts: slotCardSwRev.setDescription("This is the inserted card's Software Revision.")
slotCardSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardSerialNum.setStatus('current')
if mibBuilder.loadTexts: slotCardSerialNum.setDescription("This is the inserted card's Serial Number.")
slotCardMfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardMfgName.setStatus('current')
if mibBuilder.loadTexts: slotCardMfgName.setDescription("This is the inserted card's Manufacturer Name.")
slotCardMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardMfgDate.setStatus('current')
if mibBuilder.loadTexts: slotCardMfgDate.setDescription("This is the inserted card's Manufacturer date.")
slotCardMfgSite = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardMfgSite.setStatus('current')
if mibBuilder.loadTexts: slotCardMfgSite.setDescription("This is the inserted card's Manufacturer site.")
slotSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 15), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSecondaryState.setStatus('current')
if mibBuilder.loadTexts: slotSecondaryState.setDescription('Secondary State of the Slot.')
slotCardPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCardPhysicalAddress.setStatus('current')
if mibBuilder.loadTexts: slotCardPhysicalAddress.setDescription("This is the inserted card's MAC Address, if applicable.")
psuTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4), )
if mibBuilder.loadTexts: psuTable.setStatus('current')
if mibBuilder.loadTexts: psuTable.setDescription('Contains information on Power Supply Units within the Shelf.')
psuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: psuEntry.setStatus('current')
if mibBuilder.loadTexts: psuEntry.setDescription('A conceptual row in the psuTable.')
psuEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuEntityIndex.setStatus('current')
if mibBuilder.loadTexts: psuEntityIndex.setDescription('Entity Index from ENTITY-MIB for this PSU.')
psuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 2), PsuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuType.setStatus('current')
if mibBuilder.loadTexts: psuType.setDescription('PSU Type of the PSU.')
psuAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psuAdminState.setStatus('current')
if mibBuilder.loadTexts: psuAdminState.setDescription('Administrative State of the PSU.')
psuOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuOperationalState.setStatus('current')
if mibBuilder.loadTexts: psuOperationalState.setDescription('Operational State of the PSU.')
psuSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuSecondaryState.setStatus('current')
if mibBuilder.loadTexts: psuSecondaryState.setDescription('Secondary State of the PSU.')
psuOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: psuOutputVoltage.setDescription('Output Voltage of the PSU.')
psuTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuTemperature.setStatus('current')
if mibBuilder.loadTexts: psuTemperature.setDescription('Temperature of the PSU.')
psuOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuOutputCurrent.setStatus('current')
if mibBuilder.loadTexts: psuOutputCurrent.setDescription('Output Current of the PSU.')
psuStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 9), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: psuStorageType.setStatus('current')
if mibBuilder.loadTexts: psuStorageType.setDescription('The type of storage configured for this entry.')
psuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 4, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: psuRowStatus.setStatus('current')
if mibBuilder.loadTexts: psuRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of psuRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            psuRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The psuRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
if mibBuilder.loadTexts: fanTable.setDescription('Contains information on FANs within the Shelf.')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
if mibBuilder.loadTexts: fanEntry.setDescription('A conceptual row in the fanTable.')
fanEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanEntityIndex.setStatus('current')
if mibBuilder.loadTexts: fanEntityIndex.setDescription('Entity Index from ENTITY-MIB for this FAN.')
fanAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanAdminState.setStatus('current')
if mibBuilder.loadTexts: fanAdminState.setDescription('Administrative State of the FAN.')
fanOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanOperationalState.setStatus('current')
if mibBuilder.loadTexts: fanOperationalState.setDescription('Operational State of the FAN.')
fanSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSecondaryState.setStatus('current')
if mibBuilder.loadTexts: fanSecondaryState.setDescription('Secondary State of the FAN.')
fanStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanStorageType.setStatus('current')
if mibBuilder.loadTexts: fanStorageType.setDescription('Storage Type of the FAN.')
fanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fanRowStatus.setStatus('current')
if mibBuilder.loadTexts: fanRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the\n            active state unless all objects in the entry have an\n            appropriate value, as described in the description\n            clause for each writable object.\n\n            The values of fanRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            fanRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The fanRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
scuTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6), )
if mibBuilder.loadTexts: scuTable.setStatus('current')
if mibBuilder.loadTexts: scuTable.setDescription('Contains information on SCU within the Shelf.')
scuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: scuEntry.setStatus('current')
if mibBuilder.loadTexts: scuEntry.setDescription('A conceptual row in the scuTable.')
scuEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuEntityIndex.setStatus('current')
if mibBuilder.loadTexts: scuEntityIndex.setDescription('Entity Index from ENTITY-MIB for the SCU card.')
scuAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scuAdminState.setStatus('current')
if mibBuilder.loadTexts: scuAdminState.setDescription('Administrative State of the SCU.')
scuOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuOperationalState.setStatus('current')
if mibBuilder.loadTexts: scuOperationalState.setDescription('Operational State of the SCU.')
scuSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuSecondaryState.setStatus('current')
if mibBuilder.loadTexts: scuSecondaryState.setDescription('Secondary State of the SCU.')
scuVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuVoltage.setStatus('current')
if mibBuilder.loadTexts: scuVoltage.setDescription('Voltage of the SCU.')
scuTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuTemperature.setStatus('current')
if mibBuilder.loadTexts: scuTemperature.setDescription('Temperature of the SCU.')
scuRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scuRestartAction.setStatus('current')
if mibBuilder.loadTexts: scuRestartAction.setDescription('Allows to perform specified action on the SCU card.')
scuStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scuStorageType.setStatus('current')
if mibBuilder.loadTexts: scuStorageType.setDescription('The type of storage configured for this entry.')
scuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scuRowStatus.setStatus('current')
if mibBuilder.loadTexts: scuRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of scuRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            scuRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The scuRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
scuFlashModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuFlashModelNum.setStatus('current')
if mibBuilder.loadTexts: scuFlashModelNum.setDescription('This provides the Compact Flash Model Number on the SCU card.')
scuFlashFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuFlashFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: scuFlashFirmwareRev.setDescription('This provides the Compact Flash Firmware Revision on the SCU card.')
scuFlashSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 6, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuFlashSerialNum.setStatus('current')
if mibBuilder.loadTexts: scuFlashSerialNum.setDescription('This provides the Compact Flash Serial Number on the SCU card.')
nemiTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7), )
if mibBuilder.loadTexts: nemiTable.setStatus('current')
if mibBuilder.loadTexts: nemiTable.setDescription('Contains information on NEMI within the Shelf.')
nemiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: nemiEntry.setStatus('current')
if mibBuilder.loadTexts: nemiEntry.setDescription('A conceptual row in the nemiTable.')
nemiEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiEntityIndex.setStatus('current')
if mibBuilder.loadTexts: nemiEntityIndex.setDescription('Entity Index from ENTITY-MIB for the NEMI card.')
nemiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nemiAdminState.setStatus('current')
if mibBuilder.loadTexts: nemiAdminState.setDescription('Administrative State of the NEMI.')
nemiOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiOperationalState.setStatus('current')
if mibBuilder.loadTexts: nemiOperationalState.setDescription('Operational State of the NEMI.')
nemiSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiSecondaryState.setStatus('current')
if mibBuilder.loadTexts: nemiSecondaryState.setDescription('Secondary State of the NEMI.')
nemiVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiVoltage.setStatus('current')
if mibBuilder.loadTexts: nemiVoltage.setDescription('Voltage of the NEMI.')
nemiTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiTemperature.setStatus('current')
if mibBuilder.loadTexts: nemiTemperature.setDescription('Temperature of the NEMI.')
nemiRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nemiRestartAction.setStatus('current')
if mibBuilder.loadTexts: nemiRestartAction.setDescription('Allows to perform specified action on the NEMI card.')
nemiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nemiStorageType.setStatus('current')
if mibBuilder.loadTexts: nemiStorageType.setDescription('The type of storage configured for this entry.')
nemiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nemiRowStatus.setStatus('current')
if mibBuilder.loadTexts: nemiRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of nemiRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            nemiRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The nemiRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
nemiForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nemiForceOffLineAction.setStatus('current')
if mibBuilder.loadTexts: nemiForceOffLineAction.setDescription('On some condition, user wishes to make one card out of service \n         and hold the reset signal of the card via AMI. When force offline is enabled, \n         reset signal is held; When force offline is disabled, reset signal is released.')
nemiFlashModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiFlashModelNum.setStatus('current')
if mibBuilder.loadTexts: nemiFlashModelNum.setDescription('This provides the Flash Model Number on the NEMI card.')
nemiFlashFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiFlashFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: nemiFlashFirmwareRev.setDescription('This provides the Flash Firmware Revision on the NEMI card.')
nemiFlashSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 7, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nemiFlashSerialNum.setStatus('current')
if mibBuilder.loadTexts: nemiFlashSerialNum.setDescription('This provides the Flash Serial Number on the NEMI card.')
ethernetNTUCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8), )
if mibBuilder.loadTexts: ethernetNTUCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTUCardTable.setDescription('Contains information on Ethernet NTU Cards within the Shelf.\n          These cards support 10M, 100M and 1G Ethernet Interfaces.')
ethernetNTUCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTUCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTUCardEntry.setDescription('A conceptual row in the ethernetNTUCardTable.')
ethernetNTUCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTUCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTUCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTU Card.')
ethernetNTUCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTUCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTUCardAdminState.setDescription('Administrative State of the Ethernet NTU Card.')
ethernetNTUCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTUCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTUCardOperationalState.setDescription('Operational State of the Ethernet NTU Card.')
ethernetNTUCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTUCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTUCardSecondaryState.setDescription('Secondary State of the Ethernet NTU Card.')
ethernetNTUCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTUCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTUCardVoltage.setDescription('Voltage of the Ethernet NTU Card.')
ethernetNTUCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTUCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTUCardTemperature.setDescription('Temperature of the Ethernet NTU Card.')
ethernetNTUCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTUCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTUCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTU Card.')
ethernetNTUCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTUCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTUCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTU card.')
ethernetNTUCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 9), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTUCardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernetNTUCardStorageType.setDescription('The type of storage configured for this entry.')
ethernetNTUCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 8, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTUCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernetNTUCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernetNTUCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernetNTUCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernetNTUCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernetCPMRCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9), )
if mibBuilder.loadTexts: ethernetCPMRCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardTable.setDescription('Contains information on Ethernet CPMR Cards within the Shelf.')
ethernetCPMRCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetCPMRCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardEntry.setDescription('A conceptual row in the ethernetCPMRCardTable.')
ethernetCPMRCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet CPMR Card.')
ethernetCPMRCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetCPMRCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardAdminState.setDescription('Administrative State of the Ethernet CPMR Card.')
ethernetCPMRCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardOperationalState.setDescription('Operational State of the Ethernet CPMR Card.')
ethernetCPMRCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardSecondaryState.setDescription('Secondary State of the Ethernet CPMR Card.')
ethernetCPMRCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardVoltage.setDescription('Voltage of the Ethernet CPMR Card.')
ethernetCPMRCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardTemperature.setDescription('Temperature of the Ethernet CPMR Card.')
ethernetCPMRCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetCPMRCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardRestartAction.setDescription('Allows to perform specified action on the Ethernet CPMR card.')
ethernetCPMRCardPSU1State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 8), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardPSU1State.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardPSU1State.setDescription('Operational State of Power Supply Unit 1 on Ethernet CPMR chassis.')
ethernetCPMRCardPSU2State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 9), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardPSU2State.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardPSU2State.setDescription('Operational State of Power Supply Unit 2 on Ethernet CPMR chassis.')
ethernetCPMRCardFAN1State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 10), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardFAN1State.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardFAN1State.setDescription('Operational State of FAN 1 on Ethernet CPMR chassis.')
ethernetCPMRCardFAN2State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 11), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardFAN2State.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardFAN2State.setDescription('Operational State of FAN 2 on Ethernet CPMR chassis.')
ethernetCPMRCardPsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 12), PsuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardPsuType.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardPsuType.setDescription('PSU Type on Ethernet CPMR chassis.')
ethernetCPMRCardLLFMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 13), CmCPMRLinkLossFwdMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCPMRCardLLFMode.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardLLFMode.setDescription('Current Link Loss Forwarding Mode on CPMR.')
ethernetCPMRCardLLFModeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 9, 1, 14), CmCPMRLinkLossFwdMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetCPMRCardLLFModeAction.setStatus('current')
if mibBuilder.loadTexts: ethernetCPMRCardLLFModeAction.setDescription('Operation to set the appropriate mode on CPMR.')
ethernetNTEGE101CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10), )
if mibBuilder.loadTexts: ethernetNTEGE101CardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101CardTable.setDescription('Contains information on Ethernet NTE GE101 Cards.\n          These are supported on the FSP150CC GE101 product.')
ethernetNTEGE101CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE101CardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101CardEntry.setDescription('A conceptual row in the ethernetNTEGE101CardTable.')
ethernetNTEGE101CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101CardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE101 Card.')
ethernetNTEGE101CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101CardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101CardAdminState.setDescription('Administrative State of the Ethernet NTE GE101 Card.')
ethernetNTEGE101CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101CardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101CardOperationalState.setDescription('Operational State of the Ethernet NTE GE101 Card.')
ethernetNTEGE101CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101CardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101CardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE101 Card.')
ethernetNTEGE101CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101CardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101CardVoltage.setDescription('Voltage of the Ethernet NTE GE101 Card.')
ethernetNTEGE101CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101CardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101CardTemperature.setDescription('Temperature of the Ethernet NTE GE101 Card.')
ethernetNTEGE101CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101CardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101CardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE101 Card.')
ethernetNTEGE101CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 10, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101CardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101CardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE101 card.')
ethernetNTEGE206CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11), )
if mibBuilder.loadTexts: ethernetNTEGE206CardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206CardTable.setDescription('Contains information on Ethernet NTE GE206 Cards.\n          These are supported on the FSP150CC GE206 product.')
ethernetNTEGE206CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE206CardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206CardEntry.setDescription('A conceptual row in the ethernetNTEGE206CardTable.')
ethernetNTEGE206CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206CardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE206 Card.')
ethernetNTEGE206CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206CardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206CardAdminState.setDescription('Administrative State of the Ethernet NTE GE206 Card.')
ethernetNTEGE206CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206CardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206CardOperationalState.setDescription('Operational State of the Ethernet NTE GE206 Card.')
ethernetNTEGE206CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206CardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206CardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE206 Card.')
ethernetNTEGE206CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206CardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206CardVoltage.setDescription('Voltage of the Ethernet NTE GE206 Card.')
ethernetNTEGE206CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206CardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206CardTemperature.setDescription('Temperature of the Ethernet NTE GE206 Card.')
ethernetNTEGE206CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206CardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206CardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE206 Card.')
ethernetNTEGE206CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206CardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206CardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE206 card.')
ethernetNTEGE206CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 11, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206CardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206CardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
pseudoWireE3CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12), )
if mibBuilder.loadTexts: pseudoWireE3CardTable.setStatus('obsolete')
if mibBuilder.loadTexts: pseudoWireE3CardTable.setDescription('Contains information on Pseudo Wire E3 (Emulation Edge to Edge) Cards.\n          These are supported on the FSP150CC GE206 product.')
pseudoWireE3CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: pseudoWireE3CardEntry.setStatus('obsolete')
if mibBuilder.loadTexts: pseudoWireE3CardEntry.setDescription('A conceptual row in the pseudoWireE3CardTable.')
pseudoWireE3CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE3CardEntityIndex.setStatus('obsolete')
if mibBuilder.loadTexts: pseudoWireE3CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Pseudo Wire E3 Card.')
pseudoWireE3CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardAdminState.setStatus('obsolete')
if mibBuilder.loadTexts: pseudoWireE3CardAdminState.setDescription('Administrative State of the Pseudo Wire E3 Card.')
pseudoWireE3CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE3CardOperationalState.setStatus('obsolete')
if mibBuilder.loadTexts: pseudoWireE3CardOperationalState.setDescription('Operational State of the Pseudo Wire E3 Card.')
pseudoWireE3CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE3CardSecondaryState.setStatus('obsolete')
if mibBuilder.loadTexts: pseudoWireE3CardSecondaryState.setDescription('Secondary State of the Pseudo Wire E3 Card.')
pseudoWireE3CardIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: pseudoWireE3CardIpAddress.setDescription('External management IP Address of the Pseudo Wire E3 Card.')
pseudoWireE3CardIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardIpNetmask.setStatus('obsolete')
if mibBuilder.loadTexts: pseudoWireE3CardIpNetmask.setDescription('External management IP Net mask of the Pseudo Wire E3 Card.')
pseudoWireE3CardIpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardIpGateway.setStatus('obsolete')
if mibBuilder.loadTexts: pseudoWireE3CardIpGateway.setDescription('External management IP Gateway of the Pseudo Wire E3 Card.')
pseudoWireE3CardDhcpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardDhcpEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: pseudoWireE3CardDhcpEnabled.setDescription('External management - whether DHCP is enabled.')
pseudoWireE3CardMgmtVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 9), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardMgmtVlanId.setStatus('obsolete')
if mibBuilder.loadTexts: pseudoWireE3CardMgmtVlanId.setDescription('External management VLAN Id for the Pseudo Wire E3 Card.')
pseudoWireE3CardTimeOfDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 10), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardTimeOfDay.setStatus('obsolete')
if mibBuilder.loadTexts: pseudoWireE3CardTimeOfDay.setDescription('Time of day for the Pseudo Wire E3 Card.')
pseudoWireE3CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 12, 1, 11), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE3CardRestartAction.setStatus('obsolete')
if mibBuilder.loadTexts: pseudoWireE3CardRestartAction.setDescription('Allows to perform restart action on the Pseudo Wire E3 card.')
scuTTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13), )
if mibBuilder.loadTexts: scuTTable.setStatus('current')
if mibBuilder.loadTexts: scuTTable.setDescription('Contains information on SCU-T within the Shelf.')
scuTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: scuTEntry.setStatus('current')
if mibBuilder.loadTexts: scuTEntry.setDescription('A conceptual row in the scuTTable.')
scuTEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuTEntityIndex.setStatus('current')
if mibBuilder.loadTexts: scuTEntityIndex.setDescription('Entity Index from ENTITY-MIB for the SCU-T card.')
scuTAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scuTAdminState.setStatus('current')
if mibBuilder.loadTexts: scuTAdminState.setDescription('Administrative State of the SCU-T.')
scuTOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuTOperationalState.setStatus('current')
if mibBuilder.loadTexts: scuTOperationalState.setDescription('Operational State of the SCU-T.')
scuTSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuTSecondaryState.setStatus('current')
if mibBuilder.loadTexts: scuTSecondaryState.setDescription('Secondary State of the SCU-T.')
scuTVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuTVoltage.setStatus('current')
if mibBuilder.loadTexts: scuTVoltage.setDescription('Voltage of the SCU-T.')
scuTTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scuTTemperature.setStatus('current')
if mibBuilder.loadTexts: scuTTemperature.setDescription('Temperature of the SCU-T.')
scuTRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scuTRestartAction.setStatus('current')
if mibBuilder.loadTexts: scuTRestartAction.setDescription('Allows to perform specified action on the SCU-T card.')
scuTStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scuTStorageType.setStatus('current')
if mibBuilder.loadTexts: scuTStorageType.setDescription('The type of storage configured for this entry.')
scuTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 13, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scuTRowStatus.setStatus('current')
if mibBuilder.loadTexts: scuTRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of scuTRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            neRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The scuTRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernetNTECardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14), )
if mibBuilder.loadTexts: ethernetNTECardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECardTable.setDescription('Contains information on Ethernet NTE Cards within the Shelf.\n          These cards support 10M, 100M and 1G Ethernet Interfaces.')
ethernetNTECardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTECardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECardEntry.setDescription('A conceptual row in the ethernetNTECardTable.')
ethernetNTECardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE Card.')
ethernetNTECardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECardAdminState.setDescription('Administrative State of the Ethernet NTE Card.')
ethernetNTECardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECardOperationalState.setDescription('Operational State of the Ethernet NTE Card.')
ethernetNTECardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECardSecondaryState.setDescription('Secondary State of the Ethernet NTE Card.')
ethernetNTECardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECardVoltage.setDescription('Voltage of the Ethernet NTE Card.')
ethernetNTECardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECardTemperature.setDescription('Temperature of the Ethernet NTE Card.')
ethernetNTECardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE Card.')
ethernetNTECardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE card.')
ethernetNTECardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 9), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTECardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECardStorageType.setDescription('The type of storage configured for this entry.')
ethernetNTECardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 14, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTECardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernetNTECardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernetNTECardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernetNTECardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernetNTEGE201CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15), )
if mibBuilder.loadTexts: ethernetNTEGE201CardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201CardTable.setDescription('Contains information on Ethernet NTE GE201 Cards.\n          These are supported on the FSP150CC GE201 product.')
ethernetNTEGE201CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE201CardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201CardEntry.setDescription('A conceptual row in the ethernetNTEGE201CardTable.')
ethernetNTEGE201CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201CardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE201 Card.')
ethernetNTEGE201CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201CardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201CardAdminState.setDescription('Administrative State of the Ethernet NTE GE201 Card.')
ethernetNTEGE201CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201CardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201CardOperationalState.setDescription('Operational State of the Ethernet NTE GE201 Card.')
ethernetNTEGE201CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201CardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201CardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE201 Card.')
ethernetNTEGE201CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201CardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201CardVoltage.setDescription('Voltage of the Ethernet NTE GE201 Card.')
ethernetNTEGE201CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201CardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201CardTemperature.setDescription('Temperature of the Ethernet NTE GE201 Card.')
ethernetNTEGE201CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201CardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201CardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE201 Card.')
ethernetNTEGE201CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201CardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201CardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE201 card.')
ethernetNTEGE201CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 15, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201CardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201CardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE201SyncECardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16), )
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardTable.setDescription('Contains information on Ethernet NTE GE201SyncE Cards.\n          These are supported on the FSP150CC GE201SyncE product.')
ethernetNTEGE201SyncECardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardEntry.setDescription('A conceptual row in the ethernetNTEGE201SyncECardTable.')
ethernetNTEGE201SyncECardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE201SyncE Card.')
ethernetNTEGE201SyncECardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardAdminState.setDescription('Administrative State of the Ethernet NTE GE201SyncE Card.')
ethernetNTEGE201SyncECardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardOperationalState.setDescription('Operational State of the Ethernet NTE GE201SyncE Card.')
ethernetNTEGE201SyncECardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE201SyncE Card.')
ethernetNTEGE201SyncECardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardVoltage.setDescription('Voltage of the Ethernet NTE GE201SyncE Card.')
ethernetNTEGE201SyncECardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardTemperature.setDescription('Temperature of the Ethernet NTE GE201SyncE Card.')
ethernetNTEGE201SyncECardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE201SyncE Card.')
ethernetNTEGE201SyncECardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE201SyncE card.')
ethernetNTEGE201SyncECardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 16, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE201SyncECardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE206FCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17), )
if mibBuilder.loadTexts: ethernetNTEGE206FCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206FCardTable.setDescription('Contains information on Ethernet NTE GE206F Cards.\n          These are supported on the FSP150CC GE206 product.')
ethernetNTEGE206FCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE206FCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206FCardEntry.setDescription('A conceptual row in the ethernetNTEGE206FCardTable.')
ethernetNTEGE206FCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206FCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206FCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE206 Card.')
ethernetNTEGE206FCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206FCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206FCardAdminState.setDescription('Administrative State of the Ethernet NTE GE206 Card.')
ethernetNTEGE206FCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206FCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206FCardOperationalState.setDescription('Operational State of the Ethernet NTE GE206 Card.')
ethernetNTEGE206FCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206FCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206FCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE206 Card.')
ethernetNTEGE206FCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206FCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206FCardVoltage.setDescription('Voltage of the Ethernet NTE GE206 Card.')
ethernetNTEGE206FCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206FCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206FCardTemperature.setDescription('Temperature of the Ethernet NTE GE206 Card.')
ethernetNTEGE206FCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206FCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206FCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE206 Card.')
ethernetNTEGE206FCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206FCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206FCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE206 card.')
ethernetNTEGE206FCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 17, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206FCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206FCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernet1x10GCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18), )
if mibBuilder.loadTexts: ethernet1x10GCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GCardTable.setDescription('Contains information on Ethernet  1x10G Cards.')
ethernet1x10GCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernet1x10GCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GCardEntry.setDescription('A conceptual row in the ethernet1x10GCardTable.')
ethernet1x10GCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet 1x10G Card.')
ethernet1x10GCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GCardAdminState.setDescription('Administrative State of the Ethernet 1x10G Card.')
ethernet1x10GCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GCardOperationalState.setDescription('Operational State of the Ethernet 1x10G Card.')
ethernet1x10GCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GCardSecondaryState.setDescription('Secondary State of the Ethernet 1x10G Card.')
ethernet1x10GCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GCardTemperature.setDescription('Temperature of the Ethernet 1x10G Card.')
ethernet1x10GCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet 1x10G Card.')
ethernet1x10GCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GCardRestartAction.setDescription('Allows to perform specified action on the Ethernet 1x10G card.')
ethernet1x10GCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet1x10GCardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GCardStorageType.setDescription('The type of storage configured for this entry.')
ethernet1x10GCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet1x10GCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernet1x10GCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernetNTUCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernet1x10GCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernet1x10GCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 18, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GCardForceOffLineAction.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GCardForceOffLineAction.setDescription('On some condition, user wishes to make one card out of service \n         and hold the reset signal of the card via AMI. When force offline is enabled, \n         reset signal is held; When force offline is disabled, reset signal is released.')
ethernet10x1GCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19), )
if mibBuilder.loadTexts: ethernet10x1GCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GCardTable.setDescription('Contains information on Ethernet  10x1G Cards.')
ethernet10x1GCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernet10x1GCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GCardEntry.setDescription('A conceptual row in the ethernet10x1GCardTable.')
ethernet10x1GCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet 10x1G Card.')
ethernet10x1GCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GCardAdminState.setDescription('Administrative State of the Ethernet 10x1G Card.')
ethernet10x1GCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GCardOperationalState.setDescription('Operational State of the Ethernet 10x1G Card.')
ethernet10x1GCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GCardSecondaryState.setDescription('Secondary State of the Ethernet 10x1G Card.')
ethernet10x1GCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GCardTemperature.setDescription('Temperature of the Ethernet 10x1G Card.')
ethernet10x1GCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet 10x1G Card.')
ethernet10x1GCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GCardRestartAction.setDescription('Allows to perform specified action on the Ethernet 10x1G card.')
ethernet10x1GCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet10x1GCardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GCardStorageType.setDescription('The type of storage configured for this entry.')
ethernet10x1GCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet10x1GCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernet10x1GCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernet10x1GCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernet10x1GCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernet10x1GCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 19, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GCardForceOffLineAction.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GCardForceOffLineAction.setDescription('On some condition, user wishes to make one card out of service \n         and hold the reset signal of the card via AMI. When force offline is enabled, \n         reset signal is held; When force offline is disabled, reset signal is released.')
ethernetSWFCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20), )
if mibBuilder.loadTexts: ethernetSWFCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetSWFCardTable.setDescription('Contains information on Ethernet SWF Cards.')
ethernetSWFCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetSWFCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetSWFCardEntry.setDescription('A conceptual row in the ethernetSWFCardTable.')
ethernetSWFCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetSWFCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetSWFCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet SWF Card.')
ethernetSWFCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetSWFCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetSWFCardAdminState.setDescription('Administrative State of the Ethernet SWF Card.')
ethernetSWFCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetSWFCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetSWFCardOperationalState.setDescription('Operational State of the Ethernet SWF Card.')
ethernetSWFCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetSWFCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetSWFCardSecondaryState.setDescription('Secondary State of the Ethernet SWF Card.')
ethernetSWFCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetSWFCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetSWFCardTemperature.setDescription('Temperature of the Ethernet SWF Card.')
ethernetSWFCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 6), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetSWFCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetSWFCardRestartAction.setDescription('Allows to perform specified action on the Ethernet SWF card.')
ethernetSWFCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetSWFCardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernetSWFCardStorageType.setDescription('The type of storage configured for this entry.')
ethernetSWFCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetSWFCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernetSWFCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernetSWFCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernetNTUCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernetSWFCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernetSWFCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 20, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetSWFCardForceOffLineAction.setStatus('current')
if mibBuilder.loadTexts: ethernetSWFCardForceOffLineAction.setDescription('On some condition, user wishes to make one card out of service \n         and hold the reset signal of the card via AMI. When force offline is enabled, \n         reset signal is held; When force offline is disabled, reset signal is released.')
stuCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21), )
if mibBuilder.loadTexts: stuCardTable.setStatus('current')
if mibBuilder.loadTexts: stuCardTable.setDescription('Contains information on STU Cards.')
stuCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: stuCardEntry.setStatus('current')
if mibBuilder.loadTexts: stuCardEntry.setDescription('A conceptual row in the stuCardTable.')
stuCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: stuCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the STU Card.')
stuCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuCardAdminState.setStatus('current')
if mibBuilder.loadTexts: stuCardAdminState.setDescription('Administrative State of the Stu Card.')
stuCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: stuCardOperationalState.setDescription('Operational State of the Stu Card.')
stuCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: stuCardSecondaryState.setDescription('Secondary State of the Stu Card.')
stuCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCardTemperature.setStatus('current')
if mibBuilder.loadTexts: stuCardTemperature.setDescription('Temperature of the Stu Card.')
stuCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 6), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: stuCardRestartAction.setDescription('Allows to perform specified action on the Stu card.')
stuCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stuCardStorageType.setStatus('current')
if mibBuilder.loadTexts: stuCardStorageType.setDescription('The type of storage configured for this entry.')
stuCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stuCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: stuCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of stuCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            stuRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The stuCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
stuCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 21, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuCardForceOffLineAction.setStatus('current')
if mibBuilder.loadTexts: stuCardForceOffLineAction.setDescription('On some condition, user wishes to make one card out of service \n         and hold the reset signal of the card via AMI. When force offline is enabled, \n         reset signal is held; When force offline is disabled, reset signal is released.')
amiTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22), )
if mibBuilder.loadTexts: amiTable.setStatus('current')
if mibBuilder.loadTexts: amiTable.setDescription('Contains information on AMI within the Shelf.')
amiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: amiEntry.setStatus('current')
if mibBuilder.loadTexts: amiEntry.setDescription('A conceptual row in the amiTable.')
amiEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amiEntityIndex.setStatus('current')
if mibBuilder.loadTexts: amiEntityIndex.setDescription('Entity Index from ENTITY-MIB for the AMI card.')
amiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amiAdminState.setStatus('current')
if mibBuilder.loadTexts: amiAdminState.setDescription('Administrative State of the AMI.')
amiOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amiOperationalState.setStatus('current')
if mibBuilder.loadTexts: amiOperationalState.setDescription('Operational State of the AMI.')
amiSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amiSecondaryState.setStatus('current')
if mibBuilder.loadTexts: amiSecondaryState.setDescription('Secondary State of the AMI.')
amiTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amiTemperature.setStatus('current')
if mibBuilder.loadTexts: amiTemperature.setDescription('Temperature of the AMI.')
amiRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 22, 1, 6), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amiRestartAction.setStatus('current')
if mibBuilder.loadTexts: amiRestartAction.setDescription('Allows to perform specified action on the AMI card.')
stiTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23), )
if mibBuilder.loadTexts: stiTable.setStatus('current')
if mibBuilder.loadTexts: stiTable.setDescription('Contains information on STI within the Shelf.')
stiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: stiEntry.setStatus('current')
if mibBuilder.loadTexts: stiEntry.setDescription('A conceptual row in the stiTable.')
stiEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiEntityIndex.setStatus('current')
if mibBuilder.loadTexts: stiEntityIndex.setDescription('Entity Index from ENTITY-MIB for the STI card.')
stiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stiAdminState.setStatus('current')
if mibBuilder.loadTexts: stiAdminState.setDescription('Administrative State of the STI.')
stiOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiOperationalState.setStatus('current')
if mibBuilder.loadTexts: stiOperationalState.setDescription('Operational State of the STI.')
stiSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiSecondaryState.setStatus('current')
if mibBuilder.loadTexts: stiSecondaryState.setDescription('Secondary State of the STI.')
stiTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiTemperature.setStatus('current')
if mibBuilder.loadTexts: stiTemperature.setDescription('Temperature of the STI.')
stiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiStorageType.setStatus('current')
if mibBuilder.loadTexts: stiStorageType.setDescription('The type of storage configured for this entry.')
stiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 23, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiRowStatus.setStatus('current')
if mibBuilder.loadTexts: stiRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of stiRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            stiRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The stiRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3UsbHostTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24), )
if mibBuilder.loadTexts: f3UsbHostTable.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostTable.setDescription('Contains information on Usb Host.')
f3UsbHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-ENTITY-MIB", "f3UsbHostIndex"))
if mibBuilder.loadTexts: f3UsbHostEntry.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostEntry.setDescription('A conceptual row in the f3UsbHostTable.')
f3UsbHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostIndex.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostIndex.setDescription('The actual physical usb host index that uniquely identify \n            a usb host.')
f3UsbHostEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 2), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostEntityIndex.setDescription('Entity Index from ENTITY-MIB for the usb host.')
f3UsbHostUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostUnitName.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostUnitName.setDescription("This is the inserted usb device's unit name.")
f3UsbHostFormatVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostFormatVersion.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostFormatVersion.setDescription("This is the inserted usb device's format version.")
f3UsbHostCLEICode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostCLEICode.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostCLEICode.setDescription("This is the inserted usb device's CLEI code.")
f3UsbHostPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostPartNumber.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostPartNumber.setDescription("This is the inserted usb device's Part Number.")
f3UsbHostHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostHwRev.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostHwRev.setDescription("This is the inserted usb device's Hardware Revision.")
f3UsbHostSwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostSwRev.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostSwRev.setDescription("This is the inserted usb device's Software Revision.")
f3UsbHostSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostSerialNum.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostSerialNum.setDescription("This is the inserted usb device's Serial Number.")
f3UsbHostMfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostMfgName.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostMfgName.setDescription("This is the inserted usb device's Manufacturer Name.")
f3UsbHostMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostMfgDate.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostMfgDate.setDescription("This is the inserted usb device's Manufacturer date.")
f3UsbHostMfgSite = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostMfgSite.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostMfgSite.setDescription("This is the inserted usb device's Manufacturer site.")
f3UsbHostSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 13), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostSecondaryState.setDescription('Secondary State of the usb device.')
f3UsbHostPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbHostPhysicalAddress.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostPhysicalAddress.setDescription("This is the inserted usb device's MAC Address, if applicable.")
f3UsbHostMuxOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 24, 1, 15), UsbOperationalMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbHostMuxOperationalMode.setStatus('current')
if mibBuilder.loadTexts: f3UsbHostMuxOperationalMode.setDescription('This object describe the USB operatioan mode.')
ethernetNTEGE112CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25), )
if mibBuilder.loadTexts: ethernetNTEGE112CardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112CardTable.setDescription('Contains information on Ethernet NTE GE112 Cards.\n          These are supported on the FSP150CC GE112 product.')
ethernetNTEGE112CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE112CardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112CardEntry.setDescription('A conceptual row in the ethernetNTEGE112CardTable.')
class SwitchPortAction(TextualConvention, Integer32):
    description = 'Switch port action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("not-applicable", 0), ("switch", 1))

ethernetNTEGE112CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112CardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE112 Card.')
ethernetNTEGE112CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112CardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112CardAdminState.setDescription('Administrative State of the Ethernet NTE GE112 Card.')
ethernetNTEGE112CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112CardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112CardOperationalState.setDescription('Operational State of the Ethernet NTE GE112 Card.')
ethernetNTEGE112CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112CardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112CardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE112 Card.')
ethernetNTEGE112CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112CardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112CardVoltage.setDescription('Voltage of the Ethernet NTE GE112 Card.')
ethernetNTEGE112CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112CardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112CardTemperature.setDescription('Temperature of the Ethernet NTE GE112 Card.')
ethernetNTEGE112CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112CardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112CardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE112 Card.')
ethernetNTEGE112CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112CardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112CardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE112 card.')
ethernetNTEGE112CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112CardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112CardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE112CardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE112CardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112CardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE112 card.')
ethernetNTEGE112CardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 25, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112CardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112CardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE112 card.')
ethernetNTEGE114CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26), )
if mibBuilder.loadTexts: ethernetNTEGE114CardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114CardTable.setDescription('Contains information on Ethernet NTE GE114 Cards.\n          These are supported on the FSP150CC GE114 product.')
ethernetNTEGE114CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114CardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114CardEntry.setDescription('A conceptual row in the ethernetNTEGE114CardTable.')
ethernetNTEGE114CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114CardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE114 Card.')
ethernetNTEGE114CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114CardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114CardAdminState.setDescription('Administrative State of the Ethernet NTE GE114 Card.')
ethernetNTEGE114CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114CardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114CardOperationalState.setDescription('Operational State of the Ethernet NTE GE114 Card.')
ethernetNTEGE114CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114CardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114CardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE114 Card.')
ethernetNTEGE114CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114CardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114CardVoltage.setDescription('Voltage of the Ethernet NTE GE112 Card.')
ethernetNTEGE114CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114CardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114CardTemperature.setDescription('Temperature of the Ethernet NTE GE114 Card.')
ethernetNTEGE114CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114CardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114CardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE114 Card.')
ethernetNTEGE114CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114CardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114CardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114 card.')
ethernetNTEGE114CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114CardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114CardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114CardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114CardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114CardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE114 card.')
ethernetNTEGE114CardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 26, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114CardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114CardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114 card.')
ethernetNTEGE206VCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27), )
if mibBuilder.loadTexts: ethernetNTEGE206VCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206VCardTable.setDescription('Contains information on Ethernet NTE GE206V Cards.\n          These are supported on the FSP150CC GE206V product.')
ethernetNTEGE206VCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE206VCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206VCardEntry.setDescription('A conceptual row in the ethernetNTEGE206VCardTable.')
ethernetNTEGE206VCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206VCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206VCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE206V Card.')
ethernetNTEGE206VCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206VCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206VCardAdminState.setDescription('Administrative State of the Ethernet NTE GE206V Card.')
ethernetNTEGE206VCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206VCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206VCardOperationalState.setDescription('Operational State of the Ethernet NTE GE206V Card.')
ethernetNTEGE206VCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206VCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206VCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE206V Card.')
ethernetNTEGE206VCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206VCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206VCardVoltage.setDescription('Voltage of the Ethernet NTE GE206V Card.')
ethernetNTEGE206VCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE206VCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206VCardTemperature.setDescription('Temperature of the Ethernet NTE GE206V Card.')
ethernetNTEGE206VCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206VCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206VCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE206V Card.')
ethernetNTEGE206VCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206VCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206VCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE206V card.')
ethernetNTEGE206VCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 27, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE206VCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE206VCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the \n              card level.  This applies to all monitored PM entities. \n              The default value of this attribute is interval-15min.  \n              Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered \n              fine-grained intervals.')
ethernetGE4SCCCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28), )
if mibBuilder.loadTexts: ethernetGE4SCCCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4SCCCardTable.setDescription('Contains information on Ethernet GE206V Optical Port Expander Cards.\n          These are supported on the FSP150CC GE206V product.')
ethernetGE4SCCCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetGE4SCCCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4SCCCardEntry.setDescription('A conceptual row in the ethernetGE4SCCCardTable.')
ethernetGE4SCCCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4SCCCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4SCCCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet GE-4S Connector Card.')
ethernetGE4SCCCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE4SCCCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4SCCCardAdminState.setDescription('Administrative State of the Ethernet GE-4S Connector Card.')
ethernetGE4SCCCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4SCCCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4SCCCardOperationalState.setDescription('Operational State of the Ethernet GE-4S Connector Card.')
ethernetGE4SCCCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4SCCCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4SCCCardSecondaryState.setDescription('Secondary State of the Ethernet GE-4S Connector Card.')
ethernetGE4SCCCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4SCCCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4SCCCardVoltage.setDescription('Voltage of the Ethernet GE-4S Connector Card.')
ethernetGE4SCCCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4SCCCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4SCCCardTemperature.setDescription('Temperature of the Ethernet GE-4S Connector Card.')
ethernetGE4SCCCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE4SCCCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4SCCCardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet GE-4S Connector card.')
ethernetGE4SCCCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE4SCCCardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4SCCCardStorageType.setDescription('The type of storage configured for this entry.')
ethernetGE4SCCCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 28, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE4SCCCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4SCCCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernetGE4SCCCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernetGE4SCCCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernetGE4SCCCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernetGE4ECCCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29), )
if mibBuilder.loadTexts: ethernetGE4ECCCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4ECCCardTable.setDescription('Contains information on Ethernet GE206V Optical Port Expander Cards.\n          These are supported on the FSP150CC GE206V product.')
ethernetGE4ECCCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetGE4ECCCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4ECCCardEntry.setDescription('A conceptual row in the ethernetGE4ECCCardTable.')
ethernetGE4ECCCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4ECCCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4ECCCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet GE-4S Connector Card.')
ethernetGE4ECCCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE4ECCCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4ECCCardAdminState.setDescription('Administrative State of the Ethernet GE-4S Connector Card.')
ethernetGE4ECCCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4ECCCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4ECCCardOperationalState.setDescription('Operational State of the Ethernet GE-4S Connector Card.')
ethernetGE4ECCCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4ECCCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4ECCCardSecondaryState.setDescription('Secondary State of the Ethernet GE-4S Connector Card.')
ethernetGE4ECCCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4ECCCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4ECCCardVoltage.setDescription('Voltage of the Ethernet GE-4S Connector Card.')
ethernetGE4ECCCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE4ECCCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4ECCCardTemperature.setDescription('Temperature of the Ethernet GE-4S Connector Card.')
ethernetGE4ECCCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE4ECCCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4ECCCardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet GE-4S Connector card.')
ethernetGE4ECCCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE4ECCCardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4ECCCardStorageType.setDescription('The type of storage configured for this entry.')
ethernetGE4ECCCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 29, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE4ECCCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernetGE4ECCCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernetGE4ECCCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernetGE4ECCCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernetGE4ECCCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernetNTEXG210CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30), )
if mibBuilder.loadTexts: ethernetNTEXG210CardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CardTable.setDescription('Contains information on Ethernet NTE XG210 Cards.\n          These are supported on the FSP150CC XG210 product.')
ethernetNTEXG210CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG210CardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CardEntry.setDescription('A conceptual row in the ethernetNTEXG210CardTable.')
ethernetNTEXG210CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE XG210 Card.')
ethernetNTEXG210CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CardAdminState.setDescription('Administrative State of the Ethernet NTE XG210 Card.')
ethernetNTEXG210CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CardOperationalState.setDescription('Operational State of the Ethernet NTE XG210 Card.')
ethernetNTEXG210CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CardSecondaryState.setDescription('Secondary State of the Ethernet NTE XG210 Card.')
ethernetNTEXG210CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CardVoltage.setDescription('Voltage of the Ethernet NTE XG210 Card.')
ethernetNTEXG210CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CardTemperature.setDescription('Temperature of the Ethernet NTE XG210 Card.')
ethernetNTEXG210CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE XG210 Card.')
ethernetNTEXG210CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet NTE XG210 card.')
ethernetNTEXG210CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 30, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the \n              card level.  This applies to all monitored PM entities. \n              The default value of this attribute is interval-15min.  \n              Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered \n              fine-grained intervals.')
ethernetXG1XCCCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31), )
if mibBuilder.loadTexts: ethernetXG1XCCCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1XCCCardTable.setDescription('Contains information on Ethernet XG210/SH1PCS XFP Port Expander Cards.\n          These are supported on the FSP150CC XG210, SH1PCS products.')
ethernetXG1XCCCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetXG1XCCCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1XCCCardEntry.setDescription('A conceptual row in the ethernetXG1XCCCardTable.')
ethernetXG1XCCCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1XCCCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1XCCCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet XG-1-XFP \n            Connector Card.')
ethernetXG1XCCCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetXG1XCCCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1XCCCardAdminState.setDescription('Administrative State of the Ethernet XG-1-XFP Connector Card.')
ethernetXG1XCCCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1XCCCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1XCCCardOperationalState.setDescription('Operational State of the Ethernet XG-1-XFP Connector Card.')
ethernetXG1XCCCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1XCCCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1XCCCardSecondaryState.setDescription('Secondary State of the Ethernet XG-1-XFP Connector Card.')
ethernetXG1XCCCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1XCCCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1XCCCardVoltage.setDescription('Voltage of the Ethernet XG-1-XFP Connector Card.')
ethernetXG1XCCCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1XCCCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1XCCCardTemperature.setDescription('Temperature of the Ethernet XG-1-XFP Connector Card.')
ethernetXG1XCCCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetXG1XCCCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1XCCCardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet XG-1-XFP Connector card.')
ethernetXG1XCCCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetXG1XCCCardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1XCCCardStorageType.setDescription('The type of storage configured for this entry.')
ethernetXG1XCCCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 31, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetXG1XCCCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1XCCCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernetXG1XCCCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernetXG1XCCCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernetXG1XCCCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernetXG1SCCCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32), )
if mibBuilder.loadTexts: ethernetXG1SCCCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1SCCCardTable.setDescription('Contains information on Ethernet XG210/SH1PCS SFP+ Port Expander Cards.\n          These are supported on the FSP150CC XG210, SH1PCS products.')
ethernetXG1SCCCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetXG1SCCCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1SCCCardEntry.setDescription('A conceptual row in the ethernetXG1SCCCardTable.')
ethernetXG1SCCCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1SCCCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1SCCCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet XG-1-SFP+ \n            Connector Card.')
ethernetXG1SCCCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetXG1SCCCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1SCCCardAdminState.setDescription('Administrative State of the Ethernet XG-1-SFP+ Connector Card.')
ethernetXG1SCCCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1SCCCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1SCCCardOperationalState.setDescription('Operational State of the Ethernet XG-1-SFP+ Connector Card.')
ethernetXG1SCCCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1SCCCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1SCCCardSecondaryState.setDescription('Secondary State of the Ethernet XG-1-SFP+ Connector Card.')
ethernetXG1SCCCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1SCCCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1SCCCardVoltage.setDescription('Voltage of the Ethernet XG-1-SFP+ Connector Card.')
ethernetXG1SCCCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetXG1SCCCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1SCCCardTemperature.setDescription('Temperature of the Ethernet XG-1-SFP+ Connector Card.')
ethernetXG1SCCCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetXG1SCCCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1SCCCardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet XG-1-SFP+ Connector card.')
ethernetXG1SCCCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetXG1SCCCardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1SCCCardStorageType.setDescription('The type of storage configured for this entry.')
ethernetXG1SCCCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 32, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetXG1SCCCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernetXG1SCCCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernetXG1SCCCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernetXG1SCCCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernetXG1SCCCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
class PortCarrierType(TextualConvention, Integer32):
    description = 'This attribute is to show/set the SONET/SDH mode and OC3/OC12/STM1/STM4 speed for SONET/SDH.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("not-applicable", 0), ("t1", 1), ("e1", 2), ("t3", 3), ("e3", 4), ("oc3", 5), ("oc12", 6), ("stm1", 7), ("stm4", 8))

ethernetOverOCSTMCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33), )
if mibBuilder.loadTexts: ethernetOverOCSTMCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetOverOCSTMCardTable.setDescription('Contains information on STM1-4-ET Cards.')
ethernetOverOCSTMCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetOverOCSTMCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetOverOCSTMCardEntry.setDescription('A conceptual row in the ethernetOverOCSTMCardTable.')
ethernetOverOCSTMCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOverOCSTMCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetOverOCSTMCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the STM1-4-ET Card.')
ethernetOverOCSTMCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOverOCSTMCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetOverOCSTMCardAdminState.setDescription('Administrative State of the STM1-4-ET Card.')
ethernetOverOCSTMCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOverOCSTMCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetOverOCSTMCardOperationalState.setDescription('Operational State of the STM1-4-ET Card.')
ethernetOverOCSTMCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOverOCSTMCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetOverOCSTMCardSecondaryState.setDescription('Secondary State of the STM1-4-ET Card.')
ethernetOverOCSTMCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOverOCSTMCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetOverOCSTMCardTemperature.setDescription('Temperature of the STM1-4-ET Card.')
ethernetOverOCSTMCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOverOCSTMCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetOverOCSTMCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the STM1-4-ET Card.')
ethernetOverOCSTMCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOverOCSTMCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetOverOCSTMCardRestartAction.setDescription('Allows to perform specified action on the STM1-4-ET card.')
ethernetOverOCSTMCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetOverOCSTMCardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernetOverOCSTMCardStorageType.setDescription('The type of storage configured for this entry.')
ethernetOverOCSTMCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetOverOCSTMCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernetOverOCSTMCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernetOverOCSTMCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernet10x1GCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernetOverOCSTMCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernetOverOCSTMCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOverOCSTMCardForceOffLineAction.setStatus('current')
if mibBuilder.loadTexts: ethernetOverOCSTMCardForceOffLineAction.setDescription('On some condition, user wishes to make one card out of service \n         and hold the reset signal of the card via AMI. When force offline is enabled, \n         reset signal is held; When force offline is disabled, reset signal is released.')
ethernetOverOCSTMCardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 33, 1, 11), PortCarrierType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOverOCSTMCardMode.setStatus('current')
if mibBuilder.loadTexts: ethernetOverOCSTMCardMode.setDescription('This attribute is to show/set the SONET/SDH mode and OC3/OC12/STM1/STM4 speed for SONET/SDH..')
pseudoWireOcnStmCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34), )
if mibBuilder.loadTexts: pseudoWireOcnStmCardTable.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardTable.setDescription('Contains information on Pseudo Wire OCN STM Cards. \n          These are supported on the FSP150CC GE206v product.')
pseudoWireOcnStmCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: pseudoWireOcnStmCardEntry.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardEntry.setDescription('A conceptual row in the pseudoWireOcnStmCardTable.')
pseudoWireOcnStmCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireOcnStmCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Pseudo Wire OCN/STM Card.')
pseudoWireOcnStmCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardAdminState.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardAdminState.setDescription('Administrative State of the Pseudo Wire OCN/STM Card.')
pseudoWireOcnStmCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireOcnStmCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardOperationalState.setDescription('Operational State of the Pseudo Wire OCN/STM Card.')
pseudoWireOcnStmCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireOcnStmCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardSecondaryState.setDescription('Secondary State of the Pseudo Wire OCN/STM Card.')
pseudoWireOcnStmCardIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardIpAddress.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardIpAddress.setDescription('IP Address associated with the Pseudo Wire OCN/STM Card.')
pseudoWireOcnStmCardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 6), PWE3OCNSTMCardMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardMode.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardMode.setDescription('Card Mode of with the Pseudo Wire OCN/STM Card.')
pseudoWireOcnStmCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireOcnStmCardVoltage.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardVoltage.setDescription('Voltage of the Pseudo Wire OCN/STM Card.')
pseudoWireOcnStmCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireOcnStmCardTemperature.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardTemperature.setDescription('Temperature of the Pseudo Wire OCN/STM Card.')
pseudoWireOcnStmCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 9), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardRestartAction.setDescription('Allows to perform specified action on the \n              Pseudo Wire OCN/STM card.')
pseudoWireOcnStmCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pseudoWireOcnStmCardStorageType.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardStorageType.setDescription('The type of storage configured for this entry.')
pseudoWireOcnStmCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pseudoWireOcnStmCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of pseudoWireOcnStmCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            pseudoWireOcnStmCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The pseudoWireOcnStmCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
pseudoWireOcnStmCardPSNEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 12), PSNEncapsulationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardPSNEncapsulation.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardPSNEncapsulation.setDescription('This object specifies Packet Switched Network demultiplexing layer \n              header type of the pseudo-wire packets.')
pseudoWireOcnStmCardFreqSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 13), TDMFrequencySourceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardFreqSourceType.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardFreqSourceType.setDescription('This object represents the TDM Frequency source type of OC/STM card.')
pseudoWireOcnStmCardFreqSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 14), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardFreqSource.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardFreqSource.setDescription('This object represents the TDM Frequency source of OC/STM card.')
pseudoWireOcnStmCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 34, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireOcnStmCardForceOffLineAction.setStatus('current')
if mibBuilder.loadTexts: pseudoWireOcnStmCardForceOffLineAction.setDescription('On some condition, user wishes to make one card out of service \n         and hold the reset signal of the card via AMI. When force offline is enabled, \n         reset signal is held; When force offline is disabled, reset signal is released.')
pseudoWireE1T1CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35), )
if mibBuilder.loadTexts: pseudoWireE1T1CardTable.setStatus('current')
if mibBuilder.loadTexts: pseudoWireE1T1CardTable.setDescription('Contains information on Pseudo Wire T1/E1 Cards. \n          These are supported on the FSP150CC GE206v product.')
pseudoWireE1T1CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: pseudoWireE1T1CardEntry.setStatus('current')
if mibBuilder.loadTexts: pseudoWireE1T1CardEntry.setDescription('A conceptual row in the pseudoWireE1T1CardTable.')
pseudoWireE1T1CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE1T1CardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: pseudoWireE1T1CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Pseudo Wire T1/E1 Card.')
pseudoWireE1T1CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE1T1CardAdminState.setStatus('current')
if mibBuilder.loadTexts: pseudoWireE1T1CardAdminState.setDescription('Administrative State of the Pseudo Wire T1/E1 Card.')
pseudoWireE1T1CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE1T1CardOperationalState.setStatus('current')
if mibBuilder.loadTexts: pseudoWireE1T1CardOperationalState.setDescription('Operational State of the Pseudo Wire T1/E1 Card.')
pseudoWireE1T1CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE1T1CardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: pseudoWireE1T1CardSecondaryState.setDescription('Secondary State of the Pseudo Wire T1/E1 Card.')
pseudoWireE1T1CardIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE1T1CardIpAddress.setStatus('current')
if mibBuilder.loadTexts: pseudoWireE1T1CardIpAddress.setDescription('IP Address associated with the Pseudo Wire T1/E1 Card.')
pseudoWireE1T1CardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 6), PWE3E1T1CardMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE1T1CardMode.setStatus('current')
if mibBuilder.loadTexts: pseudoWireE1T1CardMode.setDescription('Card Mode of with the Pseudo Wire T1/E1 Card.')
pseudoWireE1T1CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE1T1CardVoltage.setStatus('current')
if mibBuilder.loadTexts: pseudoWireE1T1CardVoltage.setDescription('Voltage of the Pseudo Wire T1/E1 Card.')
pseudoWireE1T1CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseudoWireE1T1CardTemperature.setStatus('current')
if mibBuilder.loadTexts: pseudoWireE1T1CardTemperature.setDescription('Temperature of the Pseudo Wire T1/E1 Card.')
pseudoWireE1T1CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 9), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE1T1CardRestartAction.setStatus('current')
if mibBuilder.loadTexts: pseudoWireE1T1CardRestartAction.setDescription('Allows to perform specified action on the \n              Pseudo Wire T1/E1 card.')
pseudoWireE1T1CardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pseudoWireE1T1CardStorageType.setStatus('current')
if mibBuilder.loadTexts: pseudoWireE1T1CardStorageType.setDescription('The type of storage configured for this entry.')
pseudoWireE1T1CardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pseudoWireE1T1CardRowStatus.setStatus('current')
if mibBuilder.loadTexts: pseudoWireE1T1CardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of pseudoWireE1T1CardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            pseudoWireE1T1CardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The pseudoWireE1T1CardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
pseudoWireE1T1CardPSNEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 35, 1, 12), PSNEncapsulationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pseudoWireE1T1CardPSNEncapsulation.setStatus('current')
if mibBuilder.loadTexts: pseudoWireE1T1CardPSNEncapsulation.setDescription('This object specifies Packet Switched Network demultiplexing layer \n              header type of the pseudo-wire packets.')
ethernet1x10GHighPerCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36), )
if mibBuilder.loadTexts: ethernet1x10GHighPerCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GHighPerCardTable.setDescription('Contains information on Ethernet 1x10G High Performance Cards.')
ethernet1x10GHighPerCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernet1x10GHighPerCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GHighPerCardEntry.setDescription('A conceptual row in the ethernet1x10GHighPerCardTable.')
ethernet1x10GHighPerCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GHighPerCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet 1x10G High Performance Card.')
ethernet1x10GHighPerCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GHighPerCardAdminState.setDescription('Administrative State of the Ethernet 1x10G High Performance Card.')
ethernet1x10GHighPerCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GHighPerCardOperationalState.setDescription('Operational State of the Ethernet 1x10G High Performance Card.')
ethernet1x10GHighPerCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GHighPerCardSecondaryState.setDescription('Secondary State of the Ethernet 1x10G High Performance Card.')
ethernet1x10GHighPerCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GHighPerCardTemperature.setDescription('Temperature of the Ethernet 1x10G High Performance Card.')
ethernet1x10GHighPerCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GHighPerCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet 1x10G High Performance Card.')
ethernet1x10GHighPerCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GHighPerCardRestartAction.setDescription('Allows to perform specified action on the Ethernet 1x10G High Performance card.')
ethernet1x10GHighPerCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GHighPerCardStorageType.setDescription('The type of storage configured for this entry.')
ethernet1x10GHighPerCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GHighPerCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernet1x10GHighPerCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernetNTUCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernet1x10GHighPerCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernet1x10GHighPerCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 36, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet1x10GHighPerCardForceOffLineAction.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GHighPerCardForceOffLineAction.setDescription('On some condition, user wishes to make one card out of service \n         and hold the reset signal of the card via AMI. When force offline is enabled, \n         reset signal is held; When force offline is disabled, reset signal is released.')
ethernet10x1GHighPerCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37), )
if mibBuilder.loadTexts: ethernet10x1GHighPerCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GHighPerCardTable.setDescription('Contains information on Ethernet 10x1G High Performance Cards.')
ethernet10x1GHighPerCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernet10x1GHighPerCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GHighPerCardEntry.setDescription('A conceptual row in the ethernet10x1GHighPerCardTable.')
ethernet10x1GHighPerCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GHighPerCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet 10x1G High Performance Card.')
ethernet10x1GHighPerCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GHighPerCardAdminState.setDescription('Administrative State of the Ethernet 10x1G High Performance Card.')
ethernet10x1GHighPerCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GHighPerCardOperationalState.setDescription('Operational State of the Ethernet 10x1G High Performance Card.')
ethernet10x1GHighPerCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GHighPerCardSecondaryState.setDescription('Secondary State of the Ethernet 10x1G High Performance Card.')
ethernet10x1GHighPerCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GHighPerCardTemperature.setDescription('Temperature of the Ethernet 10x1G High Performance Card.')
ethernet10x1GHighPerCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GHighPerCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet 10x1G High Performance Card.')
ethernet10x1GHighPerCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GHighPerCardRestartAction.setDescription('Allows to perform specified action on the Ethernet 10x1G High Performance card.')
ethernet10x1GHighPerCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GHighPerCardStorageType.setDescription('The type of storage configured for this entry.')
ethernet10x1GHighPerCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GHighPerCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernet10x1GHighPerCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernet10x1GHighPerCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernet10x1GHighPerCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernet10x1GHighPerCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 37, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernet10x1GHighPerCardForceOffLineAction.setStatus('current')
if mibBuilder.loadTexts: ethernet10x1GHighPerCardForceOffLineAction.setDescription('On some condition, user wishes to make one card out of service \n         and hold the reset signal of the card via AMI. When force offline is enabled, \n         reset signal is held; When force offline is disabled, reset signal is released.')
ethernetNTET1804CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38), )
if mibBuilder.loadTexts: ethernetNTET1804CardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET1804CardTable.setDescription('Contains information on Ethernet NTE T1804 Cards.\n          These are supported on the FSP150CC T1804 product.')
ethernetNTET1804CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTET1804CardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET1804CardEntry.setDescription('A conceptual row in the ethernetNTET1804CardTable.')
ethernetNTET1804CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET1804CardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET1804CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE T1804 Card.')
ethernetNTET1804CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET1804CardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET1804CardAdminState.setDescription('Administrative State of the Ethernet NTE T1804 Card.')
ethernetNTET1804CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET1804CardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET1804CardOperationalState.setDescription('Operational State of the Ethernet NTE T1804 Card.')
ethernetNTET1804CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET1804CardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET1804CardSecondaryState.setDescription('Secondary State of the Ethernet NTE T1804 Card.')
ethernetNTET1804CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET1804CardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET1804CardVoltage.setDescription('Voltage of the Ethernet NTE GE112S Card.')
ethernetNTET1804CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET1804CardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET1804CardTemperature.setDescription('Temperature of the Ethernet NTE T1804 Card.')
ethernetNTET1804CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET1804CardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET1804CardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE T1804 Card.')
ethernetNTET1804CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET1804CardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET1804CardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE T1804 card.')
ethernetNTET1804CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET1804CardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET1804CardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTET1804CardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 38, 1, 10), PortCarrierType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET1804CardMode.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET1804CardMode.setDescription('This attribute is to show/set E1/T1 mode of the NET T1804 card.')
ethernetNTET3204CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39), )
if mibBuilder.loadTexts: ethernetNTET3204CardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET3204CardTable.setDescription('Contains information on Ethernet NTE T3204 Cards.\n          These are supported on the FSP150CC T3204 product.')
ethernetNTET3204CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTET3204CardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET3204CardEntry.setDescription('A conceptual row in the ethernetNTET3204CardTable.')
ethernetNTET3204CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET3204CardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET3204CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE T3204 Card.')
ethernetNTET3204CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET3204CardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET3204CardAdminState.setDescription('Administrative State of the Ethernet NTE T3204 Card.')
ethernetNTET3204CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET3204CardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET3204CardOperationalState.setDescription('Operational State of the Ethernet NTE T3204 Card.')
ethernetNTET3204CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET3204CardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET3204CardSecondaryState.setDescription('Secondary State of the Ethernet NTE T3204 Card.')
ethernetNTET3204CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET3204CardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET3204CardVoltage.setDescription('Voltage of the Ethernet NTE GE112S Card.')
ethernetNTET3204CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTET3204CardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET3204CardTemperature.setDescription('Temperature of the Ethernet NTE T3204 Card.')
ethernetNTET3204CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET3204CardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET3204CardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE T3204 Card.')
ethernetNTET3204CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET3204CardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET3204CardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE T3204 card.')
ethernetNTET3204CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET3204CardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET3204CardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTET3204CardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 39, 1, 10), PortCarrierType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTET3204CardMode.setStatus('current')
if mibBuilder.loadTexts: ethernetNTET3204CardMode.setDescription('This attribute is to show/set E3/T3 mode of the NET T3204 card.')
ethernetNTEGESyncProbeCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40), )
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardTable.setDescription('Contains information on Ethernet NTE-GE SyncProbe Card.\n          These are supported on the FSP150CC GE SyncProbe product.')
ethernetNTEGESyncProbeCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardEntry.setDescription('A conceptual row in the ethernetNTEGESyncProbeCardTable.')
ethernetNTEGESyncProbeCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE SyncProbe Card.')
ethernetNTEGESyncProbeCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardAdminState.setDescription('Administrative State of the Ethernet NTE GE SyncProbe Card.')
ethernetNTEGESyncProbeCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardOperationalState.setDescription('Operational State of the Ethernet NTE GE SyncProbe Card.')
ethernetNTEGESyncProbeCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE SyncProbe Card.')
ethernetNTEGESyncProbeCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardVoltage.setDescription('Voltage of the Ethernet NTE GE SyncProbe Card.')
ethernetNTEGESyncProbeCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardTemperature.setDescription('Temperature of the Ethernet NTE GE SyncProbe Card.')
ethernetNTEGESyncProbeCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE SyncProbe Card.')
ethernetNTEGESyncProbeCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE SyncProbe card.')
ethernetNTEGESyncProbeCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 40, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGESyncProbeCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n       This applies to all monitored PM entities. The default value of this\n       attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n       interval-1day and rollover are not considered fine-grained intervals.')
ethernetGE8SCCCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41), )
if mibBuilder.loadTexts: ethernetGE8SCCCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCCCardTable.setDescription('Contains information on Ethernet XG210/SH1PCS Optical Port Expander Cards.\n          These are supported on the FSP150CC XG210, SH1PCS product.')
ethernetGE8SCCCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetGE8SCCCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCCCardEntry.setDescription('A conceptual row in the ethernetGE8SCCCardTable.')
ethernetGE8SCCCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCCCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCCCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet GE-8S Connector Card.')
ethernetGE8SCCCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE8SCCCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCCCardAdminState.setDescription('Administrative State of the Ethernet GE-8S Connector Card.')
ethernetGE8SCCCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCCCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCCCardOperationalState.setDescription('Operational State of the Ethernet GE-8S Connector Card.')
ethernetGE8SCCCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCCCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCCCardSecondaryState.setDescription('Secondary State of the Ethernet GE-8S Connector Card.')
ethernetGE8SCCCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCCCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCCCardVoltage.setDescription('Voltage of the Ethernet GE-8S Connector Card.')
ethernetGE8SCCCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCCCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCCCardTemperature.setDescription('Temperature of the Ethernet GE-8S Connector Card.')
ethernetGE8SCCCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE8SCCCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCCCardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet GE-8S Connector card.')
ethernetGE8SCCCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE8SCCCardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCCCardStorageType.setDescription('The type of storage configured for this entry.')
ethernetGE8SCCCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 41, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE8SCCCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCCCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernetGE8SCCCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernetGE8SCCCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernetGE8SCCCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernetNTEGE114HCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42), )
if mibBuilder.loadTexts: ethernetNTEGE114HCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114HCardTable.setDescription('Contains information on Ethernet NTE GE114H Cards.\n          These are supported on the FSP150CC GE114H product.')
ethernetNTEGE114HCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114HCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114HCardEntry.setDescription('A conceptual row in the ethernetNTEGE114HCardTable.')
ethernetNTEGE114HCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114HCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114HCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE114H Card.')
ethernetNTEGE114HCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114HCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114HCardAdminState.setDescription('Administrative State of the Ethernet NTE GE114H Card.')
ethernetNTEGE114HCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114HCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114HCardOperationalState.setDescription('Operational State of the Ethernet NTE GE114H Card.')
ethernetNTEGE114HCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114HCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114HCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE114H Card.')
ethernetNTEGE114HCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114HCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114HCardVoltage.setDescription('Voltage of the Ethernet NTE GE112 Card.')
ethernetNTEGE114HCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114HCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114HCardTemperature.setDescription('Temperature of the Ethernet NTE GE114H Card.')
ethernetNTEGE114HCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114HCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114HCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE114H Card.')
ethernetNTEGE114HCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114HCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114HCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114H card.')
ethernetNTEGE114HCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114HCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114HCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114HCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114HCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114HCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE114H card.')
ethernetNTEGE114HCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 42, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114HCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114HCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114H card.')
ethernetNTEGE114PHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43), )
if mibBuilder.loadTexts: ethernetNTEGE114PHCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114PHCardTable.setDescription('Contains information on Ethernet NTE GE114PH Cards.\n          These are supported on the FSP150CC GE114PH product.')
ethernetNTEGE114PHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114PHCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114PHCardEntry.setDescription('A conceptual row in the ethernetNTEGE114PHCardTable.')
ethernetNTEGE114PHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114PHCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE114PH Card.')
ethernetNTEGE114PHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114PHCardAdminState.setDescription('Administrative State of the Ethernet NTE GE114PH Card.')
ethernetNTEGE114PHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114PHCardOperationalState.setDescription('Operational State of the Ethernet NTE GE114PH Card.')
ethernetNTEGE114PHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114PHCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE114PH Card.')
ethernetNTEGE114PHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114PHCardVoltage.setDescription('Voltage of the Ethernet NTE GE112 Card.')
ethernetNTEGE114PHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114PHCardTemperature.setDescription('Temperature of the Ethernet NTE GE114PH Card.')
ethernetNTEGE114PHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114PHCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE114PH Card.')
ethernetNTEGE114PHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114PHCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114PH card.')
ethernetNTEGE114PHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114PHCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114PHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114PHCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE114PH card.')
ethernetNTEGE114PHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 43, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114PHCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114PHCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114PH card.')
ethernetFE36ECardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44), )
if mibBuilder.loadTexts: ethernetFE36ECardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetFE36ECardTable.setDescription('Contains information on Ethernet  36x100M Cards.')
ethernetFE36ECardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetFE36ECardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetFE36ECardEntry.setDescription('A conceptual row in the ethernetFE36ECardTable.')
ethernetFE36ECardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetFE36ECardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetFE36ECardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet FE36E Card.')
ethernetFE36ECardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetFE36ECardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetFE36ECardAdminState.setDescription('Administrative State of the Ethernet FE36E Card.')
ethernetFE36ECardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetFE36ECardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetFE36ECardOperationalState.setDescription('Operational State of the Ethernet FE36E Card.')
ethernetFE36ECardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetFE36ECardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetFE36ECardSecondaryState.setDescription('Secondary State of the Ethernet FE36E Card.')
ethernetFE36ECardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetFE36ECardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetFE36ECardTemperature.setDescription('Temperature of the Ethernet FE36E Card.')
ethernetFE36ECardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 6), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetFE36ECardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetFE36ECardRestartAction.setDescription('Allows to perform specified action on the Ethernet FE36E card.')
ethernetFE36ECardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetFE36ECardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernetFE36ECardStorageType.setDescription('The type of storage configured for this entry.')
ethernetFE36ECardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetFE36ECardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernetFE36ECardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernetFE36ECardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernetNTUCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernetFE36ECardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernetFE36ECardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetFE36ECardForceOffLineAction.setStatus('current')
if mibBuilder.loadTexts: ethernetFE36ECardForceOffLineAction.setDescription('On some condition, user wishes to make one card out of service \n         and hold the reset signal of the card via AMI. When force offline is enabled, \n         reset signal is held; When force offline is disabled, reset signal is released.')
ethernetFE36ECard8023azEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 44, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetFE36ECard8023azEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetFE36ECard8023azEnabled.setDescription('This object describes whether enable 802.3az energy efficient.')
ethernetNTEGE114SHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45), )
if mibBuilder.loadTexts: ethernetNTEGE114SHCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SHCardTable.setDescription('Contains information on Ethernet NTE GE114SH Cards.\n          These are supported on the FSP150CC GE114SH product.')
ethernetNTEGE114SHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114SHCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SHCardEntry.setDescription('A conceptual row in the ethernetNTEGE114SHCardTable.')
ethernetNTEGE114SHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SHCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE114SH Card.')
ethernetNTEGE114SHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SHCardAdminState.setDescription('Administrative State of the Ethernet NTE GE114SH Card.')
ethernetNTEGE114SHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SHCardOperationalState.setDescription('Operational State of the Ethernet NTE GE114SH Card.')
ethernetNTEGE114SHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SHCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE114SH Card.')
ethernetNTEGE114SHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SHCardVoltage.setDescription('Voltage of the Ethernet NTE GE112 Card.')
ethernetNTEGE114SHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SHCardTemperature.setDescription('Temperature of the Ethernet NTE GE114SH Card.')
ethernetNTEGE114SHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SHCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE114SH Card.')
ethernetNTEGE114SHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SHCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114SH card.')
ethernetNTEGE114SHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SHCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114SHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SHCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE114SH card.')
ethernetNTEGE114SHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 45, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SHCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SHCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114SH card.')
ethernetNTEGE114SCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46), )
if mibBuilder.loadTexts: ethernetNTEGE114SCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SCardTable.setDescription('Contains information on Ethernet NTE GE114S Cards.\n          These are supported on the FSP150CC GE114S product.')
ethernetNTEGE114SCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114SCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SCardEntry.setDescription('A conceptual row in the ethernetNTEGE114SCardTable.')
ethernetNTEGE114SCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE114S Card.')
ethernetNTEGE114SCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SCardAdminState.setDescription('Administrative State of the Ethernet NTE GE114S Card.')
ethernetNTEGE114SCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SCardOperationalState.setDescription('Operational State of the Ethernet NTE GE114S Card.')
ethernetNTEGE114SCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE114S Card.')
ethernetNTEGE114SCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SCardVoltage.setDescription('Voltage of the Ethernet NTE GE112S Card.')
ethernetNTEGE114SCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114SCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SCardTemperature.setDescription('Temperature of the Ethernet NTE GE114S Card.')
ethernetNTEGE114SCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE114S Card.')
ethernetNTEGE114SCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114S card.')
ethernetNTEGE114SCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114SCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114SCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE114S card.')
ethernetNTEGE114SCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 46, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114SCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114SCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114S card.')
stuHighPerCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47), )
if mibBuilder.loadTexts: stuHighPerCardTable.setStatus('current')
if mibBuilder.loadTexts: stuHighPerCardTable.setDescription('Contains information on STU Cards.')
stuHighPerCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: stuHighPerCardEntry.setStatus('current')
if mibBuilder.loadTexts: stuHighPerCardEntry.setDescription('A conceptual row in the stuHighPerCardTable.')
stuHighPerCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuHighPerCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: stuHighPerCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the STU High Performance Card.')
stuHighPerCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuHighPerCardAdminState.setStatus('current')
if mibBuilder.loadTexts: stuHighPerCardAdminState.setDescription('Administrative State of the Stu High Performance Card.')
stuHighPerCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuHighPerCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: stuHighPerCardOperationalState.setDescription('Operational State of the Stu High Performance Card.')
stuHighPerCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuHighPerCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: stuHighPerCardSecondaryState.setDescription('Secondary State of the Stu High Performance Card.')
stuHighPerCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuHighPerCardTemperature.setStatus('current')
if mibBuilder.loadTexts: stuHighPerCardTemperature.setDescription('Temperature of the Stu High Performance Card.')
stuHighPerCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 6), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuHighPerCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: stuHighPerCardRestartAction.setDescription('Allows to perform specified action on the Stu High Performance card.')
stuHighPerCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stuHighPerCardStorageType.setStatus('current')
if mibBuilder.loadTexts: stuHighPerCardStorageType.setDescription('The type of storage configured for this entry.')
stuHighPerCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stuHighPerCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: stuHighPerCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of stuHighPerCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            stuRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The stuHighPerCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
stuHighPerCardForceOffLineAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 47, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuHighPerCardForceOffLineAction.setStatus('current')
if mibBuilder.loadTexts: stuHighPerCardForceOffLineAction.setDescription('On some condition, user wishes to make one card out of service \n         and hold the reset signal of the card via AMI. When force offline is enabled, \n         reset signal is held; When force offline is disabled, reset signal is released.')
stiHighPerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48), )
if mibBuilder.loadTexts: stiHighPerTable.setStatus('current')
if mibBuilder.loadTexts: stiHighPerTable.setDescription('Contains information on STI within the Shelf.')
stiHighPerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: stiHighPerEntry.setStatus('current')
if mibBuilder.loadTexts: stiHighPerEntry.setDescription('A conceptual row in the stiTable.')
stiHighPerEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiHighPerEntityIndex.setStatus('current')
if mibBuilder.loadTexts: stiHighPerEntityIndex.setDescription('Entity Index from ENTITY-MIB for the STI High Per card.')
stiHighPerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stiHighPerAdminState.setStatus('current')
if mibBuilder.loadTexts: stiHighPerAdminState.setDescription('Administrative State of the STI.')
stiHighPerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiHighPerOperationalState.setStatus('current')
if mibBuilder.loadTexts: stiHighPerOperationalState.setDescription('Operational State of the STI.')
stiHighPerSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiHighPerSecondaryState.setStatus('current')
if mibBuilder.loadTexts: stiHighPerSecondaryState.setDescription('Secondary State of the STI.')
stiHighPerTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiHighPerTemperature.setStatus('current')
if mibBuilder.loadTexts: stiHighPerTemperature.setDescription('Temperature of the STI.')
stiHighPerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiHighPerStorageType.setStatus('current')
if mibBuilder.loadTexts: stiHighPerStorageType.setDescription('The type of storage configured for this entry.')
stiHighPerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 48, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiHighPerRowStatus.setStatus('current')
if mibBuilder.loadTexts: stiHighPerRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of stiRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            stiRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The stiRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernetGE8ECCCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49), )
if mibBuilder.loadTexts: ethernetGE8ECCCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8ECCCardTable.setDescription('Contains information on Ethernet XG210 Optical Port Expander Cards.\n          These are supported on the FSP150CC XG210, SH1PCS products.')
ethernetGE8ECCCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetGE8ECCCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8ECCCardEntry.setDescription('A conceptual row in the ethernetGE8ECCCardTable.')
ethernetGE8ECCCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8ECCCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8ECCCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet GE-8S Connector Card.')
ethernetGE8ECCCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE8ECCCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8ECCCardAdminState.setDescription('Administrative State of the Ethernet GE-8S Connector Card.')
ethernetGE8ECCCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8ECCCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8ECCCardOperationalState.setDescription('Operational State of the Ethernet GE-8S Connector Card.')
ethernetGE8ECCCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8ECCCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8ECCCardSecondaryState.setDescription('Secondary State of the Ethernet GE-8S Connector Card.')
ethernetGE8ECCCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8ECCCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8ECCCardVoltage.setDescription('Voltage of the Ethernet GE-8S Connector Card.')
ethernetGE8ECCCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8ECCCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8ECCCardTemperature.setDescription('Temperature of the Ethernet GE-8S Connector Card.')
ethernetGE8ECCCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE8ECCCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8ECCCardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet GE-8S Connector card.')
ethernetGE8ECCCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE8ECCCardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8ECCCardStorageType.setDescription('The type of storage configured for this entry.')
ethernetGE8ECCCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 49, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE8ECCCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8ECCCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernetGE8ECCCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernetGE8ECCCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernetGE8ECCCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
networkElementLLDPParamsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 50), )
if mibBuilder.loadTexts: networkElementLLDPParamsTable.setStatus('current')
if mibBuilder.loadTexts: networkElementLLDPParamsTable.setDescription('Entries may be auto discovered, or can be explicitly created by \n          SNMP Manager.  Each remotely discovered shelf is represented as \n          a row in this table.')
networkElementLLDPParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 50, 1), )
networkElementEntry.registerAugmentions(("CM-ENTITY-MIB", "networkElementLLDPParamsEntry"))
networkElementLLDPParamsEntry.setIndexNames(*networkElementEntry.getIndexNames())
if mibBuilder.loadTexts: networkElementLLDPParamsEntry.setStatus('current')
if mibBuilder.loadTexts: networkElementLLDPParamsEntry.setDescription('A conceptual row in the networkElementLLDPParamsTable.')
neLLDPParamsLLDPEnableAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 50, 1, 1), LLDPEnableAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neLLDPParamsLLDPEnableAction.setStatus('current')
if mibBuilder.loadTexts: neLLDPParamsLLDPEnableAction.setDescription('This object allows user enable or disable LLDP on all the ports in the NE.')
ethernetNTESH1PCSCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51), )
if mibBuilder.loadTexts: ethernetNTESH1PCSCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTESH1PCSCardTable.setDescription('Contains information on Ethernet NTE SH1PCS Cards.\n          These are supported on the FSP150CC SH1PCS product.')
ethernetNTESH1PCSCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTESH1PCSCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTESH1PCSCardEntry.setDescription('A conceptual row in the ethernetNTESH1PCSCardTable.')
ethernetNTESH1PCSCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTESH1PCSCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE SH1PCS Card.')
ethernetNTESH1PCSCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTESH1PCSCardAdminState.setDescription('Administrative State of the Ethernet NTE SH1PCS Card.')
ethernetNTESH1PCSCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTESH1PCSCardOperationalState.setDescription('Operational State of the Ethernet NTE SH1PCS Card.')
ethernetNTESH1PCSCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTESH1PCSCardSecondaryState.setDescription('Secondary State of the Ethernet NTE SH1PCS Card.')
ethernetNTESH1PCSCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTESH1PCSCardVoltage.setDescription('Voltage of the Ethernet NTE SH1PCS Card.')
ethernetNTESH1PCSCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTESH1PCSCardTemperature.setDescription('Temperature of the Ethernet NTE SH1PCS Card.')
ethernetNTESH1PCSCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTESH1PCSCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE SH1PCS Card.')
ethernetNTESH1PCSCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTESH1PCSCardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet NTE SH1PCS card.')
ethernetNTESH1PCSCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 51, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTESH1PCSCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTESH1PCSCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the \n              card level.  This applies to all monitored PM entities. \n              The default value of this attribute is interval-15min.  \n              Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered \n              fine-grained intervals.')
ethernetNTEOSA5411CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52), )
if mibBuilder.loadTexts: ethernetNTEOSA5411CardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5411CardTable.setDescription('Contains information on Ethernet NTE OSA5411 Card.\n          These are supported on the FSP150CC OSA5411 product.')
ethernetNTEOSA5411CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEOSA5411CardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5411CardEntry.setDescription('A conceptual row in the ethernetNTEOSA5411CardTable.')
ethernetNTEOSA5411CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5411CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE OSA5411 Card.')
ethernetNTEOSA5411CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5411CardAdminState.setDescription('Administrative State of the Ethernet NTE OSA5411 Card.')
ethernetNTEOSA5411CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5411CardOperationalState.setDescription('Operational State of the Ethernet NTE OSA5411 Card.')
ethernetNTEOSA5411CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5411CardSecondaryState.setDescription('Secondary State of the Ethernet NTE OSA5411 Card.')
ethernetNTEOSA5411CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5411CardVoltage.setDescription('Voltage of the Ethernet NTE OSA5411 Card.')
ethernetNTEOSA5411CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5411CardTemperature.setDescription('Temperature of the Ethernet NTE OSA5411 Card.')
ethernetNTEOSA5411CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5411CardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE OSA5411 Card.')
ethernetNTEOSA5411CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5411CardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE OSA5411 card.')
ethernetNTEOSA5411CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 52, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5411CardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5411CardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n       This applies to all monitored PM entities. The default value of this\n       attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n       interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE112ProCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53), )
if mibBuilder.loadTexts: ethernetNTEGE112ProCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProCardTable.setDescription('Contains information on Ethernet NTE GE112 Pro Cards.\n          These are supported on the FSP150CC GE112 Pro product.')
ethernetNTEGE112ProCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE112ProCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProCardEntry.setDescription('A conceptual row in the ethernetNTEGE112ProCardTable.')
ethernetNTEGE112ProCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE112ProCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProCardAdminState.setDescription('Administrative State of the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE112ProCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProCardOperationalState.setDescription('Operational State of the Ethernet NTE GE112Pro Card.')
ethernetNTEGE112ProCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE112Pro Card.')
ethernetNTEGE112ProCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProCardVoltage.setDescription('Voltage of the Ethernet NTE GE112Pro Card.')
ethernetNTEGE112ProCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProCardTemperature.setDescription('Temperature of the Ethernet NTE GE112Pro Card.')
ethernetNTEGE112ProCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE112Pro Card.')
ethernetNTEGE112ProCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE112Pro card.')
ethernetNTEGE112ProCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE112ProCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE112Pro card.')
ethernetNTEGE112ProCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 53, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE112Pro card.')
ethernetNTEGE112ProMCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54), )
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardTable.setDescription('Contains information on Ethernet NTE GE112 Pro Cards.\n          These are supported on the FSP150CC GE112 Pro product.')
ethernetNTEGE112ProMCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardEntry.setDescription('A conceptual row in the ethernetNTEGE112ProMCardTable.')
ethernetNTEGE112ProMCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE112ProMCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardAdminState.setDescription('Administrative State of the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE112ProMCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardOperationalState.setDescription('Operational State of the Ethernet NTE GE112ProM Card.')
ethernetNTEGE112ProMCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE112ProM Card.')
ethernetNTEGE112ProMCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardVoltage.setDescription('Voltage of the Ethernet NTE GE112ProM Card.')
ethernetNTEGE112ProMCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardTemperature.setDescription('Temperature of the Ethernet NTE GE112ProM Card.')
ethernetNTEGE112ProMCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE112ProM Card.')
ethernetNTEGE112ProMCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE112ProM card.')
ethernetNTEGE112ProMCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE112ProMCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE112ProM card.')
ethernetNTEGE112ProMCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 54, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProMCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE112ProM card.')
ethernetNTEXG210CCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55), )
if mibBuilder.loadTexts: ethernetNTEXG210CCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CCardTable.setDescription('Contains information on Ethernet NTE XG210 Cards.\n          These are supported on the FSP150CC XG210 product.')
ethernetNTEXG210CCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG210CCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CCardEntry.setDescription('A conceptual row in the ethernetNTEXG210CCardTable.')
ethernetNTEXG210CCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE XG210C Card.')
ethernetNTEXG210CCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CCardAdminState.setDescription('Administrative State of the Ethernet NTE XG210C Card.')
ethernetNTEXG210CCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CCardOperationalState.setDescription('Operational State of the Ethernet NTE XG210C Card.')
ethernetNTEXG210CCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CCardSecondaryState.setDescription('Secondary State of the Ethernet NTE XG210C Card.')
ethernetNTEXG210CCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CCardVoltage.setDescription('Voltage of the Ethernet NTE XG210C Card.')
ethernetNTEXG210CCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG210CCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CCardTemperature.setDescription('Temperature of the Ethernet NTE XG210C Card.')
ethernetNTEXG210CCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE XG210C Card.')
ethernetNTEXG210CCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CCardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet NTE XG210 card.')
ethernetNTEXG210CCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 55, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG210CCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG210CCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the \n              card level.  This applies to all monitored PM entities. \n              The default value of this attribute is interval-15min.  \n              Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered \n              fine-grained intervals.')
ethernetGE8SCryptoConnectorCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56), )
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardTable.setDescription('Contains information on Ethernet XG210C Optical Port Expander Cards.\n          These are supported on the XG210C MACSEC board.')
ethernetGE8SCryptoConnectorCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardEntry.setDescription('A conceptual row in the ethernetGE8SCryptoConnectorCardTable.')
ethernetGE8SCryptoConnectorCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet GE-8SC Connector Card.')
ethernetGE8SCryptoConnectorCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardAdminState.setDescription('Administrative State of the Ethernet GE-8SC Connector Card.')
ethernetGE8SCryptoConnectorCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardOperationalState.setDescription('Operational State of the Ethernet GE-8SC Connector Card.')
ethernetGE8SCryptoConnectorCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardSecondaryState.setDescription('Secondary State of the Ethernet GE-8SC Connector Card.')
ethernetGE8SCryptoConnectorCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardVoltage.setDescription('Voltage of the Ethernet GE-8SC Connector Card.')
ethernetGE8SCryptoConnectorCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardTemperature.setDescription('Temperature of the Ethernet GE-8SC Connector Card.')
ethernetGE8SCryptoConnectorCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet GE-8SC Connector card.')
ethernetGE8SCryptoConnectorCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardStorageType.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardStorageType.setDescription('The type of storage configured for this entry.')
ethernetGE8SCryptoConnectorCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 56, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethernetGE8SCryptoConnectorCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ethernetGE8SCryptoConnectorCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ethernetGE8SCryptoConnectorCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ethernetGE8SCryptoConnectorCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ethernetNTEGE114ProCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57), )
if mibBuilder.loadTexts: ethernetNTEGE114ProCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCardTable.setDescription('Contains information on Ethernet NTE GE112 Pro Cards.\n          These are supported on the FSP150CC GE112 Pro product.')
ethernetNTEGE114ProCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCardEntry.setDescription('A conceptual row in the ethernetNTEGE114ProCardTable.')
ethernetNTEGE114ProCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE114ProCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCardAdminState.setDescription('Administrative State of the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE114ProCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCardOperationalState.setDescription('Operational State of the Ethernet NTE GE114Pro Card.')
ethernetNTEGE114ProCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE114Pro Card.')
ethernetNTEGE114ProCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCardVoltage.setDescription('Voltage of the Ethernet NTE GE114Pro Card.')
ethernetNTEGE114ProCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCardTemperature.setDescription('Temperature of the Ethernet NTE GE114Pro Card.')
ethernetNTEGE114ProCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE114Pro Card.')
ethernetNTEGE114ProCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114Pro card.')
ethernetNTEGE114ProCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114ProCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE114Pro card.')
ethernetNTEGE114ProCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 57, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114Pro card.')
ethernetNTEGE114ProCCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58), )
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardTable.setDescription('Contains information on Ethernet NTE GE112 Pro Cards.\n          These are supported on the FSP150CC GE112 Pro product.')
ethernetNTEGE114ProCCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardEntry.setDescription('A conceptual row in the ethernetNTEGE114ProCCardTable.')
ethernetNTEGE114ProCCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE114ProCCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardAdminState.setDescription('Administrative State of the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE114ProCCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardOperationalState.setDescription('Operational State of the Ethernet NTE GE114ProC Card.')
ethernetNTEGE114ProCCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE114ProC Card.')
ethernetNTEGE114ProCCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardVoltage.setDescription('Voltage of the Ethernet NTE GE114ProC Card.')
ethernetNTEGE114ProCCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardTemperature.setDescription('Temperature of the Ethernet NTE GE114ProC Card.')
ethernetNTEGE114ProCCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE114ProC Card.')
ethernetNTEGE114ProCCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProC card.')
ethernetNTEGE114ProCCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114ProCCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE114ProC card.')
ethernetNTEGE114ProCCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 58, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProC card.')
ethernetNTEGE114ProSHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59), )
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardTable.setDescription('Contains information on Ethernet NTE GE112 Pro Cards.\n          These are supported on the FSP150CC GE112 Pro product.')
ethernetNTEGE114ProSHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardEntry.setDescription('A conceptual row in the ethernetNTEGE114ProSHCardTable.')
ethernetNTEGE114ProSHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE114ProSHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardAdminState.setDescription('Administrative State of the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE114ProSHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardOperationalState.setDescription('Operational State of the Ethernet NTE GE114ProS Card.')
ethernetNTEGE114ProSHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE114ProS Card.')
ethernetNTEGE114ProSHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardVoltage.setDescription('Voltage of the Ethernet NTE GE114ProS Card.')
ethernetNTEGE114ProSHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardTemperature.setDescription('Temperature of the Ethernet NTE GE114ProS Card.')
ethernetNTEGE114ProSHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE114ProS Card.')
ethernetNTEGE114ProSHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProS card.')
ethernetNTEGE114ProSHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114ProSHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE114ProSH card.')
ethernetNTEGE114ProSHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 59, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProSHCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProSH card.')
ethernetNTEGE114ProCSHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60), )
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardTable.setDescription('Contains information on Ethernet NTE GE112 Pro Cards.\n          These are supported on the FSP150CC GE112 Pro product.')
ethernetNTEGE114ProCSHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardEntry.setDescription('A conceptual row in the ethernetNTEGE114ProCSHCardTable.')
ethernetNTEGE114ProCSHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE114ProCSHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardAdminState.setDescription('Administrative State of the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE114ProCSHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardOperationalState.setDescription('Operational State of the Ethernet NTE GE114ProCS Card.')
ethernetNTEGE114ProCSHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE114ProCS Card.')
ethernetNTEGE114ProCSHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardVoltage.setDescription('Voltage of the Ethernet NTE GE114ProCS Card.')
ethernetNTEGE114ProCSHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardTemperature.setDescription('Temperature of the Ethernet NTE GE114ProCS Card.')
ethernetNTEGE114ProCSHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE114ProCS Card.')
ethernetNTEGE114ProCSHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProCS card.')
ethernetNTEGE114ProCSHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114ProCSHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE114ProCS card.')
ethernetNTEGE114ProCSHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 60, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProCSHCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProCS card.')
ethernetNTEGE114ProHECardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61), )
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardTable.setDescription('Contains information on Ethernet NTE GE112 Pro Cards.\n          These are supported on the FSP150CC GE112 Pro product.')
ethernetNTEGE114ProHECardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardEntry.setDescription('A conceptual row in the ethernetNTEGE114ProHECardTable.')
ethernetNTEGE114ProHECardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE114ProHECardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardAdminState.setDescription('Administrative State of the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE114ProHECardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardOperationalState.setDescription('Operational State of the Ethernet NTE GE114ProHE Card.')
ethernetNTEGE114ProHECardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE114ProHE Card.')
ethernetNTEGE114ProHECardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardVoltage.setDescription('Voltage of the Ethernet NTE GE114ProHE Card.')
ethernetNTEGE114ProHECardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardTemperature.setDescription('Temperature of the Ethernet NTE GE114ProHE Card.')
ethernetNTEGE114ProHECardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE114ProHE Card.')
ethernetNTEGE114ProHECardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProHE card.')
ethernetNTEGE114ProHECardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114ProHECardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE114ProHE card.')
ethernetNTEGE114ProHECardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 61, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProHECardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProHE card.')
ethernetNTEGE112ProHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62), )
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardTable.setDescription('Contains information on Ethernet NTE GE112 Pro Cards.\n          These are supported on the FSP150CC GE112 Pro product.')
ethernetNTEGE112ProHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardEntry.setDescription('A conceptual row in the ethernetNTEGE112ProHCardTable.')
ethernetNTEGE112ProHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE112ProHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardAdminState.setDescription('Administrative State of the Ethernet NTE GE112 Pro Card.')
ethernetNTEGE112ProHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardOperationalState.setDescription('Operational State of the Ethernet NTE GE112ProH Card.')
ethernetNTEGE112ProHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE112ProH Card.')
ethernetNTEGE112ProHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardVoltage.setDescription('Voltage of the Ethernet NTE GE112ProH Card.')
ethernetNTEGE112ProHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardTemperature.setDescription('Temperature of the Ethernet NTE GE112ProH Card.')
ethernetNTEGE112ProHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE112ProH Card.')
ethernetNTEGE112ProHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE112ProH card.')
ethernetNTEGE112ProHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE112ProHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE112ProH card.')
ethernetNTEGE112ProHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 62, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProHCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE112ProH card.')
ethernetNTEOSA5420CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63), )
if mibBuilder.loadTexts: ethernetNTEOSA5420CardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5420CardTable.setDescription('Contains information on Ethernet NTE OSA5420 Card.\n          These are supported on the FSP150CC OSA5420 product.')
ethernetNTEOSA5420CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEOSA5420CardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5420CardEntry.setDescription('A conceptual row in the ethernetNTEOSA5420CardTable.')
ethernetNTEOSA5420CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5420CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE OSA5420 Card.')
ethernetNTEOSA5420CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5420CardAdminState.setDescription('Administrative State of the Ethernet NTE OSA5420 Card.')
ethernetNTEOSA5420CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5420CardOperationalState.setDescription('Operational State of the Ethernet NTE OSA5420 Card.')
ethernetNTEOSA5420CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5420CardSecondaryState.setDescription('Secondary State of the Ethernet NTE OSA5420 Card.')
ethernetNTEOSA5420CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5420CardVoltage.setDescription('Voltage of the Ethernet NTE OSA5420 Card.')
ethernetNTEOSA5420CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5420CardTemperature.setDescription('Temperature of the Ethernet NTE OSA5420 Card.')
ethernetNTEOSA5420CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5420CardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE OSA5420 Card.')
ethernetNTEOSA5420CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5420CardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE OSA5420 card.')
ethernetNTEOSA5420CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 63, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5420CardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5420CardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n       This applies to all monitored PM entities. The default value of this\n       attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n       interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEOSA5421CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64), )
if mibBuilder.loadTexts: ethernetNTEOSA5421CardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5421CardTable.setDescription('Contains information on Ethernet NTE OSA5421 Card.\n          These are supported on the FSP150CC OSA5421 product.')
ethernetNTEOSA5421CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEOSA5421CardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5421CardEntry.setDescription('A conceptual row in the ethernetNTEOSA5421CardTable.')
ethernetNTEOSA5421CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5421CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE OSA5421 Card.')
ethernetNTEOSA5421CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5421CardAdminState.setDescription('Administrative State of the Ethernet NTE OSA5421 Card.')
ethernetNTEOSA5421CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5421CardOperationalState.setDescription('Operational State of the Ethernet NTE OSA5421 Card.')
ethernetNTEOSA5421CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5421CardSecondaryState.setDescription('Secondary State of the Ethernet NTE OSA5421 Card.')
ethernetNTEOSA5421CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5421CardVoltage.setDescription('Voltage of the Ethernet NTE OSA5421 Card.')
ethernetNTEOSA5421CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5421CardTemperature.setDescription('Temperature of the Ethernet NTE OSA5421 Card.')
ethernetNTEOSA5421CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5421CardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE OSA5421 Card.')
ethernetNTEOSA5421CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5421CardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE OSA5421 card.')
ethernetNTEOSA5421CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 64, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5421CardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5421CardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n       This applies to all monitored PM entities. The default value of this\n       attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n       interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114GCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65), )
if mibBuilder.loadTexts: ethernetNTEGE114GCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114GCardTable.setDescription('Contains information on Ethernet NTE GE114G Cards.\n          These are supported on the FSP150CC GE114G product.')
ethernetNTEGE114GCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114GCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114GCardEntry.setDescription('A conceptual row in the ethernetNTEGE114GCardTable.')
ethernetNTEGE114GCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114GCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114GCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE114G Card.')
ethernetNTEGE114GCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114GCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114GCardAdminState.setDescription('Administrative State of the Ethernet NTE GE114G Card.')
ethernetNTEGE114GCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114GCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114GCardOperationalState.setDescription('Operational State of the Ethernet NTE GE114G Card.')
ethernetNTEGE114GCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114GCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114GCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE114G Card.')
ethernetNTEGE114GCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114GCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114GCardVoltage.setDescription('Voltage of the Ethernet NTE GE114G Card.')
ethernetNTEGE114GCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114GCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114GCardTemperature.setDescription('Temperature of the Ethernet NTE GE114G Card.')
ethernetNTEGE114GCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114GCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114GCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE114G Card.')
ethernetNTEGE114GCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114GCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114GCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114G card.')
ethernetNTEGE114GCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114GCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114GCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114GCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114GCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114GCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE114G card.')
ethernetNTEGE114GCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 65, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114GCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114GCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114G card.')
bits16PortCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66), )
if mibBuilder.loadTexts: bits16PortCardTable.setStatus('current')
if mibBuilder.loadTexts: bits16PortCardTable.setDescription('A list of entries corresponding to BITS 16 Port Expansion Card \n             Facilities for configuration purposes.')
bits16PortCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: bits16PortCardEntry.setStatus('current')
if mibBuilder.loadTexts: bits16PortCardEntry.setDescription('A conceptual row in the bits16PortCardTable')
bits16PortCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits16PortCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: bits16PortCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for this card')
bits16PortCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits16PortCardAdminState.setStatus('current')
if mibBuilder.loadTexts: bits16PortCardAdminState.setDescription('This object represents the Administrative State of the BITS 16 Port Expansion Card.')
bits16PortCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits16PortCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: bits16PortCardOperationalState.setDescription('This object represents the Operational State of the BITS 16 Port Expansion Card.')
bits16PortCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits16PortCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: bits16PortCardSecondaryState.setDescription('This object represents the Secondary State of the BITS 16 Port Expansion Card.')
bits16PortCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bits16PortCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: bits16PortCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of bits16PortCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            bits16PortCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The bits16PortCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
bits16PortCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits16PortCardAlias.setStatus('current')
if mibBuilder.loadTexts: bits16PortCardAlias.setDescription('This object allows SNMP management entities to provide an \n             alias to the BITS 16 Port Expansion Card.')
bits16PortCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 66, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits16PortCardTemperature.setStatus('current')
if mibBuilder.loadTexts: bits16PortCardTemperature.setDescription('Temperature of the BITS 16 Port Expansion Card')
ethernetNTEGE114ProVmHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67), )
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardTable.setDescription('Contains information on Ethernet NTE GE114 Pro VM-H Cards.\n          These are supported on the FSP150CC GE114 Pro VM-H product.')
ethernetNTEGE114ProVmHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardEntry.setDescription('A conceptual row in the ethernetNTEGE114ProVmHCardTable.')
ethernetNTEGE114ProVmHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE114 Pro VM-H Card.')
ethernetNTEGE114ProVmHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardAdminState.setDescription('Administrative State of the Ethernet NTE GE114 Pro VM-H Card.')
ethernetNTEGE114ProVmHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardOperationalState.setDescription('Operational State of the Ethernet NTE GE114ProVmH Card.')
ethernetNTEGE114ProVmHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE114ProVmH Card.')
ethernetNTEGE114ProVmHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardVoltage.setDescription('Voltage of the Ethernet NTE GE114ProVmH Card.')
ethernetNTEGE114ProVmHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardTemperature.setDescription('Temperature of the Ethernet NTE GE114ProVmH Card.')
ethernetNTEGE114ProVmHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE114ProVmH Card.')
ethernetNTEGE114ProVmHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProVmH card.')
ethernetNTEGE114ProVmHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114ProVmHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE114ProVmH card.')
ethernetNTEGE114ProVmHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 67, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmHCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProVmH card.')
ethernetNTEGE114ProVmCHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68), )
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardTable.setDescription('Contains information on Ethernet NTE GE114 Pro VM-CH Cards.\n          These are supported on the FSP150CC GE114 Pro VM-CH product.')
ethernetNTEGE114ProVmCHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardEntry.setDescription('A conceptual row in the ethernetNTEGE114ProVmCHCardTable.')
ethernetNTEGE114ProVmCHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE114 Pro VM-CH Card.')
ethernetNTEGE114ProVmCHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardAdminState.setDescription('Administrative State of the Ethernet NTE GE114 Pro VM-CH Card.')
ethernetNTEGE114ProVmCHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardOperationalState.setDescription('Operational State of the Ethernet NTE GE114ProVmCH Card.')
ethernetNTEGE114ProVmCHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE114ProVmCH Card.')
ethernetNTEGE114ProVmCHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardVoltage.setDescription('Voltage of the Ethernet NTE GE114ProVmCH Card.')
ethernetNTEGE114ProVmCHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardTemperature.setDescription('Temperature of the Ethernet NTE GE114ProVmCH Card.')
ethernetNTEGE114ProVmCHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE114ProVmCH Card.')
ethernetNTEGE114ProVmCHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProVmCH card.')
ethernetNTEGE114ProVmCHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114ProVmCHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE114ProVmCH card.')
ethernetNTEGE114ProVmCHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 68, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCHCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProVmCH card.')
ethernetNTEGE114ProVmCSHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69), )
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardTable.setDescription('Contains information on Ethernet NTE GE114 Pro VM-CSH Cards.\n          These are supported on the FSP150CC GE114 Pro VM-CSH product.')
ethernetNTEGE114ProVmCSHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardEntry.setDescription('A conceptual row in the ethernetNTEGE114ProVmCSHCardTable.')
ethernetNTEGE114ProVmCSHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE114 Pro VM-CSH Card.')
ethernetNTEGE114ProVmCSHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardAdminState.setDescription('Administrative State of the Ethernet NTE GE114 Pro VM-CSH Card.')
ethernetNTEGE114ProVmCSHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardOperationalState.setDescription('Operational State of the Ethernet NTE GE114ProVmCSH Card.')
ethernetNTEGE114ProVmCSHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE114ProVmCSH Card.')
ethernetNTEGE114ProVmCSHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardVoltage.setDescription('Voltage of the Ethernet NTE GE114ProVmCSH Card.')
ethernetNTEGE114ProVmCSHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardTemperature.setDescription('Temperature of the Ethernet NTE GE114ProVmCSH Card.')
ethernetNTEGE114ProVmCSHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE114ProVmCSH Card.')
ethernetNTEGE114ProVmCSHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProVmCSH card.')
ethernetNTEGE114ProVmCSHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114ProVmCSHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE114ProVmCSH card.')
ethernetNTEGE114ProVmCSHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 69, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmCSHCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProVmCSH card.')
serverCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70), )
if mibBuilder.loadTexts: serverCardTable.setStatus('current')
if mibBuilder.loadTexts: serverCardTable.setDescription('Contains information on ServerCard within the Shelf.')
serverCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: serverCardEntry.setStatus('current')
if mibBuilder.loadTexts: serverCardEntry.setDescription('A conceptual row in the serverCardTable.')
serverCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: serverCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for this Server Card.')
serverCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverCardAdminState.setStatus('current')
if mibBuilder.loadTexts: serverCardAdminState.setDescription('Administrative State of the Server Card.')
serverCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: serverCardOperationalState.setDescription('Operational State of the Server Card.')
serverCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: serverCardSecondaryState.setDescription('Secondary State of the Server Card.')
serverCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serverCardStorageType.setStatus('current')
if mibBuilder.loadTexts: serverCardStorageType.setDescription('Storage Type of the Server Card.')
serverCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardVoltage.setStatus('current')
if mibBuilder.loadTexts: serverCardVoltage.setDescription('Voltage of the Server Card.')
serverCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardTemperature.setStatus('current')
if mibBuilder.loadTexts: serverCardTemperature.setDescription('Temperature of the Server Card.')
serverCardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardUpTime.setStatus('current')
if mibBuilder.loadTexts: serverCardUpTime.setDescription('Up time of the Server Card.')
serverCardVmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardVmNumber.setStatus('current')
if mibBuilder.loadTexts: serverCardVmNumber.setDescription('VM number of the Server Card.')
serverCardVirtualCpuTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardVirtualCpuTotal.setStatus('current')
if mibBuilder.loadTexts: serverCardVirtualCpuTotal.setDescription('Total virtual CPU of the Server Card.')
serverCardVirtualCpuAvailiable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardVirtualCpuAvailiable.setStatus('current')
if mibBuilder.loadTexts: serverCardVirtualCpuAvailiable.setDescription('Availiable virtual CPU of the Server Card.')
serverCardMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: serverCardMemoryTotal.setDescription('Total memory of the Server Card.')
serverCardMemoryAvailiable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardMemoryAvailiable.setStatus('current')
if mibBuilder.loadTexts: serverCardMemoryAvailiable.setDescription('Availiable memory of the Server Card.')
serverCardStorageTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardStorageTotal.setStatus('current')
if mibBuilder.loadTexts: serverCardStorageTotal.setDescription('Total storage of the Server Card.')
serverCardStorageAvailiable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardStorageAvailiable.setStatus('current')
if mibBuilder.loadTexts: serverCardStorageAvailiable.setDescription('Availiable storage of the Server Card.')
serverCardHvVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCardHvVersion.setStatus('current')
if mibBuilder.loadTexts: serverCardHvVersion.setDescription('HV version of the Server Card.')
serverCardHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serverCardHostName.setStatus('current')
if mibBuilder.loadTexts: serverCardHostName.setDescription('Hostname of the Server Card.')
serverCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 18), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: serverCardRestartAction.setDescription('Allows to perform specified action on the VM server card.')
serverCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serverCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: serverCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of serverCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            serverCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The serverCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
serverCardIgnoreWatchdog = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 70, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverCardIgnoreWatchdog.setStatus('current')
if mibBuilder.loadTexts: serverCardIgnoreWatchdog.setDescription('Ignore keep-alive watchdog.')
pps16PortCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71), )
if mibBuilder.loadTexts: pps16PortCardTable.setStatus('current')
if mibBuilder.loadTexts: pps16PortCardTable.setDescription('A list of entries corresponding to BITS 16 Port Expansion Card \n             Facilities for configuration purposes.')
pps16PortCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: pps16PortCardEntry.setStatus('current')
if mibBuilder.loadTexts: pps16PortCardEntry.setDescription('A conceptual row in the pps16PortCardTable')
pps16PortCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: pps16PortCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for this card')
pps16PortCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pps16PortCardAdminState.setStatus('current')
if mibBuilder.loadTexts: pps16PortCardAdminState.setDescription('This object represents the Administrative State of the BITS 16 Port Expansion Card.')
pps16PortCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: pps16PortCardOperationalState.setDescription('This object represents the Operational State of the BITS 16 Port Expansion Card.')
pps16PortCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: pps16PortCardSecondaryState.setDescription('This object represents the Secondary State of the BITS 16 Port Expansion Card.')
pps16PortCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pps16PortCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: pps16PortCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of pps16PortCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            pps16PortCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The pps16PortCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
pps16PortCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 71, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pps16PortCardAlias.setStatus('current')
if mibBuilder.loadTexts: pps16PortCardAlias.setDescription('This object allows SNMP management entities to provide an \n             alias to the BITS 16 Port Expansion Card.')
clk16PortCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72), )
if mibBuilder.loadTexts: clk16PortCardTable.setStatus('current')
if mibBuilder.loadTexts: clk16PortCardTable.setDescription('A list of entries corresponding to BITS 16 Port Expansion Card \n             Facilities for configuration purposes.')
clk16PortCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: clk16PortCardEntry.setStatus('current')
if mibBuilder.loadTexts: clk16PortCardEntry.setDescription('A conceptual row in the clk16PortCardTable')
clk16PortCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: clk16PortCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for this card')
clk16PortCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clk16PortCardAdminState.setStatus('current')
if mibBuilder.loadTexts: clk16PortCardAdminState.setDescription('This object represents the Administrative State of the BITS 16 Port Expansion Card.')
clk16PortCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: clk16PortCardOperationalState.setDescription('This object represents the Operational State of the BITS 16 Port Expansion Card.')
clk16PortCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: clk16PortCardSecondaryState.setDescription('This object represents the Secondary State of the BITS 16 Port Expansion Card.')
clk16PortCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clk16PortCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: clk16PortCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of clk16PortCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            clk16PortCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The clk16PortCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
clk16PortCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 72, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clk16PortCardAlias.setStatus('current')
if mibBuilder.loadTexts: clk16PortCardAlias.setDescription('This object allows SNMP management entities to provide an \n             alias to the BITS 16 Port Expansion Card.')
todPps16PortCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73), )
if mibBuilder.loadTexts: todPps16PortCardTable.setStatus('current')
if mibBuilder.loadTexts: todPps16PortCardTable.setDescription('A list of entries corresponding to BITS 16 Port Expansion Card \n             Facilities for configuration purposes.')
todPps16PortCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: todPps16PortCardEntry.setStatus('current')
if mibBuilder.loadTexts: todPps16PortCardEntry.setDescription('A conceptual row in the todPps16PortCardTable')
todPps16PortCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: todPps16PortCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for this card')
todPps16PortCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: todPps16PortCardAdminState.setStatus('current')
if mibBuilder.loadTexts: todPps16PortCardAdminState.setDescription('This object represents the Administrative State of the BITS 16 Port Expansion Card.')
todPps16PortCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: todPps16PortCardOperationalState.setDescription('This object represents the Operational State of the BITS 16 Port Expansion Card.')
todPps16PortCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: todPps16PortCardSecondaryState.setDescription('This object represents the Secondary State of the BITS 16 Port Expansion Card.')
todPps16PortCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: todPps16PortCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: todPps16PortCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of todPps16PortCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            todPps16PortCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The todPps16PortCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
todPps16PortCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 73, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: todPps16PortCardAlias.setStatus('current')
if mibBuilder.loadTexts: todPps16PortCardAlias.setDescription('This object allows SNMP management entities to provide an \n             alias to the BITS 16 Port Expansion Card.')
ethernetNTEGE101ProCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74), )
if mibBuilder.loadTexts: ethernetNTEGE101ProCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101ProCardTable.setDescription('Contains information on Ethernet NTE GE101 Pro Cards.\n          These are supported on the FSP150CC GE101 Pro product.')
ethernetNTEGE101ProCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE101ProCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101ProCardEntry.setDescription('A conceptual row in the ethernetNTEGE101ProCardTable.')
ethernetNTEGE101ProCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101ProCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE101 Pro Card.')
ethernetNTEGE101ProCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101ProCardAdminState.setDescription('Administrative State of the Ethernet NTE GE101 Pro Card.')
ethernetNTEGE101ProCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101ProCardOperationalState.setDescription('Operational State of the Ethernet NTE GE101Pro Card.')
ethernetNTEGE101ProCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101ProCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE101Pro Card.')
ethernetNTEGE101ProCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101ProCardVoltage.setDescription('Voltage of the Ethernet NTE GE101Pro Card.')
ethernetNTEGE101ProCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101ProCardTemperature.setDescription('Temperature of the Ethernet NTE GE101Pro Card.')
ethernetNTEGE101ProCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101ProCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE101Pro Card.')
ethernetNTEGE101ProCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101ProCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE101Pro card.')
ethernetNTEGE101ProCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101ProCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE101ProCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101ProCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE101Pro card.')
ethernetNTEGE101ProCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 74, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE101ProCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE101ProCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE101Pro card.')
ethernetNTEGO102ProSCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75), )
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardTable.setDescription('Contains information on Ethernet NTE Pro GO102Pro S Cards.\n          These are supported on the FSP150CC GO102ProS product.')
ethernetNTEGO102ProSCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardEntry.setDescription('A conceptual row in the ethernetNTEGO102ProSCardTable.')
ethernetNTEGO102ProSCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GO102ProS Card.')
ethernetNTEGO102ProSCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardAdminState.setDescription('Administrative State of the Ethernet NTE GO102ProS Card.')
ethernetNTEGO102ProSCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardOperationalState.setDescription('Operational State of the Ethernet NTE GO102ProS Card.')
ethernetNTEGO102ProSCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GO102ProS Card.')
ethernetNTEGO102ProSCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardVoltage.setDescription('Voltage of the Ethernet NTE GO102ProS Card.')
ethernetNTEGO102ProSCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardTemperature.setDescription('Temperature of the Ethernet NTE GO102ProS Card.')
ethernetNTEGO102ProSCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GO102ProS Card.')
ethernetNTEGO102ProSCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GO102ProS card.')
ethernetNTEGO102ProSCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGO102ProSCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GO102ProS card.')
ethernetNTEGO102ProSCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 75, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GO102ProS card.')
ethernetNTEGO102ProSPCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76), )
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardTable.setDescription('Contains information on Ethernet NTE Pro Rugged S Cards.\n          These are supported on the FSP150CC GO102ProSP product.')
ethernetNTEGO102ProSPCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardEntry.setDescription('A conceptual row in the ethernetNTEGO102ProSPCardTable.')
ethernetNTEGO102ProSPCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GO102ProSP Card.')
ethernetNTEGO102ProSPCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardAdminState.setDescription('Administrative State of the Ethernet NTE GO102ProSP Card.')
ethernetNTEGO102ProSPCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardOperationalState.setDescription('Operational State of the Ethernet NTE GO102ProSP Card.')
ethernetNTEGO102ProSPCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GO102ProSP Card.')
ethernetNTEGO102ProSPCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardVoltage.setDescription('Voltage of the Ethernet NTE GO102ProSP Card.')
ethernetNTEGO102ProSPCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardTemperature.setDescription('Temperature of the Ethernet NTE GO102ProSP Card.')
ethernetNTEGO102ProSPCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GO102ProSP Card.')
ethernetNTEGO102ProSPCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GO102ProSP card.')
ethernetNTEGO102ProSPCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGO102ProSPCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GO102ProSP card.')
ethernetNTEGO102ProSPCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 76, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSPCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GO102ProSP card.')
ethernetNTECX101Pro30ACardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77), )
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardTable.setDescription('Contains information on Ethernet NTE Pro Rugged S Cards.\n          These are supported on the FSP150CC GE101 Pro product.')
ethernetNTECX101Pro30ACardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardEntry.setDescription('A conceptual row in the ethernetNTECX101Pro30ACardTable.')
ethernetNTECX101Pro30ACardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE CX101PRO 30A Card.')
ethernetNTECX101Pro30ACardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardAdminState.setDescription('Administrative State of the Ethernet NTE CX101PRO 30A Card.')
ethernetNTECX101Pro30ACardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardOperationalState.setDescription('Operational State of the Ethernet NTE CX101Pro30A Card.')
ethernetNTECX101Pro30ACardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardSecondaryState.setDescription('Secondary State of the Ethernet NTE CX101Pro30A Card.')
ethernetNTECX101Pro30ACardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardVoltage.setDescription('Voltage of the Ethernet NTE CX101Pro30A Card.')
ethernetNTECX101Pro30ACardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardTemperature.setDescription('Temperature of the Ethernet NTE CX101Pro30A Card.')
ethernetNTECX101Pro30ACardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE CX101Pro30A Card.')
ethernetNTECX101Pro30ACardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE CX101Pro30A card.')
ethernetNTECX101Pro30ACardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTECX101Pro30ACardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE CX101Pro30A card.')
ethernetNTECX101Pro30ACardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 77, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX101Pro30ACardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE CX101Pro30A card.')
ethernetNTECX102Pro30ACardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78), )
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardTable.setDescription('Contains information on Ethernet NTE Pro Rugged S Cards.\n          These are supported on the FSP150CC GE101 Pro product.')
ethernetNTECX102Pro30ACardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardEntry.setDescription('A conceptual row in the ethernetNTECX102Pro30ACardTable.')
ethernetNTECX102Pro30ACardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE101 Pro Card.')
ethernetNTECX102Pro30ACardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardAdminState.setDescription('Administrative State of the Ethernet NTE GE101 Pro Card.')
ethernetNTECX102Pro30ACardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardOperationalState.setDescription('Operational State of the Ethernet NTE CX102Pro30A Card.')
ethernetNTECX102Pro30ACardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardSecondaryState.setDescription('Secondary State of the Ethernet NTE CX102Pro30A Card.')
ethernetNTECX102Pro30ACardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardVoltage.setDescription('Voltage of the Ethernet NTE CX102Pro30A Card.')
ethernetNTECX102Pro30ACardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardTemperature.setDescription('Temperature of the Ethernet NTE CX102Pro30A Card.')
ethernetNTECX102Pro30ACardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE CX102Pro30A Card.')
ethernetNTECX102Pro30ACardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE CX102Pro30A card.')
ethernetNTECX102Pro30ACardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTECX102Pro30ACardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE CX102Pro30A card.')
ethernetNTECX102Pro30ACardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 78, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTECX102Pro30ACardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE CX102Pro30A card.')
ge4PortCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79), )
if mibBuilder.loadTexts: ge4PortCardTable.setStatus('current')
if mibBuilder.loadTexts: ge4PortCardTable.setDescription('A list of entries corresponding to GE 4 Port Expansion Card \n             Facilities for configuration purposes.')
ge4PortCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ge4PortCardEntry.setStatus('current')
if mibBuilder.loadTexts: ge4PortCardEntry.setDescription('A conceptual row in the ge4PortCardTable')
ge4PortCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ge4PortCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ge4PortCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for this card')
ge4PortCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ge4PortCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ge4PortCardAdminState.setDescription('This object represents the Administrative State of the GE 4 Port Expansion Card.')
ge4PortCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ge4PortCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ge4PortCardOperationalState.setDescription('This object represents the Operational State of the GE 4 Port Expansion Card.')
ge4PortCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ge4PortCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ge4PortCardSecondaryState.setDescription('This object represents the Secondary State of the GE 4 Port Expansion Card.')
ge4PortCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ge4PortCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: ge4PortCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of ge4PortCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            ge4PortCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The ge4PortCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
ge4PortCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ge4PortCardAlias.setStatus('current')
if mibBuilder.loadTexts: ge4PortCardAlias.setDescription('This object allows SNMP management entities to provide an \n             alias to the GE 4 Port Expansion Card.')
ge4PortCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 79, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ge4PortCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ge4PortCardTemperature.setDescription('Temperature of the GE 4 Port Expansion Card.')
ethernetNTEXG116PROCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80), )
if mibBuilder.loadTexts: ethernetNTEXG116PROCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROCardTable.setDescription('Contains information on Ethernet NTE XG116PRO Card.\n          These are supported on the FSP150CC XG116PRO product.')
ethernetNTEXG116PROCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG116PROCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROCardEntry.setDescription('A conceptual row in the ethernetNTEXG116PROCardTable.')
ethernetNTEXG116PROCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE XG116PRO Card.')
ethernetNTEXG116PROCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROCardAdminState.setDescription('Administrative State of the Ethernet NTE XG116PRO Card.')
ethernetNTEXG116PROCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROCardOperationalState.setDescription('Operational State of the Ethernet NTE XG116PRO Card.')
ethernetNTEXG116PROCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROCardSecondaryState.setDescription('Secondary State of the Ethernet NTE XG116PRO Card.')
ethernetNTEXG116PROCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROCardVoltage.setDescription('Voltage of the Ethernet NTE XG116PRO Card.')
ethernetNTEXG116PROCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROCardTemperature.setDescription('Temperature of the Ethernet NTE XG116PRO Card.')
ethernetNTEXG116PROCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE XG116PRO Card.')
ethernetNTEXG116PROCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROCardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet NTE XG116PRO card.')
ethernetNTEXG116PROCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 80, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the \n              card level.  This applies to all monitored PM entities. \n              The default value of this attribute is interval-15min.  \n              Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered \n              fine-grained intervals.')
ethernetNTEXG120PROCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81), )
if mibBuilder.loadTexts: ethernetNTEXG120PROCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROCardTable.setDescription('Contains information on Ethernet NTE XG120PRO Card.\n          These are supported on the FSP150CC XG120PRO product.')
ethernetNTEXG120PROCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG120PROCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROCardEntry.setDescription('A conceptual row in the ethernetNTEXG120PROCardTable.')
ethernetNTEXG120PROCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE XG120PRO Card.')
ethernetNTEXG120PROCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROCardAdminState.setDescription('Administrative State of the Ethernet NTE XG120PRO Card.')
ethernetNTEXG120PROCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROCardOperationalState.setDescription('Operational State of the Ethernet NTE XG120PRO Card.')
ethernetNTEXG120PROCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROCardSecondaryState.setDescription('Secondary State of the Ethernet NTE XG120PRO Card.')
ethernetNTEXG120PROCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROCardVoltage.setDescription('Voltage of the Ethernet NTE XG120PRO Card.')
ethernetNTEXG120PROCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROCardTemperature.setDescription('Temperature of the Ethernet NTE XG120PRO Card.')
ethernetNTEXG120PROCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE XG120PRO Card.')
ethernetNTEXG120PROCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROCardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet NTE XG120PRO card.')
ethernetNTEXG120PROCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 81, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the \n              card level.  This applies to all monitored PM entities. \n              The default value of this attribute is interval-15min.  \n              Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered \n              fine-grained intervals.')
ethernetNTEGE112ProVmCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82), )
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardTable.setDescription('Contains information on Ethernet NTE GE112 Pro VM Cards.\n          These are supported on the FSP150CC GE112 Pro VM product.')
ethernetNTEGE112ProVmCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardEntry.setDescription('A conceptual row in the ethernetNTEGE112ProVmCardTable.')
ethernetNTEGE112ProVmCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE114 Pro VM-CSH Card.')
ethernetNTEGE112ProVmCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardAdminState.setDescription('Administrative State of the Ethernet NTE GE114 Pro VM-CSH Card.')
ethernetNTEGE112ProVmCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardOperationalState.setDescription('Operational State of the Ethernet NTE GE112ProVm Card.')
ethernetNTEGE112ProVmCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE112ProVm Card.')
ethernetNTEGE112ProVmCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardVoltage.setDescription('Voltage of the Ethernet NTE GE112ProVm Card.')
ethernetNTEGE112ProVmCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardTemperature.setDescription('Temperature of the Ethernet NTE GE112ProVm Card.')
ethernetNTEGE112ProVmCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE112ProVm Card.')
ethernetNTEGE112ProVmCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE112ProVm card.')
ethernetNTEGE112ProVmCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE112ProVmCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE112ProVm card.')
ethernetNTEGE112ProVmCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 82, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE112ProVmCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE112ProVm card.')
ethernetNTEOSA5401CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 83), )
if mibBuilder.loadTexts: ethernetNTEOSA5401CardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5401CardTable.setDescription('Contains information on Ethernet NTE OSA5401 Card.\n          These are supported on the OSA5401 product.')
ethernetNTEOSA5401CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 83, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEOSA5401CardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5401CardEntry.setDescription('A conceptual row in the ethernetNTEOSA5401CardTable.')
ethernetNTEOSA5401CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 83, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5401CardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5401CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE OSA5401 Card.')
ethernetNTEOSA5401CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 83, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5401CardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5401CardAdminState.setDescription('Administrative State of the Ethernet NTE OSA5401 Card.')
ethernetNTEOSA5401CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 83, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5401CardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5401CardOperationalState.setDescription('Operational State of the Ethernet NTE OSA5401 Card.')
ethernetNTEOSA5401CardTableRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 83, 1, 4), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5401CardTableRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5401CardTableRestartAction.setDescription('Allows to perform restart action on NTE OSA5401 Card.')
ethernetNTEOSA5405CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84), )
if mibBuilder.loadTexts: ethernetNTEOSA5405CardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5405CardTable.setDescription('Contains information on Ethernet NTE OSA5405 Card.\n          These are supported on the OSA5405 product.')
ethernetNTEOSA5405CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEOSA5405CardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5405CardEntry.setDescription('A conceptual row in the ethernetNTEOSA5405CardTable.')
ethernetNTEOSA5405CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5405CardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5405CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE OSA5405 Card.')
ethernetNTEOSA5405CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5405CardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5405CardAdminState.setDescription('Administrative State of the Ethernet NTE OSA5405 Card.')
ethernetNTEOSA5405CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5405CardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5405CardOperationalState.setDescription('Operational State of the Ethernet NTE OSA5405 Card.')
ethernetNTEOSA5405CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5405CardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5405CardVoltage.setDescription('Voltage of the Ethernet NTE OSA5405 Card in mV units.')
ethernetNTEOSA5405CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEOSA5405CardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5405CardTemperature.setDescription('Temperature of the Ethernet NTE OSA5405 Card.')
ethernetNTEOSA5405CardTableRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 84, 1, 6), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEOSA5405CardTableRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEOSA5405CardTableRestartAction.setDescription('Allows to perform restart action on NTE OSA5405 Card.')
ethernetCSMCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85), )
if mibBuilder.loadTexts: ethernetCSMCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetCSMCardTable.setDescription('Contains information on Ethernet CSM Card.\n          These are supported on the OSA5430 and OSA5440 product.')
ethernetCSMCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetCSMCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetCSMCardEntry.setDescription('A conceptual row in the ethernetCSMCardTable.')
ethernetCSMCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCSMCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetCSMCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE CSM Card.')
ethernetCSMCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetCSMCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetCSMCardAdminState.setDescription('Administrative State of the Ethernet NTE CSM Card.')
ethernetCSMCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCSMCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetCSMCardOperationalState.setDescription('Operational State of the Ethernet NTE CSM Card.')
ethernetCSMCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCSMCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetCSMCardSecondaryState.setDescription('Secondary State of the Ethernet NTE CSM Card.')
ethernetCSMCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCSMCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetCSMCardVoltage.setDescription('Voltage of the Ethernet NTE CSM Card.')
ethernetCSMCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCSMCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetCSMCardTemperature.setDescription('Temperature of the Ethernet NTE CSM Card.')
ethernetCSMCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetCSMCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetCSMCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE CSM Card.')
ethernetCSMCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetCSMCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetCSMCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE CSM card.')
ethernetCSMCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetCSMCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetCSMCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n       This applies to all monitored PM entities. The default value of this\n       attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n       interval-1day and rollover are not considered fine-grained intervals.')
ethernetCSMCardOscillatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 85, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCSMCardOscillatorType.setStatus('current')
if mibBuilder.loadTexts: ethernetCSMCardOscillatorType.setDescription('The mOscillatorType.')
auxPortCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87), )
if mibBuilder.loadTexts: auxPortCardTable.setStatus('current')
if mibBuilder.loadTexts: auxPortCardTable.setDescription('A list of entries corresponding to Auxiliary Port Expansion Card \n             Facilities for configuration purposes.')
auxPortCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: auxPortCardEntry.setStatus('current')
if mibBuilder.loadTexts: auxPortCardEntry.setDescription('A conceptual row in the auxPortCardTable')
auxPortCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: auxPortCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for this card')
auxPortCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auxPortCardAdminState.setStatus('current')
if mibBuilder.loadTexts: auxPortCardAdminState.setDescription('This object represents the Administrative State of the Auxiliary Port Expansion Card.')
auxPortCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: auxPortCardOperationalState.setDescription('This object represents the Operational State of the Auxiliary Port Expansion Card.')
auxPortCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: auxPortCardSecondaryState.setDescription('This object represents the Secondary State of the Auxiliary Port Expansion Card.')
auxPortCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: auxPortCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: auxPortCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of auxPortCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            auxPortCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The auxPortCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
auxPortCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auxPortCardAlias.setStatus('current')
if mibBuilder.loadTexts: auxPortCardAlias.setDescription('This object allows SNMP management entities to provide an \n             alias to the Auxiliary Port Expansion Card.')
auxPortCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 87, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxPortCardTemperature.setStatus('current')
if mibBuilder.loadTexts: auxPortCardTemperature.setDescription('Temperature of the Auxiliary Port Expansion Card.')
ethernetNTEGE102ProHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88), )
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardTable.setDescription('Contains information on Ethernet NTE GE102 Pro H Cards.\n          These are supported on the FSP150CC GE102 Pro H product.')
ethernetNTEGE102ProHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardEntry.setDescription('A conceptual row in the ethernetNTEGE102ProHCardTable.')
ethernetNTEGE102ProHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE102 Pro H Card.')
ethernetNTEGE102ProHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardAdminState.setDescription('Administrative State of the Ethernet NTE GE102 Pro H Card.')
ethernetNTEGE102ProHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardOperationalState.setDescription('Operational State of the Ethernet NTE GE102 Pro H Card.')
ethernetNTEGE102ProHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE102 Pro H Card.')
ethernetNTEGE102ProHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardVoltage.setDescription('Voltage of the Ethernet NTE GE102 Pro H Card.')
ethernetNTEGE102ProHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardTemperature.setDescription('Temperature of the Ethernet NTE GE102 Pro H Card.')
ethernetNTEGE102ProHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE102 Pro H Card.')
ethernetNTEGE102ProHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE102 Pro H card.')
ethernetNTEGE102ProHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE102ProHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE102 Pro H card.')
ethernetNTEGE102ProHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE102 Pro H card.')
ethernetNTEGE102ProHCardPSU1State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 12), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardPSU1State.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardPSU1State.setDescription('Operational State of Power Supply Unit 1 on Ethernet NTE GE102Pro H card.')
ethernetNTEGE102ProHCardPSU2State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 13), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardPSU2State.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardPSU2State.setDescription('Operational State of Power Supply Unit 2 on Ethernet NTE GE102Pro H card.')
ethernetNTEGE102ProHCardFAN1State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 14), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardFAN1State.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardFAN1State.setDescription('Operational State of FAN 1 on Ethernet NTE GE102Pro H card.')
ethernetNTEGE102ProHCardFAN2State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 15), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardFAN2State.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardFAN2State.setDescription('Operational State of FAN 2 on Ethernet NTE GE102Pro H card.')
ethernetNTEGE102ProHCardPsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 88, 1, 16), PsuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardPsuType.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProHCardPsuType.setDescription('PSU Type on Ethernet NTE GE102Pro H card.')
ethernetNTEGE102ProEFMHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89), )
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardTable.setDescription('Contains information on Ethernet NTE GE102 Pro EFMH Cards.\n          These are supported on the FSP150CC GE102 Pro EFMH product.')
ethernetNTEGE102ProEFMHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardEntry.setDescription('A conceptual row in the ethernetNTEGE102ProEFMHCardTable.')
ethernetNTEGE102ProEFMHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE102 Pro EFMH Card.')
ethernetNTEGE102ProEFMHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardAdminState.setDescription('Administrative State of the Ethernet NTE GE102 Pro EFMH Card.')
ethernetNTEGE102ProEFMHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardOperationalState.setDescription('Operational State of the Ethernet NTE GE102 Pro EFMH Card.')
ethernetNTEGE102ProEFMHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE102 Pro EFMHCard.')
ethernetNTEGE102ProEFMHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardVoltage.setDescription('Voltage of the Ethernet NTE GE102 Pro EFMH Card.')
ethernetNTEGE102ProEFMHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardTemperature.setDescription('Temperature of the Ethernet NTE GE102 Pro EFMH Card.')
ethernetNTEGE102ProEFMHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 7), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE102Pro EFMH card.')
ethernetNTEGE102ProEFMHCardPSU1State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 8), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardPSU1State.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardPSU1State.setDescription('Operational State of Power Supply Unit 1 on Ethernet NTE GE102Pro EFMH card.')
ethernetNTEGE102ProEFMHCardPSU2State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 9), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardPSU2State.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardPSU2State.setDescription('Operational State of Power Supply Unit 2 on Ethernet NTE GE102Pro EFMH card.')
ethernetNTEGE102ProEFMHCardFAN1State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 10), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardFAN1State.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardFAN1State.setDescription('Operational State of FAN 1 on Ethernet NTE GE102Pro EFMH card.')
ethernetNTEGE102ProEFMHCardFAN2State = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 11), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardFAN2State.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardFAN2State.setDescription('Operational State of FAN 2 on Ethernet NTE GE102Pro EFMH card.')
ethernetNTEGE102ProEFMHCardPsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 12), PsuType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardPsuType.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardPsuType.setDescription('PSU Type on Ethernet NTE GE102Pro EFMH card.')
ethernetNTEGE102ProEFMHCardLLFMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 13), CmCPMRLinkLossFwdMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardLLFMode.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardLLFMode.setDescription('Current Link Loss Forwarding Mode on CPMR.')
ethernetNTEGE102ProEFMHCardLLFModeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 89, 1, 14), CmCPMRLinkLossFwdMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardLLFModeAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE102ProEFMHCardLLFModeAction.setDescription('Operation to set the appropriate mode on CPMR.')
ethernetOsa3350MgntCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90), )
if mibBuilder.loadTexts: ethernetOsa3350MgntCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetOsa3350MgntCardTable.setDescription('Contains information on Ethernet Osa3350 Mgnt Cards.')
ethernetOsa3350MgntCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetOsa3350MgntCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetOsa3350MgntCardEntry.setDescription('A conceptual row in the ethernetOsa3350MgntCardTable.')
ethernetOsa3350MgntCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOsa3350MgntCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetOsa3350MgntCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet Osa3350 Mgnt Card.')
ethernetOsa3350MgntCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOsa3350MgntCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetOsa3350MgntCardAdminState.setDescription('Administrative State of the Ethernet Osa3350 Mgnt Card.')
ethernetOsa3350MgntCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOsa3350MgntCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetOsa3350MgntCardOperationalState.setDescription('Operational State of the Ethernet Osa3350 Mgnt Card.')
ethernetOsa3350MgntCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOsa3350MgntCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetOsa3350MgntCardSecondaryState.setDescription('Secondary State of the Ethernet Osa3350 Mgnt Card.')
ethernetOsa3350MgntCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90, 1, 5), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOsa3350MgntCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetOsa3350MgntCardRestartAction.setDescription('Allows to perform specified restart action on the \n              Ethernet Osa3350 Mgnt card.')
ethernetOsa3350MgntCardResyncAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 90, 1, 6), ResyncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetOsa3350MgntCardResyncAction.setStatus('current')
if mibBuilder.loadTexts: ethernetOsa3350MgntCardResyncAction.setDescription('Allows to perform specified resync action on the \n              Ethernet Osa3350 Mgnt card.')
ethernetNTEXG116PROHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91), )
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardTable.setDescription('Contains information on Ethernet NTE XG116PRO (H) Card.\n          These are supported on the FSP150CC XG116PRO (H) product.')
ethernetNTEXG116PROHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardEntry.setDescription('A conceptual row in the ethernetNTEXG116PROHCardTable.')
ethernetNTEXG116PROHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE XG116PRO (H) Card.')
ethernetNTEXG116PROHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardAdminState.setDescription('Administrative State of the Ethernet NTE XG116PRO (H) Card.')
ethernetNTEXG116PROHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardOperationalState.setDescription('Operational State of the Ethernet NTE XG116PRO (H) Card.')
ethernetNTEXG116PROHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardSecondaryState.setDescription('Secondary State of the Ethernet NTE XG116PRO (H) Card.')
ethernetNTEXG116PROHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardVoltage.setDescription('Voltage of the Ethernet NTE XG116PRO (H) Card.')
ethernetNTEXG116PROHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardTemperature.setDescription('Temperature of the Ethernet NTE XG116PRO (H) Card.')
ethernetNTEXG116PROHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE XG116PRO (H) Card.')
ethernetNTEXG116PROHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet NTE XG116PRO (H) card.')
ethernetNTEXG116PROHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 91, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG116PROHCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the \n              card level.  This applies to all monitored PM entities. \n              The default value of this attribute is interval-15min.  \n              Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered \n              fine-grained intervals.')
ethernetNTEGO102ProSMCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92), )
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardTable.setDescription('Contains information on Ethernet NTE Pro GO102Pro-S Mini Cards.\n          These are supported on the FSP150CC GO102Pro-S Mini product.')
ethernetNTEGO102ProSMCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardEntry.setDescription('A conceptual row in the ethernetNTEGO102ProSMCardTable.')
ethernetNTEGO102ProSMCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GO102Pro-SM Card.')
ethernetNTEGO102ProSMCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardAdminState.setDescription('Administrative State of the Ethernet NTE GO102Pro-SM Card.')
ethernetNTEGO102ProSMCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardOperationalState.setDescription('Operational State of the Ethernet NTE GO102Pro-SM Card.')
ethernetNTEGO102ProSMCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GO102Pro-SM Card.')
ethernetNTEGO102ProSMCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardVoltage.setDescription('Voltage of the Ethernet NTE GO102Pro-SM Card.')
ethernetNTEGO102ProSMCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardTemperature.setDescription('Temperature of the Ethernet NTE GO102Pro-SM Card.')
ethernetNTEGO102ProSMCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GO102Pro-SM Card.')
ethernetNTEGO102ProSMCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GO102Pro-SM card.')
ethernetNTEGO102ProSMCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGO102ProSMCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GO102Pro-SM card.')
ethernetNTEGO102ProSMCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 92, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGO102ProSMCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GO102Pro-SM card.')
ethernetNTEXG118PROSHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93), )
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardTable.setDescription('Contains information on Ethernet NTE XG118PRO (SH) Card.\n          These are supported on the FSP150CC XG118PRO (SH) product.')
ethernetNTEXG118PROSHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardEntry.setDescription('A conceptual row in the ethernetNTEXG118PROSHCardTable.')
ethernetNTEXG118PROSHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE XG118PRO (SH) Card.')
ethernetNTEXG118PROSHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardAdminState.setDescription('Administrative State of the Ethernet NTE XG118PRO (SH) Card.')
ethernetNTEXG118PROSHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardOperationalState.setDescription('Operational State of the Ethernet NTE XG118PRO (SH) Card.')
ethernetNTEXG118PROSHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardSecondaryState.setDescription('Secondary State of the Ethernet NTE XG118PRO (SH) Card.')
ethernetNTEXG118PROSHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardVoltage.setDescription('Voltage of the Ethernet NTE XG118PRO (SH) Card.')
ethernetNTEXG118PROSHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardTemperature.setDescription('Temperature of the Ethernet NTE XG118PRO (SH) Card.')
ethernetNTEXG118PROSHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE XG118PRO (SH) Card.')
ethernetNTEXG118PROSHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet NTE XG118PRO (SH) card.')
ethernetNTEXG118PROSHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 93, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROSHCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the \n              card level.  This applies to all monitored PM entities. \n              The default value of this attribute is interval-15min.  \n              Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered \n              fine-grained intervals.')
ethernetNTEXG118PROACSHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94), )
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardTable.setDescription('Contains information on Ethernet NTE XG118PROAC (SH) Card.\n          These are supported on the FSP150CC XG118PROAC (SH) product.')
ethernetNTEXG118PROACSHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardEntry.setDescription('A conceptual row in the ethernetNTEXG118PROACSHCardTable.')
ethernetNTEXG118PROACSHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE XG118PROAC (SH) Card.')
ethernetNTEXG118PROACSHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardAdminState.setDescription('Administrative State of the Ethernet NTE XG118PROAC (SH) Card.')
ethernetNTEXG118PROACSHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardOperationalState.setDescription('Operational State of the Ethernet NTE XG118PROAC (SH) Card.')
ethernetNTEXG118PROACSHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardSecondaryState.setDescription('Secondary State of the Ethernet NTE XG118PROAC (SH) Card.')
ethernetNTEXG118PROACSHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardVoltage.setDescription('Voltage of the Ethernet NTE XG118PROAC (SH) Card.')
ethernetNTEXG118PROACSHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardTemperature.setDescription('Temperature of the Ethernet NTE XG118PROAC (SH) Card.')
ethernetNTEXG118PROACSHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE XG118PROAC (SH) Card.')
ethernetNTEXG118PROACSHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet NTE XG118PROAC (SH) card.')
ethernetNTEXG118PROACSHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 94, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG118PROACSHCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the \n              card level.  This applies to all monitored PM entities. \n              The default value of this attribute is interval-15min.  \n              Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered \n              fine-grained intervals.')
ethernetNTEGE114ProVmSHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95), )
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardTable.setDescription('Contains information on Ethernet NTE GE114 Pro VM-CH Cards.\n          These are supported on the FSP150CC GE114 Pro VM-CH product.')
ethernetNTEGE114ProVmSHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardEntry.setDescription('A conceptual row in the ethernetNTEGE114ProVmSHCardTable.')
ethernetNTEGE114ProVmSHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE114 Pro VM-CH Card.')
ethernetNTEGE114ProVmSHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardAdminState.setDescription('Administrative State of the Ethernet NTE GE114 Pro VM-CH Card.')
ethernetNTEGE114ProVmSHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardOperationalState.setDescription('Operational State of the Ethernet NTE GE114ProVmSH Card.')
ethernetNTEGE114ProVmSHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE114ProVmSH Card.')
ethernetNTEGE114ProVmSHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardVoltage.setDescription('Voltage of the Ethernet NTE GE114ProVmSH Card.')
ethernetNTEGE114ProVmSHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardTemperature.setDescription('Temperature of the Ethernet NTE GE114ProVmSH Card.')
ethernetNTEGE114ProVmSHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE114ProVmSH Card.')
ethernetNTEGE114ProVmSHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProVmSH card.')
ethernetNTEGE114ProVmSHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE114ProVmSHCardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE114ProVmSH card.')
ethernetNTEGE114ProVmSHCardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 95, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE114ProVmSHCardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE114ProVmSH card.')
ethernetNTEGE104CardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96), )
if mibBuilder.loadTexts: ethernetNTEGE104CardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE104CardTable.setDescription('Contains information on Ethernet NTE GE104 Cards.\n          These are supported on the FSP150CC GE104 product.')
ethernetNTEGE104CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEGE104CardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE104CardEntry.setDescription('A conceptual row in the ethernetNTEGE104CardTable.')
ethernetNTEGE104CardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE104CardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE104CardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE GE104 Card.')
ethernetNTEGE104CardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE104CardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE104CardAdminState.setDescription('Administrative State of the Ethernet NTE GE104 Card.')
ethernetNTEGE104CardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE104CardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE104CardOperationalState.setDescription('Operational State of the Ethernet NTE GE104 Card.')
ethernetNTEGE104CardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE104CardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE104CardSecondaryState.setDescription('Secondary State of the Ethernet NTE GE104 Card.')
ethernetNTEGE104CardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE104CardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE104CardVoltage.setDescription('Voltage of the Ethernet NTE GE102 Card.')
ethernetNTEGE104CardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEGE104CardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE104CardTemperature.setDescription('Temperature of the Ethernet NTE GE104 Card.')
ethernetNTEGE104CardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE104CardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE104CardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE GE104 Card.')
ethernetNTEGE104CardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE104CardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE104CardRestartAction.setDescription('Allows to perform specified action on the Ethernet NTE GE104 card.')
ethernetNTEGE104CardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE104CardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE104CardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the card level.\n              This applies to all monitored PM entities. The default value of this\n              attribute is interval-15min.  Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered fine-grained intervals.')
ethernetNTEGE104CardSwitchPortActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 10), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetNTEGE104CardSwitchPortActionPort.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE104CardSwitchPortActionPort.setDescription('Which port to perform specified switch action on the Ethernet NTE GE104 card.')
ethernetNTEGE104CardSwitchPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 96, 1, 11), SwitchPortAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEGE104CardSwitchPortAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEGE104CardSwitchPortAction.setDescription('Allows to perform specified action on the Ethernet NTE GE104 card.')
ethernetNTEXG120PROSHCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97), )
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardTable.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardTable.setDescription('Contains information on Ethernet NTE XG120PROSH Card.\n          These are supported on the FSP150CC XG120PROSH product.')
ethernetNTEXG120PROSHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardEntry.setDescription('A conceptual row in the ethernetNTEXG120PROSHCardTable.')
ethernetNTEXG120PROSHCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for the Ethernet NTE XG120PROSH Card.')
ethernetNTEXG120PROSHCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardAdminState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardAdminState.setDescription('Administrative State of the Ethernet NTE XG120PROSH Card.')
ethernetNTEXG120PROSHCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardOperationalState.setDescription('Operational State of the Ethernet NTE XG120PROSH Card.')
ethernetNTEXG120PROSHCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardSecondaryState.setDescription('Secondary State of the Ethernet NTE XG120PROSH Card.')
ethernetNTEXG120PROSHCardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardVoltage.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardVoltage.setDescription('Voltage of the Ethernet NTE XG120PROSH Card.')
ethernetNTEXG120PROSHCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardTemperature.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardTemperature.setDescription('Temperature of the Ethernet NTE XG120PROSH Card.')
ethernetNTEXG120PROSHCardSnmpDyingGaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardSnmpDyingGaspEnabled.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardSnmpDyingGaspEnabled.setDescription('Whether or not SNMP dying gasp is enabled \n           on the Ethernet NTE XG120PROSH Card.')
ethernetNTEXG120PROSHCardRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 8), RestartType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardRestartAction.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardRestartAction.setDescription('Allows to perform specified action on the \n              Ethernet NTE XG120PROSH card.')
ethernetNTEXG120PROSHCardFineGrainedPmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 97, 1, 9), CmPmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardFineGrainedPmInterval.setStatus('current')
if mibBuilder.loadTexts: ethernetNTEXG120PROSHCardFineGrainedPmInterval.setDescription('Allows specification of the fine-grained PM interval at the \n              card level.  This applies to all monitored PM entities. \n              The default value of this attribute is interval-15min.  \n              Valid values are interval-5min and interval-15min.\n              interval-1day and rollover are not considered \n              fine-grained intervals.')
mbGnssCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98), )
if mibBuilder.loadTexts: mbGnssCardTable.setStatus('current')
if mibBuilder.loadTexts: mbGnssCardTable.setDescription('A list of entries corresponding to MB GNSS  Expansion Card \n             Facilities for configuration purposes.')
mbGnssCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: mbGnssCardEntry.setStatus('current')
if mibBuilder.loadTexts: mbGnssCardEntry.setDescription('A conceptual row in the mbGnssCardTable')
mbGnssCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbGnssCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: mbGnssCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for this card')
mbGnssCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbGnssCardAdminState.setStatus('current')
if mibBuilder.loadTexts: mbGnssCardAdminState.setDescription('This object represents the Administrative State of the BITS 16 Port Expansion Card.')
mbGnssCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbGnssCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: mbGnssCardOperationalState.setDescription('This object represents the Operational State of the BITS 16 Port Expansion Card.')
mbGnssCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbGnssCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: mbGnssCardSecondaryState.setDescription('This object represents the Secondary State of the BITS 16 Port Expansion Card.')
mbGnssCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mbGnssCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: mbGnssCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of mbGnssCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            mbGnssCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The mbGnssCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
mbGnssCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 98, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbGnssCardAlias.setStatus('current')
if mibBuilder.loadTexts: mbGnssCardAlias.setDescription('This object allows SNMP management entities to provide an \n             alias to the MB GNSS Expansion Card.')
f3IrigCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99), )
if mibBuilder.loadTexts: f3IrigCardTable.setStatus('current')
if mibBuilder.loadTexts: f3IrigCardTable.setDescription('A list of entries corresponding to IRIG Card \n             Facilities for configuration purposes.')
f3IrigCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: f3IrigCardEntry.setStatus('current')
if mibBuilder.loadTexts: f3IrigCardEntry.setDescription('A conceptual row in the f3IrigCardTable')
f3IrigCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for this card')
f3IrigCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigCardAlias.setStatus('current')
if mibBuilder.loadTexts: f3IrigCardAlias.setDescription('This object allows SNMP management entities to provide an \n             alias to the GE 4 Port Expansion Card.')
f3IrigCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigCardAdminState.setStatus('current')
if mibBuilder.loadTexts: f3IrigCardAdminState.setDescription('This object represents the Administrative State of the GE 4 Port Expansion Card.')
f3IrigCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3IrigCardOperationalState.setDescription('This object represents the Operational State of the GE 4 Port Expansion Card.')
f3IrigCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3IrigCardSecondaryState.setDescription('This object represents the Secondary State of the GE 4 Port Expansion Card.')
f3IrigCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigCardTemperature.setStatus('current')
if mibBuilder.loadTexts: f3IrigCardTemperature.setDescription('Temperature of the GE 4 Port Expansion Card.')
f3IrigCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IrigCardStorageType.setStatus('current')
if mibBuilder.loadTexts: f3IrigCardStorageType.setDescription('Storage Type of the IRIG Card.')
f3IrigCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 99, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IrigCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3IrigCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3IrigCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3IrigCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3IrigCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
compositeClockCardTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100), )
if mibBuilder.loadTexts: compositeClockCardTable.setStatus('current')
if mibBuilder.loadTexts: compositeClockCardTable.setDescription('A list of entries corresponding to Composite Clock Expansion Card \n             Facilities for configuration purposes.')
compositeClockCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"))
if mibBuilder.loadTexts: compositeClockCardEntry.setStatus('current')
if mibBuilder.loadTexts: compositeClockCardEntry.setDescription('A conceptual row in the compositeClockCardTable')
compositeClockCardEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compositeClockCardEntityIndex.setStatus('current')
if mibBuilder.loadTexts: compositeClockCardEntityIndex.setDescription('Entity Index from ENTITY-MIB for this card')
compositeClockCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compositeClockCardAdminState.setStatus('current')
if mibBuilder.loadTexts: compositeClockCardAdminState.setDescription('This object represents the Administrative State of the BITS 16 Port Expansion Card.')
compositeClockCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compositeClockCardOperationalState.setStatus('current')
if mibBuilder.loadTexts: compositeClockCardOperationalState.setDescription('This object represents the Operational State of the BITS 16 Port Expansion Card.')
compositeClockCardSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compositeClockCardSecondaryState.setStatus('current')
if mibBuilder.loadTexts: compositeClockCardSecondaryState.setDescription('This object represents the Secondary State of the BITS 16 Port Expansion Card.')
compositeClockCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: compositeClockCardRowStatus.setStatus('current')
if mibBuilder.loadTexts: compositeClockCardRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of compositeClockCardRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            compositeClockCardRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The compositeClockCardRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
compositeClockCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 100, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compositeClockCardAlias.setStatus('current')
if mibBuilder.loadTexts: compositeClockCardAlias.setDescription('This object allows SNMP management entities to provide an \n             alias to the COMPOSITE CLOCK Expansion Card.')
f3StorageDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 101), )
if mibBuilder.loadTexts: f3StorageDeviceTable.setStatus('current')
if mibBuilder.loadTexts: f3StorageDeviceTable.setDescription('Contains information on storage devices within the server card.')
f3StorageDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 101, 1), )
serverCardEntry.registerAugmentions(("CM-ENTITY-MIB", "f3StorageDeviceEntry"))
f3StorageDeviceEntry.setIndexNames(*serverCardEntry.getIndexNames())
if mibBuilder.loadTexts: f3StorageDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: f3StorageDeviceEntry.setDescription('A conceptual row in the f3StorageDeviceTable.')
f3StorageDeviceInternalSsdHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 101, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3StorageDeviceInternalSsdHealth.setStatus('current')
if mibBuilder.loadTexts: f3StorageDeviceInternalSsdHealth.setDescription('Indicates health of internal SSD on server card.')
f3StorageDeviceExternalSsdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 101, 1, 2), StorageStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3StorageDeviceExternalSsdStatus.setStatus('current')
if mibBuilder.loadTexts: f3StorageDeviceExternalSsdStatus.setDescription('Indicates status of external SSD on server card.')
f3StorageDeviceWearoutLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 1, 101, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3StorageDeviceWearoutLevel.setStatus('current')
if mibBuilder.loadTexts: f3StorageDeviceWearoutLevel.setDescription('Indicated wearout level of internal SSD on server card.')
cmEntityCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 1))
cmEntityGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2))
cmEntityCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 1, 1)).setObjects(("CM-ENTITY-MIB", "cmEntityObjectGroup"), ("CM-ENTITY-MIB", "commonEntityGroup"), ("CM-ENTITY-MIB", "psuGroup"), ("CM-ENTITY-MIB", "fanGroup"), ("CM-ENTITY-MIB", "hubshelfGroup"), ("CM-ENTITY-MIB", "nteGe206CardGroup"), ("CM-ENTITY-MIB", "nteGe201SyncECardGroup"), ("CM-ENTITY-MIB", "nteGe201NonSyncECardGroup"), ("CM-ENTITY-MIB", "nteGe206FCardGroup"), ("CM-ENTITY-MIB", "nteGe206VCardGroup"), ("CM-ENTITY-MIB", "nteXg210CardGroup"), ("CM-ENTITY-MIB", "neLLDPParamsGroup"), ("CM-ENTITY-MIB", "nteSh1PcsCardGroup"), ("CM-ENTITY-MIB", "nteXg210CCardGroup"), ("CM-ENTITY-MIB", "geGE8SCryptoConnectorCardGroup"), ("CM-ENTITY-MIB", "nteOsa5420CardGroup"), ("CM-ENTITY-MIB", "nteOsa5421CardGroup"), ("CM-ENTITY-MIB", "bits16PortCardGroup"), ("CM-ENTITY-MIB", "pps16PortCardGroup"), ("CM-ENTITY-MIB", "clk16PortCardGroup"), ("CM-ENTITY-MIB", "todPps16PortCardGroup"), ("CM-ENTITY-MIB", "ge4PortCardGroup"), ("CM-ENTITY-MIB", "nteXg116ProCardGroup"), ("CM-ENTITY-MIB", "nteXg120ProCardGroup"), ("CM-ENTITY-MIB", "nteOsa5401CardGroup"), ("CM-ENTITY-MIB", "nteOsa5405CardGroup"), ("CM-ENTITY-MIB", "csmCardGroup"), ("CM-ENTITY-MIB", "auxPortCardGroup"), ("CM-ENTITY-MIB", "nteGe102ProHCardGroup"), ("CM-ENTITY-MIB", "nteGe102ProEFMHCardGroup"), ("CM-ENTITY-MIB", "nteXg116ProHCardGroup"), ("CM-ENTITY-MIB", "nteXg118ProSHCardGroup"), ("CM-ENTITY-MIB", "nteXg118ProacSHCardGroup"), ("CM-ENTITY-MIB", "nteXg120ProSHCardGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEntityCompliance = cmEntityCompliance.setStatus('current')
if mibBuilder.loadTexts: cmEntityCompliance.setDescription('Describes the requirements for conformance to the CM Entity\n             group.')
cmEntityObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 1))
for _cmEntityObjectGroup_obj in [[("CM-ENTITY-MIB", "neIndex"), ("CM-ENTITY-MIB", "neName"), ("CM-ENTITY-MIB", "neType"), ("CM-ENTITY-MIB", "neContact"), ("CM-ENTITY-MIB", "neLocation"), ("CM-ENTITY-MIB", "neDescription"), ("CM-ENTITY-MIB", "neCmdPromptPrefix"), ("CM-ENTITY-MIB", "neAccepted"), ("CM-ENTITY-MIB", "neFromPort"), ("CM-ENTITY-MIB", "neProvAction"), ("CM-ENTITY-MIB", "neStorageType"), ("CM-ENTITY-MIB", "neRowStatus"), ("CM-ENTITY-MIB", "shelfIndex"), ("CM-ENTITY-MIB", "shelfEntityIndex"), ("CM-ENTITY-MIB", "shelfType"), ("CM-ENTITY-MIB", "shelfbackplaneRev"), ("CM-ENTITY-MIB", "shelfbackplaneDOM"), ("CM-ENTITY-MIB", "shelfbackplaneSerialNo"), ("CM-ENTITY-MIB", "shelfAction"), ("CM-ENTITY-MIB", "shelfAdminState"), ("CM-ENTITY-MIB", "shelfOperationalState"), ("CM-ENTITY-MIB", "shelfSecondaryState"), ("CM-ENTITY-MIB", "shelfMfgSite"), ("CM-ENTITY-MIB", "shelfOscillatorType"), ("CM-ENTITY-MIB", "shelfLedControl"), ("CM-ENTITY-MIB", "slotIndex"), ("CM-ENTITY-MIB", "slotEntityIndex"), ("CM-ENTITY-MIB", "slotType"), ("CM-ENTITY-MIB", "slotCardType"), ("CM-ENTITY-MIB", "slotCardUnitName"), ("CM-ENTITY-MIB", "slotCardFormatVersion"), ("CM-ENTITY-MIB", "slotCardCLEICode"), ("CM-ENTITY-MIB", "slotCardPartNumber"), ("CM-ENTITY-MIB", "slotCardHwRev"), ("CM-ENTITY-MIB", "slotCardSwRev"), ("CM-ENTITY-MIB", "slotCardSerialNum"), ("CM-ENTITY-MIB", "slotCardMfgName"), ("CM-ENTITY-MIB", "slotCardMfgDate"), ("CM-ENTITY-MIB", "slotCardMfgSite"), ("CM-ENTITY-MIB", "slotSecondaryState"), ("CM-ENTITY-MIB", "slotCardPhysicalAddress"), ("CM-ENTITY-MIB", "psuEntityIndex"), ("CM-ENTITY-MIB", "psuType"), ("CM-ENTITY-MIB", "psuAdminState"), ("CM-ENTITY-MIB", "psuOperationalState"), ("CM-ENTITY-MIB", "psuSecondaryState"), ("CM-ENTITY-MIB", "psuOutputVoltage"), ("CM-ENTITY-MIB", "psuTemperature"), ("CM-ENTITY-MIB", "psuOutputCurrent"), ("CM-ENTITY-MIB", "psuStorageType"), ("CM-ENTITY-MIB", "psuRowStatus"), ("CM-ENTITY-MIB", "fanEntityIndex"), ("CM-ENTITY-MIB", "fanAdminState"), ("CM-ENTITY-MIB", "fanOperationalState"), ("CM-ENTITY-MIB", "fanSecondaryState"), ("CM-ENTITY-MIB", "scuEntityIndex"), ("CM-ENTITY-MIB", "scuAdminState"), ("CM-ENTITY-MIB", "scuOperationalState"), ("CM-ENTITY-MIB", "scuSecondaryState"), ("CM-ENTITY-MIB", "scuVoltage"), ("CM-ENTITY-MIB", "scuTemperature"), ("CM-ENTITY-MIB", "scuRestartAction"), ("CM-ENTITY-MIB", "scuStorageType"), ("CM-ENTITY-MIB", "scuRowStatus"), ("CM-ENTITY-MIB", "nemiEntityIndex"), ("CM-ENTITY-MIB", "nemiAdminState"), ("CM-ENTITY-MIB", "nemiOperationalState"), ("CM-ENTITY-MIB", "nemiSecondaryState"), ("CM-ENTITY-MIB", "nemiVoltage"), ("CM-ENTITY-MIB", "nemiTemperature"), ("CM-ENTITY-MIB", "nemiRestartAction"), ("CM-ENTITY-MIB", "nemiStorageType"), ("CM-ENTITY-MIB", "nemiRowStatus"), ("CM-ENTITY-MIB", "nemiForceOffLineAction"), ("CM-ENTITY-MIB", "ethernetNTUCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTUCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTUCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTUCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTUCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTUCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTUCardStorageType"), ("CM-ENTITY-MIB", "ethernetNTUCardRowStatus"), ("CM-ENTITY-MIB", "ethernetCPMRCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetCPMRCardAdminState"), ("CM-ENTITY-MIB", "ethernetCPMRCardOperationalState"), ("CM-ENTITY-MIB", "ethernetCPMRCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetCPMRCardVoltage"), ("CM-ENTITY-MIB", "ethernetCPMRCardTemperature"), ("CM-ENTITY-MIB", "ethernetCPMRCardRestartAction"), ("CM-ENTITY-MIB", "ethernetCPMRCardPSU1State"), ("CM-ENTITY-MIB", "ethernetCPMRCardPSU2State"), ("CM-ENTITY-MIB", "ethernetCPMRCardFAN1State"), ("CM-ENTITY-MIB", "ethernetCPMRCardFAN2State"), ("CM-ENTITY-MIB", "ethernetCPMRCardPsuType"), ("CM-ENTITY-MIB", "ethernetCPMRCardLLFMode"), ("CM-ENTITY-MIB", "ethernetCPMRCardLLFModeAction"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE101CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardRestartAction"), ("CM-ENTITY-MIB", "pseudoWireE3CardEntityIndex"), ("CM-ENTITY-MIB", "pseudoWireE3CardAdminState"), ("CM-ENTITY-MIB", "pseudoWireE3CardOperationalState"), ("CM-ENTITY-MIB", "pseudoWireE3CardSecondaryState"), ("CM-ENTITY-MIB", "pseudoWireE3CardIpAddress"), ("CM-ENTITY-MIB", "pseudoWireE3CardIpNetmask"), ("CM-ENTITY-MIB", "pseudoWireE3CardIpGateway"), ("CM-ENTITY-MIB", "pseudoWireE3CardDhcpEnabled"), ("CM-ENTITY-MIB", "pseudoWireE3CardMgmtVlanId"), ("CM-ENTITY-MIB", "pseudoWireE3CardTimeOfDay"), ("CM-ENTITY-MIB", "pseudoWireE3CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardRestartAction"), ("CM-ENTITY-MIB", "ethernet1x10GCardEntityIndex"), ("CM-ENTITY-MIB", "ethernet1x10GCardAdminState"), ("CM-ENTITY-MIB", "ethernet1x10GCardOperationalState"), ("CM-ENTITY-MIB", "ethernet1x10GCardSecondaryState"), ("CM-ENTITY-MIB", "ethernet1x10GCardTemperature"), ("CM-ENTITY-MIB", "ethernet1x10GCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernet1x10GCardRestartAction"), ("CM-ENTITY-MIB", "ethernet1x10GCardStorageType"), ("CM-ENTITY-MIB", "ethernet1x10GCardRowStatus"), ("CM-ENTITY-MIB", "ethernet1x10GCardForceOffLineAction"), ("CM-ENTITY-MIB", "ethernet10x1GCardEntityIndex"), ("CM-ENTITY-MIB", "ethernet10x1GCardAdminState"), ("CM-ENTITY-MIB", "ethernet10x1GCardOperationalState"), ("CM-ENTITY-MIB", "ethernet10x1GCardSecondaryState"), ("CM-ENTITY-MIB", "ethernet10x1GCardTemperature"), ("CM-ENTITY-MIB", "ethernet10x1GCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernet10x1GCardRestartAction"), ("CM-ENTITY-MIB", "ethernet10x1GCardStorageType"), ("CM-ENTITY-MIB", "ethernet10x1GCardRowStatus"), ("CM-ENTITY-MIB", "ethernet10x1GCardForceOffLineAction"), ("CM-ENTITY-MIB", "ethernetSWFCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetSWFCardAdminState"), ("CM-ENTITY-MIB", "ethernetSWFCardOperationalState"), ("CM-ENTITY-MIB", "ethernetSWFCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetSWFCardTemperature"), ("CM-ENTITY-MIB", "ethernetSWFCardRestartAction"), ("CM-ENTITY-MIB", "ethernetSWFCardStorageType"), ("CM-ENTITY-MIB", "ethernetSWFCardRowStatus"), ("CM-ENTITY-MIB", "ethernetSWFCardForceOffLineAction"), ("CM-ENTITY-MIB", "stuCardEntityIndex"), ("CM-ENTITY-MIB", "stuCardAdminState"), ("CM-ENTITY-MIB", "stuCardOperationalState"), ("CM-ENTITY-MIB", "stuCardSecondaryState"), ("CM-ENTITY-MIB", "stuCardTemperature"), ("CM-ENTITY-MIB", "stuCardRestartAction"), ("CM-ENTITY-MIB", "stuCardStorageType"), ("CM-ENTITY-MIB", "stuCardRowStatus"), ("CM-ENTITY-MIB", "stuCardForceOffLineAction"), ("CM-ENTITY-MIB", "amiEntityIndex"), ("CM-ENTITY-MIB", "amiAdminState"), ("CM-ENTITY-MIB", "amiOperationalState"), ("CM-ENTITY-MIB", "amiSecondaryState"), ("CM-ENTITY-MIB", "amiTemperature"), ("CM-ENTITY-MIB", "amiRestartAction"), ("CM-ENTITY-MIB", "stiEntityIndex"), ("CM-ENTITY-MIB", "stiAdminState"), ("CM-ENTITY-MIB", "stiOperationalState"), ("CM-ENTITY-MIB", "stiSecondaryState"), ("CM-ENTITY-MIB", "stiTemperature"), ("CM-ENTITY-MIB", "stiStorageType"), ("CM-ENTITY-MIB", "stiRowStatus"), ("CM-ENTITY-MIB", "f3UsbHostIndex"), ("CM-ENTITY-MIB", "f3UsbHostEntityIndex"), ("CM-ENTITY-MIB", "f3UsbHostUnitName"), ("CM-ENTITY-MIB", "f3UsbHostFormatVersion"), ("CM-ENTITY-MIB", "f3UsbHostCLEICode"), ("CM-ENTITY-MIB", "f3UsbHostPartNumber"), ("CM-ENTITY-MIB", "f3UsbHostHwRev"), ("CM-ENTITY-MIB", "f3UsbHostSwRev"), ("CM-ENTITY-MIB", "f3UsbHostSerialNum"), ("CM-ENTITY-MIB", "f3UsbHostMfgName"), ("CM-ENTITY-MIB", "f3UsbHostMfgDate"), ("CM-ENTITY-MIB", "f3UsbHostMfgSite"), ("CM-ENTITY-MIB", "f3UsbHostSecondaryState"), ("CM-ENTITY-MIB", "f3UsbHostPhysicalAddress"), ("CM-ENTITY-MIB", "f3UsbHostMuxOperationalMode"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSwitchPortAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSwitchPortAction"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardAdminState"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardOperationalState"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardTemperature"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardRestartAction"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardStorageType"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardRowStatus"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardForceOffLineAction"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardMode"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardEntityIndex"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardAdminState"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardOperationalState"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardSecondaryState"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardTemperature"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardRestartAction"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardStorageType"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardRowStatus")], [("CM-ENTITY-MIB", "ethernet1x10GHighPerCardForceOffLineAction"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardEntityIndex"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardAdminState"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardOperationalState"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardSecondaryState"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardTemperature"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardRestartAction"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardStorageType"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardRowStatus"), ("CM-ENTITY-MIB", "ethernet10x1GHighPerCardForceOffLineAction")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        cmEntityObjectGroup = cmEntityObjectGroup.setObjects(*_cmEntityObjectGroup_obj)
    else:
        cmEntityObjectGroup = cmEntityObjectGroup.setObjects(*_cmEntityObjectGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEntityObjectGroup = cmEntityObjectGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cmEntityObjectGroup.setDescription('*************** THIS OBJECT GROUP IS DEPRECATED ******************\n             A collection of objects used to manage the CM Entity group.')
commonEntityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 2)).setObjects(("CM-ENTITY-MIB", "neIndex"), ("CM-ENTITY-MIB", "neName"), ("CM-ENTITY-MIB", "neType"), ("CM-ENTITY-MIB", "neContact"), ("CM-ENTITY-MIB", "neLocation"), ("CM-ENTITY-MIB", "neDescription"), ("CM-ENTITY-MIB", "neCmdPromptPrefix"), ("CM-ENTITY-MIB", "neAccepted"), ("CM-ENTITY-MIB", "neFromPort"), ("CM-ENTITY-MIB", "neProvAction"), ("CM-ENTITY-MIB", "neStorageType"), ("CM-ENTITY-MIB", "neRowStatus"), ("CM-ENTITY-MIB", "neAutoProvMode"), ("CM-ENTITY-MIB", "neFineGrainedPmInterval"), ("CM-ENTITY-MIB", "shelfIndex"), ("CM-ENTITY-MIB", "shelfEntityIndex"), ("CM-ENTITY-MIB", "shelfType"), ("CM-ENTITY-MIB", "shelfbackplaneRev"), ("CM-ENTITY-MIB", "shelfbackplaneDOM"), ("CM-ENTITY-MIB", "shelfbackplaneSerialNo"), ("CM-ENTITY-MIB", "shelfAction"), ("CM-ENTITY-MIB", "shelfAdminState"), ("CM-ENTITY-MIB", "shelfOperationalState"), ("CM-ENTITY-MIB", "shelfSecondaryState"), ("CM-ENTITY-MIB", "shelfMfgSite"), ("CM-ENTITY-MIB", "shelfOscillatorType"), ("CM-ENTITY-MIB", "shelfLedControl"), ("CM-ENTITY-MIB", "slotIndex"), ("CM-ENTITY-MIB", "slotEntityIndex"), ("CM-ENTITY-MIB", "slotType"), ("CM-ENTITY-MIB", "slotCardType"), ("CM-ENTITY-MIB", "slotCardUnitName"), ("CM-ENTITY-MIB", "slotCardFormatVersion"), ("CM-ENTITY-MIB", "slotCardCLEICode"), ("CM-ENTITY-MIB", "slotCardPartNumber"), ("CM-ENTITY-MIB", "slotCardHwRev"), ("CM-ENTITY-MIB", "slotCardSwRev"), ("CM-ENTITY-MIB", "slotCardSerialNum"), ("CM-ENTITY-MIB", "slotCardMfgName"), ("CM-ENTITY-MIB", "slotCardMfgDate"), ("CM-ENTITY-MIB", "slotCardMfgSite"), ("CM-ENTITY-MIB", "slotSecondaryState"), ("CM-ENTITY-MIB", "slotCardPhysicalAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    commonEntityGroup = commonEntityGroup.setStatus('current')
if mibBuilder.loadTexts: commonEntityGroup.setDescription('A collection of common objects used to manage any F3 product \n             family product.')
psuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 3)).setObjects(("CM-ENTITY-MIB", "psuEntityIndex"), ("CM-ENTITY-MIB", "psuType"), ("CM-ENTITY-MIB", "psuAdminState"), ("CM-ENTITY-MIB", "psuOperationalState"), ("CM-ENTITY-MIB", "psuSecondaryState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    psuGroup = psuGroup.setStatus('current')
if mibBuilder.loadTexts: psuGroup.setDescription('A collection of objects used to manage the F3 Power Supply \n             units.')
fanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 4)).setObjects(("CM-ENTITY-MIB", "fanEntityIndex"), ("CM-ENTITY-MIB", "fanAdminState"), ("CM-ENTITY-MIB", "fanOperationalState"), ("CM-ENTITY-MIB", "fanSecondaryState"), ("CM-ENTITY-MIB", "fanStorageType"), ("CM-ENTITY-MIB", "fanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fanGroup = fanGroup.setStatus('current')
if mibBuilder.loadTexts: fanGroup.setDescription('A collection of objects used to manage the F3 Fan units.')
hubshelfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 5)).setObjects(("CM-ENTITY-MIB", "scuEntityIndex"), ("CM-ENTITY-MIB", "scuAdminState"), ("CM-ENTITY-MIB", "scuOperationalState"), ("CM-ENTITY-MIB", "scuSecondaryState"), ("CM-ENTITY-MIB", "scuVoltage"), ("CM-ENTITY-MIB", "scuTemperature"), ("CM-ENTITY-MIB", "scuRestartAction"), ("CM-ENTITY-MIB", "scuStorageType"), ("CM-ENTITY-MIB", "scuRowStatus"), ("CM-ENTITY-MIB", "scuFlashModelNum"), ("CM-ENTITY-MIB", "scuFlashFirmwareRev"), ("CM-ENTITY-MIB", "scuFlashSerialNum"), ("CM-ENTITY-MIB", "nemiEntityIndex"), ("CM-ENTITY-MIB", "nemiAdminState"), ("CM-ENTITY-MIB", "nemiOperationalState"), ("CM-ENTITY-MIB", "nemiSecondaryState"), ("CM-ENTITY-MIB", "nemiVoltage"), ("CM-ENTITY-MIB", "nemiTemperature"), ("CM-ENTITY-MIB", "nemiRestartAction"), ("CM-ENTITY-MIB", "nemiStorageType"), ("CM-ENTITY-MIB", "nemiRowStatus"), ("CM-ENTITY-MIB", "nemiFlashModelNum"), ("CM-ENTITY-MIB", "nemiFlashFirmwareRev"), ("CM-ENTITY-MIB", "nemiFlashSerialNum"), ("CM-ENTITY-MIB", "ethernetNTUCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTUCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTUCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTUCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTUCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTUCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTUCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTUCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTUCardStorageType"), ("CM-ENTITY-MIB", "ethernetNTUCardRowStatus"), ("CM-ENTITY-MIB", "ethernetCPMRCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetCPMRCardAdminState"), ("CM-ENTITY-MIB", "ethernetCPMRCardOperationalState"), ("CM-ENTITY-MIB", "ethernetCPMRCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetCPMRCardVoltage"), ("CM-ENTITY-MIB", "ethernetCPMRCardTemperature"), ("CM-ENTITY-MIB", "ethernetCPMRCardRestartAction"), ("CM-ENTITY-MIB", "ethernetCPMRCardPSU1State"), ("CM-ENTITY-MIB", "ethernetCPMRCardPSU2State"), ("CM-ENTITY-MIB", "ethernetCPMRCardFAN1State"), ("CM-ENTITY-MIB", "ethernetCPMRCardFAN2State"), ("CM-ENTITY-MIB", "ethernetCPMRCardPsuType"), ("CM-ENTITY-MIB", "ethernetCPMRCardLLFMode"), ("CM-ENTITY-MIB", "ethernetCPMRCardLLFModeAction"), ("CM-ENTITY-MIB", "scuTEntityIndex"), ("CM-ENTITY-MIB", "scuTAdminState"), ("CM-ENTITY-MIB", "scuTOperationalState"), ("CM-ENTITY-MIB", "scuTSecondaryState"), ("CM-ENTITY-MIB", "scuTVoltage"), ("CM-ENTITY-MIB", "scuTTemperature"), ("CM-ENTITY-MIB", "scuTRestartAction"), ("CM-ENTITY-MIB", "scuTStorageType"), ("CM-ENTITY-MIB", "scuTRowStatus"), ("CM-ENTITY-MIB", "ethernetNTECardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTECardAdminState"), ("CM-ENTITY-MIB", "ethernetNTECardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTECardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTECardVoltage"), ("CM-ENTITY-MIB", "ethernetNTECardTemperature"), ("CM-ENTITY-MIB", "ethernetNTECardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTECardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTECardStorageType"), ("CM-ENTITY-MIB", "ethernetNTECardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubshelfGroup = hubshelfGroup.setStatus('current')
if mibBuilder.loadTexts: hubshelfGroup.setDescription('A collection of objects used to manage the CM Hub Shelf \n             entities.')
nteGe206CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 6)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE206CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE206CardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe206CardGroup = nteGe206CardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe206CardGroup.setDescription('A collection of objects used to manage the GE206 Card.')
nteGe201SyncECardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 7)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE201SyncECardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe201SyncECardGroup = nteGe201SyncECardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe201SyncECardGroup.setDescription('A collection of objects used to manage the GE201 Sync Ethernet Card.')
nteGe201NonSyncECardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 8)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE201CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE201CardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe201NonSyncECardGroup = nteGe201NonSyncECardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe201NonSyncECardGroup.setDescription('A collection of objects used to manage the GE201 Non SyncE Card.')
nteGe206FCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 9)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE206FCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE206FCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe206FCardGroup = nteGe206FCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe206FCardGroup.setDescription('A collection of objects used to manage the GE206F Card.')
nteGe112CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 10)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE112CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE112CardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe112CardGroup = nteGe112CardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe112CardGroup.setDescription('A collection of objects used to manage the GE112 Card.')
nteGe114CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 11)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114CardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114CardGroup = nteGe114CardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe114CardGroup.setDescription('A collection of objects used to manage the GE114 Card.')
nteGe206VCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 12)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE206VCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE206VCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe206VCardGroup = nteGe206VCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe206VCardGroup.setDescription('A collection of objects used to manage the GE206V Card.')
nteXg210CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 13)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG210CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG210CardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg210CardGroup = nteXg210CardGroup.setStatus('current')
if mibBuilder.loadTexts: nteXg210CardGroup.setDescription('A collection of objects used to manage the XG210 Card.')
pseudoWireCardOcnStmCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 14)).setObjects(("CM-ENTITY-MIB", "pseudoWireOcnStmCardEntityIndex"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardAdminState"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardOperationalState"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardSecondaryState"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardIpAddress"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardMode"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardVoltage"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardTemperature"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardRestartAction"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardStorageType"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardRowStatus"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardPSNEncapsulation"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardFreqSourceType"), ("CM-ENTITY-MIB", "pseudoWireOcnStmCardFreqSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pseudoWireCardOcnStmCardGroup = pseudoWireCardOcnStmCardGroup.setStatus('current')
if mibBuilder.loadTexts: pseudoWireCardOcnStmCardGroup.setDescription('A collection of objects used to manage the Pseudo Wire OCN/STM Card.')
pseudoWireCardE1T1CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 15)).setObjects(("CM-ENTITY-MIB", "pseudoWireE1T1CardEntityIndex"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardAdminState"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardOperationalState"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardSecondaryState"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardIpAddress"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardMode"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardVoltage"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardTemperature"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardRestartAction"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardStorageType"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardRowStatus"), ("CM-ENTITY-MIB", "pseudoWireE1T1CardPSNEncapsulation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pseudoWireCardE1T1CardGroup = pseudoWireCardE1T1CardGroup.setStatus('current')
if mibBuilder.loadTexts: pseudoWireCardE1T1CardGroup.setDescription('A collection of objects used to manage the Pseudo Wire E1/T1 Card.')
nteT1804CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 16)).setObjects(("CM-ENTITY-MIB", "ethernetNTET1804CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTET1804CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTET1804CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTET1804CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTET1804CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTET1804CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTET1804CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTET1804CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTET1804CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTET1804CardMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteT1804CardGroup = nteT1804CardGroup.setStatus('current')
if mibBuilder.loadTexts: nteT1804CardGroup.setDescription('A collection of objects used to manage the T1804 Card.')
nteT3204CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 17)).setObjects(("CM-ENTITY-MIB", "ethernetNTET3204CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTET3204CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTET3204CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTET3204CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTET3204CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTET3204CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTET3204CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTET3204CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTET3204CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTET3204CardMode"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteT3204CardGroup = nteT3204CardGroup.setStatus('current')
if mibBuilder.loadTexts: nteT3204CardGroup.setDescription('A collection of objects used to manage the T3204 Card.')
nteGeSyncProbeCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 18)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGESyncProbeCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGeSyncProbeCardGroup = nteGeSyncProbeCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGeSyncProbeCardGroup.setDescription('A collection of objects used to manage the GE SyncProbe Card.')
xg1XCCCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 19)).setObjects(("CM-ENTITY-MIB", "ethernetXG1XCCCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardAdminState"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardOperationalState"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardVoltage"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetXG1XCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xg1XCCCardGroup = xg1XCCCardGroup.setStatus('current')
if mibBuilder.loadTexts: xg1XCCCardGroup.setDescription('A collection of objects used to manage the XG 1X CC Card.')
xg1SCCCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 20)).setObjects(("CM-ENTITY-MIB", "ethernetXG1SCCCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardAdminState"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardOperationalState"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardVoltage"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetXG1SCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xg1SCCCardGroup = xg1SCCCardGroup.setStatus('current')
if mibBuilder.loadTexts: xg1SCCCardGroup.setDescription('A collection of objects used to manage the XG 1S CC Card.')
ge4ECCCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 21)).setObjects(("CM-ENTITY-MIB", "ethernetGE4ECCCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardAdminState"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardOperationalState"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardVoltage"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE4ECCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ge4ECCCardGroup = ge4ECCCardGroup.setStatus('current')
if mibBuilder.loadTexts: ge4ECCCardGroup.setDescription('A collection of objects used to manage the GE 4E CC Card.')
ge4SCCCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 22)).setObjects(("CM-ENTITY-MIB", "ethernetGE4SCCCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardAdminState"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardOperationalState"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardVoltage"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ge4SCCCardGroup = ge4SCCCardGroup.setStatus('current')
if mibBuilder.loadTexts: ge4SCCCardGroup.setDescription('A collection of objects used to manage the GE 4S CC Card.')
ge8SCCCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 23)).setObjects(("CM-ENTITY-MIB", "ethernetGE8SCCCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardAdminState"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardOperationalState"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardVoltage"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE8SCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ge8SCCCardGroup = ge8SCCCardGroup.setStatus('current')
if mibBuilder.loadTexts: ge8SCCCardGroup.setDescription('A collection of objects used to manage the GE 8S CC Card.')
nteGe114HCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 24)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114HCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114HCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114HCardGroup = nteGe114HCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe114HCardGroup.setDescription('A collection of objects used to manage the GE114H Card.')
nteGe114PHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 25)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114PHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114PHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114PHCardGroup = nteGe114PHCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe114PHCardGroup.setDescription('A collection of objects used to manage the GE114PH Card.')
ethernetOverOCSTMCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 26)).setObjects(("CM-ENTITY-MIB", "ethernetOverOCSTMCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardAdminState"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardOperationalState"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardTemperature"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardRestartAction"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardStorageType"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardRowStatus"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardForceOffLineAction"), ("CM-ENTITY-MIB", "ethernetOverOCSTMCardMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetOverOCSTMCardGroup = ethernetOverOCSTMCardGroup.setStatus('current')
if mibBuilder.loadTexts: ethernetOverOCSTMCardGroup.setDescription('A collection of objects used to manage the cards.')
ethernet1x10GHighPerCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 27)).setObjects(("CM-ENTITY-MIB", "ethernet1x10GHighPerCardEntityIndex"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardAdminState"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardOperationalState"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardSecondaryState"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardTemperature"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardRestartAction"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardStorageType"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardRowStatus"), ("CM-ENTITY-MIB", "ethernet1x10GHighPerCardForceOffLineAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernet1x10GHighPerCardGroup = ethernet1x10GHighPerCardGroup.setStatus('current')
if mibBuilder.loadTexts: ethernet1x10GHighPerCardGroup.setDescription('A collection of objects used to manage the cards.')
ethernetFE36ECardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 28)).setObjects(("CM-ENTITY-MIB", "ethernetFE36ECardEntityIndex"), ("CM-ENTITY-MIB", "ethernetFE36ECardAdminState"), ("CM-ENTITY-MIB", "ethernetFE36ECardOperationalState"), ("CM-ENTITY-MIB", "ethernetFE36ECardSecondaryState"), ("CM-ENTITY-MIB", "ethernetFE36ECardTemperature"), ("CM-ENTITY-MIB", "ethernetFE36ECardRestartAction"), ("CM-ENTITY-MIB", "ethernetFE36ECardStorageType"), ("CM-ENTITY-MIB", "ethernetFE36ECardRowStatus"), ("CM-ENTITY-MIB", "ethernetFE36ECardForceOffLineAction"), ("CM-ENTITY-MIB", "ethernetFE36ECard8023azEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetFE36ECardGroup = ethernetFE36ECardGroup.setStatus('current')
if mibBuilder.loadTexts: ethernetFE36ECardGroup.setDescription('A collection of objects used to manage the cards.')
nteGe114SHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 29)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114SHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114SHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114SHCardGroup = nteGe114SHCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe114SHCardGroup.setDescription('A collection of objects used to manage the GE114SH Card.')
nteGe114SCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 30)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114SCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114SCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114SCardGroup = nteGe114SCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe114SCardGroup.setDescription('A collection of objects used to manage the GE114S Card.')
ge8ECCCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 31)).setObjects(("CM-ENTITY-MIB", "ethernetGE8ECCCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardAdminState"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardOperationalState"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardVoltage"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE8ECCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ge8ECCCardGroup = ge8ECCCardGroup.setStatus('current')
if mibBuilder.loadTexts: ge8ECCCardGroup.setDescription('A collection of objects used to manage the GE 8E CC Card.')
neLLDPParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 32)).setObjects(("CM-ENTITY-MIB", "neLLDPParamsLLDPEnableAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    neLLDPParamsGroup = neLLDPParamsGroup.setStatus('current')
if mibBuilder.loadTexts: neLLDPParamsGroup.setDescription('A collection of objects used to manage the LLDP params on NE.')
nteSh1PcsCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 33)).setObjects(("CM-ENTITY-MIB", "ethernetNTESH1PCSCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTESH1PCSCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteSh1PcsCardGroup = nteSh1PcsCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteSh1PcsCardGroup.setDescription('A collection of objects used to manage the SH1PCS Card.')
nteOsa5411CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 34)).setObjects(("CM-ENTITY-MIB", "ethernetNTEOSA5411CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEOSA5411CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteOsa5411CardGroup = nteOsa5411CardGroup.setStatus('current')
if mibBuilder.loadTexts: nteOsa5411CardGroup.setDescription('A collection of objects used to manage the OSA5411 Card.')
nteGe112ProCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 35)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE112ProCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe112ProCardGroup = nteGe112ProCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe112ProCardGroup.setDescription('A collection of objects used to manage the GE112Pro Card.')
nteGe112ProMCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 36)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProMCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe112ProMCardGroup = nteGe112ProMCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe112ProMCardGroup.setDescription('A collection of objects used to manage the GE112ProM Card.')
nteGe114ProCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 37)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114ProCardGroup = nteGe114ProCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe114ProCardGroup.setDescription('A collection of objects used to manage the GE114Pro Card.')
nteGe114ProCCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 38)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114ProCCardGroup = nteGe114ProCCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe114ProCCardGroup.setDescription('A collection of objects used to manage the GE114ProC Card.')
nteGe114ProSHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 39)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProSHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114ProSHCardGroup = nteGe114ProSHCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe114ProSHCardGroup.setDescription('A collection of objects used to manage the GE114ProSH Card.')
nteGe114ProCSHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 40)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProCSHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114ProCSHCardGroup = nteGe114ProCSHCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe114ProCSHCardGroup.setDescription('A collection of objects used to manage the GE114ProCSH Card.')
nteGe114ProHECardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 41)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProHECardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114ProHECardGroup = nteGe114ProHECardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe114ProHECardGroup.setDescription('A collection of objects used to manage the GE114ProHE Card.')
nteGe112ProHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 42)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe112ProHCardGroup = nteGe112ProHCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe112ProHCardGroup.setDescription('A collection of objects used to manage the GE112ProH Card.')
nteXg210CCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 43)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG210CCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG210CCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg210CCardGroup = nteXg210CCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteXg210CCardGroup.setDescription('A collection of objects used to manage the XG210 Card.')
geGE8SCryptoConnectorCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 44)).setObjects(("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardAdminState"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardOperationalState"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardVoltage"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE8SCryptoConnectorCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    geGE8SCryptoConnectorCardGroup = geGE8SCryptoConnectorCardGroup.setStatus('current')
if mibBuilder.loadTexts: geGE8SCryptoConnectorCardGroup.setDescription('A collection of objects used to manage the GE 8S CC Card.')
nteOsa5420CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 45)).setObjects(("CM-ENTITY-MIB", "ethernetNTEOSA5420CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEOSA5420CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteOsa5420CardGroup = nteOsa5420CardGroup.setStatus('current')
if mibBuilder.loadTexts: nteOsa5420CardGroup.setDescription('A collection of objects used to manage the OSA5420 Card.')
nteOsa5421CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 46)).setObjects(("CM-ENTITY-MIB", "ethernetNTEOSA5421CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEOSA5421CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardTemperature"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRestartAction"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardStorageType"), ("CM-ENTITY-MIB", "ethernetGE4SCCCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteOsa5421CardGroup = nteOsa5421CardGroup.setStatus('current')
if mibBuilder.loadTexts: nteOsa5421CardGroup.setDescription('A collection of objects used to manage the OSA5421 Card.')
nteGe114GCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 47)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114GCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114GCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe114GCardGroup = nteGe114GCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe114GCardGroup.setDescription('A collection of objects used to manage the GE114G Card.')
bits16PortCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 48)).setObjects(("CM-ENTITY-MIB", "bits16PortCardEntityIndex"), ("CM-ENTITY-MIB", "bits16PortCardAdminState"), ("CM-ENTITY-MIB", "bits16PortCardOperationalState"), ("CM-ENTITY-MIB", "bits16PortCardSecondaryState"), ("CM-ENTITY-MIB", "bits16PortCardRowStatus"), ("CM-ENTITY-MIB", "bits16PortCardAlias"), ("CM-ENTITY-MIB", "bits16PortCardTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bits16PortCardGroup = bits16PortCardGroup.setStatus('current')
if mibBuilder.loadTexts: bits16PortCardGroup.setDescription('A collection of objects used to manage the BITS 16 PORT EXP Card.')
nteGE114ProVmHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 49)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGE114ProVmHCardGroup = nteGE114ProVmHCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGE114ProVmHCardGroup.setDescription('A collection of objects used to manage the GE114ProVmH Card.')
nteGE114ProVmCHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 50)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGE114ProVmCHCardGroup = nteGE114ProVmCHCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGE114ProVmCHCardGroup.setDescription('A collection of objects used to manage the GE114ProVmCH Card.')
nteGE114ProVmCSHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 51)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmCSHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGE114ProVmCSHCardGroup = nteGE114ProVmCSHCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGE114ProVmCSHCardGroup.setDescription('A collection of objects used to manage the GE114ProVmCSH Card.')
serverCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 52)).setObjects(("CM-ENTITY-MIB", "serverCardEntityIndex"), ("CM-ENTITY-MIB", "serverCardAdminState"), ("CM-ENTITY-MIB", "serverCardOperationalState"), ("CM-ENTITY-MIB", "serverCardSecondaryState"), ("CM-ENTITY-MIB", "serverCardStorageType"), ("CM-ENTITY-MIB", "serverCardVoltage"), ("CM-ENTITY-MIB", "serverCardTemperature"), ("CM-ENTITY-MIB", "serverCardUpTime"), ("CM-ENTITY-MIB", "serverCardVmNumber"), ("CM-ENTITY-MIB", "serverCardVirtualCpuTotal"), ("CM-ENTITY-MIB", "serverCardVirtualCpuAvailiable"), ("CM-ENTITY-MIB", "serverCardMemoryTotal"), ("CM-ENTITY-MIB", "serverCardMemoryAvailiable"), ("CM-ENTITY-MIB", "serverCardStorageTotal"), ("CM-ENTITY-MIB", "serverCardStorageAvailiable"), ("CM-ENTITY-MIB", "serverCardHvVersion"), ("CM-ENTITY-MIB", "serverCardHostName"), ("CM-ENTITY-MIB", "serverCardRestartAction"), ("CM-ENTITY-MIB", "serverCardRowStatus"), ("CM-ENTITY-MIB", "serverCardIgnoreWatchdog"), ("CM-ENTITY-MIB", "f3StorageDeviceInternalSsdHealth"), ("CM-ENTITY-MIB", "f3StorageDeviceExternalSsdStatus"), ("CM-ENTITY-MIB", "f3StorageDeviceWearoutLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    serverCardGroup = serverCardGroup.setStatus('current')
if mibBuilder.loadTexts: serverCardGroup.setDescription('A collection of objects used to manage the Server Card.')
pps16PortCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 53)).setObjects(("CM-ENTITY-MIB", "pps16PortCardEntityIndex"), ("CM-ENTITY-MIB", "pps16PortCardAdminState"), ("CM-ENTITY-MIB", "pps16PortCardOperationalState"), ("CM-ENTITY-MIB", "pps16PortCardSecondaryState"), ("CM-ENTITY-MIB", "pps16PortCardRowStatus"), ("CM-ENTITY-MIB", "pps16PortCardAlias"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pps16PortCardGroup = pps16PortCardGroup.setStatus('current')
if mibBuilder.loadTexts: pps16PortCardGroup.setDescription('A collection of objects used to manage the PPS 16 PORT EXP Card.')
clk16PortCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 54)).setObjects(("CM-ENTITY-MIB", "clk16PortCardEntityIndex"), ("CM-ENTITY-MIB", "clk16PortCardAdminState"), ("CM-ENTITY-MIB", "clk16PortCardOperationalState"), ("CM-ENTITY-MIB", "clk16PortCardSecondaryState"), ("CM-ENTITY-MIB", "clk16PortCardRowStatus"), ("CM-ENTITY-MIB", "clk16PortCardAlias"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clk16PortCardGroup = clk16PortCardGroup.setStatus('current')
if mibBuilder.loadTexts: clk16PortCardGroup.setDescription('A collection of objects used to manage the PPS 16 PORT EXP Card.')
todPps16PortCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 55)).setObjects(("CM-ENTITY-MIB", "todPps16PortCardEntityIndex"), ("CM-ENTITY-MIB", "todPps16PortCardAdminState"), ("CM-ENTITY-MIB", "todPps16PortCardOperationalState"), ("CM-ENTITY-MIB", "todPps16PortCardSecondaryState"), ("CM-ENTITY-MIB", "todPps16PortCardRowStatus"), ("CM-ENTITY-MIB", "todPps16PortCardAlias"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    todPps16PortCardGroup = todPps16PortCardGroup.setStatus('current')
if mibBuilder.loadTexts: todPps16PortCardGroup.setDescription('A collection of objects used to manage the PPS 16 PORT EXP Card.')
nteGe101ProCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 56)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE101ProCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE101ProCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe101ProCardGroup = nteGe101ProCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe101ProCardGroup.setDescription('A collection of objects used to manage the GE101Pro Card.')
nteGo102ProSCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 57)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGo102ProSCardGroup = nteGo102ProSCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGo102ProSCardGroup.setDescription('A collection of objects used to manage the GO102ProS Card.')
nteGo102ProSPCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 58)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSPCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGo102ProSPCardGroup = nteGo102ProSPCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGo102ProSPCardGroup.setDescription('A collection of objects used to manage the GO102ProSP Card.')
nteCx101Pro30ACardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 59)).setObjects(("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardAdminState"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardVoltage"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardTemperature"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTECX101Pro30ACardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteCx101Pro30ACardGroup = nteCx101Pro30ACardGroup.setStatus('current')
if mibBuilder.loadTexts: nteCx101Pro30ACardGroup.setDescription('A collection of objects used to manage the CX101Pro30A Card.')
nteCx102Pro30ACardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 60)).setObjects(("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardAdminState"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardVoltage"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardTemperature"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTECX102Pro30ACardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteCx102Pro30ACardGroup = nteCx102Pro30ACardGroup.setStatus('current')
if mibBuilder.loadTexts: nteCx102Pro30ACardGroup.setDescription('A collection of objects used to manage the CX102Pro30A Card.')
ge4PortCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 61)).setObjects(("CM-ENTITY-MIB", "ge4PortCardEntityIndex"), ("CM-ENTITY-MIB", "ge4PortCardAdminState"), ("CM-ENTITY-MIB", "ge4PortCardOperationalState"), ("CM-ENTITY-MIB", "ge4PortCardSecondaryState"), ("CM-ENTITY-MIB", "ge4PortCardRowStatus"), ("CM-ENTITY-MIB", "ge4PortCardAlias"), ("CM-ENTITY-MIB", "ge4PortCardTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ge4PortCardGroup = ge4PortCardGroup.setStatus('current')
if mibBuilder.loadTexts: ge4PortCardGroup.setDescription('A collection of objects used to manage the GE 4 PORT EXP Card.')
nteXg116ProCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 62)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG116PROCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg116ProCardGroup = nteXg116ProCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteXg116ProCardGroup.setDescription('A collection of objects used to manage the XG116PRO Card.')
nteXg120ProCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 63)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG120PROCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg120ProCardGroup = nteXg120ProCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteXg120ProCardGroup.setDescription('A collection of objects used to manage the XG120PRO Card.')
nteGE112ProVmCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 64)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE112ProVmCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGE112ProVmCardGroup = nteGE112ProVmCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGE112ProVmCardGroup.setDescription('A collection of objects used to manage the GE112ProVm Card.')
nteOsa5401CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 65)).setObjects(("CM-ENTITY-MIB", "ethernetNTEOSA5401CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEOSA5401CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5401CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5401CardTableRestartAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteOsa5401CardGroup = nteOsa5401CardGroup.setStatus('current')
if mibBuilder.loadTexts: nteOsa5401CardGroup.setDescription('A collection of objects used to manage the OSA5401 Card.')
nteOsa5405CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 66)).setObjects(("CM-ENTITY-MIB", "ethernetNTEOSA5405CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEOSA5405CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5405CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEOSA5405CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEOSA5405CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEOSA5405CardTableRestartAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteOsa5405CardGroup = nteOsa5405CardGroup.setStatus('current')
if mibBuilder.loadTexts: nteOsa5405CardGroup.setDescription('A collection of objects used to manage the OSA5405 Card.')
csmCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 67)).setObjects(("CM-ENTITY-MIB", "ethernetCSMCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetCSMCardAdminState"), ("CM-ENTITY-MIB", "ethernetCSMCardOperationalState"), ("CM-ENTITY-MIB", "ethernetCSMCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetCSMCardVoltage"), ("CM-ENTITY-MIB", "ethernetCSMCardTemperature"), ("CM-ENTITY-MIB", "ethernetCSMCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetCSMCardRestartAction"), ("CM-ENTITY-MIB", "ethernetCSMCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetCSMCardOscillatorType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csmCardGroup = csmCardGroup.setStatus('current')
if mibBuilder.loadTexts: csmCardGroup.setDescription('A collection of objects used to manage the CSM Card.')
auxPortCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 68)).setObjects(("CM-ENTITY-MIB", "auxPortCardEntityIndex"), ("CM-ENTITY-MIB", "auxPortCardAdminState"), ("CM-ENTITY-MIB", "auxPortCardOperationalState"), ("CM-ENTITY-MIB", "auxPortCardSecondaryState"), ("CM-ENTITY-MIB", "auxPortCardRowStatus"), ("CM-ENTITY-MIB", "auxPortCardAlias"), ("CM-ENTITY-MIB", "auxPortCardTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    auxPortCardGroup = auxPortCardGroup.setStatus('current')
if mibBuilder.loadTexts: auxPortCardGroup.setDescription('A collection of objects used to manage the Auxiliary Port Expansion Card.')
nteGe102ProHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 69)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardSwitchPortAction"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardPSU1State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardPSU2State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardFAN1State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardFAN2State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProHCardPsuType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe102ProHCardGroup = nteGe102ProHCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe102ProHCardGroup.setDescription('A collection of objects used to manage the GE102Pro H Card.')
nteGe102ProEFMHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 70)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardPSU1State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardPSU2State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardFAN1State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardFAN2State"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardPsuType"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardLLFMode"), ("CM-ENTITY-MIB", "ethernetNTEGE102ProEFMHCardLLFModeAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGe102ProEFMHCardGroup = nteGe102ProEFMHCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGe102ProEFMHCardGroup.setDescription('A collection of objects used to manage the GE102Pro EFMH Card.')
ethernetOsa3350MgntCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 71)).setObjects(("CM-ENTITY-MIB", "ethernetOsa3350MgntCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetOsa3350MgntCardAdminState"), ("CM-ENTITY-MIB", "ethernetOsa3350MgntCardOperationalState"), ("CM-ENTITY-MIB", "ethernetOsa3350MgntCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetOsa3350MgntCardRestartAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetOsa3350MgntCardGroup = ethernetOsa3350MgntCardGroup.setStatus('current')
if mibBuilder.loadTexts: ethernetOsa3350MgntCardGroup.setDescription('A collection of objects used to manage the OSA3350 Mgnt Card.')
nteXg116ProHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 72)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG116PROHCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg116ProHCardGroup = nteXg116ProHCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteXg116ProHCardGroup.setDescription('A collection of objects used to manage the XG116PRO (H) Card.')
nteGo102ProSMCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 73)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGO102ProSMCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGo102ProSMCardGroup = nteGo102ProSMCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGo102ProSMCardGroup.setDescription('A collection of objects used to manage the GO102ProSM Card.')
nteXg118ProSHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 74)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROSHCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg118ProSHCardGroup = nteXg118ProSHCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteXg118ProSHCardGroup.setDescription('A collection of objects used to manage the XG118PRO (SH) Card.')
nteXg118ProacSHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 75)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG118PROACSHCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg118ProacSHCardGroup = nteXg118ProacSHCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteXg118ProacSHCardGroup.setDescription('A collection of objects used to manage the XG118PROAC (SH) Card.')
nteGE114ProVmSHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 76)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE114ProVmSHCardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGE114ProVmSHCardGroup = nteGE114ProVmSHCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGE114ProVmSHCardGroup.setDescription('A collection of objects used to manage the GE114ProVmSH Card.')
nteGE104CardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 77)).setObjects(("CM-ENTITY-MIB", "ethernetNTEGE104CardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardFineGrainedPmInterval"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardSwitchPortActionPort"), ("CM-ENTITY-MIB", "ethernetNTEGE104CardSwitchPortAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteGE104CardGroup = nteGE104CardGroup.setStatus('current')
if mibBuilder.loadTexts: nteGE104CardGroup.setDescription('A collection of objects used to manage the GE104 Card.')
nteXg120ProSHCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 78)).setObjects(("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardEntityIndex"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardAdminState"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardOperationalState"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardSecondaryState"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardVoltage"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardTemperature"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardSnmpDyingGaspEnabled"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardRestartAction"), ("CM-ENTITY-MIB", "ethernetNTEXG120PROSHCardFineGrainedPmInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nteXg120ProSHCardGroup = nteXg120ProSHCardGroup.setStatus('current')
if mibBuilder.loadTexts: nteXg120ProSHCardGroup.setDescription('A collection of objects used to manage the XG120PROSH Card.')
mbGnssCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 79)).setObjects(("CM-ENTITY-MIB", "mbGnssCardEntityIndex"), ("CM-ENTITY-MIB", "mbGnssCardAdminState"), ("CM-ENTITY-MIB", "mbGnssCardOperationalState"), ("CM-ENTITY-MIB", "mbGnssCardSecondaryState"), ("CM-ENTITY-MIB", "mbGnssCardRowStatus"), ("CM-ENTITY-MIB", "mbGnssCardAlias"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbGnssCardGroup = mbGnssCardGroup.setStatus('current')
if mibBuilder.loadTexts: mbGnssCardGroup.setDescription('A collection of objects used to manage the MB GNSS EXP Card.')
f3IrigCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 80)).setObjects(("CM-ENTITY-MIB", "f3IrigCardEntityIndex"), ("CM-ENTITY-MIB", "f3IrigCardAlias"), ("CM-ENTITY-MIB", "f3IrigCardAdminState"), ("CM-ENTITY-MIB", "f3IrigCardOperationalState"), ("CM-ENTITY-MIB", "f3IrigCardSecondaryState"), ("CM-ENTITY-MIB", "f3IrigCardTemperature"), ("CM-ENTITY-MIB", "f3IrigCardStorageType"), ("CM-ENTITY-MIB", "f3IrigCardRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3IrigCardGroup = f3IrigCardGroup.setStatus('current')
if mibBuilder.loadTexts: f3IrigCardGroup.setDescription('A collection of objects used to manage the IRIG Card.')
compositeClockCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 3, 2, 2, 81)).setObjects(("CM-ENTITY-MIB", "compositeClockCardEntityIndex"), ("CM-ENTITY-MIB", "compositeClockCardAdminState"), ("CM-ENTITY-MIB", "compositeClockCardOperationalState"), ("CM-ENTITY-MIB", "compositeClockCardSecondaryState"), ("CM-ENTITY-MIB", "compositeClockCardRowStatus"), ("CM-ENTITY-MIB", "compositeClockCardAlias"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compositeClockCardGroup = compositeClockCardGroup.setStatus('current')
if mibBuilder.loadTexts: compositeClockCardGroup.setDescription('A collection of objects used to manage the COMPOSITE CLOCK EXP Card.')
mibBuilder.exportSymbols("CM-ENTITY-MIB", scuOperationalState=scuOperationalState, ethernetNTECardStorageType=ethernetNTECardStorageType, nteGe114ProCCardGroup=nteGe114ProCCardGroup, ethernetNTEGE102ProEFMHCardPsuType=ethernetNTEGE102ProEFMHCardPsuType, nteGe114ProCardGroup=nteGe114ProCardGroup, stuHighPerCardTemperature=stuHighPerCardTemperature, ethernetNTEGE114ProSHCardTemperature=ethernetNTEGE114ProSHCardTemperature, ethernetNTEGE112ProHCardTemperature=ethernetNTEGE112ProHCardTemperature, scuStorageType=scuStorageType, ethernetGE8SCCCardStorageType=ethernetGE8SCCCardStorageType, ethernetCSMCardEntityIndex=ethernetCSMCardEntityIndex, bits16PortCardOperationalState=bits16PortCardOperationalState, amiEntityIndex=amiEntityIndex, nemiTemperature=nemiTemperature, compositeClockCardRowStatus=compositeClockCardRowStatus, ethernetNTESH1PCSCardEntityIndex=ethernetNTESH1PCSCardEntityIndex, ethernetNTEGESyncProbeCardTable=ethernetNTEGESyncProbeCardTable, ethernetNTEGE114PHCardVoltage=ethernetNTEGE114PHCardVoltage, ethernetOverOCSTMCardStorageType=ethernetOverOCSTMCardStorageType, ethernetNTECX102Pro30ACardSecondaryState=ethernetNTECX102Pro30ACardSecondaryState, ethernetNTEGE101ProCardAdminState=ethernetNTEGE101ProCardAdminState, serverCardVmNumber=serverCardVmNumber, f3StorageDeviceExternalSsdStatus=f3StorageDeviceExternalSsdStatus, ethernetNTECX102Pro30ACardFineGrainedPmInterval=ethernetNTECX102Pro30ACardFineGrainedPmInterval, ethernet10x1GHighPerCardTable=ethernet10x1GHighPerCardTable, ethernet10x1GHighPerCardSecondaryState=ethernet10x1GHighPerCardSecondaryState, ethernetNTEGE206CardEntityIndex=ethernetNTEGE206CardEntityIndex, fanSecondaryState=fanSecondaryState, ethernetNTET3204CardOperationalState=ethernetNTET3204CardOperationalState, pseudoWireOcnStmCardTable=pseudoWireOcnStmCardTable, ethernetNTEOSA5420CardSecondaryState=ethernetNTEOSA5420CardSecondaryState, ethernet1x10GHighPerCardStorageType=ethernet1x10GHighPerCardStorageType, pseudoWireE1T1CardSecondaryState=pseudoWireE1T1CardSecondaryState, stuCardEntry=stuCardEntry, ethernetNTET3204CardAdminState=ethernetNTET3204CardAdminState, ethernetCSMCardAdminState=ethernetCSMCardAdminState, pseudoWireE1T1CardEntry=pseudoWireE1T1CardEntry, pseudoWireE3CardIpGateway=pseudoWireE3CardIpGateway, ethernetNTEGE206VCardOperationalState=ethernetNTEGE206VCardOperationalState, ethernetNTET3204CardTemperature=ethernetNTET3204CardTemperature, ethernet10x1GCardEntry=ethernet10x1GCardEntry, ethernetNTEGE114ProHECardOperationalState=ethernetNTEGE114ProHECardOperationalState, ethernetNTEGE112ProMCardRestartAction=ethernetNTEGE112ProMCardRestartAction, ethernetNTEGE112ProMCardSwitchPortActionPort=ethernetNTEGE112ProMCardSwitchPortActionPort, nteXg210CCardGroup=nteXg210CCardGroup, todPps16PortCardSecondaryState=todPps16PortCardSecondaryState, ethernetNTEGE114ProCSHCardSwitchPortActionPort=ethernetNTEGE114ProCSHCardSwitchPortActionPort, slotCardHwRev=slotCardHwRev, ethernetNTEGE114PHCardAdminState=ethernetNTEGE114PHCardAdminState, ethernetNTET3204CardRestartAction=ethernetNTET3204CardRestartAction, pseudoWireE3CardMgmtVlanId=pseudoWireE3CardMgmtVlanId, nteGE114ProVmCSHCardGroup=nteGE114ProVmCSHCardGroup, bits16PortCardAdminState=bits16PortCardAdminState, ethernetNTEGE102ProHCardSwitchPortActionPort=ethernetNTEGE102ProHCardSwitchPortActionPort, ethernetNTEGE102ProHCardFineGrainedPmInterval=ethernetNTEGE102ProHCardFineGrainedPmInterval, ethernetNTEGE114ProSHCardSnmpDyingGaspEnabled=ethernetNTEGE114ProSHCardSnmpDyingGaspEnabled, ethernetGE4SCCCardEntry=ethernetGE4SCCCardEntry, amiTable=amiTable, ethernetNTEGO102ProSMCardVoltage=ethernetNTEGO102ProSMCardVoltage, scuAdminState=scuAdminState, psuEntityIndex=psuEntityIndex, ethernetNTEOSA5405CardTemperature=ethernetNTEOSA5405CardTemperature, nteGe112ProMCardGroup=nteGe112ProMCardGroup, ethernetNTEGE201CardFineGrainedPmInterval=ethernetNTEGE201CardFineGrainedPmInterval, nteGo102ProSMCardGroup=nteGo102ProSMCardGroup, ethernetNTET3204CardEntityIndex=ethernetNTET3204CardEntityIndex, ethernetNTEGE206CardTemperature=ethernetNTEGE206CardTemperature, ethernetNTEGE101ProCardSnmpDyingGaspEnabled=ethernetNTEGE101ProCardSnmpDyingGaspEnabled, ethernetCPMRCardEntry=ethernetCPMRCardEntry, ethernetNTEGO102ProSPCardSecondaryState=ethernetNTEGO102ProSPCardSecondaryState, ethernetNTEGE201SyncECardRestartAction=ethernetNTEGE201SyncECardRestartAction, ethernetNTEGE201CardTable=ethernetNTEGE201CardTable, ethernetNTEGE112ProCardSwitchPortActionPort=ethernetNTEGE112ProCardSwitchPortActionPort, ethernetNTESH1PCSCardEntry=ethernetNTESH1PCSCardEntry, ethernetNTUCardTemperature=ethernetNTUCardTemperature, ethernetNTEGE201SyncECardEntry=ethernetNTEGE201SyncECardEntry, neName=neName, ethernetNTEGE114ProCardSwitchPortActionPort=ethernetNTEGE114ProCardSwitchPortActionPort, ethernetNTECX101Pro30ACardTable=ethernetNTECX101Pro30ACardTable, clk16PortCardOperationalState=clk16PortCardOperationalState, ethernetNTEGE104CardTable=ethernetNTEGE104CardTable, ethernetCPMRCardAdminState=ethernetCPMRCardAdminState, ethernetNTEGE114GCardSnmpDyingGaspEnabled=ethernetNTEGE114GCardSnmpDyingGaspEnabled, ethernetFE36ECard8023azEnabled=ethernetFE36ECard8023azEnabled, ethernetNTEXG210CardTable=ethernetNTEXG210CardTable, ethernetNTEGE114ProVmHCardVoltage=ethernetNTEGE114ProVmHCardVoltage, psuAdminState=psuAdminState, ethernetNTEGE114ProCSHCardRestartAction=ethernetNTEGE114ProCSHCardRestartAction, auxPortCardOperationalState=auxPortCardOperationalState, ethernetNTESH1PCSCardSecondaryState=ethernetNTESH1PCSCardSecondaryState, scuTAdminState=scuTAdminState, ethernetXG1XCCCardRowStatus=ethernetXG1XCCCardRowStatus, ethernetNTEGE101ProCardVoltage=ethernetNTEGE101ProCardVoltage, nemiFlashModelNum=nemiFlashModelNum, ethernetGE4SCCCardStorageType=ethernetGE4SCCCardStorageType, ethernetNTEXG118PROACSHCardSecondaryState=ethernetNTEXG118PROACSHCardSecondaryState, ethernetNTEGE112CardSwitchPortAction=ethernetNTEGE112CardSwitchPortAction, ethernetFE36ECardForceOffLineAction=ethernetFE36ECardForceOffLineAction, scuSecondaryState=scuSecondaryState, ethernetNTEGE114HCardOperationalState=ethernetNTEGE114HCardOperationalState, ethernetNTEGE112ProMCardSecondaryState=ethernetNTEGE112ProMCardSecondaryState, ethernetCSMCardRestartAction=ethernetCSMCardRestartAction, ethernetNTEGE112ProVmCardEntityIndex=ethernetNTEGE112ProVmCardEntityIndex, ethernetNTEGE112ProMCardFineGrainedPmInterval=ethernetNTEGE112ProMCardFineGrainedPmInterval, ethernetXG1SCCCardEntityIndex=ethernetXG1SCCCardEntityIndex, ethernetNTEGE114GCardVoltage=ethernetNTEGE114GCardVoltage, stiOperationalState=stiOperationalState, ethernetGE4SCCCardRowStatus=ethernetGE4SCCCardRowStatus, ethernetNTEGE201CardAdminState=ethernetNTEGE201CardAdminState, ethernetNTEGE114HCardVoltage=ethernetNTEGE114HCardVoltage, f3StorageDeviceTable=f3StorageDeviceTable, ethernetNTEGE114ProVmCHCardSnmpDyingGaspEnabled=ethernetNTEGE114ProVmCHCardSnmpDyingGaspEnabled, ethernetSWFCardRestartAction=ethernetSWFCardRestartAction, slotCardCLEICode=slotCardCLEICode, auxPortCardAlias=auxPortCardAlias, ethernetNTEGE114HCardEntityIndex=ethernetNTEGE114HCardEntityIndex, ethernet1x10GHighPerCardEntityIndex=ethernet1x10GHighPerCardEntityIndex, ethernetNTEGE206FCardEntityIndex=ethernetNTEGE206FCardEntityIndex, auxPortCardEntityIndex=auxPortCardEntityIndex, ethernetCSMCardOperationalState=ethernetCSMCardOperationalState, pseudoWireE1T1CardEntityIndex=pseudoWireE1T1CardEntityIndex, ethernetXG1SCCCardSecondaryState=ethernetXG1SCCCardSecondaryState, ethernetNTEGE114ProSHCardAdminState=ethernetNTEGE114ProSHCardAdminState, ethernetFE36ECardTemperature=ethernetFE36ECardTemperature, ethernetNTEGE114HCardTemperature=ethernetNTEGE114HCardTemperature, ethernetNTECardRowStatus=ethernetNTECardRowStatus, ethernetNTEGE114CardEntityIndex=ethernetNTEGE114CardEntityIndex, ethernetNTEGO102ProSMCardRestartAction=ethernetNTEGO102ProSMCardRestartAction, f3IrigCardEntityIndex=f3IrigCardEntityIndex, nteGe114SCardGroup=nteGe114SCardGroup, todPps16PortCardRowStatus=todPps16PortCardRowStatus, pseudoWireOcnStmCardEntityIndex=pseudoWireOcnStmCardEntityIndex, ethernetNTEGO102ProSPCardTable=ethernetNTEGO102ProSPCardTable, commonEntityGroup=commonEntityGroup, ethernetNTEGE114CardTable=ethernetNTEGE114CardTable, ethernetNTEXG210CCardEntityIndex=ethernetNTEXG210CCardEntityIndex, ethernetNTEGE112ProCardSecondaryState=ethernetNTEGE112ProCardSecondaryState, ethernetNTEGE114PHCardTable=ethernetNTEGE114PHCardTable, ethernetGE8SCCCardTemperature=ethernetGE8SCCCardTemperature, ethernetNTEGE114SCardAdminState=ethernetNTEGE114SCardAdminState, ethernetNTEGE201CardSecondaryState=ethernetNTEGE201CardSecondaryState, clk16PortCardEntry=clk16PortCardEntry, stiHighPerTemperature=stiHighPerTemperature, ethernetGE8SCryptoConnectorCardRestartAction=ethernetGE8SCryptoConnectorCardRestartAction, ethernetNTEOSA5421CardEntityIndex=ethernetNTEOSA5421CardEntityIndex, serverCardStorageType=serverCardStorageType, ethernetCSMCardTable=ethernetCSMCardTable, ethernetNTEGESyncProbeCardSecondaryState=ethernetNTEGESyncProbeCardSecondaryState, serverCardEntityIndex=serverCardEntityIndex, f3IrigCardTemperature=f3IrigCardTemperature, ethernetNTEGE114ProVmCSHCardSnmpDyingGaspEnabled=ethernetNTEGE114ProVmCSHCardSnmpDyingGaspEnabled, clk16PortCardSecondaryState=clk16PortCardSecondaryState, ethernet1x10GCardRestartAction=ethernet1x10GCardRestartAction, ge4PortCardRowStatus=ge4PortCardRowStatus, PortCarrierType=PortCarrierType, cmEntityGroups=cmEntityGroups, ethernetGE4ECCCardEntry=ethernetGE4ECCCardEntry, ethernetNTEGE114GCardEntry=ethernetNTEGE114GCardEntry, ethernetNTEGE102ProEFMHCardPSU2State=ethernetNTEGE102ProEFMHCardPSU2State, ethernetSWFCardRowStatus=ethernetSWFCardRowStatus, serverCardMemoryAvailiable=serverCardMemoryAvailiable, ethernetNTEGE114ProVmCHCardSwitchPortAction=ethernetNTEGE114ProVmCHCardSwitchPortAction, ethernetGE4ECCCardTable=ethernetGE4ECCCardTable, todPps16PortCardEntry=todPps16PortCardEntry, ethernetNTEGE114ProVmCSHCardSecondaryState=ethernetNTEGE114ProVmCSHCardSecondaryState, nteGo102ProSPCardGroup=nteGo102ProSPCardGroup, ethernetNTEGE114ProVmSHCardFineGrainedPmInterval=ethernetNTEGE114ProVmSHCardFineGrainedPmInterval, ethernetSWFCardAdminState=ethernetSWFCardAdminState, ethernetNTEGE114ProCardAdminState=ethernetNTEGE114ProCardAdminState, ethernetNTEGE101CardTemperature=ethernetNTEGE101CardTemperature, ethernetNTECX101Pro30ACardEntityIndex=ethernetNTECX101Pro30ACardEntityIndex, ethernetNTEGE114ProVmCHCardEntityIndex=ethernetNTEGE114ProVmCHCardEntityIndex, ethernetNTEXG210CardOperationalState=ethernetNTEXG210CardOperationalState, ethernetGE8ECCCardOperationalState=ethernetGE8ECCCardOperationalState, f3UsbHostFormatVersion=f3UsbHostFormatVersion, ethernetNTEGE112ProMCardVoltage=ethernetNTEGE112ProMCardVoltage, ethernetNTEGE112ProHCardVoltage=ethernetNTEGE112ProHCardVoltage, ethernetNTEOSA5421CardFineGrainedPmInterval=ethernetNTEOSA5421CardFineGrainedPmInterval, nemiEntityIndex=nemiEntityIndex, neType=neType, ethernetCSMCardSecondaryState=ethernetCSMCardSecondaryState, ethernetNTEGE114ProVmSHCardOperationalState=ethernetNTEGE114ProVmSHCardOperationalState, ethernetXG1SCCCardTable=ethernetXG1SCCCardTable, StorageStatus=StorageStatus, ethernetNTEGE114ProCSHCardFineGrainedPmInterval=ethernetNTEGE114ProCSHCardFineGrainedPmInterval, slotCardSwRev=slotCardSwRev, ethernetGE8SCryptoConnectorCardEntry=ethernetGE8SCryptoConnectorCardEntry, neLLDPParamsLLDPEnableAction=neLLDPParamsLLDPEnableAction, ethernetNTEGO102ProSPCardTemperature=ethernetNTEGO102ProSPCardTemperature, fanRowStatus=fanRowStatus, serverCardOperationalState=serverCardOperationalState, nemiSecondaryState=nemiSecondaryState, ethernetNTEGO102ProSMCardTable=ethernetNTEGO102ProSMCardTable, ethernetNTEGE104CardTemperature=ethernetNTEGE104CardTemperature, ethernet1x10GCardAdminState=ethernet1x10GCardAdminState, ethernetNTEGE201CardSnmpDyingGaspEnabled=ethernetNTEGE201CardSnmpDyingGaspEnabled, ethernet10x1GCardStorageType=ethernet10x1GCardStorageType, ethernetNTET1804CardEntry=ethernetNTET1804CardEntry, ethernetNTEGO102ProSCardSecondaryState=ethernetNTEGO102ProSCardSecondaryState, ethernetNTEGE206FCardAdminState=ethernetNTEGE206FCardAdminState, ethernetNTEGE114PHCardSnmpDyingGaspEnabled=ethernetNTEGE114PHCardSnmpDyingGaspEnabled, ethernetNTEOSA5420CardAdminState=ethernetNTEOSA5420CardAdminState, shelfIndex=shelfIndex, ethernetNTEGE201CardEntry=ethernetNTEGE201CardEntry, ethernetNTEGE114ProCardEntityIndex=ethernetNTEGE114ProCardEntityIndex, ethernetNTEGE101ProCardEntityIndex=ethernetNTEGE101ProCardEntityIndex, ethernetNTEGE101CardAdminState=ethernetNTEGE101CardAdminState, nteGe112ProHCardGroup=nteGe112ProHCardGroup, ethernetNTEGE114SHCardEntityIndex=ethernetNTEGE114SHCardEntityIndex, ethernetNTEGE112ProVmCardOperationalState=ethernetNTEGE112ProVmCardOperationalState, mbGnssCardGroup=mbGnssCardGroup, ethernetNTEGE114PHCardTemperature=ethernetNTEGE114PHCardTemperature, nteXg210CardGroup=nteXg210CardGroup, ethernetNTEGO102ProSPCardRestartAction=ethernetNTEGO102ProSPCardRestartAction, nteGe112CardGroup=nteGe112CardGroup, slotCardMfgDate=slotCardMfgDate, nteGe114SHCardGroup=nteGe114SHCardGroup, ethernet10x1GHighPerCardForceOffLineAction=ethernet10x1GHighPerCardForceOffLineAction, ethernetNTEGE114ProVmSHCardRestartAction=ethernetNTEGE114ProVmSHCardRestartAction, pseudoWireOcnStmCardRowStatus=pseudoWireOcnStmCardRowStatus, ethernetNTEXG120PROCardTable=ethernetNTEXG120PROCardTable, xg1SCCCardGroup=xg1SCCCardGroup, ethernetNTEGE201SyncECardSnmpDyingGaspEnabled=ethernetNTEGE201SyncECardSnmpDyingGaspEnabled, ethernetNTECX101Pro30ACardVoltage=ethernetNTECX101Pro30ACardVoltage, ethernetNTUCardEntry=ethernetNTUCardEntry, slotSecondaryState=slotSecondaryState, ethernetNTEGE114ProHECardSnmpDyingGaspEnabled=ethernetNTEGE114ProHECardSnmpDyingGaspEnabled, clk16PortCardAlias=clk16PortCardAlias, ethernetNTEGE114GCardAdminState=ethernetNTEGE114GCardAdminState, nteGe201NonSyncECardGroup=nteGe201NonSyncECardGroup, ethernetOverOCSTMCardEntry=ethernetOverOCSTMCardEntry, ethernetGE4ECCCardRowStatus=ethernetGE4ECCCardRowStatus, ethernetNTEGE114CardSwitchPortActionPort=ethernetNTEGE114CardSwitchPortActionPort, ethernetGE4ECCCardOperationalState=ethernetGE4ECCCardOperationalState, stiSecondaryState=stiSecondaryState, ethernetNTEOSA5420CardFineGrainedPmInterval=ethernetNTEOSA5420CardFineGrainedPmInterval, ethernetNTEXG116PROHCardSnmpDyingGaspEnabled=ethernetNTEXG116PROHCardSnmpDyingGaspEnabled, ethernetGE8ECCCardAdminState=ethernetGE8ECCCardAdminState, ethernetNTEGE114ProCardSecondaryState=ethernetNTEGE114ProCardSecondaryState, ethernetNTEGE114SCardEntry=ethernetNTEGE114SCardEntry, ethernetNTEGE102ProHCardVoltage=ethernetNTEGE102ProHCardVoltage, ethernetNTEGE104CardSecondaryState=ethernetNTEGE104CardSecondaryState, ethernetNTEGE114ProVmSHCardSecondaryState=ethernetNTEGE114ProVmSHCardSecondaryState, f3StorageDeviceEntry=f3StorageDeviceEntry, serverCardTable=serverCardTable, stuCardForceOffLineAction=stuCardForceOffLineAction, ethernetNTECardOperationalState=ethernetNTECardOperationalState, ethernetNTEGE114ProCSHCardSecondaryState=ethernetNTEGE114ProCSHCardSecondaryState, fanOperationalState=fanOperationalState, pseudoWireOcnStmCardMode=pseudoWireOcnStmCardMode, ethernetNTEGO102ProSPCardAdminState=ethernetNTEGO102ProSPCardAdminState, stuHighPerCardAdminState=stuHighPerCardAdminState, ethernetNTEXG120PROSHCardEntityIndex=ethernetNTEXG120PROSHCardEntityIndex, ethernetNTEGE206CardTable=ethernetNTEGE206CardTable)
mibBuilder.exportSymbols("CM-ENTITY-MIB", ethernetNTET3204CardSnmpDyingGaspEnabled=ethernetNTET3204CardSnmpDyingGaspEnabled, ethernetNTEGE114ProCSHCardSnmpDyingGaspEnabled=ethernetNTEGE114ProCSHCardSnmpDyingGaspEnabled, serverCardStorageAvailiable=serverCardStorageAvailiable, ethernetNTEOSA5401CardTableRestartAction=ethernetNTEOSA5401CardTableRestartAction, ethernetNTEXG120PROSHCardVoltage=ethernetNTEXG120PROSHCardVoltage, ethernetNTEXG120PROCardSecondaryState=ethernetNTEXG120PROCardSecondaryState, ethernetNTEGE112ProMCardSwitchPortAction=ethernetNTEGE112ProMCardSwitchPortAction, ethernet1x10GHighPerCardForceOffLineAction=ethernet1x10GHighPerCardForceOffLineAction, ethernetNTEGE114ProCardTable=ethernetNTEGE114ProCardTable, auxPortCardAdminState=auxPortCardAdminState, ethernetNTEGE114ProVmSHCardAdminState=ethernetNTEGE114ProVmSHCardAdminState, slotCardMfgSite=slotCardMfgSite, ethernetNTEGE114GCardOperationalState=ethernetNTEGE114GCardOperationalState, ethernetNTEGE114ProCCardRestartAction=ethernetNTEGE114ProCCardRestartAction, ethernetNTEXG120PROCardOperationalState=ethernetNTEXG120PROCardOperationalState, nteXg120ProSHCardGroup=nteXg120ProSHCardGroup, scuRowStatus=scuRowStatus, f3UsbHostIndex=f3UsbHostIndex, ethernetNTEGE114ProSHCardEntityIndex=ethernetNTEGE114ProSHCardEntityIndex, pseudoWireCardOcnStmCardGroup=pseudoWireCardOcnStmCardGroup, ethernetNTEGE112CardOperationalState=ethernetNTEGE112CardOperationalState, ethernetNTEGO102ProSPCardFineGrainedPmInterval=ethernetNTEGO102ProSPCardFineGrainedPmInterval, ethernetNTESH1PCSCardTable=ethernetNTESH1PCSCardTable, ethernet10x1GCardEntityIndex=ethernet10x1GCardEntityIndex, ethernetNTEXG210CCardRestartAction=ethernetNTEXG210CCardRestartAction, slotCardType=slotCardType, ethernetNTEOSA5405CardEntityIndex=ethernetNTEOSA5405CardEntityIndex, ethernetNTET1804CardVoltage=ethernetNTET1804CardVoltage, ethernetNTEGE114ProVmHCardSwitchPortAction=ethernetNTEGE114ProVmHCardSwitchPortAction, scuTTable=scuTTable, slotTable=slotTable, ethernetNTUCardTable=ethernetNTUCardTable, todPps16PortCardGroup=todPps16PortCardGroup, ethernetNTEGE114GCardSwitchPortActionPort=ethernetNTEGE114GCardSwitchPortActionPort, ethernetNTEOSA5420CardOperationalState=ethernetNTEOSA5420CardOperationalState, ethernetNTEOSA5411CardSecondaryState=ethernetNTEOSA5411CardSecondaryState, CmCPMRLinkLossFwdMode=CmCPMRLinkLossFwdMode, ethernetNTET3204CardSecondaryState=ethernetNTET3204CardSecondaryState, bits16PortCardGroup=bits16PortCardGroup, ethernetCPMRCardPSU1State=ethernetCPMRCardPSU1State, LedControlType=LedControlType, ethernetGE4SCCCardAdminState=ethernetGE4SCCCardAdminState, pseudoWireOcnStmCardPSNEncapsulation=pseudoWireOcnStmCardPSNEncapsulation, ethernetNTEOSA5405CardEntry=ethernetNTEOSA5405CardEntry, ethernetNTEGE114CardAdminState=ethernetNTEGE114CardAdminState, nteOsa5401CardGroup=nteOsa5401CardGroup, slotIndex=slotIndex, ethernetNTEGE114SHCardOperationalState=ethernetNTEGE114SHCardOperationalState, pseudoWireE3CardEntry=pseudoWireE3CardEntry, ethernetNTEGE206FCardSecondaryState=ethernetNTEGE206FCardSecondaryState, stuCardRowStatus=stuCardRowStatus, ethernetGE4SCCCardTable=ethernetGE4SCCCardTable, bits16PortCardAlias=bits16PortCardAlias, ethernetNTEGE114SCardFineGrainedPmInterval=ethernetNTEGE114SCardFineGrainedPmInterval, amiEntry=amiEntry, ethernetNTEXG118PROSHCardTable=ethernetNTEXG118PROSHCardTable, scuTable=scuTable, stuCardAdminState=stuCardAdminState, neStorageType=neStorageType, ShelfType=ShelfType, ethernetNTECX102Pro30ACardAdminState=ethernetNTECX102Pro30ACardAdminState, amiAdminState=amiAdminState, ethernetNTEOSA5411CardFineGrainedPmInterval=ethernetNTEOSA5411CardFineGrainedPmInterval, ethernetGE8SCryptoConnectorCardAdminState=ethernetGE8SCryptoConnectorCardAdminState, ethernetNTEGE114ProCardSnmpDyingGaspEnabled=ethernetNTEGE114ProCardSnmpDyingGaspEnabled, auxPortCardTable=auxPortCardTable, serverCardVoltage=serverCardVoltage, neCmdPromptPrefix=neCmdPromptPrefix, mbGnssCardOperationalState=mbGnssCardOperationalState, slotCardUnitName=slotCardUnitName, ethernetNTEGE114ProCSHCardTemperature=ethernetNTEGE114ProCSHCardTemperature, ethernetNTEGE114HCardAdminState=ethernetNTEGE114HCardAdminState, ethernet1x10GHighPerCardRestartAction=ethernet1x10GHighPerCardRestartAction, ethernetCPMRCardFAN1State=ethernetCPMRCardFAN1State, ethernetNTECX102Pro30ACardOperationalState=ethernetNTECX102Pro30ACardOperationalState, ethernetCSMCardOscillatorType=ethernetCSMCardOscillatorType, PWE3OCNSTMCardMode=PWE3OCNSTMCardMode, f3UsbHostSecondaryState=f3UsbHostSecondaryState, nteGE114ProVmSHCardGroup=nteGE114ProVmSHCardGroup, ethernetNTEGO102ProSMCardOperationalState=ethernetNTEGO102ProSMCardOperationalState, f3UsbHostUnitName=f3UsbHostUnitName, ethernetNTET1804CardRestartAction=ethernetNTET1804CardRestartAction, ethernetGE8ECCCardStorageType=ethernetGE8ECCCardStorageType, ethernetNTEGE114GCardTable=ethernetNTEGE114GCardTable, ethernetNTEXG120PROSHCardEntry=ethernetNTEXG120PROSHCardEntry, ethernetNTEGO102ProSMCardSwitchPortActionPort=ethernetNTEGO102ProSMCardSwitchPortActionPort, ethernetNTEGE114ProVmCSHCardFineGrainedPmInterval=ethernetNTEGE114ProVmCSHCardFineGrainedPmInterval, ge4PortCardEntry=ge4PortCardEntry, ethernetNTEOSA5421CardRestartAction=ethernetNTEOSA5421CardRestartAction, scuTOperationalState=scuTOperationalState, ethernetNTEGE206FCardFineGrainedPmInterval=ethernetNTEGE206FCardFineGrainedPmInterval, ethernetNTEGE112ProHCardSecondaryState=ethernetNTEGE112ProHCardSecondaryState, ethernetNTEXG116PROCardVoltage=ethernetNTEXG116PROCardVoltage, ethernetNTEGE112ProMCardEntityIndex=ethernetNTEGE112ProMCardEntityIndex, networkElementLLDPParamsTable=networkElementLLDPParamsTable, ethernetNTEGE101ProCardRestartAction=ethernetNTEGE101ProCardRestartAction, ethernetNTEGE112ProHCardSwitchPortActionPort=ethernetNTEGE112ProHCardSwitchPortActionPort, ethernetNTEXG210CardEntry=ethernetNTEXG210CardEntry, ethernetNTEGE206CardOperationalState=ethernetNTEGE206CardOperationalState, mbGnssCardEntityIndex=mbGnssCardEntityIndex, ethernetNTEGE114ProVmCHCardRestartAction=ethernetNTEGE114ProVmCHCardRestartAction, ethernetNTEGE114ProSHCardVoltage=ethernetNTEGE114ProSHCardVoltage, stuHighPerCardRowStatus=stuHighPerCardRowStatus, ethernetNTEGE114SHCardRestartAction=ethernetNTEGE114SHCardRestartAction, nteGE112ProVmCardGroup=nteGE112ProVmCardGroup, pseudoWireE1T1CardIpAddress=pseudoWireE1T1CardIpAddress, ethernetNTEGE101ProCardOperationalState=ethernetNTEGE101ProCardOperationalState, ethernetNTEGO102ProSCardSwitchPortAction=ethernetNTEGO102ProSCardSwitchPortAction, ethernetNTECX102Pro30ACardEntityIndex=ethernetNTECX102Pro30ACardEntityIndex, ethernetNTEXG118PROSHCardRestartAction=ethernetNTEXG118PROSHCardRestartAction, ethernetNTEGE201SyncECardFineGrainedPmInterval=ethernetNTEGE201SyncECardFineGrainedPmInterval, ethernetNTEGE114ProVmCSHCardEntityIndex=ethernetNTEGE114ProVmCSHCardEntityIndex, ethernetNTEGE114GCardTemperature=ethernetNTEGE114GCardTemperature, ethernet10x1GCardTemperature=ethernet10x1GCardTemperature, ethernetXG1SCCCardEntry=ethernetXG1SCCCardEntry, pseudoWireE1T1CardOperationalState=pseudoWireE1T1CardOperationalState, neLocation=neLocation, ethernetNTEGE112CardSwitchPortActionPort=ethernetNTEGE112CardSwitchPortActionPort, ethernetNTEXG210CCardVoltage=ethernetNTEXG210CCardVoltage, ethernetNTEXG116PROHCardOperationalState=ethernetNTEXG116PROHCardOperationalState, ethernetNTET1804CardAdminState=ethernetNTET1804CardAdminState, ethernetNTEGE102ProHCardAdminState=ethernetNTEGE102ProHCardAdminState, f3UsbHostSerialNum=f3UsbHostSerialNum, ethernetNTEGE112ProCardSwitchPortAction=ethernetNTEGE112ProCardSwitchPortAction, ethernetNTEGE114ProVmSHCardTable=ethernetNTEGE114ProVmSHCardTable, ethernetNTEGE114HCardFineGrainedPmInterval=ethernetNTEGE114HCardFineGrainedPmInterval, pps16PortCardRowStatus=pps16PortCardRowStatus, ethernetGE4SCCCardTemperature=ethernetGE4SCCCardTemperature, ethernetNTEOSA5401CardEntry=ethernetNTEOSA5401CardEntry, ethernetNTEGE114SCardEntityIndex=ethernetNTEGE114SCardEntityIndex, ethernetNTEXG118PROSHCardEntityIndex=ethernetNTEXG118PROSHCardEntityIndex, nteOsa5405CardGroup=nteOsa5405CardGroup, ethernetNTEGE102ProEFMHCardTable=ethernetNTEGE102ProEFMHCardTable, geGE8SCryptoConnectorCardGroup=geGE8SCryptoConnectorCardGroup, ethernet10x1GHighPerCardTemperature=ethernet10x1GHighPerCardTemperature, ethernetNTEGE102ProHCardEntry=ethernetNTEGE102ProHCardEntry, fanStorageType=fanStorageType, ethernetNTEGE112ProVmCardTemperature=ethernetNTEGE112ProVmCardTemperature, ethernetNTEGE114ProCSHCardSwitchPortAction=ethernetNTEGE114ProCSHCardSwitchPortAction, ethernetNTEGE112ProCardEntry=ethernetNTEGE112ProCardEntry, ethernetNTECX102Pro30ACardSwitchPortActionPort=ethernetNTECX102Pro30ACardSwitchPortActionPort, bits16PortCardRowStatus=bits16PortCardRowStatus, serverCardAdminState=serverCardAdminState, ethernet10x1GCardSnmpDyingGaspEnabled=ethernet10x1GCardSnmpDyingGaspEnabled, slotCardSerialNum=slotCardSerialNum, ethernetNTEGE114HCardSnmpDyingGaspEnabled=ethernetNTEGE114HCardSnmpDyingGaspEnabled, ethernetNTEGE114ProSHCardTable=ethernetNTEGE114ProSHCardTable, ethernetNTEOSA5420CardTemperature=ethernetNTEOSA5420CardTemperature, ethernetNTEGE114ProVmCSHCardTable=ethernetNTEGE114ProVmCSHCardTable, ethernetNTEGE102ProHCardSwitchPortAction=ethernetNTEGE102ProHCardSwitchPortAction, pseudoWireE1T1CardPSNEncapsulation=pseudoWireE1T1CardPSNEncapsulation, ethernet10x1GHighPerCardStorageType=ethernet10x1GHighPerCardStorageType, ethernetGE4ECCCardAdminState=ethernetGE4ECCCardAdminState, auxPortCardRowStatus=auxPortCardRowStatus, ethernet1x10GCardForceOffLineAction=ethernet1x10GCardForceOffLineAction, shelfType=shelfType, ethernet1x10GHighPerCardAdminState=ethernet1x10GHighPerCardAdminState, ethernetNTEGE112ProCardEntityIndex=ethernetNTEGE112ProCardEntityIndex, ethernetNTEGE101ProCardSwitchPortActionPort=ethernetNTEGE101ProCardSwitchPortActionPort, ethernetOverOCSTMCardOperationalState=ethernetOverOCSTMCardOperationalState, ethernetNTET1804CardEntityIndex=ethernetNTET1804CardEntityIndex, ethernetNTEGE112ProMCardTable=ethernetNTEGE112ProMCardTable, ethernet1x10GHighPerCardTemperature=ethernet1x10GHighPerCardTemperature, ethernetXG1XCCCardTable=ethernetXG1XCCCardTable, ethernetNTEGESyncProbeCardFineGrainedPmInterval=ethernetNTEGESyncProbeCardFineGrainedPmInterval, ethernetNTEGE114ProCSHCardVoltage=ethernetNTEGE114ProCSHCardVoltage, ethernetFE36ECardSecondaryState=ethernetFE36ECardSecondaryState, serverCardIgnoreWatchdog=serverCardIgnoreWatchdog, ethernetNTEGE114SCardRestartAction=ethernetNTEGE114SCardRestartAction, neFineGrainedPmInterval=neFineGrainedPmInterval, ethernetNTEGE114HCardRestartAction=ethernetNTEGE114HCardRestartAction, pseudoWireE1T1CardTemperature=pseudoWireE1T1CardTemperature, ethernetGE4SCCCardSecondaryState=ethernetGE4SCCCardSecondaryState, ethernetOverOCSTMCardTemperature=ethernetOverOCSTMCardTemperature, ethernetCPMRCardRestartAction=ethernetCPMRCardRestartAction, ethernetNTEGO102ProSMCardSnmpDyingGaspEnabled=ethernetNTEGO102ProSMCardSnmpDyingGaspEnabled, ethernetCPMRCardPSU2State=ethernetCPMRCardPSU2State, shelfOscillatorType=shelfOscillatorType, ethernetNTEGE201SyncECardOperationalState=ethernetNTEGE201SyncECardOperationalState, ethernetNTEGO102ProSPCardEntry=ethernetNTEGO102ProSPCardEntry, compositeClockCardAlias=compositeClockCardAlias, ethernetNTEGE102ProHCardTable=ethernetNTEGE102ProHCardTable, ethernetNTEGESyncProbeCardAdminState=ethernetNTEGESyncProbeCardAdminState, nemiRowStatus=nemiRowStatus, ethernetNTEXG116PROCardEntry=ethernetNTEXG116PROCardEntry, ethernetNTEGO102ProSCardAdminState=ethernetNTEGO102ProSCardAdminState, ethernetOsa3350MgntCardEntityIndex=ethernetOsa3350MgntCardEntityIndex, amiSecondaryState=amiSecondaryState, ethernetNTEGE112CardRestartAction=ethernetNTEGE112CardRestartAction, ethernetNTEXG210CCardAdminState=ethernetNTEXG210CCardAdminState, ethernetNTEGE114ProVmCSHCardOperationalState=ethernetNTEGE114ProVmCSHCardOperationalState, nteGe206FCardGroup=nteGe206FCardGroup, scuTEntry=scuTEntry, ethernetNTEGE114GCardSecondaryState=ethernetNTEGE114GCardSecondaryState, ethernetNTEGE114ProVmCHCardAdminState=ethernetNTEGE114ProVmCHCardAdminState, ethernetCSMCardSnmpDyingGaspEnabled=ethernetCSMCardSnmpDyingGaspEnabled, ethernetNTEGE114ProCSHCardEntityIndex=ethernetNTEGE114ProCSHCardEntityIndex, ethernetNTEGE104CardSnmpDyingGaspEnabled=ethernetNTEGE104CardSnmpDyingGaspEnabled, ethernetNTEOSA5421CardTemperature=ethernetNTEOSA5421CardTemperature, ethernetNTEGE114CardRestartAction=ethernetNTEGE114CardRestartAction, pps16PortCardTable=pps16PortCardTable, ethernetNTEGE206VCardEntry=ethernetNTEGE206VCardEntry, neAccepted=neAccepted, mbGnssCardRowStatus=mbGnssCardRowStatus, ethernetNTEXG118PROACSHCardVoltage=ethernetNTEXG118PROACSHCardVoltage, ethernetGE8SCCCardEntry=ethernetGE8SCCCardEntry, ethernetNTEGE114ProSHCardSwitchPortActionPort=ethernetNTEGE114ProSHCardSwitchPortActionPort, ethernetNTEGE114ProCSHCardTable=ethernetNTEGE114ProCSHCardTable, nemiAdminState=nemiAdminState, shelfLedControl=shelfLedControl, pseudoWireOcnStmCardIpAddress=pseudoWireOcnStmCardIpAddress, ethernetNTEGE114ProCCardFineGrainedPmInterval=ethernetNTEGE114ProCCardFineGrainedPmInterval, ethernetNTEXG118PROACSHCardFineGrainedPmInterval=ethernetNTEXG118PROACSHCardFineGrainedPmInterval, serverCardStorageTotal=serverCardStorageTotal, ethernetNTECX102Pro30ACardSnmpDyingGaspEnabled=ethernetNTECX102Pro30ACardSnmpDyingGaspEnabled, ethernetNTEGE114ProVmCHCardEntry=ethernetNTEGE114ProVmCHCardEntry, mbGnssCardAdminState=mbGnssCardAdminState, ethernetNTEGE114HCardEntry=ethernetNTEGE114HCardEntry, pseudoWireE3CardIpNetmask=pseudoWireE3CardIpNetmask, ethernetGE4ECCCardTemperature=ethernetGE4ECCCardTemperature, pseudoWireOcnStmCardOperationalState=pseudoWireOcnStmCardOperationalState, compositeClockCardAdminState=compositeClockCardAdminState, ethernetNTEXG210CardEntityIndex=ethernetNTEXG210CardEntityIndex, ethernetFE36ECardGroup=ethernetFE36ECardGroup, ethernetNTEGO102ProSCardRestartAction=ethernetNTEGO102ProSCardRestartAction, ethernetNTEGE112ProMCardSnmpDyingGaspEnabled=ethernetNTEGE112ProMCardSnmpDyingGaspEnabled, psuOutputCurrent=psuOutputCurrent, shelfMfgSite=shelfMfgSite, ethernetNTEOSA5411CardTable=ethernetNTEOSA5411CardTable, ethernetNTEGE114ProCSHCardEntry=ethernetNTEGE114ProCSHCardEntry, ethernetNTEGO102ProSPCardSnmpDyingGaspEnabled=ethernetNTEGO102ProSPCardSnmpDyingGaspEnabled, ethernetOsa3350MgntCardSecondaryState=ethernetOsa3350MgntCardSecondaryState, ethernetNTEGE114GCardSwitchPortAction=ethernetNTEGE114GCardSwitchPortAction, ethernetNTEGE104CardSwitchPortAction=ethernetNTEGE104CardSwitchPortAction, ethernetNTEGE112ProHCardFineGrainedPmInterval=ethernetNTEGE112ProHCardFineGrainedPmInterval, ethernetXG1SCCCardAdminState=ethernetXG1SCCCardAdminState, ethernetNTECX102Pro30ACardEntry=ethernetNTECX102Pro30ACardEntry, neFromPort=neFromPort, nemiFlashFirmwareRev=nemiFlashFirmwareRev, ethernetNTEOSA5405CardVoltage=ethernetNTEOSA5405CardVoltage, psuSecondaryState=psuSecondaryState, ethernetNTEGO102ProSMCardSwitchPortAction=ethernetNTEGO102ProSMCardSwitchPortAction, neProvAction=neProvAction, ethernetNTESH1PCSCardFineGrainedPmInterval=ethernetNTESH1PCSCardFineGrainedPmInterval, ethernetFE36ECardRowStatus=ethernetFE36ECardRowStatus, ethernetNTECX101Pro30ACardAdminState=ethernetNTECX101Pro30ACardAdminState, ethernet1x10GHighPerCardRowStatus=ethernet1x10GHighPerCardRowStatus, psuTemperature=psuTemperature, slotCardFormatVersion=slotCardFormatVersion, nteXg118ProSHCardGroup=nteXg118ProSHCardGroup, pps16PortCardEntityIndex=pps16PortCardEntityIndex, ethernetNTEXG116PROHCardEntityIndex=ethernetNTEXG116PROHCardEntityIndex, ethernetGE8SCCCardAdminState=ethernetGE8SCCCardAdminState, ethernetNTEGE114ProVmCSHCardVoltage=ethernetNTEGE114ProVmCSHCardVoltage)
mibBuilder.exportSymbols("CM-ENTITY-MIB", ethernetNTEGE112ProVmCardSwitchPortAction=ethernetNTEGE112ProVmCardSwitchPortAction, f3IrigCardRowStatus=f3IrigCardRowStatus, ethernetNTEOSA5421CardOperationalState=ethernetNTEOSA5421CardOperationalState, ethernetNTEGE201SyncECardAdminState=ethernetNTEGE201SyncECardAdminState, neContact=neContact, ethernetNTEGE201SyncECardTemperature=ethernetNTEGE201SyncECardTemperature, ethernetNTEXG210CCardEntry=ethernetNTEXG210CCardEntry, ethernetNTEGE102ProHCardOperationalState=ethernetNTEGE102ProHCardOperationalState, ethernetNTEXG118PROSHCardOperationalState=ethernetNTEXG118PROSHCardOperationalState, ethernetNTEGE102ProHCardFAN1State=ethernetNTEGE102ProHCardFAN1State, ethernetNTEGE114ProVmHCardSnmpDyingGaspEnabled=ethernetNTEGE114ProVmHCardSnmpDyingGaspEnabled, ethernetNTEXG118PROACSHCardEntityIndex=ethernetNTEXG118PROACSHCardEntityIndex, ethernetNTEGESyncProbeCardEntityIndex=ethernetNTEGESyncProbeCardEntityIndex, ethernetNTEGE112ProCardVoltage=ethernetNTEGE112ProCardVoltage, ethernet1x10GHighPerCardSecondaryState=ethernet1x10GHighPerCardSecondaryState, clk16PortCardEntityIndex=clk16PortCardEntityIndex, ethernet10x1GHighPerCardSnmpDyingGaspEnabled=ethernet10x1GHighPerCardSnmpDyingGaspEnabled, ethernetGE8ECCCardTable=ethernetGE8ECCCardTable, ethernetNTECX101Pro30ACardTemperature=ethernetNTECX101Pro30ACardTemperature, ethernetNTEGE114ProVmSHCardVoltage=ethernetNTEGE114ProVmSHCardVoltage, ethernetFE36ECardStorageType=ethernetFE36ECardStorageType, ethernetGE4ECCCardSecondaryState=ethernetGE4ECCCardSecondaryState, ethernetNTEXG116PROCardTemperature=ethernetNTEXG116PROCardTemperature, ethernetXG1SCCCardTemperature=ethernetXG1SCCCardTemperature, fanEntityIndex=fanEntityIndex, shelfAdminState=shelfAdminState, psuRowStatus=psuRowStatus, ethernet10x1GCardRowStatus=ethernet10x1GCardRowStatus, pseudoWireOcnStmCardSecondaryState=pseudoWireOcnStmCardSecondaryState, f3IrigCardAlias=f3IrigCardAlias, stiTemperature=stiTemperature, stuHighPerCardOperationalState=stuHighPerCardOperationalState, ethernetNTEGE114ProHECardSwitchPortAction=ethernetNTEGE114ProHECardSwitchPortAction, ethernetGE8SCryptoConnectorCardOperationalState=ethernetGE8SCryptoConnectorCardOperationalState, nteGe102ProHCardGroup=nteGe102ProHCardGroup, stiHighPerStorageType=stiHighPerStorageType, amiTemperature=amiTemperature, ethernetNTEGE114SHCardFineGrainedPmInterval=ethernetNTEGE114SHCardFineGrainedPmInterval, nteGe114ProCSHCardGroup=nteGe114ProCSHCardGroup, stiHighPerEntityIndex=stiHighPerEntityIndex, slotEntityIndex=slotEntityIndex, ethernetNTEGE102ProHCardSecondaryState=ethernetNTEGE102ProHCardSecondaryState, serverCardVirtualCpuAvailiable=serverCardVirtualCpuAvailiable, ethernetNTUCardAdminState=ethernetNTUCardAdminState, ethernetNTEXG120PROSHCardSnmpDyingGaspEnabled=ethernetNTEXG120PROSHCardSnmpDyingGaspEnabled, ethernetNTEGE112ProVmCardAdminState=ethernetNTEGE112ProVmCardAdminState, f3UsbHostEntityIndex=f3UsbHostEntityIndex, ethernetNTEGE114SCardSnmpDyingGaspEnabled=ethernetNTEGE114SCardSnmpDyingGaspEnabled, ethernetOverOCSTMCardForceOffLineAction=ethernetOverOCSTMCardForceOffLineAction, ethernetNTEGE114ProVmHCardEntry=ethernetNTEGE114ProVmHCardEntry, stuCardOperationalState=stuCardOperationalState, nteGE114ProVmCHCardGroup=nteGE114ProVmCHCardGroup, ethernetNTEXG120PROCardSnmpDyingGaspEnabled=ethernetNTEXG120PROCardSnmpDyingGaspEnabled, ethernetNTEGE114SHCardVoltage=ethernetNTEGE114SHCardVoltage, ethernetNTEGE112ProCardTable=ethernetNTEGE112ProCardTable, pseudoWireOcnStmCardVoltage=pseudoWireOcnStmCardVoltage, amiOperationalState=amiOperationalState, ethernetCPMRCardEntityIndex=ethernetCPMRCardEntityIndex, ethernetGE8SCCCardRestartAction=ethernetGE8SCCCardRestartAction, stiTable=stiTable, ethernetNTEGE112ProVmCardSecondaryState=ethernetNTEGE112ProVmCardSecondaryState, ethernetNTEGE201SyncECardVoltage=ethernetNTEGE201SyncECardVoltage, clk16PortCardRowStatus=clk16PortCardRowStatus, f3StorageDeviceInternalSsdHealth=f3StorageDeviceInternalSsdHealth, ethernetNTEGE114GCardFineGrainedPmInterval=ethernetNTEGE114GCardFineGrainedPmInterval, ethernetNTEGE112ProVmCardFineGrainedPmInterval=ethernetNTEGE112ProVmCardFineGrainedPmInterval, mbGnssCardAlias=mbGnssCardAlias, ge4PortCardAdminState=ge4PortCardAdminState, ethernetXG1XCCCardSecondaryState=ethernetXG1XCCCardSecondaryState, ethernetNTEGE114ProVmCSHCardAdminState=ethernetNTEGE114ProVmCSHCardAdminState, ethernetNTET1804CardOperationalState=ethernetNTET1804CardOperationalState, bits16PortCardEntry=bits16PortCardEntry, ethernetNTEGE114PHCardSecondaryState=ethernetNTEGE114PHCardSecondaryState, ethernetNTEGE102ProHCardSnmpDyingGaspEnabled=ethernetNTEGE102ProHCardSnmpDyingGaspEnabled, ethernetNTEGE112CardAdminState=ethernetNTEGE112CardAdminState, pseudoWireCardE1T1CardGroup=pseudoWireCardE1T1CardGroup, ethernetOsa3350MgntCardOperationalState=ethernetOsa3350MgntCardOperationalState, stuCardTemperature=stuCardTemperature, ge8ECCCardGroup=ge8ECCCardGroup, ethernetNTEGE114ProSHCardRestartAction=ethernetNTEGE114ProSHCardRestartAction, ethernetSWFCardEntry=ethernetSWFCardEntry, scuTemperature=scuTemperature, PsuType=PsuType, stuHighPerCardSecondaryState=stuHighPerCardSecondaryState, ethernetCSMCardFineGrainedPmInterval=ethernetCSMCardFineGrainedPmInterval, ethernetXG1XCCCardVoltage=ethernetXG1XCCCardVoltage, ethernetNTEGE206CardRestartAction=ethernetNTEGE206CardRestartAction, nteGe112ProCardGroup=nteGe112ProCardGroup, ethernetNTEGE104CardOperationalState=ethernetNTEGE104CardOperationalState, ethernet10x1GHighPerCardEntityIndex=ethernet10x1GHighPerCardEntityIndex, nemiTable=nemiTable, scuTVoltage=scuTVoltage, ethernetNTEGE112ProVmCardEntry=ethernetNTEGE112ProVmCardEntry, psuOutputVoltage=psuOutputVoltage, ethernetNTEGE102ProEFMHCardEntry=ethernetNTEGE102ProEFMHCardEntry, ethernetNTEXG120PROCardEntityIndex=ethernetNTEXG120PROCardEntityIndex, ethernetNTEGE114CardFineGrainedPmInterval=ethernetNTEGE114CardFineGrainedPmInterval, ethernetNTEGE114ProVmCHCardSecondaryState=ethernetNTEGE114ProVmCHCardSecondaryState, shelfbackplaneDOM=shelfbackplaneDOM, ethernetNTEGE114ProCSHCardOperationalState=ethernetNTEGE114ProCSHCardOperationalState, ethernetNTEGE206CardEntry=ethernetNTEGE206CardEntry, serverCardHvVersion=serverCardHvVersion, ethernetNTEGO102ProSCardTemperature=ethernetNTEGO102ProSCardTemperature, ethernetNTEGE201CardEntityIndex=ethernetNTEGE201CardEntityIndex, ethernetNTEGE201CardTemperature=ethernetNTEGE201CardTemperature, ethernetOverOCSTMCardAdminState=ethernetOverOCSTMCardAdminState, ethernetNTEGE114ProVmHCardRestartAction=ethernetNTEGE114ProVmHCardRestartAction, ethernetNTEXG116PROHCardRestartAction=ethernetNTEXG116PROHCardRestartAction, ethernetNTEGE206FCardEntry=ethernetNTEGE206FCardEntry, pseudoWireOcnStmCardFreqSource=pseudoWireOcnStmCardFreqSource, ethernetNTEGE114ProVmSHCardTemperature=ethernetNTEGE114ProVmSHCardTemperature, pseudoWireE1T1CardVoltage=pseudoWireE1T1CardVoltage, ethernetNTECX102Pro30ACardRestartAction=ethernetNTECX102Pro30ACardRestartAction, ethernetNTEGE114CardTemperature=ethernetNTEGE114CardTemperature, pseudoWireE3CardTable=pseudoWireE3CardTable, ethernetNTESH1PCSCardSnmpDyingGaspEnabled=ethernetNTESH1PCSCardSnmpDyingGaspEnabled, ethernetNTEGE114ProVmCSHCardTemperature=ethernetNTEGE114ProVmCSHCardTemperature, pps16PortCardAdminState=pps16PortCardAdminState, nteGe206CardGroup=nteGe206CardGroup, ethernetNTEGE101ProCardTable=ethernetNTEGE101ProCardTable, nteGo102ProSCardGroup=nteGo102ProSCardGroup, ethernetNTEOSA5411CardEntityIndex=ethernetNTEOSA5411CardEntityIndex, ethernetNTEGE114ProVmSHCardSnmpDyingGaspEnabled=ethernetNTEGE114ProVmSHCardSnmpDyingGaspEnabled, ethernetNTECX101Pro30ACardRestartAction=ethernetNTECX101Pro30ACardRestartAction, ethernetNTECardSecondaryState=ethernetNTECardSecondaryState, ethernetNTET1804CardFineGrainedPmInterval=ethernetNTET1804CardFineGrainedPmInterval, ethernetNTECardEntityIndex=ethernetNTECardEntityIndex, ethernet10x1GCardRestartAction=ethernet10x1GCardRestartAction, ethernetNTET1804CardSnmpDyingGaspEnabled=ethernetNTET1804CardSnmpDyingGaspEnabled, ethernetNTEGE114ProCardFineGrainedPmInterval=ethernetNTEGE114ProCardFineGrainedPmInterval, ethernetNTEGE114ProVmCHCardFineGrainedPmInterval=ethernetNTEGE114ProVmCHCardFineGrainedPmInterval, stiStorageType=stiStorageType, ethernetNTEGE112ProMCardTemperature=ethernetNTEGE112ProMCardTemperature, ethernetNTESH1PCSCardAdminState=ethernetNTESH1PCSCardAdminState, pseudoWireE3CardAdminState=pseudoWireE3CardAdminState, bits16PortCardTable=bits16PortCardTable, SlotType=SlotType, ethernetNTEGE114SCardSwitchPortAction=ethernetNTEGE114SCardSwitchPortAction, ethernetNTEGE104CardSwitchPortActionPort=ethernetNTEGE104CardSwitchPortActionPort, ethernetNTEGE114CardVoltage=ethernetNTEGE114CardVoltage, ethernetNTEXG210CCardSnmpDyingGaspEnabled=ethernetNTEXG210CCardSnmpDyingGaspEnabled, ethernet1x10GHighPerCardEntry=ethernet1x10GHighPerCardEntry, ethernetNTEOSA5405CardTableRestartAction=ethernetNTEOSA5405CardTableRestartAction, nteGe101ProCardGroup=nteGe101ProCardGroup, ethernetNTEGE114ProVmCHCardVoltage=ethernetNTEGE114ProVmCHCardVoltage, nteT1804CardGroup=nteT1804CardGroup, ethernetNTEGE114ProSHCardSwitchPortAction=ethernetNTEGE114ProSHCardSwitchPortAction, ethernetNTEGE102ProHCardPSU2State=ethernetNTEGE102ProHCardPSU2State, ethernetNTEOSA5420CardEntityIndex=ethernetNTEOSA5420CardEntityIndex, ethernetNTECX102Pro30ACardSwitchPortAction=ethernetNTECX102Pro30ACardSwitchPortAction, pseudoWireE1T1CardMode=pseudoWireE1T1CardMode, hubshelfGroup=hubshelfGroup, ethernetXG1SCCCardStorageType=ethernetXG1SCCCardStorageType, ethernetNTECX101Pro30ACardSecondaryState=ethernetNTECX101Pro30ACardSecondaryState, ethernetXG1XCCCardEntry=ethernetXG1XCCCardEntry, ethernetNTEXG116PROCardTable=ethernetNTEXG116PROCardTable, ethernetNTEGE114ProVmHCardOperationalState=ethernetNTEGE114ProVmHCardOperationalState, slotCardMfgName=slotCardMfgName, ethernetNTEGE112ProVmCardSnmpDyingGaspEnabled=ethernetNTEGE112ProVmCardSnmpDyingGaspEnabled, ethernetNTET1804CardMode=ethernetNTET1804CardMode, ethernetNTEGE206VCardEntityIndex=ethernetNTEGE206VCardEntityIndex, ethernetNTEGE102ProEFMHCardSecondaryState=ethernetNTEGE102ProEFMHCardSecondaryState, ethernetNTEGE114SHCardTable=ethernetNTEGE114SHCardTable, ethernetNTEXG116PROHCardAdminState=ethernetNTEXG116PROHCardAdminState, nteCx102Pro30ACardGroup=nteCx102Pro30ACardGroup, ethernetNTEGO102ProSPCardEntityIndex=ethernetNTEGO102ProSPCardEntityIndex, ethernetNTEXG118PROACSHCardOperationalState=ethernetNTEXG118PROACSHCardOperationalState, ethernetNTEGE114ProVmHCardSecondaryState=ethernetNTEGE114ProVmHCardSecondaryState, ethernetNTEOSA5405CardTable=ethernetNTEOSA5405CardTable, shelfEntityIndex=shelfEntityIndex, auxPortCardSecondaryState=auxPortCardSecondaryState, ethernetNTET1804CardSecondaryState=ethernetNTET1804CardSecondaryState, psuTable=psuTable, ethernetNTEGE114ProSHCardOperationalState=ethernetNTEGE114ProSHCardOperationalState, ethernetNTEGE114ProCCardTable=ethernetNTEGE114ProCCardTable, ethernetNTEXG120PROCardVoltage=ethernetNTEXG120PROCardVoltage, ethernetSWFCardStorageType=ethernetSWFCardStorageType, pseudoWireOcnStmCardStorageType=pseudoWireOcnStmCardStorageType, ethernetNTEGE102ProEFMHCardOperationalState=ethernetNTEGE102ProEFMHCardOperationalState, ethernetNTEGE114ProVmCHCardOperationalState=ethernetNTEGE114ProVmCHCardOperationalState, ethernetNTECX101Pro30ACardEntry=ethernetNTECX101Pro30ACardEntry, ethernetNTEGE114ProVmCSHCardRestartAction=ethernetNTEGE114ProVmCSHCardRestartAction, ethernetNTET1804CardTable=ethernetNTET1804CardTable, compositeClockCardGroup=compositeClockCardGroup, ethernetNTEGE114HCardSwitchPortActionPort=ethernetNTEGE114HCardSwitchPortActionPort, ethernetXG1SCCCardRowStatus=ethernetXG1SCCCardRowStatus, ethernetNTEGE102ProEFMHCardAdminState=ethernetNTEGE102ProEFMHCardAdminState, ethernetSWFCardForceOffLineAction=ethernetSWFCardForceOffLineAction, stiHighPerEntry=stiHighPerEntry, ethernetNTEOSA5411CardVoltage=ethernetNTEOSA5411CardVoltage, ethernetNTECardAdminState=ethernetNTECardAdminState, ethernetNTEGO102ProSPCardOperationalState=ethernetNTEGO102ProSPCardOperationalState, f3UsbHostCLEICode=f3UsbHostCLEICode, ethernetGE4ECCCardRestartAction=ethernetGE4ECCCardRestartAction, ethernetNTEGE114PHCardSwitchPortAction=ethernetNTEGE114PHCardSwitchPortAction, ethernetNTECardTable=ethernetNTECardTable, ethernetGE8SCryptoConnectorCardStorageType=ethernetGE8SCryptoConnectorCardStorageType, ethernetOverOCSTMCardEntityIndex=ethernetOverOCSTMCardEntityIndex, ethernetGE4SCCCardEntityIndex=ethernetGE4SCCCardEntityIndex, ethernetGE8SCCCardEntityIndex=ethernetGE8SCCCardEntityIndex, compositeClockCardSecondaryState=compositeClockCardSecondaryState, ethernetNTEXG116PROCardEntityIndex=ethernetNTEXG116PROCardEntityIndex, f3UsbHostEntry=f3UsbHostEntry, nteGe114HCardGroup=nteGe114HCardGroup, ethernetNTEGE114SCardOperationalState=ethernetNTEGE114SCardOperationalState, mbGnssCardSecondaryState=mbGnssCardSecondaryState, cmEntityMIB=cmEntityMIB, ethernetNTEGE112ProMCardOperationalState=ethernetNTEGE112ProMCardOperationalState, ethernetNTEGE112CardEntityIndex=ethernetNTEGE112CardEntityIndex, ethernetNTEXG118PROSHCardEntry=ethernetNTEXG118PROSHCardEntry, ethernetXG1XCCCardStorageType=ethernetXG1XCCCardStorageType, ethernetGE4ECCCardStorageType=ethernetGE4ECCCardStorageType, scuTRestartAction=scuTRestartAction, nteGe114ProHECardGroup=nteGe114ProHECardGroup, fanTable=fanTable, neIndex=neIndex, ethernetOverOCSTMCardTable=ethernetOverOCSTMCardTable, ethernetNTEGE112ProHCardSwitchPortAction=ethernetNTEGE112ProHCardSwitchPortAction, networkElementTable=networkElementTable, ethernetNTUCardOperationalState=ethernetNTUCardOperationalState, ethernetNTEOSA5421CardSecondaryState=ethernetNTEOSA5421CardSecondaryState, ethernetNTEGE114ProCardOperationalState=ethernetNTEGE114ProCardOperationalState, stiHighPerTable=stiHighPerTable, serverCardRestartAction=serverCardRestartAction, ethernetNTEGE101CardEntry=ethernetNTEGE101CardEntry, ethernetNTEGE206VCardRestartAction=ethernetNTEGE206VCardRestartAction, ethernetNTEGO102ProSCardEntityIndex=ethernetNTEGO102ProSCardEntityIndex, ethernetSWFCardTemperature=ethernetSWFCardTemperature, ethernetNTECX101Pro30ACardOperationalState=ethernetNTECX101Pro30ACardOperationalState, ethernetNTEXG118PROACSHCardEntry=ethernetNTEXG118PROACSHCardEntry, ethernetNTEOSA5411CardSnmpDyingGaspEnabled=ethernetNTEOSA5411CardSnmpDyingGaspEnabled, ethernetCPMRCardPsuType=ethernetCPMRCardPsuType, ethernetNTEGE201CardOperationalState=ethernetNTEGE201CardOperationalState, ethernetNTEGE112ProCardAdminState=ethernetNTEGE112ProCardAdminState, ethernetNTEGO102ProSCardEntry=ethernetNTEGO102ProSCardEntry, ethernetNTEGE114ProVmSHCardEntry=ethernetNTEGE114ProVmSHCardEntry, ethernetNTEGO102ProSMCardSecondaryState=ethernetNTEGO102ProSMCardSecondaryState, PYSNMP_MODULE_ID=cmEntityMIB, ethernetNTEGE102ProEFMHCardLLFMode=ethernetNTEGE102ProEFMHCardLLFMode, ethernetNTEOSA5405CardAdminState=ethernetNTEOSA5405CardAdminState, ethernetNTEXG116PROHCardVoltage=ethernetNTEXG116PROHCardVoltage, todPps16PortCardEntityIndex=todPps16PortCardEntityIndex, networkElementEntry=networkElementEntry, ethernetNTEXG210CCardSecondaryState=ethernetNTEXG210CCardSecondaryState, ethernetGE8SCryptoConnectorCardEntityIndex=ethernetGE8SCryptoConnectorCardEntityIndex, ethernetNTEXG120PROCardFineGrainedPmInterval=ethernetNTEXG120PROCardFineGrainedPmInterval, auxPortCardEntry=auxPortCardEntry, ethernetNTEGE114CardSnmpDyingGaspEnabled=ethernetNTEGE114CardSnmpDyingGaspEnabled, ethernetOverOCSTMCardRestartAction=ethernetOverOCSTMCardRestartAction, stuHighPerCardForceOffLineAction=stuHighPerCardForceOffLineAction, serverCardRowStatus=serverCardRowStatus, ethernetNTEGE114PHCardRestartAction=ethernetNTEGE114PHCardRestartAction, ethernet1x10GCardOperationalState=ethernet1x10GCardOperationalState, ethernetNTECX102Pro30ACardTable=ethernetNTECX102Pro30ACardTable)
mibBuilder.exportSymbols("CM-ENTITY-MIB", ethernetNTEXG116PROHCardFineGrainedPmInterval=ethernetNTEXG116PROHCardFineGrainedPmInterval, ethernetNTEXG116PROCardRestartAction=ethernetNTEXG116PROCardRestartAction, ethernetNTECX101Pro30ACardSwitchPortActionPort=ethernetNTECX101Pro30ACardSwitchPortActionPort, ethernetNTEGE114ProVmSHCardEntityIndex=ethernetNTEGE114ProVmSHCardEntityIndex, ethernetNTEGE206VCardTemperature=ethernetNTEGE206VCardTemperature, ethernetNTEGE114ProVmCHCardSwitchPortActionPort=ethernetNTEGE114ProVmCHCardSwitchPortActionPort, ethernetNTECardSnmpDyingGaspEnabled=ethernetNTECardSnmpDyingGaspEnabled, ethernetNTECX102Pro30ACardVoltage=ethernetNTECX102Pro30ACardVoltage, ethernetNTEGE114SHCardTemperature=ethernetNTEGE114SHCardTemperature, psuType=psuType, psuOperationalState=psuOperationalState, ethernetXG1SCCCardRestartAction=ethernetXG1SCCCardRestartAction, ethernetNTEGESyncProbeCardEntry=ethernetNTEGESyncProbeCardEntry, ethernetNTET3204CardMode=ethernetNTET3204CardMode, ethernetOsa3350MgntCardAdminState=ethernetOsa3350MgntCardAdminState, ethernetNTEGE102ProEFMHCardEntityIndex=ethernetNTEGE102ProEFMHCardEntityIndex, nteGeSyncProbeCardGroup=nteGeSyncProbeCardGroup, psuStorageType=psuStorageType, ethernetNTECX102Pro30ACardTemperature=ethernetNTECX102Pro30ACardTemperature, ethernetNTEGE101CardRestartAction=ethernetNTEGE101CardRestartAction, ethernetNTEXG120PROSHCardOperationalState=ethernetNTEXG120PROSHCardOperationalState, ethernetNTEXG210CCardFineGrainedPmInterval=ethernetNTEXG210CCardFineGrainedPmInterval, ethernetGE4SCCCardRestartAction=ethernetGE4SCCCardRestartAction, ethernetNTEGE112ProCardSnmpDyingGaspEnabled=ethernetNTEGE112ProCardSnmpDyingGaspEnabled, ethernetNTEXG210CardSecondaryState=ethernetNTEXG210CardSecondaryState, ethernet1x10GCardRowStatus=ethernet1x10GCardRowStatus, ethernetNTEGE112ProHCardOperationalState=ethernetNTEGE112ProHCardOperationalState, ethernetNTET3204CardTable=ethernetNTET3204CardTable, ethernetNTEGE101ProCardFineGrainedPmInterval=ethernetNTEGE101ProCardFineGrainedPmInterval, ethernetNTEXG118PROACSHCardTable=ethernetNTEXG118PROACSHCardTable, ethernetXG1XCCCardTemperature=ethernetXG1XCCCardTemperature, ethernetNTEGE112ProHCardTable=ethernetNTEGE112ProHCardTable, f3IrigCardSecondaryState=f3IrigCardSecondaryState, ge8SCCCardGroup=ge8SCCCardGroup, stuHighPerCardEntry=stuHighPerCardEntry, ethernetNTEGE114ProHECardTable=ethernetNTEGE114ProHECardTable, ethernetNTEGE114ProVmHCardFineGrainedPmInterval=ethernetNTEGE114ProVmHCardFineGrainedPmInterval, ethernetNTEXG210CardAdminState=ethernetNTEXG210CardAdminState, ethernetNTEGE206FCardRestartAction=ethernetNTEGE206FCardRestartAction, ethernetNTEGE101ProCardSecondaryState=ethernetNTEGE101ProCardSecondaryState, ethernet10x1GHighPerCardRowStatus=ethernet10x1GHighPerCardRowStatus, ethernetNTEGE114CardEntry=ethernetNTEGE114CardEntry, pseudoWireE3CardIpAddress=pseudoWireE3CardIpAddress, ethernetNTECardVoltage=ethernetNTECardVoltage, pseudoWireE1T1CardAdminState=pseudoWireE1T1CardAdminState, ethernetNTEGE102ProHCardPsuType=ethernetNTEGE102ProHCardPsuType, f3IrigCardOperationalState=f3IrigCardOperationalState, ethernetNTEXG118PROACSHCardAdminState=ethernetNTEXG118PROACSHCardAdminState, ethernetNTEXG118PROACSHCardRestartAction=ethernetNTEXG118PROACSHCardRestartAction, ethernetNTEGE114ProCCardAdminState=ethernetNTEGE114ProCCardAdminState, ethernetNTECardEntry=ethernetNTECardEntry, ethernetOverOCSTMCardSecondaryState=ethernetOverOCSTMCardSecondaryState, CardType=CardType, ethernetNTEXG118PROACSHCardSnmpDyingGaspEnabled=ethernetNTEXG118PROACSHCardSnmpDyingGaspEnabled, nteCx101Pro30ACardGroup=nteCx101Pro30ACardGroup, ethernetGE8ECCCardSecondaryState=ethernetGE8ECCCardSecondaryState, ethernetNTEGE112ProVmCardTable=ethernetNTEGE112ProVmCardTable, ethernetNTEGE114SCardTable=ethernetNTEGE114SCardTable, ethernetNTEGE114ProCCardSwitchPortActionPort=ethernetNTEGE114ProCCardSwitchPortActionPort, pps16PortCardOperationalState=pps16PortCardOperationalState, scuFlashModelNum=scuFlashModelNum, ethernetNTEGE112CardFineGrainedPmInterval=ethernetNTEGE112CardFineGrainedPmInterval, ethernetXG1XCCCardRestartAction=ethernetXG1XCCCardRestartAction, ethernetNTEGE114ProCardRestartAction=ethernetNTEGE114ProCardRestartAction, pseudoWireE3CardTimeOfDay=pseudoWireE3CardTimeOfDay, fanGroup=fanGroup, scuTEntityIndex=scuTEntityIndex, stuCardRestartAction=stuCardRestartAction, ethernetNTEOSA5401CardOperationalState=ethernetNTEOSA5401CardOperationalState, mbGnssCardTable=mbGnssCardTable, ethernetXG1SCCCardOperationalState=ethernetXG1SCCCardOperationalState, ethernetNTEGE112CardSecondaryState=ethernetNTEGE112CardSecondaryState, ethernetNTEOSA5420CardVoltage=ethernetNTEOSA5420CardVoltage, slotType=slotType, ethernetNTEGE112ProVmCardVoltage=ethernetNTEGE112ProVmCardVoltage, ge4PortCardAlias=ge4PortCardAlias, ethernetFE36ECardAdminState=ethernetFE36ECardAdminState, ethernetNTEGE112ProCardRestartAction=ethernetNTEGE112ProCardRestartAction, nteGE104CardGroup=nteGE104CardGroup, ethernetNTEGE102ProEFMHCardFAN1State=ethernetNTEGE102ProEFMHCardFAN1State, fanEntry=fanEntry, nteOsa5420CardGroup=nteOsa5420CardGroup, ethernetNTEGE114SHCardSwitchPortAction=ethernetNTEGE114SHCardSwitchPortAction, compositeClockCardTable=compositeClockCardTable, stuCardEntityIndex=stuCardEntityIndex, ethernetNTEGE114ProHECardSwitchPortActionPort=ethernetNTEGE114ProHECardSwitchPortActionPort, shelfbackplaneSerialNo=shelfbackplaneSerialNo, ethernetNTUCardSecondaryState=ethernetNTUCardSecondaryState, f3UsbHostTable=f3UsbHostTable, stiRowStatus=stiRowStatus, ethernetNTEGE114SCardSwitchPortActionPort=ethernetNTEGE114SCardSwitchPortActionPort, ethernetNTEGE102ProEFMHCardLLFModeAction=ethernetNTEGE102ProEFMHCardLLFModeAction, ethernetNTEGE206FCardSnmpDyingGaspEnabled=ethernetNTEGE206FCardSnmpDyingGaspEnabled, slotEntry=slotEntry, ethernetNTEGE104CardAdminState=ethernetNTEGE104CardAdminState, ethernetNTEGE112ProMCardAdminState=ethernetNTEGE112ProMCardAdminState, ethernetGE8SCryptoConnectorCardVoltage=ethernetGE8SCryptoConnectorCardVoltage, ethernetNTEXG120PROCardEntry=ethernetNTEXG120PROCardEntry, ethernetCPMRCardTemperature=ethernetCPMRCardTemperature, cmEntityConformance=cmEntityConformance, pseudoWireE3CardDhcpEnabled=pseudoWireE3CardDhcpEnabled, ethernetNTEXG210CCardOperationalState=ethernetNTEXG210CCardOperationalState, ethernetNTEGE102ProEFMHCardTemperature=ethernetNTEGE102ProEFMHCardTemperature, ethernetNTEOSA5421CardVoltage=ethernetNTEOSA5421CardVoltage, shelfbackplaneRev=shelfbackplaneRev, bits16PortCardTemperature=bits16PortCardTemperature, ethernetCPMRCardTable=ethernetCPMRCardTable, ethernetNTEGE206FCardTemperature=ethernetNTEGE206FCardTemperature, ethernetNTEGE102ProEFMHCardVoltage=ethernetNTEGE102ProEFMHCardVoltage, f3UsbHostMfgSite=f3UsbHostMfgSite, shelfAction=shelfAction, ethernetNTEXG116PROHCardTemperature=ethernetNTEXG116PROHCardTemperature, ethernetNTEGE201SyncECardTable=ethernetNTEGE201SyncECardTable, ethernetNTEGE112ProVmCardRestartAction=ethernetNTEGE112ProVmCardRestartAction, ethernetNTEGE114CardSecondaryState=ethernetNTEGE114CardSecondaryState, ethernetNTEGE114SCardSecondaryState=ethernetNTEGE114SCardSecondaryState, ethernetNTEOSA5411CardAdminState=ethernetNTEOSA5411CardAdminState, ethernetNTEXG120PROSHCardTable=ethernetNTEXG120PROSHCardTable, ethernetCSMCardEntry=ethernetCSMCardEntry, f3UsbHostSwRev=f3UsbHostSwRev, ethernetNTEXG118PROACSHCardTemperature=ethernetNTEXG118PROACSHCardTemperature, neAutoProvMode=neAutoProvMode, ethernetNTEGE102ProEFMHCardPSU1State=ethernetNTEGE102ProEFMHCardPSU1State, ethernetNTEGESyncProbeCardOperationalState=ethernetNTEGESyncProbeCardOperationalState, compositeClockCardEntry=compositeClockCardEntry, ethernetNTEGE114ProCCardSnmpDyingGaspEnabled=ethernetNTEGE114ProCCardSnmpDyingGaspEnabled, todPps16PortCardAdminState=todPps16PortCardAdminState, ethernetNTEGE104CardEntityIndex=ethernetNTEGE104CardEntityIndex, f3UsbHostHwRev=f3UsbHostHwRev, nteXg118ProacSHCardGroup=nteXg118ProacSHCardGroup, serverCardUpTime=serverCardUpTime, ethernetNTEGE101CardSecondaryState=ethernetNTEGE101CardSecondaryState, ethernetNTEGE114ProVmCSHCardSwitchPortAction=ethernetNTEGE114ProVmCSHCardSwitchPortAction, ethernetNTECardRestartAction=ethernetNTECardRestartAction, ethernetGE8SCryptoConnectorCardSecondaryState=ethernetGE8SCryptoConnectorCardSecondaryState, ethernet10x1GHighPerCardOperationalState=ethernet10x1GHighPerCardOperationalState, ethernetXG1SCCCardVoltage=ethernetXG1SCCCardVoltage, ethernetNTEGE114ProSHCardSecondaryState=ethernetNTEGE114ProSHCardSecondaryState, ethernetNTEGE114ProVmHCardAdminState=ethernetNTEGE114ProVmHCardAdminState, ethernetCPMRCardFAN2State=ethernetCPMRCardFAN2State, ethernetNTEGE114ProHECardAdminState=ethernetNTEGE114ProHECardAdminState, ethernetGE4ECCCardVoltage=ethernetGE4ECCCardVoltage, ethernet1x10GCardEntityIndex=ethernet1x10GCardEntityIndex, ethernetNTEGE102ProHCardRestartAction=ethernetNTEGE102ProHCardRestartAction, ethernetNTEGE114CardOperationalState=ethernetNTEGE114CardOperationalState, pseudoWireOcnStmCardTemperature=pseudoWireOcnStmCardTemperature, pseudoWireE1T1CardStorageType=pseudoWireE1T1CardStorageType, ethernetNTEXG118PROSHCardSecondaryState=ethernetNTEXG118PROSHCardSecondaryState, stuHighPerCardStorageType=stuHighPerCardStorageType, ethernetNTEGESyncProbeCardSnmpDyingGaspEnabled=ethernetNTEGESyncProbeCardSnmpDyingGaspEnabled, ethernetNTEXG120PROSHCardSecondaryState=ethernetNTEXG120PROSHCardSecondaryState, nteGe114PHCardGroup=nteGe114PHCardGroup, cmEntityObjects=cmEntityObjects, shelfOperationalState=shelfOperationalState, ethernet1x10GCardTemperature=ethernet1x10GCardTemperature, ethernetNTEOSA5421CardAdminState=ethernetNTEOSA5421CardAdminState, ethernetNTEXG120PROSHCardTemperature=ethernetNTEXG120PROSHCardTemperature, NetworkElementType=NetworkElementType, ethernetNTEXG210CardTemperature=ethernetNTEXG210CardTemperature, ethernetNTEGO102ProSCardFineGrainedPmInterval=ethernetNTEGO102ProSCardFineGrainedPmInterval, ethernetNTEGE102ProEFMHCardRestartAction=ethernetNTEGE102ProEFMHCardRestartAction, neLLDPParamsGroup=neLLDPParamsGroup, stiEntry=stiEntry, ethernetNTEGE206CardAdminState=ethernetNTEGE206CardAdminState, ethernetNTEGE114ProHECardEntityIndex=ethernetNTEGE114ProHECardEntityIndex, ethernetNTEGE102ProHCardEntityIndex=ethernetNTEGE102ProHCardEntityIndex, ethernetXG1XCCCardEntityIndex=ethernetXG1XCCCardEntityIndex, ethernetOverOCSTMCardMode=ethernetOverOCSTMCardMode, ethernetNTUCardSnmpDyingGaspEnabled=ethernetNTUCardSnmpDyingGaspEnabled, ethernetNTEGE114PHCardEntry=ethernetNTEGE114PHCardEntry, ethernetNTEGE114ProVmCSHCardSwitchPortActionPort=ethernetNTEGE114ProVmCSHCardSwitchPortActionPort, ethernet10x1GHighPerCardRestartAction=ethernet10x1GHighPerCardRestartAction, ethernetNTEGE112CardVoltage=ethernetNTEGE112CardVoltage, ethernetNTEGESyncProbeCardTemperature=ethernetNTEGESyncProbeCardTemperature, ethernetNTEXG210CCardTable=ethernetNTEXG210CCardTable, ethernetNTEGE206FCardTable=ethernetNTEGE206FCardTable, ge4PortCardOperationalState=ge4PortCardOperationalState, ethernetNTEGE201CardVoltage=ethernetNTEGE201CardVoltage, bits16PortCardEntityIndex=bits16PortCardEntityIndex, auxPortCardGroup=auxPortCardGroup, ethernetNTEXG116PROCardFineGrainedPmInterval=ethernetNTEXG116PROCardFineGrainedPmInterval, ethernetNTEXG116PROCardSnmpDyingGaspEnabled=ethernetNTEXG116PROCardSnmpDyingGaspEnabled, pseudoWireE3CardSecondaryState=pseudoWireE3CardSecondaryState, ethernetNTEOSA5421CardTable=ethernetNTEOSA5421CardTable, ethernetOverOCSTMCardGroup=ethernetOverOCSTMCardGroup, ethernetNTEGO102ProSCardTable=ethernetNTEGO102ProSCardTable, ethernetNTEGE102ProHCardFAN2State=ethernetNTEGE102ProHCardFAN2State, pseudoWireE3CardRestartAction=pseudoWireE3CardRestartAction, ethernetGE8SCryptoConnectorCardTable=ethernetGE8SCryptoConnectorCardTable, psuEntry=psuEntry, ge4ECCCardGroup=ge4ECCCardGroup, ethernetNTEXG116PROCardOperationalState=ethernetNTEXG116PROCardOperationalState, ethernetNTEXG118PROSHCardVoltage=ethernetNTEXG118PROSHCardVoltage, ethernetNTEXG116PROHCardEntry=ethernetNTEXG116PROHCardEntry, ethernetCPMRCardLLFMode=ethernetCPMRCardLLFMode, ethernetGE4ECCCardEntityIndex=ethernetGE4ECCCardEntityIndex, ethernetNTEGO102ProSMCardEntry=ethernetNTEGO102ProSMCardEntry, ethernetNTEOSA5420CardRestartAction=ethernetNTEOSA5420CardRestartAction, ethernetNTEOSA5411CardRestartAction=ethernetNTEOSA5411CardRestartAction, ethernetNTEGE114SHCardSecondaryState=ethernetNTEGE114SHCardSecondaryState, ethernetNTUCardVoltage=ethernetNTUCardVoltage, ethernetNTEGE112ProCardFineGrainedPmInterval=ethernetNTEGE112ProCardFineGrainedPmInterval, ethernetNTEOSA5405CardOperationalState=ethernetNTEOSA5405CardOperationalState, neDescription=neDescription, ethernetNTEGE206VCardAdminState=ethernetNTEGE206VCardAdminState, ethernetNTEGE114ProVmHCardTemperature=ethernetNTEGE114ProVmHCardTemperature, ethernetNTEGE101CardVoltage=ethernetNTEGE101CardVoltage, f3UsbHostPartNumber=f3UsbHostPartNumber, PWE3E1T1CardMode=PWE3E1T1CardMode, ethernetGE8SCryptoConnectorCardTemperature=ethernetGE8SCryptoConnectorCardTemperature, scuRestartAction=scuRestartAction, ethernetNTEGE114ProCCardOperationalState=ethernetNTEGE114ProCCardOperationalState, todPps16PortCardOperationalState=todPps16PortCardOperationalState, bits16PortCardSecondaryState=bits16PortCardSecondaryState, ethernetNTEXG118PROSHCardFineGrainedPmInterval=ethernetNTEXG118PROSHCardFineGrainedPmInterval, ethernetNTEGO102ProSPCardSwitchPortActionPort=ethernetNTEGO102ProSPCardSwitchPortActionPort, scuEntityIndex=scuEntityIndex, scuTSecondaryState=scuTSecondaryState, ethernetNTEGE114GCardRestartAction=ethernetNTEGE114GCardRestartAction, ethernetNTEGE114ProCardTemperature=ethernetNTEGE114ProCardTemperature, ethernetNTESH1PCSCardOperationalState=ethernetNTESH1PCSCardOperationalState, ethernetNTEGO102ProSMCardEntityIndex=ethernetNTEGO102ProSMCardEntityIndex, pps16PortCardEntry=pps16PortCardEntry, LLDPEnableAction=LLDPEnableAction, networkElementLLDPParamsEntry=networkElementLLDPParamsEntry, xg1XCCCardGroup=xg1XCCCardGroup, pseudoWireE1T1CardRowStatus=pseudoWireE1T1CardRowStatus, ethernetNTEGE114ProCSHCardAdminState=ethernetNTEGE114ProCSHCardAdminState, ethernetNTEGE114SCardVoltage=ethernetNTEGE114SCardVoltage, ethernetCSMCardTemperature=ethernetCSMCardTemperature, ethernetCSMCardVoltage=ethernetCSMCardVoltage, nemiStorageType=nemiStorageType, fanAdminState=fanAdminState, nteT3204CardGroup=nteT3204CardGroup, f3IrigCardStorageType=f3IrigCardStorageType, ethernet1x10GCardTable=ethernet1x10GCardTable, nteXg120ProCardGroup=nteXg120ProCardGroup, ethernetNTEGE114ProCCardSwitchPortAction=ethernetNTEGE114ProCCardSwitchPortAction, ethernetNTEGE114ProCardEntry=ethernetNTEGE114ProCardEntry, ethernetNTEGE102ProHCardTemperature=ethernetNTEGE102ProHCardTemperature, ethernetNTEGE206CardFineGrainedPmInterval=ethernetNTEGE206CardFineGrainedPmInterval, f3StorageDeviceWearoutLevel=f3StorageDeviceWearoutLevel, nteGE114ProVmHCardGroup=nteGE114ProVmHCardGroup, ethernetOsa3350MgntCardGroup=ethernetOsa3350MgntCardGroup, serverCardEntry=serverCardEntry, ethernetNTEXG120PROSHCardAdminState=ethernetNTEXG120PROSHCardAdminState, ethernetNTEGE201SyncECardSecondaryState=ethernetNTEGE201SyncECardSecondaryState, ethernetFE36ECardOperationalState=ethernetFE36ECardOperationalState, ethernetNTEGE112ProHCardEntityIndex=ethernetNTEGE112ProHCardEntityIndex, ethernetNTEGE206VCardFineGrainedPmInterval=ethernetNTEGE206VCardFineGrainedPmInterval, ethernetNTEGE114ProHECardRestartAction=ethernetNTEGE114ProHECardRestartAction, ethernetNTEGE114SHCardSnmpDyingGaspEnabled=ethernetNTEGE114SHCardSnmpDyingGaspEnabled, ethernet10x1GCardOperationalState=ethernet10x1GCardOperationalState, ethernetNTET3204CardVoltage=ethernetNTET3204CardVoltage)
mibBuilder.exportSymbols("CM-ENTITY-MIB", ethernetNTEGE114SHCardSwitchPortActionPort=ethernetNTEGE114SHCardSwitchPortActionPort, ethernetNTEOSA5411CardOperationalState=ethernetNTEOSA5411CardOperationalState, ResyncType=ResyncType, serverCardGroup=serverCardGroup, ethernetNTEGE114ProCCardEntityIndex=ethernetNTEGE114ProCCardEntityIndex, ethernetGE8SCCCardSecondaryState=ethernetGE8SCCCardSecondaryState, ethernet1x10GCardEntry=ethernet1x10GCardEntry, nteGe201SyncECardGroup=nteGe201SyncECardGroup, ethernetCPMRCardSecondaryState=ethernetCPMRCardSecondaryState, ethernetFE36ECardEntityIndex=ethernetFE36ECardEntityIndex, stuCardTable=stuCardTable, ethernetNTEGO102ProSCardSwitchPortActionPort=ethernetNTEGO102ProSCardSwitchPortActionPort, clk16PortCardTable=clk16PortCardTable, ethernetNTEGE104CardVoltage=ethernetNTEGE104CardVoltage, ethernetCPMRCardLLFModeAction=ethernetCPMRCardLLFModeAction, ethernetNTEOSA5420CardTable=ethernetNTEOSA5420CardTable, ethernetNTECX101Pro30ACardSwitchPortAction=ethernetNTECX101Pro30ACardSwitchPortAction, ethernetNTESH1PCSCardVoltage=ethernetNTESH1PCSCardVoltage, stiHighPerOperationalState=stiHighPerOperationalState, ethernetNTEXG120PROCardTemperature=ethernetNTEXG120PROCardTemperature, shelfTable=shelfTable, nteGe114CardGroup=nteGe114CardGroup, ethernetNTEXG118PROSHCardSnmpDyingGaspEnabled=ethernetNTEXG118PROSHCardSnmpDyingGaspEnabled, ge4PortCardEntityIndex=ge4PortCardEntityIndex, ethernetNTEGE112ProCardTemperature=ethernetNTEGE112ProCardTemperature, ethernetNTEGE114SCardTemperature=ethernetNTEGE114SCardTemperature, ge4PortCardSecondaryState=ge4PortCardSecondaryState, pps16PortCardAlias=pps16PortCardAlias, nteOsa5411CardGroup=nteOsa5411CardGroup, todPps16PortCardAlias=todPps16PortCardAlias, ethernet1x10GHighPerCardSnmpDyingGaspEnabled=ethernet1x10GHighPerCardSnmpDyingGaspEnabled, ethernetNTEXG210CCardTemperature=ethernetNTEXG210CCardTemperature, ethernetOsa3350MgntCardRestartAction=ethernetOsa3350MgntCardRestartAction, pseudoWireE1T1CardRestartAction=pseudoWireE1T1CardRestartAction, stuHighPerCardTable=stuHighPerCardTable, ethernetNTEGE114ProVmCSHCardEntry=ethernetNTEGE114ProVmCSHCardEntry, scuFlashSerialNum=scuFlashSerialNum, ethernetNTEXG116PROCardAdminState=ethernetNTEXG116PROCardAdminState, ethernetNTEGE101CardSnmpDyingGaspEnabled=ethernetNTEGE101CardSnmpDyingGaspEnabled, ethernetSWFCardSecondaryState=ethernetSWFCardSecondaryState, ethernetNTEGE112ProHCardSnmpDyingGaspEnabled=ethernetNTEGE112ProHCardSnmpDyingGaspEnabled, pseudoWireOcnStmCardEntry=pseudoWireOcnStmCardEntry, ethernetNTEGE114ProCCardTemperature=ethernetNTEGE114ProCCardTemperature, mbGnssCardEntry=mbGnssCardEntry, scuFlashFirmwareRev=scuFlashFirmwareRev, ethernetNTEGE114SHCardEntry=ethernetNTEGE114SHCardEntry, ethernetNTEGE101CardTable=ethernetNTEGE101CardTable, slotCardPartNumber=slotCardPartNumber, cmEntityCompliances=cmEntityCompliances, ethernetNTEGE114ProHECardFineGrainedPmInterval=ethernetNTEGE114ProHECardFineGrainedPmInterval, compositeClockCardEntityIndex=compositeClockCardEntityIndex, cmEntityCompliance=cmEntityCompliance, nemiEntry=nemiEntry, ethernetNTEGE114HCardTable=ethernetNTEGE114HCardTable, ethernetNTEGE101ProCardEntry=ethernetNTEGE101ProCardEntry, ethernetNTEGE112ProHCardAdminState=ethernetNTEGE112ProHCardAdminState, ethernetNTEGO102ProSCardSnmpDyingGaspEnabled=ethernetNTEGO102ProSCardSnmpDyingGaspEnabled, f3UsbHostMfgName=f3UsbHostMfgName, ethernetNTEGE101ProCardTemperature=ethernetNTEGE101ProCardTemperature, ethernet1x10GCardStorageType=ethernet1x10GCardStorageType, ethernetNTEGE114ProSHCardFineGrainedPmInterval=ethernetNTEGE114ProSHCardFineGrainedPmInterval, ethernetNTEOSA5421CardSnmpDyingGaspEnabled=ethernetNTEOSA5421CardSnmpDyingGaspEnabled, ethernetNTEOSA5401CardEntityIndex=ethernetNTEOSA5401CardEntityIndex, ethernetGE8ECCCardVoltage=ethernetGE8ECCCardVoltage, ethernetNTEXG210CardRestartAction=ethernetNTEXG210CardRestartAction, ethernetNTEGE206VCardSecondaryState=ethernetNTEGE206VCardSecondaryState, ethernetGE8SCCCardVoltage=ethernetGE8SCCCardVoltage, ethernetNTEGE104CardFineGrainedPmInterval=ethernetNTEGE104CardFineGrainedPmInterval, ethernetNTEGE114ProVmHCardTable=ethernetNTEGE114ProVmHCardTable, ethernetNTEOSA5420CardEntry=ethernetNTEOSA5420CardEntry, ethernetNTEGE206FCardOperationalState=ethernetNTEGE206FCardOperationalState, nteXg116ProHCardGroup=nteXg116ProHCardGroup, ge4PortCardGroup=ge4PortCardGroup, ethernet10x1GCardSecondaryState=ethernet10x1GCardSecondaryState, pseudoWireE1T1CardTable=pseudoWireE1T1CardTable, serverCardSecondaryState=serverCardSecondaryState, ethernetNTEGESyncProbeCardRestartAction=ethernetNTEGESyncProbeCardRestartAction, ethernetNTEGE112CardTemperature=ethernetNTEGE112CardTemperature, ethernet1x10GHighPerCardGroup=ethernet1x10GHighPerCardGroup, shelfSecondaryState=shelfSecondaryState, ethernetNTEXG116PROCardSecondaryState=ethernetNTEXG116PROCardSecondaryState, ethernetCPMRCardVoltage=ethernetCPMRCardVoltage, ethernetGE8SCCCardRowStatus=ethernetGE8SCCCardRowStatus, ethernetNTEOSA5401CardTable=ethernetNTEOSA5401CardTable, ethernetNTEGE206FCardVoltage=ethernetNTEGE206FCardVoltage, ethernetNTEGE114HCardSwitchPortAction=ethernetNTEGE114HCardSwitchPortAction, stuCardStorageType=stuCardStorageType, serverCardHostName=serverCardHostName, ethernetNTEGE114ProVmHCardSwitchPortActionPort=ethernetNTEGE114ProVmHCardSwitchPortActionPort, pps16PortCardGroup=pps16PortCardGroup, ethernetNTEGE112CardEntry=ethernetNTEGE112CardEntry, ethernetNTEXG210CardSnmpDyingGaspEnabled=ethernetNTEXG210CardSnmpDyingGaspEnabled, compositeClockCardOperationalState=compositeClockCardOperationalState, csmCardGroup=csmCardGroup, ethernetGE8SCCCardTable=ethernetGE8SCCCardTable, ethernetNTEGE114ProCCardVoltage=ethernetNTEGE114ProCCardVoltage, ethernetNTEGE206CardSnmpDyingGaspEnabled=ethernetNTEGE206CardSnmpDyingGaspEnabled, ethernetNTUCardEntityIndex=ethernetNTUCardEntityIndex, ethernetNTEOSA5421CardEntry=ethernetNTEOSA5421CardEntry, ethernet1x10GCardSnmpDyingGaspEnabled=ethernet1x10GCardSnmpDyingGaspEnabled, ge4SCCCardGroup=ge4SCCCardGroup, ethernetNTEGE112ProCardOperationalState=ethernetNTEGE112ProCardOperationalState, nteGe114ProSHCardGroup=nteGe114ProSHCardGroup, ethernetGE4SCCCardVoltage=ethernetGE4SCCCardVoltage, ethernetNTEGE104CardRestartAction=ethernetNTEGE104CardRestartAction, pseudoWireE3CardEntityIndex=pseudoWireE3CardEntityIndex, ethernetNTEGE114ProVmSHCardSwitchPortAction=ethernetNTEGE114ProVmSHCardSwitchPortAction, ethernetNTEXG116PROHCardSecondaryState=ethernetNTEXG116PROHCardSecondaryState, ethernetNTEXG120PROSHCardFineGrainedPmInterval=ethernetNTEXG120PROSHCardFineGrainedPmInterval, ethernetSWFCardEntityIndex=ethernetSWFCardEntityIndex, ethernetNTEGE114ProHECardTemperature=ethernetNTEGE114ProHECardTemperature, ethernetNTEGE114ProVmCHCardTable=ethernetNTEGE114ProVmCHCardTable, ethernetNTEXG118PROSHCardAdminState=ethernetNTEXG118PROSHCardAdminState, ethernetSWFCardTable=ethernetSWFCardTable, ethernetNTEGE201SyncECardEntityIndex=ethernetNTEGE201SyncECardEntityIndex, f3IrigCardGroup=f3IrigCardGroup, stuCardSecondaryState=stuCardSecondaryState, ethernetGE8ECCCardRestartAction=ethernetGE8ECCCardRestartAction, ethernetNTUCardRowStatus=ethernetNTUCardRowStatus, ethernetNTEGO102ProSCardVoltage=ethernetNTEGO102ProSCardVoltage, ethernetNTEGE206CardVoltage=ethernetNTEGE206CardVoltage, pseudoWireOcnStmCardRestartAction=pseudoWireOcnStmCardRestartAction, ethernetNTEGE114PHCardOperationalState=ethernetNTEGE114PHCardOperationalState, ethernet1x10GHighPerCardTable=ethernet1x10GHighPerCardTable, neRowStatus=neRowStatus, nteOsa5421CardGroup=nteOsa5421CardGroup, ethernetNTESH1PCSCardRestartAction=ethernetNTESH1PCSCardRestartAction, f3UsbHostMuxOperationalMode=f3UsbHostMuxOperationalMode, stuHighPerCardEntityIndex=stuHighPerCardEntityIndex, serverCardVirtualCpuTotal=serverCardVirtualCpuTotal, ethernetNTEGE112CardTable=ethernetNTEGE112CardTable, clk16PortCardAdminState=clk16PortCardAdminState, ethernetNTEGE206VCardSnmpDyingGaspEnabled=ethernetNTEGE206VCardSnmpDyingGaspEnabled, serverCardMemoryTotal=serverCardMemoryTotal, ethernetGE8ECCCardTemperature=ethernetGE8ECCCardTemperature, psuGroup=psuGroup, scuEntry=scuEntry, nemiRestartAction=nemiRestartAction, ethernetCPMRCardOperationalState=ethernetCPMRCardOperationalState, todPps16PortCardTable=todPps16PortCardTable, stiHighPerSecondaryState=stiHighPerSecondaryState, ethernetNTEGE112ProHCardRestartAction=ethernetNTEGE112ProHCardRestartAction, ethernetNTET3204CardFineGrainedPmInterval=ethernetNTET3204CardFineGrainedPmInterval, scuTStorageType=scuTStorageType, ethernetFE36ECardTable=ethernetFE36ECardTable, ethernetNTUCardStorageType=ethernetNTUCardStorageType, stuHighPerCardRestartAction=stuHighPerCardRestartAction, shelfEntry=shelfEntry, ethernetOsa3350MgntCardResyncAction=ethernetOsa3350MgntCardResyncAction, PSNEncapsulationMode=PSNEncapsulationMode, ethernetNTEGE114PHCardEntityIndex=ethernetNTEGE114PHCardEntityIndex, ethernetNTEGO102ProSMCardTemperature=ethernetNTEGO102ProSMCardTemperature, ethernetOverOCSTMCardRowStatus=ethernetOverOCSTMCardRowStatus, ethernetNTEGE101ProCardSwitchPortAction=ethernetNTEGE101ProCardSwitchPortAction, nemiFlashSerialNum=nemiFlashSerialNum, serverCardTemperature=serverCardTemperature, ethernet1x10GCardSecondaryState=ethernet1x10GCardSecondaryState, auxPortCardTemperature=auxPortCardTemperature, ethernetNTEXG120PROCardRestartAction=ethernetNTEXG120PROCardRestartAction, ethernetNTEXG118PROSHCardTemperature=ethernetNTEXG118PROSHCardTemperature, scuTTemperature=scuTTemperature, ethernetNTEGE114HCardSecondaryState=ethernetNTEGE114HCardSecondaryState, ethernetNTEGE112ProHCardEntry=ethernetNTEGE112ProHCardEntry, ethernetGE8SCCCardOperationalState=ethernetGE8SCCCardOperationalState, ethernetNTEGE114ProCardSwitchPortAction=ethernetNTEGE114ProCardSwitchPortAction, ethernetNTEGO102ProSCardOperationalState=ethernetNTEGO102ProSCardOperationalState, ethernetNTEGE114ProSHCardEntry=ethernetNTEGE114ProSHCardEntry, ethernet10x1GCardForceOffLineAction=ethernet10x1GCardForceOffLineAction, nteSh1PcsCardGroup=nteSh1PcsCardGroup, nteGe102ProEFMHCardGroup=nteGe102ProEFMHCardGroup, ethernetNTEGE114PHCardFineGrainedPmInterval=ethernetNTEGE114PHCardFineGrainedPmInterval, ethernetNTUCardRestartAction=ethernetNTUCardRestartAction, pps16PortCardSecondaryState=pps16PortCardSecondaryState, ethernetNTEGE206CardSecondaryState=ethernetNTEGE206CardSecondaryState, f3IrigCardTable=f3IrigCardTable, ethernetGE8ECCCardEntry=ethernetGE8ECCCardEntry, ethernetNTEGE114ProVmSHCardSwitchPortActionPort=ethernetNTEGE114ProVmSHCardSwitchPortActionPort, ethernetNTEGE201CardRestartAction=ethernetNTEGE201CardRestartAction, ethernetNTEOSA5411CardTemperature=ethernetNTEOSA5411CardTemperature, nteXg116ProCardGroup=nteXg116ProCardGroup, ethernetNTEXG120PROCardAdminState=ethernetNTEXG120PROCardAdminState, ge4PortCardTable=ge4PortCardTable, ethernetNTEGE104CardEntry=ethernetNTEGE104CardEntry, NeProvAction=NeProvAction, pseudoWireOcnStmCardFreqSourceType=pseudoWireOcnStmCardFreqSourceType, ethernetNTEGE114SHCardAdminState=ethernetNTEGE114SHCardAdminState, ethernetNTEXG210CardFineGrainedPmInterval=ethernetNTEXG210CardFineGrainedPmInterval, ethernetNTEGE114ProHECardVoltage=ethernetNTEGE114ProHECardVoltage, ethernetNTEGE102ProEFMHCardFAN2State=ethernetNTEGE102ProEFMHCardFAN2State, ethernetNTEGE101CardEntityIndex=ethernetNTEGE101CardEntityIndex, ethernetNTEGO102ProSPCardSwitchPortAction=ethernetNTEGO102ProSPCardSwitchPortAction, ethernetXG1XCCCardOperationalState=ethernetXG1XCCCardOperationalState, ethernetNTEGE112ProVmCardSwitchPortActionPort=ethernetNTEGE112ProVmCardSwitchPortActionPort, ethernetNTEGE114CardSwitchPortAction=ethernetNTEGE114CardSwitchPortAction, ethernetXG1XCCCardAdminState=ethernetXG1XCCCardAdminState, ethernet1x10GHighPerCardOperationalState=ethernet1x10GHighPerCardOperationalState, f3UsbHostPhysicalAddress=f3UsbHostPhysicalAddress, ethernet10x1GHighPerCardEntry=ethernet10x1GHighPerCardEntry, ethernetNTEXG116PROHCardTable=ethernetNTEXG116PROHCardTable, ethernetGE4SCCCardOperationalState=ethernetGE4SCCCardOperationalState, ethernetNTEGE114PHCardSwitchPortActionPort=ethernetNTEGE114PHCardSwitchPortActionPort, ethernet10x1GHighPerCardAdminState=ethernet10x1GHighPerCardAdminState, cmEntityObjectGroup=cmEntityObjectGroup, ethernetNTEGO102ProSPCardVoltage=ethernetNTEGO102ProSPCardVoltage, stiEntityIndex=stiEntityIndex, ethernetNTEGE206VCardVoltage=ethernetNTEGE206VCardVoltage, ethernetNTEXG120PROSHCardRestartAction=ethernetNTEXG120PROSHCardRestartAction, ethernetFE36ECardEntry=ethernetFE36ECardEntry, ethernetNTEGE112CardSnmpDyingGaspEnabled=ethernetNTEGE112CardSnmpDyingGaspEnabled, ethernetGE8ECCCardEntityIndex=ethernetGE8ECCCardEntityIndex, ethernetGE8ECCCardRowStatus=ethernetGE8ECCCardRowStatus, scuVoltage=scuVoltage, ethernetNTET3204CardEntry=ethernetNTET3204CardEntry, amiRestartAction=amiRestartAction, ethernetNTEGE206VCardTable=ethernetNTEGE206VCardTable, ethernetNTECX101Pro30ACardSnmpDyingGaspEnabled=ethernetNTECX101Pro30ACardSnmpDyingGaspEnabled, ethernetNTEGE114ProVmCHCardTemperature=ethernetNTEGE114ProVmCHCardTemperature, f3IrigCardEntry=f3IrigCardEntry, ethernetNTEGE114ProHECardEntry=ethernetNTEGE114ProHECardEntry, nteGe206VCardGroup=nteGe206VCardGroup, clk16PortCardGroup=clk16PortCardGroup, ethernetNTET1804CardTemperature=ethernetNTET1804CardTemperature, ethernetNTEXG210CardVoltage=ethernetNTEXG210CardVoltage, ethernetNTEGE114ProCardVoltage=ethernetNTEGE114ProCardVoltage, ethernetFE36ECardRestartAction=ethernetFE36ECardRestartAction, ethernetNTEGE114ProVmHCardEntityIndex=ethernetNTEGE114ProVmHCardEntityIndex, ethernetOverOCSTMCardSnmpDyingGaspEnabled=ethernetOverOCSTMCardSnmpDyingGaspEnabled, ethernetNTEOSA5411CardEntry=ethernetNTEOSA5411CardEntry, ethernetNTEOSA5420CardSnmpDyingGaspEnabled=ethernetNTEOSA5420CardSnmpDyingGaspEnabled, ethernetOsa3350MgntCardEntry=ethernetOsa3350MgntCardEntry, pseudoWireOcnStmCardForceOffLineAction=pseudoWireOcnStmCardForceOffLineAction, nemiForceOffLineAction=nemiForceOffLineAction, ethernetNTEGE114ProCCardEntry=ethernetNTEGE114ProCCardEntry, ethernetNTEGE114GCardEntityIndex=ethernetNTEGE114GCardEntityIndex, ethernetNTEGE101CardOperationalState=ethernetNTEGE101CardOperationalState, nteGe114GCardGroup=nteGe114GCardGroup, ethernet10x1GCardTable=ethernet10x1GCardTable, ethernetGE8SCryptoConnectorCardRowStatus=ethernetGE8SCryptoConnectorCardRowStatus, nemiVoltage=nemiVoltage, ethernetNTECX101Pro30ACardFineGrainedPmInterval=ethernetNTECX101Pro30ACardFineGrainedPmInterval, ethernetNTEGO102ProSMCardFineGrainedPmInterval=ethernetNTEGO102ProSMCardFineGrainedPmInterval, ethernet10x1GCardAdminState=ethernet10x1GCardAdminState, ethernetOsa3350MgntCardTable=ethernetOsa3350MgntCardTable, stiHighPerRowStatus=stiHighPerRowStatus, scuTRowStatus=scuTRowStatus, ethernetNTEOSA5401CardAdminState=ethernetNTEOSA5401CardAdminState, ge4PortCardTemperature=ge4PortCardTemperature, ShelfAction=ShelfAction, pseudoWireOcnStmCardAdminState=pseudoWireOcnStmCardAdminState, stiHighPerAdminState=stiHighPerAdminState, stiAdminState=stiAdminState, nemiOperationalState=nemiOperationalState, ethernetNTECardTemperature=ethernetNTECardTemperature, ethernetNTEGO102ProSMCardAdminState=ethernetNTEGO102ProSMCardAdminState)
mibBuilder.exportSymbols("CM-ENTITY-MIB", ethernetNTEGE114ProCCardSecondaryState=ethernetNTEGE114ProCCardSecondaryState, f3UsbHostMfgDate=f3UsbHostMfgDate, ethernetNTEGE102ProHCardPSU1State=ethernetNTEGE102ProHCardPSU1State, ethernetNTESH1PCSCardTemperature=ethernetNTESH1PCSCardTemperature, ethernetNTEGE112ProMCardEntry=ethernetNTEGE112ProMCardEntry, pseudoWireE3CardOperationalState=pseudoWireE3CardOperationalState, SwitchPortAction=SwitchPortAction, ethernetSWFCardOperationalState=ethernetSWFCardOperationalState, ethernetNTEGE114ProHECardSecondaryState=ethernetNTEGE114ProHECardSecondaryState, ethernetNTEGESyncProbeCardVoltage=ethernetNTEGESyncProbeCardVoltage, f3IrigCardAdminState=f3IrigCardAdminState, slotCardPhysicalAddress=slotCardPhysicalAddress)
