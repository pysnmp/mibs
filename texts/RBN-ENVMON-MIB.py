#
# PySNMP MIB module RBN-ENVMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ericsson/RBN-ENVMON-MIB
# Produced by pysmi-1.1.12 at Wed May 29 06:45:35 2024
# On host fv-az1776-875 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, Counter64, MibIdentifier, Unsigned32, NotificationType, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, TimeTicks, ObjectIdentity, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "MibIdentifier", "Unsigned32", "NotificationType", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "iso", "Integer32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
rbnEnvMonMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 4))
rbnEnvMonMIB.setRevisions(('2012-10-03 00:00', '2011-01-19 18:00', '2010-11-11 00:00', '2006-01-16 00:00', '2002-06-05 00:00', '2001-07-25 00:00', '2000-04-24 00:00', '1999-03-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnEnvMonMIB.setRevisionsDescriptions(('Removed DISPLAY-HINT from RbnVoltage and RbnFanSpeed.', 'Update CONTACT-INFO & ORGANIZATION. ', 'Add new Table rbnEntityTempSensorTable. This will display \n                the TempSensor Details for all the entities. ', 'Add textual convention RbnFanSpeed.  Add new OIDs:\n\t\t\trbnFanUnitID\n\t\t\trbnFanUnitDescr\n\t\t\trbnFanSpeedCurrent\n\t\t\trbnEnvMonFanSpeedObjectGroup\n\t\t\trbnEnvMonMIBComplianceV4\n\t\t', 'Update/correct CONTACT-INFO. Fix syntax errors on IMPORTS list,\n\t\tranges on Integer32, and size for DisplayString types.\n\t\tRestore the incorrectly deprecated OIDs to current, since they\n\t\tare still supported.', 'Added new OIDs:\n\t\t\trbnFanStatus\n\t\t\trbnPowerStatus\n\t\t\trbnFanStatusChange\n\t\t\trbnPowerStatusChange\n\t\t\trbnEnvMonMIBObjectGroupV2\n\t\t\trbnEnvMonMIBNotificationGroupV2\n\t\t\trbnEnvMonMIBComplianceV3\n\t\t Deprecated the OIDs:\n\t\t\trbnFanFail\n\t\t\trbnPowerFail\n\t\t\trbnFanFailChange\n\t\t\trbnPowerFailChange\n\t\t\trbnEnvMonMIBObjectGroup\n\t\t\trbnEnvMonMIBNotificationGroup\n\t\t\trbnEnvMonMIBComplianceV2\n\t\t', 'Added voltage and temperature sensor tables.', 'Initial version.',))
if mibBuilder.loadTexts: rbnEnvMonMIB.setLastUpdated('201210030000Z')
if mibBuilder.loadTexts: rbnEnvMonMIB.setOrganization('Ericsson AB.')
if mibBuilder.loadTexts: rbnEnvMonMIB.setContactInfo('\tEricsson AB.\n\n\t\tPostal:\t100 Headquarters Dr.\n\t\t\tSan Jose, CA  95134\n\t\t\tUSA\n\n\t\t Phone:\t+1 408 750 5000\n\t\t   Fax: +1 408 750 5599\n\n\t\t')
if mibBuilder.loadTexts: rbnEnvMonMIB.setDescription('The MIB used to genericially manage Environmental\n\t\tMonitor functionality on network devices.')
rbnEnvMonMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 4, 0))
rbnEnvMonMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1))
rbnEnvMonMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2))
class RbnVoltage(TextualConvention, Unsigned32):
    description = 'Represents a voltage value. The value is millivolts.\n\t\t For example, a voltage of 5.5V would be represented\n\t\t by the value 5500.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 50000)

class RbnTemperature(TextualConvention, Unsigned32):
    description = 'Represents a temperature, in degrees Celsius. In the\n\t\t unlikely event that the temperature to be reported is\n\t\t less than 0 degrees Celsius, a value of 0 will be\n\t\t used. Likewise, if the temperature is greater than\n\t\t 100, a value of 100 will be used.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

class RbnFanSpeed(TextualConvention, Unsigned32):
    description = 'Represents a fan speed value in units of Revolutions Per\n\t\tMinute(RPM).'
    status = 'current'

rbnFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 1), )
if mibBuilder.loadTexts: rbnFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: rbnFanStatusTable.setDescription('This table contains one row per fan test point.\n\t\tNote that there is not necessarily a one-to-one\n\t\trelationship between fan test points and fan\n\t\tassemblies; a single test point may be used to\n\t\tmonitor the status of multiple fans.')
rbnFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 1, 1), ).setIndexNames((0, "RBN-ENVMON-MIB", "rbnFanIndex"))
if mibBuilder.loadTexts: rbnFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: rbnFanStatusEntry.setDescription('Information about a particular fan test point')
rbnFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rbnFanIndex.setStatus('current')
if mibBuilder.loadTexts: rbnFanIndex.setDescription('The index of a fan test point.')
rbnFanDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFanDescr.setStatus('current')
if mibBuilder.loadTexts: rbnFanDescr.setDescription('The description of a fan test point.  If an instance of\n\t\tthis object is associated with a single fan assembly,\n\t\tthen the value of this object should be the same as the\n\t\tname by which the assembly is normally referenced.  If\n\t\tan instance is associated with multiple fan assemblies,\n\t\tthen the value of this object should contain the names\n\t\tof all of the fan assemblies being monitored.')
rbnFanFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFanFail.setStatus('deprecated')
if mibBuilder.loadTexts: rbnFanFail.setDescription('The status of a fan test point.  If an instance of\n\t\tthis object has the value true, then a fan monitored\n\t\tby the test point has failed.  If an instance of\n\t\tthis object has the value false, then the fan (or fans)\n\t\tmonitored by the test point are operational.')
rbnFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("failed", 2), ("absent", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFanStatus.setStatus('current')
if mibBuilder.loadTexts: rbnFanStatus.setDescription('The status of a fan test point.  If an instance of\n\t\tthis object has the value normal, then the fan (or \n\t\tfans) monitored by the test point is operational.  If\n\t\tan instance of this object has the value failed, then \n\t\tthe fan (or fans) monitored by the test point has \n\t\tfailed. If an instance of this object has the value \n\t\tabsent, then the fan (or fans) monitored by this test \n\t\tpoint is not present. If an instance of this object has\n\t\tthe value unknown, then the test point is unable to\n\t\tmonitor the fan (or fans).')
rbnPowerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 2), )
if mibBuilder.loadTexts: rbnPowerStatusTable.setStatus('current')
if mibBuilder.loadTexts: rbnPowerStatusTable.setDescription('This table contains one row per power test point.\n\t\tNote that there is not necessarily a one-to-one\n\t\trelationship between power test points and power\n\t\tsupply assemblies; a single test point may be used\n\t\tto monitor the status of multiple power supplies.')
rbnPowerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 2, 1), ).setIndexNames((0, "RBN-ENVMON-MIB", "rbnPowerIndex"))
if mibBuilder.loadTexts: rbnPowerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: rbnPowerStatusEntry.setDescription('Information about a particular power test point')
rbnPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rbnPowerIndex.setStatus('current')
if mibBuilder.loadTexts: rbnPowerIndex.setDescription('The index of a power test point.')
rbnPowerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPowerDescr.setStatus('current')
if mibBuilder.loadTexts: rbnPowerDescr.setDescription('The description of a power supply test point.  If an\n\t\tinstance of this object is associated with a single\n\t\tpower supply assembly, then the value of this object\n\t\tshould be the same as the name by which the assembly\n\t\tis normally referenced.  If an instance is associated\n\t\twith multiple power supply assemblies, then the value\n\t\tof this object should contain the names of all of the\n\t\tpower supply assemblies being monitored.')
rbnPowerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPowerFail.setStatus('deprecated')
if mibBuilder.loadTexts: rbnPowerFail.setDescription('The status of a power test point.  If an instance of\n\t\tthis object has the value true, then a power supply\n\t\tmonitored by the test point has failed.  If an instance\n\t\tof this object has the value false, then the power\n\t\tsupply (or supplies) monitored by the test point are\n\t\toperational.')
rbnPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("failed", 2), ("absent", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPowerStatus.setStatus('current')
if mibBuilder.loadTexts: rbnPowerStatus.setDescription('The status of a power test point.  If an instance of\n\t\tthis object has the value normal, then the power \n\t\tsupply (or supplies) monitored by the test point is \n\t\toperational.  If an instance of this object has the \n\t\tvalue failed, then the power supply (or supplies)\n\t\tmonitored by the test point has failed. If an instance\n\t\tof this object has the value absent, then the power\n\t\tsupply (or supplies) monitored by this test point is \n\t\tnot present. If an instance of this object has\n\t\tthe value unknown, then the test point is unable to\n\t\tmonitor the power supply (or supplies).')
rbnVoltageSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 3), )
if mibBuilder.loadTexts: rbnVoltageSensorTable.setStatus('current')
if mibBuilder.loadTexts: rbnVoltageSensorTable.setDescription('This table contains one row per voltage test point.\n\t\t Each physical entity (e.g. cards) in the system may\n\t\t contain zero or more voltage test points.')
rbnVoltageSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "RBN-ENVMON-MIB", "rbnVoltageIndex"))
if mibBuilder.loadTexts: rbnVoltageSensorEntry.setStatus('current')
if mibBuilder.loadTexts: rbnVoltageSensorEntry.setDescription('Information about a particular voltage test point.')
rbnVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rbnVoltageIndex.setStatus('current')
if mibBuilder.loadTexts: rbnVoltageIndex.setDescription('An arbitrary value which uniquely identifies a\n\t\t voltage test point on a particular physical entity.\n\t\t Index values for different test points are not\n\t\t necessarily contiguous.')
rbnVoltageDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnVoltageDescr.setStatus('current')
if mibBuilder.loadTexts: rbnVoltageDescr.setDescription('The description of a voltage test point. Typically\n\t\t an instance of this object will hold a user-friendly\n\t\t description of the physical entity and the level of\n\t\t voltage being monitored by this test point.')
rbnVoltageDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 3, 1, 3), RbnVoltage()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnVoltageDesired.setStatus('current')
if mibBuilder.loadTexts: rbnVoltageDesired.setDescription('The desired voltage level for this test point. If\n\t\t the monitored voltage level (rbnVoltageCurrent) is\n\t\t equal to this value, then the system is performing\n\t\t as designed.')
rbnVoltageCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 3, 1, 4), RbnVoltage()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnVoltageCurrent.setStatus('current')
if mibBuilder.loadTexts: rbnVoltageCurrent.setDescription('The current voltage level at this test point.')
rbnCpuTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 4), )
if mibBuilder.loadTexts: rbnCpuTempSensorTable.setStatus('deprecated')
if mibBuilder.loadTexts: rbnCpuTempSensorTable.setDescription('This table contains one row per CPU temperature\n\t\t sensor. Each physical entity in the system may have\n\t\t zero or more CPUs. Each of those CPUs that has a\n\t\t temperature sensor will show up here.')
rbnCpuTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "RBN-ENVMON-MIB", "rbnCpuTempIndex"))
if mibBuilder.loadTexts: rbnCpuTempSensorEntry.setStatus('deprecated')
if mibBuilder.loadTexts: rbnCpuTempSensorEntry.setDescription('Information about a particular CPU temperature test\n\t\t point.')
rbnCpuTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rbnCpuTempIndex.setStatus('deprecated')
if mibBuilder.loadTexts: rbnCpuTempIndex.setDescription('An arbitrary value which uniquely identifies a CPU on\n\t\t a particular physical entity.  Index values for\n\t\t different CPUs are not necessarily contiguous.')
rbnCpuTempDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCpuTempDescr.setStatus('deprecated')
if mibBuilder.loadTexts: rbnCpuTempDescr.setDescription('The description of a CPU temperature test\n\t\t point. Typically an instance of this object will hold\n\t\t a user-friendly description of the physical entity\n\t\t and a description of the CPU being monitored by this\n\t\t test point.')
rbnCpuTempCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 4, 1, 3), RbnTemperature()).setUnits('degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCpuTempCurrent.setStatus('deprecated')
if mibBuilder.loadTexts: rbnCpuTempCurrent.setDescription('The current temperature of this CPU.')
rbnFanSpeedTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 5), )
if mibBuilder.loadTexts: rbnFanSpeedTable.setStatus('current')
if mibBuilder.loadTexts: rbnFanSpeedTable.setDescription('This table contains one row per fan unit within a fan\n\t\ttest point.')
rbnFanSpeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 5, 1), ).setIndexNames((0, "RBN-ENVMON-MIB", "rbnFanIndex"), (0, "RBN-ENVMON-MIB", "rbnFanUnitID"))
if mibBuilder.loadTexts: rbnFanSpeedEntry.setStatus('current')
if mibBuilder.loadTexts: rbnFanSpeedEntry.setDescription('Information about a particular fan unit within a fan\n                test point.')
rbnFanUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rbnFanUnitID.setStatus('current')
if mibBuilder.loadTexts: rbnFanUnitID.setDescription('This is the fan identification number that describes the\n\t\tspecific location of the fan unit within a fan test point.')
rbnFanUnitDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFanUnitDescr.setStatus('current')
if mibBuilder.loadTexts: rbnFanUnitDescr.setDescription('The description of the fan unit within a fan test point.')
rbnFanSpeedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 5, 1, 3), RbnFanSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFanSpeedCurrent.setStatus('current')
if mibBuilder.loadTexts: rbnFanSpeedCurrent.setDescription('The current speed of this fan unit.')
rbnEntityTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 6), )
if mibBuilder.loadTexts: rbnEntityTempSensorTable.setStatus('current')
if mibBuilder.loadTexts: rbnEntityTempSensorTable.setDescription('This table contains one row per temperature\n                 sensor on the physical entity.')
rbnEntityTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "RBN-ENVMON-MIB", "rbnEntityTempIndex"))
if mibBuilder.loadTexts: rbnEntityTempSensorEntry.setStatus('current')
if mibBuilder.loadTexts: rbnEntityTempSensorEntry.setDescription('Information about a particular temperature test\n                 point.')
rbnEntityTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rbnEntityTempIndex.setStatus('current')
if mibBuilder.loadTexts: rbnEntityTempIndex.setDescription('An arbitrary value which uniquely identifies a\n                 particular physical entity.  Index values are \n                 not necessarily contiguous.')
rbnEntityTempDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnEntityTempDescr.setStatus('current')
if mibBuilder.loadTexts: rbnEntityTempDescr.setDescription('The description of a temperature test\n                 point. Typically an instance of this object will hold\n                 a user-friendly description of the physical entity\n                 being monitored by this test point.')
rbnEntityTempCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 4, 1, 6, 1, 3), RbnTemperature()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnEntityTempCurrent.setStatus('current')
if mibBuilder.loadTexts: rbnEntityTempCurrent.setDescription('The current temperature of this entity in degrees Celsius.')
rbnFanFailChange = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 4, 0, 1)).setObjects(("RBN-ENVMON-MIB", "rbnFanFail"))
if mibBuilder.loadTexts: rbnFanFailChange.setStatus('deprecated')
if mibBuilder.loadTexts: rbnFanFailChange.setDescription('A rbnFanFailChange notification signifies\n\t\tthat the value of an instance of rbnFanFail\n\t\thas changed.')
rbnPowerFailChange = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 4, 0, 2)).setObjects(("RBN-ENVMON-MIB", "rbnPowerFail"))
if mibBuilder.loadTexts: rbnPowerFailChange.setStatus('deprecated')
if mibBuilder.loadTexts: rbnPowerFailChange.setDescription('A rbnPowerFailChange notification signifies\n\t\tthat the value of an instance of rbnPowerFail\n\t\thas changed')
rbnFanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 4, 0, 3)).setObjects(("RBN-ENVMON-MIB", "rbnFanStatus"))
if mibBuilder.loadTexts: rbnFanStatusChange.setStatus('current')
if mibBuilder.loadTexts: rbnFanStatusChange.setDescription('A rbnFanStatusChange notification signifies\n\t\tthat the value of an instance of rbnFanStatus\n\t\thas changed.')
rbnPowerStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 4, 0, 4)).setObjects(("RBN-ENVMON-MIB", "rbnPowerStatus"))
if mibBuilder.loadTexts: rbnPowerStatusChange.setStatus('current')
if mibBuilder.loadTexts: rbnPowerStatusChange.setDescription('A rbnPowerStatusChange notification signifies\n\t\tthat the value of an instance of rbnPowerStatus\n\t\thas changed')
rbnEnvMonMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2, 1))
rbnEnvMonMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2, 2))
rbnEnvMonMIBObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2, 1, 1)).setObjects(("RBN-ENVMON-MIB", "rbnFanDescr"), ("RBN-ENVMON-MIB", "rbnFanFail"), ("RBN-ENVMON-MIB", "rbnPowerDescr"), ("RBN-ENVMON-MIB", "rbnPowerFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnEnvMonMIBObjectGroup = rbnEnvMonMIBObjectGroup.setStatus('deprecated')
if mibBuilder.loadTexts: rbnEnvMonMIBObjectGroup.setDescription('A collection of objects providing\n\t\tenvironmental monitor information.')
rbnEnvMonMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2, 1, 2)).setObjects(("RBN-ENVMON-MIB", "rbnFanFailChange"), ("RBN-ENVMON-MIB", "rbnPowerFailChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnEnvMonMIBNotificationGroup = rbnEnvMonMIBNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: rbnEnvMonMIBNotificationGroup.setDescription('A collection of notifications providing\n\t\tfan and power environmental monitor information.')
rbnEnvMonVoltageObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2, 1, 3)).setObjects(("RBN-ENVMON-MIB", "rbnVoltageDescr"), ("RBN-ENVMON-MIB", "rbnVoltageDesired"), ("RBN-ENVMON-MIB", "rbnVoltageCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnEnvMonVoltageObjectGroup = rbnEnvMonVoltageObjectGroup.setStatus('current')
if mibBuilder.loadTexts: rbnEnvMonVoltageObjectGroup.setDescription('A collection of objects providing voltage\n\t\tenvironmental monitor information.')
rbnEnvMonTempObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2, 1, 4)).setObjects(("RBN-ENVMON-MIB", "rbnCpuTempDescr"), ("RBN-ENVMON-MIB", "rbnCpuTempCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnEnvMonTempObjectGroup = rbnEnvMonTempObjectGroup.setStatus('deprecated')
if mibBuilder.loadTexts: rbnEnvMonTempObjectGroup.setDescription('A collection of objects providing temperature\n\t\tenvironmental monitor information.')
rbnEnvMonMIBObjectGroupV2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2, 1, 5)).setObjects(("RBN-ENVMON-MIB", "rbnFanDescr"), ("RBN-ENVMON-MIB", "rbnFanStatus"), ("RBN-ENVMON-MIB", "rbnPowerDescr"), ("RBN-ENVMON-MIB", "rbnPowerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnEnvMonMIBObjectGroupV2 = rbnEnvMonMIBObjectGroupV2.setStatus('current')
if mibBuilder.loadTexts: rbnEnvMonMIBObjectGroupV2.setDescription('A collection of objects providing\n\t\tenvironmental monitor information.')
rbnEnvMonMIBNotificationGroupV2 = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2, 1, 6)).setObjects(("RBN-ENVMON-MIB", "rbnFanStatusChange"), ("RBN-ENVMON-MIB", "rbnPowerStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnEnvMonMIBNotificationGroupV2 = rbnEnvMonMIBNotificationGroupV2.setStatus('current')
if mibBuilder.loadTexts: rbnEnvMonMIBNotificationGroupV2.setDescription('A collection of notifications providing\n\t\tfan and power environmental monitor information.')
rbnEnvMonFanSpeedObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2, 1, 7)).setObjects(("RBN-ENVMON-MIB", "rbnFanUnitDescr"), ("RBN-ENVMON-MIB", "rbnFanSpeedCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnEnvMonFanSpeedObjectGroup = rbnEnvMonFanSpeedObjectGroup.setStatus('current')
if mibBuilder.loadTexts: rbnEnvMonFanSpeedObjectGroup.setDescription('A collection of objects providing fan speed\n\t\tenvironmental monitor information.')
rbnEnvMonEntityObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2, 1, 8)).setObjects(("RBN-ENVMON-MIB", "rbnEntityTempDescr"), ("RBN-ENVMON-MIB", "rbnEntityTempCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnEnvMonEntityObjectGroup = rbnEnvMonEntityObjectGroup.setStatus('current')
if mibBuilder.loadTexts: rbnEnvMonEntityObjectGroup.setDescription('A collection of objects providing fan speed\n                environmental monitor information.')
rbnEnvMonMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2, 2, 1)).setObjects(("RBN-ENVMON-MIB", "rbnEnvMonMIBObjectGroup"), ("RBN-ENVMON-MIB", "rbnEnvMonMIBNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnEnvMonMIBCompliance = rbnEnvMonMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: rbnEnvMonMIBCompliance.setDescription('The compliance statement for the EnvMon MIB')
rbnEnvMonMIBComplianceV2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2, 2, 2)).setObjects(("RBN-ENVMON-MIB", "rbnEnvMonMIBObjectGroup"), ("RBN-ENVMON-MIB", "rbnEnvMonMIBNotificationGroup"), ("RBN-ENVMON-MIB", "rbnEnvMonVoltageObjectGroup"), ("RBN-ENVMON-MIB", "rbnEnvMonTempObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnEnvMonMIBComplianceV2 = rbnEnvMonMIBComplianceV2.setStatus('deprecated')
if mibBuilder.loadTexts: rbnEnvMonMIBComplianceV2.setDescription('The compliance statement for the EnvMon MIB')
rbnEnvMonMIBComplianceV3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2, 2, 3)).setObjects(("RBN-ENVMON-MIB", "rbnEnvMonMIBObjectGroupV2"), ("RBN-ENVMON-MIB", "rbnEnvMonMIBNotificationGroupV2"), ("RBN-ENVMON-MIB", "rbnEnvMonVoltageObjectGroup"), ("RBN-ENVMON-MIB", "rbnEnvMonTempObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnEnvMonMIBComplianceV3 = rbnEnvMonMIBComplianceV3.setStatus('deprecated')
if mibBuilder.loadTexts: rbnEnvMonMIBComplianceV3.setDescription('The compliance statement for the EnvMon MIB')
rbnEnvMonMIBComplianceV4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2, 2, 4)).setObjects(("RBN-ENVMON-MIB", "rbnEnvMonMIBObjectGroupV2"), ("RBN-ENVMON-MIB", "rbnEnvMonMIBNotificationGroupV2"), ("RBN-ENVMON-MIB", "rbnEnvMonVoltageObjectGroup"), ("RBN-ENVMON-MIB", "rbnEnvMonTempObjectGroup"), ("RBN-ENVMON-MIB", "rbnEnvMonFanSpeedObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnEnvMonMIBComplianceV4 = rbnEnvMonMIBComplianceV4.setStatus('deprecated')
if mibBuilder.loadTexts: rbnEnvMonMIBComplianceV4.setDescription('The compliance statement for the EnvMon MIB')
rbnEnvMonMIBComplianceV5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 4, 2, 2, 5)).setObjects(("RBN-ENVMON-MIB", "rbnEnvMonMIBObjectGroupV2"), ("RBN-ENVMON-MIB", "rbnEnvMonMIBNotificationGroupV2"), ("RBN-ENVMON-MIB", "rbnEnvMonVoltageObjectGroup"), ("RBN-ENVMON-MIB", "rbnEnvMonFanSpeedObjectGroup"), ("RBN-ENVMON-MIB", "rbnEnvMonEntityObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnEnvMonMIBComplianceV5 = rbnEnvMonMIBComplianceV5.setStatus('current')
if mibBuilder.loadTexts: rbnEnvMonMIBComplianceV5.setDescription('The compliance statement for the EnvMon MIB')
mibBuilder.exportSymbols("RBN-ENVMON-MIB", rbnPowerIndex=rbnPowerIndex, rbnEnvMonMIBNotificationGroupV2=rbnEnvMonMIBNotificationGroupV2, rbnEnvMonMIBNotificationGroup=rbnEnvMonMIBNotificationGroup, rbnVoltageIndex=rbnVoltageIndex, rbnPowerStatus=rbnPowerStatus, rbnFanStatusEntry=rbnFanStatusEntry, rbnVoltageCurrent=rbnVoltageCurrent, rbnEntityTempSensorTable=rbnEntityTempSensorTable, rbnVoltageDescr=rbnVoltageDescr, rbnCpuTempDescr=rbnCpuTempDescr, rbnEntityTempDescr=rbnEntityTempDescr, rbnEnvMonVoltageObjectGroup=rbnEnvMonVoltageObjectGroup, rbnEnvMonMIBCompliances=rbnEnvMonMIBCompliances, rbnFanFail=rbnFanFail, rbnEnvMonMIBComplianceV2=rbnEnvMonMIBComplianceV2, rbnEnvMonTempObjectGroup=rbnEnvMonTempObjectGroup, rbnEnvMonMIBConformance=rbnEnvMonMIBConformance, rbnEnvMonMIBComplianceV5=rbnEnvMonMIBComplianceV5, rbnPowerFail=rbnPowerFail, rbnEnvMonMIBComplianceV4=rbnEnvMonMIBComplianceV4, RbnFanSpeed=RbnFanSpeed, rbnCpuTempCurrent=rbnCpuTempCurrent, rbnPowerStatusTable=rbnPowerStatusTable, rbnVoltageDesired=rbnVoltageDesired, rbnFanSpeedEntry=rbnFanSpeedEntry, rbnEntityTempSensorEntry=rbnEntityTempSensorEntry, rbnEntityTempIndex=rbnEntityTempIndex, rbnFanFailChange=rbnFanFailChange, rbnPowerStatusEntry=rbnPowerStatusEntry, rbnFanIndex=rbnFanIndex, rbnEnvMonMIBComplianceV3=rbnEnvMonMIBComplianceV3, rbnVoltageSensorTable=rbnVoltageSensorTable, rbnEnvMonMIBCompliance=rbnEnvMonMIBCompliance, rbnPowerFailChange=rbnPowerFailChange, RbnTemperature=RbnTemperature, rbnFanUnitDescr=rbnFanUnitDescr, rbnFanSpeedCurrent=rbnFanSpeedCurrent, rbnCpuTempIndex=rbnCpuTempIndex, rbnEnvMonMIBNotifications=rbnEnvMonMIBNotifications, rbnFanStatusTable=rbnFanStatusTable, rbnFanDescr=rbnFanDescr, rbnEnvMonMIBObjectGroup=rbnEnvMonMIBObjectGroup, rbnFanStatusChange=rbnFanStatusChange, rbnEntityTempCurrent=rbnEntityTempCurrent, rbnCpuTempSensorTable=rbnCpuTempSensorTable, rbnEnvMonMIBObjects=rbnEnvMonMIBObjects, rbnFanUnitID=rbnFanUnitID, rbnEnvMonMIBGroups=rbnEnvMonMIBGroups, rbnVoltageSensorEntry=rbnVoltageSensorEntry, rbnCpuTempSensorEntry=rbnCpuTempSensorEntry, PYSNMP_MODULE_ID=rbnEnvMonMIB, rbnFanSpeedTable=rbnFanSpeedTable, rbnPowerStatusChange=rbnPowerStatusChange, rbnEnvMonMIB=rbnEnvMonMIB, rbnEnvMonMIBObjectGroupV2=rbnEnvMonMIBObjectGroupV2, rbnEnvMonEntityObjectGroup=rbnEnvMonEntityObjectGroup, rbnPowerDescr=rbnPowerDescr, rbnFanStatus=rbnFanStatus, RbnVoltage=RbnVoltage, rbnEnvMonFanSpeedObjectGroup=rbnEnvMonFanSpeedObjectGroup)
