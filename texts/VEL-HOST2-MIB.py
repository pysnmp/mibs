#
# PySNMP MIB module VEL-HOST2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/vigintos/VEL-HOST2-MIB
# Produced by pysmi-1.1.12 at Wed Dec  4 18:00:17 2024
# On host fv-az2036-124 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, TimeTicks, Counter64, IpAddress, NotificationType, NotificationType, Gauge32, Bits, ModuleIdentity, iso, Unsigned32, MibIdentifier, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "TimeTicks", "Counter64", "IpAddress", "NotificationType", "NotificationType", "Gauge32", "Bits", "ModuleIdentity", "iso", "Unsigned32", "MibIdentifier", "Counter32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
vel, = mibBuilder.importSymbols("VEL-MIB", "vel")
host2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 27993, 5))
host2.setRevisions(('2013-03-07 08:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: host2.setRevisionsDescriptions(('Host Controller 2 MIB File.',))
if mibBuilder.loadTexts: host2.setLastUpdated('201508121000Z')
if mibBuilder.loadTexts: host2.setOrganization('Vigintos Elektronika')
if mibBuilder.loadTexts: host2.setContactInfo('Contact:\n\n                \tWeb: http://www.vigintos.com\n                \tEmail: ve@vigintos.com\n    \n                \tAddress: Ozo 4, Vilnius, LT-08200, Lithuania\n                \tTel:\t+37052477465\n                \tFax:\t+37052477466')
if mibBuilder.loadTexts: host2.setDescription('This is the MIB file of Host Controller 2.')
host2Name = MibScalar((1, 3, 6, 1, 4, 1, 27993, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2Name.setStatus('current')
if mibBuilder.loadTexts: host2Name.setDescription('Host Controller name.')
host2Version = MibScalar((1, 3, 6, 1, 4, 1, 27993, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2Version.setStatus('current')
if mibBuilder.loadTexts: host2Version.setDescription('Host Controller version')
host2LoaderVersion = MibScalar((1, 3, 6, 1, 4, 1, 27993, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2LoaderVersion.setStatus('current')
if mibBuilder.loadTexts: host2LoaderVersion.setDescription('Host Controller loader version')
host2CmdTable = MibTable((1, 3, 6, 1, 4, 1, 27993, 5, 4), )
if mibBuilder.loadTexts: host2CmdTable.setStatus('current')
if mibBuilder.loadTexts: host2CmdTable.setDescription('A list of Host Controller command entries.')
host2CmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 27993, 5, 4, 1), ).setIndexNames((0, "VEL-HOST2-MIB", "host2CmdIndex"))
if mibBuilder.loadTexts: host2CmdEntry.setStatus('current')
if mibBuilder.loadTexts: host2CmdEntry.setDescription('An entry of Host Controller commands.')
host2CmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2CmdIndex.setStatus('current')
if mibBuilder.loadTexts: host2CmdIndex.setDescription('An id for each command.')
host2CmdName = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2CmdName.setStatus('current')
if mibBuilder.loadTexts: host2CmdName.setDescription('The name of a command.')
host2CmdExecute = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: host2CmdExecute.setStatus('current')
if mibBuilder.loadTexts: host2CmdExecute.setDescription('Instructions to execute the command of host.\n\t\t\t\t\t\tIf value no(0) is sent, the command will not be executed.\n\t\t\t\t\t\tIf value yes(1) is sent, the command will be executed.')
host2HistoryTable = MibTable((1, 3, 6, 1, 4, 1, 27993, 5, 5), )
if mibBuilder.loadTexts: host2HistoryTable.setStatus('current')
if mibBuilder.loadTexts: host2HistoryTable.setDescription('A list of Host Controller history entries.')
host2HistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 27993, 5, 5, 1), ).setIndexNames((0, "VEL-HOST2-MIB", "host2HisIndex"))
if mibBuilder.loadTexts: host2HistoryEntry.setStatus('current')
if mibBuilder.loadTexts: host2HistoryEntry.setDescription('An entry of Host Controller history.')
host2HisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1008))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2HisIndex.setStatus('current')
if mibBuilder.loadTexts: host2HisIndex.setDescription('Unique index for each event.')
host2HisRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2HisRecord.setStatus('current')
if mibBuilder.loadTexts: host2HisRecord.setDescription('The text description of an event.')
host2DevAttrTable = MibTable((1, 3, 6, 1, 4, 1, 27993, 5, 6), )
if mibBuilder.loadTexts: host2DevAttrTable.setStatus('current')
if mibBuilder.loadTexts: host2DevAttrTable.setDescription('A list of device attributes entries.')
host2DevAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 27993, 5, 6, 1), ).setIndexNames((0, "VEL-HOST2-MIB", "host2DevIndex"))
if mibBuilder.loadTexts: host2DevAttrEntry.setStatus('current')
if mibBuilder.loadTexts: host2DevAttrEntry.setDescription('An entry of device attributes.')
host2DevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevIndex.setStatus('current')
if mibBuilder.loadTexts: host2DevIndex.setDescription('Unique ID for each device.')
host2DevLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevLocalAddr.setStatus('current')
if mibBuilder.loadTexts: host2DevLocalAddr.setDescription('Local address for each device.')
host2DevTypeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevTypeNumber.setStatus('current')
if mibBuilder.loadTexts: host2DevTypeNumber.setDescription('Number of type for each device.')
host2DevLanState = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnected", 0), ("connected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevLanState.setStatus('current')
if mibBuilder.loadTexts: host2DevLanState.setDescription('Network connection state for each device.')
host2DevTxtTable = MibTable((1, 3, 6, 1, 4, 1, 27993, 5, 7), )
if mibBuilder.loadTexts: host2DevTxtTable.setStatus('current')
if mibBuilder.loadTexts: host2DevTxtTable.setDescription('A list of textual data that are read from the devices.\n\t\t\t\tIf device is disconnected, there is no entry for this device in the table.')
host2DevTxtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 27993, 5, 7, 1), ).setIndexNames((0, "VEL-HOST2-MIB", "host2DevIndex"), (0, "VEL-HOST2-MIB", "host2DevTxtIndex"))
if mibBuilder.loadTexts: host2DevTxtEntry.setStatus('current')
if mibBuilder.loadTexts: host2DevTxtEntry.setDescription('An entry of textual data of devices.')
host2DevTxtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevTxtIndex.setStatus('current')
if mibBuilder.loadTexts: host2DevTxtIndex.setDescription('Unique ID for each textual data of device.')
host2DevTxtName = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevTxtName.setStatus('current')
if mibBuilder.loadTexts: host2DevTxtName.setDescription('The description of textual data of device.')
host2DevTxtValue = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevTxtValue.setStatus('current')
if mibBuilder.loadTexts: host2DevTxtValue.setDescription('The value of textual data of device.')
host2DevEvtTable = MibTable((1, 3, 6, 1, 4, 1, 27993, 5, 8), )
if mibBuilder.loadTexts: host2DevEvtTable.setStatus('current')
if mibBuilder.loadTexts: host2DevEvtTable.setDescription('A list of events of devices entries.\n\t\t\t\tIf device is disconnected, there is no entry for this device in the table.')
host2DevEvtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 27993, 5, 8, 1), ).setIndexNames((0, "VEL-HOST2-MIB", "host2DevIndex"), (0, "VEL-HOST2-MIB", "host2DevEvtIndex"))
if mibBuilder.loadTexts: host2DevEvtEntry.setStatus('current')
if mibBuilder.loadTexts: host2DevEvtEntry.setDescription('An entry of events of devices.')
host2DevEvtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevEvtIndex.setStatus('current')
if mibBuilder.loadTexts: host2DevEvtIndex.setDescription('Id for each event.')
host2DevEvtName = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevEvtName.setStatus('current')
if mibBuilder.loadTexts: host2DevEvtName.setDescription('The description of a event.')
host2DevEvtType = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notice", 0), ("warning", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevEvtType.setStatus('current')
if mibBuilder.loadTexts: host2DevEvtType.setDescription('The type of a event.')
host2DevEvtState = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevEvtState.setStatus('current')
if mibBuilder.loadTexts: host2DevEvtState.setDescription('The state of a event.')
host2DevParTable = MibTable((1, 3, 6, 1, 4, 1, 27993, 5, 9), )
if mibBuilder.loadTexts: host2DevParTable.setStatus('current')
if mibBuilder.loadTexts: host2DevParTable.setDescription('A list of parameters of devices entries.\n\t\t\t\tIf device is disconnected, there is no entry for this device in the table.')
host2DevParEntry = MibTableRow((1, 3, 6, 1, 4, 1, 27993, 5, 9, 1), ).setIndexNames((0, "VEL-HOST2-MIB", "host2DevIndex"), (0, "VEL-HOST2-MIB", "host2DevParIndex"))
if mibBuilder.loadTexts: host2DevParEntry.setStatus('current')
if mibBuilder.loadTexts: host2DevParEntry.setDescription('An entry of parameters of devices.')
host2DevParIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevParIndex.setStatus('current')
if mibBuilder.loadTexts: host2DevParIndex.setDescription('Unique ID for each parameter.')
host2DevParName = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevParName.setStatus('current')
if mibBuilder.loadTexts: host2DevParName.setDescription('The name of a parameter.')
host2DevParValue = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevParValue.setStatus('current')
if mibBuilder.loadTexts: host2DevParValue.setDescription('The value of a parameter.')
host2DevParUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevParUnit.setStatus('current')
if mibBuilder.loadTexts: host2DevParUnit.setDescription('The measurement unit of a parameter.')
host2DevParStateType = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notice", 0), ("warning", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevParStateType.setStatus('current')
if mibBuilder.loadTexts: host2DevParStateType.setDescription('The type of state of a parameter.')
host2DevParState = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noAlarm", 0), ("lessThanMin", 1), ("greatherThanMax", 2), ("blocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevParState.setStatus('current')
if mibBuilder.loadTexts: host2DevParState.setDescription('The state of a parameter.')
host2DevQntTable = MibTable((1, 3, 6, 1, 4, 1, 27993, 5, 10), )
if mibBuilder.loadTexts: host2DevQntTable.setStatus('current')
if mibBuilder.loadTexts: host2DevQntTable.setDescription('A list of quantities of devices entries.\n\t\t\t\tIf device is disconnected, there is no entry for this device in the table.')
host2DevQntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 27993, 5, 10, 1), ).setIndexNames((0, "VEL-HOST2-MIB", "host2DevIndex"), (0, "VEL-HOST2-MIB", "host2DevQntIndex"))
if mibBuilder.loadTexts: host2DevQntEntry.setStatus('current')
if mibBuilder.loadTexts: host2DevQntEntry.setDescription('An entry of quantities of device.')
host2DevQntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevQntIndex.setStatus('current')
if mibBuilder.loadTexts: host2DevQntIndex.setDescription('An id for each quantity.')
host2DevQntName = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevQntName.setStatus('current')
if mibBuilder.loadTexts: host2DevQntName.setDescription('The name of a quantity.')
host2DevQntValue = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: host2DevQntValue.setStatus('current')
if mibBuilder.loadTexts: host2DevQntValue.setDescription('The value of a quantity.')
host2DevQntMin = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevQntMin.setStatus('current')
if mibBuilder.loadTexts: host2DevQntMin.setDescription('The minimum value of a quantity.')
host2DevQntMax = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevQntMax.setStatus('current')
if mibBuilder.loadTexts: host2DevQntMax.setDescription('The maximum value of a quantity.')
host2DevQntAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("read-only", 0), ("read-write", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevQntAccess.setStatus('current')
if mibBuilder.loadTexts: host2DevQntAccess.setDescription('The access to change the value of a quantity.')
host2DevCmdTable = MibTable((1, 3, 6, 1, 4, 1, 27993, 5, 11), )
if mibBuilder.loadTexts: host2DevCmdTable.setStatus('current')
if mibBuilder.loadTexts: host2DevCmdTable.setDescription('A list of commands of devices entries.\n\t\t\t\tIf device is disconnected, there is no entry for this device in the table.')
host2DevCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 27993, 5, 11, 1), ).setIndexNames((0, "VEL-HOST2-MIB", "host2DevIndex"), (0, "VEL-HOST2-MIB", "host2DevCmdIndex"))
if mibBuilder.loadTexts: host2DevCmdEntry.setStatus('current')
if mibBuilder.loadTexts: host2DevCmdEntry.setDescription('An entry of commands of device.')
host2DevCmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevCmdIndex.setStatus('current')
if mibBuilder.loadTexts: host2DevCmdIndex.setDescription('An id for each command.')
host2DevCmdName = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: host2DevCmdName.setStatus('current')
if mibBuilder.loadTexts: host2DevCmdName.setDescription('The name of a command.')
host2DevCmdExecute = MibTableColumn((1, 3, 6, 1, 4, 1, 27993, 5, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: host2DevCmdExecute.setStatus('current')
if mibBuilder.loadTexts: host2DevCmdExecute.setDescription('Instructions to execute the command of device.\n\t\t\t\t\t\tIf value no(0) is sent, the command will not be executed.\n\t\t\t\t\t\tIf value yes(1) is sent, the command will be executed.')
host2DevConnectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 27993, 5) + (0,5001)).setObjects(("VEL-HOST2-MIB", "host2DevLanState"))
if mibBuilder.loadTexts: host2DevConnectionTrap.setDescription('This trap is sent when the status of network connection of device is changed.\n\t\t\t\t\t\tThere can be two types of network connection status: connected or disconnected.')
host2DevEvtStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 27993, 5) + (0,5002)).setObjects(("VEL-HOST2-MIB", "host2DevEvtState"))
if mibBuilder.loadTexts: host2DevEvtStateTrap.setDescription('This trap is sent when the state of device is changed: for example,\n\t\t\t\t\t\t device can enter stand-by mode or there is an alarm, not associated with parameters measured.')
host2DevParStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 27993, 5) + (0,5003)).setObjects(("VEL-HOST2-MIB", "host2DevParState"))
if mibBuilder.loadTexts: host2DevParStateTrap.setDescription('This trap is sent when the state of measured parameters is changed.')
mibBuilder.exportSymbols("VEL-HOST2-MIB", host2DevParStateTrap=host2DevParStateTrap, host2CmdExecute=host2CmdExecute, host2DevQntValue=host2DevQntValue, host2HisIndex=host2HisIndex, host2DevQntName=host2DevQntName, host2DevIndex=host2DevIndex, PYSNMP_MODULE_ID=host2, host2DevEvtState=host2DevEvtState, host2CmdIndex=host2CmdIndex, host2DevAttrTable=host2DevAttrTable, host2DevParTable=host2DevParTable, host2LoaderVersion=host2LoaderVersion, host2DevEvtIndex=host2DevEvtIndex, host2DevQntEntry=host2DevQntEntry, host2HisRecord=host2HisRecord, host2CmdTable=host2CmdTable, host2DevParName=host2DevParName, host2DevLocalAddr=host2DevLocalAddr, host2DevParState=host2DevParState, host2DevCmdIndex=host2DevCmdIndex, host2DevEvtStateTrap=host2DevEvtStateTrap, host2DevEvtName=host2DevEvtName, host2DevTxtIndex=host2DevTxtIndex, host2DevEvtType=host2DevEvtType, host2HistoryTable=host2HistoryTable, host2DevQntMin=host2DevQntMin, host2DevQntAccess=host2DevQntAccess, host2DevCmdExecute=host2DevCmdExecute, host2DevTypeNumber=host2DevTypeNumber, host2DevTxtEntry=host2DevTxtEntry, host2DevParStateType=host2DevParStateType, host2DevQntIndex=host2DevQntIndex, host2DevTxtValue=host2DevTxtValue, host2DevParEntry=host2DevParEntry, host2DevEvtTable=host2DevEvtTable, host2DevCmdName=host2DevCmdName, host2DevParIndex=host2DevParIndex, host2DevConnectionTrap=host2DevConnectionTrap, host2DevQntMax=host2DevQntMax, host2DevParUnit=host2DevParUnit, host2HistoryEntry=host2HistoryEntry, host2DevCmdEntry=host2DevCmdEntry, host2DevAttrEntry=host2DevAttrEntry, host2CmdName=host2CmdName, host2DevLanState=host2DevLanState, host2Name=host2Name, host2=host2, host2CmdEntry=host2CmdEntry, host2DevTxtTable=host2DevTxtTable, host2DevCmdTable=host2DevCmdTable, host2DevQntTable=host2DevQntTable, host2DevEvtEntry=host2DevEvtEntry, host2DevParValue=host2DevParValue, host2DevTxtName=host2DevTxtName, host2Version=host2Version)
