#
# PySNMP MIB module ELTEX-LTP8X (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eltex/ELTEX-LTP8X
# Produced by pysmi-1.1.12 at Fri Jul 19 09:35:20 2024
# On host fv-az1110-714 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
mcTrapLParam3, mcTrapLParam2, mcTrapExState, elHardware, mcTrapID, mcTrapDescr, mcTrapLParam1 = mibBuilder.importSymbols("ELTEX-SMI-ACTUAL", "mcTrapLParam3", "mcTrapLParam2", "mcTrapExState", "elHardware", "mcTrapID", "mcTrapDescr", "mcTrapLParam1")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, Gauge32, iso, NotificationType, ModuleIdentity, Bits, Counter64, Counter32, MibIdentifier, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "Gauge32", "iso", "NotificationType", "ModuleIdentity", "Bits", "Counter64", "Counter32", "MibIdentifier", "IpAddress", "ObjectIdentity")
TimeStamp, TruthValue, MacAddress, TextualConvention, RowStatus, DisplayString, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue", "MacAddress", "TextualConvention", "RowStatus", "DisplayString", "TimeInterval")
ltp8x = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 1, 22))
ltp8x.setRevisions(('2010-07-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ltp8x.setRevisionsDescriptions(('First revision',))
if mibBuilder.loadTexts: ltp8x.setLastUpdated('201007210000Z')
if mibBuilder.loadTexts: ltp8x.setOrganization('Eltex Co')
if mibBuilder.loadTexts: ltp8x.setContactInfo('eltex@gcom.ru')
if mibBuilder.loadTexts: ltp8x.setDescription('LTP8X MIB')
class ONTSerial(TextualConvention, OctetString):
    description = ' '
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class LTPONTState(TextualConvention, Integer32):
    description = ' '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("free", 0), ("allocated", 1), ("authInProgress", 2), ("authFailed", 3), ("authOk", 4), ("cfgInProgress", 5), ("cfgFailed", 6), ("ok", 7), ("failed", 8), ("blocked", 9), ("mibreset", 10), ("preconfig", 11), ("fwUpdating", 12), ("unactivated", 13), ("redundant", 14), ("disabled", 15), ("unknown", 16))

class DBAServiceClass(TextualConvention, Integer32):
    description = ' '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("dbaData", 0), ("dbaVoIP", 1), ("dbaTDMCBR", 2))

class DBAStatusReport(TextualConvention, Integer32):
    description = ' '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("statusReportNSR", 0), ("statusReportType0", 1), ("statusReportType1", 2))

class AddressEntryType(TextualConvention, Integer32):
    description = ' '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("dynamic", 0), ("static", 1), ("dynamicAndStatic", 2))

class VideoRxPowerConv(TextualConvention, Integer32):
    description = ' '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(32767))
    namedValues = NamedValues(("noVideoSignal", 32767))

ltp4x = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 70))
ltp8xPONChannels = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2))
ltp8xPONChannelStateTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1), )
if mibBuilder.loadTexts: ltp8xPONChannelStateTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelStateTable.setDescription(' ')
ltp8xPONChannelStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xPONChannelSlot"), (0, "ELTEX-LTP8X", "ltp8xPONChannelID"))
if mibBuilder.loadTexts: ltp8xPONChannelStateEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelStateEntry.setDescription('')
ltp8xPONChannelSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelSlot.setDescription(' ')
ltp8xPONChannelID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelID.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelID.setDescription(' ')
ltp8xPONChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelState.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelState.setDescription('Possible values:\n\t\t\t\t\t\t\tfree(0),\n\t\t\t\t\t\t\tinited(1),\n\t\t\t\t\t\t\tcfgInProgress(2),\n\t\t\t\t\t\t\tcfgFailed(3),\n\t\t\t\t\t\t\tok(4),\n\t\t\t\t\t\t\tfailed(5),\n\t\t\t\t\t\t\tredundant(6),\n\t\t\t\t\t\t\tdisabled(7),\n\t\t\t\t\t\t\tunknown(8)')
ltp8xPONChannelONTCount = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelONTCount.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelONTCount.setDescription(' ')
ltp8xPONChannelEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xPONChannelEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelEnabled.setDescription('This variable only makes sense in MA4000. In LTP-8X - use ifTable.')
ltp8xPONChannelSFPVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelSFPVendor.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelSFPVendor.setDescription('')
ltp8xPONChannelSFPProductNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelSFPProductNumber.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelSFPProductNumber.setDescription('')
ltp8xPONChannelSFPRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelSFPRevision.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelSFPRevision.setDescription('')
ltp8xPONChannelTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelTxPower.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelTxPower.setDescription('in dBm * 1000')
ltp8xPONChannelSFPTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelSFPTemperature.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelSFPTemperature.setDescription('in deg. C')
ltp8xPONChannelSFPVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelSFPVoltage.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelSFPVoltage.setDescription('in uV')
ltp8xPONChannelSFPTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelSFPTxBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelSFPTxBiasCurrent.setDescription('in uA')
ltp8xPONChannelReconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xPONChannelReconfigure.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelReconfigure.setDescription('Set this to 1 to reconfigure OLT channel')
ltp8xPONChannelResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 1, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xPONChannelResetCounters.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelResetCounters.setDescription('Set this to 1 to reset channel counters')
ltp8xPONChannelActModeTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 2), )
if mibBuilder.loadTexts: ltp8xPONChannelActModeTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelActModeTable.setDescription(' ')
ltp8xPONChannelActModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 2, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xPONChannelActModeSlot"), (0, "ELTEX-LTP8X", "ltp8xPONChannelActModeChannel"))
if mibBuilder.loadTexts: ltp8xPONChannelActModeEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelActModeEntry.setDescription('')
ltp8xPONChannelActModeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xPONChannelActModeSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelActModeSlot.setDescription('')
ltp8xPONChannelActModeChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xPONChannelActModeChannel.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelActModeChannel.setDescription('')
ltp8xPONChannelActModeHostControlledLumpedSN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xPONChannelActModeHostControlledLumpedSN.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelActModeHostControlledLumpedSN.setDescription('')
ltp8xPONChannelAddressTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3), )
if mibBuilder.loadTexts: ltp8xPONChannelAddressTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressTable.setDescription(' ')
ltp8xPONChannelAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xPONChannelAddressSlot"), (0, "ELTEX-LTP8X", "ltp8xPONChannelAddressChannel"), (0, "ELTEX-LTP8X", "ltp8xPONChannelAddressEntryID"))
if mibBuilder.loadTexts: ltp8xPONChannelAddressEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressEntry.setDescription('')
ltp8xPONChannelAddressSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xPONChannelAddressSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressSlot.setDescription(' ')
ltp8xPONChannelAddressChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xPONChannelAddressChannel.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressChannel.setDescription(' ')
ltp8xPONChannelAddressEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 3), Unsigned32())
if mibBuilder.loadTexts: ltp8xPONChannelAddressEntryID.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressEntryID.setDescription(' ')
ltp8xPONChannelAddressONTSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 4), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelAddressONTSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressONTSerial.setDescription(' ')
ltp8xPONChannelAddressONTID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelAddressONTID.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressONTID.setDescription(' ')
ltp8xPONChannelAddressPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelAddressPriority.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressPriority.setDescription('Priority of the packets')
ltp8xPONChannelAddressCVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelAddressCVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressCVID.setDescription('C-VLAN ID of the packet')
ltp8xPONChannelAddressSVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelAddressSVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressSVID.setDescription('S-VLAN ID of the packet')
ltp8xPONChannelAddressMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelAddressMacAddress.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressMacAddress.setDescription('MAC address')
ltp8xPONChannelAddressCPUDestined = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelAddressCPUDestined.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressCPUDestined.setDescription('Whether packet should be forwarded to CPU')
ltp8xPONChannelAddressDatapathForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelAddressDatapathForwarding.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressDatapathForwarding.setDescription('Whether packet should be forwarded to Datapath')
ltp8xPONChannelAddressUniPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelAddressUniPort.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressUniPort.setDescription('')
ltp8xPONChannelAddressEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 13), AddressEntryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelAddressEntryType.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressEntryType.setDescription('')
ltp8xPONChannelAddressAge = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelAddressAge.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressAge.setDescription('The age of the entry')
ltp8xPONChannelAddressGEMPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelAddressGEMPortId.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressGEMPortId.setDescription('GEM Port-ID from which packet has come')
ltp8xPONChannelAddressUVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPONChannelAddressUVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xPONChannelAddressUVID.setDescription('U-VLAN ID of the packet')
ltp8xONT = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3))
ltp8xONTStateTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1), )
if mibBuilder.loadTexts: ltp8xONTStateTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateTable.setDescription(' ')
ltp8xONTStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTSlot"), (0, "ELTEX-LTP8X", "ltp8xONTSerial"))
if mibBuilder.loadTexts: ltp8xONTStateEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateEntry.setDescription('')
ltp8xONTSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTSerial.setDescription('')
ltp8xONTStateChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateChannel.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateChannel.setDescription('')
ltp8xONTStateID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateID.setDescription('')
ltp8xONTStateState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 5), LTPONTState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateState.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateState.setDescription('')
ltp8xONTStateEqualizationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateEqualizationDelay.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateEqualizationDelay.setDescription('')
ltp8xONTStateFecState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateFecState.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateFecState.setDescription('')
ltp8xONTStateEncryptionKey = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateEncryptionKey.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateEncryptionKey.setDescription('')
ltp8xONTStateOMCIPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateOMCIPortId.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateOMCIPortId.setDescription('')
ltp8xONTStateDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateDistance.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateDistance.setDescription('Measured in meters.')
ltp8xONTStateRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateRSSI.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateRSSI.setDescription('Received signal strength indication. Measured in 0.1dbm. \n\t\t\t\t\t\tValue 65535 - means that RSSI value is not available (not supported by SFP)')
ltp8xONTStateEquipmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateEquipmentID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateEquipmentID.setDescription(' ')
ltp8xONTStateTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateTxPower.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateTxPower.setDescription('in dBm * 1000 (only for NTP-2C)')
ltp8xONTStateRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateRxPower.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateRxPower.setDescription('in dBm * 1000 (only for NTP-2C)')
ltp8xONTStateTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateTemperature.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateTemperature.setDescription('in celsius * 10 (only for NTP-2C)')
ltp8xONTStateVideoRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 16), VideoRxPowerConv()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateVideoRxPower.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateVideoRxPower.setDescription('in dBm * 1000 (only for NTP-2C)')
ltp8xONTStateVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateVersion.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateVersion.setDescription('')
ltp8xONTStateHWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateHWVersion.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateHWVersion.setDescription('')
ltp8xONTStateReconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTStateReconfigure.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateReconfigure.setDescription('Always = 0. Set this to 1 to reconfigure ONT')
ltp8xONTStateUpdateFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTStateUpdateFirmware.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateUpdateFirmware.setDescription('Always = 0. Set this to 1 to update ONT firmware')
ltp8xONTStateReset = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTStateReset.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateReset.setDescription('Set to 1 to reboot ONT')
ltp8xONTStateResetToDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTStateResetToDefaults.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateResetToDefaults.setDescription('Set to 1 to reset ONT to defaults via OMCI')
ltp8xONTStateRFPortOn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateRFPortOn.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateRFPortOn.setDescription('')
ltp8xONTStateLaserVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateLaserVoltage.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateLaserVoltage.setDescription('')
ltp8xONTStateLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTStateLaserBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateLaserBiasCurrent.setDescription('')
ltp8xONTUNIPortsStateTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 2), )
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateTable.setDescription(' ')
ltp8xONTUNIPortsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 2, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTUNIPortsStateSlot"), (0, "ELTEX-LTP8X", "ltp8xONTUNIPortsStateSerial"), (0, "ELTEX-LTP8X", "ltp8xONTUNIPortsStatePort"))
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateEntry.setDescription('')
ltp8xONTUNIPortsStateSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTUNIPortsStateSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 2, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateSerial.setDescription('')
ltp8xONTUNIPortsStatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTUNIPortsStatePort.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTUNIPortsStatePort.setDescription('')
ltp8xONTUNIPortsStateAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateAvailable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateAvailable.setDescription('Shows if info on this port is available. If not - next 3 fields must be ignored')
ltp8xONTUNIPortsStateLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateLinkUp.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateLinkUp.setDescription('')
ltp8xONTUNIPortsStateSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("speedAuto", 0), ("speed10M", 1), ("speed100M", 2), ("speed1G", 3), ("speedNotAvailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateSpeed.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateSpeed.setDescription('')
ltp8xONTUNIPortsStateDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("duplexAuto", 0), ("duplexFull", 1), ("duplexHalf", 2), ("duplexNotAvaiable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateDuplex.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTUNIPortsStateDuplex.setDescription('')
ltp8xONTStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3))
ltp8xONTWANCountersTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 1), )
if mibBuilder.loadTexts: ltp8xONTWANCountersTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTWANCountersTable.setDescription(' ')
ltp8xONTWANCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 1, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTWANCountersSlot"), (0, "ELTEX-LTP8X", "ltp8xONTWANCountersSerial"), (0, "ELTEX-LTP8X", "ltp8xONTWANCountersCrossConnect"))
if mibBuilder.loadTexts: ltp8xONTWANCountersEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTWANCountersEntry.setDescription('')
ltp8xONTWANCountersSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTWANCountersSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTWANCountersSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTWANCountersSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 1, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTWANCountersSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTWANCountersSerial.setDescription('')
ltp8xONTWANCountersCrossConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTWANCountersCrossConnect.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTWANCountersCrossConnect.setDescription('')
ltp8xONTWANCountersRXDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTWANCountersRXDrops.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTWANCountersRXDrops.setDescription('')
ltp8xONTWANCountersRXErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTWANCountersRXErrors.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTWANCountersRXErrors.setDescription('')
ltp8xONTWANCountersRecvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTWANCountersRecvBytes.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTWANCountersRecvBytes.setDescription('')
ltp8xONTWANCountersRecvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTWANCountersRecvFrames.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTWANCountersRecvFrames.setDescription('')
ltp8xONTWANCountersTXDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTWANCountersTXDrops.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTWANCountersTXDrops.setDescription('')
ltp8xONTWANCountersTXErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTWANCountersTXErrors.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTWANCountersTXErrors.setDescription('')
ltp8xONTWANCountersTrmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTWANCountersTrmtBytes.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTWANCountersTrmtBytes.setDescription('')
ltp8xONTWANCountersTrmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTWANCountersTrmtFrames.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTWANCountersTrmtFrames.setDescription('')
ltp8xONTGEMPortCountersTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 2), )
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersTable.setDescription(' ')
ltp8xONTGEMPortCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 2, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTGEMPortCountersSlot"), (0, "ELTEX-LTP8X", "ltp8xONTGEMPortCountersSerial"), (0, "ELTEX-LTP8X", "ltp8xONTGEMPortCountersCrossConnect"))
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersEntry.setDescription('')
ltp8xONTGEMPortCountersSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTGEMPortCountersSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 2, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersSerial.setDescription('')
ltp8xONTGEMPortCountersCrossConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersCrossConnect.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersCrossConnect.setDescription('')
ltp8xONTGEMPortCountersDSFinishedIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersDSFinishedIntervals.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersDSFinishedIntervals.setDescription('')
ltp8xONTGEMPortCountersDSGEMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersDSGEMFrames.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersDSGEMFrames.setDescription('')
ltp8xONTGEMPortCountersDSPayloadBytesLOW = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersDSPayloadBytesLOW.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersDSPayloadBytesLOW.setDescription('')
ltp8xONTGEMPortCountersDSPayloadBytesHIGH = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersDSPayloadBytesHIGH.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersDSPayloadBytesHIGH.setDescription('')
ltp8xONTGEMPortCountersUSFinishedIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersUSFinishedIntervals.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersUSFinishedIntervals.setDescription('')
ltp8xONTGEMPortCountersUSGEMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersUSGEMFrames.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersUSGEMFrames.setDescription('')
ltp8xONTGEMPortCountersUSPayloadBytesLOW = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersUSPayloadBytesLOW.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersUSPayloadBytesLOW.setDescription('')
ltp8xONTGEMPortCountersUSPayloadBytesHIGH = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersUSPayloadBytesHIGH.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortCountersUSPayloadBytesHIGH.setDescription('')
ltp8xONTEthPerformMonitoringHistDataTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 3), )
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataTable.setDescription(' ')
ltp8xONTEthPerformMonitoringHistDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 3, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTEthPerformMonitoringHistDataSlot"), (0, "ELTEX-LTP8X", "ltp8xONTEthPerformMonitoringHistDataSerial"), (0, "ELTEX-LTP8X", "ltp8xONTEthPerformMonitoringHistDataPort"), (0, "ELTEX-LTP8X", "ltp8xONTEthPerformMonitoringHistDataCounterID"))
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataEntry.setDescription('')
ltp8xONTEthPerformMonitoringHistDataSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTEthPerformMonitoringHistDataSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 3, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataSerial.setDescription('')
ltp8xONTEthPerformMonitoringHistDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataPort.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataPort.setDescription('')
ltp8xONTEthPerformMonitoringHistDataCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataCounterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataCounterID.setDescription('')
ltp8xONTEthPerformMonitoringHistDataCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataCounterName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataCounterName.setDescription('')
ltp8xONTEthPerformMonitoringHistDataCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataCounterValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthPerformMonitoringHistDataCounterValue.setDescription('')
ltp8xONTGalEthPerformMonitoringHistDataTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 4), )
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataTable.setDescription(' ')
ltp8xONTGalEthPerformMonitoringHistDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 4, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTGalEthPerformMonitoringHistDataSlot"), (0, "ELTEX-LTP8X", "ltp8xONTGalEthPerformMonitoringHistDataSerial"), (0, "ELTEX-LTP8X", "ltp8xONTGalEthPerformMonitoringHistDataCrossConnect"), (0, "ELTEX-LTP8X", "ltp8xONTGalEthPerformMonitoringHistDataCounterID"))
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataEntry.setDescription('')
ltp8xONTGalEthPerformMonitoringHistDataSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTGalEthPerformMonitoringHistDataSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 4, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataSerial.setDescription('')
ltp8xONTGalEthPerformMonitoringHistDataCrossConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataCrossConnect.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataCrossConnect.setDescription('')
ltp8xONTGalEthPerformMonitoringHistDataCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataCounterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataCounterID.setDescription('')
ltp8xONTGalEthPerformMonitoringHistDataCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataCounterName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataCounterName.setDescription('')
ltp8xONTGalEthPerformMonitoringHistDataCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataCounterValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGalEthPerformMonitoringHistDataCounterValue.setDescription('')
ltp8xONTFecPerformMonitoringHistDataTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 5), )
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataTable.setDescription(' ')
ltp8xONTFecPerformMonitoringHistDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 5, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTFecPerformMonitoringHistDataSlot"), (0, "ELTEX-LTP8X", "ltp8xONTFecPerformMonitoringHistDataSerial"), (0, "ELTEX-LTP8X", "ltp8xONTFecPerformMonitoringHistDataDummyIndex"), (0, "ELTEX-LTP8X", "ltp8xONTFecPerformMonitoringHistDataCounterID"))
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataEntry.setDescription('')
ltp8xONTFecPerformMonitoringHistDataSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTFecPerformMonitoringHistDataSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 5, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataSerial.setDescription('')
ltp8xONTFecPerformMonitoringHistDataDummyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataDummyIndex.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataDummyIndex.setDescription('Always = 1. Needed to preserve common statistics table structure')
ltp8xONTFecPerformMonitoringHistDataCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataCounterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataCounterID.setDescription('')
ltp8xONTFecPerformMonitoringHistDataCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataCounterName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataCounterName.setDescription('')
ltp8xONTFecPerformMonitoringHistDataCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataCounterValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFecPerformMonitoringHistDataCounterValue.setDescription('')
ltp8xONTEthFrameDSPerformMonitoringHistDataTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 6), )
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataTable.setDescription(' ')
ltp8xONTEthFrameDSPerformMonitoringHistDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 6, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTEthFrameDSPerformMonitoringHistDataSlot"), (0, "ELTEX-LTP8X", "ltp8xONTEthFrameDSPerformMonitoringHistDataSerial"), (0, "ELTEX-LTP8X", "ltp8xONTEthFrameDSPerformMonitoringHistDataPort"), (0, "ELTEX-LTP8X", "ltp8xONTEthFrameDSPerformMonitoringHistDataCounterID"))
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataEntry.setDescription('')
ltp8xONTEthFrameDSPerformMonitoringHistDataSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTEthFrameDSPerformMonitoringHistDataSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 6, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataSerial.setDescription('')
ltp8xONTEthFrameDSPerformMonitoringHistDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataPort.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataPort.setDescription('')
ltp8xONTEthFrameDSPerformMonitoringHistDataCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataCounterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataCounterID.setDescription('')
ltp8xONTEthFrameDSPerformMonitoringHistDataCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataCounterName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataCounterName.setDescription('')
ltp8xONTEthFrameDSPerformMonitoringHistDataCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataCounterValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameDSPerformMonitoringHistDataCounterValue.setDescription('')
ltp8xONTEthFrameUSPerformMonitoringHistDataTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 7), )
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataTable.setDescription(' ')
ltp8xONTEthFrameUSPerformMonitoringHistDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 7, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTEthFrameUSPerformMonitoringHistDataSlot"), (0, "ELTEX-LTP8X", "ltp8xONTEthFrameUSPerformMonitoringHistDataSerial"), (0, "ELTEX-LTP8X", "ltp8xONTEthFrameUSPerformMonitoringHistDataPort"), (0, "ELTEX-LTP8X", "ltp8xONTEthFrameUSPerformMonitoringHistDataCounterID"))
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataEntry.setDescription('')
ltp8xONTEthFrameUSPerformMonitoringHistDataSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTEthFrameUSPerformMonitoringHistDataSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 7, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataSerial.setDescription('')
ltp8xONTEthFrameUSPerformMonitoringHistDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataPort.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataPort.setDescription('')
ltp8xONTEthFrameUSPerformMonitoringHistDataCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataCounterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataCounterID.setDescription('')
ltp8xONTEthFrameUSPerformMonitoringHistDataCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataCounterName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataCounterName.setDescription('')
ltp8xONTEthFrameUSPerformMonitoringHistDataCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataCounterValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameUSPerformMonitoringHistDataCounterValue.setDescription('')
ltp8xONTGEMPortPerformMonitoringDSTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 8), )
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSTable.setDescription(' ')
ltp8xONTGEMPortPerformMonitoringDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 8, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTGEMPortPerformMonitoringDSSlot"), (0, "ELTEX-LTP8X", "ltp8xONTGEMPortPerformMonitoringDSSerial"), (0, "ELTEX-LTP8X", "ltp8xONTGEMPortPerformMonitoringDSCrossConnect"), (0, "ELTEX-LTP8X", "ltp8xONTGEMPortPerformMonitoringDSCounterID"))
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSEntry.setDescription('')
ltp8xONTGEMPortPerformMonitoringDSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTGEMPortPerformMonitoringDSSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 8, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSSerial.setDescription('')
ltp8xONTGEMPortPerformMonitoringDSCrossConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSCrossConnect.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSCrossConnect.setDescription('')
ltp8xONTGEMPortPerformMonitoringDSCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSCounterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSCounterID.setDescription('')
ltp8xONTGEMPortPerformMonitoringDSCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSCounterName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSCounterName.setDescription('')
ltp8xONTGEMPortPerformMonitoringDSCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSCounterValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringDSCounterValue.setDescription('')
ltp8xONTGEMPortPerformMonitoringUSTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 9), )
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSTable.setDescription(' ')
ltp8xONTGEMPortPerformMonitoringUSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 9, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTGEMPortPerformMonitoringUSSlot"), (0, "ELTEX-LTP8X", "ltp8xONTGEMPortPerformMonitoringUSSerial"), (0, "ELTEX-LTP8X", "ltp8xONTGEMPortPerformMonitoringUSCrossConnect"), (0, "ELTEX-LTP8X", "ltp8xONTGEMPortPerformMonitoringUSCounterID"))
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSEntry.setDescription('')
ltp8xONTGEMPortPerformMonitoringUSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTGEMPortPerformMonitoringUSSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 9, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSSerial.setDescription('')
ltp8xONTGEMPortPerformMonitoringUSCrossConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSCrossConnect.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSCrossConnect.setDescription('')
ltp8xONTGEMPortPerformMonitoringUSCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSCounterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSCounterID.setDescription('')
ltp8xONTGEMPortPerformMonitoringUSCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSCounterName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSCounterName.setDescription('')
ltp8xONTGEMPortPerformMonitoringUSCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 9, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSCounterValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTGEMPortPerformMonitoringUSCounterValue.setDescription('')
ltp8xONTCrossConnectDSTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 10), )
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSTable.setDescription(' ')
ltp8xONTCrossConnectDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 10, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTCrossConnectDSSlot"), (0, "ELTEX-LTP8X", "ltp8xONTCrossConnectDSSerial"), (0, "ELTEX-LTP8X", "ltp8xONTCrossConnectDSCrossConnect"), (0, "ELTEX-LTP8X", "ltp8xONTCrossConnectDSCounterID"))
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSEntry.setDescription('')
ltp8xONTCrossConnectDSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTCrossConnectDSSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 10, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSSerial.setDescription('')
ltp8xONTCrossConnectDSCrossConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSCrossConnect.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSCrossConnect.setDescription('')
ltp8xONTCrossConnectDSCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSCounterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSCounterID.setDescription('')
ltp8xONTCrossConnectDSCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSCounterName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSCounterName.setDescription('')
ltp8xONTCrossConnectDSCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 10, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSCounterValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectDSCounterValue.setDescription('')
ltp8xONTCrossConnectUSTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 11), )
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSTable.setDescription(' ')
ltp8xONTCrossConnectUSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 11, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTCrossConnectUSSlot"), (0, "ELTEX-LTP8X", "ltp8xONTCrossConnectUSSerial"), (0, "ELTEX-LTP8X", "ltp8xONTCrossConnectUSCrossConnect"), (0, "ELTEX-LTP8X", "ltp8xONTCrossConnectUSCounterID"))
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSEntry.setDescription('')
ltp8xONTCrossConnectUSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTCrossConnectUSSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 11, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSSerial.setDescription('')
ltp8xONTCrossConnectUSCrossConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 11, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSCrossConnect.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSCrossConnect.setDescription('')
ltp8xONTCrossConnectUSCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 11, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSCounterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSCounterID.setDescription('')
ltp8xONTCrossConnectUSCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSCounterName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSCounterName.setDescription('')
ltp8xONTCrossConnectUSCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSCounterValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectUSCounterValue.setDescription('')
ltp8xONTServiceDSTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 12), )
if mibBuilder.loadTexts: ltp8xONTServiceDSTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceDSTable.setDescription(' ')
ltp8xONTServiceDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 12, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTServiceDSSlot"), (0, "ELTEX-LTP8X", "ltp8xONTServiceDSSerial"), (0, "ELTEX-LTP8X", "ltp8xONTServiceDSService"), (0, "ELTEX-LTP8X", "ltp8xONTServiceDSCounterID"))
if mibBuilder.loadTexts: ltp8xONTServiceDSEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceDSEntry.setDescription('')
ltp8xONTServiceDSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceDSSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceDSSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTServiceDSSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 12, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceDSSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceDSSerial.setDescription('')
ltp8xONTServiceDSService = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 12, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceDSService.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceDSService.setDescription('')
ltp8xONTServiceDSCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 12, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceDSCounterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceDSCounterID.setDescription('')
ltp8xONTServiceDSCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceDSCounterName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceDSCounterName.setDescription('')
ltp8xONTServiceDSCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 12, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceDSCounterValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceDSCounterValue.setDescription('')
ltp8xONTServiceUSTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 13), )
if mibBuilder.loadTexts: ltp8xONTServiceUSTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceUSTable.setDescription(' ')
ltp8xONTServiceUSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 13, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTServiceUSSlot"), (0, "ELTEX-LTP8X", "ltp8xONTServiceUSSerial"), (0, "ELTEX-LTP8X", "ltp8xONTServiceUSService"), (0, "ELTEX-LTP8X", "ltp8xONTServiceUSCounterID"))
if mibBuilder.loadTexts: ltp8xONTServiceUSEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceUSEntry.setDescription('')
ltp8xONTServiceUSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 13, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceUSSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceUSSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTServiceUSSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 13, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceUSSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceUSSerial.setDescription('')
ltp8xONTServiceUSService = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 13, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceUSService.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceUSService.setDescription('')
ltp8xONTServiceUSCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 13, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceUSCounterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceUSCounterID.setDescription('')
ltp8xONTServiceUSCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 13, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceUSCounterName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceUSCounterName.setDescription('')
ltp8xONTServiceUSCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 13, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceUSCounterValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceUSCounterValue.setDescription('')
ltp8xONTEthFrameExtendedPerformMonitoringDSTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 14), )
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSTable.setDescription(' ')
ltp8xONTEthFrameExtendedPerformMonitoringDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 14, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTEthFrameExtendedPerformMonitoringDSSlot"), (0, "ELTEX-LTP8X", "ltp8xONTEthFrameExtendedPerformMonitoringDSSerial"), (0, "ELTEX-LTP8X", "ltp8xONTEthFrameExtendedPerformMonitoringDSPort"), (0, "ELTEX-LTP8X", "ltp8xONTEthFrameExtendedPerformMonitoringDSCounterID"))
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSEntry.setDescription('')
ltp8xONTEthFrameExtendedPerformMonitoringDSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 14, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTEthFrameExtendedPerformMonitoringDSSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 14, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSSerial.setDescription('')
ltp8xONTEthFrameExtendedPerformMonitoringDSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 14, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSPort.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSPort.setDescription('')
ltp8xONTEthFrameExtendedPerformMonitoringDSCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 14, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSCounterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSCounterID.setDescription('')
ltp8xONTEthFrameExtendedPerformMonitoringDSCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 14, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSCounterName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSCounterName.setDescription('')
ltp8xONTEthFrameExtendedPerformMonitoringDSCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 14, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSCounterValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringDSCounterValue.setDescription('')
ltp8xONTEthFrameExtendedPerformMonitoringUSTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 15), )
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSTable.setDescription(' ')
ltp8xONTEthFrameExtendedPerformMonitoringUSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 15, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTEthFrameExtendedPerformMonitoringUSSlot"), (0, "ELTEX-LTP8X", "ltp8xONTEthFrameExtendedPerformMonitoringUSSerial"), (0, "ELTEX-LTP8X", "ltp8xONTEthFrameExtendedPerformMonitoringUSPort"), (0, "ELTEX-LTP8X", "ltp8xONTEthFrameExtendedPerformMonitoringUSCounterID"))
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSEntry.setDescription('')
ltp8xONTEthFrameExtendedPerformMonitoringUSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 15, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTEthFrameExtendedPerformMonitoringUSSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 15, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSSerial.setDescription('')
ltp8xONTEthFrameExtendedPerformMonitoringUSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 15, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSPort.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSPort.setDescription('')
ltp8xONTEthFrameExtendedPerformMonitoringUSCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 15, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSCounterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSCounterID.setDescription('')
ltp8xONTEthFrameExtendedPerformMonitoringUSCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSCounterName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSCounterName.setDescription('')
ltp8xONTEthFrameExtendedPerformMonitoringUSCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 15, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSCounterValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTEthFrameExtendedPerformMonitoringUSCounterValue.setDescription('')
ltp8xONTResetCountersTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 20), )
if mibBuilder.loadTexts: ltp8xONTResetCountersTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTResetCountersTable.setDescription(' ')
ltp8xONTResetCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 20, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTResetCountersSlot"), (0, "ELTEX-LTP8X", "ltp8xONTResetCountersSerial"))
if mibBuilder.loadTexts: ltp8xONTResetCountersEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTResetCountersEntry.setDescription('')
ltp8xONTResetCountersSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 20, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTResetCountersSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTResetCountersSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTResetCountersSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 20, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTResetCountersSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTResetCountersSerial.setDescription('')
ltp8xONTResetCountersAction = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 3, 20, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTResetCountersAction.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTResetCountersAction.setDescription('Set to 1 to reset ONT counters')
ltp8xONTConfigTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4), )
if mibBuilder.loadTexts: ltp8xONTConfigTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigTable.setDescription(' ')
ltp8xONTConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTConfigSlot"), (0, "ELTEX-LTP8X", "ltp8xONTConfigSerial"))
if mibBuilder.loadTexts: ltp8xONTConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigEntry.setDescription('')
ltp8xONTConfigSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTConfigSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTConfigSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTConfigSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigSerial.setDescription('')
ltp8xONTConfigChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigChannel.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigChannel.setDescription('ONT assigned for this channel, 255 if ONT can appear on any channel')
ltp8xONTConfigID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigID.setDescription(' ')
ltp8xONTConfigServicesProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigServicesProfile.setStatus('deprecated')
if mibBuilder.loadTexts: ltp8xONTConfigServicesProfile.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigPassword.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigPassword.setDescription(' ')
ltp8xONTConfigFecUp = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigFecUp.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigFecUp.setDescription('')
ltp8xONTConfigDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigDescription.setDescription('')
ltp8xONTConfigManagementProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigManagementProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigManagementProfile.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigMulticastProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigMulticastProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigMulticastProfile.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigCrossConnectProfile0 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile0.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile0.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigCrossConnectProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile1.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile1.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigCrossConnectProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile2.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile2.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigCrossConnectProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile3.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile3.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigCrossConnectProfile4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile4.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile4.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigCrossConnectProfile5 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile5.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile5.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigCrossConnectProfile6 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile6.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile6.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigCrossConnectProfile7 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile7.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigCrossConnectProfile7.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigShapingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigShapingProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigShapingProfile.setDescription('')
ltp8xONTConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigRowStatus.setDescription(' ')
ltp8xONTConfigEncryptionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigEncryptionEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigEncryptionEnabled.setDescription('Is encryption enabled for this ONT')
ltp8xONTConfigDownstreamBroadcastEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigDownstreamBroadcastEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigDownstreamBroadcastEnabled.setDescription('Is broadcast enabled for this ONT')
ltp8xONTConfigAllocProfile0 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile0.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile0.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigAllocProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile1.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile1.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigAllocProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile2.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile2.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigAllocProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile3.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile3.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigAllocProfile4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile4.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile4.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigAllocProfile5 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile5.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile5.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigAllocProfile6 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile6.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile6.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigAllocProfile7 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile7.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigAllocProfile7.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigPortsProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigPortsProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigPortsProfile.setDescription(' ')
ltp8xONTConfigRFPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("noChange", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigRFPortEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigRFPortEnabled.setDescription(' ')
ltp8xONTConfigHostControlledOMCI = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigHostControlledOMCI.setStatus('deprecated')
if mibBuilder.loadTexts: ltp8xONTConfigHostControlledOMCI.setDescription(' ')
ltp8xONTConfigVoiceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigVoiceProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigVoiceProfile.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 35), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigEnabled.setDescription(' ')
ltp8xONTConfigScriptingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigScriptingProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigScriptingProfile.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigBerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigBerInterval.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigBerInterval.setDescription('BER interval value to send to ONT.')
ltp8xONTConfigBerUpdatePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigBerUpdatePeriod.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigBerUpdatePeriod.setDescription('Mininal time between two consecutive BER mesuarements, sec.')
ltp8xONTConfigOMCIErrorTolerant = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigOMCIErrorTolerant.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigOMCIErrorTolerant.setDescription('Continue configuration after OMCI errors.')
ltp8xONTConfigCustomModel = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("script", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigCustomModel.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigCustomModel.setDescription('Ont custom configuration model.')
ltp8xONTConfigEMSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 41), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigEMSProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigEMSProfile.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigBandwidthManagementACSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 42), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigBandwidthManagementACSProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigBandwidthManagementACSProfile.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTConfigTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 4, 1, 43), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTConfigTemplate.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigTemplate.setDescription('Value 65535 means that template is not assigned.')
ltp8xONTServiceOverrideTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 5), )
if mibBuilder.loadTexts: ltp8xONTServiceOverrideTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltp8xONTServiceOverrideTable.setDescription(' ')
ltp8xONTServiceOverrideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 5, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTServiceOverrideID"), (0, "ELTEX-LTP8X", "ltp8xONTServiceOverrideSlot"), (0, "ELTEX-LTP8X", "ltp8xONTServiceOverrideSerial"))
if mibBuilder.loadTexts: ltp8xONTServiceOverrideEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceOverrideEntry.setDescription('')
ltp8xONTServiceOverrideID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceOverrideID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceOverrideID.setDescription(' ')
ltp8xONTServiceOverrideSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceOverrideSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceOverrideSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTServiceOverrideSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 5, 1, 3), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceOverrideSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceOverrideSerial.setDescription(' ')
ltp8xONTServiceOverrideEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTServiceOverrideEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceOverrideEnabled.setDescription(' ')
ltp8xONTServiceOverrideCustomerVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 5, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTServiceOverrideCustomerVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceOverrideCustomerVID.setDescription(' ')
ltp8xONTServiceOverrideCustomerCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 5, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTServiceOverrideCustomerCOS.setStatus('deprecated')
if mibBuilder.loadTexts: ltp8xONTServiceOverrideCustomerCOS.setDescription('This entry is deprecated')
ltp8xONTManagementProfileTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 6), )
if mibBuilder.loadTexts: ltp8xONTManagementProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTManagementProfileTable.setDescription(' ')
ltp8xONTManagementProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 6, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTManagementID"))
if mibBuilder.loadTexts: ltp8xONTManagementProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTManagementProfileEntry.setDescription('')
ltp8xONTManagementID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTManagementID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTManagementID.setDescription(' ')
ltp8xONTManagementDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTManagementDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTManagementDescription.setDescription(' ')
ltp8xONTManagementName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTManagementName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTManagementName.setDescription(' ')
ltp8xONTManagementCrossConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 6, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTManagementCrossConnect.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTManagementCrossConnect.setDescription(' ')
ltp8xONTManagementURL = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTManagementURL.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTManagementURL.setDescription(' ')
ltp8xONTManagementUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 6, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTManagementUsername.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTManagementUsername.setDescription(' ')
ltp8xONTManagementPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 6, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTManagementPassword.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTManagementPassword.setDescription(' ')
ltp8xONTManagementOMCIConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 6, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTManagementOMCIConfiguration.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTManagementOMCIConfiguration.setDescription(' ')
ltp8xONTManagementRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 6, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTManagementRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTManagementRowStatus.setDescription(' ')
ltp8xONTMulticastProfileTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 7), )
if mibBuilder.loadTexts: ltp8xONTMulticastProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastProfileTable.setDescription(' ')
ltp8xONTMulticastProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 7, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTMulticastID"))
if mibBuilder.loadTexts: ltp8xONTMulticastProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastProfileEntry.setDescription('')
ltp8xONTMulticastID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastID.setDescription(' ')
ltp8xONTMulticastDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastDescription.setDescription(' ')
ltp8xONTMulticastName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastName.setDescription(' ')
ltp8xONTServicesProfileTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 8), )
if mibBuilder.loadTexts: ltp8xONTServicesProfileTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltp8xONTServicesProfileTable.setDescription(' ')
ltp8xONTServicesProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 8, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTServicesID"))
if mibBuilder.loadTexts: ltp8xONTServicesProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServicesProfileEntry.setDescription('')
ltp8xONTServicesID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServicesID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServicesID.setDescription(' ')
ltp8xONTServicesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServicesDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServicesDescription.setDescription(' ')
ltp8xONTServicesName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServicesName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServicesName.setDescription(' ')
ltp8xONTCrossConnectProfileTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9), )
if mibBuilder.loadTexts: ltp8xONTCrossConnectProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectProfileTable.setDescription(' ')
ltp8xONTCrossConnectProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTCrossConnectID"))
if mibBuilder.loadTexts: ltp8xONTCrossConnectProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectProfileEntry.setDescription('')
ltp8xONTCrossConnectID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCrossConnectID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectID.setDescription(' ')
ltp8xONTCrossConnectDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCrossConnectDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectDescription.setDescription(' ')
ltp8xONTCrossConnectName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCrossConnectName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectName.setDescription(' ')
ltp8xONTCrossConnectModel = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ontRg", 0), ("ont", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCrossConnectModel.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectModel.setDescription(' ')
ltp8xONTCrossConnectBridgeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCrossConnectBridgeGroup.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectBridgeGroup.setDescription(' ')
ltp8xONTCrossConnectTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("singleTagged", 0), ("doubleTagged", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCrossConnectTagMode.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectTagMode.setDescription(' ')
ltp8xONTCrossConnectOuterVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65535))).clone(namedValues=NamedValues(("auto", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCrossConnectOuterVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectOuterVID.setDescription('Values from -100 to -131 specify usage of terminal-vid. -100 - terminal-vid-0, -131 - terminal-vid-31')
ltp8xONTCrossConnectOuterCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("unused", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCrossConnectOuterCOS.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectOuterCOS.setDescription('Values from 100 to 131 specify usage of terminal-vid. 100 - terminal-vid-0, 131 - terminal-vid-31')
ltp8xONTCrossConnectInnerVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65535))).clone(namedValues=NamedValues(("auto", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCrossConnectInnerVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectInnerVID.setDescription('Values from -100 to -131 specify usage of terminal-vid. -100 - terminal-vid-0, -131 - terminal-vid-31')
ltp8xONTCrossConnectUVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65535))).clone(namedValues=NamedValues(("auto", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCrossConnectUVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectUVID.setDescription('Values from -100 to -131 specify usage of terminal-vid. -100 - terminal-vid-0, -131 - terminal-vid-31')
ltp8xONTCrossConnectUCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("unused", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCrossConnectUCOS.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectUCOS.setDescription('Values from 100 to 131 specify usage of terminal-vid. 100 - terminal-vid-0, 131 - terminal-vid-31')
ltp8xONTCrossConnectMacTableEntryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(127))).clone(namedValues=NamedValues(("unlimited", 127)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCrossConnectMacTableEntryLimit.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectMacTableEntryLimit.setDescription(' ')
ltp8xONTCrossConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("general", 0), ("multicast", 1), ("management", 2), ("voice", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCrossConnectType.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectType.setDescription(' ')
ltp8xONTCrossConnectIphostEid = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCrossConnectIphostEid.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectIphostEid.setDescription(' ')
ltp8xONTCrossConnectPriorityQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCrossConnectPriorityQueue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectPriorityQueue.setDescription('Priority queue for upstream traffic. 0-7')
ltp8xONTCrossConnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 9, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCrossConnectRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCrossConnectRowStatus.setDescription(' ')
ltp8xONTMulticastGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 10), )
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsTable.setDescription(' ')
ltp8xONTMulticastGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 10, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTMulticastGroupsSlot"), (0, "ELTEX-LTP8X", "ltp8xONTMulticastGroupsSerial"), (0, "ELTEX-LTP8X", "ltp8xONTMulticastGroupsEntryID"))
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsEntry.setDescription('')
ltp8xONTMulticastGroupsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsSlot.setDescription(' ')
ltp8xONTMulticastGroupsSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 10, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsSerial.setDescription(' ')
ltp8xONTMulticastGroupsEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsEntryID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsEntryID.setDescription(' ')
ltp8xONTMulticastGroupsVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsVLAN.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsVLAN.setDescription(' ')
ltp8xONTMulticastGroupsSourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 10, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsSourceIP.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsSourceIP.setDescription(' ')
ltp8xONTMulticastGroupsDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 10, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsDestIP.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsDestIP.setDescription(' ')
ltp8xONTMulticastGroupsBEBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 10, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsBEBandwidth.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsBEBandwidth.setDescription('Best efforts actual bandwidth estimate, bytes per second')
ltp8xONTMulticastGroupsClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 10, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsClientIP.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsClientIP.setDescription('Client (set-top box) IP address, that is, the IP address of the device currently joined')
ltp8xONTMulticastGroupsRecentJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 10, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsRecentJoinTime.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastGroupsRecentJoinTime.setDescription('Time since the most recent join of this client to the IP channel, in seconds')
ltp8xONTBufferZoneTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 11), )
if mibBuilder.loadTexts: ltp8xONTBufferZoneTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTBufferZoneTable.setDescription('A buffer table, to prevent GETNEXT and GETBULK requests from\n\t\t\t\t\t\t peeking into ONTAddressTable, because it can be very time-consuming.')
ltp8xONTBufferZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 11, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTBufferZoneValue"))
if mibBuilder.loadTexts: ltp8xONTBufferZoneEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTBufferZoneEntry.setDescription('')
ltp8xONTBufferZoneValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTBufferZoneValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTBufferZoneValue.setDescription(' ')
ltp8xONTAddressTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12), )
if mibBuilder.loadTexts: ltp8xONTAddressTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressTable.setDescription(' ')
ltp8xONTAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTAddressSlot"), (0, "ELTEX-LTP8X", "ltp8xONTAddressSerial"), (0, "ELTEX-LTP8X", "ltp8xONTAddressEntryID"))
if mibBuilder.loadTexts: ltp8xONTAddressEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressEntry.setDescription('')
ltp8xONTAddressSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTAddressSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressSlot.setDescription(' ')
ltp8xONTAddressSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTAddressSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressSerial.setDescription(' ')
ltp8xONTAddressEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTAddressEntryID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressEntryID.setDescription(' ')
ltp8xONTAddressPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTAddressPriority.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressPriority.setDescription('Priority of the packets')
ltp8xONTAddressCVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTAddressCVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressCVID.setDescription('C-VLAN ID of the packet')
ltp8xONTAddressSVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTAddressSVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressSVID.setDescription('S-VLAN ID of the packet')
ltp8xONTAddressMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTAddressMacAddress.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressMacAddress.setDescription('MAC address')
ltp8xONTAddressCPUDestined = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTAddressCPUDestined.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressCPUDestined.setDescription('Whether packet should be forwarded to CPU')
ltp8xONTAddressDatapathForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTAddressDatapathForwarding.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressDatapathForwarding.setDescription('Whether packet should be forwarded to Datapath')
ltp8xONTAddressUniPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTAddressUniPort.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressUniPort.setDescription('')
ltp8xONTAddressEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12, 1, 11), AddressEntryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTAddressEntryType.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressEntryType.setDescription('')
ltp8xONTAddressAge = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTAddressAge.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressAge.setDescription('The age of the entry')
ltp8xONTAddressGEMPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTAddressGEMPortId.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressGEMPortId.setDescription('GEM Port-ID from which packet has come')
ltp8xONTAddressUVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTAddressUVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAddressUVID.setDescription('U-VLAN ID of the packet')
ltp8xONTMassUpdateFirmwareTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 13), )
if mibBuilder.loadTexts: ltp8xONTMassUpdateFirmwareTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMassUpdateFirmwareTable.setDescription(' ')
ltp8xONTMassUpdateFirmwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 13, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTMassUpdateFirmwareSlot"))
if mibBuilder.loadTexts: ltp8xONTMassUpdateFirmwareEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMassUpdateFirmwareEntry.setDescription('')
ltp8xONTMassUpdateFirmwareSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 13, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMassUpdateFirmwareSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMassUpdateFirmwareSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTMassUpdateFirmwareAction = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 13, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTMassUpdateFirmwareAction.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMassUpdateFirmwareAction.setDescription('Set to 1 to initiate ONT mass update')
ltp8xONTCustomCrossConnectTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 14), )
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectTable.setDescription(' ')
ltp8xONTCustomCrossConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 14, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTCustomCrossConnectSlot"), (0, "ELTEX-LTP8X", "ltp8xONTCustomCrossConnectSerial"), (0, "ELTEX-LTP8X", "ltp8xONTCustomCrossConnectID"))
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectEntry.setDescription('')
ltp8xONTCustomCrossConnectSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 14, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTCustomCrossConnectSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 14, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectSerial.setDescription(' ')
ltp8xONTCustomCrossConnectID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 14, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectID.setDescription(' ')
ltp8xONTCustomCrossConnectEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 14, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectEnabled.setDescription(' ')
ltp8xONTCustomCrossConnectVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 14, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectVID.setDescription(' ')
ltp8xONTCustomCrossConnectCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("unused", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectCOS.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectCOS.setDescription(' ')
ltp8xONTCustomCrossConnectSVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 14, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectSVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTCustomCrossConnectSVID.setDescription('-1 - unused')
ltp8xONTACSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15), )
if mibBuilder.loadTexts: ltp8xONTACSConfigTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigTable.setDescription(' ')
ltp8xONTACSConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTACSConfigSerial"))
if mibBuilder.loadTexts: ltp8xONTACSConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigEntry.setDescription('')
ltp8xONTACSConfigSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 1), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTACSConfigSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigSerial.setDescription('')
ltp8xONTACSUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSUserID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSUserID.setDescription(' ')
ltp8xONTACSConfigProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigProfile.setDescription(' ')
ltp8xONTACSConfigVoice1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigVoice1Enable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigVoice1Enable.setDescription(' ')
ltp8xONTACSConfigVoice1Number = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigVoice1Number.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigVoice1Number.setDescription(' ')
ltp8xONTACSConfigVoice1Password = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigVoice1Password.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigVoice1Password.setDescription(' ')
ltp8xONTACSConfigVoice2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigVoice2Enable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigVoice2Enable.setDescription(' ')
ltp8xONTACSConfigVoice2Number = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigVoice2Number.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigVoice2Number.setDescription(' ')
ltp8xONTACSConfigVoice2Password = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigVoice2Password.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigVoice2Password.setDescription(' ')
ltp8xONTACSConfigSIPProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigSIPProxy.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigSIPProxy.setDescription(' ')
ltp8xONTACSConfigPPPLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigPPPLogin.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigPPPLogin.setDescription(' ')
ltp8xONTACSConfigPPPPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigPPPPassword.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigPPPPassword.setDescription(' ')
ltp8xONTACSConfigInternetVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigInternetVlan.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigInternetVlan.setDescription(' ')
ltp8xONTACSConfigResetToDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigResetToDefaults.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigResetToDefaults.setDescription(' ')
ltp8xONTACSConfigReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigReboot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigReboot.setDescription(' ')
ltp8xONTACSConfigReconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigReconfigure.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigReconfigure.setDescription(' ')
ltp8xONTACSConfigDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 15, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigDelete.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigDelete.setDescription('Set to 1 to delete config in ACS')
ltp8xONTACSProfilesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 16), )
if mibBuilder.loadTexts: ltp8xONTACSProfilesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSProfilesTable.setDescription(' ')
ltp8xONTACSProfilesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 16, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTACSProfilesName"))
if mibBuilder.loadTexts: ltp8xONTACSProfilesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSProfilesEntry.setDescription('')
ltp8xONTACSProfilesName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 16, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTACSProfilesName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSProfilesName.setDescription(' ')
ltp8xONTACSProfilesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTACSProfilesDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSProfilesDescription.setDescription(' ')
ltp8xONTACSConfigAltTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17), )
if mibBuilder.loadTexts: ltp8xONTACSConfigAltTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltTable.setDescription(' ')
ltp8xONTACSConfigAltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTACSConfigAltSerial"))
if mibBuilder.loadTexts: ltp8xONTACSConfigAltEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltEntry.setDescription('')
ltp8xONTACSConfigAltSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1, 1), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTACSConfigAltSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltSerial.setDescription('')
ltp8xONTACSConfigAltSubscriberID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigAltSubscriberID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltSubscriberID.setDescription(' ')
ltp8xONTACSConfigAltProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigAltProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltProfile.setDescription(' ')
ltp8xONTACSConfigAltVoice1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigAltVoice1Enable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltVoice1Enable.setDescription(' ')
ltp8xONTACSConfigAltVoice1Number = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigAltVoice1Number.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltVoice1Number.setDescription(' ')
ltp8xONTACSConfigAltVoice1Password = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigAltVoice1Password.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltVoice1Password.setDescription(' ')
ltp8xONTACSConfigAltVoice2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigAltVoice2Enable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltVoice2Enable.setDescription(' ')
ltp8xONTACSConfigAltVoice2Number = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigAltVoice2Number.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltVoice2Number.setDescription(' ')
ltp8xONTACSConfigAltVoice2Password = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigAltVoice2Password.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltVoice2Password.setDescription(' ')
ltp8xONTACSConfigAltSIPProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigAltSIPProxy.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltSIPProxy.setDescription(' ')
ltp8xONTACSConfigAltPPPLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigAltPPPLogin.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltPPPLogin.setDescription(' ')
ltp8xONTACSConfigAltPPPPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigAltPPPPassword.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltPPPPassword.setDescription(' ')
ltp8xONTACSConfigAltInternetVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigAltInternetVlan.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltInternetVlan.setDescription(' ')
ltp8xONTACSConfigAltResetToDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigAltResetToDefaults.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltResetToDefaults.setDescription(' ')
ltp8xONTACSConfigAltRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 17, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSConfigAltRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSConfigAltRowStatus.setDescription('')
ltp8xONTShapingProfileTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 18), )
if mibBuilder.loadTexts: ltp8xONTShapingProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTShapingProfileTable.setDescription(' ')
ltp8xONTShapingProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 18, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTShapingID"))
if mibBuilder.loadTexts: ltp8xONTShapingProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTShapingProfileEntry.setDescription('')
ltp8xONTShapingID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 18, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTShapingID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTShapingID.setDescription(' ')
ltp8xONTShapingDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 18, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTShapingDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTShapingDescription.setDescription(' ')
ltp8xONTShapingName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 18, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTShapingName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTShapingName.setDescription(' ')
ltp8xONTShapingDownstreamOnePolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 18, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTShapingDownstreamOnePolicer.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTShapingDownstreamOnePolicer.setDescription(' ')
ltp8xONTShapingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 18, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTShapingRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTShapingRowStatus.setDescription(' ')
ltp8xONTShapingProfileServicesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 19), )
if mibBuilder.loadTexts: ltp8xONTShapingProfileServicesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTShapingProfileServicesTable.setDescription(' ')
ltp8xONTShapingProfileServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 19, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTShapingID"), (0, "ELTEX-LTP8X", "ltp8xONTShapingCrossConnect"))
if mibBuilder.loadTexts: ltp8xONTShapingProfileServicesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTShapingProfileServicesEntry.setDescription('')
ltp8xONTShapingCrossConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 19, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTShapingCrossConnect.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTShapingCrossConnect.setDescription(' ')
ltp8xONTShapingUpstreamEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 19, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTShapingUpstreamEnable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTShapingUpstreamEnable.setDescription(' ')
ltp8xONTShapingUpstreamCommitedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 19, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTShapingUpstreamCommitedRate.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTShapingUpstreamCommitedRate.setDescription('Commited bandwidth (In Kbit/sec, with granularity of 64), 0-2488320, 2488320')
ltp8xONTShapingUpstreamPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 19, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTShapingUpstreamPeakRate.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTShapingUpstreamPeakRate.setDescription('Peak bandwidth (In Kbit/sec, with granularity of 64), 0-2488320, 2488320')
ltp8xONTShapingDownstreamEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 19, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTShapingDownstreamEnable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTShapingDownstreamEnable.setDescription(' ')
ltp8xONTShapingDownstreamPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 19, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTShapingDownstreamPeakRate.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTShapingDownstreamPeakRate.setDescription('Maximum commited bandwidth (In Kbit/sec, with granularity of 64), 0-2488320, 2488320')
ltp8xONTACSState = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 20))
ltp8xONTACSStateTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 20, 1), )
if mibBuilder.loadTexts: ltp8xONTACSStateTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSStateTable.setDescription(' ')
ltp8xONTACSStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 20, 1, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTACSStateBindingID"))
if mibBuilder.loadTexts: ltp8xONTACSStateEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSStateEntry.setDescription('')
ltp8xONTACSStateBindingID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTACSStateBindingID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSStateBindingID.setDescription(' ')
ltp8xONTACSStateSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 20, 1, 1, 2), ONTSerial()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSStateSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSStateSerial.setDescription(' ')
ltp8xONTACSStateBindingName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 20, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSStateBindingName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSStateBindingName.setDescription(' ')
ltp8xONTACSStateBindingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 20, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSStateBindingValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSStateBindingValue.setDescription(' ')
ltp8xONTACSStateDeleteRow = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 20, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSStateDeleteRow.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSStateDeleteRow.setDescription('Set this to 1 to delete row')
ltp8xONTACSStateCommitRequest = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 20, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSStateCommitRequest.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSStateCommitRequest.setDescription('Set this to 1 to commit request')
ltp8xONTACSStateClear = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 20, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSStateClear.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSStateClear.setDescription('Set this to 1 to clear table')
ltp8xONTACSStateMaxIndex = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 20, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTACSStateMaxIndex.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSStateMaxIndex.setDescription('')
ltp8xONTACSStateLastSetIndex = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 20, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTACSStateLastSetIndex.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSStateLastSetIndex.setDescription('')
ltp8xONTACSStateLock = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 20, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSStateLock.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSStateLock.setDescription('Set 1 - to lock table, 2 - to unlock table')
ltp8xONTStaticWANConfigTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 21), )
if mibBuilder.loadTexts: ltp8xONTStaticWANConfigTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStaticWANConfigTable.setDescription(' ')
ltp8xONTStaticWANConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 21, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTStaticWANConfigSerial"), (0, "ELTEX-LTP8X", "ltp8xONTStaticWANConfigConnection"))
if mibBuilder.loadTexts: ltp8xONTStaticWANConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStaticWANConfigEntry.setDescription('')
ltp8xONTStaticWANConfigSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 21, 1, 1), ONTSerial())
if mibBuilder.loadTexts: ltp8xONTStaticWANConfigSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStaticWANConfigSerial.setDescription('')
ltp8xONTStaticWANConfigConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 21, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTStaticWANConfigConnection.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStaticWANConfigConnection.setDescription(' ')
ltp8xONTStaticWANConfigDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 21, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTStaticWANConfigDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStaticWANConfigDefaultGateway.setDescription(' ')
ltp8xONTStaticWANConfigExternalIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 21, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTStaticWANConfigExternalIPAddress.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStaticWANConfigExternalIPAddress.setDescription(' ')
ltp8xONTStaticWANConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 21, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTStaticWANConfigSubnetMask.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStaticWANConfigSubnetMask.setDescription(' ')
ltp8xONTBandwidthManagementProfileTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 22), )
if mibBuilder.loadTexts: ltp8xONTBandwidthManagementProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTBandwidthManagementProfileTable.setDescription(' ')
ltp8xONTBandwidthManagementProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 22, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTBandwidthManagementID"))
if mibBuilder.loadTexts: ltp8xONTBandwidthManagementProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTBandwidthManagementProfileEntry.setDescription('')
ltp8xONTBandwidthManagementID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 22, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTBandwidthManagementID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTBandwidthManagementID.setDescription(' ')
ltp8xONTBandwidthManagementDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 22, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTBandwidthManagementDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTBandwidthManagementDescription.setDescription(' ')
ltp8xONTBandwidthManagementName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 22, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTBandwidthManagementName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTBandwidthManagementName.setDescription(' ')
ltp8xONTServiceBandwidthManagementTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 23), )
if mibBuilder.loadTexts: ltp8xONTServiceBandwidthManagementTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceBandwidthManagementTable.setDescription(' ')
ltp8xONTServiceBandwidthManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 23, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTServiceBandwidthManagementServiceID"), (0, "ELTEX-LTP8X", "ltp8xONTServiceBandwidthManagementSlot"), (0, "ELTEX-LTP8X", "ltp8xONTServiceBandwidthManagementSerial"))
if mibBuilder.loadTexts: ltp8xONTServiceBandwidthManagementEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceBandwidthManagementEntry.setDescription('')
ltp8xONTServiceBandwidthManagementServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 23, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceBandwidthManagementServiceID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceBandwidthManagementServiceID.setDescription(' ')
ltp8xONTServiceBandwidthManagementSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 23, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceBandwidthManagementSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceBandwidthManagementSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTServiceBandwidthManagementSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 23, 1, 3), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTServiceBandwidthManagementSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceBandwidthManagementSerial.setDescription(' ')
ltp8xONTServiceBandwidthManagementProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 23, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTServiceBandwidthManagementProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTServiceBandwidthManagementProfile.setDescription(' ')
ltp8xONTTemplates = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24))
ltp8xONTTemplateValuesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1), )
if mibBuilder.loadTexts: ltp8xONTTemplateValuesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesTable.setDescription(' ')
ltp8xONTTemplateValuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTTemplateValuesID"))
if mibBuilder.loadTexts: ltp8xONTTemplateValuesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesEntry.setDescription('')
ltp8xONTTemplateValuesID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTTemplateValuesID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesID.setDescription('Template index')
ltp8xONTTemplateValuesName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesName.setDescription('Template index')
ltp8xONTTemplateValuesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesDescription.setDescription('Template index')
ltp8xONTTemplateValuesSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 4), ONTSerial()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesSerial.setDescription('')
ltp8xONTTemplateValuesPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesPassword.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesPassword.setDescription(' ')
ltp8xONTTemplateValuesFecUp = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesFecUp.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesFecUp.setDescription('')
ltp8xONTTemplateValuesManagementProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesManagementProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesManagementProfile.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesCrossConnectProfile0 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile0.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile0.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesCrossConnectProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile1.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile1.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesCrossConnectProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile2.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile2.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesCrossConnectProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile3.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile3.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesCrossConnectProfile4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile4.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile4.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesCrossConnectProfile5 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile5.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile5.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesCrossConnectProfile6 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile6.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile6.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesCrossConnectProfile7 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile7.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesCrossConnectProfile7.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesShapingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesShapingProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesShapingProfile.setDescription('')
ltp8xONTTemplateValuesDownstreamBroadcastEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesDownstreamBroadcastEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesDownstreamBroadcastEnabled.setDescription('Is broadcast enabled for this ONT')
ltp8xONTTemplateValuesAllocProfile0 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile0.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile0.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesAllocProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile1.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile1.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesAllocProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile2.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile2.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesAllocProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile3.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile3.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesAllocProfile4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile4.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile4.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesAllocProfile5 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile5.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile5.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesAllocProfile6 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile6.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile6.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesAllocProfile7 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile7.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesAllocProfile7.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesPortsProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesPortsProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesPortsProfile.setDescription(' ')
ltp8xONTTemplateValuesRFPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("noChange", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesRFPortEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesRFPortEnabled.setDescription(' ')
ltp8xONTTemplateValuesScriptingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesScriptingProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesScriptingProfile.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateValuesBerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesBerInterval.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesBerInterval.setDescription('BER interval value to send to ONT.')
ltp8xONTTemplateValuesBerUpdatePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesBerUpdatePeriod.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesBerUpdatePeriod.setDescription('Mininal time between two consecutive BER mesuarements, sec.')
ltp8xONTTemplateValuesOMCIErrorTolerant = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesOMCIErrorTolerant.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesOMCIErrorTolerant.setDescription('Continue configuration after OMCI errors.')
ltp8xONTTemplateValuesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 1, 1, 100), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateValuesRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateValuesRowStatus.setDescription(' ')
ltp8xONTTemplateOverridesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2), )
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesTable.setDescription(' ')
ltp8xONTTemplateOverridesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTTemplateValuesID"))
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesEntry.setDescription('')
ltp8xONTTemplateOverridesSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesSerial.setDescription('')
ltp8xONTTemplateOverridesPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesPassword.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesPassword.setDescription(' ')
ltp8xONTTemplateOverridesFecUp = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesFecUp.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesFecUp.setDescription('')
ltp8xONTTemplateOverridesManagementProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesManagementProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesManagementProfile.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesCrossConnectProfile0 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile0.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile0.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesCrossConnectProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile1.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile1.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesCrossConnectProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile2.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile2.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesCrossConnectProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile3.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile3.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesCrossConnectProfile4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile4.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile4.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesCrossConnectProfile5 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile5.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile5.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesCrossConnectProfile6 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile6.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile6.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesCrossConnectProfile7 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile7.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesCrossConnectProfile7.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesShapingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesShapingProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesShapingProfile.setDescription('')
ltp8xONTTemplateOverridesDownstreamBroadcastEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesDownstreamBroadcastEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesDownstreamBroadcastEnabled.setDescription('Is broadcast enabled for this ONT')
ltp8xONTTemplateOverridesAllocProfile0 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile0.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile0.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesAllocProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile1.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile1.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesAllocProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile2.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile2.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesAllocProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile3.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile3.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesAllocProfile4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile4.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile4.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesAllocProfile5 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile5.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile5.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesAllocProfile6 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile6.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile6.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesAllocProfile7 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile7.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesAllocProfile7.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesPortsProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesPortsProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesPortsProfile.setDescription(' ')
ltp8xONTTemplateOverridesRFPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 32), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesRFPortEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesRFPortEnabled.setDescription(' ')
ltp8xONTTemplateOverridesScriptingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 36), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesScriptingProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesScriptingProfile.setDescription('Value 65535 means that profile is not assigned.')
ltp8xONTTemplateOverridesBerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 37), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesBerInterval.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesBerInterval.setDescription('BER interval value to send to ONT.')
ltp8xONTTemplateOverridesBerUpdatePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 38), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesBerUpdatePeriod.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesBerUpdatePeriod.setDescription('Mininal time between two consecutive BER mesuarements, sec.')
ltp8xONTTemplateOverridesOMCIErrorTolerant = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 2, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesOMCIErrorTolerant.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateOverridesOMCIErrorTolerant.setDescription('Continue configuration after OMCI errors.')
ltp8xONTTemplateServicesValuesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 10), )
if mibBuilder.loadTexts: ltp8xONTTemplateServicesValuesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateServicesValuesTable.setDescription(' ')
ltp8xONTTemplateServicesValuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 10, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTTemplateValuesID"), (0, "ELTEX-LTP8X", "ltp8xONTTemplateServicesValuesServiceID"))
if mibBuilder.loadTexts: ltp8xONTTemplateServicesValuesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateServicesValuesEntry.setDescription('')
ltp8xONTTemplateServicesValuesServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTTemplateServicesValuesServiceID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateServicesValuesServiceID.setDescription('')
ltp8xONTTemplateServicesValuesCrossConnectProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 10, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateServicesValuesCrossConnectProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateServicesValuesCrossConnectProfile.setDescription('')
ltp8xONTTemplateServicesValuesDBAProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 10, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateServicesValuesDBAProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateServicesValuesDBAProfile.setDescription('')
ltp8xONTTemplateServicesOverridesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 11), )
if mibBuilder.loadTexts: ltp8xONTTemplateServicesOverridesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateServicesOverridesTable.setDescription(' ')
ltp8xONTTemplateServicesOverridesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 11, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTTemplateValuesID"), (0, "ELTEX-LTP8X", "ltp8xONTTemplateServicesOverridesServiceID"))
if mibBuilder.loadTexts: ltp8xONTTemplateServicesOverridesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateServicesOverridesEntry.setDescription('')
ltp8xONTTemplateServicesOverridesServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTTemplateServicesOverridesServiceID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateServicesOverridesServiceID.setDescription('')
ltp8xONTTemplateServicesOverridesCrossConnectProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 11, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateServicesOverridesCrossConnectProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateServicesOverridesCrossConnectProfile.setDescription('')
ltp8xONTTemplateServicesOverridesDBAProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 24, 11, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTTemplateServicesOverridesDBAProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTTemplateServicesOverridesDBAProfile.setDescription('')
ltp8xONTFullServicesConfigTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 25), )
if mibBuilder.loadTexts: ltp8xONTFullServicesConfigTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFullServicesConfigTable.setDescription(' ')
ltp8xONTFullServicesConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 25, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTFullServicesConfigSlot"), (0, "ELTEX-LTP8X", "ltp8xONTFullServicesConfigSerial"), (0, "ELTEX-LTP8X", "ltp8xONTFullServicesConfigServiceID"))
if mibBuilder.loadTexts: ltp8xONTFullServicesConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFullServicesConfigEntry.setDescription('')
ltp8xONTFullServicesConfigSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 25, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTFullServicesConfigSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFullServicesConfigSlot.setDescription('Slot index, for LTP - always 1')
ltp8xONTFullServicesConfigSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 25, 1, 2), ONTSerial())
if mibBuilder.loadTexts: ltp8xONTFullServicesConfigSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFullServicesConfigSerial.setDescription('')
ltp8xONTFullServicesConfigServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 25, 1, 3), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTFullServicesConfigServiceID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFullServicesConfigServiceID.setDescription('')
ltp8xONTFullServicesConfigCrossConnectProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 25, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFullServicesConfigCrossConnectProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFullServicesConfigCrossConnectProfile.setDescription('')
ltp8xONTFullServicesConfigDBAProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 25, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFullServicesConfigDBAProfile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFullServicesConfigDBAProfile.setDescription('')
ltp8xONTSelectiveTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 26), )
if mibBuilder.loadTexts: ltp8xONTSelectiveTunnelTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTSelectiveTunnelTable.setDescription(' ')
ltp8xONTSelectiveTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 26, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTSelectiveTunnelSlot"), (0, "ELTEX-LTP8X", "ltp8xONTSelectiveTunnelSerial"), (0, "ELTEX-LTP8X", "ltp8xONTSelectiveTunnelServiceID"), (0, "ELTEX-LTP8X", "ltp8xONTSelectiveTunnelUVIDIndex"))
if mibBuilder.loadTexts: ltp8xONTSelectiveTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTSelectiveTunnelEntry.setDescription('')
ltp8xONTSelectiveTunnelSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 26, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTSelectiveTunnelSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTSelectiveTunnelSlot.setDescription('Slot index, for LTP - always 1')
ltp8xONTSelectiveTunnelSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 26, 1, 2), ONTSerial())
if mibBuilder.loadTexts: ltp8xONTSelectiveTunnelSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTSelectiveTunnelSerial.setDescription('')
ltp8xONTSelectiveTunnelServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 26, 1, 3), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTSelectiveTunnelServiceID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTSelectiveTunnelServiceID.setDescription('')
ltp8xONTSelectiveTunnelUVIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 26, 1, 4), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTSelectiveTunnelUVIDIndex.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTSelectiveTunnelUVIDIndex.setDescription('')
ltp8xONTSelectiveTunnelUVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 26, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTSelectiveTunnelUVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTSelectiveTunnelUVID.setDescription('-1 - means that uvid not specified')
ltp8xONTFirmwares = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30))
ltp8xONTFirmwaresFilesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 1), )
if mibBuilder.loadTexts: ltp8xONTFirmwaresFilesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresFilesTable.setDescription(' ')
ltp8xONTFirmwaresFilesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 1, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTFirmwaresFilesEntryID"))
if mibBuilder.loadTexts: ltp8xONTFirmwaresFilesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresFilesEntry.setDescription('')
ltp8xONTFirmwaresFilesEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFirmwaresFilesEntryID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresFilesEntryID.setDescription(' ')
ltp8xONTFirmwaresFilesName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFirmwaresFilesName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresFilesName.setDescription(' ')
ltp8xONTFirmwaresFilesVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFirmwaresFilesVersion.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresFilesVersion.setDescription(' ')
ltp8xONTFirmwaresFilesHardware = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFirmwaresFilesHardware.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresFilesHardware.setDescription(' ')
ltp8xONTFirmwaresFilesDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresFilesDelete.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresFilesDelete.setDescription('Set this to 1 to delete file')
ltp8xONTFirmwaresTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 2), )
if mibBuilder.loadTexts: ltp8xONTFirmwaresTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresTable.setDescription(' ')
ltp8xONTFirmwaresEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 2, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTFirmwaresEntryID"))
if mibBuilder.loadTexts: ltp8xONTFirmwaresEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresEntry.setDescription('')
ltp8xONTFirmwaresEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFirmwaresEntryID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresEntryID.setDescription(' ')
ltp8xONTFirmwaresName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresName.setDescription('File name for firmware')
ltp8xONTFirmwaresVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFirmwaresVersion.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresVersion.setDescription(' ')
ltp8xONTFirmwaresHardware = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFirmwaresHardware.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresHardware.setDescription(' ')
ltp8xONTFirmwaresURL = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresURL.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresURL.setDescription(' ')
ltp8xONTFirmwaresScheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresScheduler.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresScheduler.setDescription(' ')
ltp8xONTFirmwaresSafeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresSafeMode.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresSafeMode.setDescription(' ')
ltp8xONTFirmwaresDowngrade = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresDowngrade.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresDowngrade.setDescription(' ')
ltp8xONTFirmwaresRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ltp8xONTFirmwaresRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresRowStatus.setDescription(' ')
ltp8xONTFirmwaresProfilesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 3), )
if mibBuilder.loadTexts: ltp8xONTFirmwaresProfilesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresProfilesTable.setDescription(' ')
ltp8xONTFirmwaresProfilesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 3, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTFirmwaresProfilesFWID"), (0, "ELTEX-LTP8X", "ltp8xONTFirmwaresProfilesName"))
if mibBuilder.loadTexts: ltp8xONTFirmwaresProfilesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresProfilesEntry.setDescription('')
ltp8xONTFirmwaresProfilesFWID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFirmwaresProfilesFWID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresProfilesFWID.setDescription(' ')
ltp8xONTFirmwaresProfilesName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFirmwaresProfilesName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresProfilesName.setDescription('')
ltp8xONTFirmwaresProfilesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ltp8xONTFirmwaresProfilesRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresProfilesRowStatus.setDescription('')
ltp8xONTFirmwaresSchedulerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 5))
ltp8xONTFirmwaresSchedulerDailyFrom = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresSchedulerDailyFrom.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresSchedulerDailyFrom.setDescription('Time in format HH:MM')
ltp8xONTFirmwaresSchedulerDailyTo = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresSchedulerDailyTo.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresSchedulerDailyTo.setDescription('Time in format HH:MM')
ltp8xONTFirmwaresSchedulerPeriodFrom = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresSchedulerPeriodFrom.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresSchedulerPeriodFrom.setDescription('Date in format YYYY-MM-DD')
ltp8xONTFirmwaresSchedulerPeriodTo = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresSchedulerPeriodTo.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresSchedulerPeriodTo.setDescription('Date in format YYYY-MM-DD')
ltp8xONTFirmwaresSchedulerWeeklyFrom = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 5, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresSchedulerWeeklyFrom.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresSchedulerWeeklyFrom.setDescription('Day of a week (1-7)')
ltp8xONTFirmwaresSchedulerWeeklyTo = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 5, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresSchedulerWeeklyTo.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresSchedulerWeeklyTo.setDescription('Day of a week (1-7)')
ltp8xONTFirmwaresSpecificsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 7), )
if mibBuilder.loadTexts: ltp8xONTFirmwaresSpecificsTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresSpecificsTable.setDescription(' ')
ltp8xONTFirmwaresSpecificsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 7, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTFirmwaresSpecificsName"))
if mibBuilder.loadTexts: ltp8xONTFirmwaresSpecificsEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresSpecificsEntry.setDescription('')
ltp8xONTFirmwaresSpecificsName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFirmwaresSpecificsName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresSpecificsName.setDescription(' ')
ltp8xONTFirmwaresSpecificsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresSpecificsVersion.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresSpecificsVersion.setDescription(' ')
ltp8xONTFirmwaresSpecificsHardware = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresSpecificsHardware.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresSpecificsHardware.setDescription(' ')
ltp8xONTFirmwaresSpecificsVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresSpecificsVendor.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresSpecificsVendor.setDescription(' ')
ltp8xONTFirmwaresSpecificsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 7, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresSpecificsRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresSpecificsRowStatus.setDescription('Set this to 1 to delete file')
ltp8xONTFirmwaresVersionPriorityFile = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresVersionPriorityFile.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresVersionPriorityFile.setDescription(' ')
ltp8xONTFirmwaresDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 10))
ltp8xONTFirmwaresDownloadIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 10, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresDownloadIPAddress.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresDownloadIPAddress.setDescription('TFTP server address')
ltp8xONTFirmwaresDownloadPath = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 10, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresDownloadPath.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresDownloadPath.setDescription(' ')
ltp8xONTFirmwaresDownloadAction = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 10, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresDownloadAction.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresDownloadAction.setDescription('Set to 1 to initiate download')
ltp8xONTFirmwaresDownloadResult = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notActive", 1), ("inProgess", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFirmwaresDownloadResult.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresDownloadResult.setDescription('')
ltp8xONTFirmwaresDownloadProtocol = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tftp", 1), ("http", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresDownloadProtocol.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresDownloadProtocol.setDescription('')
ltp8xONTFirmwaresDownloadPort = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 10, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwaresDownloadPort.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwaresDownloadPort.setDescription(' ')
ltp8xONTFirmwareUpdateViaOMCI = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 11))
ltp8xONTFirmwareUpdateViaOMCISlot = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 11, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwareUpdateViaOMCISlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwareUpdateViaOMCISlot.setDescription('Slot number. For LTP8X, always 1')
ltp8xONTFirmwareUpdateViaOMCISerial = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 11, 2), ONTSerial()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwareUpdateViaOMCISerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwareUpdateViaOMCISerial.setDescription('Serial number of ONT')
ltp8xONTFirmwareUpdateViaOMCIFilename = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 11, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwareUpdateViaOMCIFilename.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwareUpdateViaOMCIFilename.setDescription('Firmware file name as it shown in ltp8xONTFirmwaresFilesTable')
ltp8xONTFirmwareUpdateViaOMCIAction = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 11, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFirmwareUpdateViaOMCIAction.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFirmwareUpdateViaOMCIAction.setDescription('Set this to 1 to create update task')
ltp8xONTFWUpdateSchedulerTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 20), )
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerTable.setDescription(' ')
ltp8xONTFWUpdateSchedulerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 20, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTFWUpdateSchedulerSlot"), (0, "ELTEX-LTP8X", "ltp8xONTFWUpdateSchedulerTaskID"))
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerEntry.setDescription('')
ltp8xONTFWUpdateSchedulerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 20, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerSlot.setDescription(' ')
ltp8xONTFWUpdateSchedulerTaskID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 20, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerTaskID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerTaskID.setDescription(' ')
ltp8xONTFWUpdateSchedulerSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 20, 1, 3), ONTSerial()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerSerial.setDescription(' ')
ltp8xONTFWUpdateSchedulerTaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("scheduled", 0), ("inProgress", 1), ("failed", 2), ("done", 3), ("unnecessary", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerTaskState.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerTaskState.setDescription(' ')
ltp8xONTFWUpdateSchedulerFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 20, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerFilename.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerFilename.setDescription(' ')
ltp8xONTFWUpdateSchedulerTries = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 20, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerTries.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerTries.setDescription(' ')
ltp8xONTFWUpdateSchedulerONTChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 20, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerONTChannel.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerONTChannel.setDescription(' ')
ltp8xONTFWUpdateSchedulerONTId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 20, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerONTId.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerONTId.setDescription(' ')
ltp8xONTFWUpdateSchedulerUseSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 20, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerUseSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerUseSerial.setDescription(' ')
ltp8xONTFWUpdateSchedulerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 20, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTFWUpdateSchedulerRowStatus.setDescription(' ')
ltp8xONTAutoUpdateTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 22), )
if mibBuilder.loadTexts: ltp8xONTAutoUpdateTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAutoUpdateTable.setDescription(' ')
ltp8xONTAutoUpdateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 22, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTAutoUpdateDescription"))
if mibBuilder.loadTexts: ltp8xONTAutoUpdateEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAutoUpdateEntry.setDescription('')
ltp8xONTAutoUpdateDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 22, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: ltp8xONTAutoUpdateDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAutoUpdateDescription.setDescription(' ')
ltp8xONTAutoUpdateEquipmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 22, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAutoUpdateEquipmentID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAutoUpdateEquipmentID.setDescription(' ')
ltp8xONTAutoUpdateFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 22, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAutoUpdateFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAutoUpdateFirmwareVersion.setDescription(' ')
ltp8xONTAutoUpdateFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 22, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAutoUpdateFilename.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAutoUpdateFilename.setDescription(' ')
ltp8xONTAutoUpdateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("immediate", 1), ("postpone", 2), ("global", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAutoUpdateMode.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAutoUpdateMode.setDescription(' ')
ltp8xONTAutoUpdateFirmwareVersionMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 22, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAutoUpdateFirmwareVersionMatches.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAutoUpdateFirmwareVersionMatches.setDescription('')
ltp8xONTAutoUpdateDowngrade = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 22, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAutoUpdateDowngrade.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAutoUpdateDowngrade.setDescription(' ')
ltp8xONTAutoUpdateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 22, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAutoUpdateRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAutoUpdateRowStatus.setDescription(' ')
ltp8xONTAutoUpdateEnabled = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("immediate", 1), ("postpone", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAutoUpdateEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAutoUpdateEnabled.setDescription(' ')
ltp8xONTAllocProfileTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 40), )
if mibBuilder.loadTexts: ltp8xONTAllocProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAllocProfileTable.setDescription(' ')
ltp8xONTAllocProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 40, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTAllocID"))
if mibBuilder.loadTexts: ltp8xONTAllocProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAllocProfileEntry.setDescription('')
ltp8xONTAllocID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 40, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTAllocID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAllocID.setDescription(' ')
ltp8xONTAllocDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 40, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAllocDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAllocDescription.setDescription(' ')
ltp8xONTAllocName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 40, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAllocName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAllocName.setDescription(' ')
ltp8xONTAllocServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 40, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5))).clone(namedValues=NamedValues(("data", 0), ("voip", 2), ("cbr", 3), ("periodicAllocation", 4), ("type5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAllocServiceClass.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAllocServiceClass.setDescription(' ')
ltp8xONTAllocStatusReporting = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 40, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nsr", 0), ("type0", 1), ("type1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAllocStatusReporting.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAllocStatusReporting.setDescription(' ')
ltp8xONTAllocSize = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 40, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAllocSize.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAllocSize.setDescription('0-194400 Default: 48600')
ltp8xONTAllocPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 40, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAllocPeriod.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAllocPeriod.setDescription('0,1,2,4,8,16,32 Default: 8')
ltp8xONTAllocFixedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 40, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAllocFixedBandwidth.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAllocFixedBandwidth.setDescription('0-269248  Default:0')
ltp8xONTAllocGuaranteedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 40, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAllocGuaranteedBandwidth.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAllocGuaranteedBandwidth.setDescription('0-1273856 Default:64')
ltp8xONTAllocBestEffortBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 40, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAllocBestEffortBandwidth.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAllocBestEffortBandwidth.setDescription('0-1273856 Default:1273856')
ltp8xONTAllocRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 40, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTAllocRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTAllocRowStatus.setDescription(' ')
ltp8xONTPortsProfileTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41), )
if mibBuilder.loadTexts: ltp8xONTPortsProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsProfileTable.setDescription(' ')
ltp8xONTPortsProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTPortsID"))
if mibBuilder.loadTexts: ltp8xONTPortsProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsProfileEntry.setDescription('')
ltp8xONTPortsID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTPortsID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsID.setDescription(' ')
ltp8xONTPortsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsDescription.setDescription(' ')
ltp8xONTPortsName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsName.setDescription(' ')
ltp8xONTPortsIGMPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsIGMPVersion.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsIGMPVersion.setDescription('Values : 1,2,3. 0 means that MLD is active')
ltp8xONTPortsIGMPUpstreamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("snooping", 0), ("spr", 1), ("proxy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsIGMPUpstreamMode.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsIGMPUpstreamMode.setDescription('')
ltp8xONTPortsIGMPImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsIGMPImmediateLeave.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsIGMPImmediateLeave.setDescription('')
ltp8xONTPortsIGMPRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsIGMPRobustness.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsIGMPRobustness.setDescription('')
ltp8xONTPortsIGMPQuerierIP = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsIGMPQuerierIP.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsIGMPQuerierIP.setDescription('')
ltp8xONTPortsIGMPQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsIGMPQueryInterval.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsIGMPQueryInterval.setDescription('')
ltp8xONTPortsIGMPQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsIGMPQueryMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsIGMPQueryMaxResponseTime.setDescription('')
ltp8xONTPortsIGMPLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsIGMPLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsIGMPLastMemberQueryInterval.setDescription('')
ltp8xONTPortsVEIPMulticastEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsVEIPMulticastEnable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsVEIPMulticastEnable.setDescription('')
ltp8xONTPortsVEIPIGMPUpstreamVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsVEIPIGMPUpstreamVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsVEIPIGMPUpstreamVID.setDescription('')
ltp8xONTPortsVEIPIGMPUpstreamPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsVEIPIGMPUpstreamPriority.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsVEIPIGMPUpstreamPriority.setDescription('')
ltp8xONTPortsVEIPIGMPUpstreamTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("pass", 0), ("addTag", 1), ("replaceTag", 2), ("replaceVid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsVEIPIGMPUpstreamTagControl.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsVEIPIGMPUpstreamTagControl.setDescription('')
ltp8xONTPortsVEIPMaxGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsVEIPMaxGroups.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsVEIPMaxGroups.setDescription('')
ltp8xONTPortsVEIPMaxMulticastBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsVEIPMaxMulticastBandwidth.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsVEIPMaxMulticastBandwidth.setDescription('')
ltp8xONTPortsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsRowStatus.setDescription(' ')
ltp8xONTPortsVEIPIGMPDownstreamVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsVEIPIGMPDownstreamVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsVEIPIGMPDownstreamVID.setDescription('')
ltp8xONTPortsVEIPIGMPDownstreamPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsVEIPIGMPDownstreamPriority.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsVEIPIGMPDownstreamPriority.setDescription('')
ltp8xONTPortsVEIPIGMPDownstreamTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("pass", 0), ("removeTag", 1), ("addTag", 2), ("replaceTag", 3), ("replaceVid", 4), ("addTagSubscriberInfo", 5), ("replaceTagSubscriberInfo", 6), ("replaceVidSubscriberInfo", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsVEIPIGMPDownstreamTagControl.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsVEIPIGMPDownstreamTagControl.setDescription('')
ltp8xONTPortsMulticastIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ipv4", 0), ("ipv6", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMulticastIPVersion.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMulticastIPVersion.setDescription('')
ltp8xONTPortsMLDVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMLDVersion.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDVersion.setDescription('Values : 1,2,3')
ltp8xONTPortsMLDUpstreamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("snooping", 0), ("spr", 1), ("proxy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMLDUpstreamMode.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDUpstreamMode.setDescription('')
ltp8xONTPortsMLDImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMLDImmediateLeave.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDImmediateLeave.setDescription('')
ltp8xONTPortsMLDRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMLDRobustness.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDRobustness.setDescription('')
ltp8xONTPortsMLDQuerierIP = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 35), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMLDQuerierIP.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDQuerierIP.setDescription('')
ltp8xONTPortsMLDQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMLDQueryInterval.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDQueryInterval.setDescription('')
ltp8xONTPortsMLDQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMLDQueryMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDQueryMaxResponseTime.setDescription('')
ltp8xONTPortsMLDLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 41, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMLDLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDLastMemberQueryInterval.setDescription('')
ltp8xONTPortsProfileUNITable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42), )
if mibBuilder.loadTexts: ltp8xONTPortsProfileUNITable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsProfileUNITable.setDescription(' ')
ltp8xONTPortsProfileUNIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTPortsID"), (0, "ELTEX-LTP8X", "ltp8xONTPortsUNIPort"))
if mibBuilder.loadTexts: ltp8xONTPortsProfileUNIEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsProfileUNIEntry.setDescription('')
ltp8xONTPortsUNIPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTPortsUNIPort.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIPort.setDescription(' ')
ltp8xONTPortsUNIBridgeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("routed", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIBridgeGroup.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIBridgeGroup.setDescription(' ')
ltp8xONTPortsUNIMulticastEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIMulticastEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIMulticastEnabled.setDescription(' ')
ltp8xONTPortsUNIIGMPUpstreamVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIIGMPUpstreamVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIIGMPUpstreamVID.setDescription('')
ltp8xONTPortsUNIIGMPUpstreamPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIIGMPUpstreamPriority.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIIGMPUpstreamPriority.setDescription('')
ltp8xONTPortsUNIIGMPUpstreamTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("pass", 0), ("addTag", 1), ("replaceTag", 2), ("replaceVid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIIGMPUpstreamTagControl.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIIGMPUpstreamTagControl.setDescription('')
ltp8xONTPortsUNIMaxGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIMaxGroups.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIMaxGroups.setDescription('')
ltp8xONTPortsUNIMaxMulticastBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIMaxMulticastBandwidth.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIMaxMulticastBandwidth.setDescription('')
ltp8xONTPortsUNIShapingDownstreamEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIShapingDownstreamEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIShapingDownstreamEnabled.setDescription('')
ltp8xONTPortsUNIShapingDownstreamCommitedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIShapingDownstreamCommitedRate.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIShapingDownstreamCommitedRate.setDescription('')
ltp8xONTPortsUNIShapingDownstreamPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIShapingDownstreamPeakRate.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIShapingDownstreamPeakRate.setDescription('')
ltp8xONTPortsUNIShapingUpstreamEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIShapingUpstreamEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIShapingUpstreamEnabled.setDescription('')
ltp8xONTPortsUNIShapingUpstreamCommitedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIShapingUpstreamCommitedRate.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIShapingUpstreamCommitedRate.setDescription('')
ltp8xONTPortsUNIShapingUpstreamPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIShapingUpstreamPeakRate.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIShapingUpstreamPeakRate.setDescription('')
ltp8xONTPortsUNIIGMPDownstreamVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIIGMPDownstreamVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIIGMPDownstreamVID.setDescription('')
ltp8xONTPortsUNIIGMPDownstreamPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIIGMPDownstreamPriority.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIIGMPDownstreamPriority.setDescription('')
ltp8xONTPortsUNIIGMPDownstreamTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 42, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("pass", 0), ("removeTag", 1), ("addTag", 2), ("replaceTag", 3), ("replaceVid", 4), ("addTagSubscriberInfo", 5), ("replaceTagSubscriberInfo", 6), ("replaceVidSubscriberInfo", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsUNIIGMPDownstreamTagControl.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsUNIIGMPDownstreamTagControl.setDescription('')
ltp8xONTVoiceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 43), )
if mibBuilder.loadTexts: ltp8xONTVoiceProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTVoiceProfileTable.setDescription(' ')
ltp8xONTVoiceProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 43, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTVoiceID"))
if mibBuilder.loadTexts: ltp8xONTVoiceProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTVoiceProfileEntry.setDescription('')
ltp8xONTVoiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 43, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTVoiceID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTVoiceID.setDescription(' ')
ltp8xONTVoiceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 43, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTVoiceDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTVoiceDescription.setDescription(' ')
ltp8xONTVoiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 43, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTVoiceName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTVoiceName.setDescription(' ')
ltp8xONTVoiceCrossConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 43, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTVoiceCrossConnect.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTVoiceCrossConnect.setDescription('')
ltp8xONTVoiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 43, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTVoiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTVoiceRowStatus.setDescription(' ')
ltp8xONTScriptingProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 44))
ltp8xONTScriptingProfileTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 44, 1), )
if mibBuilder.loadTexts: ltp8xONTScriptingProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTScriptingProfileTable.setDescription(' ')
ltp8xONTScriptingProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 44, 1, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTScriptingID"))
if mibBuilder.loadTexts: ltp8xONTScriptingProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTScriptingProfileEntry.setDescription('')
ltp8xONTScriptingID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 44, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTScriptingID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTScriptingID.setDescription(' ')
ltp8xONTScriptingDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 44, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTScriptingDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTScriptingDescription.setDescription(' ')
ltp8xONTScriptingName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 44, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTScriptingName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTScriptingName.setDescription(' ')
ltp8xONTScriptingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 44, 1, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTScriptingRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTScriptingRowStatus.setDescription(' ')
ltp8xONTScriptingProfileScriptsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 44, 2), )
if mibBuilder.loadTexts: ltp8xONTScriptingProfileScriptsTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTScriptingProfileScriptsTable.setDescription(' ')
ltp8xONTScriptingProfileScriptsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 44, 2, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTScriptingID"), (0, "ELTEX-LTP8X", "ltp8xONTScriptingChunkID"))
if mibBuilder.loadTexts: ltp8xONTScriptingProfileScriptsEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTScriptingProfileScriptsEntry.setDescription('')
ltp8xONTScriptingChunkID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 44, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTScriptingChunkID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTScriptingChunkID.setDescription(' ')
ltp8xONTScriptingText = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 44, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTScriptingText.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTScriptingText.setDescription(' ')
ltp8xONTPortsProfileMCDynamicEntriesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 46), )
if mibBuilder.loadTexts: ltp8xONTPortsProfileMCDynamicEntriesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsProfileMCDynamicEntriesTable.setDescription(' ')
ltp8xONTPortsProfileMCDynamicEntriesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 46, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTPortsID"), (0, "ELTEX-LTP8X", "ltp8xONTPortsMCEntryID"))
if mibBuilder.loadTexts: ltp8xONTPortsProfileMCDynamicEntriesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsProfileMCDynamicEntriesEntry.setDescription('')
ltp8xONTPortsMCEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 46, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTPortsMCEntryID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMCEntryID.setDescription(' ')
ltp8xONTPortsMCVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 46, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMCVLANID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMCVLANID.setDescription(' ')
ltp8xONTPortsMCFirstGroupIP = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 46, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMCFirstGroupIP.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMCFirstGroupIP.setDescription(' ')
ltp8xONTPortsMCLastGroupIP = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 46, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMCLastGroupIP.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMCLastGroupIP.setDescription('')
ltp8xONTPortsProfileMLDDynamicEntriesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 47), )
if mibBuilder.loadTexts: ltp8xONTPortsProfileMLDDynamicEntriesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsProfileMLDDynamicEntriesTable.setDescription(' ')
ltp8xONTPortsProfileMLDDynamicEntriesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 47, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTPortsID"), (0, "ELTEX-LTP8X", "ltp8xONTPortsMLDEntryID"))
if mibBuilder.loadTexts: ltp8xONTPortsProfileMLDDynamicEntriesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsProfileMLDDynamicEntriesEntry.setDescription('')
ltp8xONTPortsMLDEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 47, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTPortsMLDEntryID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDEntryID.setDescription(' ')
ltp8xONTPortsMLDVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 47, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMLDVLANID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDVLANID.setDescription(' ')
ltp8xONTPortsMLDMCFirstGroupIP = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 47, 1, 5), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMLDMCFirstGroupIP.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDMCFirstGroupIP.setDescription(' ')
ltp8xONTPortsMLDMCLastGroupIP = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 47, 1, 6), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMLDMCLastGroupIP.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDMCLastGroupIP.setDescription('')
ltp8xONTPortsMLDMCPreviewLength = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 47, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMLDMCPreviewLength.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDMCPreviewLength.setDescription('0-65535, seconds')
ltp8xONTPortsMLDMCPreviewRepeatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 47, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMLDMCPreviewRepeatTime.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDMCPreviewRepeatTime.setDescription('0-65535, seconds')
ltp8xONTPortsMLDMCPreviewRepeatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 47, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMLDMCPreviewRepeatCount.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDMCPreviewRepeatCount.setDescription('0-65535')
ltp8xONTPortsMLDMCPreviewResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 47, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTPortsMLDMCPreviewResetTime.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPortsMLDMCPreviewResetTime.setDescription('Reset hour. 0-24')
ltp8xONTMulticastStatsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 50), )
if mibBuilder.loadTexts: ltp8xONTMulticastStatsTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastStatsTable.setDescription(' ')
ltp8xONTMulticastStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 50, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTMulticastStatsSlot"), (0, "ELTEX-LTP8X", "ltp8xONTMulticastStatsONTSerial"), (0, "ELTEX-LTP8X", "ltp8xONTMulticastStatsRecordID"))
if mibBuilder.loadTexts: ltp8xONTMulticastStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastStatsEntry.setDescription('')
ltp8xONTMulticastStatsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 50, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastStatsSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastStatsSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTMulticastStatsONTSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 50, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastStatsONTSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastStatsONTSerial.setDescription('')
ltp8xONTMulticastStatsRecordID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 50, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastStatsRecordID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastStatsRecordID.setDescription('')
ltp8xONTMulticastStatsMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 50, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastStatsMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastStatsMulticastAddress.setDescription('')
ltp8xONTMulticastStatsStart = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 50, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastStatsStart.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastStatsStart.setDescription('')
ltp8xONTMulticastStatsStop = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 50, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTMulticastStatsStop.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTMulticastStatsStop.setDescription('')
ltp8xONTACSPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 60), )
if mibBuilder.loadTexts: ltp8xONTACSPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSPropertiesTable.setDescription(' ')
ltp8xONTACSPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 60, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTACSPropertiesONTSerial"), (0, "ELTEX-LTP8X", "ltp8xONTACSPropertiesPropertyID"))
if mibBuilder.loadTexts: ltp8xONTACSPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSPropertiesEntry.setDescription('')
ltp8xONTACSPropertiesONTSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 60, 1, 1), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTACSPropertiesONTSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSPropertiesONTSerial.setDescription('')
ltp8xONTACSPropertiesPropertyID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 60, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTACSPropertiesPropertyID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSPropertiesPropertyID.setDescription('')
ltp8xONTACSPropertiesPropertyName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 60, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSPropertiesPropertyName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSPropertiesPropertyName.setDescription('')
ltp8xONTACSPropertiesPropertyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 60, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSPropertiesPropertyValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSPropertiesPropertyValue.setDescription('')
ltp8xONTACSPropertiesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 60, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSPropertiesRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSPropertiesRowStatus.setDescription('')
ltp8xONTACSPropertiesTableSupported = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 61), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTACSPropertiesTableSupported.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSPropertiesTableSupported.setDescription('')
ltp8xONTACSPrivatesConfigTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 62), )
if mibBuilder.loadTexts: ltp8xONTACSPrivatesConfigTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSPrivatesConfigTable.setDescription(' ')
ltp8xONTACSPrivatesConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 62, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTACSPrivatesPropertyName"), (0, "ELTEX-LTP8X", "ltp8xONTACSPrivatesPrivateIndex"))
if mibBuilder.loadTexts: ltp8xONTACSPrivatesConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSPrivatesConfigEntry.setDescription('')
ltp8xONTACSPrivatesPropertyName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 62, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: ltp8xONTACSPrivatesPropertyName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSPrivatesPropertyName.setDescription('')
ltp8xONTACSPrivatesPrivateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 62, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTACSPrivatesPrivateIndex.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSPrivatesPrivateIndex.setDescription('')
ltp8xONTACSPrivatesPrivateName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 62, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSPrivatesPrivateName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSPrivatesPrivateName.setDescription('')
ltp8xONTACSPrivatesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 62, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSPrivatesRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSPrivatesRowStatus.setDescription('')
ltp8xONTACSUserPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 63), )
if mibBuilder.loadTexts: ltp8xONTACSUserPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSUserPropertiesTable.setDescription(' ')
ltp8xONTACSUserPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 63, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTACSUserPropertiesName"), (0, "ELTEX-LTP8X", "ltp8xONTACSUserPropertiesSerial"))
if mibBuilder.loadTexts: ltp8xONTACSUserPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSUserPropertiesEntry.setDescription('')
ltp8xONTACSUserPropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 63, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: ltp8xONTACSUserPropertiesName.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSUserPropertiesName.setDescription('')
ltp8xONTACSUserPropertiesSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 63, 1, 2), ONTSerial())
if mibBuilder.loadTexts: ltp8xONTACSUserPropertiesSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSUserPropertiesSerial.setDescription('')
ltp8xONTACSUserPropertiesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 63, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTACSUserPropertiesValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTACSUserPropertiesValue.setDescription('')
ltp8xONTConnectionLogTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 70), )
if mibBuilder.loadTexts: ltp8xONTConnectionLogTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConnectionLogTable.setDescription(' ')
ltp8xONTConnectionLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 70, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTConnectionLogSlot"), (0, "ELTEX-LTP8X", "ltp8xONTConnectionLogONTSerial"))
if mibBuilder.loadTexts: ltp8xONTConnectionLogEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConnectionLogEntry.setDescription('')
ltp8xONTConnectionLogSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 70, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTConnectionLogSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConnectionLogSlot.setDescription('')
ltp8xONTConnectionLogONTSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 70, 1, 2), ONTSerial())
if mibBuilder.loadTexts: ltp8xONTConnectionLogONTSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConnectionLogONTSerial.setDescription('')
ltp8xONTConnectionLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 70, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTConnectionLogText.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConnectionLogText.setDescription('')
ltp8xONTConfigFreenessTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 80), )
if mibBuilder.loadTexts: ltp8xONTConfigFreenessTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigFreenessTable.setDescription(' ')
ltp8xONTConfigFreenessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 80, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xONTConfigFreenessSlot"), (0, "ELTEX-LTP8X", "ltp8xONTConfigFreenessChannel"), (0, "ELTEX-LTP8X", "ltp8xONTConfigFreenessID"))
if mibBuilder.loadTexts: ltp8xONTConfigFreenessEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigFreenessEntry.setDescription('')
ltp8xONTConfigFreenessSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 80, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTConfigFreenessSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigFreenessSlot.setDescription('')
ltp8xONTConfigFreenessChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 80, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTConfigFreenessChannel.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigFreenessChannel.setDescription('')
ltp8xONTConfigFreenessID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 80, 1, 3), Unsigned32())
if mibBuilder.loadTexts: ltp8xONTConfigFreenessID.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigFreenessID.setDescription('')
ltp8xONTConfigFreenessSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 80, 1, 4), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xONTConfigFreenessSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigFreenessSerial.setDescription('')
ltp8xONTDisable = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30000))
ltp8xONTDisableSlot = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30000, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTDisableSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTDisableSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xONTDisableONTSerial = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30000, 2), ONTSerial()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTDisableONTSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTDisableONTSerial.setDescription('')
ltp8xONTDisableChannel = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30000, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTDisableChannel.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTDisableChannel.setDescription('')
ltp8xONTDisableActionDisable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30000, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTDisableActionDisable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTDisableActionDisable.setDescription('')
ltp8xONTDisableActionEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 3, 30000, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xONTDisableActionEnable.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTDisableActionEnable.setDescription('')
ltp8xOLT = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5))
ltp8xOLTStateTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 1), )
if mibBuilder.loadTexts: ltp8xOLTStateTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTStateTable.setDescription(' ')
ltp8xOLTStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 1, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTStateSlot"))
if mibBuilder.loadTexts: ltp8xOLTStateEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTStateEntry.setDescription('')
ltp8xOLTStateSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTStateSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTStateSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xOLTStateDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTStateDriverVersion.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTStateDriverVersion.setDescription('')
ltp8xOLTStateFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTStateFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTStateFirmwareVersion.setDescription('')
ltp8xOLTStateHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTStateHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTStateHardwareVersion.setDescription('')
ltp8xOLTStateFirmwareVersionChip2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTStateFirmwareVersionChip2.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTStateFirmwareVersionChip2.setDescription('')
ltp8xOLTStateHardwareVersionChip2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTStateHardwareVersionChip2.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTStateHardwareVersionChip2.setDescription('')
ltp8xOLTStateReconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTStateReconfigure.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTStateReconfigure.setDescription('')
ltp8xOLTMIBBoundary1 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary1.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary1.setDescription('This boundary object needed for GETNEXT requests not to query anything from another mibs.')
ltp8xOLTDhcpRATable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 3), )
if mibBuilder.loadTexts: ltp8xOLTDhcpRATable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTDhcpRATable.setDescription('OLT DHCP relay agent state')
ltp8xOLTDhcpRAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 3, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTDhcpRASlot"))
if mibBuilder.loadTexts: ltp8xOLTDhcpRAEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTDhcpRAEntry.setDescription('')
ltp8xOLTDhcpRASlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTDhcpRASlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTDhcpRASlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xOLTMIBBoundary2 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary2.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary2.setDescription('This boundary object needed for GETNEXT requests not to query anything from another mibs.')
ltp8xOLTConfigActivationTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 5), )
if mibBuilder.loadTexts: ltp8xOLTConfigActivationTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigActivationTable.setDescription(' ')
ltp8xOLTConfigActivationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 5, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTConfigActivationSlot"))
if mibBuilder.loadTexts: ltp8xOLTConfigActivationEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigActivationEntry.setDescription('')
ltp8xOLTConfigActivationSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTConfigActivationSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigActivationSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xOLTConfigActivationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 5, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigActivationPeriod.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigActivationPeriod.setDescription('')
ltp8xOLTConfigActivationCheckPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 5, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigActivationCheckPassword.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigActivationCheckPassword.setDescription('')
ltp8xOLTMIBBoundary3 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary3.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary3.setDescription('This boundary object needed for GETNEXT requests not to query anything from another mibs.')
ltp8xOLTConfigDhcpTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 7), )
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpTable.setDescription(' ')
ltp8xOLTConfigDhcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 7, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTConfigDhcpSlot"))
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpEntry.setDescription('')
ltp8xOLTConfigDhcpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xOLTConfigDhcpRelayAgentEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 7, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpRelayAgentEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpRelayAgentEnabled.setDescription('')
ltp8xOLTConfigDhcpCircuitIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpCircuitIDFormat.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpCircuitIDFormat.setDescription('')
ltp8xOLTConfigDhcpRemoteIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpRemoteIDFormat.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpRemoteIDFormat.setDescription('')
ltp8xOLTConfigDhcpOverwrtOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 7, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpOverwrtOption82.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpOverwrtOption82.setDescription('')
ltp8xOLTConfigDhcpDosBlockEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 7, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpDosBlockEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpDosBlockEnabled.setDescription('')
ltp8xOLTConfigDhcpBcPacketPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 7, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpBcPacketPerSecond.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpBcPacketPerSecond.setDescription('')
ltp8xOLTConfigDhcpPortBlockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 7, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpPortBlockTime.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpPortBlockTime.setDescription('')
ltp8xOLTConfigDhcpTrustedServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 7, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpTrustedServerEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpTrustedServerEnabled.setDescription('')
ltp8xOLTConfigDhcpTrustedPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 7, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpTrustedPrimary.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpTrustedPrimary.setDescription('')
ltp8xOLTConfigDhcpTrustedSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 7, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpTrustedSecondary.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpTrustedSecondary.setDescription('')
ltp8xOLTConfigDhcpTrustedServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 7, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpTrustedServerTimeout.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigDhcpTrustedServerTimeout.setDescription('')
ltp8xOLTMIBBoundary4 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary4.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary4.setDescription('This boundary object needed for GETNEXT requests not to query anything from another mibs.')
ltp8xOLTConfigPPPoETable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 9), )
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoETable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoETable.setDescription(' ')
ltp8xOLTConfigPPPoEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 9, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTConfigPPPoESlot"))
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEEntry.setDescription('')
ltp8xOLTConfigPPPoESlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoESlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoESlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xOLTConfigPPPoEPlusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 9, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEPlusEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEPlusEnabled.setDescription('')
ltp8xOLTConfigPPPoECircuitIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 9, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoECircuitIDFormat.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoECircuitIDFormat.setDescription('')
ltp8xOLTConfigPPPoERemoteIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 9, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoERemoteIDFormat.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoERemoteIDFormat.setDescription('')
ltp8xOLTConfigPPPoEVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 9, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEVendorID.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEVendorID.setDescription('')
ltp8xOLTConfigPPPoEMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 9, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEMaxSessions.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEMaxSessions.setDescription('')
ltp8xOLTConfigPPPoEMaxSessionsPerUser = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 9, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEMaxSessionsPerUser.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEMaxSessionsPerUser.setDescription('')
ltp8xOLTConfigPPPoEDosBlockEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 9, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEDosBlockEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEDosBlockEnabled.setDescription('')
ltp8xOLTConfigPPPoEBcPacketPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 9, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEBcPacketPerSecond.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEBcPacketPerSecond.setDescription('')
ltp8xOLTConfigPPPoEPortBlockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 9, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEPortBlockTime.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTConfigPPPoEPortBlockTime.setDescription('')
ltp8xOLTMIBBoundary5 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary5.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary5.setDescription('This boundary object needed for GETNEXT requests not to query anything from another mibs.')
ltp8xOLTPPPoESessionsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 11), )
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsTable.setDescription(' ')
ltp8xOLTPPPoESessionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 11, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTPPPoESessionsSlot"), (0, "ELTEX-LTP8X", "ltp8xOLTPPPoESessionsChannel"), (0, "ELTEX-LTP8X", "ltp8xOLTPPPoESessionsOntID"), (0, "ELTEX-LTP8X", "ltp8xOLTPPPoESessionsClientMac"))
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsEntry.setDescription('')
ltp8xOLTPPPoESessionsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xOLTPPPoESessionsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 11, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsChannel.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsChannel.setDescription('')
ltp8xOLTPPPoESessionsOntID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 11, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsOntID.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsOntID.setDescription('')
ltp8xOLTPPPoESessionsClientMac = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 11, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsClientMac.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsClientMac.setDescription('')
ltp8xOLTPPPoESessionsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 11, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsPort.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsPort.setDescription('')
ltp8xOLTPPPoESessionsSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsSessionID.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsSessionID.setDescription('')
ltp8xOLTPPPoESessionsDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 11, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsDuration.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsDuration.setDescription('')
ltp8xOLTPPPoESessionsUnblock = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 11, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsUnblock.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsUnblock.setDescription('')
ltp8xOLTPPPoESessionsSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 11, 1, 9), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTPPPoESessionsSerial.setDescription('')
ltp8xOLTMIBBoundary6 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary6.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary6.setDescription('This boundary object needed for GETNEXT requests not to query anything from another mibs.')
ltp8xOLTMulticastStatsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 13), )
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsTable.setDescription(' ')
ltp8xOLTMulticastStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 13, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTMulticastStatsSlot"), (0, "ELTEX-LTP8X", "ltp8xOLTMulticastStatsChannel"), (0, "ELTEX-LTP8X", "ltp8xOLTMulticastStatsRecordID"))
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsEntry.setDescription('')
ltp8xOLTMulticastStatsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 13, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xOLTMulticastStatsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsChannel.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsChannel.setDescription('')
ltp8xOLTMulticastStatsRecordID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 13, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsRecordID.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsRecordID.setDescription('')
ltp8xOLTMulticastStatsONTSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 13, 1, 4), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsONTSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsONTSerial.setDescription('')
ltp8xOLTMulticastStatsMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 13, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsMulticastAddress.setDescription('')
ltp8xOLTMulticastStatsStart = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsStart.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsStart.setDescription('')
ltp8xOLTMulticastStatsStop = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 13, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsStop.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsStop.setDescription('')
ltp8xOLTMIBBoundary7 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary7.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary7.setDescription('This boundary object needed for GETNEXT requests not to query anything from another mibs.')
ltp8xOLTAddressTableProfilesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 15), )
if mibBuilder.loadTexts: ltp8xOLTAddressTableProfilesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTAddressTableProfilesTable.setDescription(' ')
ltp8xOLTAddressTableProfilesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 15, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTAddressTableProfilesID"))
if mibBuilder.loadTexts: ltp8xOLTAddressTableProfilesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTAddressTableProfilesEntry.setDescription('')
ltp8xOLTAddressTableProfilesID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 15, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTAddressTableProfilesID.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTAddressTableProfilesID.setDescription(' ')
ltp8xOLTAddressTableProfilesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTAddressTableProfilesDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTAddressTableProfilesDescription.setDescription('')
ltp8xOLTMIBBoundary8 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary8.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMIBBoundary8.setDescription('This boundary object needed for GETNEXT requests not to query anything from another mibs.')
ltp8xOLTVlanProfilesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 17), )
if mibBuilder.loadTexts: ltp8xOLTVlanProfilesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVlanProfilesTable.setDescription(' ')
ltp8xOLTVlanProfilesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 17, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTVlanProfilesID"))
if mibBuilder.loadTexts: ltp8xOLTVlanProfilesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVlanProfilesEntry.setDescription('')
ltp8xOLTVlanProfilesID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 17, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTVlanProfilesID.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVlanProfilesID.setDescription(' ')
ltp8xOLTVlanProfilesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTVlanProfilesDescription.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVlanProfilesDescription.setDescription('')
ltp8xOLTUpdateFirmwareTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 18), )
if mibBuilder.loadTexts: ltp8xOLTUpdateFirmwareTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTUpdateFirmwareTable.setDescription(' ')
ltp8xOLTUpdateFirmwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 18, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTUpdateFirmwareSlot"))
if mibBuilder.loadTexts: ltp8xOLTUpdateFirmwareEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTUpdateFirmwareEntry.setDescription('')
ltp8xOLTUpdateFirmwareSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 18, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTUpdateFirmwareSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTUpdateFirmwareSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xOLTUpdateFirmwareAction = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 18, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTUpdateFirmwareAction.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTUpdateFirmwareAction.setDescription('Set to 1 to initiate OLT update')
ltp8xOLTMulticastStatsBackwardsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 19), )
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsTable.setDescription(' ')
ltp8xOLTMulticastStatsBackwardsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 19, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTMulticastStatsBackwardsSlot"), (0, "ELTEX-LTP8X", "ltp8xOLTMulticastStatsBackwardsONTSerial"), (0, "ELTEX-LTP8X", "ltp8xOLTMulticastStatsBackwardsRecordID"))
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsEntry.setDescription('')
ltp8xOLTMulticastStatsBackwardsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 19, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xOLTMulticastStatsBackwardsONTSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 19, 1, 2), ONTSerial()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsONTSerial.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsONTSerial.setDescription('')
ltp8xOLTMulticastStatsBackwardsRecordID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 19, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsRecordID.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsRecordID.setDescription('')
ltp8xOLTMulticastStatsBackwardsMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 19, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsMulticastAddress.setDescription('')
ltp8xOLTMulticastStatsBackwardsStart = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 19, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsStart.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsStart.setDescription('')
ltp8xOLTMulticastStatsBackwardsStop = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 19, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsStop.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTMulticastStatsBackwardsStop.setDescription('')
ltp8xOLTONTAutoFirmwareUpdateTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 20), )
if mibBuilder.loadTexts: ltp8xOLTONTAutoFirmwareUpdateTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTONTAutoFirmwareUpdateTable.setDescription(' ')
ltp8xOLTONTAutoFirmwareUpdateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 20, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTONTAutoFirmwareUpdateSlot"))
if mibBuilder.loadTexts: ltp8xOLTONTAutoFirmwareUpdateEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTONTAutoFirmwareUpdateEntry.setDescription('')
ltp8xOLTONTAutoFirmwareUpdateSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 20, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTONTAutoFirmwareUpdateSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTONTAutoFirmwareUpdateSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xOLTONTAutoFirmwareUpdateEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 20, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTONTAutoFirmwareUpdateEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTONTAutoFirmwareUpdateEnabled.setDescription('')
ltp8xOLTVInterfaceMonitoringDSTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 30), )
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringDSTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringDSTable.setDescription(' ')
ltp8xOLTVInterfaceMonitoringDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 30, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTVInterfaceMonitoringDSSlot"), (0, "ELTEX-LTP8X", "ltp8xOLTVInterfaceMonitoringDSChannelRange"), (0, "ELTEX-LTP8X", "ltp8xOLTVInterfaceMonitoringDSCounterID"))
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringDSEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringDSEntry.setDescription('')
ltp8xOLTVInterfaceMonitoringDSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 30, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringDSSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringDSSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xOLTVInterfaceMonitoringDSChannelRange = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("range0-3", 1), ("range4-7", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringDSChannelRange.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringDSChannelRange.setDescription('')
ltp8xOLTVInterfaceMonitoringDSCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 30, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringDSCounterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringDSCounterID.setDescription('')
ltp8xOLTVInterfaceMonitoringDSCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 30, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringDSCounterName.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringDSCounterName.setDescription('')
ltp8xOLTVInterfaceMonitoringDSCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 30, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringDSCounterValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringDSCounterValue.setDescription('')
ltp8xOLTVInterfaceMonitoringUSTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 31), )
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringUSTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringUSTable.setDescription(' ')
ltp8xOLTVInterfaceMonitoringUSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 31, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTVInterfaceMonitoringUSSlot"), (0, "ELTEX-LTP8X", "ltp8xOLTVInterfaceMonitoringUSChannelRange"), (0, "ELTEX-LTP8X", "ltp8xOLTVInterfaceMonitoringUSCounterID"))
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringUSEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringUSEntry.setDescription('')
ltp8xOLTVInterfaceMonitoringUSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 31, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringUSSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringUSSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xOLTVInterfaceMonitoringUSChannelRange = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("range0-3", 1), ("range4-7", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringUSChannelRange.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringUSChannelRange.setDescription('')
ltp8xOLTVInterfaceMonitoringUSCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 31, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringUSCounterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringUSCounterID.setDescription('')
ltp8xOLTVInterfaceMonitoringUSCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 31, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringUSCounterName.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringUSCounterName.setDescription('')
ltp8xOLTVInterfaceMonitoringUSCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 31, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringUSCounterValue.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTVInterfaceMonitoringUSCounterValue.setDescription('')
ltp8xOLTResetCountersTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 50), )
if mibBuilder.loadTexts: ltp8xOLTResetCountersTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTResetCountersTable.setDescription(' ')
ltp8xOLTResetCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 50, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTResetCountersSlot"))
if mibBuilder.loadTexts: ltp8xOLTResetCountersEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTResetCountersEntry.setDescription('')
ltp8xOLTResetCountersSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 50, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xOLTResetCountersSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTResetCountersSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xOLTResetCountersAction = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 50, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTResetCountersAction.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTResetCountersAction.setDescription('Set to 1 to reset OLT counters')
ltp8xOLTTerminalVLANsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 51), )
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsTable.setDescription(' ')
ltp8xOLTTerminalVLANsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 51, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTTerminalVLANsSlot"), (0, "ELTEX-LTP8X", "ltp8xOLTTerminalVLANsID"))
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsEntry.setDescription('')
ltp8xOLTTerminalVLANsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 51, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xOLTTerminalVLANsID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 51, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsID.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsID.setDescription('Record index')
ltp8xOLTTerminalVLANsName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 51, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsName.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsName.setDescription('Terminal VLAN name')
ltp8xOLTTerminalVLANsVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 51, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsVID.setDescription('')
ltp8xOLTTerminalVLANsCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 51, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("unused", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsCOS.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsCOS.setDescription('')
ltp8xOLTTerminalVLANsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 51, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsRowStatus.setDescription('')
ltp8xOLTTerminalVLANsNamesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 52), )
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsNamesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsNamesTable.setDescription(' ')
ltp8xOLTTerminalVLANsNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 52, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xOLTTerminalVLANsNamesID"))
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsNamesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsNamesEntry.setDescription('')
ltp8xOLTTerminalVLANsNamesID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 52, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsNamesID.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsNamesID.setDescription('Record index')
ltp8xOLTTerminalVLANsNamesName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 52, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsNamesName.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsNamesName.setDescription('Terminal VLAN name')
ltp8xOLTTerminalVLANsNamesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 5, 52, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsNamesRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTTerminalVLANsNamesRowStatus.setDescription('')
ltp8xSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9))
ltp8xSwitchPortsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 1), )
if mibBuilder.loadTexts: ltp8xSwitchPortsTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortsTable.setDescription(' ')
ltp8xSwitchPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 1, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xSwitchPortsID"))
if mibBuilder.loadTexts: ltp8xSwitchPortsEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortsEntry.setDescription('')
ltp8xSwitchPortsID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortsID.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortsID.setDescription(' ')
ltp8xSwitchPortsName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortsName.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortsName.setDescription('')
ltp8xSwitchVLANTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 2), )
if mibBuilder.loadTexts: ltp8xSwitchVLANTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchVLANTable.setDescription(' ')
ltp8xSwitchVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 2, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xSwitchVLANSlot"), (0, "ELTEX-LTP8X", "ltp8xSwitchVLANVid"))
if mibBuilder.loadTexts: ltp8xSwitchVLANEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchVLANEntry.setDescription('')
ltp8xSwitchVLANSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchVLANSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchVLANSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xSwitchVLANVid = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchVLANVid.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchVLANVid.setDescription('')
ltp8xSwitchVLANName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xSwitchVLANName.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchVLANName.setDescription('')
ltp8xSwitchVLANTaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 2, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xSwitchVLANTaggedPorts.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchVLANTaggedPorts.setDescription('')
ltp8xSwitchVLANUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 2, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xSwitchVLANUntaggedPorts.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchVLANUntaggedPorts.setDescription('')
ltp8xSwitchVLANRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xSwitchVLANRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchVLANRowStatus.setDescription('')
ltp8xSwitchVLANIGMPSnoopingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 2, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xSwitchVLANIGMPSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchVLANIGMPSnoopingEnabled.setDescription('')
ltp8xSwitchVLANIGMPSnoopingQuerierEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 2, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xSwitchVLANIGMPSnoopingQuerierEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchVLANIGMPSnoopingQuerierEnabled.setDescription('')
ltp8xSwitchVLANMLDSnoopingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 2, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xSwitchVLANMLDSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchVLANMLDSnoopingEnabled.setDescription('')
ltp8xSwitchVLANMLDSnoopingQuerierEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 2, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xSwitchVLANMLDSnoopingQuerierEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchVLANMLDSnoopingQuerierEnabled.setDescription('')
ltp8xSwitchIGMPSnoopingTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 3), )
if mibBuilder.loadTexts: ltp8xSwitchIGMPSnoopingTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchIGMPSnoopingTable.setDescription(' ')
ltp8xSwitchIGMPSnoopingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 3, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xSwitchIGMPSnoopingSlot"))
if mibBuilder.loadTexts: ltp8xSwitchIGMPSnoopingEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchIGMPSnoopingEntry.setDescription('')
ltp8xSwitchIGMPSnoopingSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchIGMPSnoopingSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchIGMPSnoopingSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xSwitchIGMPSnoopingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xSwitchIGMPSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchIGMPSnoopingEnabled.setDescription('')
ltp8xSwitchMLDSnoopingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 3, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xSwitchMLDSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchMLDSnoopingEnabled.setDescription('')
ltp8xSwitchOperationalVLANTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 4), )
if mibBuilder.loadTexts: ltp8xSwitchOperationalVLANTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchOperationalVLANTable.setDescription(' ')
ltp8xSwitchOperationalVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 4, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xSwitchOperationalVLANSlot"), (0, "ELTEX-LTP8X", "ltp8xSwitchOperationalVLANVid"))
if mibBuilder.loadTexts: ltp8xSwitchOperationalVLANEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchOperationalVLANEntry.setDescription('')
ltp8xSwitchOperationalVLANSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchOperationalVLANSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchOperationalVLANSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xSwitchOperationalVLANVid = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchOperationalVLANVid.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchOperationalVLANVid.setDescription('')
ltp8xSwitchOperationalVLANName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchOperationalVLANName.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchOperationalVLANName.setDescription('')
ltp8xSwitchOperationalVLANTaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 4, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchOperationalVLANTaggedPorts.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchOperationalVLANTaggedPorts.setDescription('')
ltp8xSwitchOperationalVLANUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 4, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchOperationalVLANUntaggedPorts.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchOperationalVLANUntaggedPorts.setDescription('')
ltp8xSwitchPortCountersTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5), )
if mibBuilder.loadTexts: ltp8xSwitchPortCountersTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortCountersTable.setDescription(' ')
ltp8xSwitchPortCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xSwitchPortCountersSlot"), (0, "ELTEX-LTP8X", "ltp8xSwitchPortCountersPortID"))
if mibBuilder.loadTexts: ltp8xSwitchPortCountersEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortCountersEntry.setDescription('')
ltp8xSwitchPortCountersSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xSwitchPortCountersSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortCountersSlot.setDescription('')
ltp8xSwitchPortCountersPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xSwitchPortCountersPortID.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortCountersPortID.setDescription(' ')
ltp8xSwitchPortGoodOctetsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortGoodOctetsRcv.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortGoodOctetsRcv.setDescription('Number of ethernet frames received that are neither bad ethernet frames nor MAC Control pkts. This includes Bridge Control packets (LCAP, BPDU)')
ltp8xSwitchPortBadOctetsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortBadOctetsRcv.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortBadOctetsRcv.setDescription(' ')
ltp8xSwitchPortMacTransmitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortMacTransmitErr.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortMacTransmitErr.setDescription('Number of frames not transmitted correctly or dropped due to internal MAC Tx error')
ltp8xSwitchPortGoodPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortGoodPktsRcv.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortGoodPktsRcv.setDescription('Number of ethernet frames received at this MAC.')
ltp8xSwitchPortBadPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortBadPktsRcv.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortBadPktsRcv.setDescription('Number of bad ethernet frames received')
ltp8xSwitchPortBrdcPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortBrdcPktsRcv.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortBrdcPktsRcv.setDescription('Total number of good packets received that were directed to the broadcast address')
ltp8xSwitchPortMcPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortMcPktsRcv.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortMcPktsRcv.setDescription('Total number of good packets received that were directed to a multicast address')
ltp8xSwitchPortPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortPkts64Octets.setDescription('Total bytes of received and transmitted Good and Bad frames which are 64 bytes in size. This does not include MAC Control Frames.')
ltp8xSwitchPortPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortPkts65to127Octets.setDescription('Total bytes of received and transmitted Good and Bad frames which are 65 to 127 bytes in size. This does not include MAC Control Frames.')
ltp8xSwitchPortPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortPkts128to255Octets.setDescription('Total bytes of received and transmitted Good and Bad frames which are 128 to 255 bytes in size. This does not include MAC Control Frames.')
ltp8xSwitchPortPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortPkts256to511Octets.setDescription('Total bytes of received and transmitted Good and Bad frames which are 256 to 511 bytes in size. This does not include MAC Control Frames.')
ltp8xSwitchPortPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortPkts512to1023Octets.setDescription('Total bytes of received and transmitted Good and Bad frames which are 512 to 1023 bytes in size. This does not include MAC Control Frames.')
ltp8xSwitchPortPkts1024tomaxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortPkts1024tomaxOctets.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortPkts1024tomaxOctets.setDescription('Total bytes of received and transmitted Good and Bad frames which are more than 1024 bytes in size. This does not include MAC Control Frames.')
ltp8xSwitchPortGoodOctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortGoodOctetsSent.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortGoodOctetsSent.setDescription('Sum of lengths of all good ethernet frames sent from this MAC. This does not include 802.3 Flow Control packets, packets dropped due to excessive collision or packets with a Tx Error.')
ltp8xSwitchPortGoodPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortGoodPktsSent.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortGoodPktsSent.setDescription('Number of ethernet frames sent from this MAC. This does not include 802.3 Flow Control packets, packets dropped due to excessive collision or packets with a Tx Error.')
ltp8xSwitchPortExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortExcessiveCollisions.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortExcessiveCollisions.setDescription('Number of frames dropped in the transmit MAC due to excessive collisions. This is applicable for Half Duplex mode only.')
ltp8xSwitchPortMcPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortMcPktsSent.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortMcPktsSent.setDescription('Total number of good packets sent that have a multicast destination MAC address. This does not include 802.3 Flow Control packets, packets dropped due to excessive collision or packets with a Tx Error.')
ltp8xSwitchPortBrdcPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortBrdcPktsSent.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortBrdcPktsSent.setDescription('Total number of good packets sent that have a broadcast destination MAC address. This does not include 802.3 Flow Control packets, packets dropped due to excessive collision or packets with a Tx Error.')
ltp8xSwitchPortUnrecogMacCntrRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortUnrecogMacCntrRcv.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortUnrecogMacCntrRcv.setDescription('Number of received MAC Control frames that have an opcode different from 00 01.')
ltp8xSwitchPortFcSent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortFcSent.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortFcSent.setDescription('Number of Flow Control frames sent.')
ltp8xSwitchPortGoodFcRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortGoodFcRcv.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortGoodFcRcv.setDescription('Number of good Flow Control frames received')
ltp8xSwitchPortDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortDropEvents.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortDropEvents.setDescription('Number of instances that the port was unable to receive packets due to insufficient bandwidth to one of the PP internal resources, such as the DRAM or buffer allocation.')
ltp8xSwitchPortUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortUndersizePkts.setDescription('Number of undersize packets received.')
ltp8xSwitchPortFragmentsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortFragmentsPkts.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortFragmentsPkts.setDescription('Number of fragments received.')
ltp8xSwitchPortOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortOversizePkts.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortOversizePkts.setDescription('Number of oversize packets received.')
ltp8xSwitchPortJabberPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortJabberPkts.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortJabberPkts.setDescription('Number of jabber packets received.')
ltp8xSwitchPortMacRcvError = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortMacRcvError.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortMacRcvError.setDescription('Number of Rx Error events seen by the receive side of the MAC')
ltp8xSwitchPortBadCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortBadCrc.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortBadCrc.setDescription('Number of CRC error events.')
ltp8xSwitchPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortCollisions.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortCollisions.setDescription('Total number of collisions seen by the MAC')
ltp8xSwitchPortLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortLateCollisions.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortLateCollisions.setDescription('Total number of late collisions seen by the MAC')
ltp8xSwitchPortBadFcRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchPortBadFcRcv.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortBadFcRcv.setDescription('Number of bad Flow Control frames received.')
ltp8xSwitchPortCountersReset = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 5, 1, 50), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xSwitchPortCountersReset.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchPortCountersReset.setDescription('Set this to 1 to reset this port counters.')
ltp8xSwitchMacListTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 6), )
if mibBuilder.loadTexts: ltp8xSwitchMacListTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchMacListTable.setDescription(' ')
ltp8xSwitchMacListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 6, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xSwitchMacListSlot"), (0, "ELTEX-LTP8X", "ltp8xSwitchMacListVID"), (0, "ELTEX-LTP8X", "ltp8xSwitchMacListMacAddress"))
if mibBuilder.loadTexts: ltp8xSwitchMacListEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchMacListEntry.setDescription('')
ltp8xSwitchMacListSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xSwitchMacListSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchMacListSlot.setDescription('')
ltp8xSwitchMacListVID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xSwitchMacListVID.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchMacListVID.setDescription(' ')
ltp8xSwitchMacListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 6, 1, 3), MacAddress())
if mibBuilder.loadTexts: ltp8xSwitchMacListMacAddress.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchMacListMacAddress.setDescription('')
ltp8xSwitchMacListInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchMacListInterface.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchMacListInterface.setDescription('Interface index. Corresponds with ltp8xSwitchPortsTable')
ltp8xSwitchMacListStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 6, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchMacListStatic.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchMacListStatic.setDescription('')
ltp8xSwitchMacListMacAddressString = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSwitchMacListMacAddressString.setStatus('current')
if mibBuilder.loadTexts: ltp8xSwitchMacListMacAddressString.setDescription('')
ltp8xSwitchPortsUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 8))
ltp8xPortsUtilizationInterval = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 8, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xPortsUtilizationInterval.setStatus('current')
if mibBuilder.loadTexts: ltp8xPortsUtilizationInterval.setDescription(' ')
ltp8xPortsUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 8, 2), )
if mibBuilder.loadTexts: ltp8xPortsUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xPortsUtilizationTable.setDescription('')
ltp8xPortsUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 8, 2, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xPortsUtilizationSlot"), (0, "ELTEX-LTP8X", "ltp8xPortsUtilizationPortID"))
if mibBuilder.loadTexts: ltp8xPortsUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xPortsUtilizationEntry.setDescription('')
ltp8xPortsUtilizationSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 8, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xPortsUtilizationSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xPortsUtilizationSlot.setDescription(' ')
ltp8xPortsUtilizationPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 8, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xPortsUtilizationPortID.setStatus('current')
if mibBuilder.loadTexts: ltp8xPortsUtilizationPortID.setDescription(' ')
ltp8xPortsUtilizationLastKbitsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 8, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPortsUtilizationLastKbitsSent.setStatus('current')
if mibBuilder.loadTexts: ltp8xPortsUtilizationLastKbitsSent.setDescription(' ')
ltp8xPortsUtilizationLastKbitsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 8, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPortsUtilizationLastKbitsRecv.setStatus('current')
if mibBuilder.loadTexts: ltp8xPortsUtilizationLastKbitsRecv.setDescription(' ')
ltp8xPortsUtilizationLastFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 8, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPortsUtilizationLastFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltp8xPortsUtilizationLastFramesSent.setDescription(' ')
ltp8xPortsUtilizationLastFramesRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 8, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPortsUtilizationLastFramesRecv.setStatus('current')
if mibBuilder.loadTexts: ltp8xPortsUtilizationLastFramesRecv.setDescription(' ')
ltp8xPortsUtilizationAverageKbitsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 8, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPortsUtilizationAverageKbitsSent.setStatus('current')
if mibBuilder.loadTexts: ltp8xPortsUtilizationAverageKbitsSent.setDescription(' ')
ltp8xPortsUtilizationAverageKbitsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 8, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPortsUtilizationAverageKbitsRecv.setStatus('current')
if mibBuilder.loadTexts: ltp8xPortsUtilizationAverageKbitsRecv.setDescription(' ')
ltp8xPortsUtilizationAverageFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 8, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPortsUtilizationAverageFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltp8xPortsUtilizationAverageFramesSent.setDescription(' ')
ltp8xPortsUtilizationAverageFramesRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 8, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPortsUtilizationAverageFramesRecv.setStatus('current')
if mibBuilder.loadTexts: ltp8xPortsUtilizationAverageFramesRecv.setDescription(' ')
ltp8xQOSConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10))
ltp8xQOSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 1), )
if mibBuilder.loadTexts: ltp8xQOSConfigTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOSConfigTable.setDescription('')
ltp8xQOSConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 1, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xQOSConfigSlot"))
if mibBuilder.loadTexts: ltp8xQOSConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOSConfigEntry.setDescription('')
ltp8xQOSConfigSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xQOSConfigSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOSConfigSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xQOSDefaultQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xQOSDefaultQueue.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOSDefaultQueue.setDescription('Default priority queue')
ltp8xQOSType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("typeAllEqual", 0), ("type8021p", 1), ("typeDscpTos", 2), ("typeDscpTos8021p", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xQOSType.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOSType.setDescription('Priority field of packet')
ltp8xQOSDownstreamQinQPrioritization = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xQOSDownstreamQinQPrioritization.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOSDownstreamQinQPrioritization.setDescription('Default priority queue')
ltp8xQOS8021pMappingTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 2), )
if mibBuilder.loadTexts: ltp8xQOS8021pMappingTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOS8021pMappingTable.setDescription('')
ltp8xQOS8021pMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 2, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xQOS8021pMappingSlot"), (0, "ELTEX-LTP8X", "ltp8xQOS8021pMappingQueue"))
if mibBuilder.loadTexts: ltp8xQOS8021pMappingEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOS8021pMappingEntry.setDescription('')
ltp8xQOS8021pMappingSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xQOS8021pMappingSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOS8021pMappingSlot.setDescription(' ')
ltp8xQOS8021pMappingQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xQOS8021pMappingQueue.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOS8021pMappingQueue.setDescription(' ')
ltp8xQOS8021pMappingFields = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xQOS8021pMappingFields.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOS8021pMappingFields.setDescription('Bitmask, in which every bit maps corresponding field to queue.')
ltp8xQOSDSCPMappingTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 3), )
if mibBuilder.loadTexts: ltp8xQOSDSCPMappingTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOSDSCPMappingTable.setDescription('')
ltp8xQOSDSCPMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 3, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xQOSDSCPMappingSlot"), (0, "ELTEX-LTP8X", "ltp8xQOSDSCPMappingQueue"))
if mibBuilder.loadTexts: ltp8xQOSDSCPMappingEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOSDSCPMappingEntry.setDescription('')
ltp8xQOSDSCPMappingSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xQOSDSCPMappingSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOSDSCPMappingSlot.setDescription(' ')
ltp8xQOSDSCPMappingQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xQOSDSCPMappingQueue.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOSDSCPMappingQueue.setDescription(' ')
ltp8xQOSDSCPMappingFields = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 10, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xQOSDSCPMappingFields.setStatus('current')
if mibBuilder.loadTexts: ltp8xQOSDSCPMappingFields.setDescription('Bitmask, in which every bit maps corresponding field to queue.')
ltp8xACLConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15))
ltp8xACLGlobalModeTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 1), )
if mibBuilder.loadTexts: ltp8xACLGlobalModeTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLGlobalModeTable.setDescription(' ')
ltp8xACLGlobalModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 1, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xACLGlobalModeSlot"))
if mibBuilder.loadTexts: ltp8xACLGlobalModeEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLGlobalModeEntry.setDescription('')
ltp8xACLGlobalModeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xACLGlobalModeSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLGlobalModeSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xACLGlobalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("blackList", 0), ("whiteList", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xACLGlobalMode.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLGlobalMode.setDescription('')
ltp8xACLListsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 2), )
if mibBuilder.loadTexts: ltp8xACLListsTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLListsTable.setDescription('')
ltp8xACLListsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 2, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xACLListsSlot"), (0, "ELTEX-LTP8X", "ltp8xACLListsID"))
if mibBuilder.loadTexts: ltp8xACLListsEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLListsEntry.setDescription('')
ltp8xACLListsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xACLListsSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLListsSlot.setDescription(' ')
ltp8xACLListsID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xACLListsID.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLListsID.setDescription(' ')
ltp8xACLListsName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xACLListsName.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLListsName.setDescription(' ')
ltp8xACLListsPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 2, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xACLListsPorts.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLListsPorts.setDescription(' ')
ltp8xACLListsFiltersCount = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xACLListsFiltersCount.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLListsFiltersCount.setDescription(' ')
ltp8xACLListsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 2, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xACLListsRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLListsRowStatus.setDescription(' ')
ltp8xACLFiltersTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 3), )
if mibBuilder.loadTexts: ltp8xACLFiltersTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLFiltersTable.setDescription('')
ltp8xACLFiltersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 3, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xACLFiltersSlot"), (0, "ELTEX-LTP8X", "ltp8xACLFiltersListID"), (0, "ELTEX-LTP8X", "ltp8xACLFiltersFilterID"))
if mibBuilder.loadTexts: ltp8xACLFiltersEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLFiltersEntry.setDescription('')
ltp8xACLFiltersSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xACLFiltersSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLFiltersSlot.setDescription(' ')
ltp8xACLFiltersListID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xACLFiltersListID.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLFiltersListID.setDescription(' ')
ltp8xACLFiltersFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 3, 1, 3), Unsigned32())
if mibBuilder.loadTexts: ltp8xACLFiltersFilterID.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLFiltersFilterID.setDescription(' ')
ltp8xACLFiltersType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("macSA", 0), ("macDA", 1), ("l2Proto", 2), ("ipProto", 3), ("ipSA", 4), ("ipDA", 5), ("tcpSPort", 6), ("tcpDPort", 7), ("updSPort", 8), ("udpDPort", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xACLFiltersType.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLFiltersType.setDescription(' ')
ltp8xACLFiltersMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 3, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xACLFiltersMacAddress.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLFiltersMacAddress.setDescription(' ')
ltp8xACLFiltersIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xACLFiltersIpAddress.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLFiltersIpAddress.setDescription(' ')
ltp8xACLFiltersProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 3, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xACLFiltersProtocol.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLFiltersProtocol.setDescription(' ')
ltp8xACLFiltersPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 3, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xACLFiltersPort.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLFiltersPort.setDescription(' ')
ltp8xACLFiltersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 15, 3, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xACLFiltersRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xACLFiltersRowStatus.setDescription(' ')
ltp8xIGMPProxyReportTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 20), )
if mibBuilder.loadTexts: ltp8xIGMPProxyReportTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportTable.setDescription(' ')
ltp8xIGMPProxyReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 20, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xIGMPProxyReportSlot"))
if mibBuilder.loadTexts: ltp8xIGMPProxyReportEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportEntry.setDescription('')
ltp8xIGMPProxyReportSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xIGMPProxyReportSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xIGMPProxyReportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 20, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xIGMPProxyReportEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportEnabled.setDescription('')
ltp8xMLDProxyReportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 20, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xMLDProxyReportEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportEnabled.setDescription('')
ltp8xIGMPProxyReportRangesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 21), )
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesTable.setDescription('')
ltp8xIGMPProxyReportRangesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 21, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xIGMPProxyReportRangesSlot"), (0, "ELTEX-LTP8X", "ltp8xIGMPProxyReportRangesID"))
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesEntry.setDescription('')
ltp8xIGMPProxyReportRangesSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesSlot.setDescription(' ')
ltp8xIGMPProxyReportRangesID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 21, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesID.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesID.setDescription(' ')
ltp8xIGMPProxyReportRangesStart = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 21, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesStart.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesStart.setDescription(' ')
ltp8xIGMPProxyReportRangesEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 21, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesEnd.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesEnd.setDescription(' ')
ltp8xIGMPProxyReportRangesFromVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65535))).clone(namedValues=NamedValues(("all", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesFromVLAN.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesFromVLAN.setDescription(' ')
ltp8xIGMPProxyReportRangesToVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 21, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesToVLAN.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesToVLAN.setDescription(' ')
ltp8xIGMPProxyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 21, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xIGMPProxyRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyRowStatus.setDescription(' ')
ltp8xIGMPProxyReportRangesGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 22), )
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesGlobalTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesGlobalTable.setDescription('')
ltp8xIGMPProxyReportRangesGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 22, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xIGMPProxyReportRangesGlobalID"))
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesGlobalEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesGlobalEntry.setDescription('')
ltp8xIGMPProxyReportRangesGlobalID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 22, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesGlobalID.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesGlobalID.setDescription(' ')
ltp8xIGMPProxyReportRangesGlobalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 22, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesGlobalStart.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesGlobalStart.setDescription(' ')
ltp8xIGMPProxyReportRangesGlobalEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 22, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesGlobalEnd.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesGlobalEnd.setDescription(' ')
ltp8xIGMPProxyReportRangesGlobalFromVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65535))).clone(namedValues=NamedValues(("all", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesGlobalFromVLAN.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesGlobalFromVLAN.setDescription(' ')
ltp8xIGMPProxyReportRangesGlobalToVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 22, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesGlobalToVLAN.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyReportRangesGlobalToVLAN.setDescription(' ')
ltp8xIGMPProxyGlobalRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 22, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xIGMPProxyGlobalRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xIGMPProxyGlobalRowStatus.setDescription(' ')
ltp8xMLDProxyReportRangesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 23), )
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesTable.setDescription('')
ltp8xMLDProxyReportRangesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 23, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xMLDProxyReportRangesSlot"), (0, "ELTEX-LTP8X", "ltp8xMLDProxyReportRangesID"))
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesEntry.setDescription('')
ltp8xMLDProxyReportRangesSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 23, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesSlot.setDescription(' ')
ltp8xMLDProxyReportRangesID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 23, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesID.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesID.setDescription(' ')
ltp8xMLDProxyReportRangesStart = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 23, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesStart.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesStart.setDescription(' ')
ltp8xMLDProxyReportRangesEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 23, 1, 4), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesEnd.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesEnd.setDescription(' ')
ltp8xMLDProxyReportRangesFromVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65535))).clone(namedValues=NamedValues(("all", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesFromVLAN.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesFromVLAN.setDescription(' ')
ltp8xMLDProxyReportRangesToVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 23, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesToVLAN.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesToVLAN.setDescription(' ')
ltp8xMLDProxyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 23, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xMLDProxyRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyRowStatus.setDescription(' ')
ltp8xMLDProxyReportRangesGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 24), )
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesGlobalTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesGlobalTable.setDescription('')
ltp8xMLDProxyReportRangesGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 24, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xMLDProxyReportRangesGlobalID"))
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesGlobalEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesGlobalEntry.setDescription('')
ltp8xMLDProxyReportRangesGlobalID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 24, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesGlobalID.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesGlobalID.setDescription(' ')
ltp8xMLDProxyReportRangesGlobalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 24, 1, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesGlobalStart.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesGlobalStart.setDescription(' ')
ltp8xMLDProxyReportRangesGlobalEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 24, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesGlobalEnd.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesGlobalEnd.setDescription(' ')
ltp8xMLDProxyReportRangesGlobalFromVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65535))).clone(namedValues=NamedValues(("all", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesGlobalFromVLAN.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesGlobalFromVLAN.setDescription(' ')
ltp8xMLDProxyReportRangesGlobalToVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 24, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesGlobalToVLAN.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyReportRangesGlobalToVLAN.setDescription(' ')
ltp8xMLDProxyGlobalRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 9, 24, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xMLDProxyGlobalRowStatus.setStatus('current')
if mibBuilder.loadTexts: ltp8xMLDProxyGlobalRowStatus.setDescription(' ')
ltp8xP2PTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 10), )
if mibBuilder.loadTexts: ltp8xP2PTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xP2PTable.setDescription(' ')
ltp8xP2PEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 10, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xP2PSlot"))
if mibBuilder.loadTexts: ltp8xP2PEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xP2PEntry.setDescription('')
ltp8xP2PSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xP2PSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xP2PSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xP2PEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 10, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xP2PEnabled.setStatus('current')
if mibBuilder.loadTexts: ltp8xP2PEnabled.setDescription('')
ltp8xPLC = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11))
ltp8xPLCBoardStateTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1), )
if mibBuilder.loadTexts: ltp8xPLCBoardStateTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateTable.setDescription(' ')
ltp8xPLCBoardStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xPLCBoardStateSlot"))
if mibBuilder.loadTexts: ltp8xPLCBoardStateEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateEntry.setDescription('')
ltp8xPLCBoardStateSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xPLCBoardStateRAMFree = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateRAMFree.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateRAMFree.setDescription('')
ltp8xPLCBoardStateLoadAverage1Minute = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateLoadAverage1Minute.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateLoadAverage1Minute.setDescription('')
ltp8xPLCBoardStateLoadAverage5Minutes = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateLoadAverage5Minutes.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateLoadAverage5Minutes.setDescription('')
ltp8xPLCBoardStateLoadAverage15Minutes = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateLoadAverage15Minutes.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateLoadAverage15Minutes.setDescription('')
ltp8xPLCBoardStateSensor1Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateSensor1Temperature.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateSensor1Temperature.setDescription('')
ltp8xPLCBoardStateSensor2Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateSensor2Temperature.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateSensor2Temperature.setDescription('')
ltp8xPLCBoardStateUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateUptime.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateUptime.setDescription('')
ltp8xPLCBoardStateSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateSerialNumber.setDescription('')
ltp8xPLCBoardStateFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateFirmwareRevision.setDescription('')
ltp8xPLCBoardStateDiskFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateDiskFreeSpace.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateDiskFreeSpace.setDescription('')
ltp8xPLCBoardStateModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateModuleVersion.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateModuleVersion.setDescription('')
ltp8xPLCBoardStateBuildTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateBuildTime.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateBuildTime.setDescription('')
ltp8xPLCBoardStateBuildRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateBuildRevision.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateBuildRevision.setDescription('')
ltp8xPLCBoardStateHardwareVesion = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateHardwareVesion.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateHardwareVesion.setDescription('')
ltp8xPLCBoardStateSensor1TemperatureExt = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65535))).clone(namedValues=NamedValues(("notValid", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateSensor1TemperatureExt.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateSensor1TemperatureExt.setDescription('')
ltp8xPLCBoardStateSensor2TemperatureExt = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 11, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65535))).clone(namedValues=NamedValues(("notValid", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xPLCBoardStateSensor2TemperatureExt.setStatus('current')
if mibBuilder.loadTexts: ltp8xPLCBoardStateSensor2TemperatureExt.setDescription('')
ltp8xSyncCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 15))
ltp8xSyncCountersTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 15, 1), )
if mibBuilder.loadTexts: ltp8xSyncCountersTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xSyncCountersTable.setDescription(' ')
ltp8xSyncCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 15, 1, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xSyncCountersSlot"))
if mibBuilder.loadTexts: ltp8xSyncCountersEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xSyncCountersEntry.setDescription('')
ltp8xSyncCountersSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 15, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSyncCountersSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xSyncCountersSlot.setDescription("Board's slot number when works within MA4000. For LTP-8X - always 1")
ltp8xSyncCountersConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 15, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSyncCountersConfig.setStatus('current')
if mibBuilder.loadTexts: ltp8xSyncCountersConfig.setDescription('')
ltp8xSyncCountersState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 15, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xSyncCountersState.setStatus('current')
if mibBuilder.loadTexts: ltp8xSyncCountersState.setDescription('')
ltp8xRawData = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 90))
ltp8xRawMacTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 90, 1), )
if mibBuilder.loadTexts: ltp8xRawMacTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xRawMacTable.setDescription(' ')
ltp8xRawMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 90, 1, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xRawMacSlot"), (0, "ELTEX-LTP8X", "ltp8xRawMacChunkID"))
if mibBuilder.loadTexts: ltp8xRawMacEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xRawMacEntry.setDescription('')
ltp8xRawMacSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 90, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xRawMacSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xRawMacSlot.setDescription(' ')
ltp8xRawMacChunkID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 90, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xRawMacChunkID.setStatus('current')
if mibBuilder.loadTexts: ltp8xRawMacChunkID.setDescription(' ')
ltp8xRawMacText = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 90, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xRawMacText.setStatus('current')
if mibBuilder.loadTexts: ltp8xRawMacText.setDescription(' ')
ltp8xRawSwitchMacTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 22, 90, 2), )
if mibBuilder.loadTexts: ltp8xRawSwitchMacTable.setStatus('current')
if mibBuilder.loadTexts: ltp8xRawSwitchMacTable.setDescription(' ')
ltp8xRawSwitchMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 22, 90, 2, 1), ).setIndexNames((0, "ELTEX-LTP8X", "ltp8xRawSwitchMacSlot"), (0, "ELTEX-LTP8X", "ltp8xRawSwitchMacChunkID"))
if mibBuilder.loadTexts: ltp8xRawSwitchMacEntry.setStatus('current')
if mibBuilder.loadTexts: ltp8xRawSwitchMacEntry.setDescription('')
ltp8xRawSwitchMacSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 90, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ltp8xRawSwitchMacSlot.setStatus('current')
if mibBuilder.loadTexts: ltp8xRawSwitchMacSlot.setDescription(' ')
ltp8xRawSwitchMacChunkID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 90, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ltp8xRawSwitchMacChunkID.setStatus('current')
if mibBuilder.loadTexts: ltp8xRawSwitchMacChunkID.setDescription(' ')
ltp8xRawSwitchMacText = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 22, 90, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltp8xRawSwitchMacText.setStatus('current')
if mibBuilder.loadTexts: ltp8xRawSwitchMacText.setDescription(' ')
ltp8xMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 22, 99), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltp8xMIBBoundary.setStatus('current')
if mibBuilder.loadTexts: ltp8xMIBBoundary.setDescription('This boundary object needed for GETNEXT requests not to query anything from another mibs.')
ltp8xTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100))
ltp8xAlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1))
ltp8xLoadAverageAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xLoadAverageAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xLoadAverageAlarmTrap.setDescription('Load average has exceeded limit. Param1 = 0 - 1 min, 1 - 5min, 2 - 15min, description - LA values')
ltp8xRAMAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xRAMAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xRAMAlarmTrap.setDescription('Ammount of free RAM < 32Mb. Param1 = ammount of free ram.')
ltp8xLoginAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xLoginAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xLoginAlarmTrap.setDescription(' ')
ltp8xConfigSaveAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xConfigSaveAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xConfigSaveAlarmTrap.setDescription('Config saving error.')
ltp8xFirmwareUpdateAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xFirmwareUpdateAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xFirmwareUpdateAlarmTrap.setDescription('Firmware update error.')
ltp8xDuplicateMacAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xDuplicateMacAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xDuplicateMacAlarmTrap.setDescription('Duplicate mac detected. Param1 = 0 - port, 1 - trunk; Param2 = port or trunk number; descr = mac-address')
ltp8xDataLinkLayerAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 7)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xDataLinkLayerAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xDataLinkLayerAlarmTrap.setDescription('Data link layer failure. Param1 = ifIndex.')
ltp8xPhysicalLayerFlappingAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 8)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xPhysicalLayerFlappingAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xPhysicalLayerFlappingAlarmTrap.setDescription('Period between physical layer failures is less than 30 seconds. Param1 = ifIndex')
ltp8xDataLinkLayerFlappingAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 9)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xDataLinkLayerFlappingAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xDataLinkLayerFlappingAlarmTrap.setDescription('Period between data link layer failures is less that 30 seconds. Param1 = ifIndex')
ltp8xInterfaceCriticalLoadAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 10)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xInterfaceCriticalLoadAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xInterfaceCriticalLoadAlarmTrap.setDescription('Interface is critically loaded. Param1 = ifIndex')
ltp8xFreeSpaceAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 11)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xFreeSpaceAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xFreeSpaceAlarmTrap.setDescription('Ammount of free space is too low. Param1 = ammount of free space (kB).')
ltp8xTemperatureAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 12)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xTemperatureAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xTemperatureAlarmTrap.setDescription('Temperature is too high. Param1 = sensor number, description = temperature values')
ltp8xFanAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 13)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xFanAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xFanAlarmTrap.setDescription('Fan speed is too low or too high. Param1 = fan number, description = fans speeds')
ltp8xOntAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOntAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOntAlarmTrap.setDescription('PON channel has no ONT. Param1 = channel id')
ltp8xOntPhysicalAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 15)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOntPhysicalAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOntPhysicalAlarmTrap.setDescription('ONT link down. Param1 = channel id, Param2 = ONT id, descr = ONT serial')
ltp8xOltUpdateAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 16)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOltUpdateAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOltUpdateAlarmTrap.setDescription('OLT update failed. Param1 = OLT id')
ltp8xOntUpdateAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 17)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOntUpdateAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOntUpdateAlarmTrap.setDescription('ONT update failed. Param1 = channel id, Param2 = ONT id, descr = ONT serial')
ltp8xChannelFlappingAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 18)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xChannelFlappingAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xChannelFlappingAlarmTrap.setDescription('Channel flapping detected. Param1 = channel id')
ltp8xOntFlappingAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 19)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOntFlappingAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOntFlappingAlarmTrap.setDescription('ONT flapping detected. Param1 = channel id, Param2 = ONT id')
ltp8xFileDownloadAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 20)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xFileDownloadAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xFileDownloadAlarmTrap.setDescription('File download failed, Param1 = file type (0 - ONT firmware), descr - file name and ip-address')
ltp8xBatteryPowerAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 21)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xBatteryPowerAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xBatteryPowerAlarmTrap.setDescription('ONT switched to battery power. param1 - channelID, param2 - ontID, decription - serial')
ltp8xBatteryLowAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 22)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xBatteryLowAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xBatteryLowAlarmTrap.setDescription('param1 - channelID, param2 - ontID, decription - ONTn/m (ELTX00000000) Battery low')
ltp8xLanLosAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 23)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xLanLosAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xLanLosAlarmTrap.setDescription('param1 - Channel id (n), param2 - ONT id (m), param3 - LAN port id (m), ONTn/m (ELTX00000000) LAN LOS on port')
ltp8xOntConfigAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 24)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOntConfigAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOntConfigAlarmTrap.setDescription('param1 - Channel id (n), param2 - ONT id (m), descr - ONTn/m (ELTX00000000) ONT has no configuration')
ltp8xOntFirmwareDeleteAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 25)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOntFirmwareDeleteAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOntFirmwareDeleteAlarmTrap.setDescription('descr = <filename> deletion failure')
ltp8xLowRxPowerAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 28)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xLowRxPowerAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xLowRxPowerAlarmTrap.setDescription('ONTn/m (ELTX00000000) low RX level (XX)')
ltp8xPowerSupplyAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 30)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xPowerSupplyAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xPowerSupplyAlarmTrap.setDescription('Power supply[X] is offline')
ltp8xRedundancyMasterChannelFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 105)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xRedundancyMasterChannelFailTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xRedundancyMasterChannelFailTrap.setDescription('Param1 - master channel id, Param2 - slave channel id, descr = Master channel fail at hostname. Switch from channel n to m')
ltp8xPonAlarmChannelTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 213)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xPonAlarmChannelTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xPonAlarmChannelTrap.setDescription('Param1 - channel id (n), descr = PonAlarm : AlarmName from Channel n')
ltp8xPonAlarmONUiTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 214)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xPonAlarmONUiTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xPonAlarmONUiTrap.setDescription('Param1 - channel id (n), Param2 - ONT id (m), descr = PonAlarm : AlarmName from ONTn/m (ELTX00000000)')
ltp8xONTSignalDegradeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 217)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xONTSignalDegradeTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTSignalDegradeTrap.setDescription('Param1 - channel id (n), Param2 - ont id (m), Descr - ONTn/m (ELTX00000000) Signal degrade')
ltp8xONTHighRecvOpticalPwrTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 218)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xONTHighRecvOpticalPwrTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTHighRecvOpticalPwrTrap.setDescription('Param1 - channel id (n), Param2 - ont id (m), Descr - ONTn/m (ELTX00000000) High received optical power')
ltp8xOLTDeviceNotWorkingTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 219)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOLTDeviceNotWorkingTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTDeviceNotWorkingTrap.setDescription('Param1 - OLT id (n), Descr - OLTn is not working ')
ltp8xChannelOntCntOverflowTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 220)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xChannelOntCntOverflowTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xChannelOntCntOverflowTrap.setDescription('Param1 - Channel id (n), Descr - ONUs count')
ltp8xConfigRereadAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 225)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xConfigRereadAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xConfigRereadAlarmTrap.setDescription('Config reread error.')
ltp8xConfigBrokenAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 1, 227)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xConfigBrokenAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xConfigBrokenAlarmTrap.setDescription('Boot configuration broken. System configuration inconsistent.')
ltp8xOkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2))
ltp8xLoadAverageOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xLoadAverageOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xLoadAverageOkTrap.setDescription('Load average is back to normal. Param1 = 0 - 1 min, 1 - 5min, 2 - 15min, description - LA values')
ltp8xRAMOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xRAMOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xRAMOkTrap.setDescription('Ammount of free RAM > 32Mb. Param1 = ammount of free RAM')
ltp8xLoginOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xLoginOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xLoginOkTrap.setDescription('Succesfull login.')
ltp8xConfigSaveOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xConfigSaveOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xConfigSaveOkTrap.setDescription('Config saved succesfully.')
ltp8xFirmwareUpdateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xFirmwareUpdateOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xFirmwareUpdateOkTrap.setDescription('Firmware updated succesfully.')
ltp8xDuplicateMacOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xDuplicateMacOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xDuplicateMacOkTrap.setDescription('Duplicate mac situation resolved. Param1 = interface number, descr = mac-address')
ltp8xDataLinkLayerOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 7)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xDataLinkLayerOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xDataLinkLayerOkTrap.setDescription('Data link layer is operational. Param1 = ifIndex.')
ltp8xPhysicalLayerFlappingOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 8)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xPhysicalLayerFlappingOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xPhysicalLayerFlappingOkTrap.setDescription('No flapping detected on physical layer. Param1 = ifIndex.')
ltp8xDataLinkLayerFlappingOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 9)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xDataLinkLayerFlappingOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xDataLinkLayerFlappingOkTrap.setDescription('No flapping detected on data link layer. Param1 = ifIndex.')
ltp8xInterfaceCriticalLoadOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 10)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xInterfaceCriticalLoadOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xInterfaceCriticalLoadOkTrap.setDescription('Normal load on interface. Param1 = ifIndex.')
ltp8xFreeSpaceOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 11)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xFreeSpaceOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xFreeSpaceOkTrap.setDescription('Ammount of free space is back to normal. Param1 = ammount of free space (kB).')
ltp8xTemperatureOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 12)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xTemperatureOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xTemperatureOkTrap.setDescription('Temperature is back to normal. Param1 = sensor number, description = temperature values')
ltp8xFanOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 13)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xFanOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xFanOkTrap.setDescription('Fan speed is back to normal. Param1 = fan number, description = fans speeds')
ltp8xOntOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOntOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOntOkTrap.setDescription('PON channel has ONT(s). Param1 = channel id')
ltp8xOntPhysicalOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 15)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOntPhysicalOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOntPhysicalOkTrap.setDescription('ONT link up. Param1 = channel id, Param2 = ONT id, descr = ONT serial')
ltp8xOltUpdateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 16)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOltUpdateOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOltUpdateOkTrap.setDescription('OLT update sucessful. Param1 = OLT id')
ltp8xOntUpdateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 17)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOntUpdateOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOntUpdateOkTrap.setDescription('ONT update successful. Param1 = channel id, Param2 = ONT id, descr = ONT serial')
ltp8xChannelFlappingOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 18)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xChannelFlappingOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xChannelFlappingOkTrap.setDescription('Channel flapping ended. Param1 = channel id')
ltp8xOntFlappingOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 19)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOntFlappingOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOntFlappingOkTrap.setDescription('ONT flapping ended. Param1 = channel id, Param2 = ONT id')
ltp8xFileDownloadOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 20)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xFileDownloadOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xFileDownloadOkTrap.setDescription('File download succeeded, Param1 = file type (0 - ONT firmware), descr - file name and ip-address')
ltp8xBatteryPowerOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 21)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xBatteryPowerOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xBatteryPowerOkTrap.setDescription('ONT switched to external power. param1 - channelID, param2 - ontID, decription - serial')
ltp8xBatteryLowOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 22)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xBatteryLowOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xBatteryLowOkTrap.setDescription('param1 - channelID, param2 - ontID, decription - ONTn/m (ELTX00000000) Battery charged')
ltp8xLanLosOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 23)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xLanLosOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xLanLosOkTrap.setDescription('param1 - Channel id (n), param2 - ONT id (m), param3 - LAN port id (m), LAN connection established on port m')
ltp8xOntConfigOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 24)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOntConfigOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOntConfigOkTrap.setDescription('param1 - Channel id (n), param2 - ONT id (m), descr - ONTn/m (ELTX00000000) ONT has received valid configuration')
ltp8xOntFirmwareDeleteOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 25)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOntFirmwareDeleteOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOntFirmwareDeleteOkTrap.setDescription('descr = <filename> successfully deleted')
ltp8xLowRxPowerOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 28)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xLowRxPowerOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xLowRxPowerOkTrap.setDescription('ONTn/m (ELTX00000000) RX level (XX)')
ltp8xPowerSupplyOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 30)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xPowerSupplyOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xPowerSupplyOkTrap.setDescription('Power supply[X] is online')
ltp8xLogoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 102)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xLogoutTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xLogoutTrap.setDescription('User logged out. Description : user <username> (ipaddress) disconnected from service <servicename>')
ltp8xOntDyingGaspTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 103)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOntDyingGaspTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOntDyingGaspTrap.setDescription('Param1 - Channel ID, Param2 - Ont ID, Descr - ONTn/m (ELTX00000000) Dying Gasp')
ltp8xRedundantChannelSwitchTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 104)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xRedundantChannelSwitchTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xRedundantChannelSwitchTrap.setDescription('Redundant channel has been switched. Param1 - master channel; Param2 - slave channel')
ltp8xONTREITrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 106)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xONTREITrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTREITrap.setDescription('Param1 - channel id; Param2 - ont id. Description - ONTn/m (ELTX00000000) Remote error indication (REI) value ...')
ltp8xONTPowerOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 107)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xONTPowerOffTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTPowerOffTrap.setDescription('Param1 - channel id; Param2 - ont id. Description - ONTn/m (ELTX00000000) power off')
ltp8xConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 200)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xConfigChangeTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xConfigChangeTrap.setDescription('Config has been changed.')
ltp8xONTStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 210)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xONTStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTStateChangeTrap.setDescription('Param1 - channel id; Param2 - ont id. Description - ELTXhhhhhhhh pon_channel id state')
ltp8xONTConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 211)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xONTConfigChangeTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xONTConfigChangeTrap.setDescription('operation ELTXhhhhhhhh pon_channel id description')
ltp8xChannelStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 212)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xChannelStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xChannelStateChangeTrap.setDescription('Param1 - channel, descr - state')
ltp8xOLTDeviceResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 216)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOLTDeviceResetTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTDeviceResetTrap.setDescription('Param1 - OLT id')
ltp8xOLTDeviceWorkingTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 219)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xOLTDeviceWorkingTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xOLTDeviceWorkingTrap.setDescription('Param1 - OLT id (n), Descr - OLTn is working ')
ltp8xChannelOntCntOverflowOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 220)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xChannelOntCntOverflowOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xChannelOntCntOverflowOkTrap.setDescription('Param1 - Channel id (n), Descr - ONUs count')
ltp8xConfigRereadOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 225)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xConfigRereadOkTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xConfigRereadOkTrap.setDescription('Config reread success.')
ltp8xRSSIUpdateTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 2, 226)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: ltp8xRSSIUpdateTrap.setStatus('current')
if mibBuilder.loadTexts: ltp8xRSSIUpdateTrap.setDescription('RSSI value change notification.')
plc8AlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3))
plc8LoadAverageAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8LoadAverageAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8LoadAverageAlarmTrap.setDescription('Load average has exceeded limit. Param1 = 1 - 5min, 2 - 15min. Param2 = load average value.')
plc8RAMAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8RAMAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8RAMAlarmTrap.setDescription('Ammount of free RAM < 32Mb. Param1 = ammount of free ram.')
plc8LoginAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8LoginAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8LoginAlarmTrap.setDescription(' ')
plc8ConfigSaveAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8ConfigSaveAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8ConfigSaveAlarmTrap.setDescription('Config saving error.')
plc8FirmwareUpdateAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8FirmwareUpdateAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8FirmwareUpdateAlarmTrap.setDescription('Firmware update error.')
plc8DuplicateMacAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8DuplicateMacAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8DuplicateMacAlarmTrap.setDescription('Duplicate mac detected. Param1 = 0 - port, 1 - trunk; Param2 = port or trunk number; descr = mac-address')
plc8DataLinkLayerAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 7)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8DataLinkLayerAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8DataLinkLayerAlarmTrap.setDescription('Data link layer failure. Param1 = ifIndex.')
plc8PhysicalLayerFlappingAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 8)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8PhysicalLayerFlappingAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8PhysicalLayerFlappingAlarmTrap.setDescription('Period between physical layer failures is less than 30 seconds. Param1 = ifIndex')
plc8DataLinkLayerFlappingAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 9)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8DataLinkLayerFlappingAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8DataLinkLayerFlappingAlarmTrap.setDescription('Period between data link layer failures is less that 30 seconds. Param1 = ifIndex')
plc8InterfaceCriticalLoadAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 10)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8InterfaceCriticalLoadAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8InterfaceCriticalLoadAlarmTrap.setDescription('Interface is critically loaded. Param1 = ifIndex')
plc8FreeSpaceAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 11)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8FreeSpaceAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8FreeSpaceAlarmTrap.setDescription('')
plc8TemperatureAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 12)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8TemperatureAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8TemperatureAlarmTrap.setDescription('')
plc8FanAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 13)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8FanAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8FanAlarmTrap.setDescription('')
plc8OntAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8OntAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8OntAlarmTrap.setDescription('')
plc8OntPhysicalAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 15)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8OntPhysicalAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8OntPhysicalAlarmTrap.setDescription('')
plc8FileDownloadAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 20)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8FileDownloadAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8FileDownloadAlarmTrap.setDescription('File download failed, Param1 = file type (0 - ONT firmware), descr - file name and ip-address')
plc8BatteryPowerAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 21)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8BatteryPowerAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8BatteryPowerAlarmTrap.setDescription('ONT switched to battery power. param1 - channelID, param2 - ontID, decription - serial')
plc8BatteryLowAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 22)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8BatteryLowAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8BatteryLowAlarmTrap.setDescription('param1 - channelID, param2 - ontID, decription - ONTn/m (ELTX00000000) Battery low')
plc8LanLosAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 23)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8LanLosAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8LanLosAlarmTrap.setDescription('param1 - Channel id (n), param2 - ONT id (m), param3 - LAN port id (m), ONTn/m (ELTX00000000) LAN LOS on port')
plc8OntConfigAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 24)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8OntConfigAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8OntConfigAlarmTrap.setDescription('param1 - Channel id (n), param2 - ONT id (m), descr - ONTn/m (ELTX00000000) ONT has no configuration')
plc8LowRxPowerAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 28)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8LowRxPowerAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: plc8LowRxPowerAlarmTrap.setDescription('ONTn/m (ELTX00000000) low RX level (XX)')
plc8RedundancyMasterChannelFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 105)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8RedundancyMasterChannelFailTrap.setStatus('current')
if mibBuilder.loadTexts: plc8RedundancyMasterChannelFailTrap.setDescription('Param1 - master channel id, Param2 - slave channel id, descr = Master channel fail at hostname. Switch from channel n to m')
plc8PonAlarmChannelTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 213)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8PonAlarmChannelTrap.setStatus('current')
if mibBuilder.loadTexts: plc8PonAlarmChannelTrap.setDescription('Param1 - channel id (n), descr = PonAlarm : AlarmName from Channel n')
plc8PonAlarmONUiTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 214)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8PonAlarmONUiTrap.setStatus('current')
if mibBuilder.loadTexts: plc8PonAlarmONUiTrap.setDescription('Param1 - channel id (n), Param2 - ONT id (m), descr = PonAlarm : AlarmName from ONTn/m (ELTX00000000)')
plc8ONTSignalDegradeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 217)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8ONTSignalDegradeTrap.setStatus('current')
if mibBuilder.loadTexts: plc8ONTSignalDegradeTrap.setDescription('Param1 - channel id (n), Param2 - ont id (m), Descr - ONTn/m (ELTX00000000) Signal degrade')
plc8ONTHighRecvOpticalPwrTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 218)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8ONTHighRecvOpticalPwrTrap.setStatus('current')
if mibBuilder.loadTexts: plc8ONTHighRecvOpticalPwrTrap.setDescription('Param1 - channel id (n), Param2 - ont id (m), Descr - ONTn/m (ELTX00000000) High received optical power')
plc8OLTDeviceNotWorkingTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 219)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8OLTDeviceNotWorkingTrap.setStatus('current')
if mibBuilder.loadTexts: plc8OLTDeviceNotWorkingTrap.setDescription('Param1 - OLT id (n), Descr - OLTn is not working ')
plc8ChannelOntCntOverflowTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 3, 220)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8ChannelOntCntOverflowTrap.setStatus('current')
if mibBuilder.loadTexts: plc8ChannelOntCntOverflowTrap.setDescription('Param1 - Channel id (n), Descr - ONUs count')
plc8OkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4))
plc8LoadAverageOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 1)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8LoadAverageOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8LoadAverageOkTrap.setDescription('Load average is back to normal. Param1 = 1 - 5min, 2 - 15min. Param2 = load average value')
plc8RAMOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 2)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8RAMOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8RAMOkTrap.setDescription('Ammount of free RAM > 32Mb. Param1 = ammount of free RAM')
plc8LoginOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 3)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8LoginOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8LoginOkTrap.setDescription('Succesfull login.')
plc8ConfigSaveOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 4)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8ConfigSaveOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8ConfigSaveOkTrap.setDescription('Config saved succesfully.')
plc8FirmwareUpdateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 5)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8FirmwareUpdateOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8FirmwareUpdateOkTrap.setDescription('Firmware updated succesfully.')
plc8DuplicateMacOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 6)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8DuplicateMacOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8DuplicateMacOkTrap.setDescription('Duplicate mac situation resolved. Param1 = interface number, descr = mac-address')
plc8DataLinkLayerOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 7)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8DataLinkLayerOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8DataLinkLayerOkTrap.setDescription('Data link layer is operational. Param1 = ifIndex.')
plc8PhysicalLayerFlappingOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 8)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8PhysicalLayerFlappingOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8PhysicalLayerFlappingOkTrap.setDescription('No flapping detected on physical layer. Param1 = ifIndex.')
plc8DataLinkLayerFlappingOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 9)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8DataLinkLayerFlappingOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8DataLinkLayerFlappingOkTrap.setDescription('No flapping detected on data link layer. Param1 = ifIndex.')
plc8InterfaceCriticalLoadOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 10)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8InterfaceCriticalLoadOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8InterfaceCriticalLoadOkTrap.setDescription('Normal load on interface. Param1 = ifIndex.')
plc8FreeSpaceOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 11)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8FreeSpaceOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8FreeSpaceOkTrap.setDescription('')
plc8TemperatureOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 12)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8TemperatureOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8TemperatureOkTrap.setDescription('')
plc8FanOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 13)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8FanOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8FanOkTrap.setDescription('')
plc8OntOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 14)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8OntOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8OntOkTrap.setDescription('')
plc8OntPhysicalOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 15)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8OntPhysicalOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8OntPhysicalOkTrap.setDescription('')
plc8FileDownloadOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 20)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8FileDownloadOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8FileDownloadOkTrap.setDescription('File download succeeded, Param1 = file type (0 - ONT firmware), descr - file name and ip-address')
plc8BatteryPowerOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 21)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8BatteryPowerOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8BatteryPowerOkTrap.setDescription('ONT switched to external power. param1 - channelID, param2 - ontID, decription - serial')
plc8BatteryLowOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 22)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8BatteryLowOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8BatteryLowOkTrap.setDescription('param1 - channelID, param2 - ontID, decription - ONTn/m (ELTX00000000) Battery charged')
plc8LanLosOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 23)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8LanLosOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8LanLosOkTrap.setDescription('param1 - Channel id (n), param2 - ONT id (m), param3 - LAN port id (m), LAN connection established on port m')
plc8OntConfigOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 24)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8OntConfigOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8OntConfigOkTrap.setDescription('param1 - Channel id (n), param2 - ONT id (m), descr - ONTn/m (ELTX00000000) ONT has received valid configuration')
plc8LowRxPowerOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 28)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8LowRxPowerOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8LowRxPowerOkTrap.setDescription('ONTn/m (ELTX00000000) RX level (XX)')
plc8OntDyingGaspTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 103)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8OntDyingGaspTrap.setStatus('current')
if mibBuilder.loadTexts: plc8OntDyingGaspTrap.setDescription('Param1 - Channel ID, Param2 - Ont ID, Descr - ONTn/m (ELTX00000000) Dying Gasp')
plc8RedundantChannelSwitchTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 104)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8RedundantChannelSwitchTrap.setStatus('current')
if mibBuilder.loadTexts: plc8RedundantChannelSwitchTrap.setDescription('Redundant channel has been switched. Param1 - master channel; Param2 - slave channel;')
plc8ONTREITrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 106)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8ONTREITrap.setStatus('current')
if mibBuilder.loadTexts: plc8ONTREITrap.setDescription('Param1 - channel id; Param2 - ont id. Description - ONTn/m (ELTX00000000) Remote error indication (REI) value ...')
plc8ONTPowerOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 107)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8ONTPowerOffTrap.setStatus('current')
if mibBuilder.loadTexts: plc8ONTPowerOffTrap.setDescription('Param1 - channel id; Param2 - ont id. Description - ONTn/m (ELTX00000000) power off')
plc8ConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 200)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8ConfigChangeTrap.setStatus('current')
if mibBuilder.loadTexts: plc8ConfigChangeTrap.setDescription('Config has been changed.')
plc8ONTStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 210)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8ONTStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: plc8ONTStateChangeTrap.setDescription('Param1 - channel id; Param2 - ont id. Description - ELTXhhhhhhhh pon_channel id state')
plc8ONTConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 211)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8ONTConfigChangeTrap.setStatus('current')
if mibBuilder.loadTexts: plc8ONTConfigChangeTrap.setDescription('operation ELTXhhhhhhhh pon_channel id description')
plc8ChannelStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 212)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8ChannelStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: plc8ChannelStateChangeTrap.setDescription('Param1 - channel, descr - state')
plc8OLTDeviceResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 216)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8OLTDeviceResetTrap.setStatus('current')
if mibBuilder.loadTexts: plc8OLTDeviceResetTrap.setDescription('Param1 - OLT id')
plc8OLTDeviceWorkingTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 219)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8OLTDeviceWorkingTrap.setStatus('current')
if mibBuilder.loadTexts: plc8OLTDeviceWorkingTrap.setDescription('Param1 - OLT id (n), Descr - OLTn is working ')
plc8ChannelOntCntOverflowOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 220)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8ChannelOntCntOverflowOkTrap.setStatus('current')
if mibBuilder.loadTexts: plc8ChannelOntCntOverflowOkTrap.setDescription('Param1 - Channel id (n), Descr - ONUs count')
plc8RSSIUpdateTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 22, 100, 4, 226)).setObjects(("ELTEX-SMI-ACTUAL", "mcTrapExState"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam1"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam2"), ("ELTEX-SMI-ACTUAL", "mcTrapLParam3"), ("ELTEX-SMI-ACTUAL", "mcTrapID"), ("ELTEX-SMI-ACTUAL", "mcTrapDescr"))
if mibBuilder.loadTexts: plc8RSSIUpdateTrap.setStatus('current')
if mibBuilder.loadTexts: plc8RSSIUpdateTrap.setDescription('RSSI value change notification.')
ltp8xObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35265, 1, 22, 200)).setObjects(("ELTEX-LTP8X", "ltp8xPONChannelSlot"), ("ELTEX-LTP8X", "ltp8xPONChannelID"), ("ELTEX-LTP8X", "ltp8xPONChannelState"), ("ELTEX-LTP8X", "ltp8xPONChannelONTCount"), ("ELTEX-LTP8X", "ltp8xPONChannelEnabled"), ("ELTEX-LTP8X", "ltp8xONTSlot"), ("ELTEX-LTP8X", "ltp8xONTSerial"), ("ELTEX-LTP8X", "ltp8xONTStateChannel"), ("ELTEX-LTP8X", "ltp8xONTStateID"), ("ELTEX-LTP8X", "ltp8xONTStateState"), ("ELTEX-LTP8X", "ltp8xONTStateEqualizationDelay"), ("ELTEX-LTP8X", "ltp8xONTStateFecState"), ("ELTEX-LTP8X", "ltp8xONTStateEncryptionKey"), ("ELTEX-LTP8X", "ltp8xONTStateOMCIPortId"), ("ELTEX-LTP8X", "ltp8xONTStateDistance"), ("ELTEX-LTP8X", "ltp8xONTStateReconfigure"), ("ELTEX-LTP8X", "ltp8xONTStateUpdateFirmware"), ("ELTEX-LTP8X", "ltp8xONTConfigSlot"), ("ELTEX-LTP8X", "ltp8xONTConfigSerial"), ("ELTEX-LTP8X", "ltp8xONTConfigChannel"), ("ELTEX-LTP8X", "ltp8xONTConfigID"), ("ELTEX-LTP8X", "ltp8xONTConfigServicesProfile"), ("ELTEX-LTP8X", "ltp8xONTConfigPassword"), ("ELTEX-LTP8X", "ltp8xONTConfigFecUp"), ("ELTEX-LTP8X", "ltp8xONTConfigRowStatus"), ("ELTEX-LTP8X", "ltp8xONTServiceOverrideID"), ("ELTEX-LTP8X", "ltp8xONTServiceOverrideSlot"), ("ELTEX-LTP8X", "ltp8xONTServiceOverrideSerial"), ("ELTEX-LTP8X", "ltp8xONTServiceOverrideEnabled"), ("ELTEX-LTP8X", "ltp8xONTServiceOverrideCustomerVID"), ("ELTEX-LTP8X", "ltp8xONTServiceOverrideCustomerCOS"), ("ELTEX-LTP8X", "ltp8xONTServicesID"), ("ELTEX-LTP8X", "ltp8xONTServicesDescription"), ("ELTEX-LTP8X", "ltp8xOLTStateSlot"), ("ELTEX-LTP8X", "ltp8xOLTStateDriverVersion"), ("ELTEX-LTP8X", "ltp8xOLTStateFirmwareVersion"), ("ELTEX-LTP8X", "ltp8xOLTStateHardwareVersion"), ("ELTEX-LTP8X", "ltp8xOLTDhcpRASlot"), ("ELTEX-LTP8X", "ltp8xOLTConfigActivationSlot"), ("ELTEX-LTP8X", "ltp8xOLTConfigActivationPeriod"), ("ELTEX-LTP8X", "ltp8xOLTConfigActivationCheckPassword"), ("ELTEX-LTP8X", "ltp8xOLTMulticastStatsSlot"), ("ELTEX-LTP8X", "ltp8xOLTMulticastStatsChannel"), ("ELTEX-LTP8X", "ltp8xOLTMulticastStatsRecordID"), ("ELTEX-LTP8X", "ltp8xOLTMulticastStatsONTSerial"), ("ELTEX-LTP8X", "ltp8xOLTMulticastStatsMulticastAddress"), ("ELTEX-LTP8X", "ltp8xOLTMulticastStatsStart"), ("ELTEX-LTP8X", "ltp8xOLTMulticastStatsStop"), ("ELTEX-LTP8X", "ltp8xP2PSlot"), ("ELTEX-LTP8X", "ltp8xP2PEnabled"), ("ELTEX-LTP8X", "ltp8xMIBBoundary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltp8xObjectGroup = ltp8xObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ltp8xObjectGroup.setDescription('none')
ltp8xTrapsObjectGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 35265, 1, 22, 201)).setObjects(("ELTEX-LTP8X", "ltp8xLoadAverageAlarmTrap"), ("ELTEX-LTP8X", "ltp8xRAMAlarmTrap"), ("ELTEX-LTP8X", "ltp8xLoginAlarmTrap"), ("ELTEX-LTP8X", "ltp8xConfigSaveAlarmTrap"), ("ELTEX-LTP8X", "ltp8xFirmwareUpdateAlarmTrap"), ("ELTEX-LTP8X", "ltp8xDuplicateMacAlarmTrap"), ("ELTEX-LTP8X", "ltp8xDataLinkLayerAlarmTrap"), ("ELTEX-LTP8X", "ltp8xPhysicalLayerFlappingAlarmTrap"), ("ELTEX-LTP8X", "ltp8xDataLinkLayerFlappingAlarmTrap"), ("ELTEX-LTP8X", "ltp8xInterfaceCriticalLoadAlarmTrap"), ("ELTEX-LTP8X", "ltp8xFreeSpaceAlarmTrap"), ("ELTEX-LTP8X", "ltp8xTemperatureAlarmTrap"), ("ELTEX-LTP8X", "ltp8xFanAlarmTrap"), ("ELTEX-LTP8X", "ltp8xOntAlarmTrap"), ("ELTEX-LTP8X", "ltp8xOntPhysicalAlarmTrap"), ("ELTEX-LTP8X", "ltp8xOltUpdateAlarmTrap"), ("ELTEX-LTP8X", "ltp8xOntUpdateAlarmTrap"), ("ELTEX-LTP8X", "ltp8xOntFlappingAlarmTrap"), ("ELTEX-LTP8X", "ltp8xLoadAverageOkTrap"), ("ELTEX-LTP8X", "ltp8xRAMOkTrap"), ("ELTEX-LTP8X", "ltp8xLoginOkTrap"), ("ELTEX-LTP8X", "ltp8xConfigSaveOkTrap"), ("ELTEX-LTP8X", "ltp8xFirmwareUpdateOkTrap"), ("ELTEX-LTP8X", "ltp8xDuplicateMacOkTrap"), ("ELTEX-LTP8X", "ltp8xDataLinkLayerOkTrap"), ("ELTEX-LTP8X", "ltp8xPhysicalLayerFlappingOkTrap"), ("ELTEX-LTP8X", "ltp8xDataLinkLayerFlappingOkTrap"), ("ELTEX-LTP8X", "ltp8xInterfaceCriticalLoadOkTrap"), ("ELTEX-LTP8X", "ltp8xFreeSpaceOkTrap"), ("ELTEX-LTP8X", "ltp8xTemperatureOkTrap"), ("ELTEX-LTP8X", "ltp8xFanOkTrap"), ("ELTEX-LTP8X", "ltp8xOntOkTrap"), ("ELTEX-LTP8X", "ltp8xOntPhysicalOkTrap"), ("ELTEX-LTP8X", "ltp8xOltUpdateOkTrap"), ("ELTEX-LTP8X", "ltp8xOntUpdateOkTrap"), ("ELTEX-LTP8X", "ltp8xOntFlappingOkTrap"), ("ELTEX-LTP8X", "ltp8xConfigChangeTrap"), ("ELTEX-LTP8X", "plc8LoadAverageAlarmTrap"), ("ELTEX-LTP8X", "plc8RAMAlarmTrap"), ("ELTEX-LTP8X", "plc8LoginAlarmTrap"), ("ELTEX-LTP8X", "plc8ConfigSaveAlarmTrap"), ("ELTEX-LTP8X", "plc8FirmwareUpdateAlarmTrap"), ("ELTEX-LTP8X", "plc8DuplicateMacAlarmTrap"), ("ELTEX-LTP8X", "plc8DataLinkLayerAlarmTrap"), ("ELTEX-LTP8X", "plc8PhysicalLayerFlappingAlarmTrap"), ("ELTEX-LTP8X", "plc8DataLinkLayerFlappingAlarmTrap"), ("ELTEX-LTP8X", "plc8InterfaceCriticalLoadAlarmTrap"), ("ELTEX-LTP8X", "plc8FreeSpaceAlarmTrap"), ("ELTEX-LTP8X", "plc8TemperatureAlarmTrap"), ("ELTEX-LTP8X", "plc8FanAlarmTrap"), ("ELTEX-LTP8X", "plc8OntAlarmTrap"), ("ELTEX-LTP8X", "plc8OntPhysicalAlarmTrap"), ("ELTEX-LTP8X", "plc8LoadAverageOkTrap"), ("ELTEX-LTP8X", "plc8RAMOkTrap"), ("ELTEX-LTP8X", "plc8LoginOkTrap"), ("ELTEX-LTP8X", "plc8ConfigSaveOkTrap"), ("ELTEX-LTP8X", "plc8FirmwareUpdateOkTrap"), ("ELTEX-LTP8X", "plc8DuplicateMacOkTrap"), ("ELTEX-LTP8X", "plc8DataLinkLayerOkTrap"), ("ELTEX-LTP8X", "plc8PhysicalLayerFlappingOkTrap"), ("ELTEX-LTP8X", "plc8DataLinkLayerFlappingOkTrap"), ("ELTEX-LTP8X", "plc8InterfaceCriticalLoadOkTrap"), ("ELTEX-LTP8X", "plc8FreeSpaceOkTrap"), ("ELTEX-LTP8X", "plc8TemperatureOkTrap"), ("ELTEX-LTP8X", "plc8FanOkTrap"), ("ELTEX-LTP8X", "plc8OntAlarmTrap"), ("ELTEX-LTP8X", "plc8OntPhysicalAlarmTrap"), ("ELTEX-LTP8X", "plc8ConfigChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltp8xTrapsObjectGroup = ltp8xTrapsObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ltp8xTrapsObjectGroup.setDescription('none')
mibBuilder.exportSymbols("ELTEX-LTP8X", ltp8xIGMPProxyRowStatus=ltp8xIGMPProxyRowStatus, ltp8xONTServiceOverrideSerial=ltp8xONTServiceOverrideSerial, ltp8xONTVoiceProfileTable=ltp8xONTVoiceProfileTable, ltp8xIGMPProxyReportRangesGlobalID=ltp8xIGMPProxyReportRangesGlobalID, plc8LoginOkTrap=plc8LoginOkTrap, ltp8xONTGEMPortPerformMonitoringUSSlot=ltp8xONTGEMPortPerformMonitoringUSSlot, ltp8xPhysicalLayerFlappingAlarmTrap=ltp8xPhysicalLayerFlappingAlarmTrap, ltp8xONTACSStateBindingValue=ltp8xONTACSStateBindingValue, ltp8xSwitchPortBadPktsRcv=ltp8xSwitchPortBadPktsRcv, plc8BatteryPowerOkTrap=plc8BatteryPowerOkTrap, ltp8xOLTConfigPPPoEDosBlockEnabled=ltp8xOLTConfigPPPoEDosBlockEnabled, ltp8xONTTemplateValuesCrossConnectProfile7=ltp8xONTTemplateValuesCrossConnectProfile7, ltp8xPONChannels=ltp8xPONChannels, ltp8xONTFecPerformMonitoringHistDataCounterValue=ltp8xONTFecPerformMonitoringHistDataCounterValue, ltp8xACLGlobalModeTable=ltp8xACLGlobalModeTable, ltp8xONTMassUpdateFirmwareTable=ltp8xONTMassUpdateFirmwareTable, ltp8xP2PEntry=ltp8xP2PEntry, ltp8xOLTConfigDhcpTrustedPrimary=ltp8xOLTConfigDhcpTrustedPrimary, ltp8xSwitchPortMcPktsRcv=ltp8xSwitchPortMcPktsRcv, ltp8xONTAutoUpdateDescription=ltp8xONTAutoUpdateDescription, ltp8xONTTemplateValuesCrossConnectProfile1=ltp8xONTTemplateValuesCrossConnectProfile1, ltp8xONTPortsIGMPVersion=ltp8xONTPortsIGMPVersion, ltp8xONTTemplateOverridesAllocProfile1=ltp8xONTTemplateOverridesAllocProfile1, ltp8xONTStateRFPortOn=ltp8xONTStateRFPortOn, ltp8xONTFullServicesConfigDBAProfile=ltp8xONTFullServicesConfigDBAProfile, ltp8xONTTemplateValuesRFPortEnabled=ltp8xONTTemplateValuesRFPortEnabled, ltp8xONTConfigCrossConnectProfile6=ltp8xONTConfigCrossConnectProfile6, ltp8xONTSignalDegradeTrap=ltp8xONTSignalDegradeTrap, ltp8xOLTDeviceWorkingTrap=ltp8xOLTDeviceWorkingTrap, ltp8xSwitchPortGoodPktsRcv=ltp8xSwitchPortGoodPktsRcv, ltp8xONTACSConfigAltResetToDefaults=ltp8xONTACSConfigAltResetToDefaults, ltp8xONTACSConfigReconfigure=ltp8xONTACSConfigReconfigure, ltp8xRawSwitchMacText=ltp8xRawSwitchMacText, plc8FileDownloadOkTrap=plc8FileDownloadOkTrap, ltp8xONTFecPerformMonitoringHistDataCounterID=ltp8xONTFecPerformMonitoringHistDataCounterID, ltp8xONTPortsIGMPRobustness=ltp8xONTPortsIGMPRobustness, ltp8xONTVoiceName=ltp8xONTVoiceName, ltp8xPONChannelAddressSlot=ltp8xPONChannelAddressSlot, ltp8xONTFirmwaresURL=ltp8xONTFirmwaresURL, plc8FileDownloadAlarmTrap=plc8FileDownloadAlarmTrap, ltp8xONTFirmwaresDownloadPort=ltp8xONTFirmwaresDownloadPort, ltp8xONTCustomCrossConnectEntry=ltp8xONTCustomCrossConnectEntry, ltp8xOLTConfigPPPoEPlusEnabled=ltp8xOLTConfigPPPoEPlusEnabled, ltp8xONTWANCountersTXDrops=ltp8xONTWANCountersTXDrops, ltp8xONTServiceUSCounterValue=ltp8xONTServiceUSCounterValue, ltp8xOLTPPPoESessionsPort=ltp8xOLTPPPoESessionsPort, plc8LowRxPowerAlarmTrap=plc8LowRxPowerAlarmTrap, plc8PonAlarmONUiTrap=plc8PonAlarmONUiTrap, ltp8xACLListsRowStatus=ltp8xACLListsRowStatus, ltp8xLoginOkTrap=ltp8xLoginOkTrap, ltp8xONTConfigFreenessChannel=ltp8xONTConfigFreenessChannel, plc8ONTPowerOffTrap=plc8ONTPowerOffTrap, ltp8xONTTemplateValuesAllocProfile7=ltp8xONTTemplateValuesAllocProfile7, ltp8xPLCBoardStateLoadAverage5Minutes=ltp8xPLCBoardStateLoadAverage5Minutes, ltp8xONTACSConfigAltVoice1Password=ltp8xONTACSConfigAltVoice1Password, ltp8xONTCrossConnectOuterVID=ltp8xONTCrossConnectOuterVID, ltp8xONTFirmwaresEntryID=ltp8xONTFirmwaresEntryID, plc8FirmwareUpdateOkTrap=plc8FirmwareUpdateOkTrap, ltp8xQOSDSCPMappingTable=ltp8xQOSDSCPMappingTable, ltp8xONTPortsMLDVLANID=ltp8xONTPortsMLDVLANID, ltp8xONTMulticastProfileEntry=ltp8xONTMulticastProfileEntry, ltp8xONTStateLaserVoltage=ltp8xONTStateLaserVoltage, ltp8xONTShapingName=ltp8xONTShapingName, ltp8xONTSelectiveTunnelUVID=ltp8xONTSelectiveTunnelUVID, ltp8xONTMulticastGroupsBEBandwidth=ltp8xONTMulticastGroupsBEBandwidth, ltp8xConfigSaveOkTrap=ltp8xConfigSaveOkTrap, ltp8xONTShapingCrossConnect=ltp8xONTShapingCrossConnect, ltp8xPortsUtilizationLastKbitsSent=ltp8xPortsUtilizationLastKbitsSent, ltp8xONTConfigRFPortEnabled=ltp8xONTConfigRFPortEnabled, ltp8xONTACSConfigAltSubscriberID=ltp8xONTACSConfigAltSubscriberID, ltp8xPhysicalLayerFlappingOkTrap=ltp8xPhysicalLayerFlappingOkTrap, ltp8xOntFlappingOkTrap=ltp8xOntFlappingOkTrap, ltp8xChannelOntCntOverflowOkTrap=ltp8xChannelOntCntOverflowOkTrap, ltp8xONTPortsMLDQueryMaxResponseTime=ltp8xONTPortsMLDQueryMaxResponseTime, ltp8xONTTemplateOverridesBerInterval=ltp8xONTTemplateOverridesBerInterval, ltp8xONTPortsName=ltp8xONTPortsName, ltp8xONTServiceBandwidthManagementSlot=ltp8xONTServiceBandwidthManagementSlot, ltp8xONTBandwidthManagementDescription=ltp8xONTBandwidthManagementDescription, ltp8xQOS8021pMappingTable=ltp8xQOS8021pMappingTable, plc8PhysicalLayerFlappingOkTrap=plc8PhysicalLayerFlappingOkTrap, ltp8xONTSlot=ltp8xONTSlot, ltp8xOLTPPPoESessionsTable=ltp8xOLTPPPoESessionsTable, ltp8xPONChannelSFPVendor=ltp8xPONChannelSFPVendor, ltp8xONTCrossConnectDSCounterID=ltp8xONTCrossConnectDSCounterID, ltp8xONTFirmwaresName=ltp8xONTFirmwaresName, ltp8xONTScriptingProfileTable=ltp8xONTScriptingProfileTable, ltp8xONTPortsVEIPIGMPUpstreamTagControl=ltp8xONTPortsVEIPIGMPUpstreamTagControl, ltp8xSwitchOperationalVLANUntaggedPorts=ltp8xSwitchOperationalVLANUntaggedPorts, ltp8xONTTemplateOverridesOMCIErrorTolerant=ltp8xONTTemplateOverridesOMCIErrorTolerant, ltp8xIGMPProxyReportEntry=ltp8xIGMPProxyReportEntry, ltp8xONTPortsProfileEntry=ltp8xONTPortsProfileEntry, ltp8xONTShapingProfileEntry=ltp8xONTShapingProfileEntry, ltp8xONTACSProfilesTable=ltp8xONTACSProfilesTable, ltp8xSwitchPortJabberPkts=ltp8xSwitchPortJabberPkts, ltp8xSwitchPortCollisions=ltp8xSwitchPortCollisions, ltp8xOLTDhcpRATable=ltp8xOLTDhcpRATable, ltp8xONTGEMPortPerformMonitoringUSTable=ltp8xONTGEMPortPerformMonitoringUSTable, ltp8xONTGEMPortPerformMonitoringDSEntry=ltp8xONTGEMPortPerformMonitoringDSEntry, plc8DataLinkLayerOkTrap=plc8DataLinkLayerOkTrap, ltp8xOLTMulticastStatsBackwardsEntry=ltp8xOLTMulticastStatsBackwardsEntry, ltp8xDataLinkLayerFlappingAlarmTrap=ltp8xDataLinkLayerFlappingAlarmTrap, ltp8xONTMulticastStatsRecordID=ltp8xONTMulticastStatsRecordID, ltp8xSwitchMacListMacAddressString=ltp8xSwitchMacListMacAddressString, ltp8xONTServicesName=ltp8xONTServicesName, ltp8xOLTVInterfaceMonitoringDSEntry=ltp8xOLTVInterfaceMonitoringDSEntry, ltp8xONTCustomCrossConnectVID=ltp8xONTCustomCrossConnectVID, ltp8xONTTemplateServicesOverridesServiceID=ltp8xONTTemplateServicesOverridesServiceID, ltp8xONTACSConfigAltProfile=ltp8xONTACSConfigAltProfile, ltp8xONTACSConfigAltPPPLogin=ltp8xONTACSConfigAltPPPLogin, ltp8xQOS8021pMappingFields=ltp8xQOS8021pMappingFields, ltp8xPONChannelStateTable=ltp8xPONChannelStateTable, ltp8xPLCBoardStateSensor1TemperatureExt=ltp8xPLCBoardStateSensor1TemperatureExt, ltp8xONTEthPerformMonitoringHistDataCounterID=ltp8xONTEthPerformMonitoringHistDataCounterID, ltp8xONTTemplateServicesValuesServiceID=ltp8xONTTemplateServicesValuesServiceID, ltp8xONTAllocDescription=ltp8xONTAllocDescription, ltp8xPortsUtilizationSlot=ltp8xPortsUtilizationSlot, ltp8xONTScriptingProfileScriptsEntry=ltp8xONTScriptingProfileScriptsEntry, ltp8xONTStateUpdateFirmware=ltp8xONTStateUpdateFirmware, ltp8xSwitchVLANTable=ltp8xSwitchVLANTable, ltp8xONTStateTemperature=ltp8xONTStateTemperature, ltp8xONTPortsUNIShapingUpstreamPeakRate=ltp8xONTPortsUNIShapingUpstreamPeakRate, ltp8xPONChannelAddressUVID=ltp8xPONChannelAddressUVID, ltp8xONTPortsMCLastGroupIP=ltp8xONTPortsMCLastGroupIP, ltp8xOLTAddressTableProfilesID=ltp8xOLTAddressTableProfilesID, ltp8xONTStateHWVersion=ltp8xONTStateHWVersion, ltp8xRawMacChunkID=ltp8xRawMacChunkID, ltp8xPortsUtilizationTable=ltp8xPortsUtilizationTable, ltp8xPortsUtilizationPortID=ltp8xPortsUtilizationPortID, ltp8xONTServiceDSEntry=ltp8xONTServiceDSEntry, ltp8xONTTemplateValuesShapingProfile=ltp8xONTTemplateValuesShapingProfile, ltp8xSwitchPortPkts65to127Octets=ltp8xSwitchPortPkts65to127Octets, ltp8xOLTPPPoESessionsClientMac=ltp8xOLTPPPoESessionsClientMac, ltp8xONTGEMPortPerformMonitoringUSCounterID=ltp8xONTGEMPortPerformMonitoringUSCounterID, ltp8xONTCrossConnectOuterCOS=ltp8xONTCrossConnectOuterCOS, ltp8xONTServiceDSSerial=ltp8xONTServiceDSSerial, ltp8xQOS8021pMappingSlot=ltp8xQOS8021pMappingSlot, ltp8xONTWANCountersTable=ltp8xONTWANCountersTable, ltp8xONTTemplateValuesCrossConnectProfile2=ltp8xONTTemplateValuesCrossConnectProfile2, ltp8xRSSIUpdateTrap=ltp8xRSSIUpdateTrap, ltp8xONTAddressDatapathForwarding=ltp8xONTAddressDatapathForwarding, ltp8xACLListsName=ltp8xACLListsName, ltp8xDuplicateMacAlarmTrap=ltp8xDuplicateMacAlarmTrap, ltp8xONTHighRecvOpticalPwrTrap=ltp8xONTHighRecvOpticalPwrTrap, ltp8xSwitchPortCountersReset=ltp8xSwitchPortCountersReset, ltp8xPortsUtilizationInterval=ltp8xPortsUtilizationInterval, ltp8xONTACSConfigAltTable=ltp8xONTACSConfigAltTable, plc8LoadAverageOkTrap=plc8LoadAverageOkTrap, ltp8xONTDisableONTSerial=ltp8xONTDisableONTSerial, ltp8xOLTMulticastStatsBackwardsStart=ltp8xOLTMulticastStatsBackwardsStart, ltp8xONTGEMPortPerformMonitoringDSSlot=ltp8xONTGEMPortPerformMonitoringDSSlot, ltp8xSwitchIGMPSnoopingTable=ltp8xSwitchIGMPSnoopingTable, ltp8xInterfaceCriticalLoadOkTrap=ltp8xInterfaceCriticalLoadOkTrap, ltp8xONTFirmwaresRowStatus=ltp8xONTFirmwaresRowStatus, ltp8xONTAllocID=ltp8xONTAllocID, ltp8xONTPortsMLDRobustness=ltp8xONTPortsMLDRobustness, ltp8xPONChannelActModeSlot=ltp8xPONChannelActModeSlot, ltp8xONTCrossConnectBridgeGroup=ltp8xONTCrossConnectBridgeGroup, ltp8xONTCustomCrossConnectSVID=ltp8xONTCustomCrossConnectSVID, ltp8xONTAutoUpdateFirmwareVersionMatches=ltp8xONTAutoUpdateFirmwareVersionMatches, ltp8xOLTVInterfaceMonitoringUSChannelRange=ltp8xOLTVInterfaceMonitoringUSChannelRange, ltp8xONTFirmwareUpdateViaOMCIFilename=ltp8xONTFirmwareUpdateViaOMCIFilename, ltp8xONTPortsVEIPIGMPDownstreamPriority=ltp8xONTPortsVEIPIGMPDownstreamPriority, ltp8xONTEthFrameDSPerformMonitoringHistDataCounterName=ltp8xONTEthFrameDSPerformMonitoringHistDataCounterName, ltp8xONTServiceBandwidthManagementProfile=ltp8xONTServiceBandwidthManagementProfile, ltp8xONTACSProfilesDescription=ltp8xONTACSProfilesDescription, ltp8xONTFecPerformMonitoringHistDataEntry=ltp8xONTFecPerformMonitoringHistDataEntry, ltp8xSwitchMacListMacAddress=ltp8xSwitchMacListMacAddress, ltp8xMLDProxyReportRangesTable=ltp8xMLDProxyReportRangesTable, ltp8xONTWANCountersTXErrors=ltp8xONTWANCountersTXErrors, ltp8xSwitchVLANIGMPSnoopingEnabled=ltp8xSwitchVLANIGMPSnoopingEnabled, ltp8xONTCrossConnectName=ltp8xONTCrossConnectName, ltp8xMLDProxyReportRangesGlobalToVLAN=ltp8xMLDProxyReportRangesGlobalToVLAN, ltp8xOLTVlanProfilesID=ltp8xOLTVlanProfilesID, ltp8xONTCustomCrossConnectID=ltp8xONTCustomCrossConnectID, ltp8xONTConfigPortsProfile=ltp8xONTConfigPortsProfile, ltp8xSwitchPortExcessiveCollisions=ltp8xSwitchPortExcessiveCollisions, ltp8xSwitchPortDropEvents=ltp8xSwitchPortDropEvents, ltp8xONTServiceUSCounterName=ltp8xONTServiceUSCounterName, ltp8xONTStateVersion=ltp8xONTStateVersion, ltp8x=ltp8x, ltp8xOLTMulticastStatsONTSerial=ltp8xOLTMulticastStatsONTSerial, ltp8xOLTTerminalVLANsCOS=ltp8xOLTTerminalVLANsCOS, ltp8xONTCustomCrossConnectSlot=ltp8xONTCustomCrossConnectSlot, ltp8xSwitchPortPkts128to255Octets=ltp8xSwitchPortPkts128to255Octets, ltp8xSwitchPortUnrecogMacCntrRcv=ltp8xSwitchPortUnrecogMacCntrRcv, ltp8xONTFullServicesConfigSlot=ltp8xONTFullServicesConfigSlot, ltp8xONTTemplateValuesAllocProfile1=ltp8xONTTemplateValuesAllocProfile1, ltp8xOLTVInterfaceMonitoringDSCounterName=ltp8xOLTVInterfaceMonitoringDSCounterName, ltp8xPONChannelAddressMacAddress=ltp8xPONChannelAddressMacAddress, ltp8xONTPortsUNIShapingUpstreamCommitedRate=ltp8xONTPortsUNIShapingUpstreamCommitedRate, ltp8xONTCustomCrossConnectSerial=ltp8xONTCustomCrossConnectSerial, ltp8xONTEthFrameDSPerformMonitoringHistDataEntry=ltp8xONTEthFrameDSPerformMonitoringHistDataEntry, ltp8xSwitchVLANSlot=ltp8xSwitchVLANSlot, ltp8xPortsUtilizationAverageKbitsRecv=ltp8xPortsUtilizationAverageKbitsRecv, ltp8xONTServicesProfileEntry=ltp8xONTServicesProfileEntry, ltp8xONTAllocGuaranteedBandwidth=ltp8xONTAllocGuaranteedBandwidth, ltp8xONTStateEntry=ltp8xONTStateEntry, ltp8xONTStateRxPower=ltp8xONTStateRxPower, ltp8xONTTemplateOverridesScriptingProfile=ltp8xONTTemplateOverridesScriptingProfile, ltp8xOLTVInterfaceMonitoringDSCounterID=ltp8xOLTVInterfaceMonitoringDSCounterID, ltp8xONTResetCountersTable=ltp8xONTResetCountersTable, ltp8xONTCrossConnectDescription=ltp8xONTCrossConnectDescription, ltp8xOLTTerminalVLANsVID=ltp8xOLTTerminalVLANsVID, ltp8xONTTemplateServicesValuesCrossConnectProfile=ltp8xONTTemplateServicesValuesCrossConnectProfile, ltp8xONTPortsIGMPQueryInterval=ltp8xONTPortsIGMPQueryInterval, ltp8xONTPortsVEIPIGMPUpstreamVID=ltp8xONTPortsVEIPIGMPUpstreamVID, ltp8xSwitchPortGoodPktsSent=ltp8xSwitchPortGoodPktsSent, ltp8xRAMAlarmTrap=ltp8xRAMAlarmTrap, ltp8xOntFirmwareDeleteOkTrap=ltp8xOntFirmwareDeleteOkTrap, ltp8xONTBufferZoneTable=ltp8xONTBufferZoneTable, ltp8xACLFiltersPort=ltp8xACLFiltersPort, ltp8xONTConfigAllocProfile1=ltp8xONTConfigAllocProfile1, plc8ONTStateChangeTrap=plc8ONTStateChangeTrap, ltp8xONTConfigCrossConnectProfile2=ltp8xONTConfigCrossConnectProfile2, plc8OntDyingGaspTrap=plc8OntDyingGaspTrap, ltp8xONTFWUpdateSchedulerTries=ltp8xONTFWUpdateSchedulerTries, ltp8xONTFirmwareUpdateViaOMCISlot=ltp8xONTFirmwareUpdateViaOMCISlot, ltp8xONTACSConfigAltVoice2Enable=ltp8xONTACSConfigAltVoice2Enable, plc8LoadAverageAlarmTrap=plc8LoadAverageAlarmTrap, ltp8xOLTONTAutoFirmwareUpdateEnabled=ltp8xOLTONTAutoFirmwareUpdateEnabled, ltp8xONTTemplateValuesPassword=ltp8xONTTemplateValuesPassword, plc8InterfaceCriticalLoadAlarmTrap=plc8InterfaceCriticalLoadAlarmTrap, ltp8xOLTMIBBoundary7=ltp8xOLTMIBBoundary7, plc8OntOkTrap=plc8OntOkTrap, ltp8xIGMPProxyReportRangesGlobalTable=ltp8xIGMPProxyReportRangesGlobalTable, ltp8xPowerSupplyAlarmTrap=ltp8xPowerSupplyAlarmTrap, ltp8xOntConfigAlarmTrap=ltp8xOntConfigAlarmTrap, ltp8xONTEthPerformMonitoringHistDataCounterName=ltp8xONTEthPerformMonitoringHistDataCounterName, ltp8xONTFirmwaresSpecificsVendor=ltp8xONTFirmwaresSpecificsVendor, ltp8xMLDProxyGlobalRowStatus=ltp8xMLDProxyGlobalRowStatus, ltp8xONTConfigOMCIErrorTolerant=ltp8xONTConfigOMCIErrorTolerant, ltp8xONTACSConfigVoice1Enable=ltp8xONTACSConfigVoice1Enable, ltp8xONTEthFrameDSPerformMonitoringHistDataPort=ltp8xONTEthFrameDSPerformMonitoringHistDataPort, ltp8xRawSwitchMacChunkID=ltp8xRawSwitchMacChunkID, ltp8xONTAutoUpdateRowStatus=ltp8xONTAutoUpdateRowStatus, ltp8xONTTemplateOverridesCrossConnectProfile4=ltp8xONTTemplateOverridesCrossConnectProfile4, ltp8xONTFWUpdateSchedulerSerial=ltp8xONTFWUpdateSchedulerSerial, ltp8xOLTDeviceResetTrap=ltp8xOLTDeviceResetTrap, ltp8xONTConnectionLogTable=ltp8xONTConnectionLogTable, ltp8xOLTConfigDhcpEntry=ltp8xOLTConfigDhcpEntry, ltp8xSwitchIGMPSnoopingSlot=ltp8xSwitchIGMPSnoopingSlot, ltp8xONTFirmwaresSchedulerDailyFrom=ltp8xONTFirmwaresSchedulerDailyFrom, ltp8xONTGalEthPerformMonitoringHistDataSerial=ltp8xONTGalEthPerformMonitoringHistDataSerial, ltp8xONTDisableActionEnable=ltp8xONTDisableActionEnable, ONTSerial=ONTSerial, ltp8xPONChannelAddressONTID=ltp8xPONChannelAddressONTID, ltp8xONTTemplateValuesPortsProfile=ltp8xONTTemplateValuesPortsProfile, ltp8xONTFirmwaresDownloadPath=ltp8xONTFirmwaresDownloadPath, ltp8xOLTStateTable=ltp8xOLTStateTable, ltp8xONTGEMPortPerformMonitoringUSEntry=ltp8xONTGEMPortPerformMonitoringUSEntry, ltp8xBatteryLowOkTrap=ltp8xBatteryLowOkTrap, ltp8xPLCBoardStateEntry=ltp8xPLCBoardStateEntry, ltp8xOLTMulticastStatsTable=ltp8xOLTMulticastStatsTable, ltp8xONTGEMPortPerformMonitoringDSCounterValue=ltp8xONTGEMPortPerformMonitoringDSCounterValue)
mibBuilder.exportSymbols("ELTEX-LTP8X", ltp8xOLTONTAutoFirmwareUpdateEntry=ltp8xOLTONTAutoFirmwareUpdateEntry, ltp8xONTPortsMCFirstGroupIP=ltp8xONTPortsMCFirstGroupIP, ltp8xONTMassUpdateFirmwareSlot=ltp8xONTMassUpdateFirmwareSlot, ltp8xQOSConfigTable=ltp8xQOSConfigTable, ltp8xONTConfigShapingProfile=ltp8xONTConfigShapingProfile, ltp8xACLFiltersListID=ltp8xACLFiltersListID, ltp8xONTACSConfigResetToDefaults=ltp8xONTACSConfigResetToDefaults, ltp8xOLTTerminalVLANsNamesName=ltp8xOLTTerminalVLANsNamesName, ltp8xOntUpdateOkTrap=ltp8xOntUpdateOkTrap, ltp8xPONChannelAddressEntryID=ltp8xPONChannelAddressEntryID, ltp8xONTServiceBandwidthManagementServiceID=ltp8xONTServiceBandwidthManagementServiceID, ltp8xOLTVInterfaceMonitoringUSCounterName=ltp8xOLTVInterfaceMonitoringUSCounterName, ltp8xONTCrossConnectTagMode=ltp8xONTCrossConnectTagMode, ltp8xONTFirmwaresSafeMode=ltp8xONTFirmwaresSafeMode, ltp8xONTEthPerformMonitoringHistDataPort=ltp8xONTEthPerformMonitoringHistDataPort, ltp8xONTConfigChannel=ltp8xONTConfigChannel, ltp8xONTEthFrameExtendedPerformMonitoringUSEntry=ltp8xONTEthFrameExtendedPerformMonitoringUSEntry, ltp8xIGMPProxyGlobalRowStatus=ltp8xIGMPProxyGlobalRowStatus, ltp8xP2PTable=ltp8xP2PTable, plc8ONTREITrap=plc8ONTREITrap, ltp8xONTServiceBandwidthManagementTable=ltp8xONTServiceBandwidthManagementTable, ltp8xONTGEMPortCountersUSFinishedIntervals=ltp8xONTGEMPortCountersUSFinishedIntervals, ltp8xONTFirmwaresSpecificsRowStatus=ltp8xONTFirmwaresSpecificsRowStatus, ltp8xOLTPPPoESessionsEntry=ltp8xOLTPPPoESessionsEntry, ltp8xONTShapingUpstreamEnable=ltp8xONTShapingUpstreamEnable, ltp8xSwitchPortsTable=ltp8xSwitchPortsTable, ltp8xACLListsID=ltp8xACLListsID, ltp8xONTEthFrameExtendedPerformMonitoringDSCounterName=ltp8xONTEthFrameExtendedPerformMonitoringDSCounterName, ltp8xMLDProxyReportRangesGlobalTable=ltp8xMLDProxyReportRangesGlobalTable, ltp8xPONChannelResetCounters=ltp8xPONChannelResetCounters, plc8DataLinkLayerAlarmTrap=plc8DataLinkLayerAlarmTrap, ltp8xOntFlappingAlarmTrap=ltp8xOntFlappingAlarmTrap, ltp8xOLTTerminalVLANsNamesID=ltp8xOLTTerminalVLANsNamesID, ltp8xSwitchPortBrdcPktsRcv=ltp8xSwitchPortBrdcPktsRcv, ltp8xONTACSState=ltp8xONTACSState, ltp8xSwitchVLANEntry=ltp8xSwitchVLANEntry, ltp8xONTConfigSerial=ltp8xONTConfigSerial, ltp8xONTACSUserPropertiesValue=ltp8xONTACSUserPropertiesValue, ltp8xONTACSUserID=ltp8xONTACSUserID, ltp8xOntPhysicalOkTrap=ltp8xOntPhysicalOkTrap, ltp8xOLTUpdateFirmwareAction=ltp8xOLTUpdateFirmwareAction, plc8LanLosOkTrap=plc8LanLosOkTrap, ltp8xONTServiceUSTable=ltp8xONTServiceUSTable, ltp8xONTGEMPortCountersUSPayloadBytesLOW=ltp8xONTGEMPortCountersUSPayloadBytesLOW, ltp8xONTManagementUsername=ltp8xONTManagementUsername, ltp8xSwitchVLANMLDSnoopingEnabled=ltp8xSwitchVLANMLDSnoopingEnabled, ltp8xOLTStateSlot=ltp8xOLTStateSlot, ltp8xONTShapingDescription=ltp8xONTShapingDescription, ltp8xONTPortsMLDUpstreamMode=ltp8xONTPortsMLDUpstreamMode, ltp8xSwitchPortPkts512to1023Octets=ltp8xSwitchPortPkts512to1023Octets, ltp8xONTServiceBandwidthManagementSerial=ltp8xONTServiceBandwidthManagementSerial, ltp8xFirmwareUpdateAlarmTrap=ltp8xFirmwareUpdateAlarmTrap, ltp8xIGMPProxyReportRangesTable=ltp8xIGMPProxyReportRangesTable, ltp8xONTConfigAllocProfile2=ltp8xONTConfigAllocProfile2, ltp8xOLTMulticastStatsMulticastAddress=ltp8xOLTMulticastStatsMulticastAddress, ltp8xACLFiltersFilterID=ltp8xACLFiltersFilterID, ltp8xQOSDSCPMappingQueue=ltp8xQOSDSCPMappingQueue, ltp8xONTPortsUNIIGMPDownstreamPriority=ltp8xONTPortsUNIIGMPDownstreamPriority, ltp8xONTPortsMLDQueryInterval=ltp8xONTPortsMLDQueryInterval, ltp8xIGMPProxyReportEnabled=ltp8xIGMPProxyReportEnabled, ltp8xONTFirmwaresFilesVersion=ltp8xONTFirmwaresFilesVersion, ltp8xONTConfigScriptingProfile=ltp8xONTConfigScriptingProfile, ltp8xSwitchPortCountersTable=ltp8xSwitchPortCountersTable, ltp8xPONChannelAddressAge=ltp8xPONChannelAddressAge, ltp8xONTPortsMLDMCPreviewResetTime=ltp8xONTPortsMLDMCPreviewResetTime, ltp8xOLTMulticastStatsStop=ltp8xOLTMulticastStatsStop, ltp8xONTACSConfigEntry=ltp8xONTACSConfigEntry, ltp8xONTFWUpdateSchedulerTable=ltp8xONTFWUpdateSchedulerTable, ltp8xPONChannelStateEntry=ltp8xPONChannelStateEntry, plc8OkTraps=plc8OkTraps, ltp8xONTEthFrameUSPerformMonitoringHistDataCounterID=ltp8xONTEthFrameUSPerformMonitoringHistDataCounterID, ltp8xRawData=ltp8xRawData, ltp8xSyncCountersEntry=ltp8xSyncCountersEntry, ltp8xONTEthFrameExtendedPerformMonitoringUSCounterName=ltp8xONTEthFrameExtendedPerformMonitoringUSCounterName, plc8BatteryPowerAlarmTrap=plc8BatteryPowerAlarmTrap, ltp8xONTWANCountersRecvBytes=ltp8xONTWANCountersRecvBytes, ltp8xSwitchOperationalVLANName=ltp8xSwitchOperationalVLANName, ltp8xONTServiceBandwidthManagementEntry=ltp8xONTServiceBandwidthManagementEntry, ltp8xOLTVlanProfilesDescription=ltp8xOLTVlanProfilesDescription, ltp8xONTGEMPortCountersDSPayloadBytesHIGH=ltp8xONTGEMPortCountersDSPayloadBytesHIGH, ltp8xONTPortsIGMPQueryMaxResponseTime=ltp8xONTPortsIGMPQueryMaxResponseTime, plc8TemperatureOkTrap=plc8TemperatureOkTrap, ltp8xONTAllocStatusReporting=ltp8xONTAllocStatusReporting, ltp8xONTMulticastStatsTable=ltp8xONTMulticastStatsTable, ltp8xSwitchMLDSnoopingEnabled=ltp8xSwitchMLDSnoopingEnabled, ltp8xONTAutoUpdateFilename=ltp8xONTAutoUpdateFilename, ltp8xONTStaticWANConfigTable=ltp8xONTStaticWANConfigTable, ltp8xONTUNIPortsStateDuplex=ltp8xONTUNIPortsStateDuplex, ltp8xONTFirmwaresHardware=ltp8xONTFirmwaresHardware, ltp8xOLTVlanProfilesTable=ltp8xOLTVlanProfilesTable, ltp8xOLTConfigActivationPeriod=ltp8xOLTConfigActivationPeriod, ltp8xONTACSUserPropertiesEntry=ltp8xONTACSUserPropertiesEntry, ltp8xONTACSConfigVoice2Password=ltp8xONTACSConfigVoice2Password, ltp8xOLTConfigActivationTable=ltp8xOLTConfigActivationTable, ltp8xONTShapingUpstreamPeakRate=ltp8xONTShapingUpstreamPeakRate, ltp8xPONChannelAddressUniPort=ltp8xPONChannelAddressUniPort, ltp8xDataLinkLayerFlappingOkTrap=ltp8xDataLinkLayerFlappingOkTrap, ltp8xONTWANCountersTrmtBytes=ltp8xONTWANCountersTrmtBytes, ltp8xSwitchPortsName=ltp8xSwitchPortsName, ltp8xONTAddressPriority=ltp8xONTAddressPriority, ltp8xSwitchPortBadFcRcv=ltp8xSwitchPortBadFcRcv, ltp8xIGMPProxyReportRangesToVLAN=ltp8xIGMPProxyReportRangesToVLAN, ltp8xOLTMIBBoundary8=ltp8xOLTMIBBoundary8, ltp8xPONChannelActModeHostControlledLumpedSN=ltp8xPONChannelActModeHostControlledLumpedSN, ltp8xOLTConfigPPPoEMaxSessions=ltp8xOLTConfigPPPoEMaxSessions, ltp8xONTServiceOverrideCustomerVID=ltp8xONTServiceOverrideCustomerVID, ltp8xACLFiltersTable=ltp8xACLFiltersTable, ltp8xOLTDhcpRASlot=ltp8xOLTDhcpRASlot, ltp8xONTEthFrameDSPerformMonitoringHistDataSlot=ltp8xONTEthFrameDSPerformMonitoringHistDataSlot, ltp8xONTTemplateOverridesAllocProfile4=ltp8xONTTemplateOverridesAllocProfile4, ltp8xONTAddressEntryType=ltp8xONTAddressEntryType, ltp8xSwitchPortUndersizePkts=ltp8xSwitchPortUndersizePkts, ltp8xONTFirmwareUpdateViaOMCISerial=ltp8xONTFirmwareUpdateViaOMCISerial, ltp8xLanLosOkTrap=ltp8xLanLosOkTrap, ltp8xOLTMulticastStatsChannel=ltp8xOLTMulticastStatsChannel, ltp8xTrapsObjectGroup=ltp8xTrapsObjectGroup, ltp8xONTConfigCrossConnectProfile5=ltp8xONTConfigCrossConnectProfile5, ltp8xONTACSConfigTable=ltp8xONTACSConfigTable, ltp8xONTPortsProfileMLDDynamicEntriesEntry=ltp8xONTPortsProfileMLDDynamicEntriesEntry, ltp8xDataLinkLayerAlarmTrap=ltp8xDataLinkLayerAlarmTrap, ltp8xQOSConfig=ltp8xQOSConfig, ltp8xOLTStateFirmwareVersionChip2=ltp8xOLTStateFirmwareVersionChip2, ltp8xONTEthFrameExtendedPerformMonitoringDSEntry=ltp8xONTEthFrameExtendedPerformMonitoringDSEntry, ltp8xSwitchPortCountersPortID=ltp8xSwitchPortCountersPortID, ltp8xONTFirmwaresFilesEntry=ltp8xONTFirmwaresFilesEntry, ltp8xONTFullServicesConfigSerial=ltp8xONTFullServicesConfigSerial, ltp8xONTTemplateOverridesFecUp=ltp8xONTTemplateOverridesFecUp, ltp8xIGMPProxyReportRangesGlobalFromVLAN=ltp8xIGMPProxyReportRangesGlobalFromVLAN, ltp8xSwitchMacListSlot=ltp8xSwitchMacListSlot, ltp8xSwitchPortBadOctetsRcv=ltp8xSwitchPortBadOctetsRcv, ltp8xONTACSPropertiesONTSerial=ltp8xONTACSPropertiesONTSerial, ltp8xOLTPPPoESessionsSlot=ltp8xOLTPPPoESessionsSlot, ltp8xONTServiceUSSlot=ltp8xONTServiceUSSlot, ltp8xSwitchPortGoodOctetsRcv=ltp8xSwitchPortGoodOctetsRcv, ltp8xONTFirmwaresSchedulerPeriodTo=ltp8xONTFirmwaresSchedulerPeriodTo, ltp8xONTUNIPortsStateSpeed=ltp8xONTUNIPortsStateSpeed, ltp8xONTFWUpdateSchedulerEntry=ltp8xONTFWUpdateSchedulerEntry, ltp8xONTConnectionLogSlot=ltp8xONTConnectionLogSlot, ltp8xMLDProxyReportRangesToVLAN=ltp8xMLDProxyReportRangesToVLAN, ltp8xSyncCountersConfig=ltp8xSyncCountersConfig, ltp8xONTACSUserPropertiesTable=ltp8xONTACSUserPropertiesTable, ltp8xONTFirmwaresFilesEntryID=ltp8xONTFirmwaresFilesEntryID, ltp8xONTConfigFreenessSerial=ltp8xONTConfigFreenessSerial, ltp8xOntPhysicalAlarmTrap=ltp8xOntPhysicalAlarmTrap, ltp8xOLTConfigPPPoEBcPacketPerSecond=ltp8xOLTConfigPPPoEBcPacketPerSecond, ltp8xSwitchOperationalVLANEntry=ltp8xSwitchOperationalVLANEntry, ltp8xRedundantChannelSwitchTrap=ltp8xRedundantChannelSwitchTrap, ltp8xONTFirmwaresSchedulerWeeklyTo=ltp8xONTFirmwaresSchedulerWeeklyTo, ltp8xMLDProxyReportRangesGlobalFromVLAN=ltp8xMLDProxyReportRangesGlobalFromVLAN, ltp8xPONChannelSFPProductNumber=ltp8xPONChannelSFPProductNumber, plc8RedundancyMasterChannelFailTrap=plc8RedundancyMasterChannelFailTrap, ltp8xONTConfigChangeTrap=ltp8xONTConfigChangeTrap, ltp8xONTAddressEntry=ltp8xONTAddressEntry, ltp8xQOSDSCPMappingSlot=ltp8xQOSDSCPMappingSlot, ltp8xONTTemplateValuesFecUp=ltp8xONTTemplateValuesFecUp, ltp8xSwitchPortMcPktsSent=ltp8xSwitchPortMcPktsSent, ltp8xONTTemplateValuesManagementProfile=ltp8xONTTemplateValuesManagementProfile, ltp8xONTFirmwaresFilesDelete=ltp8xONTFirmwaresFilesDelete, plc8OLTDeviceNotWorkingTrap=plc8OLTDeviceNotWorkingTrap, ltp8xPONChannelAddressEntry=ltp8xPONChannelAddressEntry, ltp8xONTConfigFreenessTable=ltp8xONTConfigFreenessTable, ltp8xOLTVInterfaceMonitoringDSTable=ltp8xOLTVInterfaceMonitoringDSTable, ltp8xMLDProxyRowStatus=ltp8xMLDProxyRowStatus, ltp8xONTFullServicesConfigCrossConnectProfile=ltp8xONTFullServicesConfigCrossConnectProfile, ltp8xONTFirmwareUpdateViaOMCI=ltp8xONTFirmwareUpdateViaOMCI, ltp8xONTWANCountersRXErrors=ltp8xONTWANCountersRXErrors, ltp8xONTTemplateOverridesPassword=ltp8xONTTemplateOverridesPassword, ltp8xSwitchMacListInterface=ltp8xSwitchMacListInterface, ltp8xOLTConfigDhcpOverwrtOption82=ltp8xOLTConfigDhcpOverwrtOption82, ltp8xOLTMulticastStatsStart=ltp8xOLTMulticastStatsStart, plc8ONTHighRecvOpticalPwrTrap=plc8ONTHighRecvOpticalPwrTrap, ltp8xONTFirmwaresScheduler=ltp8xONTFirmwaresScheduler, ltp8xPLCBoardStateTable=ltp8xPLCBoardStateTable, ltp8xOLTConfigDhcpTrustedServerEnabled=ltp8xOLTConfigDhcpTrustedServerEnabled, ltp8xOLTDhcpRAEntry=ltp8xOLTDhcpRAEntry, ltp8xONTScriptingProfiles=ltp8xONTScriptingProfiles, ltp8xOLTMulticastStatsBackwardsTable=ltp8xOLTMulticastStatsBackwardsTable, ltp8xChannelFlappingAlarmTrap=ltp8xChannelFlappingAlarmTrap, ltp8xOLTStateReconfigure=ltp8xOLTStateReconfigure, DBAStatusReport=DBAStatusReport, ltp8xONTPortsVEIPMaxMulticastBandwidth=ltp8xONTPortsVEIPMaxMulticastBandwidth, ltp8xONTACSStateLock=ltp8xONTACSStateLock, ltp8xONTFWUpdateSchedulerRowStatus=ltp8xONTFWUpdateSchedulerRowStatus, ltp8xONTFirmwaresProfilesEntry=ltp8xONTFirmwaresProfilesEntry, ltp8xOLTConfigActivationSlot=ltp8xOLTConfigActivationSlot, ltp8xONTConfigVoiceProfile=ltp8xONTConfigVoiceProfile, ltp8xBatteryPowerAlarmTrap=ltp8xBatteryPowerAlarmTrap, ltp8xONTTemplateServicesValuesDBAProfile=ltp8xONTTemplateServicesValuesDBAProfile, ltp8xOntDyingGaspTrap=ltp8xOntDyingGaspTrap, ltp8xONTEthFrameExtendedPerformMonitoringDSTable=ltp8xONTEthFrameExtendedPerformMonitoringDSTable, ltp8xONTVoiceRowStatus=ltp8xONTVoiceRowStatus, ltp8xONTConfigHostControlledOMCI=ltp8xONTConfigHostControlledOMCI, ltp8xONTFullServicesConfigEntry=ltp8xONTFullServicesConfigEntry, ltp8xPONChannelReconfigure=ltp8xPONChannelReconfigure, ltp8xONTScriptingRowStatus=ltp8xONTScriptingRowStatus, ltp8xONTServicesDescription=ltp8xONTServicesDescription, ltp8xONTTemplateServicesOverridesTable=ltp8xONTTemplateServicesOverridesTable, ltp8xONTFirmwaresSpecificsHardware=ltp8xONTFirmwaresSpecificsHardware, ltp8xMLDProxyReportRangesID=ltp8xMLDProxyReportRangesID, ltp8xONTMulticastID=ltp8xONTMulticastID, ltp8xONTTemplateOverridesPortsProfile=ltp8xONTTemplateOverridesPortsProfile, ltp8xDuplicateMacOkTrap=ltp8xDuplicateMacOkTrap, ltp8xONTCrossConnectID=ltp8xONTCrossConnectID, ltp8xSwitchPortLateCollisions=ltp8xSwitchPortLateCollisions, ltp8xACLFiltersIpAddress=ltp8xACLFiltersIpAddress, ltp8xONTManagementCrossConnect=ltp8xONTManagementCrossConnect, ltp8xONTPortsVEIPIGMPUpstreamPriority=ltp8xONTPortsVEIPIGMPUpstreamPriority, ltp8xONTEthFrameDSPerformMonitoringHistDataCounterValue=ltp8xONTEthFrameDSPerformMonitoringHistDataCounterValue, ltp8xONTStateResetToDefaults=ltp8xONTStateResetToDefaults, ltp8xONTServiceOverrideSlot=ltp8xONTServiceOverrideSlot, ltp8xObjectGroup=ltp8xObjectGroup, ltp8xONTEthPerformMonitoringHistDataTable=ltp8xONTEthPerformMonitoringHistDataTable, ltp8xONTTemplateOverridesCrossConnectProfile1=ltp8xONTTemplateOverridesCrossConnectProfile1, ltp8xIGMPProxyReportRangesID=ltp8xIGMPProxyReportRangesID, ltp8xACLFiltersMacAddress=ltp8xACLFiltersMacAddress, ltp8xONTMassUpdateFirmwareEntry=ltp8xONTMassUpdateFirmwareEntry, ltp8xOLTStateHardwareVersionChip2=ltp8xOLTStateHardwareVersionChip2, ltp8xONTEthFrameExtendedPerformMonitoringDSSerial=ltp8xONTEthFrameExtendedPerformMonitoringDSSerial, ltp8xONTGEMPortCountersEntry=ltp8xONTGEMPortCountersEntry, ltp8xONTEthPerformMonitoringHistDataEntry=ltp8xONTEthPerformMonitoringHistDataEntry, ltp8xONTSelectiveTunnelEntry=ltp8xONTSelectiveTunnelEntry, ltp8xONTTemplateValuesAllocProfile3=ltp8xONTTemplateValuesAllocProfile3, ltp8xFanOkTrap=ltp8xFanOkTrap, ltp8xONTTemplateOverridesCrossConnectProfile3=ltp8xONTTemplateOverridesCrossConnectProfile3, ltp8xONTGEMPortPerformMonitoringDSCounterID=ltp8xONTGEMPortPerformMonitoringDSCounterID, ltp8xOntAlarmTrap=ltp8xOntAlarmTrap, ltp8xOLTStateDriverVersion=ltp8xOLTStateDriverVersion, ltp8xONTUNIPortsStateSerial=ltp8xONTUNIPortsStateSerial, DBAServiceClass=DBAServiceClass, ltp8xOLTPPPoESessionsChannel=ltp8xOLTPPPoESessionsChannel, ltp8xONTAllocName=ltp8xONTAllocName, ltp8xONTScriptingName=ltp8xONTScriptingName, ltp8xOLTPPPoESessionsSerial=ltp8xOLTPPPoESessionsSerial, ltp8xONTPortsUNIIGMPUpstreamVID=ltp8xONTPortsUNIIGMPUpstreamVID, ltp8xONTFirmwares=ltp8xONTFirmwares, ltp8xONTAllocBestEffortBandwidth=ltp8xONTAllocBestEffortBandwidth, ltp8xONTStateReset=ltp8xONTStateReset, ltp8xOLTConfigPPPoESlot=ltp8xOLTConfigPPPoESlot, ltp8xONTAddressUVID=ltp8xONTAddressUVID, ltp8xOLTMulticastStatsBackwardsMulticastAddress=ltp8xOLTMulticastStatsBackwardsMulticastAddress, ltp8xFanAlarmTrap=ltp8xFanAlarmTrap, ltp8xONTFirmwaresDownloadResult=ltp8xONTFirmwaresDownloadResult, ltp8xPLCBoardStateSensor2Temperature=ltp8xPLCBoardStateSensor2Temperature, ltp8xONTCrossConnectRowStatus=ltp8xONTCrossConnectRowStatus, ltp8xPONChannelAddressTable=ltp8xPONChannelAddressTable, ltp8xMLDProxyReportRangesFromVLAN=ltp8xMLDProxyReportRangesFromVLAN, ltp8xONTPortsMulticastIPVersion=ltp8xONTPortsMulticastIPVersion, ltp8xACLFiltersSlot=ltp8xACLFiltersSlot, ltp8xONTConfigPassword=ltp8xONTConfigPassword, ltp8xONTSelectiveTunnelServiceID=ltp8xONTSelectiveTunnelServiceID, ltp8xFreeSpaceOkTrap=ltp8xFreeSpaceOkTrap, ltp8xONTTemplateOverridesRFPortEnabled=ltp8xONTTemplateOverridesRFPortEnabled, ltp8xPonAlarmChannelTrap=ltp8xPonAlarmChannelTrap, ltp8xONTCrossConnectUSCounterValue=ltp8xONTCrossConnectUSCounterValue)
mibBuilder.exportSymbols("ELTEX-LTP8X", ltp8xONTAddressSVID=ltp8xONTAddressSVID, plc8ConfigSaveOkTrap=plc8ConfigSaveOkTrap, ltp8xONTTemplateValuesAllocProfile5=ltp8xONTTemplateValuesAllocProfile5, ltp8xONTCrossConnectIphostEid=ltp8xONTCrossConnectIphostEid, ltp8xOLTTerminalVLANsTable=ltp8xOLTTerminalVLANsTable, ltp8xONTPortsDescription=ltp8xONTPortsDescription, ltp8xONTTemplateOverridesAllocProfile0=ltp8xONTTemplateOverridesAllocProfile0, ltp8xONTConfigServicesProfile=ltp8xONTConfigServicesProfile, ltp8xONTACSConfigAltRowStatus=ltp8xONTACSConfigAltRowStatus, ltp8xONTPortsUNIMulticastEnabled=ltp8xONTPortsUNIMulticastEnabled, ltp8xONTTemplateServicesOverridesDBAProfile=ltp8xONTTemplateServicesOverridesDBAProfile, ltp8xONTCrossConnectUSCounterName=ltp8xONTCrossConnectUSCounterName, ltp8xSwitchIGMPSnoopingEnabled=ltp8xSwitchIGMPSnoopingEnabled, plc8ONTSignalDegradeTrap=plc8ONTSignalDegradeTrap, ltp8xACLFiltersProtocol=ltp8xACLFiltersProtocol, plc8ChannelStateChangeTrap=plc8ChannelStateChangeTrap, ltp8xONTACSProfilesName=ltp8xONTACSProfilesName, ltp8xONTTemplateValuesCrossConnectProfile4=ltp8xONTTemplateValuesCrossConnectProfile4, ltp8xONTFirmwaresVersion=ltp8xONTFirmwaresVersion, ltp8xOLTMIBBoundary2=ltp8xOLTMIBBoundary2, ltp8xONTACSConfigSIPProxy=ltp8xONTACSConfigSIPProxy, ltp8xONTTemplateServicesValuesEntry=ltp8xONTTemplateServicesValuesEntry, ltp8xONTShapingRowStatus=ltp8xONTShapingRowStatus, ltp8xONTCrossConnectUCOS=ltp8xONTCrossConnectUCOS, ltp8xONTPowerOffTrap=ltp8xONTPowerOffTrap, ltp8xOLTPPPoESessionsSessionID=ltp8xOLTPPPoESessionsSessionID, ltp8xONTFullServicesConfigTable=ltp8xONTFullServicesConfigTable, ltp8xONTServiceUSCounterID=ltp8xONTServiceUSCounterID, ltp8xONTShapingUpstreamCommitedRate=ltp8xONTShapingUpstreamCommitedRate, ltp8xONTACSPrivatesPropertyName=ltp8xONTACSPrivatesPropertyName, ltp8xONTFirmwaresEntry=ltp8xONTFirmwaresEntry, ltp8xOLTVInterfaceMonitoringDSCounterValue=ltp8xOLTVInterfaceMonitoringDSCounterValue, ltp8xONTSelectiveTunnelTable=ltp8xONTSelectiveTunnelTable, plc8OLTDeviceWorkingTrap=plc8OLTDeviceWorkingTrap, LTPONTState=LTPONTState, ltp8xONTEthFrameExtendedPerformMonitoringUSTable=ltp8xONTEthFrameExtendedPerformMonitoringUSTable, ltp8xONTConfigCrossConnectProfile3=ltp8xONTConfigCrossConnectProfile3, ltp8xONTGEMPortCountersTable=ltp8xONTGEMPortCountersTable, ltp8xOLTConfigDhcpPortBlockTime=ltp8xOLTConfigDhcpPortBlockTime, ltp8xONTConfigCrossConnectProfile4=ltp8xONTConfigCrossConnectProfile4, ltp8xRawMacTable=ltp8xRawMacTable, ltp8xOLTResetCountersEntry=ltp8xOLTResetCountersEntry, ltp8xONTCrossConnectDSCrossConnect=ltp8xONTCrossConnectDSCrossConnect, ltp8xOLTConfigDhcpDosBlockEnabled=ltp8xOLTConfigDhcpDosBlockEnabled, ltp8xONTScriptingText=ltp8xONTScriptingText, ltp8xONTMulticastName=ltp8xONTMulticastName, plc8InterfaceCriticalLoadOkTrap=plc8InterfaceCriticalLoadOkTrap, ltp8xONTTemplateValuesBerUpdatePeriod=ltp8xONTTemplateValuesBerUpdatePeriod, ltp8xONTWANCountersEntry=ltp8xONTWANCountersEntry, ltp8xONTACSPropertiesEntry=ltp8xONTACSPropertiesEntry, ltp8xONTACSStateCommitRequest=ltp8xONTACSStateCommitRequest, ltp8xRawSwitchMacTable=ltp8xRawSwitchMacTable, AddressEntryType=AddressEntryType, ltp8xOLTMulticastStatsRecordID=ltp8xOLTMulticastStatsRecordID, ltp8xONTACSConfigPPPPassword=ltp8xONTACSConfigPPPPassword, ltp8xOLTConfigDhcpSlot=ltp8xOLTConfigDhcpSlot, ltp8xONTCrossConnectInnerVID=ltp8xONTCrossConnectInnerVID, ltp8xONTPortsUNIShapingUpstreamEnabled=ltp8xONTPortsUNIShapingUpstreamEnabled, ltp8xONTTemplateOverridesShapingProfile=ltp8xONTTemplateOverridesShapingProfile, ltp8xONTPortsVEIPMulticastEnable=ltp8xONTPortsVEIPMulticastEnable, ltp8xACLListsSlot=ltp8xACLListsSlot, ltp8xONTAllocSize=ltp8xONTAllocSize, ltp8xONTWANCountersTrmtFrames=ltp8xONTWANCountersTrmtFrames, ltp8xONTResetCountersSerial=ltp8xONTResetCountersSerial, ltp8xOLTConfigPPPoERemoteIDFormat=ltp8xOLTConfigPPPoERemoteIDFormat, ltp8xOLTPPPoESessionsUnblock=ltp8xOLTPPPoESessionsUnblock, ltp8xOLT=ltp8xOLT, ltp8xONTEthFrameDSPerformMonitoringHistDataSerial=ltp8xONTEthFrameDSPerformMonitoringHistDataSerial, plc8LoginAlarmTrap=plc8LoginAlarmTrap, ltp8xONTManagementURL=ltp8xONTManagementURL, ltp8xONTServiceOverrideTable=ltp8xONTServiceOverrideTable, ltp8xONTCustomCrossConnectTable=ltp8xONTCustomCrossConnectTable, ltp8xONTSelectiveTunnelSerial=ltp8xONTSelectiveTunnelSerial, ltp8xONTFWUpdateSchedulerSlot=ltp8xONTFWUpdateSchedulerSlot, ltp8xONTTemplateValuesAllocProfile0=ltp8xONTTemplateValuesAllocProfile0, ltp8xONTMulticastStatsSlot=ltp8xONTMulticastStatsSlot, ltp8xPONChannelActModeChannel=ltp8xPONChannelActModeChannel, ltp8xLanLosAlarmTrap=ltp8xLanLosAlarmTrap, ltp8xONTTemplateOverridesCrossConnectProfile0=ltp8xONTTemplateOverridesCrossConnectProfile0, ltp8xSwitchPortsID=ltp8xSwitchPortsID, ltp8xONTShapingProfileServicesEntry=ltp8xONTShapingProfileServicesEntry, ltp8xOLTConfigPPPoEPortBlockTime=ltp8xOLTConfigPPPoEPortBlockTime, ltp8xONTPortsVEIPIGMPDownstreamVID=ltp8xONTPortsVEIPIGMPDownstreamVID, ltp8xACLGlobalModeSlot=ltp8xACLGlobalModeSlot, ltp8xONTStateRSSI=ltp8xONTStateRSSI, ltp8xONTStaticWANConfigExternalIPAddress=ltp8xONTStaticWANConfigExternalIPAddress, ltp8xONTServiceUSEntry=ltp8xONTServiceUSEntry, ltp8xONTScriptingProfileScriptsTable=ltp8xONTScriptingProfileScriptsTable, ltp8xSwitchVLANVid=ltp8xSwitchVLANVid, ltp8xONTACSProfilesEntry=ltp8xONTACSProfilesEntry, ltp8xONTACSPrivatesConfigEntry=ltp8xONTACSPrivatesConfigEntry, ltp8xONTPortsMLDQuerierIP=ltp8xONTPortsMLDQuerierIP, ltp8xONTConfigCrossConnectProfile0=ltp8xONTConfigCrossConnectProfile0, ltp8xONTConfigBerInterval=ltp8xONTConfigBerInterval, ltp8xONTPortsProfileTable=ltp8xONTPortsProfileTable, ltp8xONTFecPerformMonitoringHistDataCounterName=ltp8xONTFecPerformMonitoringHistDataCounterName, ltp8xONTGEMPortPerformMonitoringDSCrossConnect=ltp8xONTGEMPortPerformMonitoringDSCrossConnect, ltp8xSwitchPortsEntry=ltp8xSwitchPortsEntry, ltp8xONTShapingProfileTable=ltp8xONTShapingProfileTable, ltp8xONTTemplateOverridesCrossConnectProfile6=ltp8xONTTemplateOverridesCrossConnectProfile6, ltp8xSyncCountersTable=ltp8xSyncCountersTable, ltp8xONTMulticastGroupsClientIP=ltp8xONTMulticastGroupsClientIP, ltp8xACLFiltersRowStatus=ltp8xACLFiltersRowStatus, ltp8xONTConfigID=ltp8xONTConfigID, ltp8xONTTemplateOverridesBerUpdatePeriod=ltp8xONTTemplateOverridesBerUpdatePeriod, plc8DataLinkLayerFlappingAlarmTrap=plc8DataLinkLayerFlappingAlarmTrap, ltp8xSwitchOperationalVLANVid=ltp8xSwitchOperationalVLANVid, ltp8xONTStaticWANConfigSerial=ltp8xONTStaticWANConfigSerial, ltp8xONTVoiceDescription=ltp8xONTVoiceDescription, ltp8xONTEthFrameUSPerformMonitoringHistDataSlot=ltp8xONTEthFrameUSPerformMonitoringHistDataSlot, ltp8xONTCrossConnectDSSlot=ltp8xONTCrossConnectDSSlot, ltp8xONTMulticastGroupsTable=ltp8xONTMulticastGroupsTable, ltp8xONTMulticastStatsONTSerial=ltp8xONTMulticastStatsONTSerial, ltp8xONTCrossConnectMacTableEntryLimit=ltp8xONTCrossConnectMacTableEntryLimit, ltp8xONTScriptingChunkID=ltp8xONTScriptingChunkID, ltp8xONTFirmwaresFilesName=ltp8xONTFirmwaresFilesName, ltp8xONTMulticastProfileTable=ltp8xONTMulticastProfileTable, ltp8xOLTConfigDhcpTrustedServerTimeout=ltp8xOLTConfigDhcpTrustedServerTimeout, ltp8xONTFirmwaresTable=ltp8xONTFirmwaresTable, ltp8xONTCrossConnectUSTable=ltp8xONTCrossConnectUSTable, ltp8xONTFecPerformMonitoringHistDataDummyIndex=ltp8xONTFecPerformMonitoringHistDataDummyIndex, ltp8xQOS8021pMappingEntry=ltp8xQOS8021pMappingEntry, ltp8xONTUNIPortsStateEntry=ltp8xONTUNIPortsStateEntry, ltp8xONTBandwidthManagementName=ltp8xONTBandwidthManagementName, ltp8xONTConfigEnabled=ltp8xONTConfigEnabled, ltp8xPONChannelID=ltp8xPONChannelID, ltp8xOkTraps=ltp8xOkTraps, ltp8xONTEthFrameExtendedPerformMonitoringUSSerial=ltp8xONTEthFrameExtendedPerformMonitoringUSSerial, ltp8xRawMacText=ltp8xRawMacText, ltp8xONTACSPropertiesPropertyValue=ltp8xONTACSPropertiesPropertyValue, ltp8xONTACSStateDeleteRow=ltp8xONTACSStateDeleteRow, ltp8xONTStaticWANConfigSubnetMask=ltp8xONTStaticWANConfigSubnetMask, ltp8xONTTemplateValuesSerial=ltp8xONTTemplateValuesSerial, ltp8xONTDisableChannel=ltp8xONTDisableChannel, ltp8xMLDProxyReportRangesEntry=ltp8xMLDProxyReportRangesEntry, ltp8xIGMPProxyReportRangesSlot=ltp8xIGMPProxyReportRangesSlot, ltp8xPLCBoardStateLoadAverage15Minutes=ltp8xPLCBoardStateLoadAverage15Minutes, ltp8xONTAddressAge=ltp8xONTAddressAge, ltp8xONTManagementProfileEntry=ltp8xONTManagementProfileEntry, ltp8xONTACSConfigDelete=ltp8xONTACSConfigDelete, ltp8xIGMPProxyReportRangesGlobalEnd=ltp8xIGMPProxyReportRangesGlobalEnd, ltp8xONTConfigCustomModel=ltp8xONTConfigCustomModel, ltp8xONTAddressSlot=ltp8xONTAddressSlot, ltp8xONTAutoUpdateEnabled=ltp8xONTAutoUpdateEnabled, ltp8xONTCrossConnectDSCounterValue=ltp8xONTCrossConnectDSCounterValue, ltp8xSwitchPortGoodOctetsSent=ltp8xSwitchPortGoodOctetsSent, ltp8xONTAddressGEMPortId=ltp8xONTAddressGEMPortId, ltp8xONTACSStateBindingName=ltp8xONTACSStateBindingName, ltp8xONTACSPropertiesPropertyID=ltp8xONTACSPropertiesPropertyID, plc8DuplicateMacOkTrap=plc8DuplicateMacOkTrap, plc8ONTConfigChangeTrap=plc8ONTConfigChangeTrap, ltp8xPONChannelState=ltp8xPONChannelState, ltp8xP2PEnabled=ltp8xP2PEnabled, ltp8xONTMulticastGroupsSerial=ltp8xONTMulticastGroupsSerial, ltp8xONTConfigBerUpdatePeriod=ltp8xONTConfigBerUpdatePeriod, ltp8xOntFirmwareDeleteAlarmTrap=ltp8xOntFirmwareDeleteAlarmTrap, ltp8xOLTConfigPPPoECircuitIDFormat=ltp8xOLTConfigPPPoECircuitIDFormat, ltp8xONTServiceOverrideEnabled=ltp8xONTServiceOverrideEnabled, ltp8xONTStateReconfigure=ltp8xONTStateReconfigure, ltp8xONTFirmwaresSchedulerDailyTo=ltp8xONTFirmwaresSchedulerDailyTo, ltp8xOntOkTrap=ltp8xOntOkTrap, ltp8xOltUpdateAlarmTrap=ltp8xOltUpdateAlarmTrap, ltp8xLowRxPowerOkTrap=ltp8xLowRxPowerOkTrap, ltp8xONTStaticWANConfigEntry=ltp8xONTStaticWANConfigEntry, ltp8xOLTStateFirmwareVersion=ltp8xOLTStateFirmwareVersion, ltp8xOLTResetCountersSlot=ltp8xOLTResetCountersSlot, ltp8xONTFirmwaresProfilesName=ltp8xONTFirmwaresProfilesName, ltp8xPONChannelAddressDatapathForwarding=ltp8xPONChannelAddressDatapathForwarding, ltp8xONTShapingProfileServicesTable=ltp8xONTShapingProfileServicesTable, ltp8xSwitchPortBadCrc=ltp8xSwitchPortBadCrc, plc8FreeSpaceAlarmTrap=plc8FreeSpaceAlarmTrap, ltp8xONTStateDistance=ltp8xONTStateDistance, ltp8xOLTONTAutoFirmwareUpdateTable=ltp8xOLTONTAutoFirmwareUpdateTable, ltp8xSwitchVLANUntaggedPorts=ltp8xSwitchVLANUntaggedPorts, ltp8xONTAddressEntryID=ltp8xONTAddressEntryID, ltp8xPowerSupplyOkTrap=ltp8xPowerSupplyOkTrap, ltp8xSwitchVLANName=ltp8xSwitchVLANName, ltp8xONTConfigFecUp=ltp8xONTConfigFecUp, ltp8xONTCrossConnectProfileTable=ltp8xONTCrossConnectProfileTable, ltp8xONTACSStateBindingID=ltp8xONTACSStateBindingID, ltp8xSwitchPortMacTransmitErr=ltp8xSwitchPortMacTransmitErr, ltp8xSwitchPortGoodFcRcv=ltp8xSwitchPortGoodFcRcv, ltp8xONTStateState=ltp8xONTStateState, ltp8xONTUNIPortsStateTable=ltp8xONTUNIPortsStateTable, ltp8xONTConfigAllocProfile5=ltp8xONTConfigAllocProfile5, ltp8xONTCrossConnectType=ltp8xONTCrossConnectType, ltp8xOLTTerminalVLANsSlot=ltp8xOLTTerminalVLANsSlot, ltp8xPLCBoardStateLoadAverage1Minute=ltp8xPLCBoardStateLoadAverage1Minute, plc8FanOkTrap=plc8FanOkTrap, ltp8xONT=ltp8xONT, ltp8xONTGalEthPerformMonitoringHistDataSlot=ltp8xONTGalEthPerformMonitoringHistDataSlot, ltp8xONTStateChannel=ltp8xONTStateChannel, ltp8xONTPortsMLDMCPreviewLength=ltp8xONTPortsMLDMCPreviewLength, ltp8xIGMPProxyReportRangesEnd=ltp8xIGMPProxyReportRangesEnd, ltp8xONTEthPerformMonitoringHistDataSerial=ltp8xONTEthPerformMonitoringHistDataSerial, ltp8xONTCrossConnectUSCounterID=ltp8xONTCrossConnectUSCounterID, ltp8xMLDProxyReportRangesGlobalEnd=ltp8xMLDProxyReportRangesGlobalEnd, ltp8xConfigRereadAlarmTrap=ltp8xConfigRereadAlarmTrap, ltp8xQOS8021pMappingQueue=ltp8xQOS8021pMappingQueue, ltp8xONTAllocPeriod=ltp8xONTAllocPeriod, ltp8xONTStateOMCIPortId=ltp8xONTStateOMCIPortId, ltp8xONTTemplateValuesScriptingProfile=ltp8xONTTemplateValuesScriptingProfile, ltp8xONTACSConfigInternetVlan=ltp8xONTACSConfigInternetVlan, ltp8xONTManagementOMCIConfiguration=ltp8xONTManagementOMCIConfiguration, plc8RSSIUpdateTrap=plc8RSSIUpdateTrap, ltp8xONTPortsUNIIGMPDownstreamTagControl=ltp8xONTPortsUNIIGMPDownstreamTagControl, ltp8xONTPortsProfileMCDynamicEntriesTable=ltp8xONTPortsProfileMCDynamicEntriesTable, ltp8xONTConfigDownstreamBroadcastEnabled=ltp8xONTConfigDownstreamBroadcastEnabled, ltp8xOLTConfigPPPoEVendorID=ltp8xOLTConfigPPPoEVendorID, ltp8xONTMassUpdateFirmwareAction=ltp8xONTMassUpdateFirmwareAction, ltp8xONTPortsUNIShapingDownstreamPeakRate=ltp8xONTPortsUNIShapingDownstreamPeakRate, ltp8xSwitchVLANRowStatus=ltp8xSwitchVLANRowStatus, ltp8xONTConfigAllocProfile6=ltp8xONTConfigAllocProfile6, plc8OntConfigOkTrap=plc8OntConfigOkTrap, ltp8xOLTMulticastStatsEntry=ltp8xOLTMulticastStatsEntry, ltp8xONTEthFrameExtendedPerformMonitoringUSPort=ltp8xONTEthFrameExtendedPerformMonitoringUSPort, ltp8xONTFirmwaresSchedulerPeriodFrom=ltp8xONTFirmwaresSchedulerPeriodFrom, ltp8xIGMPProxyReportRangesEntry=ltp8xIGMPProxyReportRangesEntry, ltp8xOLTVInterfaceMonitoringUSCounterID=ltp8xOLTVInterfaceMonitoringUSCounterID, ltp8xONTEthFrameDSPerformMonitoringHistDataCounterID=ltp8xONTEthFrameDSPerformMonitoringHistDataCounterID, ltp8xONTEthFrameExtendedPerformMonitoringUSSlot=ltp8xONTEthFrameExtendedPerformMonitoringUSSlot, ltp8xONTAddressCVID=ltp8xONTAddressCVID, ltp8xOLTAddressTableProfilesDescription=ltp8xOLTAddressTableProfilesDescription, ltp8xONTACSStateEntry=ltp8xONTACSStateEntry, plc8TemperatureAlarmTrap=plc8TemperatureAlarmTrap, plc8PonAlarmChannelTrap=plc8PonAlarmChannelTrap, plc8OntAlarmTrap=plc8OntAlarmTrap, ltp8xONTTemplateValuesDownstreamBroadcastEnabled=ltp8xONTTemplateValuesDownstreamBroadcastEnabled, ltp8xPONChannelActModeEntry=ltp8xPONChannelActModeEntry, ltp8xONTWANCountersCrossConnect=ltp8xONTWANCountersCrossConnect, ltp8xSwitchVLANIGMPSnoopingQuerierEnabled=ltp8xSwitchVLANIGMPSnoopingQuerierEnabled, ltp8xONTStatistics=ltp8xONTStatistics, ltp8xLoginAlarmTrap=ltp8xLoginAlarmTrap, ltp8xONTPortsMLDImmediateLeave=ltp8xONTPortsMLDImmediateLeave, ltp8xIGMPProxyReportRangesGlobalToVLAN=ltp8xIGMPProxyReportRangesGlobalToVLAN, ltp8xSyncCounters=ltp8xSyncCounters, ltp8xOLTTerminalVLANsNamesTable=ltp8xOLTTerminalVLANsNamesTable, ltp8xONTACSStateSerial=ltp8xONTACSStateSerial, ltp8xONTPortsUNIIGMPDownstreamVID=ltp8xONTPortsUNIIGMPDownstreamVID, ltp8xONTPortsMLDMCFirstGroupIP=ltp8xONTPortsMLDMCFirstGroupIP, ltp8xONTGalEthPerformMonitoringHistDataCounterID=ltp8xONTGalEthPerformMonitoringHistDataCounterID, ltp8xONTManagementPassword=ltp8xONTManagementPassword, ltp8xOLTMIBBoundary1=ltp8xOLTMIBBoundary1, ltp8xONTAutoUpdateDowngrade=ltp8xONTAutoUpdateDowngrade, ltp8xONTFirmwaresDownloadProtocol=ltp8xONTFirmwaresDownloadProtocol, ltp8xONTSelectiveTunnelUVIDIndex=ltp8xONTSelectiveTunnelUVIDIndex, ltp8xONTFWUpdateSchedulerUseSerial=ltp8xONTFWUpdateSchedulerUseSerial, ltp8xONTConfigEncryptionEnabled=ltp8xONTConfigEncryptionEnabled, ltp8xONTACSConfigAltVoice2Password=ltp8xONTACSConfigAltVoice2Password, ltp8xSwitchPortPkts256to511Octets=ltp8xSwitchPortPkts256to511Octets, ltp8xONTServiceDSSlot=ltp8xONTServiceDSSlot, ltp8xRawMacSlot=ltp8xRawMacSlot, ltp8xPortsUtilizationAverageFramesRecv=ltp8xPortsUtilizationAverageFramesRecv, ltp8xONTManagementProfileTable=ltp8xONTManagementProfileTable)
mibBuilder.exportSymbols("ELTEX-LTP8X", plc8ConfigSaveAlarmTrap=plc8ConfigSaveAlarmTrap, ltp8xONTFecPerformMonitoringHistDataSerial=ltp8xONTFecPerformMonitoringHistDataSerial, ltp8xONTMulticastGroupsVLAN=ltp8xONTMulticastGroupsVLAN, ltp8xONTGEMPortPerformMonitoringDSTable=ltp8xONTGEMPortPerformMonitoringDSTable, ltp8xONTAddressTable=ltp8xONTAddressTable, ltp8xONTREITrap=ltp8xONTREITrap, ltp8xONTConfigFreenessSlot=ltp8xONTConfigFreenessSlot, ltp8xONTConnectionLogEntry=ltp8xONTConnectionLogEntry, ltp8xONTStateEquipmentID=ltp8xONTStateEquipmentID, ltp8xONTTemplateValuesCrossConnectProfile3=ltp8xONTTemplateValuesCrossConnectProfile3, ltp8xONTACSConfigAltSerial=ltp8xONTACSConfigAltSerial, ltp8xONTPortsUNIBridgeGroup=ltp8xONTPortsUNIBridgeGroup, ltp8xONTCustomCrossConnectCOS=ltp8xONTCustomCrossConnectCOS, ltp8xONTBandwidthManagementProfileEntry=ltp8xONTBandwidthManagementProfileEntry, VideoRxPowerConv=VideoRxPowerConv, ltp8xONTFecPerformMonitoringHistDataSlot=ltp8xONTFecPerformMonitoringHistDataSlot, ltp8xONTManagementID=ltp8xONTManagementID, ltp8xONTTemplateServicesOverridesEntry=ltp8xONTTemplateServicesOverridesEntry, ltp8xOLTTerminalVLANsEntry=ltp8xOLTTerminalVLANsEntry, ltp8xACLListsTable=ltp8xACLListsTable, ltp8xQOSDSCPMappingEntry=ltp8xQOSDSCPMappingEntry, ltp8xOLTConfigActivationCheckPassword=ltp8xOLTConfigActivationCheckPassword, ltp8xONTStateLaserBiasCurrent=ltp8xONTStateLaserBiasCurrent, ltp8xONTPortsUNIMaxMulticastBandwidth=ltp8xONTPortsUNIMaxMulticastBandwidth, ltp8xONTStateID=ltp8xONTStateID, ltp8xONTStateEncryptionKey=ltp8xONTStateEncryptionKey, ltp8xFileDownloadAlarmTrap=ltp8xFileDownloadAlarmTrap, ltp8xONTGEMPortPerformMonitoringUSCounterValue=ltp8xONTGEMPortPerformMonitoringUSCounterValue, ltp8xONTTemplateValuesRowStatus=ltp8xONTTemplateValuesRowStatus, ltp8xONTWANCountersRecvFrames=ltp8xONTWANCountersRecvFrames, ltp8xONTTemplateOverridesTable=ltp8xONTTemplateOverridesTable, ltp8xONTEthFrameExtendedPerformMonitoringUSCounterValue=ltp8xONTEthFrameExtendedPerformMonitoringUSCounterValue, ltp8xIGMPProxyReportSlot=ltp8xIGMPProxyReportSlot, ltp8xONTGalEthPerformMonitoringHistDataCounterValue=ltp8xONTGalEthPerformMonitoringHistDataCounterValue, ltp8xBatteryLowAlarmTrap=ltp8xBatteryLowAlarmTrap, ltp8xONTPortsMLDMCPreviewRepeatCount=ltp8xONTPortsMLDMCPreviewRepeatCount, ltp8xONTConfigDescription=ltp8xONTConfigDescription, ltp8xONTFirmwaresSpecificsName=ltp8xONTFirmwaresSpecificsName, ltp8xONTACSStateMaxIndex=ltp8xONTACSStateMaxIndex, ltp8xONTTemplateOverridesCrossConnectProfile5=ltp8xONTTemplateOverridesCrossConnectProfile5, ltp8xONTServiceDSCounterValue=ltp8xONTServiceDSCounterValue, ltp8xSwitchOperationalVLANSlot=ltp8xSwitchOperationalVLANSlot, ltp8xPONChannelAddressONTSerial=ltp8xPONChannelAddressONTSerial, ltp8xONTFWUpdateSchedulerTaskID=ltp8xONTFWUpdateSchedulerTaskID, ltp8xPortsUtilizationLastKbitsRecv=ltp8xPortsUtilizationLastKbitsRecv, ltp8xONTConfigBandwidthManagementACSProfile=ltp8xONTConfigBandwidthManagementACSProfile, ltp8xONTTemplateValuesDescription=ltp8xONTTemplateValuesDescription, ltp8xONTDisableActionDisable=ltp8xONTDisableActionDisable, ltp8xONTACSConfigAltVoice2Number=ltp8xONTACSConfigAltVoice2Number, ltp8xOLTMulticastStatsBackwardsSlot=ltp8xOLTMulticastStatsBackwardsSlot, ltp8xOLTVInterfaceMonitoringUSTable=ltp8xOLTVInterfaceMonitoringUSTable, ltp8xSwitchIGMPSnoopingEntry=ltp8xSwitchIGMPSnoopingEntry, ltp8xLowRxPowerAlarmTrap=ltp8xLowRxPowerAlarmTrap, ltp8xONTManagementDescription=ltp8xONTManagementDescription, ltp8xONTFWUpdateSchedulerONTChannel=ltp8xONTFWUpdateSchedulerONTChannel, ltp8xONTFirmwaresProfilesRowStatus=ltp8xONTFirmwaresProfilesRowStatus, ltp8xOLTTerminalVLANsRowStatus=ltp8xOLTTerminalVLANsRowStatus, plc8OLTDeviceResetTrap=plc8OLTDeviceResetTrap, ltp8xONTStateTxPower=ltp8xONTStateTxPower, ltp8xONTMulticastDescription=ltp8xONTMulticastDescription, ltp8xONTGEMPortCountersSlot=ltp8xONTGEMPortCountersSlot, ltp8xONTCrossConnectUVID=ltp8xONTCrossConnectUVID, ltp8xSwitchPortCountersSlot=ltp8xSwitchPortCountersSlot, ltp8xONTACSConfigPPPLogin=ltp8xONTACSConfigPPPLogin, ltp8xOLTDeviceNotWorkingTrap=ltp8xOLTDeviceNotWorkingTrap, ltp8xONTACSPropertiesPropertyName=ltp8xONTACSPropertiesPropertyName, ltp8xSwitchMacListEntry=ltp8xSwitchMacListEntry, ltp8xONTPortsProfileUNITable=ltp8xONTPortsProfileUNITable, ltp8xONTUNIPortsStateAvailable=ltp8xONTUNIPortsStateAvailable, ltp8xONTFirmwaresSpecificsEntry=ltp8xONTFirmwaresSpecificsEntry, ltp8xONTFirmwaresDownload=ltp8xONTFirmwaresDownload, ltp8xONTConnectionLogONTSerial=ltp8xONTConnectionLogONTSerial, ltp8xONTMulticastGroupsSourceIP=ltp8xONTMulticastGroupsSourceIP, ltp8xONTBufferZoneValue=ltp8xONTBufferZoneValue, ltp8xPortsUtilizationLastFramesRecv=ltp8xPortsUtilizationLastFramesRecv, ltp8xONTServiceDSTable=ltp8xONTServiceDSTable, ltp8xConfigBrokenAlarmTrap=ltp8xConfigBrokenAlarmTrap, ltp8xONTEthFrameUSPerformMonitoringHistDataPort=ltp8xONTEthFrameUSPerformMonitoringHistDataPort, ltp8xONTCrossConnectDSSerial=ltp8xONTCrossConnectDSSerial, ltp8xSwitchOperationalVLANTaggedPorts=ltp8xSwitchOperationalVLANTaggedPorts, ltp8xSyncCountersSlot=ltp8xSyncCountersSlot, ltp8xONTPortsUNIMaxGroups=ltp8xONTPortsUNIMaxGroups, ltp8xONTGalEthPerformMonitoringHistDataTable=ltp8xONTGalEthPerformMonitoringHistDataTable, ltp8xPLCBoardStateSlot=ltp8xPLCBoardStateSlot, ltp8xONTGEMPortCountersDSFinishedIntervals=ltp8xONTGEMPortCountersDSFinishedIntervals, ltp8xSwitchPortMacRcvError=ltp8xSwitchPortMacRcvError, plc8AlarmTraps=plc8AlarmTraps, ltp8xONTFirmwaresSchedulerConfig=ltp8xONTFirmwaresSchedulerConfig, ltp8xRawSwitchMacEntry=ltp8xRawSwitchMacEntry, ltp8xONTACSUserPropertiesSerial=ltp8xONTACSUserPropertiesSerial, ltp8xSyncCountersState=ltp8xSyncCountersState, ltp8xOLTVInterfaceMonitoringDSSlot=ltp8xOLTVInterfaceMonitoringDSSlot, ltp8xChannelStateChangeTrap=ltp8xChannelStateChangeTrap, ltp8xOLTTerminalVLANsID=ltp8xOLTTerminalVLANsID, ltp8xONTMulticastStatsMulticastAddress=ltp8xONTMulticastStatsMulticastAddress, ltp8xPONChannelAddressEntryType=ltp8xPONChannelAddressEntryType, ltp8xQOSConfigSlot=ltp8xQOSConfigSlot, ltp8xQOSConfigEntry=ltp8xQOSConfigEntry, ltp8xPortsUtilizationAverageKbitsSent=ltp8xPortsUtilizationAverageKbitsSent, ltp8xOntConfigOkTrap=ltp8xOntConfigOkTrap, ltp8xONTTemplateOverridesManagementProfile=ltp8xONTTemplateOverridesManagementProfile, ltp8xFreeSpaceAlarmTrap=ltp8xFreeSpaceAlarmTrap, ltp8xONTPortsUNIIGMPUpstreamTagControl=ltp8xONTPortsUNIIGMPUpstreamTagControl, ltp8xPLCBoardStateFirmwareRevision=ltp8xPLCBoardStateFirmwareRevision, ltp8xONTTemplateValuesTable=ltp8xONTTemplateValuesTable, ltp8xONTAutoUpdateEntry=ltp8xONTAutoUpdateEntry, ltp8xSwitchPortOversizePkts=ltp8xSwitchPortOversizePkts, ltp8xONTScriptingProfileEntry=ltp8xONTScriptingProfileEntry, ltp8xONTStateEqualizationDelay=ltp8xONTStateEqualizationDelay, ltp8xONTEthPerformMonitoringHistDataCounterValue=ltp8xONTEthPerformMonitoringHistDataCounterValue, ltp8xONTResetCountersAction=ltp8xONTResetCountersAction, ltp8xONTGEMPortCountersUSPayloadBytesHIGH=ltp8xONTGEMPortCountersUSPayloadBytesHIGH, ltp8xPONChannelAddressChannel=ltp8xPONChannelAddressChannel, ltp8xOLTConfigDhcpTrustedSecondary=ltp8xOLTConfigDhcpTrustedSecondary, ltp8xONTServiceDSService=ltp8xONTServiceDSService, ltp8xONTAutoUpdateFirmwareVersion=ltp8xONTAutoUpdateFirmwareVersion, ltp8xPONChannelAddressCVID=ltp8xPONChannelAddressCVID, ltp8xSwitchMacListStatic=ltp8xSwitchMacListStatic, ltp8xConfigSaveAlarmTrap=ltp8xConfigSaveAlarmTrap, ltp8xONTACSStateTable=ltp8xONTACSStateTable, ltp8xONTGalEthPerformMonitoringHistDataCounterName=ltp8xONTGalEthPerformMonitoringHistDataCounterName, ltp8xONTACSPrivatesConfigTable=ltp8xONTACSPrivatesConfigTable, ltp8xONTTemplateOverridesDownstreamBroadcastEnabled=ltp8xONTTemplateOverridesDownstreamBroadcastEnabled, ltp8xONTPortsProfileUNIEntry=ltp8xONTPortsProfileUNIEntry, ltp8xONTManagementName=ltp8xONTManagementName, ltp8xOLTMIBBoundary5=ltp8xOLTMIBBoundary5, ltp8xONTStaticWANConfigDefaultGateway=ltp8xONTStaticWANConfigDefaultGateway, ltp8xONTAllocProfileEntry=ltp8xONTAllocProfileEntry, plc8FanAlarmTrap=plc8FanAlarmTrap, ltp8xONTFullServicesConfigServiceID=ltp8xONTFullServicesConfigServiceID, ltp8xPLCBoardStateModuleVersion=ltp8xPLCBoardStateModuleVersion, ltp8xSwitchPortPkts64Octets=ltp8xSwitchPortPkts64Octets, ltp8xONTPortsID=ltp8xONTPortsID, ltp8xPortsUtilizationEntry=ltp8xPortsUtilizationEntry, ltp8xONTWANCountersRXDrops=ltp8xONTWANCountersRXDrops, ltp8xONTGEMPortCountersSerial=ltp8xONTGEMPortCountersSerial, ltp8xPONChannelSFPTxBiasCurrent=ltp8xPONChannelSFPTxBiasCurrent, ltp8xAlarmTraps=ltp8xAlarmTraps, ltp8xONTServicesProfileTable=ltp8xONTServicesProfileTable, ltp8xONTServiceDSCounterID=ltp8xONTServiceDSCounterID, ltp8xONTFirmwaresDownloadAction=ltp8xONTFirmwaresDownloadAction, ltp8xONTVoiceCrossConnect=ltp8xONTVoiceCrossConnect, ltp8xONTShapingDownstreamPeakRate=ltp8xONTShapingDownstreamPeakRate, ltp8xConfigChangeTrap=ltp8xConfigChangeTrap, ltp8xONTCrossConnectDSCounterName=ltp8xONTCrossConnectDSCounterName, ltp8xONTPortsUNIIGMPUpstreamPriority=ltp8xONTPortsUNIIGMPUpstreamPriority, ltp8xONTPortsProfileMCDynamicEntriesEntry=ltp8xONTPortsProfileMCDynamicEntriesEntry, ltp8xMLDProxyReportRangesSlot=ltp8xMLDProxyReportRangesSlot, ltp8xPONChannelAddressSVID=ltp8xPONChannelAddressSVID, ltp8xPLCBoardStateRAMFree=ltp8xPLCBoardStateRAMFree, ltp8xONTCrossConnectUSSlot=ltp8xONTCrossConnectUSSlot, ltp8xPLC=ltp8xPLC, plc8BatteryLowAlarmTrap=plc8BatteryLowAlarmTrap, ltp8xONTFirmwaresFilesHardware=ltp8xONTFirmwaresFilesHardware, ltp4x=ltp4x, ltp8xOLTMIBBoundary3=ltp8xOLTMIBBoundary3, ltp8xOLTUpdateFirmwareEntry=ltp8xOLTUpdateFirmwareEntry, ltp8xONTMulticastGroupsSlot=ltp8xONTMulticastGroupsSlot, ltp8xONTEthFrameExtendedPerformMonitoringDSSlot=ltp8xONTEthFrameExtendedPerformMonitoringDSSlot, ltp8xRawSwitchMacSlot=ltp8xRawSwitchMacSlot, ltp8xONTMulticastGroupsEntry=ltp8xONTMulticastGroupsEntry, ltp8xONTGEMPortPerformMonitoringUSSerial=ltp8xONTGEMPortPerformMonitoringUSSerial, ltp8xONTGalEthPerformMonitoringHistDataEntry=ltp8xONTGalEthPerformMonitoringHistDataEntry, ltp8xONTPortsIGMPLastMemberQueryInterval=ltp8xONTPortsIGMPLastMemberQueryInterval, ltp8xONTScriptingID=ltp8xONTScriptingID, ltp8xONTACSConfigVoice2Number=ltp8xONTACSConfigVoice2Number, ltp8xONTAddressCPUDestined=ltp8xONTAddressCPUDestined, ltp8xONTEthFrameDSPerformMonitoringHistDataTable=ltp8xONTEthFrameDSPerformMonitoringHistDataTable, ltp8xOLTUpdateFirmwareSlot=ltp8xOLTUpdateFirmwareSlot, ltp8xONTMulticastStatsStop=ltp8xONTMulticastStatsStop, ltp8xONTAllocProfileTable=ltp8xONTAllocProfileTable, ltp8xPLCBoardStateSerialNumber=ltp8xPLCBoardStateSerialNumber, ltp8xPONChannelAddressGEMPortId=ltp8xPONChannelAddressGEMPortId, ltp8xSwitchPortsUtilization=ltp8xSwitchPortsUtilization, ltp8xOLTMulticastStatsBackwardsRecordID=ltp8xOLTMulticastStatsBackwardsRecordID, ltp8xONTTemplateOverridesAllocProfile3=ltp8xONTTemplateOverridesAllocProfile3, ltp8xPONChannelSlot=ltp8xPONChannelSlot, ltp8xONTEthFrameUSPerformMonitoringHistDataCounterName=ltp8xONTEthFrameUSPerformMonitoringHistDataCounterName, ltp8xONTConfigAllocProfile4=ltp8xONTConfigAllocProfile4, ltp8xONTBufferZoneEntry=ltp8xONTBufferZoneEntry, ltp8xOLTConfigDhcpRelayAgentEnabled=ltp8xOLTConfigDhcpRelayAgentEnabled, ltp8xONTAllocRowStatus=ltp8xONTAllocRowStatus, ltp8xONTACSPropertiesTableSupported=ltp8xONTACSPropertiesTableSupported, ltp8xTemperatureAlarmTrap=ltp8xTemperatureAlarmTrap, ltp8xPortsUtilizationAverageFramesSent=ltp8xPortsUtilizationAverageFramesSent, ltp8xOLTMulticastStatsSlot=ltp8xOLTMulticastStatsSlot, ltp8xP2PSlot=ltp8xP2PSlot, ltp8xONTPortsUNIPort=ltp8xONTPortsUNIPort, ltp8xONTConfigManagementProfile=ltp8xONTConfigManagementProfile, ltp8xONTACSConfigAltInternetVlan=ltp8xONTACSConfigAltInternetVlan, ltp8xPLCBoardStateBuildTime=ltp8xPLCBoardStateBuildTime, ltp8xONTTemplateValuesEntry=ltp8xONTTemplateValuesEntry, ltp8xONTGalEthPerformMonitoringHistDataCrossConnect=ltp8xONTGalEthPerformMonitoringHistDataCrossConnect, ltp8xPLCBoardStateHardwareVesion=ltp8xPLCBoardStateHardwareVesion, ltp8xOLTVInterfaceMonitoringUSEntry=ltp8xOLTVInterfaceMonitoringUSEntry, ltp8xONTStateChangeTrap=ltp8xONTStateChangeTrap, ltp8xONTTemplateValuesCrossConnectProfile0=ltp8xONTTemplateValuesCrossConnectProfile0, plc8OntPhysicalOkTrap=plc8OntPhysicalOkTrap, ltp8xONTGEMPortPerformMonitoringDSSerial=ltp8xONTGEMPortPerformMonitoringDSSerial, ltp8xOLTAddressTableProfilesEntry=ltp8xOLTAddressTableProfilesEntry, ltp8xONTFirmwaresSchedulerWeeklyFrom=ltp8xONTFirmwaresSchedulerWeeklyFrom, ltp8xOLTMIBBoundary4=ltp8xOLTMIBBoundary4, ltp8xRAMOkTrap=ltp8xRAMOkTrap, ltp8xONTACSConfigAltEntry=ltp8xONTACSConfigAltEntry, ltp8xONTCrossConnectUSSerial=ltp8xONTCrossConnectUSSerial, ltp8xONTConfigTable=ltp8xONTConfigTable, ltp8xONTTemplateValuesID=ltp8xONTTemplateValuesID, ltp8xONTConfigCrossConnectProfile7=ltp8xONTConfigCrossConnectProfile7, ltp8xONTTemplateValuesAllocProfile4=ltp8xONTTemplateValuesAllocProfile4, ltp8xFirmwareUpdateOkTrap=ltp8xFirmwareUpdateOkTrap, ltp8xONTEthFrameExtendedPerformMonitoringDSCounterValue=ltp8xONTEthFrameExtendedPerformMonitoringDSCounterValue, ltp8xOLTResetCountersAction=ltp8xOLTResetCountersAction, ltp8xONTMulticastGroupsRecentJoinTime=ltp8xONTMulticastGroupsRecentJoinTime, ltp8xONTAddressUniPort=ltp8xONTAddressUniPort, ltp8xPLCBoardStateDiskFreeSpace=ltp8xPLCBoardStateDiskFreeSpace, ltp8xONTFirmwaresSpecificsVersion=ltp8xONTFirmwaresSpecificsVersion, ltp8xQOSDefaultQueue=ltp8xQOSDefaultQueue, ltp8xONTPortsVEIPIGMPDownstreamTagControl=ltp8xONTPortsVEIPIGMPDownstreamTagControl, ltp8xONTServiceOverrideCustomerCOS=ltp8xONTServiceOverrideCustomerCOS, ltp8xONTPortsMCVLANID=ltp8xONTPortsMCVLANID, PYSNMP_MODULE_ID=ltp8x, ltp8xONTManagementRowStatus=ltp8xONTManagementRowStatus, ltp8xONTVoiceID=ltp8xONTVoiceID, ltp8xMLDProxyReportEnabled=ltp8xMLDProxyReportEnabled, ltp8xONTCrossConnectPriorityQueue=ltp8xONTCrossConnectPriorityQueue, ltp8xPortsUtilizationLastFramesSent=ltp8xPortsUtilizationLastFramesSent, ltp8xONTFWUpdateSchedulerFilename=ltp8xONTFWUpdateSchedulerFilename, ltp8xONTACSConfigAltVoice1Enable=ltp8xONTACSConfigAltVoice1Enable, ltp8xONTDisable=ltp8xONTDisable, ltp8xPONChannelSFPVoltage=ltp8xPONChannelSFPVoltage, ltp8xONTWANCountersSlot=ltp8xONTWANCountersSlot, ltp8xONTGEMPortCountersDSPayloadBytesLOW=ltp8xONTGEMPortCountersDSPayloadBytesLOW, ltp8xONTACSUserPropertiesName=ltp8xONTACSUserPropertiesName, ltp8xONTConfigFreenessID=ltp8xONTConfigFreenessID, ltp8xONTTemplateValuesCrossConnectProfile5=ltp8xONTTemplateValuesCrossConnectProfile5, ltp8xONTVoiceProfileEntry=ltp8xONTVoiceProfileEntry, ltp8xONTPortsMLDMCPreviewRepeatTime=ltp8xONTPortsMLDMCPreviewRepeatTime, ltp8xONTStaticWANConfigConnection=ltp8xONTStaticWANConfigConnection, ltp8xIGMPProxyReportTable=ltp8xIGMPProxyReportTable, plc8OntConfigAlarmTrap=plc8OntConfigAlarmTrap, ltp8xONTEthFrameUSPerformMonitoringHistDataEntry=ltp8xONTEthFrameUSPerformMonitoringHistDataEntry, ltp8xONTACSConfigVoice2Enable=ltp8xONTACSConfigVoice2Enable, ltp8xLoadAverageOkTrap=ltp8xLoadAverageOkTrap, ltp8xPLCBoardStateSensor1Temperature=ltp8xPLCBoardStateSensor1Temperature, plc8OntPhysicalAlarmTrap=plc8OntPhysicalAlarmTrap, ltp8xOLTConfigDhcpRemoteIDFormat=ltp8xOLTConfigDhcpRemoteIDFormat, ltp8xONTCrossConnectDSEntry=ltp8xONTCrossConnectDSEntry, ltp8xONTDisableSlot=ltp8xONTDisableSlot, ltp8xONTSelectiveTunnelSlot=ltp8xONTSelectiveTunnelSlot, ltp8xOLTConfigPPPoETable=ltp8xOLTConfigPPPoETable, ltp8xOLTPPPoESessionsOntID=ltp8xOLTPPPoESessionsOntID, ltp8xPLCBoardStateBuildRevision=ltp8xPLCBoardStateBuildRevision, ltp8xONTTemplateOverridesAllocProfile2=ltp8xONTTemplateOverridesAllocProfile2, ltp8xONTConfigEMSProfile=ltp8xONTConfigEMSProfile)
mibBuilder.exportSymbols("ELTEX-LTP8X", ltp8xOLTVlanProfilesEntry=ltp8xOLTVlanProfilesEntry, ltp8xONTConfigRowStatus=ltp8xONTConfigRowStatus, ltp8xONTConfigEntry=ltp8xONTConfigEntry, ltp8xONTACSConfigReboot=ltp8xONTACSConfigReboot, ltp8xSwitchPortCountersEntry=ltp8xSwitchPortCountersEntry, ltp8xONTFirmwaresProfilesTable=ltp8xONTFirmwaresProfilesTable, ltp8xONTShapingID=ltp8xONTShapingID, ltp8xONTConfigAllocProfile3=ltp8xONTConfigAllocProfile3, ltp8xONTPortsUNIShapingDownstreamCommitedRate=ltp8xONTPortsUNIShapingDownstreamCommitedRate, ltp8xOLTConfigActivationEntry=ltp8xOLTConfigActivationEntry, ltp8xPonAlarmONUiTrap=ltp8xPonAlarmONUiTrap, ltp8xONTFecPerformMonitoringHistDataTable=ltp8xONTFecPerformMonitoringHistDataTable, ltp8xONTEthFrameExtendedPerformMonitoringDSCounterID=ltp8xONTEthFrameExtendedPerformMonitoringDSCounterID, ltp8xONTResetCountersSlot=ltp8xONTResetCountersSlot, ltp8xONTTemplateOverridesEntry=ltp8xONTTemplateOverridesEntry, plc8FirmwareUpdateAlarmTrap=plc8FirmwareUpdateAlarmTrap, ltp8xONTCrossConnectModel=ltp8xONTCrossConnectModel, ltp8xOLTConfigPPPoEMaxSessionsPerUser=ltp8xOLTConfigPPPoEMaxSessionsPerUser, ltp8xONTPortsUNIShapingDownstreamEnabled=ltp8xONTPortsUNIShapingDownstreamEnabled, plc8ConfigChangeTrap=plc8ConfigChangeTrap, ltp8xMLDProxyReportRangesEnd=ltp8xMLDProxyReportRangesEnd, ltp8xONTStateVideoRxPower=ltp8xONTStateVideoRxPower, ltp8xIGMPProxyReportRangesFromVLAN=ltp8xIGMPProxyReportRangesFromVLAN, ltp8xONTConfigCrossConnectProfile1=ltp8xONTConfigCrossConnectProfile1, ltp8xONTScriptingDescription=ltp8xONTScriptingDescription, ltp8xACLFiltersType=ltp8xACLFiltersType, ltp8xOLTTerminalVLANsNamesEntry=ltp8xOLTTerminalVLANsNamesEntry, plc8RAMOkTrap=plc8RAMOkTrap, ltp8xONTConfigSlot=ltp8xONTConfigSlot, ltp8xONTConfigAllocProfile7=ltp8xONTConfigAllocProfile7, ltp8xONTFirmwaresDownloadIPAddress=ltp8xONTFirmwaresDownloadIPAddress, ltp8xPLCBoardStateSensor2TemperatureExt=ltp8xPLCBoardStateSensor2TemperatureExt, ltp8xONTEthPerformMonitoringHistDataSlot=ltp8xONTEthPerformMonitoringHistDataSlot, ltp8xONTPortsMLDMCLastGroupIP=ltp8xONTPortsMLDMCLastGroupIP, ltp8xOLTMIBBoundary6=ltp8xOLTMIBBoundary6, ltp8xONTEthFrameExtendedPerformMonitoringDSPort=ltp8xONTEthFrameExtendedPerformMonitoringDSPort, ltp8xMLDProxyReportRangesGlobalID=ltp8xMLDProxyReportRangesGlobalID, ltp8xONTGEMPortPerformMonitoringUSCounterName=ltp8xONTGEMPortPerformMonitoringUSCounterName, ltp8xONTPortsProfileMLDDynamicEntriesTable=ltp8xONTPortsProfileMLDDynamicEntriesTable, ltp8xOltUpdateOkTrap=ltp8xOltUpdateOkTrap, ltp8xONTACSConfigVoice1Password=ltp8xONTACSConfigVoice1Password, ltp8xONTTemplateValuesAllocProfile6=ltp8xONTTemplateValuesAllocProfile6, ltp8xACLGlobalMode=ltp8xACLGlobalMode, ltp8xQOSType=ltp8xQOSType, ltp8xONTServiceUSSerial=ltp8xONTServiceUSSerial, ltp8xONTFirmwareUpdateViaOMCIAction=ltp8xONTFirmwareUpdateViaOMCIAction, ltp8xONTMulticastGroupsDestIP=ltp8xONTMulticastGroupsDestIP, ltp8xOLTVInterfaceMonitoringDSChannelRange=ltp8xOLTVInterfaceMonitoringDSChannelRange, plc8DuplicateMacAlarmTrap=plc8DuplicateMacAlarmTrap, ltp8xLoadAverageAlarmTrap=ltp8xLoadAverageAlarmTrap, ltp8xONTUNIPortsStateLinkUp=ltp8xONTUNIPortsStateLinkUp, ltp8xONTPortsIGMPUpstreamMode=ltp8xONTPortsIGMPUpstreamMode, ltp8xONTShapingDownstreamEnable=ltp8xONTShapingDownstreamEnable, ltp8xChannelFlappingOkTrap=ltp8xChannelFlappingOkTrap, ltp8xONTAutoUpdateTable=ltp8xONTAutoUpdateTable, ltp8xONTTemplateValuesCrossConnectProfile6=ltp8xONTTemplateValuesCrossConnectProfile6, ltp8xONTConfigMulticastProfile=ltp8xONTConfigMulticastProfile, ltp8xOLTAddressTableProfilesTable=ltp8xOLTAddressTableProfilesTable, ltp8xOntUpdateAlarmTrap=ltp8xOntUpdateAlarmTrap, ltp8xONTServiceOverrideID=ltp8xONTServiceOverrideID, ltp8xONTMulticastGroupsEntryID=ltp8xONTMulticastGroupsEntryID, ltp8xInterfaceCriticalLoadAlarmTrap=ltp8xInterfaceCriticalLoadAlarmTrap, ltp8xMLDProxyReportRangesGlobalStart=ltp8xMLDProxyReportRangesGlobalStart, ltp8xONTTemplateValuesBerInterval=ltp8xONTTemplateValuesBerInterval, ltp8xPONChannelActModeTable=ltp8xPONChannelActModeTable, ltp8xONTConfigTemplate=ltp8xONTConfigTemplate, ltp8xONTCrossConnectProfileEntry=ltp8xONTCrossConnectProfileEntry, ltp8xONTCrossConnectUSCrossConnect=ltp8xONTCrossConnectUSCrossConnect, ltp8xOLTUpdateFirmwareTable=ltp8xOLTUpdateFirmwareTable, ltp8xONTFirmwaresFilesTable=ltp8xONTFirmwaresFilesTable, ltp8xOLTTerminalVLANsNamesRowStatus=ltp8xOLTTerminalVLANsNamesRowStatus, ltp8xONTPortsIGMPImmediateLeave=ltp8xONTPortsIGMPImmediateLeave, ltp8xONTTemplateOverridesAllocProfile5=ltp8xONTTemplateOverridesAllocProfile5, ltp8xONTEthFrameUSPerformMonitoringHistDataCounterValue=ltp8xONTEthFrameUSPerformMonitoringHistDataCounterValue, ltp8xONTCrossConnectUSEntry=ltp8xONTCrossConnectUSEntry, ltp8xLogoutTrap=ltp8xLogoutTrap, ltp8xPONChannelTxPower=ltp8xPONChannelTxPower, ltp8xONTFWUpdateSchedulerTaskState=ltp8xONTFWUpdateSchedulerTaskState, ltp8xONTEthFrameUSPerformMonitoringHistDataSerial=ltp8xONTEthFrameUSPerformMonitoringHistDataSerial, ltp8xONTGEMPortPerformMonitoringUSCrossConnect=ltp8xONTGEMPortPerformMonitoringUSCrossConnect, ltp8xONTACSConfigSerial=ltp8xONTACSConfigSerial, ltp8xONTACSConfigProfile=ltp8xONTACSConfigProfile, ltp8xONTACSConfigAltVoice1Number=ltp8xONTACSConfigAltVoice1Number, ltp8xMLDProxyReportRangesStart=ltp8xMLDProxyReportRangesStart, ltp8xOLTStateEntry=ltp8xOLTStateEntry, ltp8xIGMPProxyReportRangesStart=ltp8xIGMPProxyReportRangesStart, ltp8xONTServiceUSService=ltp8xONTServiceUSService, ltp8xOLTResetCountersTable=ltp8xOLTResetCountersTable, ltp8xPONChannelAddressCPUDestined=ltp8xPONChannelAddressCPUDestined, ltp8xSwitchMacListTable=ltp8xSwitchMacListTable, ltp8xSwitchPortFcSent=ltp8xSwitchPortFcSent, ltp8xONTAllocFixedBandwidth=ltp8xONTAllocFixedBandwidth, ltp8xTemperatureOkTrap=ltp8xTemperatureOkTrap, ltp8xSwitchPortFragmentsPkts=ltp8xSwitchPortFragmentsPkts, ltp8xOLTTerminalVLANsName=ltp8xOLTTerminalVLANsName, ltp8xONTFirmwaresProfilesFWID=ltp8xONTFirmwaresProfilesFWID, ltp8xONTEthFrameUSPerformMonitoringHistDataTable=ltp8xONTEthFrameUSPerformMonitoringHistDataTable, ltp8xPLCBoardStateUptime=ltp8xPLCBoardStateUptime, ltp8xSwitch=ltp8xSwitch, ltp8xOLTVInterfaceMonitoringUSCounterValue=ltp8xOLTVInterfaceMonitoringUSCounterValue, ltp8xONTCustomCrossConnectEnabled=ltp8xONTCustomCrossConnectEnabled, ltp8xOLTConfigDhcpCircuitIDFormat=ltp8xOLTConfigDhcpCircuitIDFormat, plc8BatteryLowOkTrap=plc8BatteryLowOkTrap, ltp8xONTACSPrivatesPrivateName=ltp8xONTACSPrivatesPrivateName, ltp8xONTACSPropertiesTable=ltp8xONTACSPropertiesTable, ltp8xONTAutoUpdateMode=ltp8xONTAutoUpdateMode, ltp8xONTPortsMLDVersion=ltp8xONTPortsMLDVersion, ltp8xONTGEMPortCountersUSGEMFrames=ltp8xONTGEMPortCountersUSGEMFrames, ltp8xMIBBoundary=ltp8xMIBBoundary, ltp8xQOSDownstreamQinQPrioritization=ltp8xQOSDownstreamQinQPrioritization, ltp8xONTServiceOverrideEntry=ltp8xONTServiceOverrideEntry, ltp8xONTACSStateLastSetIndex=ltp8xONTACSStateLastSetIndex, ltp8xONTTemplateServicesValuesTable=ltp8xONTTemplateServicesValuesTable, ltp8xONTUNIPortsStatePort=ltp8xONTUNIPortsStatePort, ltp8xONTMulticastStatsEntry=ltp8xONTMulticastStatsEntry, ltp8xONTTemplateOverridesCrossConnectProfile2=ltp8xONTTemplateOverridesCrossConnectProfile2, ltp8xONTPortsVEIPMaxGroups=ltp8xONTPortsVEIPMaxGroups, ltp8xPONChannelSFPRevision=ltp8xPONChannelSFPRevision, plc8FreeSpaceOkTrap=plc8FreeSpaceOkTrap, ltp8xONTConnectionLogText=ltp8xONTConnectionLogText, ltp8xDataLinkLayerOkTrap=ltp8xDataLinkLayerOkTrap, ltp8xONTGEMPortPerformMonitoringDSCounterName=ltp8xONTGEMPortPerformMonitoringDSCounterName, ltp8xONTConfigFreenessEntry=ltp8xONTConfigFreenessEntry, ltp8xOLTStateHardwareVersion=ltp8xOLTStateHardwareVersion, ltp8xONTGEMPortCountersDSGEMFrames=ltp8xONTGEMPortCountersDSGEMFrames, ltp8xONTStateFecState=ltp8xONTStateFecState, ltp8xONTFWUpdateSchedulerONTId=ltp8xONTFWUpdateSchedulerONTId, ltp8xONTGEMPortCountersCrossConnect=ltp8xONTGEMPortCountersCrossConnect, ltp8xSwitchMacListVID=ltp8xSwitchMacListVID, ltp8xONTTemplateOverridesCrossConnectProfile7=ltp8xONTTemplateOverridesCrossConnectProfile7, ltp8xONTACSConfigVoice1Number=ltp8xONTACSConfigVoice1Number, plc8PhysicalLayerFlappingAlarmTrap=plc8PhysicalLayerFlappingAlarmTrap, ltp8xONTFirmwaresDowngrade=ltp8xONTFirmwaresDowngrade, ltp8xONTTemplateValuesOMCIErrorTolerant=ltp8xONTTemplateValuesOMCIErrorTolerant, ltp8xPONChannelSFPTemperature=ltp8xPONChannelSFPTemperature, ltp8xONTAddressMacAddress=ltp8xONTAddressMacAddress, plc8ChannelOntCntOverflowOkTrap=plc8ChannelOntCntOverflowOkTrap, ltp8xONTPortsMCEntryID=ltp8xONTPortsMCEntryID, ltp8xONTServicesID=ltp8xONTServicesID, plc8LanLosAlarmTrap=plc8LanLosAlarmTrap, ltp8xONTAllocServiceClass=ltp8xONTAllocServiceClass, ltp8xACLFiltersEntry=ltp8xACLFiltersEntry, ltp8xONTACSPrivatesPrivateIndex=ltp8xONTACSPrivatesPrivateIndex, ltp8xChannelOntCntOverflowTrap=ltp8xChannelOntCntOverflowTrap, ltp8xOLTMulticastStatsBackwardsONTSerial=ltp8xOLTMulticastStatsBackwardsONTSerial, ltp8xONTMulticastStatsStart=ltp8xONTMulticastStatsStart, ltp8xONTTemplateOverridesSerial=ltp8xONTTemplateOverridesSerial, plc8RedundantChannelSwitchTrap=plc8RedundantChannelSwitchTrap, ltp8xPONChannelEnabled=ltp8xPONChannelEnabled, ltp8xOLTPPPoESessionsDuration=ltp8xOLTPPPoESessionsDuration, ltp8xOLTConfigDhcpTable=ltp8xOLTConfigDhcpTable, ltp8xTraps=ltp8xTraps, ltp8xONTPortsMLDEntryID=ltp8xONTPortsMLDEntryID, ltp8xONTTemplateValuesName=ltp8xONTTemplateValuesName, ltp8xSwitchVLANTaggedPorts=ltp8xSwitchVLANTaggedPorts, ltp8xONTSerial=ltp8xONTSerial, ltp8xONTEthFrameExtendedPerformMonitoringUSCounterID=ltp8xONTEthFrameExtendedPerformMonitoringUSCounterID, ltp8xACLListsEntry=ltp8xACLListsEntry, ltp8xOLTConfigPPPoEEntry=ltp8xOLTConfigPPPoEEntry, ltp8xONTServiceDSCounterName=ltp8xONTServiceDSCounterName, ltp8xONTTemplateServicesOverridesCrossConnectProfile=ltp8xONTTemplateServicesOverridesCrossConnectProfile, ltp8xONTFirmwaresVersionPriorityFile=ltp8xONTFirmwaresVersionPriorityFile, plc8DataLinkLayerFlappingOkTrap=plc8DataLinkLayerFlappingOkTrap, plc8ChannelOntCntOverflowTrap=plc8ChannelOntCntOverflowTrap, ltp8xONTShapingDownstreamOnePolicer=ltp8xONTShapingDownstreamOnePolicer, ltp8xONTPortsIGMPQuerierIP=ltp8xONTPortsIGMPQuerierIP, ltp8xPONChannelAddressPriority=ltp8xPONChannelAddressPriority, ltp8xONTUNIPortsStateSlot=ltp8xONTUNIPortsStateSlot, ltp8xFileDownloadOkTrap=ltp8xFileDownloadOkTrap, ltp8xONTACSConfigAltPPPPassword=ltp8xONTACSConfigAltPPPPassword, ltp8xONTTemplates=ltp8xONTTemplates, ltp8xOLTONTAutoFirmwareUpdateSlot=ltp8xOLTONTAutoFirmwareUpdateSlot, ltp8xONTConfigAllocProfile0=ltp8xONTConfigAllocProfile0, ltp8xONTTemplateValuesAllocProfile2=ltp8xONTTemplateValuesAllocProfile2, ltp8xONTTemplateOverridesAllocProfile6=ltp8xONTTemplateOverridesAllocProfile6, ltp8xOLTVInterfaceMonitoringUSSlot=ltp8xOLTVInterfaceMonitoringUSSlot, ltp8xONTResetCountersEntry=ltp8xONTResetCountersEntry, ltp8xRedundancyMasterChannelFailTrap=ltp8xRedundancyMasterChannelFailTrap, ltp8xOLTMulticastStatsBackwardsStop=ltp8xOLTMulticastStatsBackwardsStop, ltp8xPONChannelONTCount=ltp8xPONChannelONTCount, ltp8xBatteryPowerOkTrap=ltp8xBatteryPowerOkTrap, ltp8xONTCrossConnectDSTable=ltp8xONTCrossConnectDSTable, ltp8xONTAddressSerial=ltp8xONTAddressSerial, ltp8xONTPortsRowStatus=ltp8xONTPortsRowStatus, ltp8xQOSDSCPMappingFields=ltp8xQOSDSCPMappingFields, ltp8xONTWANCountersSerial=ltp8xONTWANCountersSerial, ltp8xACLConfig=ltp8xACLConfig, ltp8xONTFirmwaresSpecificsTable=ltp8xONTFirmwaresSpecificsTable, ltp8xSwitchPortBrdcPktsSent=ltp8xSwitchPortBrdcPktsSent, ltp8xONTTemplateOverridesAllocProfile7=ltp8xONTTemplateOverridesAllocProfile7, ltp8xONTPortsMLDLastMemberQueryInterval=ltp8xONTPortsMLDLastMemberQueryInterval, ltp8xRawMacEntry=ltp8xRawMacEntry, ltp8xACLGlobalModeEntry=ltp8xACLGlobalModeEntry, ltp8xONTBandwidthManagementID=ltp8xONTBandwidthManagementID, ltp8xONTACSPropertiesRowStatus=ltp8xONTACSPropertiesRowStatus, ltp8xIGMPProxyReportRangesGlobalEntry=ltp8xIGMPProxyReportRangesGlobalEntry, plc8LowRxPowerOkTrap=plc8LowRxPowerOkTrap, plc8RAMAlarmTrap=plc8RAMAlarmTrap, ltp8xONTACSStateClear=ltp8xONTACSStateClear, ltp8xSwitchVLANMLDSnoopingQuerierEnabled=ltp8xSwitchVLANMLDSnoopingQuerierEnabled, ltp8xMLDProxyReportRangesGlobalEntry=ltp8xMLDProxyReportRangesGlobalEntry, ltp8xConfigRereadOkTrap=ltp8xConfigRereadOkTrap, ltp8xONTACSConfigAltSIPProxy=ltp8xONTACSConfigAltSIPProxy, ltp8xACLListsFiltersCount=ltp8xACLListsFiltersCount, ltp8xONTStateTable=ltp8xONTStateTable, ltp8xONTBandwidthManagementProfileTable=ltp8xONTBandwidthManagementProfileTable, ltp8xONTACSPrivatesRowStatus=ltp8xONTACSPrivatesRowStatus, ltp8xOLTConfigDhcpBcPacketPerSecond=ltp8xOLTConfigDhcpBcPacketPerSecond, ltp8xACLListsPorts=ltp8xACLListsPorts, ltp8xONTAutoUpdateEquipmentID=ltp8xONTAutoUpdateEquipmentID, ltp8xSwitchOperationalVLANTable=ltp8xSwitchOperationalVLANTable, ltp8xIGMPProxyReportRangesGlobalStart=ltp8xIGMPProxyReportRangesGlobalStart, ltp8xSwitchPortPkts1024tomaxOctets=ltp8xSwitchPortPkts1024tomaxOctets)
