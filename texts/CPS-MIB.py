#
# PySNMP MIB module CPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/cyberpower/CPS-MIB
# Produced by pysmi-1.1.12 at Mon Oct  7 02:25:05 2024
# On host fv-az1986-495 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, iso, Integer32, NotificationType, Counter32, Gauge32, enterprises, Unsigned32, NotificationType, ObjectIdentity, Bits, MibIdentifier, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "iso", "Integer32", "NotificationType", "Counter32", "Gauge32", "enterprises", "Unsigned32", "NotificationType", "ObjectIdentity", "Bits", "MibIdentifier", "ModuleIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cps = MibIdentifier((1, 3, 6, 1, 4, 1, 3808))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1))
cpsmgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 2))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1))
mconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 2, 1))
mtrapinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 2, 2))
mcontrol = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 2, 3))
ups = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1))
eswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2))
ePDU = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3))
environmentSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4))
ats = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5))
ePDU2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6))
battmgr = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7))
mconfigClock = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 2, 1, 5))
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1))
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2))
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3))
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4))
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5))
upsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6))
upsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7))
upsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 8))
upsPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9))
upsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 10))
upsBaseIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 1))
upsAdvanceIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2))
upsBaseBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 1))
upsAdvanceBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2))
upsBaseInput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 1))
upsAdvanceInput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 2))
upsBaseOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 1))
upsAdvanceOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 2))
upsBaseConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1))
upsAdvanceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2))
upsBaseControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 1))
upsAdvanceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2))
upsBaseTest = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 1))
upsAdvanceTest = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2))
upsBankOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 8, 1))
upsPhaseInput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1))
upsPhaseOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2))
upsPhaseBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3))
eSwitchIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 1))
eSwitchBase = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2))
ePDUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1))
ePDULoad = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2))
ePDUOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3))
ePDUPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 4))
ePDUStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5))
ePDULoadDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1))
ePDULoadPhaseConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2))
ePDULoadStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3))
ePDULoadBankConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4))
ePDUOutletDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 1))
ePDUOutletPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 2))
ePDUOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3))
ePDUOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4))
ePDUOutletStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5))
ePDUOutletBank = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 6))
ePDUPowerSupplyDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 4, 1))
envirIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 1))
envirTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2))
envirHumid = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 3))
envirContact = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4))
atsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1))
atsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2))
atsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3))
atsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 4))
atsLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5))
atsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6))
atsStatusDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1))
atsStatusInput = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2))
atsLoadDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1))
atsLoadStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2))
atsLoadConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3))
atsOutletDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 1))
ePDU2Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2))
ePDU2Device = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3))
ePDU2Phase = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4))
ePDU2Bank = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5))
ePDU2Outlet = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6))
ePDU2OutletSwitched = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1))
ePDU2OutletMetered = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2))
ePDU2Sensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 7))
ePDU2Group = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 8))
bmIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1))
bmProperty = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 2))
bmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3))
bmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 4))
bmProbes = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5))
bmFuncRes = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 6))
bmFuncEqual = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 7))
bmFuncResMeasure = MibIdentifier((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 6, 1))
mconfigNumTrapAccepters = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mconfigNumTrapAccepters.setStatus('mandatory')
if mibBuilder.loadTexts: mconfigNumTrapAccepters.setDescription('The number of receivers to send traps to.')
mconfigTrapAccepterTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 2, 1, 2), )
if mibBuilder.loadTexts: mconfigTrapAccepterTable.setStatus('mandatory')
if mibBuilder.loadTexts: mconfigTrapAccepterTable.setDescription('A list of receivers to send traps to. The numbers of\n       entries are given by the value of mconfigNumTrapAccepters.')
mconfigTrapAccepterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 2, 1, 2, 1), ).setIndexNames((0, "CPS-MIB", "trapIndex"))
if mibBuilder.loadTexts: mconfigTrapAccepterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mconfigTrapAccepterEntry.setDescription('The receivers to send traps to.')
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: trapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapIndex.setDescription('The trap receiver entry index.')
accepterAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accepterAddr.setStatus('mandatory')
if mibBuilder.loadTexts: accepterAddr.setDescription('The trap receiver IP address.')
communityString = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityString.setStatus('mandatory')
if mibBuilder.loadTexts: communityString.setDescription('The trap receiver community name.')
severityDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("information", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: severityDegree.setStatus('mandatory')
if mibBuilder.loadTexts: severityDegree.setDescription('The trap receiver severity level. Traps are marked in severity level\n       as informational(1), warning(2), severe(3). Only send the traps of\n       equal or greater severity than this value to the receiver.')
accepterActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accepterActive.setStatus('mandatory')
if mibBuilder.loadTexts: accepterActive.setDescription('A receiver will accept traps if yes, and none if no.')
mconfigDHCPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mconfigDHCPEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: mconfigDHCPEnabled.setDescription('The system will automatically obtain its IP from a DHCP server if yes,\n       and none if no.')
mconfigMyAddr = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mconfigMyAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mconfigMyAddr.setDescription('The system IP address.')
mconfigClockDate = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 1, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mconfigClockDate.setStatus('mandatory')
if mibBuilder.loadTexts: mconfigClockDate.setDescription('The current date in the mm/dd/yyyy format. Example: 01/01/2000.')
mconfigClockTime = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 1, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mconfigClockTime.setStatus('mandatory')
if mibBuilder.loadTexts: mconfigClockTime.setDescription('The current time in the hh:mm:ss 24H format.')
mtrapinfoInteger = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapinfoInteger.setStatus('mandatory')
if mibBuilder.loadTexts: mtrapinfoInteger.setDescription('Allow CPS traps with an integer argument for providing detail\n       information. Not being defined in the MIB, only reply 0.')
mtrapinfoIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapinfoIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mtrapinfoIpAddress.setDescription('Allow CPS traps with an IP address argument for providing detail\n       information. Not being defined in the MIB, only reply 0.0.0.0.')
mtrapinfoString = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapinfoString.setStatus('mandatory')
if mibBuilder.loadTexts: mtrapinfoString.setDescription('Allow CPS traps with an octet string argument for providing detail\n       information. Not being defined in the MIB, only reply a NULL string.')
mtrapinfoGauge = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapinfoGauge.setStatus('mandatory')
if mibBuilder.loadTexts: mtrapinfoGauge.setDescription('Allow CPS traps with an Gauge argument for providing detail\n       information. Not being defined in the MIB, only reply 0.')
mtrapinfoTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 2, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapinfoTimeTicks.setStatus('mandatory')
if mibBuilder.loadTexts: mtrapinfoTimeTicks.setDescription('Allow CPS traps with an TimeTicks argument for providing detail\n       information. Not being defined in the MIB, only reply 0.')
mtrapinfoBmEventId = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapinfoBmEventId.setStatus('mandatory')
if mibBuilder.loadTexts: mtrapinfoBmEventId.setDescription('Allow CPS traps with an integer argument for providing detail\n       information about Battery Manager specific event identifier. \n       Not being defined in the MIB, only reply 0.\n       \n       Known Specific Event ID: Battery Manager\n         0 - not used\n         1 - Alarm: The battery manager system fault. \n         2 - Info: Device configuration changed. \n         3 - Alarm: Probe configuration mismatched. \n         4 - Info: Probe configuration matched. \n         5 - Alarm: Communication with battery manager has been lost. \n         6 - Info: Communication with battery manager has been restored. \n         7 - Alarm: Communication with LCD has been lost. \n         8 - Info: Communication with LCD has been restored. \n         9 - Warning: Enter battery equalization active mode.\n         10- Warning: Leave battery equalization active mode.\n         11- Alarm: Battery equalizing has failed. \n         12- Info: Battery equalizing succeed. \n         \n       Known Specific Event ID: Battery Probes\n         101 - Alarm: Low battery voltage. \n         102 - Alarm: High battery voltage. \n         103 - Info: Battery voltage event has cleared. \n         104 - Alarm: Low battery temperature. \n         105 - Alarm: High battery temperature. \n         106 - Info: Battery temperature event has cleared. \n         107 - Alarm: Critical low battery resistance. \n         108 - Alarm: Critical high battery resistance. \n         109 - Warning: Low battery resistance. \n         110 - Warning: high battery resistance. \n         111 - Info: Battery resistance event has cleared. \n         112 - Alarm: Battery resistance health has crossed alarm threshold. \n         113 - Warning: Battery resistance health has crossed warning threshold. \n         114 - Info: Battery resistance health has returned to Normal. ')
mcontrolRestart = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("restartCurrentSystem", 2), ("restartCurrentAgent", 3), ("restartCurrentSystemAndAgent", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcontrolRestart.setStatus('mandatory')
if mibBuilder.loadTexts: mcontrolRestart.setDescription('Setting this OID to restartCurrentSystem (2) will restart the current system.\n      Setting this OID to restartCurrentAgent (3) will restart the current agent. \n      Setting this OID to restartCurrentSystemAnd Agent (4) will restart the current \n      the current system and agent.')
mcontrolReset = MibScalar((1, 3, 6, 1, 4, 1, 3808, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("resetCurrentSystem", 2), ("resetCurrentAgent", 3), ("resetCurrentSystemAndAgent", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcontrolReset.setStatus('mandatory')
if mibBuilder.loadTexts: mcontrolReset.setDescription('Setting this OID to resetCurrentSystem (2) will reset the current system. \n      Setting this OID to resetCurrentAgent (3) will reset the current agent. \n      Setting this OID to resetCurrentSystemAndAgenta (4) will reset the current \n      system and the current agent.')
upsBaseIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseIdentModel.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseIdentModel.setDescription('The UPS model name.')
upsBaseIdentName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBaseIdentName.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseIdentName.setDescription('The UPS identified name could be set by the administrator.')
upsAdvanceIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceIdentFirmwareRevision.setDescription('The UPS firmware revision.')
upsAdvanceIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentDateOfManufacture.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceIdentDateOfManufacture.setDescription('The UPS manufacture date in mm/dd/yy format.')
upsAdvanceIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceIdentSerialNumber.setDescription('The UPS serial number in the internal microprocessor.')
upsAdvanceIdentAgentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentAgentFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceIdentAgentFirmwareRevision.setDescription('The SNMP agent firmware revision.')
upsAdvanceIdentLCDFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentLCDFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceIdentLCDFirmwareVersion.setDescription('The revision number of the UPS LCD firmware.')
upsAdvanceIdentPowerRating = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentPowerRating.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceIdentPowerRating.setDescription('The Volt-Amp rating of the UPS.')
upsAdvanceIdentLoadPower = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentLoadPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceIdentLoadPower.setDescription('The power rating(Watts) of the UPS.')
upsAdvanceIdentCurrentRating = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentCurrentRating.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceIdentCurrentRating.setDescription(' The output current rating of the UPS. Measured in tenths of Amps.')
upsAdvanceIdentAgentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 1, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceIdentAgentSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceIdentAgentSerialNumber.setDescription('A string identifying the serial number of the Agent.')
upsBaseBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryNotPresent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseBatteryStatus.setDescription('The UPS battery status.  A batteryLow(3) value means the\n       battery will be exhausted soon under the current load.\n       The amount of low battery run time can be configured by the\n       upsAdvanceConfigLowBatteryRunTime.')
upsBaseBatteryTimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseBatteryTimeOnBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseBatteryTimeOnBattery.setDescription('The UPS wasted battery time since the UPS has transfered to\n       backup mode.')
upsBaseBatteryLastReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBaseBatteryLastReplaceDate.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseBatteryLastReplaceDate.setDescription('The UPS batteries last replaced date in mm/dd/yyyy format.\n       This value is originally set when manufactured. If batteries\n       replaced, administrator should reset this value.')
upsBaseBatteryAgeRecommand = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseBatteryAgeRecommand.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseBatteryAgeRecommand.setDescription('Recommended battery life in month')
upsAdvanceBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceBatteryCapacity.setDescription('The battery capacity expressed in percentage.')
upsAdvanceBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceBatteryVoltage.setDescription('The battery voltage expressed in 1/10 VDC.')
upsAdvanceBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceBatteryTemperature.setDescription('The UPS battery temperature expressed in Celsius.')
upsAdvanceBatteryRunTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryRunTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceBatteryRunTimeRemaining.setDescription('The UPS battery remaining run time.')
upsAdvanceBatteryReplaceIndicator = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noBatteryNeedsReplacing", 1), ("batteryNeedsReplacing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryReplaceIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceBatteryReplaceIndicator.setDescription('This value indicates if UPS batteries need to be replaced.')
upsAdvanceBatteryFullChargeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryFullChargeVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceBatteryFullChargeVoltage.setDescription('The battery charged voltage expressed in 1/10 VDC.')
upsAdvanceBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceBatteryCurrent.setDescription('The battery current expressed in percentage.')
upsAdvanceBatteryVoltageRating = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryVoltageRating.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceBatteryVoltageRating.setDescription(' The DC voltage rating of the battery set.')
upsAdvanceBatteryLife = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceBatteryLife.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceBatteryLife.setDescription(' The battery life expressed in 1/100 percentage.')
upsBaseInputPhase = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseInputPhase.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseInputPhase.setDescription('The AC input phase.')
upsAdvanceInputLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceInputLineVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceInputLineVoltage.setDescription('The input line voltage in 1/10 VAC.')
upsAdvanceInputMaxLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceInputMaxLineVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceInputMaxLineVoltage.setDescription('The maximum input line voltage in 1/10 VAC over the\n       previous 1 minute period.')
upsAdvanceInputMinLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceInputMinLineVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceInputMinLineVoltage.setDescription('The minimum input line voltage in 1/10 VAC over the\n       previous 1 minute period.')
upsAdvanceInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceInputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceInputFrequency.setDescription('The input line frequency in 1/10 Hz.')
upsAdvanceInputLineFailCause = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noTransfer", 1), ("highLineVoltage", 2), ("brownout", 3), ("selfTest", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceInputLineFailCause.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceInputLineFailCause.setDescription('The reason of UPS power failure.\n       This value is set to:\n       - noTransfer(1), if UPS is in utility mode.\n       - highLineVoltage(2), if UPS switch to battery mode by reason of\n         input voltage over the high transfer vloltage.\n       - brownout(3), if UPS switch to battery mode by reason of\n         input voltage under the low transfer vloltage.\n       - selfTest(4), if the UPS was commanded to do a self test.')
upsAdvanceInputStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("overVoltage", 2), ("underVoltage", 3), ("frequencyFailure", 4), ("blackout", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceInputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceInputStatus.setDescription('Display the present status of the utility power supplied to the UPS.')
upsBaseOutputStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("onLine", 2), ("onBattery", 3), ("onBoost", 4), ("onSleep", 5), ("off", 6), ("rebooting", 7), ("onECO", 8), ("onBypass", 9), ("onBuck", 10), ("onOverload", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseOutputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseOutputStatus.setDescription('The UPS output status.')
upsBaseOutputPhase = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseOutputPhase.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseOutputPhase.setDescription('The output phase.')
upsBaseOutputWorkingFrequency = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseOutputWorkingFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseOutputWorkingFrequency.setDescription(' The frequency of the UPS output power.')
upsAdvanceOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceOutputVoltage.setDescription('The UPS output voltage in 1/10 VAC.')
upsAdvanceOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceOutputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceOutputFrequency.setDescription('The UPS output frequency in 1/10 Hz.')
upsAdvanceOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceOutputLoad.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceOutputLoad.setDescription('The UPS output load expressed in percentage')
upsAdvanceOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceOutputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceOutputCurrent.setDescription('The UPS output current in 1/10 Amps.')
upsAdvanceOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 4, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceOutputPower.setDescription('The total output active power of the UPS system in W.')
upsBaseConfigNumDevices = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseConfigNumDevices.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseConfigNumDevices.setDescription('The number of equipment plugged into the UPS.')
upsBaseConfigDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1, 2), )
if mibBuilder.loadTexts: upsBaseConfigDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseConfigDeviceTable.setDescription('A list of equipment plugged into the UPS.\n       The numbers of entries are given by the value of\n       upsBaseConfigNumDevices.')
upsBaseConfigDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "CPS-MIB", "deviceIndex"))
if mibBuilder.loadTexts: upsBaseConfigDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseConfigDeviceEntry.setDescription('The equipment plugged in to the UPS.')
deviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIndex.setDescription('The index of the equipment plugged into the UPS.')
deviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceName.setStatus('mandatory')
if mibBuilder.loadTexts: deviceName.setDescription('The name of the equipment plugged into the UPS.')
vaRating = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vaRating.setStatus('mandatory')
if mibBuilder.loadTexts: vaRating.setDescription('The VA rating of the equipment plugged into the UPS.')
acceptThisDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acceptThisDevice.setStatus('mandatory')
if mibBuilder.loadTexts: acceptThisDevice.setDescription('An equipment is plugged if yes, unplugged if no.')
upsAdvanceConfigOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigOutputVoltage.setDescription('The standard UPS output voltage in VAC.\n       The possible values are 100, 110, 120, 127,\n       208, 220, 230, and 240.\n       If a value other than a possible value is set,\n       it will not be accepted.')
upsAdvanceConfigHighTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigHighTransferVolt.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigHighTransferVolt.setDescription('Adjust the high transfer vloltage in VAC.\n       The high transfer vloltage will become the UPS default value\n       subtracts this value. The allowed values depend on the output:\n       100-127 volt system allow settings of 0-15.\n       208-240 volt system allow settings of 0-30.\n       If the adjustable value is over the allowed values,\n       it will not be accepted.')
upsAdvanceConfigLowTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigLowTransferVolt.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigLowTransferVolt.setDescription('Adjust the low transfer vloltage in VAC.\n       The low transfer vloltage will become the UPS default value\n       adds this value. The allowed values depend on the output:\n       100-127 volt system allow settings of 0-15.\n       208-240 volt system allow settings of 0-30.\n       If the adjustable value is over the allowed values,\n       it will not be accepted.')
upsAdvanceConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("timed", 1), ("enable", 2), ("disable", 3), ("mute", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigAlarm.setDescription('This value is set to handle audible alarms when power failure.')
upsAdvanceConfigAlarmTimer = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigAlarmTimer.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigAlarmTimer.setDescription('The time after power failure at which the UPS begins giving\n       audible alarms. This timer is effective only if the value of\n       upsAdvanceConfigAlarm is timed(1).\n       Accepted values are between 0 to 60 seconds.\n       If a value other than a supported value is set, the value\n       will not be accepted.')
upsAdvanceConfigMinReturnCapacity = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigMinReturnCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigMinReturnCapacity.setDescription('The minimum battery capacity that UPS will return from\n       a low battery shutdown condition. The possible values\n       are between 0 to 40.\n       If a value other than a supported value is set, the value\n       will not be accepted.')
upsAdvanceConfigSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("low", 2), ("medium", 3), ("high", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigSensitivity.setDescription('The sensitivity of the UPS to power failure detection.')
upsAdvanceConfigLowBatteryRunTime = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 8), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigLowBatteryRunTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigLowBatteryRunTime.setDescription('The desired run time, in seconds, UPS will enter in a\n       low battery sequence. The possible values are\n       120, 300, 420, 600.\n       If a value other than a supported value is set, the value\n       will not be accepted.')
upsAdvanceConfigReturnDelay = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 9), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigReturnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigReturnDelay.setDescription("The delay time the UPS will turn on after power recovery.\n       The value is also used in a 'reboot' or 'wake up' sequence.\n       The possible values are 0 to 600 seconds.\n       If a value other than a supported value is set, the value\n       will not be accepted.")
upsAdvanceConfigShutoffDelay = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigShutoffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigShutoffDelay.setDescription('The delay time the UPS will remain on after receiving a\n       turn off command.  The possible values are between 60 to \n       5940 seconds.\n       If a value other than a supported value is set, the value\n       will not be accepted.')
upsAdvanceConfigSleepDelay = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 11), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigSleepDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigSleepDelay.setDescription('The delay time the UPS will enter sleep mode after receiving \n       a sleep command. WThe possible values are between 60 to \n       5940 seconds.\n       If a value other than a supported value is set, the value\n       will not be accepted.')
upsAdvanceConfigSetEEPROMDefaults = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSetEEPROMDefaults", 1), ("setEEPROMDefaults", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigSetEEPROMDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigSetEEPROMDefaults.setDescription('Reset the UPS EEPROM parameters to default values.')
upsAdvanceConfigAutoRestore = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigAutoRestore.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigAutoRestore.setDescription('When this option is enabled, the UPS will restore output \n       immediately when the utility power restores.When this option \n       is disabled, the UPS will not restore output at that moment \n       and users have to turn it on manually at a later time. ')
upsAdvanceConfigRechargedCapacity = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigRechargedCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigRechargedCapacity.setDescription(' When the utility power restores, the UPS will start to recharge until \n\tthe specified battery capacity in percentage is met before restoring output power. \n\tThe possible values are 0, 15, 30, 45, 60, 75, and 90.\n\tIf a value other than a possible value is set, it will not be accepted.')
upsAdvanceConfigColdStart = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigColdStart.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigColdStart.setDescription(' Set the ability of the UPS can start in the absence of input power.When \n        this option is enabled the UPS can be turned on without having input power.')
upsAdvanceConfigDeepDischargeProtection = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigDeepDischargeProtection.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigDeepDischargeProtection.setDescription(' When the UPS is on Battery Mode with 0% load and the status remains for \n        the time configured,the RMCARD will enforce the UPS to Sleep Mode and \n        the output will be turned off. The possible values are 0, 20, 40, and 60 minutes.\n\tIf a value other than a possible value is set, it will not be accepted.\t')
upsAdvanceConfigSleepAfterAllClientShut = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigSleepAfterAllClientShut.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigSleepAfterAllClientShut.setDescription('If this option is enabled, UPS will enter sleep mode after \n       utility power failed and remaining MSDT+2 minutes.More information \n       about MSDT please reference to help page of UPS - > PowerPanel List.')
upsAdvanceConfigLowBatteryThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 5, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceConfigLowBatteryThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceConfigLowBatteryThreshold.setDescription('When the UPS supplies battery power and the remaining capacity is lower than this threshold, \n       the UPS will sound an alarm. \n       The value expressed in percentage.')
upsBaseControlConserveBattery = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTurnOffUps", 1), ("turnOffUpsToConserveBattery", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBaseControlConserveBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseControlConserveBattery.setDescription('UPS on battery will enter sleeping when the variable is set\n       to turnOffUpsToConserveBattery(2). When utility power recovers\n       the UPS will turn back on. Trying to turn off a UPS that is\n       not on battery mode will cause badValue error.\n       It is no effective to set this value to noTurnOffUps(1).')
upsAdvanceControlUpsOff = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noTurnUpsOff", 1), ("turnUpsOff", 2), ("turnUpsOffGracefully", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceControlUpsOff.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceControlUpsOff.setDescription('UPS will shutdown when the variable is set to turnUpsOff(2).\n       UPS will shutdown after a delay period specified by \n       upsAdvanceConfigShutoffDelay when the variable is Set to \n       turnUpsOffGracefully(3).\n       Without regard to the utility state the UPS will not provide \n       output power in this state.\n       It is no effective to set this value to noTurnUpsOff(1).')
upsAdvanceControlRebootUps = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noRebootUps", 1), ("rebootUps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceControlRebootUps.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceControlRebootUps.setDescription('UPS will shutdown and turn back on when the variable is\n       set to rebootUps(2).\n       It is no effective to set this value to noRebootUps(1).')
upsAdvanceControlUpsSleep = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPutUpsToSleep", 1), ("putUpsToSleep", 2), ("putUpsToSleepGracefully", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceControlUpsSleep.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceControlUpsSleep.setDescription('UPS will enter sleep mode when the variable is set to putUpsToSleep(2). \n       UPS will enter sleep mode after a delay period specified by \n       upsAdvanceConfigSleepDelay when the variable is Set to \n       putUpsToSleepGracefully(3).\n       Without regard to the utility state the UPS will not provide output \n       power in sleep mode. Output power will recover when specified time \n       has elapsed.\n       It is no effective to set this value to noPutUpsToSleep(1).')
upsAdvanceControlSimulatePowerFail = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSimulatePowerFailure", 1), ("simulatePowerFailure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceControlSimulatePowerFail.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceControlSimulatePowerFail.setDescription('UPS will transfer to backup mode when the variable is set\n       to simulatePowerFailure(2).\n       It is no effective to set this value to noFlashAndBeep(1).')
upsAdvanceControlFlashAndBeep = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noFlashAndBeep", 1), ("flashAndBeep", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceControlFlashAndBeep.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceControlFlashAndBeep.setDescription('UPS will beep and simultaneously turn on the panel lights\n       when the variable is set to flashAndBeep(2).\n       It is no effective to set this value to noSimulatePowerFailure(1).')
upsAdvanceControlTurnOnUPS = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTurnOnUPS", 1), ("turnOnUPS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceControlTurnOnUPS.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceControlTurnOnUPS.setDescription('UPS will turned on immediately when the variable is set\n       to turnOnUPS(2).\n       It is no effective to set this value to noTurnOnUPS(1).')
upsAdvanceSleepAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 6, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceSleepAfterDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceSleepAfterDelay.setDescription('UPS will enter sleep mode after indicated number of seconds,\n       or less if the UPS batteries become depleted. Setting this\n       object to 0 will cause the shutdown to occur immediately.  \n       Setting this object to -1 will abort the countdown.')
upsAdvanceTestDiagnosticSchedule = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("biweekly", 2), ("weekly", 3), ("atTurnOn", 4), ("never", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceTestDiagnosticSchedule.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceTestDiagnosticSchedule.setDescription('The schedule of the UPS automatic selftest.')
upsAdvanceTestDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestDiagnostics", 1), ("testDiagnostics", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceTestDiagnostics.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceTestDiagnostics.setDescription('UPS will do a diagnostic selftest when the variable is set\n       to testDiagnostics(2).\n       It is no effective to set this value to noTestDiagnostics(1).')
upsAdvanceTestDiagnosticsResults = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("invalidTest", 3), ("testInProgress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceTestDiagnosticsResults.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceTestDiagnosticsResults.setDescription('The last UPS selftest result.')
upsAdvanceTestLastDiagnosticsDate = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceTestLastDiagnosticsDate.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceTestLastDiagnosticsDate.setDescription('The last UPS selftest date in mm/dd/yy format.')
upsAdvanceTestIndicators = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestIndicators", 1), ("testIndicators", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceTestIndicators.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceTestIndicators.setDescription('UPS will perform a panel indicator test when the variable\n       is set to testIndicators(2).\n       It is no effective to set this value to noTestIndicators(1).')
upsAdvanceTestRuntimeEstimation = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPerformEstimation", 1), ("performEstimation", 2), ("cancelCurrentEstimation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvanceTestRuntimeEstimation.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceTestRuntimeEstimation.setDescription('UPS will discharge to calibrate the UPS runtime when the variable\n       is set to performEstimation(2).\n       This test runs until the UPS is in a low battery condition.\n       UPS will cancel the discharge after setting performEstimation(2)\n       when the variable is set to cancelCurrentEstimation(3).\n       It is no effective to set this value to noPerformEstimation(1).\n       The result of the runtime test will be stored in\n       upsAdvanceTestEstimationResults.')
upsAdvanceTestEstimationResults = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("invalidEstimation", 2), ("estimationInProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceTestEstimationResults.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceTestEstimationResults.setDescription('The last runtime estimation result.\n       This value means :\n       - ok(1), if a successful runtime estimation.\n       - invalidEstimation(2), if runtime estimation failure.\n       - estimationInProgress(3), if estimation is processing now.')
upsAdvanceTestEstimationDate = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 7, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvanceTestEstimationDate.setStatus('mandatory')
if mibBuilder.loadTexts: upsAdvanceTestEstimationDate.setDescription('The last UPS runtime estimation date')
upsBankOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 8, 1, 1), )
if mibBuilder.loadTexts: upsBankOutletControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsBankOutletControlTable.setDescription('Allows for control of the outlet banks.')
upsBankOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 8, 1, 1, 1), ).setIndexNames((0, "CPS-MIB", "upsBankControlIndex"))
if mibBuilder.loadTexts: upsBankOutletControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsBankOutletControlEntry.setDescription('The outlet to control.')
upsBankControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBankControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsBankControlIndex.setDescription('The index to the outlet entry.')
upsBankControlOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("bankNotExist", 3), ("criticalBank", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBankControlOutletCommand.setStatus('mandatory')
if mibBuilder.loadTexts: upsBankControlOutletCommand.setDescription('Getting this variable will return the outlet bank state. If\n       the outlet bank is on, the immediateOn (1) value will be returned.\n       If the outlet bank is off, the immediateOff (2) value will be\n       returned. If the outlet bank is critical (uncontrollable), the \n       criticalBank (4) value will be returned.\n       Setting this variable to immediateOn (1) will immediately turn\n       the outlet on.\n       Setting this variable to immediateOff (2) will immediately turn\n       the outlet off.')
upsPhaseInputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseInputTableSize.setDescription('Getting this OID will return the phase number.')
upsPhaseInputTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 2), )
if mibBuilder.loadTexts: upsPhaseInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseInputTable.setDescription('Allows for getting the Phase Input in the UPS')
upsPhaseInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 2, 1), ).setIndexNames((0, "CPS-MIB", "upsPhaseInputTableIndex"))
if mibBuilder.loadTexts: upsPhaseInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseInputEntry.setDescription('The UPS Phase Input Access.')
upsPhaseInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseInputTableIndex.setDescription('The index to the UPS Phase Input entry.')
upsPhaseInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseInputVoltage.setDescription('Getting this OID will return the input voltage that each phase of the UPS can provide. It is represented in 1/10 VAC.')
upsPhaseInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseInputCurrent.setDescription('Getting this OID will return the input current that each phase of the UPS can provide. It is represented in 1/10 Amps.')
upsPhaseInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseInputFrequency.setDescription('Getting this OID will return the input frequency that each phase of the UPS can provide. It is represented in 1/10 Hz.')
upsPhaseInputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputPowerFactor.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseInputPowerFactor.setDescription('Getting this OID will return the input power factor that each phase of the UPS can provide. It is represented in 1/100.')
upsPhaseOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseOutputTableSize.setDescription('Getting this OID will return the Phase number.')
upsPhaseOutputTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2), )
if mibBuilder.loadTexts: upsPhaseOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseOutputTable.setDescription('Allows for getting the Phase Output in the UPS')
upsPhaseOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2, 1), ).setIndexNames((0, "CPS-MIB", "upsPhaseOutputTableIndex"))
if mibBuilder.loadTexts: upsPhaseOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseOutputEntry.setDescription('The UPS Phase Output Access.')
upsPhaseOutputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseOutputTableIndex.setDescription('The index to the UPS Phase Output entry.')
upsPhaseOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseOutputVoltage.setDescription('Getting this OID will return the output voltage that each phase of the UPS can provide. It is represented in 1/10 VAC.')
upsPhaseOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseOutputCurrent.setDescription('Getting this OID will return the output current that each phase of the UPS can provide. It is represented in 1/10 Amps.')
upsPhaseOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseOutputFrequency.setDescription('Getting this OID will return the output frequency that each phase of the UPS can provide. It is represented in 1/10 Hz.')
upsPhaseOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPowerFactor.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseOutputPowerFactor.setDescription('Getting this OID will return the output power factor that each phase of the UPS can provide. It is represented in 1/100.')
upsPhaseOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseOutputPower.setDescription('Getting this OID will return the output power that each phase of the UPS can provide. It is represented in Watt.')
upsPhaseBypassTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseBypassTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseBypassTableSize.setDescription('Getting this OID will return the Phase number.')
upsPhaseBypassTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 2), )
if mibBuilder.loadTexts: upsPhaseBypassTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseBypassTable.setDescription('Allows for getting the Phase Bypass in the UPS')
upsPhaseBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 2, 1), ).setIndexNames((0, "CPS-MIB", "upsPhaseBypassTableIndex"))
if mibBuilder.loadTexts: upsPhaseBypassEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseBypassEntry.setDescription('The UPS Phase Bypass Access.')
upsPhaseBypassTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseBypassTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseBypassTableIndex.setDescription('The index to the UPS Phase Bypass entry.')
upsPhaseBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseBypassVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseBypassVoltage.setDescription('Getting this OID will return the bypass voltage that each phase of the UPS can provide. It is represented in 1/10 VAC.')
upsPhaseBypassCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseBypassCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseBypassCurrent.setDescription('Getting this OID will return the bypass current that each phase of the UPS can provide. It is represented in 1/10 Amps.')
upsPhaseBypassFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseBypassFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseBypassFrequency.setDescription('Getting this OID will return the bypass frequency that each phase of the UPS can provide. It is represented in 1/10 Hz.')
upsPhaseBypassPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 9, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseBypassPowerFactor.setStatus('mandatory')
if mibBuilder.loadTexts: upsPhaseBypassPowerFactor.setDescription('Getting this OID will return the bypass power factor that each phase of the UPS can provide. It is represented in 1/100.')
upsStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("overheat", 2), ("hardwarefault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsStatus.setDescription('The UPS system status.')
eSwitchIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchIdentHardwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: eSwitchIdentHardwareRev.setDescription('The hardware revision set at the factory.')
eSwitchIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchIdentFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: eSwitchIdentFirmwareRev.setDescription('The firmware revision set at the factory.')
eSwitchIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchIdentDateOfManufacture.setStatus('mandatory')
if mibBuilder.loadTexts: eSwitchIdentDateOfManufacture.setDescription('The manufacture date in mm/dd/yy format.')
eSwitchIdentModelName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchIdentModelName.setStatus('mandatory')
if mibBuilder.loadTexts: eSwitchIdentModelName.setDescription('The model name set at the factory.\n       This value need to consist with safty report.')
eSwitchNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchNumber.setStatus('mandatory')
if mibBuilder.loadTexts: eSwitchNumber.setDescription('The numbers of switch have been attached to the system.')
eSwitchBaseTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: eSwitchBaseTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSwitchBaseTable.setDescription('A list of switch information. The number of entries is given\n       by the value of eSwitchNumber.')
eSwitchBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "CPS-MIB", "eSwitchID"))
if mibBuilder.loadTexts: eSwitchBaseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSwitchBaseEntry.setDescription('An entry information of the individual switch.')
eSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchID.setStatus('mandatory')
if mibBuilder.loadTexts: eSwitchID.setDescription('The power switch ID number.')
eSwitchOutletNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchOutletNum.setStatus('mandatory')
if mibBuilder.loadTexts: eSwitchOutletNum.setDescription('The number of outlets provided in the switch.')
eSwitchOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSwitchOutletState.setStatus('mandatory')
if mibBuilder.loadTexts: eSwitchOutletState.setDescription("Getting this OID will reply the status of all outlets in the switch.\n       '0' for outlet off, '1' for outlet on.\n       The index from left to right is outlet#8, #7, #6, #5, #4, #3, #2, #1.\n       For Example:\n       If the string is '01011010', it means the outlets status are the following:\n       outlet #8 is off,\n       outlet #7 is on,\n       outlet #6 is off,\n       outlet #5 is on,\n       outlet #4 is on,\n       outlet #3 is off,\n       outlet #2 is on,\n       outlet #1 is off.\n      ")
eSwitchBaseCtrTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 3), )
if mibBuilder.loadTexts: eSwitchBaseCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: eSwitchBaseCtrTable.setDescription('A list of switch control parameters. The number of entries is given\n       by the value of eSwitchNumber.')
eSwitchBaseCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 3, 1), ).setIndexNames((0, "CPS-MIB", "eSwitchCtrID"))
if mibBuilder.loadTexts: eSwitchBaseCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eSwitchBaseCtrEntry.setDescription('An entry control information of individual switches.')
eSwitchCtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSwitchCtrID.setStatus('mandatory')
if mibBuilder.loadTexts: eSwitchCtrID.setDescription('Select the switch ID to be controlled.')
eSwitchActOutlet = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSwitchActOutlet.setStatus('mandatory')
if mibBuilder.loadTexts: eSwitchActOutlet.setDescription('The action outlets to be controlled.')
eSwitchActType = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSwitchActType.setStatus('mandatory')
if mibBuilder.loadTexts: eSwitchActType.setDescription('The on/off type of the action outlets.\n      1 for duration off, 2 for duration on,\n      3 for immediately off, 4 for immediately on,\n      and 5 for reboot.')
ePDUIdentName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUIdentName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentName.setDescription('The name of the Rack PDU. \n       The maximum string size is device dependent.')
ePDUIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentHardwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentHardwareRev.setDescription('The hardware revision of the Rack PDU. \n       This value is set at the factory.')
ePDUIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentFirmwareRev.setDescription('An 8-byte ID string identifying the Rack PDU firmware revision. \n       This value is set at the factory.')
ePDUIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDateOfManufacture.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentDateOfManufacture.setDescription('The date when the Rack PDU was manufactured in mm/dd/yyyy format.\n       This value is set at the factory. The year 2000 will be \n       represented by 00.')
ePDUIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentModelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentModelNumber.setDescription('A 10-character string identifying the model number of \n       the Rack PDU. This value is set at the factory.')
ePDUIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentSerialNumber.setDescription('A 12-character string identifying the serial number of \n       the Rack PDU. This value is set at the factory.')
ePDUIdentDeviceRating = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDeviceRating.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentDeviceRating.setDescription('Getting this OID will return the electrical rating of the device.')
ePDUIdentDeviceNumOutlets = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDeviceNumOutlets.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentDeviceNumOutlets.setDescription('Getting this OID will return the number of outlets contained in the device.')
ePDUIdentDeviceNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDeviceNumPhases.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentDeviceNumPhases.setDescription('Getting this OID will return the number of phases supported by the device.')
ePDUIdentDeviceNumBreakers = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDeviceNumBreakers.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentDeviceNumBreakers.setDescription('Getting this OID will return the number of circuit breakers supported by the device.\n       This is the same as the number of banks of outlets.\n       0 will be returned if the unit has no phase breakers. ')
ePDUIdentDeviceBreakerRating = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDeviceBreakerRating.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentDeviceBreakerRating.setDescription('Getting this OID will return rating of the circuit breakers on the device if it has any.')
ePDUIdentDeviceOrientation = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("orientHorizontal", 1), ("orientVertical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDeviceOrientation.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentDeviceOrientation.setDescription('Getting this OID will return the intended physical orientation of the device.\n       \n       OrientHorizonatal(1) indicates Horizontal.\n       OrientVertical(2) indicates Vertical.')
ePDUIdentDeviceOutletLayout = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("seqPhaseToNeutral", 1), ("seqPhaseToPhase", 2), ("seqPhToNeu21PhToPh", 3), ("seqPhToPhGrouped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUIdentDeviceOutletLayout.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentDeviceOutletLayout.setDescription('Getting this OID will return outlet layout for the device.\n\n       SeqPhaseToNeutral(1) indicates outlet layout as follows:\n       1:1-N,2:2-N,3:3-N,4:1-N,5:2-N,...\n\n       SeqPhaseToPhase(2) indicates outlet layout as follows:\n       1:1-2,2:2-3,3:3-1,4:1-2,5:2-3,...\n\n       SeqPhToNeu21PhToPh(3) indicates outlet layout as follows:\n       1:1-N,2:2-N...21:3-N,22:1-2,23:2-3,24:3-1,...\n\n       SeqPhToPhGrouped(4) indicates outlet layout as follows:\n       Otlts1-8::(3-1),Otlts9-16::(2-3),Otlts17-24::(1-2).')
ePDUIdentDeviceDisplayOrientation = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("displayNormal", 1), ("displayReverse", 2), ("displayRotate90", 3), ("displayRotate270", 4), ("displayAuto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUIdentDeviceDisplayOrientation.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentDeviceDisplayOrientation.setDescription('Getting this OID will return the intended physical orientation of the Seven-Segment Display.\n\n       displayNormal(1) indicates Normal.\n       displayReverse(2)indicates Upside-Down.\n       displayRotate90(3) indicates rotate 90 degree.\n       displayRotate270(4) indicates rotate 270 degree. \n       displayAuto(5) indicates auto-detect and rotate.')
ePDUIdentDeviceLinetoLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUIdentDeviceLinetoLineVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentDeviceLinetoLineVoltage.setDescription('Getting/Setting this OID will return/set the Line to Line Volatage.\n\n      The valid range is between 0V to 440V')
ePDUIdentIndicator = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestIndicators", 1), ("testIndicators", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUIdentIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUIdentIndicator.setDescription('PDU will perform a panel indicator test when the variable\n       is set to testIndicators(2).\n       \n       It is no effective to set this value to noTestIndicators(1).')
ePDULoadDevMaxPhaseLoad = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevMaxPhaseLoad.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevMaxPhaseLoad.setDescription('Getting this OID will return the maximum rated power\n       that each phase of the Rack PDU can provide. It is \n       represented in Amps.\n\n       0 will be returned if the unit is banked.')
ePDULoadDevNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevNumPhases.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevNumPhases.setDescription('The number of phases available with this Rack PDU.')
ePDULoadDevMaxBankLoad = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevMaxBankLoad.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevMaxBankLoad.setDescription('Getting this OID will return the maximum rated power\n       that a bank of the Rack PDU can provide. It is \n       represented in Amps.\n       \n       0 will be returned if the device does not have any banks.')
ePDULoadDevNumBanks = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevNumBanks.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevNumBanks.setDescription('The number of banks of outlets available with this Rack PDU.\n       A bank of outlets has a unique circuit breaker for a subset \n       of the total number of outlets on the ePDU.\n\n       0 will be returned if the unit no banks.')
ePDULoadDevBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevBankTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevBankTableSize.setDescription('The size of the Bank Table.')
ePDULoadDevBankTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 6), )
if mibBuilder.loadTexts: ePDULoadDevBankTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevBankTable.setDescription('Allows for getting the Bank Max Load in the Rack PDU.')
ePDULoadDevBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 6, 1), ).setIndexNames((0, "CPS-MIB", "ePDULoadDevBankIndex"))
if mibBuilder.loadTexts: ePDULoadDevBankEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevBankEntry.setDescription('The Rack PDU Banks Access.')
ePDULoadDevBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevBankIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevBankIndex.setDescription('The index to the Rack PDU bank entry.')
ePDULoadDevBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevBankNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevBankNumber.setDescription('Getting this OID will return the bank number.')
ePDULoadDevBankMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevBankMaxLoad.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevBankMaxLoad.setDescription('Getting this OID will return the maximum rated power\n       that each bank of the Rack PDU can provide. It is \n       represented in Amps.')
ePDULoadDevMaxOutletTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevMaxOutletTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevMaxOutletTableSize.setDescription('The size of the Outlet Table.')
ePDULoadDevMaxOutletTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 8), )
if mibBuilder.loadTexts: ePDULoadDevMaxOutletTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevMaxOutletTable.setDescription('Allows for getting the Max Outlet Load in an Outlet Monitored Rack PDU.')
ePDULoadDevMaxOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 8, 1), ).setIndexNames((0, "CPS-MIB", "ePDULoadDevOutletIndex"))
if mibBuilder.loadTexts: ePDULoadDevMaxOutletEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevMaxOutletEntry.setDescription('This gives access to Max Outlet Load of an Outlet Monitored Rack PDU')
ePDULoadDevOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevOutletIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevOutletIndex.setDescription('The index to the Outlet Monitored Rack PDU Max Outlet Load entry.')
ePDULoadDevOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevOutletNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevOutletNumber.setDescription('Getting this OID will return the Outlet number.')
ePDULoadDevMaxOutletLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadDevMaxOutletLoad.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadDevMaxOutletLoad.setDescription('Getting this OID will return the maximum rated power\n       that each Outlet of an Outlet Monitored Rack PDU can provide. It is\n       represented in Amps. ')
ePDULoadPhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2, 1), )
if mibBuilder.loadTexts: ePDULoadPhaseConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadPhaseConfigTable.setDescription('Allows for configuration of each Rack PDU phase.\n       The number of entries is contained in the\n       ePDULoadDevNumPhases OID.')
ePDULoadPhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDULoadPhaseConfigIndex"))
if mibBuilder.loadTexts: ePDULoadPhaseConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadPhaseConfigEntry.setDescription('The Rack PDU phase to configure.')
ePDULoadPhaseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadPhaseConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadPhaseConfigIndex.setDescription('The index to the Rack PDU phase entry.')
ePDULoadPhaseConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDULoadPhaseConfigLowLoadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadPhaseConfigLowLoadThreshold.setDescription('A threshold that indicates the power consumption of\n       the load is nearing a low consumption condition. It is \n       represented in Amps.  A warning will be issued when the\n       load is less than the threshold value.  \n       \n       A threshold value of 0 Amps effectively disables this \n       warning.  \n       \n       Maximum value must be less than the value returned \n       by the ePDULoadPhaseConfigNearOverloadThreshold OID.')
ePDULoadPhaseConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDULoadPhaseConfigNearOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadPhaseConfigNearOverloadThreshold.setDescription('A threshold that indicates the power consumption of\n       the load is nearing an overload condition. It is \n       represented in Amps.  A warning will be issued when the \n       load is greater than or equal to the threshold value.\n       \n       Minimum value must be greater than the value returned by\n       the ePDULoadPhaseConfigLowLoadThreshold OID.\n       \n       Maximum value must be less than or equal to the value \n       returned by the ePDULoadPhaseConfigOverloadThreshold OID.')
ePDULoadPhaseConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDULoadPhaseConfigOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadPhaseConfigOverloadThreshold.setDescription('A threshold that indicates the power consumption of\n       the load has entered an overload condition. It is \n       represented in Amps.  A warning will be issued when the \n       load is greater than or equal to the threshold value.\n       \n       Minimum value must be greater than or equal to the value \n       returned by the ePDULoadPhaseConfigNearOverloadThreshold OID.\n\n       Maximum value must be less than or equal to the value \n       returned by the ePDULoadDevMaxPhaseLoad OID.')
ePDULoadPhaseConfigAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadPhaseConfigAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadPhaseConfigAlarm.setDescription('Getting this OID will return the current Phase Alarm.')
ePDULoadStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1), )
if mibBuilder.loadTexts: ePDULoadStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadStatusTable.setDescription('Allows for getting of status of each Rack PDU phase/bank.\n       The number of entries is calculated by adding\n       the number of phases (ePDULoadDevNumPhases OID) and\n       the number of banks of outlets (ePDULoadDevNumBanks)\n       Number of entries = #phases + #banks.\n       NOTE: If a device has phase and bank information, all phase information\n       shall precede the bank information.')
ePDULoadStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDULoadStatusIndex"))
if mibBuilder.loadTexts: ePDULoadStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadStatusEntry.setDescription('The Rack PDU phase/bank to gather status from.')
ePDULoadStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadStatusIndex.setDescription('The index to the Rack PDU phase/bank entry. All phase information will precede\n       any bank information')
ePDULoadStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusLoad.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadStatusLoad.setDescription('Getting this OID will return the phase/bank load measured\n       in tenths of Amps.')
ePDULoadStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loadNormal", 1), ("loadLow", 2), ("loadNearOverload", 3), ("loadOverload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusLoadState.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadStatusLoadState.setDescription('Getting this OID will return the phase/bank load state.\n       \n       loadNormal(1) indicates that the phase/bank is operating \n       properly within the ePDULoadConfigLowLoadThreshold \n       and ePDULoadConfigNearOverloadThreshold OID values.\n       \n       loadLow(2) indicates that the phase/bank load has dropped \n       below the ePDULoadConfigLowLoadThreshold OID value.\n       An SNMP trap will occur when this state is entered or cleared.\n       \n       loadNearOverload(3) indicates that the phase/bank load is \n       greater than or equal to the ePDULoadConfigNearOverloadThreshold OID value.\n       An SNMP trap will occur when this state is entered or cleared.\n       \n       loadOverload(4) indicates that the phase/bank load is greater \n       than or equal to the ePDULoadConfigOverloadThreshold \n       OID value.\n       \n       An SNMP trap will occur when this state is entered or cleared.')
ePDULoadStatusPhaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusPhaseNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadStatusPhaseNumber.setDescription('The phase number to which this record refers.')
ePDULoadStatusBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusBankNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadStatusBankNumber.setDescription('The bank number to which this record refers.  A value of 0 will be returned if\n       any bank is not present or if it is phase related.')
ePDULoadStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadStatusVoltage.setDescription('Getting this OID will return the phase/bank voltage measured\n       in 0.1 volts.')
ePDULoadStatusActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusActivePower.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadStatusActivePower.setDescription('Getting this OID will return the phase/bank active power measured\n       in watts.')
ePDULoadStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusApparentPower.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadStatusApparentPower.setDescription('Getting this OID will return the phase/bank apparent power measured\n       in VA.')
ePDULoadStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusPowerFactor.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadStatusPowerFactor.setDescription('Getting this OID will return power factor of the output measured in hundredths.\n       A value of 100 representing a unity power factor (1.00).')
ePDULoadStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadStatusEnergy.setDescription('Getting this OID will return the phase/bank apparent power measured\n       in 0.1 kilowatt-hours.')
ePDULoadStatusEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 3, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadStatusEnergyStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadStatusEnergyStartTime.setDescription('Getting this OID will return the date and time of the last energy\n       meter reset')
ePDULoadBankConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4, 1), )
if mibBuilder.loadTexts: ePDULoadBankConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadBankConfigTable.setDescription('Allows for configuration of each Rack PDU bank.\n       The number of entries is contained in the \n       ePDULoadDevNumBanks OID.')
ePDULoadBankConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDULoadBankConfigIndex"))
if mibBuilder.loadTexts: ePDULoadBankConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadBankConfigEntry.setDescription('The Rack PDU bank to configure.')
ePDULoadBankConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadBankConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadBankConfigIndex.setDescription('The index to the Rack PDU bank entry.')
ePDULoadBankConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDULoadBankConfigLowLoadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadBankConfigLowLoadThreshold.setDescription('A threshold that indicates the power consumption of\n       the load is nearing a low consumption condition. It is \n       represented in Amps.  A warning will be issued when the\n       load is less than the threshold value.  \n       \n       A threshold value of 0 Amps effectively disables this \n       warning.  \n       \n       Maximum value must be less than the value returned \n       by the ePDULoadBankConfigNearOverloadThreshold OID.')
ePDULoadBankConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDULoadBankConfigNearOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadBankConfigNearOverloadThreshold.setDescription('A threshold that indicates the power consumption of\n       the load is nearing an overload condition. It is \n       represented in Amps.  A warning will be issued when the \n       load is greater than or equal to the threshold value.\n       \n       Minimum value must be greater than the value returned by\n       the ePDULoadBankConfigLowLoadThreshold OID.\n       \n       Maximum value must be less than or equal to the value \n       returned by the ePDULoadBankConfigOverloadThreshold OID.')
ePDULoadBankConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDULoadBankConfigOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadBankConfigOverloadThreshold.setDescription('A threshold that indicates the power consumption of\n       the load has entered an overload condition. It is \n       represented in Amps.  A warning will be issued when the \n       load is greater than or equal to the threshold value.\n       \n       Minimum value must be greater than or equal to the value \n       returned by the ePDULoadBankConfigNearOverloadThreshold OID.\n       \n       Maximum value must be less than or equal to the value \n       returned by the ePDULoadDevMaxBankLoad OID.')
ePDULoadBankConfigAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDULoadBankConfigAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ePDULoadBankConfigAlarm.setDescription(' Getting this OID will return the current Bank Alarm.')
ePDUOutletDevCommand = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noCommandAll", 1), ("immediateAllOn", 2), ("immediateAllOff", 3), ("immediateAllReboot", 4), ("delayedAllOn", 5), ("delayedAllOff", 6), ("delayedAllReboot", 7), ("cancelAllPendingCommands", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletDevCommand.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletDevCommand.setDescription("Setting this OID to immediateAllOn (2) will turn all outlets\n       on immediately.\n       \n       Setting this OID to immediateAllOff (3) will turn all outlets\n       off immediately.\n       \n       Setting this OID to immediateAllReboot (4) will reboot all outlets\n       immediately.\n\n       Setting this OID to delayedAllOn (5) will turn all outlets on as \n       defined by each outlet's ePDUOutletConfigPowerOnTime OID value. \n             \n       Setting this OID to delayedAllOff (6) will turn all outlets \n       off as defined by each outlet's ePDUOutletConfigPowerOffTime OID value.\n      \n       Setting this OID to delayedAllReboot (7) will cause a \n       delayedAllOff command to be performed. Once all outlets are off, \n       the Switched Rack PDU will then delay the largest \n       ePDUOutletConfigRebootDuration OID time, and then perform a \n       delayedAllOn command.    \n       \n       Setting this OID to cancelAllPendingCommands (8) will cause all pending\n       commands on the Switched Rack PDU to be canceled.\n\n       Getting this OID will return the noCommandAll (1) value.")
ePDUOutletDevColdstartDelay = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletDevColdstartDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletDevColdstartDelay.setDescription('The amount of delay, in seconds, between when\n       power is provided to the Switched Rack PDU and \n       when the Switched Rack PDU provides basic master \n       power to the outlets.       \n       \n       Allowed values are:\n\n       -1       - never apply power automatically.\n       0        - apply power immediately.\n       1 to 300 - delay up to 300 seconds (5 minutes).')
ePDUOutletDevNumCntrlOutlets = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletDevNumCntrlOutlets.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletDevNumCntrlOutlets.setDescription('The number of controlled outlets on this Switched Rack PDU.')
ePDUOutletDevNumTotalOutlets = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletDevNumTotalOutlets.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletDevNumTotalOutlets.setDescription('The total number of outlets on this Rack PDU.')
ePDUOutletDevMonitoredOutlets = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletDevMonitoredOutlets.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletDevMonitoredOutlets.setDescription('The total number of monitored outlets on this Rack PDU.')
ePDUOutletDevColdstartState = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allOn", 1), ("previous", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletDevColdstartState.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletDevColdstartState.setDescription('The ePDU outlet state after coldstart. \n      Allowed values are:\n      1 - all outlets on after coldstart.\n      2 - outlet status same as previous state.')
ePDUOutletPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 2, 1), )
if mibBuilder.loadTexts: ePDUOutletPhaseTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletPhaseTable.setDescription('Allows for management of outlets on a per phase basis.')
ePDUOutletPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 2, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDUOutletPhaseIndex"))
if mibBuilder.loadTexts: ePDUOutletPhaseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletPhaseEntry.setDescription('The phase to manage.')
ePDUOutletPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletPhaseIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletPhaseIndex.setDescription('The index to the Switched Rack PDU phase entry.')
ePDUOutletPhaseOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletPhaseOverloadRestriction.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletPhaseOverloadRestriction.setDescription('This OID controls the behavior of a Switched Rack PDU\n       phase when an overload condition is possible and \n       additional outlets are requested to be turned on. \n\n       Setting this OID to alwaysAllowTurnON (1) will always allow \n       the outlets on the corresponding phase to turn on.\n       \n       Setting this OID to restrictOnNearOverload (2) will not allow\n       outlets on the corresponding phase to turn on if the \n       ePDULoadConfigNearOverloadThreshold OID is exceeded.\n              \n       Setting this OID to restrictOnOverload (3) will not allow\n       outlets on the corresponding phase to turn on if the \n       ePDULoadConfigOverloadThreshold OID is exceeded.')
ePDUOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3, 1), )
if mibBuilder.loadTexts: ePDUOutletControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletControlTable.setDescription('Allows for control of the individual outlets.\n       The number of entries is contained in the \n       ePDUOutletDevNumCntrlOutlets OID.')
ePDUOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDUOutletControlIndex"))
if mibBuilder.loadTexts: ePDUOutletControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletControlEntry.setDescription('The outlet to control.')
ePDUOutletControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletControlIndex.setDescription('The index to the outlet entry.')
ePDUOutletControlOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletControlOutletName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletControlOutletName.setDescription('The name of the outlet. The maximum string size is device dependent.\n       An error will be returned if the set request exceeds the max size.\n       This OID is provided for informational purposes only.')
ePDUOutletControlOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletControlOutletPhase.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletControlOutletPhase.setDescription('The phase/s associated with this outlet.\n      \n       For single phase devices, this object will always \n       return phase1(1).\n       \n       For 3-phase devices, this object will return phase1 (1), \n       phase2 (2), or phase3 (3) for outlets tied to a single \n       phase.  For outlets tied to two phases, this object will\n       return phase1-2 (4) for phases 1 and 2, phase2-3 (5) for \n       phases 2 and 3, and phase3-1 (6) for phases 3 and 1.')
ePDUOutletControlOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("immediateReboot", 3), ("delayedOn", 4), ("delayedOff", 5), ("delayedReboot", 6), ("cancelPendingCommand", 7), ("outletIdentify", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletControlOutletCommand.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletControlOutletCommand.setDescription('Getting this variable will return the outlet state. If \n        the outlet is on, the immediateOn (1) value will be returned.\n        If the outlet is off, the immediateOff (2) value will be\n        returned. \n\n       \n        Setting this variable to immediateOn (1) will immediately turn \n        the outlet on.\n       \n        Setting this variable to immediateOff (2) will immediately turn \n        the outlet off. \n\n        Setting this variable to immediateReboot (3) will immediately \n        reboot the outlet.\n      \n        Setting this variable to delayedOn (4) will turn the outlet on\n        after the ePDUOutletConfigPowerOnTime OID time has elapsed.   \n\n        Setting this variable to delayedOff (5) will turn the outlet off\n        after the ePDUOutletConfigPowerOffTime OID time has elapsed.\n\n        Setting this variable to delayedReboot  (6) will cause the \n        Switched Rack PDU to perform a delayedOff command, wait the \n        ePDUOutletConfigRebootDuration OID time, and then perform a \n        delayedOn command. \n       \n        Setting this variable to cancelPendingCommand (7) will cause any\n        pending command to this outlet to be canceled.\n\n        Setting this variable to outletIdentify (8) will cause PDU LED\n        to display the number of the outlet.')
ePDUOutletControlOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletControlOutletBank.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletControlOutletBank.setDescription('The bank associated with this outlet.')
ePDUOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1), )
if mibBuilder.loadTexts: ePDUOutletConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigTable.setDescription('Allows for configuration of individual outlets. The number of\n       entries is contained in the ePDUOutletDevNumCntrlOutlets OID.')
ePDUOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDUOutletConfigIndex"))
if mibBuilder.loadTexts: ePDUOutletConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigEntry.setDescription('The outlet to configure.')
ePDUOutletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigIndex.setDescription('The index to the outlet entry.')
ePDUOutletConfigOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigOutletName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigOutletName.setDescription('The name of the outlet. The maximum string size is device dependent.\n       An error will be returned if the set request exceeds the max size.')
ePDUOutletConfigOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletConfigOutletPhase.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigOutletPhase.setDescription('The phase/s associated with this outlet.\n      \n       For single phase devices, this object will always \n       return phase1(1).\n       \n       For 3-phase devices, this object will return phase1 (1), \n       phase2 (2), or phase3 (3) for outlets tied to a single \n       phase.  For outlets tied to two phases, this object will\n       return phase1-2 (4) for phases 1 and 2, phase2-3 (5) for \n       phases 2 and 3, and phase3-1 (6) for phases 3 and 1.')
ePDUOutletConfigPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigPowerOnTime.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigPowerOnTime.setDescription('The amount of time (in seconds) the outlet will delay \n       powering on at coldstart or when a command that requires \n       a turn-on delay is issued.\n              \n       Allowed values are:\n\n       -1        - never power on.\n       0         - power on immediately.\n       1 to 7200 - power on up to 7200 seconds after being\n                  commanded.')
ePDUOutletConfigPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigPowerOffTime.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigPowerOffTime.setDescription('The amount of time (in seconds) the outlet will delay \n       powering off when a command that requires \n       a turn-off delay is issued.\n\n       Allowed values are:\n\n       -1        - never power off.\n       0         - power off immediately.\n       1 to 7200 - power off up to 7200 seconds after being\n                  commanded.')
ePDUOutletConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigRebootDuration.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigRebootDuration.setDescription('During a reboot sequence, power is turned off and then \n       back on. This OID defines the amount of time to wait, \n       in seconds, after turning the power off, at the start\n       of the sequence, before turning power back on, at the\n       end of the reboot sequence.       \n       \n       Allowed range is any value between 5 and 60 seconds (1 minute).')
ePDUOutletConfigOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletConfigOutletBank.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigOutletBank.setDescription('The bank associated with this outlet.')
ePDUOutletConfigMonitoredTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredTableSize.setDescription('The size of the Outlet Config Monitored Table')
ePDUOutletConfigMonitoredTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3), )
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredTable.setDescription('Allows for getting/setting of outlet thresholds of an Outlet Monitored Rack PDU.')
ePDUOutletConfigMonitoredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1), ).setIndexNames((0, "CPS-MIB", "ePDUOutletConfigMonitoredIndex"))
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredEntry.setDescription('This gives access to Monitored Outlet entries')
ePDUOutletConfigMonitoredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredIndex.setDescription('The index to the RACK PDU Phase entry.')
ePDUOutletConfigMonitoredName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredName.setDescription('The name of the Monitored Outlet. The maximum string size is device dependent.\n       An error will be returned if the set request exceeds the max size.')
ePDUOutletConfigMonitoredNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredNumber.setDescription('The outlet number of an Outlet Monitored RACK PDU.')
ePDUOutletConfigMonitoredLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredLowLoadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredLowLoadThreshold.setDescription('A threshold that indicates the power consumption of\n       the load is nearing a low consumption condition. It is \n       represented in watts.  A warning will be issued when \n       the load is less than the threshold value. \n       \n       A threshold value of 0 effectively disables this \n       warning.  \n       \n       Maximum value must be less than the value returned \n       by the ePDUOutletConfigMonitoredNearOverloadThreshold OID.\n       \n       0 will be returned if the unit is not Outlet Monitored Rack PDU.')
ePDUOutletConfigMonitoredNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredNearOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredNearOverloadThreshold.setDescription('A threshold that indicates the power consumption of\n       the load is nearing an overload condition. It is \n       represented in watts.  A warning \n       will be issued when the load is greater than or equal \n       to the threshold value.\n       \n       Minimum value must be greater than the value returned by\n       the ePDUOutletConfigMonitoredLowLoadThreshold OID.\n       \n       Maximum value must be less than or equal to the value \n       returned by the ePDUOutletConfigMonitoredOverloadThreshold OID.\n\n       0 will be returned if the unit is not Outlet Monitored Rack PDU.')
ePDUOutletConfigMonitoredOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredOverloadThreshold.setDescription('A threshold that indicates the power consumption of\n       the load has entered an overload condition. It is \n       represented in watts.  A warning \n       will be issued when the load is greater than or equal \n       to the threshold value.\n       \n       Minimum value must be greater than or equal to the value \n       returned by the ePDUOutletConfigMonitoredNearOverloadThreshold OID.\n       \n       Maximum value must be less than or equal to the value \n       returned by the ePDULoadDevMaxOutletLoad OID.\n\n       0 will be returned if the unit is not Outlet Monitored Rack PDU.')
ePDUOutletConfigMonitoredPeakLoadReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2), ("notSupport", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredPeakLoadReset.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredPeakLoadReset.setDescription('Setting this OID to reset (2) will cause the existing peak power value\n       to be replaced by the current load power value. \n       \n       Getting this oid will do nothing and return noAction (1) if the PDU \n       support this feature, return notSupport (3) if the PDU do not support \n       this feature. ')
ePDUOutletConfigMonitoredEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2), ("notSupport", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredEnergyReset.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletConfigMonitoredEnergyReset.setDescription('Setting this OID to reset (2) will cause the device energy meter value\n       to be reset to zero. \n       \n       Getting this oid will do nothing and return noAction (1) if the PDU \n       support this feature, return notSupport (3) if the PDU do not support \n       this feature. ')
ePDUOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1), )
if mibBuilder.loadTexts: ePDUOutletStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusTable.setDescription('Allows for getting of status of individual outlets. The number of\n       entries is contained in the ePDUOutletDevNumCntrlOutlets OID.')
ePDUOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDUOutletStatusIndex"))
if mibBuilder.loadTexts: ePDUOutletStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusEntry.setDescription('The outlet to gather status from.')
ePDUOutletStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusIndex.setDescription('The index to the outlet entry.')
ePDUOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusOutletName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusOutletName.setDescription('The name of the outlet. The maximum string size is device dependent.\n       This OID is provided for informational purposes only.')
ePDUOutletStatusOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusOutletPhase.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusOutletPhase.setDescription('The phase/s associated with this outlet.\n      \n       For single phase devices, this object will always \n       return phase1(1).\n       \n       For 3-phase devices, this object will return phase1 (1), \n       phase2 (2), or phase3 (3) for outlets tied to a single \n       phase.  For outlets tied to two phases, this object will\n       return phase1-2 (4) for phases 1 and 2, phase2-3 (5) for \n       phases 2 and 3, and phase3-1 (6) for phases 3 and 1.')
ePDUOutletStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusOn", 1), ("outletStatusOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusOutletState.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusOutletState.setDescription('Getting this variable will return the outlet state. If \n       the outlet is on, the outletStatusOn (1) value will be returned.\n       If the outlet is off, the outletStatusOff (2) value will be\n       returned.')
ePDUOutletStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusCommandPending", 1), ("outletStatusNoCommandPending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusCommandPending.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusCommandPending.setDescription('Getting this variable will return the command pending\n        state of the outlet. If a command is pending on the \n        outlet, the outletStatusCommandPending (1) value\n        will be returned. If there is not a command pending\n        on the outlet, the outletStatusNoCommandPending (2)\n        will be returned.')
ePDUOutletStatusOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusOutletBank.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusOutletBank.setDescription('The bank associated with this outlet.')
ePDUOutletStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusLoad.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusLoad.setDescription('Getting this OID will return the measured Outlet load for an Outlet Monitored Rack PDU\n       in tenths of Amps.')
ePDUOutletStatusActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusActivePower.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusActivePower.setDescription('Getting this OID will return the measured Outlet load for an Outlet Monitored Rack PDU\n       in watts')
ePDUOutletStatusAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusAlarm.setDescription('Getting this OID will return the current outlet alarm')
ePDUOutletStatusPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusPeakPower.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusPeakPower.setDescription('The peak power consumption of the Rack PDU load in watts. \n       This value can be reset by setting the oid \n       ePDUOutletConfigMonitoredPeakLoadReset to reset (2)')
ePDUOutletStatusPeakPowerTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusPeakPowerTime.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusPeakPowerTime.setDescription('Get this oid shows the date and time that peak power consumption occurred')
ePDUOutletStatusPeakPowerStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusPeakPowerStart.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusPeakPowerStart.setDescription('Get this oid shows the date and time that peak power consumption started')
ePDUOutletStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusEnergy.setDescription('Energy meter measuring Rack PDU load energy consumption \n      in tenths of kilowatt-hours. This value can be reset by setting \n      the oid ePDUOutletConfigMonitoredEnergyReset to reset (2)')
ePDUOutletStatusEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 5, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletStatusEnergyStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletStatusEnergyStartTime.setDescription('Indicates the date and time of the last device energy\n       meter reset')
ePDUOutletBankTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 6, 1), )
if mibBuilder.loadTexts: ePDUOutletBankTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletBankTable.setDescription('Allows for management of outlets on a per bank basis.')
ePDUOutletBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 6, 1, 1), ).setIndexNames((0, "CPS-MIB", "ePDUOutletBankIndex"))
if mibBuilder.loadTexts: ePDUOutletBankEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletBankEntry.setDescription('The bank to manage.')
ePDUOutletBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUOutletBankIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletBankIndex.setDescription('The index to the Switched Rack PDU bank entry.')
ePDUOutletBankOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDUOutletBankOverloadRestriction.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUOutletBankOverloadRestriction.setDescription('This OID controls the behavior of a Switched Rack PDU \n       bank when an overload condition is possible and \n       additional outlets are requested to be turned on. \n\n       Setting this OID to alwaysAllowTurnON (1) will always allow \n       the outlets on the corresponding bank to turn on.\n       \n       Setting this OID to restrictOnNearOverload (2) will not allow \n       outlets on the corresponding bank to turn on if the\n       ePDULoadBankConfigNearOverloadThreshold OID is exceeded.\n              \n       Setting this OID to restrictOnOverload (3) will not allow\n       outlets on the corresponding bank to turn on if the \n       ePDULoadBankConfigOverloadThreshold OID is exceeded.')
ePDUPowerSupply1Status = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerSupplyOneOk", 1), ("powerSupplyOneFailed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPowerSupply1Status.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUPowerSupply1Status.setDescription('Getting this OID will return powerSupply1Ok(1) if power\n       supply 1 is functioning normally.  If not functioning normally,\n       this OID will return powerSupply1Failed(2).')
ePDUPowerSupply2Status = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("powerSupplyTwoOk", 1), ("powerSupplyTwoFailed", 2), ("powerSupplyTwoNotPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPowerSupply2Status.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUPowerSupply2Status.setDescription('Getting this OID will return powerSupply2Ok(1) if power\n       supply 2 is functioning normally.  If not functioning normally,\n       this OID will return powerSupply2Failed(2).\n\n       Metered Rack PDUs do not have a redundant powersupply.')
ePDUPowerSupplyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allAvailablePowerSuppliesOK", 1), ("powerSupplyOneFailed", 2), ("powerSupplyTwoFailed", 3), ("powerSupplyOneandTwoFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUPowerSupplyAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUPowerSupplyAlarm.setDescription('Getting this OID will return powerSupply Alarm')
ePDUStatusBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusBankTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusBankTableSize.setDescription('The size of the Status Bank Table')
ePDUStatusBankTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 2), )
if mibBuilder.loadTexts: ePDUStatusBankTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusBankTable.setDescription('Allows for getting of status of each Rack PDU Bank')
ePDUStatusBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 2, 1), ).setIndexNames((0, "CPS-MIB", "ePDUStatusBankIndex"))
if mibBuilder.loadTexts: ePDUStatusBankEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusBankEntry.setDescription('This gives access to Bank entries')
ePDUStatusBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusBankIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusBankIndex.setDescription('The index to the RACK PDU Bank entry.')
ePDUStatusBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusBankNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusBankNumber.setDescription('Getting this OID will return the bank number.')
ePDUStatusBankState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bankLoadNormal", 1), ("bankLoadLow", 2), ("bankLoadNearOverload", 3), ("bankLoadOverload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusBankState.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusBankState.setDescription('Getting this OID will return the bank load state.\n    \n    bankLoadNormal(1) indicates that the bank is \n    operating properly within the ePDULoadBankConfigLowLoadThreshold \n    and ePDULoadBankConfigNearOverloadThreshold OID values.\n    \n    bankLoadLow(2) indicates that the bank load has\n    dropped below the ePDULoadBankConfigLowLoadThreshold OID value.\n    An SNMP trap will occur when this state is entered or cleared.\n    \n    bankLoadNearOverload(3) indicates that the bank load\n    is greater than or equal to the \n    ePDULoadBankConfigNearOverloadThreshold OID value.\n    An SNMP trap will occur when this state is entered or cleared.\n    \n    bankLoadOverload(4) indicates that the bank load is\n    greater than or equal to the ePDULoadBankConfigOverloadThreshold \n    OID value.\n    An SNMP trap will occur when this state is entered or cleared.')
ePDUStatusPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusPhaseTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusPhaseTableSize.setDescription('The size of the Status Phase Table')
ePDUStatusPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 4), )
if mibBuilder.loadTexts: ePDUStatusPhaseTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusPhaseTable.setDescription('Allows for getting of status of each Rack PDU Phase')
ePDUStatusPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 4, 1), ).setIndexNames((0, "CPS-MIB", "ePDUStatusPhaseIndex"))
if mibBuilder.loadTexts: ePDUStatusPhaseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusPhaseEntry.setDescription('This gives access to Phase entries')
ePDUStatusPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusPhaseIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusPhaseIndex.setDescription('The index to the RACK PDU Phase entry.')
ePDUStatusPhaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusPhaseNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusPhaseNumber.setDescription('Getting this OID will return the phase number.')
ePDUStatusPhaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("phaseLoadNormal", 1), ("phaseLoadLow", 2), ("phaseLoadNearOverload", 3), ("phaseLoadOverload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusPhaseState.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusPhaseState.setDescription('Getting this OID will return the Phase load state.\n    \n    phaseLoadNormal(1) indicates that the Phase is \n    operating properly within the ePDULoadPhaseConfigLowLoadThreshold \n    and ePDULoadPhaseConfigNearOverloadThreshold OID values.\n    \n    phaseLoadLow(2) indicates that the Phase load has\n    dropped below the ePDULoadPhaseConfigLowLoadThreshold OID value.\n    An SNMP trap will occur when this state is entered or cleared.\n    \n    phaseLoadNearOverload(3) indicates that the Phase load\n    is greater than or equal to the \n    ePDULoadPhaseConfigNearOverloadThreshold OID value.\n    An SNMP trap will occur when this state is entered or cleared.\n    \n    phaseLoadOverload(4) indicates that the Phase load is\n    greater than or equal to the ePDULoadPhaseConfigOverloadThreshold \n    OID value.\n    An SNMP trap will occur when this state is entered or cleared.')
ePDUStatusOutletTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusOutletTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusOutletTableSize.setDescription('The size of the Status Outlet Table')
ePDUStatusOutletTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 6), )
if mibBuilder.loadTexts: ePDUStatusOutletTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusOutletTable.setDescription('Allows for getting of status of each Outlet of an Outlet Monitored Rack PDU.')
ePDUStatusOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 6, 1), ).setIndexNames((0, "CPS-MIB", "ePDUStatusOutletIndex"))
if mibBuilder.loadTexts: ePDUStatusOutletEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusOutletEntry.setDescription('This gives access to Outlet entries')
ePDUStatusOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusOutletIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusOutletIndex.setDescription('The index to the RACK PDU Outlet entry.')
ePDUStatusOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusOutletNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusOutletNumber.setDescription('Getting this OID will return the Outlet number.')
ePDUStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("outletLoadNormal", 1), ("outletLoadLow", 2), ("outletLoadNearOverload", 3), ("outletLoadOverload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusOutletState.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusOutletState.setDescription('Getting this OID will return the Outlet load state.\n    \n    outletLoadNormal(1) indicates that the Outlet is \n    operating properly within the ePDUOutletConfigMonitoredLowLoadThreshold \n    and ePDUOutletConfigMonitoredNearOverloadThreshold OID values.\n    \n    outletLoadLow(2) indicates that the Outlet load has\n    dropped below the ePDUOutletConfigMonitoredLowLoadThreshold OID value.\n    An SNMP trap will occur when this state is entered or cleared.\n    \n    outletLoadNearOverload(3) indicates that the Outlet load\n    is greater than or equal to the \n    ePDUOutletConfigMonitoredNearOverloadThreshold OID value.\n    An SNMP trap will occur when this state is entered or cleared.\n    \n    outletLoadOverload(4) indicates that the Outlet load is\n    greater than or equal to the ePDUOutletConfigMonitoredOverloadThreshold \n    OID value.\n    An SNMP trap will occur when this state is entered or cleared.')
ePDUStatusInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusInputVoltage.setDescription('The input voltage in 0.1 Volt.')
ePDUStatusInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDUStatusInputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: ePDUStatusInputFrequency.setDescription('The input frequency in 0.1 Hertz.')
envirIdentName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirIdentName.setStatus('mandatory')
if mibBuilder.loadTexts: envirIdentName.setDescription('The name of the environment sensor.\n       The maximum string size is device dependent.')
envirIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirIdentLocation.setStatus('mandatory')
if mibBuilder.loadTexts: envirIdentLocation.setDescription('The location of the environment sensor.\n       The maximum string size is device dependent.')
envirTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envirTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: envirTemperature.setDescription('The environment temperature expressed in 1/10 Fahrenheit')
envirTempHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempHighThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: envirTempHighThreshold.setDescription('The high temperature threshold of the environment sensor.\n       The value expressed in Fahrenheit.')
envirTempLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempLowThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: envirTempLowThreshold.setDescription('The low temperature threshold of the environment sensor.\n       The value expressed in Fahrenheit.')
envirTempRateOfChange = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempRateOfChange.setStatus('mandatory')
if mibBuilder.loadTexts: envirTempRateOfChange.setDescription('The rate of change of the temperature.\n       The value expressed in Fahrenheit per 5 minute.')
envirTempHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: envirTempHysteresis.setDescription('The number of degrees beyond the temperature thresholds\n       at which an active temperature alarm will be cleared.\n       This configuration setting applies to all temperature\n       thresholds.\n       Units are displayed in Fahrenheit.')
envirTemperatureCelsius = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envirTemperatureCelsius.setStatus('mandatory')
if mibBuilder.loadTexts: envirTemperatureCelsius.setDescription('The environment temperature expressed in 1/10 Celsius')
envirTempCelsiusHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempCelsiusHighThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: envirTempCelsiusHighThreshold.setDescription('The high temperature threshold of the environment sensor.\n       The value expressed in Celsius.')
envirTempCelsiusLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempCelsiusLowThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: envirTempCelsiusLowThreshold.setDescription('The low temperature threshold of the environment sensor.\n       The value expressed in Celsius.')
envirTempCelsiusRateOfChange = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempCelsiusRateOfChange.setStatus('mandatory')
if mibBuilder.loadTexts: envirTempCelsiusRateOfChange.setDescription('The rate of change of the temperature.\n       The value expressed in Celsius per 5 minute.')
envirTempCelsiusHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirTempCelsiusHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: envirTempCelsiusHysteresis.setDescription('The number of degrees beyond the temperature thresholds\n       at which an active temperature alarm will be cleared.\n       This configuration setting applies to all temperature\n       thresholds.\n       Units are displayed in Celsius.')
envirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envirHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: envirHumidity.setDescription('The environment relative humidity expressed in persentage.')
envirHumidHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirHumidHighThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: envirHumidHighThreshold.setDescription('The high relative humidity threshold of the environment sensor.\n       The value expressed in persentage.')
envirHumidLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirHumidLowThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: envirHumidLowThreshold.setDescription('The low relative humidity threshold of the environment sensor.\n       The value expressed in persentage.')
envirHumidRateOfChange = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirHumidRateOfChange.setStatus('mandatory')
if mibBuilder.loadTexts: envirHumidRateOfChange.setDescription('The rate of change of the relative humidity.\n       The value expressed in persentage per 5 minute.')
envirHumidHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirHumidHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: envirHumidHysteresis.setDescription('The number of degrees beyond the relative humidity thresholds\n       at which an active relative humidity alarm will be cleared.\n       This configuration setting applies to all relative humidity\n       thresholds.\n       Units are displayed in persentage.')
envirContactTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envirContactTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: envirContactTableSize.setDescription('The number of the contact in the environment sensor.')
envirContactTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4, 2), )
if mibBuilder.loadTexts: envirContactTable.setStatus('mandatory')
if mibBuilder.loadTexts: envirContactTable.setDescription('Allows for getting of information of each contact of the environment sensor.')
envirContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4, 2, 1), ).setIndexNames((0, "CPS-MIB", "envirContactIndex"))
if mibBuilder.loadTexts: envirContactEntry.setStatus('mandatory')
if mibBuilder.loadTexts: envirContactEntry.setDescription('This gives access to contact entries')
envirContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envirContactIndex.setStatus('mandatory')
if mibBuilder.loadTexts: envirContactIndex.setDescription('The index to the contact of the environment sensor.')
envirContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirContactName.setStatus('mandatory')
if mibBuilder.loadTexts: envirContactName.setDescription('Getting or setting the name of the contact of the environment sensor.')
envirContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("contactNormal", 1), ("contactAbnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envirContactStatus.setStatus('mandatory')
if mibBuilder.loadTexts: envirContactStatus.setDescription('Getting this OID will return the Contact Status.')
envirContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 4, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalOpen", 1), ("normalClose", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envirContactNormalState.setStatus('mandatory')
if mibBuilder.loadTexts: envirContactNormalState.setDescription('Set the contact normal state.')
atsIdentName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsIdentName.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentName.setDescription('The name of the ATS. \n\t\t\tThe maximum string size is device dependent.')
atsIdentModelName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentModelName.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentModelName.setDescription('A string identifying the model name of the Automatic Transfer Switch. \n\t\t\tThis value is set at the factory.')
atsIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentHardwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentHardwareRev.setDescription('The hardware revision of the Automatic Transfer Switch. \n\t\t\tThis value is set at the factory.')
atsIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentFirmwareRev.setDescription('A string identifying the Automatic Transfer Switch \n\t\t\tfirmware revision.')
atsIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentSerialNumber.setDescription('A string identifying the serial number of \n\t\t\tthe Automatic Transfer Switch. This value is set at the factory.')
atsIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentDateOfManufacture.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentDateOfManufacture.setDescription('The date when the Automatic Transfer Switch was manufactured in mm/dd/yyyy format.\n\t\t\tThis value is set at the factory. ')
atsIdentDeviceRatingVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentDeviceRatingVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentDeviceRatingVoltage.setDescription('A string identifing the Automatic Transfer Switch rating voltage.')
atsIdentDeviceRatingCurrent = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentDeviceRatingCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentDeviceRatingCurrent.setDescription('This gives the device rating current in Amps')
atsIdentDeviceOutletNum = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentDeviceOutletNum.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentDeviceOutletNum.setDescription('This gives the outlet number of the device')
atsIdentAgentModelName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentAgentModelName.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentAgentModelName.setDescription('A string identifying the model name of the Agent.')
atsIdentAgentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentAgentHardwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentAgentHardwareRevision.setDescription('The hardware revision of the Agent.')
atsIdentAgentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentAgentFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentAgentFirmwareRevision.setDescription('A string identifying the Agent firmware revision.')
atsIdentAgentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentAgentSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atsIdentAgentSerialNumber.setDescription('A string identifying the serial number of the Agent.')
atsStatusCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("atsNeverDiscovered", 1), ("atsCommEstablished", 2), ("atsCommLost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusCommStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusCommStatus.setDescription('This variable returns the current communication status\n\t\t\tbetween the Automatic Transfer Switch and the Agent. ')
atsStatusSelectedSource = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusSelectedSource.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusSelectedSource.setDescription('This variable returns the current source of power. ')
atsStatusRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atsRedundancyLost", 1), ("atsFullyRedundant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusRedundancyState.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusRedundancyState.setDescription('This variable returns the current redundancy state of the ATS.\n\t\t\tatsRedundancyLost(1) indicates that the ATS is unable to\n\t\t\tswitch over to the alternate power source if the current source fails.\n\t\t\tatsFullyRedundant(2) indicates that the ATS will switch over to \n\t\t\tthe alternate power source if the current source fails.')
atsStatusPhaseSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inSync", 1), ("outOfSync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPhaseSyncStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusPhaseSyncStatus.setDescription('This variable returns the status of the phase sync.')
atsStatusDevSourceRelayStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sourceRelayNormal", 1), ("sourceRelayFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusDevSourceRelayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusDevSourceRelayStatus.setDescription('This variable returns the status of the source relay.')
atsStatusDevInRelayStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inputRelayNormal", 1), ("inputRelayFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusDevInRelayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusDevInRelayStatus.setDescription('This variable returns the status of the input relay.')
atsStatusDevOutRelayStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outputRelayNormal", 1), ("outputRelayFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusDevOutRelayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusDevOutRelayStatus.setDescription('This variable returns the status of the Output relay.')
atsStatusDevLCDCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lcdCommNormal", 1), ("lcdCommFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusDevLCDCommStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusDevLCDCommStatus.setDescription('This variable returns the communication status of the LCD.')
atsStatusDevDB9CommStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("db9CommNormal", 1), ("db9CommFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusDevDB9CommStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusDevDB9CommStatus.setDescription('This variable returns the communication status of the DB9.')
atsStatusPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 10), )
if mibBuilder.loadTexts: atsStatusPowerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusPowerSupplyTable.setDescription('A list of power supply table entries.')
atsStatusPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 10, 1), ).setIndexNames((0, "CPS-MIB", "atsStatusPowerSupplyTableIndex"))
if mibBuilder.loadTexts: atsStatusPowerSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusPowerSupplyEntry.setDescription('An entry containing power supply information applicable to a\n\t\t\tparticular input.')
atsStatusPowerSupplyTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPowerSupplyTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusPowerSupplyTableIndex.setDescription('The input identifier.')
atsStatusPowerSupplyInputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPowerSupplyInputSource.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusPowerSupplyInputSource.setDescription('The input source to the power supply.')
atsStatusPowerSupply12VStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerSupplyOK", 1), ("powerSupplyFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPowerSupply12VStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusPowerSupply12VStatus.setDescription('This variable returns the status of the power supply A 12V in system.')
atsStatusPowerSupply5VStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerSupplyOK", 1), ("powerSupplyFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPowerSupply5VStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusPowerSupply5VStatus.setDescription('This variable returns the status of the power supply A 5V in system.')
atsStatusPowerSupply3p3VStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerSupplyOK", 1), ("powerSupplyFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPowerSupply3p3VStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusPowerSupply3p3VStatus.setDescription('This variable returns the status of the power supply A 3.3V in system.')
atsStatusInputNum = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputNum.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputNum.setDescription('The number of input feeds to this device.\n\t\t\tThis variable indicates the number of rows in the\n\t\t\tstatus input table.')
atsStatusInputTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2), )
if mibBuilder.loadTexts: atsStatusInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputTable.setDescription('A list of input table entries.  The number of entries\n\t\t\tis given by the value of atsNumInputs.')
atsStatusInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1), ).setIndexNames((0, "CPS-MIB", "atsStatusInputTableIndex"))
if mibBuilder.loadTexts: atsStatusInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputEntry.setDescription('An entry containing information applicable to a\n\t\t\tparticular input.')
atsStatusInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputTableIndex.setDescription('The input identifier.')
atsStatusInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsStatusInputName.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputName.setDescription('A name given to a particular input.')
atsStatusNumInputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusNumInputPhase.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusNumInputPhase.setDescription('The number of input phases utilized in this device.  \n\t\t\tThe sum of all the atsStatusNumInputPhase variable \n\t\t\tindicates the number of rows in the status input \n\t\t\tphase table.')
atsStatusInputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("singlePhase", 2), ("splitPhase", 3), ("threePhasePhaseToNeutral", 4), ("threePhasePhaseToPhase", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputVoltageOrientation.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputVoltageOrientation.setDescription('The input voltage orientation: \n\t\t\t1: unknown for this Source\n\t\t\t2: singlePhase - phase 1 voltage is between Phase 1\n\t\t\tand Neutral.\n\t\t\t3: splitPhase - phase 1 voltage is between Phase 1 and \n\t\t\tNeutral; phase 2 voltage is between Phase 2 and Neutral; \n\t\t\tphase 3 voltage is between Phase 1 and Phase 2.\n\t\t\t4: threePhasePhaseToNeutral - phase 1 voltage is between\n\t\t\tPhase 1 and Neutral; phase 2 voltage is between Phase 2 \n\t\t\tand Neutral; phase 3 voltage is between Phase 3 and\n\t\t\tNeutral.\n\t\t\t5: threePhasePhaseToPhase - phase 1 voltage is between \n\t\t\tPhase 1 and Phase 2; phase 2 voltage is between Phase 2\n\t\t\tand Phase 3; phase 3 voltage is between Phase 3 and\n\t\t\tPhase 1.')
atsStatusInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputVoltage.setDescription('The input voltage in 0.1 Volt.')
atsStatusInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputFrequency.setDescription('The input frequency in 0.1 Hertz.')
atsStatusInputVolState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("overVoltage", 2), ("underVoltage", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputVolState.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputVolState.setDescription('The input voltage status.')
atsStatusInputFreqState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("overFrequency", 2), ("underFrequency", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputFreqState.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputFreqState.setDescription('The input frequency status.')
atsStatusInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 3), )
if mibBuilder.loadTexts: atsStatusInputPhaseTable.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputPhaseTable.setDescription('A list of input table entries.  The number of entries\n\t\t\tis given by the sum of the atsNumInputPhases.')
atsStatusInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 3, 1), ).setIndexNames((0, "CPS-MIB", "atsStatusInputPhaseTableIndex"), (0, "CPS-MIB", "atsStatusInputPhaseIndex"))
if mibBuilder.loadTexts: atsStatusInputPhaseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputPhaseEntry.setDescription('An entry containing information applicable to a\n\t\t\tparticular input phase.')
atsStatusInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputPhaseTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputPhaseTableIndex.setDescription('The input identifier.')
atsStatusInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputPhaseIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputPhaseIndex.setDescription('The input phase identifier.')
atsStatusInputPhaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputPhaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputPhaseVoltage.setDescription("The input voltage in VAC, or -1 if it's unsupported\n\t\t\tby this Source.")
atsStatusInputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputPhaseCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputPhaseCurrent.setDescription("The input current in amperes, or -1 if it's\n\t\t\tunsupported by this Source.")
atsStatusInputPhasePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 2, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusInputPhasePower.setStatus('mandatory')
if mibBuilder.loadTexts: atsStatusInputPhasePower.setDescription("The input power in Watts, or -1 if it's unsupported\n\t\t\tby this Source.")
atsConfigPreferredSource = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigPreferredSource.setStatus('mandatory')
if mibBuilder.loadTexts: atsConfigPreferredSource.setDescription('This variable returns the preferred source of power when both sources are OK.')
atsConfigNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigNominalVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: atsConfigNominalVoltage.setDescription('This variable returns the nominal voltage of the input.')
atsConfigVoltageSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigVoltageSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: atsConfigVoltageSensitivity.setDescription('This variable defines the sensitivity to changes in voltage: \n\t\t\thigh(1) for best protection, low(3) for frequent small line \n\t\t\tvoltage changes.')
atsConfigTransferVoltageRange = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wide", 1), ("medium", 2), ("narrow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigTransferVoltageRange.setStatus('mandatory')
if mibBuilder.loadTexts: atsConfigTransferVoltageRange.setDescription('This variable defines the range of acceptable voltage from a power source.\n\t\t\tIf the voltage measured from the selected input source is not within this\n\t\t\trange, the Automatic Transfer Switch will switch over (transfer) to the \n\t\t\talternate power source.')
atsConfigNarrowRangeValue = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigNarrowRangeValue.setStatus('mandatory')
if mibBuilder.loadTexts: atsConfigNarrowRangeValue.setDescription('To configure the Narrow Range value of acceptable voltage \n\t\t\tfrom a power source.')
atsConfigMediumRangeValue = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigMediumRangeValue.setStatus('mandatory')
if mibBuilder.loadTexts: atsConfigMediumRangeValue.setDescription('To configure the Medium Range value of acceptable voltage \n\t\t\tfrom a power source.')
atsConfigWideRangeValue = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigWideRangeValue.setStatus('mandatory')
if mibBuilder.loadTexts: atsConfigWideRangeValue.setDescription('To configure the Wide Range value of acceptable voltage \n\t\t\tfrom a power source.')
atsConfigFrequencyDeviation = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigFrequencyDeviation.setStatus('mandatory')
if mibBuilder.loadTexts: atsConfigFrequencyDeviation.setDescription('To configure the frequency deviation.')
atsConfigDevLCDOffTime = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigDevLCDOffTime.setStatus('mandatory')
if mibBuilder.loadTexts: atsConfigDevLCDOffTime.setDescription('The amount of time (in seconds) which LCD turn off automatically \n\t\t\tafter it remains idle for.')
atsCtrlResetATS = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("rboot", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsCtrlResetATS.setStatus('mandatory')
if mibBuilder.loadTexts: atsCtrlResetATS.setDescription('Setting this variable will cause the Automatic Transfer Switch to \n\t\t\treboot or reset relative setting to default value.')
atsCtrlClearEventCounts = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsCtrlClearEventCounts.setStatus('mandatory')
if mibBuilder.loadTexts: atsCtrlClearEventCounts.setDescription('Setting this variable will clear all event counts in Automatic Transfer Switch.\n\t\t\tReturns (-1) if unsupported.')
atsLoadDevPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadDevPhaseTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadDevPhaseTableSize.setDescription('The size of the Phase Table.')
atsLoadDevPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 2), )
if mibBuilder.loadTexts: atsLoadDevPhaseTable.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadDevPhaseTable.setDescription('Allows for getting the Phase Max Load in the ATS.')
atsLoadDevPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 2, 1), ).setIndexNames((0, "CPS-MIB", "atsLoadDevPhaseTableIndex"))
if mibBuilder.loadTexts: atsLoadDevPhaseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadDevPhaseEntry.setDescription('The ATS Phases Access.')
atsLoadDevPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadDevPhaseTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadDevPhaseTableIndex.setDescription('The index to ATS phase entry.')
atsLoadDevPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadDevPhase.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadDevPhase.setDescription('For single phase devices, this object will always \n\t\t\treturn phase1(1).\n       \n\t\t\tFor 3-phase devices, this object will return phase1 (1), \n\t\t\tphase2 (2), phase3 (3), phase1-2 (4) for phases 1 and 2, \n\t\t\tphase2-3 (5) for phases 2 and 3, and phase3-1 (6) for \n\t\t\tphases 3 and 1.')
atsLoadDevPhaseMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadDevPhaseMaxLoad.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadDevPhaseMaxLoad.setDescription('Getting this OID will return the maximum rated power that each \n\t\t\tphase of the ATS can provide. It is represented in Amps.')
atsLoadDevBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadDevBankTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadDevBankTableSize.setDescription('The size of the Bank Table.')
atsLoadDevBankTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 4), )
if mibBuilder.loadTexts: atsLoadDevBankTable.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadDevBankTable.setDescription('Allows for getting the Bank Max Load in the ATS.')
atsLoadDevBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 4, 1), ).setIndexNames((0, "CPS-MIB", "atsLoadDevBankTableIndex"))
if mibBuilder.loadTexts: atsLoadDevBankEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadDevBankEntry.setDescription('The ATS Banks Access.')
atsLoadDevBankTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("total", 1), ("bank1", 2), ("bank2", 3), ("bank3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadDevBankTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadDevBankTableIndex.setDescription('The index to the ATS bank entry.')
atsLoadDevBankMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadDevBankMaxLoad.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadDevBankMaxLoad.setDescription('Getting this OID will return the maximum rated power\n\t\t\tthat each bank of the ATS can provide. It is \n\t\t\trepresented in Amps.')
atsLoadStatusPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusPhaseTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusPhaseTableSize.setDescription('The size of the Phase Table.')
atsLoadStatusPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 2), )
if mibBuilder.loadTexts: atsLoadStatusPhaseTable.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusPhaseTable.setDescription('Allows for getting the Phase Load status in the ATS.')
atsLoadStatusPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 2, 1), ).setIndexNames((0, "CPS-MIB", "atsLoadStatusPhaseTableIndex"))
if mibBuilder.loadTexts: atsLoadStatusPhaseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusPhaseEntry.setDescription('The ATS Phases Access.')
atsLoadStatusPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusPhaseTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusPhaseTableIndex.setDescription('The index to ATS phase entry.')
atsLoadStatusPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusPhase.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusPhase.setDescription('For single phase devices, this object will always \n\t\t\treturn phase1(1).\n       \n\t\t\tFor 3-phase devices, this object will return phase1 (1), \n\t\t\tphase2 (2), phase3 (3), phase1-2 (4) for phases 1 and 2, \n\t\t\tphase2-3 (5) for phases 2 and 3, and phase3-1 (6) for \n\t\t\tphases 3 and 1.')
atsLoadStatusPhaseLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusPhaseLoad.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusPhaseLoad.setDescription('The output current in 0.1 amperes drawn \n\t\t\tby the load on the ATS')
atsLoadStatusPhaseLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("lowLoad", 2), ("nearOverLoad", 3), ("overLoad", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusPhaseLoadState.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusPhaseLoadState.setDescription('Getting this OID will return the phase load state.')
atsLoadStatusPhasePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusPhasePower.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusPhasePower.setDescription('The output power in Watts.')
atsLoadStatusBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusBankTableSize.setDescription('The size of the Bank Table.')
atsLoadStatusBankTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4), )
if mibBuilder.loadTexts: atsLoadStatusBankTable.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusBankTable.setDescription('Allows for getting the Bank Load status in the ATS.')
atsLoadStatusBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1), ).setIndexNames((0, "CPS-MIB", "atsLoadStatusBankTableIndex"))
if mibBuilder.loadTexts: atsLoadStatusBankEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusBankEntry.setDescription('The ATS Bank Access.')
atsLoadStatusBankTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("total", 1), ("bank1", 2), ("bank2", 3), ("bank3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusBankTableIndex.setDescription('The index to ATS bank entry.')
atsLoadStatusBankPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankPhase.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusBankPhase.setDescription('Getting this OID will return the phase number.')
atsLoadStatusBankLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankLoad.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusBankLoad.setDescription('The output current in 0.1 amperes drawn \n\t\t\tby the load on the ATS')
atsLoadStatusBankLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("lowLoad", 2), ("nearOverLoad", 3), ("overLoad", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankLoadState.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusBankLoadState.setDescription('Getting this OID will return the bank load state.')
atsLoadStatusBankPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankPower.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusBankPower.setDescription('The output power in Watts.')
atsLoadStatusBankEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusBankEnergy.setDescription('Getting this OID will return the phase/bank apparent power measured in 0.1 kilowatt-hours.')
atsLoadStatusBankStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadStatusBankStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadStatusBankStartTime.setDescription('Getting this OID will return the date and time of the last energy meter reset')
atsLoadCfgPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadCfgPhaseTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgPhaseTableSize.setDescription('The size of the Phase Table.')
atsLoadCfgPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2), )
if mibBuilder.loadTexts: atsLoadCfgPhaseTable.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgPhaseTable.setDescription('Allows for configuration of each ATS phase.')
atsLoadCfgPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2, 1), ).setIndexNames((0, "CPS-MIB", "atsLoadCfgPhaseTableIndex"))
if mibBuilder.loadTexts: atsLoadCfgPhaseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgPhaseEntry.setDescription('The ATS phase to configure.')
atsLoadCfgPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadCfgPhaseTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgPhaseTableIndex.setDescription('The index to the ATS phase entry.')
atsLoadCfgPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadCfgPhase.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgPhase.setDescription('For single phase devices, this object will always \n\t\t\treturn phase1(1).\n       \n\t\t\tFor 3-phase devices, this object will return phase1 (1), \n\t\t\tphase2 (2), phase3 (3), phase1-2 (4) for phases 1 and 2, \n\t\t\tphase2-3 (5) for phases 2 and 3, and phase3-1 (6) for \n\t\t\tphases 3 and 1.')
atsLoadCfgPhaseLowLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgPhaseLowLoad.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgPhaseLowLoad.setDescription('A threshold that indicates the power consumption of\n\t\t\tthe load is nearing a low consumption condition. It is \n\t\t\trepresented in Amps.  A warning will be issued when the\n\t\t\tload is less than the threshold value.  \n       \n\t\t\tA threshold value of 0 Amps effectively disables this \n\t\t\twarning.')
atsLoadCfgPhaseNearOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgPhaseNearOverLoad.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgPhaseNearOverLoad.setDescription('A threshold that indicates the power consumption of\n\t\t\tthe load is nearing an overload condition. It is \n\t\t\trepresented in Amps.  A warning will be issued when the \n\t\t\tload is greater than or equal to the threshold value.')
atsLoadCfgPhaseOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgPhaseOverLoad.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgPhaseOverLoad.setDescription('A threshold that indicates the power consumption of\n\t\t\tthe load has entered an overload condition. It is \n\t\t\trepresented in Amps.  A warning will be issued when the \n\t\t\tload is greater than or equal to the threshold value.')
atsLoadCfgPhaseOutletRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgPhaseOutletRestriction.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgPhaseOutletRestriction.setDescription('This OID controls the behavior of a ATS phase when an overload \n\t\t\tcondition is possible and additional outlets are requested to be \n\t\t\tturned on. \n\n\t\t\tSetting this OID to alwaysAllowTurnON (1) will always allow \n\t\t\tthe outlets on the corresponding phase to turn on.\n       \n\t\t\tSetting this OID to restrictOnNearOverload (2) will not allow\n\t\t\toutlets on the corresponding phase to turn on if the \n\t\t\tePDULoadConfigNearOverloadThreshold OID is exceeded.\n              \n\t\t\tSetting this OID to restrictOnOverload (3) will not allow\n\t\t\toutlets on the corresponding phase to turn on if the \n\t\t\tePDULoadConfigOverloadThreshold OID is exceeded.')
atsLoadCfgBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadCfgBankTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgBankTableSize.setDescription('The size of the Bank Table.')
atsLoadCfgBankTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 4), )
if mibBuilder.loadTexts: atsLoadCfgBankTable.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgBankTable.setDescription('Allows for configuration of each ATS bank.')
atsLoadCfgBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 4, 1), ).setIndexNames((0, "CPS-MIB", "atsLoadCfgBankTableIndex"))
if mibBuilder.loadTexts: atsLoadCfgBankEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgBankEntry.setDescription('The ATS phase to configure.')
atsLoadCfgBankTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("total", 1), ("bank1", 2), ("bank2", 3), ("bank3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLoadCfgBankTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgBankTableIndex.setDescription('The index to the ATS bank entry.')
atsLoadCfgBankLowLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgBankLowLoad.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgBankLowLoad.setDescription('A threshold that indicates the power consumption of\n\t\t\tthe load is nearing a low consumption condition. It is \n\t\t\trepresented in Amps.  A warning will be issued when the\n\t\t\tload is less than the threshold value.  \n       \n\t\t\tA threshold value of 0 Amps effectively disables this \n\t\t\twarning.')
atsLoadCfgBankNearOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgBankNearOverLoad.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgBankNearOverLoad.setDescription('A threshold that indicates the power consumption of\n\t\t\tthe load is nearing an overload condition. It is \n\t\t\trepresented in Amps.  A warning will be issued when the \n\t\t\tload is greater than or equal to the threshold value.')
atsLoadCfgBankOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgBankOverLoad.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgBankOverLoad.setDescription('A threshold that indicates the power consumption of\n\t\t\tthe load has entered an overload condition. It is \n\t\t\trepresented in Amps.  A warning will be issued when the \n\t\t\tload is greater than or equal to the threshold value.')
atsLoadCfgBankOutletRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 5, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsLoadCfgBankOutletRestriction.setStatus('mandatory')
if mibBuilder.loadTexts: atsLoadCfgBankOutletRestriction.setDescription('This OID controls the behavior of a ATS phase when an overload \n\t\t\tcondition is possible and additional outlets are requested to be \n\t\t\tturned on. \n\n\t\t\tSetting this OID to alwaysAllowTurnON (1) will always allow \n\t\t\tthe outlets on the corresponding phase to turn on.\n       \n\t\t\tSetting this OID to restrictOnNearOverload (2) will not allow\n\t\t\toutlets on the corresponding phase to turn on if the \n\t\t\tePDULoadConfigNearOverloadThreshold OID is exceeded.\n              \n\t\t\tSetting this OID to restrictOnOverload (3) will not allow\n\t\t\toutlets on the corresponding phase to turn on if the \n\t\t\tePDULoadConfigOverloadThreshold OID is exceeded.')
atsOutletDevTotalOutletNum = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletDevTotalOutletNum.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletDevTotalOutletNum.setDescription('The total number of outlets on the ATS.')
atsOutletDevCtrlOutletNum = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletDevCtrlOutletNum.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletDevCtrlOutletNum.setDescription('The number of controlled outlets on the ATS.')
atsOutletDevColdStartDelay = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletDevColdStartDelay.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletDevColdStartDelay.setDescription('The amount of delay, in seconds, between when\n\t\t\tpower is provided to the ATS and when the ATS \n\t\t\tprovides basic master power to the outlets.       \n       \n\t\t\tAllowed values are:\n\n\t\t\t-1       - never apply power automatically.\n\t\t\t0        - apply power immediately.\n\t\t\t1 to 300 - delay up to 300 seconds (5 minutes).')
atsOutletDevColdStartState = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allOn", 1), ("previous", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletDevColdStartState.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletDevColdStartState.setDescription('The ATS outlet state after coldstart. \n\t\t\tAllowed values are:\n\t\t\t1 - all outlets on after coldstart.\n\t\t\t2 - outlet status same as previous state.')
atsOutletDevLocalCtrl = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletDevLocalCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletDevLocalCtrl.setDescription('To configure enable or disable outlet local control function.')
atsOutletDevCommand = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noCommandAll", 1), ("immediateAllOn", 2), ("immediateAllOff", 3), ("immediateAllReboot", 4), ("delayedAllOn", 5), ("delayedAllOff", 6), ("delayedAllReboot", 7), ("cancelAllPendingCommands", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletDevCommand.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletDevCommand.setDescription("Setting this OID to immediateAllOn (2) will turn all outlets\n       on immediately.\n       \n       Setting this OID to immediateAllOff (3) will turn all outlets\n       off immediately.\n       \n       Setting this OID to immediateAllReboot (4) will reboot all outlets\n       immediately.\n\n       Setting this OID to delayedAllOn (5) will turn all outlets on as \n       defined by each outlet's atsOutletCfgPowerOnTime OID value. \n             \n       Setting this OID to delayedAllOff (6) will turn all outlets \n       off as defined by each outlet's atsOutletCfgPowerOffTime OID value.\n      \n       Setting this OID to delayedAllReboot (7) will cause a \n       delayedAllOff command to be performed. Once all outlets are off, \n       the Switched Rack ATS will then delay the largest \n       atsOutletCfgRebootDuration OID time, and then perform a \n       delayedAllOn command.    \n       \n       Setting this OID to cancelAllPendingCommands (8) will cause all pending\n       commands on the Switched Rack ATS to be canceled.\n\n       Getting this OID will return the noCommandAll (1) value.")
atsOutletStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletStatusTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletStatusTableSize.setDescription('The size of the outlet status table.')
atsOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3), )
if mibBuilder.loadTexts: atsOutletStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletStatusTable.setDescription('Allows for getting of status of individual outlets.')
atsOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3, 1), ).setIndexNames((0, "CPS-MIB", "atsOutletStatusTableIndex"))
if mibBuilder.loadTexts: atsOutletStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletStatusEntry.setDescription('The outlet to gather status from.')
atsOutletStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletStatusTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletStatusTableIndex.setDescription('The index to the outlet entry.')
atsOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletStatusOutletName.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletStatusOutletName.setDescription('The name of the outlet. The maximum string size is device dependent.\n\t\t\tThis OID is provided for informational purposes only.')
atsOutletStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusOn", 1), ("outletStatusOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletStatusOutletState.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletStatusOutletState.setDescription('Getting this variable will return the outlet state. If \n\t\t\tthe outlet is on, the outletStatusOn (1) value will be returned.\n\t\t\tIf the outlet is off, the outletStatusOff (2) value will be\n\t\t\treturned.')
atsOutletStatusOutletCmdPending = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusCommandPending", 1), ("outletStatusNoCommandPending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletStatusOutletCmdPending.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletStatusOutletCmdPending.setDescription('Getting this variable will return the command pending\n\t\t\tstate of the outlet. If a command is pending on the \n\t\t\toutlet, the outletStatusCommandPending (1) value\n\t\t\twill be returned. If there is not a command pending\n\t\t\ton the outlet, the outletStatusNoCommandPending (2)\n\t\t\twill be returned.')
atsOutletStatusOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletStatusOutletPhase.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletStatusOutletPhase.setDescription('The phase/s associated with this outlet.\n      \n\t\t\tFor single phase devices, this object will always \n\t\t\treturn phase1(1).\n       \n\t\t\tFor 3-phase devices, this object will return phase1 (1), \n\t\t\tphase2 (2), or phase3 (3) for outlets tied to a single \n\t\t\tphase.  For outlets tied to two phases, this object will\n\t\t\treturn phase1-2 (4) for phases 1 and 2, phase2-3 (5) for \n\t\t\tphases 2 and 3, and phase3-1 (6) for phases 3 and 1.')
atsOutletStatusOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletStatusOutletBank.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletStatusOutletBank.setDescription('The bank associated with this outlet.')
atsOutletCtrlTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletCtrlTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletCtrlTableSize.setDescription('The size of the outlet control table.')
atsOutletCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 5), )
if mibBuilder.loadTexts: atsOutletCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletCtrlTable.setDescription('Allows for control of the individual outlets.')
atsOutletCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 5, 1), ).setIndexNames((0, "CPS-MIB", "atsOutletCtrlTableIndex"))
if mibBuilder.loadTexts: atsOutletCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletCtrlEntry.setDescription('The outlet to control.')
atsOutletCtrlTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletCtrlTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletCtrlTableIndex.setDescription('The index to the outlet entry.')
atsOutletCtrlOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletCtrlOutletName.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletCtrlOutletName.setDescription('The name of the outlet. The maximum string size is device dependent.\n\t\t\tAn error will be returned if the set request exceeds the max size.\n\t\t\tThis OID is provided for informational purposes only.')
atsOutletCtrlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("immediateOn", 2), ("immediateOff", 3), ("immediateReboot", 4), ("delayedOn", 5), ("delayedOff", 6), ("delayedReboot", 7), ("cancelPendingCommand", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletCtrlCommand.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletCtrlCommand.setDescription('Getting this variable will return the outlet state. If \n\t\t\tthe outlet is on, the immediateOn (2) value will be returned.\n\t\t\tIf the outlet is off, the immediateOff (2) value will be\n\t\t\treturned. \n       \n\t\t\tSetting this variable to immediateOn (2) will immediately turn \n\t\t\tthe outlet on.\n       \n\t\t\tSetting this variable to immediateOff (3) will immediately turn \n\t\t\tthe outlet off. \n\n\t\t\tSetting this variable to immediateReboot (4) will immediately \n\t\t\treboot the outlet.\n      \n\t\t\tSetting this variable to delayedOn (5) will turn the outlet on\n\t\t\tafter the ePDUOutletConfigPowerOnTime OID time has elapsed.   \n\n\t\t\tSetting this variable to delayedOff (6) will turn the outlet off\n\t\t\tafter the ePDUOutletConfigPowerOffTime OID time has elapsed.\n\n\t\t\tSetting this variable to delayedReboot (7) will cause the \n\t\t\tATS to perform a delayedOff command, wait the atsOutletCfgRebootDuration \n\t\t\tOID time, and then perform a delayedOn command. \n       \n\t\t\tSetting this variable to cancelPendingCommand (8) will cause any\n\t\t\tpending command to this outlet to be canceled.')
atsOutletCfgTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletCfgTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletCfgTableSize.setDescription('The size of the outlet config table.')
atsOutletCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 7), )
if mibBuilder.loadTexts: atsOutletCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletCfgTable.setDescription('Allows for configuration of individual outlets.')
atsOutletCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 7, 1), ).setIndexNames((0, "CPS-MIB", "atsOutletCfgTableIndex"))
if mibBuilder.loadTexts: atsOutletCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletCfgEntry.setDescription('The outlet to configure.')
atsOutletCfgTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutletCfgTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletCfgTableIndex.setDescription('The index to the outlet entry.')
atsOutletCfgOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletCfgOutletName.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletCfgOutletName.setDescription('The name of the outlet. The maximum string size is device dependent.\n\t\t\tAn error will be returned if the set request exceeds the max size.')
atsOutletCfgPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletCfgPowerOnTime.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletCfgPowerOnTime.setDescription('The amount of time (in seconds) the outlet will delay \n\t\t\tpowering on at coldstart or when a command that requires \n\t\t\ta turn-on delay is issued.\n              \n\t\t\tAllowed values are:\n\t\t\t-1        - never power on.\n\t\t\t0         - power on immediately.\n\t\t\t1 to 7200 - power on up to 7200 seconds after being commanded.')
atsOutletCfgPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletCfgPowerOffTime.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletCfgPowerOffTime.setDescription('The amount of time (in seconds) the outlet will delay \n\t\t\tpowering off when a command that requires \n\t\t\ta turn-off delay is issued.\n\n\t\t\tAllowed values are:\n\n\t\t\t-1        - never power off.\n\t\t\t0         - power off immediately.\n\t\t\t1 to 7200 - power off up to 7200 seconds after being commanded.')
atsOutletCfgRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 5, 6, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsOutletCfgRebootDuration.setStatus('mandatory')
if mibBuilder.loadTexts: atsOutletCfgRebootDuration.setDescription('During a reboot sequence, power is turned off and then \n\t\t\tback on. This OID defines the amount of time to wait, \n\t\t\tin seconds, after turning the power off, at the start\n\t\t\tof the sequence, before turning power back on, at the\n\t\t\tend of the reboot sequence.       \n       \n\t\t\tAllowed range is any value between 5 and 60 seconds (1 minute).')
ePDU2Role = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standalone", 1), ("host", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2Role.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2Role.setDescription('Get this oid shows the role the PDU played on Daisy Chain Group.\n\t\t\tThe PDU as a Host can access whole ePDU2 content, and the PDU be standalong\n\t\t\tor a Slave can access itself instead.')
ePDU2IdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2IdentTableSize.setDescription('PDU as a Host response total PDU ident number on daisy chain. \n\t\t\tPDU as a Slave can only response 1.')
ePDU2IdentTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2), )
if mibBuilder.loadTexts: ePDU2IdentTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2IdentTable.setDescription('A table of Rack PDU identification information.')
ePDU2IdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2IdentIndex"))
if mibBuilder.loadTexts: ePDU2IdentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2IdentEntry.setDescription('Identification data from Rack PDU being queried.')
ePDU2IdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2IdentIndex.setDescription('The index to the Rack PDU identification table entry.')
ePDU2IdentModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2IdentModuleIndex.setDescription('The Rack PDU identification table entry numeric ID.')
ePDU2IdentName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2IdentName.setDescription('A user-defined string identifying the name of the Rack PDU.')
ePDU2IdentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentLocation.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2IdentLocation.setDescription('A user-defined string identifying the location of the Rack PDU.')
ePDU2IdentContact = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentContact.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2IdentContact.setDescription('A user-defined string identifying the person to contact of the Rack PDU.')
ePDU2IdentHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentHardwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2IdentHardwareRev.setDescription('The Rack PDU hardware version.')
ePDU2IdentFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2IdentFirmwareRev.setDescription('The Rack PDU firmware version.')
ePDU2IdentDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentDateOfManufacture.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2IdentDateOfManufacture.setDescription('The date the Rack PDU was manufactured in mm/dd/yyyy format.')
ePDU2IdentModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentModelName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2IdentModelName.setDescription('The Rack PDU model number.')
ePDU2IdentSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2IdentSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2IdentSerialNumber.setDescription('The Rack PDU serial number.')
ePDU2IdentIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestIndicators", 1), ("testIndicators", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2IdentIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2IdentIndicator.setDescription('PDU will perform a panel indicator test when the variable\n \t\t\t\tis set to testIndicators(2).\n \t\t\t\t\n \t\t\t\tIt is no effective to set this value to noTestIndicators(1).')
ePDU2DeviceTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceTableSize.setDescription('A Host Rack PDU response total number of Rack PDUs on daisy chain. \n\t\t\tRack PDU as a Slave can only response 1.')
ePDU2DeviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2), )
if mibBuilder.loadTexts: ePDU2DeviceConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigTable.setDescription('A table of Rack PDU configuration data.')
ePDU2DeviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2DeviceConfigIndex"))
if mibBuilder.loadTexts: ePDU2DeviceConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigEntry.setDescription('Configuration data from Rack PDU being queried.')
ePDU2DeviceConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigIndex.setDescription('The index to the Rack PDU table entry.')
ePDU2DeviceConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceConfigModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigModuleIndex.setDescription('The Rack PDU numeric ID.')
ePDU2DeviceConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigName.setDescription('A user-defined string identifying the name of Rack PDU.')
ePDU2DeviceConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigLocation.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigLocation.setDescription('A user-defined string identifying the location of the Rack PDU.')
ePDU2DeviceConfigContact = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigContact.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigContact.setDescription('A user-defined string identifying the person to contact of the Rack PDU.')
ePDU2DeviceConfigDisplayOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("displayNormal", 1), ("displayReverse", 2), ("displayRotate90", 3), ("displayRotate270", 4), ("displayAuto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigDisplayOrientation.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigDisplayOrientation.setDescription('Getting this OID will return the intended physical orientation of the Seven-Segment Display.\n\n\t\t\t\tdisplayNormal(1) indicates Normal.\n\t\t\t\tdisplayReverse(2)indicates Upside-Down.\n\t\t\t\tdisplayRotate90(3) indicates rotate 90 degree.\n\t\t\t\tdisplayRotate270(4) indicates rotate 270 degree. \n\t\t\t\tdisplayAuto(5) indicates auto-detect and rotate.')
ePDU2DeviceConfigColdstartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigColdstartDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigColdstartDelay.setDescription('The amount of delay, measured in seconds, between\n \t\t\t\twhen power is provided to the Rack PDU and when\n \t\t\t\tthe Rack PDU provides basic master power to the\n \t\t\t\toutlets.\n \t\t\t\t\n \t\t\t\tAllowed values are:\n \t\t\t\t\t-1 - never apply power automatically.\n \t\t\t\t\t0 - apply power immediately.\n \t\t\t\t\t1 to 300 - delay up to 300 seconds (5 minutes).')
ePDU2DeviceConfigCurrentLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigCurrentLowLoadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigCurrentLowLoadThreshold.setDescription('User-defined low current draw alarm threshold, measured in Amps.')
ePDU2DeviceConfigCurrentNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigCurrentNearOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigCurrentNearOverloadThreshold.setDescription('User-defined near overload current threshold, measured in Amps.')
ePDU2DeviceConfigCurrentOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigCurrentOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigCurrentOverloadThreshold.setDescription('User-defined current overload threshold, measured in Amps.')
ePDU2DeviceConfigPeakLoadReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 1), ("resetAll", 2), ("resetDevice", 3), ("resetOutlets", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigPeakLoadReset.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigPeakLoadReset.setDescription('Setting this OID to resetAll (2) will cause the existing peak current value\n \t\t\t\tof Rack PDU and its outlets to be replaced by the current load current value.\n \t\t\t\tSetting this OID to resetDevice (3) to reset the Rack PDU only. \n \t\t\t\tSetting this OID to resetOutlets (4) to reset the PDU outlets only. \n\n\t\t\t\tGetting this OID will do nothing and return the noOperation(1) value.')
ePDU2DeviceConfigEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 1), ("resetAll", 2), ("resetDevice", 3), ("resetOutlets", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigEnergyReset.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigEnergyReset.setDescription('Setting this OID to resetAll (2) will cause the device energy meter value\n \t\t\t\t\tto be reset to zero.\n \t\t\t\t\tSetting this OID to resetDevice (3) to reset the Rack PDU only. \n \t\t\t\t\tSetting this OID to resetOutlets (4) to reset the PDU outlets only. \n \t\t\t\t\t\n \t\t\t\t\tGetting this OID in models that support this feature will do nothing\n \t\t\t\t\tand return the noOperation(1) value.')
ePDU2DeviceConfigPowerLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigPowerLowLoadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigPowerLowLoadThreshold.setDescription('User-defined low power draw alarm threshold, measured in Watts.')
ePDU2DeviceConfigPowerNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigPowerNearOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigPowerNearOverloadThreshold.setDescription('User-defined near overload power threshold, measured in Watts.')
ePDU2DeviceConfigPowerOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceConfigPowerOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceConfigPowerOverloadThreshold.setDescription('User-defined power overload threshold, measured in Watts.')
ePDU2DeviceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3), )
if mibBuilder.loadTexts: ePDU2DeviceInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceInfoTable.setDescription('A table of Rack PDU information.')
ePDU2DeviceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2DeviceInfoIndex"))
if mibBuilder.loadTexts: ePDU2DeviceInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceInfoEntry.setDescription('Information of the Rack PDU being queried.')
ePDU2DeviceInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceInfoIndex.setDescription('The index to the Rack PDU Information table entry.')
ePDU2DeviceInfoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceInfoModuleIndex.setDescription('The Rack PDU numeric ID.')
ePDU2DeviceInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceInfoName.setDescription('A user-defined string identifying the name of the Rack PDU.')
ePDU2DeviceInfoRating = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoRating.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceInfoRating.setDescription('The electrical rating of the Rack PDU.')
ePDU2DeviceInfoNumOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoNumOutlets.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceInfoNumOutlets.setDescription('The number of outlets on the Rack PDU.')
ePDU2DeviceInfoSwitchedOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoSwitchedOutlets.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceInfoSwitchedOutlets.setDescription('The number of switched outlets on the Rack PDU.')
ePDU2DeviceInfoMeteredOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoMeteredOutlets.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceInfoMeteredOutlets.setDescription('The number of metered outlets on the Rack PDU.')
ePDU2DeviceInfoNumPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoNumPhases.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceInfoNumPhases.setDescription('The number of phases present in the Rack PDU.')
ePDU2DeviceInfoNumBreakers = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoNumBreakers.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceInfoNumBreakers.setDescription('The number of metered banks present in the Rack PDU.')
ePDU2DeviceInfoBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoBreakerRating.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceInfoBreakerRating.setDescription('The maximum current rating, measured in Amps, for the Rack PDU. \n\t\t\tGetting this OID will return rating of the circuit breakers on \n\t\t\tthe device if it has any.')
ePDU2DeviceInfoOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("orientHorizontal", 1), ("orientVertical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoOrientation.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceInfoOrientation.setDescription('Rack PDU orientation.')
ePDU2DeviceInfoOutletLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("seqPhaseToNeutral", 1), ("seqPhaseToPhase", 2), ("seqPhToNeu21PhToPh", 3), ("seqPhToPhGrouped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceInfoOutletLayout.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceInfoOutletLayout.setDescription('Getting this OID will return outlet layout for the device.\n\t\t\t\n\t\t\tSeqPhaseToNeutral(1) indicates outlet layout as follows:\n\t\t\t\t1:1-N,2:2-N,3:3-N,4:1-N,5:2-N,...\n\t\t\t\t\n\t\t\tSeqPhaseToPhase(2) indicates outlet layout as follows:\n\t\t\t\t1:1-2,2:2-3,3:3-1,4:1-2,5:2-3,...\n\t\t\t\t\n\t\t\tSeqPhToNeu21PhToPh(3) indicates outlet layout as follows:\n\t\t\t\t1:1-N,2:2-N...21:3-N,22:1-2,23:2-3,24:3-1,...\n\t\t\t\t\n\t\t\tSeqPhToPhGrouped(4) indicates outlet layout as follows:\n\t\t\t\tOtlts1-8::(3-1),Otlts9-16::(2-3),Otlts17-24::(1-2).')
ePDU2DeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4), )
if mibBuilder.loadTexts: ePDU2DeviceStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusTable.setDescription('A table of Rack PDU current status.')
ePDU2DeviceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2DeviceStatusIndex"))
if mibBuilder.loadTexts: ePDU2DeviceStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusEntry.setDescription('Status data from the Rack PDU being queried.')
ePDU2DeviceStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusIndex.setDescription('The index to the Rack PDU status table entry.')
ePDU2DeviceStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusModuleIndex.setDescription('The Rack PDU numeric ID')
ePDU2DeviceStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusName.setDescription('A user-defined string identifying the name of the Rack PDU.')
ePDU2DeviceStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusLoadState.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusLoadState.setDescription('Indicates the present load status of the Rack PDU.')
ePDU2DeviceStatusCurrentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusCurrentLoad.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusCurrentLoad.setDescription('The power consumption of the Rack PDU load in tenths of Amps.')
ePDU2DeviceStatusCurrentPeakLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusCurrentPeakLoad.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusCurrentPeakLoad.setDescription('The peak power consumption of the Rack PDU load in tenths of Amps.')
ePDU2DeviceStatusPeakLoadTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPeakLoadTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusPeakLoadTimestamp.setDescription('Indicates the date and time that peak load occurred.')
ePDU2DeviceStatusPeakLoadStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPeakLoadStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusPeakLoadStartTime.setDescription('Indicates the date and time of the last device peak load reset.')
ePDU2DeviceStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusEnergy.setDescription('A user resettable energy meter measuring Rack PDU load \n\t\t\tenergy consumption in tenths of kilowatt-hours.')
ePDU2DeviceStatusEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusEnergyStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusEnergyStartTime.setDescription('Indicates the date and time of the last device energy\n\t\t\tmeter reset.')
ePDU2DeviceStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commandPending", 1), ("noCommandPending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusCommandPending.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusCommandPending.setDescription('Indicates whether or not the device \n\t\t\tis processing a pending command.')
ePDU2DeviceStatusPowerSupplyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerSupplyAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerSupplyAlarm.setDescription('Indicates a power supply alarm is active when value\n \t\t\tequals alarm (2).')
ePDU2DeviceStatusPowerSupply1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerSupply1Status.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerSupply1Status.setDescription('Indicates whether or not an alarm is active in Power\n \t\t\tSupply 1.')
ePDU2DeviceStatusPowerSupply2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerSupply2Status.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerSupply2Status.setDescription('Indicates whether or not an alarm is active in Power\n \t\t\tSupply 2.')
ePDU2DeviceStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusApparentPower.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusApparentPower.setDescription('The apparent power consumption of the Rack PDU \n\t\t\tload in VoltAmps (VA).')
ePDU2DeviceStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerFactor.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerFactor.setDescription('The power factor of the Rack PDU load in hundredths.')
ePDU2DeviceStatusRoleType = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standalone", 1), ("host", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusRoleType.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusRoleType.setDescription('Get this oid shows the role the PDU played on Daisy Chain Group.\n\t\t\tThe PDU as a Host can access whole ePDU2 content, and the PDU be standalong\n\t\t\tor a Slave can access itself instead.')
ePDU2DeviceStatusPowerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerLoad.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerLoad.setDescription('The power consumption of the Rack PDU load in Watts.')
ePDU2DeviceStatusPowerPeakLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 4, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerPeakLoad.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceStatusPowerPeakLoad.setDescription('The peak power consumption of the Rack PDU load in Watts.')
ePDU2DeviceControlTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 5), )
if mibBuilder.loadTexts: ePDU2DeviceControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceControlTable.setDescription('A table of Rack PDU control data.')
ePDU2DeviceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 5, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2DeviceControlIndex"))
if mibBuilder.loadTexts: ePDU2DeviceControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceControlEntry.setDescription('Control data from Rack PDU being queried.')
ePDU2DeviceControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceControlIndex.setDescription('The index to the Rack PDU control table entry.')
ePDU2DeviceControlModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceControlModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceControlModuleIndex.setDescription('The Rack PDU numeric ID.')
ePDU2DeviceControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2DeviceControlName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceControlName.setDescription('A user-defined string identifying the name of the Rack PDU.')
ePDU2DeviceControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("immediateAllOn", 1), ("immediateAllOff", 2), ("immediateAllReboot", 3), ("delayedAllOn", 4), ("delayedAllOff", 5), ("delayedAllReboot", 6), ("cancelAllPendingCommand", 7), ("noCommand", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2DeviceControlCommand.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2DeviceControlCommand.setDescription("Setting this OID to immediateAllOn (1) will turn all outlets on immediately.\n\n\t\t\tSetting this OID to immediateAllOff (2) will turn all outlets off immediately.\n       \n\t\t\tSetting this OID to immediateAllReboot (3) will cause an immediateAllOff command \n\t\t\tto be performed. Once all outlets are off, the Switched Rack PDU will then delay \n\t\t\tthe ePDU2OutletSwitchedConfigRebootDuration OID time, and then perform an \n\t\t\timmediateAllOn command.\n\n\t\t\tSetting this OID to delayedAllOn (4) will turn all outlets on as defined by \n\t\t\teach outlet's ePDU2OutletSwitchedConfigPowerOnTime OID value.\n\t\t\t\n\t\t\tSetting this OID to delayedAllOff (5) will turn all outlets off as defined by \n\t\t\teach outlet's ePDU2OutletSwitchedConfigPowerOffTime OID value.\n\t\t\t\n\t\t\tSetting this OID to delayedAllReboot (6) will cause a delayedAllOff command \n\t\t\tto be performed. Once all outlets are off, the Switched Rack PDU will then \n\t\t\tdelay the largest ePDU2OutletSwitchedConfigRebootDuration OID time, and \n\t\t\tthen perform a delayedAllOn command.\n\n\t\t\tSetting this OID to cancelAllPendingCommand (7) will cause all pending \n\t\t\tcommands on the Switched Rack PDU to be cancelled. \n\t\t\t\n\t\t\tSetting this OID to noCommand (8) will have no effect.\n\n\t\t\tGetting this OID will return the noCommand (8) value.")
ePDU2PhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseTableSize.setDescription('A Host Rack PDU response total phase number of Rack PDUs on daisy chain. \n\t\t\tRack PDU as a Slave can only response itself number of phase.')
ePDU2PhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2), )
if mibBuilder.loadTexts: ePDU2PhaseConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseConfigTable.setDescription('A table of Rack PDU phase configuration data.')
ePDU2PhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2PhaseConfigIndex"))
if mibBuilder.loadTexts: ePDU2PhaseConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseConfigEntry.setDescription('Configuration data from currently queried \n\t\t\tRack PDU phase.')
ePDU2PhaseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseConfigIndex.setDescription('The index to the Rack PDU phase configuration\n\t\t\ttable entry.')
ePDU2PhaseConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseConfigModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseConfigModuleIndex.setDescription('The Rack PDU numeric ID.')
ePDU2PhaseConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseConfigNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseConfigNumber.setDescription('The numeric phase ID.')
ePDU2PhaseConfigOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))).clone(namedValues=NamedValues(("notSupported", -1), ("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2PhaseConfigOverloadRestriction.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseConfigOverloadRestriction.setDescription('This OID controls the behavior of a Switched Rack PDU \n\t\t\tphase when an overload condition is possible and \n\t\t\tadditional outlets are requested to be turned on. \n\t\t\t\n\t\t\tSetting this OID to alwaysAllowTurnON (1) will always allow \n\t\t\tthe outlets on the corresponding phase to turn on.\n\t\t\t\n\t\t\tSetting this OID to restrictOnNearOverload (2) will not allow \n\t\t\toutlets on the corresponding phase to turn on if the \n\t\t\tePDU2PhaseConfigNearOverloadThreshold OID is exceeded.\n\n\t\t\tSetting this OID to restrictOnOverload (3) will not allow \n\t\t\toutlets on the corresponding phase to turn on if the \n\t\t\tePDU2PhaseConfigOverloadThreshold OID is exceeded.\n\t\t\t\n\t\t\tModels that do not support this feature will respond to this OID\n\t\t\twith a value of notSupported (-1). Attempts to set this OID\n\t\t\tin these models will fail.')
ePDU2PhaseConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2PhaseConfigLowLoadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseConfigLowLoadThreshold.setDescription('User-defined low load phase current threshold in Amps.')
ePDU2PhaseConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2PhaseConfigNearOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseConfigNearOverloadThreshold.setDescription('User-defined near phase overload current warning \n\t\t\tthreshold in Amps.')
ePDU2PhaseConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2PhaseConfigOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseConfigOverloadThreshold.setDescription('User-defined phase overload current threshold \n\t\t\tin Amps')
ePDU2PhaseConfigPhasePeakLoadReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2PhaseConfigPhasePeakLoadReset.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseConfigPhasePeakLoadReset.setDescription('Setting this OID to reset (2) will cause the existing peak current value\n \t\t\tto be replaced by the present load current value.\n \n\t\t\tGetting this OID will do nothing and return the noOperation(1) value.')
ePDU2PhaseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 3), )
if mibBuilder.loadTexts: ePDU2PhaseInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseInfoTable.setDescription('A table of Rack PDU phase information.')
ePDU2PhaseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 3, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2PhaseInfoIndex"))
if mibBuilder.loadTexts: ePDU2PhaseInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseInfoEntry.setDescription('Information data from currently queried Rack PDU phase.')
ePDU2PhaseInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseInfoIndex.setDescription('The index to the Rack PDU phase properties table entry.')
ePDU2PhaseInfoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseInfoModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseInfoModuleIndex.setDescription('The Rack PDU numeric ID.')
ePDU2PhaseInfoNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseInfoNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseInfoNumber.setDescription('The numeric phase ID.')
ePDU2PhaseStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4), )
if mibBuilder.loadTexts: ePDU2PhaseStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseStatusTable.setDescription('A table of Rack PDU phase status data')
ePDU2PhaseStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2PhaseStatusIndex"))
if mibBuilder.loadTexts: ePDU2PhaseStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseStatusEntry.setDescription('Status data from currently queried Rack PDU phase')
ePDU2PhaseStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseStatusIndex.setDescription('The index to the Rack PDU phase status table entry.')
ePDU2PhaseStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseStatusModuleIndex.setDescription('The Rack PDU numeric ID.')
ePDU2PhaseStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseStatusNumber.setDescription('The numeric phase ID.')
ePDU2PhaseStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("lowLoad", 2), ("nearOverload", 3), ("overload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusLoadState.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseStatusLoadState.setDescription('Indicates the present load status of the Rack \n\t\t\tPDU phase being queried.')
ePDU2PhaseStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusLoad.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseStatusLoad.setDescription('Indicates the current draw, in tenths of Amps, of the load\n\t\t\ton the Rack PDU phase being queried.')
ePDU2PhaseStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseStatusVoltage.setDescription('Indicates the Voltage, in tenths of Volts, of the Rack\n       PDU phase being queried')
ePDU2PhaseStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusPower.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseStatusPower.setDescription('Indicates the load power, in watts,\n       consumed on the Rack PDU phase being queried')
ePDU2PhaseStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusApparentPower.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseStatusApparentPower.setDescription('Indicates the load apparent power, in VoltAmps (VA),\n       consumed on the Rack PDU phase being queried')
ePDU2PhaseStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusPowerFactor.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseStatusPowerFactor.setDescription('Indicates the load power factor, in hundredths,\n       of the Rack PDU phase being queried')
ePDU2PhaseStatusPeakLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusPeakLoad.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseStatusPeakLoad.setDescription('The peak current of the Rack PDU phase load in tenths of Amps')
ePDU2PhaseStatusPeakLoadTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusPeakLoadTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseStatusPeakLoadTimestamp.setDescription('Indicates the date and time the phase peak current occurred.')
ePDU2PhaseStatusPeakLoadStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusPeakLoadStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseStatusPeakLoadStartTime.setDescription('Indicates the date and time of the last phase peak current reset.')
ePDU2PhaseStatusLineToLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 4, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2PhaseStatusLineToLineVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2PhaseStatusLineToLineVoltage.setDescription('Indicates the Line to Line Voltage, in tenths of Volts, of the Rack\n       PDU phase being queried')
ePDU2BankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankTableSize.setDescription('A Host Rack PDU response total bank number of Rack PDUs on daisy chain. \n\t\t\tRack PDU as a Slave can only response itself number of bank.')
ePDU2BankConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2), )
if mibBuilder.loadTexts: ePDU2BankConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankConfigTable.setDescription('A table of Rack PDU bank configuration data.')
ePDU2BankConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2BankConfigIndex"))
if mibBuilder.loadTexts: ePDU2BankConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankConfigEntry.setDescription('Configuration data from currently queried \n\t\t\tRack PDU bank.')
ePDU2BankConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankConfigIndex.setDescription('The index to the Rack PDU bank configuration\n\t\t\ttable entry.')
ePDU2BankConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankConfigModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankConfigModuleIndex.setDescription('The Rack PDU numeric ID.')
ePDU2BankConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankConfigNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankConfigNumber.setDescription('The numeric bank ID.')
ePDU2BankConfigOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2BankConfigOverloadRestriction.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankConfigOverloadRestriction.setDescription('This OID controls the behavior of a Switched Rack PDU \n\t\t\tbank when an overload condition is possible and \n\t\t\tadditional outlets are requested to be turned on. \n\t\t\t\n\t\t\tSetting this OID to alwaysAllowTurnON (1) will always allow \n\t\t\tthe outlets on the corresponding bank to turn on.\n\t\t\t\n\t\t\tSetting this OID to restrictOnNearOverload (2) will not allow \n\t\t\toutlets on the corresponding bank to turn on if the \n\t\t\tePDU2BankConfigNearOverloadThreshold OID is exceeded.\n\n\t\t\tSetting this OID to restrictOnOverload (3) will not allow \n\t\t\toutlets on the corresponding bank to turn on if the \n\t\t\tePDU2BankConfigOverloadThreshold OID is exceeded.')
ePDU2BankConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2BankConfigLowLoadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankConfigLowLoadThreshold.setDescription('User-defined low load bank current threshold in Amps.')
ePDU2BankConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2BankConfigNearOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankConfigNearOverloadThreshold.setDescription('User-defined near bank overload current warning \n\t\t\tthreshold in Amps.')
ePDU2BankConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2BankConfigOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankConfigOverloadThreshold.setDescription('User-defined bank overload current threshold \n\t\t\tin Amps')
ePDU2BankConfigPeakLoadReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2BankConfigPeakLoadReset.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankConfigPeakLoadReset.setDescription('Setting this OID to reset (2) will cause the existing peak current value\n \t\t\tto be replaced by the present load current value.\n \n\t\t\tGetting this OID will do nothing and return the noOperation(1) value.')
ePDU2BankInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 3), )
if mibBuilder.loadTexts: ePDU2BankInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankInfoTable.setDescription('A table of Rack PDU bank information.')
ePDU2BankInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 3, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2BankInfoIndex"))
if mibBuilder.loadTexts: ePDU2BankInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankInfoEntry.setDescription('Information data from currently queried Rack PDU bank.')
ePDU2BankInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankInfoIndex.setDescription('The index to the Rack PDU bank properties table entry.')
ePDU2BankInfoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankInfoModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankInfoModuleIndex.setDescription('The Rack PDU numeric ID.')
ePDU2BankInfoNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankInfoNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankInfoNumber.setDescription('The numeric bank ID.')
ePDU2BankStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4), )
if mibBuilder.loadTexts: ePDU2BankStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankStatusTable.setDescription('A table of Rack PDU bank status data')
ePDU2BankStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2BankStatusIndex"))
if mibBuilder.loadTexts: ePDU2BankStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankStatusEntry.setDescription('Status data from currently queried Rack PDU bank')
ePDU2BankStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankStatusIndex.setDescription('The index to the Rack PDU bank status table entry.')
ePDU2BankStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankStatusModuleIndex.setDescription('The Rack PDU numeric ID.')
ePDU2BankStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankStatusNumber.setDescription('The numeric bank ID.')
ePDU2BankStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("lowLoad", 2), ("nearOverload", 3), ("overload", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusLoadState.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankStatusLoadState.setDescription('Indicates the present load status of the Rack \n\t\t\tPDU bank being queried.')
ePDU2BankStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusLoad.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankStatusLoad.setDescription('Indicates the current draw, in tenths of Amps, of the load\n\t\t\ton the Rack PDU bank being queried.')
ePDU2BankStatusPeakLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusPeakLoad.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankStatusPeakLoad.setDescription('The peak current of the Rack PDU bank load in tenths of Amps.')
ePDU2BankStatusPeakLoadTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusPeakLoadTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankStatusPeakLoadTimestamp.setDescription('Indicates the date and time the bank peak current occurred.')
ePDU2BankStatusPeakLoadStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 5, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2BankStatusPeakLoadStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2BankStatusPeakLoadStartTime.setDescription('Indicates the date and time of the last bank peak current reset.')
ePDU2OutletSwitchedTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedTableSize.setDescription('The number of switched outlets on connected Rack PDUs.')
ePDU2OutletSwitchedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2), )
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigTable.setDescription('A table of Rack PDU switched outlet configuration data.')
ePDU2OutletSwitchedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2OutletSwitchedConfigIndex"))
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigEntry.setDescription('Configuration data from currently queried Rack PDU \n\t\t\tswitched outlet.')
ePDU2OutletSwitchedConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigIndex.setDescription('The index to the Rack PDU switched outlet configuration table entry.')
ePDU2OutletSwitchedConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigModuleIndex.setDescription('The Rack PDU numeric ID.')
ePDU2OutletSwitchedConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigNumber.setDescription('The numeric switched outlet ID.')
ePDU2OutletSwitchedConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigName.setDescription('The user-defined switched outlet name string.')
ePDU2OutletSwitchedConfigPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigPowerOnTime.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigPowerOnTime.setDescription('The amount of time (in seconds) the outlet will delay \n\t\t\tpowering on at coldstart or when a command that requires \n\t\t\ta turn-on delay is issued.\n\t\t\t\n\t\t\tAllowed values are:\n\t\t\t\t-1 - never power on.\n\t\t\t\t 0 - power on immediately.\n\t\t\t\t 1 to 7200 - power on up to 7200 seconds after being\n \t\t\t\t\t\t\t\t\t\t\tcommanded.')
ePDU2OutletSwitchedConfigPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigPowerOffTime.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigPowerOffTime.setDescription('The amount of time (in seconds) the outlet will delay \n\t\t\tpowering off when a command that requires a \n\t\t\tturn-off delay is issued. \n\t\t\t\n\t\t\tAllowed values are:\n\t\t\t -1 - never power off.\n\t\t\t  0 - power off immediately.\n\t\t\t  1 to 7200 - power off up to 7200 seconds after being\n\t\t\t  \t\t\t\t\t\t commanded.')
ePDU2OutletSwitchedConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigRebootDuration.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedConfigRebootDuration.setDescription('During a reboot sequence, power is turned off and then \n\t\t\tback on. This OID defines the amount of time to wait, \n\t\t\tin seconds, after turning the power off, at the start \n\t\t\tof the sequence, before turning power back on, at the \n\t\t\tend of the reboot sequence. \n\t\t\t\n\t\t\tAllowed range is any value between 5 and 60 seconds (1 minute).')
ePDU2OutletSwitchedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3), )
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoTable.setDescription('A table of Rack PDU switched outlet information.')
ePDU2OutletSwitchedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2OutletSwitchedInfoIndex"))
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoEntry.setDescription('Information of the currently queried Rack PDU \n\t\t\tswitched outlet.')
ePDU2OutletSwitchedInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoIndex.setDescription('The index to the Rack PDU switched outlet information table entry.')
ePDU2OutletSwitchedInfoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoModuleIndex.setDescription('The Rack PDU numeric ID.')
ePDU2OutletSwitchedInfoNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoNumber.setDescription('The numeric switched outlet ID.')
ePDU2OutletSwitchedInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoName.setDescription('The numeric switched outlet name.')
ePDU2OutletSwitchedInfoPhaseLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoPhaseLayout.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoPhaseLayout.setDescription('This OID describes the phase connections of the referenced outlet as follows:\n\t\t\tseqPhase1ToNeutral(1) indicates that the outlet is wired from Phase 1 to Neutral.\n\t\t\tseqPhase2ToNeutral(2) indicates that the outlet is wired from Phase 2 to Neutral.\n\t\t\tseqPhase3ToNeutral(3) indicates that the outlet is wired from Phase 3 to Neutral.\n\t\t\tseqPhase1ToPhase2(4) indicates that the outlet is wired from Phase 1 to Phase 2.\n\t\t\tseqPhase2ToPhase3(5) indicates that the outlet is wired from Phase 2 to Phase 3.\n\t\t\tseqPhase3ToPhase1(6) indicates that the outlet is wired from Phase 3 to Phase 1.')
ePDU2OutletSwitchedInfoBank = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoBank.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedInfoBank.setDescription('The numeric bank ID.')
ePDU2OutletSwitchedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4), )
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusTable.setDescription('A table of Rack PDU switched outlet status information.')
ePDU2OutletSwitchedStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2OutletSwitchedStatusIndex"))
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusEntry.setDescription('Status information for currently queried Rack PDU switched outlet.')
ePDU2OutletSwitchedStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusIndex.setDescription('The index to the Rack PDU switched outlet status information table entry.')
ePDU2OutletSwitchedStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusModuleIndex.setDescription('The Rack PDU numeric ID.')
ePDU2OutletSwitchedStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusNumber.setDescription('The numeric switched outlet ID.')
ePDU2OutletSwitchedStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusName.setDescription('The user-defined switched outlet name string.')
ePDU2OutletSwitchedStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusOn", 1), ("outletStatusOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusState.setDescription('Indicates the present switch state of the Rack PDU switched outlet being queried.')
ePDU2OutletSwitchedStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletStatusCommandPending", 1), ("outletStatusNoCommandPending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusCommandPending.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedStatusCommandPending.setDescription('Getting this variable will return the command pending state of the outlet. \n\t\t\tIf a command is pending on the outlet, the outletStatusCommandPending (1) \n\t\t\tvalue will be returned. If there is not a command pending on the outlet, \n\t\t\tthe outletStatusNoCommandPending (2) will be returned.')
ePDU2OutletSwitchedControlTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 5), )
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlTable.setDescription('A table of Rack PDU switched outlet control data.')
ePDU2OutletSwitchedControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 5, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2OutletSwitchedControlIndex"))
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlEntry.setDescription('Control data for currently queried Rack PDU switched outlet.')
ePDU2OutletSwitchedControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlIndex.setDescription('The index to the Rack PDU switched outlet control data table entry.')
ePDU2OutletSwitchedControlModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlModuleIndex.setDescription('The user-defined Rack PDU numeric ID.')
ePDU2OutletSwitchedControlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlNumber.setDescription('The numeric switched outlet ID.')
ePDU2OutletSwitchedControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlName.setDescription('The user-defined switched outlet name string.')
ePDU2OutletSwitchedControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("immediateReboot", 3), ("delayedOn", 4), ("delayedOff", 5), ("delayedReboot", 6), ("cancelPendingCommand", 7), ("outletIdentify", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlCommand.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletSwitchedControlCommand.setDescription('Getting this variable will return the outlet state. If \n\t\t\tthe outlet is on, the immediateOn (1) value will be returned. \n\t\t\tIf the outlet is off, the immediateOff (2) value will be returned. \n\t\t\t\n\t\t\tSetting this variable to immediateOn (1) will immediately turn \n\t\t\tthe outlet on.\n\t\t\t\n\t\t\tSetting this variable to immediateOff (2) will immediately turn \n\t\t\tthe outlet off. \n\t\t\t\n\t\t\tSetting this variable to immediateReboot (3) will immediately \n\t\t\treboot the outlet.\n \n \t\t\tSetting this variable to delayedOn (4) will turn the outlet on \n \t\t\tafter the ePDUOutletConfigPowerOnTime OID time has elapsed. \n \t\t\t\n \t\t\tSetting this variable to delayedOff (5) will turn the outlet off \n \t\t\tafter the ePDUOutletConfigPowerOffTime OID time has elapsed.\n \t\t\t\n \t\t\tSetting this variable to delayedReboot (6) will cause the \n \t\t\tSwitched Rack PDU to perform a delayedOff command, wait the \n \t\t\tePDUOutletConfigRebootDuration OID time, and then perform a \n \t\t\tdelayedOn command. \n \t\t\t\n \t\t\tSetting this variable to cancelPendingCommand (7) will cause any \n \t\t\tpending command to this outlet to be canceled.\n \t\t\t\n \t\t\tSetting this variable to outletIdentify (8) will cause PDU LED \n \t\t\tto display the number of the outlet.')
ePDU2OutletMeteredTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredTableSize.setDescription('The number of metered outlets on connected Rack PDUs.')
ePDU2OutletMeteredConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2), )
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigTable.setDescription('A table of Rack PDU metered outlet configuration data.')
ePDU2OutletMeteredConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2OutletMeteredConfigIndex"))
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigEntry.setDescription('Configuration data from currently queried Rack PDU metered outlet.')
ePDU2OutletMeteredConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigIndex.setDescription('The index to the Rack PDU metered outlet configuration table entry.')
ePDU2OutletMeteredConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigModuleIndex.setDescription('The user-defined Rack PDU numeric ID.')
ePDU2OutletMeteredConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigNumber.setDescription('The numeric metered outlet ID.')
ePDU2OutletMeteredConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigName.setDescription('The user-defined metered outlet name string.')
ePDU2OutletMeteredConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigLowLoadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigLowLoadThreshold.setDescription('User-defined outlet low load current threshold in Watts.')
ePDU2OutletMeteredConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigNearOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigNearOverloadThreshold.setDescription('User-defined outlet near overload warning threshold in Watts.')
ePDU2OutletMeteredConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigOverloadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredConfigOverloadThreshold.setDescription('User-defined outlet overload current threshold in Watts.')
ePDU2OutletMeteredInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3), )
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoTable.setDescription('A table of Rack PDU metered outlet information.')
ePDU2OutletMeteredInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2OutletMeteredInfoIndex"))
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoEntry.setDescription('Information of currently queried Rack PDU metered outlet.')
ePDU2OutletMeteredInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoIndex.setDescription('The index to the Rack PDU metered information table entry.')
ePDU2OutletMeteredInfoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoModuleIndex.setDescription('The Rack PDU numeric ID.')
ePDU2OutletMeteredInfoNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoNumber.setDescription('The numeric metered outlet ID.')
ePDU2OutletMeteredInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoName.setDescription('The user-defined metered outlet name string.')
ePDU2OutletMeteredInfoLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoLayout.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoLayout.setDescription('This OID describes the phase connections of the referenced outlet as follows:\n\t\t\tseqPhase1ToNeutral(1) indicates that the outlet is wired from Phase 1 to Neutral.\n\t\t\tseqPhase2ToNeutral(2) indicates that the outlet is wired from Phase 2 to Neutral. \n\t\t\tseqPhase3ToNeutral(3) indicates that the outlet is wired from Phase 3 to Neutral. \n\t\t\tseqPhase1ToPhase2(4) indicates that the outlet is wired from Phase 1 to Phase 2.\n\t\t\tseqPhase2ToPhase3(5) indicates that the outlet is wired from Phase 2 to Phase 3. \n\t\t\tseqPhase3ToPhase1(6) indicates that the outlet is wired from Phase 3 to Phase 1.')
ePDU2OutletMeteredInfoRating = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoRating.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoRating.setDescription('Maximum power rating of Rack PDU metered outlet.')
ePDU2OutletMeteredInfoBank = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoBank.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredInfoBank.setDescription("This outlet's numeric bank ID.")
ePDU2OutletMeteredStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4), )
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusTable.setDescription('A table of Rack PDU metered outlet status data.')
ePDU2OutletMeteredStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1), ).setIndexNames((0, "CPS-MIB", "ePDU2OutletMeteredStatusIndex"))
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusEntry.setDescription('Status data from currently queried Rack PDU metered outlet.')
ePDU2OutletMeteredStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusIndex.setDescription('The index to the Rack PDU metered status table entry.')
ePDU2OutletMeteredStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusModuleIndex.setDescription('The Rack PDU numeric ID.')
ePDU2OutletMeteredStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusNumber.setDescription('The numeric metered outlet ID.')
ePDU2OutletMeteredStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusName.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusName.setDescription('The user-defined metered outlet name string.')
ePDU2OutletMeteredStatusAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusAlarm.setDescription('Getting this OID will return the current outlet alarm.')
ePDU2OutletMeteredStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusLoad.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusLoad.setDescription('Getting this OID will return the measured Outlet load \n\t\t\tfor an Outlet Monitored Rack PDU in tenths of Amps.')
ePDU2OutletMeteredStatusActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusActivePower.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusActivePower.setDescription('Getting this OID will return the measured Outlet load for \n\t\t\tan Outlet Monitored Rack PDU in watts.')
ePDU2OutletMeteredStatusPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusPeakPower.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusPeakPower.setDescription('The peak power consumption of the Rack PDU load in watts.')
ePDU2OutletMeteredStatusPeakPowerTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusPeakPowerTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusPeakPowerTimestamp.setDescription('Get this oid shows the date and time that peak power \n\t\t\tconsumption occurred.')
ePDU2OutletMeteredStatusPeakPowerStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusPeakPowerStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusPeakPowerStartTime.setDescription('Get this oid shows the date and time that peak power \n\t\t\tconsumption started.')
ePDU2OutletMeteredStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusEnergy.setDescription('Energy meter measuring Rack PDU load energy consumption \n\t\t\tin tenths of kilowatt-hours.')
ePDU2OutletMeteredStatusEnergyStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 6, 2, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusEnergyStart.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2OutletMeteredStatusEnergyStart.setDescription('Indicates the date and time of the last device energy \n\t\t\tmeter reset.')
ePDU2SensorTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2SensorTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2SensorTableSize.setDescription('ePDU2SensorTableSize')
ePDU2GroupNumberOfDevices = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2GroupNumberOfDevices.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2GroupNumberOfDevices.setDescription('Getting this OID will return the number of Rack PDU devices contributing \n\t\t\tto the Daisy Chain group power and energy values. Queries \n\t\t\tto slave units in an Daisy Chain group will return 0.')
ePDU2GroupTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 8, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2GroupTotalPower.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2GroupTotalPower.setDescription('Getting this OID will return the total power consumption of the Rack PDU \n\t\t\tDaisy Chain group devices in watts. Queries to slave \n\t\t\tunits in an Daisy Chain group will return 0.')
ePDU2GroupTotalEnergy = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePDU2GroupTotalEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2GroupTotalEnergy.setDescription('Getting this OID will return the total energy consumption of the Rack \n\t\t\tPDU Daisy Chain group devices in tenths of kilowatt-hours. \n\t\t\t\n\t\t\tTo reset the energy meters for each of the Rack PDU devices that contribute \n\t\t\tto this value, see the ePDU2GroupEnergyReset OID.\n\t\t\t\n\t\t\tTo view the start time for each of the Rack PDU device energy meters that \n\t\t\tcontribute to this value, see the ePDU2DeviceStatusEnergyStartTime OID.\n\t\t\t\n\t\t\tQueries to slave units in an Daisy Chain group will return 0.')
ePDU2GroupEnergyReset = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2GroupEnergyReset.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2GroupEnergyReset.setDescription('Setting this OID to reset (2) will cause the device energy meter value \n\t\t\ton each device in the Rack PDU Daisy Chain group to be reset to zero. \n\n\t\t\tGetting this OID in models that support this feature will do nothing \n\t\t\tand return the noOperation(1) value.')
ePDU2GroupPeakRecordReset = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 6, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePDU2GroupPeakRecordReset.setStatus('mandatory')
if mibBuilder.loadTexts: ePDU2GroupPeakRecordReset.setDescription('Setting this OID to reset (2) will cause the device peak record value \n\t\t\ton each device in the Rack PDU Daisy Chain group to be reset to current\n\t\t\tload/power. \n\t\t\t\n\t\t\tGetting this OID in models that support this feature will do nothing \n\t\t\tand return the noOperation(1) value.')
bmIdentModelName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmIdentModelName.setStatus('mandatory')
if mibBuilder.loadTexts: bmIdentModelName.setDescription('Battery manager model name.')
bmIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmIdentHardwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: bmIdentHardwareRev.setDescription('Battery manager hardware version.')
bmIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmIdentFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: bmIdentFirmwareRev.setDescription('Battery manager firmware version.')
bmIdentLCDHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmIdentLCDHardwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: bmIdentLCDHardwareRev.setDescription('Battery manager LCD hardware version.')
bmIdentLCDFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmIdentLCDFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: bmIdentLCDFirmwareRev.setDescription('Battery manager LCD firmware version.')
bmIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmIdentDateOfManufacture.setStatus('mandatory')
if mibBuilder.loadTexts: bmIdentDateOfManufacture.setDescription('Battery manager manufacture date.')
bmIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmIdentSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: bmIdentSerialNumber.setDescription('Battery manager serial number.')
bmIdentName = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmIdentName.setStatus('mandatory')
if mibBuilder.loadTexts: bmIdentName.setDescription('Battery manager system identification name.')
bmIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmIdentLocation.setStatus('mandatory')
if mibBuilder.loadTexts: bmIdentLocation.setDescription('Battery manager system location.')
bmPropertyStringMax = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmPropertyStringMax.setStatus('mandatory')
if mibBuilder.loadTexts: bmPropertyStringMax.setDescription('Battery manager max string count supported.')
bmPropertyMaxProbeOnString = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmPropertyMaxProbeOnString.setStatus('mandatory')
if mibBuilder.loadTexts: bmPropertyMaxProbeOnString.setDescription('Battery manager max probes on a string supported.')
bmPropertyInputVoltageRange = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmPropertyInputVoltageRange.setStatus('mandatory')
if mibBuilder.loadTexts: bmPropertyInputVoltageRange.setDescription('Battery manager line input voltage range.')
bmPropertyProbesRating = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("probeUnknown", 1), ("probe2V", 2), ("probe4V", 3), ("probe6V", 4), ("probe12V", 5), ("probeMixed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmPropertyProbesRating.setStatus('mandatory')
if mibBuilder.loadTexts: bmPropertyProbesRating.setDescription('Battery probes model rating.')
bmConfigBattAH = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigBattAH.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigBattAH.setDescription('Battery manager battery AH type configuration, unit in 0.1 AH.')
bmConfigStringCount = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigStringCount.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigStringCount.setDescription('Battery manager string count setting.')
bmConfigProbesCountOnString = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigProbesCountOnString.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigProbesCountOnString.setDescription('Battery manager probe count on a string setting.')
bmConfigLowVoltAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigLowVoltAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigLowVoltAlarmThreshold.setDescription('Battery low voltage alarm threshold setting, unit in 0.1 volt.')
bmConfigHighVoltAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigHighVoltAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigHighVoltAlarmThreshold.setDescription('Battery high voltage alarm threshold setting, unit in 0.1 volt.')
bmConfigVoltDiffAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigVoltDiffAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigVoltDiffAlarmThreshold.setDescription('Batteries within a string voltage difference threshold, unit in 0.1 volt.')
bmConfigLowTempAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigLowTempAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigLowTempAlarmThreshold.setDescription('Battery low temperature alarm threshold, unit in 0.1 degree C.')
bmConfigHighTempAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigHighTempAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigHighTempAlarmThreshold.setDescription('Battery high temperature alarm threshold, unit in 0.1 degree C.')
bmConfigLowResAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigLowResAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigLowResAlarmThreshold.setDescription('Battery low resistance alarm threshold, unit in 0.01 mOhm.')
bmConfigHighResAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigHighResAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigHighResAlarmThreshold.setDescription('Battery high resistance alarm threshold, unit in 0.01 mOhm.')
bmConfigLowResWarnThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigLowResWarnThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigLowResWarnThreshold.setDescription('Battery low resistance warning threshold, unit in 0.01 mOhm.')
bmConfigHighResWarnThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigHighResWarnThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigHighResWarnThreshold.setDescription('Battery high resistance warning threshold, unit in 0.01 mOhm.')
bmConfigResHealthAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigResHealthAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigResHealthAlarmThreshold.setDescription('Battery resistance health alarm threshold, unit in percentage and should larger than 100.')
bmConfigResHealthWarnThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigResHealthWarnThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigResHealthWarnThreshold.setDescription('Battery resistance health warn threshold, unit in percentage and should larger than 100.')
bmConfigLowVoltAlarmThreshold10mV = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigLowVoltAlarmThreshold10mV.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigLowVoltAlarmThreshold10mV.setDescription('Battery low voltage alarm threshold setting, unit in 10 mV (0.01 volt).')
bmConfigHighVoltAlarmThreshold10mV = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigHighVoltAlarmThreshold10mV.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigHighVoltAlarmThreshold10mV.setDescription('Battery high voltage alarm threshold setting, unit in 10 mV (0.01 volt).')
bmConfigMergeFeature = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmConfigMergeFeature.setStatus('mandatory')
if mibBuilder.loadTexts: bmConfigMergeFeature.setDescription('String merge feature setting.')
bmControlSysytemIdenticator = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestIndicators", 1), ("testIndicators", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmControlSysytemIdenticator.setStatus('mandatory')
if mibBuilder.loadTexts: bmControlSysytemIdenticator.setDescription('Battery manager will perform a panel indicator test when the variable is set to testIndicators(2).\n       Get this oid will get noTestIndicators(1).')
bmControlProbeIndicator = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestIndicators", 1), ("testIndicators", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmControlProbeIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: bmControlProbeIndicator.setDescription('Battery manager will perform a probe indicator test when the variable is set to testIndicators(2).\n       Get this oid will get noTestIndicators(1).')
bmProbesNum = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesNum.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesNum.setDescription('Current connected probe number.')
bmProbesTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesTableSize.setDescription('Current configured probe number.')
bmProbesTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 3), )
if mibBuilder.loadTexts: bmProbesTable.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesTable.setDescription('Allows for getting of status of probes.')
bmProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 3, 1), ).setIndexNames((0, "CPS-MIB", "bmProbesIndex"))
if mibBuilder.loadTexts: bmProbesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesEntry.setDescription('The status of probes installation to gather status from.')
bmProbesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesIndex.setDescription('Probes table index')
bmProbesPackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesPackIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesPackIndex.setDescription('The battery pack number the probe installed.')
bmProbesStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesStringIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesStringIndex.setDescription('The string number the probe installed.')
bmProbesBattIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesBattIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesBattIndex.setDescription('The battery number the probe installed.')
bmProbesVoltageTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltageTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesVoltageTableSize.setDescription('The size of the battery voltage table')
bmProbesVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5), )
if mibBuilder.loadTexts: bmProbesVoltageTable.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesVoltageTable.setDescription('Allows for getting of voltage of batteries.')
bmProbesVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1), ).setIndexNames((0, "CPS-MIB", "bmProbesVoltageIndex"))
if mibBuilder.loadTexts: bmProbesVoltageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesVoltageEntry.setDescription('Batteries voltage status.')
bmProbesVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltageIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesVoltageIndex.setDescription('The index of the voltage status entry.')
bmProbesVoltagePackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltagePackIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesVoltagePackIndex.setDescription('The battery pack index to the voltage record.')
bmProbesVoltageStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltageStringIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesVoltageStringIndex.setDescription('The battery string index to the voltage record.')
bmProbesVoltageBattIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltageBattIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesVoltageBattIndex.setDescription('The battery index to the voltage record within its string.')
bmProbesVoltageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltageProbeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesVoltageProbeIndex.setDescription('The probe index to the voltage record.')
bmProbesVoltageAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("voltageNormal", 1), ("voltageWarnLow", 2), ("voltageWarnHigh", 3), ("voltageAlarmLow", 4), ("voltageAlarmHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltageAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesVoltageAlarmStatus.setDescription('The battery voltage alarm status.')
bmProbesVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesVoltage.setDescription('Getting this oid to get battery voltage, unit in 10mV (0.01 volt).')
bmProbesVoltageEqualPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesVoltageEqualPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesVoltageEqualPercentage.setDescription('Getting this oid to get battery voltage equalizing power, unit in percentage.')
bmProbesTempTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTempTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesTempTableSize.setDescription('The size of the Temperature table')
bmProbesTempTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7), )
if mibBuilder.loadTexts: bmProbesTempTable.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesTempTable.setDescription('Allows for getting of temperature of probes.')
bmProbesTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1), ).setIndexNames((0, "CPS-MIB", "bmProbesTempIndex"))
if mibBuilder.loadTexts: bmProbesTempEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesTempEntry.setDescription('Temperature status entry.')
bmProbesTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTempIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesTempIndex.setDescription('The index of the temperature entry.')
bmProbesTempPackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTempPackIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesTempPackIndex.setDescription('The battery pack index of the temperature entry.')
bmProbesTempStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTempStringIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesTempStringIndex.setDescription('The index to the string.')
bmProbesTempBattIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTempBattIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesTempBattIndex.setDescription('The index to the battery.')
bmProbesTempProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTempProbeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesTempProbeIndex.setDescription('The index to the probe.')
bmProbesTempAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("temperatureNormal", 1), ("temperatureWarnLow", 2), ("temperatureWarnHigh", 3), ("temperatureAlarmLow", 4), ("temperatureAlarmHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTempAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesTempAlarmStatus.setDescription('The alarm status of the temperature.')
bmProbesTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesTemperature.setDescription('The temperature record, measure in 0.1 degree C.')
bmProbesResTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesResTableSize.setDescription('The size of the Resistance table')
bmProbesResTable = MibTable((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9), )
if mibBuilder.loadTexts: bmProbesResTable.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesResTable.setDescription('Allows for getting of resistance of probes.')
bmProbesResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1), ).setIndexNames((0, "CPS-MIB", "bmProbesResIndex"))
if mibBuilder.loadTexts: bmProbesResEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesResEntry.setDescription('The resistance status entry.')
bmProbesResIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesResIndex.setDescription('The index of the resistance entry.')
bmProbesResPackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResPackIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesResPackIndex.setDescription('The battery pack index to the resistance entry.')
bmProbesResStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResStringIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesResStringIndex.setDescription('The index to the string.')
bmProbesResBattIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResBattIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesResBattIndex.setDescription('The index to the battery.')
bmProbesResProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResProbeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesResProbeIndex.setDescription('The index to the probe.')
bmProbesResAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("resistanceNormal", 1), ("resistanceWarnLow", 2), ("resistanceWarnHigh", 3), ("resistanceAlarmLow", 4), ("resistanceAlarmHigh", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesResAlarmStatus.setDescription('The alarm status of the battery resistance.')
bmProbesResistance = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResistance.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesResistance.setDescription('The resistance of the battery, unit in 0.01 mOhm.')
bmProbesResHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 5, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmProbesResHealth.setStatus('mandatory')
if mibBuilder.loadTexts: bmProbesResHealth.setDescription('The resistance health status, unit in percentage.')
bmFuncResMeasureInterval = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 6, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmFuncResMeasureInterval.setStatus('mandatory')
if mibBuilder.loadTexts: bmFuncResMeasureInterval.setDescription('The time interval for battery manager to exercising resistance measurement, unit in hour(s).')
bmFuncResMeasureManualCmd = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noResMeasure", 1), ("resMeasureNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmFuncResMeasureManualCmd.setStatus('mandatory')
if mibBuilder.loadTexts: bmFuncResMeasureManualCmd.setDescription('This oid allows user to manual resistance measurement. \n      Set this oid to measureResNow(2) to measure resistance immediately.\n      \n      Get bmFuncResMeasureLastCmdResult oid to check command acceptance.\n      ')
bmFuncResMeasureManualResult = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9))).clone(namedValues=NamedValues(("resNoManualResult", 1), ("resManualProcessing", 2), ("resManualComplete", 3), ("resManualReject", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmFuncResMeasureManualResult.setStatus('mandatory')
if mibBuilder.loadTexts: bmFuncResMeasureManualResult.setDescription('Get this oid to confirm the last manual command result.')
bmFuncResMeasureLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmFuncResMeasureLastUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: bmFuncResMeasureLastUpdate.setDescription('When resistance measurement complete either by auto or manual, \n      this oid will update to the last update time.')
bmFuncEqualEnable = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmFuncEqualEnable.setStatus('mandatory')
if mibBuilder.loadTexts: bmFuncEqualEnable.setDescription('Battery voltage equalization configuration.')
bmFuncEqualActiveCond = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmFuncEqualActiveCond.setStatus('mandatory')
if mibBuilder.loadTexts: bmFuncEqualActiveCond.setDescription('Volatge equalization will active when the voltage difference larger than this value, unit in 10mV.')
bmFuncEqualStatus = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9))).clone(namedValues=NamedValues(("equalActive", 1), ("equalFailed", 2), ("equalNotActive", 3), ("equalNotSupport", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmFuncEqualStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bmFuncEqualStatus.setDescription('This oid shows the current equalization status.')
bmFuncEqualStartTime = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmFuncEqualStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: bmFuncEqualStartTime.setDescription('This oid shows the last equalization start time.')
bmFuncEqualElapseTime = MibScalar((1, 3, 6, 1, 4, 1, 3808, 1, 1, 7, 7, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmFuncEqualElapseTime.setStatus('mandatory')
if mibBuilder.loadTexts: bmFuncEqualElapseTime.setDescription('This oid shows the elapsed time since last equalization started.')
communicationLost = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,1)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: communicationLost.setDescription('SEVERE: Communication with the UPS has been lost.')
upsOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,2)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsOverload.setDescription('SEVERE: The UPS has sensed an overload condition.')
upsDiagnosticsFailed = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,3)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsDiagnosticsFailed.setDescription('SEVERE: The UPS battery test failed.')
upsDischarged = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,4)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsDischarged.setDescription('SEVERE: The UPS has started a runtime estimation process.')
upsOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,5)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsOnBattery.setDescription('WARNING: Utility power failed, transfer to backup mode.')
upsBoostOn = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,6)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsBoostOn.setDescription('WARNING: The UPS has enabled boost, low utility voltage.')
lowBattery = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,7)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: lowBattery.setDescription('SEVERE: The UPS battery capacity is low than threshold, soon to be exhausted.')
communicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,8)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: communicationEstablished.setDescription('INFORMATIONAL: Communication to the UPS has been established.')
powerRestored = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,9)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: powerRestored.setDescription('INFORMATIONAL: Utility power restored, return from backup mode.')
upsDiagnosticsPassed = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,10)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsDiagnosticsPassed.setDescription('INFORMATIONAL: The UPS battery test passed.')
returnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,11)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: returnFromLowBattery.setDescription('INFORMATIONAL: The UPS has returned from a low battery condition.')
upsTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,12)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsTurnedOff.setDescription('WARNING: The UPS has been turned off.')
upsSleeping = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,13)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsSleeping.setDescription('WARNING: The UPS entered sleep mode. Output power will not be provided.')
upsWokeUp = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,14)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsWokeUp.setDescription('INFORMATION: The UPS woke up from sleep mode. Output power is being provided.')
upsRebootStarted = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,15)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsRebootStarted.setDescription('WARNING: The UPS started reboot sequence.')
upsOverTemp = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,16)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsOverTemp.setDescription('SEVERE: The UPS inner temperature is too high.')
returnFromOverTemp = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,17)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: returnFromOverTemp.setDescription('INFORMATIONAL: The UPS over temperature condition cleared.')
upsBuckOn = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,18)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsBuckOn.setDescription('WARNING: The UPS has enabled buck, high utility voltage.')
returnFromOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,19)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: returnFromOverLoad.setDescription('INFORMATIONAL: The UPS has returned from an overload condition.')
returnFromDischarged = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,20)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: returnFromDischarged.setDescription('INFORMATIONAL: The UPS runtime estimation completed.')
upsScheduleShutdown = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,21)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsScheduleShutdown.setDescription('WARNING: The UPS has started its schedule shutdown sequence.')
upsEnterSleep = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,22)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsEnterSleep.setDescription('WARNING: The UPS started sleep sequence.')
upsChargerFailure = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,23)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsChargerFailure.setDescription('WARNING: The battery charger is abnormal.')
returnFromChargerFailure = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,24)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: returnFromChargerFailure.setDescription('INFORMATIONAL: The charger returned from a failure condition.')
upsTurnoffStarted = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,25)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsTurnoffStarted.setDescription('WARNING: The UPS started turn off sequence.')
upsTurnedOn = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,26)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsTurnedOn.setDescription('WARNING: The UPS has been turned on.')
upsRemoteCommandFailed = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,27)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsRemoteCommandFailed.setDescription('WARNING: The UPS remote command failed.')
upsLostRedundant = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,28)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsLostRedundant.setDescription('WARNING: Not enough power redundancy modules.')
upsSignalClientShutdown = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,29)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsSignalClientShutdown.setDescription('SEVERE: The UPS has signaled clients to shutdown.')
upsEmergencyPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,30)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsEmergencyPowerOff.setDescription('Emergency Power Off (EPO)')
nclBankOn = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,31)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: nclBankOn.setDescription('INFORMATIONAL: Non-Critical bank has been turned on.')
nclBankOff = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,32)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: nclBankOff.setDescription('INFORMATIONAL: Non-Critical bank has been turned off.')
upsCommandCancel = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,33)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsCommandCancel.setDescription('INFORMATION: The cancel command has been executed.')
upsStartBatteryTest = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,34)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsStartBatteryTest.setDescription('INFORMATION: The UPS has started a battery test process.')
upsRemainRuntimeLowThanThreshold = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,35)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsRemainRuntimeLowThanThreshold.setDescription('WARNING: The UPS remaining runtime is lower than threshold.')
nclBankStartScheduleOff = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,36)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: nclBankStartScheduleOff.setDescription('INFORMATION: Non-Critial bank has started its schedule off sequence.')
upsEstimationAbort = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,37)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsEstimationAbort.setDescription('WARNING: The UPS runtime estimation aborted.')
upsHardwareFault = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,38)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsHardwareFault.setDescription('WARNING: The UPS hardware fault.')
upsBatteryNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,39)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsBatteryNotPresent.setDescription('WARNING: Battery is not present.')
upsWiringFault = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,40)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsWiringFault.setDescription('WARNING: The UPS wiring fault has been detected.')
upsWiringFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,41)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsWiringFaultCleared.setDescription('INFORMATION: The UPS wiring fault has been cleared.')
upsEnterBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,42)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsEnterBypassMode.setDescription('WARNING: The UPS enters bypass mode.')
upsReturnFromBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,43)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsReturnFromBypassMode.setDescription('INFORMATION: The UPS leaves bypass mode.')
upsBypassOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,44)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsBypassOverload.setDescription('WARNING: The UPS bypass overload.')
upsBypassOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,45)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsBypassOverloadCleared.setDescription('INFORMATION: The UPS bypass overload has been cleared.')
upsEnterECOMode = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,46)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsEnterECOMode.setDescription('WARNING: The UPS enters ECO mode.')
upsReturnFromECOMode = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,47)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsReturnFromECOMode.setDescription('WARNING: The UPS leaves ECO mode.')
upsBatteryOverThreeYear = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,48)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsBatteryOverThreeYear.setDescription('WARNING: Battery has been 3 years from last Replacement.')
upsBatteryExpiration = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,49)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsBatteryExpiration.setDescription('WARNING: The battery may not work well anymore.')
upsBatteryReplacement = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,50)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsBatteryReplacement.setDescription('WARNING: The battery has been replaced.')
upsModuleInvertorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,51)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsModuleInvertorAlarm.setDescription('WARNING: The UPS module invertor alarm.')
upsModuleRectifierAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,52)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsModuleRectifierAlarm.setDescription('WARNING: The UPS module rectifier alarm.')
upsModuleFanAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,53)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsModuleFanAlarm.setDescription('WARNING: The UPS module fan alarm.')
upsModuleManualShutdown = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,54)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsModuleManualShutdown.setDescription('WARNING: The UPS module manual shutdown.')
upsModuleOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,55)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsModuleOverload.setDescription('WARNING: The UPS module overload.')
upsFirmwareUpgradeStart = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,56)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsFirmwareUpgradeStart.setDescription('WARNING: UPS firmware starts to update.')
upsFirmwareUpgradeEnd = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,57)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsFirmwareUpgradeEnd.setDescription('WARNING: UPS firmware update is over.')
upsRFC1628TrapOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,58)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsRFC1628TrapOnBattery.setDescription('WARNING: RFC1628: UPS is on battery.')
upsRFC1628TrapTestCompleted = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,59)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsRFC1628TrapTestCompleted.setDescription('WARNING: RFC1628: UPS test completed.')
upsRFC1628TrapAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,60)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: upsRFC1628TrapAlarmEntryAdded.setDescription('WARNING: RFC1628: Alarm entry added.')
failAuthViaHTTP = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,61)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: failAuthViaHTTP.setDescription('WARNING: Login authorization failure via HTTP.')
passwordChange = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,62)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: passwordChange.setDescription('INFORMATION: The password has been changed.')
failAuthViaConsole = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,63)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: failAuthViaConsole.setDescription('WARNING: Login authorization failure via Console.')
configFileUpload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,64)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: configFileUpload.setDescription('INFORMATION: Configuration file uploaded.')
adminLoginInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,65)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: adminLoginInfo.setDescription('INFORMATION: Administrator login.')
adminLogoutInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,66)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: adminLogoutInfo.setDescription('INFORMATION: Administrator logout.')
deviceLoginInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,67)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: deviceLoginInfo.setDescription('INFORMATION: Device login.')
deviceLogoutInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,68)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: deviceLogoutInfo.setDescription('INFORMATION: Device logout.')
configurationChanged = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,69)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: configurationChanged.setDescription('INFORMATION: Configuration has been changed.')
clientRegistered = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,70)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: clientRegistered.setDescription('Information: PowerPanel client has been registered.')
clientRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,71)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: clientRemoved.setDescription('Information: PowerPanel client has been removed.')
testEvent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,72)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: testEvent.setDescription('Information: Test Event.')
outletUserLoginInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,73)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: outletUserLoginInfo.setDescription('Information: Outlet User login.')
outletUserLogoutInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,74)).setObjects(("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: outletUserLogoutInfo.setDescription('Information: Outlet User logout.')
ePDUCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,100)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUCommunicationEstablished.setDescription('INFORMATIONAL: Communication with a Rack PDU has been established.\n       The first argument is the serial number.\n       The second argument is the device name.')
ePDUCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,101)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUCommunicationLost.setDescription('SEVERE: Communication with a Rack PDU has been lost.\n       The first argument is the serial number.\n       The second argument is the device name.')
ePDUOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,102)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletControlIndex"), ("CPS-MIB", "ePDUOutletControlOutletName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUOutletOn.setDescription('INFORMATIONAL: An outlet on a Switched Rack PDU has turned on.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet index number.\n       The fourth argument is the outlet name.')
ePDUOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,103)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletControlIndex"), ("CPS-MIB", "ePDUOutletControlOutletName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUOutletOff.setDescription('INFORMATIONAL: An outlet on a Switched Rack PDU has turned off.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet index number.\n       The fourth argument is the outlet name.')
ePDUDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,104)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUDeviceConfigChange.setDescription('INFORMATIONAL: A device configuration change has been made on a \n       Rack PDU.\n       The first argument is the serial number.\n       The second argument is the device name.')
ePDUOutletConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,105)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletControlIndex"), ("CPS-MIB", "ePDUOutletControlOutletName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUOutletConfigChange.setDescription('INFORMATIONAL: An outlet configuration change has been made on a \n       Switched Rack PDU.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet index number.\n       The fourth argument is the outlet name.')
ePDULowLoad = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,106)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDULowLoad.setDescription('WARNING: A Rack PDU has violated the low load threshold.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the phase number.')
ePDULowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,107)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDULowLoadCleared.setDescription('INFORMATIONAL: The low load condition on a Rack PDU has been \n       cleared.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the phase number.')
ePDUNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,108)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUNearOverload.setDescription('WARNING: A Rack PDU is near an overload condition.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the phase number.')
ePDUNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,109)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUNearOverloadCleared.setDescription('INFORMATIONAL: The near overload condition on a Rack PDU has \n       been cleared.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the phase number.')
ePDUOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,110)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUOverload.setDescription('SEVERE: A Rack PDU is in an overload condition.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the phase number.')
ePDUOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,111)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUOverloadCleared.setDescription('INFORMATIONAL: The overload condition on a Rack PDU has been \n       cleared.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the phase number.')
ePDUDelayOutletOnCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,112)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletControlIndex"), ("CPS-MIB", "ePDUOutletControlOutletName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUDelayOutletOnCommand.setDescription('INFORMATIONAL: An outlet on a Switched Rack PDU has been assigned to turn on.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet index number.\n       The fourth argument is the outlet name.')
ePDUDelayOutletOffCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,113)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletControlIndex"), ("CPS-MIB", "ePDUOutletControlOutletName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUDelayOutletOffCommand.setDescription('INFORMATIONAL: An outlet on a Switched Rack PDU has been assigned to turn off.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet index number.\n       The fourth argument is the outlet name.')
ePDUDelayOutletRebootCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,114)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletControlIndex"), ("CPS-MIB", "ePDUOutletControlOutletName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUDelayOutletRebootCommand.setDescription('INFORMATIONAL: An outlet on a Switched Rack PDU has been assigned to reboot.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet index number.\n       The fourth argument is the outlet name.')
ePDUCancelPendingCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,115)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletControlIndex"), ("CPS-MIB", "ePDUOutletControlOutletName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUCancelPendingCommand.setDescription('INFORMATIONAL: A cancel pending command has been made on a\n       Switched Rack PDU.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet index number (0 indicates all outlets).\n       The fourth argument is the outlet name (or device name if all outlets).')
ePDULineUndervoltage = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,116)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDULineUndervoltage.setDescription('SEVERE: Utility Line Undervoltage\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the phase number.')
ePDULineUndervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,117)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDULineUndervoltageCleared.setDescription('INFORMATIONAL: Utility Line Undervoltage Cleared.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the phase number.')
ePDULineOvervoltage = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,118)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDULineOvervoltage.setDescription('SEVERE: Utility Line Overvoltage.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the phase number.')
ePDULineOvervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,119)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusPhaseNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDULineOvervoltageCleared.setDescription('INFORMATIONAL: Utility Line Overvoltage Cleared.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the phase number.')
ePDUPowerSupply1Fail = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,120)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUPowerSupply1Fail.setDescription('SEVERE: Power Supply 1 on Rack PDU is in FAIL state.\n       The first argument is the serial number.\n       The second argument is the device name.')
ePDUPowerSupply1Ok = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,121)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUPowerSupply1Ok.setDescription('INFORMATIONAL: Power Supply 1 on Rack PDU is operating normally.\n       The first argument is the serial number.\n       The second argument is the device name.')
ePDUPowerSupply2Fail = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,122)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUPowerSupply2Fail.setDescription('SEVERE: Power Supply 2 on Rack PDU is in FAIL state.\n       The first argument is the serial number.\n       The second argument is the device name.')
ePDUPowerSupply2Ok = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,123)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUPowerSupply2Ok.setDescription('INFORMATIONAL: Power Supply 2 on Rack PDU is operating normally.\n       The first argument is the serial number.\n       The second argument is the device name.')
ePDUBankLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,124)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusBankNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUBankLowLoad.setDescription('WARNING: A Rack PDU bank has violated the low load threshold.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the bank number.')
ePDUBankLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,125)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusBankNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUBankLowLoadCleared.setDescription('INFORMATIONAL: The low load condition on a Rack PDU bank has been \n       cleared.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the bank number.')
ePDUBankNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,126)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusBankNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUBankNearOverload.setDescription('WARNING: A Rack PDU bank is near an overload condition.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the bank number.')
ePDUBankNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,127)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusBankNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUBankNearOverloadCleared.setDescription('INFORMATIONAL: The near overload condition on a Rack PDU bank has \n       been cleared.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the phase/bank number.')
ePDUBankOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,128)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusBankNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUBankOverload.setDescription('SEVERE: A Rack PDU bank is in an overload condition.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the bank number.')
ePDUBankOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,129)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDULoadStatusBankNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUBankOverloadCleared.setDescription('INFORMATIONAL: The overload condition on a Rack PDU bank has been \n       cleared.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the bank number.')
ePDUComponentCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,130)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUComponentCommunicationEstablished.setDescription('INFORMATIONAL: Component communication lost has been cleared.\n       The first argument is the serial number.\n       The second argument is the device name.')
ePDUComponentCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,131)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUComponentCommunicationLost.setDescription('SEVERE: Component communication lost.\n       The first argument is the serial number.\n       The second argument is the device name.')
ePDUOutletLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,132)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletConfigMonitoredNumber"), ("CPS-MIB", "ePDUOutletConfigMonitoredName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUOutletLowLoad.setDescription('WARNING: A Rack PDU has violated the outlet low load threshold.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet number.\n       The fourth argument is the outlet name.')
ePDUOutletLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,133)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletConfigMonitoredNumber"), ("CPS-MIB", "ePDUOutletConfigMonitoredName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUOutletLowLoadCleared.setDescription('INFORMATIONAL: The outlet low load condition on a Rack PDU has been \n       cleared. \n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet number.\n       The fourth argument is the outlet name.')
ePDUOutletNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,134)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletConfigMonitoredNumber"), ("CPS-MIB", "ePDUOutletConfigMonitoredName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUOutletNearOverload.setDescription('WARNING: A Rack PDU is near an outlet overload condition.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet number.\n       The fourth argument is the outlet name.')
ePDUOutletNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,135)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletConfigMonitoredNumber"), ("CPS-MIB", "ePDUOutletConfigMonitoredName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUOutletNearOverloadCleared.setDescription('INFORMATIONAL: The outlet near overload condition on a Rack PDU has \n       been cleared.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet number.\n       The fourth argument is the outlet name.')
ePDUOutletOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,136)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletConfigMonitoredNumber"), ("CPS-MIB", "ePDUOutletConfigMonitoredName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUOutletOverload.setDescription('SEVERE: A Rack PDU is in an overload condition.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet number.\n       The fourth argument is the outlet name.')
ePDUOutletOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,137)).setObjects(("CPS-MIB", "ePDUIdentSerialNumber"), ("CPS-MIB", "ePDUIdentName"), ("CPS-MIB", "ePDUOutletConfigMonitoredNumber"), ("CPS-MIB", "ePDUOutletConfigMonitoredName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: ePDUOutletOverloadCleared.setDescription('INFORMATIONAL: The outlet overload condition on a Rack PDU has been \n       cleared.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet number.\n       The fourth argument is the outlet name.')
envHighTemperatureViolation = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,200)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirTemperature"))
if mibBuilder.loadTexts: envHighTemperatureViolation.setDescription('WARNING: The environment high temperature threshold has been violated.')
envHighTemperatureBack = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,201)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirTemperature"))
if mibBuilder.loadTexts: envHighTemperatureBack.setDescription('INFORMATION: The environment temperature returned from high value.')
envLowTemperatureViolation = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,202)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirTemperature"))
if mibBuilder.loadTexts: envLowTemperatureViolation.setDescription('WARNING: The environment low temperature threshold has been violated.')
envLowTempBack = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,203)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirTemperature"))
if mibBuilder.loadTexts: envLowTempBack.setDescription('INFORMATION: The environment temperature returned from low value.')
envHighHumidityViolation = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,204)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirHumidity"))
if mibBuilder.loadTexts: envHighHumidityViolation.setDescription('WARNING: The environment high humidity threshold has been violated.')
envHighHumidityBack = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,205)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirHumidity"))
if mibBuilder.loadTexts: envHighHumidityBack.setDescription('INFORMATION: The environment humidity return from high value.')
envLowHumidityViolation = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,206)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirHumidity"))
if mibBuilder.loadTexts: envLowHumidityViolation.setDescription('WARNING: The environment low humidity threshold has been violated.')
envLowHumdBack = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,207)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirHumidity"))
if mibBuilder.loadTexts: envLowHumdBack.setDescription('INFORMATION: The environment humidity return from low value.')
envDryContactAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,208)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirContactIndex"), ("CPS-MIB", "envirContactName"))
if mibBuilder.loadTexts: envDryContactAbnormal.setDescription('INFORMATION: The Contact is abnormal.')
envDryContactNormal = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,209)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirContactIndex"), ("CPS-MIB", "envirContactName"))
if mibBuilder.loadTexts: envDryContactNormal.setDescription('INFORMATION: The Contact has returned from abnormal.')
envConntected = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,210)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"))
if mibBuilder.loadTexts: envConntected.setDescription('INFORMATION: The Environment Sensor has been connected.')
envDisconntected = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,211)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"))
if mibBuilder.loadTexts: envDisconntected.setDescription('INFORMATION: The Environment Sensor has been disconnected.')
envRateOfTemperatureChangeAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,212)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirTemperature"))
if mibBuilder.loadTexts: envRateOfTemperatureChangeAbnormal.setDescription('INFORMATION: The rate of temperature change is abnormal.')
envRateOfHumdChangeAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,213)).setObjects(("CPS-MIB", "envirIdentName"), ("CPS-MIB", "envirIdentLocation"), ("CPS-MIB", "envirHumidity"))
if mibBuilder.loadTexts: envRateOfHumdChangeAbnormal.setDescription('INFORMATION: The rate of humidity change is abnormal.')
atsSwitchSource = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,301)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusSelectedSource"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsSwitchSource.setDescription('INFORMATIONAL: ATS has switched source.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the selected source.')
atsSourceFault = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,302)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsSourceFault.setDescription('WARNING: Source fault occurs.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the source name.')
atsSourceFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,303)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsSourceFaultCleared.setDescription('INFORMATIONAL: Source fault has been cleared.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the source name.')
atsRedundancyFail = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,304)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsRedundancyFail.setDescription('WARNING: Redundancy fails.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the source name.')
atsRedundancyRestored = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,305)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsRedundancyRestored.setDescription('INFORMATIONAL: Redundancy has been restored.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the source name.')
atsInputHighVoltage = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,306)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputVoltage"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsInputHighVoltage.setDescription('WARNING: The upper voltage limit has been crossed.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the source name.\n       The fourth argument is the phase voltage.')
atsInputHighVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,307)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputVoltage"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsInputHighVoltageCleared.setDescription('INFORMATIONAL: The upper voltage condition has been cleared.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the source name.\n       The fourth argument is the phase voltage.')
atsInputLowVoltage = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,308)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputVoltage"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsInputLowVoltage.setDescription('WARNING: The lower voltage limit has been crossed.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the source name.\n       The fourth argument is the phase voltage.')
atsInputLowVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,309)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputVoltage"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsInputLowVoltageCleared.setDescription('INFORMATIONAL: The lower voltage condition has been cleared.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the source name.\n       The fourth argument is the phase voltage.')
atsInputHighFrequency = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,310)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputFrequency"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsInputHighFrequency.setDescription('WARNING: The upper frequency limit has been crossed.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the source name.\n       The fourth argument is the input frequency.')
atsInputHighFrequencyCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,311)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputFrequency"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsInputHighFrequencyCleared.setDescription('INFORMATIONAL: The upper frequency condition has been cleared.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the source name.\n       The fourth argument is the input frequency.')
atsInputLowFrequency = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,312)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputFrequency"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsInputLowFrequency.setDescription('WARNING: The lower frequency limit has been crossed.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the source name.\n       The fourth argument is the input frequency.')
atsInputLowFrequencyCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,313)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusInputName"), ("CPS-MIB", "atsStatusInputFrequency"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsInputLowFrequencyCleared.setDescription('INFORMATIONAL: The lower frequency condition has been cleared.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the source name.\n       The fourth argument is the input frequency.')
atsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,314)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsCommunicationLost.setDescription('MAJOR: ATS communication lost.\n       The first argument is the device name.\n       The second argument is the serial number.')
atsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,315)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsCommunicationEstablished.setDescription('INFORMATIONAL: ATS communication has been established.\n       The first argument is the device name.\n       The second argument is the serial number.')
atsLCDCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,316)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsLCDCommunicationLost.setDescription('WARNING: LCD communication lost.\n       The first argument is the device name.\n       The second argument is the serial number.')
atsLCDCommunicationLostCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,317)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsLCDCommunicationLostCleared.setDescription('INFORMATIONAL: LCD communication lost has been cleared.\n       The first argument is the device name.\n       The second argument is the serial number.')
atsDB9CommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,318)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsDB9CommunicationLost.setDescription('WARNING: DB9 communication lost.\n       The first argument is the device name.\n       The second argument is the serial number.')
atsDB9CommunicationLostCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,319)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsDB9CommunicationLostCleared.setDescription('INFORMATIONAL: DB9 communication lost has been cleared.\n       The first argument is the device name.\n       The second argument is the serial number.')
atsPowerSupplyFault = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,320)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusPowerSupplyInputSource"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsPowerSupplyFault.setDescription('CRITICAL: Power supply failure.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the input source of the power supply.')
atsPowerSupplyFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,321)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsStatusPowerSupplyInputSource"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsPowerSupplyFaultCleared.setDescription('CRITICAL: Power supply failure.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the input source of the power supply.')
atsDevHardwareFault = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,322)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsDevHardwareFault.setDescription('CRITICAL: Device hardware failure.\n       The first argument is the device name.\n       The second argument is the serial number.')
atsDevHardwareFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,323)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsDevHardwareFaultCleared.setDescription('INFORMATIONAL: Device hardware failure has been cleared.\n       The first argument is the device name.\n       The second argument is the serial number.')
atsSourceConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,324)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsSourceConfigChanged.setDescription('INFORMATIONAL: A source configuration change has been made.\n       The first argument is the device name.\n       The second argument is the serial number.')
atsDeviceConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,325)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsDeviceConfigChanged.setDescription('INFORMATIONAL: A device configuration change has been made.\n       The first argument is the device name.\n       The second argument is the serial number.')
atsOutletConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,326)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsOutletConfigChanged.setDescription('INFORMATIONAL: A outlet configuration change has been made.\n       The first argument is the device name.\n       The second argument is the serial number.')
atsEventCountsCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,327)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsEventCountsCleared.setDescription('INFORMATIONAL: Event counts has been cleared.\n       The first argument is the device name.\n       The second argument is the serial number.')
atsOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,328)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsLoadStatusBankTableIndex"), ("CPS-MIB", "atsLoadStatusBankLoad"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsOverload.setDescription('WARNING: The load has exceeded overload threshold.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the bank number.\n       The third argument is the load.')
atsOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,329)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsLoadStatusBankTableIndex"), ("CPS-MIB", "atsLoadStatusBankLoad"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsOverloadCleared.setDescription('INFORMATIONAL: The overload condition has been cleared.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the bank number.\n       The third argument is the load.')
atsNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,330)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsLoadStatusBankTableIndex"), ("CPS-MIB", "atsLoadStatusBankLoad"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsNearOverload.setDescription('WARNING: The load has exceeded near overload threshold.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the bank number.\n       The third argument is the load.')
atsNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,331)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsLoadStatusBankTableIndex"), ("CPS-MIB", "atsLoadStatusBankLoad"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsNearOverloadCleared.setDescription('INFORMATIONAL: The near overload condition has beed cleared.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the bank number.\n       The third argument is the load.')
atsLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,332)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsLoadStatusBankTableIndex"), ("CPS-MIB", "atsLoadStatusBankLoad"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsLowLoad.setDescription('WARNING: The load has been lower than low load threshold.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the bank number.\n       The third argument is the load.')
atsLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,333)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsLoadStatusBankTableIndex"), ("CPS-MIB", "atsLoadStatusBankLoad"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsLowLoadCleared.setDescription('INFORMATIONAL: The low load condition has been cleared.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the bank number.\n       The third argument is the load.')
atsOutletOnCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,334)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsOutletCtrlTableIndex"), ("CPS-MIB", "atsOutletCtrlOutletName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsOutletOnCommand.setDescription('INFORMATIONAL: An outlet on ATS has been assigned to turn on.\n       The first argument is the device name.\n       The second argument is the serial number.\n       The third argument is the outlet index number.\n       The fourth argument is the outlet name.')
atsOutletOffCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,335)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsOutletCtrlTableIndex"), ("CPS-MIB", "atsOutletCtrlOutletName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsOutletOffCommand.setDescription('INFORMATIONAL: An outlet on ATS has been assigned to turn off.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet index number.\n       The fourth argument is the outlet name.')
atsOutletRebootCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,336)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsOutletCtrlTableIndex"), ("CPS-MIB", "atsOutletCtrlOutletName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsOutletRebootCommand.setDescription('INFORMATIONAL: An outlet on ATS has been assigned to reboot.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet index number.\n       The fourth argument is the outlet name.')
atsCancelPendingCommand = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,337)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsOutletCtrlTableIndex"), ("CPS-MIB", "atsOutletCtrlOutletName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsCancelPendingCommand.setDescription('INFORMATIONAL: A cancel pending command has been made on ATS.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet index number (0 indicates all outlets).\n       The fourth argument is the outlet name (or device name if all outlets).')
atsOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,338)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsOutletCtrlTableIndex"), ("CPS-MIB", "atsOutletCtrlOutletName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsOutletOn.setDescription('INFORMATIONAL: An outlet on ATS has turned on.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet index number.\n       The fourth argument is the outlet name.')
atsOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,339)).setObjects(("CPS-MIB", "atsIdentName"), ("CPS-MIB", "atsIdentSerialNumber"), ("CPS-MIB", "atsOutletCtrlTableIndex"), ("CPS-MIB", "atsOutletCtrlOutletName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: atsOutletOff.setDescription('INFORMATIONAL: An outlet on ATS has turned off.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet index number.\n       The fourth argument is the outlet name.')
pduDeviceEvent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,400)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2DeviceConfigIndex"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduDeviceEvent.setDescription('INFORMATIONAL: A PDU device event has been happened.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the device table index.')
pduDeviceAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,401)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2DeviceStatusIndex"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduDeviceAlarm.setDescription('Alarm: A PDU device alarm has been detected.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the device table index.')
pduDeviceAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,402)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2DeviceStatusIndex"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduDeviceAlarmClear.setDescription('INFORMATIONAL: A PDU device alarm has been cleared.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the device table index.')
pduPhaseEvent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,403)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2PhaseConfigIndex"), ("CPS-MIB", "ePDU2PhaseConfigNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduPhaseEvent.setDescription('INFORMATIONAL: A PDU phase event has been happened.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the phase table index.\n       The foutrh argument is the phase number.')
pduPhaseAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,404)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2PhaseStatusIndex"), ("CPS-MIB", "ePDU2PhaseStatusNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduPhaseAlarm.setDescription('Alarm: A PDU phase alarm has been detected.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the phase table index.\n       The foutrh argument is the phase number.')
pduPhaseAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,405)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2PhaseStatusIndex"), ("CPS-MIB", "ePDU2PhaseStatusNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduPhaseAlarmClear.setDescription('INFORMATIONAL: A PDU phase alarm has been cleared.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the phase table index.\n       The foutrh argument is the phase number.')
pduBankEvent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,406)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2BankConfigIndex"), ("CPS-MIB", "ePDU2BankConfigNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduBankEvent.setDescription('INFORMATIONAL: A PDU bank event has been happened.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the bank table index.\n       The foutrh argument is the bank number.')
pduBankAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,407)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2BankStatusIndex"), ("CPS-MIB", "ePDU2BankStatusNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduBankAlarm.setDescription('Alarm: A PDU bank alarm has been detected.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the bank table index.\n       The foutrh argument is the bank number.')
pduBankAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,408)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2BankStatusIndex"), ("CPS-MIB", "ePDU2BankStatusNumber"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduBankAlarmClear.setDescription('INFORMATIONAL: A PDU bank alarm has been cleared.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the bank table index.\n       The foutrh argument is the bank number.')
pduOutletSwitchedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,409)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2OutletSwitchedControlIndex"), ("CPS-MIB", "ePDU2OutletSwitchedControlNumber"), ("CPS-MIB", "ePDU2OutletSwitchedControlName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduOutletSwitchedEvent.setDescription('INFORMATIONAL: A PDU switched outlet event has been happened.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet table index.\n       The foutrh argument is the outlet number.\n       The fifth argument is the outlet name.')
pduOutletSwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,410)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2OutletSwitchedStatusIndex"), ("CPS-MIB", "ePDU2OutletSwitchedStatusNumber"), ("CPS-MIB", "ePDU2OutletSwitchedStatusName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduOutletSwitchedAlarm.setDescription('Alarm: A PDU switched outlet alarm has been detected.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet table index.\n       The foutrh argument is the outlet number.\n       The fifth argument is the outlet name.')
pduOutletSwitchedAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,411)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2OutletSwitchedStatusIndex"), ("CPS-MIB", "ePDU2OutletSwitchedStatusNumber"), ("CPS-MIB", "ePDU2OutletSwitchedStatusName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduOutletSwitchedAlarmClear.setDescription('INFORMATIONAL: A PDU switched outlet alarm has been cleared.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet table index.\n       The foutrh argument is the outlet number.\n       The fifth argument is the outlet name.')
pduOutletMeteredEvent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,412)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2OutletMeteredConfigIndex"), ("CPS-MIB", "ePDU2OutletMeteredConfigNumber"), ("CPS-MIB", "ePDU2OutletMeteredConfigName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduOutletMeteredEvent.setDescription('INFORMATIONAL: A PDU metered outlet event has been happened.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet table index.\n       The foutrh argument is the outlet number.\n       The fifth argument is the outlet name.')
pduOutletMeteredAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,413)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2OutletMeteredStatusIndex"), ("CPS-MIB", "ePDU2OutletMeteredStatusNumber"), ("CPS-MIB", "ePDU2OutletMeteredStatusName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduOutletMeteredAlarm.setDescription('Alarm: A PDU metered outlet alarm has been detected.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet table index.\n       The foutrh argument is the outlet number.\n       The fifth argument is the outlet name.')
pduOutletMeteredAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,414)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2OutletMeteredStatusIndex"), ("CPS-MIB", "ePDU2OutletMeteredStatusNumber"), ("CPS-MIB", "ePDU2OutletMeteredStatusName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduOutletMeteredAlarmClear.setDescription('INFORMATIONAL: A PDU metered outlet alarm has been cleared.\n       The first argument is the serial number.\n       The second argument is the device name.\n       The third argument is the outlet table index.\n       The foutrh argument is the outlet number.\n       The fifth argument is the outlet name.')
pduDaisyChainEvent = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,415)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2IdentIndex"), ("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduDaisyChainEvent.setDescription('INFORMATIONAL: A PDU daisy-chain event has been happened.\n       The first argument is the host serial number.\n       The second argument is the host device name.\n       The third argument is the event device table index.\n       The foutrh argument is the event device serial number.\n       The fifth argument is the event device name.')
pduDaisyChainAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,416)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2IdentIndex"), ("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduDaisyChainAlarm.setDescription('Alarm: A PDU daisy-chain alarm has been detected.\n       The first argument is the host serial number.\n       The second argument is the host device name.\n       The third argument is the alarm device table index.\n       The foutrh argument is the alarm device serial number.\n       The fifth argument is the alarm device name.')
pduDaisyChainAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,417)).setObjects(("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "ePDU2IdentIndex"), ("CPS-MIB", "ePDU2IdentSerialNumber"), ("CPS-MIB", "ePDU2IdentName"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: pduDaisyChainAlarmClear.setDescription('INFORMATIONAL: A PDU daisy-chain alarm has been cleared.\n       The first argument is the host serial number.\n       The second argument is the host device name.\n       The third argument is the alarm device table index.\n       The foutrh argument is the alarm deice serial number.\n       The fifth argument is the alarm device name.')
bmSystemAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,600)).setObjects(("CPS-MIB", "bmIdentSerialNumber"), ("CPS-MIB", "bmIdentName"), ("CPS-MIB", "bmIdentLocation"), ("CPS-MIB", "mtrapinfoBmEventId"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: bmSystemAlarm.setDescription('ALARM: System alarm occurance.\n       The first argument is the bm device serial number.\n       The second argument is the bm system identification name.\n       The third argument is the bm system location.\n       The fourth argument is the alarm event specific identifier. \n       The fifth argument is the trap information string.')
bmSystemWarning = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,601)).setObjects(("CPS-MIB", "bmIdentSerialNumber"), ("CPS-MIB", "bmIdentName"), ("CPS-MIB", "bmIdentLocation"), ("CPS-MIB", "mtrapinfoBmEventId"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: bmSystemWarning.setDescription('WARNING: System warning occurance.\n       The first argument is the bm device serial number.\n       The second argument is the bm system identification name.\n       The third argument is the bm system location.\n       The fourth argument is the alarm event specific identifier. \n       The fifth argument is the trap information string.')
bmSystemInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,602)).setObjects(("CPS-MIB", "bmIdentSerialNumber"), ("CPS-MIB", "bmIdentName"), ("CPS-MIB", "bmIdentLocation"), ("CPS-MIB", "mtrapinfoBmEventId"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: bmSystemInfo.setDescription('INFO: System information.\n       The first argument is the bm device serial number.\n       The second argument is the bm system identification name.\n       The third argument is the bm system location.\n       The fourth argument is the alarm event specific identifier. \n       The fifth argument is the trap information string.')
bmProbesAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,603)).setObjects(("CPS-MIB", "bmIdentSerialNumber"), ("CPS-MIB", "bmIdentName"), ("CPS-MIB", "bmIdentLocation"), ("CPS-MIB", "bmProbesStringIndex"), ("CPS-MIB", "bmProbesBattIndex"), ("CPS-MIB", "mtrapinfoBmEventId"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: bmProbesAlarm.setDescription('ALARM: Probe alarm event.\n       The first argument is the bm device serial number.\n       The second argument is the bm system identification name. \n       The third argument is the bm system location. \n       The fourth argument is the string index the probe located. \n       The fifth argument is the battery index the probe located. \n       The sixth argument is the alarm event specific identifier. \n       The seventh argument is the trap information string.')
bmSProbesWarning = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,604)).setObjects(("CPS-MIB", "bmIdentSerialNumber"), ("CPS-MIB", "bmIdentName"), ("CPS-MIB", "bmIdentLocation"), ("CPS-MIB", "bmProbesStringIndex"), ("CPS-MIB", "bmProbesBattIndex"), ("CPS-MIB", "mtrapinfoBmEventId"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: bmSProbesWarning.setDescription('WARNING: Probe warning event.\n      The first argument is the bm device serial number.\n       The second argument is the bm system identification name. \n       The third argument is the bm system location. \n       The fourth argument is the string index the probe located. \n       The fifth argument is the battery index the probe located. \n       The sixth argument is the alarm event specific identifier. \n       The seventh argument is the trap information string.')
bmProbesInfo = NotificationType((1, 3, 6, 1, 4, 1, 3808) + (0,605)).setObjects(("CPS-MIB", "bmIdentSerialNumber"), ("CPS-MIB", "bmIdentName"), ("CPS-MIB", "bmIdentLocation"), ("CPS-MIB", "bmProbesStringIndex"), ("CPS-MIB", "bmProbesBattIndex"), ("CPS-MIB", "mtrapinfoBmEventId"), ("CPS-MIB", "mtrapinfoString"))
if mibBuilder.loadTexts: bmProbesInfo.setDescription('INFO: Probe information.\n       The first argument is the bm device serial number.\n       The second argument is the bm system identification name. \n       The third argument is the bm system location. \n       The fourth argument is the string index the probe located. \n       The fifth argument is the battery index the probe located. \n       The sixth argument is the alarm event specific identifier. \n       The seventh argument is the trap information string.')
mibBuilder.exportSymbols("CPS-MIB", ePDUOutletStatusOutletBank=ePDUOutletStatusOutletBank, ePDU2DeviceConfigCurrentLowLoadThreshold=ePDU2DeviceConfigCurrentLowLoadThreshold, ePDU2GroupTotalPower=ePDU2GroupTotalPower, returnFromChargerFailure=returnFromChargerFailure, upsReturnFromECOMode=upsReturnFromECOMode, envirTempLowThreshold=envirTempLowThreshold, bmConfigLowTempAlarmThreshold=bmConfigLowTempAlarmThreshold, atsStatusInputFrequency=atsStatusInputFrequency, bmProbesEntry=bmProbesEntry, ePDU2BankStatusPeakLoadTimestamp=ePDU2BankStatusPeakLoadTimestamp, upsOnBattery=upsOnBattery, eSwitchOutletNum=eSwitchOutletNum, cps=cps, upsControl=upsControl, envDryContactNormal=envDryContactNormal, eSwitchActType=eSwitchActType, ePDU2IdentModelName=ePDU2IdentModelName, ePDUBankNearOverloadCleared=ePDUBankNearOverloadCleared, eSwitchIdent=eSwitchIdent, ePDU2DeviceStatusPowerSupply1Status=ePDU2DeviceStatusPowerSupply1Status, eSwitchIdentHardwareRev=eSwitchIdentHardwareRev, atsStatusPowerSupplyTable=atsStatusPowerSupplyTable, upsWiringFaultCleared=upsWiringFaultCleared, eSwitchIdentModelName=eSwitchIdentModelName, ePDUOutletStatusIndex=ePDUOutletStatusIndex, ePDUOutletConfigPowerOnTime=ePDUOutletConfigPowerOnTime, upsBaseConfigDeviceEntry=upsBaseConfigDeviceEntry, ePDUStatusOutletIndex=ePDUStatusOutletIndex, atsIdentFirmwareRev=atsIdentFirmwareRev, bmProbesIndex=bmProbesIndex, upsBaseOutputStatus=upsBaseOutputStatus, ePDULoadBankConfigOverloadThreshold=ePDULoadBankConfigOverloadThreshold, pduOutletSwitchedAlarm=pduOutletSwitchedAlarm, upsFirmwareUpgradeStart=upsFirmwareUpgradeStart, mconfigTrapAccepterTable=mconfigTrapAccepterTable, ePDU2DeviceTableSize=ePDU2DeviceTableSize, ePDU2OutletMeteredConfigLowLoadThreshold=ePDU2OutletMeteredConfigLowLoadThreshold, testEvent=testEvent, atsLoadCfgBankTable=atsLoadCfgBankTable, ePDU2OutletSwitchedStatusNumber=ePDU2OutletSwitchedStatusNumber, ePDU2OutletMeteredStatusIndex=ePDU2OutletMeteredStatusIndex, ePDUStatus=ePDUStatus, ePDU2BankStatusIndex=ePDU2BankStatusIndex, atsStatusInputVoltageOrientation=atsStatusInputVoltageOrientation, ePDUComponentCommunicationLost=ePDUComponentCommunicationLost, ePDU2DeviceConfigIndex=ePDU2DeviceConfigIndex, bmFuncResMeasureLastUpdate=bmFuncResMeasureLastUpdate, bmSystemInfo=bmSystemInfo, upsPhase=upsPhase, atsOutletStatusTable=atsOutletStatusTable, bmControlSysytemIdenticator=bmControlSysytemIdenticator, atsLoadStatusBankEnergy=atsLoadStatusBankEnergy, bmPropertyStringMax=bmPropertyStringMax, upsAdvanceConfigReturnDelay=upsAdvanceConfigReturnDelay, bmIdentSerialNumber=bmIdentSerialNumber, upsOutput=upsOutput, upsBypassOverload=upsBypassOverload, atsInputHighFrequencyCleared=atsInputHighFrequencyCleared, ePDUOutletBankTable=ePDUOutletBankTable, pduDaisyChainAlarm=pduDaisyChainAlarm, upsBaseBattery=upsBaseBattery, ePDUIdentDeviceRating=ePDUIdentDeviceRating, upsAdvanceIdentDateOfManufacture=upsAdvanceIdentDateOfManufacture, atsIdentDeviceRatingVoltage=atsIdentDeviceRatingVoltage, ePDUOutletOverload=ePDUOutletOverload, upsEnterECOMode=upsEnterECOMode, envLowTempBack=envLowTempBack, ePDU2OutletMeteredTableSize=ePDU2OutletMeteredTableSize, atsIdentModelName=atsIdentModelName, ePDUOutletDevMonitoredOutlets=ePDUOutletDevMonitoredOutlets, upsAdvanceConfigLowTransferVolt=upsAdvanceConfigLowTransferVolt, bmConfigLowVoltAlarmThreshold=bmConfigLowVoltAlarmThreshold, upsPhaseOutputPowerFactor=upsPhaseOutputPowerFactor, upsAdvanceOutputFrequency=upsAdvanceOutputFrequency, ePDULoadStatusApparentPower=ePDULoadStatusApparentPower, upsAdvanceConfigSleepDelay=upsAdvanceConfigSleepDelay, eSwitchIdentFirmwareRev=eSwitchIdentFirmwareRev, ePDULoadBankConfigAlarm=ePDULoadBankConfigAlarm, atsOutletCtrlEntry=atsOutletCtrlEntry, ePDULineUndervoltageCleared=ePDULineUndervoltageCleared, ePDUOutletStatusOutletPhase=ePDUOutletStatusOutletPhase, upsPhaseOutputFrequency=upsPhaseOutputFrequency, ePDU2OutletSwitchedConfigRebootDuration=ePDU2OutletSwitchedConfigRebootDuration, ePDU2PhaseStatusIndex=ePDU2PhaseStatusIndex, bmProbesResHealth=bmProbesResHealth, bmFuncRes=bmFuncRes, ePDU2OutletSwitchedControlTable=ePDU2OutletSwitchedControlTable, ePDUDelayOutletOnCommand=ePDUDelayOutletOnCommand, atsOutletStatusOutletPhase=atsOutletStatusOutletPhase, upsAdvanceTestEstimationDate=upsAdvanceTestEstimationDate, envirTempRateOfChange=envirTempRateOfChange, atsLoadStatusBankStartTime=atsLoadStatusBankStartTime, ePDU2OutletSwitchedStatusName=ePDU2OutletSwitchedStatusName, bmProbesInfo=bmProbesInfo, bmFuncEqual=bmFuncEqual, atsStatusInputPhaseVoltage=atsStatusInputPhaseVoltage, envConntected=envConntected, envirHumidRateOfChange=envirHumidRateOfChange, bmIdentLCDHardwareRev=bmIdentLCDHardwareRev, ePDU2DeviceStatusIndex=ePDU2DeviceStatusIndex, bmConfigMergeFeature=bmConfigMergeFeature, ePDUOutletPhaseTable=ePDUOutletPhaseTable, ePDUOutletDevColdstartDelay=ePDUOutletDevColdstartDelay, bmProbesTempStringIndex=bmProbesTempStringIndex, ePDUOutletStatusTable=ePDUOutletStatusTable, ePDU2IdentIndicator=ePDU2IdentIndicator, atsControl=atsControl, ePDULoadDevice=ePDULoadDevice, ePDULoadDevOutletNumber=ePDULoadDevOutletNumber, atsLoadDevBankTableIndex=atsLoadDevBankTableIndex, ePDU2BankStatusPeakLoad=ePDU2BankStatusPeakLoad, eSwitchBaseTable=eSwitchBaseTable, ePDU2DeviceStatusApparentPower=ePDU2DeviceStatusApparentPower, bmControlProbeIndicator=bmControlProbeIndicator, deviceLoginInfo=deviceLoginInfo, upsBypassOverloadCleared=upsBypassOverloadCleared, ePDUOutletConfigMonitoredEntry=ePDUOutletConfigMonitoredEntry, eSwitchNumber=eSwitchNumber, atsLoadCfgBankTableSize=atsLoadCfgBankTableSize, ePDUIdentDateOfManufacture=ePDUIdentDateOfManufacture, upsConfig=upsConfig, atsOutletCfgTableIndex=atsOutletCfgTableIndex, ePDU2DeviceStatusCommandPending=ePDU2DeviceStatusCommandPending, mtrapinfoString=mtrapinfoString, bmConfigLowResWarnThreshold=bmConfigLowResWarnThreshold, upsInput=upsInput, bmProbesTempAlarmStatus=bmProbesTempAlarmStatus, ePDUPowerSupply2Ok=ePDUPowerSupply2Ok, ePDULoadStatusVoltage=ePDULoadStatusVoltage, atsStatusDevInRelayStatus=atsStatusDevInRelayStatus, atsConfigVoltageSensitivity=atsConfigVoltageSensitivity, ePDU2OutletMeteredInfoName=ePDU2OutletMeteredInfoName, atsStatusPowerSupplyInputSource=atsStatusPowerSupplyInputSource, atsLoadStatusPhaseLoadState=atsLoadStatusPhaseLoadState, bmIdentModelName=bmIdentModelName, bmProbesResEntry=bmProbesResEntry, ePDUStatusBankIndex=ePDUStatusBankIndex, atsOutletCfgPowerOnTime=atsOutletCfgPowerOnTime, ePDU2IdentIndex=ePDU2IdentIndex, atsConfigFrequencyDeviation=atsConfigFrequencyDeviation, atsLoadStatusBankTable=atsLoadStatusBankTable, communityString=communityString, ePDU2Role=ePDU2Role, ePDUOutletStatusLoad=ePDUOutletStatusLoad, ePDU2DeviceInfoMeteredOutlets=ePDU2DeviceInfoMeteredOutlets, bmFuncEqualStatus=bmFuncEqualStatus, envHighTemperatureViolation=envHighTemperatureViolation, mtrapinfoIpAddress=mtrapinfoIpAddress, ePDU2PhaseConfigOverloadThreshold=ePDU2PhaseConfigOverloadThreshold, ePDULoadDevBankMaxLoad=ePDULoadDevBankMaxLoad, ePDU2DeviceConfigColdstartDelay=ePDU2DeviceConfigColdstartDelay, bmProbesVoltageTableSize=bmProbesVoltageTableSize, ePDUBankLowLoad=ePDUBankLowLoad, atsConfigPreferredSource=atsConfigPreferredSource, envirTempHysteresis=envirTempHysteresis, upsAdvanceConfigSetEEPROMDefaults=upsAdvanceConfigSetEEPROMDefaults, adminLoginInfo=adminLoginInfo, ePDU2IdentEntry=ePDU2IdentEntry, upsLostRedundant=upsLostRedundant, envHighTemperatureBack=envHighTemperatureBack, ePDUOutletBank=ePDUOutletBank, ePDU2PhaseStatusLoadState=ePDU2PhaseStatusLoadState, ePDUOutletBankOverloadRestriction=ePDUOutletBankOverloadRestriction, bmConfig=bmConfig, ePDUIdentSerialNumber=ePDUIdentSerialNumber, upsAdvanceOutputLoad=upsAdvanceOutputLoad, ePDUOutletPhase=ePDUOutletPhase, upsBaseControlConserveBattery=upsBaseControlConserveBattery, bmProbesBattIndex=bmProbesBattIndex, upsTurnedOff=upsTurnedOff, ePDUCancelPendingCommand=ePDUCancelPendingCommand, pduDeviceEvent=pduDeviceEvent, mconfig=mconfig, ePDULoadStatusPhaseNumber=ePDULoadStatusPhaseNumber, atsPowerSupplyFaultCleared=atsPowerSupplyFaultCleared, atsOutletCtrlTableSize=atsOutletCtrlTableSize, atsConfigDevLCDOffTime=atsConfigDevLCDOffTime, upsIdent=upsIdent, envirHumidLowThreshold=envirHumidLowThreshold, atsStatusRedundancyState=atsStatusRedundancyState, upsPhaseBypassTableIndex=upsPhaseBypassTableIndex, ePDUOutletConfigMonitoredTableSize=ePDUOutletConfigMonitoredTableSize, ePDUOutletStatusCommandPending=ePDUOutletStatusCommandPending, atsOutletStatusTableIndex=atsOutletStatusTableIndex, bmProbesTempEntry=bmProbesTempEntry, upsReturnFromBypassMode=upsReturnFromBypassMode, ePDULoadPhaseConfigIndex=ePDULoadPhaseConfigIndex, ePDU2DeviceControlModuleIndex=ePDU2DeviceControlModuleIndex, ePDU2DeviceInfoRating=ePDU2DeviceInfoRating, ePDUIdentDeviceBreakerRating=ePDUIdentDeviceBreakerRating, upsAdvanceConfigSensitivity=upsAdvanceConfigSensitivity, ePDU2OutletMeteredStatusTable=ePDU2OutletMeteredStatusTable, ePDUOutletStatusPeakPower=ePDUOutletStatusPeakPower, ePDU2DeviceInfoNumBreakers=ePDU2DeviceInfoNumBreakers, atsIdentName=atsIdentName, ePDULoadStatusLoad=ePDULoadStatusLoad, mcontrol=mcontrol, bmIdentHardwareRev=bmIdentHardwareRev, atsOutletStatusOutletCmdPending=atsOutletStatusOutletCmdPending, mcontrolRestart=mcontrolRestart, ePDULoadDevBankIndex=ePDULoadDevBankIndex, ePDUOutletPhaseIndex=ePDUOutletPhaseIndex, ePDUOutletDevNumCntrlOutlets=ePDUOutletDevNumCntrlOutlets, ePDU2DeviceControlEntry=ePDU2DeviceControlEntry, atsIdentAgentModelName=atsIdentAgentModelName, bmProbesResPackIndex=bmProbesResPackIndex, ePDULowLoad=ePDULowLoad, nclBankStartScheduleOff=nclBankStartScheduleOff, atsOutletOn=atsOutletOn, upsPhaseBypassEntry=upsPhaseBypassEntry, ePDUStatusPhaseNumber=ePDUStatusPhaseNumber, atsLoadStatusBankLoadState=atsLoadStatusBankLoadState, upsBaseControl=upsBaseControl, upsBatteryOverThreeYear=upsBatteryOverThreeYear, ePDU2OutletMeteredStatusNumber=ePDU2OutletMeteredStatusNumber, ePDUOutletLowLoadCleared=ePDUOutletLowLoadCleared, ePDU2DeviceInfoName=ePDU2DeviceInfoName, envRateOfHumdChangeAbnormal=envRateOfHumdChangeAbnormal, bmIdentLCDFirmwareRev=bmIdentLCDFirmwareRev, ePDULoadPhaseConfigAlarm=ePDULoadPhaseConfigAlarm, ePDU2DeviceInfoTable=ePDU2DeviceInfoTable, ePDUOutletDevCommand=ePDUOutletDevCommand, ePDU2DeviceControlTable=ePDU2DeviceControlTable, ePDULoadBankConfigLowLoadThreshold=ePDULoadBankConfigLowLoadThreshold, upsAdvanceTestDiagnosticsResults=upsAdvanceTestDiagnosticsResults, ePDU2DeviceStatusPowerLoad=ePDU2DeviceStatusPowerLoad, ePDUOutletOff=ePDUOutletOff, atsLoadStatusPhaseTableIndex=atsLoadStatusPhaseTableIndex, ePDU2OutletMeteredStatusModuleIndex=ePDU2OutletMeteredStatusModuleIndex, upsPhaseOutputEntry=upsPhaseOutputEntry, ePDULoadPhaseConfigLowLoadThreshold=ePDULoadPhaseConfigLowLoadThreshold, atsLoadDevPhaseTableIndex=atsLoadDevPhaseTableIndex, ePDU2DeviceInfoOutletLayout=ePDU2DeviceInfoOutletLayout, upsAdvanceControlUpsOff=upsAdvanceControlUpsOff, upsSystem=upsSystem, ePDU2DeviceStatusEnergyStartTime=ePDU2DeviceStatusEnergyStartTime, upsPhaseOutputPower=upsPhaseOutputPower, atsInputLowVoltage=atsInputLowVoltage, ePDUOutletConfigMonitoredNumber=ePDUOutletConfigMonitoredNumber, ePDUOutletStatus=ePDUOutletStatus, bmProbesVoltageEqualPercentage=bmProbesVoltageEqualPercentage, atsStatusInputTable=atsStatusInputTable, bmIdentDateOfManufacture=bmIdentDateOfManufacture, upsAdvanceBatteryVoltageRating=upsAdvanceBatteryVoltageRating, atsCommunicationLost=atsCommunicationLost, bmProbesTempBattIndex=bmProbesTempBattIndex, ePDU2OutletMeteredConfigName=ePDU2OutletMeteredConfigName, atsOutletCtrlCommand=atsOutletCtrlCommand, ePDUStatusOutletState=ePDUStatusOutletState, ePDU2DeviceInfoEntry=ePDU2DeviceInfoEntry, upsAdvanceControlTurnOnUPS=upsAdvanceControlTurnOnUPS, atsLoadStatusBankPhase=atsLoadStatusBankPhase, upsAdvanceConfigAlarmTimer=upsAdvanceConfigAlarmTimer, upsWokeUp=upsWokeUp)
mibBuilder.exportSymbols("CPS-MIB", atsStatusInputPhaseTable=atsStatusInputPhaseTable, upsAdvanceConfigSleepAfterAllClientShut=upsAdvanceConfigSleepAfterAllClientShut, bmIdent=bmIdent, ePDU2BankConfigEntry=ePDU2BankConfigEntry, atsLoadStatusPhaseTableSize=atsLoadStatusPhaseTableSize, deviceLogoutInfo=deviceLogoutInfo, bmFuncEqualElapseTime=bmFuncEqualElapseTime, ePDU2PhaseInfoTable=ePDU2PhaseInfoTable, ePDULoadPhaseConfigOverloadThreshold=ePDULoadPhaseConfigOverloadThreshold, ePDUOutletStatusPeakPowerStart=ePDUOutletStatusPeakPowerStart, ePDUIdentDeviceLinetoLineVoltage=ePDUIdentDeviceLinetoLineVoltage, ePDUOutletStatusEnergy=ePDUOutletStatusEnergy, atsLoadStatusPhase=atsLoadStatusPhase, upsAdvanceBatteryCapacity=upsAdvanceBatteryCapacity, upsBaseBatteryTimeOnBattery=upsBaseBatteryTimeOnBattery, ePDU2PhaseConfigEntry=ePDU2PhaseConfigEntry, ePDU2BankConfigOverloadRestriction=ePDU2BankConfigOverloadRestriction, ePDU2OutletSwitchedTableSize=ePDU2OutletSwitchedTableSize, ePDU2OutletSwitchedControlModuleIndex=ePDU2OutletSwitchedControlModuleIndex, upsAdvanceInputMaxLineVoltage=upsAdvanceInputMaxLineVoltage, upsPhaseInputFrequency=upsPhaseInputFrequency, ePDU2GroupEnergyReset=ePDU2GroupEnergyReset, upsCommandCancel=upsCommandCancel, atsLoadStatusBankPower=atsLoadStatusBankPower, ePDULoadDevBankEntry=ePDULoadDevBankEntry, pduOutletSwitchedAlarmClear=pduOutletSwitchedAlarmClear, ePDU2BankConfigTable=ePDU2BankConfigTable, atsStatusDevLCDCommStatus=atsStatusDevLCDCommStatus, ePDULoadDevMaxPhaseLoad=ePDULoadDevMaxPhaseLoad, bmProbesTempTable=bmProbesTempTable, ePDULoadBankConfigEntry=ePDULoadBankConfigEntry, ePDU2PhaseStatusEntry=ePDU2PhaseStatusEntry, upsPhaseOutputVoltage=upsPhaseOutputVoltage, upsAdvanceConfigAutoRestore=upsAdvanceConfigAutoRestore, upsFirmwareUpgradeEnd=upsFirmwareUpgradeEnd, bmConfigHighVoltAlarmThreshold=bmConfigHighVoltAlarmThreshold, atsOutletDevCtrlOutletNum=atsOutletDevCtrlOutletNum, bmProbesResIndex=bmProbesResIndex, atsNearOverload=atsNearOverload, ePDU2OutletSwitchedStatusTable=ePDU2OutletSwitchedStatusTable, bmProbesTempPackIndex=bmProbesTempPackIndex, atsStatusPhaseSyncStatus=atsStatusPhaseSyncStatus, atsLoadCfgBankNearOverLoad=atsLoadCfgBankNearOverLoad, failAuthViaHTTP=failAuthViaHTTP, atsOutletCtrlTable=atsOutletCtrlTable, ePDU2DeviceConfigName=ePDU2DeviceConfigName, ePDUOutletBankEntry=ePDUOutletBankEntry, upsPhaseOutputCurrent=upsPhaseOutputCurrent, ePDU2OutletMeteredStatusPeakPowerTimestamp=ePDU2OutletMeteredStatusPeakPowerTimestamp, bmConfigLowVoltAlarmThreshold10mV=bmConfigLowVoltAlarmThreshold10mV, ePDULoadDevMaxOutletTableSize=ePDULoadDevMaxOutletTableSize, upsAdvanceSleepAfterDelay=upsAdvanceSleepAfterDelay, ePDU2DeviceConfigContact=ePDU2DeviceConfigContact, atsStatusPowerSupply3p3VStatus=atsStatusPowerSupply3p3VStatus, ePDU2DeviceControlIndex=ePDU2DeviceControlIndex, upsAdvanceBatteryRunTimeRemaining=upsAdvanceBatteryRunTimeRemaining, bmProbesTemperature=bmProbesTemperature, upsEmergencyPowerOff=upsEmergencyPowerOff, ePDUBankLowLoadCleared=ePDUBankLowLoadCleared, ePDU2OutletSwitchedInfoIndex=ePDU2OutletSwitchedInfoIndex, atsInputLowFrequencyCleared=atsInputLowFrequencyCleared, ePDU2OutletMeteredInfoLayout=ePDU2OutletMeteredInfoLayout, atsIdentAgentFirmwareRevision=atsIdentAgentFirmwareRevision, atsLoadCfgPhaseTableSize=atsLoadCfgPhaseTableSize, ePDU2PhaseInfoModuleIndex=ePDU2PhaseInfoModuleIndex, ePDUOutletControlOutletCommand=ePDUOutletControlOutletCommand, mconfigClockTime=mconfigClockTime, envirTempCelsiusHysteresis=envirTempCelsiusHysteresis, envDisconntected=envDisconntected, ePDU2BankConfigIndex=ePDU2BankConfigIndex, upsAdvanceConfigRechargedCapacity=upsAdvanceConfigRechargedCapacity, atsStatusInputVoltage=atsStatusInputVoltage, bmFuncEqualStartTime=bmFuncEqualStartTime, atsLowLoadCleared=atsLowLoadCleared, ePDU2DeviceConfigCurrentOverloadThreshold=ePDU2DeviceConfigCurrentOverloadThreshold, upsAdvanceControlRebootUps=upsAdvanceControlRebootUps, upsPhaseInputCurrent=upsPhaseInputCurrent, ePDUNearOverloadCleared=ePDUNearOverloadCleared, upsAdvanceBatteryLife=upsAdvanceBatteryLife, ePDU2PhaseTableSize=ePDU2PhaseTableSize, atsLoadDevBankMaxLoad=atsLoadDevBankMaxLoad, ePDUPowerSupply=ePDUPowerSupply, ePDU2PhaseStatusApparentPower=ePDU2PhaseStatusApparentPower, ePDU2OutletMeteredConfigNumber=ePDU2OutletMeteredConfigNumber, bmProbesNum=bmProbesNum, ePDUOutletStatusPeakPowerTime=ePDUOutletStatusPeakPowerTime, ePDUOutletConfigMonitoredEnergyReset=ePDUOutletConfigMonitoredEnergyReset, envirContactIndex=envirContactIndex, ePDU2DeviceInfoSwitchedOutlets=ePDU2DeviceInfoSwitchedOutlets, ePDU2OutletSwitchedConfigTable=ePDU2OutletSwitchedConfigTable, ePDU2OutletMeteredInfoIndex=ePDU2OutletMeteredInfoIndex, battmgr=battmgr, atsLoadCfgPhase=atsLoadCfgPhase, ePDUOutletControlEntry=ePDUOutletControlEntry, atsCommunicationEstablished=atsCommunicationEstablished, nclBankOff=nclBankOff, ePDUOutletControl=ePDUOutletControl, ePDULoadStatus=ePDULoadStatus, ePDU2DeviceInfoModuleIndex=ePDU2DeviceInfoModuleIndex, ePDU2PhaseStatusLineToLineVoltage=ePDU2PhaseStatusLineToLineVoltage, ePDULoadStatusEntry=ePDULoadStatusEntry, atsCancelPendingCommand=atsCancelPendingCommand, ePDUOutletStatusAlarm=ePDUOutletStatusAlarm, products=products, atsStatusNumInputPhase=atsStatusNumInputPhase, ePDU2DeviceConfigPowerNearOverloadThreshold=ePDU2DeviceConfigPowerNearOverloadThreshold, ePDUOutletConfigOutletPhase=ePDUOutletConfigOutletPhase, ePDU2BankTableSize=ePDU2BankTableSize, upsPhaseBypassTable=upsPhaseBypassTable, atsLoadCfgPhaseTableIndex=atsLoadCfgPhaseTableIndex, upsAdvanceConfigAlarm=upsAdvanceConfigAlarm, atsCtrlResetATS=atsCtrlResetATS, ePDULoadBankConfig=ePDULoadBankConfig, atsDevHardwareFault=atsDevHardwareFault, clientRegistered=clientRegistered, atsOutletDevTotalOutletNum=atsOutletDevTotalOutletNum, atsOutletCfgEntry=atsOutletCfgEntry, atsLoadStatusBankLoad=atsLoadStatusBankLoad, ePDULoadStatusTable=ePDULoadStatusTable, bmProbesResProbeIndex=bmProbesResProbeIndex, severityDegree=severityDegree, ePDU2IdentSerialNumber=ePDU2IdentSerialNumber, upsAdvanceOutputPower=upsAdvanceOutputPower, ePDU2PhaseStatusTable=ePDU2PhaseStatusTable, atsConfigMediumRangeValue=atsConfigMediumRangeValue, upsBaseOutputWorkingFrequency=upsBaseOutputWorkingFrequency, ePDUPowerSupply2Status=ePDUPowerSupply2Status, ePDUOutletControlOutletName=ePDUOutletControlOutletName, envirIdentName=envirIdentName, atsLoadCfgPhaseOutletRestriction=atsLoadCfgPhaseOutletRestriction, ePDUOutletDevNumTotalOutlets=ePDUOutletDevNumTotalOutlets, ePDU2DeviceInfoIndex=ePDU2DeviceInfoIndex, pduBankAlarmClear=pduBankAlarmClear, ePDU2BankConfigNearOverloadThreshold=ePDU2BankConfigNearOverloadThreshold, upsScheduleShutdown=upsScheduleShutdown, upsPhaseInputPowerFactor=upsPhaseInputPowerFactor, atsOutletRebootCommand=atsOutletRebootCommand, mconfigDHCPEnabled=mconfigDHCPEnabled, ePDUOutletConfigPowerOffTime=ePDUOutletConfigPowerOffTime, ePDUOutletConfigOutletBank=ePDUOutletConfigOutletBank, atsLoadStatusPhaseLoad=atsLoadStatusPhaseLoad, atsOutletDevLocalCtrl=atsOutletDevLocalCtrl, ePDU2OutletSwitchedStatusEntry=ePDU2OutletSwitchedStatusEntry, ePDU2OutletMeteredInfoModuleIndex=ePDU2OutletMeteredInfoModuleIndex, ePDU2SensorTableSize=ePDU2SensorTableSize, atsDB9CommunicationLostCleared=atsDB9CommunicationLostCleared, atsPowerSupplyFault=atsPowerSupplyFault, upsBatteryNotPresent=upsBatteryNotPresent, mtrapinfo=mtrapinfo, atsStatusInputPhaseIndex=atsStatusInputPhaseIndex, powerRestored=powerRestored, bmProbes=bmProbes, envirTempCelsiusLowThreshold=envirTempCelsiusLowThreshold, ePDUIdentFirmwareRev=ePDUIdentFirmwareRev, upsAdvanceBatteryVoltage=upsAdvanceBatteryVoltage, atsLoadStatusBankTableIndex=atsLoadStatusBankTableIndex, atsLoadDevPhase=atsLoadDevPhase, envLowTemperatureViolation=envLowTemperatureViolation, ePDUPowerSupply1Status=ePDUPowerSupply1Status, atsStatusCommStatus=atsStatusCommStatus, atsIdentDeviceRatingCurrent=atsIdentDeviceRatingCurrent, ePDUStatusPhaseEntry=ePDUStatusPhaseEntry, pduOutletMeteredAlarmClear=pduOutletMeteredAlarmClear, bmSProbesWarning=bmSProbesWarning, bmProbesResistance=bmProbesResistance, ePDUIdentDeviceNumBreakers=ePDUIdentDeviceNumBreakers, ePDU2PhaseConfigIndex=ePDU2PhaseConfigIndex, atsOutletStatusTableSize=atsOutletStatusTableSize, mtrapinfoTimeTicks=mtrapinfoTimeTicks, ePDUOutletStatusOutletState=ePDUOutletStatusOutletState, atsDeviceConfigChanged=atsDeviceConfigChanged, ePDU2IdentName=ePDU2IdentName, upsAdvanceInputMinLineVoltage=upsAdvanceInputMinLineVoltage, ePDUOutletConfigMonitoredLowLoadThreshold=ePDUOutletConfigMonitoredLowLoadThreshold, atsOutletCtrlTableIndex=atsOutletCtrlTableIndex, atsSourceFault=atsSourceFault, envHighHumidityViolation=envHighHumidityViolation, upsAdvanceInputFrequency=upsAdvanceInputFrequency, mtrapinfoInteger=mtrapinfoInteger, ePDULineOvervoltage=ePDULineOvervoltage, ePDU2DeviceConfigEntry=ePDU2DeviceConfigEntry, upsBaseOutput=upsBaseOutput, upsAdvanceOutputVoltage=upsAdvanceOutputVoltage, ePDU2IdentTableSize=ePDU2IdentTableSize, upsBaseBatteryLastReplaceDate=upsBaseBatteryLastReplaceDate, atsLoadDevPhaseTableSize=atsLoadDevPhaseTableSize, atsInputHighVoltage=atsInputHighVoltage, ePDUStatusBankState=ePDUStatusBankState, ePDU2BankConfigLowLoadThreshold=ePDU2BankConfigLowLoadThreshold, ePDU2PhaseConfigTable=ePDU2PhaseConfigTable, atsLoadCfgPhaseEntry=atsLoadCfgPhaseEntry, ePDU2PhaseInfoNumber=ePDU2PhaseInfoNumber, envirContactName=envirContactName, pduDaisyChainEvent=pduDaisyChainEvent, ePDU2OutletMeteredStatusPeakPower=ePDU2OutletMeteredStatusPeakPower, atsLoadStatusPhaseTable=atsLoadStatusPhaseTable, ePDUIdentName=ePDUIdentName, ePDU2=ePDU2, ePDUOutletConfigTable=ePDUOutletConfigTable, ePDUPowerSupplyAlarm=ePDUPowerSupplyAlarm, atsLoad=atsLoad, upsBaseConfigDeviceTable=upsBaseConfigDeviceTable, ePDU2IdentTable=ePDU2IdentTable, ePDU2BankInfoEntry=ePDU2BankInfoEntry, bmProbesResBattIndex=bmProbesResBattIndex, upsRemoteCommandFailed=upsRemoteCommandFailed, ePDU2OutletSwitched=ePDU2OutletSwitched, ePDU2PhaseInfoEntry=ePDU2PhaseInfoEntry, ePDUIdentDeviceNumPhases=ePDUIdentDeviceNumPhases, ePDU2OutletSwitchedInfoModuleIndex=ePDU2OutletSwitchedInfoModuleIndex, upsAdvanceInputLineFailCause=upsAdvanceInputLineFailCause, eSwitchActOutlet=eSwitchActOutlet, ePDULoadDevMaxOutletLoad=ePDULoadDevMaxOutletLoad, upsOutlet=upsOutlet, envirHumid=envirHumid, upsAdvanceConfigHighTransferVolt=upsAdvanceConfigHighTransferVolt, pduBankAlarm=pduBankAlarm, ePDU2BankStatusPeakLoadStartTime=ePDU2BankStatusPeakLoadStartTime, eSwitchID=eSwitchID, returnFromLowBattery=returnFromLowBattery, upsAdvanceInput=upsAdvanceInput, vaRating=vaRating, ePDU2Sensor=ePDU2Sensor, ePDULoadStatusEnergyStartTime=ePDULoadStatusEnergyStartTime, bmPropertyMaxProbeOnString=bmPropertyMaxProbeOnString, upsRFC1628TrapAlarmEntryAdded=upsRFC1628TrapAlarmEntryAdded, ePDUOutletConfigRebootDuration=ePDUOutletConfigRebootDuration, envirHumidHysteresis=envirHumidHysteresis, mconfigMyAddr=mconfigMyAddr, ePDUOutletOn=ePDUOutletOn, ePDU2DeviceStatusPeakLoadTimestamp=ePDU2DeviceStatusPeakLoadTimestamp, ePDUStatusPhaseState=ePDUStatusPhaseState, pduPhaseEvent=pduPhaseEvent, upsAdvanceConfigDeepDischargeProtection=upsAdvanceConfigDeepDischargeProtection, ePDU2OutletMeteredConfigNearOverloadThreshold=ePDU2OutletMeteredConfigNearOverloadThreshold, ePDU2DeviceStatusName=ePDU2DeviceStatusName, ePDU2PhaseConfigOverloadRestriction=ePDU2PhaseConfigOverloadRestriction, atsDB9CommunicationLost=atsDB9CommunicationLost, bmFuncResMeasureManualCmd=bmFuncResMeasureManualCmd, atsNearOverloadCleared=atsNearOverloadCleared, atsConfigNarrowRangeValue=atsConfigNarrowRangeValue, ePDU2BankConfigNumber=ePDU2BankConfigNumber, ePDUIdentDeviceOutletLayout=ePDUIdentDeviceOutletLayout, bmFuncResMeasureInterval=bmFuncResMeasureInterval, ePDULoadDevBankTable=ePDULoadDevBankTable, envRateOfTemperatureChangeAbnormal=envRateOfTemperatureChangeAbnormal, ePDU2OutletMeteredInfoEntry=ePDU2OutletMeteredInfoEntry, atsOutletCfgPowerOffTime=atsOutletCfgPowerOffTime, upsAdvanceConfigColdStart=upsAdvanceConfigColdStart, ePDUOutletDevColdstartState=ePDUOutletDevColdstartState, envirIdentLocation=envirIdentLocation, upsDiagnosticsFailed=upsDiagnosticsFailed, ePDULoadStatusEnergy=ePDULoadStatusEnergy, eSwitchCtrID=eSwitchCtrID)
mibBuilder.exportSymbols("CPS-MIB", atsStatusInputFreqState=atsStatusInputFreqState, ePDU2OutletMetered=ePDU2OutletMetered, ePDU2DeviceConfigCurrentNearOverloadThreshold=ePDU2DeviceConfigCurrentNearOverloadThreshold, envHighHumidityBack=envHighHumidityBack, envirHumidity=envirHumidity, upsBaseIdentModel=upsBaseIdentModel, bmPropertyProbesRating=bmPropertyProbesRating, returnFromOverTemp=returnFromOverTemp, atsLoadDevBankTableSize=atsLoadDevBankTableSize, ePDU2BankStatusLoad=ePDU2BankStatusLoad, pduBankEvent=pduBankEvent, bmProbesStringIndex=bmProbesStringIndex, envLowHumidityViolation=envLowHumidityViolation, atsOutletStatusOutletState=atsOutletStatusOutletState, atsLoadCfgBankLowLoad=atsLoadCfgBankLowLoad, ePDUStatusPhaseTableSize=ePDUStatusPhaseTableSize, communicationLost=communicationLost, upsAdvanceTestLastDiagnosticsDate=upsAdvanceTestLastDiagnosticsDate, ePDUOutletConfig=ePDUOutletConfig, ePDUOutletConfigOutletName=ePDUOutletConfigOutletName, ePDUOutletDevice=ePDUOutletDevice, atsOverloadCleared=atsOverloadCleared, ePDUOutletConfigMonitoredName=ePDUOutletConfigMonitoredName, ePDUOutletOverloadCleared=ePDUOutletOverloadCleared, upsEstimationAbort=upsEstimationAbort, ePDU2OutletMeteredInfoNumber=ePDU2OutletMeteredInfoNumber, ePDU2Outlet=ePDU2Outlet, upsOverTemp=upsOverTemp, ePDU2OutletMeteredConfigModuleIndex=ePDU2OutletMeteredConfigModuleIndex, envirContactNormalState=envirContactNormalState, bmConfigHighResWarnThreshold=bmConfigHighResWarnThreshold, mtrapinfoGauge=mtrapinfoGauge, upsBaseInput=upsBaseInput, ePDU2OutletMeteredStatusAlarm=ePDU2OutletMeteredStatusAlarm, bmProbesTempTableSize=bmProbesTempTableSize, ePDUBankNearOverload=ePDUBankNearOverload, upsTurnedOn=upsTurnedOn, atsStatusDevDB9CommStatus=atsStatusDevDB9CommStatus, ePDULoadStatusLoadState=ePDULoadStatusLoadState, ePDULoadBankConfigIndex=ePDULoadBankConfigIndex, ePDU2OutletMeteredInfoTable=ePDU2OutletMeteredInfoTable, bmProbesVoltagePackIndex=bmProbesVoltagePackIndex, upsRemainRuntimeLowThanThreshold=upsRemainRuntimeLowThanThreshold, adminLogoutInfo=adminLogoutInfo, pduDeviceAlarm=pduDeviceAlarm, pduDaisyChainAlarmClear=pduDaisyChainAlarmClear, upsSleeping=upsSleeping, atsStatusInputNum=atsStatusInputNum, ePDU2GroupTotalEnergy=ePDU2GroupTotalEnergy, ePDU2DeviceConfigLocation=ePDU2DeviceConfigLocation, ePDU2DeviceInfoNumPhases=ePDU2DeviceInfoNumPhases, ePDUOutletControlIndex=ePDUOutletControlIndex, ePDUOutletPhaseEntry=ePDUOutletPhaseEntry, envirHumidHighThreshold=envirHumidHighThreshold, atsConfigWideRangeValue=atsConfigWideRangeValue, upsRebootStarted=upsRebootStarted, ePDU2BankStatusNumber=ePDU2BankStatusNumber, ePDU2PhaseStatusVoltage=ePDU2PhaseStatusVoltage, bmConfigLowResAlarmThreshold=bmConfigLowResAlarmThreshold, ePDUStatusPhaseTable=ePDUStatusPhaseTable, upsBaseBatteryAgeRecommand=upsBaseBatteryAgeRecommand, upsAdvanceConfigOutputVoltage=upsAdvanceConfigOutputVoltage, ePDULoadDevMaxOutletTable=ePDULoadDevMaxOutletTable, ePDUPowerSupply1Fail=ePDUPowerSupply1Fail, envirContactTableSize=envirContactTableSize, bmConfigStringCount=bmConfigStringCount, cpsmgmt=cpsmgmt, atsOutletDevCommand=atsOutletDevCommand, ePDUComponentCommunicationEstablished=ePDUComponentCommunicationEstablished, ePDU2OutletSwitchedInfoName=ePDU2OutletSwitchedInfoName, ePDUOutletNearOverloadCleared=ePDUOutletNearOverloadCleared, ePDU2OutletSwitchedConfigName=ePDU2OutletSwitchedConfigName, atsStatusInputEntry=atsStatusInputEntry, upsBaseConfig=upsBaseConfig, ePDUOutletConfigEntry=ePDUOutletConfigEntry, ePDUOutletControlOutletBank=ePDUOutletControlOutletBank, atsOutletCfgRebootDuration=atsOutletCfgRebootDuration, ePDUCommunicationLost=ePDUCommunicationLost, ePDUStatusBankTable=ePDUStatusBankTable, upsAdvanceTestDiagnosticSchedule=upsAdvanceTestDiagnosticSchedule, atsStatusDevOutRelayStatus=atsStatusDevOutRelayStatus, atsStatusInputVolState=atsStatusInputVolState, upsPhaseInput=upsPhaseInput, ePDU2DeviceConfigPowerLowLoadThreshold=ePDU2DeviceConfigPowerLowLoadThreshold, ePDUStatusBankEntry=ePDUStatusBankEntry, atsIdentDeviceOutletNum=atsIdentDeviceOutletNum, atsOutletConfigChanged=atsOutletConfigChanged, ePDUOutletConfigMonitoredIndex=ePDUOutletConfigMonitoredIndex, atsStatusPowerSupply12VStatus=atsStatusPowerSupply12VStatus, upsAdvanceControlUpsSleep=upsAdvanceControlUpsSleep, atsStatusPowerSupply5VStatus=atsStatusPowerSupply5VStatus, ePDU2DeviceInfoBreakerRating=ePDU2DeviceInfoBreakerRating, upsPhaseOutputTableSize=upsPhaseOutputTableSize, atsStatusPowerSupplyEntry=atsStatusPowerSupplyEntry, pduPhaseAlarm=pduPhaseAlarm, ePDU2DeviceStatusCurrentPeakLoad=ePDU2DeviceStatusCurrentPeakLoad, ePDULoad=ePDULoad, mconfigTrapAccepterEntry=mconfigTrapAccepterEntry, ePDU2PhaseStatusModuleIndex=ePDU2PhaseStatusModuleIndex, bmProbesResTable=bmProbesResTable, upsAdvanceIdentAgentSerialNumber=upsAdvanceIdentAgentSerialNumber, bmIdentFirmwareRev=bmIdentFirmwareRev, ePDU2DeviceStatusModuleIndex=ePDU2DeviceStatusModuleIndex, envLowHumdBack=envLowHumdBack, ePDU2Group=ePDU2Group, upsAdvanceTestDiagnostics=upsAdvanceTestDiagnostics, ePDU2BankInfoModuleIndex=ePDU2BankInfoModuleIndex, ePDU2DeviceStatusCurrentLoad=ePDU2DeviceStatusCurrentLoad, bmProbesResAlarmStatus=bmProbesResAlarmStatus, ePDUOutletStatusOutletName=ePDUOutletStatusOutletName, upsStatus=upsStatus, upsBaseTest=upsBaseTest, atsIdentSerialNumber=atsIdentSerialNumber, upsBatteryReplacement=upsBatteryReplacement, upsModuleOverload=upsModuleOverload, atsCtrlClearEventCounts=atsCtrlClearEventCounts, bmProbesPackIndex=bmProbesPackIndex, pduPhaseAlarmClear=pduPhaseAlarmClear, bmProbesVoltage=bmProbesVoltage, upsDischarged=upsDischarged, ePDUIdentDeviceOrientation=ePDUIdentDeviceOrientation, ePDUPowerSupply2Fail=ePDUPowerSupply2Fail, returnFromDischarged=returnFromDischarged, atsOutletOff=atsOutletOff, ePDU2Phase=ePDU2Phase, bmFuncEqualEnable=bmFuncEqualEnable, ePDU2Bank=ePDU2Bank, lowBattery=lowBattery, upsPhaseBypassFrequency=upsPhaseBypassFrequency, ePDUOutletControlTable=ePDUOutletControlTable, ePDU2DeviceInfoNumOutlets=ePDU2DeviceInfoNumOutlets, ePDU2OutletMeteredConfigTable=ePDU2OutletMeteredConfigTable, ePDU2DeviceControlCommand=ePDU2DeviceControlCommand, ePDUStatusOutletTableSize=ePDUStatusOutletTableSize, upsPhaseInputTableSize=upsPhaseInputTableSize, ePDULoadStatusActivePower=ePDULoadStatusActivePower, bmIdentName=bmIdentName, bmProbesVoltageStringIndex=bmProbesVoltageStringIndex, atsLoadCfgBankOverLoad=atsLoadCfgBankOverLoad, ePDUOutletConfigMonitoredTable=ePDUOutletConfigMonitoredTable, eSwitchOutletState=eSwitchOutletState, configFileUpload=configFileUpload, upsBankOutletControl=upsBankOutletControl, upsRFC1628TrapOnBattery=upsRFC1628TrapOnBattery, upsBankControlIndex=upsBankControlIndex, envirTemp=envirTemp, atsLoadDevice=atsLoadDevice, atsInputLowVoltageCleared=atsInputLowVoltageCleared, outletUserLogoutInfo=outletUserLogoutInfo, upsAdvanceIdentLCDFirmwareVersion=upsAdvanceIdentLCDFirmwareVersion, bmConfigResHealthWarnThreshold=bmConfigResHealthWarnThreshold, bmProbesVoltageEntry=bmProbesVoltageEntry, ePDULoadStatusBankNumber=ePDULoadStatusBankNumber, ePDULoadDevMaxBankLoad=ePDULoadDevMaxBankLoad, upsEnterBypassMode=upsEnterBypassMode, atsSourceConfigChanged=atsSourceConfigChanged, atsConfigNominalVoltage=atsConfigNominalVoltage, upsHardwareFault=upsHardwareFault, ePDUOutletPhaseOverloadRestriction=ePDUOutletPhaseOverloadRestriction, ePDU2DeviceConfigPeakLoadReset=ePDU2DeviceConfigPeakLoadReset, bmConfigResHealthAlarmThreshold=bmConfigResHealthAlarmThreshold, atsInputLowFrequency=atsInputLowFrequency, ePDU2OutletSwitchedConfigIndex=ePDU2OutletSwitchedConfigIndex, ePDU2OutletSwitchedControlEntry=ePDU2OutletSwitchedControlEntry, upsEnterSleep=upsEnterSleep, upsPhaseOutput=upsPhaseOutput, hardware=hardware, pduOutletMeteredEvent=pduOutletMeteredEvent, bmConfigVoltDiffAlarmThreshold=bmConfigVoltDiffAlarmThreshold, ePDU2IdentFirmwareRev=ePDU2IdentFirmwareRev, atsLCDCommunicationLostCleared=atsLCDCommunicationLostCleared, ePDU2Ident=ePDU2Ident, ePDU2PhaseStatusPeakLoadTimestamp=ePDU2PhaseStatusPeakLoadTimestamp, upsStartBatteryTest=upsStartBatteryTest, ePDU2IdentModuleIndex=ePDU2IdentModuleIndex, ePDUCommunicationEstablished=ePDUCommunicationEstablished, atsLoadCfgPhaseTable=atsLoadCfgPhaseTable, ePDU2BankInfoIndex=ePDU2BankInfoIndex, ePDU2OutletSwitchedInfoNumber=ePDU2OutletSwitchedInfoNumber, bmConfigHighVoltAlarmThreshold10mV=bmConfigHighVoltAlarmThreshold10mV, ePDULoadPhaseConfig=ePDULoadPhaseConfig, atsLoadStatusBankTableSize=atsLoadStatusBankTableSize, bmProbesTableSize=bmProbesTableSize, atsIdentAgentHardwareRevision=atsIdentAgentHardwareRevision, passwordChange=passwordChange, upsAdvanceInputLineVoltage=upsAdvanceInputLineVoltage, ePDU2BankInfoNumber=ePDU2BankInfoNumber, ePDULoadPhaseConfigNearOverloadThreshold=ePDULoadPhaseConfigNearOverloadThreshold, atsSwitchSource=atsSwitchSource, envirContactStatus=envirContactStatus, ePDUIdent=ePDUIdent, ePDUStatusPhaseIndex=ePDUStatusPhaseIndex, atsOutletCfgTableSize=atsOutletCfgTableSize, atsOutletOnCommand=atsOutletOnCommand, envirContact=envirContact, ePDU=ePDU, atsConfig=atsConfig, configurationChanged=configurationChanged, upsBankOutletControlEntry=upsBankOutletControlEntry, upsAdvanceIdentCurrentRating=upsAdvanceIdentCurrentRating, upsAdvanceIdentAgentFirmwareRevision=upsAdvanceIdentAgentFirmwareRevision, atsOutletOffCommand=atsOutletOffCommand, ePDU2IdentContact=ePDU2IdentContact, atsStatusInputPhaseEntry=atsStatusInputPhaseEntry, pduOutletMeteredAlarm=pduOutletMeteredAlarm, upsChargerFailure=upsChargerFailure, bmProbesAlarm=bmProbesAlarm, ePDUOutletConfigChange=ePDUOutletConfigChange, atsSourceFaultCleared=atsSourceFaultCleared, atsInputHighFrequency=atsInputHighFrequency, atsStatusInputPhasePower=atsStatusInputPhasePower, ePDUOverloadCleared=ePDUOverloadCleared, ePDU2OutletMeteredStatusEnergyStart=ePDU2OutletMeteredStatusEnergyStart, pduOutletSwitchedEvent=pduOutletSwitchedEvent, upsAdvanceConfig=upsAdvanceConfig, ePDUOutletConfigMonitoredOverloadThreshold=ePDUOutletConfigMonitoredOverloadThreshold, ePDU2PhaseConfigPhasePeakLoadReset=ePDU2PhaseConfigPhasePeakLoadReset, atsLoadDevPhaseMaxLoad=atsLoadDevPhaseMaxLoad, bmConfigHighTempAlarmThreshold=bmConfigHighTempAlarmThreshold, ePDUStatusOutletTable=ePDUStatusOutletTable, ePDU2OutletSwitchedControlCommand=ePDU2OutletSwitchedControlCommand, ePDU2OutletSwitchedStatusCommandPending=ePDU2OutletSwitchedStatusCommandPending, ePDU2GroupNumberOfDevices=ePDU2GroupNumberOfDevices, upsSignalClientShutdown=upsSignalClientShutdown, upsAdvanceIdent=upsAdvanceIdent, ePDUOutletConfigIndex=ePDUOutletConfigIndex, ePDULoadDevNumPhases=ePDULoadDevNumPhases, bmProperty=bmProperty, envirContactEntry=envirContactEntry, upsDiagnosticsPassed=upsDiagnosticsPassed, ePDU2OutletMeteredStatusLoad=ePDU2OutletMeteredStatusLoad, envirTempHighThreshold=envirTempHighThreshold, ePDULoadBankConfigNearOverloadThreshold=ePDULoadBankConfigNearOverloadThreshold, ePDULoadDevNumBanks=ePDULoadDevNumBanks, eSwitchBase=eSwitchBase, ePDUIdentHardwareRev=ePDUIdentHardwareRev, ePDU2BankStatusTable=ePDU2BankStatusTable, atsOutletStatusOutletName=atsOutletStatusOutletName, upsPhaseInputEntry=upsPhaseInputEntry, atsRedundancyFail=atsRedundancyFail, ePDUStatusBankTableSize=ePDUStatusBankTableSize, ePDU2DeviceConfigEnergyReset=ePDU2DeviceConfigEnergyReset, upsAdvanceOutput=upsAdvanceOutput, upsAdvanceConfigLowBatteryRunTime=upsAdvanceConfigLowBatteryRunTime, ePDU2DeviceInfoOrientation=ePDU2DeviceInfoOrientation, atsStatus=atsStatus, upsOverload=upsOverload, atsStatusInputTableIndex=atsStatusInputTableIndex, eSwitchBaseCtrTable=eSwitchBaseCtrTable, mtrapinfoBmEventId=mtrapinfoBmEventId, envirTempCelsiusRateOfChange=envirTempCelsiusRateOfChange, eswitch=eswitch, bmConfigHighResAlarmThreshold=bmConfigHighResAlarmThreshold, upsBatteryExpiration=upsBatteryExpiration)
mibBuilder.exportSymbols("CPS-MIB", ePDU2OutletSwitchedStatusModuleIndex=ePDU2OutletSwitchedStatusModuleIndex, envirIdent=envirIdent, upsPhaseBypassVoltage=upsPhaseBypassVoltage, ePDU2DeviceStatusLoadState=ePDU2DeviceStatusLoadState, atsOutletDevColdStartDelay=atsOutletDevColdStartDelay, ePDU2DeviceStatusPowerPeakLoad=ePDU2DeviceStatusPowerPeakLoad, upsBaseConfigNumDevices=upsBaseConfigNumDevices, upsAdvanceControlFlashAndBeep=upsAdvanceControlFlashAndBeep, ePDU2OutletMeteredInfoRating=ePDU2OutletMeteredInfoRating, bmFuncEqualActiveCond=bmFuncEqualActiveCond, atsIdent=atsIdent, upsTurnoffStarted=upsTurnoffStarted, upsPhaseOutputTable=upsPhaseOutputTable, ePDULineUndervoltage=ePDULineUndervoltage, ePDUOutletLowLoad=ePDUOutletLowLoad, atsOutletCtrlOutletName=atsOutletCtrlOutletName, ePDU2DeviceStatusTable=ePDU2DeviceStatusTable, upsPhaseInputTableIndex=upsPhaseInputTableIndex, upsAdvanceIdentFirmwareRevision=upsAdvanceIdentFirmwareRevision, envirTemperatureCelsius=envirTemperatureCelsius, upsModuleRectifierAlarm=upsModuleRectifierAlarm, upsAdvanceControl=upsAdvanceControl, ePDULoadDevBankNumber=ePDULoadDevBankNumber, atsLoadCfgBankEntry=atsLoadCfgBankEntry, upsPhaseOutputTableIndex=upsPhaseOutputTableIndex, upsPhaseInputTable=upsPhaseInputTable, ePDULoadDevBankTableSize=ePDULoadDevBankTableSize, atsStatusPowerSupplyTableIndex=atsStatusPowerSupplyTableIndex, envirTempCelsiusHighThreshold=envirTempCelsiusHighThreshold, accepterActive=accepterActive, upsBaseInputPhase=upsBaseInputPhase, ePDUOutletStatusEnergyStartTime=ePDUOutletStatusEnergyStartTime, deviceName=deviceName, upsBoostOn=upsBoostOn, ePDU2OutletMeteredStatusEntry=ePDU2OutletMeteredStatusEntry, bmConfigBattAH=bmConfigBattAH, ePDUStatusOutletNumber=ePDUStatusOutletNumber, ePDUDelayOutletRebootCommand=ePDUDelayOutletRebootCommand, ePDU2BankConfigModuleIndex=ePDU2BankConfigModuleIndex, upsAdvanceConfigShutoffDelay=upsAdvanceConfigShutoffDelay, ePDUStatusOutletEntry=ePDUStatusOutletEntry, upsAdvanceIdentLoadPower=upsAdvanceIdentLoadPower, bmConfigProbesCountOnString=bmConfigProbesCountOnString, atsConfigTransferVoltageRange=atsConfigTransferVoltageRange, ePDU2PhaseConfigLowLoadThreshold=ePDU2PhaseConfigLowLoadThreshold, upsBankOutletControlTable=upsBankOutletControlTable, ePDU2OutletMeteredStatusActivePower=ePDU2OutletMeteredStatusActivePower, atsIdentDateOfManufacture=atsIdentDateOfManufacture, upsAdvanceBattery=upsAdvanceBattery, ePDU2BankInfoTable=ePDU2BankInfoTable, bmProbesTempProbeIndex=bmProbesTempProbeIndex, ePDU2OutletMeteredStatusPeakPowerStartTime=ePDU2OutletMeteredStatusPeakPowerStartTime, atsOutletCfgTable=atsOutletCfgTable, ePDU2PhaseStatusPeakLoad=ePDU2PhaseStatusPeakLoad, atsLoadDevBankEntry=atsLoadDevBankEntry, bmSystemAlarm=bmSystemAlarm, ePDULoadPhaseConfigTable=ePDULoadPhaseConfigTable, atsOutletStatusOutletBank=atsOutletStatusOutletBank, ePDU2PhaseConfigModuleIndex=ePDU2PhaseConfigModuleIndex, ePDULoadStatusPowerFactor=ePDULoadStatusPowerFactor, ePDU2DeviceConfigDisplayOrientation=ePDU2DeviceConfigDisplayOrientation, pduDeviceAlarmClear=pduDeviceAlarmClear, mcontrolReset=mcontrolReset, ePDU2DeviceStatusPowerSupply2Status=ePDU2DeviceStatusPowerSupply2Status, envirTemperature=envirTemperature, atsLowLoad=atsLowLoad, upsRFC1628TrapTestCompleted=upsRFC1628TrapTestCompleted, atsRedundancyRestored=atsRedundancyRestored, atsOverload=atsOverload, ePDU2OutletSwitchedControlNumber=ePDU2OutletSwitchedControlNumber, outletUserLoginInfo=outletUserLoginInfo, atsLoadCfgPhaseLowLoad=atsLoadCfgPhaseLowLoad, ePDU2OutletMeteredInfoBank=ePDU2OutletMeteredInfoBank, bmIdentLocation=bmIdentLocation, bmFuncResMeasureManualResult=bmFuncResMeasureManualResult, ePDUDelayOutletOffCommand=ePDUDelayOutletOffCommand, atsOutletDevColdStartState=atsOutletDevColdStartState, ePDU2PhaseStatusLoad=ePDU2PhaseStatusLoad, mconfigClockDate=mconfigClockDate, atsStatusDevice=atsStatusDevice, upsAdvanceTestEstimationResults=upsAdvanceTestEstimationResults, ePDULoadBankConfigTable=ePDULoadBankConfigTable, ePDU2PhaseStatusPowerFactor=ePDU2PhaseStatusPowerFactor, ePDU2BankStatusLoadState=ePDU2BankStatusLoadState, atsStatusInputName=atsStatusInputName, atsOutletDevice=atsOutletDevice, atsLoadDevPhaseEntry=atsLoadDevPhaseEntry, ePDU2IdentLocation=ePDU2IdentLocation, ePDU2PhaseConfigNearOverloadThreshold=ePDU2PhaseConfigNearOverloadThreshold, ePDUOutletStatusActivePower=ePDUOutletStatusActivePower, ePDUIdentDeviceNumOutlets=ePDUIdentDeviceNumOutlets, ePDU2OutletSwitchedInfoTable=ePDU2OutletSwitchedInfoTable, ePDU2OutletSwitchedInfoPhaseLayout=ePDU2OutletSwitchedInfoPhaseLayout, upsAdvanceTestIndicators=upsAdvanceTestIndicators, upsModuleFanAlarm=upsModuleFanAlarm, ePDUOutletStatusEntry=ePDUOutletStatusEntry, ePDUPowerSupplyDevice=ePDUPowerSupplyDevice, atsLoadStatus=atsLoadStatus, ePDU2IdentDateOfManufacture=ePDU2IdentDateOfManufacture, ePDU2OutletSwitchedConfigPowerOnTime=ePDU2OutletSwitchedConfigPowerOnTime, upsPhaseBypassTableSize=upsPhaseBypassTableSize, ePDU2OutletSwitchedStatusIndex=ePDU2OutletSwitchedStatusIndex, ePDUOutletNearOverload=ePDUOutletNearOverload, upsModuleManualShutdown=upsModuleManualShutdown, ePDU2DeviceControlName=ePDU2DeviceControlName, upsPhaseBypass=upsPhaseBypass, upsPhaseBypassPowerFactor=upsPhaseBypassPowerFactor, ePDU2PhaseStatusPower=ePDU2PhaseStatusPower, ePDU2DeviceStatusPeakLoadStartTime=ePDU2DeviceStatusPeakLoadStartTime, atsOutlet=atsOutlet, upsWiringFault=upsWiringFault, upsAdvanceControlSimulatePowerFail=upsAdvanceControlSimulatePowerFail, bmControl=bmControl, envirContactTable=envirContactTable, atsLoadCfgPhaseOverLoad=atsLoadCfgPhaseOverLoad, atsOutletCfgOutletName=atsOutletCfgOutletName, environmentSensor=environmentSensor, bmFuncResMeasure=bmFuncResMeasure, atsOutletStatusEntry=atsOutletStatusEntry, ePDU2OutletSwitchedConfigModuleIndex=ePDU2OutletSwitchedConfigModuleIndex, upsAdvanceOutputCurrent=upsAdvanceOutputCurrent, ePDULineOvervoltageCleared=ePDULineOvervoltageCleared, ePDU2OutletSwitchedStatusState=ePDU2OutletSwitchedStatusState, atsEventCountsCleared=atsEventCountsCleared, ePDUIdentModelNumber=ePDUIdentModelNumber, atsLoadStatusBankEntry=atsLoadStatusBankEntry, bmProbesTable=bmProbesTable, upsAdvanceInputStatus=upsAdvanceInputStatus, mconfigClock=mconfigClock, upsModuleInvertorAlarm=upsModuleInvertorAlarm, bmProbesVoltageTable=bmProbesVoltageTable, atsStatusInputPhaseCurrent=atsStatusInputPhaseCurrent, ePDUStatusBankNumber=ePDUStatusBankNumber, upsAdvanceIdentPowerRating=upsAdvanceIdentPowerRating, ePDU2BankConfigOverloadThreshold=ePDU2BankConfigOverloadThreshold, bmProbesVoltageBattIndex=bmProbesVoltageBattIndex, atsStatusInputPhaseTableIndex=atsStatusInputPhaseTableIndex, eSwitchIdentDateOfManufacture=eSwitchIdentDateOfManufacture, ePDUIdentIndicator=ePDUIdentIndicator, atsIdentAgentSerialNumber=atsIdentAgentSerialNumber, ePDUOutlet=ePDUOutlet, upsBaseIdent=upsBaseIdent, bmProbesTempIndex=bmProbesTempIndex, ePDUOutletBankIndex=ePDUOutletBankIndex, ePDU2OutletSwitchedControlName=ePDU2OutletSwitchedControlName, eSwitchBaseCtrEntry=eSwitchBaseCtrEntry, ePDULoadStatusIndex=ePDULoadStatusIndex, ePDUOverload=ePDUOverload, ePDU2DeviceStatusEnergy=ePDU2DeviceStatusEnergy, ePDU2OutletSwitchedControlIndex=ePDU2OutletSwitchedControlIndex, ePDU2DeviceStatusRoleType=ePDU2DeviceStatusRoleType, ups=ups, ats=ats, ePDU2OutletSwitchedInfoBank=ePDU2OutletSwitchedInfoBank, atsLoadCfgPhaseNearOverLoad=atsLoadCfgPhaseNearOverLoad, atsLoadCfgBankOutletRestriction=atsLoadCfgBankOutletRestriction, ePDUOutletControlOutletPhase=ePDUOutletControlOutletPhase, ePDUStatusInputVoltage=ePDUStatusInputVoltage, ePDU2DeviceConfigPowerOverloadThreshold=ePDU2DeviceConfigPowerOverloadThreshold, communicationEstablished=communicationEstablished, ePDULowLoadCleared=ePDULowLoadCleared, upsBaseOutputPhase=upsBaseOutputPhase, ePDU2BankStatusModuleIndex=ePDU2BankStatusModuleIndex, bmProbesVoltageProbeIndex=bmProbesVoltageProbeIndex, atsStatusDevSourceRelayStatus=atsStatusDevSourceRelayStatus, upsAdvanceBatteryCurrent=upsAdvanceBatteryCurrent, ePDUIdentDeviceDisplayOrientation=ePDUIdentDeviceDisplayOrientation, ePDU2OutletMeteredConfigEntry=ePDU2OutletMeteredConfigEntry, bmSystemWarning=bmSystemWarning, ePDUBankOverload=ePDUBankOverload, atsLoadStatusPhaseEntry=atsLoadStatusPhaseEntry, atsLCDCommunicationLost=atsLCDCommunicationLost, bmProbesResTableSize=bmProbesResTableSize, ePDUOutletConfigMonitoredPeakLoadReset=ePDUOutletConfigMonitoredPeakLoadReset, clientRemoved=clientRemoved, upsTest=upsTest, ePDU2Device=ePDU2Device, atsIdentHardwareRev=atsIdentHardwareRev, upsBaseBatteryStatus=upsBaseBatteryStatus, mconfigNumTrapAccepters=mconfigNumTrapAccepters, ePDUStatusInputFrequency=ePDUStatusInputFrequency, atsLoadDevPhaseTable=atsLoadDevPhaseTable, ePDU2DeviceConfigTable=ePDU2DeviceConfigTable, atsStatusInput=atsStatusInput, ePDU2DeviceStatusPowerFactor=ePDU2DeviceStatusPowerFactor, ePDU2OutletSwitchedConfigPowerOffTime=ePDU2OutletSwitchedConfigPowerOffTime, returnFromOverLoad=returnFromOverLoad, ePDUPowerSupply1Ok=ePDUPowerSupply1Ok, upsAdvanceTest=upsAdvanceTest, ePDU2DeviceStatusEntry=ePDU2DeviceStatusEntry, ePDUOutletConfigMonitoredNearOverloadThreshold=ePDUOutletConfigMonitoredNearOverloadThreshold, upsAdvanceConfigMinReturnCapacity=upsAdvanceConfigMinReturnCapacity, upsPhaseInputVoltage=upsPhaseInputVoltage, ePDU2IdentHardwareRev=ePDU2IdentHardwareRev, atsLoadDevBankTable=atsLoadDevBankTable, ePDU2PhaseStatusPeakLoadStartTime=ePDU2PhaseStatusPeakLoadStartTime, bmProbesResStringIndex=bmProbesResStringIndex, atsLoadConfig=atsLoadConfig, upsAdvanceBatteryReplaceIndicator=upsAdvanceBatteryReplaceIndicator, acceptThisDevice=acceptThisDevice, ePDU2OutletSwitchedConfigEntry=ePDU2OutletSwitchedConfigEntry, nclBankOn=nclBankOn, bmProbesVoltageAlarmStatus=bmProbesVoltageAlarmStatus, atsInputHighVoltageCleared=atsInputHighVoltageCleared, ePDUDeviceConfigChange=ePDUDeviceConfigChange, ePDU2OutletMeteredStatusEnergy=ePDU2OutletMeteredStatusEnergy, ePDU2PhaseConfigNumber=ePDU2PhaseConfigNumber, upsAdvanceTestRuntimeEstimation=upsAdvanceTestRuntimeEstimation, atsLoadStatusPhasePower=atsLoadStatusPhasePower, failAuthViaConsole=failAuthViaConsole, ePDUNearOverload=ePDUNearOverload, upsAdvanceBatteryFullChargeVoltage=upsAdvanceBatteryFullChargeVoltage, ePDU2OutletSwitchedInfoEntry=ePDU2OutletSwitchedInfoEntry, upsAdvanceBatteryTemperature=upsAdvanceBatteryTemperature, ePDU2OutletMeteredStatusName=ePDU2OutletMeteredStatusName, ePDULoadDevMaxOutletEntry=ePDULoadDevMaxOutletEntry, accepterAddr=accepterAddr, ePDU2PhaseInfoIndex=ePDU2PhaseInfoIndex, ePDU2OutletSwitchedConfigNumber=ePDU2OutletSwitchedConfigNumber, atsLoadCfgBankTableIndex=atsLoadCfgBankTableIndex, bmProbesVoltageIndex=bmProbesVoltageIndex, upsBuckOn=upsBuckOn, ePDULoadDevOutletIndex=ePDULoadDevOutletIndex, trapIndex=trapIndex, ePDU2OutletMeteredConfigOverloadThreshold=ePDU2OutletMeteredConfigOverloadThreshold, ePDULoadPhaseConfigEntry=ePDULoadPhaseConfigEntry, deviceIndex=deviceIndex, ePDUBankOverloadCleared=ePDUBankOverloadCleared, upsBaseIdentName=upsBaseIdentName, upsBattery=upsBattery, eSwitchBaseEntry=eSwitchBaseEntry, upsAdvanceIdentSerialNumber=upsAdvanceIdentSerialNumber, upsBankControlOutletCommand=upsBankControlOutletCommand, ePDU2GroupPeakRecordReset=ePDU2GroupPeakRecordReset, atsDevHardwareFaultCleared=atsDevHardwareFaultCleared, bmPropertyInputVoltageRange=bmPropertyInputVoltageRange, ePDU2BankConfigPeakLoadReset=ePDU2BankConfigPeakLoadReset, ePDU2DeviceConfigModuleIndex=ePDU2DeviceConfigModuleIndex, ePDU2DeviceStatusPowerSupplyAlarm=ePDU2DeviceStatusPowerSupplyAlarm, ePDU2PhaseStatusNumber=ePDU2PhaseStatusNumber, ePDU2BankStatusEntry=ePDU2BankStatusEntry, ePDU2OutletMeteredConfigIndex=ePDU2OutletMeteredConfigIndex, upsAdvanceConfigLowBatteryThreshold=upsAdvanceConfigLowBatteryThreshold, atsStatusSelectedSource=atsStatusSelectedSource, upsPhaseBypassCurrent=upsPhaseBypassCurrent, envDryContactAbnormal=envDryContactAbnormal)
