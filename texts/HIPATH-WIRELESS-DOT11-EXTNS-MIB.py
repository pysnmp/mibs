#
# PySNMP MIB module HIPATH-WIRELESS-DOT11-EXTNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/ewc/HIPATH-WIRELESS-DOT11-EXTNS-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 13:28:49 2024
# On host fv-az883-167 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
hiPathWirelessMgmt, hiPathWirelessModules = mibBuilder.importSymbols("HIPATH-WIRELESS-SMI", "hiPathWirelessMgmt", "hiPathWirelessModules")
dot11WEPDefaultKeyIndex, = mibBuilder.importSymbols("IEEE802dot11-MIB", "dot11WEPDefaultKeyIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, iso, TimeTicks, MibIdentifier, Unsigned32, Bits, Counter64, Counter32, ModuleIdentity, Integer32, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "TimeTicks", "MibIdentifier", "Unsigned32", "Bits", "Counter64", "Counter32", "ModuleIdentity", "Integer32", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TextualConvention, MacAddress, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "TruthValue", "RowStatus", "DisplayString")
hiPathWirelessDot11ExtnsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4329, 15, 5, 3))
hiPathWirelessDot11ExtnsMIB.setRevisions(('2016-02-23 14:46', '2015-03-12 15:15', '2013-10-16 15:15', '2013-04-30 15:15', '2011-08-17 18:15', '2011-07-20 11:45', '2011-05-05 09:58', '2011-01-13 11:25', '2010-04-08 17:16', '2009-01-19 14:15', '2008-05-09 16:51', '2007-09-28 14:30', '2006-10-24 13:05', '2005-10-28 01:14',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hiPathWirelessDot11ExtnsMIB.setRevisionsDescriptions(('\n\t\t\t\t- deprecated dot11ExtSmtMaxBasicRate, dot11ExtSmtMaxOperationalRate, dot11ExtSmtBGretries, dot11ExtSmtBEretries,\n\t\t\t\t   dot11ExtSmtVIretries, dot11ExtSmtVOretries and dot11ExtSmtTVOretries from dot11ExtSmtTable. \n\t\t\t\t- deprecated dot11ExtWEPKeyMappingsTable.\n\t\t\t\t', '- Added dot11ExtSmtProbeSuppression, dot11ExtSmtForceDisassociate, and\n\t\t\t            dot11ExtSmtRssThreshold  to dot11ExtSmtTable.\n\t\t\t        ', '- Added dot11ExtSmtRadioAttenuation to dot11ExtSmtTable.\n\t\t\t         - Added width80Mhz(4) to dot11nChlWidth.\n\t\t\t         - Added dot11c(5) to dot11Capabilities.\n\t\t\t         - Added dot11ac(11) and dot11cStrict(12)  to dot11ExtRadioType.\n\t\t\t         - Added notSupport(0) to dot11DiversityRxDiversity and dot11DiversityTxDiversity.\n\t\t\t         - Added mode11AC(6) to assocIfIndex.\n\t\t\t        ', '- Added  assocDLLostRetriesPackets and assocDLLostRetriesBytes to assocGroupTable.\n\t\t\t        ', 'dot11ExtRadioStatsTable was modified:\n\t\t\t\t- Added new elements to enhanace radio stats -- dot11ExtRadioAvgBusyChPercentage, dot11ExtRadioMaxBusyChPercentage,\n\t\t\t\t  dot11ExtRadioAvgRxChOccPercentage, dot11ExtRadioMaxRxChOccPercentage\n\t\t\t\t- Description of some the elements in that table are enhanced.\n\t\t\t\t- Defined range for some the elements in that table.\n\t\t\t\tNew object group, dot11ExtRadioStatsGroup,  was created.', 'assocIfIndex definition was enhanced to include 11n operational mode.', '- Table dot11nConfigTable was modified.  More radio attributes were added to that table. \n\t\t\t\t- assocGroupRSS was added to assocGroupTable.\n\t\t\t\t- New object groups were created for modified tables: dot11nConfigGroup, assocGroupGroup, assocCountersGroup.\n\t\t\t\t- Corrected description for assocReceivedRSSI.', '- dot11ExtRadioType:  Radio attribute was modified with more granularity.\n\t\t\t\t- Contact information was modified.\n\t\t\t\t- Corrected error in revision history descriptions.', 'Obsoleted:\n\t\t\t\t- dot11ExtVlanSmtTable elements: vlanBridgeMode and vlanTag', 'Updated contact information.\n\t\t\t\tCorrected syntax error in dot11ExtSmtDcsMode.', 'Added antenna selection.\n\t\t\t\tAdded more radio attributes to dot11ExtSmtTable.\n\t\t\t\tAdded radio stats (dot11ExtRadioStatsTable).\n\t\t\t\t', '- Additional radio attributes were added to dot11ExtSmtTable.\n\t\t\t\t- dot11gBasicG was obsoleted.\n\t\t\t\t- dot11bBasicB was obsoleted.', 'Added antenna diversity for radios.\n\t\t\t\taccocIfIndex syntax and description were modified.', 'Initial revision.',))
if mibBuilder.loadTexts: hiPathWirelessDot11ExtnsMIB.setLastUpdated('201602231446Z')
if mibBuilder.loadTexts: hiPathWirelessDot11ExtnsMIB.setOrganization('Chantry Networks, Inc')
if mibBuilder.loadTexts: hiPathWirelessDot11ExtnsMIB.setContactInfo('Chantry Networks, Inc.\n\t\t\t\t\n\t\t\t\t55 Commerce Valley Drive (W), Suite 400\n\t\t\t\tThornhill, Ontario L3T 7V9, Canada\n\t\t\t\t\n\t\t\t\tPhone:   1-289-695-3182\n\t\t\t\tFax:     1 289-695-3299')
if mibBuilder.loadTexts: hiPathWirelessDot11ExtnsMIB.setDescription('This module provides extension objects to the ieee80211 MIB.')
class WEPKeytype(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(14, 14), ValueSizeConstraint(38, 38), )
dot11ExtnsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1))
dot11Extsmt = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1))
dot11ExtBSSIDTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 1), )
if mibBuilder.loadTexts: dot11ExtBSSIDTable.setStatus('current')
if mibBuilder.loadTexts: dot11ExtBSSIDTable.setDescription('The dot11ExtBSSIDTable contains a list of the BSS (Basic Service Set) \n\t\t\t\tIdentifiers supported by each radio, and associates an \n\t\t\t\tSSID with with each BSS.')
dot11ExtBSSIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtBSSIndex"))
if mibBuilder.loadTexts: dot11ExtBSSIDEntry.setStatus('current')
if mibBuilder.loadTexts: dot11ExtBSSIDEntry.setDescription('An entry in the BSSID table.')
dot11ExtBSSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtBSSIndex.setStatus('current')
if mibBuilder.loadTexts: dot11ExtBSSIndex.setDescription('A unique value, greater than zero, that identifies\n\t\t\t\teach Basic Service Set Identifier (BSSID) supported by a radio.')
dot11ExtBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtBSSID.setStatus('current')
if mibBuilder.loadTexts: dot11ExtBSSID.setDescription('The Basic Service Set Identifier (BSSID) uniquely identifies a \n\t\t\t\twireless network adapter.  In the case of the AP2620, \n\t\t\t\ta radio can support up to 8 distinct BSSIDs.')
dot11ExtSSIDID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSSIDID.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSSIDID.setDescription('SSIDID is a High Path Wireless internal numeric identifier for the SSID.  \n\t\t\t\tThis number is meaningless external to the product.')
dot11ExtSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSSID.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSSID.setDescription('The Service Set Identifier (SSID) is the network name identifying \n\t\t\t\tthe wireless network to which this adapter belongs.')
dot11ExtBSSIDWEPKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtBSSIDWEPKeyIndex.setStatus('current')
if mibBuilder.loadTexts: dot11ExtBSSIDWEPKeyIndex.setDescription('Specifies the WEP default key associated with this BSS\n\t\t\t\tfrom the ieee802dot11 dot11WEPDefaultKeysTable.')
dot11ExtSSIDSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSSIDSuppress.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSSIDSuppress.setDescription('When True, the radio will not broadcast the SSID associated \n\t\t\t\twith this BSSID in the beacons.')
dot11ExtPriorityTrafficHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtPriorityTrafficHandling.setStatus('current')
if mibBuilder.loadTexts: dot11ExtPriorityTrafficHandling.setDescription('When True, priority traffic handling is enabled for this BSSID.')
dot11ExtWEPKeyMappingsTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 2), )
if mibBuilder.loadTexts: dot11ExtWEPKeyMappingsTable.setStatus('deprecated')
if mibBuilder.loadTexts: dot11ExtWEPKeyMappingsTable.setDescription('The dot11ExtWEPKeyMappingsTable supports the ability to \n\t\t\t\tconfigure a separate WEP key for each BSS/Station pairing.\n\t\t\t\t\n\t\t\t\tThe WEPKeyMappingValues in this table are logically WRITE-ONLY. \n\t\t\t\tAny attempt to read these values will return null or 0.')
dot11ExtWEPKeyMappingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtBSSIndex"), (0, "HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtWEPKeyMappingIndex"))
if mibBuilder.loadTexts: dot11ExtWEPKeyMappingsEntry.setStatus('current')
if mibBuilder.loadTexts: dot11ExtWEPKeyMappingsEntry.setDescription('An entry in the dot11ExtWEPKeyMappingsTable.')
dot11ExtWEPKeyMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtWEPKeyMappingIndex.setStatus('current')
if mibBuilder.loadTexts: dot11ExtWEPKeyMappingIndex.setDescription('The auxiliary variable used to identify instances\n\t\t\t\tof the columnar objects in the WEP Key Mappings Table.')
dot11ExtWEPKeyMappingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 2, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11ExtWEPKeyMappingAddress.setStatus('current')
if mibBuilder.loadTexts: dot11ExtWEPKeyMappingAddress.setDescription('The MAC address of the STA for which the values from this\n\t\t\t\tkey mapping entry are to be used.')
dot11ExtWEPKeyMappingWEPOn = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 2, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11ExtWEPKeyMappingWEPOn.setStatus('current')
if mibBuilder.loadTexts: dot11ExtWEPKeyMappingWEPOn.setDescription('Boolean as to whether WEP is to be used when communicating\n\t\t\t\twith the dot11WEPKeyMappingAddress STA.')
dot11ExtWEPKeyMappingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 2, 1, 4), WEPKeytype()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11ExtWEPKeyMappingValue.setStatus('current')
if mibBuilder.loadTexts: dot11ExtWEPKeyMappingValue.setDescription('A WEP secret key value.')
dot11ExtWEPKeyMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11ExtWEPKeyMappingStatus.setStatus('current')
if mibBuilder.loadTexts: dot11ExtWEPKeyMappingStatus.setDescription('The status column used for creating, modifying, and\n\t\t\t\tdeleting instances of the columnar objects in the WEP key\n\t\t\t\tmapping Table.')
dot11CapabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 3), )
if mibBuilder.loadTexts: dot11CapabilitiesTable.setStatus('current')
if mibBuilder.loadTexts: dot11CapabilitiesTable.setDescription('The dot11CapabilitiesTable contains the 802.11 protocols \n\t\t\t\tthat each radio in the accessPoint are capable of supporting.')
dot11CapabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11CapabilitiesEntry.setStatus('current')
if mibBuilder.loadTexts: dot11CapabilitiesEntry.setDescription('An entry in the dot11CapabilitiesTable.')
dot11Capabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 3, 1, 1), Bits().clone(namedValues=NamedValues(("dot11b", 0), ("dot11g", 1), ("dot11a", 2), ("dot11j", 3), ("dot11n", 4), ("dot11c", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Capabilities.setStatus('current')
if mibBuilder.loadTexts: dot11Capabilities.setDescription('Describes the capabilities of a radio, for example the protocol supported.')
dot11bConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 4), )
if mibBuilder.loadTexts: dot11bConfigTable.setStatus('current')
if mibBuilder.loadTexts: dot11bConfigTable.setDescription('The table contains configuration elements specific to the 802.11b protocol.')
dot11bConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11bConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dot11bConfigEntry.setDescription('The dot11bConfigTable contains configuration elements \n\t\t\t\tspecific to the 802.11b protocol.  If an attempt to \n\t\t\t\tread the elements is made for a radio which does not \n\t\t\t\tsupport 802.11b, null or 0 will be returned.')
dot11bEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11bEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11bEnabled.setDescription('When true, 802.1b protocol support is active on this radio.')
dot11BasicB = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic11b", 1), ("basic11", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11BasicB.setStatus('obsolete')
if mibBuilder.loadTexts: dot11BasicB.setDescription('Specifies the basic rate set for a 11b or 11b+g radio. When set to \n\t\t\t\tbasic11b, the radio uses all four 11b rates (1, 2, 5.5 and 11 Mbps)  \n\t\t\t\tas basic rates. When when set to basic11 the radio uses\n\t\t\t\tonly the two 11 rates (1 and 2 Mbps) as basic rates.')
dot11gConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 5), )
if mibBuilder.loadTexts: dot11gConfigTable.setStatus('current')
if mibBuilder.loadTexts: dot11gConfigTable.setDescription('The dot11gConfigTable contains configuration elements \n\t\t\t\tspecific to the 802.11g protocol.  If an attempt to \n\t\t\t\tread the elements is made for a radio which does not \n\t\t\t\tsupport 802.11g, null or 0 will be returned.')
dot11gConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dot11gConfigEntry.setDescription('An entry in the dot11gConfigTable.')
dot11gEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 5, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11gEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11gEnabled.setDescription('When true, 802.1g protocol support is active on this radio.')
dot11gProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("auto", 2), ("always", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11gProtectionMode.setStatus('current')
if mibBuilder.loadTexts: dot11gProtectionMode.setDescription('Configures whether and when to use Protection Mode for the 802.11g \n\t\t\t\ttransmissions. Protection Mode helps reduce collisions with legacy\n\t\t\t\t802.11b stations at the expense of additional overhead. None specifies \n\t\t\t\tthat no protection is to be used. Auto specifies that \n\t\t\t\tradio will enable protection mode when it detects \n\t\t\t\tan 802.11b station.  Always specifies that protection\n\t\t\t\tmode is always enabled.')
dot11gProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctsOnly", 1), ("rtcCts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11gProtectionType.setStatus('current')
if mibBuilder.loadTexts: dot11gProtectionType.setDescription('Determines whether 802.11g Protection Mode uses a RTS-CTS sequence\n\t\t\t\tor a CTS-only protection mechanism when Protection Mode is enabled.')
dot11gProtectionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("rate1Mbps", 0), ("rate2Mbps", 1), ("rate5Mbps", 2), ("rate11Mbps", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11gProtectionRate.setStatus('current')
if mibBuilder.loadTexts: dot11gProtectionRate.setDescription('Specifies the rate to be used by RTS or CTS in protection mode.')
dot11gBasicG = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("basic11", 2), ("basic11b", 3), ("ofdm", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11gBasicG.setStatus('obsolete')
if mibBuilder.loadTexts: dot11gBasicG.setDescription('Specifies the set of basic rates in 11-g-only mode. Default \n\t\t\t\tallows all possible basic rates (1, 2, 5.5, 11, 6, 12 and 24 Mbps).\n\t\t\t\tBasic11 specifies only 11 rates (1 nad 2 Mbps) as basic. Basic11b \n\t\t\t\tspecifies all four 11b rates (1, 2, 5.5 and 11 Mbps) as basic.\n\t\t\t\tOFDM specifies only OFDM rates (6, 12 and 24 Mbps) as basic.')
dot11gProtectionModeSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("notAvailable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11gProtectionModeSelected.setStatus('current')
if mibBuilder.loadTexts: dot11gProtectionModeSelected.setDescription("Protection mode selected by Access Point. Values are:\n\t\t\t\toff(0) = protection mode is set to off by Access Point.\n\t\t\t\ton(1) = protection mode is set to on by Access Point.\n\t\t\t\tnotAvailable(2) = protection mode status is not available, either\n\t\t\t\tdue to Access Point's version or stats have not yet been collected\n\t\t\t\tby Controller.")
dot11ExtSmtTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7), )
if mibBuilder.loadTexts: dot11ExtSmtTable.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtTable.setDescription('Extended settings table.')
dot11ExtSmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11ExtSmtEntry.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtEntry.setDescription('An entry in the Extended settings table dot11ExtSmtTable.')
smtShortPreambleInvoked = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("shortPreamble", 1), ("longPreamble", 2), ("autoSelectPreamble", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtShortPreambleInvoked.setStatus('current')
if mibBuilder.loadTexts: smtShortPreambleInvoked.setDescription('Specifies the type of preamble used in an 11b/g radio: \n\t\t\t\talways short, always long or automatically selected.')
dot11ExtSmtCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtCurrentChannel.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtCurrentChannel.setDescription("Specfies the current radio channel. Value of zero means 'auto' selection.")
dot11ExtSmtMaxBasicRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtMaxBasicRate.setStatus('deprecated')
if mibBuilder.loadTexts: dot11ExtSmtMaxBasicRate.setDescription('Specifies the maximum basic rate.')
dot11ExtSmtMinBasicRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtMinBasicRate.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtMinBasicRate.setDescription('Specifies the minimum basic rate which is \n\t\t\t\talso the minimum operational rate.')
dot11ExtSmtMaxOperationalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtMaxOperationalRate.setStatus('deprecated')
if mibBuilder.loadTexts: dot11ExtSmtMaxOperationalRate.setDescription('Specifies the maximum operational rate.')
dot11ExtSmtCurChanSelectedByAP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtCurChanSelectedByAP.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtCurChanSelectedByAP.setDescription('Current channel selected by Access Point.')
dot11ExtSmtRFDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtRFDomain.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtRFDomain.setDescription('Identifies a radio as belonging to an RF Domain.  This is \n\t\t\t\tused to provide dynamic radio management when all SSIDs \n\t\t\t\tare suppressed.')
dot11ExtSmtAutoTxPowerCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtAutoTxPowerCtrl.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtAutoTxPowerCtrl.setDescription('Auto Transmission Power Control.')
dot11ExtSmtCurrentTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtCurrentTxPowerLevel.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtCurrentTxPowerLevel.setDescription('Current transmission power level of the radio.')
dot11ExtSmtMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtMaxTxPower.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtMaxTxPower.setDescription('Maximum transmission power level of the radio.')
dot11ExtSmtMinTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtMinTxPower.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtMinTxPower.setDescription('Minimum transmission power level of the radio.')
dot11ExtSmtAutoTxPowerCtrlAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtAutoTxPowerCtrlAdjust.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtAutoTxPowerCtrlAdjust.setDescription('Auto Transmission Power Control adjust.')
dot11ExtSmtBGretries = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtBGretries.setStatus('deprecated')
if mibBuilder.loadTexts: dot11ExtSmtBGretries.setDescription('Number of retries for Background traffics. ')
dot11ExtSmtBEretries = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtBEretries.setStatus('deprecated')
if mibBuilder.loadTexts: dot11ExtSmtBEretries.setDescription('Number of retries for Best Efforts traffics.')
dot11ExtSmtVIretries = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtVIretries.setStatus('deprecated')
if mibBuilder.loadTexts: dot11ExtSmtVIretries.setDescription('Number of retries for Video traffics.')
dot11ExtSmtVOretries = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtVOretries.setStatus('deprecated')
if mibBuilder.loadTexts: dot11ExtSmtVOretries.setDescription('Number of retries for Voice traffics.')
dot11ExtSmtTVOretries = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtTVOretries.setStatus('deprecated')
if mibBuilder.loadTexts: dot11ExtSmtTVOretries.setDescription('Number of retries for Turbo Voice traffics.')
dot11ExtSmtDcsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("monitor", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtDcsMode.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtDcsMode.setDescription('DCS operation mode.')
dot11ExtSmtDcsNoiseThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-95, -50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtDcsNoiseThreshold.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtDcsNoiseThreshold.setDescription('DCS Nose Threshould. It determines at which interface level\n\t\t\t\tthe AP will decide to look for a ne operating channel. The \n\t\t\t\tunit is dBm. It is valid only when DCS operation mode is set\n\t\t\t\tto monitor or active')
dot11ExtSmtDcsChlOccThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtDcsChlOccThreshold.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtDcsChlOccThreshold.setDescription('DCS Channel Occupancy Threshold. It determines at which channel\n\t\t\t\tutilization the AP decides to look for a new operating channel.\n\t\t\t\tThe unit is % percentage. It is valid only when DCS operation \n\t\t\t\tmode is set to monitor or active')
dot11ExtSmtDcsUpdatePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtDcsUpdatePeriod.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtDcsUpdatePeriod.setDescription('DCS Update Period. It determines the period during which the AP\n\t\t\t\taverages the DCS Noise Threshold & DCS channel Occupancy Threshold\n\t\t\t\tmeasurements. The unit is minutes. The range is 1-15. The 0 means\n\t\t\t\tDCS is disabled. It is valid only when DCS operation mode is set\n\t\t\t\tto monitor or active')
dot11ExtSmtDcsChannelSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtDcsChannelSelection.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtDcsChannelSelection.setDescription('DCS Channel Plan Selection.It is Bitmask of:\n\t\t\t\t1  = all chls (only A), \n\t\t\t\t2  = 3 chls (only BG), \n\t\t\t\t4  = 4 chls (only BG), \n\t\t\t\t8  = auto (only BG), \n\t\t\t\t16 = custom')
dot11ExtSmtDcsChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtDcsChannelList.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtDcsChannelList.setDescription('DCS Channel Plan List.It is custom channel plan. It is valid only when\n\t\t\t\tDCS Channel Plan Selection is set to custom')
dot11ExtSmtRadioAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtRadioAttenuation.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtRadioAttenuation.setDescription('Attenuation of cable between external antenna and AP in db.\n\t\t\t\tvalue -1 :  not configured.\n\t\t\t\t')
dot11ExtSmtProbeSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtProbeSuppression.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtProbeSuppression.setDescription('Enables/Disables probe suppression. Default is disabled.\n\t\t\t\t')
dot11ExtSmtForceDisassociate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtForceDisassociate.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtForceDisassociate.setDescription('IF force-disassoc is enabled, Clients that are associated are sent a Disassoc if the averaged \n\t                RSS is < RSS-threshold -5dBm (with some hysteresis).  Default is disabled.')
dot11ExtSmtRssThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 7, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExtSmtRssThreshold.setStatus('current')
if mibBuilder.loadTexts: dot11ExtSmtRssThreshold.setDescription('The radio probe suppression RSS threshold.  The range is from -50dBm to -100dBm.  Default value is -90dBm.')
dot11ExtVlanSmtTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 8), )
if mibBuilder.loadTexts: dot11ExtVlanSmtTable.setStatus('current')
if mibBuilder.loadTexts: dot11ExtVlanSmtTable.setDescription('This table contains configuration about bridging mode for the radio.')
dot11ExtVlanSmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtBSSIndex"))
if mibBuilder.loadTexts: dot11ExtVlanSmtEntry.setStatus('current')
if mibBuilder.loadTexts: dot11ExtVlanSmtEntry.setDescription('An entry in dot11ExtVlanSmtTable table.')
vlanBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 8, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanBridgeMode.setStatus('obsolete')
if mibBuilder.loadTexts: vlanBridgeMode.setDescription('When true, bridging mode is enabled on this radio.')
vlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTag.setStatus('obsolete')
if mibBuilder.loadTexts: vlanTag.setDescription('Integer specifying the VLAN tag.  If untagged, returns -1.')
dot11DiversityTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 10), )
if mibBuilder.loadTexts: dot11DiversityTable.setStatus('current')
if mibBuilder.loadTexts: dot11DiversityTable.setDescription('List of configuration elements specific to diversity support.')
dot11DiversityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11DiversityEntry.setStatus('current')
if mibBuilder.loadTexts: dot11DiversityEntry.setDescription('An entry in the dot11DiversityTable.')
dot11DiversityRxDiversity = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notSupport", 0), ("best", 1), ("left", 2), ("right", 3))).clone('best')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DiversityRxDiversity.setStatus('current')
if mibBuilder.loadTexts: dot11DiversityRxDiversity.setDescription('Diversity support for reception.')
dot11DiversityTxDiversity = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notSupport", 0), ("best", 1), ("left", 2), ("right", 3))).clone('best')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DiversityTxDiversity.setStatus('current')
if mibBuilder.loadTexts: dot11DiversityTxDiversity.setDescription('Diversity support for transmission.')
dot11AntennaSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("left", 1), ("middle", 2), ("leftMiddle", 3), ("right", 4), ("leftRight", 5), ("middleRight", 6), ("leftMiddleRight", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AntennaSelection.setStatus('current')
if mibBuilder.loadTexts: dot11AntennaSelection.setDescription('Antenna Selection for transmission and reception.')
dot11nConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11), )
if mibBuilder.loadTexts: dot11nConfigTable.setStatus('current')
if mibBuilder.loadTexts: dot11nConfigTable.setDescription('The dot11nConfigTable contains configuration elements \n\t\t\t\tspecific to the 802.11n protocol.  If an attempt to \n\t\t\t\tread the elements is made for a radio which does not \n\t\t\t\tsupport 802.11n, null or 0 will be returned.')
dot11nConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11nConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dot11nConfigEntry.setDescription('An entry in the dot11nConfigTable.')
dot11nEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11nEnabled.setDescription('When true, 802.1n protocol support is active on this radio.')
dot11nChlBonding = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nobond", 0), ("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nChlBonding.setStatus('current')
if mibBuilder.loadTexts: dot11nChlBonding.setDescription('802.11n protocol Channel Bonding.')
dot11nChlWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("width20Mhz", 1), ("width40Mhz", 2), ("auto", 3), ("width80Mhz", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nChlWidth.setStatus('current')
if mibBuilder.loadTexts: dot11nChlWidth.setDescription('802.11n protocol Channel Width.')
dot11nChlGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nChlGuardInterval.setStatus('current')
if mibBuilder.loadTexts: dot11nChlGuardInterval.setDescription('802.11n protocol Guard Interval.')
dot11nProtectEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nProtectEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11nProtectEnabled.setDescription('802.11n protocol Channel Protectino Mode.')
dot11nProtectType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("ctsOnly", 1), ("rtsCts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nProtectType.setStatus('current')
if mibBuilder.loadTexts: dot11nProtectType.setDescription('802.11n protocol 40Mhz Channel Protection Type.')
dot11nProtectOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("protectOffset20Mhz", 1), ("protectOffset25Mhz", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nProtectOffset.setStatus('current')
if mibBuilder.loadTexts: dot11nProtectOffset.setDescription('802.11n protocol 40Mhz Channel Protection Offset.')
dot11nPtotectBusyThr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nPtotectBusyThr.setStatus('current')
if mibBuilder.loadTexts: dot11nPtotectBusyThr.setDescription('802.11n protocol 40Mhz Channel Protection Busy Threshold.')
dot11nAggrMsduEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nAggrMsduEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11nAggrMsduEnabled.setDescription('802.11n protocol Aggregate MSDUs.')
dot11nAggrMsduMaxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2290, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nAggrMsduMaxLen.setStatus('current')
if mibBuilder.loadTexts: dot11nAggrMsduMaxLen.setDescription('802.11n protocol Aggregate MSDU Max Length.')
dot11nAggrMpduEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nAggrMpduEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11nAggrMpduEnabled.setDescription('802.11n protocol Aggregate MPDUs.')
dot11nAggrMpduMaxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nAggrMpduMaxLen.setStatus('current')
if mibBuilder.loadTexts: dot11nAggrMpduMaxLen.setDescription('802.11n protocol Aggregate MPDU Max Length.')
dot11nAggrMsduSubFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nAggrMsduSubFrames.setStatus('current')
if mibBuilder.loadTexts: dot11nAggrMsduSubFrames.setDescription('802.11n protocol Aggregate MPDU Max Number of Sub-frames.')
dot11nAddbaSupEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nAddbaSupEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11nAddbaSupEnabled.setDescription('802.11n protocol ADDBA Support.')
dot11nConfigLDPC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nConfigLDPC.setStatus('current')
if mibBuilder.loadTexts: dot11nConfigLDPC.setDescription('Advanced error-detecting coding using Low Density Parity Check codes\n\t\t\t\tto increase the reliability  of the transmission.')
dot11nConfigSTBC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nConfigSTBC.setStatus('current')
if mibBuilder.loadTexts: dot11nConfigSTBC.setDescription('A simple transmit diversity scheme using Space Time Block Coding to\n\t\t\t\tprovide added robustness for devices where there are more transmit \n\t\t\t\tchains than receiver chains.')
dot11nConfigTXBF = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 1, 11, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11nConfigTXBF.setStatus('current')
if mibBuilder.loadTexts: dot11nConfigTXBF.setDescription('An advanced transmit diversity scheme performing transmit beamforming to\n\t\t\t\tgenerate signals that can be optimally received to enhance the reliability\n\t\t\t\tand performance of wireless links.')
dot11ExtAPObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 2))
dot1XConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 2, 2), )
if mibBuilder.loadTexts: dot1XConfigTable.setStatus('current')
if mibBuilder.loadTexts: dot1XConfigTable.setDescription('Conceptual table for 802.1X settings required for wireless\n\t\t\t\tsecurity.')
dot1XConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtBSSIndex"))
if mibBuilder.loadTexts: dot1XConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dot1XConfigEntry.setDescription('An entry in dot1XConfigTable table.')
dot1XEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 2, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1XEnabled.setStatus('current')
if mibBuilder.loadTexts: dot1XEnabled.setDescription('Enable 802.1X authentication for this BSSID.')
dot1XDynamicRekeyingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 2, 2, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1XDynamicRekeyingInterval.setStatus('current')
if mibBuilder.loadTexts: dot1XDynamicRekeyingInterval.setDescription('This object defines the time period, in seconds, after which\n\t\t\t\tthe key value must be updated.')
dot1XWPA1Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 2, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1XWPA1Enabled.setStatus('current')
if mibBuilder.loadTexts: dot1XWPA1Enabled.setDescription('Enables WPA.1 (Wi-Fi Protected Access) on this BSSID')
dot1XWPAPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1XWPAPassphrase.setStatus('current')
if mibBuilder.loadTexts: dot1XWPAPassphrase.setDescription('Specifies the WPA passphrase for the BSSID.  This element is logically \n\t\t\t\twrite only.  Any attempt to read this element will result in null or 0.')
dot1XWPACipherType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tkipOnly", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1XWPACipherType.setStatus('current')
if mibBuilder.loadTexts: dot1XWPACipherType.setDescription('Defines the encryption algoritms allowed with WPA: \n\t\t\t\tonly TKIP if tkipOnly or both AES and TKIP if auto.\n\t\t\t\tThis value has meaning if WPA.1 is enabled.')
dot1XWPA2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 2, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1XWPA2Enabled.setStatus('current')
if mibBuilder.loadTexts: dot1XWPA2Enabled.setDescription('When true, WPA v.2 support is enabled.')
dot1XWPA2CipherType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("auto", 2), ("aesOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1XWPA2CipherType.setStatus('current')
if mibBuilder.loadTexts: dot1XWPA2CipherType.setDescription('Defines the encryption algoritms allowed with WPA2: \n\t\t\t\tonly AES if aesOnly or both AES and TKIP if auto.\n\t\t\t\tThis value has meaning if WPA.2 is enabled.')
dot1XConfigKeyManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("opportunisticKeying", 1), ("preAuthentication", 2), ("opportunisticKeyingAndPreauth", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1XConfigKeyManagement.setStatus('current')
if mibBuilder.loadTexts: dot1XConfigKeyManagement.setDescription('Key caching method in use. \n\t\t\t\tThis field has meaning when dot1XEnabled is true and WPAv2 is enabled.')
dot11ExtCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4))
assocGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1), )
if mibBuilder.loadTexts: assocGroupTable.setStatus('current')
if mibBuilder.loadTexts: assocGroupTable.setDescription('STA statistics table.')
assocGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1), ).setIndexNames((0, "HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocAddress"))
if mibBuilder.loadTexts: assocGroupEntry.setStatus('current')
if mibBuilder.loadTexts: assocGroupEntry.setDescription('Entry in the STA statistics table.')
assocAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocAddress.setStatus('current')
if mibBuilder.loadTexts: assocAddress.setDescription('MAC address associated with the client.')
assocIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("mode11A", 1), ("mode11G", 2), ("mode11B", 3), ("modeN50", 4), ("modeN24", 5), ("mode11AC", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocIfIndex.setStatus('current')
if mibBuilder.loadTexts: assocIfIndex.setDescription('Index of the radio mode with which the client is associated.\n\t\t\t\tValues are:  11A =1, 11G =2 and 11B =3.\n\t\t\t\tSymbols notation:  modeN50 = an = n5.0Ghz,   modeN24 = bgn = n2.4Ghz.')
assocReceivedRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocReceivedRSSI.setStatus('current')
if mibBuilder.loadTexts: assocReceivedRSSI.setDescription('RSSI - Received Signal Strength Indicator.\n\t\t\t\tRSS[dBm] = RSSI[dB]-Noise Floor[dBm] measured in dBm, i.e actual Rx power. \n\t\t\t\tRSSI is a normalized indicator of RSS in which RSS is scaled to some vendor\n\t\t\t\tspecific range.')
assocTransmittedRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocTransmittedRSSI.setStatus('current')
if mibBuilder.loadTexts: assocTransmittedRSSI.setDescription('Received signal strength averaged for the ACK packets received in response \n\t\t\t\tto transmitted packets for this client.')
assocReceivedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocReceivedRate.setStatus('current')
if mibBuilder.loadTexts: assocReceivedRate.setDescription('PHY rate for the packets received from this client.')
assocTransmittedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocTransmittedRate.setStatus('current')
if mibBuilder.loadTexts: assocTransmittedRate.setDescription('PHY rate used to transmit packets for this client.')
assocReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocReceivedFrameCount.setStatus('current')
if mibBuilder.loadTexts: assocReceivedFrameCount.setDescription('Frames received from this client.')
assocTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocTransmittedFrameCount.setStatus('current')
if mibBuilder.loadTexts: assocTransmittedFrameCount.setDescription('Frames transmitted for this client.')
assocReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocReceiveErrors.setStatus('current')
if mibBuilder.loadTexts: assocReceiveErrors.setDescription('Frames received with errors from this client.')
assocTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocTransmitErrors.setStatus('current')
if mibBuilder.loadTexts: assocTransmitErrors.setDescription('Frames transmitted with errors (not acknowledged) \n\t\t\t\tfor this cleint.')
assocTransmitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocTransmitBytes.setStatus('current')
if mibBuilder.loadTexts: assocTransmitBytes.setDescription('Bytes transmitted for this client.')
assocReceiveBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocReceiveBytes.setStatus('current')
if mibBuilder.loadTexts: assocReceiveBytes.setDescription('Bytes received from this client.')
assocReceivedRSS = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocReceivedRSS.setStatus('current')
if mibBuilder.loadTexts: assocReceivedRSS.setDescription('RSS - Received Signal Strength. \n\t\t\t\tRSS[dBm] = RSSI[dB]-Noise Floor[dBm] measured in dBm, i.e actual Rx power. \n\t\t\t\tRSS is the actual signal strength measured at the receiver. It is typically\n\t\t\t\tmeasured in units of dBm.')
assocDLLostRetriesPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocDLLostRetriesPackets.setStatus('current')
if mibBuilder.loadTexts: assocDLLostRetriesPackets.setDescription('Number of downlink (the transmission path is from Access Point to client) lost packets due to excessive retries for this client.\n\t\t\t\t')
assocDLLostRetriesBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocDLLostRetriesBytes.setStatus('current')
if mibBuilder.loadTexts: assocDLLostRetriesBytes.setDescription('Number of downlink (the transmission path is from Access Point to client) lost bytes due to excessive retries for this client.\n\t\t\t\t')
assocCountersTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 2), )
if mibBuilder.loadTexts: assocCountersTable.setStatus('current')
if mibBuilder.loadTexts: assocCountersTable.setDescription('STA association statistics table.')
assocCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 2, 1), ).setIndexNames((0, "HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocAddress"))
if mibBuilder.loadTexts: assocCountersEntry.setStatus('current')
if mibBuilder.loadTexts: assocCountersEntry.setDescription('Entry in the STA association statistics table.')
assocAuthenticationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocAuthenticationCount.setStatus('current')
if mibBuilder.loadTexts: assocAuthenticationCount.setDescription('Number of authentications for this client.')
assocDeauthenticationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocDeauthenticationCount.setStatus('current')
if mibBuilder.loadTexts: assocDeauthenticationCount.setDescription('Number of deauthentications for this client.')
assocAssociationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocAssociationCount.setStatus('current')
if mibBuilder.loadTexts: assocAssociationCount.setDescription('Number of associations for this client.')
assocDeassociationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocDeassociationCount.setStatus('current')
if mibBuilder.loadTexts: assocDeassociationCount.setDescription('Number of deassociations for this client.')
assocReassociationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocReassociationCount.setStatus('current')
if mibBuilder.loadTexts: assocReassociationCount.setDescription('Number of reassociations for this client.')
dot11ExtRadioStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3), )
if mibBuilder.loadTexts: dot11ExtRadioStatsTable.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioStatsTable.setDescription('Table of statistics for the dot11 radio.')
dot11ExtRadioStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11ExtRadioStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioStatsEntry.setDescription('An entry in the dot11ExtRadioStatsEntry.')
dot11ExtRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("off", 0), ("dot11a", 1), ("dot11an", 2), ("dot11anStrict", 3), ("dot11b", 4), ("dot11g", 5), ("dot11bg", 6), ("dot11gn", 7), ("dot11bgn", 8), ("dot11gnStrict", 9), ("dot11j", 10), ("dot11ac", 11), ("dot11cStrict", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioType.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioType.setDescription('Indicates the type of radio (a/an or b/g/bgn).')
dot11ExtRadioInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioInUcastPkts.setDescription('Number of unicast packets from wireless-to-wired network at this radio.')
dot11ExtRadioInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioInMcastPkts.setDescription('Number of multicast packets from wireless-to-wired network at this radio.')
dot11ExtRadioInBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioInBcastPkts.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioInBcastPkts.setDescription('Number of broadcast packets from wireless-to-wired network at this radio.')
dot11ExtRadioInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioInOctets.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioInOctets.setDescription('Total bytes from wireless-to-wired network at this radio.')
dot11ExtRadioInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioInErrors.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioInErrors.setDescription('Number of error packets from wireless-to-wired network at this radio.')
dot11ExtRadioInDiscardsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioInDiscardsPkts.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioInDiscardsPkts.setDescription('Number of discarded packets from wireless-to-wired network at this radio.')
dot11ExtRadioOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioOutUcastPkts.setDescription('Number of unicast packets from wired-to-wireless network at this radio.')
dot11ExtRadioOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioOutMcastPkts.setDescription('Number of multicast packets from wired-to-wireless network at this radio.')
dot11ExtRadioOutBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioOutBcastPkts.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioOutBcastPkts.setDescription('Number of broadcast from wired-to-wireless network at this radio.')
dot11ExtRadioOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioOutOctets.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioOutOctets.setDescription('Total bytes from wired-to-wireless network at this radio.')
dot11ExtRadioOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioOutErrors.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioOutErrors.setDescription('Number of error packets from wired-to-wireless network at this radio.')
dot11ExtRadioOutDiscardsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioOutDiscardsPkts.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioOutDiscardsPkts.setDescription('Number of discarded packets from wired-to-wireless network at this radio.')
dot11ExtRadioWepIcvErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioWepIcvErrorCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioWepIcvErrorCount.setDescription('Number of WEP ICV Errors.')
dot11ExtRadioWepExcludedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioWepExcludedCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioWepExcludedCount.setDescription('Number of WEP excluded.')
dot11ExtRadioRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioRetryCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioRetryCount.setDescription('Number of retry frames.')
dot11ExtRadioMultipleRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioMultipleRetryCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioMultipleRetryCount.setDescription('Number of multiple retries frames.')
dot11ExtRadioRtsSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioRtsSuccessCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioRtsSuccessCount.setDescription('Number of successful RTS frames.')
dot11ExtRadioRtsFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioRtsFailCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioRtsFailCount.setDescription('Number of failed RTS frames.')
dot11ExtRadioAckFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioAckFailCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioAckFailCount.setDescription('Number of failed ACK frames.')
dot11ExtRadioFrameDupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioFrameDupCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioFrameDupCount.setDescription('Number of duplicated frames.')
dot11ExtRadioTransFragCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioTransFragCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioTransFragCount.setDescription('Number of transmitted fragment.')
dot11ExtRadioMulTransFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioMulTransFrameCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioMulTransFrameCount.setDescription('Number of transmitted multicast fragment.')
dot11ExtRadioFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioFailedCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioFailedCount.setDescription('Number of failed frames.')
dot11ExtRadioReceivedFragCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioReceivedFragCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioReceivedFragCount.setDescription('Number of received fragment.')
dot11ExtRadioMulRecFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioMulRecFrameCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioMulRecFrameCount.setDescription('Number of received multicast frame.')
dot11ExtRadioFcsErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioFcsErrorCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioFcsErrorCount.setDescription('Number of FCS errors frames.')
dot11ExtRadioWepUndecrypCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioWepUndecrypCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioWepUndecrypCount.setDescription('Number of undecryptable WEP frames.')
dot11ExtRadioTransFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioTransFrameCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioTransFrameCount.setDescription('Number of transmitted frames.')
dot11ExtRadioDeauthCacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioDeauthCacCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioDeauthCacCount.setDescription('Number of deauthentications due to CAC.')
dot11ExtRadioAvgNfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioAvgNfCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioAvgNfCount.setDescription('Noise floor measured by the AP on the 802.11 channel. Noise floor is measured during\n\t\t\t\tthe quiet time, between the valid transmission or reception of 802.11 frames.  \n\t\t\t\tVariable is reported as average over the last 30 seconds.')
dot11ExtRadioMaxNfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 100))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioMaxNfCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioMaxNfCount.setDescription('Maximum noise floor measured by the AP on the 802.11 channel. Noise floor is measured\n\t\t\t\tduring the quiet time, between the valid transmission or reception of 802.11 frames.\n\t\t\t\tVariable is reported as max over the last 30 seconds.')
dot11ExtRadioAvgChlOccCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioAvgChlOccCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioAvgChlOccCount.setDescription('Average DCS Channel Utilization by Adjacent APs [%].')
dot11ExtRadioMaxChlOccCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioMaxChlOccCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioMaxChlOccCount.setDescription('Maximum DCS Channel Utilization by Adjacent APs [%].')
dot11ExtRadioAvgTxOccCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioAvgTxOccCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioAvgTxOccCount.setDescription("TxOccupancy variable reports the time (in %) AP was transmitting during the last 100\n\t\t\t\tseconds. During AP transmission all other STA/AP's has only receive access to the channel.\n\t\t\t\tVariable is reported as average over the last 100 seconds.")
dot11ExtRadioMaxTxOccCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioMaxTxOccCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioMaxTxOccCount.setDescription("TxOccupancy variable reports the maximum time (in %) AP was transmitting during\n\t\t\t\tthe last 100 seconds. During AP transmission all other STA/AP's has only receive\n\t\t\t\taccess to the channel. Variable is reported as max over the last 100 seconds.")
dot11ExtRadioAvgRxOccCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioAvgRxOccCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioAvgRxOccCount.setDescription('Average DCS RX Channel Utilization [%].')
dot11ExtRadioMaxRxOccCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioMaxRxOccCount.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioMaxRxOccCount.setDescription('Maximum DCS RX Channel Utilization [%].')
dot11ExtRadioAvgBusyChPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioAvgBusyChPercentage.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioAvgBusyChPercentage.setDescription('STA/AP performs clear channel assessment before transmitting on the 802.11 wireless\n\t\t\t\tchannel.  BusyChannel variable reports the time (in % ) that channel was busy during\n\t\t\t\tthe last 100 seconds. Channel is busy either because there is interference with energy\n\t\t\t\tabove a threshold (-62dBm) or because there is active transmission of other STA or AP. \n\t\t\t\tBusyChannel is indicator of the congestions and interference on the channel.  Variable\n\t\t\t\tis reported as average over the last 100 seconds.')
dot11ExtRadioMaxBusyChPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioMaxBusyChPercentage.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioMaxBusyChPercentage.setDescription('STA/AP performs clear channel assessment before transmitting on the 802.11 wireless\n\t\t\t\tchannel.  BusyChannel variable reports the maximum time (in % ) that channel was busy\n\t\t\t\tduring the last 100 seconds. Channel is busy either because there is an interference\n\t\t\t\twith energy above a threshold (-62dBm) or because there is an active transmission of\n\t\t\t\tother STA or AP. BusyChannel is indicator of the congestions and interference on the \n\t\t\t\tchannel. Variable is reported as maximum over the last 100 seconds.')
dot11ExtRadioAvgRxChOccPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioAvgRxChOccPercentage.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioAvgRxChOccPercentage.setDescription('RxOccupancy variable reports the time (in %) AP received valid 802.11 frames on the\n\t\t\t\tradio receiver during the last 100 seconds. Variable counts all 802.11 frames sensed\n\t\t\t\ton the channel, including the frames not destined to this AP and rejected by the AP.\n\t\t\t\tVariable does not count signals (interference) that is not recognized as valid 802.11\n\t\t\t\tsignal. Variable is reported as average over the last 100 seconds.')
dot11ExtRadioMaxRxChOccPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 4, 3, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExtRadioMaxRxChOccPercentage.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioMaxRxChOccPercentage.setDescription('RxOccupancy variable reports the maximum time (in %) AP received valid 802.11 frames\n\t\t\t\ton the radio receiver during the last 100 seconds. Variable counts all the 802.11 \n\t\t\t\tframes sensed on the channel, including the frames not destined to this AP and rejected\n\t\t\t\tby the AP. Variable does not count signals (interference) that is not recognized as\n\t\t\t\tvalid 802.11 signal. Variable is reported as max over the last 100 seconds.')
dot11ExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 5))
hiPathWirelessDot11ExtModule = ModuleCompliance((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 5, 1)).setObjects(("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "hiPathWirelessDot11ExtGroups"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nConfigGroup"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocGroupGroup"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocCountersGroup"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hiPathWirelessDot11ExtModule = hiPathWirelessDot11ExtModule.setStatus('current')
if mibBuilder.loadTexts: hiPathWirelessDot11ExtModule.setDescription('HIPATH-WIRELESS-DOT11-EXTNS module compliance.')
hiPathWirelessDot11ExtGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 5, 2)).setObjects(("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSSIDID"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSSID"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtWEPKeyMappingIndex"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtWEPKeyMappingAddress"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtWEPKeyMappingWEPOn"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtWEPKeyMappingValue"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtWEPKeyMappingStatus"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11gEnabled"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11gProtectionMode"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11gProtectionType"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "smtShortPreambleInvoked"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtBSSID"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtBSSIDWEPKeyIndex"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11bEnabled"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11Capabilities"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtBSSIndex"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSSIDSuppress"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtPriorityTrafficHandling"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11gProtectionRate"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot1XWPA2Enabled"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot1XEnabled"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot1XDynamicRekeyingInterval"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot1XWPA1Enabled"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot1XWPAPassphrase"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot1XWPACipherType"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtMinBasicRate"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtMaxBasicRate"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtMaxOperationalRate"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11DiversityTxDiversity"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11DiversityRxDiversity"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot1XConfigKeyManagement"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtTVOretries"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtCurChanSelectedByAP"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtRFDomain"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtAutoTxPowerCtrl"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtCurrentTxPowerLevel"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtMaxTxPower"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtMinTxPower"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtAutoTxPowerCtrlAdjust"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtBGretries"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtBEretries"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtVIretries"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtVOretries"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11gProtectionModeSelected"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot1XWPA2CipherType"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtCurrentChannel"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtDcsMode"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtDcsNoiseThreshold"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtDcsChlOccThreshold"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtDcsUpdatePeriod"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtDcsChannelSelection"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtDcsChannelList"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11AntennaSelection"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtRadioAttenuation"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtProbeSuppression"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtForceDisassociate"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtSmtRssThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hiPathWirelessDot11ExtGroups = hiPathWirelessDot11ExtGroups.setStatus('current')
if mibBuilder.loadTexts: hiPathWirelessDot11ExtGroups.setDescription('High Path Wireless DOT11-EXTNS object-group.')
hiPathWirelessDot11ObsoleteGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 5, 3)).setObjects(("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "vlanBridgeMode"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11gBasicG"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11BasicB"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "vlanTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hiPathWirelessDot11ObsoleteGroups = hiPathWirelessDot11ObsoleteGroups.setStatus('obsolete')
if mibBuilder.loadTexts: hiPathWirelessDot11ObsoleteGroups.setDescription('Objects in this list are obsolete.')
dot11EWCGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 5, 4))
dot11nConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 5, 4, 1)).setObjects(("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nEnabled"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nChlBonding"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nChlWidth"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nChlGuardInterval"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nProtectEnabled"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nProtectType"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nProtectOffset"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nPtotectBusyThr"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nAggrMsduEnabled"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nAggrMsduMaxLen"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nAggrMpduEnabled"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nAggrMpduMaxLen"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nAggrMsduSubFrames"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nAddbaSupEnabled"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nConfigLDPC"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nConfigSTBC"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11nConfigTXBF"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11nConfigGroup = dot11nConfigGroup.setStatus('current')
if mibBuilder.loadTexts: dot11nConfigGroup.setDescription('Objects in this group contain attributes of dot11n radio.')
assocGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 5, 4, 2)).setObjects(("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocAddress"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocIfIndex"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocReceivedRSSI"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocTransmittedRSSI"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocReceivedRate"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocTransmittedRate"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocReceivedFrameCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocTransmittedFrameCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocReceiveErrors"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocTransmitErrors"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocTransmitBytes"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocReceiveBytes"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocReceivedRSS"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocDLLostRetriesPackets"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocDLLostRetriesBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    assocGroupGroup = assocGroupGroup.setStatus('current')
if mibBuilder.loadTexts: assocGroupGroup.setDescription('Objects in this group contain information about associated MUs.')
assocCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 5, 4, 3)).setObjects(("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocAuthenticationCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocDeauthenticationCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocAssociationCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocDeassociationCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "assocReassociationCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    assocCountersGroup = assocCountersGroup.setStatus('current')
if mibBuilder.loadTexts: assocCountersGroup.setDescription('Objects in this group contain stats related to associated MUs.')
dot11ExtRadioStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 15, 3, 1, 5, 4, 4)).setObjects(("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioType"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioInUcastPkts"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioInMcastPkts"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioInBcastPkts"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioInOctets"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioInErrors"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioInDiscardsPkts"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioOutUcastPkts"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioOutMcastPkts"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioOutBcastPkts"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioOutOctets"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioOutErrors"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioOutDiscardsPkts"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioWepIcvErrorCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioWepExcludedCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioRetryCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioMultipleRetryCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioRtsSuccessCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioRtsFailCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioAckFailCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioFrameDupCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioTransFragCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioMulTransFrameCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioFailedCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioReceivedFragCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioMulRecFrameCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioFcsErrorCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioWepUndecrypCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioTransFrameCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioDeauthCacCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioAvgNfCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioMaxNfCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioAvgChlOccCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioMaxChlOccCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioAvgTxOccCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioMaxTxOccCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioAvgRxOccCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioMaxRxOccCount"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioAvgBusyChPercentage"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioMaxBusyChPercentage"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioAvgRxChOccPercentage"), ("HIPATH-WIRELESS-DOT11-EXTNS-MIB", "dot11ExtRadioMaxRxChOccPercentage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11ExtRadioStatsGroup = dot11ExtRadioStatsGroup.setStatus('current')
if mibBuilder.loadTexts: dot11ExtRadioStatsGroup.setDescription('Objects in this group contain statistics related a radio.')
mibBuilder.exportSymbols("HIPATH-WIRELESS-DOT11-EXTNS-MIB", dot11ExtSmtBEretries=dot11ExtSmtBEretries, dot11EWCGroups=dot11EWCGroups, dot1XConfigKeyManagement=dot1XConfigKeyManagement, dot11ExtRadioWepIcvErrorCount=dot11ExtRadioWepIcvErrorCount, dot11nChlGuardInterval=dot11nChlGuardInterval, dot11ExtSmtMinTxPower=dot11ExtSmtMinTxPower, dot11nPtotectBusyThr=dot11nPtotectBusyThr, dot11ExtWEPKeyMappingIndex=dot11ExtWEPKeyMappingIndex, dot11nProtectEnabled=dot11nProtectEnabled, dot11ExtRadioWepUndecrypCount=dot11ExtRadioWepUndecrypCount, dot11gConfigTable=dot11gConfigTable, dot11Capabilities=dot11Capabilities, dot11ExtSmtDcsMode=dot11ExtSmtDcsMode, dot11ExtRadioAvgChlOccCount=dot11ExtRadioAvgChlOccCount, dot11nConfigGroup=dot11nConfigGroup, hiPathWirelessDot11ExtGroups=hiPathWirelessDot11ExtGroups, dot11ExtBSSIDTable=dot11ExtBSSIDTable, assocReceivedRSSI=assocReceivedRSSI, dot11nProtectType=dot11nProtectType, dot11nConfigTXBF=dot11nConfigTXBF, dot11ExtRadioMulRecFrameCount=dot11ExtRadioMulRecFrameCount, dot11ExtRadioMaxTxOccCount=dot11ExtRadioMaxTxOccCount, dot1XConfigTable=dot1XConfigTable, dot11gProtectionMode=dot11gProtectionMode, assocReceivedRSS=assocReceivedRSS, dot11ExtRadioTransFragCount=dot11ExtRadioTransFragCount, dot11ExtRadioReceivedFragCount=dot11ExtRadioReceivedFragCount, dot1XDynamicRekeyingInterval=dot1XDynamicRekeyingInterval, dot11ExtWEPKeyMappingAddress=dot11ExtWEPKeyMappingAddress, dot11BasicB=dot11BasicB, dot11DiversityTxDiversity=dot11DiversityTxDiversity, dot11nAggrMpduMaxLen=dot11nAggrMpduMaxLen, dot11ExtRadioDeauthCacCount=dot11ExtRadioDeauthCacCount, dot11gProtectionModeSelected=dot11gProtectionModeSelected, dot11ExtRadioInDiscardsPkts=dot11ExtRadioInDiscardsPkts, dot11ExtRadioWepExcludedCount=dot11ExtRadioWepExcludedCount, dot11ExtSmtTable=dot11ExtSmtTable, dot11gEnabled=dot11gEnabled, dot11DiversityTable=dot11DiversityTable, hiPathWirelessDot11ObsoleteGroups=hiPathWirelessDot11ObsoleteGroups, dot11ExtSmtAutoTxPowerCtrlAdjust=dot11ExtSmtAutoTxPowerCtrlAdjust, dot11ExtRadioOutDiscardsPkts=dot11ExtRadioOutDiscardsPkts, dot11ExtRadioRetryCount=dot11ExtRadioRetryCount, dot11ExtSSIDID=dot11ExtSSIDID, dot11nAggrMpduEnabled=dot11nAggrMpduEnabled, assocTransmittedRate=assocTransmittedRate, dot11nConfigEntry=dot11nConfigEntry, assocIfIndex=assocIfIndex, assocCountersEntry=assocCountersEntry, dot11ExtBSSIDWEPKeyIndex=dot11ExtBSSIDWEPKeyIndex, assocTransmitErrors=assocTransmitErrors, dot11ExtRadioMaxBusyChPercentage=dot11ExtRadioMaxBusyChPercentage, dot11ExtRadioMaxChlOccCount=dot11ExtRadioMaxChlOccCount, dot11gBasicG=dot11gBasicG, dot11ExtSSID=dot11ExtSSID, dot11ExtRadioOutErrors=dot11ExtRadioOutErrors, dot11ExtRadioAvgNfCount=dot11ExtRadioAvgNfCount, dot11AntennaSelection=dot11AntennaSelection, dot11bConfigTable=dot11bConfigTable, dot11ExtSmtVOretries=dot11ExtSmtVOretries, dot11ExtRadioStatsEntry=dot11ExtRadioStatsEntry, dot11nAggrMsduMaxLen=dot11nAggrMsduMaxLen, assocReceiveBytes=assocReceiveBytes, dot11nEnabled=dot11nEnabled, dot11ExtRadioAvgBusyChPercentage=dot11ExtRadioAvgBusyChPercentage, assocAssociationCount=assocAssociationCount, dot11ExtRadioInOctets=dot11ExtRadioInOctets, dot1XEnabled=dot1XEnabled, WEPKeytype=WEPKeytype, dot11ExtWEPKeyMappingsTable=dot11ExtWEPKeyMappingsTable, vlanTag=vlanTag, dot11gProtectionRate=dot11gProtectionRate, assocDLLostRetriesBytes=assocDLLostRetriesBytes, assocCountersTable=assocCountersTable, dot11ExtWEPKeyMappingsEntry=dot11ExtWEPKeyMappingsEntry, dot11nChlBonding=dot11nChlBonding, dot1XWPA1Enabled=dot1XWPA1Enabled, dot11ExtSmtCurrentChannel=dot11ExtSmtCurrentChannel, dot11ExtRadioOutBcastPkts=dot11ExtRadioOutBcastPkts, dot11ExtSmtForceDisassociate=dot11ExtSmtForceDisassociate, dot11CapabilitiesEntry=dot11CapabilitiesEntry, dot11nChlWidth=dot11nChlWidth, dot11ExtVlanSmtEntry=dot11ExtVlanSmtEntry, dot11DiversityRxDiversity=dot11DiversityRxDiversity, dot11ExtRadioRtsFailCount=dot11ExtRadioRtsFailCount, dot11ExtRadioInBcastPkts=dot11ExtRadioInBcastPkts, dot1XWPAPassphrase=dot1XWPAPassphrase, dot11ExtRadioInErrors=dot11ExtRadioInErrors, dot11ExtRadioOutMcastPkts=dot11ExtRadioOutMcastPkts, dot11ExtPriorityTrafficHandling=dot11ExtPriorityTrafficHandling, dot1XConfigEntry=dot1XConfigEntry, dot11ExtSSIDSuppress=dot11ExtSSIDSuppress, dot11ExtVlanSmtTable=dot11ExtVlanSmtTable, assocTransmittedFrameCount=assocTransmittedFrameCount, dot11ExtSmtBGretries=dot11ExtSmtBGretries, dot11nAggrMsduEnabled=dot11nAggrMsduEnabled, dot11nProtectOffset=dot11nProtectOffset, dot11ExtSmtRssThreshold=dot11ExtSmtRssThreshold, dot11ExtRadioAckFailCount=dot11ExtRadioAckFailCount, assocDeauthenticationCount=assocDeauthenticationCount, dot11ExtRadioFrameDupCount=dot11ExtRadioFrameDupCount, dot11ExtCounters=dot11ExtCounters, dot11ExtSmtDcsNoiseThreshold=dot11ExtSmtDcsNoiseThreshold, dot1XWPA2CipherType=dot1XWPA2CipherType, dot11ExtRadioOutOctets=dot11ExtRadioOutOctets, dot11ExtSmtProbeSuppression=dot11ExtSmtProbeSuppression, dot11ExtSmtMinBasicRate=dot11ExtSmtMinBasicRate, dot11ExtSmtMaxOperationalRate=dot11ExtSmtMaxOperationalRate, assocAuthenticationCount=assocAuthenticationCount, dot11ExtSmtEntry=dot11ExtSmtEntry, dot11ExtBSSID=dot11ExtBSSID, dot11nConfigTable=dot11nConfigTable, dot11nConfigLDPC=dot11nConfigLDPC, dot1XWPACipherType=dot1XWPACipherType, dot11nAddbaSupEnabled=dot11nAddbaSupEnabled, assocReceivedFrameCount=assocReceivedFrameCount, dot11ExtBSSIndex=dot11ExtBSSIndex, dot11ExtSmtTVOretries=dot11ExtSmtTVOretries, dot11ExtRadioMaxNfCount=dot11ExtRadioMaxNfCount, dot11ExtRadioAvgTxOccCount=dot11ExtRadioAvgTxOccCount, assocTransmittedRSSI=assocTransmittedRSSI, dot11ExtRadioRtsSuccessCount=dot11ExtRadioRtsSuccessCount, dot11gProtectionType=dot11gProtectionType, dot11ExtWEPKeyMappingValue=dot11ExtWEPKeyMappingValue, dot11ExtSmtDcsChannelSelection=dot11ExtSmtDcsChannelSelection, dot11ExtRadioFailedCount=dot11ExtRadioFailedCount, dot11ExtRadioStatsGroup=dot11ExtRadioStatsGroup, dot11ExtBSSIDEntry=dot11ExtBSSIDEntry, dot11ExtSmtCurChanSelectedByAP=dot11ExtSmtCurChanSelectedByAP, dot11DiversityEntry=dot11DiversityEntry, dot11ExtSmtDcsChlOccThreshold=dot11ExtSmtDcsChlOccThreshold, dot1XWPA2Enabled=dot1XWPA2Enabled, dot11ExtRadioAvgRxChOccPercentage=dot11ExtRadioAvgRxChOccPercentage, PYSNMP_MODULE_ID=hiPathWirelessDot11ExtnsMIB, assocAddress=assocAddress, dot11ExtRadioOutUcastPkts=dot11ExtRadioOutUcastPkts, assocGroupGroup=assocGroupGroup, dot11bConfigEntry=dot11bConfigEntry, dot11ExtRadioTransFrameCount=dot11ExtRadioTransFrameCount, dot11Extsmt=dot11Extsmt, dot11ExtnsMib=dot11ExtnsMib, dot11ExtAPObjs=dot11ExtAPObjs, dot11nConfigSTBC=dot11nConfigSTBC, assocGroupTable=assocGroupTable, dot11nAggrMsduSubFrames=dot11nAggrMsduSubFrames, dot11bEnabled=dot11bEnabled, dot11ExtRadioMultipleRetryCount=dot11ExtRadioMultipleRetryCount, assocTransmitBytes=assocTransmitBytes, dot11ExtSmtAutoTxPowerCtrl=dot11ExtSmtAutoTxPowerCtrl, dot11ExtRadioType=dot11ExtRadioType, dot11ExtRadioMaxRxChOccPercentage=dot11ExtRadioMaxRxChOccPercentage, hiPathWirelessDot11ExtnsMIB=hiPathWirelessDot11ExtnsMIB, dot11ExtRadioFcsErrorCount=dot11ExtRadioFcsErrorCount, dot11ExtRadioAvgRxOccCount=dot11ExtRadioAvgRxOccCount, dot11ExtSmtVIretries=dot11ExtSmtVIretries, dot11ExtSmtDcsChannelList=dot11ExtSmtDcsChannelList, dot11ExtRadioMaxRxOccCount=dot11ExtRadioMaxRxOccCount, dot11ExtSmtRFDomain=dot11ExtSmtRFDomain, dot11ExtRadioInUcastPkts=dot11ExtRadioInUcastPkts, dot11gConfigEntry=dot11gConfigEntry, dot11ExtSmtMaxTxPower=dot11ExtSmtMaxTxPower, dot11ExtWEPKeyMappingWEPOn=dot11ExtWEPKeyMappingWEPOn, assocReceiveErrors=assocReceiveErrors, assocDLLostRetriesPackets=assocDLLostRetriesPackets, dot11ExtConformance=dot11ExtConformance, hiPathWirelessDot11ExtModule=hiPathWirelessDot11ExtModule, dot11ExtSmtRadioAttenuation=dot11ExtSmtRadioAttenuation, dot11ExtRadioInMcastPkts=dot11ExtRadioInMcastPkts, dot11ExtWEPKeyMappingStatus=dot11ExtWEPKeyMappingStatus, dot11ExtRadioStatsTable=dot11ExtRadioStatsTable, dot11CapabilitiesTable=dot11CapabilitiesTable, assocGroupEntry=assocGroupEntry, assocReceivedRate=assocReceivedRate, dot11ExtSmtDcsUpdatePeriod=dot11ExtSmtDcsUpdatePeriod, assocCountersGroup=assocCountersGroup, dot11ExtRadioMulTransFrameCount=dot11ExtRadioMulTransFrameCount, dot11ExtSmtMaxBasicRate=dot11ExtSmtMaxBasicRate, vlanBridgeMode=vlanBridgeMode, assocDeassociationCount=assocDeassociationCount, assocReassociationCount=assocReassociationCount, dot11ExtSmtCurrentTxPowerLevel=dot11ExtSmtCurrentTxPowerLevel, smtShortPreambleInvoked=smtShortPreambleInvoked)
