#
# PySNMP MIB module ALTEON-CS-PHYSICAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/alteonos/ALTEON-CS-PHYSICAL-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 11:32:25 2024
# On host fv-az702-886 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
aws_switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "aws-switch")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Bits, MibIdentifier, iso, ObjectIdentity, ModuleIdentity, Unsigned32, Gauge32, Integer32, TimeTicks, Counter64, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "MibIdentifier", "iso", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "Gauge32", "Integer32", "TimeTicks", "Counter64", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
layer2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2))
layer2.setRevisions(('2004-09-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: layer2.setRevisionsDescriptions(('Added revision clause for SMIv2 compliance.',))
if mibBuilder.loadTexts: layer2.setLastUpdated('200409010000Z')
if mibBuilder.loadTexts: layer2.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: layer2.setContactInfo('Rekha Singamsetty\n                  Suresh Batchu\n\n                  Nortel Networks\n                  4655 Great America Parkway\n                  Santa Clara CA 95054\n\n                  +1 408 495 2400\n                  rrekha@nortelnetworks.com\n                  sbatchu@nortelnetworks.com')
if mibBuilder.loadTexts: layer2.setDescription('The MIB module for the Alteon OS Layer2 configuration, statistics and \n         information .')
class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

layer2Configs = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1))
layer2Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2))
layer2Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3))
layer2Oper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 4))
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1))
trunkgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2))
stgCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3))
mirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4))
lacp = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5))
mstCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7))
portTeamCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9))
mirrPortMirr = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1))
mstGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1))
mstCistCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2))
fdbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1))
stpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2))
fdbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1))
stpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2))
lacpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3))
cistInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4))
vlanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5))
cistGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1))
portTeamInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6))
vlanMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxEnt.setStatus('current')
if mibBuilder.loadTexts: vlanMaxEnt.setDescription('The maximum number of rows in the VLAN configuration table.')
vlanMaxVlanID = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxVlanID.setStatus('current')
if mibBuilder.loadTexts: vlanMaxVlanID.setDescription('The maximum allowed VLAN ID.')
vlanCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2), )
if mibBuilder.loadTexts: vlanCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgTable.setDescription('The table of VLAN configuration.')
vlanCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "vlanCurCfgVlanId"))
if mibBuilder.loadTexts: vlanCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgTableEntry.setDescription('A row in the VLAN configuration table.')
vlanCurCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgVlanId.setDescription('The VLAN identifier.')
vlanCurCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanName.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgVlanName.setDescription('The VLAN name.')
vlanCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgPorts.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgPorts.setDescription('The port list in the VLAN. The ports are presented in bitmap format.\n\t in receiving order:\n\n\t     OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx ..... \n             ||    || |_ port 8\n             ||    ||  \n             ||    ||___ port 7\n             ||    |____ port 6\n             ||      .    .   .\n             ||_________ port 1\n             |__________ reserved\n\n         where x : 1 - The represented port belongs to the VLAN\n\t\t   0 - The represented port does not belong to the VLAN')
vlanCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgState.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgState.setDescription('Enable or disable a VLAN')
vlanCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgBwmContract.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgBwmContract.setDescription('Default contract number the VLAN ')
vlanCurCfgStg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgStg.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgStg.setDescription('The Spanning Tree Group for the VLAN.')
vlanCurCfgJumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgJumbo.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgJumbo.setDescription('Enable or disable Jumbo frames on a VLAN')
vlanCurCfgLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgLearn.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgLearn.setDescription('Enable or disable source MAC address learning on a VLAN')
vlanNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3), )
if mibBuilder.loadTexts: vlanNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgTable.setDescription('The table of VLAN configuration.')
vlanNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "vlanNewCfgVlanId"))
if mibBuilder.loadTexts: vlanNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgTableEntry.setDescription('A row in the VLAN configuration table.')
vlanNewCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgVlanId.setDescription('The VLAN identifier.')
vlanNewCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgVlanName.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgVlanName.setDescription('The VLAN name.')
vlanNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgPorts.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgPorts.setDescription('The port list in the VLAN.  The ports are presented in bitmap format.\n         in receiving order:\n\n\t     OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx ..... \n             ||    || |_ port 8\n             ||    ||  \n             ||    ||___ port 7\n             ||    |____ port 6\n             ||      .    .   .\n             ||_________ port 1\n             |__________ reserved\n\n         where x : 1 - The represented port belongs to the VLAN\n\t           0 - The represented port does not belong to the VLAN')
vlanNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgState.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgState.setDescription('Enable or disable a VLAN')
vlanNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgAddPort.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgAddPort.setDescription("The port to be added to the specified VLAN.  A '0' value is \n         returned when read.")
vlanNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgRemovePort.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgRemovePort.setDescription("The port to be removed from the specified VLAN.  A '0'\n         value is returned when read.")
vlanNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgDelete.setDescription('This is an action object to create or delete a VLAN.\n         other(1) is returned always when read.\n         The following values are writable: delete(2)...to delete a VLAN')
vlanNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgBwmContract.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgBwmContract.setDescription('Default contract number for the VLAN.')
vlanNewCfgStg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgStg.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgStg.setDescription('The Spanning Tree Group for the VLAN.')
vlanNewCfgJumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgJumbo.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgJumbo.setDescription('Enable or disable Jumbo frames on a VLAN')
vlanNewCfgLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgLearn.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgLearn.setDescription('Enable or disable source mac address learning on a VLAN')
lacpCurSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurSystemPriority.setStatus('current')
if mibBuilder.loadTexts: lacpCurSystemPriority.setDescription("A 2-octet read-write value indicating the priority\n        value associated with the Actor's System ID.")
lacpNewSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewSystemPriority.setStatus('current')
if mibBuilder.loadTexts: lacpNewSystemPriority.setDescription("A 2-octet read-write value indicating the priority\n        value associated with the Actor's System ID.")
lacpCurSystemTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 90))).clone(namedValues=NamedValues(("short", 3), ("long", 90)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurSystemTimeoutTime.setStatus('current')
if mibBuilder.loadTexts: lacpCurSystemTimeoutTime.setDescription('If a port does not receive LACPDUs for Timeout time LACP \n         information pertaining to the port is invalidated.\n         Its every 3 sec (short) and every 90 sec (long 3).')
lacpNewSystemTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 90))).clone(namedValues=NamedValues(("short", 3), ("long", 90)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewSystemTimeoutTime.setStatus('current')
if mibBuilder.loadTexts: lacpNewSystemTimeoutTime.setDescription('If a port does not receive LACPDUs for Timeout time LACP \n         information pertaining to the port is invalidated.\n         Its every 3 sec (short) and every 90 sec (long 3).')
lacpCurPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 7), )
if mibBuilder.loadTexts: lacpCurPortCfgTable.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortCfgTable.setDescription('The table of LACP port configuration.')
lacpCurPortCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 7, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "lacpCurPortCfgTableId"))
if mibBuilder.loadTexts: lacpCurPortCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortCfgTableEntry.setDescription('A row in the LACP port configuration table.')
lacpCurPortCfgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortCfgTableId.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortCfgTableId.setDescription(' LACP port number.')
lacpCurPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortState.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortState.setDescription('LACP port state can be one of three states \n         off (Not participating in LACP) \n         Active (Initiates LACPDU updates)\n         Passive (Does not initiate LACPDU updates but responds to peer.')
lacpCurPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortActorPortPriority.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortActorPortPriority.setDescription('The priority value assigned to this Aggregation Port.\n        This 16-bit value is read-only.')
lacpCurPortActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortActorAdminKey.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortActorAdminKey.setDescription('The current administrative value of the Key for the\n        Aggregation Port. This is a 16-bit read-only value.\n        The meaning of particular Key values is of local\n        significance.')
lacpNewPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 8), )
if mibBuilder.loadTexts: lacpNewPortCfgTable.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortCfgTable.setDescription('The table of LACP port configuration.')
lacpNewPortCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 8, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "lacpNewPortCfgTableId"))
if mibBuilder.loadTexts: lacpNewPortCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortCfgTableEntry.setDescription('A row in the LACP port configuration table.')
lacpNewPortCfgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpNewPortCfgTableId.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortCfgTableId.setDescription(' LACP port number.')
lacpNewPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortState.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortState.setDescription('LACP port state can be one of three states \n         off (Not participating in LACP) \n         Active (Initiates LACPDU updates)\n         Passive (Does not initiate LACPDU updates but responds to peer.')
lacpNewPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortActorPortPriority.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortActorPortPriority.setDescription('The priority value assigned to this Aggregation Port.\n        This 16-bit value is read-write.')
lacpNewPortActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortActorAdminKey.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortActorAdminKey.setDescription('The current administrative value of the Key for the\n        Aggregation Port. This is a 16-bit read-write value.\n        The meaning of particular Key values is of local\n        significance.')
trunkGroupTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: trunkGroupTableMaxSize.setDescription('The maximum number of entries in trunk group table.')
trunkGroupCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 2), )
if mibBuilder.loadTexts: trunkGroupCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgTable.setDescription('The table of trunk group configuration.')
trunkGroupCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 2, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "trunkGroupCurCfgIndex"))
if mibBuilder.loadTexts: trunkGroupCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgTableEntry.setDescription('A row in the trunk group configuration table.')
trunkGroupCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgIndex.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgIndex.setDescription('The identifier of the trunk group.')
trunkGroupCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgPorts.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgPorts.setDescription('The port list in the trunk group. The ports are presented in \n         bitmap format.\n \n         in receiving order:\n \n             OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx ..... \n             ||    || |_ port 8\n             ||    ||  \n             ||    ||___ port 7\n             ||    |____ port 6\n             ||      .    .   .\n             ||_________ port 1\n             |__________ reserved\n\n         where x : 1 - The represented port belongs to the trunk group\n                   0 - The represented port does not belong to the trunk group')
trunkGroupCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgState.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgState.setDescription('Enable or disable a trunk group.')
trunkGroupCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgBwmContract.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgBwmContract.setDescription('Default BW contract of a trunk group.')
trunkGroupNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3), )
if mibBuilder.loadTexts: trunkGroupNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgTable.setDescription('The table of trunk group configuration.')
trunkGroupNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "trunkGroupNewCfgIndex"))
if mibBuilder.loadTexts: trunkGroupNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgTableEntry.setDescription('A row in the trunk group configuration table.')
trunkGroupNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgIndex.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgIndex.setDescription('The identifier of the trunk group.')
trunkGroupNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgPorts.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgPorts.setDescription('The port list in the trunk group.  The ports are presented\n         in bitmap format.\n\n         in receiving order:\n\n             OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx ..... \n             ||    || |_ port 8\n             ||    ||  \n             ||    ||___ port 7\n             ||    |____ port 6\n             ||      .    .   .\n             ||_________ port 1\n             |__________ reserved\n \n         where x : 1 - The represented port belongs to the trunk group\n                   0 - The represented port does not belong to the trunk group')
trunkGroupNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgAddPort.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgAddPort.setDescription('The port to be added in the trunk group. When read, 0 is returned.')
trunkGroupNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgRemovePort.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgRemovePort.setDescription('The port to be deleted from the trunk group. when read, 0\n\t is returned.')
trunkGroupNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgState.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgState.setDescription('Enable or disable a trunk group.')
trunkGroupNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgDelete.setDescription('Setting the value to delete(2) will delete the entire\n         row. When read, other(1) is returned.')
trunkGroupNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgBwmContract.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgBwmContract.setDescription('Default BW contract of a trunk group.')
stgCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1), )
if mibBuilder.loadTexts: stgCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgTable.setDescription('The table of Spanning Tree Group configuration.')
stgCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "stgCurCfgIndex"))
if mibBuilder.loadTexts: stgCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgTableEntry.setDescription('Information about a particular Spanning Tree Group configuration.')
stgCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgIndex.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgIndex.setDescription('The identifier of a particular Spanning Tree Group.  This is also\n         index to the entLogicalTable of Entity MIB.')
stgCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgState.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgState.setDescription('Turn on of off Spanning Tree operation of a particular Spanning\n         Tree Group.')
stgCurCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPriority.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPriority.setDescription('The value of the write-able portion of the Bridge ID, i.e., the first\n         two octets of the (8 octet long) Bridge ID.')
stgCurCfgBrgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgHelloTime.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgBrgHelloTime.setDescription('The value in seconds that all bridges use for HelloTime when this \n         bridge is acting as the root.')
stgCurCfgBrgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgForwardDelay.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgBrgForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this \n         bridge is acting as the root.')
stgCurCfgBrgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgMaxAge.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgBrgMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge\n         is acting as the root.')
stgCurCfgAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgAgingTime.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgAgingTime.setDescription('The timeout period in seconds for aging out dynamically learned \n         forwarding information.')
stgCurCfgVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgVlanBmap.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgVlanBmap.setDescription('The vlans applied to the spanning tree group.  The vlans are \n         presented in bitmap format. This string displays vlan number\n\t from 1 to 4096.\n\n\t in receiving order:\n\n\t     OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx ..... \n             ||    || |_ vlan 9\n             ||    ||  \n             ||    ||___ vlan 8\n             ||    |____ vlan 7\n             ||      .    .   .\n             ||_________ vlan 2\n             |__________ vlan 1 (as index to stgCurCfgTable)\n\n         where x : 1 - The represented vlan applied to the spanning tree. \n\t\t   0 - The represented vlan not applied to the spanning tree')
stgNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2), )
if mibBuilder.loadTexts: stgNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgTable.setDescription('The table of Spanning Tree Groups configuration in the new_config.')
stgNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "stgNewCfgIndex"))
if mibBuilder.loadTexts: stgNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgTableEntry.setDescription('Information about a particular Spanning Tree Group configuration.')
stgNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgIndex.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgIndex.setDescription('The identifier of a particular Spanning Tree Group.  This is also\n         index to the entLogicalTable of Entity MIB.')
stgNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgState.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgState.setDescription('Turn on of off Spanning Tree operation of a particular Spanning\n         Tree Group.')
stgNewCfgDefaultCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default-config", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgDefaultCfg.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgDefaultCfg.setDescription('Setting the value to default-config(1) will set the default\n         configuration as recommended by IEEE 802.1D for a particular\n         Spanning Tree Group.  default-config (1) is always returned \n\t When read, but it does not mean anything.')
stgNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgAddVlan.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgAddVlan.setDescription("The vlan to be added to the specified Spanning Tree Group.  A \n         '0' value is returned when read.")
stgNewCfgRemoveVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgRemoveVlan.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgRemoveVlan.setDescription("The vlan to be removed from the specified Spanning Tree Group.\n         A '0' value is returned when read.")
stgNewCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgPriority.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPriority.setDescription('The value of the write-able portion of the Bridge ID, i.e., the first\n         two octets of the (8 octet long) Bridge ID.')
stgNewCfgBrgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgBrgHelloTime.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgBrgHelloTime.setDescription('The value in seconds that all bridges use for HelloTime when this \n         bridge is acting as the root.')
stgNewCfgBrgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgBrgForwardDelay.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgBrgForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this \n         bridge is acting as the root.')
stgNewCfgBrgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgBrgMaxAge.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgBrgMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge\n         is acting as the root.')
stgNewCfgAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stgNewCfgAgingTime.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgAgingTime.setDescription('The timeout period in seconds for aging out dynamically learned \n         forwarding information.')
stgNewCfgVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgVlanBmap.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgVlanBmap.setDescription('The vlans applied to the spanning tree group.  The vlans are \n         presented in bitmap format. This string displays vlan number\n\t from 1 to 4096.\n\n\t in receiving order:\n\n\t     OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx ..... \n             ||    || |_ vlan 9\n             ||    ||  \n             ||    ||___ vlan 8\n             ||    |____ vlan 7\n             ||      .    .   .\n             ||_________ vlan 2\n             |__________ vlan 1 (as index to stgCurCfgTable)\n\n         where x : 1 - The represented vlan applied to the spanning tree. \n\t\t   0 - The represented vlan not applied to the spanning tree')
stgCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3), )
if mibBuilder.loadTexts: stgCurCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortTable.setDescription('The table of Spanning Tree Group port configuration in the\n         current_config.')
stgCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "stgCurCfgStgIndex"), (0, "ALTEON-CS-PHYSICAL-MIB", "stgCurCfgPortIndex"))
if mibBuilder.loadTexts: stgCurCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortTableEntry.setDescription('Information about port configuration of a particular Spanning Tree\n         Group.')
stgCurCfgStgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgStgIndex.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgStgIndex.setDescription('The identifier of a particular Spanning Tree Group.  This is also\n         index to the entLogicalTable of Entity MIB.')
stgCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortIndex.setDescription('The port identifier of a particular Spanning Tree Group.')
stgCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortState.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortState.setDescription('Turn on of off Spanning Tree operation of a particular port of a\n         Spanning Tree Group.')
stgCurCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortPriority.setDescription('The value of the priority field which is contained in the first \n         (in network byte order) octet of the (2 octet long) Port ID.')
stgCurCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortPathCost.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the \n        spanning tree root which include this port (if MSTP/RSTP is enabled\n        range is (0..200000000) else range is (0..65535) ).')
stgCurCfgPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortLink.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortLink.setDescription('The type of the port link.')
stgCurCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortEdge.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortEdge.setDescription('The state of port edge.')
stgNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4), )
if mibBuilder.loadTexts: stgNewCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortTable.setDescription('The table of Spanning Tree Group port configuration in the\n         new_config.')
stgNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "stgNewCfgStgIndex"), (0, "ALTEON-CS-PHYSICAL-MIB", "stgNewCfgPortIndex"))
if mibBuilder.loadTexts: stgNewCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortTableEntry.setDescription('Information about port configuration of a particular Spanning Tree\n         Group.')
stgNewCfgStgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgStgIndex.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgStgIndex.setDescription('The identifier of a particular Spanning Tree Group.  This is also\n         index to the entLogicalTable of Entity MIB.')
stgNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortIndex.setDescription('The port identifier of a particular Spanning Tree Group.')
stgNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortState.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortState.setDescription('Turn on of off Spanning Tree operation of a particular port of a\n         Spanning Tree Group.')
stgNewCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortPriority.setDescription('The value of the priority field which is contained in the first \n         (in network byte order) octet of the (2 octet long) Port ID.')
stgNewCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortPathCost.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the \n        spanning tree root which include this port (if MSTP/RSTP is enabled\n        range is (0..200000000) else range is (0..65535) ).')
stgNewCfgPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortLink.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortLink.setDescription('The type of the port link.')
stgNewCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortEdge.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortEdge.setDescription('The state of port edge.')
pmCurCfgPortMirrState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPortMirrState.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPortMirrState.setDescription('The state of port-based port mirroring.')
pmNewCfgPortMirrState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgPortMirrState.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPortMirrState.setDescription('The state of port-based port mirroring.')
pmCurCfgPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 3), )
if mibBuilder.loadTexts: pmCurCfgPortMonitorTable.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPortMonitorTable.setDescription('The table of monitoring ports.')
pmCurCfgPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 3, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "pmCurCfgPmirrMoniPortIndex"), (0, "ALTEON-CS-PHYSICAL-MIB", "pmCurCfgPmirrMirrPortIndex"))
if mibBuilder.loadTexts: pmCurCfgPortMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPortMonitorEntry.setDescription('A row in the monitoring port table.')
pmCurCfgPmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrMoniPortIndex.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPmirrMoniPortIndex.setDescription('The monitoring port number.')
pmCurCfgPmirrMirrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrMirrPortIndex.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPmirrMirrPortIndex.setDescription('The mirrored port number')
pmCurCfgPmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrDirection.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPmirrDirection.setDescription('The type of traffic to be monitored with respect to the\n         mirrored port.')
pmCurCfgPmirrPortVlansBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrPortVlansBmap.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPmirrPortVlansBmap.setDescription('The mirrored VLANs (1-4096) list for the port. The VLANs are presented in bitmap format.\n\t in receiving order:\n\n\t     OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx ..... \n             ||    || |_ vlan 9\n             ||    ||  \n             ||    ||___ vlan 8\n             ||    |____ vlan 7\n             ||      .    .   .\n             ||_________ vlan 2\n             |__________ vlan 1\n\n         where x : 1 - The represented VLAN is being mirrored.\n\t\t   0 - The represented VLAN is not being mirrored.\n         Note: When all octets are zero - all vlan(s) traffic is \n               being for the port')
pmNewCfgPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4), )
if mibBuilder.loadTexts: pmNewCfgPortMonitorTable.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPortMonitorTable.setDescription('The table of monitoring ports.')
pmNewCfgPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "pmNewCfgPmirrMoniPortIndex"), (0, "ALTEON-CS-PHYSICAL-MIB", "pmNewCfgPmirrMirrPortIndex"))
if mibBuilder.loadTexts: pmNewCfgPortMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPortMonitorEntry.setDescription('A row in the monitoring port table.')
pmNewCfgPmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrMoniPortIndex.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPmirrMoniPortIndex.setDescription('The monitoring port number.')
pmNewCfgPmirrMirrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrMirrPortIndex.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPmirrMirrPortIndex.setDescription('The mirrored port number')
pmNewCfgPmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmirrDirection.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPmirrDirection.setDescription('The type of traffic to be monitored with respect to the\n         mirrored port.')
pmNewCfgPmirrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmirrDelete.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPmirrDelete.setDescription('Setting the value to delete(2) will delete the entire\n         row. When read, other(1) is returned.')
pmNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgAddVlan.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgAddVlan.setDescription("The VLAN whose traffic is to be mirrored for this port. \n         A '0' value is returned when read.")
pmNewCfgRemoveVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgRemoveVlan.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgRemoveVlan.setDescription("The VLAN whose traffic will no longer to be mirrored. \n         A '0' value is returned when read.")
pmNewCfgPmirrPortVlansBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 4, 1, 4, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrPortVlansBmap.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPmirrPortVlansBmap.setDescription('The mirrored VLANs(1-4096) list for the port. The VLANs are presented in bitmap format.\n\t in receiving order:\n\n\t     OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx ..... \n             ||    || |_ vlan 9\n             ||    ||  \n             ||    ||___ vlan 8\n             ||    |____ vlan 7\n             ||      .    .   .\n             ||_________ vlan 2\n             |__________ vlan 1\n\n         where x : 1 - The represented VLAN is being mirrored.\n\t\t   0 - The represented VLAN is not being mirrored.\n         Note: All octets are zero means all vlan(s) traffic is \n               being mirrored for the port')
mstCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgState.setStatus('current')
if mibBuilder.loadTexts: mstCurCfgState.setDescription('Enable or disable MSTP/RSTP')
mstNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgState.setStatus('current')
if mibBuilder.loadTexts: mstNewCfgState.setDescription('Enable or disable MSTP/RSTP')
mstCurCfgRegionName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgRegionName.setStatus('current')
if mibBuilder.loadTexts: mstCurCfgRegionName.setDescription("The Name for the Region's configuration.")
mstNewCfgRegionName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgRegionName.setStatus('current')
if mibBuilder.loadTexts: mstNewCfgRegionName.setDescription("The Name for the Region's configuration.")
mstCurCfgRegionVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgRegionVersion.setStatus('current')
if mibBuilder.loadTexts: mstCurCfgRegionVersion.setDescription('Version of the MST Region.')
mstNewCfgRegionVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgRegionVersion.setStatus('current')
if mibBuilder.loadTexts: mstNewCfgRegionVersion.setDescription('Version of the MST Region.')
mstCurCfgMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgMaxHopCount.setStatus('current')
if mibBuilder.loadTexts: mstCurCfgMaxHopCount.setDescription('Indicates the maximum hop count value.')
mstNewCfgMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgMaxHopCount.setStatus('current')
if mibBuilder.loadTexts: mstNewCfgMaxHopCount.setDescription('Indicates the maximum hop count value.')
mstCurCfgStpMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mstp", 1), ("rstp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgStpMode.setStatus('current')
if mibBuilder.loadTexts: mstCurCfgStpMode.setDescription('The version of Spanning Tree Protocal the bridge is currently \n         running.')
mstNewCfgStpMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mstp", 1), ("rstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgStpMode.setStatus('current')
if mibBuilder.loadTexts: mstNewCfgStpMode.setDescription('The version of Spanning Tree Protocal the bridge is currently \n         running.')
mstCistDefaultCfg = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistDefaultCfg.setStatus('current')
if mibBuilder.loadTexts: mstCistDefaultCfg.setDescription('Setting the value to default(1) will set the Multiple\n         Spanning Tree and member parameters to default.  default(1) is \n         always returned when read, but it does not mean anything.')
mstCistBridgeCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 2))
mstCistCurCfgBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgePriority.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgBridgePriority.setDescription('The value of the writable portion of the Brigde Identifier comprising\n         of the first two octets.')
mstCistNewCfgBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgePriority.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgBridgePriority.setDescription('The value of the writable portion of the Brigde Identifier comprising\n         of the first two octets.')
mstCistCurCfgBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgBridgeMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge\n         is acting as the root.')
mstCistNewCfgBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgBridgeMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge\n         is acting as the root.')
mstCistCurCfgBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgBridgeForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this \n         bridge is acting as the root.')
mstCistNewCfgBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgBridgeForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this \n         bridge is acting as the root.')
mstCistCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3), )
if mibBuilder.loadTexts: mstCistCurCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortTable.setDescription('The table of CIST Port configuration.')
mstCistCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "mstCistCurCfgPortIndex"))
if mibBuilder.loadTexts: mstCistCurCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortTableEntry.setDescription('Information about a particular CIST Port configuration.')
mstCistCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortIndex.setDescription('The port number of the port for which this entry contains spanning\n         tree configuration.')
mstCistCurCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortPriority.setDescription('The four most significant bits of the Port Identifier of the \n         Spanning Tree instance can be modified by setting this value.')
mstCistCurCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortPathCost.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortPathCost.setDescription('The contribution of this port to the path cost of paths towards \n         the CIST Root which include this port.')
mstCistCurCfgPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortLinkType.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortLinkType.setDescription('The administrative point-to-point status of the LAN segment attached \n         to this port.  A value of p2p (2) indicates that this port should \n         always be treated as if it is connected to a point-to-point link. \n         A value of shared(3) indicates that this port should be treated as \n         having a shared media connection.  A value of auto(1) indicates that \n         this port is considered to have a point-to-point link if it is an \n         Aggregator and all of its members are aggregatable, or if the MAC \n         entity is configured for full duplex operation, either through\n         auto-negotiation or by management means.')
mstCistCurCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortEdge.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortEdge.setDescription('The value of the Edge Port parameter.')
mstCistCurCfgPortStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortStpState.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortStpState.setDescription("Turn port's Spanning Tree on/off.")
mstCistCurCfgPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortHelloTime.setDescription('The amount of time between the transmission of Configuration Port \n         PDUs in seconds.')
mstCistNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4), )
if mibBuilder.loadTexts: mstCistNewCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortTable.setDescription('The table of CIST Port configuration.')
mstCistNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "mstCistNewCfgPortIndex"))
if mibBuilder.loadTexts: mstCistNewCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortTableEntry.setDescription('Information about a particular CIST Port configuration.')
mstCistNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistNewCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortIndex.setDescription('The port number of the port for which this entry contains spanning\n         tree configuration.')
mstCistNewCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortPriority.setDescription('The four most significant bits of the Port Identifier of the \n         Spanning Tree instance can be modified by setting this value.')
mstCistNewCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortPathCost.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortPathCost.setDescription('The contribution of this port to the path cost of paths towards \n         the CIST Root which include this port.')
mstCistNewCfgPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortLinkType.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortLinkType.setDescription('The administrative point-to-point status of the LAN segment attached \n         to this port.  A value of p2p (2) indicates that this port should \n         always be treated as if it is connected to a point-to-point link. \n         A value of shared(3) indicates that this port should be treated as \n         having a shared media connection.  A value of auto(1) indicates that \n         this port is considered to have a point-to-point link if it is an \n         Aggregator and all of its members are aggregatable, or if the MAC \n         entity is configured for full duplex operation, either through\n         auto-negotiation or by management means.')
mstCistNewCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortEdge.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortEdge.setDescription('The value of the Edge Port parameter.')
mstCistNewCfgPortStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortStpState.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortStpState.setDescription("Turn port's Spanning Tree on/off.")
mstCistNewCfgPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 7, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortHelloTime.setDescription('The amount of time between the transmission of Configuration Port \n         PDUs in seconds.')
portTeamTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: portTeamTableMaxSize.setDescription('The maximum number of port teams.')
portTeamCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 2), )
if mibBuilder.loadTexts: portTeamCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: portTeamCurCfgTable.setDescription('The port team current configuration.')
portTeamCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 2, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "portTeamCurCfgIndex"))
if mibBuilder.loadTexts: portTeamCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: portTeamCurCfgTableEntry.setDescription('A row in the port team configuration table.')
portTeamCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamCurCfgIndex.setStatus('current')
if mibBuilder.loadTexts: portTeamCurCfgIndex.setDescription('The identifier of the port team.')
portTeamCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamCurCfgState.setStatus('current')
if mibBuilder.loadTexts: portTeamCurCfgState.setDescription('Enable or disable a port team.')
portTeamCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamCurCfgPorts.setStatus('current')
if mibBuilder.loadTexts: portTeamCurCfgPorts.setDescription('The port list in the port team. The ports are presented in\n         bitmap format.\n\n         in receiving order:\n\n             OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx .....\n             |    |||_ port 8\n             |    ||\n             |    ||___ port 7\n             |    |____ port 6\n             |      .    .   .\n             |_________ port 1\n\n         where x : 1 - The represented port belongs to the port team\n                   0 - The represented port does not belong to the port team')
portTeamCurCfgTrunks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamCurCfgTrunks.setStatus('current')
if mibBuilder.loadTexts: portTeamCurCfgTrunks.setDescription('The trunk list in the port team. The trunks are presented in\n         bitmap format.\n\n         in receiving order:\n\n             OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx .....\n             |    |||_ trunk 8\n             |    ||\n             |    ||___ trunk 7\n             |    |____ trunk 6\n             |      .    .   .\n             |_________ trunk 1\n\n         where x : 1 - The represented trunk belongs to the port team\n                   0 - The represented trunk does not belong to the port team')
portTeamNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3), )
if mibBuilder.loadTexts: portTeamNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: portTeamNewCfgTable.setDescription('The port team new configuration.')
portTeamNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "portTeamNewCfgIndex"))
if mibBuilder.loadTexts: portTeamNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: portTeamNewCfgTableEntry.setDescription('A row in the port team configuration table.')
portTeamNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamNewCfgIndex.setStatus('current')
if mibBuilder.loadTexts: portTeamNewCfgIndex.setDescription('The identifier of the port team.')
portTeamNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTeamNewCfgState.setStatus('current')
if mibBuilder.loadTexts: portTeamNewCfgState.setDescription('Enable or disable a port team.')
portTeamNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamNewCfgPorts.setStatus('current')
if mibBuilder.loadTexts: portTeamNewCfgPorts.setDescription('The port list in the port team. The ports are presented in\n         bitmap format.\n\n         in receiving order:\n\n             OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx .....\n             |    |||_ port 8\n             |    ||\n             |    ||___ port 7\n             |    |____ port 6\n             |      .    .   .\n             |_________ port 1\n\n         where x : 1 - The represented port belongs to the port team\n                   0 - The represented port does not belong to the port team')
portTeamNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTeamNewCfgAddPort.setStatus('current')
if mibBuilder.loadTexts: portTeamNewCfgAddPort.setDescription('The port to be added in the port team. When read, 0 is returned.')
portTeamNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTeamNewCfgRemovePort.setStatus('current')
if mibBuilder.loadTexts: portTeamNewCfgRemovePort.setDescription('The port to be deleted from the port team. When read, 0is returned.')
portTeamNewCfgTrunks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamNewCfgTrunks.setStatus('current')
if mibBuilder.loadTexts: portTeamNewCfgTrunks.setDescription('The trunk list in the port team. The trunks are presented in\n         bitmap format.\n\n         in receiving order:\n\n             OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx .....\n             |    |||_ trunk 8\n             |    ||\n             |    ||___ trunk 7\n             |    |____ trunk 6\n             |      .    .   .\n             |_________ trunk 1\n\n         where x : 1 - The represented trunk belongs to the port team\n                   0 - The represented trunk does not belong to the port team')
portTeamNewCfgAddTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTeamNewCfgAddTrunk.setStatus('current')
if mibBuilder.loadTexts: portTeamNewCfgAddTrunk.setDescription('The trunk to be added in the port team. When read, 0 is returned.')
portTeamNewCfgRemoveTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTeamNewCfgRemoveTrunk.setStatus('current')
if mibBuilder.loadTexts: portTeamNewCfgRemoveTrunk.setDescription('The trunk to be deleted from the port team. When read, 0is returned.')
portTeamNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 1, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTeamNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: portTeamNewCfgDelete.setDescription('Setting the value to delete(2) will delete the entire\n         row. When read, other(1) is returned.')
portTeamInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1), )
if mibBuilder.loadTexts: portTeamInfoTable.setStatus('current')
if mibBuilder.loadTexts: portTeamInfoTable.setDescription('The port team information table.')
portTeamInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "portTeamInfoIndex"))
if mibBuilder.loadTexts: portTeamInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: portTeamInfoTableEntry.setDescription('A row in the port team information table.')
portTeamInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamInfoIndex.setStatus('current')
if mibBuilder.loadTexts: portTeamInfoIndex.setDescription('The identifier of the port team.')
portTeamInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("passive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamInfoState.setStatus('current')
if mibBuilder.loadTexts: portTeamInfoState.setDescription('State of a port team.')
portTeamInfoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamInfoPorts.setStatus('current')
if mibBuilder.loadTexts: portTeamInfoPorts.setDescription('The port list in the port team. The ports are presented in\n         bitmap format.\n \n         in receiving order:\n\n             OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx .....\n             |    |||_ port 8\n             |    ||\n             |    ||___ port 7\n             |    |____ port 6\n             |      .    .   .\n             |_________ port 1\n\n         where x : 1 - The represented port is added to the port team\n                   0 - The represented port is not added to the port team')
portTeamInfoPortsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamInfoPortsState.setStatus('current')
if mibBuilder.loadTexts: portTeamInfoPortsState.setDescription('The port state list in the port team. The ports states are presented in\n         bitmap format.\n \n         in receiving order:\n\n             OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx .....\n             |    |||_ port 8 state\n             |    ||\n             |    ||___ port 7 state\n             |    |____ port 6 state\n             |      .    .   .\n             |_________ port 1 state\n\n         where x : 1 - The represented port in that team is up\n                   0 - If the represented port is added in that team then\n                       the port state is down otherwise the port is not \n                       added into that team( check whether port is added \n                       to the team or not through the mib portTeamInfoPorts).')
portTeamInfoTrunks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamInfoTrunks.setStatus('current')
if mibBuilder.loadTexts: portTeamInfoTrunks.setDescription('The trunk list in the port team. The trunks are presented in\n         bitmap format.\n \n         in receiving order:\n\n             OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx .....\n             |    |||_ trunk 8\n             |    ||\n             |    ||___ trunk 7\n             |    |____ trunk 6\n             |      .    .   .\n             |_________ trunk 1\n\n         where x : 1 - The represented trunk belongs to the port team\n                   0 - The represented trunk does not belong to the port team')
portTeamInfoTrunksState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 6, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTeamInfoTrunksState.setStatus('current')
if mibBuilder.loadTexts: portTeamInfoTrunksState.setDescription('The trunk state list in the trunk team. The trunks states are presented in\n         bitmap format.\n\n         in receiving order:\n\n             OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx .....\n             |    |||_ trunk 8 state\n             |    ||\n             |    ||___ trunk 7 state\n             |    |____ trunk 6 state\n             |      .    .   .\n             |_________ trunk 1 state\n\n         where x : 1 - The represented trunk in that team is up\n                   0 - If the represented trunk is added in that team then\n                       the trunk state is down otherwise the port is\n                       not added into that team( check whether it is added\n                       to the team or not through the mib portTeamInfoTrunks).')
fdbStatsCreates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsCreates.setStatus('current')
if mibBuilder.loadTexts: fdbStatsCreates.setDescription('Number of entries created in the Forwarding Database.')
fdbStatsDeletes = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsDeletes.setStatus('current')
if mibBuilder.loadTexts: fdbStatsDeletes.setDescription('Number of entries deleted from the Forwarding Database.')
fdbStatsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsCurrent.setStatus('current')
if mibBuilder.loadTexts: fdbStatsCurrent.setDescription('Current number of entries in the Forwarding Database.')
fdbStatsHiwat = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsHiwat.setStatus('current')
if mibBuilder.loadTexts: fdbStatsHiwat.setDescription('Highest number of entries recorded at any given time in the \n         Forwarding Database.')
fdbStatsLookups = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsLookups.setStatus('current')
if mibBuilder.loadTexts: fdbStatsLookups.setDescription('Number of entry lookups in the Forwarding Database.')
fdbStatsLookupFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsLookupFails.setStatus('current')
if mibBuilder.loadTexts: fdbStatsLookupFails.setDescription('Number of unsuccessful searches made in the Forwarding Database.')
fdbStatsFinds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsFinds.setStatus('current')
if mibBuilder.loadTexts: fdbStatsFinds.setDescription('Number of searches in the Forwarding Database.')
fdbStatsFindFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsFindFails.setStatus('current')
if mibBuilder.loadTexts: fdbStatsFindFails.setDescription('Number of search failures in the Forwarding Database.')
fdbStatsFindOrCreates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsFindOrCreates.setStatus('current')
if mibBuilder.loadTexts: fdbStatsFindOrCreates.setDescription('Number of entries found or created in the Forwarding Database.')
fdbStatsOverflows = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsOverflows.setStatus('current')
if mibBuilder.loadTexts: fdbStatsOverflows.setDescription('Number of entries overflowing the Forwarding Database.')
stgStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1), )
if mibBuilder.loadTexts: stgStatsPortTable.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortTable.setDescription('The table of Spanning Tree Group port statistics.')
stgStatsPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "stgStatsStpIndex"), (0, "ALTEON-CS-PHYSICAL-MIB", "stgStatsPortIndex"))
if mibBuilder.loadTexts: stgStatsPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortTableEntry.setDescription('Statistics about port of a particular Spanning Tree Group.')
stgStatsStpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsStpIndex.setStatus('current')
if mibBuilder.loadTexts: stgStatsStpIndex.setDescription('The identifier of a particular Spanning Tree Group.')
stgStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortIndex.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortIndex.setDescription('The port identifier of a particular Spanning Tree Group.')
stgStatsPortRcvCfgBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortRcvCfgBpdus.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortRcvCfgBpdus.setDescription("Number of Configuration BPDU's received on this port.")
stgStatsPortRcvTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortRcvTcnBpdus.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortRcvTcnBpdus.setDescription("Number of TCN BPDU's received on this port.")
stgStatsPortXmtCfgBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortXmtCfgBpdus.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortXmtCfgBpdus.setDescription("Number of Configuration BPDU's trasmitted from the port.")
stgStatsPortXmtTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortXmtTcnBpdus.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortXmtTcnBpdus.setDescription("Number of TCN BPDU's trasmitted from the port.")
fdbClear = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbClear.setStatus('current')
if mibBuilder.loadTexts: fdbClear.setDescription('Setting this value to clear(2) clears the entire master FDB.')
fdbTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2), )
if mibBuilder.loadTexts: fdbTable.setStatus('current')
if mibBuilder.loadTexts: fdbTable.setDescription('The table of FDB entries.')
fdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "fdbMacAddr"))
if mibBuilder.loadTexts: fdbEntry.setStatus('current')
if mibBuilder.loadTexts: fdbEntry.setDescription('A row in the FDB table')
fdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacAddr.setStatus('current')
if mibBuilder.loadTexts: fdbMacAddr.setDescription('The MAC address for the FDB entry.')
fdbVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbVlan.setStatus('current')
if mibBuilder.loadTexts: fdbVlan.setDescription('The VLAN ID for the FDB entry.')
fdbSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbSrcPort.setStatus('current')
if mibBuilder.loadTexts: fdbSrcPort.setDescription("Either the value '0', or the port number of the port on which a frame \n        having a source address equal to the value of the corresponding \n        instance has been seen.  A value of '0' indicates that the port \n        number has not been learned but that the bridge does have some\n        forwarding/filtering information about this address.")
fdbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("ignore", 2), ("forward", 3), ("flood", 4), ("ffd", 5), ("trunk", 6), ("vir", 7), ("vsr", 8), ("vpr", 9), ("other", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbState.setStatus('current')
if mibBuilder.loadTexts: fdbState.setDescription('The state of the FDB entry. The meanings of the values are :\n         unknown(1) : the MAC address has not yet been learned by the switch\n                      but has only been seen as a destination address\n         forward(3) : the MAC address has been learned by the switch\n         flood(4)   : the MAC address is a multicast destination address \n         trunk(6)   : frames with this MAC address are forwarded to trunk\n                      group\n         vir(7)     : frames with this MAC address are forwarded for L3 \n                      processing')
fdbRefSps = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbRefSps.setStatus('current')
if mibBuilder.loadTexts: fdbRefSps.setDescription('The referenced SPs associated with this FDB entry.')
fdbLearnedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbLearnedPort.setStatus('current')
if mibBuilder.loadTexts: fdbLearnedPort.setDescription('The learned port associated with this FDB entry.')
fdbSrcTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbSrcTrunk.setStatus('current')
if mibBuilder.loadTexts: fdbSrcTrunk.setDescription("Either the value '0', or the trunk number of the trunk on which a frame\n        having a source address equal to the value of the corresponding\n        instance has been seen.  A value of '0' indicates that the source\n        address is not associated with a trunk.")
stpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1), )
if mibBuilder.loadTexts: stpInfoTable.setStatus('current')
if mibBuilder.loadTexts: stpInfoTable.setDescription('The table of Spanning Tree Group information.')
stpInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "stpInfoIndex"))
if mibBuilder.loadTexts: stpInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: stpInfoTableEntry.setDescription('Information about a particular Spanning Tree Group.')
stpInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoIndex.setStatus('current')
if mibBuilder.loadTexts: stpInfoIndex.setDescription('The identifier of a particular Spanning Tree Group.  This is also\n         index to the entLogicalTable of Entity MIB.')
stpInfoTimeSinceTopChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoTimeSinceTopChange.setStatus('current')
if mibBuilder.loadTexts: stpInfoTimeSinceTopChange.setDescription('The time (in hundredths of a second) since the last time a topology \n         change was detected by the bridge entity.')
stpInfoTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoTopChanges.setStatus('current')
if mibBuilder.loadTexts: stpInfoTopChanges.setDescription('The total number of topology changes detected by this bridge since \n         the management entity was last reset or initialized.')
stpInfoDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: stpInfoDesignatedRoot.setDescription('The bridge identifier of the root of the spanning tree as determined \n         by the Spanning Tree Protocol as executed by this node.  This value \n         is used as the Root Identifier parameter in all Configuration Bridge \n         PDUs originated by this node.')
stpInfoRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoRootCost.setStatus('current')
if mibBuilder.loadTexts: stpInfoRootCost.setDescription('The cost of the path to the root as seen from this bridge.')
stpInfoRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoRootPort.setStatus('current')
if mibBuilder.loadTexts: stpInfoRootPort.setDescription('The port number of the port which offers the lowest cost path from \n         this bridge to the root bridge.')
stpInfoMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoMaxAge.setStatus('current')
if mibBuilder.loadTexts: stpInfoMaxAge.setDescription('The maximum age of Spanning Tree Protocol information learned from \n         the network on any port before it is discarded, in units of \n         hundredths of a second.  This is the actual value that this bridge is\n         currently using.')
stpInfoHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoHelloTime.setStatus('current')
if mibBuilder.loadTexts: stpInfoHelloTime.setDescription('The amount of time between the transmission of Configuration bridge \n         PDUs by this node on any port when it is the root of the spanning \n         tree or trying to become so, in units of hundredths of a second.\n         This is the actual value that this bridge is currently using.')
stpInfoForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoForwardDelay.setStatus('current')
if mibBuilder.loadTexts: stpInfoForwardDelay.setDescription('This time value, measured in units of hundredths of a second, \n          controls how fast a port changes its spanning state when moving \n          towards the Forwarding state.  The value determines how long the port\n          stays in each of the Listening and Learning states, which precede \n          the Forwarding state.  This value is also used, when a topology \n          change has been detected and is underway, to age all dynamic entries\n          in the Forwarding Database.')
stpInfoHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoHoldTime.setStatus('current')
if mibBuilder.loadTexts: stpInfoHoldTime.setDescription('This time value determines the interval length during which no more \n         than two Configuration bridge PDUs shall be transmitted by this node,\n         in units of hundredths of a second.')
stpInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2), )
if mibBuilder.loadTexts: stpInfoPortTable.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortTable.setDescription('The table of Spanning Tree Group port information.')
stpInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "stpInfoPortStpIndex"), (0, "ALTEON-CS-PHYSICAL-MIB", "stpInfoPortIndex"))
if mibBuilder.loadTexts: stpInfoPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortTableEntry.setDescription('Information about port configuration for a particular Spanning Tree\n         Group.')
stpInfoPortStpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortStpIndex.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortStpIndex.setDescription('The identifier of a particular Spanning Tree Group.')
stpInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortIndex.setDescription('The port identifier of a particular Spanning Tree Group.')
stpInfoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6), ("discarding", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortState.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortState.setDescription("The port's current state as defined by application of the Spanning \n         Tree Protocol.  This state controls what action a port takes on\n         reception of a frame.  If the bridge has detected a port that is \n         malfunctioning it will place that port into the broken(6) state.  \n         For ports which are disabled, this object will have a value of \n         disabled(1).")
stpInfoPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Root in \n         the Configuration BPDUs transmitted by the Designated Bridge for the\n         segment to which the port is attached.')
stpInfoPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this\n         port.  This value is compared to the Root Path Cost field in received\n         bridge PDUs.')
stpInfoPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be \n         the Designated Bridge for this port's segment.")
stpInfoPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this \n         port's segment.")
stpInfoPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortForwardTransitions.setDescription('The number of times this port has transitioned from the Learning \n         state to the Forwarding state.')
stpInfoPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortPathCost.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortPathCost.setDescription('The path cost of the port.')
stpInfoPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("master", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortRole.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortRole.setDescription('The port role. Returns unknown(7) when MSTP/RSTP is not enabled,\n         otherwise returns appropriate port role.')
stpInfoPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("p2p", 1), ("shared", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortLinkType.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortLinkType.setDescription('The point-to-point status of the LAN segment attached\n         to this port.  A value of p2p (1) indicates that this port is being\n         treated as if it is connected to a point-to-point link.\n         A value of shared(2) indicates that this port is being treated as\n         having a shared media connection.')
stpInfoPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortEdge.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortEdge.setDescription('The port is an edge port or not. Returns disabled(2) when the port is\n\t not an edge port and returns enabled(1) when it is an edge port.')
lacpInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3, 1), )
if mibBuilder.loadTexts: lacpInfoPortTable.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortTable.setDescription('The table of LACP port information.')
lacpInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3, 1, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "lacpInfoPortIndex"))
if mibBuilder.loadTexts: lacpInfoPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortTableEntry.setDescription('Information about a LACP port.')
lacpInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortIndex.setDescription('The port identifier.')
lacpInfoPortSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("selected", 1), ("unselected", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortSelected.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortSelected.setDescription('Selected flag value indicates that the selection logic has selected\n         an appropriate Aggregator. A value of unselected indicates that no \n         aggregator is currently selected. A value of standby indicates that\n         although the selection logic has selected an appropriate Aggregator,\n         aggregation restrictions currently precent the port from being \n         enabled as part of the aggregation, and so the port is being held\n         in standby condition.')
lacpInfoPortNtt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortNtt.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortNtt.setDescription('Need to transmit flag. True indicates that there is new protocol \n         information that should be transmitted on the link.')
lacpInfoPortReadyN = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortReadyN.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortReadyN.setDescription('True value for Ready_N flag indicates that the wait while timer \n         has expired and it is waiting to attach to an aggregator. \n         There is one Ready_N value for each port.')
lacpInfoPortMoved = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortMoved.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortMoved.setDescription('Port Moved flag is set to true if the receive machine for a port \n         is in the port_disabled state, and the combination of partner oper\n         system and partner oper port number in use by the port has been \n         used by received in an incoming LACPDU on a different port.')
cistRoot = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 1), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRoot.setStatus('current')
if mibBuilder.loadTexts: cistRoot.setDescription('The bridge identifier of the Root of the common spanning\n         tree as determined by the Spanning Tree Protocol\n         as executed by this node.  This value is used as\n         the CIST Root Identifier parameter in all Configuration\n         Bridge PDUs originated by this node.')
cistRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootPathCost.setStatus('current')
if mibBuilder.loadTexts: cistRootPathCost.setDescription('The cost of the path to the CIST Root as seen from this bridge.')
cistRootPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootPort.setStatus('current')
if mibBuilder.loadTexts: cistRootPort.setDescription('The Port Number of the Port which offers the lowest path cost from \n        this bridge to the CIST Root Bridge.')
cistBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: cistBridgeHelloTime.setDescription('The amount of time between the transmission of Configuration bridge\n         PDUs in seconds.')
cistBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: cistBridgeMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge\n         is acting as the root.')
cistBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: cistBridgeForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this \n         bridge is acting as the root.')
cistRegionalRoot = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRegionalRoot.setStatus('current')
if mibBuilder.loadTexts: cistRegionalRoot.setDescription('The bridge identifier of the Root of the Multiple\n         spanning tree region as determined by the Spanning Tree\n         Protocol as executed by this node.  This value is used as\n         the CIST Regional Root Identifier parameter in all Configuration\n         Bridge PDUs originated by this node.')
cistRegionalPathCost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRegionalPathCost.setStatus('current')
if mibBuilder.loadTexts: cistRegionalPathCost.setDescription('The Cost of the path to the CIST Regional Root as seen from this \n         bridge.')
cistInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2), )
if mibBuilder.loadTexts: cistInfoPortTable.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortTable.setDescription('The table of CIST Port information.')
cistInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "cistInfoPortIndex"))
if mibBuilder.loadTexts: cistInfoPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortTableEntry.setDescription('Information about a particular CIST Port.')
cistInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortIndex.setDescription('The port number of the port for which this entry contains spanning\n         tree configuration.')
cistInfoPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortPriority.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortPriority.setDescription('The four most significant bits of the Port Identifier of the \n         Spanning Tree instance can be modified by setting this value.')
cistInfoPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortPathCost.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortPathCost.setDescription('The contribution of this port to the path cost of paths towards \n         the CIST Root which include this port.')
cistInfoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortState.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortState.setDescription('Current state of the Port as defined by the Common    \n         spanning tree protocol.')
cistInfoPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("master", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortRole.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortRole.setDescription('Selected Port Role of the port for this spanning tree instance.')
cistInfoPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortDesignatedBridge.setDescription("The unique Bridge Identifier of the bridge which this port  \n         considers to be the Designated Bridge for the port's segment.")
cistInfoPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortDesignatedPort.setDescription("The Port identifier of the port on the Designated Bridge    \n           for this port's segment.")
cistInfoPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("p2p", 1), ("shared", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortLinkType.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortLinkType.setDescription('The point-to-point status of the LAN segment attached \n         to this port.  A value of p2p (2) indicates that this port is being\n         treated as if it is connected to a point-to-point link. \n         A value of shared(3) indicates that this port is being treated as \n         having a shared media connection.')
vlanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1), )
if mibBuilder.loadTexts: vlanInfoTable.setStatus('current')
if mibBuilder.loadTexts: vlanInfoTable.setDescription('The table of VLAN information.')
vlanInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1), ).setIndexNames((0, "ALTEON-CS-PHYSICAL-MIB", "vlanInfoId"))
if mibBuilder.loadTexts: vlanInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: vlanInfoTableEntry.setDescription('Information about a particular VLAN.')
vlanInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoId.setStatus('current')
if mibBuilder.loadTexts: vlanInfoId.setDescription('The VLAN identifier.')
vlanInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoName.setStatus('current')
if mibBuilder.loadTexts: vlanInfoName.setDescription('The VLAN name.')
vlanInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoStatus.setStatus('current')
if mibBuilder.loadTexts: vlanInfoStatus.setDescription('Enable or disable, VLAN state information')
vlanInfoJumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoJumbo.setStatus('current')
if mibBuilder.loadTexts: vlanInfoJumbo.setDescription('Enable or disable Jumbo frames, Jumbo frames state \n         information of a VLAN')
vlanInfoBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoBwmContract.setStatus('current')
if mibBuilder.loadTexts: vlanInfoBwmContract.setDescription('Default BWM contract number information of a VLAN ')
vlanInfoLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoLearn.setStatus('current')
if mibBuilder.loadTexts: vlanInfoLearn.setDescription('Enable or disable source MAC address learning, MAC address\n         learning information of a VLAN')
vlanInfoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 2, 3, 5, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoPorts.setStatus('current')
if mibBuilder.loadTexts: vlanInfoPorts.setDescription('The port list information in the VLAN. The ports are presented \n         in bitmap format.\n\t in receiving order:\n\n\t     OCTET 1  OCTET 2  .....\n             xxxxxxxx xxxxxxxx ..... \n             ||    || |_ port 8\n             ||    ||  \n             ||    ||___ port 7\n             ||    |____ port 6\n             ||      .    .   .\n             ||_________ port 1\n             |__________ reserved\n\n         where x : 1 - The represented port belongs to the VLAN\n\t\t   0 - The represented port does not belong to the VLAN')
mibBuilder.exportSymbols("ALTEON-CS-PHYSICAL-MIB", stgStatsPortXmtTcnBpdus=stgStatsPortXmtTcnBpdus, stpInfoHelloTime=stpInfoHelloTime, cistBridgeHelloTime=cistBridgeHelloTime, stgNewCfgBrgMaxAge=stgNewCfgBrgMaxAge, pmCurCfgPmirrDirection=pmCurCfgPmirrDirection, stpInfoPortDesignatedBridge=stpInfoPortDesignatedBridge, pmNewCfgPortMirrState=pmNewCfgPortMirrState, stpInfoTableEntry=stpInfoTableEntry, stpInfoPortForwardTransitions=stpInfoPortForwardTransitions, lacpInfoPortSelected=lacpInfoPortSelected, mstCistNewCfgPortHelloTime=mstCistNewCfgPortHelloTime, trunkgroup=trunkgroup, mstCistNewCfgPortStpState=mstCistNewCfgPortStpState, pmNewCfgPortMonitorEntry=pmNewCfgPortMonitorEntry, trunkGroupNewCfgBwmContract=trunkGroupNewCfgBwmContract, stgCurCfgBrgMaxAge=stgCurCfgBrgMaxAge, layer2Oper=layer2Oper, stgNewCfgRemoveVlan=stgNewCfgRemoveVlan, lacp=lacp, vlanNewCfgPorts=vlanNewCfgPorts, stpInfoPortLinkType=stpInfoPortLinkType, fdbMacAddr=fdbMacAddr, mstCurCfgMaxHopCount=mstCurCfgMaxHopCount, stgStatsPortXmtCfgBpdus=stgStatsPortXmtCfgBpdus, stgCurCfgState=stgCurCfgState, mstCistCurCfgPortPathCost=mstCistCurCfgPortPathCost, mstCistCurCfgPortLinkType=mstCistCurCfgPortLinkType, portTeamCurCfgState=portTeamCurCfgState, mstCistCurCfgPortPriority=mstCistCurCfgPortPriority, stpInfoDesignatedRoot=stpInfoDesignatedRoot, cistInfoPortLinkType=cistInfoPortLinkType, cistBridgeMaxAge=cistBridgeMaxAge, stgCurCfgBrgForwardDelay=stgCurCfgBrgForwardDelay, cistInfo=cistInfo, vlanInfo=vlanInfo, lacpCurPortActorAdminKey=lacpCurPortActorAdminKey, portTeamTableMaxSize=portTeamTableMaxSize, cistBridgeForwardDelay=cistBridgeForwardDelay, stpStats=stpStats, portTeamCfg=portTeamCfg, fdbStatsCurrent=fdbStatsCurrent, stgStatsPortRcvCfgBpdus=stgStatsPortRcvCfgBpdus, lacpCurSystemPriority=lacpCurSystemPriority, stgCurCfgPortTable=stgCurCfgPortTable, mstCistNewCfgPortLinkType=mstCistNewCfgPortLinkType, vlanInfoStatus=vlanInfoStatus, trunkGroupCurCfgPorts=trunkGroupCurCfgPorts, pmCurCfgPmirrMoniPortIndex=pmCurCfgPmirrMoniPortIndex, vlanCurCfgLearn=vlanCurCfgLearn, trunkGroupNewCfgDelete=trunkGroupNewCfgDelete, mstCistNewCfgBridgePriority=mstCistNewCfgBridgePriority, portTeamInfo=portTeamInfo, stgStatsPortTable=stgStatsPortTable, stpInfoPortState=stpInfoPortState, vlanCurCfgTable=vlanCurCfgTable, pmNewCfgPmirrMoniPortIndex=pmNewCfgPmirrMoniPortIndex, stpInfoPortTableEntry=stpInfoPortTableEntry, vlanNewCfgVlanName=vlanNewCfgVlanName, cistRoot=cistRoot, stgNewCfgPortState=stgNewCfgPortState, mstCistNewCfgPortTableEntry=mstCistNewCfgPortTableEntry, cistRootPort=cistRootPort, trunkGroupNewCfgRemovePort=trunkGroupNewCfgRemovePort, mstNewCfgMaxHopCount=mstNewCfgMaxHopCount, vlanNewCfgBwmContract=vlanNewCfgBwmContract, portTeamInfoTableEntry=portTeamInfoTableEntry, fdbStatsLookupFails=fdbStatsLookupFails, stpInfoTopChanges=stpInfoTopChanges, lacpCurPortActorPortPriority=lacpCurPortActorPortPriority, stpInfoMaxAge=stpInfoMaxAge, portTeamInfoTrunksState=portTeamInfoTrunksState, stgNewCfgAgingTime=stgNewCfgAgingTime, mstCurCfgState=mstCurCfgState, cistInfoPortDesignatedBridge=cistInfoPortDesignatedBridge, lacpInfoPortTable=lacpInfoPortTable, pmNewCfgPmirrDirection=pmNewCfgPmirrDirection, BridgeId=BridgeId, mstNewCfgStpMode=mstNewCfgStpMode, stgStatsPortIndex=stgStatsPortIndex, vlanNewCfgState=vlanNewCfgState, pmCurCfgPortMirrState=pmCurCfgPortMirrState, stgNewCfgPortTableEntry=stgNewCfgPortTableEntry, stpInfoIndex=stpInfoIndex, pmNewCfgRemoveVlan=pmNewCfgRemoveVlan, portTeamInfoPortsState=portTeamInfoPortsState, stgNewCfgPortLink=stgNewCfgPortLink, stgNewCfgPortPriority=stgNewCfgPortPriority, portTeamNewCfgAddPort=portTeamNewCfgAddPort, layer2Info=layer2Info, fdbStatsHiwat=fdbStatsHiwat, stpInfoPortStpIndex=stpInfoPortStpIndex, cistInfoPortPriority=cistInfoPortPriority, stpInfoPortIndex=stpInfoPortIndex, cistInfoPortRole=cistInfoPortRole, mstCistCurCfgPortIndex=mstCistCurCfgPortIndex, mstCistCurCfgPortStpState=mstCistCurCfgPortStpState, trunkGroupTableMaxSize=trunkGroupTableMaxSize, mstCurCfgRegionName=mstCurCfgRegionName, portTeamInfoState=portTeamInfoState, fdbInfo=fdbInfo, mstCistNewCfgBridgeForwardDelay=mstCistNewCfgBridgeForwardDelay, mstCistNewCfgPortIndex=mstCistNewCfgPortIndex, stpInfoRootCost=stpInfoRootCost, fdbStatsFinds=fdbStatsFinds, lacpInfoPortIndex=lacpInfoPortIndex, cistInfoPortState=cistInfoPortState, vlanNewCfgDelete=vlanNewCfgDelete, stgCurCfgPortPathCost=stgCurCfgPortPathCost, fdbStatsLookups=fdbStatsLookups, vlanMaxVlanID=vlanMaxVlanID, trunkGroupNewCfgAddPort=trunkGroupNewCfgAddPort, stgNewCfgTable=stgNewCfgTable, layer2=layer2, mstCistDefaultCfg=mstCistDefaultCfg, mstCistCfg=mstCistCfg, stgStatsPortTableEntry=stgStatsPortTableEntry, stgNewCfgPriority=stgNewCfgPriority, mstCistNewCfgPortEdge=mstCistNewCfgPortEdge, stgNewCfgBrgForwardDelay=stgNewCfgBrgForwardDelay, fdbSrcTrunk=fdbSrcTrunk, fdbVlan=fdbVlan, vlanInfoId=vlanInfoId, pmNewCfgAddVlan=pmNewCfgAddVlan, portTeamNewCfgPorts=portTeamNewCfgPorts, lacpNewPortCfgTableId=lacpNewPortCfgTableId, mstCistCurCfgPortTableEntry=mstCistCurCfgPortTableEntry, portTeamInfoTable=portTeamInfoTable, stpInfoPortDesignatedCost=stpInfoPortDesignatedCost, portTeamNewCfgTableEntry=portTeamNewCfgTableEntry, vlanCurCfgVlanName=vlanCurCfgVlanName, stpInfoPortDesignatedPort=stpInfoPortDesignatedPort, cistRegionalRoot=cistRegionalRoot, layer2Stats=layer2Stats, stgNewCfgStgIndex=stgNewCfgStgIndex, cistInfoPortPathCost=cistInfoPortPathCost, fdbStats=fdbStats, stgCurCfgStgIndex=stgCurCfgStgIndex, stpInfoRootPort=stpInfoRootPort, mstCistNewCfgBridgeMaxAge=mstCistNewCfgBridgeMaxAge, vlanInfoTableEntry=vlanInfoTableEntry, fdbState=fdbState, pmCurCfgPortMonitorEntry=pmCurCfgPortMonitorEntry, trunkGroupCurCfgState=trunkGroupCurCfgState, portTeamCurCfgIndex=portTeamCurCfgIndex, portTeamNewCfgState=portTeamNewCfgState, vlanInfoName=vlanInfoName, mstNewCfgRegionName=mstNewCfgRegionName, trunkGroupCurCfgTable=trunkGroupCurCfgTable, pmCurCfgPmirrPortVlansBmap=pmCurCfgPmirrPortVlansBmap, mstCistNewCfgPortTable=mstCistNewCfgPortTable, trunkGroupNewCfgState=trunkGroupNewCfgState, vlanInfoTable=vlanInfoTable, lacpCurPortState=lacpCurPortState, lacpNewSystemPriority=lacpNewSystemPriority, cistGeneralInfo=cistGeneralInfo, vlanInfoJumbo=vlanInfoJumbo, pmCurCfgPmirrMirrPortIndex=pmCurCfgPmirrMirrPortIndex, pmNewCfgPortMonitorTable=pmNewCfgPortMonitorTable, stgCurCfgAgingTime=stgCurCfgAgingTime, fdbStatsCreates=fdbStatsCreates, stgNewCfgState=stgNewCfgState, portTeamNewCfgIndex=portTeamNewCfgIndex, mstCurCfgRegionVersion=mstCurCfgRegionVersion, lacpInfo=lacpInfo, vlanCurCfgStg=vlanCurCfgStg, stgNewCfgDefaultCfg=stgNewCfgDefaultCfg, portTeamNewCfgRemoveTrunk=portTeamNewCfgRemoveTrunk, vlan=vlan, mstCistCurCfgBridgePriority=mstCistCurCfgBridgePriority, fdbStatsFindFails=fdbStatsFindFails, vlanNewCfgAddPort=vlanNewCfgAddPort, portTeamCurCfgTrunks=portTeamCurCfgTrunks, stgCurCfgPortEdge=stgCurCfgPortEdge, vlanCurCfgJumbo=vlanCurCfgJumbo, portTeamNewCfgTable=portTeamNewCfgTable, stgCfg=stgCfg, portTeamNewCfgRemovePort=portTeamNewCfgRemovePort, cistInfoPortTableEntry=cistInfoPortTableEntry, stgNewCfgVlanBmap=stgNewCfgVlanBmap, cistInfoPortIndex=cistInfoPortIndex, cistInfoPortTable=cistInfoPortTable, PYSNMP_MODULE_ID=layer2, trunkGroupCurCfgTableEntry=trunkGroupCurCfgTableEntry, lacpNewPortActorAdminKey=lacpNewPortActorAdminKey, stgCurCfgVlanBmap=stgCurCfgVlanBmap, lacpNewPortCfgTable=lacpNewPortCfgTable, vlanMaxEnt=vlanMaxEnt, trunkGroupCurCfgBwmContract=trunkGroupCurCfgBwmContract, stgCurCfgPortState=stgCurCfgPortState, stgNewCfgBrgHelloTime=stgNewCfgBrgHelloTime, layer2Configs=layer2Configs, stgCurCfgPriority=stgCurCfgPriority, mstCistCurCfgPortTable=mstCistCurCfgPortTable, portTeamCurCfgTableEntry=portTeamCurCfgTableEntry, stgCurCfgBrgHelloTime=stgCurCfgBrgHelloTime, stpInfoPortRole=stpInfoPortRole, vlanNewCfgTable=vlanNewCfgTable, stgNewCfgPortIndex=stgNewCfgPortIndex, cistRegionalPathCost=cistRegionalPathCost, portTeamInfoTrunks=portTeamInfoTrunks, fdbStatsDeletes=fdbStatsDeletes, mstGeneralCfg=mstGeneralCfg, mstNewCfgRegionVersion=mstNewCfgRegionVersion, trunkGroupNewCfgPorts=trunkGroupNewCfgPorts, stgNewCfgPortPathCost=stgNewCfgPortPathCost, lacpCurPortCfgTableId=lacpCurPortCfgTableId, vlanNewCfgLearn=vlanNewCfgLearn, portTeamInfoPorts=portTeamInfoPorts, mstCistBridgeCfg=mstCistBridgeCfg, vlanCurCfgTableEntry=vlanCurCfgTableEntry, lacpCurPortCfgTableEntry=lacpCurPortCfgTableEntry, mirroring=mirroring, stgCurCfgPortPriority=stgCurCfgPortPriority, mstCistCurCfgBridgeMaxAge=mstCistCurCfgBridgeMaxAge, vlanNewCfgVlanId=vlanNewCfgVlanId, stpInfoPortEdge=stpInfoPortEdge, vlanNewCfgStg=vlanNewCfgStg, lacpInfoPortNtt=lacpInfoPortNtt, lacpNewPortCfgTableEntry=lacpNewPortCfgTableEntry, fdbLearnedPort=fdbLearnedPort, vlanInfoBwmContract=vlanInfoBwmContract, fdbStatsOverflows=fdbStatsOverflows, cistRootPathCost=cistRootPathCost, pmCurCfgPortMonitorTable=pmCurCfgPortMonitorTable, pmNewCfgPmirrMirrPortIndex=pmNewCfgPmirrMirrPortIndex, pmNewCfgPmirrPortVlansBmap=pmNewCfgPmirrPortVlansBmap, stpInfoTimeSinceTopChange=stpInfoTimeSinceTopChange, portTeamNewCfgDelete=portTeamNewCfgDelete, portTeamNewCfgAddTrunk=portTeamNewCfgAddTrunk, lacpNewSystemTimeoutTime=lacpNewSystemTimeoutTime, vlanNewCfgTableEntry=vlanNewCfgTableEntry, stpInfoHoldTime=stpInfoHoldTime, vlanCurCfgPorts=vlanCurCfgPorts, stgCurCfgIndex=stgCurCfgIndex, mstCistNewCfgPortPathCost=mstCistNewCfgPortPathCost, mirrPortMirr=mirrPortMirr, lacpCurSystemTimeoutTime=lacpCurSystemTimeoutTime, stgNewCfgPortEdge=stgNewCfgPortEdge, stpInfo=stpInfo, cistInfoPortDesignatedPort=cistInfoPortDesignatedPort, stpInfoPortDesignatedRoot=stpInfoPortDesignatedRoot, vlanNewCfgRemovePort=vlanNewCfgRemovePort, pmNewCfgPmirrDelete=pmNewCfgPmirrDelete, portTeamInfoIndex=portTeamInfoIndex, lacpInfoPortTableEntry=lacpInfoPortTableEntry, stgCurCfgPortLink=stgCurCfgPortLink, stgCurCfgTable=stgCurCfgTable, portTeamCurCfgPorts=portTeamCurCfgPorts, portTeamCurCfgTable=portTeamCurCfgTable, fdbClear=fdbClear, fdbRefSps=fdbRefSps, stpInfoTable=stpInfoTable, lacpNewPortActorPortPriority=lacpNewPortActorPortPriority, stpInfoPortPathCost=stpInfoPortPathCost)
mibBuilder.exportSymbols("ALTEON-CS-PHYSICAL-MIB", mstCistNewCfgPortPriority=mstCistNewCfgPortPriority, vlanCurCfgVlanId=vlanCurCfgVlanId, stgCurCfgPortTableEntry=stgCurCfgPortTableEntry, trunkGroupNewCfgTable=trunkGroupNewCfgTable, mstCistCurCfgBridgeForwardDelay=mstCistCurCfgBridgeForwardDelay, trunkGroupNewCfgTableEntry=trunkGroupNewCfgTableEntry, stgNewCfgAddVlan=stgNewCfgAddVlan, vlanCurCfgBwmContract=vlanCurCfgBwmContract, stgNewCfgTableEntry=stgNewCfgTableEntry, lacpInfoPortReadyN=lacpInfoPortReadyN, mstCistCurCfgPortHelloTime=mstCistCurCfgPortHelloTime, trunkGroupNewCfgIndex=trunkGroupNewCfgIndex, portTeamNewCfgTrunks=portTeamNewCfgTrunks, stgStatsPortRcvTcnBpdus=stgStatsPortRcvTcnBpdus, vlanInfoPorts=vlanInfoPorts, fdbEntry=fdbEntry, stpInfoForwardDelay=stpInfoForwardDelay, stgStatsStpIndex=stgStatsStpIndex, mstNewCfgState=mstNewCfgState, stgNewCfgIndex=stgNewCfgIndex, fdbTable=fdbTable, vlanCurCfgState=vlanCurCfgState, stgCurCfgTableEntry=stgCurCfgTableEntry, mstCistCurCfgPortEdge=mstCistCurCfgPortEdge, fdbSrcPort=fdbSrcPort, lacpCurPortCfgTable=lacpCurPortCfgTable, stgCurCfgPortIndex=stgCurCfgPortIndex, vlanNewCfgJumbo=vlanNewCfgJumbo, mstCurCfgStpMode=mstCurCfgStpMode, vlanInfoLearn=vlanInfoLearn, mstCfg=mstCfg, fdbStatsFindOrCreates=fdbStatsFindOrCreates, lacpNewPortState=lacpNewPortState, trunkGroupCurCfgIndex=trunkGroupCurCfgIndex, stpInfoPortTable=stpInfoPortTable, lacpInfoPortMoved=lacpInfoPortMoved, stgNewCfgPortTable=stgNewCfgPortTable)
