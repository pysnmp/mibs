#
# PySNMP MIB module BTI8xx-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/bti/BTI8xx-SYSTEM-MIB
# Produced by pysmi-1.1.12 at Tue May 28 13:06:15 2024
# On host fv-az1789-536 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
mainSystem, = mibBuilder.importSymbols("BTI8xx-TC-MIB", "mainSystem")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
PerfCurrentCount, PerfTotalCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount", "PerfTotalCount", "PerfIntervalCount")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, IpAddress, MibIdentifier, Integer32, Gauge32, NotificationType, ObjectIdentity, Bits, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "MibIdentifier", "Integer32", "Gauge32", "NotificationType", "ObjectIdentity", "Bits", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "Counter32")
MacAddress, RowStatus, DateAndTime, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "DateAndTime", "TextualConvention", "TruthValue", "DisplayString")
systemConfig = ModuleIdentity((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1))
systemConfig.setRevisions(('2015-11-30 12:00', '2015-11-20 12:00', '2015-09-07 13:00', '2014-10-29 12:00', '2014-08-11 12:00', '2014-07-15 12:00', '2014-06-18 12:00', '2013-12-27 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: systemConfig.setRevisionsDescriptions(('\n            *1. Change the Syntax(for silvercreek tool).\n              1.1. Change the syntax range. (1..32) -> (0..32)\n                ftpUserName\n                ftpUserPasswd\n        ', "\n            *1. Change the MAX-ACCESS(for silvercreek tool).\n              'not-accessible' -> 'read-only'\n                -imageInfoIndex\n\n            *2. Change the Syntax(for silver creek tool).\n              2.1. DisplayString -> OCTET STRING\n                systemName\n                systemHWVersion\n                systemSWVersion\n                systemSWDateAndTime\n                systemProductName\n                ftpUserName\n                ftpUserPasswd\n                cfgFileName\n                upgradeImageSWFileName\n                upgradeImageSWDateAndTime\n                imageInfoVersion\n                imageInfoCreated\n                timezone\n                systemTime\n\n              2.2. Delete the syntax value range\n                lastSaveTime\n\n            *3. MIB code sorting.\n            ", "\n        *1. Change the description attribute of 'miscellaneous'\n          timezone\n            - MET/IST/ACT/CNT : +30 minutes\n            - EAT : description\n          tempLowThreshold\n        ", '\n        *1. Change the sytax size\n          DisplayString(SIZE(0..256)) -> DisplayString(SIZE(0..255))\n        ', '\n        *1. This value option is changed.\n            upgradeImageSW\n              - upgradeByFtp(1) -> updateImageFile(1)\n              - upgradeByTftp(2)-> upgradeImage(2)\n        *2. Unused value\n            upgradeImageSWLocation\n        ', '\n        *1. Delete the bridgeConfig\n        ', '\n        *1. This value range is changed the 60 to 35791.\n          autoLogoutTime\n        *2. Update the timezone description\n        ', 'Initial version of MIB.',))
if mibBuilder.loadTexts: systemConfig.setLastUpdated('201511301200Z')
if mibBuilder.loadTexts: systemConfig.setOrganization('Actus Networks Ltd.')
if mibBuilder.loadTexts: systemConfig.setContactInfo('\n    Support:  +82-2-26535666\n    R&D:      +82-2-26535666\n    Fax:      +82-2-26534662\n    Email:    ymkim@actusnetworks.com\n    ')
if mibBuilder.loadTexts: systemConfig.setDescription('This is a top-level MIB for Actus whose purpose is to lay out\n    the top-level objects in the OID hierarchy from which\n    BTI8xx MIB OIDs descend.')
systemManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1))
accessInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 2))
consoleInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 3))
systemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 1))
configAndImageMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2))
miscellaneous = MibIdentifier((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3))
mgmtVlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 5))
systemName = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemName.setStatus('current')
if mibBuilder.loadTexts: systemName.setDescription('The System Name (Network Element Name)')
autoLogoutTime = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35791))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoLogoutTime.setStatus('current')
if mibBuilder.loadTexts: autoLogoutTime.setDescription('The auto-logout timer in minute of console/telnet/web based managment.\n    0 means auto logout is disabled. 0~35791 are applicable.')
systemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUpTime.setStatus('current')
if mibBuilder.loadTexts: systemUpTime.setDescription('On site time- time after the last power up\n     Second resolution (also year)\n     Format: YY-DDD-HH-MM-SS (Year, Day, HR, Minute,Second)')
systemHWVersion = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHWVersion.setStatus('current')
if mibBuilder.loadTexts: systemHWVersion.setDescription('H/W Version of Main System')
systemSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSWVersion.setStatus('current')
if mibBuilder.loadTexts: systemSWVersion.setDescription('S/W Version of Main System')
systemSWDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSWDateAndTime.setStatus('current')
if mibBuilder.loadTexts: systemSWDateAndTime.setDescription('S/W Date and Time of Main System(ex. Apr 8 2010 14:00:01)')
systemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTemperature.setStatus('current')
if mibBuilder.loadTexts: systemTemperature.setDescription('System Temperature of Main System(Celsius)')
systemProductName = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemProductName.setStatus('current')
if mibBuilder.loadTexts: systemProductName.setDescription('The System Product Name')
serverConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 1))
configMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 2))
imageMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 3))
serverIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverIpAddr.setStatus('current')
if mibBuilder.loadTexts: serverIpAddr.setDescription('Ftp or Tftp Server Ip Address')
ftpUserName = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpUserName.setStatus('current')
if mibBuilder.loadTexts: ftpUserName.setDescription('FtpUserName')
ftpUserPasswd = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpUserPasswd.setStatus('current')
if mibBuilder.loadTexts: ftpUserPasswd.setDescription('FtpUserPasswd')
serverInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oob", 0), ("inBand", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverInterfaceType.setStatus('current')
if mibBuilder.loadTexts: serverInterfaceType.setDescription('Server type\n    oob    : Management Interface\n    inBand : In-band Interface')
cfgFileName = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgFileName.setStatus('current')
if mibBuilder.loadTexts: cfgFileName.setDescription('This Object is ConfigFile BackUp Name.')
cfgFileControl = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("backUpByFtp", 1), ("restoreByFtp", 2), ("backupByTftp", 3), ("restoreByTftp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgFileControl.setStatus('current')
if mibBuilder.loadTexts: cfgFileControl.setDescription('This Object is Control Config File\n    BackUp: Configfile backup and upload to server.\n    Restore : Configfile download and restore.')
cfgFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("backupSuccess", 1), ("restoreSuccess", 2), ("inProgress", 3), ("fileNotFound", 4), ("connnectionFail", 5), ("logInFail", 6), ("diskFull", 7), ("otherError", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgFileStatus.setStatus('current')
if mibBuilder.loadTexts: cfgFileStatus.setDescription('This object represents the state of configfile backup and download.')
upgradeImageSWFileName = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeImageSWFileName.setStatus('current')
if mibBuilder.loadTexts: upgradeImageSWFileName.setDescription("Upgrade Image FileName wiht the remote path.\n    the remote path is different from window-based ftp-server and linux-based ftp-server.\n    Window-based ftp-server : folder classification is '\\'. (\\image\\bti800_main.img)\n    Linux-based ftp-server : folder classification is '/'. (/image/bti800_main.img)\n    ")
upgradeImageSW = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("updateImageFile", 1), ("upgradeImage", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeImageSW.setStatus('current')
if mibBuilder.loadTexts: upgradeImageSW.setDescription('This object provides the operator the ability to upgrade the image to a file.\n    The initial value would be none(0).\n    Before starting update image, upgradeImageSWFilenName and ftpConfig or tftpConfig value should be set.\n    \n    updateImageFile(1) : Download the image file(by FTP server).\n    upgradeImage(2)    : Upgrade image file.\n\n    This operation need long period, so Please checked the upgradeImageSWStatus.\n    Reboot should be executed to finish upgrade procedure when load upgrade will be passed.\n    ')
upgradeImageSWStatus = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("inProgress", 2), ("diskIsFull", 3), ("fileSizeError", 4), ("fileOpenError", 5), ("fileCRCError", 6), ("flashEraseError", 7), ("flashWriteError", 8), ("unknownError", 9), ("upgradeDeliveryInProgress", 101), ("upgradeDeliveryFailed", 102), ("upgradeDeliverySuccess", 103), ("upgradeCheckInProgress", 104), ("upgradeCheckFailed", 105), ("upgradeCheckSuccess", 106), ("upgradeLoadInProgress", 107), ("upgradeLoadFailed", 108), ("upgradeLoadSuccess1stDone", 109), ("upgradeInvokeInProgress", 110), ("upgradeInvokeFailed", 111), ("upgradeInvokeSuccess2ndDone", 112), ("upgradeCommitInProgress", 113), ("upgradeCommitFailed", 114), ("upgradeImagelatestVersion", 115)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upgradeImageSWStatus.setStatus('current')
if mibBuilder.loadTexts: upgradeImageSWStatus.setDescription(' The current status of the upgrade operation.\n    - fileSizeError : image file is not matched image bank\n\n    The initial value should be none(0) and also it should be none\n    when get the imageFpga file success from the server.\n\n    The valus inProgress(2) is returned while upgradeImage.\n    The valus diskIsFull(3) is returned when file System is full and imageSW file is not written.\n    The valus fileSizeError(4) is returned when expected file size is not match with downloaded file.\n    The valus fileOpenError(5) is returned when there is a problem on downloaded file.\n    The valus fileCRCError(6) is returned whne there is a checksum error on downloaded file.\n    The valus flashEraseError(7) is returned when there is a problem on erasing flash.\n    The valus flashWriteError(8) is returned when there is a problem on writing flash.\n    The valus unknownError(9) is returned when there is a problem with others.\n\n    For imageSW upgrade/backup, it follows below procedures.\n    1) The value UpgradeLoadSuccess1stDone(109) is returned when\n    the upgradeImage command executed successfully.\n    2) The value UpgradeInvokeSuccess2ndDone(112) is returned when\n    reboot after upgradeImage success.\n    3) The value success(1) is returned when\n    the backupImage command executed successfully.\n\n    For others, it is for retrieving the status of upgrade processing.\n    upgradeDeliveryInProgress(101)\n    upgradeDeliveryFailed    (102)\n    upgradeDeliverySuccess   (103)\n    Delivery stage is that imageSW file is downloaded.\n    upgradeCheckInProgress   (104)\n    upgradeCheckFailed       (105)\n    upgradeCheckSuccess      (106)\n    Check stage is that the downloaded file is checked for healthy.\n    upgradeLoadInProgress    (107)\n    upgradeLoadFailed        (108)\n    Load stage is that the downloaded imageSW is written on the primary bank.\n    upgradeInvokeInProgress  (110)\n    upgradeInvokeFailed      (111)\n    Invoke stage can be issued only when upgrade state is Load passed. The product is restarted from primary bank\n    with new load. If the primary bank load is corrupted, the product should start running from secondary bank.\n    upgradeCommitInProgress  (113)\n    upgradeCommitFailed      (114)\n    Commit stage is that it can be executed only after Invoke Upgrade stage when it is successfully completed\n    the image is copied from the primary to the secondary bank and only when the system started from primary bank.\n    The upgradeXXXX return codes are only for imageSW.\n    ')
upgradeImageSWDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upgradeImageSWDateAndTime.setStatus('current')
if mibBuilder.loadTexts: upgradeImageSWDateAndTime.setDescription('The date and time when upgradeImageSWStatus happen. ')
imageInfoTable = MibTable((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 3, 10), )
if mibBuilder.loadTexts: imageInfoTable.setStatus('current')
if mibBuilder.loadTexts: imageInfoTable.setDescription('ImageInformation Table. It includes the information of the Primary bank and the Secondary bank ')
imageInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 3, 10, 1), ).setIndexNames((0, "BTI8xx-SYSTEM-MIB", "imageInfoIndex"))
if mibBuilder.loadTexts: imageInfoEntry.setStatus('current')
if mibBuilder.loadTexts: imageInfoEntry.setDescription('ImageInfoTable Entry.')
imageInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageInfoIndex.setStatus('current')
if mibBuilder.loadTexts: imageInfoIndex.setDescription('Index of the Image.')
imageInfoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 3, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageInfoVersion.setStatus('current')
if mibBuilder.loadTexts: imageInfoVersion.setDescription('Version of the Image.')
imageInfoCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 3, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageInfoCreated.setStatus('current')
if mibBuilder.loadTexts: imageInfoCreated.setDescription('Created of the Image.')
imageInfoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageInfoSize.setStatus('current')
if mibBuilder.loadTexts: imageInfoSize.setDescription('Size of the Image.(bytes)')
imageInfoCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 2, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imageInfoCurrent.setStatus('current')
if mibBuilder.loadTexts: imageInfoCurrent.setDescription('Show Current Image')
reboot = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reboot.setStatus('current')
if mibBuilder.loadTexts: reboot.setDescription('Writing this object as other than none will make the software reboot.\n    reboot means slot1, slot2 and Main reboot simultaneously.\n    This process takes a few minutes.')
save = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("save", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: save.setStatus('current')
if mibBuilder.loadTexts: save.setDescription('Writing this object other than none will save the current running configuration to the non-volatile memory of main')
lastSaveTime = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastSaveTime.setStatus('current')
if mibBuilder.loadTexts: lastSaveTime.setDescription('This value is shows the last save time of base system')
timezone = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timezone.setStatus('current')
if mibBuilder.loadTexts: timezone.setDescription('The timezone configuration of the device. The examples are kst, KST, cnt etc.\n      act  - ACT. Australia Central Time(GMT+9:30)\n      aet  - AET. Australia Eastern Time(GMT+10:00)\n      agt  - AGT. Argentina Standard Time(GMT-3:00)\n      art  - ART. (Arabic) Egypt Standard Time(GMT+2:00)\n      ast  - AST. Alaska Standard Time(GMT-9:00)\n      bet  - BET. Brazil Eastern Time(GMT-3:00)\n      bst  - BST. Bangladesh Standard Time(GMT+6:00)\n      cat  - CAT. Central African Time(GMT-1:00)\n      cnt  - CNT. Canada Newfoundland Time(GMT-3:30)\n      cst  - CST. Central Standard Time(GMT-6:00)\n      ctt  - CTT. China Taiwan Time(GMT+8:00)\n      eat  - EAT. Eastern African Time(GMT+3:00)\n      ect  - ECT. European Central Time(GMT+1:00)\n      edt  - EDT. Eastern Daylight Time(GMT-4:00)\n      eet  - EET. Eastern European Tim(GMT+2:00)\n      est  - EST. Eastern Standard Time(GMT-5:00)\n      gmt  - GMT. Greenwich Mean Time\n      hst  - HST. Hawaii Standard Time(GMT-10:00)\n      iet  - IET. Indiana Eastern Standard Time(GMT-5:00)\n      ist  - IST. India Standard Time(GMT+5:30)\n      jst  - JST. Japan Standard Time(GMT+9:00)\n      kst  - KST. Korea Standard Time(GMT+9:00)\n      met  - MET. Middle East Time(GMT+3:30)\n      mit  - MIT. Midway Islands Time(GMT-11:00)\n      mst  - MST. Mountain Standard Time(GMT-7:00)\n      net  - NET. Near East Time(GMT+4:00)\n      nst  - NST. New Zealand Standard Time(GMT+12:00)\n      plt  - PLT. Pakistan Lahore Time(GMT+5:00)\n      pnt  - PNT. Phoenix Standard Time(GMT-7:00)\n      prt  - PRT. Puerto Rico and US Virgin Islands Time(GMT-4:00)\n      pst  - PST. Pacific Standard Time(GMT-8:00)\n      sst  - SST. Solomon Standard Time(GMT+11:00)\n      utc  - UTC. Universal Coordinated Time\n      vst  - VST. Vietnam Standard Time(GMT+7:00)\n    ')
systemTime = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTime.setStatus('current')
if mibBuilder.loadTexts: systemTime.setDescription('system Current Time\n    - Time Format : Nov 15 20:53:40 2009')
lastCommand = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastCommand.setStatus('current')
if mibBuilder.loadTexts: lastCommand.setDescription('Save the last command line and time.')
fanCtrlStartTemp = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanCtrlStartTemp.setStatus('current')
if mibBuilder.loadTexts: fanCtrlStartTemp.setDescription('Fan Start Temperature : between 0 and 100')
fanCtrlStopTemp = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanCtrlStopTemp.setStatus('current')
if mibBuilder.loadTexts: fanCtrlStopTemp.setDescription('Fan Stop Temperature : between -30 and 30')
fanRpmConfig = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanRpmConfig.setStatus('current')
if mibBuilder.loadTexts: fanRpmConfig.setDescription('Fan Rpm : between 5000 and 20000')
fanLowTolerance = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanLowTolerance.setStatus('current')
if mibBuilder.loadTexts: fanLowTolerance.setDescription('Fan Low Under Flow Tolerance : between 10% to 80%')
fanLowToleranceValue = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanLowToleranceValue.setStatus('current')
if mibBuilder.loadTexts: fanLowToleranceValue.setDescription('Fan Low Under Flow Tolerance RPM')
fanHighTolerance = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanHighTolerance.setStatus('current')
if mibBuilder.loadTexts: fanHighTolerance.setDescription('Fan High Over Flow Tolerance : between 10% to 80%')
fanHighToleranceValue = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanHighToleranceValue.setStatus('current')
if mibBuilder.loadTexts: fanHighToleranceValue.setDescription('Fan HighOver Flow Tolerance RPM')
tempHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHighThreshold.setStatus('current')
if mibBuilder.loadTexts: tempHighThreshold.setDescription('High temperature threshold(0 to 100)')
tempLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, -1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowThreshold.setStatus('current')
if mibBuilder.loadTexts: tempLowThreshold.setDescription('Low temperature threshold(-1 to -30)')
mgmtOuterVlan = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtOuterVlan.setStatus('current')
if mibBuilder.loadTexts: mgmtOuterVlan.setDescription(' ')
mgmtOuterVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtOuterVlanPriority.setStatus('current')
if mibBuilder.loadTexts: mgmtOuterVlanPriority.setDescription(' ')
mgmtInnerVlan = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtInnerVlan.setStatus('current')
if mibBuilder.loadTexts: mgmtInnerVlan.setDescription('0 is untagged')
mgmtInnerVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtInnerVlanPriority.setStatus('current')
if mibBuilder.loadTexts: mgmtInnerVlanPriority.setDescription(' ')
pInbandIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pInbandIPAddress.setStatus('current')
if mibBuilder.loadTexts: pInbandIPAddress.setDescription('Ip Adddress of inband Primary management ETH port')
pInbandNetMask = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pInbandNetMask.setStatus('current')
if mibBuilder.loadTexts: pInbandNetMask.setDescription('NetMask of inband Primary management ETH port')
pInbandNetworkAddress = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pInbandNetworkAddress.setStatus('current')
if mibBuilder.loadTexts: pInbandNetworkAddress.setDescription('Network address of Inband Primary management ETH port')
pInbandMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 2, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pInbandMACAddress.setStatus('current')
if mibBuilder.loadTexts: pInbandMACAddress.setDescription('MAC address of inband Primary management ETH port')
pOOBIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 2, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pOOBIPAddress.setStatus('current')
if mibBuilder.loadTexts: pOOBIPAddress.setDescription('IP address of OOB(Out of Band) ETH port')
pOOBNetMask = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 2, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pOOBNetMask.setStatus('current')
if mibBuilder.loadTexts: pOOBNetMask.setDescription('NetMask of OOB(Out of band) ETH port')
pOOBNetworkAddress = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 2, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pOOBNetworkAddress.setStatus('current')
if mibBuilder.loadTexts: pOOBNetworkAddress.setDescription('Network address of OOB(Out of band) ETH port')
pOOBMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 2, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pOOBMACAddress.setStatus('current')
if mibBuilder.loadTexts: pOOBMACAddress.setDescription('MAC address of OOB(Out of band) port')
pDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 2, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: pDefaultGateway.setDescription('Default Gateway - 0.0.0.0 : disable')
consoleBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bps9600", 1), ("bps19200", 2), ("bps38400", 3), ("bps57600", 4), ("bps115200", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleBaudRate.setStatus('current')
if mibBuilder.loadTexts: consoleBaudRate.setDescription('The baud rate of the console port.')
consoleCharSize = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8))).clone(namedValues=NamedValues(("sevenBits", 7), ("eightBits", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleCharSize.setStatus('current')
if mibBuilder.loadTexts: consoleCharSize.setDescription('The character size of the console port.')
consoleParityBits = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noParity", 1), ("evenParity", 2), ("oddParity", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleParityBits.setStatus('current')
if mibBuilder.loadTexts: consoleParityBits.setDescription('The parity bits of the console port.')
consoleStopBits = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleStopBits.setStatus('current')
if mibBuilder.loadTexts: consoleStopBits.setDescription('The stop bits of the console port.')
consoleFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 30005, 1, 7, 100, 1, 2, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hardware", 2), ("xonXoff", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleFlowControl.setStatus('current')
if mibBuilder.loadTexts: consoleFlowControl.setDescription('The flow control of the console port.')
mibBuilder.exportSymbols("BTI8xx-SYSTEM-MIB", imageInfoIndex=imageInfoIndex, fanLowToleranceValue=fanLowToleranceValue, mgmtVlanConfig=mgmtVlanConfig, mgmtInnerVlan=mgmtInnerVlan, pOOBNetMask=pOOBNetMask, pOOBNetworkAddress=pOOBNetworkAddress, accessInfo=accessInfo, systemHWVersion=systemHWVersion, pInbandMACAddress=pInbandMACAddress, cfgFileStatus=cfgFileStatus, PYSNMP_MODULE_ID=systemConfig, serverInterfaceType=serverInterfaceType, fanCtrlStartTemp=fanCtrlStartTemp, configMgmt=configMgmt, consoleInformation=consoleInformation, fanHighTolerance=fanHighTolerance, fanCtrlStopTemp=fanCtrlStopTemp, imageInfoCurrent=imageInfoCurrent, systemUpTime=systemUpTime, imageMgmt=imageMgmt, systemName=systemName, imageInfoSize=imageInfoSize, reboot=reboot, timezone=timezone, consoleStopBits=consoleStopBits, tempLowThreshold=tempLowThreshold, consoleCharSize=consoleCharSize, serverConfig=serverConfig, pOOBMACAddress=pOOBMACAddress, consoleBaudRate=consoleBaudRate, pOOBIPAddress=pOOBIPAddress, consoleParityBits=consoleParityBits, cfgFileControl=cfgFileControl, upgradeImageSWFileName=upgradeImageSWFileName, lastSaveTime=lastSaveTime, systemConfig=systemConfig, fanRpmConfig=fanRpmConfig, imageInfoTable=imageInfoTable, lastCommand=lastCommand, consoleFlowControl=consoleFlowControl, systemTemperature=systemTemperature, imageInfoVersion=imageInfoVersion, upgradeImageSWDateAndTime=upgradeImageSWDateAndTime, systemProductName=systemProductName, imageInfoCreated=imageInfoCreated, imageInfoEntry=imageInfoEntry, pInbandNetMask=pInbandNetMask, systemManagement=systemManagement, systemSWDateAndTime=systemSWDateAndTime, tempHighThreshold=tempHighThreshold, mgmtOuterVlan=mgmtOuterVlan, mgmtInnerVlanPriority=mgmtInnerVlanPriority, pDefaultGateway=pDefaultGateway, cfgFileName=cfgFileName, ftpUserName=ftpUserName, upgradeImageSWStatus=upgradeImageSWStatus, systemTime=systemTime, fanLowTolerance=fanLowTolerance, systemSWVersion=systemSWVersion, fanHighToleranceValue=fanHighToleranceValue, serverIpAddr=serverIpAddr, pInbandNetworkAddress=pInbandNetworkAddress, miscellaneous=miscellaneous, systemInfo=systemInfo, ftpUserPasswd=ftpUserPasswd, save=save, pInbandIPAddress=pInbandIPAddress, autoLogoutTime=autoLogoutTime, upgradeImageSW=upgradeImageSW, configAndImageMgmt=configAndImageMgmt, mgmtOuterVlanPriority=mgmtOuterVlanPriority)
