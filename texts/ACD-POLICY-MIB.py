#
# PySNMP MIB module ACD-POLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/accedian/ACD-POLICY-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 12:59:14 2024
# On host fv-az1108-994 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
acdMibs, = mibBuilder.importSymbols("ACCEDIAN-SMI", "acdMibs")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, iso, ModuleIdentity, Bits, IpAddress, Unsigned32, Counter32, Integer32, NotificationType, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "ModuleIdentity", "Bits", "IpAddress", "Unsigned32", "Counter32", "Integer32", "NotificationType", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64")
TruthValue, DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "DateAndTime")
acdPolicy = ModuleIdentity((1, 3, 6, 1, 4, 1, 22420, 2, 3))
acdPolicy.setRevisions(('2011-10-10 01:00', '2011-02-28 01:00', '2010-11-10 01:00', '2008-06-15 01:00', '2008-05-01 01:00', '2008-02-06 01:00', '2007-05-15 01:00', '2007-03-28 01:00', '2006-08-06 01:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acdPolicy.setRevisionsDescriptions(('Add acdPolicyTableLastChangeTid.', 'Add acdPolicyListTable and acdPolicyPortTable tables.', 'Add compliance section.', 'Add new service mapping values.', 'Add service mapping support.', 'Add support for history table.', 'Add bad packets counters.', 'Add Regulator functionalities.', 'Initial version of MIB module ACD-POLICY-MIB.',))
if mibBuilder.loadTexts: acdPolicy.setLastUpdated('201110100100Z')
if mibBuilder.loadTexts: acdPolicy.setOrganization('Accedian Networks, Inc.')
if mibBuilder.loadTexts: acdPolicy.setContactInfo('Accedian Technical Assistance Center\n             Accedian Networks, Inc.\n             4878 Levy, suite 202\n             Saint-Laurent, Quebec Canada H4R 2P1\n             E-mail: support@accedian.com')
if mibBuilder.loadTexts: acdPolicy.setDescription('The Policies database for this Accedian Networks device.')
acdPolicyNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 4))
acdPolicyMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5))
acdPolicyConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6))
acdPolicyList = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 1))
acdPolicyPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 2))
acdPolicyTableTid = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 3))
acdPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1), )
if mibBuilder.loadTexts: acdPolicyTable.setStatus('current')
if mibBuilder.loadTexts: acdPolicyTable.setDescription('Table of all Policies')
acdPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1), ).setIndexNames((0, "ACD-POLICY-MIB", "acdPolicyID"))
if mibBuilder.loadTexts: acdPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: acdPolicyEntry.setDescription('A Policy is a Filter applied to a specific MAC to block, permit or\n             only count a specific traffic.')
acdPolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdPolicyID.setStatus('current')
if mibBuilder.loadTexts: acdPolicyID.setDescription('Unique value for each policy entry. Its value ranges from 1 to\n        MAXINT (4 bytes). ')
acdPolicyListID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyListID.setStatus('current')
if mibBuilder.loadTexts: acdPolicyListID.setDescription('This object identifies in wich List the entry is.')
acdPolicyEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyEntryID.setStatus('current')
if mibBuilder.loadTexts: acdPolicyEntryID.setDescription('This object identifies the order in the List.')
acdPolicyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyEnable.setStatus('current')
if mibBuilder.loadTexts: acdPolicyEnable.setDescription('Enable or disable the Policy in the packet processing Engine.')
acdPolicyFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("layer2filter", 0), ("ipv4filter", 1), ("ipv6filter", 2), ("vlist", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyFilterType.setStatus('current')
if mibBuilder.loadTexts: acdPolicyFilterType.setDescription('This indicates which filter type is programmed in this entry. With \n         the filter index we can retrieve the specific filter in the filter\n         database.')
acdPolicyFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyFilterIndex.setStatus('current')
if mibBuilder.loadTexts: acdPolicyFilterIndex.setDescription('This indicates which filter index is programmed in this entry. With \n         the filter type we can retrieve the specific filter in the filter\n         database.')
acdPolicyDropEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyDropEnable.setStatus('deprecated')
if mibBuilder.loadTexts: acdPolicyDropEnable.setDescription('********* THIS OBJECT IS DEPRECATED **********\n\n         This object has been deprecated in favour of acdPolicyAction.\n\n         This indicates if this policy is programmed to drop or let the traffic \n         pass the processing engine.')
acdPolicyMonitorEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyMonitorEnable.setStatus('current')
if mibBuilder.loadTexts: acdPolicyMonitorEnable.setDescription('This indicates if this policy is programmed to send the traffic to\n         one of the monitoring port.')
acdPolicyMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("monitor1", 1), ("monitor2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyMonitorIndex.setStatus('current')
if mibBuilder.loadTexts: acdPolicyMonitorIndex.setDescription('This indicates which monitor port is programmed to send the traffic\n         matching this policy entry.')
acdPolicyRegulatorEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyRegulatorEnable.setStatus('current')
if mibBuilder.loadTexts: acdPolicyRegulatorEnable.setDescription('This indicates if this policy use or not a bandwidth regulator.')
acdPolicyRegulatorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyRegulatorIndex.setStatus('current')
if mibBuilder.loadTexts: acdPolicyRegulatorIndex.setDescription('This indicates which bandwidth regulator index is programmed in \n         this policy entry.')
acdPolicyRegulatorMarking = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyRegulatorMarking.setStatus('current')
if mibBuilder.loadTexts: acdPolicyRegulatorMarking.setDescription('This indicates the pre-marking color associated with this policy.')
acdPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("drop", 1), ("permit", 2), ("mgmtOAM", 3), ("mgmtOAMandDrop", 4), ("mgmtOAMandForward", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyAction.setStatus('current')
if mibBuilder.loadTexts: acdPolicyAction.setDescription('Action that will be applied to traffic that matches the filter.')
acdPolicyEvcMappingEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("push", 2), ("pop", 3), ("replace", 4), ("popAndReplace", 5), ("pushAndPreserve", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyEvcMappingEncaps.setStatus('current')
if mibBuilder.loadTexts: acdPolicyEvcMappingEncaps.setDescription('Action that will be applied to traffic that matches the filter.')
acdPolicyEvcMappingEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cvlan", 1), ("svlan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyEvcMappingEtype.setStatus('current')
if mibBuilder.loadTexts: acdPolicyEvcMappingEtype.setDescription('The ethertype of the VLAN to be added if the encapsulation is set to \n         push. Possible values are customer VLAN (cvlan) and service VLAN\n         (svlan).')
acdPolicyEvcMappingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyEvcMappingVlanId.setStatus('current')
if mibBuilder.loadTexts: acdPolicyEvcMappingVlanId.setDescription('The VLAN ID to be added if the encapsulation is set to push. Its\n         value ranges from 0 to 4095.')
acdPolicyCosMappingPcpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("preserve", 1), ("direct", 2), ("map", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingPcpAction.setStatus('current')
if mibBuilder.loadTexts: acdPolicyCosMappingPcpAction.setDescription('This section selects the PCP (Priority Code Points) action to perform.\n         Possible values are:\n\n             Preserve: Keep the PCP bits if the packet is already tagged\n             Direct: Add the default PCP value\n             Map: Use a CoS profile for PCP selection\n\n         For each PCP action there is one or two traffic mapping choices and\n         the default PCP bits to use if the packet does not match the first\n         and the second choices.')
acdPolicyCosMappingChoice1En = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice1En.setStatus('current')
if mibBuilder.loadTexts: acdPolicyCosMappingChoice1En.setDescription('This indicates if this choice is used.')
acdPolicyCosMappingChoice1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pcpVlan", 1), ("pcpVlanInVlan", 2), ("pre", 3), ("dscp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice1Type.setStatus('current')
if mibBuilder.loadTexts: acdPolicyCosMappingChoice1Type.setDescription('The traffic mapping is accomplished using the selected field in the\n         incoming traffic. This field can be p-bits in 802.1Q, 802.1Q-in-Q tags\n         IP precedence bits in IPv4 TOS byte or DSCP bits in IPv4 DSCP byte.')
acdPolicyCosMappingChoice1Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice1Profile.setStatus('current')
if mibBuilder.loadTexts: acdPolicyCosMappingChoice1Profile.setDescription('CoS profile used to map the input traffic to an L2 class of service.')
acdPolicyCosMappingChoice1RegSet = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice1RegSet.setStatus('current')
if mibBuilder.loadTexts: acdPolicyCosMappingChoice1RegSet.setDescription('Bandwidth regulator apply to regulate traffic.')
acdPolicyCosMappingChoice2En = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice2En.setStatus('current')
if mibBuilder.loadTexts: acdPolicyCosMappingChoice2En.setDescription('This indicates if this choice is used.')
acdPolicyCosMappingChoice2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pcpVlan", 1), ("pcpVlanInVlan", 2), ("pre", 3), ("dscp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice2Type.setStatus('current')
if mibBuilder.loadTexts: acdPolicyCosMappingChoice2Type.setDescription('The traffic mapping is accomplished using the selected field in the\n         incoming traffic. This field can be p-bits in 802.1Q, 802.1Q-in-Q tags\n         IP precedence bits in IPv4 TOS byte or DSCP bits in IPv4 DSCP byte.')
acdPolicyCosMappingChoice2Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice2Profile.setStatus('current')
if mibBuilder.loadTexts: acdPolicyCosMappingChoice2Profile.setDescription('CoS profile used to map the input traffic to an L2 class of service.')
acdPolicyCosMappingChoice2RegSet = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyCosMappingChoice2RegSet.setStatus('current')
if mibBuilder.loadTexts: acdPolicyCosMappingChoice2RegSet.setDescription('Bandwidth regulator apply to regulate traffic.')
acdPolicyDefaultMappingGreenCfi = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyDefaultMappingGreenCfi.setStatus('current')
if mibBuilder.loadTexts: acdPolicyDefaultMappingGreenCfi.setDescription('The default CFI value to be applied if the Encapsulation is Push.\n         This would only be applied if the traffic does not match the first\n         and second choices and if the result color is green.')
acdPolicyDefaultMappingGreenPrior = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyDefaultMappingGreenPrior.setStatus('current')
if mibBuilder.loadTexts: acdPolicyDefaultMappingGreenPrior.setDescription('The default PCP values to be applied if the Encapsulation is Push.\n         This would only be applied if the traffic does not match the first\n         and second choices and if the result color is green.')
acdPolicyDefaultMappingYellowCfi = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyDefaultMappingYellowCfi.setStatus('current')
if mibBuilder.loadTexts: acdPolicyDefaultMappingYellowCfi.setDescription('The default CFI value to be applied if the Encapsulation is Push.\n         This would only be applied if the traffic does not match the first\n         and second choices and if the result color is green.')
acdPolicyDefaultMappingYellowPrior = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyDefaultMappingYellowPrior.setStatus('current')
if mibBuilder.loadTexts: acdPolicyDefaultMappingYellowPrior.setDescription('The default PCP values to be applied if the Encapsulation is Push.\n         This would only be applied if the traffic does not match the first\n         and second choices and if the result color is green.')
acdPolicyOutgoingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 1, 1, 30), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPolicyOutgoingPort.setStatus('current')
if mibBuilder.loadTexts: acdPolicyOutgoingPort.setDescription('The OID value used to identify the outgoing port for this policy.\n             In order to identify a particular port, this object shall\n             identify the instance of the acdPortConfigIndex object, defined\n             in ACD-PORT-MIB, for the desired port. For example, if an entry\n             is set to port 4, this object would be set to acdPortConfigIndex.4\n             and by querying the acdPortConfigName.4 the user can retrieve the\n             name of this port.')
acdPolicyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2), )
if mibBuilder.loadTexts: acdPolicyStatsTable.setStatus('current')
if mibBuilder.loadTexts: acdPolicyStatsTable.setDescription('Table of all counters associated with each policy.')
acdPolicyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1), ).setIndexNames((0, "ACD-POLICY-MIB", "acdPolicyStatsID"))
if mibBuilder.loadTexts: acdPolicyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: acdPolicyStatsEntry.setDescription('An Entry consists in a bytes and a packets counters.')
acdPolicyStatsID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdPolicyStatsID.setStatus('current')
if mibBuilder.loadTexts: acdPolicyStatsID.setDescription('Unique value for each policy counter. Its value ranges from 1 to\n        MAXINT (4 bytes). ')
acdPolicyStatsListID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsListID.setStatus('current')
if mibBuilder.loadTexts: acdPolicyStatsListID.setDescription('This object identifies in wich List the entry is.')
acdPolicyStatsEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsEntryID.setStatus('current')
if mibBuilder.loadTexts: acdPolicyStatsEntryID.setDescription('This object identifies the order in the List.')
acdPolicyStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInPkts.setStatus('current')
if mibBuilder.loadTexts: acdPolicyStatsInPkts.setDescription('The total number of packets received on this MAC and matching this\n         policy. This is a 32 bits counter. Combined with \n         acdPolicyStatsInOverflowPkts, it provides the equivalent of the 64 \n         bits counter acdPolicyStatsInHCPkts.')
acdPolicyStatsInOverflowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: acdPolicyStatsInOverflowPkts.setDescription('The number of times the associated acdPolicyStatsInPkts counter\n         has overflowed. This is a 32 bits counter. Combined with \n         acdPolicyStatsInPkts, it provides the equivalent of the 64 bits \n         counter acdPolicyStatsInHCPkts.')
acdPolicyStatsInHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInHCPkts.setStatus('current')
if mibBuilder.loadTexts: acdPolicyStatsInHCPkts.setDescription('The total number of packets received on this MAC and matching this\n         policy.')
acdPolicyStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 7), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: acdPolicyStatsInOctets.setDescription('The total number of Octets received on this MAC and matching this\n         policy. This is a 32 bits counter. Combined with \n         acdPolicyStatsInOverflowOctets, it provides the equivalent of the \n         64 bits counter acdPolicyStatsInHCOctets.')
acdPolicyStatsInOverflowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 8), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: acdPolicyStatsInOverflowOctets.setDescription('The number of times the associated acdPolicyStatsInOctets counter\n         has overflowed. This is a 32 bits counter. Combined with \n         acdPolicyStatsInOctets, it provides the equivalent of the 64 bits \n         counter acdPolicyStatsInHCOctets.')
acdPolicyStatsInHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 9), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInHCOctets.setStatus('current')
if mibBuilder.loadTexts: acdPolicyStatsInHCOctets.setDescription('The total number of Octets received on this MAC and matching this\n         policy.')
acdPolicyStatsInPktsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 10), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInPktsErr.setStatus('current')
if mibBuilder.loadTexts: acdPolicyStatsInPktsErr.setDescription('The total number of errored packets received on this MAC and matching this\n         policy. This is a 32 bits counter. Combined with \n         acdPolicyStatsInOverflowPktsErr, it provides the equivalent of the 64 \n         bits counter acdPolicyStatsInHCPktsErr.')
acdPolicyStatsInOverflowPktsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 11), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInOverflowPktsErr.setStatus('current')
if mibBuilder.loadTexts: acdPolicyStatsInOverflowPktsErr.setDescription('The number of times the associated acdPolicyStatsInPktsErr counter\n         has overflowed. This is a 32 bits counter. Combined with \n         acdPolicyStatsInPktsErr, it provides the equivalent of the 64 bits \n         counter acdPolicyStatsInHCPktsErr.')
acdPolicyStatsInHCPktsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 2, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyStatsInHCPktsErr.setStatus('current')
if mibBuilder.loadTexts: acdPolicyStatsInHCPktsErr.setDescription('The total number of errored packets received on this MAC and matching this\n         policy.')
acdPolicyHistStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3), )
if mibBuilder.loadTexts: acdPolicyHistStatsTable.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsTable.setDescription('Table of all counters associated with each policy.')
acdPolicyHistStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1), ).setIndexNames((0, "ACD-POLICY-MIB", "acdPolicyHistStatsID"), (0, "ACD-POLICY-MIB", "acdPolicyHistStatsSampleIndex"))
if mibBuilder.loadTexts: acdPolicyHistStatsEntry.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsEntry.setDescription('An Entry consists in a bytes and a packets counters.')
acdPolicyHistStatsID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdPolicyHistStatsID.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsID.setDescription('Unique value for each policy counter. Its value ranges from 1 to\n        MAXINT (4 bytes). ')
acdPolicyHistStatsListID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsListID.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsListID.setDescription('This object identifies in wich List the entry is.')
acdPolicyHistStatsEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsEntryID.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsEntryID.setDescription('This object identifies the order in the List.')
acdPolicyHistStatsSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 4), Unsigned32())
if mibBuilder.loadTexts: acdPolicyHistStatsSampleIndex.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsSampleIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same policy\n         instance. This index starts at 1 and increases by one as each new\n         sample.')
acdPolicyHistStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsStatus.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsStatus.setDescription('The status of this acdPolicyHistStats entry.')
acdPolicyHistStatsDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsDuration.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsDuration.setDescription('The interval in seconds over which the data is sampled for this entry.')
acdPolicyHistStatsIntervalEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsIntervalEnd.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsIntervalEnd.setDescription('This is the time of the end of this entry.')
acdPolicyHistStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInPkts.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsInPkts.setDescription('The total number of packets received on this MAC and matching this\n         policy during this sampling interval. This is a 32 bits counter.\n         Combined with acdPolicyHistStatsInOverflowPkts, it provides the\n         equivalent of the 64 bits counter acdPolicyHistStatsInHCPkts.')
acdPolicyHistStatsInOverflowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsInOverflowPkts.setDescription('The number of times the associated acdPolicyStatsInPkts counter\n         has overflowed during this sampling interval. This is a 32 bits counter.\n         Combined with acdPolicyHistStatsInPkts, it provides the equivalent of\n         the 64 bits counter acdPolicyHistStatsInHCPkts.')
acdPolicyHistStatsInHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInHCPkts.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsInHCPkts.setDescription('The total number of packets received on this MAC and matching this\n         policy during this sampling interval.')
acdPolicyHistStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 11), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsInOctets.setDescription('The total number of Octets received on this MAC and matching this\n         policy during this sampling interval. This is a 32 bits counter.\n         Combined with acdPolicyHistStatsInOverflowOctets, it provides the\n         equivalent of the 64 bits counter acdPolicyHistStatsInHCOctets.')
acdPolicyHistStatsInOverflowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 12), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsInOverflowOctets.setDescription('The number of times the associated acdPolicyHistStatsInOctets counter\n         has overflowed during this sampling interval. This is a 32 bits counter.\n         Combined with acdPolicyHistStatsInOctets, it provides the equivalent\n         of the 64 bits counter acdPolicyHistStatsInHCOctets.')
acdPolicyHistStatsInHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 13), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInHCOctets.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsInHCOctets.setDescription('The total number of Octets received on this MAC and matching this\n         policy during this sampling interval.')
acdPolicyHistStatsInPktsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 14), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInPktsErr.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsInPktsErr.setDescription('The total number of errored packets received on this MAC and matching\n         this policy during this sampling interval. This is a 32 bits counter.\n         Combined with acdPolicyHistStatsInOverflowPktsErr, it provides the\n         equivalent of the 64 bits counter acdPolicyHistStatsInHCPktsErr.')
acdPolicyHistStatsInOverflowPktsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 15), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInOverflowPktsErr.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsInOverflowPktsErr.setDescription('The number of times the associated acdPolicyStatsInPktsErr counter\n         has overflowed during this sampling interval. This is a 32 bits counter.\n         Combined with acdPolicyHistStatsInPktsErr, it provides the equivalent\n         of the 64 bits counter acdPolicyHistStatsInHCPktsErr.')
acdPolicyHistStatsInHCPktsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 3, 1, 16), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyHistStatsInHCPktsErr.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsInHCPktsErr.setDescription('The total number of errored packets received on this MAC and matching\n         this policy during this sampling interval.')
acdPolicyListTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 1, 1), )
if mibBuilder.loadTexts: acdPolicyListTable.setStatus('current')
if mibBuilder.loadTexts: acdPolicyListTable.setDescription('Table of all Policy list contains in this unit.')
acdPolicyListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 1, 1, 1), ).setIndexNames((0, "ACD-POLICY-MIB", "acdPolicyListEntryID"))
if mibBuilder.loadTexts: acdPolicyListEntry.setStatus('current')
if mibBuilder.loadTexts: acdPolicyListEntry.setDescription('Each entry in this table describe a policy list contains in this unit.')
acdPolicyListEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdPolicyListEntryID.setStatus('current')
if mibBuilder.loadTexts: acdPolicyListEntryID.setDescription('Unique value for each list. This value is the same than acdPolicyListID\n        for each entry in acdPolicyTable.')
acdPolicyListName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyListName.setStatus('current')
if mibBuilder.loadTexts: acdPolicyListName.setDescription('This is a string to identify the policy list.')
acdPolicyListNbrEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyListNbrEntries.setStatus('current')
if mibBuilder.loadTexts: acdPolicyListNbrEntries.setDescription('The number of entries currently in this list.')
acdPolicyPortTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 2, 1), )
if mibBuilder.loadTexts: acdPolicyPortTable.setStatus('current')
if mibBuilder.loadTexts: acdPolicyPortTable.setDescription('Table of all Port and the correspondant policy list.')
acdPolicyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 2, 1, 1), ).setIndexNames((0, "ACD-POLICY-MIB", "acdPolicyPortEntryID"))
if mibBuilder.loadTexts: acdPolicyPortEntry.setStatus('current')
if mibBuilder.loadTexts: acdPolicyPortEntry.setDescription('A Policy port entry is the mapping between this port and a policy list.')
acdPolicyPortEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdPolicyPortEntryID.setStatus('current')
if mibBuilder.loadTexts: acdPolicyPortEntryID.setDescription('Unique value for each port. This value is the same than acdPortConfigIndex\n        used in ACD-PORT-MIB.')
acdPolicyPortListID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyPortListID.setStatus('current')
if mibBuilder.loadTexts: acdPolicyPortListID.setDescription('Numerical value coresponding to acdPolicyListEntryID.')
acdPolicyTableLastChangeTid = MibScalar((1, 3, 6, 1, 4, 1, 22420, 2, 3, 5, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPolicyTableLastChangeTid.setStatus('current')
if mibBuilder.loadTexts: acdPolicyTableLastChangeTid.setDescription('This is the transaction ID of the last change of the acdPolicyTable\n        table.  If this value is different since the last read this is indicate \n        a table change.')
acdPolicyCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 1))
acdPolicyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2))
acdPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2, 1)).setObjects(("ACD-POLICY-MIB", "acdPolicyListID"), ("ACD-POLICY-MIB", "acdPolicyEntryID"), ("ACD-POLICY-MIB", "acdPolicyEnable"), ("ACD-POLICY-MIB", "acdPolicyFilterType"), ("ACD-POLICY-MIB", "acdPolicyFilterIndex"), ("ACD-POLICY-MIB", "acdPolicyMonitorEnable"), ("ACD-POLICY-MIB", "acdPolicyMonitorIndex"), ("ACD-POLICY-MIB", "acdPolicyRegulatorEnable"), ("ACD-POLICY-MIB", "acdPolicyRegulatorIndex"), ("ACD-POLICY-MIB", "acdPolicyRegulatorMarking"), ("ACD-POLICY-MIB", "acdPolicyAction"), ("ACD-POLICY-MIB", "acdPolicyEvcMappingEncaps"), ("ACD-POLICY-MIB", "acdPolicyEvcMappingEtype"), ("ACD-POLICY-MIB", "acdPolicyEvcMappingVlanId"), ("ACD-POLICY-MIB", "acdPolicyCosMappingPcpAction"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice1En"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice1Type"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice1Profile"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice1RegSet"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice2En"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice2Type"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice2Profile"), ("ACD-POLICY-MIB", "acdPolicyCosMappingChoice2RegSet"), ("ACD-POLICY-MIB", "acdPolicyDefaultMappingGreenCfi"), ("ACD-POLICY-MIB", "acdPolicyDefaultMappingGreenPrior"), ("ACD-POLICY-MIB", "acdPolicyDefaultMappingYellowCfi"), ("ACD-POLICY-MIB", "acdPolicyDefaultMappingYellowPrior"), ("ACD-POLICY-MIB", "acdPolicyOutgoingPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyGroup = acdPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: acdPolicyGroup.setDescription('Objects for the policy configuration Group.')
acdPolicyStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2, 2)).setObjects(("ACD-POLICY-MIB", "acdPolicyStatsListID"), ("ACD-POLICY-MIB", "acdPolicyStatsEntryID"), ("ACD-POLICY-MIB", "acdPolicyStatsInPkts"), ("ACD-POLICY-MIB", "acdPolicyStatsInOverflowPkts"), ("ACD-POLICY-MIB", "acdPolicyStatsInHCPkts"), ("ACD-POLICY-MIB", "acdPolicyStatsInOctets"), ("ACD-POLICY-MIB", "acdPolicyStatsInOverflowOctets"), ("ACD-POLICY-MIB", "acdPolicyStatsInHCOctets"), ("ACD-POLICY-MIB", "acdPolicyStatsInPktsErr"), ("ACD-POLICY-MIB", "acdPolicyStatsInOverflowPktsErr"), ("ACD-POLICY-MIB", "acdPolicyStatsInHCPktsErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyStatsGroup = acdPolicyStatsGroup.setStatus('current')
if mibBuilder.loadTexts: acdPolicyStatsGroup.setDescription('Objects for the policy statistics Group.')
acdPolicyHistStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2, 3)).setObjects(("ACD-POLICY-MIB", "acdPolicyHistStatsListID"), ("ACD-POLICY-MIB", "acdPolicyHistStatsEntryID"), ("ACD-POLICY-MIB", "acdPolicyHistStatsStatus"), ("ACD-POLICY-MIB", "acdPolicyHistStatsDuration"), ("ACD-POLICY-MIB", "acdPolicyHistStatsIntervalEnd"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInPkts"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInOverflowPkts"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInHCPkts"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInOctets"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInOverflowOctets"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInHCOctets"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInPktsErr"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInOverflowPktsErr"), ("ACD-POLICY-MIB", "acdPolicyHistStatsInHCPktsErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyHistStatsGroup = acdPolicyHistStatsGroup.setStatus('current')
if mibBuilder.loadTexts: acdPolicyHistStatsGroup.setDescription('Objects for the policy historical tatistics Group.')
acdPolicyDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2, 4)).setObjects(("ACD-POLICY-MIB", "acdPolicyDropEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyDeprecatedGroup = acdPolicyDeprecatedGroup.setStatus('deprecated')
if mibBuilder.loadTexts: acdPolicyDeprecatedGroup.setDescription('Objects for the policy deprecated Group.')
acdPolicyListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2, 5)).setObjects(("ACD-POLICY-MIB", "acdPolicyListName"), ("ACD-POLICY-MIB", "acdPolicyListNbrEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyListGroup = acdPolicyListGroup.setStatus('current')
if mibBuilder.loadTexts: acdPolicyListGroup.setDescription('Objects for the policy list information Group.')
acdPolicyPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2, 6)).setObjects(("ACD-POLICY-MIB", "acdPolicyPortListID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyPortGroup = acdPolicyPortGroup.setStatus('current')
if mibBuilder.loadTexts: acdPolicyPortGroup.setDescription('Objects for the policy port mapping Group.')
acdPolicyTidGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 2, 7)).setObjects(("ACD-POLICY-MIB", "acdPolicyTableLastChangeTid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyTidGroup = acdPolicyTidGroup.setStatus('current')
if mibBuilder.loadTexts: acdPolicyTidGroup.setDescription('List of scalars to monitior changes in tables.')
acdPolicyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 22420, 2, 3, 6, 1, 1)).setObjects(("ACD-POLICY-MIB", "acdPolicyGroup"), ("ACD-POLICY-MIB", "acdPolicyStatsGroup"), ("ACD-POLICY-MIB", "acdPolicyHistStatsGroup"), ("ACD-POLICY-MIB", "acdPolicyListGroup"), ("ACD-POLICY-MIB", "acdPolicyPortGroup"), ("ACD-POLICY-MIB", "acdPolicyTidGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPolicyCompliance = acdPolicyCompliance.setStatus('current')
if mibBuilder.loadTexts: acdPolicyCompliance.setDescription('The compliance statement for support of the ACD-POLICY-MIB module.')
mibBuilder.exportSymbols("ACD-POLICY-MIB", acdPolicyEntryID=acdPolicyEntryID, acdPolicyStatsEntryID=acdPolicyStatsEntryID, acdPolicyDeprecatedGroup=acdPolicyDeprecatedGroup, acdPolicyTableTid=acdPolicyTableTid, acdPolicyStatsInOverflowOctets=acdPolicyStatsInOverflowOctets, acdPolicyHistStatsInOctets=acdPolicyHistStatsInOctets, acdPolicyHistStatsInHCPktsErr=acdPolicyHistStatsInHCPktsErr, acdPolicyTableLastChangeTid=acdPolicyTableLastChangeTid, acdPolicyHistStatsListID=acdPolicyHistStatsListID, acdPolicyDefaultMappingGreenPrior=acdPolicyDefaultMappingGreenPrior, acdPolicyGroups=acdPolicyGroups, acdPolicyStatsListID=acdPolicyStatsListID, acdPolicyCosMappingChoice2Profile=acdPolicyCosMappingChoice2Profile, acdPolicyHistStatsIntervalEnd=acdPolicyHistStatsIntervalEnd, acdPolicyHistStatsInOverflowOctets=acdPolicyHistStatsInOverflowOctets, acdPolicyMIBObjects=acdPolicyMIBObjects, acdPolicyList=acdPolicyList, acdPolicyDefaultMappingGreenCfi=acdPolicyDefaultMappingGreenCfi, acdPolicyStatsID=acdPolicyStatsID, acdPolicyStatsEntry=acdPolicyStatsEntry, acdPolicyListNbrEntries=acdPolicyListNbrEntries, acdPolicyPortGroup=acdPolicyPortGroup, acdPolicyHistStatsID=acdPolicyHistStatsID, acdPolicyHistStatsInHCPkts=acdPolicyHistStatsInHCPkts, acdPolicyEvcMappingVlanId=acdPolicyEvcMappingVlanId, acdPolicyPortEntry=acdPolicyPortEntry, acdPolicyMonitorEnable=acdPolicyMonitorEnable, acdPolicyStatsInPkts=acdPolicyStatsInPkts, acdPolicyHistStatsGroup=acdPolicyHistStatsGroup, acdPolicyCosMappingChoice1RegSet=acdPolicyCosMappingChoice1RegSet, acdPolicy=acdPolicy, acdPolicyEnable=acdPolicyEnable, acdPolicyHistStatsInPktsErr=acdPolicyHistStatsInPktsErr, acdPolicyCompliances=acdPolicyCompliances, acdPolicyStatsInPktsErr=acdPolicyStatsInPktsErr, acdPolicyTidGroup=acdPolicyTidGroup, acdPolicyHistStatsSampleIndex=acdPolicyHistStatsSampleIndex, acdPolicyDefaultMappingYellowCfi=acdPolicyDefaultMappingYellowCfi, acdPolicyHistStatsInOverflowPkts=acdPolicyHistStatsInOverflowPkts, acdPolicyHistStatsEntry=acdPolicyHistStatsEntry, acdPolicyNotifications=acdPolicyNotifications, acdPolicyListName=acdPolicyListName, acdPolicyTable=acdPolicyTable, acdPolicyListTable=acdPolicyListTable, acdPolicyListGroup=acdPolicyListGroup, acdPolicyStatsTable=acdPolicyStatsTable, acdPolicyListEntry=acdPolicyListEntry, acdPolicyDefaultMappingYellowPrior=acdPolicyDefaultMappingYellowPrior, acdPolicyCosMappingChoice1En=acdPolicyCosMappingChoice1En, acdPolicyCosMappingChoice1Profile=acdPolicyCosMappingChoice1Profile, acdPolicyRegulatorIndex=acdPolicyRegulatorIndex, acdPolicyHistStatsInPkts=acdPolicyHistStatsInPkts, acdPolicyPort=acdPolicyPort, acdPolicyPortListID=acdPolicyPortListID, acdPolicyRegulatorEnable=acdPolicyRegulatorEnable, acdPolicyHistStatsTable=acdPolicyHistStatsTable, acdPolicyEntry=acdPolicyEntry, acdPolicyHistStatsStatus=acdPolicyHistStatsStatus, acdPolicyHistStatsInHCOctets=acdPolicyHistStatsInHCOctets, acdPolicyConformance=acdPolicyConformance, acdPolicyAction=acdPolicyAction, acdPolicyPortEntryID=acdPolicyPortEntryID, acdPolicyGroup=acdPolicyGroup, acdPolicyRegulatorMarking=acdPolicyRegulatorMarking, acdPolicyCompliance=acdPolicyCompliance, acdPolicyFilterIndex=acdPolicyFilterIndex, acdPolicyCosMappingPcpAction=acdPolicyCosMappingPcpAction, acdPolicyStatsInHCOctets=acdPolicyStatsInHCOctets, acdPolicyPortTable=acdPolicyPortTable, acdPolicyOutgoingPort=acdPolicyOutgoingPort, acdPolicyHistStatsInOverflowPktsErr=acdPolicyHistStatsInOverflowPktsErr, acdPolicyFilterType=acdPolicyFilterType, acdPolicyStatsInOverflowPkts=acdPolicyStatsInOverflowPkts, acdPolicyStatsInOctets=acdPolicyStatsInOctets, acdPolicyHistStatsEntryID=acdPolicyHistStatsEntryID, acdPolicyEvcMappingEncaps=acdPolicyEvcMappingEncaps, acdPolicyListID=acdPolicyListID, acdPolicyCosMappingChoice2En=acdPolicyCosMappingChoice2En, acdPolicyStatsInHCPkts=acdPolicyStatsInHCPkts, acdPolicyDropEnable=acdPolicyDropEnable, acdPolicyEvcMappingEtype=acdPolicyEvcMappingEtype, acdPolicyMonitorIndex=acdPolicyMonitorIndex, acdPolicyCosMappingChoice2RegSet=acdPolicyCosMappingChoice2RegSet, acdPolicyCosMappingChoice1Type=acdPolicyCosMappingChoice1Type, PYSNMP_MODULE_ID=acdPolicy, acdPolicyStatsGroup=acdPolicyStatsGroup, acdPolicyCosMappingChoice2Type=acdPolicyCosMappingChoice2Type, acdPolicyHistStatsDuration=acdPolicyHistStatsDuration, acdPolicyListEntryID=acdPolicyListEntryID, acdPolicyID=acdPolicyID, acdPolicyStatsInHCPktsErr=acdPolicyStatsInHCPktsErr, acdPolicyStatsInOverflowPktsErr=acdPolicyStatsInOverflowPktsErr)
