#
# PySNMP MIB module ARRIS-C3-CMM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/ARRIS-C3-CMM-MIB
# Produced by pysmi-1.1.12 at Wed May 29 10:19:02 2024
# On host fv-az1984-402 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
cmtsC3, = mibBuilder.importSymbols("ARRIS-MIB", "cmtsC3")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
docsIfCmtsCmStatusDocsisRegMode, TenthdBmV, docsIfCmtsCmStatusEntry, docsIfCmtsCmStatusIpAddress, docsIfCmtsCmStatusMacAddress = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode", "TenthdBmV", "docsIfCmtsCmStatusEntry", "docsIfCmtsCmStatusIpAddress", "docsIfCmtsCmStatusMacAddress")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Bits, ObjectIdentity, IpAddress, Integer32, MibIdentifier, ModuleIdentity, TimeTicks, Unsigned32, iso, Counter32, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Bits", "ObjectIdentity", "IpAddress", "Integer32", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Unsigned32", "iso", "Counter32", "Counter64", "Gauge32")
TruthValue, MacAddress, DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "DateAndTime", "TextualConvention", "DisplayString")
cmtsC3CMMMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5))
cmtsC3CMMMIB.setRevisions(('2005-02-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cmtsC3CMMMIB.setRevisionsDescriptions(('Added dcxCMMTrapGroup objects.',))
if mibBuilder.loadTexts: cmtsC3CMMMIB.setLastUpdated('200502020000Z')
if mibBuilder.loadTexts: cmtsC3CMMMIB.setOrganization('Arris International')
if mibBuilder.loadTexts: cmtsC3CMMMIB.setContactInfo('   Network Management\n                Postal: Arris International.\n                        4400 Cork Airport Business Park\n                        Cork Airport, Kinsale Road\n                        Cork, Ireland.\n                Tel:    +353 21 7305 800\n                Fax:    +353 21 4321 972')
if mibBuilder.loadTexts: cmtsC3CMMMIB.setDescription('This MIB manages the Cable Modem Manager (CMM)\n            software on the Arris CMTS C3')
dcxCMMObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1))
dcxCMMCmtsCmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1), )
if mibBuilder.loadTexts: dcxCMMCmtsCmStatusTable.setStatus('current')
if mibBuilder.loadTexts: dcxCMMCmtsCmStatusTable.setDescription('Additional columns for docsIfCmtsCmStatusTable.')
dcxCMMCmtsCmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1), )
docsIfCmtsCmStatusEntry.registerAugmentions(("ARRIS-C3-CMM-MIB", "dcxCMMCmtsCmStatusEntry"))
dcxCMMCmtsCmStatusEntry.setIndexNames(*docsIfCmtsCmStatusEntry.getIndexNames())
if mibBuilder.loadTexts: dcxCMMCmtsCmStatusEntry.setStatus('current')
if mibBuilder.loadTexts: dcxCMMCmtsCmStatusEntry.setDescription('A row in the dcxCMMCmtsCmStatusEntry.\n                 An entry in this table exists for each Cable Modem\n                 that is known to the CMTS.')
dcxCMMCmDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxCMMCmDebugLevel.setStatus('current')
if mibBuilder.loadTexts: dcxCMMCmDebugLevel.setDescription("a 32-bit unsigned integer representing the Debug Level\n         setting for the modem.  Used by 'debug cable mac-address <M.M.M>'\n         and variants to control debug output")
dcxCMMUpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxCMMUpDisable.setStatus('current')
if mibBuilder.loadTexts: dcxCMMUpDisable.setDescription('a 32-bit unsigned integer representing the disable timeout\n         interval in milliseconds. There are two special values defined:\n         00000000 permanently disables the upstream of the modem and\n         FFFFFFFF remotely reintializes the MAC, which resumes normal\n         operation of the modem.')
dcxCMMResetCm = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("delete", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxCMMResetCm.setStatus('current')
if mibBuilder.loadTexts: dcxCMMResetCm.setDescription("Use to implement the 'clear cable modem xxx reset|delete' command;\n                 setting to 'reset' sends a RNG-RSP(abort) the CM and removes it\n                 from the station maintenance list causing it to reboot, setting to\n                 'delete' causes the cable modem to reboot and be removed from the\n                 CMTS database. Reading this entry always returns 'none'.")
dcxCMMResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxCMMResetCounters.setStatus('current')
if mibBuilder.loadTexts: dcxCMMResetCounters.setDescription("Use to implement the 'clear cable modem xxx counters' command;\n                 this command sets the CM's counters to zero.")
dcxCMMCmBpiState = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("cmBPI2NotManagedByBPI2", 0), ("cmBPI2InBPI2Progress", 1), ("cmBPI2NotAuthorized", 2), ("cmBPI2KeyIssued", 3), ("cmBPI2IsRunning", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMCmBpiState.setStatus('current')
if mibBuilder.loadTexts: dcxCMMCmBpiState.setDescription(" if sytem support security mechanism,if cmBPI2NotManagedByBPI2, no security support, \n                  otherwise,this state indicates cm's BPI2 state only this state is cmBPI2NotManagedByBPI2\n                  or cmBPI2IsRunning which means cm is online and could foward traffic")
dcxCMMCmPrimaryUsSf = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMCmPrimaryUsSf.setStatus('current')
if mibBuilder.loadTexts: dcxCMMCmPrimaryUsSf.setDescription(' contains the Primary SID, primary upstream service flow, for the modem')
dcxCMMCmPrimaryDsSf = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMCmPrimaryDsSf.setStatus('current')
if mibBuilder.loadTexts: dcxCMMCmPrimaryDsSf.setDescription(' contains the Primary downstream service flow, for the modem')
dcxCMMIpToCmTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 2), )
if mibBuilder.loadTexts: dcxCMMIpToCmTable.setStatus('current')
if mibBuilder.loadTexts: dcxCMMIpToCmTable.setDescription('Same as docsIfCmtsMacToCmTable but indexed by IP address, not MAC.')
dcxCMMIpToCmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 2, 1), ).setIndexNames((0, "ARRIS-C3-CMM-MIB", "dcxCMMCmIp"))
if mibBuilder.loadTexts: dcxCMMIpToCmEntry.setStatus('current')
if mibBuilder.loadTexts: dcxCMMIpToCmEntry.setDescription('A row in the dcxCMMIpToCmTable.\n                 An entry in this table exists for each Cable Modem\n                 that is connected to the CMTS implementing this table.')
dcxCMMCmIp = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: dcxCMMCmIp.setStatus('current')
if mibBuilder.loadTexts: dcxCMMCmIp.setDescription('The CM IP address.')
dcxCMMCmPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMCmPtr.setStatus('current')
if mibBuilder.loadTexts: dcxCMMCmPtr.setDescription("An row index into docsIfCmtsCmStatusTable. When queried\n                 with the correct instance value (e.g. a CM's IP address),\n                 returns the index in docsIfCmtsCmStatusTable which\n                 represents that CM.")
dcxCMMFlapTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3), )
if mibBuilder.loadTexts: dcxCMMFlapTable.setStatus('current')
if mibBuilder.loadTexts: dcxCMMFlapTable.setDescription('Table of currently-active (ie, meets flap criteria and\n                 not yet aged out) flapping modems.')
dcxCMMCmFlapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1), ).setIndexNames((0, "ARRIS-C3-CMM-MIB", "dcxCMMFlapMacAddr"))
if mibBuilder.loadTexts: dcxCMMCmFlapEntry.setStatus('current')
if mibBuilder.loadTexts: dcxCMMCmFlapEntry.setDescription('Flap table entry - encapsulates all needed flap status\n                 fields for a single flapping modem.')
dcxCMMFlapMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapMacAddr.setStatus('current')
if mibBuilder.loadTexts: dcxCMMFlapMacAddr.setDescription('The CM MAC address.')
dcxCMMFlapUpstreamID = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapUpstreamID.setStatus('current')
if mibBuilder.loadTexts: dcxCMMFlapUpstreamID.setDescription("The Upstream ID of the CM's current upstream.")
dcxCMMFlapInsertions = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapInsertions.setStatus('current')
if mibBuilder.loadTexts: dcxCMMFlapInsertions.setDescription('The current number of re-insertion flaps for modem.')
dcxCMMFlapHits = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapHits.setStatus('current')
if mibBuilder.loadTexts: dcxCMMFlapHits.setDescription('The number of successful re-ranges at time of last flap.')
dcxCMMFlapMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapMisses.setStatus('current')
if mibBuilder.loadTexts: dcxCMMFlapMisses.setDescription('The number of re-range failures at time of last flap.')
dcxCMMFlapCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapCRC.setStatus('current')
if mibBuilder.loadTexts: dcxCMMFlapCRC.setDescription('The number of CRC errors at time of last flap.')
dcxCMMFlapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapCount.setStatus('current')
if mibBuilder.loadTexts: dcxCMMFlapCount.setDescription('The total number of flaps from all causes (reinsertions,\n                power adjustments, and sequential misses).')
dcxCMMFlapTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxCMMFlapTimeStamp.setStatus('current')
if mibBuilder.loadTexts: dcxCMMFlapTimeStamp.setDescription('The VxWorks format time stamp of latest flap.')
dcxCMMTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 4))
dcxCMMTrapReason = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dcxCMMTrapReason.setStatus('current')
if mibBuilder.loadTexts: dcxCMMTrapReason.setDescription('Placeholder for the user readable text in the CMM trap.')
dcxCMMTrap = NotificationType((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 5, 1, 4, 2)).setObjects(("ARRIS-C3-CMM-MIB", "dcxCMMTrapReason"))
if mibBuilder.loadTexts: dcxCMMTrap.setStatus('current')
if mibBuilder.loadTexts: dcxCMMTrap.setDescription('General CMM trap. The reason for the trap are described\n\t\t     in dcxCMMTrapReason.')
mibBuilder.exportSymbols("ARRIS-C3-CMM-MIB", dcxCMMCmtsCmStatusEntry=dcxCMMCmtsCmStatusEntry, dcxCMMTrap=dcxCMMTrap, dcxCMMFlapHits=dcxCMMFlapHits, dcxCMMCmPrimaryDsSf=dcxCMMCmPrimaryDsSf, dcxCMMResetCm=dcxCMMResetCm, dcxCMMUpDisable=dcxCMMUpDisable, dcxCMMFlapCount=dcxCMMFlapCount, dcxCMMFlapUpstreamID=dcxCMMFlapUpstreamID, dcxCMMFlapCRC=dcxCMMFlapCRC, dcxCMMIpToCmEntry=dcxCMMIpToCmEntry, dcxCMMCmDebugLevel=dcxCMMCmDebugLevel, dcxCMMFlapTable=dcxCMMFlapTable, dcxCMMTrapGroup=dcxCMMTrapGroup, dcxCMMResetCounters=dcxCMMResetCounters, dcxCMMCmBpiState=dcxCMMCmBpiState, dcxCMMFlapTimeStamp=dcxCMMFlapTimeStamp, dcxCMMFlapInsertions=dcxCMMFlapInsertions, dcxCMMCmPrimaryUsSf=dcxCMMCmPrimaryUsSf, dcxCMMFlapMisses=dcxCMMFlapMisses, PYSNMP_MODULE_ID=cmtsC3CMMMIB, dcxCMMFlapMacAddr=dcxCMMFlapMacAddr, dcxCMMIpToCmTable=dcxCMMIpToCmTable, dcxCMMTrapReason=dcxCMMTrapReason, dcxCMMObjects=dcxCMMObjects, dcxCMMCmPtr=dcxCMMCmPtr, dcxCMMCmIp=dcxCMMCmIp, cmtsC3CMMMIB=cmtsC3CMMMIB, dcxCMMCmtsCmStatusTable=dcxCMMCmtsCmStatusTable, dcxCMMCmFlapEntry=dcxCMMCmFlapEntry)
