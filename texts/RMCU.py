#
# PySNMP MIB module RMCU (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/westmountainradio/RMCU
# Produced by pysmi-1.1.12 at Mon Jun  3 13:49:22 2024
# On host fv-az1530-906 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, enterprises, Counter64, TimeTicks, Bits, NotificationType, iso, Counter32, Unsigned32, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "enterprises", "Counter64", "TimeTicks", "Bits", "NotificationType", "iso", "Counter32", "Unsigned32", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "Gauge32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rr4005i = ModuleIdentity((1, 3, 6, 1, 4, 1, 15117, 1))
rr4005i.setRevisions(('2017-10-11 13:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rr4005i.setRevisionsDescriptions(('Revision',))
if mibBuilder.loadTexts: rr4005i.setLastUpdated('201710111300Z')
if mibBuilder.loadTexts: rr4005i.setOrganization('West Mountain Radio')
if mibBuilder.loadTexts: rr4005i.setContactInfo('www.westmountainradio.com')
if mibBuilder.loadTexts: rr4005i.setDescription('West Mountain Radio RIGrunner 4005i')
wmr = MibIdentifier((1, 3, 6, 1, 4, 1, 15117))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 15117, 1, 1))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 15117, 1, 2))
control_ints = MibIdentifier((1, 3, 6, 1, 4, 1, 15117, 1, 4)).setLabel("control-ints")
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 15117, 1, 3))
class FixedDiv1000(TextualConvention, Integer32):
    description = 'Fixed point, thousandths'
    status = 'current'
    displayHint = 'd-3'

name = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: name.setStatus('current')
if mibBuilder.loadTexts: name.setDescription('Unit name')
version = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: version.setStatus('current')
if mibBuilder.loadTexts: version.setDescription('Software and hardware version')
build_date = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 1, 3), DisplayString()).setLabel("build-date").setMaxAccess("readonly")
if mibBuilder.loadTexts: build_date.setStatus('current')
if mibBuilder.loadTexts: build_date.setDescription('Date of software was built')
analog1name = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analog1name.setStatus('current')
if mibBuilder.loadTexts: analog1name.setDescription('Name of analog input #1')
analog1val = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analog1val.setStatus('current')
if mibBuilder.loadTexts: analog1val.setDescription('Value of analog input #1')
analog2name = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analog2name.setStatus('current')
if mibBuilder.loadTexts: analog2name.setDescription('Name of analog input #2')
analog2val = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analog2val.setStatus('current')
if mibBuilder.loadTexts: analog2val.setDescription('Value of analog input #2')
analog3name = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analog3name.setStatus('current')
if mibBuilder.loadTexts: analog3name.setDescription('Name of analog input #3')
analog3val = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analog3val.setStatus('current')
if mibBuilder.loadTexts: analog3val.setDescription('Value of analog input #3')
analog4name = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analog4name.setStatus('current')
if mibBuilder.loadTexts: analog4name.setDescription('Name of analog input #4')
analog4val = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analog4val.setStatus('current')
if mibBuilder.loadTexts: analog4val.setDescription('Value of analog input #4')
analog5name = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analog5name.setStatus('current')
if mibBuilder.loadTexts: analog5name.setDescription('Name of analog input #5')
analog5val = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analog5val.setStatus('current')
if mibBuilder.loadTexts: analog5val.setDescription('Value of analog input #5')
analog6name = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analog6name.setStatus('current')
if mibBuilder.loadTexts: analog6name.setDescription('Name of analog input #6')
analog6val = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analog6val.setStatus('current')
if mibBuilder.loadTexts: analog6val.setDescription('Value of analog input #6')
digout1name = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 65), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digout1name.setStatus('current')
if mibBuilder.loadTexts: digout1name.setDescription('Name of digital output #1')
digout1val = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digout1val.setStatus('current')
if mibBuilder.loadTexts: digout1val.setDescription('Value of digital output #1')
digout2name = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 67), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digout2name.setStatus('current')
if mibBuilder.loadTexts: digout2name.setDescription('Name of digital output #2')
digout2val = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 68), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digout2val.setStatus('current')
if mibBuilder.loadTexts: digout2val.setDescription('Value of digital output #2')
digout3name = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 69), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digout3name.setStatus('current')
if mibBuilder.loadTexts: digout3name.setDescription('Name of digital output #3')
digout3val = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 70), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digout3val.setStatus('current')
if mibBuilder.loadTexts: digout3val.setDescription('Value of digital output #3')
digout4name = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 71), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digout4name.setStatus('current')
if mibBuilder.loadTexts: digout4name.setDescription('Name of digital output #4')
digout4val = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digout4val.setStatus('current')
if mibBuilder.loadTexts: digout4val.setDescription('Value of digital output #4')
digout5name = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digout5name.setStatus('current')
if mibBuilder.loadTexts: digout5name.setDescription('Name of digital output #5')
digout5val = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 2, 74), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digout5val.setStatus('current')
if mibBuilder.loadTexts: digout5val.setDescription('Value of digital output #5')
analog1val_int = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 4, 1), FixedDiv1000()).setLabel("analog1val-int").setMaxAccess("readonly")
if mibBuilder.loadTexts: analog1val_int.setStatus('current')
if mibBuilder.loadTexts: analog1val_int.setDescription('Value of analog input #1')
analog2val_int = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 4, 2), FixedDiv1000()).setLabel("analog2val-int").setMaxAccess("readonly")
if mibBuilder.loadTexts: analog2val_int.setStatus('current')
if mibBuilder.loadTexts: analog2val_int.setDescription('Value of analog input #2')
analog3val_int = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 4, 3), FixedDiv1000()).setLabel("analog3val-int").setMaxAccess("readonly")
if mibBuilder.loadTexts: analog3val_int.setStatus('current')
if mibBuilder.loadTexts: analog3val_int.setDescription('Value of analog input #3')
analog4val_int = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 4, 4), FixedDiv1000()).setLabel("analog4val-int").setMaxAccess("readonly")
if mibBuilder.loadTexts: analog4val_int.setStatus('current')
if mibBuilder.loadTexts: analog4val_int.setDescription('Value of analog input #4')
analog5val_int = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 4, 5), FixedDiv1000()).setLabel("analog5val-int").setMaxAccess("readonly")
if mibBuilder.loadTexts: analog5val_int.setStatus('current')
if mibBuilder.loadTexts: analog5val_int.setDescription('Value of analog input #5')
analog6val_int = MibScalar((1, 3, 6, 1, 4, 1, 15117, 1, 4, 6), FixedDiv1000()).setLabel("analog6val-int").setMaxAccess("readonly")
if mibBuilder.loadTexts: analog6val_int.setStatus('current')
if mibBuilder.loadTexts: analog6val_int.setDescription('Value of analog input #6')
trap_auth = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 1)).setLabel("trap-auth")
if mibBuilder.loadTexts: trap_auth.setStatus('current')
if mibBuilder.loadTexts: trap_auth.setDescription('Trap caused by authorization failure')
trap_analog_over1 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 2)).setLabel("trap-analog-over1").setObjects(("RMCU", "name"), ("RMCU", "analog1val"))
if mibBuilder.loadTexts: trap_analog_over1.setStatus('current')
if mibBuilder.loadTexts: trap_analog_over1.setDescription('Trap caused by analog input #1 being over threshold')
trap_analog_over2 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 3)).setLabel("trap-analog-over2").setObjects(("RMCU", "name"), ("RMCU", "analog2val"))
if mibBuilder.loadTexts: trap_analog_over2.setStatus('current')
if mibBuilder.loadTexts: trap_analog_over2.setDescription('Trap caused by analog input #2 being over threshold')
trap_analog_over3 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 4)).setLabel("trap-analog-over3").setObjects(("RMCU", "name"), ("RMCU", "analog3val"))
if mibBuilder.loadTexts: trap_analog_over3.setStatus('current')
if mibBuilder.loadTexts: trap_analog_over3.setDescription('Trap caused by analog input #3 being over threshold')
trap_analog_over4 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 5)).setLabel("trap-analog-over4").setObjects(("RMCU", "name"), ("RMCU", "analog4val"))
if mibBuilder.loadTexts: trap_analog_over4.setStatus('current')
if mibBuilder.loadTexts: trap_analog_over4.setDescription('Trap caused by analog input #4 being over threshold')
trap_analog_over5 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 6)).setLabel("trap-analog-over5").setObjects(("RMCU", "name"), ("RMCU", "analog5val"))
if mibBuilder.loadTexts: trap_analog_over5.setStatus('current')
if mibBuilder.loadTexts: trap_analog_over5.setDescription('Trap caused by analog input #5 being over threshold')
trap_analog_over6 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 7)).setLabel("trap-analog-over6").setObjects(("RMCU", "name"), ("RMCU", "analog6val"))
if mibBuilder.loadTexts: trap_analog_over6.setStatus('current')
if mibBuilder.loadTexts: trap_analog_over6.setDescription('Trap caused by analog input #6 being over threshold')
trap_analog_under6 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 23)).setLabel("trap-analog-under6").setObjects(("RMCU", "name"), ("RMCU", "analog6val"))
if mibBuilder.loadTexts: trap_analog_under6.setStatus('current')
if mibBuilder.loadTexts: trap_analog_under6.setDescription('Trap caused by analog input #6 being under threshold')
trap_poweron = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 34)).setLabel("trap-poweron").setObjects(("RMCU", "name"))
if mibBuilder.loadTexts: trap_poweron.setStatus('current')
if mibBuilder.loadTexts: trap_poweron.setDescription('Trap caused by power-on')
trap_test = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 52)).setLabel("trap-test").setObjects(("RMCU", "name"))
if mibBuilder.loadTexts: trap_test.setStatus('current')
if mibBuilder.loadTexts: trap_test.setDescription('Trap caused by user test')
trap_digout_inactive1 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 72)).setLabel("trap-digout-inactive1").setObjects(("RMCU", "name"))
if mibBuilder.loadTexts: trap_digout_inactive1.setStatus('current')
if mibBuilder.loadTexts: trap_digout_inactive1.setDescription('Trap caused by digitout output #1 going inactive')
trap_digout_inactive2 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 73)).setLabel("trap-digout-inactive2").setObjects(("RMCU", "name"))
if mibBuilder.loadTexts: trap_digout_inactive2.setStatus('current')
if mibBuilder.loadTexts: trap_digout_inactive2.setDescription('Trap caused by digitout output #2 going inactive')
trap_digout_inactive3 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 74)).setLabel("trap-digout-inactive3").setObjects(("RMCU", "name"))
if mibBuilder.loadTexts: trap_digout_inactive3.setStatus('current')
if mibBuilder.loadTexts: trap_digout_inactive3.setDescription('Trap caused by digitout output #3 going inactive')
trap_digout_inactive4 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 75)).setLabel("trap-digout-inactive4").setObjects(("RMCU", "name"))
if mibBuilder.loadTexts: trap_digout_inactive4.setStatus('current')
if mibBuilder.loadTexts: trap_digout_inactive4.setDescription('Trap caused by digitout output #4 going inactive')
trap_digout_inactive5 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 76)).setLabel("trap-digout-inactive5").setObjects(("RMCU", "name"))
if mibBuilder.loadTexts: trap_digout_inactive5.setStatus('current')
if mibBuilder.loadTexts: trap_digout_inactive5.setDescription('Trap caused by digitout output #5 going inactive')
trap_digout_active1 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 88)).setLabel("trap-digout-active1").setObjects(("RMCU", "name"))
if mibBuilder.loadTexts: trap_digout_active1.setStatus('current')
if mibBuilder.loadTexts: trap_digout_active1.setDescription('Trap caused by digitout output #1 going active')
trap_digout_active2 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 89)).setLabel("trap-digout-active2").setObjects(("RMCU", "name"))
if mibBuilder.loadTexts: trap_digout_active2.setStatus('current')
if mibBuilder.loadTexts: trap_digout_active2.setDescription('Trap caused by digitout output #2 going active')
trap_digout_active3 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 90)).setLabel("trap-digout-active3").setObjects(("RMCU", "name"))
if mibBuilder.loadTexts: trap_digout_active3.setStatus('current')
if mibBuilder.loadTexts: trap_digout_active3.setDescription('Trap caused by digitout output #3 going active')
trap_digout_active4 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 91)).setLabel("trap-digout-active4").setObjects(("RMCU", "name"))
if mibBuilder.loadTexts: trap_digout_active4.setStatus('current')
if mibBuilder.loadTexts: trap_digout_active4.setDescription('Trap caused by digitout output #4 going active')
trap_digout_active5 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 92)).setLabel("trap-digout-active5").setObjects(("RMCU", "name"))
if mibBuilder.loadTexts: trap_digout_active5.setStatus('current')
if mibBuilder.loadTexts: trap_digout_active5.setDescription('Trap caused by digitout output #5 going active')
trap_analog_urecover6 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 109)).setLabel("trap-analog-urecover6").setObjects(("RMCU", "name"), ("RMCU", "analog6val"))
if mibBuilder.loadTexts: trap_analog_urecover6.setStatus('current')
if mibBuilder.loadTexts: trap_analog_urecover6.setDescription('Trap caused by analog input #6 recovering from under alarm')
trap_analog_orecover1 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 120)).setLabel("trap-analog-orecover1").setObjects(("RMCU", "name"), ("RMCU", "analog1val"))
if mibBuilder.loadTexts: trap_analog_orecover1.setStatus('current')
if mibBuilder.loadTexts: trap_analog_orecover1.setDescription('Trap caused by analog input #1 recovering from over alarm')
trap_analog_orecover2 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 121)).setLabel("trap-analog-orecover2").setObjects(("RMCU", "name"), ("RMCU", "analog2val"))
if mibBuilder.loadTexts: trap_analog_orecover2.setStatus('current')
if mibBuilder.loadTexts: trap_analog_orecover2.setDescription('Trap caused by analog input #2 recovering from over alarm')
trap_analog_orecover3 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 122)).setLabel("trap-analog-orecover3").setObjects(("RMCU", "name"), ("RMCU", "analog3val"))
if mibBuilder.loadTexts: trap_analog_orecover3.setStatus('current')
if mibBuilder.loadTexts: trap_analog_orecover3.setDescription('Trap caused by analog input #3 recovering from over alarm')
trap_analog_orecover4 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 123)).setLabel("trap-analog-orecover4").setObjects(("RMCU", "name"), ("RMCU", "analog4val"))
if mibBuilder.loadTexts: trap_analog_orecover4.setStatus('current')
if mibBuilder.loadTexts: trap_analog_orecover4.setDescription('Trap caused by analog input #4 recovering from over alarm')
trap_analog_orecover5 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 124)).setLabel("trap-analog-orecover5").setObjects(("RMCU", "name"), ("RMCU", "analog5val"))
if mibBuilder.loadTexts: trap_analog_orecover5.setStatus('current')
if mibBuilder.loadTexts: trap_analog_orecover5.setDescription('Trap caused by analog input #5 recovering from over alarm')
trap_analog_orecover6 = NotificationType((1, 3, 6, 1, 4, 1, 15117, 1, 3, 125)).setLabel("trap-analog-orecover6").setObjects(("RMCU", "name"), ("RMCU", "analog6val"))
if mibBuilder.loadTexts: trap_analog_orecover6.setStatus('current')
if mibBuilder.loadTexts: trap_analog_orecover6.setDescription('Trap caused by analog input #6 recovering from over alarm')
mibBuilder.exportSymbols("RMCU", name=name, trap_analog_over3=trap_analog_over3, trap_digout_active2=trap_digout_active2, digout1val=digout1val, analog1val=analog1val, trap_poweron=trap_poweron, PYSNMP_MODULE_ID=rr4005i, trap_analog_over6=trap_analog_over6, analog4val_int=analog4val_int, trap_analog_over1=trap_analog_over1, build_date=build_date, digout4name=digout4name, trap_digout_inactive3=trap_digout_inactive3, FixedDiv1000=FixedDiv1000, analog6val=analog6val, product=product, analog5val_int=analog5val_int, trap_digout_inactive4=trap_digout_inactive4, digout3val=digout3val, trap_digout_active4=trap_digout_active4, analog2val_int=analog2val_int, analog1val_int=analog1val_int, trap_digout_active5=trap_digout_active5, analog4name=analog4name, trap_analog_orecover1=trap_analog_orecover1, analog3val_int=analog3val_int, trap_digout_inactive5=trap_digout_inactive5, analog3val=analog3val, analog6name=analog6name, digout2name=digout2name, trap_analog_orecover6=trap_analog_orecover6, analog1name=analog1name, analog5name=analog5name, digout5val=digout5val, analog5val=analog5val, trap_analog_over5=trap_analog_over5, version=version, trap_analog_orecover2=trap_analog_orecover2, analog3name=analog3name, trap_digout_active3=trap_digout_active3, trap_analog_orecover3=trap_analog_orecover3, analog4val=analog4val, traps=traps, trap_digout_active1=trap_digout_active1, rr4005i=rr4005i, trap_digout_inactive1=trap_digout_inactive1, digout4val=digout4val, trap_analog_over4=trap_analog_over4, digout5name=digout5name, control=control, digout3name=digout3name, analog2val=analog2val, control_ints=control_ints, analog6val_int=analog6val_int, trap_digout_inactive2=trap_digout_inactive2, trap_auth=trap_auth, trap_analog_under6=trap_analog_under6, analog2name=analog2name, digout2val=digout2val, trap_analog_orecover4=trap_analog_orecover4, digout1name=digout1name, trap_analog_orecover5=trap_analog_orecover5, trap_test=trap_test, wmr=wmr, trap_analog_urecover6=trap_analog_urecover6, trap_analog_over2=trap_analog_over2)
