#
# PySNMP MIB module MOXA-EDSG512E8POE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/moxa/MOXA-EDSG512E8POE-MIB
# Produced by pysmi-1.1.12 at Wed Dec  4 21:18:09 2024
# On host fv-az585-169 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ObjectIdentity, ModuleIdentity, Bits, NotificationType, Counter64, Unsigned32, enterprises, MibIdentifier, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "ModuleIdentity", "Bits", "NotificationType", "Counter64", "Unsigned32", "enterprises", "MibIdentifier", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "Integer32")
DateAndTime, DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention", "MacAddress")
moxa = MibIdentifier((1, 3, 6, 1, 4, 1, 8691))
industrialEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7))
edsg512epoe = ModuleIdentity((1, 3, 6, 1, 4, 1, 8691, 7, 108))
edsg512epoe.setRevisions(('2016-07-15 00:00', '2015-06-30 00:00', '2014-07-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: edsg512epoe.setRevisionsDescriptions(('Support TurboPack3 v5.1 firmware,\n             Added new objects:\n                accessControlList,\n                Password Policy,\n                Login Lockout,\n                System Notification Message,\n                Audit and Log Management,\n                Certificate Management,\n                supportIfXTable,\n                MAC Authentication Bypass,\n                SMTP2,\n                ivlSwitch,\n                supportMacSticky,\n                varRemoteAuthSuccessTrap,\n                remoteAuthSuccessTrap,\n                varRemoteAuthFailTrap,\n                remoteAuthFailTrap,\n\t\t\t\tconfigEncryptEnable,\n\t\t\t\tfiberSN,\n\t\t\t\taccessControlProfileTable,\n\t\t\t\tcalibratePeriod,\n\t\t\t\tvarFiberWarningTrap,\n\t\t\t\tmoxaNewCmdEnable,\n                modbusSetting,\n                snmpVersion,\n                snmpAdminSecurityLevel,\n                snmpUserSecurityLevel\n\n             Modified objects:\n                portAccessControl,\n                userLoginServer,\n                removeACLEgressPort,\n                mgmtInterfaceAutoLogout,\n\t\t\t\tdscpMapping,\n\t\t\t\tdscpInspection', 'Support v4.2 firmware,\n             Added new objects:\n            \tmulticastFastForwarding,\n\n             Modified objects:\n             \tn/a', 'Support TurboPack2 v3.1 firmware,\n             Added new objects:\n            \tspanningTreePortEdge,\n            \tenableEtherNetIP,\n            \tenableModbus,\n            \tenableNTPServer,\n            \tuserLoginSetting,\n            \tcpuLoading5s,\n            \tcpuLoading30s,\n            \tcpuLoading300s,\n            \ttotalMemory,\n            \tfreeMemory,\n            \tusedMemory,\n            \tmemoryUsage,\n\n             Modified objects:\n             \tVlan,\n             \tcommRedundancy,\n             \trateLimiting,\n             \tieee1588Setting',))
if mibBuilder.loadTexts: edsg512epoe.setLastUpdated('201607150000Z')
if mibBuilder.loadTexts: edsg512epoe.setOrganization('Moxa Inc.')
if mibBuilder.loadTexts: edsg512epoe.setContactInfo('Postal: Moxa Inc.\n\t             Fl.4, No.135,Lane 235,Pao-Chiao Rd.\n\t             Shing Tien City,Taipei,Taiwan,R.O.C\n\n\t             Tel: +866-2-89191230 ')
if mibBuilder.loadTexts: edsg512epoe.setDescription('The MIB module for Moxa EDS-G512E-PoE series specific information.')
swMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1))
swTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2))
class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight\n        ports, with the first octet specifying ports 1 through\n        8, the second octet specifying ports 9 through 16, etc.\n        Within each octet, the most significant bit represents\n        the lowest numbered port, and the least significant bit\n        represents the highest numbered port.  Thus, each port\n        of the bridge is represented by a single bit within the\n        value of this object.  If that bit has a value of '1'\n        then that port is included in the set of ports; the port\n        is not included if its bit has a value of '0'."
    status = 'current'

numberOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfPorts.setStatus('current')
if mibBuilder.loadTexts: numberOfPorts.setDescription('Total Ports.')
switchModel = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchModel.setStatus('current')
if mibBuilder.loadTexts: switchModel.setDescription('The switch model.')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
if mibBuilder.loadTexts: firmwareVersion.setDescription('The firmware version.')
enableWebConfig = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("httpOrHttps", 1), ("httpsOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableWebConfig.setStatus('current')
if mibBuilder.loadTexts: enableWebConfig.setDescription('This enable the Web. configuration function.')
consoleLoginMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("menu", 0), ("cli", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleLoginMode.setStatus('current')
if mibBuilder.loadTexts: consoleLoginMode.setDescription('This option can change console login mode.')
enableTelnetConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableTelnetConsole.setStatus('current')
if mibBuilder.loadTexts: enableTelnetConsole.setDescription('This enable telnet console.')
lineSwapRecovery = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineSwapRecovery.setStatus('current')
if mibBuilder.loadTexts: lineSwapRecovery.setDescription('This enable line-swap-fast-recovery function.')
agingTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agingTime.setStatus('current')
if mibBuilder.loadTexts: agingTime.setDescription('Web Timeout')
supportIfXTable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: supportIfXTable.setStatus('current')
if mibBuilder.loadTexts: supportIfXTable.setDescription('Support 64 bit Counter (ifXTable).')
networkSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8))
switchIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIpAddr.setStatus('current')
if mibBuilder.loadTexts: switchIpAddr.setDescription('The IP Address of this switch.')
switchIpMask = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIpMask.setStatus('current')
if mibBuilder.loadTexts: switchIpMask.setDescription('The netmask of this switch.')
defaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultGateway.setStatus('current')
if mibBuilder.loadTexts: defaultGateway.setDescription('The default gateway of this switch.')
enableAutoIpConfig = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableDHCP", 1), ("enableBOOTP", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAutoIpConfig.setStatus('current')
if mibBuilder.loadTexts: enableAutoIpConfig.setDescription('This enable the automatic IP address configuration function.')
dnsServer1IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer1IpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsServer1IpAddr.setDescription("The first DNS server's IP address")
snmpTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpTrapCommunity.setDescription('The SNMP trap community name')
trapServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerAddr.setStatus('current')
if mibBuilder.loadTexts: trapServerAddr.setDescription('The IP address/Domain name of SNMP trap server')
dnsServer2IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer2IpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsServer2IpAddr.setDescription("The second DNS server's IP address")
snmpReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpReadCommunity.setDescription('The SNMP read community name')
snmpTrap2Community = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap2Community.setStatus('current')
if mibBuilder.loadTexts: snmpTrap2Community.setDescription('The Second SNMP trap community name')
trap2ServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trap2ServerAddr.setStatus('current')
if mibBuilder.loadTexts: trap2ServerAddr.setDescription('The IP address/Domain name of Second SNMP trap server')
snmpInformEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformEnable.setStatus('current')
if mibBuilder.loadTexts: snmpInformEnable.setDescription('This enable the snmpInform function.')
snmpInformRetries = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformRetries.setStatus('current')
if mibBuilder.loadTexts: snmpInformRetries.setDescription('The snmp inform retry times of SNMP trap server')
snmpInformTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformTimeout.setStatus('current')
if mibBuilder.loadTexts: snmpInformTimeout.setDescription('The snmp inform interval of SNMP trap server')
dhcpRetryPeriods = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRetryPeriods.setStatus('current')
if mibBuilder.loadTexts: dhcpRetryPeriods.setDescription('The DHCP retry periods.')
dhcpRetryTimes = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRetryTimes.setStatus('current')
if mibBuilder.loadTexts: dhcpRetryTimes.setDescription('The dhcp retry times.')
trapVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("snmpv1-Trap", 0), ("snmpv2-Notification", 1), ("snmpv2-Inform", 2), ("snmpv3-Trap", 3), ("snmpv3-Inform", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapVersion.setStatus('current')
if mibBuilder.loadTexts: trapVersion.setDescription('Version of SNMP trap')
snmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmpv1-v2c-v3", 1), ("snmpv1-v2c", 2), ("snmpv3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpVersion.setStatus('current')
if mibBuilder.loadTexts: snmpVersion.setDescription('Version of SNMP')
snmpAdminSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthNoPriv", 1), ("authNoPriv", 2), ("authPriv", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAdminSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: snmpAdminSecurityLevel.setDescription('Admin security level')
snmpUserSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 8, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthNoPriv", 1), ("authNoPriv", 2), ("authPriv", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUserSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: snmpUserSecurityLevel.setDescription('User security level')
portSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 9))
portTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 9, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
if mibBuilder.loadTexts: portTable.setDescription('The port table.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 9, 1, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
if mibBuilder.loadTexts: portEntry.setDescription('The port entry.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription('The port index.')
portDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDesc.setStatus('current')
if mibBuilder.loadTexts: portDesc.setDescription('The port description')
portEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEnable.setStatus('current')
if mibBuilder.loadTexts: portEnable.setDescription('This enable the port.')
portSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 0), ("speed100M-Full", 1), ("speed100M-Half", 2), ("speed10M-Full", 3), ("speed10M-Half", 4), ("speed1000M-Full", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeed.setStatus('current')
if mibBuilder.loadTexts: portSpeed.setDescription('The port speed and duplex.')
portMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("na", 0), ("auto", 1), ("mdi", 2), ("mdiX", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMDI.setStatus('current')
if mibBuilder.loadTexts: portMDI.setDescription('The port MDI/MDIX.')
portFDXFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFDXFlowCtrl.setStatus('current')
if mibBuilder.loadTexts: portFDXFlowCtrl.setDescription('The port FDX Flow Control')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 9, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
if mibBuilder.loadTexts: portName.setDescription('The port Name')
portSubdesc = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 9, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSubdesc.setStatus('current')
if mibBuilder.loadTexts: portSubdesc.setDescription('The port second description')
monitor = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10))
power1InputStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-present", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power1InputStatus.setStatus('current')
if mibBuilder.loadTexts: power1InputStatus.setDescription('The status of the first power input.')
power2InputStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-present", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power2InputStatus.setStatus('current')
if mibBuilder.loadTexts: power2InputStatus.setDescription('The status of the second power input.')
monitorPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 3), )
if mibBuilder.loadTexts: monitorPortTable.setStatus('current')
if mibBuilder.loadTexts: monitorPortTable.setDescription('The  port table of monitor function.')
monitorPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 3, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorPortEntry.setStatus('current')
if mibBuilder.loadTexts: monitorPortEntry.setDescription('The port table entry of monitor function.')
monitorLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("disable", -1), ("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorLinkStatus.setStatus('current')
if mibBuilder.loadTexts: monitorLinkStatus.setDescription('The port link status.')
monitorSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 4, 3, 2, 1, 0, -1))).clone(namedValues=NamedValues(("speed1000M-Full", 5), ("speed1000M-Half", 4), ("speed100M-Full", 3), ("speed100M-Half", 2), ("speed10M-Full", 1), ("speed10M-Half", 0), ("na", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorSpeed.setStatus('current')
if mibBuilder.loadTexts: monitorSpeed.setDescription('The port speed and duplex status.')
monitorAutoMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0, -1))).clone(namedValues=NamedValues(("auto", 2), ("mdix", 1), ("mdi", 0), ("na", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorAutoMDI.setStatus('current')
if mibBuilder.loadTexts: monitorAutoMDI.setDescription('The port MDI/MDIX status.')
monitorTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorTraffic.setStatus('current')
if mibBuilder.loadTexts: monitorTraffic.setDescription('The trafic loading percentage of port.')
monitorFDXFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFDXFlowCtrl.setStatus('current')
if mibBuilder.loadTexts: monitorFDXFlowCtrl.setDescription('The Full-Duplex flow control status')
monitorTxTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorTxTraffic.setStatus('current')
if mibBuilder.loadTexts: monitorTxTraffic.setDescription('The TX  traffic loading percentage of port.')
monitorRxTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRxTraffic.setStatus('current')
if mibBuilder.loadTexts: monitorRxTraffic.setDescription('The RTX  traffic loading percentage of port.')
monitorDiTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 4), )
if mibBuilder.loadTexts: monitorDiTable.setStatus('current')
if mibBuilder.loadTexts: monitorDiTable.setDescription('The DI table of monitor function.')
monitorDiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 4, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "diIndex"))
if mibBuilder.loadTexts: monitorDiEntry.setStatus('current')
if mibBuilder.loadTexts: monitorDiEntry.setDescription('The DI table entry of monitor function.')
diIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diIndex.setStatus('current')
if mibBuilder.loadTexts: diIndex.setDescription('The DI index of monitor function')
diInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diInputStatus.setStatus('current')
if mibBuilder.loadTexts: diInputStatus.setDescription('The DI input status.')
monitorFiberCheckTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 11), )
if mibBuilder.loadTexts: monitorFiberCheckTable.setStatus('current')
if mibBuilder.loadTexts: monitorFiberCheckTable.setDescription('The Fiber Check table of monitor function.')
monitorFiberCheckEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 11, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorFiberCheckEntry.setStatus('current')
if mibBuilder.loadTexts: monitorFiberCheckEntry.setDescription('The fiber check table entry of monitor function.')
fiberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberPort.setStatus('current')
if mibBuilder.loadTexts: fiberPort.setDescription('The fiber index of monitor function')
fiberModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberModelName.setStatus('current')
if mibBuilder.loadTexts: fiberModelName.setDescription('The fiber ModelName of monitor function')
fiberWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberWaveLength.setStatus('current')
if mibBuilder.loadTexts: fiberWaveLength.setDescription('The fiber wavelength')
fiberVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberVoltage.setStatus('current')
if mibBuilder.loadTexts: fiberVoltage.setDescription('The fiber Voltage of monitor function')
fiberTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberTemperature.setStatus('current')
if mibBuilder.loadTexts: fiberTemperature.setDescription('The fiber Temperature of monitor function')
fiberTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberTempWarn.setStatus('current')
if mibBuilder.loadTexts: fiberTempWarn.setDescription('The Fiber Temperature warning value of monitor function')
fiberTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberTxPower.setStatus('current')
if mibBuilder.loadTexts: fiberTxPower.setDescription('The fiber TX power of monitor function')
fiberTxPowerWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 11, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberTxPowerWarn.setStatus('current')
if mibBuilder.loadTexts: fiberTxPowerWarn.setDescription('The fiber TX power warning value of monitor function')
fiberRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 11, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberRxPower.setStatus('current')
if mibBuilder.loadTexts: fiberRxPower.setDescription('The fiber RX power of monitor function')
fiberRxPowerWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 11, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberRxPowerWarn.setStatus('current')
if mibBuilder.loadTexts: fiberRxPowerWarn.setDescription('The Fiber RX power warning value of monitor function')
fiberSN = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 11, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberSN.setStatus('current')
if mibBuilder.loadTexts: fiberSN.setDescription('The fiber serial number')
powerConsumption = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 10, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerConsumption.setStatus('current')
if mibBuilder.loadTexts: powerConsumption.setDescription('Current power comsuption(Watts). Accurate to second decimal place.')
emailWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 11))
emailService = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 11, 1))
emailWarningSMTPServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 11, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSMTPServer.setStatus('current')
if mibBuilder.loadTexts: emailWarningSMTPServer.setDescription("The SMTP server's Ip Address/Domain name of email warning function.")
emailWarningFirstRecipientEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFirstRecipientEmailAddr.setStatus('current')
if mibBuilder.loadTexts: emailWarningFirstRecipientEmailAddr.setDescription('The first recipient email address of email warning function.')
emailWarningSecondRecipientEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSecondRecipientEmailAddr.setStatus('current')
if mibBuilder.loadTexts: emailWarningSecondRecipientEmailAddr.setDescription('The second recipient email address of email warning function.')
emailWarningThirdRecipientEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 11, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningThirdRecipientEmailAddr.setStatus('current')
if mibBuilder.loadTexts: emailWarningThirdRecipientEmailAddr.setDescription('The third recipient email address of email warning function.')
emailWarningFourthRecipientEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 11, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFourthRecipientEmailAddr.setStatus('current')
if mibBuilder.loadTexts: emailWarningFourthRecipientEmailAddr.setDescription('The fourth recipient email address of email warning function.')
emailWarningSMTPPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSMTPPort.setStatus('current')
if mibBuilder.loadTexts: emailWarningSMTPPort.setDescription("The SMTP server's port of email warning function.")
emailWarningSMTPUser = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 11, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSMTPUser.setStatus('current')
if mibBuilder.loadTexts: emailWarningSMTPUser.setDescription('The registered user account for SMTP service of email warning function.')
emailWarningSMTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 11, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSMTPPassword.setStatus('current')
if mibBuilder.loadTexts: emailWarningSMTPPassword.setDescription('The registered user password for SMTP service of email warning function.')
emailWarningSMTPTLS = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSMTPTLS.setStatus('current')
if mibBuilder.loadTexts: emailWarningSMTPTLS.setDescription('The SMTP server use TLS of email warning function.')
emailWarningSMTPAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("plain", 0), ("login", 1), ("cram-md5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSMTPAuthMethod.setStatus('current')
if mibBuilder.loadTexts: emailWarningSMTPAuthMethod.setDescription('The SMTP server use login method of email warning function.')
emailWarningSenderEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 11, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSenderEmailAddr.setStatus('current')
if mibBuilder.loadTexts: emailWarningSenderEmailAddr.setDescription('The sender email address of email warning function.')
setDeviceIp = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 12))
setDevIpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 12, 1), )
if mibBuilder.loadTexts: setDevIpTable.setStatus('current')
if mibBuilder.loadTexts: setDevIpTable.setDescription('The set devvice IP table.')
setDevIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 12, 1, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "setDevIpIndex"))
if mibBuilder.loadTexts: setDevIpEntry.setStatus('current')
if mibBuilder.loadTexts: setDevIpEntry.setDescription('The set devvice IP table entry.')
setDevIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDevIpIndex.setStatus('current')
if mibBuilder.loadTexts: setDevIpIndex.setDescription('The set devvice IP index.')
setDevIpCurrentIpofDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDevIpCurrentIpofDevice.setStatus('current')
if mibBuilder.loadTexts: setDevIpCurrentIpofDevice.setDescription('The current IP address of connected to this port.')
setDevIpPresentBy = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("no", 0), ("dhcpClient", 1), ("rarp", 2), ("bootp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: setDevIpPresentBy.setStatus('current')
if mibBuilder.loadTexts: setDevIpPresentBy.setDescription('The protocol used that assigning IP to the device.')
setDevIpDedicatedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 12, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setDevIpDedicatedIp.setStatus('current')
if mibBuilder.loadTexts: setDevIpDedicatedIp.setDescription('The IP address when assign to the device connected to this port.')
mirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 13))
targetPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: targetPort.setStatus('current')
if mibBuilder.loadTexts: targetPort.setDescription('The mirrored port of mirroring function.')
mirroringPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirroringPort.setStatus('current')
if mibBuilder.loadTexts: mirroringPort.setDescription('The mirroring port of mirroring function.')
monitorDirection = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inputDataStream", 0), ("outputDataStream", 1), ("biDirectional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorDirection.setStatus('current')
if mibBuilder.loadTexts: monitorDirection.setDescription('The traffic direction of mirroring function.')
portTrunking = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 14))
trunkSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 14, 1), )
if mibBuilder.loadTexts: trunkSettingTable.setStatus('current')
if mibBuilder.loadTexts: trunkSettingTable.setDescription('Port Trunking Setting Table.')
trunkSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 14, 1, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "trunkSettingIndex"))
if mibBuilder.loadTexts: trunkSettingEntry.setStatus('current')
if mibBuilder.loadTexts: trunkSettingEntry.setDescription('Port Trunking Setting Entry.')
trunkSettingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkSettingIndex.setStatus('current')
if mibBuilder.loadTexts: trunkSettingIndex.setDescription('Trunking Group Index.')
trunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkType.setStatus('current')
if mibBuilder.loadTexts: trunkType.setDescription('Trunking Group Type.')
trunkMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 14, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkMemberPorts.setStatus('current')
if mibBuilder.loadTexts: trunkMemberPorts.setDescription('Trunking Group Member Ports.')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 14, 2), )
if mibBuilder.loadTexts: trunkTable.setStatus('current')
if mibBuilder.loadTexts: trunkTable.setDescription('Port Trunking Table.')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 14, 2, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "trunkIndex"), (0, "MOXA-EDSG512E8POE-MIB", "trunkPort"))
if mibBuilder.loadTexts: trunkEntry.setStatus('current')
if mibBuilder.loadTexts: trunkEntry.setDescription('Port Trunking Entry.')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIndex.setStatus('current')
if mibBuilder.loadTexts: trunkIndex.setDescription('Trunking Group Index.')
trunkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkPort.setStatus('current')
if mibBuilder.loadTexts: trunkPort.setDescription('Trunking Group Member Port.')
trunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("fail", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkStatus.setStatus('current')
if mibBuilder.loadTexts: trunkStatus.setDescription('Trunking Port Status.')
commRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16))
protocolOfRedundancySetup = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("spanningTree", 1), ("turboRing", 2), ("turboRingV2", 3), ("turboChain", 4), ("mstp", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolOfRedundancySetup.setStatus('current')
if mibBuilder.loadTexts: protocolOfRedundancySetup.setDescription('This set the redundancy protocol of this switch. ')
turboRing = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2))
turboRingMaster = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingMaster.setStatus('current')
if mibBuilder.loadTexts: turboRingMaster.setDescription('Is this a Master or Slave.')
turboRingMasterSetup = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingMasterSetup.setStatus('current')
if mibBuilder.loadTexts: turboRingMasterSetup.setDescription('Set this to be Master.')
turboRingPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 3), )
if mibBuilder.loadTexts: turboRingPortTable.setStatus('current')
if mibBuilder.loadTexts: turboRingPortTable.setDescription('Turbo Ring Port Table.')
turboRingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 3, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "turboRingPortIndex"))
if mibBuilder.loadTexts: turboRingPortEntry.setStatus('current')
if mibBuilder.loadTexts: turboRingPortEntry.setDescription('Turbo Ring Port Entry.')
turboRingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortIndex.setStatus('current')
if mibBuilder.loadTexts: turboRingPortIndex.setDescription('Turbo Ring Port Index.')
turboRingPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portDisabled", 0), ("notTurboRingPort", 1), ("linkDown", 2), ("blocked", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortStatus.setStatus('current')
if mibBuilder.loadTexts: turboRingPortStatus.setDescription('Turbo Ring Port Status.')
turboRingPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: turboRingPortDesignatedBridge.setDescription("The MAC address of the bridge which this\n              port considers to be the Designated Bridge for\n              this port's segment.")
turboRingPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: turboRingPortDesignatedPort.setDescription("The Port Number of the port on the Designated\n               Bridge for this port's segment.")
turboRingDesignatedMaster = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingDesignatedMaster.setStatus('current')
if mibBuilder.loadTexts: turboRingDesignatedMaster.setDescription('The MAC address of the bridge which is the Master of the TURBO RING.')
turboRingRdntPort1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingRdntPort1.setStatus('current')
if mibBuilder.loadTexts: turboRingRdntPort1.setDescription('The port number of 1st Redundant Port on the TURBO RING.')
turboRingRdntPort2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingRdntPort2.setStatus('current')
if mibBuilder.loadTexts: turboRingRdntPort2.setDescription('The port number of 2nd Redundant Port on the TURBO RING.')
turboRingEnableCoupling = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingEnableCoupling.setStatus('current')
if mibBuilder.loadTexts: turboRingEnableCoupling.setDescription('This enable the ring coupling function.')
turboRingCouplingPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingCouplingPort.setStatus('current')
if mibBuilder.loadTexts: turboRingCouplingPort.setDescription('The coupling port of ring coupling function.')
turboRingCouplingPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("portDisabled", 0), ("notCouplingPort", 1), ("linkDown", 2), ("blocked", 3), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingCouplingPortStatus.setStatus('current')
if mibBuilder.loadTexts: turboRingCouplingPortStatus.setDescription('The coupling port status of ring coupling function.')
turboRingControlPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboRingControlPort.setStatus('current')
if mibBuilder.loadTexts: turboRingControlPort.setDescription('The control port of ring coupling function.')
turboRingControlPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("portDisabled", 0), ("notControlPort", 1), ("linkDown", 2), ("blocked", 3), ("forwarding", 5), ("inactive", 6), ("active", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingControlPortStatus.setStatus('current')
if mibBuilder.loadTexts: turboRingControlPortStatus.setDescription('The control port status of ring coupling function.')
turboRingBrokenStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("normal", 1), ("broken", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboRingBrokenStatus.setStatus('current')
if mibBuilder.loadTexts: turboRingBrokenStatus.setDescription('Turbo Ring broken display.')
spanningTree = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 3))
spanningTreeRoot = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeRoot.setStatus('current')
if mibBuilder.loadTexts: spanningTreeRoot.setDescription('The root of spanning tree.')
spanningTreeBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4096, 8192, 12288, 16384, 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344, 61440))).clone(namedValues=NamedValues(("priority0", 0), ("priority4096", 4096), ("priority8192", 8192), ("priority12288", 12288), ("priority16384", 16384), ("priority20480", 20480), ("priority24576", 24576), ("priority28672", 28672), ("priority32768", 32768), ("priority36864", 36864), ("priority40960", 40960), ("priority45056", 45056), ("priority49152", 49152), ("priority53248", 53248), ("priority57344", 57344), ("priority61440", 61440)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeBridgePriority.setStatus('current')
if mibBuilder.loadTexts: spanningTreeBridgePriority.setDescription('The bridge priority of spanning tree protocol.')
spanningTreeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeHelloTime.setStatus('current')
if mibBuilder.loadTexts: spanningTreeHelloTime.setDescription('The hello time of spanning tree protocol.')
spanningTreeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeMaxAge.setStatus('current')
if mibBuilder.loadTexts: spanningTreeMaxAge.setDescription('The max. age of spanning tree protocol.')
spanningTreeForwardingDelay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreeForwardingDelay.setStatus('current')
if mibBuilder.loadTexts: spanningTreeForwardingDelay.setDescription('Tje forwarding delay of spanning tree protocol.')
spanningTreeTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 3, 6), )
if mibBuilder.loadTexts: spanningTreeTable.setStatus('current')
if mibBuilder.loadTexts: spanningTreeTable.setDescription('The spanning tree table.')
spanningTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 3, 6, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "spanningTreeIndex"))
if mibBuilder.loadTexts: spanningTreeEntry.setStatus('current')
if mibBuilder.loadTexts: spanningTreeEntry.setDescription('The spanning tree port entry.')
spanningTreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeIndex.setStatus('current')
if mibBuilder.loadTexts: spanningTreeIndex.setDescription('The index of spanning tree table.')
enableSpanningTree = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSpanningTree.setStatus('current')
if mibBuilder.loadTexts: enableSpanningTree.setDescription('This enable of spanning tree protocol for this port.')
spanningTreePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240))).clone(namedValues=NamedValues(("priority0", 0), ("priority16", 16), ("priority32", 32), ("priority48", 48), ("priority64", 64), ("priority80", 80), ("priority96", 96), ("priority112", 112), ("priority128", 128), ("priority144", 144), ("priority160", 160), ("priority176", 176), ("priority192", 192), ("priority208", 208), ("priority224", 224), ("priority240", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreePortPriority.setStatus('current')
if mibBuilder.loadTexts: spanningTreePortPriority.setDescription('The port priority of spanning tree protocol.')
spanningTreePortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 3, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreePortCost.setStatus('current')
if mibBuilder.loadTexts: spanningTreePortCost.setDescription('The port cost of spanning tree protocol.')
spanningTreePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portDisabled", 0), ("notSpanningTreePort", 1), ("linkDown", 2), ("blocked", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreePortStatus.setStatus('current')
if mibBuilder.loadTexts: spanningTreePortStatus.setDescription('The port status of spanning tree protocol.')
spanningTreePortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTreePortEdge.setStatus('current')
if mibBuilder.loadTexts: spanningTreePortEdge.setDescription('This configures the Edge Port property for this port.')
activeProtocolOfRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("spanningTree", 1), ("turboRing", 2), ("turboRingV2", 3), ("turboChain", 4), ("mstp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeProtocolOfRedundancy.setStatus('current')
if mibBuilder.loadTexts: activeProtocolOfRedundancy.setDescription("This shows the active redundancy protocol of this switch now. The none(0) stauts will\n         be showed if only if the switch's redundancy protocol is set to spanning tree and none of\n         ports enable spanning tree.")
turboRingV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5))
turboRingV2Ring1 = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 1))
ringIndexRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringIndexRing1.setStatus('current')
if mibBuilder.loadTexts: ringIndexRing1.setDescription('The turboRingV2 Ring Index.')
ringEnableRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringEnableRing1.setStatus('current')
if mibBuilder.loadTexts: ringEnableRing1.setDescription('The turboRingV2 Ring1 Enalbe Config.')
masterSetupRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: masterSetupRing1.setStatus('current')
if mibBuilder.loadTexts: masterSetupRing1.setDescription('Is this a Master or Slave.')
masterStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: masterStatusRing1.setStatus('current')
if mibBuilder.loadTexts: masterStatusRing1.setDescription('Set this to be Master.')
designatedMasterRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: designatedMasterRing1.setStatus('current')
if mibBuilder.loadTexts: designatedMasterRing1.setDescription('The MAC address of the bridge which is the Master of the turboRingV2.')
rdnt1stPortRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt1stPortRing1.setStatus('current')
if mibBuilder.loadTexts: rdnt1stPortRing1.setDescription('The port number of 1st Redundant Port on the turboRingV2.')
rdnt1stPortStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt1stPortStatusRing1.setStatus('current')
if mibBuilder.loadTexts: rdnt1stPortStatusRing1.setDescription('The status of 1st Redundant Port on the turboRingV2.')
rdnt2ndPortRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt2ndPortRing1.setStatus('current')
if mibBuilder.loadTexts: rdnt2ndPortRing1.setDescription('The port number of 2nd Redundant Port on the turboRingV2.')
rdnt2ndPortStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt2ndPortStatusRing1.setStatus('current')
if mibBuilder.loadTexts: rdnt2ndPortStatusRing1.setDescription('The status of 2nd Redundant Port on the turboRingV2.')
brokenStatusRing1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("normal", 1), ("broken", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brokenStatusRing1.setStatus('current')
if mibBuilder.loadTexts: brokenStatusRing1.setDescription('turboRingV2 broken display.')
turboRingV2Ring2 = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 2))
ringIndexRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringIndexRing2.setStatus('current')
if mibBuilder.loadTexts: ringIndexRing2.setDescription('The turboRingV2 Ring Index.')
ringEnableRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringEnableRing2.setStatus('current')
if mibBuilder.loadTexts: ringEnableRing2.setDescription('The turboRingV2 Ring2 Enalbe Config.')
masterSetupRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: masterSetupRing2.setStatus('current')
if mibBuilder.loadTexts: masterSetupRing2.setDescription('Is this a Master or Slave.')
masterStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: masterStatusRing2.setStatus('current')
if mibBuilder.loadTexts: masterStatusRing2.setDescription('Set this to be Master.')
designatedMasterRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 2, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: designatedMasterRing2.setStatus('current')
if mibBuilder.loadTexts: designatedMasterRing2.setDescription('The MAC address of the bridge which is the Master of the turboRingV2.')
rdnt1stPortRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt1stPortRing2.setStatus('current')
if mibBuilder.loadTexts: rdnt1stPortRing2.setDescription('The port number of 1st Redundant Port on the turboRingV2.')
rdnt1stPortStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt1stPortStatusRing2.setStatus('current')
if mibBuilder.loadTexts: rdnt1stPortStatusRing2.setDescription('The status of 1st Redundant Port on the turboRingV2.')
rdnt2ndPortRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnt2ndPortRing2.setStatus('current')
if mibBuilder.loadTexts: rdnt2ndPortRing2.setDescription('The port number of 2nd Redundant Port on the turboRingV2.')
rdnt2ndPortStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnt2ndPortStatusRing2.setStatus('current')
if mibBuilder.loadTexts: rdnt2ndPortStatusRing2.setDescription('The status of 2nd Redundant Port on the turboRingV2.')
brokenStatusRing2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("normal", 1), ("broken", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brokenStatusRing2.setStatus('current')
if mibBuilder.loadTexts: brokenStatusRing2.setDescription('turboRingV2 broken display.')
turboRingV2Coupling = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 3))
couplingEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: couplingEnable.setStatus('current')
if mibBuilder.loadTexts: couplingEnable.setDescription('Setting the ring coupling enable.')
couplingMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dualHoming", 1), ("couplingBackup", 2), ("couplingPrimary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: couplingMode.setStatus('current')
if mibBuilder.loadTexts: couplingMode.setDescription('Setting the ring coupling mode.')
coupling1stPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coupling1stPort.setStatus('current')
if mibBuilder.loadTexts: coupling1stPort.setDescription("If in 'DUAL HOMING' mode,port name is 'Primary port',If in 'COUPLING' mode,port name is 'Coupling port'")
coupling1stPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coupling1stPortStatus.setStatus('current')
if mibBuilder.loadTexts: coupling1stPortStatus.setDescription('The 1st coupling port status of coupling function.')
coupling2ndPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coupling2ndPort.setStatus('current')
if mibBuilder.loadTexts: coupling2ndPort.setDescription("If in 'DUAL HOMING' mode,port name is 'Backup port',If in 'COUPLING' mode,port name is no used.")
coupling2ndPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 5, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("notRedundant", 1), ("linkdown", 2), ("blocking", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coupling2ndPortStatus.setStatus('current')
if mibBuilder.loadTexts: coupling2ndPortStatus.setDescription('The 2nd coupling port status of coupling function.')
turboChain = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 6))
turboChainRole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("head", 1), ("member", 2), ("tail", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboChainRole.setStatus('current')
if mibBuilder.loadTexts: turboChainRole.setDescription('The Role of TURBO CHAIN.')
turboChainPort1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboChainPort1.setStatus('current')
if mibBuilder.loadTexts: turboChainPort1.setDescription('The port number of 1st Redundant Port on the TURBO CHAIN.\n             If switch role is Turbo Chain Head, this is Head port,\n             If Switch role is  Turbo Chain Tail, this is Tail port.')
turboChainPort2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: turboChainPort2.setStatus('current')
if mibBuilder.loadTexts: turboChainPort2.setDescription('The port number of 2nd Redundant Port on the TURBO CHAIN.\n             It is the member port of TurboChain')
turboChainPort1Status = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notTurboChainPort", 0), ("linkDown", 1), ("blocking", 2), ("blocked", 3), ("forwarding", 4), ("na", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort1Status.setStatus('current')
if mibBuilder.loadTexts: turboChainPort1Status.setDescription('Turbo Chain Port Status.')
turboChainPort2Status = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notTurboChainPort", 0), ("linkDown", 1), ("blocking", 2), ("blocked", 3), ("forwarding", 4), ("na", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort2Status.setStatus('current')
if mibBuilder.loadTexts: turboChainPort2Status.setDescription('Turbo Chain Port Status.')
turboChainPort1PartnerBridge = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 6, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort1PartnerBridge.setStatus('current')
if mibBuilder.loadTexts: turboChainPort1PartnerBridge.setDescription('The MAC address of the next bridge ')
turboChainPort2PartnerBridge = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 16, 6, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: turboChainPort2PartnerBridge.setStatus('current')
if mibBuilder.loadTexts: turboChainPort2PartnerBridge.setDescription('The MAC address of the neighbor Turbo Chain switch')
relayWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17))
relayWarningTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 11), )
if mibBuilder.loadTexts: relayWarningTable.setStatus('current')
if mibBuilder.loadTexts: relayWarningTable.setDescription('The relay warning table.')
relayWarningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 11, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "relayAlarmIndex"))
if mibBuilder.loadTexts: relayWarningEntry.setStatus('current')
if mibBuilder.loadTexts: relayWarningEntry.setDescription('Relay Warning Entry.')
relayAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: relayAlarmIndex.setDescription('The Relay alarm index.')
relayWarningRelayContact = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("opened", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningRelayContact.setStatus('current')
if mibBuilder.loadTexts: relayWarningRelayContact.setDescription('The first Relay contact status.')
overrideRelayWarningSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overrideRelayWarningSetting.setStatus('current')
if mibBuilder.loadTexts: overrideRelayWarningSetting.setDescription('Override the relay warning setting.')
relayWarningPower1Off = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningPower1Off.setStatus('current')
if mibBuilder.loadTexts: relayWarningPower1Off.setDescription('The relay contact will be opened while the first power input off.')
relayWarningPower1OffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningPower1OffStatus.setStatus('current')
if mibBuilder.loadTexts: relayWarningPower1OffStatus.setDescription('The relay contact is opened as the first power input off..')
relayWarningPower2Off = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningPower2Off.setStatus('current')
if mibBuilder.loadTexts: relayWarningPower2Off.setDescription('The relay contact will be opened while the second power input off.')
relayWarningPower2OffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningPower2OffStatus.setStatus('current')
if mibBuilder.loadTexts: relayWarningPower2OffStatus.setDescription('The relay contact is opened as the second power input off.')
relayWarningTurboRingBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningTurboRingBreak.setStatus('current')
if mibBuilder.loadTexts: relayWarningTurboRingBreak.setDescription('The relay contact will be opened while turbo ring break.')
relayWarningTurboRingBreakStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningTurboRingBreakStatus.setStatus('current')
if mibBuilder.loadTexts: relayWarningTurboRingBreakStatus.setDescription('The relay contact is opened while turbo ring is broken.')
portRelayWarningTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 12), )
if mibBuilder.loadTexts: portRelayWarningTable.setStatus('current')
if mibBuilder.loadTexts: portRelayWarningTable.setDescription('The relay warning port table.')
portRelayWarningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 12, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "portIndex"), (0, "MOXA-EDSG512E8POE-MIB", "relayAlarmIndex"))
if mibBuilder.loadTexts: portRelayWarningEntry.setStatus('current')
if mibBuilder.loadTexts: portRelayWarningEntry.setDescription('Port Relay Warning Entry.')
relayWarningLinkChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ignore", 0), ("on2off", 1), ("off2on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningLinkChanged.setStatus('current')
if mibBuilder.loadTexts: relayWarningLinkChanged.setDescription("The relay contact will be opened while this port's link status is changed.")
relayWarningLinkChangedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningLinkChangedStatus.setStatus('current')
if mibBuilder.loadTexts: relayWarningLinkChangedStatus.setDescription("The relay contact is opened as this port's link status is changed.")
relayWarningTrafficOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningTrafficOverload.setStatus('current')
if mibBuilder.loadTexts: relayWarningTrafficOverload.setDescription("The relay contact will be opened while this port's traffic is overload.")
relayWarningTrafficOverloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningTrafficOverloadStatus.setStatus('current')
if mibBuilder.loadTexts: relayWarningTrafficOverloadStatus.setDescription("The relay contact is opened as this port's traffic is overload.")
relayWarningRxTrafficThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningRxTrafficThreshold.setStatus('current')
if mibBuilder.loadTexts: relayWarningRxTrafficThreshold.setDescription('The threshold of the port traffic will be over loading.')
relayWarningTrafficDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningTrafficDuration.setStatus('current')
if mibBuilder.loadTexts: relayWarningTrafficDuration.setDescription('The duration of the port traffic will be over loading.')
diRelayWarningTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 13), )
if mibBuilder.loadTexts: diRelayWarningTable.setStatus('current')
if mibBuilder.loadTexts: diRelayWarningTable.setDescription('The relay warning DI table.')
diRelayWarningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 13, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "diIndex"), (0, "MOXA-EDSG512E8POE-MIB", "relayAlarmIndex"))
if mibBuilder.loadTexts: diRelayWarningEntry.setStatus('current')
if mibBuilder.loadTexts: diRelayWarningEntry.setDescription('DI Relay Warning Entry.')
relayWarningDiInputChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayWarningDiInputChanged.setStatus('current')
if mibBuilder.loadTexts: relayWarningDiInputChanged.setDescription('The relay contact will be opened while the DI input changed.')
relayWarningDiInputChangedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 17, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-triggered", 0), ("triggered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayWarningDiInputChangedStatus.setStatus('current')
if mibBuilder.loadTexts: relayWarningDiInputChangedStatus.setDescription('The relay contact is opened as the first DI input changed..')
trafficPrioritization = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18))
qosClassification = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 1))
schedulingMechanism = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("schedweightfair", 0), ("schedstrict", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulingMechanism.setStatus('current')
if mibBuilder.loadTexts: schedulingMechanism.setDescription('The scheduling mechanism.')
qosPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 1, 2), )
if mibBuilder.loadTexts: qosPortTable.setStatus('current')
if mibBuilder.loadTexts: qosPortTable.setDescription('The QoS port table.')
qosPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 1, 2, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: qosPortEntry.setStatus('current')
if mibBuilder.loadTexts: qosPortEntry.setDescription('The QoS Port Entry.')
dscpInspection = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dscpInspection.setStatus('current')
if mibBuilder.loadTexts: dscpInspection.setDescription('This enable the inspection of dscp field.')
cosInspection = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosInspection.setStatus('current')
if mibBuilder.loadTexts: cosInspection.setDescription('This enable the inspection of CoS field.')
portPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPriority.setStatus('current')
if mibBuilder.loadTexts: portPriority.setDescription('The deault priority of the port.')
priorityMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 2))
priorityMappingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 2, 1), )
if mibBuilder.loadTexts: priorityMappingTable.setStatus('current')
if mibBuilder.loadTexts: priorityMappingTable.setDescription('The priority mapping table.')
priorityMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 2, 1, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "priorityTag"))
if mibBuilder.loadTexts: priorityMappingEntry.setStatus('current')
if mibBuilder.loadTexts: priorityMappingEntry.setDescription('The Priority mapping Entry.')
priorityTag = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: priorityTag.setStatus('current')
if mibBuilder.loadTexts: priorityTag.setDescription('The priority tag of QOS field.')
priorityMappedQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("trafficclass0", 0), ("trafficclass1", 1), ("trafficclass2", 2), ("trafficclass3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priorityMappedQueue.setStatus('current')
if mibBuilder.loadTexts: priorityMappedQueue.setDescription("The egress queue corresponding to it's priority value.")
dscpMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 3))
dscpMappingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 3, 1), )
if mibBuilder.loadTexts: dscpMappingTable.setStatus('current')
if mibBuilder.loadTexts: dscpMappingTable.setDescription('The DSCP mapping table.')
dscpMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 3, 1, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "dscpClass"))
if mibBuilder.loadTexts: dscpMappingEntry.setStatus('current')
if mibBuilder.loadTexts: dscpMappingEntry.setDescription('DSCP mapping Entry.')
dscpClass = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dscpClass.setStatus('current')
if mibBuilder.loadTexts: dscpClass.setDescription('The DSCP class of TOS field.')
dscpMappedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 18, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dscpMappedPriority.setStatus('current')
if mibBuilder.loadTexts: dscpMappedPriority.setDescription("The frame's priority corresponding to it's DSCP class value.")
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19))
vlanPortSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 1), )
if mibBuilder.loadTexts: vlanPortSettingTable.setStatus('current')
if mibBuilder.loadTexts: vlanPortSettingTable.setDescription('The vlan seting table of ports.')
vlanPortSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 1, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: vlanPortSettingEntry.setStatus('current')
if mibBuilder.loadTexts: vlanPortSettingEntry.setDescription('Port Setting Entry of VLAN.')
portVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("access", 0), ("trunk", 1), ("hybrid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVlanType.setStatus('current')
if mibBuilder.loadTexts: portVlanType.setDescription('The vlan type of port.')
portDefaultVid = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDefaultVid.setStatus('current')
if mibBuilder.loadTexts: portDefaultVid.setDescription('The PVID of port.')
portFixedVid = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFixedVid.setStatus('current')
if mibBuilder.loadTexts: portFixedVid.setDescription('The fixed vids of (trunk) port.')
portForbiddenVid = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForbiddenVid.setStatus('current')
if mibBuilder.loadTexts: portForbiddenVid.setDescription('The forbidden vids of (trunk)port.')
portFixedVidUntag = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFixedVidUntag.setStatus('current')
if mibBuilder.loadTexts: portFixedVidUntag.setDescription('The fixed untag vids of (trunk) port.')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 2), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
if mibBuilder.loadTexts: vlanTable.setDescription('The VLAN table.')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 2, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "vlanId"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
if mibBuilder.loadTexts: vlanEntry.setDescription('VLAN Entry.')
vlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanId.setStatus('current')
if mibBuilder.loadTexts: vlanId.setDescription('The VLAN id.')
joinedAccessPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 2, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joinedAccessPorts.setStatus('current')
if mibBuilder.loadTexts: joinedAccessPorts.setDescription('The access ports that joined this VID.')
joinedTrunkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 2, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joinedTrunkPorts.setStatus('current')
if mibBuilder.loadTexts: joinedTrunkPorts.setDescription('The trunk ports that joined this VID.')
joinedHybridPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 2, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joinedHybridPorts.setStatus('current')
if mibBuilder.loadTexts: joinedHybridPorts.setDescription('The hybrid ports that joined this VID.')
vlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanName.setStatus('current')
if mibBuilder.loadTexts: vlanName.setDescription('The VLAN name.')
managementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementVlanId.setStatus('current')
if mibBuilder.loadTexts: managementVlanId.setDescription('The management VLAN id.')
vlanType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tagBased", 0), ("portBased", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanType.setStatus('current')
if mibBuilder.loadTexts: vlanType.setDescription('VLAN Type.')
portbaseVlanSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 5), )
if mibBuilder.loadTexts: portbaseVlanSettingTable.setStatus('current')
if mibBuilder.loadTexts: portbaseVlanSettingTable.setDescription('Port base Vlan Setting Table.')
portbaseVlanSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 5, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "portbaseVlanSettingIndex"))
if mibBuilder.loadTexts: portbaseVlanSettingEntry.setStatus('current')
if mibBuilder.loadTexts: portbaseVlanSettingEntry.setDescription('Port base Vlan  Setting Entry.')
portbaseVlanSettingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portbaseVlanSettingIndex.setStatus('current')
if mibBuilder.loadTexts: portbaseVlanSettingIndex.setDescription('port base Vlan Group Index.')
portbaseVlanMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 5, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portbaseVlanMemberPorts.setStatus('current')
if mibBuilder.loadTexts: portbaseVlanMemberPorts.setDescription('port base Vlan  Group Member Ports.')
enableGvrp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 19, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableGvrp.setStatus('current')
if mibBuilder.loadTexts: enableGvrp.setDescription('Enable GVRP.')
multicastFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20))
igmpSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 1))
querierQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: querierQueryInterval.setStatus('current')
if mibBuilder.loadTexts: querierQueryInterval.setDescription('This query interval of the querier function for this VLAN.')
igmpSnoopingSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 1, 2), )
if mibBuilder.loadTexts: igmpSnoopingSettingTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopingSettingTable.setDescription('The IGMP snooping setting table.')
igmpSnoopingSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 1, 2, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "vlanId"))
if mibBuilder.loadTexts: igmpSnoopingSettingEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopingSettingEntry.setDescription('The IGMP snooping setting Entry.')
enableIgmpSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableIgmpSnooping.setStatus('current')
if mibBuilder.loadTexts: enableIgmpSnooping.setDescription('This enable the IGMP snooping functon in this VLAN.')
enableQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("igmpv2", 1), ("igmpv3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableQuerier.setStatus('current')
if mibBuilder.loadTexts: enableQuerier.setDescription('This enable the querier function for this VLAN.')
fixedMulticastQuerierPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 1, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fixedMulticastQuerierPorts.setStatus('current')
if mibBuilder.loadTexts: fixedMulticastQuerierPorts.setDescription('The ports that multicast-Querier exist.')
learnedMulticastQuerierPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 1, 2, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedMulticastQuerierPorts.setStatus('current')
if mibBuilder.loadTexts: learnedMulticastQuerierPorts.setDescription('The ports that multicast-Querier exist.')
enableGlobalIgmpSnooping = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableGlobalIgmpSnooping.setStatus('current')
if mibBuilder.loadTexts: enableGlobalIgmpSnooping.setDescription('This enable the IGMP snooping functon .')
multicastFastForwarding = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastFastForwarding.setStatus('current')
if mibBuilder.loadTexts: multicastFastForwarding.setDescription('This Enable Multicast Fast Forwarding Mode functon .')
staticMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 2))
staticMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 2, 1), )
if mibBuilder.loadTexts: staticMulticastTable.setStatus('current')
if mibBuilder.loadTexts: staticMulticastTable.setDescription('The static multicast table.')
staticMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 2, 1, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "staticMulticastAddress"))
if mibBuilder.loadTexts: staticMulticastEntry.setStatus('current')
if mibBuilder.loadTexts: staticMulticastEntry.setDescription('Static multicast Entry.')
staticMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 2, 1, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: staticMulticastAddress.setDescription('The static multicast address.')
staticMulticastPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 2, 1, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMulticastPorts.setStatus('current')
if mibBuilder.loadTexts: staticMulticastPorts.setDescription('The port map of the static multicast address.')
staticMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMulticastStatus.setStatus('current')
if mibBuilder.loadTexts: staticMulticastStatus.setDescription('The status is active to indicate normal.\n            Use createAndGo to create new on multiple SET.\n            Use createAndWait to create new on one SET all then actvie.\n            Use destroy to delete this row.')
gmrp = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 3))
gmrpSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 3, 1), )
if mibBuilder.loadTexts: gmrpSettingTable.setStatus('current')
if mibBuilder.loadTexts: gmrpSettingTable.setDescription('The GMRP setting table.')
gmrpSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 3, 1, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: gmrpSettingEntry.setStatus('current')
if mibBuilder.loadTexts: gmrpSettingEntry.setDescription('The GMRP Setting Entry.')
enableGMRP = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableGMRP.setStatus('current')
if mibBuilder.loadTexts: enableGMRP.setDescription('Enable/Disable GMRP.')
gmrpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 3, 2), )
if mibBuilder.loadTexts: gmrpTable.setStatus('current')
if mibBuilder.loadTexts: gmrpTable.setDescription('The GMRP status table.')
gmrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 3, 2, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "gmrpMulticastGroup"))
if mibBuilder.loadTexts: gmrpEntry.setStatus('current')
if mibBuilder.loadTexts: gmrpEntry.setDescription('The GMRP Status Entry.')
gmrpMulticastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 3, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpMulticastGroup.setStatus('current')
if mibBuilder.loadTexts: gmrpMulticastGroup.setDescription('GMRP multicast group.')
gmrpFixedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 3, 2, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpFixedPorts.setStatus('current')
if mibBuilder.loadTexts: gmrpFixedPorts.setDescription('The ports that joined GMRP multicast group manually.')
gmrpLearnedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 20, 3, 2, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmrpLearnedPorts.setStatus('current')
if mibBuilder.loadTexts: gmrpLearnedPorts.setDescription('The ports that joined GMRP multicast group by GMRP learning.')
rateLimiting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 21))
rateLimitingAction = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("droppacket", 0), ("portDisable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rateLimitingAction.setStatus('current')
if mibBuilder.loadTexts: rateLimitingAction.setDescription('The rate limiting mode.')
droppacketModeRateLimitingIngressTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 21, 1), )
if mibBuilder.loadTexts: droppacketModeRateLimitingIngressTable.setStatus('current')
if mibBuilder.loadTexts: droppacketModeRateLimitingIngressTable.setDescription('The rate limiting table.')
droppacketModeRateLimitingIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 21, 1, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: droppacketModeRateLimitingIngressEntry.setStatus('current')
if mibBuilder.loadTexts: droppacketModeRateLimitingIngressEntry.setDescription('Rate limiting Entry.')
ingressLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notlimited", 0), ("percentage03", 1), ("percentage05", 2), ("percentage10", 3), ("percentage15", 4), ("percentage25", 5), ("percentage35", 6), ("percentage50", 7), ("percentage65", 8), ("percentage85", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressLimitRate.setStatus('current')
if mibBuilder.loadTexts: ingressLimitRate.setDescription('The ingress limit mode.')
broadcastStormProtection = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 21, 2))
bcastStormProtection = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 21, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormProtection.setStatus('current')
if mibBuilder.loadTexts: bcastStormProtection.setDescription('Broadcast Storm Protection')
bcastStormProtectionIncludeMcast = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 21, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormProtectionIncludeMcast.setStatus('current')
if mibBuilder.loadTexts: bcastStormProtectionIncludeMcast.setDescription('Broadcast Storm Protection includes Multicast packets')
bcastStormProtectionIncludeUcast = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 21, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormProtectionIncludeUcast.setStatus('current')
if mibBuilder.loadTexts: bcastStormProtectionIncludeUcast.setDescription('Broadcast Storm Protection includes Unicast packets')
portDisableMode = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 21, 3))
portDisableModePeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 21, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDisableModePeriod.setStatus('current')
if mibBuilder.loadTexts: portDisableModePeriod.setDescription('Check time. ')
portDisableModeTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 21, 3, 2), )
if mibBuilder.loadTexts: portDisableModeTable.setStatus('current')
if mibBuilder.loadTexts: portDisableModeTable.setDescription('The rate limiting table.')
portDisableModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 21, 3, 2, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: portDisableModeEntry.setStatus('current')
if mibBuilder.loadTexts: portDisableModeEntry.setDescription('Rate limiting Entry.')
ingressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 21, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("notlimited", 0), ("rateMega1Fps4464", 1), ("rateMega2Fps7441", 2), ("rateMega3Fps14881", 3), ("rateMega4Fps22322", 4), ("rateMega5Fps37203", 5), ("rateMega6Fps52084", 6), ("rateMega7Fps74405", 7), ("rateGiga1Fps44640", 8), ("rateGiga2Fps74410", 9), ("rateGiga3Fps148810", 10), ("rateGiga4Fps223220", 11), ("rateGiga5Fps372030", 12), ("rateGiga6Fps520840", 13), ("rateGiga7Fps744050", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressLimit.setStatus('current')
if mibBuilder.loadTexts: ingressLimit.setDescription('The ingress limit mode.')
security = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22))
userLoginSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 1))
userLoginServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tacacsLocal", 1), ("radiusLocal", 2), ("tacacs", 3), ("radius", 4), ("local", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLoginServer.setStatus('current')
if mibBuilder.loadTexts: userLoginServer.setDescription('Set user login server option.')
tacacsServerSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 1, 2))
tacacsLoginAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 1, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthServer.setStatus('current')
if mibBuilder.loadTexts: tacacsLoginAuthServer.setDescription('Set Tacacs+ Server IP Address/Domain name.')
tacacsLoginAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthPort.setStatus('current')
if mibBuilder.loadTexts: tacacsLoginAuthPort.setDescription('Set Tacacs+ Port.')
tacacsLoginAuthSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 1, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthSharedKey.setStatus('current')
if mibBuilder.loadTexts: tacacsLoginAuthSharedKey.setDescription('Set Tacacs+ Shared Key.')
tacacsLoginAuthAuthType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("ascii", 0), ("pap", 1), ("chap", 2), ("mschap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthAuthType.setStatus('current')
if mibBuilder.loadTexts: tacacsLoginAuthAuthType.setDescription('Set Tacacs+ Shared Key.')
tacacsLoginAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: tacacsLoginAuthTimeout.setDescription('Set Tacacs+ Shared Key.')
radiusServerSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 1, 3))
radiusLoginAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 1, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthServer.setStatus('current')
if mibBuilder.loadTexts: radiusLoginAuthServer.setDescription('Set Radius Server IP Address/Domain name.')
radiusLoginAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthPort.setStatus('current')
if mibBuilder.loadTexts: radiusLoginAuthPort.setDescription('Set Radius Port.')
radiusLoginAuthSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 1, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthSharedKey.setStatus('current')
if mibBuilder.loadTexts: radiusLoginAuthSharedKey.setDescription('Set Radius Shared Key.')
radiusLoginAuthAuthType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pap", 0), ("chap", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthAuthType.setStatus('current')
if mibBuilder.loadTexts: radiusLoginAuthAuthType.setDescription('Set Radius Shared Key.')
radiusLoginAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusLoginAuthTimeout.setDescription('Set Radius Shared Key.')
portAccessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2))
staticPortLockLegacy = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 1))
staticPortLockLegacyAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockLegacyAddress.setStatus('current')
if mibBuilder.loadTexts: staticPortLockLegacyAddress.setDescription('The static port lock address.')
staticPortLockLegacyPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockLegacyPort.setStatus('current')
if mibBuilder.loadTexts: staticPortLockLegacyPort.setDescription('The port of the static port lock address.')
staticPortLockLegacyStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockLegacyStatus.setStatus('current')
if mibBuilder.loadTexts: staticPortLockLegacyStatus.setDescription('The status is active to indicate normal.\n            Use createAndGo to create new on multiple SET.')
dot1x = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2))
dataBaseOption = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("radiuslocal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataBaseOption.setStatus('current')
if mibBuilder.loadTexts: dataBaseOption.setDescription('Set IEEE 802.1X database option.')
dot1xReauthEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xReauthEnable.setStatus('current')
if mibBuilder.loadTexts: dot1xReauthEnable.setDescription('Enable/Disable IEEE 802.1X Re-authentication.')
dot1xReauthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xReauthPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xReauthPeriod.setDescription('Set IEEE 802.1X Re-authentication Period.')
dot1xSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 7), )
if mibBuilder.loadTexts: dot1xSettingTable.setStatus('current')
if mibBuilder.loadTexts: dot1xSettingTable.setDescription('IEEE 802.1X Port Setting Table.')
dot1xSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 7, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: dot1xSettingEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xSettingEntry.setDescription('IEEE 802.1X Port Setting Entry.')
enableDot1X = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableDot1X.setStatus('current')
if mibBuilder.loadTexts: enableDot1X.setDescription('Enable/Disable IEEE 802.1X.')
dot1xReauthTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 8), )
if mibBuilder.loadTexts: dot1xReauthTable.setStatus('current')
if mibBuilder.loadTexts: dot1xReauthTable.setDescription('IEEE 802.1X Re-authentication Table.')
dot1xReauthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 8, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "dot1xReauthPortIndex"))
if mibBuilder.loadTexts: dot1xReauthEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xReauthEntry.setDescription('IEEE 802.1X Re-authentication Entry.')
dot1xReauthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xReauthPortIndex.setStatus('current')
if mibBuilder.loadTexts: dot1xReauthPortIndex.setDescription('IEEE 802.1X Enabled Port Index.')
dot1xReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xReauth.setStatus('current')
if mibBuilder.loadTexts: dot1xReauth.setDescription('Reauth IEEE 802.1X.')
dot1xRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 9))
dot1xSameAsAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSame", 0), ("same", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xSameAsAuthServer.setStatus('current')
if mibBuilder.loadTexts: dot1xSameAsAuthServer.setDescription('Set Radius Server IP Address/Domain name.')
dot1x1stRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x1stRadiusServer.setStatus('current')
if mibBuilder.loadTexts: dot1x1stRadiusServer.setDescription('Set Radius Server IP Address/Domain name.')
dot1x1stRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x1stRadiusPort.setStatus('current')
if mibBuilder.loadTexts: dot1x1stRadiusPort.setDescription('Set Radius Port.')
dot1x1stRadiusSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 9, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x1stRadiusSharedKey.setStatus('current')
if mibBuilder.loadTexts: dot1x1stRadiusSharedKey.setDescription('Set Radius Shared Key.')
dot1x2ndRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 9, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x2ndRadiusServer.setStatus('current')
if mibBuilder.loadTexts: dot1x2ndRadiusServer.setDescription('Set Radius Server IP Address/Domain name.')
dot1x2ndRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x2ndRadiusPort.setStatus('current')
if mibBuilder.loadTexts: dot1x2ndRadiusPort.setDescription('Set Radius Port.')
dot1x2ndRadiusSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 2, 9, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1x2ndRadiusSharedKey.setStatus('current')
if mibBuilder.loadTexts: dot1x2ndRadiusSharedKey.setDescription('Set Radius Shared Key.')
portAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 3), )
if mibBuilder.loadTexts: portAccessControlTable.setStatus('current')
if mibBuilder.loadTexts: portAccessControlTable.setDescription('The Port Access Control table.')
portAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 3, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "portAccessControlAddress"), (0, "MOXA-EDSG512E8POE-MIB", "portAccessControlVid"))
if mibBuilder.loadTexts: portAccessControlEntry.setStatus('current')
if mibBuilder.loadTexts: portAccessControlEntry.setDescription('The Port Access Control table entry.')
portAccessControlAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAccessControlAddress.setStatus('current')
if mibBuilder.loadTexts: portAccessControlAddress.setDescription('The MAC address which is static locked or IEEE 802.1X authorized.')
portAccessControlPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAccessControlPortNo.setStatus('current')
if mibBuilder.loadTexts: portAccessControlPortNo.setDescription('The port number that the Port Access Control address resides.')
portAccessControlAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("staticLock", 1), ("authorized", 2), ("unAuthorized", 3), ("authorizing", 4), ("macAddrSticky", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAccessControlAccessStatus.setStatus('current')
if mibBuilder.loadTexts: portAccessControlAccessStatus.setDescription('The access status of the Port Access Control address.')
portAccessControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portAccessControlStatus.setStatus('current')
if mibBuilder.loadTexts: portAccessControlStatus.setDescription('The status is active to indicate normal.\n            Use createAndGo to create new on multiple SET.\n            Use createAndWait to create new on one SET all then actvie.\n            Use destroy to delete this row.')
portAccessControlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAccessControlVid.setStatus('current')
if mibBuilder.loadTexts: portAccessControlVid.setDescription('The vid number that the Port Access Control address resides.')
portSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4))
portSecurityModeTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 1), )
if mibBuilder.loadTexts: portSecurityModeTable.setStatus('current')
if mibBuilder.loadTexts: portSecurityModeTable.setDescription('Port security mode')
portSecurityModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 1, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "portSecurityModePort"))
if mibBuilder.loadTexts: portSecurityModeEntry.setStatus('current')
if mibBuilder.loadTexts: portSecurityModeEntry.setDescription('Port security mode entry.')
portSecurityModePort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityModePort.setStatus('current')
if mibBuilder.loadTexts: portSecurityModePort.setDescription('Set port security mode to specific port.')
portSecurityModeSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal-mode", 0), ("static-portlock", 1), ("mac-address-sticky", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityModeSelect.setStatus('current')
if mibBuilder.loadTexts: portSecurityModeSelect.setDescription('Select the port security mode of the port.')
portSecurityModeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityModeLimit.setStatus('current')
if mibBuilder.loadTexts: portSecurityModeLimit.setDescription('If port security mode is MAC address sticky, set the limit of the port.\n             If port security mode is not MAC address sticky, set the limit to 0.')
portSecurityModeViolationPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityModeViolationPortDisable.setStatus('current')
if mibBuilder.loadTexts: portSecurityModeViolationPortDisable.setDescription('Enable the violation port disable.')
portSecurityModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityModeStatus.setStatus('current')
if mibBuilder.loadTexts: portSecurityModeStatus.setDescription('The status is active to indicate normal.\n            Use createAndGo to create new on multiple SET.')
staticPortLock = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 2))
staticPortLockAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 2, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockAddress.setStatus('current')
if mibBuilder.loadTexts: staticPortLockAddress.setDescription('The static port lock address.')
staticPortLockPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 2, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockPort.setStatus('current')
if mibBuilder.loadTexts: staticPortLockPort.setDescription('The port of the static port lock address.')
staticPortLockStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockStatus.setStatus('current')
if mibBuilder.loadTexts: staticPortLockStatus.setDescription('The status is active to indicate normal.\n            Use createAndGo to create new on multiple SET.')
staticPortLockVid = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 2, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticPortLockVid.setStatus('current')
if mibBuilder.loadTexts: staticPortLockVid.setDescription('Add vlan of the static port lock address. For SVL switch, vid should be 0')
macAddressSticky = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 3))
macAddressStickyAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 3, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAddressStickyAddress.setStatus('current')
if mibBuilder.loadTexts: macAddressStickyAddress.setDescription('Manually add a MAC sticky address.')
macAddressStickyPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 3, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAddressStickyPort.setStatus('current')
if mibBuilder.loadTexts: macAddressStickyPort.setDescription('Add MAC sticky address to the specific port.')
macAddressStickyVid = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 3, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAddressStickyVid.setStatus('current')
if mibBuilder.loadTexts: macAddressStickyVid.setDescription('Add MAC sticky address to the specific vlan. For SVL switch, vid should be 0')
macAddressStickyStatus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAddressStickyStatus.setStatus('current')
if mibBuilder.loadTexts: macAddressStickyStatus.setDescription('The status is active to indicate normal.\n            Use createAndGo to create new on multiple SET.')
mab = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 5))
mabDBOption = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mabDBOption.setStatus('current')
if mibBuilder.loadTexts: mabDBOption.setDescription('Set MAB database option.')
mabReauthEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mabReauthEnable.setStatus('current')
if mibBuilder.loadTexts: mabReauthEnable.setDescription('Enable/Disable MAB Re-authorizing.')
mabReauthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mabReauthPeriod.setStatus('current')
if mibBuilder.loadTexts: mabReauthPeriod.setDescription('Set MAB Re-authorizing Period.')
mabRestartEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mabRestartEnable.setStatus('current')
if mibBuilder.loadTexts: mabRestartEnable.setDescription('Enable/Disable MAB Re-start.')
mabRestartPeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mabRestartPeriod.setStatus('current')
if mibBuilder.loadTexts: mabRestartPeriod.setDescription('Set MAB Re-start Period.')
mabSettingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 5, 6), )
if mibBuilder.loadTexts: mabSettingTable.setStatus('current')
if mibBuilder.loadTexts: mabSettingTable.setDescription('MAB Setting Table.')
mabSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 5, 6, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "portIndex"))
if mibBuilder.loadTexts: mabSettingEntry.setStatus('current')
if mibBuilder.loadTexts: mabSettingEntry.setDescription('MAB Port Setting Entry.')
enableMAB = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 22, 2, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableMAB.setStatus('current')
if mibBuilder.loadTexts: enableMAB.setDescription('Enable/Disable MAB.')
accessibleIP = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 30))
enableAccessibleIP = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAccessibleIP.setStatus('current')
if mibBuilder.loadTexts: enableAccessibleIP.setDescription('Enable the accessible IP address list.')
accessibleIpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 30, 2), )
if mibBuilder.loadTexts: accessibleIpTable.setStatus('current')
if mibBuilder.loadTexts: accessibleIpTable.setDescription('accessibleIP.')
accessibleIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 30, 2, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "accessibleIpAddress"))
if mibBuilder.loadTexts: accessibleIpEntry.setStatus('current')
if mibBuilder.loadTexts: accessibleIpEntry.setDescription('Accessible IP address entry.')
accessibleIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 30, 2, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessibleIpAddress.setStatus('current')
if mibBuilder.loadTexts: accessibleIpAddress.setDescription('Accessible IP address')
accessibleIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 30, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessibleIpNetMask.setStatus('current')
if mibBuilder.loadTexts: accessibleIpNetMask.setDescription('Accessible IP netmask.')
accessibleIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessibleIpStatus.setStatus('current')
if mibBuilder.loadTexts: accessibleIpStatus.setDescription('The status is active to indicate normal.\n            Use createAndGo to create new on multiple SET.\n            Use createAndWait to create new on one SET all then actvie.\n            Use destroy to delete this row.')
sysFileUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 31))
tftpServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 31, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServer.setStatus('current')
if mibBuilder.loadTexts: tftpServer.setDescription('The TFTP Server name(IP Address)')
firmwarePathName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 31, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwarePathName.setStatus('current')
if mibBuilder.loadTexts: firmwarePathName.setDescription('The path name of firmware file in the TFTP Server')
logPathName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 31, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logPathName.setStatus('current')
if mibBuilder.loadTexts: logPathName.setDescription('The path name of log file in the TFTP Server')
confPathName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 31, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confPathName.setStatus('current')
if mibBuilder.loadTexts: confPathName.setDescription('The path name of configuration file in the TFTP Server')
tftpUpdate = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 31, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("importFirmware", 1), ("importConfig", 2), ("exportConfig", 3), ("exportLog", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tftpUpdate.setStatus('current')
if mibBuilder.loadTexts: tftpUpdate.setDescription('')
timeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32))
sysDateTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDateTime.setStatus('current')
if mibBuilder.loadTexts: sysDateTime.setDescription('The date time of system')
calibratePeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calibratePeriod.setStatus('current')
if mibBuilder.loadTexts: calibratePeriod.setDescription('The period (seconds) that calibrate with time server')
timeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer1.setStatus('current')
if mibBuilder.loadTexts: timeServer1.setDescription('The first time server')
timeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer2.setStatus('current')
if mibBuilder.loadTexts: timeServer2.setDescription('The second time server')
daylightSaving = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 5))
startMonth = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("na", 0), ("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startMonth.setStatus('current')
if mibBuilder.loadTexts: startMonth.setDescription('Setting Start Month of Daylight Saving time')
startWeek = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("na", 0), ("week1", 1), ("week2", 2), ("week3", 3), ("week4", 4), ("weeklast", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startWeek.setStatus('current')
if mibBuilder.loadTexts: startWeek.setDescription('Setting Start Week of Daylight Saving time')
startDay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("na", 0), ("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startDay.setStatus('current')
if mibBuilder.loadTexts: startDay.setDescription('Setting Start Day of Daylight Saving time')
startHour = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startHour.setStatus('current')
if mibBuilder.loadTexts: startHour.setDescription('Setting Start Hour of Daylight Saving time')
endMonth = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("na", 0), ("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endMonth.setStatus('current')
if mibBuilder.loadTexts: endMonth.setDescription('Setting End Month of Daylight Saving time')
endWeek = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("na", 0), ("week1", 1), ("week2", 2), ("week3", 3), ("week4", 4), ("weeklast", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endWeek.setStatus('current')
if mibBuilder.loadTexts: endWeek.setDescription('Setting End Week of Daylight Saving time')
endDay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("na", 0), ("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endDay.setStatus('current')
if mibBuilder.loadTexts: endDay.setDescription('Setting End Day of Daylight Saving time')
endHour = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endHour.setStatus('current')
if mibBuilder.loadTexts: endHour.setDescription('Setting End Hour of Daylight Saving time')
offsetHours = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: offsetHours.setStatus('current')
if mibBuilder.loadTexts: offsetHours.setDescription('Setting Offset Hours of Daylight Saving time')
enableNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableNTPServer.setStatus('current')
if mibBuilder.loadTexts: enableNTPServer.setDescription('This enable NTP Server.')
clockSource = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("sntp", 1), ("ntp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockSource.setStatus('current')
if mibBuilder.loadTexts: clockSource.setDescription('The clock source of system')
ntpAuthenticate = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAuthenticate.setStatus('current')
if mibBuilder.loadTexts: ntpAuthenticate.setDescription('NTP authentication')
ntpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 9), )
if mibBuilder.loadTexts: ntpPeerTable.setStatus('current')
if mibBuilder.loadTexts: ntpPeerTable.setDescription('NTP peer table')
ntpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 9, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "ntpPeerIndex"))
if mibBuilder.loadTexts: ntpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: ntpPeerEntry.setDescription('NTP peer settings')
ntpPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPeerIndex.setStatus('current')
if mibBuilder.loadTexts: ntpPeerIndex.setDescription('NTP peer index')
ntpPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPeerAddress.setStatus('current')
if mibBuilder.loadTexts: ntpPeerAddress.setDescription('NTP peer address')
ntpPeerAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPeerAuthenticate.setStatus('current')
if mibBuilder.loadTexts: ntpPeerAuthenticate.setDescription('NTP authentication')
ntpPeerAuthenticateKeyid = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPeerAuthenticateKeyid.setStatus('current')
if mibBuilder.loadTexts: ntpPeerAuthenticateKeyid.setDescription('NTP authentication key Id')
ntpAuthenticateKeyTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 10), )
if mibBuilder.loadTexts: ntpAuthenticateKeyTable.setStatus('current')
if mibBuilder.loadTexts: ntpAuthenticateKeyTable.setDescription('NTP authenticate key table')
ntpAuthenticateKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 10, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "ntpAuthenticateKeyIndex"))
if mibBuilder.loadTexts: ntpAuthenticateKeyEntry.setStatus('current')
if mibBuilder.loadTexts: ntpAuthenticateKeyEntry.setDescription('NTP authenticate key settings')
ntpAuthenticateKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpAuthenticateKeyIndex.setStatus('current')
if mibBuilder.loadTexts: ntpAuthenticateKeyIndex.setDescription('NTP authenticate key index')
ntpAuthenticateKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAuthenticateKeyID.setStatus('current')
if mibBuilder.loadTexts: ntpAuthenticateKeyID.setDescription('NTP authenticate key id')
ntpAuthenticateKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 10, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAuthenticateKeyString.setStatus('current')
if mibBuilder.loadTexts: ntpAuthenticateKeyString.setDescription('NTP authenticate key string')
ntpAuthenticateKeyTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 32, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("distrust", 0), ("trusted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAuthenticateKeyTrusted.setStatus('current')
if mibBuilder.loadTexts: ntpAuthenticateKeyTrusted.setDescription('NTP authenticate key trusted')
dipSwitchSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 34))
dipSwitchEnableTurboRing = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 34, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dipSwitchEnableTurboRing.setStatus('current')
if mibBuilder.loadTexts: dipSwitchEnableTurboRing.setDescription('Enable TurboRing Dip Switch functions')
dipSwitchTurboRingPole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 34, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dipSwitchTurboRingPole.setStatus('current')
if mibBuilder.loadTexts: dipSwitchTurboRingPole.setDescription('The TurboRing Pole status of Dip switch.')
dipSwitchRingCouplingPole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 34, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dipSwitchRingCouplingPole.setStatus('current')
if mibBuilder.loadTexts: dipSwitchRingCouplingPole.setDescription('The Ring Coupling Pole status of Dip switch.')
dipSwitchRingMasterPole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 34, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dipSwitchRingMasterPole.setStatus('current')
if mibBuilder.loadTexts: dipSwitchRingMasterPole.setDescription('The Ring Master Pole status of Dip switch.')
backupMediaSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 35))
abc02Status = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 35, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("device-not-present", 0), ("unauthorized-media", 1), ("detecting", 2), ("working", 3), ("ready-and-removable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: abc02Status.setStatus('current')
if mibBuilder.loadTexts: abc02Status.setDescription('Current status of ABC-02')
abc02AutoImportConfig = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 35, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: abc02AutoImportConfig.setStatus('current')
if mibBuilder.loadTexts: abc02AutoImportConfig.setDescription('Auto load configuration from ABC to system when boot up')
abc02AutoExportConfig = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 35, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: abc02AutoExportConfig.setStatus('current')
if mibBuilder.loadTexts: abc02AutoExportConfig.setDescription('Auto backup to ABC-02 when configuration change')
abc02AutoExportLog = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 35, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: abc02AutoExportLog.setStatus('current')
if mibBuilder.loadTexts: abc02AutoExportLog.setDescription('Auto backup of event log to prevent overwrite')
enableWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableWarmStart.setStatus('current')
if mibBuilder.loadTexts: enableWarmStart.setDescription('Enable to restart MOXA ethernet switch.')
syslogSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 37))
syslogServer1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 37, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer1.setStatus('current')
if mibBuilder.loadTexts: syslogServer1.setDescription('The syslog server 1')
syslogServer1port = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 37, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer1port.setStatus('current')
if mibBuilder.loadTexts: syslogServer1port.setDescription('The syslog server 1 port')
syslogServer2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 37, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer2.setStatus('current')
if mibBuilder.loadTexts: syslogServer2.setDescription('The syslog server 2')
syslogServer2port = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 37, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer2port.setStatus('current')
if mibBuilder.loadTexts: syslogServer2port.setDescription('The syslog server 2 port')
syslogServer3 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 37, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer3.setStatus('current')
if mibBuilder.loadTexts: syslogServer3.setDescription('The syslog server 3')
syslogServer3port = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 37, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer3port.setStatus('current')
if mibBuilder.loadTexts: syslogServer3port.setDescription('The syslog server 3 port')
dhcpRelayAgentSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 39))
dhcpServer1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 39, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer1.setStatus('current')
if mibBuilder.loadTexts: dhcpServer1.setDescription('The dhcp Relay Agent Server 1.')
dhcpServer2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 39, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer2.setStatus('current')
if mibBuilder.loadTexts: dhcpServer2.setDescription('The dhcp Relay Agent Server 2.')
dhcpServer3 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 39, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer3.setStatus('current')
if mibBuilder.loadTexts: dhcpServer3.setDescription('The dhcp Relay Agent Server 3.')
dhcpServer4 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 39, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServer4.setStatus('current')
if mibBuilder.loadTexts: dhcpServer4.setDescription('The dhcp Relay Agent Server 4.')
option82Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 39, 5))
enableOption82 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 39, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableOption82.setStatus('current')
if mibBuilder.loadTexts: enableOption82.setDescription('Enable DHCP Option 82')
option82Type = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 39, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ip", 0), ("mac", 1), ("client-id", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: option82Type.setStatus('current')
if mibBuilder.loadTexts: option82Type.setDescription('Option 82 Type selector ')
option82Value = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 39, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: option82Value.setStatus('current')
if mibBuilder.loadTexts: option82Value.setDescription('Option 82 Type Value')
option82ValueDisplay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 39, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: option82ValueDisplay.setStatus('current')
if mibBuilder.loadTexts: option82ValueDisplay.setDescription('Option 82 Type Value Display')
dhcpFunctionTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 39, 6), )
if mibBuilder.loadTexts: dhcpFunctionTable.setStatus('current')
if mibBuilder.loadTexts: dhcpFunctionTable.setDescription('DHCP Function Table.')
dhcpFunctionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 39, 6, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "dhcpPortIndex"))
if mibBuilder.loadTexts: dhcpFunctionEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpFunctionEntry.setDescription('DHCP Function Table Entry.')
dhcpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 39, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPortIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpPortIndex.setDescription('The DHCP Port Index.')
circuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 39, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitID.setStatus('current')
if mibBuilder.loadTexts: circuitID.setDescription('The Circuit ID.')
option82Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 39, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: option82Enable.setStatus('current')
if mibBuilder.loadTexts: option82Enable.setDescription('This enable option 82 of the port.')
poeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40))
poeSystemSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 9))
poeSysPowerEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSysPowerEnable.setStatus('current')
if mibBuilder.loadTexts: poeSysPowerEnable.setDescription('PoE system power enable.')
poeSysPowerThreshold = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSysPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: poeSysPowerThreshold.setDescription('PoE system power threshold.')
poeSysThresholdCutOff = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSysThresholdCutOff.setStatus('current')
if mibBuilder.loadTexts: poeSysThresholdCutOff.setDescription('PoE system power threshold cut off.')
poeSysAllocatedPower = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeSysAllocatedPower.setStatus('current')
if mibBuilder.loadTexts: poeSysAllocatedPower.setDescription('PoE system allocated power.')
poeSysMeasuredPower = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeSysMeasuredPower.setStatus('current')
if mibBuilder.loadTexts: poeSysMeasuredPower.setDescription('PoE system measured power.')
poeSysPowerBudget = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSysPowerBudget.setStatus('current')
if mibBuilder.loadTexts: poeSysPowerBudget.setDescription('PoE system power budget.')
poePortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 3), )
if mibBuilder.loadTexts: poePortTable.setStatus('current')
if mibBuilder.loadTexts: poePortTable.setDescription('Poe Port Function Table.')
poePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 3, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "poePortIndex"))
if mibBuilder.loadTexts: poePortEntry.setStatus('current')
if mibBuilder.loadTexts: poePortEntry.setDescription('Poe Port Function Table Entry.')
poePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortIndex.setStatus('current')
if mibBuilder.loadTexts: poePortIndex.setDescription('PoE port index.')
poePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortEnable.setStatus('current')
if mibBuilder.loadTexts: poePortEnable.setDescription('PoE port Enable.')
powerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerLimit.setStatus('current')
if mibBuilder.loadTexts: powerLimit.setDescription('PoE Port Power Budget')
pdfailure = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdfailure.setStatus('current')
if mibBuilder.loadTexts: pdfailure.setDescription('PD check Enable per port.')
pdipaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdipaddr.setStatus('current')
if mibBuilder.loadTexts: pdipaddr.setDescription('PD ip address.')
pdPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdPollingInterval.setStatus('current')
if mibBuilder.loadTexts: pdPollingInterval.setDescription('PD check interval')
poeporttimetabling = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeporttimetabling.setStatus('current')
if mibBuilder.loadTexts: poeporttimetabling.setDescription('PoE port timetabling')
poePortLegacyPdDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortLegacyPdDetect.setStatus('current')
if mibBuilder.loadTexts: poePortLegacyPdDetect.setDescription('PoE port legacy PD detection')
pdNoResponseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdNoResponseTimeout.setStatus('current')
if mibBuilder.loadTexts: pdNoResponseTimeout.setDescription('No response timeout times for PD.')
pdNoResponseAction = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAction", 0), ("rebootPD", 1), ("powerOffPD", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdNoResponseAction.setStatus('current')
if mibBuilder.loadTexts: pdNoResponseAction.setDescription('PD no response action.')
poePowerOutputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("highPower", 1), ("force", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePowerOutputMode.setStatus('current')
if mibBuilder.loadTexts: poePowerOutputMode.setDescription('PoE port Power Output Mode.')
poeTimeTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 5), )
if mibBuilder.loadTexts: poeTimeTable.setStatus('current')
if mibBuilder.loadTexts: poeTimeTable.setDescription('PoE Time Table.')
poeTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 5, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "poeTPortIndex"), (0, "MOXA-EDSG512E8POE-MIB", "poeWeekDay"))
if mibBuilder.loadTexts: poeTimeEntry.setStatus('current')
if mibBuilder.loadTexts: poeTimeEntry.setDescription('PoE Time Table Entry.')
poeTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeTPortIndex.setStatus('current')
if mibBuilder.loadTexts: poeTPortIndex.setDescription('port Index for time table.')
poeWeekDay = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeWeekDay.setStatus('current')
if mibBuilder.loadTexts: poeWeekDay.setDescription('day index for a week.')
poeDayEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeDayEnable.setStatus('current')
if mibBuilder.loadTexts: poeDayEnable.setDescription('Enable or not for one day.')
poeDayStart = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeDayStart.setStatus('current')
if mibBuilder.loadTexts: poeDayStart.setDescription('PoE Port Start Time')
poeDayStop = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeDayStop.setStatus('current')
if mibBuilder.loadTexts: poeDayStop.setDescription('PoE Port Stop Time')
poeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 6), )
if mibBuilder.loadTexts: poeStatusTable.setStatus('current')
if mibBuilder.loadTexts: poeStatusTable.setDescription('PoE Status Table.')
poeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 6, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "poePortIndex"))
if mibBuilder.loadTexts: poeStatusEntry.setStatus('current')
if mibBuilder.loadTexts: poeStatusEntry.setDescription('PoE Status Table Entry.')
poePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortStatus.setStatus('current')
if mibBuilder.loadTexts: poePortStatus.setDescription('PoE port Status.')
poePortConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("na", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortConsumption.setStatus('current')
if mibBuilder.loadTexts: poePortConsumption.setDescription('PoE port Consumption')
poePortVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("na", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortVoltage.setStatus('current')
if mibBuilder.loadTexts: poePortVoltage.setDescription('PoE port Voltage')
poePortCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("na", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortCurrent.setStatus('current')
if mibBuilder.loadTexts: poePortCurrent.setDescription('PoE port Current')
poePortPowerOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortPowerOutput.setStatus('current')
if mibBuilder.loadTexts: poePortPowerOutput.setDescription('PoE port power output status.')
poePortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, -2))).clone(namedValues=NamedValues(("unknown", -1), ("na", -2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortClass.setStatus('current')
if mibBuilder.loadTexts: poePortClass.setDescription('PoE port class.')
poePortPdFailCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAlive", 0), ("alive", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortPdFailCheck.setStatus('current')
if mibBuilder.loadTexts: poePortPdFailCheck.setDescription('PoE port PD fail check status.')
poePortPdStatusDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 40, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 0), ("notPresent", 1), ("powered", 2), ("nic", 3), ("fault", 4), ("legacyPowered", 5), ("potentialLegacyPD", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortPdStatusDescription.setStatus('current')
if mibBuilder.loadTexts: poePortPdStatusDescription.setDescription('PoE port status description.')
ieee1588Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41))
ptpv1Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 1))
enablePtpv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePtpv1.setStatus('current')
if mibBuilder.loadTexts: enablePtpv1.setDescription('This enable the PTP functon.')
clockModev1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5))).clone(namedValues=NamedValues(("v1BC", 0), ("v2E2E2stepTC", 1), ("v2P2PTC", 3), ("v2E2EBC", 4), ("v2P2PBC", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockModev1.setStatus('current')
if mibBuilder.loadTexts: clockModev1.setDescription('the clock mode of the PTP clock.')
syncIntervalv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("oneSec", 0), ("twoSec", 1), ("fourSec", 2), ("eightSec", 3), ("sixteenSec", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syncIntervalv1.setStatus('current')
if mibBuilder.loadTexts: syncIntervalv1.setDescription('the logSyncInterval of the PTP clock.')
subDomainNamev1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("dflt", 0), ("alt1", 1), ("alt2", 2), ("alt3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subDomainNamev1.setStatus('current')
if mibBuilder.loadTexts: subDomainNamev1.setDescription('The subdomain name of the PTP clock.')
preferMasterv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferMasterv1.setStatus('current')
if mibBuilder.loadTexts: preferMasterv1.setDescription('This enable the PTP prefer master function.')
ptpv2Setting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2))
enablePtp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePtp.setStatus('current')
if mibBuilder.loadTexts: enablePtp.setDescription('This enable the PTP functon.')
clockMode = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5))).clone(namedValues=NamedValues(("v1BC", 0), ("v2E2E2stepTC", 1), ("v2P2PTC", 3), ("v2E2EBC", 4), ("v2P2PBC", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockMode.setStatus('current')
if mibBuilder.loadTexts: clockMode.setDescription('the clock mode of the PTP clock.')
transport = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ieee802dot3", 0), ("ipv4", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transport.setStatus('current')
if mibBuilder.loadTexts: transport.setDescription('the transport mode of the PTP clock.')
syncInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-3, -2, -1, 0, 1))).clone(namedValues=NamedValues(("t128msec", -3), ("t256msec", -2), ("t512msec", -1), ("t1sec", 0), ("t2sec", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syncInterval.setStatus('current')
if mibBuilder.loadTexts: syncInterval.setDescription('the logSyncInterval of the PTP clock.')
logMinDelayReqInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1sec", 0), ("t2sec", 1), ("t4sec", 2), ("t8sec", 3), ("t16sec", 4), ("t32sec", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMinDelayReqInterval.setStatus('current')
if mibBuilder.loadTexts: logMinDelayReqInterval.setDescription('the logMinDelayReqInterval of the PTP clock.')
logMinPdelayReqInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t512msec", -1), ("t1sec", 0), ("t2sec", 1), ("t4sec", 2), ("t8sec", 3), ("t16sec", 4), ("t32sec", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMinPdelayReqInterval.setStatus('current')
if mibBuilder.loadTexts: logMinPdelayReqInterval.setDescription('the logMinPdelayReqInterval of the PTP clock.')
logAnnounceInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("t1sec", 0), ("t2sec", 1), ("t4sec", 2), ("t8sec", 3), ("t16sec", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logAnnounceInterval.setStatus('current')
if mibBuilder.loadTexts: logAnnounceInterval.setDescription('the logAnnounceInterval of the PTP clock.')
announceReceiptTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: announceReceiptTimeout.setStatus('current')
if mibBuilder.loadTexts: announceReceiptTimeout.setDescription('the announceReceiptTimeout of the PTP clock.')
priority1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priority1.setStatus('current')
if mibBuilder.loadTexts: priority1.setDescription('the priority1 of the PTP clock.')
priority2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priority2.setStatus('current')
if mibBuilder.loadTexts: priority2.setDescription('the priority2 of the PTP clock.')
clockClass = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockClass.setStatus('current')
if mibBuilder.loadTexts: clockClass.setDescription('the clockClass of the PTP clock.')
domainNumber = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("dflt", 0), ("alt1", 1), ("alt2", 2), ("alt3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainNumber.setStatus('current')
if mibBuilder.loadTexts: domainNumber.setDescription('The domain number of the PTP clock.')
localUtcOffset = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUtcOffset.setStatus('current')
if mibBuilder.loadTexts: localUtcOffset.setDescription('the UTC offset of the local PTP clock.')
localUtcOffsetValid = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUtcOffsetValid.setStatus('current')
if mibBuilder.loadTexts: localUtcOffsetValid.setDescription('the UTC offset valid of the local PTP clock.')
localLeap59 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localLeap59.setStatus('current')
if mibBuilder.loadTexts: localLeap59.setDescription('the leap59 of the local PTP clock.')
localLeap61 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localLeap61.setStatus('current')
if mibBuilder.loadTexts: localLeap61.setDescription('the leap61 of the local PTP clock.')
localPtpTimescale = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("arb", 0), ("ptp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localPtpTimescale.setStatus('current')
if mibBuilder.loadTexts: localPtpTimescale.setDescription('the timescale of the local PTP clock.')
localArbTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localArbTime.setStatus('current')
if mibBuilder.loadTexts: localArbTime.setDescription('the ARB time of the local PTP clock.')
ptpv1Status = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 3))
offsetToMasterv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: offsetToMasterv1.setStatus('current')
if mibBuilder.loadTexts: offsetToMasterv1.setDescription('The offset to master for nsec.')
meanPathDelayv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meanPathDelayv1.setStatus('current')
if mibBuilder.loadTexts: meanPathDelayv1.setDescription('The mean path delay of the PTP clock.')
grandMasterUuidv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 3, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandMasterUuidv1.setStatus('current')
if mibBuilder.loadTexts: grandMasterUuidv1.setDescription('The grand master UUID address of the PTP clock.')
parentUuidv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 3, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parentUuidv1.setStatus('current')
if mibBuilder.loadTexts: parentUuidv1.setDescription('The parent master UUID address of the PTP clock.')
clockStratumv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockStratumv1.setStatus('current')
if mibBuilder.loadTexts: clockStratumv1.setDescription('The clock stratum of the PTP clock.')
clockIdentifierv1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockIdentifierv1.setStatus('current')
if mibBuilder.loadTexts: clockIdentifierv1.setDescription('The clock identifier of the PTP clock.')
ptpv2Status = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4))
offsetToMaster = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: offsetToMaster.setStatus('current')
if mibBuilder.loadTexts: offsetToMaster.setDescription('The offset to master for nsec.')
meanPathDelay = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meanPathDelay.setStatus('current')
if mibBuilder.loadTexts: meanPathDelay.setDescription('The mean path delay of the PTP clock.')
parentIdentity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parentIdentity.setStatus('current')
if mibBuilder.loadTexts: parentIdentity.setDescription('The parent identity of the PTP clock.')
grandmasterIdentity = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterIdentity.setStatus('current')
if mibBuilder.loadTexts: grandmasterIdentity.setDescription('The grandmaster identity of the PTP clock.')
grandmasterClockClass = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterClockClass.setStatus('current')
if mibBuilder.loadTexts: grandmasterClockClass.setDescription('The grandmaster clockClass of the PTP clock.')
grandmasterClockAccuracy = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterClockAccuracy.setStatus('current')
if mibBuilder.loadTexts: grandmasterClockAccuracy.setDescription('The grandmaster clockAccuracy of the PTP clock.')
grandmasterPriority1 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterPriority1.setStatus('current')
if mibBuilder.loadTexts: grandmasterPriority1.setDescription('The grandmaster priority1 of the PTP clock.')
grandmasterPriority2 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grandmasterPriority2.setStatus('current')
if mibBuilder.loadTexts: grandmasterPriority2.setDescription('The grandmaster priority2 of the PTP clock.')
stepsRemoved = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stepsRemoved.setStatus('current')
if mibBuilder.loadTexts: stepsRemoved.setDescription('The steps removed of the PTP clock.')
currentUtcOffset = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentUtcOffset.setStatus('current')
if mibBuilder.loadTexts: currentUtcOffset.setDescription('The current utc offset of the PTP clock.')
currentUtcOffsetValid = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentUtcOffsetValid.setStatus('current')
if mibBuilder.loadTexts: currentUtcOffsetValid.setDescription('The current utc offset valid flag of the PTP clock.')
leap59 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leap59.setStatus('current')
if mibBuilder.loadTexts: leap59.setDescription('The leap59 of the PTP clock.')
leap61 = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leap61.setStatus('current')
if mibBuilder.loadTexts: leap61.setDescription('The leap61 of the PTP clock.')
ptpTimescale = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpTimescale.setStatus('current')
if mibBuilder.loadTexts: ptpTimescale.setDescription('The ptp timescale of the PTP clock.')
timesource = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 4, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timesource.setStatus('current')
if mibBuilder.loadTexts: timesource.setDescription('The timesource of the PTP clock.')
ptpPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 5), )
if mibBuilder.loadTexts: ptpPortTable.setStatus('current')
if mibBuilder.loadTexts: ptpPortTable.setDescription('The ptp port table.')
ptpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 5, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "ptpPortIndex"))
if mibBuilder.loadTexts: ptpPortEntry.setStatus('current')
if mibBuilder.loadTexts: ptpPortEntry.setDescription('The ptp port entry.')
ptpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpPortIndex.setStatus('current')
if mibBuilder.loadTexts: ptpPortIndex.setDescription('The ptp port index.')
ptpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptpPortEnable.setStatus('current')
if mibBuilder.loadTexts: ptpPortEnable.setDescription('This enable the ptp port.')
ptpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 41, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ptpInitializing", 0), ("ptpFaulty", 1), ("ptpDisabled", 2), ("ptpListening", 3), ("ptpPreMaster", 4), ("ptpMaster", 5), ("ptpPassive", 6), ("ptpUncalibrated", 7), ("ptpSlave", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptpPortStatus.setStatus('current')
if mibBuilder.loadTexts: ptpPortStatus.setDescription('This port status of the PTP clock.')
mibNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0))
varconfigChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("configChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varconfigChangeTrap.setStatus('current')
if mibBuilder.loadTexts: varconfigChangeTrap.setDescription('The configuration has been changed.')
configChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 1)).setObjects(("MOXA-EDSG512E8POE-MIB", "varconfigChangeTrap"))
if mibBuilder.loadTexts: configChangeTrap.setStatus('current')
if mibBuilder.loadTexts: configChangeTrap.setDescription('The configuration has been changed.')
varpower1Trap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on2off", 2), ("off2on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varpower1Trap.setStatus('current')
if mibBuilder.loadTexts: varpower1Trap.setDescription('The power on/off changed.')
power1Trap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 2)).setObjects(("MOXA-EDSG512E8POE-MIB", "varpower1Trap"))
if mibBuilder.loadTexts: power1Trap.setStatus('current')
if mibBuilder.loadTexts: power1Trap.setDescription('The power on/off changed.')
varpower2Trap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on2off", 2), ("off2on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varpower2Trap.setStatus('current')
if mibBuilder.loadTexts: varpower2Trap.setDescription('The power on/off changed.')
power2Trap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 3)).setObjects(("MOXA-EDSG512E8POE-MIB", "varpower2Trap"))
if mibBuilder.loadTexts: power2Trap.setStatus('current')
if mibBuilder.loadTexts: power2Trap.setDescription('The power on/off changed.')
vartrafficOverloadTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vartrafficOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: vartrafficOverloadTrap.setDescription("The ethernet port's traffic loading exceeds the pre-defined value.")
trafficOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 4)).setObjects(("MOXA-EDSG512E8POE-MIB", "vartrafficOverloadTrap"))
if mibBuilder.loadTexts: trafficOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: trafficOverloadTrap.setDescription("The ethernet port's traffic loading exceeds the pre-defined value.")
varredundancyTopologyChangedTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("topologyChanged", 2), ("topologyChangedTurboChainHead", 3), ("topologyChangedTurboChainTail", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varredundancyTopologyChangedTrap.setStatus('current')
if mibBuilder.loadTexts: varredundancyTopologyChangedTrap.setDescription('The redundancy topology has been changed.')
redundancyTopologyChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 5)).setObjects(("MOXA-EDSG512E8POE-MIB", "varredundancyTopologyChangedTrap"))
if mibBuilder.loadTexts: redundancyTopologyChangedTrap.setStatus('current')
if mibBuilder.loadTexts: redundancyTopologyChangedTrap.setDescription('The redundancy topology has been changed.')
varturboRingCouplingPortChangedTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("couplingPortChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varturboRingCouplingPortChangedTrap.setStatus('current')
if mibBuilder.loadTexts: varturboRingCouplingPortChangedTrap.setDescription('The coupling path of Turbo Ring has been changed.')
turboRingCouplingPortChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 6)).setObjects(("MOXA-EDSG512E8POE-MIB", "varturboRingCouplingPortChangedTrap"))
if mibBuilder.loadTexts: turboRingCouplingPortChangedTrap.setStatus('current')
if mibBuilder.loadTexts: turboRingCouplingPortChangedTrap.setDescription('The coupling path of Turbo Ring has been changed.')
varturboRingMasterChangedTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("ringMasterChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varturboRingMasterChangedTrap.setStatus('current')
if mibBuilder.loadTexts: varturboRingMasterChangedTrap.setDescription('The master of Turbo Ring has been changed.')
turboRingMasterChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 7)).setObjects(("MOXA-EDSG512E8POE-MIB", "varturboRingMasterChangedTrap"))
if mibBuilder.loadTexts: turboRingMasterChangedTrap.setStatus('current')
if mibBuilder.loadTexts: turboRingMasterChangedTrap.setDescription('The master of Turbo Ring has been changed.')
varturboRingMasterMismatchTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("ringMasterMismatch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varturboRingMasterMismatchTrap.setStatus('current')
if mibBuilder.loadTexts: varturboRingMasterMismatchTrap.setDescription('The master of Turbo Ring has been mismatch.')
turboRingMasterMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 22)).setObjects(("MOXA-EDSG512E8POE-MIB", "varturboRingMasterChangedTrap"))
if mibBuilder.loadTexts: turboRingMasterMismatchTrap.setStatus('current')
if mibBuilder.loadTexts: turboRingMasterMismatchTrap.setDescription('The master of Turbo Ring has been mismatch.')
varPoEWarningTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("pdOverCurrent", 1), ("pdCheckFail", 2), ("pdPowerOn", 3), ("pdPowerOff", 4), ("exceedSystemThreshold", 5), ("pseFetBad", 6), ("pseOverTemperature", 7), ("pseVeeUvlo", 8), ("exceedSystemPowerBudget", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varPoEWarningTrap.setStatus('current')
if mibBuilder.loadTexts: varPoEWarningTrap.setDescription('The POE warning message.')
poeWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 16)).setObjects(("MOXA-EDSG512E8POE-MIB", "varPoEWarningTrap"))
if mibBuilder.loadTexts: poeWarningTrap.setStatus('current')
if mibBuilder.loadTexts: poeWarningTrap.setDescription('The POE warning message.')
varPortLoopDetectedTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: varPortLoopDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: varPortLoopDetectedTrap.setDescription('The DUT port is looping.')
portLoopDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 17)).setObjects(("MOXA-EDSG512E8POE-MIB", "varPortLoopDetectedTrap"))
if mibBuilder.loadTexts: portLoopDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: portLoopDetectedTrap.setDescription('The DUT port is looping.')
varRateLimitedOnTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("rateLimitON", 2), ("rateLimitOFF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varRateLimitedOnTrap.setStatus('current')
if mibBuilder.loadTexts: varRateLimitedOnTrap.setDescription('The DUT port is rate limit.')
rateLimitedOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 18)).setObjects(("MOXA-EDSG512E8POE-MIB", "varRateLimitedOnTrap"))
if mibBuilder.loadTexts: rateLimitedOnTrap.setStatus('current')
if mibBuilder.loadTexts: rateLimitedOnTrap.setDescription('The DUT port rate limit is ON.')
varLLDPChgTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: varLLDPChgTrap.setStatus('current')
if mibBuilder.loadTexts: varLLDPChgTrap.setDescription('The LLDP table is changing.')
lldpChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 19)).setObjects(("MOXA-EDSG512E8POE-MIB", "varLLDPChgTrap"))
if mibBuilder.loadTexts: lldpChgTrap.setStatus('current')
if mibBuilder.loadTexts: lldpChgTrap.setDescription('The LLDP table is changing.')
varABC02WarningTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noEnoughSpace", 1), ("nnauthorizedMediaIsDetected", 2), ("exportConfigurationFail", 3), ("exportLogFail", 4), ("autoImportConfigurationFail", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varABC02WarningTrap.setStatus('current')
if mibBuilder.loadTexts: varABC02WarningTrap.setDescription('Warning trap while specific error is occured in abc02.')
abc02WarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 20)).setObjects(("MOXA-EDSG512E8POE-MIB", "varABC02WarningTrap"))
if mibBuilder.loadTexts: abc02WarningTrap.setStatus('current')
if mibBuilder.loadTexts: abc02WarningTrap.setDescription('Warning trap while specific error is occured in abc02.')
varUserAuthSuccessTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: varUserAuthSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: varUserAuthSuccessTrap.setDescription('Account authentication success.')
userAuthSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 24)).setObjects(("MOXA-EDSG512E8POE-MIB", "varUserAuthSuccessTrap"))
if mibBuilder.loadTexts: userAuthSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: userAuthSuccessTrap.setDescription('Account authentication success.')
varUserAuthFailTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: varUserAuthFailTrap.setStatus('current')
if mibBuilder.loadTexts: varUserAuthFailTrap.setDescription('Account authentication failed.')
userAuthFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 25)).setObjects(("MOXA-EDSG512E8POE-MIB", "varUserAuthFailTrap"))
if mibBuilder.loadTexts: userAuthFailTrap.setStatus('current')
if mibBuilder.loadTexts: userAuthFailTrap.setDescription('Account authentication failed.')
varMacStickyPortViolationPortDisableTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("violationPortDisable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varMacStickyPortViolationPortDisableTrap.setStatus('current')
if mibBuilder.loadTexts: varMacStickyPortViolationPortDisableTrap.setDescription('The number of sticky Mac address on the port was over the limit. A macStickyPortViolationPortDisableTrap will contain 3 elements: port, macaddr, and vlanid.')
macStickyPortViolationPortDisableTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 26)).setObjects(("MOXA-EDSG512E8POE-MIB", "varMacStickyPortViolationPortDisableTrap"))
if mibBuilder.loadTexts: macStickyPortViolationPortDisableTrap.setStatus('current')
if mibBuilder.loadTexts: macStickyPortViolationPortDisableTrap.setDescription('The number of sticky Mac address on the port was over the limit. A macStickyPortViolationPortDisableTrap will contain 3 elements: port, macaddr, and vlanid.')
varFiberWarningTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: varFiberWarningTrap.setStatus('current')
if mibBuilder.loadTexts: varFiberWarningTrap.setDescription('Warning trap while fiber is over threshold.')
fiberWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 28)).setObjects(("MOXA-EDSG512E8POE-MIB", "varFiberWarningTrap"))
if mibBuilder.loadTexts: fiberWarningTrap.setStatus('current')
if mibBuilder.loadTexts: fiberWarningTrap.setDescription('Warning trap while fiber is over threshold.')
varLoggingCapacityTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: varLoggingCapacityTrap.setStatus('current')
if mibBuilder.loadTexts: varLoggingCapacityTrap.setDescription('Warning trap while event log is over capacity threshold.')
loggingCapacityTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 29)).setObjects(("MOXA-EDSG512E8POE-MIB", "varLoggingCapacityTrap"))
if mibBuilder.loadTexts: loggingCapacityTrap.setStatus('current')
if mibBuilder.loadTexts: loggingCapacityTrap.setDescription('Warning trap while event log is over capacity threshold.')
varUserInfoChgTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: varUserInfoChgTrap.setStatus('current')
if mibBuilder.loadTexts: varUserInfoChgTrap.setDescription('Account information has been changed.')
userInfoChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 31)).setObjects(("MOXA-EDSG512E8POE-MIB", "varUserInfoChgTrap"))
if mibBuilder.loadTexts: userInfoChgTrap.setStatus('current')
if mibBuilder.loadTexts: userInfoChgTrap.setDescription('Account information has been changed.')
varConfigImportTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: varConfigImportTrap.setStatus('current')
if mibBuilder.loadTexts: varConfigImportTrap.setDescription('Configuration has been imported.')
configImportTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 32)).setObjects(("MOXA-EDSG512E8POE-MIB", "varConfigImportTrap"))
if mibBuilder.loadTexts: configImportTrap.setStatus('current')
if mibBuilder.loadTexts: configImportTrap.setDescription('Configuration has been imported.')
varRemoteAuthSuccessTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tacacs", 1), ("radius", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varRemoteAuthSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: varRemoteAuthSuccessTrap.setDescription('The login authentication is successful by the remote server')
remoteAuthSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 38)).setObjects(("MOXA-EDSG512E8POE-MIB", "varRemoteAuthSuccessTrap"))
if mibBuilder.loadTexts: remoteAuthSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: remoteAuthSuccessTrap.setDescription('The login authentication is successful by the remote server')
varRemoteAuthFailTrap = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tacacs", 1), ("radius", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varRemoteAuthFailTrap.setStatus('current')
if mibBuilder.loadTexts: varRemoteAuthFailTrap.setDescription('The login authentication is failed by the remote server')
remoteAuthFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 8691, 7, 108, 0, 39)).setObjects(("MOXA-EDSG512E8POE-MIB", "varRemoteAuthFailTrap"))
if mibBuilder.loadTexts: remoteAuthFailTrap.setStatus('current')
if mibBuilder.loadTexts: remoteAuthFailTrap.setDescription('The login authentication is failed by the remote server')
diagnosis = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 42))
lldpSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 42, 1))
enableLLDP = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 42, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableLLDP.setStatus('current')
if mibBuilder.loadTexts: enableLLDP.setDescription('This enable the LLDP functon.')
lldpMSGInterval = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 42, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMSGInterval.setStatus('current')
if mibBuilder.loadTexts: lldpMSGInterval.setDescription('The LLDP message transmit interval.')
industrialProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 47))
eipSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 47, 1))
modbusSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 47, 2))
profinetioSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 47, 3))
enableEtherNetIP = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 47, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableEtherNetIP.setStatus('current')
if mibBuilder.loadTexts: enableEtherNetIP.setDescription('This enable the EtherNet/IP functon.')
enableModbus = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 47, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableModbus.setStatus('current')
if mibBuilder.loadTexts: enableModbus.setDescription('This enable the Modbus functon.')
enableProfinetIO = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 47, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableProfinetIO.setStatus('current')
if mibBuilder.loadTexts: enableProfinetIO.setDescription('This enable the PROFINET IO functon.')
garpSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 45))
leaveAllTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 45, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: leaveAllTime.setStatus('current')
if mibBuilder.loadTexts: leaveAllTime.setDescription('Leaveall Time (ms).')
leaveTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 45, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: leaveTime.setStatus('current')
if mibBuilder.loadTexts: leaveTime.setDescription('Leave Time (ms).')
joinTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 45, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: joinTime.setStatus('current')
if mibBuilder.loadTexts: joinTime.setDescription('Join Time (ms).')
enableFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableFactoryDefault.setStatus('current')
if mibBuilder.loadTexts: enableFactoryDefault.setDescription('Reset all EtherDevice switch settings to factory default values')
eventlog = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 46))
eventlogTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 46, 1), )
if mibBuilder.loadTexts: eventlogTable.setStatus('current')
if mibBuilder.loadTexts: eventlogTable.setDescription('The table of eventlog.')
eventlogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 46, 1, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "eventlogIndex"))
if mibBuilder.loadTexts: eventlogEntry.setStatus('current')
if mibBuilder.loadTexts: eventlogEntry.setDescription('The table entry of eventlog.')
eventlogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 46, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogIndex.setStatus('current')
if mibBuilder.loadTexts: eventlogIndex.setDescription('The index of eventlog entry.')
eventlogBootup = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 46, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogBootup.setStatus('current')
if mibBuilder.loadTexts: eventlogBootup.setDescription('The reboot count of the system.')
eventlogDate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 46, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogDate.setStatus('current')
if mibBuilder.loadTexts: eventlogDate.setDescription('The date of the event occured.')
eventlogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 46, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogTime.setStatus('current')
if mibBuilder.loadTexts: eventlogTime.setDescription('The time of the event occured.')
eventlogUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 46, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogUptime.setStatus('current')
if mibBuilder.loadTexts: eventlogUptime.setDescription('The time of the event occured after booting up.')
eventlogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 46, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventlogEvent.setStatus('current')
if mibBuilder.loadTexts: eventlogEvent.setDescription('The event which occured in the system.')
eventlogClear = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 46, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventlogClear.setStatus('current')
if mibBuilder.loadTexts: eventlogClear.setDescription('To clear the eventlog, set value 1 to this field.')
accessControlList = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52))
accessControlTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1), )
if mibBuilder.loadTexts: accessControlTable.setStatus('current')
if mibBuilder.loadTexts: accessControlTable.setDescription('The table of ACL rule settings.  This table is used to configure ACL rules.')
accessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "aclRuleIndex"))
if mibBuilder.loadTexts: accessControlEntry.setStatus('current')
if mibBuilder.loadTexts: accessControlEntry.setDescription('The entry information of ACL table.')
aclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIndex.setStatus('current')
if mibBuilder.loadTexts: aclRuleIndex.setDescription('The index of the ACL rule.')
listID = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: listID.setStatus('current')
if mibBuilder.loadTexts: listID.setDescription('The listID of the ACL rule.')
filterType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ipBase", 0), ("macBase", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterType.setStatus('current')
if mibBuilder.loadTexts: filterType.setDescription('The type of the ACL filter.')
actionFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("permit", 0), ("deny", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: actionFlag.setStatus('current')
if mibBuilder.loadTexts: actionFlag.setDescription('The action of the ACL rule.')
srcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcMacAddr.setStatus('current')
if mibBuilder.loadTexts: srcMacAddr.setDescription('The source MAC address of the ACL rule.')
srcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcMacMask.setStatus('current')
if mibBuilder.loadTexts: srcMacMask.setDescription('The mask of the source MAC address in the ACL rule.')
dstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstMacAddr.setStatus('current')
if mibBuilder.loadTexts: dstMacAddr.setDescription('The destination MAC address of the ACL rule.')
dstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 8), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstMacMask.setStatus('current')
if mibBuilder.loadTexts: dstMacMask.setDescription('The mask of the destination MAC address in the ACL rule.')
etherType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherType.setStatus('current')
if mibBuilder.loadTexts: etherType.setDescription('The ether type of the ACL rule.\n\t\t\t This setting will apply to both ARP and RARP traffic stream due to hardware platform design ! ! !\n\t\t\t Because of hardware platform limitations, when Ether type ARP is selected the switch will not be able to filter packets by specific destination address ! ! !')
vlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanID.setStatus('current')
if mibBuilder.loadTexts: vlanID.setDescription('The VLAN ID of the ACL rule.')
srcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcIpAddr.setStatus('current')
if mibBuilder.loadTexts: srcIpAddr.setDescription('The source IP address of the ACL rule.')
srcNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcNetmask.setStatus('current')
if mibBuilder.loadTexts: srcNetmask.setDescription("The source IP address's mask of the ACL rule.")
dstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstIpAddr.setStatus('current')
if mibBuilder.loadTexts: dstIpAddr.setDescription('The destination IP address of the ACL rule')
dstNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstNetmask.setStatus('current')
if mibBuilder.loadTexts: dstNetmask.setDescription("The destination IP address's mask of the ACL rule.")
protocolCode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protocolCode.setStatus('current')
if mibBuilder.loadTexts: protocolCode.setDescription('The protocol code of the ACL rule.')
srcsocketPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: srcsocketPort.setStatus('current')
if mibBuilder.loadTexts: srcsocketPort.setDescription('The source UDP/TCP port of the ACL rule.')
dstsocketPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dstsocketPort.setStatus('current')
if mibBuilder.loadTexts: dstsocketPort.setDescription('The destination UDP/TCP port of the ACL rule.')
aclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclStatus.setStatus('current')
if mibBuilder.loadTexts: aclStatus.setDescription('The status is active to indicate normal.\n             Use createAndGo to create new on multiple SET.\n             Use createAndWait to create new on one SET all then actvie.\n             Use destroy to delete this row.')
aclAttachmentTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 2), )
if mibBuilder.loadTexts: aclAttachmentTable.setStatus('current')
if mibBuilder.loadTexts: aclAttachmentTable.setDescription('The table of ACL attachment settings.  This table is used to configure ACL attachment port and list name.')
aclAttachmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 2, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "aclID"))
if mibBuilder.loadTexts: aclAttachmentEntry.setStatus('current')
if mibBuilder.loadTexts: aclAttachmentEntry.setDescription('The entry information of ACL attachment table.')
aclID = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 2, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclID.setStatus('current')
if mibBuilder.loadTexts: aclID.setDescription('The listID of the ACL attachment entry.')
ingressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 2, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ingressPort.setStatus('current')
if mibBuilder.loadTexts: ingressPort.setDescription('The ingress ports of the ACL attachment entry.')
aclListName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 52, 2, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclListName.setStatus('current')
if mibBuilder.loadTexts: aclListName.setDescription('The ACL entry name.')
cpuLoading5s = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoading5s.setStatus('current')
if mibBuilder.loadTexts: cpuLoading5s.setDescription('CPU Loading for the past 5 seconds in %.')
cpuLoading30s = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoading30s.setStatus('current')
if mibBuilder.loadTexts: cpuLoading30s.setDescription('CPU Loading for the past 30 seconds in %.')
cpuLoading300s = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoading300s.setStatus('current')
if mibBuilder.loadTexts: cpuLoading300s.setDescription('CPU Loading for the past 5 minutes in %.')
totalMemory = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalMemory.setStatus('current')
if mibBuilder.loadTexts: totalMemory.setDescription('Total size of System RAM.')
freeMemory = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMemory.setStatus('current')
if mibBuilder.loadTexts: freeMemory.setDescription('Total size of free dynamic memory')
usedMemory = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usedMemory.setStatus('current')
if mibBuilder.loadTexts: usedMemory.setDescription('Total size of used dynamic memory')
memoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryUsage.setStatus('current')
if mibBuilder.loadTexts: memoryUsage.setDescription('The usage of memory size in %.')
ivlSwitch = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("svl", 0), ("ivl", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ivlSwitch.setStatus('current')
if mibBuilder.loadTexts: ivlSwitch.setDescription('Current switch runs IVL(Independent Vlan Learning) or SVL(Shared Vlan Learning)')
supportMacSticky = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-support", 0), ("support", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: supportMacSticky.setStatus('current')
if mibBuilder.loadTexts: supportMacSticky.setDescription('Support MAC Sticky feature or not.')
loopProtection = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopProtection.setStatus('current')
if mibBuilder.loadTexts: loopProtection.setDescription('This enable the Loop Protection functon.')
eventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62))
systemEventSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 1), )
if mibBuilder.loadTexts: systemEventSettingsTable.setStatus('current')
if mibBuilder.loadTexts: systemEventSettingsTable.setDescription('The system event settings table.')
systemEventSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 1, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "systemEventIndex"))
if mibBuilder.loadTexts: systemEventSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: systemEventSettingsEntry.setDescription('System Event Settings Entry.')
systemEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEventIndex.setStatus('current')
if mibBuilder.loadTexts: systemEventIndex.setDescription('Index of system event settings')
systemEventActive = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemEventActive.setStatus('current')
if mibBuilder.loadTexts: systemEventActive.setDescription('Status of active of system event settings')
systemEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEventName.setStatus('current')
if mibBuilder.loadTexts: systemEventName.setDescription('Name of system event settings')
systemEventSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31))).clone(namedValues=NamedValues(("none", 0), ("support-SNMPTrap-only", 1), ("support-Email-only", 2), ("support-SNMP-Trap-Email", 3), ("support-Syslog-only", 4), ("support-SNMPTrap-Syslog", 5), ("support-Email-Syslog", 6), ("support-SNMPTrap-Email-Syslog", 7), ("support-Relay1-only", 8), ("support-SNMPTrap-Relay1", 9), ("support-Email-Relay1", 10), ("support-SNMPTrap-Email-Relay1", 11), ("support-Syslog-Relay1", 12), ("support-SNMPTrap-Syslog-Relay1", 13), ("support-Email-Syslog-Relay1", 14), ("support-SNMPTrap-Email-Syslog-Relay1", 15), ("support-Relay2-only", 16), ("support-SNMPTrap-Relay2", 17), ("support-Email-Relay2", 18), ("support-SNMPTrap-Email-Relay2", 19), ("support-Syslog-Relay2", 20), ("support-SNMPTrap-Syslog-Relay2", 21), ("support-Email-Syslog-Relay2", 22), ("support-SNMPTrap-Email-Syslog-Relay2", 23), ("support-Relay1-Relay2", 24), ("support-SNMPTrap-Relay1-Relay2", 25), ("support-Syslog-Relay1-Relay2", 28), ("support-Email-Syslog-Relay1-Relay2", 30), ("support-all-SNMPTrap-Email-Syslog-Relay1-Relay2", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEventSupport.setStatus('current')
if mibBuilder.loadTexts: systemEventSupport.setDescription('Status of support modules of system event settings.')
systemEventModuleEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31))).clone(namedValues=NamedValues(("none", 0), ("enable-SNMPTrap-only", 1), ("enable-Email-only", 2), ("enable-SNMPTrap-Email", 3), ("enable-Syslog-only", 4), ("enable-SNMPTrap-Syslog", 5), ("enable-Email-Syslog", 6), ("enable-SNMPTrap-Email-Syslog", 7), ("enable-Relay1-only", 8), ("enable-SNMPTrap-Relay1", 9), ("enable-Email-Relay1", 10), ("enable-SNMPTrap-Email-Relay1", 11), ("enable-Syslog-Relay1", 12), ("enable-SNMPTrap-Syslog-Relay1", 13), ("enable-Email-Syslog-Relay1", 14), ("enable-SNMPTrap-Email-Syslog-Relay1", 15), ("enable-Relay2-only", 16), ("enable-SNMPTrap-Relay2", 17), ("enable-Email-Relay2", 18), ("enable-SNMPTrap-Email-Relay2", 19), ("enable-Syslog-Relay2", 20), ("enable-SNMPTrap-Syslog-Relay2", 21), ("enable-Email-Syslog-Relay2", 22), ("enable-SNMPTrap-Email-Syslog-Relay2", 23), ("enable-Relay1-Relay2", 24), ("enable-SNMPTrap-Relay1-Relay2", 25), ("enable-Syslog-Relay1-Relay2", 28), ("enable-Email-Syslog-Relay1-Relay2", 30), ("enable-All-SNMPTrap-Email-Syslog-Relay1-Relay2", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemEventModuleEnable.setStatus('current')
if mibBuilder.loadTexts: systemEventModuleEnable.setDescription('Status of enable of system event settings.')
systemEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("information", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemEventSeverity.setStatus('current')
if mibBuilder.loadTexts: systemEventSeverity.setDescription('Severity of system event settings')
portEventSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 2), )
if mibBuilder.loadTexts: portEventSettingsTable.setStatus('current')
if mibBuilder.loadTexts: portEventSettingsTable.setDescription('The port event settings table.')
portEventSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 2, 1), ).setIndexNames((0, "MOXA-EDSG512E8POE-MIB", "portEventIndex"))
if mibBuilder.loadTexts: portEventSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: portEventSettingsEntry.setDescription('Port Event Settings Entry.')
portEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portEventIndex.setStatus('current')
if mibBuilder.loadTexts: portEventIndex.setDescription('Index of port event settings')
portEventLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portEventLabel.setStatus('current')
if mibBuilder.loadTexts: portEventLabel.setDescription('Label of portEventIndex')
portEventActive = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEventActive.setStatus('current')
if mibBuilder.loadTexts: portEventActive.setDescription('Status of active of port event settings')
portEventEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("enable-LinkOn-only", 1), ("enable-LinkOff-only", 2), ("enable-LinkOn-LinkOff", 3), ("enable-TrafficOverload-only", 4), ("enable-LinkOn-TrafficOverload", 5), ("enable-LinkOff-TrafficOverload", 6), ("enable-All-LinkOn-LinkOff-TrafficOverload", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEventEnable.setStatus('current')
if mibBuilder.loadTexts: portEventEnable.setDescription('Status of event enable of port event settings')
portEventTrafficThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEventTrafficThreshold.setStatus('current')
if mibBuilder.loadTexts: portEventTrafficThreshold.setDescription('Threshold of Traffic-Overload in percentage(%)')
portEventTrafficDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEventTrafficDuration.setStatus('current')
if mibBuilder.loadTexts: portEventTrafficDuration.setDescription('Duration of Traffic-Overload in secs(s)')
portEventModuleEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31))).clone(namedValues=NamedValues(("none", 0), ("enable-SNMPTrap-only", 1), ("enable-Email-only", 2), ("enable-SNMPTrap-Email", 3), ("enable-Syslog-only", 4), ("enable-SNMPTrap-Syslog", 5), ("enable-Email-Syslog", 6), ("enable-SNMPTrap-Email-Syslog", 7), ("enable-Relay1-only", 8), ("enable-SNMPTrap-Relay1", 9), ("enable-Email-Relay1", 10), ("enable-SNMPTrap-Email-Relay1", 11), ("enable-Syslog-Relay1", 12), ("enable-SNMPTrap-Syslog-Relay1", 13), ("enable-Email-Syslog-Relay1", 14), ("enable-SNMPTrap-Email-Syslog-Relay1", 15), ("enable-Relay2-only", 16), ("enable-SNMPTrap-Relay2", 17), ("enable-Email-Relay2", 18), ("enable-SNMPTrap-Email-Relay2", 19), ("enable-Syslog-Relay2", 20), ("enable-SNMPTrap-Syslog-Relay2", 21), ("enable-Email-Syslog-Relay2", 22), ("enable-SNMPTrap-Email-Syslog-Relay2", 23), ("enable-Relay1-Relay2", 24), ("enable-SNMPTrap-Relay1-Relay2", 25), ("enable-Syslog-Relay1-Relay2", 28), ("enable-Email-Syslog-Relay1-Relay2", 30), ("enable-All-SNMPTrap-Email-Syslog-Relay1-Relay2", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEventModuleEnable.setStatus('current')
if mibBuilder.loadTexts: portEventModuleEnable.setDescription('Status of module enable of port event settings.')
portEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 62, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("information", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEventSeverity.setStatus('current')
if mibBuilder.loadTexts: portEventSeverity.setDescription('Severity of port event settings')
managementInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63))
httpEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpEnable.setStatus('current')
if mibBuilder.loadTexts: httpEnable.setDescription('Status of http service')
httpPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPort.setStatus('current')
if mibBuilder.loadTexts: httpPort.setDescription('Port of http service')
sslEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslEnable.setStatus('current')
if mibBuilder.loadTexts: sslEnable.setDescription('Status of ssl(https) service')
sslPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslPort.setStatus('current')
if mibBuilder.loadTexts: sslPort.setDescription('Port of ssl(https) service')
telnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetEnable.setStatus('current')
if mibBuilder.loadTexts: telnetEnable.setDescription('Status of telnet service')
telnetPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPort.setStatus('current')
if mibBuilder.loadTexts: telnetPort.setDescription('Port of telnet service')
sshEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshEnable.setStatus('current')
if mibBuilder.loadTexts: sshEnable.setDescription('Status of ssh service')
sshPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPort.setStatus('current')
if mibBuilder.loadTexts: sshPort.setDescription('Port of telnet service')
mgmtInterfaceAutoLogout = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtInterfaceAutoLogout.setStatus('current')
if mibBuilder.loadTexts: mgmtInterfaceAutoLogout.setDescription('Web Timeout (Mins). Set 0 to disable')
snmpdEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdEnable.setStatus('current')
if mibBuilder.loadTexts: snmpdEnable.setDescription('Status of snmp agent')
snmpdPort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpdPort.setStatus('current')
if mibBuilder.loadTexts: snmpdPort.setDescription('Port of snmp agent')
moxaUtilityServiceEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moxaUtilityServiceEnable.setStatus('current')
if mibBuilder.loadTexts: moxaUtilityServiceEnable.setDescription('Status of moxa utility service')
moxaUtilityServicePort = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moxaUtilityServicePort.setStatus('current')
if mibBuilder.loadTexts: moxaUtilityServicePort.setDescription('Port of moxa utility service')
httpMaxLoginUsers = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpMaxLoginUsers.setStatus('current')
if mibBuilder.loadTexts: httpMaxLoginUsers.setDescription('Configure HTTP/HTTPS maximum login users')
telnetMaxLoginUsers = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetMaxLoginUsers.setStatus('current')
if mibBuilder.loadTexts: telnetMaxLoginUsers.setDescription('Configure TELNET/SSH maximum login users')
moxaNewCmdEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 63, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moxaNewCmdEnable.setStatus('current')
if mibBuilder.loadTexts: moxaNewCmdEnable.setDescription('Status of new moxa utility service')
passwordPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 70))
pwdMinLength = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 70, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwdMinLength.setStatus('current')
if mibBuilder.loadTexts: pwdMinLength.setDescription('Configure the minimum password length.')
pwdComplexityCheckEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 70, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwdComplexityCheckEnable.setStatus('current')
if mibBuilder.loadTexts: pwdComplexityCheckEnable.setDescription('Enable password complexity check.')
pwdComplexityCheckDigitEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 70, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwdComplexityCheckDigitEnable.setStatus('current')
if mibBuilder.loadTexts: pwdComplexityCheckDigitEnable.setDescription('Add password complexity check with digit.')
pwdComplexityCheckAlphabetEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 70, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwdComplexityCheckAlphabetEnable.setStatus('current')
if mibBuilder.loadTexts: pwdComplexityCheckAlphabetEnable.setDescription('Add password complexity check with alphabet.')
pwdComplexityCheckSpecialCharEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 70, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwdComplexityCheckSpecialCharEnable.setStatus('current')
if mibBuilder.loadTexts: pwdComplexityCheckSpecialCharEnable.setDescription('Add password complexity check with special-characters.')
loginLockout = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 71))
loginFailureLockoutEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 71, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginFailureLockoutEnable.setStatus('current')
if mibBuilder.loadTexts: loginFailureLockoutEnable.setDescription('Enable login failure lockout.')
loginFailureLockoutRetrys = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 71, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginFailureLockoutRetrys.setStatus('current')
if mibBuilder.loadTexts: loginFailureLockoutRetrys.setDescription('Configure login failure lockout retry threshhold.')
loginFailureLockoutTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 71, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginFailureLockoutTime.setStatus('current')
if mibBuilder.loadTexts: loginFailureLockoutTime.setDescription('Configure login failure lockout time.(Min)')
systemNotifyMessage = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 72))
httpLoginMessage = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 72, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpLoginMessage.setStatus('current')
if mibBuilder.loadTexts: httpLoginMessage.setDescription('Configure HTTP/HTTPS login message.')
httpLoginFailureMessage = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 72, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpLoginFailureMessage.setStatus('current')
if mibBuilder.loadTexts: httpLoginFailureMessage.setDescription('Configure HTTP/HTTPS login failure message.')
syslogManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 73))
loggingCapacityThreshold = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 73, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loggingCapacityThreshold.setStatus('current')
if mibBuilder.loadTexts: loggingCapacityThreshold.setDescription('Configure event log capacity warning threshold.')
loggingCapacityTrapWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 73, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loggingCapacityTrapWarningEnable.setStatus('current')
if mibBuilder.loadTexts: loggingCapacityTrapWarningEnable.setDescription('Enable event log capacity SNMP trap warning.')
loggingCapacityEmailWarningEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 73, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loggingCapacityEmailWarningEnable.setStatus('current')
if mibBuilder.loadTexts: loggingCapacityEmailWarningEnable.setDescription('Enable event log capacity email warning.')
loggingOversizeAction = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 73, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("overwrite", 0), ("stoprecord", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loggingOversizeAction.setStatus('current')
if mibBuilder.loadTexts: loggingOversizeAction.setDescription('Set event log over-size action.')
certificateManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 74))
sslCertGen = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 74, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("na", 0), ("generate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertGen.setStatus('current')
if mibBuilder.loadTexts: sslCertGen.setDescription('Generate SSL certificate.')
sshKeyGen = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 74, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("na", 0), ("generate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshKeyGen.setStatus('current')
if mibBuilder.loadTexts: sshKeyGen.setDescription('Generate SSH host key.')
switchLocator = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 64))
blinkingLocatorLED = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 64, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: blinkingLocatorLED.setStatus('current')
if mibBuilder.loadTexts: blinkingLocatorLED.setDescription('Blinking switch locator LED.')
disableLocatorLEDTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 64, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disableLocatorLEDTime.setStatus('current')
if mibBuilder.loadTexts: disableLocatorLEDTime.setDescription('Configure back-off time for disable switch locator LED.')
uiVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uiVersion.setStatus('current')
if mibBuilder.loadTexts: uiVersion.setDescription('New UI Version')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 78), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('Serial Number')
configEncryptEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 7, 108, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEncryptEnable.setStatus('current')
if mibBuilder.loadTexts: configEncryptEnable.setDescription('Configuration File Encryption Setting.')
mibBuilder.exportSymbols("MOXA-EDSG512E8POE-MIB", managementVlanId=managementVlanId, profinetioSetting=profinetioSetting, ntpPeerAuthenticateKeyid=ntpPeerAuthenticateKeyid, portDisableModePeriod=portDisableModePeriod, dhcpRetryPeriods=dhcpRetryPeriods, setDevIpTable=setDevIpTable, tftpUpdate=tftpUpdate, radiusLoginAuthPort=radiusLoginAuthPort, varRemoteAuthSuccessTrap=varRemoteAuthSuccessTrap, setDevIpIndex=setDevIpIndex, enableIgmpSnooping=enableIgmpSnooping, portIndex=portIndex, dnsServer2IpAddr=dnsServer2IpAddr, rateLimitingAction=rateLimitingAction, portAccessControlEntry=portAccessControlEntry, varLoggingCapacityTrap=varLoggingCapacityTrap, moxa=moxa, monitorFDXFlowCtrl=monitorFDXFlowCtrl, syslogServer1=syslogServer1, portEventSeverity=portEventSeverity, numberOfPorts=numberOfPorts, gmrpMulticastGroup=gmrpMulticastGroup, turboChainPort2PartnerBridge=turboChainPort2PartnerBridge, syncInterval=syncInterval, tftpServer=tftpServer, setDeviceIp=setDeviceIp, tacacsServerSetting=tacacsServerSetting, turboChainPort1PartnerBridge=turboChainPort1PartnerBridge, mabRestartEnable=mabRestartEnable, enableModbus=enableModbus, logAnnounceInterval=logAnnounceInterval, httpEnable=httpEnable, sshPort=sshPort, rdnt1stPortRing1=rdnt1stPortRing1, option82Value=option82Value, edsg512epoe=edsg512epoe, gmrpTable=gmrpTable, dscpMappingEntry=dscpMappingEntry, turboRingV2Coupling=turboRingV2Coupling, dot1xReauthPeriod=dot1xReauthPeriod, turboRingPortTable=turboRingPortTable, localLeap61=localLeap61, dstNetmask=dstNetmask, systemEventSupport=systemEventSupport, actionFlag=actionFlag, endMonth=endMonth, ptpv1Status=ptpv1Status, trunkStatus=trunkStatus, gmrpEntry=gmrpEntry, varPoEWarningTrap=varPoEWarningTrap, systemEventSettingsTable=systemEventSettingsTable, bcastStormProtectionIncludeMcast=bcastStormProtectionIncludeMcast, logPathName=logPathName, emailWarningFourthRecipientEmailAddr=emailWarningFourthRecipientEmailAddr, eventlog=eventlog, ringIndexRing2=ringIndexRing2, setDevIpPresentBy=setDevIpPresentBy, domainNumber=domainNumber, bcastStormProtectionIncludeUcast=bcastStormProtectionIncludeUcast, pdNoResponseTimeout=pdNoResponseTimeout, designatedMasterRing2=designatedMasterRing2, dhcpServer3=dhcpServer3, rdnt1stPortStatusRing2=rdnt1stPortStatusRing2, fiberWaveLength=fiberWaveLength, portSecurityModeTable=portSecurityModeTable, stepsRemoved=stepsRemoved, enableAutoIpConfig=enableAutoIpConfig, varFiberWarningTrap=varFiberWarningTrap, portEventSettingsTable=portEventSettingsTable, setDevIpEntry=setDevIpEntry, clockMode=clockMode, portEnable=portEnable, switchLocator=switchLocator, dataBaseOption=dataBaseOption, dot1x2ndRadiusServer=dot1x2ndRadiusServer, radiusLoginAuthSharedKey=radiusLoginAuthSharedKey, supportIfXTable=supportIfXTable, macAddressStickyStatus=macAddressStickyStatus, ivlSwitch=ivlSwitch, currentUtcOffsetValid=currentUtcOffsetValid, setDevIpDedicatedIp=setDevIpDedicatedIp, varABC02WarningTrap=varABC02WarningTrap, portAccessControlAccessStatus=portAccessControlAccessStatus, tacacsLoginAuthServer=tacacsLoginAuthServer, poeporttimetabling=poeporttimetabling, clockSource=clockSource, turboRingMasterMismatchTrap=turboRingMasterMismatchTrap, loginFailureLockoutRetrys=loginFailureLockoutRetrys, dot1x1stRadiusServer=dot1x1stRadiusServer, snmpReadCommunity=snmpReadCommunity, enableQuerier=enableQuerier, enableDot1X=enableDot1X, option82Setting=option82Setting, lldpSetting=lldpSetting, turboRingV2Ring1=turboRingV2Ring1, dscpMapping=dscpMapping, enableMAB=enableMAB, turboRingDesignatedMaster=turboRingDesignatedMaster, portbaseVlanSettingTable=portbaseVlanSettingTable, portDisableMode=portDisableMode, poeSysAllocatedPower=poeSysAllocatedPower, endDay=endDay, poeSysThresholdCutOff=poeSysThresholdCutOff, turboChain=turboChain, vlanType=vlanType, vlanID=vlanID, cosInspection=cosInspection, turboRing=turboRing, trafficPrioritization=trafficPrioritization, poePortVoltage=poePortVoltage, poePortPdStatusDescription=poePortPdStatusDescription, fiberRxPowerWarn=fiberRxPowerWarn, modbusSetting=modbusSetting, varUserAuthSuccessTrap=varUserAuthSuccessTrap, dhcpServer1=dhcpServer1, tacacsLoginAuthAuthType=tacacsLoginAuthAuthType, emailWarningSMTPUser=emailWarningSMTPUser, diIndex=diIndex, couplingMode=couplingMode, leap61=leap61, vartrafficOverloadTrap=vartrafficOverloadTrap, sslPort=sslPort, fiberTxPowerWarn=fiberTxPowerWarn, relayWarningTrafficOverload=relayWarningTrafficOverload, spanningTreeTable=spanningTreeTable, mirroring=mirroring, vlanPortSettingTable=vlanPortSettingTable, mabSettingEntry=mabSettingEntry, option82Type=option82Type, swTraps=swTraps, dscpMappingTable=dscpMappingTable, httpPort=httpPort, loopProtection=loopProtection, fiberVoltage=fiberVoltage, monitorDirection=monitorDirection, portName=portName, trunkMemberPorts=trunkMemberPorts, portSecurityModeStatus=portSecurityModeStatus, turboChainPort1Status=turboChainPort1Status, macAddressStickyVid=macAddressStickyVid, timeSetting=timeSetting, staticMulticast=staticMulticast, syslogServer1port=syslogServer1port, varLLDPChgTrap=varLLDPChgTrap, gmrp=gmrp, defaultGateway=defaultGateway, turboRingMasterSetup=turboRingMasterSetup, couplingEnable=couplingEnable, enableSpanningTree=enableSpanningTree, portLoopDetectedTrap=portLoopDetectedTrap, monitorTxTraffic=monitorTxTraffic, dstMacAddr=dstMacAddr, emailWarningSMTPAuthMethod=emailWarningSMTPAuthMethod, trunkTable=trunkTable, enableGlobalIgmpSnooping=enableGlobalIgmpSnooping, leaveTime=leaveTime, coupling2ndPortStatus=coupling2ndPortStatus, monitorLinkStatus=monitorLinkStatus, staticPortLockPort=staticPortLockPort, diRelayWarningEntry=diRelayWarningEntry, turboRingV2=turboRingV2, dipSwitchTurboRingPole=dipSwitchTurboRingPole, joinTime=joinTime, pwdComplexityCheckAlphabetEnable=pwdComplexityCheckAlphabetEnable, loginLockout=loginLockout, staticMulticastPorts=staticMulticastPorts, poeStatusEntry=poeStatusEntry, power2InputStatus=power2InputStatus, accessibleIpTable=accessibleIpTable, turboRingEnableCoupling=turboRingEnableCoupling, snmpAdminSecurityLevel=snmpAdminSecurityLevel, trunkPort=trunkPort, relayAlarmIndex=relayAlarmIndex, systemEventName=systemEventName, accessibleIpStatus=accessibleIpStatus, spanningTree=spanningTree, localArbTime=localArbTime, staticPortLock=staticPortLock, enablePtp=enablePtp, switchModel=switchModel, varMacStickyPortViolationPortDisableTrap=varMacStickyPortViolationPortDisableTrap, rdnt1stPortRing2=rdnt1stPortRing2, userInfoChgTrap=userInfoChgTrap, overrideRelayWarningSetting=overrideRelayWarningSetting, portPriority=portPriority, listID=listID, moxaUtilityServicePort=moxaUtilityServicePort, moxaNewCmdEnable=moxaNewCmdEnable, configImportTrap=configImportTrap, agingTime=agingTime, relayWarningPower2Off=relayWarningPower2Off, totalMemory=totalMemory, multicastFiltering=multicastFiltering, rdnt1stPortStatusRing1=rdnt1stPortStatusRing1, ringEnableRing2=ringEnableRing2, pdfailure=pdfailure, emailWarningSMTPPort=emailWarningSMTPPort, priorityMappingTable=priorityMappingTable, power1InputStatus=power1InputStatus, portbaseVlanMemberPorts=portbaseVlanMemberPorts, filterType=filterType, enableWarmStart=enableWarmStart, emailWarningThirdRecipientEmailAddr=emailWarningThirdRecipientEmailAddr, enableAccessibleIP=enableAccessibleIP, industrialProtocol=industrialProtocol, radiusServerSetting=radiusServerSetting, portEntry=portEntry, gmrpSettingEntry=gmrpSettingEntry, timeServer1=timeServer1, configChangeTrap=configChangeTrap, syslogServer3port=syslogServer3port, staticMulticastStatus=staticMulticastStatus, varconfigChangeTrap=varconfigChangeTrap, loginFailureLockoutEnable=loginFailureLockoutEnable, coupling1stPortStatus=coupling1stPortStatus, portAccessControl=portAccessControl, varUserAuthFailTrap=varUserAuthFailTrap, varturboRingCouplingPortChangedTrap=varturboRingCouplingPortChangedTrap, turboRingRdntPort2=turboRingRdntPort2, portRelayWarningEntry=portRelayWarningEntry, staticPortLockLegacyPort=staticPortLockLegacyPort, varpower1Trap=varpower1Trap, turboRingMasterChangedTrap=turboRingMasterChangedTrap, monitorFiberCheckTable=monitorFiberCheckTable, snmpTrapCommunity=snmpTrapCommunity, portSecurityModeLimit=portSecurityModeLimit, cpuLoading300s=cpuLoading300s, trunkType=trunkType, ieee1588Setting=ieee1588Setting, masterSetupRing2=masterSetupRing2, turboRingMaster=turboRingMaster, joinedAccessPorts=joinedAccessPorts, tacacsLoginAuthPort=tacacsLoginAuthPort, trafficOverloadTrap=trafficOverloadTrap, etherType=etherType, security=security, dot1xSettingEntry=dot1xSettingEntry, sysFileUpdate=sysFileUpdate, droppacketModeRateLimitingIngressTable=droppacketModeRateLimitingIngressTable, ntpAuthenticate=ntpAuthenticate, monitorDiEntry=monitorDiEntry, fiberRxPower=fiberRxPower, grandmasterPriority1=grandmasterPriority1, commRedundancy=commRedundancy, ptpPortTable=ptpPortTable, dscpMappedPriority=dscpMappedPriority, tacacsLoginAuthTimeout=tacacsLoginAuthTimeout, loggingCapacityTrap=loggingCapacityTrap, srcMacAddr=srcMacAddr, fiberWarningTrap=fiberWarningTrap, portbaseVlanSettingIndex=portbaseVlanSettingIndex, ptpPortEntry=ptpPortEntry, sslCertGen=sslCertGen, pdipaddr=pdipaddr)
mibBuilder.exportSymbols("MOXA-EDSG512E8POE-MIB", abc02AutoExportLog=abc02AutoExportLog, radiusLoginAuthAuthType=radiusLoginAuthAuthType, emailWarningFirstRecipientEmailAddr=emailWarningFirstRecipientEmailAddr, startWeek=startWeek, consoleLoginMode=consoleLoginMode, enableEtherNetIP=enableEtherNetIP, aclRuleIndex=aclRuleIndex, localUtcOffset=localUtcOffset, leaveAllTime=leaveAllTime, systemEventModuleEnable=systemEventModuleEnable, currentUtcOffset=currentUtcOffset, diInputStatus=diInputStatus, dot1xReauthEnable=dot1xReauthEnable, portSecurity=portSecurity, turboRingCouplingPortStatus=turboRingCouplingPortStatus, mabReauthPeriod=mabReauthPeriod, portSetting=portSetting, trunkSettingEntry=trunkSettingEntry, passwordPolicy=passwordPolicy, turboChainPort1=turboChainPort1, meanPathDelayv1=meanPathDelayv1, lldpChgTrap=lldpChgTrap, spanningTreeBridgePriority=spanningTreeBridgePriority, snmpVersion=snmpVersion, eventlogEntry=eventlogEntry, telnetEnable=telnetEnable, turboRingBrokenStatus=turboRingBrokenStatus, snmpInformRetries=snmpInformRetries, poeSysPowerThreshold=poeSysPowerThreshold, poePortIndex=poePortIndex, emailWarningSenderEmailAddr=emailWarningSenderEmailAddr, dot1x1stRadiusSharedKey=dot1x1stRadiusSharedKey, systemEventSeverity=systemEventSeverity, monitorDiTable=monitorDiTable, turboRingV2Ring2=turboRingV2Ring2, monitorPortTable=monitorPortTable, vlanPortSettingEntry=vlanPortSettingEntry, garpSetting=garpSetting, uiVersion=uiVersion, staticMulticastEntry=staticMulticastEntry, priorityMappedQueue=priorityMappedQueue, emailWarning=emailWarning, igmpSnoopingSettingTable=igmpSnoopingSettingTable, portDisableModeTable=portDisableModeTable, dipSwitchSetting=dipSwitchSetting, grandMasterUuidv1=grandMasterUuidv1, eventlogTable=eventlogTable, portEventTrafficDuration=portEventTrafficDuration, turboRingPortDesignatedBridge=turboRingPortDesignatedBridge, qosClassification=qosClassification, dstMacMask=dstMacMask, portVlanType=portVlanType, clockStratumv1=clockStratumv1, masterStatusRing1=masterStatusRing1, varturboRingMasterChangedTrap=varturboRingMasterChangedTrap, droppacketModeRateLimitingIngressEntry=droppacketModeRateLimitingIngressEntry, macAddressStickyAddress=macAddressStickyAddress, logMinDelayReqInterval=logMinDelayReqInterval, managementInterface=managementInterface, relayWarningTable=relayWarningTable, poeSysPowerBudget=poeSysPowerBudget, timeServer2=timeServer2, turboChainPort2=turboChainPort2, fixedMulticastQuerierPorts=fixedMulticastQuerierPorts, schedulingMechanism=schedulingMechanism, syslogServer2=syslogServer2, activeProtocolOfRedundancy=activeProtocolOfRedundancy, poePortStatus=poePortStatus, relayWarningTurboRingBreakStatus=relayWarningTurboRingBreakStatus, dscpInspection=dscpInspection, loggingCapacityEmailWarningEnable=loggingCapacityEmailWarningEnable, offsetToMaster=offsetToMaster, loginFailureLockoutTime=loginFailureLockoutTime, portEventModuleEnable=portEventModuleEnable, grandmasterIdentity=grandmasterIdentity, dscpClass=dscpClass, power1Trap=power1Trap, portDesc=portDesc, accessControlList=accessControlList, PortList=PortList, monitorTraffic=monitorTraffic, offsetHours=offsetHours, qosPortEntry=qosPortEntry, enableLLDP=enableLLDP, monitorRxTraffic=monitorRxTraffic, igmpSnoopingSettingEntry=igmpSnoopingSettingEntry, rdnt2ndPortStatusRing2=rdnt2ndPortStatusRing2, abc02AutoImportConfig=abc02AutoImportConfig, pdPollingInterval=pdPollingInterval, trap2ServerAddr=trap2ServerAddr, dot1xReauthTable=dot1xReauthTable, enableWebConfig=enableWebConfig, poePortClass=poePortClass, portEventSettingsEntry=portEventSettingsEntry, enableGMRP=enableGMRP, poeWarningTrap=poeWarningTrap, eipSetting=eipSetting, ntpAuthenticateKeyEntry=ntpAuthenticateKeyEntry, pwdMinLength=pwdMinLength, srcNetmask=srcNetmask, httpLoginFailureMessage=httpLoginFailureMessage, loggingOversizeAction=loggingOversizeAction, emailWarningSMTPServer=emailWarningSMTPServer, enableOption82=enableOption82, systemEventSettingsEntry=systemEventSettingsEntry, sshKeyGen=sshKeyGen, abc02AutoExportConfig=abc02AutoExportConfig, userAuthSuccessTrap=userAuthSuccessTrap, rdnt2ndPortRing2=rdnt2ndPortRing2, networkSetting=networkSetting, varRateLimitedOnTrap=varRateLimitedOnTrap, circuitID=circuitID, rateLimiting=rateLimiting, ingressLimitRate=ingressLimitRate, powerLimit=powerLimit, srcsocketPort=srcsocketPort, poePortPowerOutput=poePortPowerOutput, poeSysPowerEnable=poeSysPowerEnable, dipSwitchRingMasterPole=dipSwitchRingMasterPole, diRelayWarningTable=diRelayWarningTable, localLeap59=localLeap59, radiusLoginAuthServer=radiusLoginAuthServer, poeTPortIndex=poeTPortIndex, localPtpTimescale=localPtpTimescale, usedMemory=usedMemory, varConfigImportTrap=varConfigImportTrap, clockClass=clockClass, emailWarningSMTPTLS=emailWarningSMTPTLS, ptpTimescale=ptpTimescale, vlan=vlan, varUserInfoChgTrap=varUserInfoChgTrap, transport=transport, mgmtInterfaceAutoLogout=mgmtInterfaceAutoLogout, gmrpLearnedPorts=gmrpLearnedPorts, clockIdentifierv1=clockIdentifierv1, ptpPortStatus=ptpPortStatus, spanningTreePortCost=spanningTreePortCost, fiberTxPower=fiberTxPower, varPortLoopDetectedTrap=varPortLoopDetectedTrap, loggingCapacityThreshold=loggingCapacityThreshold, dhcpPortIndex=dhcpPortIndex, parentUuidv1=parentUuidv1, syncIntervalv1=syncIntervalv1, dipSwitchEnableTurboRing=dipSwitchEnableTurboRing, ntpPeerAddress=ntpPeerAddress, ntpAuthenticateKeyIndex=ntpAuthenticateKeyIndex, aclStatus=aclStatus, localUtcOffsetValid=localUtcOffsetValid, dot1x=dot1x, protocolOfRedundancySetup=protocolOfRedundancySetup, portAccessControlStatus=portAccessControlStatus, grandmasterPriority2=grandmasterPriority2, startHour=startHour, ptpv2Status=ptpv2Status, eventlogBootup=eventlogBootup, staticPortLockLegacyStatus=staticPortLockLegacyStatus, portbaseVlanSettingEntry=portbaseVlanSettingEntry, trunkEntry=trunkEntry, loggingCapacityTrapWarningEnable=loggingCapacityTrapWarningEnable, macAddressStickyPort=macAddressStickyPort, userAuthFailTrap=userAuthFailTrap, portSubdesc=portSubdesc, dstIpAddr=dstIpAddr, switchIpAddr=switchIpAddr, aclID=aclID, portTrunking=portTrunking, poeWeekDay=poeWeekDay, tacacsLoginAuthSharedKey=tacacsLoginAuthSharedKey, ingressPort=ingressPort, poeTimeEntry=poeTimeEntry, poeDayStart=poeDayStart, turboRingControlPort=turboRingControlPort, enableTelnetConsole=enableTelnetConsole, turboRingControlPortStatus=turboRingControlPortStatus, poePortLegacyPdDetect=poePortLegacyPdDetect, powerConsumption=powerConsumption, ntpAuthenticateKeyTrusted=ntpAuthenticateKeyTrusted, igmpSnooping=igmpSnooping, turboChainRole=turboChainRole, relayWarningTurboRingBreak=relayWarningTurboRingBreak, ntpPeerTable=ntpPeerTable, fiberPort=fiberPort, relayWarningDiInputChanged=relayWarningDiInputChanged, enableFactoryDefault=enableFactoryDefault, coupling1stPort=coupling1stPort, trapVersion=trapVersion, aclAttachmentEntry=aclAttachmentEntry, dot1xSettingTable=dot1xSettingTable, portEventActive=portEventActive, firmwarePathName=firmwarePathName, spanningTreeHelloTime=spanningTreeHelloTime, ringIndexRing1=ringIndexRing1, snmpInformEnable=snmpInformEnable, rdnt2ndPortRing1=rdnt2ndPortRing1, enableProfinetIO=enableProfinetIO, sshEnable=sshEnable, monitorPortEntry=monitorPortEntry, spanningTreePortStatus=spanningTreePortStatus, portSecurityModeViolationPortDisable=portSecurityModeViolationPortDisable, relayWarningPower2OffStatus=relayWarningPower2OffStatus, eventlogIndex=eventlogIndex, sslEnable=sslEnable, learnedMulticastQuerierPorts=learnedMulticastQuerierPorts, meanPathDelay=meanPathDelay, poePortConsumption=poePortConsumption, coupling2ndPort=coupling2ndPort, emailWarningSecondRecipientEmailAddr=emailWarningSecondRecipientEmailAddr, rdnt2ndPortStatusRing1=rdnt2ndPortStatusRing1, daylightSaving=daylightSaving, ingressLimit=ingressLimit, remoteAuthFailTrap=remoteAuthFailTrap, portDefaultVid=portDefaultVid, fiberTempWarn=fiberTempWarn, portFixedVid=portFixedVid, announceReceiptTimeout=announceReceiptTimeout, poeStatusTable=poeStatusTable, portAccessControlAddress=portAccessControlAddress, accessibleIpAddress=accessibleIpAddress, macStickyPortViolationPortDisableTrap=macStickyPortViolationPortDisableTrap, portAccessControlTable=portAccessControlTable, monitorAutoMDI=monitorAutoMDI, timesource=timesource, confPathName=confPathName, dot1xRadius=dot1xRadius, portSecurityModePort=portSecurityModePort, userLoginSetting=userLoginSetting, poeSetting=poeSetting, dhcpRetryTimes=dhcpRetryTimes, ptpv1Setting=ptpv1Setting, staticPortLockStatus=staticPortLockStatus, staticPortLockLegacyAddress=staticPortLockLegacyAddress, trunkSettingTable=trunkSettingTable, lldpMSGInterval=lldpMSGInterval, mirroringPort=mirroringPort, pwdComplexityCheckSpecialCharEnable=pwdComplexityCheckSpecialCharEnable, spanningTreePortPriority=spanningTreePortPriority, syslogServer2port=syslogServer2port, dnsServer1IpAddr=dnsServer1IpAddr, varpower2Trap=varpower2Trap, varRemoteAuthFailTrap=varRemoteAuthFailTrap, setDevIpCurrentIpofDevice=setDevIpCurrentIpofDevice, querierQueryInterval=querierQueryInterval, mabSettingTable=mabSettingTable, ptpPortIndex=ptpPortIndex, snmpInformTimeout=snmpInformTimeout, monitor=monitor, aclAttachmentTable=aclAttachmentTable, monitorFiberCheckEntry=monitorFiberCheckEntry, backupMediaSetting=backupMediaSetting, enableGvrp=enableGvrp, endWeek=endWeek, portSecurityModeSelect=portSecurityModeSelect, vlanId=vlanId, parentIdentity=parentIdentity)
mibBuilder.exportSymbols("MOXA-EDSG512E8POE-MIB", portEventTrafficThreshold=portEventTrafficThreshold, dhcpFunctionTable=dhcpFunctionTable, httpMaxLoginUsers=httpMaxLoginUsers, power2Trap=power2Trap, staticPortLockVid=staticPortLockVid, eventlogTime=eventlogTime, ntpPeerEntry=ntpPeerEntry, brokenStatusRing1=brokenStatusRing1, accessControlEntry=accessControlEntry, portSpeed=portSpeed, memoryUsage=memoryUsage, ntpAuthenticateKeyString=ntpAuthenticateKeyString, emailService=emailService, portAccessControlVid=portAccessControlVid, systemEventIndex=systemEventIndex, dipSwitchRingCouplingPole=dipSwitchRingCouplingPole, snmpTrap2Community=snmpTrap2Community, dhcpServer4=dhcpServer4, poeDayStop=poeDayStop, syslogServer3=syslogServer3, systemNotifyMessage=systemNotifyMessage, ptpv2Setting=ptpv2Setting, leap59=leap59, relayWarningEntry=relayWarningEntry, monitorSpeed=monitorSpeed, masterSetupRing1=masterSetupRing1, telnetMaxLoginUsers=telnetMaxLoginUsers, pdNoResponseAction=pdNoResponseAction, grandmasterClockClass=grandmasterClockClass, accessControlTable=accessControlTable, turboRingPortStatus=turboRingPortStatus, spanningTreeRoot=spanningTreeRoot, freeMemory=freeMemory, fiberModelName=fiberModelName, staticMulticastTable=staticMulticastTable, eventSettings=eventSettings, qosPortTable=qosPortTable, trunkIndex=trunkIndex, poePortPdFailCheck=poePortPdFailCheck, varredundancyTopologyChangedTrap=varredundancyTopologyChangedTrap, fiberTemperature=fiberTemperature, radiusLoginAuthTimeout=radiusLoginAuthTimeout, bcastStormProtection=bcastStormProtection, turboRingCouplingPortChangedTrap=turboRingCouplingPortChangedTrap, srcMacMask=srcMacMask, staticPortLockLegacy=staticPortLockLegacy, syslogSetting=syslogSetting, eventlogDate=eventlogDate, snmpdPort=snmpdPort, trunkSettingIndex=trunkSettingIndex, sysDateTime=sysDateTime, portFDXFlowCtrl=portFDXFlowCtrl, remoteAuthSuccessTrap=remoteAuthSuccessTrap, mabDBOption=mabDBOption, mibNotificationsPrefix=mibNotificationsPrefix, snmpdEnable=snmpdEnable, startDay=startDay, snmpUserSecurityLevel=snmpUserSecurityLevel, brokenStatusRing2=brokenStatusRing2, joinedTrunkPorts=joinedTrunkPorts, enableNTPServer=enableNTPServer, dot1xReauthPortIndex=dot1xReauthPortIndex, ntpPeerIndex=ntpPeerIndex, preferMasterv1=preferMasterv1, pwdComplexityCheckEnable=pwdComplexityCheckEnable, priorityTag=priorityTag, httpLoginMessage=httpLoginMessage, spanningTreeForwardingDelay=spanningTreeForwardingDelay, portEventIndex=portEventIndex, dot1xSameAsAuthServer=dot1xSameAsAuthServer, portEventLabel=portEventLabel, turboRingPortDesignatedPort=turboRingPortDesignatedPort, accessibleIpEntry=accessibleIpEntry, certificateManagement=certificateManagement, configEncryptEnable=configEncryptEnable, mabReauthEnable=mabReauthEnable, dot1xReauth=dot1xReauth, abc02WarningTrap=abc02WarningTrap, spanningTreeIndex=spanningTreeIndex, relayWarningTrafficOverloadStatus=relayWarningTrafficOverloadStatus, turboRingPortEntry=turboRingPortEntry, relayWarningTrafficDuration=relayWarningTrafficDuration, relayWarningDiInputChangedStatus=relayWarningDiInputChangedStatus, ntpAuthenticateKeyTable=ntpAuthenticateKeyTable, industrialEthernet=industrialEthernet, relayWarning=relayWarning, staticMulticastAddress=staticMulticastAddress, userLoginServer=userLoginServer, macAddressSticky=macAddressSticky, startMonth=startMonth, poeDayEnable=poeDayEnable, broadcastStormProtection=broadcastStormProtection, eventlogClear=eventlogClear, portRelayWarningTable=portRelayWarningTable, dot1x2ndRadiusPort=dot1x2ndRadiusPort, masterStatusRing2=masterStatusRing2, accessibleIP=accessibleIP, ntpAuthenticateKeyID=ntpAuthenticateKeyID, option82ValueDisplay=option82ValueDisplay, fiberSN=fiberSN, priority1=priority1, dhcpRelayAgentSetting=dhcpRelayAgentSetting, endHour=endHour, ringEnableRing1=ringEnableRing1, turboRingPortIndex=turboRingPortIndex, moxaUtilityServiceEnable=moxaUtilityServiceEnable, turboChainPort2Status=turboChainPort2Status, offsetToMasterv1=offsetToMasterv1, vlanTable=vlanTable, vlanName=vlanName, priorityMapping=priorityMapping, gmrpSettingTable=gmrpSettingTable, aclListName=aclListName, turboRingCouplingPort=turboRingCouplingPort, disableLocatorLEDTime=disableLocatorLEDTime, lineSwapRecovery=lineSwapRecovery, mab=mab, poeTimeTable=poeTimeTable, relayWarningPower1Off=relayWarningPower1Off, poePortEnable=poePortEnable, relayWarningPower1OffStatus=relayWarningPower1OffStatus, switchIpMask=switchIpMask, poePowerOutputMode=poePowerOutputMode, abc02Status=abc02Status, grandmasterClockAccuracy=grandmasterClockAccuracy, portTable=portTable, protocolCode=protocolCode, targetPort=targetPort, telnetPort=telnetPort, mabRestartPeriod=mabRestartPeriod, poeSystemSetting=poeSystemSetting, spanningTreeEntry=spanningTreeEntry, portAccessControlPortNo=portAccessControlPortNo, systemEventActive=systemEventActive, portDisableModeEntry=portDisableModeEntry, blinkingLocatorLED=blinkingLocatorLED, dhcpServer2=dhcpServer2, portForbiddenVid=portForbiddenVid, poePortCurrent=poePortCurrent, dot1x1stRadiusPort=dot1x1stRadiusPort, ptpPortEnable=ptpPortEnable, dstsocketPort=dstsocketPort, spanningTreeMaxAge=spanningTreeMaxAge, cpuLoading5s=cpuLoading5s, srcIpAddr=srcIpAddr, portMDI=portMDI, enablePtpv1=enablePtpv1, portSecurityModeEntry=portSecurityModeEntry, supportMacSticky=supportMacSticky, pwdComplexityCheckDigitEnable=pwdComplexityCheckDigitEnable, trapServerAddr=trapServerAddr, poeSysMeasuredPower=poeSysMeasuredPower, designatedMasterRing1=designatedMasterRing1, spanningTreePortEdge=spanningTreePortEdge, poePortTable=poePortTable, turboRingRdntPort1=turboRingRdntPort1, priorityMappingEntry=priorityMappingEntry, eventlogEvent=eventlogEvent, diagnosis=diagnosis, logMinPdelayReqInterval=logMinPdelayReqInterval, subDomainNamev1=subDomainNamev1, relayWarningRelayContact=relayWarningRelayContact, swMgmt=swMgmt, ntpPeerAuthenticate=ntpPeerAuthenticate, redundancyTopologyChangedTrap=redundancyTopologyChangedTrap, poePortEntry=poePortEntry, cpuLoading30s=cpuLoading30s, syslogManagement=syslogManagement, portFixedVidUntag=portFixedVidUntag, vlanEntry=vlanEntry, priority2=priority2, varturboRingMasterMismatchTrap=varturboRingMasterMismatchTrap, serialNumber=serialNumber, relayWarningLinkChangedStatus=relayWarningLinkChangedStatus, option82Enable=option82Enable, emailWarningSMTPPassword=emailWarningSMTPPassword, dot1x2ndRadiusSharedKey=dot1x2ndRadiusSharedKey, relayWarningRxTrafficThreshold=relayWarningRxTrafficThreshold, dhcpFunctionEntry=dhcpFunctionEntry, staticPortLockAddress=staticPortLockAddress, calibratePeriod=calibratePeriod, portEventEnable=portEventEnable, PYSNMP_MODULE_ID=edsg512epoe, rateLimitedOnTrap=rateLimitedOnTrap, firmwareVersion=firmwareVersion, clockModev1=clockModev1, accessibleIpNetMask=accessibleIpNetMask, gmrpFixedPorts=gmrpFixedPorts, dot1xReauthEntry=dot1xReauthEntry, relayWarningLinkChanged=relayWarningLinkChanged, multicastFastForwarding=multicastFastForwarding, joinedHybridPorts=joinedHybridPorts, eventlogUptime=eventlogUptime)
