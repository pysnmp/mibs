#
# PySNMP MIB module ICOTERA-I6400-SERIES (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/icotera/ICOTERA-I6400-SERIES-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 11:47:50 2024
# On host fv-az1427-842 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Gauge32, Counter64, IpAddress, iso, Bits, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, MibIdentifier, enterprises, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "Counter64", "IpAddress", "iso", "Bits", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "MibIdentifier", "enterprises", "NotificationType", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
icotera = ModuleIdentity((1, 3, 6, 1, 4, 1, 29865))
icotera.setRevisions(('2017-03-01 16:46', '2017-02-09 14:27', '2017-01-16 10:32', '2016-08-26 09:24', '2016-08-24 09:04', '2015-04-01 13:57',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: icotera.setRevisionsDescriptions(('MIBs were adjusted to match all \n\t\ti64xx-series CPE product family.', 'Minor correction of object values', 'Added support for Multicast Analyser', 'Minor correction of object names, \n\tunnecessary commentary removed', 'Missing descriptions added,\n\tSome MODULE_IDENTITY was changed to correct OBJECT_IDENTITY,\n\tCATV Filter packages fixed,\n\tFixed mib name from 4k to 1k,\n\tMinor cosmetic corrections,\n\tAdded support for DDM', 'Created from ICOTERA-MIB.mib',))
if mibBuilder.loadTexts: icotera.setLastUpdated('201703011646Z')
if mibBuilder.loadTexts: icotera.setOrganization('Icotera A/S')
if mibBuilder.loadTexts: icotera.setContactInfo('Icotera A/S\n     Customer Support\n\n     Mail : Kongevejen 400D\n            2840 Holte\n            Danmark\n\n     Tel  : +45 7010 0033\n\n     E-mail: support@icotera.com\n     Web   : http://icotera.com')
if mibBuilder.loadTexts: icotera.setDescription('The Icotera management information base SMI definitions')
ictIGW1k = ObjectIdentity((1, 3, 6, 1, 4, 1, 29865, 11))
if mibBuilder.loadTexts: ictIGW1k.setStatus('current')
if mibBuilder.loadTexts: ictIGW1k.setDescription('Device related SNMP options')
ictMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 29865, 11, 2))
ictServices = MibIdentifier((1, 3, 6, 1, 4, 1, 29865, 11, 3))
ictReset = MibIdentifier((1, 3, 6, 1, 4, 1, 29865, 11, 5))
ictMcastAnalyzer = MibIdentifier((1, 3, 6, 1, 4, 1, 29865, 11, 7))
ictServicesMibs = ObjectIdentity((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1))
if mibBuilder.loadTexts: ictServicesMibs.setStatus('current')
if mibBuilder.loadTexts: ictServicesMibs.setDescription('The MIB module for managing Icotera services')
ictCatv = ObjectIdentity((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 1))
if mibBuilder.loadTexts: ictCatv.setStatus('current')
if mibBuilder.loadTexts: ictCatv.setDescription('The MIB module for managing Icotera services')
catvModuleAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: catvModuleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: catvModuleAdminStatus.setDescription('The administrative status of the module, this can be enabled(1) or\n    disabled(0).')
catvModuleFilter = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("pkg1", 1), ("pkg2", 2), ("pkg3", 3), ("pkg4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: catvModuleFilter.setStatus('current')
if mibBuilder.loadTexts: catvModuleFilter.setDescription('Package filter selected for catv module')
catvModuleRflevel = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("auto", 0), ("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: catvModuleRflevel.setStatus('current')
if mibBuilder.loadTexts: catvModuleRflevel.setDescription('RF signal amplification on CATV output')
catvModuleLowSignal = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catvModuleLowSignal.setStatus('current')
if mibBuilder.loadTexts: catvModuleLowSignal.setDescription('Low signal level of catv led')
catvModuleSignalDetected = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: catvModuleSignalDetected.setStatus('current')
if mibBuilder.loadTexts: catvModuleSignalDetected.setDescription('Tells whether CATV signal is detected: yes(1) - detected, no(0) - not detected.')
catvModulePowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: catvModulePowerLevel.setStatus('current')
if mibBuilder.loadTexts: catvModulePowerLevel.setDescription('Current CATV power level. It can have one of the following values:\n     - any integer between -1099 and 199 when the power level is higher than -11.00 and lower than 2.00,\n       which is the power level in dBm multiplied by 100.\n     - a value of -2147483648 when the power level is lower than -11 dBm\n     - a value of 2147483647 when the power level is higher than 2 dBm.')
ictTransceiver = ObjectIdentity((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 3))
if mibBuilder.loadTexts: ictTransceiver.setStatus('current')
if mibBuilder.loadTexts: ictTransceiver.setDescription('The container for DDM related MIB module')
transceiverDdmTemperature = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transceiverDdmTemperature.setStatus('current')
if mibBuilder.loadTexts: transceiverDdmTemperature.setDescription('Internally measured transceiver temperature.\n     Represented in increments of 1/256 degrees Celsius,\n     yielding a total range of (minus) 128C to (plus) 128C.')
transceiverDdmTxPower = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transceiverDdmTxPower.setStatus('current')
if mibBuilder.loadTexts: transceiverDdmTxPower.setDescription('Measured TX output power.\n     Represented in increments of 1/10000 mW.')
transceiverDdmRxPower = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transceiverDdmRxPower.setStatus('current')
if mibBuilder.loadTexts: transceiverDdmRxPower.setDescription('Measured RX received optical power.\n     Represented in increments of 1/10000 mW.')
transceiverDdmVoltage = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transceiverDdmVoltage.setStatus('current')
if mibBuilder.loadTexts: transceiverDdmVoltage.setDescription('Internally measured transceiver supply voltage.\n     Represented in increments of 1/10000 V.')
transceiverDdmTxBiasCurrent = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transceiverDdmTxBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: transceiverDdmTxBiasCurrent.setDescription('Measured TX bias current.\n     Represented in increments of 1/500 mA.')
transceiverTransceiverType = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("gbic", 1), ("moduleSolderedToMotherboard", 2), ("sfp", 3), ("type300pinXbi", 4), ("xenpak", 5), ("xfp", 6), ("xff", 7), ("xfpE", 8), ("xPak", 9), ("x2", 10), ("dWdmSfp", 11), ("qSfp", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transceiverTransceiverType.setStatus('current')
if mibBuilder.loadTexts: transceiverTransceiverType.setDescription('Type of serial transceiver.')
transceiverLaserWavelength = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transceiverLaserWavelength.setStatus('current')
if mibBuilder.loadTexts: transceiverLaserWavelength.setDescription('TX Laser Wavelength, units of nm.')
transceiverConnectorType = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 32, 33, 34))).clone(namedValues=NamedValues(("unknown", 0), ("sc", 1), ("fibreChannelStyle1CopperConnector", 2), ("fibreChannelStyle2CopperConnector", 3), ("bncTnc", 4), ("fibreChannelCoaxialHeaders", 5), ("fiberJack", 6), ("lc", 7), ("mtRj", 8), ("mu", 9), ("sg", 10), ("opticalPigtail", 11), ("mpoParallelOptic", 12), ("hssdcII", 32), ("copperPigtail", 33), ("rj45", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transceiverConnectorType.setStatus('current')
if mibBuilder.loadTexts: transceiverConnectorType.setDescription('Connector type provided.')
transceiverEthernetCompliance = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transceiverEthernetCompliance.setStatus('current')
if mibBuilder.loadTexts: transceiverEthernetCompliance.setDescription('Ethernet compliance. 8-bit bit field:\n     Bit 7 - BASE-PX\n     Bit 6 - BASE-BX10\n     Bit 5 - 100BASE-FX\n     Bit 4 - 100BASE-LX/LX10\n     Bit 3 - 1000BASE-T\n     Bit 2 - 1000BASE-CX\n     Bit 1 - 1000BASE-LX\n     Bit 0 - 1000BASE-SX.')
transceiverLinkLength = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transceiverLinkLength.setStatus('current')
if mibBuilder.loadTexts: transceiverLinkLength.setDescription('Link length supported for single mode fiber, units of km.')
transceiverDiagCapable = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 3, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transceiverDiagCapable.setStatus('current')
if mibBuilder.loadTexts: transceiverDiagCapable.setDescription('Digital diagnostic monitoring implemented.')
ictFacRst = ObjectIdentity((1, 3, 6, 1, 4, 1, 29865, 11, 5, 1))
if mibBuilder.loadTexts: ictFacRst.setStatus('current')
if mibBuilder.loadTexts: ictFacRst.setDescription('The MIB parent for CPE reset')
ictFacRstMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 29865, 11, 5, 1, 1))
if mibBuilder.loadTexts: ictFacRstMib.setStatus('current')
if mibBuilder.loadTexts: ictFacRstMib.setDescription('The MIB which makes Factory Reset of CPE')
performFactoryReset = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("noActionRequested", 0), ("makeFactoryreset", 1), ("someErrorOccured", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: performFactoryReset.setStatus('current')
if mibBuilder.loadTexts: performFactoryReset.setDescription('MIB used to perform Factory Reset.')
ictMgmtMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 29865, 11, 2, 1))
if mibBuilder.loadTexts: ictMgmtMib.setStatus('current')
if mibBuilder.loadTexts: ictMgmtMib.setDescription('The MIB which allows managing the CPE')
ictFwUpg = ObjectIdentity((1, 3, 6, 1, 4, 1, 29865, 11, 2, 1, 1))
if mibBuilder.loadTexts: ictFwUpg.setStatus('current')
if mibBuilder.loadTexts: ictFwUpg.setDescription('The MIB of firmware upgrade')
ictCfgUpdate = ObjectIdentity((1, 3, 6, 1, 4, 1, 29865, 11, 2, 1, 2))
if mibBuilder.loadTexts: ictCfgUpdate.setStatus('current')
if mibBuilder.loadTexts: ictCfgUpdate.setDescription('The MIB of configuration update')
ictReboot = ObjectIdentity((1, 3, 6, 1, 4, 1, 29865, 11, 2, 1, 3))
if mibBuilder.loadTexts: ictReboot.setStatus('current')
if mibBuilder.loadTexts: ictReboot.setDescription('The MIB responsible for CPE reboot')
upgUrl = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgUrl.setStatus('current')
if mibBuilder.loadTexts: upgUrl.setDescription('MIB for firmware file path declaration.')
upgExecute = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notUpgrading", 0), ("startUpgrade", 1), ("validatingUpgrade-CheckErrorCodeIfFailed", 2), ("someErrorOccured", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgExecute.setStatus('current')
if mibBuilder.loadTexts: upgExecute.setDescription('MIB for firmware upgrade execution.')
upgStatus = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upgStatus.setStatus('current')
if mibBuilder.loadTexts: upgStatus.setDescription('MIB used to check firmware upgrade status.')
cfgTftpPath = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 2, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgTftpPath.setStatus('current')
if mibBuilder.loadTexts: cfgTftpPath.setDescription('MIB for configuration file path stored at TFTP declaration.')
cfgExecute = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notUpdating", 0), ("startUpdate", 1), ("inProgress", 2), ("someErrorOccured", 3), ("resultOK", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgExecute.setStatus('current')
if mibBuilder.loadTexts: cfgExecute.setDescription('MIB for configuration upload exectution.')
cfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 2, 1, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgStatus.setStatus('current')
if mibBuilder.loadTexts: cfgStatus.setDescription('MIB used to check configuration upload status.')
performCpeReboot = MibScalar((1, 3, 6, 1, 4, 1, 29865, 11, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("noActionRequested", 0), ("makeReboot", 1), ("someErrorOccured", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: performCpeReboot.setStatus('current')
if mibBuilder.loadTexts: performCpeReboot.setDescription('MIB for CPE reboot execution.')
class IctTimeStamp(TextualConvention, Counter32):
    description = 'The time as the number of seconds since the Epoch.'
    status = 'current'

class IctPortList(TextualConvention, OctetString):
    description = 'Comma-separated list of LAN ports.'
    status = 'current'

class IctJitter(TextualConvention, Integer32):
    description = 'When used in conjunction with the DISPLAY-HINT will show jitter calculated for the last second.\n             Without the DISPLAY-HINT the jitter value is multiplied by 100.'
    status = 'current'
    displayHint = 'd-2'

class IctDelta(TextualConvention, Integer32):
    description = 'Time period between two successive packets expressed in hundredths of a milliseconds.\n             When used in conjunction with the DISPLAY-HINT will show milliseconds and fractions of millisecond.'
    status = 'current'
    displayHint = 'd-2'

ictMcastAnalyzerCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1))
ictMcastAnalyzerHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2))
ictMcastAnalyzerCurrentList = MibTable((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 1), )
if mibBuilder.loadTexts: ictMcastAnalyzerCurrentList.setStatus('current')
if mibBuilder.loadTexts: ictMcastAnalyzerCurrentList.setDescription('A list of currently analyzed multicast groups.')
currentListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 1, 1), ).setIndexNames((0, "ICOTERA-I6400-SERIES", "curGroupIndex"))
if mibBuilder.loadTexts: currentListEntry.setStatus('current')
if mibBuilder.loadTexts: currentListEntry.setDescription('An entry containing a particular multicast group address.')
curGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: curGroupIndex.setStatus('current')
if mibBuilder.loadTexts: curGroupIndex.setDescription('Index of the analyzed multicast group.')
curGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curGroupAddr.setStatus('current')
if mibBuilder.loadTexts: curGroupAddr.setDescription("The IPv4 address of this entry's multicast group.")
ictMcastAnalyzerCurrentMetrics = MibTable((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2), )
if mibBuilder.loadTexts: ictMcastAnalyzerCurrentMetrics.setStatus('current')
if mibBuilder.loadTexts: ictMcastAnalyzerCurrentMetrics.setDescription('A list of currently analyzed multicast groups and their metrics.')
currentMetricsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1), ).setIndexNames((0, "ICOTERA-I6400-SERIES", "curMetrGroupAddr"))
if mibBuilder.loadTexts: currentMetricsEntry.setStatus('current')
if mibBuilder.loadTexts: currentMetricsEntry.setDescription('An entry containing metrics concerning a particular multicast group.')
curMetrGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrGroupAddr.setStatus('current')
if mibBuilder.loadTexts: curMetrGroupAddr.setDescription("The IPv4 address of this entry's multicast group.")
curMetrSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrSourceAddr.setStatus('current')
if mibBuilder.loadTexts: curMetrSourceAddr.setDescription('The source IPv4 address of this multicast stream.')
curMetrDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrDstPort.setStatus('current')
if mibBuilder.loadTexts: curMetrDstPort.setDescription('The destination port number of this multicast stream.')
curMetrSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrSrcPort.setStatus('current')
if mibBuilder.loadTexts: curMetrSrcPort.setDescription('The source port number of this multicast stream.')
curMetrTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrTotalBytes.setStatus('current')
if mibBuilder.loadTexts: curMetrTotalBytes.setDescription('The total number of bytes transferred within the stream.')
curMetrTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrTotalPackets.setStatus('current')
if mibBuilder.loadTexts: curMetrTotalPackets.setDescription('The total number of packets transferred within the stream.')
curMetrKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrKbps.setStatus('current')
if mibBuilder.loadTexts: curMetrKbps.setDescription('Kilobits per second during last second.')
curMetrPps = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrPps.setStatus('current')
if mibBuilder.loadTexts: curMetrPps.setDescription('Packets per second during last second.')
curMetrAvgKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrAvgKbps.setStatus('current')
if mibBuilder.loadTexts: curMetrAvgKbps.setDescription('Average kilobits per second.')
curMetrAvgPps = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrAvgPps.setStatus('current')
if mibBuilder.loadTexts: curMetrAvgPps.setDescription('Average packets per second.')
curMetrMaxDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 11), IctDelta()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrMaxDelta.setStatus('current')
if mibBuilder.loadTexts: curMetrMaxDelta.setDescription('Maximum time period between two successive packets from the last second.')
curMetrAvgDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 12), IctDelta()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrAvgDelta.setStatus('current')
if mibBuilder.loadTexts: curMetrAvgDelta.setDescription('Average time period between two successive packets from the last second.')
curMetrTotalMaxDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 13), IctDelta()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrTotalMaxDelta.setStatus('current')
if mibBuilder.loadTexts: curMetrTotalMaxDelta.setDescription('Maximum time period between two successive packets.')
curMetrTotalAvgDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 14), IctDelta()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrTotalAvgDelta.setStatus('current')
if mibBuilder.loadTexts: curMetrTotalAvgDelta.setDescription('Average time period between two successive packets.')
curMetrStartTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 15), IctTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrStartTimestamp.setStatus('current')
if mibBuilder.loadTexts: curMetrStartTimestamp.setDescription('The time at which the stream started being analyzed.')
curMetrStopTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 16), IctTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrStopTimestamp.setStatus('current')
if mibBuilder.loadTexts: curMetrStopTimestamp.setDescription('The time at which the stream stopped being analyzed.')
curMetrMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 17), IctPortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrMemberPorts.setStatus('current')
if mibBuilder.loadTexts: curMetrMemberPorts.setDescription('LAN ports being members of the multicast group.')
curMetrStreamType = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrStreamType.setStatus('current')
if mibBuilder.loadTexts: curMetrStreamType.setDescription('Type of the stream: either RTP or UDP.')
curMetrSkips = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrSkips.setStatus('current')
if mibBuilder.loadTexts: curMetrSkips.setDescription('Number of skipped MPG-TS packets during last second.')
curMetrDiscontinuities = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrDiscontinuities.setStatus('current')
if mibBuilder.loadTexts: curMetrDiscontinuities.setDescription('Number of MPG-TS discontinuities during last second.')
curMetrLost = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrLost.setStatus('current')
if mibBuilder.loadTexts: curMetrLost.setDescription('Number of lost RTP packets during last second.')
curMetrReordered = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrReordered.setStatus('current')
if mibBuilder.loadTexts: curMetrReordered.setDescription('Number of reordered RTP packets during last second.')
curMetrTotalSkips = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrTotalSkips.setStatus('current')
if mibBuilder.loadTexts: curMetrTotalSkips.setDescription('Total number of skipped MPG-TS packets.')
curMetrTotalDiscontinuities = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrTotalDiscontinuities.setStatus('current')
if mibBuilder.loadTexts: curMetrTotalDiscontinuities.setDescription('Total number of MPG-TS discontinuities.')
curMetrTotalLost = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrTotalLost.setStatus('current')
if mibBuilder.loadTexts: curMetrTotalLost.setDescription('Total number of lost RTP packets.')
curMetrTotalReordered = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrTotalReordered.setStatus('current')
if mibBuilder.loadTexts: curMetrTotalReordered.setDescription('Total number of reordered RTP packets.')
curMetrAvgLostPps = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrAvgLostPps.setStatus('current')
if mibBuilder.loadTexts: curMetrAvgLostPps.setDescription('Average number of lost RTP packets per second.')
curMetrJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 1, 2, 1, 28), IctJitter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curMetrJitter.setStatus('current')
if mibBuilder.loadTexts: curMetrJitter.setDescription('Jitter calculated for the last second.')
ictMcastAnalyzerHistoryList = MibTable((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 1), )
if mibBuilder.loadTexts: ictMcastAnalyzerHistoryList.setStatus('current')
if mibBuilder.loadTexts: ictMcastAnalyzerHistoryList.setDescription('A list of formerly analyzed multicast groups.')
historyListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 1, 1), ).setIndexNames((0, "ICOTERA-I6400-SERIES", "histGroupIndex"))
if mibBuilder.loadTexts: historyListEntry.setStatus('current')
if mibBuilder.loadTexts: historyListEntry.setDescription('An entry containing a particular multicast group address.')
histGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: histGroupIndex.setStatus('current')
if mibBuilder.loadTexts: histGroupIndex.setDescription('Index of the historical multicast group.')
histGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histGroupAddr.setStatus('current')
if mibBuilder.loadTexts: histGroupAddr.setDescription("The IPv4 address of this entry's multicast group.")
ictMcastAnalyzerHistoryMetrics = MibTable((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2), )
if mibBuilder.loadTexts: ictMcastAnalyzerHistoryMetrics.setStatus('current')
if mibBuilder.loadTexts: ictMcastAnalyzerHistoryMetrics.setDescription('A list of formerly analyzed multicast groups and their metrics.')
historyMetricsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1), ).setIndexNames((0, "ICOTERA-I6400-SERIES", "histMetrGroupAddr"))
if mibBuilder.loadTexts: historyMetricsEntry.setStatus('current')
if mibBuilder.loadTexts: historyMetricsEntry.setDescription('An entry containing metrics concerning a particular multicast group.')
histMetrGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrGroupAddr.setStatus('current')
if mibBuilder.loadTexts: histMetrGroupAddr.setDescription("The IPv4 address of this entry's multicast group.")
histMetrSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrSourceAddr.setStatus('current')
if mibBuilder.loadTexts: histMetrSourceAddr.setDescription('The source IPv4 address of this multicast stream.')
histMetrDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrDstPort.setStatus('current')
if mibBuilder.loadTexts: histMetrDstPort.setDescription('The destination port number of this multicast stream.')
histMetrSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrSrcPort.setStatus('current')
if mibBuilder.loadTexts: histMetrSrcPort.setDescription('The source port number of this multicast stream.')
histMetrTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrTotalBytes.setStatus('current')
if mibBuilder.loadTexts: histMetrTotalBytes.setDescription('The total number of bytes transferred within the stream.')
histMetrTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrTotalPackets.setStatus('current')
if mibBuilder.loadTexts: histMetrTotalPackets.setDescription('The total number of packets transferred within the stream.')
histMetrKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrKbps.setStatus('current')
if mibBuilder.loadTexts: histMetrKbps.setDescription('Kilobits per second during last second.')
histMetrPps = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrPps.setStatus('current')
if mibBuilder.loadTexts: histMetrPps.setDescription('Packets per second during last second.')
histMetrAvgKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrAvgKbps.setStatus('current')
if mibBuilder.loadTexts: histMetrAvgKbps.setDescription('Average kilobits per second.')
histMetrAvgPps = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrAvgPps.setStatus('current')
if mibBuilder.loadTexts: histMetrAvgPps.setDescription('Average packets per second.')
histMetrMaxDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 11), IctDelta()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrMaxDelta.setStatus('current')
if mibBuilder.loadTexts: histMetrMaxDelta.setDescription('Maximum time period between two successive packets from the last second.')
histMetrAvgDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 12), IctDelta()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrAvgDelta.setStatus('current')
if mibBuilder.loadTexts: histMetrAvgDelta.setDescription('Average time period between two successive packets from the last second.')
histMetrTotalMaxDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 13), IctDelta()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrTotalMaxDelta.setStatus('current')
if mibBuilder.loadTexts: histMetrTotalMaxDelta.setDescription('Maximum time period between two successive packets.')
histMetrTotalAvgDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 14), IctDelta()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrTotalAvgDelta.setStatus('current')
if mibBuilder.loadTexts: histMetrTotalAvgDelta.setDescription('Average time period between two successive packets.')
histMetrStartTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 15), IctTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrStartTimestamp.setStatus('current')
if mibBuilder.loadTexts: histMetrStartTimestamp.setDescription('The time at which the stream started being analyzed.')
histMetrStopTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 16), IctTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrStopTimestamp.setStatus('current')
if mibBuilder.loadTexts: histMetrStopTimestamp.setDescription('The time at which the stream stopped being analyzed.')
histMetrMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 17), IctPortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrMemberPorts.setStatus('current')
if mibBuilder.loadTexts: histMetrMemberPorts.setDescription('LAN ports being members of the multicast group.')
histMetrStreamType = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrStreamType.setStatus('current')
if mibBuilder.loadTexts: histMetrStreamType.setDescription('Type of the stream: either RTP or UDP.')
histMetrSkips = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrSkips.setStatus('current')
if mibBuilder.loadTexts: histMetrSkips.setDescription('Number of skipped MPG-TS packets during last second.')
histMetrDiscontinuities = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrDiscontinuities.setStatus('current')
if mibBuilder.loadTexts: histMetrDiscontinuities.setDescription('Number of MPG-TS discontinuities during last second.')
histMetrLost = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrLost.setStatus('current')
if mibBuilder.loadTexts: histMetrLost.setDescription('Number of lost RTP packets during last second.')
histMetrReordered = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrReordered.setStatus('current')
if mibBuilder.loadTexts: histMetrReordered.setDescription('Number of reordered RTP packets during last second.')
histMetrTotalSkips = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrTotalSkips.setStatus('current')
if mibBuilder.loadTexts: histMetrTotalSkips.setDescription('Total number of skipped MPG-TS packets.')
histMetrTotalDiscontinuities = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrTotalDiscontinuities.setStatus('current')
if mibBuilder.loadTexts: histMetrTotalDiscontinuities.setDescription('Total number of MPG-TS discontinuities.')
histMetrTotalLost = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrTotalLost.setStatus('current')
if mibBuilder.loadTexts: histMetrTotalLost.setDescription('Total number of lost RTP packets.')
histMetrTotalReordered = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrTotalReordered.setStatus('current')
if mibBuilder.loadTexts: histMetrTotalReordered.setDescription('Total number of reordered RTP packets.')
histMetrAvgLostPps = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrAvgLostPps.setStatus('current')
if mibBuilder.loadTexts: histMetrAvgLostPps.setDescription('Average number of lost RTP packets per second.')
histMetrJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 29865, 11, 7, 2, 2, 1, 28), IctJitter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: histMetrJitter.setStatus('current')
if mibBuilder.loadTexts: histMetrJitter.setDescription('Jitter calculated for the last second.')
mibBuilder.exportSymbols("ICOTERA-I6400-SERIES", ictMcastAnalyzerHistory=ictMcastAnalyzerHistory, ictReboot=ictReboot, histMetrReordered=histMetrReordered, ictReset=ictReset, cfgTftpPath=cfgTftpPath, curMetrTotalPackets=curMetrTotalPackets, histMetrTotalAvgDelta=histMetrTotalAvgDelta, histMetrSourceAddr=histMetrSourceAddr, curMetrDiscontinuities=curMetrDiscontinuities, upgUrl=upgUrl, ictMcastAnalyzerHistoryMetrics=ictMcastAnalyzerHistoryMetrics, curMetrTotalAvgDelta=curMetrTotalAvgDelta, curMetrAvgLostPps=curMetrAvgLostPps, curMetrTotalDiscontinuities=curMetrTotalDiscontinuities, histMetrSrcPort=histMetrSrcPort, ictFacRstMib=ictFacRstMib, cfgExecute=cfgExecute, upgStatus=upgStatus, histMetrTotalDiscontinuities=histMetrTotalDiscontinuities, histMetrAvgDelta=histMetrAvgDelta, curMetrTotalLost=curMetrTotalLost, curMetrTotalMaxDelta=curMetrTotalMaxDelta, ictServices=ictServices, transceiverEthernetCompliance=transceiverEthernetCompliance, curMetrAvgDelta=curMetrAvgDelta, ictMcastAnalyzerCurrent=ictMcastAnalyzerCurrent, ictMcastAnalyzerCurrentMetrics=ictMcastAnalyzerCurrentMetrics, currentListEntry=currentListEntry, currentMetricsEntry=currentMetricsEntry, curMetrPps=curMetrPps, cfgStatus=cfgStatus, histMetrAvgKbps=histMetrAvgKbps, catvModuleRflevel=catvModuleRflevel, curMetrSrcPort=curMetrSrcPort, histMetrKbps=histMetrKbps, histGroupAddr=histGroupAddr, curMetrKbps=curMetrKbps, histMetrTotalLost=histMetrTotalLost, upgExecute=upgExecute, transceiverDdmTemperature=transceiverDdmTemperature, ictFwUpg=ictFwUpg, transceiverDdmTxBiasCurrent=transceiverDdmTxBiasCurrent, historyListEntry=historyListEntry, histMetrAvgLostPps=histMetrAvgLostPps, ictMgmtMib=ictMgmtMib, ictTransceiver=ictTransceiver, historyMetricsEntry=historyMetricsEntry, curMetrTotalSkips=curMetrTotalSkips, ictIGW1k=ictIGW1k, curMetrTotalBytes=curMetrTotalBytes, transceiverLaserWavelength=transceiverLaserWavelength, curMetrSourceAddr=curMetrSourceAddr, histMetrSkips=histMetrSkips, curMetrLost=curMetrLost, histMetrJitter=histMetrJitter, transceiverConnectorType=transceiverConnectorType, histMetrGroupAddr=histMetrGroupAddr, curGroupIndex=curGroupIndex, histMetrDstPort=histMetrDstPort, catvModuleSignalDetected=catvModuleSignalDetected, ictServicesMibs=ictServicesMibs, catvModuleFilter=catvModuleFilter, histMetrPps=histMetrPps, IctDelta=IctDelta, curMetrGroupAddr=curMetrGroupAddr, curMetrAvgKbps=curMetrAvgKbps, histMetrDiscontinuities=histMetrDiscontinuities, IctTimeStamp=IctTimeStamp, catvModuleAdminStatus=catvModuleAdminStatus, transceiverDdmVoltage=transceiverDdmVoltage, ictCatv=ictCatv, curGroupAddr=curGroupAddr, histMetrStreamType=histMetrStreamType, histMetrAvgPps=histMetrAvgPps, histMetrTotalMaxDelta=histMetrTotalMaxDelta, transceiverLinkLength=transceiverLinkLength, curMetrStartTimestamp=curMetrStartTimestamp, ictMgmt=ictMgmt, curMetrReordered=curMetrReordered, curMetrJitter=curMetrJitter, ictMcastAnalyzerHistoryList=ictMcastAnalyzerHistoryList, curMetrStopTimestamp=curMetrStopTimestamp, transceiverDdmTxPower=transceiverDdmTxPower, curMetrStreamType=curMetrStreamType, transceiverTransceiverType=transceiverTransceiverType, histMetrLost=histMetrLost, catvModuleLowSignal=catvModuleLowSignal, ictMcastAnalyzer=ictMcastAnalyzer, PYSNMP_MODULE_ID=icotera, curMetrSkips=curMetrSkips, catvModulePowerLevel=catvModulePowerLevel, icotera=icotera, histMetrStopTimestamp=histMetrStopTimestamp, transceiverDiagCapable=transceiverDiagCapable, ictCfgUpdate=ictCfgUpdate, performCpeReboot=performCpeReboot, curMetrMaxDelta=curMetrMaxDelta, histMetrTotalPackets=histMetrTotalPackets, histGroupIndex=histGroupIndex, transceiverDdmRxPower=transceiverDdmRxPower, curMetrMemberPorts=curMetrMemberPorts, histMetrTotalBytes=histMetrTotalBytes, performFactoryReset=performFactoryReset, curMetrTotalReordered=curMetrTotalReordered, curMetrAvgPps=curMetrAvgPps, histMetrMemberPorts=histMetrMemberPorts, histMetrTotalReordered=histMetrTotalReordered, IctPortList=IctPortList, ictFacRst=ictFacRst, histMetrMaxDelta=histMetrMaxDelta, IctJitter=IctJitter, ictMcastAnalyzerCurrentList=ictMcastAnalyzerCurrentList, histMetrTotalSkips=histMetrTotalSkips, curMetrDstPort=curMetrDstPort, histMetrStartTimestamp=histMetrStartTimestamp)
