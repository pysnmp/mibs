#
# PySNMP MIB module IEEE8021-DEVID-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/IEEE8021-DEVID-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 11:02:06 2024
# On host fv-az1117-982 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
entPhysicalIndex, PhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "PhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, NotificationType, Gauge32, MibIdentifier, IpAddress, Bits, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, ObjectIdentity, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "Gauge32", "MibIdentifier", "IpAddress", "Bits", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "iso")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
ieee8021DevIDMIB = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 17))
ieee8021DevIDMIB.setRevisions(('2018-07-15 19:04', '2009-06-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021DevIDMIB.setRevisionsDescriptions(('Published as part of IEEE Std 802.1AR-2018', 'Published as part of IEEE Std 802.1AR-2009',))
if mibBuilder.loadTexts: ieee8021DevIDMIB.setLastUpdated('201807151904Z')
if mibBuilder.loadTexts: ieee8021DevIDMIB.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021DevIDMIB.setContactInfo('WG-URL: http://www.ieee802.org/1\n\t\t\t\t   WG-EMail: stds-802-1-L@ieee.org\n\t\t\t\t\t \n\t\t\t\t\tContact: IEEE 802.1 Working Group Chair\n\t\t\t\t\tPostal:  C/O IEEE 802.1 Working Group\n\t\t\t\t\t\t\t IEEE Standards Association\n\t\t\t\t\t\t\t 445 Hoes Lane\n\t\t\t\t\t\t\t Piscataway\n\t\t\t\t\t\t\t NJ 08854\n\t\t\t\t\t\t\t USA\n\t\t\t\t\tE-mail:  STDS-802-1-L@IEEE.ORG')
if mibBuilder.loadTexts: ieee8021DevIDMIB.setDescription("The MIB module for managing an IEEE 802.1AR DevID (Secure Device\n\tIdentifier) Module. A DevID comprises: a DevID secret (a private\n\tkey) stored confidentially by the DevID module and accessible only \n\tthrough operations provided by the module; a DevID certificate \n\tcontaining the corresponding public key and a subject name that \n\tidentifies the device; and a (possibly null) certificate chain. Use \n\tof the DevID module signing operations allows the device to prove \n\tpossession of the DevID secret, and thus assert its identity in\n\tauthentication protocols. An initial IDevID provided by the\n\tdevice supplier can be used directly or can be used to provision\n\tone or more locally significant LDevIDs that reflect authorization \n\tdecisions by the local network administrator with certificate fields \n\tthat record those decisions.\n\tAn SNMP agent can manage a network element comprising one or  \n\tmany devices. They can include component (such as individual line \n\tcards in a chassis) or aggregate devices (such as the chassis and \n\tits current complement of cards). In each case a DevID module binds\n\tDevIDs secrets and certificates to the device whose identity they can be\n\tused to assert: they remain attached to a component device if it is\n\tremoved from the network  element, and are not retained by the SNMP\n\tagent. The entPhysicalIndex defined by the ENTITY-MIB identifies each\n\tdevice managed by the agent and is used to index tables of managed\n\tobjects for each device with a DevID module, so ENTITY-MIB objects are\n\tcorrelated with and can supplement DevID information cryptographically\n\tbound to the device.\n\tThe initial version of this ieee8021DevIDMIB used the object name\n\tprefix 'devID' rather than 'ieee8021DevI' as recommended by \n\tRFC 4181. The 'devID' prefix has been retained for backwards \n\tcompatibility and internal consistency.")
devIDMIBNotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 0))
devIDMIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 1))
devIDMIBConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 2))
class DevIDFingerprint(TextualConvention, OctetString):
    description = 'A Named Information identifier (RFC 6920) comprising a\n\tsingle octet (an IANA (iana.org) Named Information Hash Algorithm \n\tRegistry value) followed by the result of applying that identified \n\t(possibly truncated) hash function  to the arbitrary long octet \n\tstring to be fingerprinted. The fingerprint size (including the \n\tinitial identifier) is limited to 49 octets to meet the SNMP oid \n\tsize constraints when used as an INDEX while allowing the use of\n\tsha3-384, but sha-256-32 or sha-256-64 (5 or 9 octets total) is \n\trecommended with checking of full, not fingerprint, values in \n\tsensitive applications. This TEXTUAL-CONVENTION allows a zero-length \n\tvalue where the fingerprint value is optional. MIB definitions or \n\timplementations may refuse to accept a zero-length value.'
    status = 'current'
    displayHint = '1x:1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 49)

devIDGlobalMIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 1, 1))
devIDMgmtMIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 1, 2))
devIDStatsMIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 1, 3))
devIDModuleTable = MibTable((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 6), )
if mibBuilder.loadTexts: devIDModuleTable.setReference('IEEE 802.1AR 7.3, 10.2, 10.3')
if mibBuilder.loadTexts: devIDModuleTable.setStatus('current')
if mibBuilder.loadTexts: devIDModuleTable.setDescription('A table of DevID module capabilities, which can differ for devices\n\tmanaged by the same SNMP agent.')
devIDModuleEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: devIDModuleEntry.setStatus('current')
if mibBuilder.loadTexts: devIDModuleEntry.setDescription("DevID module capabilities, indexed by the ENTITY MIB's\n\tentPhysicalIndex.")
devIDModuleSupportsLDevIDs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDModuleSupportsLDevIDs.setReference('IEEE 802.1AR 7.2(k)-(n).')
if mibBuilder.loadTexts: devIDModuleSupportsLDevIDs.setStatus('current')
if mibBuilder.loadTexts: devIDModuleSupportsLDevIDs.setDescription('True if the module supports the mandatory operations\n    for LDevIDs.')
devIDModuleGeneratesLDevIDKeys = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 6, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDModuleGeneratesLDevIDKeys.setReference('IEEE 802.1AR 7.2(h), 7.2(j), 7.2.8, 7.2.10.')
if mibBuilder.loadTexts: devIDModuleGeneratesLDevIDKeys.setStatus('current')
if mibBuilder.loadTexts: devIDModuleGeneratesLDevIDKeys.setDescription('True if the module supports LDevID key generation.')
devIDModuleInsertsLDevIDKeys = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 6, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDModuleInsertsLDevIDKeys.setReference('IEEE 802.1AR 7.2(i), 7.2(j), 7.2.9, 7.2.10, 7.3.')
if mibBuilder.loadTexts: devIDModuleInsertsLDevIDKeys.setStatus('current')
if mibBuilder.loadTexts: devIDModuleInsertsLDevIDKeys.setDescription('True if the module supports LDevID key insertion.')
devIDCertTable = MibTable((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 7), )
if mibBuilder.loadTexts: devIDCertTable.setReference('IEEE 802.1AR Clause 6, 6.2, 7.2.2, 7.2.3, 7.2.6, 7.2.7,\n    7.2.11, 7.2.13, 7.3.')
if mibBuilder.loadTexts: devIDCertTable.setStatus('current')
if mibBuilder.loadTexts: devIDCertTable.setDescription("A table of DevID certificates, indexed by\n\tentPhysicalIndex (identifying the DevID module to which the \t\t\n\tcertificate belongs) and the certificate's fingerprint.")
devIDCertEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 7, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "IEEE8021-DEVID-MIB", "devIDCertFingerprint"))
if mibBuilder.loadTexts: devIDCertEntry.setStatus('current')
if mibBuilder.loadTexts: devIDCertEntry.setDescription('DevID certificate objects, indexed by entPhysicalIndex \n\tand its devIDCertFingerprint.')
devIDCertFingerprint = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 7, 1, 1), DevIDFingerprint())
if mibBuilder.loadTexts: devIDCertFingerprint.setReference('IEEE 802.1AR 10.3')
if mibBuilder.loadTexts: devIDCertFingerprint.setStatus('current')
if mibBuilder.loadTexts: devIDCertFingerprint.setDescription('A fingerprint of the DevID certificate, identifying the \n    fingerprinting hash.')
devIDCertPublicKeyInfoFprint = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 7, 1, 2), DevIDFingerprint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCertPublicKeyInfoFprint.setReference('IEEE 802.1AR 10.3')
if mibBuilder.loadTexts: devIDCertPublicKeyInfoFprint.setStatus('current')
if mibBuilder.loadTexts: devIDCertPublicKeyInfoFprint.setDescription("A fingerprint of the DevID certificate's \n    subjectPublicKeyInfo field, identifying the fingerprinting hash.")
devIDCertIDevID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 7, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCertIDevID.setReference('IEEE 802.1AR Clause 6, 6.2, 7.3.')
if mibBuilder.loadTexts: devIDCertIDevID.setStatus('current')
if mibBuilder.loadTexts: devIDCertIDevID.setDescription('True if this is an IDevID Certificate.')
devIDCertKeyEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 7, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCertKeyEnabled.setReference('IEEE 802.1AR 7.2.7, 7.3')
if mibBuilder.loadTexts: devIDCertKeyEnabled.setStatus('current')
if mibBuilder.loadTexts: devIDCertKeyEnabled.setDescription('True if use of the DevID Secret for this certificate is\n    enabled, allowing its use.')
devIDCertEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 7, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCertEnabled.setReference('IEEE 802.1AR 7.2.6')
if mibBuilder.loadTexts: devIDCertEnabled.setStatus('current')
if mibBuilder.loadTexts: devIDCertEnabled.setDescription('True if the certificate can be used.')
devIDCert = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 7, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCert.setReference('IEEE 802.1AR 6.2, 7.3, Clause 8')
if mibBuilder.loadTexts: devIDCert.setStatus('current')
if mibBuilder.loadTexts: devIDCert.setDescription('The X.509 DevID certificate.')
devIDChainTable = MibTable((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 8), )
if mibBuilder.loadTexts: devIDChainTable.setReference('IEEE 802.1AR 10.3, 6.3, 7.2.3.')
if mibBuilder.loadTexts: devIDChainTable.setStatus('current')
if mibBuilder.loadTexts: devIDChainTable.setDescription("A table of DevID intermediate certificates, indexed by \n\tentPhysicalIndex (identifying the DevID module), \n\tdevIDCertFingerprint (identifying the DevID certificate), and \n\tdevIDChainCertIndex (identifying the certificate's position in \n\tthe certificate chain, upwards from the DevID certificate).")
devIDChainEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 8, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "IEEE8021-DEVID-MIB", "devIDCertFingerprint"), (0, "IEEE8021-DEVID-MIB", "devIDChainCertIndex"))
if mibBuilder.loadTexts: devIDChainEntry.setStatus('current')
if mibBuilder.loadTexts: devIDChainEntry.setDescription("DevID intermediate certificate objects, indexed by \n\tentPhysicalIndex, DevID certificate fingerprint, and the  \n\tcertificate's position in the certificate chain.")
devIDChainCertIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: devIDChainCertIndex.setReference('IEEE 802.1AR 10.3.')
if mibBuilder.loadTexts: devIDChainCertIndex.setStatus('current')
if mibBuilder.loadTexts: devIDChainCertIndex.setDescription('The position of this intermediate certificate in the\n    certificate chain.')
devIDChainCertFingerprint = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 8, 1, 2), DevIDFingerprint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDChainCertFingerprint.setReference('IEEE 802.1AR 10.3.')
if mibBuilder.loadTexts: devIDChainCertFingerprint.setStatus('current')
if mibBuilder.loadTexts: devIDChainCertFingerprint.setDescription('A fingerprint of the intermediate certificate, identifying the \n    fingerprinting hash.')
devIDChainCert = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 8, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDChainCert.setReference('IEEE 802.1AR 6.3, 7.3, Clause 8.')
if mibBuilder.loadTexts: devIDChainCert.setStatus('current')
if mibBuilder.loadTexts: devIDChainCert.setDescription('The X.509 intermediate certificate in a certificate chain.')
devIDStatisticsTable = MibTable((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5), )
if mibBuilder.loadTexts: devIDStatisticsTable.setReference('IEEE 802.1AR 7.3.')
if mibBuilder.loadTexts: devIDStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: devIDStatisticsTable.setDescription('Counts of selected operations for each DevID module.')
devIDStatisticsEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: devIDStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: devIDStatisticsEntry.setDescription('Counts of selected operations for a DevID module.')
devIDStatisticKeyGenerationCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticKeyGenerationCount.setReference('IEEE 802.1AR 7.2.8, 7.3.')
if mibBuilder.loadTexts: devIDStatisticKeyGenerationCount.setStatus('current')
if mibBuilder.loadTexts: devIDStatisticKeyGenerationCount.setDescription('The number of LDevID key pairs generated by the \n    module. Discontinuities at system restart and counter rollover.')
devIDStatisticKeyInsertionCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticKeyInsertionCount.setReference('IEEE 802.1AR 7.2.9, 7.3.')
if mibBuilder.loadTexts: devIDStatisticKeyInsertionCount.setStatus('current')
if mibBuilder.loadTexts: devIDStatisticKeyInsertionCount.setDescription('The number of LDevID key pairs inserted into the module.  \n    Discontinuities occur at system restart and counter rollover.')
devIDStatisticKeyDeletionCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticKeyDeletionCount.setReference('IEEE 802.1AR 7.2.10, 7.3.')
if mibBuilder.loadTexts: devIDStatisticKeyDeletionCount.setStatus('current')
if mibBuilder.loadTexts: devIDStatisticKeyDeletionCount.setDescription('The number of LDevID key pairs deleted by the module. \n\tDiscontinuities occur at system restart and counter rollover.')
devIDStatisticCSRGenerationCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticCSRGenerationCount.setReference('IEEE 802.1AR-2009 6.4, and 6.3.11')
if mibBuilder.loadTexts: devIDStatisticCSRGenerationCount.setStatus('deprecated')
if mibBuilder.loadTexts: devIDStatisticCSRGenerationCount.setDescription('The number of Certificate Signing Requests (CSR,\n    RFC2986) generated by the module.  Discontinuities occur at system \n    restart and counter rollover. Deprecated: the module does not\n    necessarily have all the information to generate a meaningful CSR,\n    and key and certificate insertion is not tied to prior CSR \n    generation. If required the signing operation can generate a CSR \n    though this is not required for LDevID insertion.')
devIDStatisticCredentialInsertionCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticCredentialInsertionCount.setReference('IEEE 802.1AR-2009 6.4, and 6.3.12.')
if mibBuilder.loadTexts: devIDStatisticCredentialInsertionCount.setStatus('obsolete')
if mibBuilder.loadTexts: devIDStatisticCredentialInsertionCount.setDescription('The number of LDevID credential insertions. \n\tDiscontinuities occur at system restart and counter rollover.')
devIDStatisticCredentialDeletionCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticCredentialDeletionCount.setReference('IEEE 802.1AR-2009 6.4, and 6.3.14.')
if mibBuilder.loadTexts: devIDStatisticCredentialDeletionCount.setStatus('obsolete')
if mibBuilder.loadTexts: devIDStatisticCredentialDeletionCount.setDescription('The number of LDevID credential deletions. \n\tDiscontinuities occur at system restart and counter rollover.')
devIDStatisticCertInsertionCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticCertInsertionCount.setReference('IEEE 802.1AR 7.2.11, 7.3.')
if mibBuilder.loadTexts: devIDStatisticCertInsertionCount.setStatus('current')
if mibBuilder.loadTexts: devIDStatisticCertInsertionCount.setDescription('The number of LDevID certificate insertions. \n\tDiscontinuities occur at system restart and counter rollover.')
devIDStatisticCertDeletionCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticCertDeletionCount.setReference('IEEE 802.1AR 7.2.13.')
if mibBuilder.loadTexts: devIDStatisticCertDeletionCount.setStatus('current')
if mibBuilder.loadTexts: devIDStatisticCertDeletionCount.setDescription('This number of LDevID certificate deletions. \n\tDiscontinuities occur at system restart and counter rollover.')
devIDMIBCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 2, 1))
devIDMIBGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 2, 2))
devIDMIBModuleCompliance2 = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 17, 2, 1, 2)).setObjects(("IEEE8021-DEVID-MIB", "devIDMIBModuleGroup"), ("IEEE8021-DEVID-MIB", "devIDMIBCertificateGroup"), ("IEEE8021-DEVID-MIB", "devIDMIBAuditGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    devIDMIBModuleCompliance2 = devIDMIBModuleCompliance2.setStatus('current')
if mibBuilder.loadTexts: devIDMIBModuleCompliance2.setDescription('Module Compliance for DevID MIB-2018.')
devIDMIBModuleGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 17, 2, 2, 2)).setObjects(("IEEE8021-DEVID-MIB", "devIDModuleSupportsLDevIDs"), ("IEEE8021-DEVID-MIB", "devIDModuleGeneratesLDevIDKeys"), ("IEEE8021-DEVID-MIB", "devIDModuleInsertsLDevIDKeys"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    devIDMIBModuleGroup = devIDMIBModuleGroup.setStatus('current')
if mibBuilder.loadTexts: devIDMIBModuleGroup.setDescription('DevID MIB objects describing module capabilities.')
devIDMIBCertificateGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 17, 2, 2, 3)).setObjects(("IEEE8021-DEVID-MIB", "devIDCertPublicKeyInfoFprint"), ("IEEE8021-DEVID-MIB", "devIDCertIDevID"), ("IEEE8021-DEVID-MIB", "devIDCertKeyEnabled"), ("IEEE8021-DEVID-MIB", "devIDCertEnabled"), ("IEEE8021-DEVID-MIB", "devIDCert"), ("IEEE8021-DEVID-MIB", "devIDChainCertFingerprint"), ("IEEE8021-DEVID-MIB", "devIDChainCert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    devIDMIBCertificateGroup = devIDMIBCertificateGroup.setStatus('current')
if mibBuilder.loadTexts: devIDMIBCertificateGroup.setDescription('DevID MIB objects for DevID public key,\n    certificate, and certificate chain inventory operations.')
devIDMIBAuditGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 17, 2, 2, 4)).setObjects(("IEEE8021-DEVID-MIB", "devIDStatisticKeyGenerationCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticKeyInsertionCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticKeyDeletionCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticCertInsertionCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticCertDeletionCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    devIDMIBAuditGroup = devIDMIBAuditGroup.setStatus('current')
if mibBuilder.loadTexts: devIDMIBAuditGroup.setDescription('DevID MIB objects supporting DevID operation auditing.')
class DevIDErrorStatus(TextualConvention, Integer32):
    description = 'The error state  of a DevID operation.'
    status = 'obsolete'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("internalError", 2))

class DevIDAlgorithmIdentifier(TextualConvention, Integer32):
    description = 'The algorithm type for the public key.'
    status = 'obsolete'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("rsaEncryption", 1), ("idecPublicKey", 2))

devIDPublicKeyCount = MibScalar((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDPublicKeyCount.setReference('IEEE 802.1AR-2009 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDPublicKeyCount.setStatus('obsolete')
if mibBuilder.loadTexts: devIDPublicKeyCount.setDescription("The total number of DevID public keys installed in the module.\n    Obsolete: the number of currently installed keys is the number of \n    DevIDCertEntry's with the module's entPhysicalIndex and distinct \n    devIDCertPublicKeyInfoFprint values, the maximum number can be an\n    implementation dependent function of the keys' signature suites and \n    the storage occupied by certificates and certificate chains.")
devIDPublicKeyTable = MibTable((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2), )
if mibBuilder.loadTexts: devIDPublicKeyTable.setReference('IEEE 802.1AR-2009 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDPublicKeyTable.setStatus('obsolete')
if mibBuilder.loadTexts: devIDPublicKeyTable.setDescription("A table containing the public key, the keys keyIndex, a value\n\tindicating if the key is enabled. This allows the administrator\n\tto determine the DevID keys installed in the DevID module. The\n\tmaximum number of entries in this table is limited by the value\n\tof devIDPublicKeyCount.\n\tObsolete: the public keys that have been installed and may be \n\tused can be obtained from the subjectPublicKeyInfo field in each of \n\tthe DevIDCertEntry's devIDCert object.")
devIDPublicKeyEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: devIDPublicKeyEntry.setStatus('obsolete')
if mibBuilder.loadTexts: devIDPublicKeyEntry.setDescription("An entry containing DevID public key, the keys keyIndex, a value\n\tindicating if the key is enabled.\n\tObsolete: the public keys that have been installed and may be \n\tused can be obtained from the subjectPublicKeyInfo field in each of \n\tthe DevIDCertEntry's devIDCert object. The table entry indexing did\n\tnot support multiple key pairs per entPhysicalIndex.")
devIDPublicKeyIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: devIDPublicKeyIndex.setReference('IEEE 802.1AR-2009 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDPublicKeyIndex.setStatus('obsolete')
if mibBuilder.loadTexts: devIDPublicKeyIndex.setDescription('All keys are indexed internally with this object. The \n    value of this object is within 0..devIDPublicKeyCount. This is the\n\tkeyIndex and operations on keys will use the keyIndex to address a \n\tspecific key. The IDevID key shall only be at index 0. Any error \n\tretrieving a key will be displayed in devIDPublicKeyErrStatus.\n\tObsolete: the potential indexes are close packed forcing index \n\treuse not under the agents control so reading the index from the \n\tdevIDCredentialTable and then using it with this object may not\n\tretrieve the intended key.')
devIDPublicKeyEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devIDPublicKeyEnabled.setReference('IEEE 802.1AR-2009 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDPublicKeyEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: devIDPublicKeyEnabled.setDescription('The enable/disable state of this public key. This \n    setting persists across restarts. Obsolete with table.')
devIDPublicKeyAlgorithm = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1, 3), DevIDAlgorithmIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDPublicKeyAlgorithm.setReference('IEEE 802.1AR-2009 6.4, 6.3.2 and 7.2.9')
if mibBuilder.loadTexts: devIDPublicKeyAlgorithm.setStatus('obsolete')
if mibBuilder.loadTexts: devIDPublicKeyAlgorithm.setDescription('The DevID PublicKey Algorithm field shall indicate the public key\n\talgorithm identifier. This object identifies the public key\n\talgorithm as either rsaEncryption or idecPublicKey.\n\tObsolete along with table. The AlgorithmIdentifier is not \n\tnecessarily a complete description of the signature suite \n\t(parameters in subjectPublicKeyInfo may also be required), full \n\tinformation is in the devIDCert in the devIDCertTable using X.509 \n\tOIDs so avoiding generating new OIDs for this MIB and removing the\n\tneed for future MIB updates as new signature suites are added.')
devIDPublicKeyPubkeySHA1Hash = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDPublicKeyPubkeySHA1Hash.setReference('IEEE 802.1AR-2009 6.4, 6.3.2 and 7.2.9')
if mibBuilder.loadTexts: devIDPublicKeyPubkeySHA1Hash.setStatus('obsolete')
if mibBuilder.loadTexts: devIDPublicKeyPubkeySHA1Hash.setDescription('The SHA1 Hash of this DevID public key.\n    Obsolete with table. DevIDFingerprint used in new table objects\n    to provided allow hash flexibility without MIB update.')
devIDPublicKeyErrStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1, 5), DevIDErrorStatus().clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDPublicKeyErrStatus.setReference('IEEE 802.1AR-2009 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDPublicKeyErrStatus.setStatus('obsolete')
if mibBuilder.loadTexts: devIDPublicKeyErrStatus.setDescription('Displays the status of an operation on the public key. \n    The default value is none which means no error, indicating a \n    successful operation. Obsolete: DevID module service interface \n    operations are not visible in this MIB so this object provides no\n    clue as to what has failed and does not specify whether it is \n    cleared by subsequent successful operations. If keys or certs are\n    unusable they should not be visible to SNMP or appear not enabled. In \n    both cases this read-only MIB cannot diagnose or repair. SNMP \n    operations already have their own error codes.')
devIDCredentialCount = MibScalar((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialCount.setReference('IEEE 802.1AR-2009 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDCredentialCount.setStatus('obsolete')
if mibBuilder.loadTexts: devIDCredentialCount.setDescription('This gives the total number of DevID credentials \n    installed in the DevID module. Obsolete: Object is not indexed by\n    entPhysicalIndex so is not a per module count if the agent is \n    managing multiple devices. Changes as component devices are added\n    or removed are not meaningful without other information. Per module\n    counts can be obtained by interrogating the devIDCertTable.')
devIDCredentialTable = MibTable((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4), )
if mibBuilder.loadTexts: devIDCredentialTable.setReference('IEEE 802.1AR-2009 6.4, and 6.3.3')
if mibBuilder.loadTexts: devIDCredentialTable.setStatus('obsolete')
if mibBuilder.loadTexts: devIDCredentialTable.setDescription('A table of current DevID credentials, where for each \n    certificate the following are indicated: sha1 hash of the \n    certificate, section7 defined fields of cert serial number, issuer,\n    subject, HardwareModuleName, and public key.\n    Obsolete: the ASN.1 encoding of a certificate is already defined \n    elsewhere, there is no need to require a device to decode the\n    certificate into a different ASN.1 structure, and picking particular \n    field might omit problematic extensions in particular certificates.')
devIDCredentialEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1), ).setIndexNames((0, "IEEE8021-DEVID-MIB", "devIDCredentialIndex"))
if mibBuilder.loadTexts: devIDCredentialEntry.setStatus('obsolete')
if mibBuilder.loadTexts: devIDCredentialEntry.setDescription('An entry containing DevID Credential information.\n    Obsolete: Table entries are not indexed by entPhysicalIndex.')
devIDCredentialIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: devIDCredentialIndex.setReference('IEEE 802.1AR-2009 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDCredentialIndex.setStatus('obsolete')
if mibBuilder.loadTexts: devIDCredentialIndex.setDescription('All credentials are indexed internally with this \n    object. The value of this object is in  [0..devIDCredentialCount].\n    Operations on credentials will use the credentialIndex to address a \n    specific credential. The IDevID credential shall only be at index 0. \n    Additional operations on credentials use the credentialIndex to \n    address a specific credential.\n    Obsolete: The SNP agent does not control or monitor individual \n    DevID service operations, an SNMP agent can manage a system that\n    comprises multiple devices identified by the ENTITY-MIB and more \n    than one of those devices can have a DevID module with an IDevID. ')
devIDCredentialEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devIDCredentialEnabled.setReference('IEEE 802.1AR-2009 6.3.6')
if mibBuilder.loadTexts: devIDCredentialEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: devIDCredentialEnabled.setDescription('The enable/disable state of this credential. This \n    setting persists across restarts. Obsolete with table.')
devIDCredentialSHA1Hash = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialSHA1Hash.setReference('IEEE 802.1AR 7.2.2')
if mibBuilder.loadTexts: devIDCredentialSHA1Hash.setStatus('obsolete')
if mibBuilder.loadTexts: devIDCredentialSHA1Hash.setDescription('The SHA1 Hash of this DevID credential.\n    Obsolete with table.')
devIDCredentialSerialNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialSerialNumber.setReference('IEEE 802.1AR-2009 7.2.2')
if mibBuilder.loadTexts: devIDCredentialSerialNumber.setStatus('obsolete')
if mibBuilder.loadTexts: devIDCredentialSerialNumber.setDescription('The serial number of the credential.\n    Obsolete with table.')
devIDCredentialIssuer = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialIssuer.setReference('IEEE 802.1AR-2009 7.2.4')
if mibBuilder.loadTexts: devIDCredentialIssuer.setStatus('obsolete')
if mibBuilder.loadTexts: devIDCredentialIssuer.setDescription('The issuer field of the credential.\n    Obsolete with table.')
devIDCredentialSubject = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialSubject.setReference('IEEE 802.1AR-2009 7.2.8')
if mibBuilder.loadTexts: devIDCredentialSubject.setStatus('obsolete')
if mibBuilder.loadTexts: devIDCredentialSubject.setDescription('The subject field of the credential.\n    Obsolete with table.')
devIDCredentialSubjectAltName = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialSubjectAltName.setReference('IEEE 802.1AR-2009 7.2.8')
if mibBuilder.loadTexts: devIDCredentialSubjectAltName.setStatus('obsolete')
if mibBuilder.loadTexts: devIDCredentialSubjectAltName.setDescription('The subjectaltname field of the credential.\n    Obsolete with table.')
devIDCredentialEntityIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 8), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialEntityIndex.setReference('IEEE 802.1AR-2009 6.4')
if mibBuilder.loadTexts: devIDCredentialEntityIndex.setStatus('obsolete')
if mibBuilder.loadTexts: devIDCredentialEntityIndex.setDescription('This refers to the entPhysicalIndex in entPhysicalTable \n    to identify the associated physical entity.\n    Obsolete with table.')
devIDCredentialPubkeyIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialPubkeyIndex.setReference('IEEE 802.1AR-2009 7.2.9')
if mibBuilder.loadTexts: devIDCredentialPubkeyIndex.setStatus('obsolete')
if mibBuilder.loadTexts: devIDCredentialPubkeyIndex.setDescription('Has the appropriate devIDPublicKeyIndex value from \n    devIDPublicKeyTable to identify the public key information.\n    Obsolete with table.')
devIDCredentialErrStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 10), DevIDErrorStatus().clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialErrStatus.setReference('IEEE 802.1AR-2009 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDCredentialErrStatus.setStatus('obsolete')
if mibBuilder.loadTexts: devIDCredentialErrStatus.setDescription('The displays the status of an operation on the\n    credential. The default value is none which means no error, \n    indicating a successful operation.\n    Obsolete with table.')
devIDMIBModuleCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 17, 2, 1, 1)).setObjects(("IEEE8021-DEVID-MIB", "devIDMIBObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    devIDMIBModuleCompliance = devIDMIBModuleCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: devIDMIBModuleCompliance.setDescription('Module Compliance for DevID MIB-2009.')
devIDMIBObjectGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 17, 2, 2, 1)).setObjects(("IEEE8021-DEVID-MIB", "devIDPublicKeyCount"), ("IEEE8021-DEVID-MIB", "devIDPublicKeyEnabled"), ("IEEE8021-DEVID-MIB", "devIDPublicKeyAlgorithm"), ("IEEE8021-DEVID-MIB", "devIDPublicKeyPubkeySHA1Hash"), ("IEEE8021-DEVID-MIB", "devIDPublicKeyErrStatus"), ("IEEE8021-DEVID-MIB", "devIDCredentialCount"), ("IEEE8021-DEVID-MIB", "devIDCredentialEnabled"), ("IEEE8021-DEVID-MIB", "devIDCredentialSHA1Hash"), ("IEEE8021-DEVID-MIB", "devIDCredentialSerialNumber"), ("IEEE8021-DEVID-MIB", "devIDCredentialIssuer"), ("IEEE8021-DEVID-MIB", "devIDCredentialSubject"), ("IEEE8021-DEVID-MIB", "devIDCredentialSubjectAltName"), ("IEEE8021-DEVID-MIB", "devIDCredentialEntityIndex"), ("IEEE8021-DEVID-MIB", "devIDCredentialPubkeyIndex"), ("IEEE8021-DEVID-MIB", "devIDCredentialErrStatus"), ("IEEE8021-DEVID-MIB", "devIDStatisticKeyGenerationCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticKeyInsertionCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticKeyDeletionCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticCSRGenerationCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticCredentialInsertionCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticCredentialDeletionCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    devIDMIBObjectGroup = devIDMIBObjectGroup.setStatus('obsolete')
if mibBuilder.loadTexts: devIDMIBObjectGroup.setDescription('A collection of objects providing public key \n    manageability, credential manageability and stats.')
mibBuilder.exportSymbols("IEEE8021-DEVID-MIB", devIDStatisticCredentialDeletionCount=devIDStatisticCredentialDeletionCount, devIDMIBModuleGroup=devIDMIBModuleGroup, devIDMIBConformance=devIDMIBConformance, devIDMgmtMIBObjects=devIDMgmtMIBObjects, devIDPublicKeyEnabled=devIDPublicKeyEnabled, devIDStatisticKeyGenerationCount=devIDStatisticKeyGenerationCount, devIDPublicKeyPubkeySHA1Hash=devIDPublicKeyPubkeySHA1Hash, devIDCredentialSubject=devIDCredentialSubject, PYSNMP_MODULE_ID=ieee8021DevIDMIB, devIDStatisticCertInsertionCount=devIDStatisticCertInsertionCount, devIDStatisticCredentialInsertionCount=devIDStatisticCredentialInsertionCount, DevIDFingerprint=DevIDFingerprint, devIDStatisticCertDeletionCount=devIDStatisticCertDeletionCount, devIDCredentialSHA1Hash=devIDCredentialSHA1Hash, devIDMIBAuditGroup=devIDMIBAuditGroup, devIDChainCert=devIDChainCert, devIDCredentialEnabled=devIDCredentialEnabled, devIDCertFingerprint=devIDCertFingerprint, devIDPublicKeyEntry=devIDPublicKeyEntry, devIDMIBModuleCompliance2=devIDMIBModuleCompliance2, devIDChainEntry=devIDChainEntry, devIDMIBGroups=devIDMIBGroups, devIDMIBObjectGroup=devIDMIBObjectGroup, devIDPublicKeyErrStatus=devIDPublicKeyErrStatus, devIDCertEnabled=devIDCertEnabled, devIDPublicKeyTable=devIDPublicKeyTable, devIDPublicKeyAlgorithm=devIDPublicKeyAlgorithm, devIDCredentialEntry=devIDCredentialEntry, devIDStatsMIBObjects=devIDStatsMIBObjects, devIDCredentialSubjectAltName=devIDCredentialSubjectAltName, devIDCredentialTable=devIDCredentialTable, devIDMIBModuleCompliance=devIDMIBModuleCompliance, devIDCertEntry=devIDCertEntry, devIDModuleGeneratesLDevIDKeys=devIDModuleGeneratesLDevIDKeys, devIDGlobalMIBObjects=devIDGlobalMIBObjects, devIDCredentialEntityIndex=devIDCredentialEntityIndex, DevIDAlgorithmIdentifier=DevIDAlgorithmIdentifier, devIDStatisticsTable=devIDStatisticsTable, devIDChainCertFingerprint=devIDChainCertFingerprint, devIDMIBCertificateGroup=devIDMIBCertificateGroup, devIDMIBCompliances=devIDMIBCompliances, devIDCert=devIDCert, devIDCredentialCount=devIDCredentialCount, devIDStatisticsEntry=devIDStatisticsEntry, devIDModuleSupportsLDevIDs=devIDModuleSupportsLDevIDs, devIDModuleInsertsLDevIDKeys=devIDModuleInsertsLDevIDKeys, devIDStatisticKeyInsertionCount=devIDStatisticKeyInsertionCount, devIDCertTable=devIDCertTable, devIDStatisticKeyDeletionCount=devIDStatisticKeyDeletionCount, DevIDErrorStatus=DevIDErrorStatus, devIDCertPublicKeyInfoFprint=devIDCertPublicKeyInfoFprint, devIDCredentialIssuer=devIDCredentialIssuer, devIDPublicKeyCount=devIDPublicKeyCount, devIDCredentialPubkeyIndex=devIDCredentialPubkeyIndex, ieee8021DevIDMIB=ieee8021DevIDMIB, devIDModuleTable=devIDModuleTable, devIDModuleEntry=devIDModuleEntry, devIDCredentialErrStatus=devIDCredentialErrStatus, devIDCredentialSerialNumber=devIDCredentialSerialNumber, devIDMIBObjects=devIDMIBObjects, devIDCertIDevID=devIDCertIDevID, devIDChainTable=devIDChainTable, devIDCredentialIndex=devIDCredentialIndex, devIDPublicKeyIndex=devIDPublicKeyIndex, devIDStatisticCSRGenerationCount=devIDStatisticCSRGenerationCount, devIDCertKeyEnabled=devIDCertKeyEnabled, devIDChainCertIndex=devIDChainCertIndex, devIDMIBNotifications=devIDMIBNotifications)
