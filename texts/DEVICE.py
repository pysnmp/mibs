#
# PySNMP MIB module DEVICE (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/peplink/DEVICE
# Produced by pysmi-1.1.12 at Tue May 28 12:39:01 2024
# On host fv-az768-311 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, Integer32, NotificationType, Unsigned32, Gauge32, IpAddress, Counter64, enterprises, MibIdentifier, TimeTicks, iso, Counter32, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "NotificationType", "Unsigned32", "Gauge32", "IpAddress", "Counter64", "enterprises", "MibIdentifier", "TimeTicks", "iso", "Counter32", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TextualConvention, MacAddress, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "MacAddress", "TruthValue", "DisplayString")
peplink = MibIdentifier((1, 3, 6, 1, 4, 1, 23695))
productMib = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200))
generalMib = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200, 1))
deviceMib = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1))
deviceInfo = ModuleIdentity((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1))
if mibBuilder.loadTexts: deviceInfo.setLastUpdated('201711150000Z')
if mibBuilder.loadTexts: deviceInfo.setOrganization('PEPLINK')
if mibBuilder.loadTexts: deviceInfo.setContactInfo('')
if mibBuilder.loadTexts: deviceInfo.setDescription('MIB module for device.')
deviceInfoSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 1))
deviceModel = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceModel.setStatus('current')
if mibBuilder.loadTexts: deviceModel.setDescription('Device model.')
deviceSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSerialNumber.setStatus('current')
if mibBuilder.loadTexts: deviceSerialNumber.setDescription('Device serial number.')
deviceFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: deviceFirmwareVersion.setDescription('Device firmware version.')
deviceInfoTime = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 2))
deviceSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSystemTime.setStatus('current')
if mibBuilder.loadTexts: deviceSystemTime.setDescription('Device system time.')
deviceSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSystemUpTime.setStatus('current')
if mibBuilder.loadTexts: deviceSystemUpTime.setDescription('Device up time.')
deviceInfoUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 3))
deviceCpuLoad = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCpuLoad.setStatus('current')
if mibBuilder.loadTexts: deviceCpuLoad.setDescription('Device CPU Load, in hundredths of a percent.')
deviceTotalMemory = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTotalMemory.setStatus('current')
if mibBuilder.loadTexts: deviceTotalMemory.setDescription('Device total memory (units KB).')
deviceMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: deviceMemoryUsage.setDescription('Device memory usage (units KB).')
deviceInfoHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4))
devicePSUTable = MibTable((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: devicePSUTable.setStatus('current')
if mibBuilder.loadTexts: devicePSUTable.setDescription('Device Power Supply Unit Table.')
devicePSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "DEVICE", "devicePSUId"))
if mibBuilder.loadTexts: devicePSUEntry.setStatus('current')
if mibBuilder.loadTexts: devicePSUEntry.setDescription('An entry in the devicePSUTable.')
devicePSUId = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePSUId.setStatus('current')
if mibBuilder.loadTexts: devicePSUId.setDescription('Device power consumption ID.')
devicePSUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("error", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePSUStatus.setStatus('current')
if mibBuilder.loadTexts: devicePSUStatus.setDescription('Device power consumption status.')
deviceCurrentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCurrentPower.setStatus('current')
if mibBuilder.loadTexts: deviceCurrentPower.setDescription('Device current power(W).')
deviceMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMaxPower.setStatus('current')
if mibBuilder.loadTexts: deviceMaxPower.setDescription('Device max power(W).')
devicePSUPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePSUPercentage.setStatus('current')
if mibBuilder.loadTexts: devicePSUPercentage.setDescription('Device power consumption, in hundredths of a percent.')
deviceFanTable = MibTable((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 2), )
if mibBuilder.loadTexts: deviceFanTable.setStatus('current')
if mibBuilder.loadTexts: deviceFanTable.setDescription('Device fan Table.')
deviceFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 2, 1), ).setIndexNames((0, "DEVICE", "deviceFanId"))
if mibBuilder.loadTexts: deviceFanEntry.setStatus('current')
if mibBuilder.loadTexts: deviceFanEntry.setDescription('An entry in the deviceFanTable.')
deviceFanId = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFanId.setStatus('current')
if mibBuilder.loadTexts: deviceFanId.setDescription('Device fan ID.')
deviceFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("error", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFanStatus.setStatus('current')
if mibBuilder.loadTexts: deviceFanStatus.setDescription('Device fan status.')
deviceFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFanSpeed.setStatus('current')
if mibBuilder.loadTexts: deviceFanSpeed.setDescription('Device fan speed(RPM).')
devicePowerSourceTable = MibTable((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 3), )
if mibBuilder.loadTexts: devicePowerSourceTable.setStatus('current')
if mibBuilder.loadTexts: devicePowerSourceTable.setDescription('Power source Table.')
devicePowerSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 3, 1), ).setIndexNames((0, "DEVICE", "devicePowerSourceId"))
if mibBuilder.loadTexts: devicePowerSourceEntry.setStatus('current')
if mibBuilder.loadTexts: devicePowerSourceEntry.setDescription('An entry in the devicePowerSourceTable.')
devicePowerSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerSourceId.setStatus('current')
if mibBuilder.loadTexts: devicePowerSourceId.setDescription('Power source ID.')
devicePowerSourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerSourceName.setStatus('current')
if mibBuilder.loadTexts: devicePowerSourceName.setDescription('Power source name.')
devicePowerSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noCableDetected", 0), ("connected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerSourceStatus.setStatus('current')
if mibBuilder.loadTexts: devicePowerSourceStatus.setDescription('Power source status.')
deviceInfoTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 4))
deviceTemperatureCelsius = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 4, 1), Gauge32()).setUnits('mC').setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTemperatureCelsius.setStatus('current')
if mibBuilder.loadTexts: deviceTemperatureCelsius.setDescription('System temperature in mC.')
deviceTemperatureFahrenheit = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 4, 2), Gauge32()).setUnits('mF').setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTemperatureFahrenheit.setStatus('current')
if mibBuilder.loadTexts: deviceTemperatureFahrenheit.setDescription('System temperature in mF.')
mibBuilder.exportSymbols("DEVICE", deviceFanEntry=deviceFanEntry, devicePowerSourceTable=devicePowerSourceTable, devicePowerSourceEntry=devicePowerSourceEntry, deviceFanSpeed=deviceFanSpeed, deviceInfoHardware=deviceInfoHardware, deviceFanStatus=deviceFanStatus, deviceModel=deviceModel, deviceInfo=deviceInfo, deviceMemoryUsage=deviceMemoryUsage, devicePSUEntry=devicePSUEntry, productMib=productMib, deviceFanId=deviceFanId, generalMib=generalMib, PYSNMP_MODULE_ID=deviceInfo, devicePowerSourceId=devicePowerSourceId, deviceInfoTemperature=deviceInfoTemperature, deviceInfoSystem=deviceInfoSystem, peplink=peplink, devicePowerSourceName=devicePowerSourceName, deviceCpuLoad=deviceCpuLoad, deviceMaxPower=deviceMaxPower, deviceFirmwareVersion=deviceFirmwareVersion, deviceTotalMemory=deviceTotalMemory, deviceSystemUpTime=deviceSystemUpTime, deviceInfoUsage=deviceInfoUsage, devicePSUPercentage=devicePSUPercentage, devicePowerSourceStatus=devicePowerSourceStatus, deviceInfoTime=deviceInfoTime, devicePSUId=devicePSUId, deviceSystemTime=deviceSystemTime, devicePSUTable=devicePSUTable, devicePSUStatus=devicePSUStatus, deviceCurrentPower=deviceCurrentPower, deviceFanTable=deviceFanTable, deviceTemperatureCelsius=deviceTemperatureCelsius, deviceTemperatureFahrenheit=deviceTemperatureFahrenheit, deviceSerialNumber=deviceSerialNumber, deviceMib=deviceMib)
