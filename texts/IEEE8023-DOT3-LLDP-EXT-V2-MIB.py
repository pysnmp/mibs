#
# PySNMP MIB module IEEE8023-DOT3-LLDP-EXT-V2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/IEEE8023-DOT3-LLDP-EXT-V2-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 11:51:43 2024
# On host fv-az1530-743 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ifGeneralInformationGroup, = mibBuilder.importSymbols("IF-MIB", "ifGeneralInformationGroup")
lldpV2RemLocalIfIndex, lldpV2RemTimeMark, lldpV2RemIndex, lldpV2RemLocalDestMACAddress, lldpV2PortConfigEntry, lldpV2LocPortIfIndex = mibBuilder.importSymbols("LLDP-V2-MIB", "lldpV2RemLocalIfIndex", "lldpV2RemTimeMark", "lldpV2RemIndex", "lldpV2RemLocalDestMACAddress", "lldpV2PortConfigEntry", "lldpV2LocPortIfIndex")
LldpV2PowerPortClass, = mibBuilder.importSymbols("LLDP-V2-TC-MIB", "LldpV2PowerPortClass")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, TimeTicks, iso, MibIdentifier, Bits, ModuleIdentity, Counter32, NotificationType, ObjectIdentity, IpAddress, Counter64, Integer32, Unsigned32, org, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "iso", "MibIdentifier", "Bits", "ModuleIdentity", "Counter32", "NotificationType", "ObjectIdentity", "IpAddress", "Counter64", "Integer32", "Unsigned32", "org", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ieee8023lldpV2Xdot3MIB = ModuleIdentity((1, 3, 111, 2, 802, 3, 1, 5))
ieee8023lldpV2Xdot3MIB.setRevisions(('2013-04-11 00:00', '2011-02-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8023lldpV2Xdot3MIB.setRevisionsDescriptions(('Revision, based on an earlier version in IEEE Std 802.3.1-2011.', 'This revision incorporated changes to the MIB module to\n            add objects to support management of Energy Efficient\n            Ethernet (EEE) and Enhanced DTE Power via the MDI (PoE+).',))
if mibBuilder.loadTexts: ieee8023lldpV2Xdot3MIB.setLastUpdated('201304110000Z')
if mibBuilder.loadTexts: ieee8023lldpV2Xdot3MIB.setOrganization('IEEE 802.3 Working Group')
if mibBuilder.loadTexts: ieee8023lldpV2Xdot3MIB.setContactInfo('WG-URL: http://www.ieee802.org/3/index.html\n            WG-EMail: STDS-802-3-MIB@LISTSERV.IEEE.ORG\n\n            Contact: Howard Frazier\n            Postal:  3151 Zanker Road\n                     San Jose, CA 95134\n                     USA\n            Tel:     +1.408.922.8164\n            E-mail:  hfrazier@broadcom.com')
if mibBuilder.loadTexts: ieee8023lldpV2Xdot3MIB.setDescription('The LLDP Management Information Base extension module for\n            IEEE 802.3 organizationally defined discovery information.')
lldpV2Xdot3Objects = MibIdentifier((1, 3, 111, 2, 802, 3, 1, 5, 1))
lldpV2Xdot3Config = MibIdentifier((1, 3, 111, 2, 802, 3, 1, 5, 1, 1))
lldpV2Xdot3LocalData = MibIdentifier((1, 3, 111, 2, 802, 3, 1, 5, 1, 2))
lldpV2Xdot3RemoteData = MibIdentifier((1, 3, 111, 2, 802, 3, 1, 5, 1, 3))
lldpV2Xdot3PortConfigTable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 1, 1), )
if mibBuilder.loadTexts: lldpV2Xdot3PortConfigTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3PortConfigTable.setDescription('A table that controls selection of LLDP TLVs to be transmitted \n            on individual ports.')
lldpV2Xdot3PortConfigEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 1, 1, 1), )
lldpV2PortConfigEntry.registerAugmentions(("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3PortConfigEntry"))
lldpV2Xdot3PortConfigEntry.setIndexNames(*lldpV2PortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpV2Xdot3PortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3PortConfigEntry.setDescription('LLDP configuration information that controls the\n            transmission of IEEE 802.3 organizationally defined TLVs on\n            LLDP transmission capable ports.\n\n            This configuration object augments the lldpV2PortConfigEntry of\n            the LLDP-MIB, therefore it is only present along with the port\n            configuration defined by the associated lldpV2PortConfigEntry\n            entry.\n\n            Each active lldpV2Xdot3PortConfigEntry is restored from non-volatile\n            storage (along with the corresponding lldpV2PortConfigEntry)\n            after a re-initialization of the management system.')
lldpV2Xdot3PortConfigTLVsTxEnable = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("macPhyConfigStatus", 0), ("powerViaMDI", 1), ("unused", 2), ("maxFrameSize", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2Xdot3PortConfigTLVsTxEnable.setReference('IEEE Std 802.3 30.12.1.1.1')
if mibBuilder.loadTexts: lldpV2Xdot3PortConfigTLVsTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3PortConfigTLVsTxEnable.setDescription("The lldpV2Xdot3PortConfigTLVsTxEnable, defined as a bitmap,\n            includes the IEEE 802.3 organizationally defined set of LLDP\n            TLVs whose transmission is allowed by the local LLDP agent by\n            the network management. Each bit in the bitmap corresponds\n            to an IEEE 802.3 subtype associated with a specific IEEE\n            802.3 optional TLV.\n\n            The bit 'macPhyConfigStatus(0)' indicates that the LLDP agent\n            should transmit 'MAC/PHY configuration/status TLV'.\n\n            The bit 'powerViaMDI(1)' indicates that the LLDP agent should\n            transmit 'Power via MDI TLV'.\n\n            The bit 'unused(2)' is no longer used; this was used for\n            the 'Link Aggregation TLV' in the previous version.\n\n            The bit 'maxFrameSize(3)' indicates that the LLDP agent should\n            transmit 'Maximum-frame-size TLV'.\n\n            The default value for lldpV2Xdot3PortConfigTLVsTxEnable object\n            is an empty set, which means no enumerated values are set.\n\n            The value of this object is restored from non-volatile\n            storage after a re-initialization of the management system.")
lldpV2Xdot3LocPortTable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 1), )
if mibBuilder.loadTexts: lldpV2Xdot3LocPortTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPortTable.setDescription('This table contains one row per port of Ethernet port\n            information (as a part of the LLDP 802.3 organizational\n            extension) on the local system known to this agent.')
lldpV2Xdot3LocPortEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3LocPortEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPortEntry.setDescription('Information about a particular port component.')
lldpV2Xdot3LocPortAutoNegSupported = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPortAutoNegSupported.setReference('IEEE Std 802.3 30.12.2.1.1')
if mibBuilder.loadTexts: lldpV2Xdot3LocPortAutoNegSupported.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPortAutoNegSupported.setDescription('The truth value used to indicate whether the given port\n            (associated with the local system) supports Auto-negotiation.')
lldpV2Xdot3LocPortAutoNegEnabled = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPortAutoNegEnabled.setReference('IEEE Std 802.3 30.12.2.1.2')
if mibBuilder.loadTexts: lldpV2Xdot3LocPortAutoNegEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPortAutoNegEnabled.setDescription('The truth value used to indicate whether port\n            Auto-negotiation is enabled on the given port associated\n            with the local system.')
lldpV2Xdot3LocPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPortAutoNegAdvertisedCap.setReference('IEEE Std 802.3 30.12.2.1.3')
if mibBuilder.loadTexts: lldpV2Xdot3LocPortAutoNegAdvertisedCap.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPortAutoNegAdvertisedCap.setDescription('This object contains the value (bitmap) of the\n            ifMauAutoNegCapAdvertisedBits object (defined in IETF RFC\n            3636) which is associated with the given port on the\n            local system.')
lldpV2Xdot3LocPortOperMauType = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPortOperMauType.setReference('IEEE Std 802.3 30.12.2.1.4')
if mibBuilder.loadTexts: lldpV2Xdot3LocPortOperMauType.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPortOperMauType.setDescription('An integer value that indicates the operational MAU type\n            of the given port on the local system.\n\n            This object contains the integer value derived from the\n            list position of the corresponding dot3MauType as listed \n            in Clause 13 and is equal to the last number in the \n            respective dot3MauType OID.\n           \n            For example, if the ifMauType object is dot3MauType1000BaseTHD\n            which corresponds to {dot3MauType 29}, the numerical value of\n            this field is 29. For MAU types not listed in Clause 13, \n            the value of this field shall be set to zero.')
lldpV2Xdot3LocPowerTable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2), )
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerTable.setDescription('This table contains one row per port of power Ethernet \n            information (as a part of the LLDP IEEE 802.3 organizational\n            extension) on the local system known to this agent.')
lldpV2Xdot3LocPowerEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerEntry.setDescription('Information about a particular port component.')
lldpV2Xdot3LocPowerPortClass = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 1), LldpV2PowerPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPortClass.setReference('IEEE Std 802.3 30.12.2.1.5')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPortClass.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPortClass.setDescription('The value that identifies the port Class of the given port\n            associated with the local system.')
lldpV2Xdot3LocPowerMDISupported = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerMDISupported.setReference('IEEE Std 802.3 30.12.2.1.6')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerMDISupported.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerMDISupported.setDescription('The truth value used to indicate whether the MDI power is\n            supported on the given port associated with the local system.')
lldpV2Xdot3LocPowerMDIEnabled = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerMDIEnabled.setReference('IEEE Std 802.3 30.12.2.1.7')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerMDIEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerMDIEnabled.setDescription('The truth value used to identify whether MDI power is\n            enabled on the given port associated with the local system.')
lldpV2Xdot3LocPowerPairControlable = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPairControlable.setReference('IEEE Std 802.3 30.12.2.1.8')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPairControlable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPairControlable.setDescription('The truth value is derived from the value of\n            pethPsePortPowerPairsControlAbility object (defined in\n            Clause 8) and is used to indicate whether the pair selection\n            can be controlled on the given port associated with the\n            local system.')
lldpV2Xdot3LocPowerPairs = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPairs.setReference('IEEE Std 802.3 30.12.2.1.9')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPairs.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPairs.setDescription('This object contains the value of the pethPsePortPowerPairs\n            object (defined in Clause 8) which is associated with\n            the given port on the local system.')
lldpV2Xdot3LocPowerClass = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerClass.setReference('IEEE Std 802.3 30.12.2.1.10')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerClass.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerClass.setDescription('This object contains the value of the\n            pethPsePortPowerClassifications object (defined in \n            Clause 8) which is associated with the given port on the\n            local system.')
lldpV2Xdot3LocPowerType = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("psetype1", 0), ("psetype2", 1), ("pdtype", 2), ("pdtype2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerType.setReference('IEEE Std 802.3 30.12.2.1.14')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerType.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerType.setDescription('A GET returns an integer indicating whether the local\n             system is a PSE or a PD and whether it is Type 1 or Type 2.')
lldpV2Xdot3LocPowerSource = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pseprimary", 0), ("psebackup", 1), ("pseunknown", 2), ("pdpseandlocal", 3), ("pdpseonly", 4), ("pdunknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerSource.setReference('IEEE Std 802.3 30.12.2.1.15')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerSource.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerSource.setDescription('A GET returns an integer indicating the power sources of the \n            local system. A PSE indicates whether it is being powered by \n            a primary power source; a backup power source; or unknown. A PD \n            indicates whether it is being powered by a PSE and locally; \n            by a PSE only; or unknown.')
lldpV2Xdot3LocPowerPriority = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("high", 1), ("critical", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPriority.setReference('IEEE Std 802.3 30.12.2.1.16')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPriority.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPowerPriority.setDescription('A GET returns the priority of a PD system. For a PSE, this \n            is the priority that the PSE assigns to the PD. For a PD, this \n            is the priority that the PD requests from the PSE. A SET \n            operation changes the priority of the PD system to the indicated \n            value.')
lldpV2Xdot3LocPDRequestedPowerValue = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPDRequestedPowerValue.setReference('IEEE Std 802.3 30.12.2.1.17')
if mibBuilder.loadTexts: lldpV2Xdot3LocPDRequestedPowerValue.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPDRequestedPowerValue.setDescription('A GET returns the PD requested power value. \n            For a PD, it is the power value that the PD has currently\n            requested from the remote system. PD requested power value \n            is the maximum input average power the PD ever draws under\n            this power allocation if accepted. For a PSE, it is the power\n            value that the PSE mirrors back to the remote system. This is \n            the PD requested power value that was used by the PSE to compute\n            the power it has currently allocated to the remote system. \n            The PD requested power value is encoded according to \n            IEEE Std 802.3 Equation (79?1), where X is the decimal value of\n            aLldpXdot3LocPDRequestedPowerValue.')
lldpV2Xdot3LocPSEAllocatedPowerValue = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocPSEAllocatedPowerValue.setReference('IEEE Std 802.3 30.12.2.1.18')
if mibBuilder.loadTexts: lldpV2Xdot3LocPSEAllocatedPowerValue.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocPSEAllocatedPowerValue.setDescription('A GET returns the PSE allocated power value.\n            For a PSE, it is the power value that the PSE has currently \n            allocated to the remote system. The PSE allocated power value\n            is the maximum input average power that the PSE wants the PD\n            to ever draw under this allocation if it is accepted. For a PD, \n            it is the power value that the PD mirrors back to the remote\n            system. This is the PSE allocated power value that was used by\n            the PD to compute the power that it has currently requested from\n            the remote system. The PSE allocated power value is encoded\n            according to IEEE Std 802.3 Equation (79?2), where X is the\n            decimal value of aLldpXdot3LocPSEAllocatedPowerValue.')
lldpV2Xdot3LocResponseTime = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocResponseTime.setReference('IEEE Std 802.3 30.12.2.1.19')
if mibBuilder.loadTexts: lldpV2Xdot3LocResponseTime.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocResponseTime.setDescription('A GET returns the response time in seconds of the local system.\n            For a PD, it is the maximum time required to update the value of \n            lldpV2Xdot3LocPDRequestedPowerValue when the remote system \n            requests the PD to change its max power draw. For a PSE, it is \n            the maximum time required to update the value of \n            lldpV2Xdot3LocPDRequestedPowerValue when the remote system \n            requests of the PSE a new power value.')
lldpV2Xdot3LocReady = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocReady.setReference('IEEE Std 802.3 30.12.2.1.20')
if mibBuilder.loadTexts: lldpV2Xdot3LocReady.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocReady.setDescription('The truth value used to identify whether the local Data Link Layer \n            classification engine has completed initialization and is ready to\n            receive and transmit LLDPDUs.')
lldpV2Xdot3LocReducedOperationPowerValue = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocReducedOperationPowerValue.setReference('IEEE Std 802.3 30.12.2.1.21')
if mibBuilder.loadTexts: lldpV2Xdot3LocReducedOperationPowerValue.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocReducedOperationPowerValue.setDescription('A GET returns the reduced operation power value. For a PD, it \n            is a power value that is lower than the currently requested\n            power value. This reduced operation power value represents a\n            power state in which the PD could continue to operate, but with\n            less functionality than at the current PD requested power value.\n            The PSE could optionally use this information in the event that\n            the PSE subsequently requests a lower PD power value than the\n            PD requested power value. For a PSE, it is a power value that the\n            PSE could ask the PD to move to if the PSE wants the PD to move \n            to a lower power state. The definition and encoding of PD\n            requested power value is the same as described in\n            lldpV2Xdot3LocPDRequestedPowerValue. The default value for this\n            field is the hexadecimal value FFFF')
lldpV2Xdot3LocMaxFrameSizeTable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 3), )
if mibBuilder.loadTexts: lldpV2Xdot3LocMaxFrameSizeTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocMaxFrameSizeTable.setDescription('This table contains one row per port of maximum frame \n            size information (as a part of the LLDP IEEE 802.3 organizational\n            extension) on the local system known to this agent.')
lldpV2Xdot3LocMaxFrameSizeEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 3, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3LocMaxFrameSizeEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocMaxFrameSizeEntry.setDescription('Maximum Frame Size information about a particular port\n            component.')
lldpV2Xdot3LocMaxFrameSize = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocMaxFrameSize.setReference('IEEE Std 802.3 30.12.2.1.13')
if mibBuilder.loadTexts: lldpV2Xdot3LocMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocMaxFrameSize.setDescription('An integer value indicating the maximum supported frame \n             size in octets on the given port of the local system.')
lldpV2Xdot3LocEEETable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4), )
if mibBuilder.loadTexts: lldpV2Xdot3LocEEETable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocEEETable.setDescription('This table contains one row per port of Energy Efficient Ethernet \n            information (as a part of the LLDP IEEE 802.3 organizational\n            extension) on the local system known to this agent.')
lldpV2Xdot3LocEEEEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3LocEEEEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocEEEEntry.setDescription('Information about a particular port component.')
lldpV2Xdot3LocTxTwSys = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocTxTwSys.setReference('IEEE Std 802.3 30.12.2.1.22')
if mibBuilder.loadTexts: lldpV2Xdot3LocTxTwSys.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocTxTwSys.setDescription('A GET returns the value of Tw_sys_tx that the local system\n            can support in the transmit direction.\n            This object maps to the variable LocTxSystemValue as defined\n            in IEEE Std 802.3 78.4.2.3.')
lldpV2Xdot3LocTxTwSysEcho = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocTxTwSysEcho.setReference('IEEE Std 802.3 30.12.2.1.23')
if mibBuilder.loadTexts: lldpV2Xdot3LocTxTwSysEcho.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocTxTwSysEcho.setDescription('A GET returns the value of Tw_sys_tx that the remote system is\n            advertising that it can support in the transmit direction and is\n            echoed by the local system under the control of the EEE DLL receiver\n            state diagram. This object maps to the variable\n            LocTxSystemValueEcho as defined in IEEE Std 802.3 78.4.2.3')
lldpV2Xdot3LocRxTwSys = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocRxTwSys.setReference('IEEE Std 802.3 30.12.2.1.24')
if mibBuilder.loadTexts: lldpV2Xdot3LocRxTwSys.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocRxTwSys.setDescription('A GET returns the value of Tw_sys_tx that\n            the local system is requesting in the receive direction.\n            This object maps to the variable LocRxSystemValue as\n            defined in IEEE Std 802.3 78.4.2.3.')
lldpV2Xdot3LocRxTwSysEcho = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocRxTwSysEcho.setReference('IEEE Std 802.3 30.12.2.1.25')
if mibBuilder.loadTexts: lldpV2Xdot3LocRxTwSysEcho.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocRxTwSysEcho.setDescription('A GET returns the value of Tw_sys_tx that\n            the remote system is advertising that it is requesting in the\n            receive direction and is echoed by the local system under the\n            control of the EEE DLL transmitter state diagram. This object\n            maps to the variable LocRxSystemValueEcho as defined in\n            IEEE Std 802.3 78.4.2.3.')
lldpV2Xdot3LocFbTwSys = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocFbTwSys.setReference('IEEE Std 802.3 30.12.2.1.26')
if mibBuilder.loadTexts: lldpV2Xdot3LocFbTwSys.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocFbTwSys.setDescription('A GET returns the value of the fallback Tw_sys_tx\n            that the local system is advertising to the remote system.\n            This object maps to the variable LocFbSystemValue as defined\n            in IEEE Std 802.3 78.4.2.3.')
lldpV2Xdot3TxDllReady = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3TxDllReady.setReference('IEEE Std 802.3 30.12.2.1.27')
if mibBuilder.loadTexts: lldpV2Xdot3TxDllReady.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3TxDllReady.setDescription('The truth value used to identify whether the local Data Link Layer \n            EEE layer management function has completed initialization and\n            is ready to receive and transmit LLDPDUs.')
lldpV2Xdot3RxDllReady = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RxDllReady.setReference('IEEE Std 802.3 30.12.2.1.28')
if mibBuilder.loadTexts: lldpV2Xdot3RxDllReady.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RxDllReady.setDescription('The truth value used to identify whether the local Data Link Layer \n            EEE layer management function has completed initialization and\n            is ready to receive and transmit LLDPDUs.')
lldpV2Xdot3LocDllEnabled = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 2, 4, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3LocDllEnabled.setReference('IEEE Std 802.3 30.12.2.1.29')
if mibBuilder.loadTexts: lldpV2Xdot3LocDllEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocDllEnabled.setDescription('The truth value used to identify whether the local system has\n            completed auto-negotiation with a link partner that has\n            indicated at leat one EEE capability.')
lldpV2Xdot3RemPortTable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 1), )
if mibBuilder.loadTexts: lldpV2Xdot3RemPortTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPortTable.setDescription('This table contains Ethernet port information (as a part\n            of the LLDP IEEE 802.3 organizational extension) of the remote\n            system.')
lldpV2Xdot3RemPortEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 1, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3RemPortEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPortEntry.setDescription('Information about a particular physical network connection.')
lldpV2Xdot3RemPortAutoNegSupported = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPortAutoNegSupported.setReference('IEEE Std 802.3 30.12.3.1.1')
if mibBuilder.loadTexts: lldpV2Xdot3RemPortAutoNegSupported.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPortAutoNegSupported.setDescription('The truth value used to indicate whether the given port\n            (associated with remote system) supports Auto-negotiation.')
lldpV2Xdot3RemPortAutoNegEnabled = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPortAutoNegEnabled.setReference('IEEE Std 802.3 30.12.3.1.2')
if mibBuilder.loadTexts: lldpV2Xdot3RemPortAutoNegEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPortAutoNegEnabled.setDescription('The truth value used to indicate whether port\n            Auto-negotiation is enabled on the given port associated\n            with the remote system.')
lldpV2Xdot3RemPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPortAutoNegAdvertisedCap.setReference('IEEE Std 802.3 30.12.3.1.3')
if mibBuilder.loadTexts: lldpV2Xdot3RemPortAutoNegAdvertisedCap.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPortAutoNegAdvertisedCap.setDescription('This object contains the value (bitmap) of the\n            ifMauAutoNegCapAdvertisedBits object (defined in IETF RFC\n            3636) which is associated with the given port on the\n            remote system.')
lldpV2Xdot3RemPortOperMauType = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPortOperMauType.setReference('IEEE Std 802.3 30.12.3.1.4')
if mibBuilder.loadTexts: lldpV2Xdot3RemPortOperMauType.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPortOperMauType.setDescription('An integer value that indicates the operational MAU type\n            of the sending device.\n\n            This object contains the integer value derived from the\n            list position of the corresponding dot3MauType as listed in\n            in Clause 13 and is equal to the last number in \n            the respective dot3MauType OID.\n           \n            For example, if the ifMauType object is dot3MauType1000BaseTHD\n            which corresponds to {dot3MauType 29}, the numerical value of\n            this field is 29. For MAU types not listed in Clause 13, \n            the value of this field shall be set to zero.')
lldpV2Xdot3RemPowerTable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2), )
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerTable.setDescription('This table contains Ethernet power information (as a part\n            of the LLDP IEEE 802.3 organizational extension) of the remote\n            system.')
lldpV2Xdot3RemPowerEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerEntry.setDescription('Information about a particular physical network connection.')
lldpV2Xdot3RemPowerPortClass = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 1), LldpV2PowerPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPortClass.setReference('IEEE Std 802.3 30.12.3.1.5')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPortClass.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPortClass.setDescription('The value that identifies the port Class of the given port\n            associated with the remote system.')
lldpV2Xdot3RemPowerMDISupported = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerMDISupported.setReference('IEEE Std 802.3 30.12.3.1.6')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerMDISupported.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerMDISupported.setDescription('The truth value used to indicate whether the MDI power\n            is supported on the given port associated with the remote\n            system.')
lldpV2Xdot3RemPowerMDIEnabled = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerMDIEnabled.setReference('IEEE Std 802.3 30.12.3.1.7')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerMDIEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerMDIEnabled.setDescription('The truth value used to identify whether MDI power is\n            enabled on the given port associated with the remote system.')
lldpV2Xdot3RemPowerPairControlable = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPairControlable.setReference('IEEE Std 802.3 30.12.3.1.8')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPairControlable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPairControlable.setDescription('The truth value is derived from the value of\n            pethPsePortPowerPairsControlAbility object (defined in\n            Clause 8) and is used to indicate whether the pair selection\n            can be controlled on the given port associated with the\n            remote system.')
lldpV2Xdot3RemPowerPairs = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPairs.setReference('IEEE Std 802.3 30.12.3.1.9')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPairs.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPairs.setDescription('This object contains the value of the pethPsePortPowerPairs\n            object (defined in Clause 8) which is associated with\n            the given port on the remote system.')
lldpV2Xdot3RemPowerClass = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerClass.setReference('IEEE Std 802.3 30.12.3.1.10')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerClass.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerClass.setDescription('This object contains the value of the\n            pethPsePortPowerClassifications object (defined in\n            Clause 8) which is associated with the given port on the\n            remote system.')
lldpV2Xdot3RemPowerType = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("psetype1", 0), ("psetype2", 1), ("pdtype", 2), ("pdtype2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerType.setReference('IEEE Std 802.3 30.12.3.1.14')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerType.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerType.setDescription('A GET returns an integer indicating whether the remote\n             system is a PSE or a PD and whether it is Type 1 or Type 2.')
lldpV2Xdot3RemPowerSource = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pseprimary", 0), ("psebackup", 1), ("pseunknown", 2), ("pdpseandlocal", 3), ("pdlocalonly", 4), ("pdpseonly", 5), ("pdunknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerSource.setReference('IEEE Std 802.3 30.12.3.1.15')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerSource.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerSource.setDescription('A GET returns an integer indicating the power sources of the \n            remote system. When the remote system is a PSE, it indicates \n            whether it is being powered by a primary power source; a backup\n            power source; or unknown. When the remote system is a PD, it\n            indicates whether it is being powered by a PSE and locally;\n            locally only; by a PSE only; or unknown.')
lldpV2Xdot3RemPowerPriority = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("high", 1), ("critical", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPriority.setReference('IEEE Std 802.3 30.12.3.1.16')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPriority.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPowerPriority.setDescription('A GET returns the priority of a PD system. For a PSE, this \n            is the priority that the remote system requests. For a PD, this \n            is the priority that the remote system has assigned.')
lldpV2Xdot3RemPDRequestedPowerValue = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPDRequestedPowerValue.setReference('IEEE Std 802.3 30.12.3.1.17')
if mibBuilder.loadTexts: lldpV2Xdot3RemPDRequestedPowerValue.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPDRequestedPowerValue.setDescription('A GET returns the PD requested power value that was used\n            by the remote system to compute the power value that is has\n            currently allocated to the PD. For a PSE, it is the PD requested\n            power value received from the remote system. The definition and\n            encoding of PD requested power value is the same as described in\n            lldpV2Xdot3LocPDRequestedPowerValue.')
lldpV2Xdot3RemPSEAllocatedPowerValue = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemPSEAllocatedPowerValue.setReference('IEEE Std 802.3 30.12.3.1.18')
if mibBuilder.loadTexts: lldpV2Xdot3RemPSEAllocatedPowerValue.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemPSEAllocatedPowerValue.setDescription('A GET returns the PSE allocated power value\n            received from the remote system. For a PSE, it is the PSE allocated\n            power value that was used by the remote system to compute the power\n            value that it has currently requested from the PSE. For a PD, it\n            is the PSE allocated power value received from the remote system.\n            The definition and encoding of PSE allocated power value is\n            the same as described in lldpV2Xdot3LocPSEAllocatedPowerValue.')
lldpV2Xdot3RemMaxFrameSizeTable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 3), )
if mibBuilder.loadTexts: lldpV2Xdot3RemMaxFrameSizeTable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemMaxFrameSizeTable.setDescription('This table contains one row per port/destination\n            address pair of maximum frame \n            size information (as a part of the LLDP IEEE 802.3 \n            organizational extension) of the remote system.')
lldpV2Xdot3RemMaxFrameSizeEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 3, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemTimeMark"), (0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"), (0, "LLDP-V2-MIB", "lldpV2RemLocalDestMACAddress"), (0, "LLDP-V2-MIB", "lldpV2RemIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3RemMaxFrameSizeEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemMaxFrameSizeEntry.setDescription('Maximum Frame Size information about a particular port\n            component.')
lldpV2Xdot3RemMaxFrameSize = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemMaxFrameSize.setReference('IEEE Std 802.3 30.12.3.1.13')
if mibBuilder.loadTexts: lldpV2Xdot3RemMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemMaxFrameSize.setDescription('An integer value indicating the maximum supported frame \n             size in octets on the port component associated with the \n             remote system.')
lldpV2Xdot3RemEEETable = MibTable((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 4), )
if mibBuilder.loadTexts: lldpV2Xdot3RemEEETable.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemEEETable.setDescription('This table contains one row per port of Energy Efficient Ethernet \n            information (as a part of the LLDP IEEE 802.3 organizational\n            extension) on the local system known to this agent.')
lldpV2Xdot3RemEEEEntry = MibTableRow((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 4, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2RemLocalIfIndex"))
if mibBuilder.loadTexts: lldpV2Xdot3RemEEEEntry.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemEEEEntry.setDescription('Information about a particular port component.')
lldpV2Xdot3RemTxTwSys = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemTxTwSys.setReference('IEEE Std 802.3 30.12.3.1.19')
if mibBuilder.loadTexts: lldpV2Xdot3RemTxTwSys.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemTxTwSys.setDescription('A GET returns the value of Tw_sys_tx that the remote system\n            can support in the transmit direction.\n            This object maps to the variable RemTxSystemValue as defined\n            in IEEE Std 802.3 78.4.2.3.')
lldpV2Xdot3RemTxTwSysEcho = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemTxTwSysEcho.setReference('IEEE Std 802.3 30.12.3.1.20')
if mibBuilder.loadTexts: lldpV2Xdot3RemTxTwSysEcho.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemTxTwSysEcho.setDescription('A GET returns the value of Tw_sys_tx that the local system is\n            advertising that it can support in the transmit direction as\n             echoed by the remote system under the control of the EEE DLL receiver\n            state diagram. This object maps to the variable\n            RemTxSystemValueEcho as defined in IEEE Std 802.3 78.4.2.3')
lldpV2Xdot3RemRxTwSys = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemRxTwSys.setReference('IEEE Std 802.3 30.12.3.1.21')
if mibBuilder.loadTexts: lldpV2Xdot3RemRxTwSys.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemRxTwSys.setDescription('A GET returns the value of Tw_sys_tx that\n            the remote system is requesting in the receive direction.\n            This object maps to the variable RemRxSystemValue as\n            defined in IEEE Std 802.3 78.4.2.3.')
lldpV2Xdot3RemRxTwSysEcho = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemRxTwSysEcho.setReference('IEEE Std 802.3 30.12.3.1.22')
if mibBuilder.loadTexts: lldpV2Xdot3RemRxTwSysEcho.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemRxTwSysEcho.setDescription('A GET returns the value of Tw_sys_tx that\n            the local system is advertising that it is requesting in the\n            receive direction and is echoed by the remote system under the\n            control of the EEE DLL transmitter state diagram. This object\n            maps to the variable RemRxSystemValueEcho as defined in\n            IEEE Std 802.3 78.4.2.3.')
lldpV2Xdot3RemFbTwSys = MibTableColumn((1, 3, 111, 2, 802, 3, 1, 5, 1, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpV2Xdot3RemFbTwSys.setReference('IEEE Std 802.3 30.12.3.1.23')
if mibBuilder.loadTexts: lldpV2Xdot3RemFbTwSys.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemFbTwSys.setDescription('A GET returns the value of the fallback Tw_sys_tx\n            that the remote system is advertising.\n            This object maps to the variable RemFbSystemValue as defined\n            in IEEE Std 802.3 78.4.2.3.')
lldpV2Xdot3Conformance = MibIdentifier((1, 3, 111, 2, 802, 3, 1, 5, 2))
lldpV2Xdot3Compliances = MibIdentifier((1, 3, 111, 2, 802, 3, 1, 5, 2, 1))
lldpV2Xdot3Groups = MibIdentifier((1, 3, 111, 2, 802, 3, 1, 5, 2, 2))
lldpV2Xdot3TxRxCompliance = ModuleCompliance((1, 3, 111, 2, 802, 3, 1, 5, 2, 1, 1)).setObjects(("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3ConfigGroup"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "ifGeneralInformationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot3TxRxCompliance = lldpV2Xdot3TxRxCompliance.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3TxRxCompliance.setDescription('A compliance statement for SNMP entities that implement\n            the LLDP IEEE 802.3 organizational extension MIB.\n\n            This group is mandatory for all agents that implement the \n            LLDP IEEE 802.3 organizational extension in TX and/or RX mode.\n\n            This version defines compliance requirements for\n            V2 of the LLDP MIB.')
lldpV2Xdot3TxCompliance = ModuleCompliance((1, 3, 111, 2, 802, 3, 1, 5, 2, 1, 2)).setObjects(("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocSysGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot3TxCompliance = lldpV2Xdot3TxCompliance.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3TxCompliance.setDescription('The compliance statement for SNMP entities that implement\n            the LLDP IEEE 802.3 organizational extension MIB.\n\n            This group is mandatory for agents that implement the \n            LLDP IEEE 802.3 organizational extension in the TX mode.\n\n            This version defines compliance requirements for\n            V2 of the LLDP MIB.')
lldpV2Xdot3RxCompliance = ModuleCompliance((1, 3, 111, 2, 802, 3, 1, 5, 2, 1, 3)).setObjects(("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemSysGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot3RxCompliance = lldpV2Xdot3RxCompliance.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RxCompliance.setDescription('The compliance statement for SNMP entities that implement\n            the LLDP IEEE 802.3 organizational extension MIB.\n\n            This group is mandatory for agents that implement the \n            LLDP IEEE 802.3 organizational extension in the RX mode.\n\n            This version defines compliance requirements for\n            V2 of the LLDP MIB.')
lldpV2Xdot3ConfigGroup = ObjectGroup((1, 3, 111, 2, 802, 3, 1, 5, 2, 2, 1)).setObjects(("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3PortConfigTLVsTxEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot3ConfigGroup = lldpV2Xdot3ConfigGroup.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3ConfigGroup.setDescription('The collection of objects that are used to configure the\n            LLDP IEEE 802.3 organizational extension implementation behavior.')
lldpV2Xdot3LocSysGroup = ObjectGroup((1, 3, 111, 2, 802, 3, 1, 5, 2, 2, 2)).setObjects(("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPortAutoNegSupported"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPortAutoNegEnabled"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPortAutoNegAdvertisedCap"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPortOperMauType"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerPortClass"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerMDISupported"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerMDIEnabled"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerPairControlable"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerPairs"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerClass"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocMaxFrameSize"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerType"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerSource"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPowerPriority"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPDRequestedPowerValue"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocPSEAllocatedPowerValue"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocResponseTime"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocReady"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocReducedOperationPowerValue"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocTxTwSys"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocTxTwSysEcho"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocRxTwSys"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocRxTwSysEcho"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocFbTwSys"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3TxDllReady"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RxDllReady"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3LocDllEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot3LocSysGroup = lldpV2Xdot3LocSysGroup.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3LocSysGroup.setDescription('The collection of objects that are used to represent LLDP\n            IEEE 802.3 organizational extension Local Device Information.')
lldpV2Xdot3RemSysGroup = ObjectGroup((1, 3, 111, 2, 802, 3, 1, 5, 2, 2, 3)).setObjects(("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPortAutoNegSupported"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPortAutoNegEnabled"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPortAutoNegAdvertisedCap"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPortOperMauType"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerPortClass"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerMDISupported"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerMDIEnabled"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerPairControlable"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerPairs"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerClass"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemMaxFrameSize"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerType"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerSource"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPowerPriority"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPDRequestedPowerValue"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemPSEAllocatedPowerValue"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemTxTwSys"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemTxTwSysEcho"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemRxTwSys"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemRxTwSysEcho"), ("IEEE8023-DOT3-LLDP-EXT-V2-MIB", "lldpV2Xdot3RemFbTwSys"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpV2Xdot3RemSysGroup = lldpV2Xdot3RemSysGroup.setStatus('current')
if mibBuilder.loadTexts: lldpV2Xdot3RemSysGroup.setDescription('The collection of objects that are used to represent LLDP\n            IEEE 802.3 organizational extension Local Device Information.')
mibBuilder.exportSymbols("IEEE8023-DOT3-LLDP-EXT-V2-MIB", lldpV2Xdot3PortConfigTLVsTxEnable=lldpV2Xdot3PortConfigTLVsTxEnable, lldpV2Xdot3RemPortOperMauType=lldpV2Xdot3RemPortOperMauType, PYSNMP_MODULE_ID=ieee8023lldpV2Xdot3MIB, lldpV2Xdot3RemPSEAllocatedPowerValue=lldpV2Xdot3RemPSEAllocatedPowerValue, lldpV2Xdot3RxCompliance=lldpV2Xdot3RxCompliance, lldpV2Xdot3LocPortAutoNegEnabled=lldpV2Xdot3LocPortAutoNegEnabled, lldpV2Xdot3RemEEEEntry=lldpV2Xdot3RemEEEEntry, lldpV2Xdot3RemTxTwSysEcho=lldpV2Xdot3RemTxTwSysEcho, lldpV2Xdot3RemMaxFrameSizeEntry=lldpV2Xdot3RemMaxFrameSizeEntry, lldpV2Xdot3RemEEETable=lldpV2Xdot3RemEEETable, lldpV2Xdot3ConfigGroup=lldpV2Xdot3ConfigGroup, lldpV2Xdot3LocTxTwSys=lldpV2Xdot3LocTxTwSys, lldpV2Xdot3PortConfigEntry=lldpV2Xdot3PortConfigEntry, lldpV2Xdot3LocPowerClass=lldpV2Xdot3LocPowerClass, lldpV2Xdot3LocPowerPriority=lldpV2Xdot3LocPowerPriority, lldpV2Xdot3RemoteData=lldpV2Xdot3RemoteData, lldpV2Xdot3RemPortTable=lldpV2Xdot3RemPortTable, lldpV2Xdot3LocPortAutoNegAdvertisedCap=lldpV2Xdot3LocPortAutoNegAdvertisedCap, lldpV2Xdot3TxRxCompliance=lldpV2Xdot3TxRxCompliance, lldpV2Xdot3LocPortAutoNegSupported=lldpV2Xdot3LocPortAutoNegSupported, lldpV2Xdot3RemPDRequestedPowerValue=lldpV2Xdot3RemPDRequestedPowerValue, lldpV2Xdot3LocPortOperMauType=lldpV2Xdot3LocPortOperMauType, lldpV2Xdot3LocPowerEntry=lldpV2Xdot3LocPowerEntry, lldpV2Xdot3RemPowerPairControlable=lldpV2Xdot3RemPowerPairControlable, lldpV2Xdot3RemPowerMDISupported=lldpV2Xdot3RemPowerMDISupported, lldpV2Xdot3RemPowerClass=lldpV2Xdot3RemPowerClass, lldpV2Xdot3LocPowerType=lldpV2Xdot3LocPowerType, lldpV2Xdot3TxCompliance=lldpV2Xdot3TxCompliance, lldpV2Xdot3LocEEETable=lldpV2Xdot3LocEEETable, lldpV2Xdot3Conformance=lldpV2Xdot3Conformance, lldpV2Xdot3RemPortEntry=lldpV2Xdot3RemPortEntry, lldpV2Xdot3LocPortTable=lldpV2Xdot3LocPortTable, lldpV2Xdot3RemPortAutoNegEnabled=lldpV2Xdot3RemPortAutoNegEnabled, lldpV2Xdot3LocMaxFrameSize=lldpV2Xdot3LocMaxFrameSize, lldpV2Xdot3Objects=lldpV2Xdot3Objects, lldpV2Xdot3LocFbTwSys=lldpV2Xdot3LocFbTwSys, lldpV2Xdot3LocPowerMDISupported=lldpV2Xdot3LocPowerMDISupported, lldpV2Xdot3RemMaxFrameSize=lldpV2Xdot3RemMaxFrameSize, lldpV2Xdot3LocReducedOperationPowerValue=lldpV2Xdot3LocReducedOperationPowerValue, lldpV2Xdot3TxDllReady=lldpV2Xdot3TxDllReady, ieee8023lldpV2Xdot3MIB=ieee8023lldpV2Xdot3MIB, lldpV2Xdot3RemFbTwSys=lldpV2Xdot3RemFbTwSys, lldpV2Xdot3RemPowerEntry=lldpV2Xdot3RemPowerEntry, lldpV2Xdot3RxDllReady=lldpV2Xdot3RxDllReady, lldpV2Xdot3RemPowerType=lldpV2Xdot3RemPowerType, lldpV2Xdot3RemPortAutoNegAdvertisedCap=lldpV2Xdot3RemPortAutoNegAdvertisedCap, lldpV2Xdot3LocRxTwSysEcho=lldpV2Xdot3LocRxTwSysEcho, lldpV2Xdot3RemPortAutoNegSupported=lldpV2Xdot3RemPortAutoNegSupported, lldpV2Xdot3RemPowerPortClass=lldpV2Xdot3RemPowerPortClass, lldpV2Xdot3LocPowerTable=lldpV2Xdot3LocPowerTable, lldpV2Xdot3Config=lldpV2Xdot3Config, lldpV2Xdot3LocTxTwSysEcho=lldpV2Xdot3LocTxTwSysEcho, lldpV2Xdot3LocReady=lldpV2Xdot3LocReady, lldpV2Xdot3RemPowerTable=lldpV2Xdot3RemPowerTable, lldpV2Xdot3LocDllEnabled=lldpV2Xdot3LocDllEnabled, lldpV2Xdot3Compliances=lldpV2Xdot3Compliances, lldpV2Xdot3LocPowerMDIEnabled=lldpV2Xdot3LocPowerMDIEnabled, lldpV2Xdot3Groups=lldpV2Xdot3Groups, lldpV2Xdot3RemPowerPairs=lldpV2Xdot3RemPowerPairs, lldpV2Xdot3LocPowerSource=lldpV2Xdot3LocPowerSource, lldpV2Xdot3RemRxTwSysEcho=lldpV2Xdot3RemRxTwSysEcho, lldpV2Xdot3LocPowerPortClass=lldpV2Xdot3LocPowerPortClass, lldpV2Xdot3RemSysGroup=lldpV2Xdot3RemSysGroup, lldpV2Xdot3RemPowerMDIEnabled=lldpV2Xdot3RemPowerMDIEnabled, lldpV2Xdot3LocSysGroup=lldpV2Xdot3LocSysGroup, lldpV2Xdot3PortConfigTable=lldpV2Xdot3PortConfigTable, lldpV2Xdot3RemPowerPriority=lldpV2Xdot3RemPowerPriority, lldpV2Xdot3LocMaxFrameSizeEntry=lldpV2Xdot3LocMaxFrameSizeEntry, lldpV2Xdot3LocPSEAllocatedPowerValue=lldpV2Xdot3LocPSEAllocatedPowerValue, lldpV2Xdot3LocPortEntry=lldpV2Xdot3LocPortEntry, lldpV2Xdot3LocPowerPairs=lldpV2Xdot3LocPowerPairs, lldpV2Xdot3RemMaxFrameSizeTable=lldpV2Xdot3RemMaxFrameSizeTable, lldpV2Xdot3LocResponseTime=lldpV2Xdot3LocResponseTime, lldpV2Xdot3LocRxTwSys=lldpV2Xdot3LocRxTwSys, lldpV2Xdot3RemRxTwSys=lldpV2Xdot3RemRxTwSys, lldpV2Xdot3LocEEEEntry=lldpV2Xdot3LocEEEEntry, lldpV2Xdot3RemPowerSource=lldpV2Xdot3RemPowerSource, lldpV2Xdot3RemTxTwSys=lldpV2Xdot3RemTxTwSys, lldpV2Xdot3LocPowerPairControlable=lldpV2Xdot3LocPowerPairControlable, lldpV2Xdot3LocalData=lldpV2Xdot3LocalData, lldpV2Xdot3LocMaxFrameSizeTable=lldpV2Xdot3LocMaxFrameSizeTable, lldpV2Xdot3LocPDRequestedPowerValue=lldpV2Xdot3LocPDRequestedPowerValue)
