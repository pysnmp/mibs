#
# PySNMP MIB module CAREL-ug40cdz-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/carel/CAREL-ug40cdz-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 13:26:51 2024
# On host fv-az693-695 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
sysContact, sysName, sysLocation = mibBuilder.importSymbols("SNMPv2-MIB", "sysContact", "sysName", "sysLocation")
MibIdentifier, Unsigned32, Counter64, Bits, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, ModuleIdentity, enterprises, Counter32, Gauge32, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "Counter64", "Bits", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "ModuleIdentity", "enterprises", "Counter32", "Gauge32", "IpAddress", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ug40cdzMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9839, 2, 1))
ug40cdzMIB.setRevisions(('2006-04-11 16:45',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ug40cdzMIB.setRevisionsDescriptions(('This is the original version of the MIB',))
if mibBuilder.loadTexts: ug40cdzMIB.setLastUpdated('200604111645Z')
if mibBuilder.loadTexts: ug40cdzMIB.setOrganization('CAREL SpA')
if mibBuilder.loadTexts: ug40cdzMIB.setContactInfo("\n                        Carel SpA\n                        Via dell'Industria, 11\n                        35020 Brugine (PD) Italy\n                        Tel: +39 049 9716611\n                        E-mail: carel@carel.com\n                ")
if mibBuilder.loadTexts: ug40cdzMIB.setDescription('This is the MIB module for the UG40 Close Control Uniflair device.')
carel = MibIdentifier((1, 3, 6, 1, 4, 1, 9839))
systm = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 1))
agentRelease = MibScalar((1, 3, 6, 1, 4, 1, 9839, 1, 1), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRelease.setStatus('current')
if mibBuilder.loadTexts: agentRelease.setDescription('Release of the Agent.')
agentCode = MibScalar((1, 3, 6, 1, 4, 1, 9839, 1, 2), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCode.setStatus('current')
if mibBuilder.loadTexts: agentCode.setDescription('Code of the Agent. 1=WebGate')
instruments = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2))
webGateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0))
agentParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0, 1))
netSize = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: netSize.setStatus('current')
if mibBuilder.loadTexts: netSize.setDescription('Network size. It corresponds to the number of units connected to the WebGate. ')
baudRate = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1200, 1200), ValueRangeConstraint(2400, 2400), ValueRangeConstraint(4800, 4800), ValueRangeConstraint(9600, 9600), ValueRangeConstraint(19200, 19200), ))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: baudRate.setStatus('current')
if mibBuilder.loadTexts: baudRate.setDescription('Baudrate of the Carel network. ')
unitTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0, 2))
unit1_Type = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 2, 1), DisplayString()).setLabel("unit1-Type").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1_Type.setStatus('current')
if mibBuilder.loadTexts: unit1_Type.setDescription('Type of the unit having serial address 1. ')
unitCodeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0, 3))
unit1_Code = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 3, 1), Integer32()).setLabel("unit1-Code").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1_Code.setStatus('current')
if mibBuilder.loadTexts: unit1_Code.setDescription('Code of the unit having serial address 1. ')
unitSoftwareReleaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0, 4))
unit1_SoftwareRelease = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 4, 1), Integer32()).setLabel("unit1-SoftwareRelease").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1_SoftwareRelease.setStatus('current')
if mibBuilder.loadTexts: unit1_SoftwareRelease.setDescription('Software release of the unit having serial address 1. ')
unitMinSoftwareReleaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0, 5))
unit1_MinSoftwareRelease = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 5, 1), Integer32()).setLabel("unit1-MinSoftwareRelease").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1_MinSoftwareRelease.setStatus('current')
if mibBuilder.loadTexts: unit1_MinSoftwareRelease.setDescription('Minimum software release of the unit having serial address 1. ')
unitMaxSoftwareReleaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0, 6))
unit1_MaxSoftwareRelease = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 6, 1), Integer32()).setLabel("unit1-MaxSoftwareRelease").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1_MaxSoftwareRelease.setStatus('current')
if mibBuilder.loadTexts: unit1_MaxSoftwareRelease.setDescription('Maximum software release of the unit having serial address 1. ')
unitNoAnswerCounterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0, 7))
unit1_NoAnswerCounter = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 7, 1), Integer32()).setLabel("unit1-NoAnswerCounter").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1_NoAnswerCounter.setStatus('current')
if mibBuilder.loadTexts: unit1_NoAnswerCounter.setDescription('No answer counter of the unit having serial address 1. ')
unitErrorChecksumCounterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0, 8))
unit1_ErrorChecksumCounter = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 8, 1), Integer32()).setLabel("unit1-ErrorChecksumCounter").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1_ErrorChecksumCounter.setStatus('current')
if mibBuilder.loadTexts: unit1_ErrorChecksumCounter.setDescription('Error checksum counter of the unit having serial address 1. ')
unitTimeoutCounterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0, 9))
unit1_TimeoutCounter = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 9, 1), Integer32()).setLabel("unit1-TimeoutCounter").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1_TimeoutCounter.setStatus('current')
if mibBuilder.loadTexts: unit1_TimeoutCounter.setDescription('Timeout counter of the unit having serial address 1. ')
digitalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1))
systemOn = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: systemOn.setStatus('current')
if mibBuilder.loadTexts: systemOn.setDescription('System On (Fan)')
compressore1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressore1.setStatus('current')
if mibBuilder.loadTexts: compressore1.setDescription('Compressor 1')
compressore2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressore2.setStatus('current')
if mibBuilder.loadTexts: compressore2.setDescription('Compressor 2')
compressore3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressore3.setStatus('current')
if mibBuilder.loadTexts: compressore3.setDescription('Compressor 3')
compressore4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressore4.setStatus('current')
if mibBuilder.loadTexts: compressore4.setDescription('Compressor 4')
heating1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: heating1.setStatus('current')
if mibBuilder.loadTexts: heating1.setDescription('Heating 1')
heating2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: heating2.setStatus('current')
if mibBuilder.loadTexts: heating2.setDescription('Heating 2')
hotGasCoil = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: hotGasCoil.setStatus('current')
if mibBuilder.loadTexts: hotGasCoil.setDescription('Hot Gas Coil')
dehumidification = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: dehumidification.setStatus('current')
if mibBuilder.loadTexts: dehumidification.setDescription('Dehumidification')
humidification = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: humidification.setStatus('current')
if mibBuilder.loadTexts: humidification.setDescription('Humidification')
emerg = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: emerg.setStatus('current')
if mibBuilder.loadTexts: emerg.setDescription('Main Power Loss')
alarmAccess = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmAccess.setStatus('current')
if mibBuilder.loadTexts: alarmAccess.setDescription('Tampering Alarm')
alarmRoomHT = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmRoomHT.setStatus('current')
if mibBuilder.loadTexts: alarmRoomHT.setDescription('Alarm: Room High Temperature')
alarmRoomLT = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmRoomLT.setStatus('current')
if mibBuilder.loadTexts: alarmRoomLT.setDescription('Alarm: Room Low Temperature')
alarmRoomHH = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmRoomHH.setStatus('current')
if mibBuilder.loadTexts: alarmRoomHH.setDescription('Alarm: Room High Humidity')
alarmRoomLH = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmRoomLH.setStatus('current')
if mibBuilder.loadTexts: alarmRoomLH.setDescription('Alarm: Room Low Humidity')
alarmRoomEAP = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmRoomEAP.setStatus('current')
if mibBuilder.loadTexts: alarmRoomEAP.setDescription('Room T+H Limits by External Sensors')
alarmFilter = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmFilter.setStatus('current')
if mibBuilder.loadTexts: alarmFilter.setDescription('Alarm: Clogged Filter')
alarmFlood = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmFlood.setStatus('current')
if mibBuilder.loadTexts: alarmFlood.setDescription('Alarm: Water Leakage Detected')
alarmAirFlow = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmAirFlow.setStatus('current')
if mibBuilder.loadTexts: alarmAirFlow.setDescription('Alarm: Loss of Air Flow')
alarmHeater = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHeater.setStatus('current')
if mibBuilder.loadTexts: alarmHeater.setDescription('Alarm: Heater Overheating')
alarmHP1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHP1.setStatus('current')
if mibBuilder.loadTexts: alarmHP1.setDescription('Alarm: Circuit 1 High Pressure')
alarmHP2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHP2.setStatus('current')
if mibBuilder.loadTexts: alarmHP2.setDescription('Alarm: Circuit 1 High Pressure')
alarmLP1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLP1.setStatus('current')
if mibBuilder.loadTexts: alarmLP1.setDescription('Alarm: Circuit 1 Low Pressure')
alarmLP2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLP2.setStatus('current')
if mibBuilder.loadTexts: alarmLP2.setDescription('Alarm: Circuit 2 Low Pressure')
alarmEXV1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEXV1.setStatus('current')
if mibBuilder.loadTexts: alarmEXV1.setDescription('Alarm: Circuit 1 Electronic Valve Failure')
alarmEXV2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEXV2.setStatus('current')
if mibBuilder.loadTexts: alarmEXV2.setDescription('Alarm: Circuit 2 Electronic Valve Failure')
alarmPSE = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPSE.setStatus('current')
if mibBuilder.loadTexts: alarmPSE.setDescription('Alarm: Wrong Phase Sequence')
alarmSmokeFire = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSmokeFire.setStatus('current')
if mibBuilder.loadTexts: alarmSmokeFire.setDescription('Alarm: SMOKE-FIRE DETECTED')
alarmLAN = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLAN.setStatus('current')
if mibBuilder.loadTexts: alarmLAN.setDescription('Interrupted LAN Alarm')
alarmHUHC = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHUHC.setStatus('current')
if mibBuilder.loadTexts: alarmHUHC.setDescription('Alarm: Humidifier High Current')
alarmHUPL = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHUPL.setStatus('current')
if mibBuilder.loadTexts: alarmHUPL.setDescription('Alarm: Humidifier Power Loss')
alarmHUWL = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHUWL.setStatus('current')
if mibBuilder.loadTexts: alarmHUWL.setDescription('Alarm: Humidifier Water Loss')
alarmCWDHT = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCWDHT.setStatus('current')
if mibBuilder.loadTexts: alarmCWDHT.setDescription('Alarm: CW Temperature too High for Dehumidification')
alarmCWF = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCWF.setStatus('current')
if mibBuilder.loadTexts: alarmCWF.setDescription('Alarm: CW Valve Failure or Water Flow too Low')
alarmCWFF = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCWFF.setStatus('current')
if mibBuilder.loadTexts: alarmCWFF.setDescription('Alarm: Loss of Water Flow')
alarmCWHT = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCWHT.setStatus('current')
if mibBuilder.loadTexts: alarmCWHT.setDescription('Alarm: High Chilled Water Temperature')
alarmRTS = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmRTS.setStatus('current')
if mibBuilder.loadTexts: alarmRTS.setDescription('Alarm: Room Temp. Sensor Failed/Disconnected')
alarmHWS = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHWS.setStatus('current')
if mibBuilder.loadTexts: alarmHWS.setDescription('Alarm: Hot Water Temp. Sensor Failed/Disconnected')
alarmCWS = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCWS.setStatus('current')
if mibBuilder.loadTexts: alarmCWS.setDescription('Alarm: Chilled Water Temp. Sensor Failed/Disconnected')
alarmOTS = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOTS.setStatus('current')
if mibBuilder.loadTexts: alarmOTS.setDescription('Alarm: Outdoor Temperature Sensor Failed/Disconnected')
alarmDTS = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDTS.setStatus('current')
if mibBuilder.loadTexts: alarmDTS.setDescription('Alarm: Delivery Air Temp. Sensor Failed/Disconnected')
alarmRHS = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmRHS.setStatus('current')
if mibBuilder.loadTexts: alarmRHS.setDescription('Alarm: Room Humidity Sensor Failed/Disconnected')
alarmCWOTS = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCWOTS.setStatus('current')
if mibBuilder.loadTexts: alarmCWOTS.setDescription('Alarm: Chilled Water Outlet T. Sensor Failed/Disconnected')
alarmC1Hours = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmC1Hours.setStatus('current')
if mibBuilder.loadTexts: alarmC1Hours.setDescription('ServiceAlarm: Compressor 1 hour counter threshold')
alarmC2Hours = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmC2Hours.setStatus('current')
if mibBuilder.loadTexts: alarmC2Hours.setDescription('ServiceAlarm: Compressor 2 hour counter threshold')
alarmC3Hours = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmC3Hours.setStatus('current')
if mibBuilder.loadTexts: alarmC3Hours.setDescription('ServiceAlarm: Compressor 3 hour counter threshold')
alarmC4Hours = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmC4Hours.setStatus('current')
if mibBuilder.loadTexts: alarmC4Hours.setDescription('ServiceAlarm: Compressor 4 hour counter threshold')
alarmFilterHours = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmFilterHours.setStatus('current')
if mibBuilder.loadTexts: alarmFilterHours.setDescription('ServiceAlarm: Air Filter hour counter threshold')
alarmHeat1Hours = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHeat1Hours.setStatus('current')
if mibBuilder.loadTexts: alarmHeat1Hours.setDescription('ServiceAlarm: Heater 1 hour counter threshold')
alarmHeat2Hours = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHeat2Hours.setStatus('current')
if mibBuilder.loadTexts: alarmHeat2Hours.setDescription('ServiceAlarm: Heater 1 hour counter threshold')
alarmHumHours = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHumHours.setStatus('current')
if mibBuilder.loadTexts: alarmHumHours.setDescription('ServiceAlarm: Humidifier hour counter threshold')
alarmUnitHours = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmUnitHours.setStatus('current')
if mibBuilder.loadTexts: alarmUnitHours.setDescription('ServiceAlarm: Unit hour counter threshold')
alarmDI2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDI2.setStatus('current')
if mibBuilder.loadTexts: alarmDI2.setDescription('Alarm by Digital Input 2')
alarmDI4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDI4.setStatus('current')
if mibBuilder.loadTexts: alarmDI4.setDescription('Alarm by Digital Input 4')
alarmDI6 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDI6.setStatus('current')
if mibBuilder.loadTexts: alarmDI6.setDescription('Alarm by Digital Input 6')
alarmHum = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmHum.setStatus('current')
if mibBuilder.loadTexts: alarmHum.setDescription('Humidifier General Alarm')
alarmGeneral = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmGeneral.setStatus('current')
if mibBuilder.loadTexts: alarmGeneral.setDescription('General Alarm')
alarm2ndLevel = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarm2ndLevel.setStatus('current')
if mibBuilder.loadTexts: alarm2ndLevel.setDescription('Standby Unit Switchover Alarm')
alarmA = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmA.setStatus('current')
if mibBuilder.loadTexts: alarmA.setDescription('Type A Alarm')
alarmB = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmB.setStatus('current')
if mibBuilder.loadTexts: alarmB.setDescription('Type B Alarm')
alarmC = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmC.setStatus('current')
if mibBuilder.loadTexts: alarmC.setDescription('Type C Alarm')
selDXCW = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: selDXCW.setStatus('current')
if mibBuilder.loadTexts: selDXCW.setDescription('DX/CW Switch on TC Units')
selSW = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: selSW.setStatus('current')
if mibBuilder.loadTexts: selSW.setDescription('Summer/Winter Switchover')
systemOnOff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemOnOff.setStatus('current')
if mibBuilder.loadTexts: systemOnOff.setDescription('System On-Off')
resetAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAlarm.setStatus('current')
if mibBuilder.loadTexts: resetAlarm.setDescription('Alarm Reset')
resetHrsFilt = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetHrsFilt.setStatus('current')
if mibBuilder.loadTexts: resetHrsFilt.setDescription('Filter Run Hours Reset')
resetHrC1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetHrC1.setStatus('current')
if mibBuilder.loadTexts: resetHrC1.setDescription('Compressor 1 Run Hours Reset')
resetHrC2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetHrC2.setStatus('current')
if mibBuilder.loadTexts: resetHrC2.setDescription('Compressor 2 Run Hours Reset')
resetHrC3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetHrC3.setStatus('current')
if mibBuilder.loadTexts: resetHrC3.setDescription('Compressor 3 Run Hours Reset')
resetHrC4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetHrC4.setStatus('current')
if mibBuilder.loadTexts: resetHrC4.setDescription('Compressor 4 Run Hours Reset')
resetStC1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetStC1.setStatus('current')
if mibBuilder.loadTexts: resetStC1.setDescription('Compressor 1 Starting Counter Reset ')
resetStC2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetStC2.setStatus('current')
if mibBuilder.loadTexts: resetStC2.setDescription('Compressor 2 Starting Counter Reset ')
resetStC3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetStC3.setStatus('current')
if mibBuilder.loadTexts: resetStC3.setDescription('Compressor 3 Starting Counter Reset ')
resetStC4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetStC4.setStatus('current')
if mibBuilder.loadTexts: resetStC4.setDescription('Compressor 4 Starting Counter Reset ')
resetHrH1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetHrH1.setStatus('current')
if mibBuilder.loadTexts: resetHrH1.setDescription('Heater 1 Run Hours Reset')
resetHrH2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetHrH2.setStatus('current')
if mibBuilder.loadTexts: resetHrH2.setDescription('Heater 2 Run Hours Reset')
resetStH1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetStH1.setStatus('current')
if mibBuilder.loadTexts: resetStH1.setDescription('Heater 1 Starting Counter Reset')
resetStH2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetStH2.setStatus('current')
if mibBuilder.loadTexts: resetStH2.setDescription('Heater 2 Starting Counter Reset')
resetHrHU = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetHrHU.setStatus('current')
if mibBuilder.loadTexts: resetHrHU.setDescription('Humidifier Run Hours Reset')
resetStHU = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetStHU.setStatus('current')
if mibBuilder.loadTexts: resetStHU.setDescription('Humidifier Starting Counter Reset')
resetHrACU = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetHrACU.setStatus('current')
if mibBuilder.loadTexts: resetHrACU.setDescription('Unit Run Hours Reset')
sleepmode = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sleepmode.setStatus('current')
if mibBuilder.loadTexts: sleepmode.setDescription('Setback Mode (Sleep Mode)')
smtest = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtest.setStatus('current')
if mibBuilder.loadTexts: smtest.setDescription('Sleep Mode Test')
enablemeanT = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablemeanT.setStatus('current')
if mibBuilder.loadTexts: enablemeanT.setDescription('Local/Mean Usage of Values')
analogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2))
roomTemp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: roomTemp.setStatus('current')
if mibBuilder.loadTexts: roomTemp.setDescription('Room Temperature')
outdoorTemp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: outdoorTemp.setStatus('current')
if mibBuilder.loadTexts: outdoorTemp.setDescription('Ambient Temperature')
deliveryTemp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: deliveryTemp.setStatus('current')
if mibBuilder.loadTexts: deliveryTemp.setDescription('Delivery Air Temperature')
cwTemp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwTemp.setStatus('current')
if mibBuilder.loadTexts: cwTemp.setDescription('Chilled Water Temperature')
hwTemp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTemp.setStatus('current')
if mibBuilder.loadTexts: hwTemp.setDescription('Hot Water Temperature')
roomRH = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('rH%').setMaxAccess("readonly")
if mibBuilder.loadTexts: roomRH.setStatus('current')
if mibBuilder.loadTexts: roomRH.setDescription('Room Relative Humidity')
cwoTemp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwoTemp.setStatus('current')
if mibBuilder.loadTexts: cwoTemp.setDescription('Chilled Water Outlet Temperature')
evapPress1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('bar').setMaxAccess("readwrite")
if mibBuilder.loadTexts: evapPress1.setStatus('current')
if mibBuilder.loadTexts: evapPress1.setDescription('Circuit 1 Evaporating Pressure')
evapPress2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('bar').setMaxAccess("readwrite")
if mibBuilder.loadTexts: evapPress2.setStatus('current')
if mibBuilder.loadTexts: evapPress2.setDescription('Circuit 2 Evaporating Pressure')
suctTemp1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: suctTemp1.setStatus('current')
if mibBuilder.loadTexts: suctTemp1.setDescription('Circuit 1 Suction Temperature')
suctTemp2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: suctTemp2.setStatus('current')
if mibBuilder.loadTexts: suctTemp2.setDescription('Circuit 2 Suction Temperature')
evapTemp1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: evapTemp1.setStatus('current')
if mibBuilder.loadTexts: evapTemp1.setDescription('Circuit 1 Evap.Temperature')
evapTemp2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: evapTemp2.setStatus('current')
if mibBuilder.loadTexts: evapTemp2.setDescription('Circuit 2 Evap.Temperature')
ssh1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: ssh1.setStatus('current')
if mibBuilder.loadTexts: ssh1.setDescription('Circuit 1 Superheat')
ssh2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: ssh2.setStatus('current')
if mibBuilder.loadTexts: ssh2.setDescription('Circuit 2 Superheat')
coolRamp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: coolRamp.setStatus('current')
if mibBuilder.loadTexts: coolRamp.setDescription('Cooling Valve Ramp')
heatRamp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: heatRamp.setStatus('current')
if mibBuilder.loadTexts: heatRamp.setDescription('Heating Valve Ramp')
fanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeed.setStatus('current')
if mibBuilder.loadTexts: fanSpeed.setDescription('Evapor. Fan Speed')
coolSetP = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolSetP.setStatus('current')
if mibBuilder.loadTexts: coolSetP.setDescription('Cooling Set Point')
coolDiff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolDiff.setStatus('current')
if mibBuilder.loadTexts: coolDiff.setDescription('Cooling Prop.Band')
cool2SetP = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cool2SetP.setStatus('current')
if mibBuilder.loadTexts: cool2SetP.setDescription('Cooling 2nd Set Point')
heatSetP = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: heatSetP.setStatus('current')
if mibBuilder.loadTexts: heatSetP.setDescription('Heating Set point')
heat2SetP = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: heat2SetP.setStatus('current')
if mibBuilder.loadTexts: heat2SetP.setDescription('Heating 2nd Set point')
heatDiff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: heatDiff.setStatus('current')
if mibBuilder.loadTexts: heatDiff.setDescription('Heating Prop.Band')
thrsHT = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C x10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thrsHT.setStatus('current')
if mibBuilder.loadTexts: thrsHT.setDescription('High Room Temperature Alarm Threshold')
thrsLT = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C x10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thrsLT.setStatus('current')
if mibBuilder.loadTexts: thrsLT.setDescription('Low Room Temperature Alarm Threshold')
smCoolSetp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: smCoolSetp.setStatus('current')
if mibBuilder.loadTexts: smCoolSetp.setDescription('Setback Mode: Cooling Setpoint')
smHeatSetp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: smHeatSetp.setStatus('current')
if mibBuilder.loadTexts: smHeatSetp.setDescription('Setback Mode: Heating Setpoint')
cwDehumSetp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwDehumSetp.setStatus('current')
if mibBuilder.loadTexts: cwDehumSetp.setDescription('CW Setpoint to Start Dehumidification')
cwHtThrsh = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwHtThrsh.setStatus('current')
if mibBuilder.loadTexts: cwHtThrsh.setDescription('CW High Temperature Alarm Threshold')
cwModeSetp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwModeSetp.setStatus('current')
if mibBuilder.loadTexts: cwModeSetp.setDescription('CW Setpoint to start CW Operating Mode (Only TC Units)')
radcoolSpES = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: radcoolSpES.setStatus('current')
if mibBuilder.loadTexts: radcoolSpES.setDescription('Radcooler Setpoint in Energy Saving Mode')
radcoolSpDX = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: radcoolSpDX.setStatus('current')
if mibBuilder.loadTexts: radcoolSpDX.setDescription('Radcooler Setpoint in DX Mode')
delTempLimit = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C x10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: delTempLimit.setStatus('current')
if mibBuilder.loadTexts: delTempLimit.setDescription('Delivery Temperature Low Limit Setpoint')
dtAutChgMLT = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('degrees C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtAutChgMLT.setStatus('current')
if mibBuilder.loadTexts: dtAutChgMLT.setDescription('Delta Temperature for Automatic Mean/Local Changeover')
integerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3))
filterWorkH = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: filterWorkH.setStatus('current')
if mibBuilder.loadTexts: filterWorkH.setDescription('Air Filter Working Houres')
unitWorkH = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: unitWorkH.setStatus('current')
if mibBuilder.loadTexts: unitWorkH.setDescription('Unit Working Houres')
compr1WorkH = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: compr1WorkH.setStatus('current')
if mibBuilder.loadTexts: compr1WorkH.setDescription('Compressor 1 Run Hours')
compr2WorkH = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: compr2WorkH.setStatus('current')
if mibBuilder.loadTexts: compr2WorkH.setDescription('Compressor 2 Run Hours')
compr3WorkH = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: compr3WorkH.setStatus('current')
if mibBuilder.loadTexts: compr3WorkH.setDescription('Compressor 3 Run Hours')
compr4WorkH = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: compr4WorkH.setStatus('current')
if mibBuilder.loadTexts: compr4WorkH.setDescription('Compressor 4 Run Hours')
heat1WorkH = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: heat1WorkH.setStatus('current')
if mibBuilder.loadTexts: heat1WorkH.setDescription('Heater 1 Run Hours')
heat2WorkH = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: heat2WorkH.setStatus('current')
if mibBuilder.loadTexts: heat2WorkH.setDescription('Heater 2 Run Hours')
humiWorkH = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: humiWorkH.setStatus('current')
if mibBuilder.loadTexts: humiWorkH.setDescription('Humidifier Run Hours')
dehumPband = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dehumPband.setStatus('current')
if mibBuilder.loadTexts: dehumPband.setDescription('Dehumidification Prop.Band')
humidPband = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidPband.setStatus('current')
if mibBuilder.loadTexts: humidPband.setDescription('Humidification Prop.Band')
hhAlarmThrsh = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hhAlarmThrsh.setStatus('current')
if mibBuilder.loadTexts: hhAlarmThrsh.setDescription('High Humidity Alarm Threshold')
lhAlarmThrsh = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lhAlarmThrsh.setStatus('current')
if mibBuilder.loadTexts: lhAlarmThrsh.setDescription('Low Humidity Alarm Threshold')
dehumSetp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dehumSetp.setStatus('current')
if mibBuilder.loadTexts: dehumSetp.setDescription('Dehumidification Setpoint')
smDehumSetp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: smDehumSetp.setStatus('current')
if mibBuilder.loadTexts: smDehumSetp.setDescription('Setback  Mode: Dehumidification Setpoint')
humidSetp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidSetp.setStatus('current')
if mibBuilder.loadTexts: humidSetp.setDescription('Humidification Setpoint')
smHumidSetp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: smHumidSetp.setStatus('current')
if mibBuilder.loadTexts: smHumidSetp.setDescription('Setback  Mode: Humidification Setpoint')
pwOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwOnDelay.setStatus('current')
if mibBuilder.loadTexts: pwOnDelay.setDescription('Restart Delay')
regulDelay = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: regulDelay.setStatus('current')
if mibBuilder.loadTexts: regulDelay.setDescription('Regulation Start Transitory')
lowPdelay = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowPdelay.setStatus('current')
if mibBuilder.loadTexts: lowPdelay.setDescription('Low Pressure Delay')
thAlarmdelay = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: thAlarmdelay.setStatus('current')
if mibBuilder.loadTexts: thAlarmdelay.setDescription('Temp./Humid.Limits Alarm Delay')
regExcTime = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: regExcTime.setStatus('current')
if mibBuilder.loadTexts: regExcTime.setDescription('Anti-Hunting Constant')
stdbyTime = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('h').setMaxAccess("readwrite")
if mibBuilder.loadTexts: stdbyTime.setStatus('current')
if mibBuilder.loadTexts: stdbyTime.setDescription('Stand-by Cycle Base Time')
lanUnit = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('n').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanUnit.setStatus('current')
if mibBuilder.loadTexts: lanUnit.setDescription('Number of LAN Units')
smCycleTime = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: smCycleTime.setStatus('current')
if mibBuilder.loadTexts: smCycleTime.setDescription('Sleep Mode Testing Cycle Time')
exv1steps = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('n').setMaxAccess("readonly")
if mibBuilder.loadTexts: exv1steps.setStatus('current')
if mibBuilder.loadTexts: exv1steps.setDescription('Circuit 1 EXV Valve Position')
exv2steps = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('n').setMaxAccess("readonly")
if mibBuilder.loadTexts: exv2steps.setStatus('current')
if mibBuilder.loadTexts: exv2steps.setDescription('Circuit 2 EXV Valve Position')
mibBuilder.exportSymbols("CAREL-ug40cdz-MIB", alarmHUWL=alarmHUWL, cwTemp=cwTemp, carel=carel, resetHrC1=resetHrC1, outdoorTemp=outdoorTemp, dehumSetp=dehumSetp, cwHtThrsh=cwHtThrsh, ug40cdzMIB=ug40cdzMIB, unitSoftwareReleaseGroup=unitSoftwareReleaseGroup, alarmHUHC=alarmHUHC, compressore1=compressore1, resetHrHU=resetHrHU, roomTemp=roomTemp, alarmCWHT=alarmCWHT, roomRH=roomRH, agentCode=agentCode, alarmSmokeFire=alarmSmokeFire, deliveryTemp=deliveryTemp, dehumidification=dehumidification, alarmFlood=alarmFlood, emerg=emerg, resetHrH1=resetHrH1, evapPress1=evapPress1, PYSNMP_MODULE_ID=ug40cdzMIB, humidPband=humidPband, unitMaxSoftwareReleaseGroup=unitMaxSoftwareReleaseGroup, resetHrC2=resetHrC2, smCoolSetp=smCoolSetp, radcoolSpES=radcoolSpES, heat2WorkH=heat2WorkH, alarmRoomLT=alarmRoomLT, baudRate=baudRate, alarmDTS=alarmDTS, alarmA=alarmA, evapPress2=evapPress2, pwOnDelay=pwOnDelay, webGateInfo=webGateInfo, compr1WorkH=compr1WorkH, exv1steps=exv1steps, lanUnit=lanUnit, humidification=humidification, alarmCWF=alarmCWF, compressore3=compressore3, alarmDI6=alarmDI6, resetHrH2=resetHrH2, thrsHT=thrsHT, unitTypeGroup=unitTypeGroup, regulDelay=regulDelay, cwoTemp=cwoTemp, selDXCW=selDXCW, unit1_MinSoftwareRelease=unit1_MinSoftwareRelease, alarmDI4=alarmDI4, selSW=selSW, alarmCWFF=alarmCWFF, unit1_Code=unit1_Code, alarmEXV1=alarmEXV1, thrsLT=thrsLT, humiWorkH=humiWorkH, alarmOTS=alarmOTS, resetHrACU=resetHrACU, resetStC2=resetStC2, compr2WorkH=compr2WorkH, alarmHeat1Hours=alarmHeat1Hours, heatSetP=heatSetP, heatRamp=heatRamp, coolSetP=coolSetP, agentParameters=agentParameters, compressore4=compressore4, unitMinSoftwareReleaseGroup=unitMinSoftwareReleaseGroup, enablemeanT=enablemeanT, cool2SetP=cool2SetP, cwModeSetp=cwModeSetp, resetHrC4=resetHrC4, resetStC3=resetStC3, alarmLP1=alarmLP1, dehumPband=dehumPband, alarmAccess=alarmAccess, unitWorkH=unitWorkH, systemOnOff=systemOnOff, alarm2ndLevel=alarm2ndLevel, resetStHU=resetStHU, alarmHP2=alarmHP2, compressore2=compressore2, unit1_Type=unit1_Type, lhAlarmThrsh=lhAlarmThrsh, alarmRoomHT=alarmRoomHT, humidSetp=humidSetp, alarmDI2=alarmDI2, alarmCWS=alarmCWS, smCycleTime=smCycleTime, fanSpeed=fanSpeed, smtest=smtest, unitTimeoutCounterGroup=unitTimeoutCounterGroup, stdbyTime=stdbyTime, heating2=heating2, filterWorkH=filterWorkH, alarmLAN=alarmLAN, hwTemp=hwTemp, coolDiff=coolDiff, alarmC1Hours=alarmC1Hours, heat1WorkH=heat1WorkH, unitErrorChecksumCounterGroup=unitErrorChecksumCounterGroup, heatDiff=heatDiff, alarmRoomEAP=alarmRoomEAP, resetHrsFilt=resetHrsFilt, delTempLimit=delTempLimit, alarmEXV2=alarmEXV2, resetHrC3=resetHrC3, netSize=netSize, alarmLP2=alarmLP2, heating1=heating1, alarmRHS=alarmRHS, evapTemp1=evapTemp1, unit1_MaxSoftwareRelease=unit1_MaxSoftwareRelease, hhAlarmThrsh=hhAlarmThrsh, hotGasCoil=hotGasCoil, unit1_TimeoutCounter=unit1_TimeoutCounter, cwDehumSetp=cwDehumSetp, smHumidSetp=smHumidSetp, resetStC1=resetStC1, alarmRTS=alarmRTS, exv2steps=exv2steps, alarmHumHours=alarmHumHours, suctTemp2=suctTemp2, regExcTime=regExcTime, integerObjects=integerObjects, digitalObjects=digitalObjects, alarmCWOTS=alarmCWOTS, alarmHeater=alarmHeater, alarmHeat2Hours=alarmHeat2Hours, smHeatSetp=smHeatSetp, alarmRoomLH=alarmRoomLH, alarmHP1=alarmHP1, alarmHWS=alarmHWS, alarmAirFlow=alarmAirFlow, resetStH1=resetStH1, unitNoAnswerCounterGroup=unitNoAnswerCounterGroup, ssh2=ssh2, alarmHum=alarmHum, alarmC2Hours=alarmC2Hours, dtAutChgMLT=dtAutChgMLT, smDehumSetp=smDehumSetp, unit1_ErrorChecksumCounter=unit1_ErrorChecksumCounter, alarmFilter=alarmFilter, lowPdelay=lowPdelay, unit1_NoAnswerCounter=unit1_NoAnswerCounter, thAlarmdelay=thAlarmdelay, alarmGeneral=alarmGeneral, alarmRoomHH=alarmRoomHH, alarmUnitHours=alarmUnitHours, evapTemp2=evapTemp2, agentRelease=agentRelease, alarmCWDHT=alarmCWDHT, alarmB=alarmB, alarmFilterHours=alarmFilterHours, resetStC4=resetStC4, instruments=instruments, alarmPSE=alarmPSE, alarmHUPL=alarmHUPL, sleepmode=sleepmode, compr3WorkH=compr3WorkH, compr4WorkH=compr4WorkH, resetStH2=resetStH2, ssh1=ssh1, analogObjects=analogObjects, heat2SetP=heat2SetP, suctTemp1=suctTemp1, systm=systm, radcoolSpDX=radcoolSpDX, alarmC=alarmC, resetAlarm=resetAlarm, systemOn=systemOn, alarmC4Hours=alarmC4Hours, unit1_SoftwareRelease=unit1_SoftwareRelease, unitCodeGroup=unitCodeGroup, coolRamp=coolRamp, alarmC3Hours=alarmC3Hours)
