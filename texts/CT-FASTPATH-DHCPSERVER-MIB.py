#
# PySNMP MIB module CT-FASTPATH-DHCPSERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CT-FASTPATH-DHCPSERVER-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:39:04 2024
# On host fv-az1210-277 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ctDhcpServerExpMib, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctDhcpServerExpMib")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, NotificationType, Counter64, MibIdentifier, ModuleIdentity, Counter32, TimeTicks, IpAddress, iso, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "NotificationType", "Counter64", "MibIdentifier", "ModuleIdentity", "Counter32", "TimeTicks", "IpAddress", "iso", "Bits", "Gauge32")
PhysAddress, TextualConvention, TruthValue, RowStatus, MacAddress, RowPointer, DisplayString, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "TruthValue", "RowStatus", "MacAddress", "RowPointer", "DisplayString", "StorageType")
ctFastPathDHCPServerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1))
if mibBuilder.loadTexts: ctFastPathDHCPServerMIB.setLastUpdated('200601161932Z')
if mibBuilder.loadTexts: ctFastPathDHCPServerMIB.setOrganization('Enterasys Networks, Inc.')
if mibBuilder.loadTexts: ctFastPathDHCPServerMIB.setContactInfo('Postal:  Enterasys Networks\n                  50 Minuteman Rd.\n                  Andover, MA 01810-1008\n                  USA\n         Phone:   +1 978 684 1000\n         E-mail:  support@enterasys.com\n         WWW:     http://www.enterasys.com')
if mibBuilder.loadTexts: ctFastPathDHCPServerMIB.setDescription('The Enterasys MIB for FASTPATH DHCP Server')
ctAgentDhcpServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1))
ctAgentDhcpServerAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerAdminMode.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerAdminMode.setDescription(' Admin-mode of the DHCP Server.')
ctAgentDhcpServerPingPktNos = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 10), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPingPktNos.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPingPktNos.setDescription(' The no. of packets a DHCP Server sends to a pool address as part of a ping operation.Setting the value of ping-packets to zero turns off DHCP Server ping operation .')
ctAgentDhcpServerAutomaticBindingsNos = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerAutomaticBindingsNos.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerAutomaticBindingsNos.setDescription(' The no. of IP addresses that have been assigned automatically.')
ctAgentDhcpServerExpiredBindingsNos = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerExpiredBindingsNos.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerExpiredBindingsNos.setDescription(' The no. of expired leases.')
ctAgentDhcpServerMalformedMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerMalformedMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerMalformedMessagesReceived.setDescription(' The no. of malformed(truncated or corrupt) messages that have been received by the DHCP server.')
ctAgentDhcpServerDISCOVERMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerDISCOVERMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerDISCOVERMessagesReceived.setDescription(' The no. of DHCP messages of type DHCPDISCOVER that have been received by the DHCP server.')
ctAgentDhcpServerREQUESTMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerREQUESTMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerREQUESTMessagesReceived.setDescription(' The no. of DHCP messages of type DHCPREQUEST that have been received by the DHCP server.')
ctAgentDhcpServerDECLINEMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerDECLINEMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerDECLINEMessagesReceived.setDescription(' The no. of DHCP messages of type DHCPDECLINE that have been received by the DHCP server.')
ctAgentDhcpServerRELEASEMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerRELEASEMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerRELEASEMessagesReceived.setDescription(' The no. of DHCP messages of type DHCPRELEASE that have been received by the DHCP server.')
ctAgentDhcpServerINFORMMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerINFORMMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerINFORMMessagesReceived.setDescription(' The no. of DHCP messages of type DHCPINFORM that have been received by the DHCP server.')
ctAgentDhcpServerOFFERMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerOFFERMessagesSent.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerOFFERMessagesSent.setDescription(' The no. of DHCP messages of type DHCPOFFER that have been sent by the DHCP server.')
ctAgentDhcpServerACKMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerACKMessagesSent.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerACKMessagesSent.setDescription(' The no. of DHCP messages of type DHCPACK that have been sent by the DHCP server.')
ctAgentDhcpServerNAKMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerNAKMessagesSent.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerNAKMessagesSent.setDescription(' The no. of DHCP messages of type DHCPNAK that have been sent by the DHCP server.')
ctAgentDhcpServerClearStatistics = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerClearStatistics.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerClearStatistics.setDescription(' Clears the DHCP server statistics.')
ctAgentDhcpServerBootpAutomatic = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerBootpAutomatic.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerBootpAutomatic.setDescription('Used to enable or disable autmatic address allocation to bootp clients from dynamic address pools.')
ctAgentDhcpServerPoolConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2))
ctAgentDhcpServerPoolNameCreate = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 31), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolNameCreate.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolNameCreate.setDescription('A pool is created by applying write operation\n                      on this MIB object and providing a new pool-name.\n                      Get operation on this MIB object returns a\n                      null-value, as for the purpose of viewing the\n                      pool name, the user should perform the\n                      traversal of ctAgentDhcpServerPoolConfigTable.\n                      For this reason the get operation on object\n                      ctAgentDhcpServerPoolNameCreate becomes insignificant.')
ctAgentDhcpServerPoolConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 2), )
if mibBuilder.loadTexts: ctAgentDhcpServerPoolConfigTable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolConfigTable.setDescription('A table of the DHCP Server Pool configuration entries.')
ctAgentDhcpServerPoolConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 2, 1), ).setIndexNames((0, "CT-FASTPATH-DHCPSERVER-MIB", "ctAgentDhcpServerPoolIndex"))
if mibBuilder.loadTexts: ctAgentDhcpServerPoolConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolConfigEntry.setDescription('Represents entry for a Dhcp server pool.')
ctAgentDhcpServerPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolIndex.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolIndex.setDescription("The Pool Index, which 'll be used as index for the PoolConfig Table.")
ctAgentDhcpServerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolName.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolName.setDescription('The name of the DHCP Address pool. This value cannot be modified')
ctAgentDhcpServerPoolDefRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolDefRouter.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolDefRouter.setDescription("This specifies the default-router list(each default-router is\n                      separated by comma and the list is terminated by semi-colon) for a DHCP client,\n                      an example would be 10.10.1.1,192.168.36.1,157.227.44.1;(no spaces in between).User should enter  a 'null' or 'NULL' string to remove current default-router list.")
ctAgentDhcpServerPoolDNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolDNSServer.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolDNSServer.setDescription("This specifies the DNS IP servers(each DNS IP server is\n                      separated by comma and the list is terminated by semi-colon) for a DHCP client,\n                      an example would be 10.10.1.1,192.168.36.1,157.227.44.1;(no spaces in between).User should enter  a 'null' or 'NULL' string to remove current default-router list.")
ctAgentDhcpServerPoolLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolLeaseTime.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolLeaseTime.setDescription('This specifies the duration of the lease(in minutes) for an IP address that is assigened from a\n                      DHCP server to a DHCP client. For infinite leases, lease-time value will be set to\n                      86400.')
ctAgentDhcpServerPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("un-allocated", 0), ("dynamic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolType.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolType.setDescription('This specifies the type of the binding that is associated with this pool.')
ctAgentDhcpServerPoolNetbiosNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolNetbiosNameServer.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolNetbiosNameServer.setDescription("This specifies the IP address-list of Net BIOS name-servers that are \n                       available to DHCP clients\n                       (each IP address in this list is\n                       separated by comma and the list is terminated by semi-colon),\n                       an example would be 10.10.1.1,192.168.36.1,157.227.44.1;(no spaces in between).User should enter  a 'null' or 'NULL' string to remove current Net BIOS name-server list.")
ctAgentDhcpServerPoolNetbiosNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("none", 0), ("b-node", 1), ("p-node", 2), ("m-node", 4), ("h-node", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolNetbiosNodeType.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolNetbiosNodeType.setDescription("This specifies the NetBIOS node-type for DHCP clients. 'none' is shown if \n                       node-type is not set to any of the four values.")
ctAgentDhcpServerPoolNextServer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolNextServer.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolNextServer.setDescription('This configures the next server in the boot-process of a DHCP clients.User should enter zero(0.0.0.0) to remove the current Next-server address')
ctAgentDhcpServerPoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolDomainName.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolDomainName.setDescription("This specifies the domain-name for a DHCP client. User should enter a 'null' or 'NULL' string to remove specified domain-name.")
ctAgentDhcpServerPoolBootfile = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolBootfile.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolBootfile.setDescription("This specifies the name of the default boot image for a DHCP client.User should enter a 'null' or 'NULL' string to remove specified bootfile name.")
ctAgentDhcpServerPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 2, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolRowStatus.setDescription("The row status variable is used according to installation\n          and removal conventions for conceptual rows. When a pool is created by applying write\n          operation on 'ctAgentDhcpServerPoolCreateName',row-status becomes 'active'. If row-status for\n          a poolEntry is set to 'destroy', the corresponding pool gets deleted. ")
ctAgentDhcpServerPoolAllocationTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 3), )
if mibBuilder.loadTexts: ctAgentDhcpServerPoolAllocationTable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolAllocationTable.setDescription("A table of the DHCP Server's pool entries, showing the binding(dynamic/manual)\n                      specific parameters.")
ctAgentDhcpServerPoolAllocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 3, 1), )
ctAgentDhcpServerPoolConfigEntry.registerAugmentions(("CT-FASTPATH-DHCPSERVER-MIB", "ctAgentDhcpServerPoolAllocationEntry"))
ctAgentDhcpServerPoolAllocationEntry.setIndexNames(*ctAgentDhcpServerPoolConfigEntry.getIndexNames())
if mibBuilder.loadTexts: ctAgentDhcpServerPoolAllocationEntry.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolAllocationEntry.setDescription("Represents entry for a Dhcp server's allocation pool.")
ctAgentDhcpServerPoolAllocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolAllocationName.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolAllocationName.setDescription('This specifies name of the DHCP Address pool having dynamic binding.\n                      This value is same as ctAgentDhcpServerPoolName of the\nctAgentDhcpServerPoolConfigTable.')
ctAgentDhcpServerDynamicPoolIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerDynamicPoolIpAddress.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerDynamicPoolIpAddress.setDescription("The IP address of the  DHCP Address pool.\n                      The IP address must be set before setting the IP Mask or IP Prefix Length.\n                      After setting IP address, network -mask, or IP Prefix length must be set in order to change the pool type to dynamic.\n                      This value shows 0.0.0.0, if the binding type is 'un-allocated',or,'manual'.")
ctAgentDhcpServerDynamicPoolIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerDynamicPoolIpMask.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerDynamicPoolIpMask.setDescription("The bit-combination that renders which portion of the address of the DHCP\n                      address pool refers to the network or subnet and which part refers to the host.The IP address must have been set before.\n                      This value shows 0.0.0.0, if the binding type is 'un-allocated',or,'manual'.")
ctAgentDhcpServerDynamicPoolIpPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerDynamicPoolIpPrefixLength.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerDynamicPoolIpPrefixLength.setDescription("This specifies the no. of bits that comprise the address-prefix.\n                      The prefix is an alternative way of specifying the network-mask of the client.The IP address must have been set before.\n                      This value shows 0, if the binding type is 'un-allocated',or,'mnaual'.")
ctAgentDhcpServerPoolAllocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("un-allocated", 0), ("dynamic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolAllocationType.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolAllocationType.setDescription('This specifies the type of the binding that is associated with this pool.')
ctAgentDhcpServerManualPoolClientIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerManualPoolClientIdentifier.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerManualPoolClientIdentifier.setDescription("It specifies the unique identifier (in colon separated hexadecimal format)\n                      of a DHCP client. It is valid for manual bindings only.\n                      It displays 'unconfigured',if the binding type is 'un-allocated',or,'dynamic'.\n                      To set this object, input should be 7 octets long with the hardware\n                      type in the first octet.")
ctAgentDhcpServerManualPoolClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerManualPoolClientName.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerManualPoolClientName.setDescription("It specifies the name of a DHCP client.\n                     Client name should't include domain-name.\n                     It displays 'unconfigured',if the binding type is 'un-allocated',or,'dynamic'. ")
ctAgentDhcpServerManualPoolClientHWAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerManualPoolClientHWAddr.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerManualPoolClientHWAddr.setDescription("It specifies the hardware-address of a DHCP client. It is valid for manual bindings only.\n                      It displays 'unconfigured',if the binding type is 'un-allocated',or,'dynamic'.\n                      After hardware-address, hardware-type will be configured.")
ctAgentDhcpServerManualPoolClientHWType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee802", 6))).clone('ethernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerManualPoolClientHWType.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerManualPoolClientHWType.setDescription("It specifies the hardware-type of a DHCP client. It is valid for manual bindings only.\n                      It displays 'unconfigured',if the binding type is 'un-allocated',or,'dynamic'.\n                      Before this, hardware-address must be configured.")
ctAgentDhcpServerManualPoolIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 3, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerManualPoolIpAddress.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerManualPoolIpAddress.setDescription("The IP address of the  DHCP Address pool for manual binding.\n                     The IP address must be set before setting the IP Mask or IP Prefix Length.After setting IP address, network -mask, or IP Prefix length must be set in order to change the pool type to dynamic.\n                     This value shows 0.0.0.0, if the binding type is 'un-allocated',or,'dynamic'.")
ctAgentDhcpServerManualPoolIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 3, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerManualPoolIpMask.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerManualPoolIpMask.setDescription("The bit-combination that renders which portion of the address of the DHCP\n                      address pool for a manual binding refers to the network or subnet and which part refers to the host.\n                      The IP address must have been set before.\n                      This value shows 0.0.0.0, if the binding type is 'un-allocated',or,'dynamic'.")
ctAgentDhcpServerManualPoolIpPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 3, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerManualPoolIpPrefixLength.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerManualPoolIpPrefixLength.setDescription("This specifies the no. of bits that comprise the address-prefix.\n                      The prefix is an alternative way of specifying the network-mask of the client.The IP address must have been set before.\n                      This value shows 0, if the binding type is 'un-allocated',or,'dynamic'.")
ctAgentDhcpServerExcludedAddressRangeCreate = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerExcludedAddressRangeCreate.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerExcludedAddressRangeCreate.setDescription("It sets the IP address-ranges(from low to high) that a\n                      DHCP server should not assign to DHCP clients. Each time \n                      this MIB object is set successfully, one excluded range \n                      of IP address will be set.\n                      It is given in format - start and end IP address \n                      separated by '-' and terminated by ';'.\n                      One example would be - 192.168.36.1-200.1.1.1;  .\n                      This sets one excluded range of IP address,which\n                      starts at 192.168.36.1 and ends at 200.1.1.1. \n                      If only start IP address is given,\n                      end IP address is assumed to be equal to the start IP\n                      address. Get operation on this MIB object returns a \n                      null-value, as for the purpose of viewing the \n                      exclude-address ranges, the user should perform the \n                      traversal of ctAgentDhcpServerExcludedAddressRangeTable.\n                      For this reason the get operation on object \n                ctAgentDhcpServerExcludedAddressRangeCreate becomes insignificant.")
ctAgentDhcpServerExcludedAddressRangeTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 5), )
if mibBuilder.loadTexts: ctAgentDhcpServerExcludedAddressRangeTable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerExcludedAddressRangeTable.setDescription('A table of the DHCP Server Pool configuration entries.')
ctAgentDhcpServerExcludedAddressRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 5, 1), ).setIndexNames((0, "CT-FASTPATH-DHCPSERVER-MIB", "ctAgentDhcpServerExcludedRangeIndex"))
if mibBuilder.loadTexts: ctAgentDhcpServerExcludedAddressRangeEntry.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerExcludedAddressRangeEntry.setDescription('Represents entry for a Dhcp server excluded address range table.')
ctAgentDhcpServerExcludedRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerExcludedRangeIndex.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerExcludedRangeIndex.setDescription('This specifies the index of the excluded IP address-range table.')
ctAgentDhcpServerExcludedStartIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerExcludedStartIpAddress.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerExcludedStartIpAddress.setDescription('This specifies the starting IP address of the excluded address-range.')
ctAgentDhcpServerExcludedEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerExcludedEndIpAddress.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerExcludedEndIpAddress.setDescription('This specifies the ending IP address of the excluded address-range.')
ctAgentDhcpServerExcludedAddressRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 5, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerExcludedAddressRangeStatus.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerExcludedAddressRangeStatus.setDescription('This specifies the row-status of the excluded address-range. Implemented values\n                      are - active(1) and destroy(6). For a valid range, the row-satus will return active(1).\n                      When it is set to destroy(6), the corresponding address-range is deleted.')
ctAgentDhcpServerPoolOptionCreate = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionCreate.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionCreate.setDescription("This sets the option for an existing DHCP Server pool. Here, it is required \n                      to enter the pool-index, for which option is to be set and \n                      the value of the DHCP option code in string-format : pool-index and option code \n                      separated by '-' and terminated by ';', one example would be -> 1-19; \n                      , 1 is the pool-index and 19 is the option code.  ")
ctAgentDhcpServerPoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 7), )
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionTable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionTable.setDescription('A table for configuring DHCP Server options.')
ctAgentDhcpServerPoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 7, 1), ).setIndexNames((0, "CT-FASTPATH-DHCPSERVER-MIB", "ctAgentDhcpServerPoolOptionIndex"), (0, "CT-FASTPATH-DHCPSERVER-MIB", "ctAgentDhcpServerPoolOptionCode"))
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionEntry.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionEntry.setDescription('Represents entry for a Dhcp server option table.')
ctAgentDhcpServerPoolOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionIndex.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionIndex.setDescription('The Pool Index alongwith option-code, acts as index for the DHCP Server Option table.\n                      ')
ctAgentDhcpServerPoolOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionCode.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionCode.setDescription('This specifies the DHCP option code. This alongwith pool-index acts as the index of the \n                      DHCP Server Option table.')
ctAgentDhcpServerOptionPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerOptionPoolName.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerOptionPoolName.setDescription('The name of the DHCP Address pool. This value cannot be modified')
ctAgentDhcpServerPoolOptionAsciiData = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 441))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionAsciiData.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionAsciiData.setDescription('This specifies an NVT ASCII character string. ASCII character strings \n                      that contain white space must be delimited by quotation marks. \n                      If an ascii optiondata is entered again, it gets concatenated with the \n                      previous ascii data.')
ctAgentDhcpServerPoolOptionHexData = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1324))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionHexData.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionHexData.setDescription("This specifies semi-colon separated hexadecimal data. Two hexadecimal digits \n                     in hexadecimal character string represents one byte . Hexadecimal strings can \n                     be entered in the following formats :\n                      1) continuous hexadecimal digits like -- 0123456789abcdef\n                      2) hexadecimal digits separated by space ' ' -- 01 23 45 67 de 0f\n                      3) Two hexadecimal digits separated by delimeter ':' -- 01:02:a0 de:0f 78:5e \n                      4) Four hexadecimal digits separated by delimeter '.' -- 01ab.c0de.7865 \n                      If a Hex optiondata is entered again, it gets concatenated with the \n                      previous Hex data.")
ctAgentDhcpServerPoolOptionIpAddressData = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 7, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionIpAddressData.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionIpAddressData.setDescription('This specifies the IP-address list(each IP-address is\n                      separated by comma and the list is terminated by semi-colon) for a DHCP client,\n                      an example would be 10.10.1.1,192.168.36.1,157.227.44.1;(no spaces in between).\n                      If a IP option is entered again, it gets concatenated with the \n                      previous IP data.\n                      Maximum no. of IP addresses that can be entered at one time is 8.\n                      ')
ctAgentDhcpServerPoolOptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 2, 7, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionStatus.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerPoolOptionStatus.setDescription('This specifies the row-status of the DHCP Server Pool option.')
ctAgentDhcpServerLeaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 3))
ctAgentDhcpServerLeaseClearAllBindings = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseClearAllBindings.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseClearAllBindings.setDescription('Clears All the DHCP server bindings.')
ctAgentDhcpServerLeaseTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 3, 2), )
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseTable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseTable.setDescription("A table of the DHCP Server's Lease entries.")
ctAgentDhcpServerLeaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 3, 2, 1), ).setIndexNames((0, "CT-FASTPATH-DHCPSERVER-MIB", "ctAgentDhcpServerLeaseIPAddress"))
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseEntry.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseEntry.setDescription("Represents entry for a Dhcp server's leases.")
ctAgentDhcpServerLeaseIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseIPAddress.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseIPAddress.setDescription('This specifies the IP address leased to the client.')
ctAgentDhcpServerLeaseIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseIPMask.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseIPMask.setDescription('This specifies the IP mask of the address leased to the client.')
ctAgentDhcpServerLeaseHWAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 3, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseHWAddress.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseHWAddress.setDescription('This specifies the hardware address of the client.')
ctAgentDhcpServerLeaseRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 3, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseRemainingTime.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseRemainingTime.setDescription('This specifies the period for which the lease is valid. It is displayed in days, hours, minutes, and seconds.')
ctAgentDhcpServerLeaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseType.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseType.setDescription('This specifies the type of address lease as Automatic or Manual.')
ctAgentDhcpServerLeaseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 3, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseStatus.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerLeaseStatus.setDescription('This specifies the row-status of the address-lease. Implemented values\n                      are - active(1) and destroy(6). For a valid range, the row-satus will return active(1).\n                      When it is set to destroy(6), the corresponding address-lease is cleared.')
ctAgentDhcpServerAddressConflictGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 4))
ctAgentDhcpServerClearAllAddressConflicts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerClearAllAddressConflicts.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerClearAllAddressConflicts.setDescription('Clears all the address-conflicts found by DHCP server,when set to enable.')
ctAgentDhcpServerAddressConflictLogging = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerAddressConflictLogging.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerAddressConflictLogging.setDescription(' It is used to enable, or disables the logging of address-conflicts on a DHCP Server.')
ctAgentDhcpServerAddressConflictTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 4, 3), )
if mibBuilder.loadTexts: ctAgentDhcpServerAddressConflictTable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerAddressConflictTable.setDescription('A table of the conflicting-address entries.')
ctAgentDhcpServerAddressConflictEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 4, 3, 1), ).setIndexNames((0, "CT-FASTPATH-DHCPSERVER-MIB", "ctAgentDhcpServerAddressConflictIP"))
if mibBuilder.loadTexts: ctAgentDhcpServerAddressConflictEntry.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerAddressConflictEntry.setDescription('Represents a conflicting-address entry.')
ctAgentDhcpServerAddressConflictIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 4, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerAddressConflictIP.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerAddressConflictIP.setDescription('This specifies the conflicting IP address assigned to the client by DHCP server.')
ctAgentDhcpServerAddressConflictDetectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ping", 1), ("gratuitousArp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerAddressConflictDetectionType.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerAddressConflictDetectionType.setDescription('This specifies the address-conflict detection-method.')
ctAgentDhcpServerAddressConflictDetectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 4, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpServerAddressConflictDetectionTime.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerAddressConflictDetectionTime.setDescription('This specifies the sysUpTime at which the address-conflict was detected.')
ctAgentDhcpServerAddressConflictStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 32, 1, 4, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpServerAddressConflictStatus.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpServerAddressConflictStatus.setDescription('This specifies the row-status of the conflicting-address entry. Implemented values\n                      are - active(1) and destroy(6). For a valid range, the row-satus will return active(1).\n                      When it is set to destroy(6), the corresponding conflicting-address entry is cleared.')
mibBuilder.exportSymbols("CT-FASTPATH-DHCPSERVER-MIB", ctAgentDhcpServerLeaseRemainingTime=ctAgentDhcpServerLeaseRemainingTime, ctAgentDhcpServerPoolAllocationName=ctAgentDhcpServerPoolAllocationName, ctAgentDhcpServerDynamicPoolIpAddress=ctAgentDhcpServerDynamicPoolIpAddress, ctAgentDhcpServerPoolOptionStatus=ctAgentDhcpServerPoolOptionStatus, PYSNMP_MODULE_ID=ctFastPathDHCPServerMIB, ctAgentDhcpServerPoolNameCreate=ctAgentDhcpServerPoolNameCreate, ctAgentDhcpServerLeaseTable=ctAgentDhcpServerLeaseTable, ctAgentDhcpServerDynamicPoolIpPrefixLength=ctAgentDhcpServerDynamicPoolIpPrefixLength, ctAgentDhcpServerLeaseType=ctAgentDhcpServerLeaseType, ctAgentDhcpServerPoolLeaseTime=ctAgentDhcpServerPoolLeaseTime, ctAgentDhcpServerPoolNetbiosNodeType=ctAgentDhcpServerPoolNetbiosNodeType, ctAgentDhcpServerBootpAutomatic=ctAgentDhcpServerBootpAutomatic, ctAgentDhcpServerPoolType=ctAgentDhcpServerPoolType, ctFastPathDHCPServerMIB=ctFastPathDHCPServerMIB, ctAgentDhcpServerPoolAllocationEntry=ctAgentDhcpServerPoolAllocationEntry, ctAgentDhcpServerRELEASEMessagesReceived=ctAgentDhcpServerRELEASEMessagesReceived, ctAgentDhcpServerNAKMessagesSent=ctAgentDhcpServerNAKMessagesSent, ctAgentDhcpServerOFFERMessagesSent=ctAgentDhcpServerOFFERMessagesSent, ctAgentDhcpServerPingPktNos=ctAgentDhcpServerPingPktNos, ctAgentDhcpServerLeaseEntry=ctAgentDhcpServerLeaseEntry, ctAgentDhcpServerPoolConfigEntry=ctAgentDhcpServerPoolConfigEntry, ctAgentDhcpServerPoolName=ctAgentDhcpServerPoolName, ctAgentDhcpServerPoolOptionCode=ctAgentDhcpServerPoolOptionCode, ctAgentDhcpServerManualPoolClientName=ctAgentDhcpServerManualPoolClientName, ctAgentDhcpServerManualPoolIpPrefixLength=ctAgentDhcpServerManualPoolIpPrefixLength, ctAgentDhcpServerOptionPoolName=ctAgentDhcpServerOptionPoolName, ctAgentDhcpServerPoolOptionIndex=ctAgentDhcpServerPoolOptionIndex, ctAgentDhcpServerAddressConflictLogging=ctAgentDhcpServerAddressConflictLogging, ctAgentDhcpServerAddressConflictIP=ctAgentDhcpServerAddressConflictIP, ctAgentDhcpServerAutomaticBindingsNos=ctAgentDhcpServerAutomaticBindingsNos, ctAgentDhcpServerAddressConflictDetectionType=ctAgentDhcpServerAddressConflictDetectionType, ctAgentDhcpServerLeaseClearAllBindings=ctAgentDhcpServerLeaseClearAllBindings, ctAgentDhcpServerPoolOptionIpAddressData=ctAgentDhcpServerPoolOptionIpAddressData, ctAgentDhcpServerExcludedAddressRangeStatus=ctAgentDhcpServerExcludedAddressRangeStatus, ctAgentDhcpServerExcludedRangeIndex=ctAgentDhcpServerExcludedRangeIndex, ctAgentDhcpServerPoolOptionTable=ctAgentDhcpServerPoolOptionTable, ctAgentDhcpServerPoolOptionCreate=ctAgentDhcpServerPoolOptionCreate, ctAgentDhcpServerPoolDNSServer=ctAgentDhcpServerPoolDNSServer, ctAgentDhcpServerDISCOVERMessagesReceived=ctAgentDhcpServerDISCOVERMessagesReceived, ctAgentDhcpServerPoolNetbiosNameServer=ctAgentDhcpServerPoolNetbiosNameServer, ctAgentDhcpServerLeaseGroup=ctAgentDhcpServerLeaseGroup, ctAgentDhcpServerDECLINEMessagesReceived=ctAgentDhcpServerDECLINEMessagesReceived, ctAgentDhcpServerClearStatistics=ctAgentDhcpServerClearStatistics, ctAgentDhcpServerPoolDefRouter=ctAgentDhcpServerPoolDefRouter, ctAgentDhcpServerClearAllAddressConflicts=ctAgentDhcpServerClearAllAddressConflicts, ctAgentDhcpServerLeaseIPAddress=ctAgentDhcpServerLeaseIPAddress, ctAgentDhcpServerManualPoolIpAddress=ctAgentDhcpServerManualPoolIpAddress, ctAgentDhcpServerPoolOptionEntry=ctAgentDhcpServerPoolOptionEntry, ctAgentDhcpServerManualPoolIpMask=ctAgentDhcpServerManualPoolIpMask, ctAgentDhcpServerINFORMMessagesReceived=ctAgentDhcpServerINFORMMessagesReceived, ctAgentDhcpServerExcludedAddressRangeTable=ctAgentDhcpServerExcludedAddressRangeTable, ctAgentDhcpServerExcludedAddressRangeEntry=ctAgentDhcpServerExcludedAddressRangeEntry, ctAgentDhcpServerREQUESTMessagesReceived=ctAgentDhcpServerREQUESTMessagesReceived, ctAgentDhcpServerPoolConfigGroup=ctAgentDhcpServerPoolConfigGroup, ctAgentDhcpServerExcludedStartIpAddress=ctAgentDhcpServerExcludedStartIpAddress, ctAgentDhcpServerGroup=ctAgentDhcpServerGroup, ctAgentDhcpServerPoolDomainName=ctAgentDhcpServerPoolDomainName, ctAgentDhcpServerPoolAllocationType=ctAgentDhcpServerPoolAllocationType, ctAgentDhcpServerPoolConfigTable=ctAgentDhcpServerPoolConfigTable, ctAgentDhcpServerACKMessagesSent=ctAgentDhcpServerACKMessagesSent, ctAgentDhcpServerDynamicPoolIpMask=ctAgentDhcpServerDynamicPoolIpMask, ctAgentDhcpServerPoolIndex=ctAgentDhcpServerPoolIndex, ctAgentDhcpServerLeaseIPMask=ctAgentDhcpServerLeaseIPMask, ctAgentDhcpServerAddressConflictTable=ctAgentDhcpServerAddressConflictTable, ctAgentDhcpServerManualPoolClientHWType=ctAgentDhcpServerManualPoolClientHWType, ctAgentDhcpServerExpiredBindingsNos=ctAgentDhcpServerExpiredBindingsNos, ctAgentDhcpServerAddressConflictDetectionTime=ctAgentDhcpServerAddressConflictDetectionTime, ctAgentDhcpServerMalformedMessagesReceived=ctAgentDhcpServerMalformedMessagesReceived, ctAgentDhcpServerPoolAllocationTable=ctAgentDhcpServerPoolAllocationTable, ctAgentDhcpServerPoolOptionHexData=ctAgentDhcpServerPoolOptionHexData, ctAgentDhcpServerPoolRowStatus=ctAgentDhcpServerPoolRowStatus, ctAgentDhcpServerManualPoolClientIdentifier=ctAgentDhcpServerManualPoolClientIdentifier, ctAgentDhcpServerLeaseStatus=ctAgentDhcpServerLeaseStatus, ctAgentDhcpServerLeaseHWAddress=ctAgentDhcpServerLeaseHWAddress, ctAgentDhcpServerManualPoolClientHWAddr=ctAgentDhcpServerManualPoolClientHWAddr, ctAgentDhcpServerPoolBootfile=ctAgentDhcpServerPoolBootfile, ctAgentDhcpServerAdminMode=ctAgentDhcpServerAdminMode, ctAgentDhcpServerExcludedAddressRangeCreate=ctAgentDhcpServerExcludedAddressRangeCreate, ctAgentDhcpServerExcludedEndIpAddress=ctAgentDhcpServerExcludedEndIpAddress, ctAgentDhcpServerAddressConflictGroup=ctAgentDhcpServerAddressConflictGroup, ctAgentDhcpServerAddressConflictEntry=ctAgentDhcpServerAddressConflictEntry, ctAgentDhcpServerPoolNextServer=ctAgentDhcpServerPoolNextServer, ctAgentDhcpServerAddressConflictStatus=ctAgentDhcpServerAddressConflictStatus, ctAgentDhcpServerPoolOptionAsciiData=ctAgentDhcpServerPoolOptionAsciiData)
