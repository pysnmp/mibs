#
# PySNMP MIB module VERTIV-V5-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/vertiv/VERTIV-V5-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 10:06:16 2024
# On host fv-az1427-100 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, enterprises, ModuleIdentity, IpAddress, Integer32, Counter32, Counter64, MibIdentifier, TimeTicks, Gauge32, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "enterprises", "ModuleIdentity", "IpAddress", "Integer32", "Counter32", "Counter64", "MibIdentifier", "TimeTicks", "Gauge32", "Unsigned32", "NotificationType")
MacAddress, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "TruthValue", "DisplayString")
vertiv = ModuleIdentity((1, 3, 6, 1, 4, 1, 21239))
vertiv.setRevisions(('2020-01-07 00:00', '2019-09-30 00:00', '2019-09-12 00:00', '2019-08-30 00:00', '2019-06-06 00:00', '2019-05-07 00:00', '2019-04-30 00:00', '2019-03-07 00:00', '2018-01-19 00:00', '2017-09-19 00:00', '2017-08-10 00:00', '2017-05-10 00:00', '2017-04-05 00:00', '2016-06-30 00:00', '2012-09-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: vertiv.setRevisionsDescriptions(('Updates for VRC spec change', 'Added hostname, alarm/warning count, and manufacturer to deviceInfo', 'Added SN-2D door switch sensor', 'Removed current min, max, and peak fields from pdu phase, line,\n\t\tbreaker, and outlet tables\n\t\tRemoved voltage min, max, and peak fields from pdu phase, line,\n\t\tbreaker, and outlet tables\n\t\tRemoved minmax reset value from pduOutletMeterReset\n\t\tAdded balance field to pdu phase table', 'Updated pduOutletSwitchControl description', 'Changed productMacAddress type to MacAddress', 'Added remote humidity-only sensor', 'Added VRC support', 'Modified pduOutletSwitchTable to support outlet actions with delays', 'Changed SYNTAX of objects, with a UTF-8 encoded string value, to\n\t\tSnmpAdminString', 'Added pduBreakerCurrentPeak, pduLineCurrentPeak,\n\t\tpduOutletMeterCurrentPeak, pduPhaseVoltagePeak, and\n\t\tpduPhaseCurrentPeak\n\t\tUpdated object descriptions, indicating which fields are not supported\n\t\ton all platforms', 'Added trapObj group with trap payload objects\n\t\tAdded additional payload objects to trap definitions', 'Added productPlatform to deviceInfo group\n\t\tAdded product identity entries', 'Raven version', 'Original version',))
if mibBuilder.loadTexts: vertiv.setLastUpdated('202001070000Z')
if mibBuilder.loadTexts: vertiv.setOrganization('Vertiv')
if mibBuilder.loadTexts: vertiv.setContactInfo('support@geistglobal.com')
if mibBuilder.loadTexts: vertiv.setDescription('The MIB for Vertiv products')
v5 = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5))
imd = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2))
deviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1))
productTitle = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productTitle.setStatus('current')
if mibBuilder.loadTexts: productTitle.setDescription('Product name')
productVersion = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVersion.setStatus('current')
if mibBuilder.loadTexts: productVersion.setDescription('Product version')
productFriendlyName = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFriendlyName.setStatus('current')
if mibBuilder.loadTexts: productFriendlyName.setDescription('User-assigned name')
productMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productMacAddress.setStatus('current')
if mibBuilder.loadTexts: productMacAddress.setDescription("Product's unique MAC address")
deviceCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCount.setStatus('current')
if mibBuilder.loadTexts: deviceCount.setDescription('Total number of devices on unit')
temperatureUnits = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahrenheit", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureUnits.setStatus('current')
if mibBuilder.loadTexts: temperatureUnits.setDescription('Current units for temperature/dewpoint values:\n\t\t0 = Degrees Fahrenheit\n\t\t1 = Degrees Celsius')
productModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productModelNumber.setStatus('current')
if mibBuilder.loadTexts: productModelNumber.setDescription('Product model number (factory-assigned)')
productPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productPartNumber.setStatus('current')
if mibBuilder.loadTexts: productPartNumber.setDescription('Product part number (factory-assigned)')
productSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSerialNumber.setStatus('current')
if mibBuilder.loadTexts: productSerialNumber.setDescription('Product serial number (factory-assigned)')
productPlatform = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productPlatform.setStatus('current')
if mibBuilder.loadTexts: productPlatform.setDescription('Product platform')
productHostname = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productHostname.setStatus('current')
if mibBuilder.loadTexts: productHostname.setDescription('Product hostname')
productAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productAlarmCount.setStatus('current')
if mibBuilder.loadTexts: productAlarmCount.setDescription('Number of alarms currently tripped')
productWarnCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productWarnCount.setStatus('current')
if mibBuilder.loadTexts: productWarnCount.setDescription('Number of warnings currently tripped')
productManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productManufacturer.setStatus('current')
if mibBuilder.loadTexts: productManufacturer.setDescription('Product manufacturer')
pdu = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3))
pduMainTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1), )
if mibBuilder.loadTexts: pduMainTable.setStatus('current')
if mibBuilder.loadTexts: pduMainTable.setDescription('PDU general information')
pduMainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "pduMainIndex"))
if mibBuilder.loadTexts: pduMainEntry.setStatus('current')
if mibBuilder.loadTexts: pduMainEntry.setDescription('Entry in the pduMainTable table: each entry contains an index\n\t\tand other sensor details')
pduMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: pduMainIndex.setStatus('current')
if mibBuilder.loadTexts: pduMainIndex.setDescription('Table entry index value')
pduMainSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduMainSerial.setStatus('current')
if mibBuilder.loadTexts: pduMainSerial.setDescription('Serial number')
pduMainName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduMainName.setStatus('current')
if mibBuilder.loadTexts: pduMainName.setDescription('PDU name (factory-assigned)')
pduMainLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduMainLabel.setStatus('current')
if mibBuilder.loadTexts: pduMainLabel.setDescription('PDU label (user-defined)')
pduMainAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduMainAvail.setStatus('current')
if mibBuilder.loadTexts: pduMainAvail.setDescription('Device availability:\n\t\t0 = Unavailable\n\t\t1 = Available\n\t\t2 = Partially Unavailable')
pduMeterType = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wye", 0), ("delta", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduMeterType.setStatus('current')
if mibBuilder.loadTexts: pduMeterType.setDescription('Current meter type:\n\t\t0 = Wye\n\t\t1 = Delta')
pduTotalName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTotalName.setStatus('current')
if mibBuilder.loadTexts: pduTotalName.setDescription('Total name (factory-assigned)')
pduTotalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduTotalLabel.setStatus('current')
if mibBuilder.loadTexts: pduTotalLabel.setDescription('Total label (user-defined)')
pduTotalRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTotalRealPower.setStatus('current')
if mibBuilder.loadTexts: pduTotalRealPower.setDescription('PDU total real power')
pduTotalApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('volt-amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTotalApparentPower.setStatus('current')
if mibBuilder.loadTexts: pduTotalApparentPower.setDescription('PDU total apparent power')
pduTotalPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTotalPowerFactor.setStatus('current')
if mibBuilder.loadTexts: pduTotalPowerFactor.setDescription('PDU total power factor')
pduTotalEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 1, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999000))).setUnits('watt-hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduTotalEnergy.setStatus('current')
if mibBuilder.loadTexts: pduTotalEnergy.setDescription('PDU total accumulated energy in watt-hours')
pduPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2), )
if mibBuilder.loadTexts: pduPhaseTable.setStatus('current')
if mibBuilder.loadTexts: pduPhaseTable.setDescription('PDU phases information')
pduPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "pduPhaseIndex"))
if mibBuilder.loadTexts: pduPhaseEntry.setStatus('current')
if mibBuilder.loadTexts: pduPhaseEntry.setDescription('Entry in the pduPhaseTable table: each entry contains an index\n\t\tand other sensor details')
pduPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: pduPhaseIndex.setStatus('current')
if mibBuilder.loadTexts: pduPhaseIndex.setDescription('Table entry index value')
pduPhaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseName.setStatus('current')
if mibBuilder.loadTexts: pduPhaseName.setDescription('PDU phase name (factory-assigned)')
pduPhaseLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPhaseLabel.setStatus('current')
if mibBuilder.loadTexts: pduPhaseLabel.setDescription('PDU phase label (user-defined)')
pduPhaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3100))).setUnits('decivolts (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseVoltage.setStatus('current')
if mibBuilder.loadTexts: pduPhaseVoltage.setDescription('PDU phase voltage in tenths of a volt')
pduPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9900))).setUnits('centiamps (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseCurrent.setStatus('current')
if mibBuilder.loadTexts: pduPhaseCurrent.setDescription('PDU phase current reading in hundredths of an amp')
pduPhaseRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseRealPower.setStatus('current')
if mibBuilder.loadTexts: pduPhaseRealPower.setDescription('Real power for phase in watts')
pduPhaseApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('volt-amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseApparentPower.setStatus('current')
if mibBuilder.loadTexts: pduPhaseApparentPower.setDescription('Apparent power for phase in volt-amps')
pduPhasePowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 14), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhasePowerFactor.setStatus('current')
if mibBuilder.loadTexts: pduPhasePowerFactor.setDescription('Power factor for phase')
pduPhaseEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999000))).setUnits('watt-hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseEnergy.setStatus('current')
if mibBuilder.loadTexts: pduPhaseEnergy.setDescription('Accumulated energy for phase in watt-hours')
pduPhaseBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 17), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseBalance.setStatus('current')
if mibBuilder.loadTexts: pduPhaseBalance.setDescription('Phase balance as percent')
pduPhaseCurrentCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 2, 1, 19), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPhaseCurrentCrestFactor.setStatus('current')
if mibBuilder.loadTexts: pduPhaseCurrentCrestFactor.setDescription('Current crest factor for phase, in hundredths')
pduBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3), )
if mibBuilder.loadTexts: pduBreakerTable.setStatus('current')
if mibBuilder.loadTexts: pduBreakerTable.setDescription('PDU breaker information')
pduBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "pduBreakerIndex"))
if mibBuilder.loadTexts: pduBreakerEntry.setStatus('current')
if mibBuilder.loadTexts: pduBreakerEntry.setDescription('Entry in the pduBreakerTable table: each entry contains an index\n\t\tand other sensor details')
pduBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: pduBreakerIndex.setStatus('current')
if mibBuilder.loadTexts: pduBreakerIndex.setDescription('Table entry index value')
pduBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBreakerName.setStatus('current')
if mibBuilder.loadTexts: pduBreakerName.setDescription('PDU breaker name (factory-assigned)')
pduBreakerLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBreakerLabel.setStatus('current')
if mibBuilder.loadTexts: pduBreakerLabel.setDescription('PDU breaker label (user-defined)')
pduBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9900))).setUnits('centiamps (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBreakerCurrent.setStatus('current')
if mibBuilder.loadTexts: pduBreakerCurrent.setDescription('PDU breaker current reading in hundredths of an amp')
pduBreakerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3100))).setUnits('decivolts (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBreakerVoltage.setStatus('current')
if mibBuilder.loadTexts: pduBreakerVoltage.setDescription('PDU breaker voltage in tenths of a volt. This object may not exist on\n\t\tall platforms, due to hardware differences.')
pduBreakerRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBreakerRealPower.setStatus('current')
if mibBuilder.loadTexts: pduBreakerRealPower.setDescription('Real power for breaker in watts. This object may not exist on all\n\t\tplatforms, due to hardware differences.')
pduBreakerApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('volt-amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBreakerApparentPower.setStatus('current')
if mibBuilder.loadTexts: pduBreakerApparentPower.setDescription('Apparent power for breaker in volt-amps. This object may not exist on\n\t\tall platforms, due to hardware differences.')
pduBreakerPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 14), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBreakerPowerFactor.setStatus('current')
if mibBuilder.loadTexts: pduBreakerPowerFactor.setDescription('Power factor for breaker. This object may not exist on all platforms,\n\t\tdue to hardware differences.')
pduBreakerEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 3, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999000))).setUnits('watt-hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBreakerEnergy.setStatus('current')
if mibBuilder.loadTexts: pduBreakerEnergy.setDescription('Accumulated energy for breaker in watt-hours. This object may not\n\t\texist on all platforms, due to hardware differences.')
pduLineTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 4), )
if mibBuilder.loadTexts: pduLineTable.setStatus('current')
if mibBuilder.loadTexts: pduLineTable.setDescription('PDU line current information')
pduLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 4, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "pduLineIndex"))
if mibBuilder.loadTexts: pduLineEntry.setStatus('current')
if mibBuilder.loadTexts: pduLineEntry.setDescription('Entry in the pduLineTable table: each entry contains an index\n\t\tand other sensor details')
pduLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: pduLineIndex.setStatus('current')
if mibBuilder.loadTexts: pduLineIndex.setDescription('Table entry index value')
pduLineName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduLineName.setStatus('current')
if mibBuilder.loadTexts: pduLineName.setDescription('PDU line name (factory-assigned)')
pduLineLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduLineLabel.setStatus('current')
if mibBuilder.loadTexts: pduLineLabel.setDescription('PDU line label (user-defined)')
pduLineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 4, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9900))).setUnits('centiamps (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduLineCurrent.setStatus('current')
if mibBuilder.loadTexts: pduLineCurrent.setDescription('PDU line current reading in hundredths of an amp')
pduOutletSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5), )
if mibBuilder.loadTexts: pduOutletSwitchTable.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchTable.setDescription('Data, config and control for outlets with switching')
pduOutletSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "pduOutletSwitchIndex"))
if mibBuilder.loadTexts: pduOutletSwitchEntry.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchEntry.setDescription('Entry in the pduOutletSwitchTable table: each entry contains an index\n\t\tand other sensor details')
pduOutletSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: pduOutletSwitchIndex.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchIndex.setDescription('Table entry index value')
pduOutletSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchName.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchName.setDescription('PDU outlet name (factory-assigned)')
pduOutletSwitchLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchLabel.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchLabel.setDescription('PDU outlet label (user-defined)')
pduOutletSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("on2off", 3), ("off2on", 4), ("rebootOn", 5), ("rebootOff", 6), ("unavailable", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchState.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchState.setDescription('Switch state of the outlet:\n\t\t1 = Outlet is on\n\t\t2 = Outlet is off\n\t\t3 = Outlet is on, but will turn off after a delay\n\t\t4 = Outlet is off, but will turn on after a delay\n\t\t5 = Starting reboot cycle, outlet is on, but will go to the\n\t\trebootOff(6) state after a delay\n\t\t6 = Rebooting, outlet is off, but it will turn on after a delay\n\t\t7 = Cannot get outlet state')
pduOutletSwitchRelayFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchRelayFailure.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchRelayFailure.setDescription('Tells if the outlet relay has failed. In normal operation, the value\n\t\twill be false(2).')
pduOutletSwitchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cancel", 1), ("on", 2), ("onAfterDelay", 3), ("off", 4), ("offAfterDelay", 5), ("reboot", 6), ("rebootAfterDelay", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchControl.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchControl.setDescription('Used for manual control of the outlet. If the outlet is in manual\n\t\tmode, this field can be set to one of the following values:\n\t\t1 = Cancel pending operation\n\t\t2 = Turn outlet on\n\t\t3 = After delay (pduOutletSwitchOnDelay), turn outlet on\n\t\t4 = Turn outlet off\n\t\t5 = After delay (pduOutletSwitchOffDelay), turn outlet off\n\t\t6 = Reboot: turn off, delay (pduOutletSwitchRebootHoldDelay), turn\n\t\toutlet back on\n\t\t7 = After delay (pduOutletSwitchRebootDelay), reboot outlet\n\t\tWhen not in manual mode, setting this field will give an\n\t\tinconsistentValue error. Returns none(8) for all get requests.')
pduOutletSwitchTimeToAction = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletSwitchTimeToAction.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchTimeToAction.setDescription('Seconds until an outlet state change. The value of\n\t\tpduOutletSwitchState tells what state the outlet will be set, after\n\t\tthe delay.')
pduOutletSwitchOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchOnDelay.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchOnDelay.setDescription('Seconds to wait before powering on the outlet, during onAfterDelay(3)\n\t\toperation. Changing this value has no effect on pending actions.')
pduOutletSwitchOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchOffDelay.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchOffDelay.setDescription('Seconds to wait before powering off the outlet, during\n\t\toffAfterDelay(5) operation. Changing this value has no effect on\n\t\tpending actions.')
pduOutletSwitchRebootDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchRebootDelay.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchRebootDelay.setDescription('Seconds to wait before powering off the outlet, during\n\t\trebootAfterDelay(7) operation. Changing this value has no effect on\n\t\tpending actions. See pduOutletSwitchControl for more info.')
pduOutletSwitchRebootHoldDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchRebootHoldDelay.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchRebootHoldDelay.setDescription('Seconds to hold the outlet off, before powering on the outlet, during\n\t\trebootAfterDelay(7) operation. Changing this value has no effect on\n\t\tpending actions. See pduOutletSwitchControl for more info.')
pduOutletSwitchPoaAction = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("last", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchPoaAction.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchPoaAction.setDescription('The outlet is set to this state during power-up. The action can be\n\t\thave one the following values:\n\t\t1 = Outlet will be turned on\n\t\t2 = Outlet will stay off\n\t\t3 = Outlet will be set to last known state')
pduOutletSwitchPoaDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletSwitchPoaDelay.setStatus('current')
if mibBuilder.loadTexts: pduOutletSwitchPoaDelay.setDescription('Seconds to wait before setting the outlet to the\n\t\tpduOutletSwitchPoaAction state. The delay starts at power-up.')
pduOutletMeterTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6), )
if mibBuilder.loadTexts: pduOutletMeterTable.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterTable.setDescription('Metering data for outlets that support this feature')
pduOutletMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "pduOutletMeterIndex"))
if mibBuilder.loadTexts: pduOutletMeterEntry.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterEntry.setDescription('Entry in the pduOutletMeterTable table: each entry contains an index\n\t\tand other sensor details')
pduOutletMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: pduOutletMeterIndex.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterIndex.setDescription('Table entry index value')
pduOutletMeterName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeterName.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterName.setDescription('PDU outlet name (factory-assigned)')
pduOutletMeterLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletMeterLabel.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterLabel.setDescription('PDU outlet label (user-defined)')
pduOutletMeterVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3100))).setUnits('decivolts (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeterVoltage.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterVoltage.setDescription('PDU outlet voltage in tenths of a volt')
pduOutletMeterCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9900))).setUnits('centiamps (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeterCurrent.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterCurrent.setDescription('PDU outlet current reading in hundredths of an amp')
pduOutletMeterRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeterRealPower.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterRealPower.setDescription('Real power for outlet in watts')
pduOutletMeterApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('volt-amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeterApparentPower.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterApparentPower.setDescription('Apparent power for outlet in volt-amps')
pduOutletMeterPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 14), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeterPowerFactor.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterPowerFactor.setDescription('Power factor for outlet')
pduOutletMeterEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999000))).setUnits('watt-hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletMeterEnergy.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterEnergy.setDescription('Accumulated energy for outlet in watt-hours')
pduOutletMeterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8))).clone(namedValues=NamedValues(("resetEnergy", 1), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduOutletMeterReset.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterReset.setDescription('Used to reset energy. If read, the value is none(8). It can be set to\n\t\tresetEnergy(1), which sets outlet energy to 0')
pduOutletCurrentCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 3, 6, 1, 19), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutletCurrentCrestFactor.setStatus('current')
if mibBuilder.loadTexts: pduOutletCurrentCrestFactor.setDescription('Current crest factor for outlet, in hundredths')
tempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 4), )
if mibBuilder.loadTexts: tempSensorTable.setStatus('current')
if mibBuilder.loadTexts: tempSensorTable.setDescription('Remote Temperature (RT) sensor')
tempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 4, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "tempSensorIndex"))
if mibBuilder.loadTexts: tempSensorEntry.setStatus('current')
if mibBuilder.loadTexts: tempSensorEntry.setDescription('Entry in the tempSensorTable table: each entry contains an index\n\t\tand other sensor details')
tempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: tempSensorIndex.setStatus('current')
if mibBuilder.loadTexts: tempSensorIndex.setDescription('Table entry index value')
tempSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorSerial.setStatus('current')
if mibBuilder.loadTexts: tempSensorSerial.setDescription('Serial number')
tempSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensorLabel.setStatus('current')
if mibBuilder.loadTexts: tempSensorLabel.setDescription('User-defined label')
tempSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorAvail.setStatus('current')
if mibBuilder.loadTexts: tempSensorAvail.setDescription('Device availability:\n\t\t0 = Unavailable\n\t\t1 = Available\n\t\t2 = Partially Unavailable')
tempSensorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorTemp.setStatus('current')
if mibBuilder.loadTexts: tempSensorTemp.setDescription('Temperature in tenths of a degree. Units are given by temperatureUnits\n\t\tfield in deviceInfo.')
airFlowSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5), )
if mibBuilder.loadTexts: airFlowSensorTable.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorTable.setDescription('Remote Airflow, Humidity, Temperature and Dewpoint (AFHT3) Sensor')
airFlowSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "airFlowSensorIndex"))
if mibBuilder.loadTexts: airFlowSensorEntry.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorEntry.setDescription('Entry in the airFlowSensorTable table: each entry contains an index\n\t\tand other sensor details')
airFlowSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: airFlowSensorIndex.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorIndex.setDescription('Table entry index value')
airFlowSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorSerial.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorSerial.setDescription('Serial number')
airFlowSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFlowSensorLabel.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorLabel.setDescription('User-defined label')
airFlowSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorAvail.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorAvail.setDescription('Device availability:\n\t\t0 = Unavailable\n\t\t1 = Available\n\t\t2 = Partially Unavailable')
airFlowSensorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorTemp.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorTemp.setDescription('Temperature reading in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo.')
airFlowSensorFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorFlow.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorFlow.setDescription('Airflow reading. Still air will be less than 20, while rushing air\n\t\twill be around 100.')
airFlowSensorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorHumidity.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorHumidity.setDescription('Humidity reading')
airFlowSensorDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorDewPoint.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorDewPoint.setDescription('Dewpoint reading in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo.')
t3hdSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8), )
if mibBuilder.loadTexts: t3hdSensorTable.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorTable.setDescription('Remote Temperature x 3, Humidity and Dewpoint Sensor')
t3hdSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "t3hdSensorIndex"))
if mibBuilder.loadTexts: t3hdSensorEntry.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorEntry.setDescription('Entry in the t3hdSensorTable table: each entry contains an index\n\t\tand other sensor details')
t3hdSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: t3hdSensorIndex.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIndex.setDescription('Table entry index value')
t3hdSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorSerial.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorSerial.setDescription('Serial number')
t3hdSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t3hdSensorLabel.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorLabel.setDescription('User-defined label')
t3hdSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorAvail.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorAvail.setDescription('Device availability:\n\t\t0 = Unavailable\n\t\t1 = Available\n\t\t2 = Partially Unavailable')
t3hdSensorIntLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t3hdSensorIntLabel.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntLabel.setDescription('Internal label (user-defined)')
t3hdSensorIntTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntTemp.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntTemp.setDescription('Internal temperature in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo.')
t3hdSensorIntHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntHumidity.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntHumidity.setDescription('Internal humidity')
t3hdSensorIntDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntDewPoint.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntDewPoint.setDescription('Internal dewpoint in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo.')
t3hdSensorExtAAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtAAvail.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtAAvail.setDescription('External A status:\n\t\t0 = Unavailable\n\t\t1 = Available')
t3hdSensorExtALabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t3hdSensorExtALabel.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtALabel.setDescription('External A label (user-defined)')
t3hdSensorExtATemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtATemp.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtATemp.setDescription('External A temperature in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo.')
t3hdSensorExtBAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtBAvail.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtBAvail.setDescription('External B status:\n\t\t0 = Unavailable\n\t\t1 = Available')
t3hdSensorExtBLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t3hdSensorExtBLabel.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtBLabel.setDescription('External B label (user-defined)')
t3hdSensorExtBTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtBTemp.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtBTemp.setDescription('External B temperature in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo.')
thdSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9), )
if mibBuilder.loadTexts: thdSensorTable.setStatus('current')
if mibBuilder.loadTexts: thdSensorTable.setDescription('Remote Temperature, Humidity, and Dewpoint (THD) Sensor')
thdSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "thdSensorIndex"))
if mibBuilder.loadTexts: thdSensorEntry.setStatus('current')
if mibBuilder.loadTexts: thdSensorEntry.setDescription('Entry in the thdSensorTable table: each entry contains an index\n\t\tand other sensor details')
thdSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: thdSensorIndex.setStatus('current')
if mibBuilder.loadTexts: thdSensorIndex.setDescription('Table entry index value')
thdSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorSerial.setStatus('current')
if mibBuilder.loadTexts: thdSensorSerial.setDescription('Serial number')
thdSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thdSensorLabel.setStatus('current')
if mibBuilder.loadTexts: thdSensorLabel.setDescription('User-defined label')
thdSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorAvail.setStatus('current')
if mibBuilder.loadTexts: thdSensorAvail.setDescription('Device availability:\n\t\t0 = Unavailable\n\t\t1 = Available\n\t\t2 = Partially Unavailable')
thdSensorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorTemp.setStatus('current')
if mibBuilder.loadTexts: thdSensorTemp.setDescription('Temperature value in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo.')
thdSensorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorHumidity.setStatus('current')
if mibBuilder.loadTexts: thdSensorHumidity.setDescription('Humidity value')
thdSensorDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 2540))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorDewPoint.setStatus('current')
if mibBuilder.loadTexts: thdSensorDewPoint.setDescription('Dewpoint value in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo.')
a2dSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11), )
if mibBuilder.loadTexts: a2dSensorTable.setStatus('current')
if mibBuilder.loadTexts: a2dSensorTable.setDescription('Analog measurement (A2D) sensor (voltage, current, or dry-contact)')
a2dSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "a2dSensorIndex"))
if mibBuilder.loadTexts: a2dSensorEntry.setStatus('current')
if mibBuilder.loadTexts: a2dSensorEntry.setDescription('Entry in the a2dSensorTable table: each entry contains an index\n\t\tand other sensor details')
a2dSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: a2dSensorIndex.setStatus('current')
if mibBuilder.loadTexts: a2dSensorIndex.setDescription('Table entry index value')
a2dSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2dSensorSerial.setStatus('current')
if mibBuilder.loadTexts: a2dSensorSerial.setDescription('Serial number')
a2dSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorLabel.setStatus('current')
if mibBuilder.loadTexts: a2dSensorLabel.setDescription('User-defined label')
a2dSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2dSensorAvail.setStatus('current')
if mibBuilder.loadTexts: a2dSensorAvail.setDescription('Device availability:\n\t\t0 = Unavailable\n\t\t1 = Available\n\t\t2 = Partially Unavailable')
a2dSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000000, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2dSensorValue.setStatus('current')
if mibBuilder.loadTexts: a2dSensorValue.setDescription('Analog measurement value, within either a user-defined or preset\n\t\trange, depending on a2dSensorMode.')
a2dSensorDisplayValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2dSensorDisplayValue.setStatus('current')
if mibBuilder.loadTexts: a2dSensorDisplayValue.setDescription('For current/voltage modes, the analog value is given as a string. In\n\t\tbinary modes, the value is either a2dSensorLowLabel or\n\t\ta2dSensorHighLabel, based on a2dSensorValue.')
a2dSensorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("door", 1), ("powerFailure", 2), ("flood", 3), ("wscLeak", 4), ("wscFault", 5), ("smoke", 6), ("ivsNegGnd", 7), ("ivsPosGnd", 8), ("customVoltage", 9), ("customBinary", 10), ("customCurrent", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorMode.setStatus('current')
if mibBuilder.loadTexts: a2dSensorMode.setDescription('Binary modes have two states represented by the values 0 (low) or 1\n\t\t(high). These correspond to a2dSensorLowLabel and a2dSensorHighLabel.\n\t\tCurrent and voltage modes provide a scaled value from a2dSensorMin to\n\t\ta2dSensorMax.\n\t\tAnalog modes:\n\t\t1 = Door (binary)\n\t\t2 = Power failure (binary)\n\t\t3 = Flood (binary)\n\t\t4 = Water-sensing cable leak (binary)\n\t\t5 = Water-sensing cable fault (binary)\n\t\t6 = Smoke alarm (binary)\n\t\t7 = Isolated voltage negative ground (voltage)\n\t\t8 = Isolated voltage positive ground (voltage)\n\t\t9 = Custom voltage (voltage)\n\t\t10 = Custom binary (binary)\n\t\t11 = Custom current (current)')
a2dSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorUnits.setStatus('current')
if mibBuilder.loadTexts: a2dSensorUnits.setDescription('The units for the analog value. If a2dSensorMode is customVoltage(9)\n\t\tor customCurrent(11), then this field has a user-defined value.\n\t\tOtherwise, the value is fixed, based on mode.')
a2dSensorMin = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000000, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorMin.setStatus('current')
if mibBuilder.loadTexts: a2dSensorMin.setDescription('Minimum analog value, given as an integer. The analog measurement is\n\t\tscaled to the range a2dSensorMin to a2dSensorMax. If a2dSensorMode is\n\t\tcustomVoltage(9) or customCurrent(11), then this field has a user-\n\t\tdefined value. Otherwise, the value is fixed, based on mode.')
a2dSensorMax = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000000, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorMax.setStatus('current')
if mibBuilder.loadTexts: a2dSensorMax.setDescription('Maximum analog value, given as an integer. The analog measurement is\n\t\tscaled to the range a2dSensorMin to a2dSensorMax. If a2dSensorMode is\n\t\tcustomVoltage(9) or customCurrent(11), then this field has a user-\n\t\tdefined value. Otherwise, the value is fixed, based on mode.')
a2dSensorLowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorLowLabel.setStatus('current')
if mibBuilder.loadTexts: a2dSensorLowLabel.setDescription('Label for 0 (low) binary value. This field is only applicable if\n\t\ta2dSensorMode is one of the binary modes. If a2dSensorMode is\n\t\tcustomBinary(10), then this field is user-defined. Otherwise, it has a\n\t\tpre-defined value based on the mode.')
a2dSensorHighLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorHighLabel.setStatus('current')
if mibBuilder.loadTexts: a2dSensorHighLabel.setDescription('Label for 1 (high) binary value. The field is only applicable if\n\t\ta2dSensorMode is one of the binary modes. If a2dSensorMode is\n\t\tcustomBinary(10), then this field is user-defined. Otherwise, it has a\n\t\tpre-defined value based on the mode.')
a2dSensorAnalogLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 11, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2dSensorAnalogLabel.setStatus('current')
if mibBuilder.loadTexts: a2dSensorAnalogLabel.setDescription('Label for the analog measurement')
humiditySensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 12), )
if mibBuilder.loadTexts: humiditySensorTable.setStatus('current')
if mibBuilder.loadTexts: humiditySensorTable.setDescription('Remote humidity sensor')
humiditySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 12, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "humiditySensorIndex"))
if mibBuilder.loadTexts: humiditySensorEntry.setStatus('current')
if mibBuilder.loadTexts: humiditySensorEntry.setDescription('Entry in the humiditySensorTable table: each entry contains an index\n\t\tand other sensor details')
humiditySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: humiditySensorIndex.setStatus('current')
if mibBuilder.loadTexts: humiditySensorIndex.setDescription('Table entry index value')
humiditySensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorSerial.setStatus('current')
if mibBuilder.loadTexts: humiditySensorSerial.setDescription('Serial number')
humiditySensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 12, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLabel.setStatus('current')
if mibBuilder.loadTexts: humiditySensorLabel.setDescription('User-defined label')
humiditySensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorAvail.setStatus('current')
if mibBuilder.loadTexts: humiditySensorAvail.setDescription('Device availability:\n\t\t0 = Unavailable\n\t\t1 = Available\n\t\t2 = Partially Unavailable')
humiditySensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorValue.setStatus('current')
if mibBuilder.loadTexts: humiditySensorValue.setDescription('Humidity value')
sn2dSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13), )
if mibBuilder.loadTexts: sn2dSensorTable.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorTable.setDescription('2 Door Switch Sensor (SN-2D)')
sn2dSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "sn2dSensorIndex"))
if mibBuilder.loadTexts: sn2dSensorEntry.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorEntry.setDescription('Entry in the sn2dSensorTable table: each entry contains an index\n\t\tand other sensor details')
sn2dSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: sn2dSensorIndex.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorIndex.setDescription('Table entry index value')
sn2dSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sn2dSensorSerial.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorSerial.setDescription('Serial number')
sn2dSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sn2dSensorLabel.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorLabel.setDescription('User-defined label')
sn2dSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sn2dSensorAvail.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorAvail.setDescription('Device availability:\n\t\t0 = Unavailable\n\t\t1 = Available\n\t\t2 = Partially Unavailable')
sn2dSensorDoor1Label = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sn2dSensorDoor1Label.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorDoor1Label.setDescription('Door switch 1 label')
sn2dSensorDoor1State = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sn2dSensorDoor1State.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorDoor1State.setDescription('Door switch 1 state:\n\t\t1 = open\n\t\t2 = closed')
sn2dSensorDoor1DisplayState = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sn2dSensorDoor1DisplayState.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorDoor1DisplayState.setDescription('Door switch 1 state given as a string')
sn2dSensorDoor2Label = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sn2dSensorDoor2Label.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorDoor2Label.setDescription('Door switch 2 label')
sn2dSensorDoor2State = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sn2dSensorDoor2State.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorDoor2State.setDescription('Door switch 2 state:\n\t\t1 = open\n\t\t2 = closed')
sn2dSensorDoor2DisplayState = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 13, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sn2dSensorDoor2DisplayState.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorDoor2DisplayState.setDescription('Door switch 2 state given as a string')
cooling = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30))
vrc = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1))
vrcMainTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 1), )
if mibBuilder.loadTexts: vrcMainTable.setStatus('current')
if mibBuilder.loadTexts: vrcMainTable.setDescription('Table that contains general VRC information')
vrcMainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 1, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcMainIndex"))
if mibBuilder.loadTexts: vrcMainEntry.setStatus('current')
if mibBuilder.loadTexts: vrcMainEntry.setDescription('Entry in the vrcMainTable: each entry represents a VRC device')
vrcMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcMainIndex.setStatus('current')
if mibBuilder.loadTexts: vrcMainIndex.setDescription('Unique id for each entry in the table')
vrcMainSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainSerial.setStatus('current')
if mibBuilder.loadTexts: vrcMainSerial.setDescription('Serial number')
vrcMainName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainName.setStatus('current')
if mibBuilder.loadTexts: vrcMainName.setDescription('VRC name (factory-assigned)')
vrcMainLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainLabel.setStatus('current')
if mibBuilder.loadTexts: vrcMainLabel.setDescription('VRC label (user-defined)')
vrcMainAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainAvail.setStatus('current')
if mibBuilder.loadTexts: vrcMainAvail.setDescription('Device availability:\n\t\t0 = Unavailable\n\t\t1 = Available\n\t\t2 = Partially Unavailable')
vrcMainPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2), )
if mibBuilder.loadTexts: vrcMainPtTable.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtTable.setDescription('Table that contains general VRC status')
vrcMainPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcMainPtIndex"))
if mibBuilder.loadTexts: vrcMainPtEntry.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtEntry.setDescription('Entry in the vrcMainPtTable: each entry contains status data for a VRC\n\t\tdevice')
vrcMainPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcMainPtIndex.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtIndex.setDescription('Unique id for each entry in the table')
vrcMainPtRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtRunState.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtRunState.setDescription('VRC run state:\n\t\t1 = on\n\t\t2 = off')
vrcMainPtEevOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtEevOpened.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtEevOpened.setDescription('Eev opened value (percent)')
vrcMainPtAlarmNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtAlarmNumbers.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtAlarmNumbers.setDescription('Alarm numbers value')
vrcMainPtHistoryAlarmNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHistoryAlarmNumbers.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtHistoryAlarmNumbers.setDescription('History alarm numbers value')
vrcMainPtHpAbnRecordCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHpAbnRecordCnt.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtHpAbnRecordCnt.setDescription('Hp Abnormal record count')
vrcMainPtMonitorBaudrate = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("error", 1), ("baud1200", 2), ("baud2400", 3), ("baud4800", 4), ("baud9600", 5), ("baud19200", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtMonitorBaudrate.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtMonitorBaudrate.setDescription('Monitor baud rate:\n\t\t1 = error\n\t\t2 = 1200\n\t\t3 = 2400\n\t\t4 = 4800\n\t\t5 = 9600\n\t\t6 = 19200')
vrcMainPtMonitorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtMonitorAddress.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtMonitorAddress.setDescription('Monitor address')
vrcMainPtLp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtLp.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtLp.setDescription('Lp status')
vrcMainPtFilterMaintRemind = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtFilterMaintRemind.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtFilterMaintRemind.setDescription('Filter maintenance reminder status')
vrcMainPtCoolingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtCoolingFlag.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtCoolingFlag.setDescription('Cooling flag')
vrcMainPtFirstOnFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtFirstOnFlag.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtFirstOnFlag.setDescription('First on flag')
vrcMainPtNewAlarmFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtNewAlarmFlag.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtNewAlarmFlag.setDescription('New alarm flag')
vrcMainPtComAlarmOutState = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtComAlarmOutState.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtComAlarmOutState.setDescription('Common alarm output state')
vrcMainPtHighWaterInput = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHighWaterInput.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtHighWaterInput.setDescription('High water input')
vrcMainPtHighWaterAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHighWaterAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtHighWaterAlarm.setDescription('High water alarm status')
vrcMainPtWaterUnderFloorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtWaterUnderFloorAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtWaterUnderFloorAlarm.setDescription('Water under floor alarm status')
vrcMainPtSwShutDownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtSwShutDownStatus.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtSwShutDownStatus.setDescription('Software shutdown status')
vrcMainPtRemoteShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtRemoteShutdown.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtRemoteShutdown.setDescription('Remote shutdown status')
vrcMainPtRemoteShutDownFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtRemoteShutDownFlag.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtRemoteShutDownFlag.setDescription('Remote shutdown flag')
vrcMainPtRemoteShutDownAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtRemoteShutDownAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtRemoteShutDownAlarm.setDescription('Remote shutdown alarm status')
vrcMainPtHmiShutDownFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHmiShutDownFlag.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtHmiShutDownFlag.setDescription('Hmi shutdown flag')
vrcMainPtLpAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtLpAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtLpAlarm.setDescription('Low pressure alarm status')
vrcMainPtHpAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHpAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtHpAlarm.setDescription('High pressure alarm status')
vrcMainPtLpFreqAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtLpFreqAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtLpFreqAlarm.setDescription('Low pressure frequently alarm status')
vrcMainPtHpFreqAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHpFreqAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtHpFreqAlarm.setDescription('High pressure frequently alarm status')
vrcMainPtLpSensorFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtLpSensorFailAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtLpSensorFailAlarm.setDescription('Low pressure sensor failure alarm status')
vrcMainPtHpSensorFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtHpSensorFailAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtHpSensorFailAlarm.setDescription('High pressure sensor failure alarm status')
vrcMainPtEevCommFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 2, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcMainPtEevCommFailAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcMainPtEevCommFailAlarm.setDescription('Eev communication failure alarm status')
vrcMainCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3), )
if mibBuilder.loadTexts: vrcMainCfgTable.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgTable.setDescription('Table that contains general VRC configuration')
vrcMainCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcMainCfgIndex"))
if mibBuilder.loadTexts: vrcMainCfgEntry.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgEntry.setDescription('Entry in the vrcMainCfgTable: each entry contains general config\n\t\tfields for a VRC device')
vrcMainCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcMainCfgIndex.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgIndex.setDescription('Unique id for each entry in the table')
vrcMainCfgModelSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("tmLoc", 1), ("r035Ap", 2), ("r035Ak", 3), ("scLoc", 4), ("zeroULoc", 5), ("r035Ep", 6), ("r035Ek", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgModelSelect.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgModelSelect.setDescription('Model Selection:\n\t\t1 = TMM-Local 220V 50/60HZ\n\t\t2 = TMM-Global 208/230V 50/60HZ\n\t\t3 = TMM-Global 120V 50/60HZ\n\t\t4 = SC 220V 50/60HZ\n\t\t5 = 0U 220V 50/60HZ\n\t\t6 = SS 208/230V 50/60HZ\n\t\t7 = SS 120V 50/60HZ')
vrcMainCfgSystemTimeYear = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2099))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgSystemTimeYear.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgSystemTimeYear.setDescription('System time - year')
vrcMainCfgSystemTimeMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgSystemTimeMonth.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgSystemTimeMonth.setDescription('System time - month')
vrcMainCfgSystemTimeDay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgSystemTimeDay.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgSystemTimeDay.setDescription('System time - day')
vrcMainCfgSystemTimeHour = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgSystemTimeHour.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgSystemTimeHour.setDescription('System time - hour')
vrcMainCfgSystemTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgSystemTimeMin.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgSystemTimeMin.setDescription('System time - minutes')
vrcMainCfgSystemTimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgSystemTimeSec.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgSystemTimeSec.setDescription('System time - seconds')
vrcMainCfgEevShtSettingMin = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 9), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgEevShtSettingMin.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgEevShtSettingMin.setDescription('Min Eev sht in tenths of a degree. Units are given by temperatureUnits\n\t\tfield in deviceInfo. The settable range is determined by the current\n\t\ttemperature units.\n\t\tCelsius:    50 to 200\n\t\tFahrenheit: 90 to 359')
vrcMainCfgEevShtSettingMax = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 10), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgEevShtSettingMax.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgEevShtSettingMax.setDescription('Max Eev sht in tenths of a degree. Units are given by temperatureUnits\n\t\tfield in deviceInfo. The settable range is determined by the current\n\t\ttemperature units.\n\t\tCelsius:    50 to 200\n\t\tFahrenheit: 90 to 359')
vrcMainCfgEevValveCloseSht = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 11), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgEevValveCloseSht.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgEevValveCloseSht.setDescription('Eev valve close sht in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo. The settable range is determined\n\t\tby the current temperature units.\n\t\tCelsius:    0 to 100\n\t\tFahrenheit: 0 to 179')
vrcMainCfgEevMopPressSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('decibars').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgEevMopPressSetting.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgEevMopPressSetting.setDescription('Eev mop pressure setting in tenths of a bar.')
vrcMainCfgLpdt = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgLpdt.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgLpdt.setDescription('Low pressure dt in seconds')
vrcMainCfgDeadBand = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 14), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgDeadBand.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgDeadBand.setDescription('Dead band in tenths of a degree. Units are given by temperatureUnits\n\t\tfield in deviceInfo. The settable range is determined by the current\n\t\ttemperature units.\n\t\tCelsius:    0 to 20\n\t\tFahrenheit: 0 to 35')
vrcMainCfgOnOffSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgOnOffSwitch.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgOnOffSwitch.setDescription('On-off switch')
vrcMainCfgVacuumState = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgVacuumState.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgVacuumState.setDescription('Vacuum state')
vrcMainCfgControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supply", 1), ("return", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgControlMode.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgControlMode.setDescription('Control mode:\n\t\t1 = supply\n\t\t2 = return')
vrcMainCfgManualRunEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgManualRunEnable.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgManualRunEnable.setDescription('Manual run enable')
vrcMainCfgRemShutdownInput = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgRemShutdownInput.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgRemShutdownInput.setDescription('Remote shutdown input')
vrcMainCfgMonitorShutDownFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgMonitorShutDownFlag.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgMonitorShutDownFlag.setDescription('Monitor shutdown flag')
vrcMainCfgFirstOnPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgFirstOnPassword.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgFirstOnPassword.setDescription('First on password value')
vrcMainCfgFilterMaintSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgFilterMaintSetting.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgFilterMaintSetting.setDescription('Filter maintenance setting')
vrcMainCfgFilterMaintRemindTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 360))).setUnits('days').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgFilterMaintRemindTime.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgFilterMaintRemindTime.setDescription('Time between filter maintenance reminders in days')
vrcMainCfgFilterMaintRemindCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgFilterMaintRemindCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgFilterMaintRemindCtrl.setDescription('Filter maintenance reminder:\n\t\t1 = close\n\t\t2 = suspend\n\t\t3 = open')
vrcMainCfgCommonAlarmOutputDir = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgCommonAlarmOutputDir.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgCommonAlarmOutputDir.setDescription('Common alarm output direction')
vrcMainCfgHpAbnAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 360))).setUnits('decibars').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgHpAbnAlarmSetting.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgHpAbnAlarmSetting.setDescription('Abnormal high pressure alarm value in tenths of a bar')
vrcMainCfgLpAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgLpAlarmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgLpAlarmCtrl.setDescription('Low pressure alarm control:\n\t\t2 = suspend\n\t\t3 = open')
vrcMainCfgHpAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgHpAlarmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgHpAlarmCtrl.setDescription('High pressure alarm control:\n\t\t2 = suspend\n\t\t3 = open')
vrcMainCfgLpFreqAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgLpFreqAlarmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgLpFreqAlarmCtrl.setDescription('Low pressure frequently alarm control:\n\t\t2 = suspend\n\t\t3 = open')
vrcMainCfgHpFreqAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgHpFreqAlarmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgHpFreqAlarmCtrl.setDescription('High pressure frequently alarm control:\n\t\t2 = suspend\n\t\t3 = open')
vrcMainCfgLpSensorFailAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgLpSensorFailAlarmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgLpSensorFailAlarmCtrl.setDescription('Low pressure sensor failure alarm control:\n\t\t2 = suspend\n\t\t3 = open')
vrcMainCfgHpSensorFailAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgHpSensorFailAlarmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgHpSensorFailAlarmCtrl.setDescription('High pressure sensor failure alarm control:\n\t\t2 = suspend\n\t\t3 = open')
vrcMainCfgHighWaterAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgHighWaterAlarmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgHighWaterAlarmCtrl.setDescription('High water alarm control:\n\t\t1 = close\n\t\t2 = suspend\n\t\t3 = open')
vrcMainCfgRemShutdownAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgRemShutdownAlarmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgRemShutdownAlarmCtrl.setDescription('Remote shutdown alarm control:\n\t\t2 = suspend\n\t\t3 = open')
vrcMainCfgEevCommFailAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcMainCfgEevCommFailAlarmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcMainCfgEevCommFailAlarmCtrl.setDescription('Eev communication failure alarm:\n\t\t2 = suspend\n\t\t3 = open')
vrcOutFanPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 4), )
if mibBuilder.loadTexts: vrcOutFanPtTable.setStatus('current')
if mibBuilder.loadTexts: vrcOutFanPtTable.setDescription('Table that contains VRC out-fan status')
vrcOutFanPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 4, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcOutFanPtIndex"))
if mibBuilder.loadTexts: vrcOutFanPtEntry.setStatus('current')
if mibBuilder.loadTexts: vrcOutFanPtEntry.setDescription('Entry in the vrcOutFanPtTable: each entry represents data for a VRC\n\t\tout-fan')
vrcOutFanPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcOutFanPtIndex.setStatus('current')
if mibBuilder.loadTexts: vrcOutFanPtIndex.setDescription('Unique id for each entry in the table')
vrcOutFanPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcOutFanPtName.setStatus('current')
if mibBuilder.loadTexts: vrcOutFanPtName.setDescription('Out-fan name (factory-assigned)')
vrcOutFanPtSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcOutFanPtSpeed.setStatus('current')
if mibBuilder.loadTexts: vrcOutFanPtSpeed.setDescription('Fan speed (percent)')
vrcOutFanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5), )
if mibBuilder.loadTexts: vrcOutFanCfgTable.setStatus('current')
if mibBuilder.loadTexts: vrcOutFanCfgTable.setDescription('Table used for VRC out-fan configuration')
vrcOutFanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcOutFanCfgIndex"))
if mibBuilder.loadTexts: vrcOutFanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: vrcOutFanCfgEntry.setDescription('Entry in the vrcOutFanCfgTable: each entry contains config fields for\n\t\ta VRC out-fan')
vrcOutFanCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcOutFanCfgIndex.setStatus('current')
if mibBuilder.loadTexts: vrcOutFanCfgIndex.setDescription('Unique id for each entry in the table')
vrcOutFanCfgStartPress = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(190, 250))).setUnits('decibars').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcOutFanCfgStartPress.setStatus('current')
if mibBuilder.loadTexts: vrcOutFanCfgStartPress.setDescription('Out-fan start pressure in tenths of a bar')
vrcOutFanCfgPressSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 80))).setUnits('decibars').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcOutFanCfgPressSetting.setStatus('current')
if mibBuilder.loadTexts: vrcOutFanCfgPressSetting.setDescription('Out-fan pressure setting in tenths of a bar')
vrcOutFanCfgMinPowerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 50))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcOutFanCfgMinPowerVoltage.setStatus('current')
if mibBuilder.loadTexts: vrcOutFanCfgMinPowerVoltage.setDescription('Min out-fan voltage (percent)')
vrcOutFanCfgMaxPowerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcOutFanCfgMaxPowerVoltage.setStatus('current')
if mibBuilder.loadTexts: vrcOutFanCfgMaxPowerVoltage.setDescription('Max out-fan voltage (percent)')
vrcOutFanCfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcOutFanCfgSpeed.setStatus('current')
if mibBuilder.loadTexts: vrcOutFanCfgSpeed.setDescription('Out-fan speed  (percent)')
vrcInFanPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 6), )
if mibBuilder.loadTexts: vrcInFanPtTable.setStatus('current')
if mibBuilder.loadTexts: vrcInFanPtTable.setDescription('Table that contains VRC in-fan status')
vrcInFanPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 6, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcInFanPtIndex"))
if mibBuilder.loadTexts: vrcInFanPtEntry.setStatus('current')
if mibBuilder.loadTexts: vrcInFanPtEntry.setDescription('Entry in the vrcInFanPtTable: each entry represents data for a VRC in-\n\t\tfan')
vrcInFanPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcInFanPtIndex.setStatus('current')
if mibBuilder.loadTexts: vrcInFanPtIndex.setDescription('Unique id for each entry in the table')
vrcInFanPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcInFanPtName.setStatus('current')
if mibBuilder.loadTexts: vrcInFanPtName.setDescription('In-fan name (factory-assigned)')
vrcInFanPtRunTimeHours = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcInFanPtRunTimeHours.setStatus('current')
if mibBuilder.loadTexts: vrcInFanPtRunTimeHours.setDescription('In-fan run time in hours')
vrcInFanPtStartStopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcInFanPtStartStopCount.setStatus('current')
if mibBuilder.loadTexts: vrcInFanPtStartStopCount.setDescription('In-fan start/stop count')
vrcInFanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7), )
if mibBuilder.loadTexts: vrcInFanCfgTable.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgTable.setDescription('Table used for VRC in-fan configuration')
vrcInFanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcInFanCfgIndex"))
if mibBuilder.loadTexts: vrcInFanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgEntry.setDescription('Entry in the vrcInFanCfgTable: each entry contains config fields for a\n\t\tVRC in-fan')
vrcInFanCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcInFanCfgIndex.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgIndex.setDescription('Unique id for each entry in the table')
vrcInFanCfgOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgOutputStatus.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgOutputStatus.setDescription('In-fan output status')
vrcInFanCfgLowSpeedStep = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setUnits('0.1%/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgLowSpeedStep.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgLowSpeedStep.setDescription('In-fan low speed step in tenths of a percent per second')
vrcInFanCfgHighSpeedStep = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setUnits('0.1%/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgHighSpeedStep.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgHighSpeedStep.setDescription('In-fan high speed step in tenths of a percent per second')
vrcInFanCfgMinSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 80))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgMinSpeed.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgMinSpeed.setDescription('Min in-fan speed (percent)')
vrcInFanCfgStandardSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgStandardSpeed.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgStandardSpeed.setDescription('Standard in-fan speed (percent)')
vrcInFanCfgMinCfc = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgMinCfc.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgMinCfc.setDescription('Min in-fan cfc (percent)')
vrcInFanCfgStandardCfc = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(85, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgStandardCfc.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgStandardCfc.setDescription('Standard in-fan cfc (percent)')
vrcInFanCfgStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgStartDelay.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgStartDelay.setDescription('In-fan start delay in seconds')
vrcInFanCfgStopDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgStopDelay.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgStopDelay.setDescription('In-fan stop delay in seconds')
vrcInFanCfgReduceSpeedDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgReduceSpeedDelay.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgReduceSpeedDelay.setDescription('In-fan reduce speed delay in seconds')
vrcInFanCfgJumpBand1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpBand1.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgJumpBand1.setDescription('In-fan jump band 1 in tenths of a percent')
vrcInFanCfgJumpBand2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpBand2.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgJumpBand2.setDescription('In-fan jump band 2 in tenths of a percent')
vrcInFanCfgJumpBand3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpBand3.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgJumpBand3.setDescription('In-fan jump band 3 in tenths of a percent')
vrcInFanCfgJumpBand4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpBand4.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgJumpBand4.setDescription('In-fan jump band 4 in tenths of a percent')
vrcInFanCfgJumpBand5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpBand5.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgJumpBand5.setDescription('In-fan jump band 5 in tenths of a percent')
vrcInFanCfgJumpFreq1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpFreq1.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgJumpFreq1.setDescription('In-fan jump frequency 1 in tenths of a percent')
vrcInFanCfgJumpFreq2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpFreq2.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgJumpFreq2.setDescription('In-fan jump frequency 2 in tenths of a percent')
vrcInFanCfgJumpFreq3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpFreq3.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgJumpFreq3.setDescription('In-fan jump frequency 3 in tenths of a percent')
vrcInFanCfgJumpFreq4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpFreq4.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgJumpFreq4.setDescription('In-fan jump frequency 4 in tenths of a percent')
vrcInFanCfgJumpFreq5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgJumpFreq5.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgJumpFreq5.setDescription('In-fan jump frequency 5 in tenths of a percent')
vrcInFanCfgTempP = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 150))).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgTempP.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgTempP.setDescription('In-fan temperature P in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo.')
vrcInFanCfgTempI = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgTempI.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgTempI.setDescription('In-fan temperature I in seconds')
vrcInFanCfgTempD = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 7, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcInFanCfgTempD.setStatus('current')
if mibBuilder.loadTexts: vrcInFanCfgTempD.setDescription('In-fan temperature D in seconds')
vrcCompPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8), )
if mibBuilder.loadTexts: vrcCompPtTable.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtTable.setDescription('Table that contains VRC compressor status')
vrcCompPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcCompPtIndex"))
if mibBuilder.loadTexts: vrcCompPtEntry.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtEntry.setDescription('Entry in the vrcCompPtTable: each entry represents data for a VRC\n\t\tcompressor')
vrcCompPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcCompPtIndex.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtIndex.setDescription('Unique id for each entry in the table')
vrcCompPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtName.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtName.setDescription('Compressor name (factory-assigned)')
vrcCompPtCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtCapacity.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtCapacity.setDescription('Compressor capacity value (percent)')
vrcCompPtRunTimeHours = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtRunTimeHours.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtRunTimeHours.setDescription('Compressor run time in hours')
vrcCompPtStartStopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtStartStopCount.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtStartStopCount.setDescription('Compressor start/stop count')
vrcCompPtDriverFaultU00 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU00.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU00.setDescription('Compressor driver fault alarm U00 state')
vrcCompPtDriverFaultU01 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU01.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU01.setDescription('Compressor driver fault alarm U01 state')
vrcCompPtDriverFaultU02 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU02.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU02.setDescription('Compressor driver fault alarm U02 state')
vrcCompPtDriverFaultU03 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU03.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU03.setDescription('Compressor driver fault alarm U03 state')
vrcCompPtDriverFaultU04 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU04.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU04.setDescription('Compressor driver fault alarm U04 state')
vrcCompPtDriverFaultU05 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU05.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU05.setDescription('Compressor driver fault alarm U05 state')
vrcCompPtDriverFaultU06 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU06.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU06.setDescription('Compressor driver fault alarm U06 state')
vrcCompPtDriverFaultU07 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU07.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU07.setDescription('Compressor driver fault alarm U07 state')
vrcCompPtDriverFaultU08 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU08.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU08.setDescription('Compressor driver fault alarm U08 state')
vrcCompPtDriverFaultU09 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU09.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU09.setDescription('Compressor driver fault alarm U09 state')
vrcCompPtDriverFaultU10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU10.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU10.setDescription('Compressor driver fault alarm U10 state')
vrcCompPtDriverFaultU11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU11.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU11.setDescription('Compressor driver fault alarm U11 state')
vrcCompPtDriverFaultU12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU12.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU12.setDescription('Compressor driver fault alarm U12 state')
vrcCompPtDriverFaultU13 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU13.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU13.setDescription('Compressor driver fault alarm U13 state')
vrcCompPtDriverFaultU14 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU14.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU14.setDescription('Compressor driver fault alarm U14 state')
vrcCompPtDriverFaultU15 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverFaultU15.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverFaultU15.setDescription('Compressor driver fault alarm U15 state')
vrcCompPtDriverCommFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtDriverCommFailAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtDriverCommFailAlarm.setDescription('Compressor driver communication failure alarm state')
vrcCompPtFaultLockAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 8, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcCompPtFaultLockAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtFaultLockAlarm.setDescription('Compressor fault lock alarm state')
vrcCompCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9), )
if mibBuilder.loadTexts: vrcCompCfgTable.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgTable.setDescription('Table used for VRC compressor configuration')
vrcCompCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcCompCfgIndex"))
if mibBuilder.loadTexts: vrcCompCfgEntry.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgEntry.setDescription('Entry in the vrcCompCfgTable: each entry contains config fields for a\n\t\tVRC compressor')
vrcCompCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcCompCfgIndex.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgIndex.setDescription('Unique id for each entry in the table')
vrcCompCfgOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgOutputStatus.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgOutputStatus.setDescription('Compressor output status')
vrcCompCfgOutputDeadBand = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgOutputDeadBand.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgOutputDeadBand.setDescription('Compressor output dead band in tenths of a percent')
vrcCompCfgCapacityOutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgCapacityOutputValue.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgCapacityOutputValue.setDescription('Compressor capacity output (percent)')
vrcCompCfgMinCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 50))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgMinCapacity.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgMinCapacity.setDescription('Compressor min capacity (percent)')
vrcCompCfgStartCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgStartCapacity.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgStartCapacity.setDescription('Compressor start capacity (percent)')
vrcCompCfgStandardCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgStandardCapacity.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgStandardCapacity.setDescription('Compressor standard capacity (percent)')
vrcCompCfgStartCfc = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgStartCfc.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgStartCfc.setDescription('Compressor start cfc (percent)')
vrcCompCfgStopCfc = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-200, -50))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgStopCfc.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgStopCfc.setDescription('Compressor stop cfc (percent)')
vrcCompCfgMinRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgMinRunTime.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgMinRunTime.setDescription('Compressor min run time in minutes')
vrcCompCfgMinStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgMinStopTime.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgMinStopTime.setDescription('Compressor min stop time in minutes')
vrcCompCfgJumpBand1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpBand1.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgJumpBand1.setDescription('Compressor jump band 1 in tenths of a percent')
vrcCompCfgJumpBand2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpBand2.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgJumpBand2.setDescription('Compressor jump band 2 in tenths of a percent')
vrcCompCfgJumpBand3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpBand3.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgJumpBand3.setDescription('Compressor jump band 3 in tenths of a percent')
vrcCompCfgJumpBand4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpBand4.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgJumpBand4.setDescription('Compressor jump band 4 in tenths of a percent')
vrcCompCfgJumpBand5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpBand5.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgJumpBand5.setDescription('Compressor jump band 5 in tenths of a percent')
vrcCompCfgJumpFreq1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpFreq1.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgJumpFreq1.setDescription('Compressor jump frequency 1 in tenths of a percent')
vrcCompCfgJumpFreq2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpFreq2.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgJumpFreq2.setDescription('Compressor jump frequency 2 in tenths of a percent')
vrcCompCfgJumpFreq3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpFreq3.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgJumpFreq3.setDescription('Compressor jump frequency 3 in tenths of a percent')
vrcCompCfgJumpFreq4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpFreq4.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgJumpFreq4.setDescription('Compressor jump frequency 4 in tenths of a percent')
vrcCompCfgJumpFreq5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgJumpFreq5.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgJumpFreq5.setDescription('Compressor jump frequency 5 in tenths of a percent')
vrcCompCfgTempP = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 22), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgTempP.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgTempP.setDescription('Compressor temperature P in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo. The settable range is determined\n\t\tby the current temperature units.\n\t\tCelsius:    10 to 150\n\t\tFahrenheit: 18 to 269')
vrcCompCfgTempI = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgTempI.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgTempI.setDescription('Compressor temperature I in seconds')
vrcCompCfgTempD = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgTempD.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgTempD.setDescription('Compressor temperature D in seconds')
vrcCompCfgDriverFaultAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgDriverFaultAlmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgDriverFaultAlmCtrl.setDescription('Compressor driver fault alarm control:\n\t\t2 = suspend\n\t\t3 = open')
vrcCompCfgDriverCommFailAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgDriverCommFailAlmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgDriverCommFailAlmCtrl.setDescription('Compressor driver communication failure alarm control:\n\t\t2 = suspend\n\t\t3 = open')
vrcCompCfgFaultLockAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 9, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcCompCfgFaultLockAlmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcCompCfgFaultLockAlmCtrl.setDescription('Compressor fault lock alarm control:\n\t\t2 = suspend\n\t\t3 = open')
vrcReturnPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 10), )
if mibBuilder.loadTexts: vrcReturnPtTable.setStatus('current')
if mibBuilder.loadTexts: vrcReturnPtTable.setDescription('Table that contains VRC return status')
vrcReturnPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 10, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcReturnPtIndex"))
if mibBuilder.loadTexts: vrcReturnPtEntry.setStatus('current')
if mibBuilder.loadTexts: vrcReturnPtEntry.setDescription('Entry in the vrcReturnPtTable: each entry represents return data for a\n\t\tVRC')
vrcReturnPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcReturnPtIndex.setStatus('current')
if mibBuilder.loadTexts: vrcReturnPtIndex.setDescription('Unique id for each entry in the table')
vrcReturnPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 10, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcReturnPtName.setStatus('current')
if mibBuilder.loadTexts: vrcReturnPtName.setDescription('Return name (factory-assigned)')
vrcReturnPtTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 10, 1, 3), Integer32()).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcReturnPtTemp.setStatus('current')
if mibBuilder.loadTexts: vrcReturnPtTemp.setDescription('Return temperature value in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo. The range is determined by the\n\t\tcurrent temperature units.\n\t\tCelsius:    -400 to 1000\n\t\tFahrenheit: -400 to 2120')
vrcReturnPtHighTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 10, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcReturnPtHighTempAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcReturnPtHighTempAlarm.setDescription('Return high temperature alarm state')
vrcReturnPtTempSensorFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 10, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcReturnPtTempSensorFailAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcReturnPtTempSensorFailAlarm.setDescription('Return temperature sensor failure alarm state')
vrcReturnCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11), )
if mibBuilder.loadTexts: vrcReturnCfgTable.setStatus('current')
if mibBuilder.loadTexts: vrcReturnCfgTable.setDescription('Table used for VRC return configuration')
vrcReturnCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcReturnCfgIndex"))
if mibBuilder.loadTexts: vrcReturnCfgEntry.setStatus('current')
if mibBuilder.loadTexts: vrcReturnCfgEntry.setDescription('Entry in the vrcReturnCfgTable: each entry contains config fields for\n\t\tVRC return')
vrcReturnCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcReturnCfgIndex.setStatus('current')
if mibBuilder.loadTexts: vrcReturnCfgIndex.setDescription('Unique id for each entry in the table')
vrcReturnCfgOilCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 50))).setUnits('decihours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgOilCycle.setStatus('current')
if mibBuilder.loadTexts: vrcReturnCfgOilCycle.setDescription('Return oil cycle in tenths of an hour')
vrcReturnCfgOilRunCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgOilRunCapacity.setStatus('current')
if mibBuilder.loadTexts: vrcReturnCfgOilRunCapacity.setDescription('Return Oil run capacity (percent)')
vrcReturnCfgOilRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgOilRunTime.setStatus('current')
if mibBuilder.loadTexts: vrcReturnCfgOilRunTime.setDescription('Return oil run time in minutes')
vrcReturnCfgTempCalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 5), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgTempCalValue.setStatus('current')
if mibBuilder.loadTexts: vrcReturnCfgTempCalValue.setDescription('Return temperature calibration value in tenths of a degree. Units are\n\t\tgiven by temperatureUnits field in deviceInfo. The settable range is\n\t\tdetermined by the current temperature units.\n\t\tCelsius:    -100 to 100\n\t\tFahrenheit: -179 to 179')
vrcReturnCfgTempSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 6), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgTempSetting.setStatus('current')
if mibBuilder.loadTexts: vrcReturnCfgTempSetting.setDescription('Return temperature setting in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo. The settable range is determined\n\t\tby the current temperature units.\n\t\tCelsius:    250 to 350\n\t\tFahrenheit: 770 to 949')
vrcReturnCfgHighTempAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 7), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgHighTempAlarmValue.setStatus('current')
if mibBuilder.loadTexts: vrcReturnCfgHighTempAlarmValue.setDescription('Return high temperature alarm value in tenths of a degree. Units are\n\t\tgiven by temperatureUnits field in deviceInfo. The settable range is\n\t\tdetermined by the current temperature units.\n\t\tCelsius:    300 to 450\n\t\tFahrenheit: 860 to 1129')
vrcReturnCfgHighTempAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgHighTempAlarmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcReturnCfgHighTempAlarmCtrl.setDescription('Return high temperature alarm control:\n\t\t1 = close\n\t\t2 = suspend\n\t\t3 = open')
vrcReturnCfgTempSensFailAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcReturnCfgTempSensFailAlmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcReturnCfgTempSensFailAlmCtrl.setDescription('Return temperature sensor failure alarm control:\n\t\t1 = close\n\t\t2 = suspend\n\t\t3 = open')
vrcSupplyPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12), )
if mibBuilder.loadTexts: vrcSupplyPtTable.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyPtTable.setDescription('Table that contains VRC supply status')
vrcSupplyPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcSupplyPtIndex"))
if mibBuilder.loadTexts: vrcSupplyPtEntry.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyPtEntry.setDescription('Entry in the vrcSupplyPtTable: each entry represents supply data for a\n\t\tVRC')
vrcSupplyPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcSupplyPtIndex.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyPtIndex.setDescription('Unique id for each entry in the table')
vrcSupplyPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSupplyPtName.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyPtName.setDescription('Supply name (factory-assigned)')
vrcSupplyPtTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12, 1, 3), Integer32()).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSupplyPtTemp.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyPtTemp.setDescription('Supply temperature value in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo. The range is determined by the\n\t\tcurrent temperature units.\n\t\tCelsius:    -400 to 1000\n\t\tFahrenheit: -400 to 2120')
vrcSupplyPtLowTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSupplyPtLowTempAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyPtLowTempAlarm.setDescription('Supply low temperature alarm state')
vrcSupplyPtHighTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSupplyPtHighTempAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyPtHighTempAlarm.setDescription('Supply high temperature alarm state')
vrcSupplyPtTempSensorFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 12, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSupplyPtTempSensorFailAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyPtTempSensorFailAlarm.setDescription('Supply temperature sensor failure alarm state')
vrcSupplyCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13), )
if mibBuilder.loadTexts: vrcSupplyCfgTable.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyCfgTable.setDescription('Table used for VRC supply configuration')
vrcSupplyCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcSupplyCfgIndex"))
if mibBuilder.loadTexts: vrcSupplyCfgEntry.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyCfgEntry.setDescription('Entry in the vrcSupplyCfgTable: each entry contains config fields for\n\t\ta VRC supply')
vrcSupplyCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcSupplyCfgIndex.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyCfgIndex.setDescription('Unique id for each entry in the table')
vrcSupplyCfgTempCalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 2), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSupplyCfgTempCalValue.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyCfgTempCalValue.setDescription('Supply temperature calibration value in tenths of a degree. Units are\n\t\tgiven by temperatureUnits field in deviceInfo. The settable range is\n\t\tdetermined by the current temperature units.\n\t\tCelsius:    -100 to 100\n\t\tFahrenheit: -179 to 179')
vrcSupplyCfgTempSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 3), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSupplyCfgTempSetting.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyCfgTempSetting.setDescription('Supply temperature setting in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo. The settable range is determined\n\t\tby the current temperature units.\n\t\tCelsius:    130 to 280\n\t\tFahrenheit: 554 to 823')
vrcSupplyCfgLowTempAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 4), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSupplyCfgLowTempAlarmValue.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyCfgLowTempAlarmValue.setDescription('Supply low temperature alarm value in tenths of a degree. Units are\n\t\tgiven by temperatureUnits field in deviceInfo. The settable range is\n\t\tdetermined by the current temperature units.\n\t\tCelsius:    50 to 200\n\t\tFahrenheit: 410 to 679')
vrcSupplyCfgHighTempAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 5), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSupplyCfgHighTempAlarmValue.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyCfgHighTempAlarmValue.setDescription('Supply high temperature alarm value in tenths of a degree. Units are\n\t\tgiven by temperatureUnits field in deviceInfo. The settable range is\n\t\tdetermined by the current temperature units.\n\t\tCelsius:    200 to 350\n\t\tFahrenheit: 680 to 949')
vrcSupplyCfgLowTempAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSupplyCfgLowTempAlmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyCfgLowTempAlmCtrl.setDescription('Supply low temperature alarm control:\n\t\t1 = close\n\t\t2 = suspend\n\t\t3 = open')
vrcSupplyCfgHighTempAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSupplyCfgHighTempAlmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyCfgHighTempAlmCtrl.setDescription('Supply high temperature alarm control:\n\t\t1 = close\n\t\t2 = suspend\n\t\t3 = open')
vrcSupplyCfgTempSensFailAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSupplyCfgTempSensFailAlmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyCfgTempSensFailAlmCtrl.setDescription('Supply temperature sensor failure alarm control:\n\t\t1 = close\n\t\t2 = suspend\n\t\t3 = open')
vrcPowerPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14), )
if mibBuilder.loadTexts: vrcPowerPtTable.setStatus('current')
if mibBuilder.loadTexts: vrcPowerPtTable.setDescription('Table that contains VRC power status')
vrcPowerPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcPowerPtIndex"))
if mibBuilder.loadTexts: vrcPowerPtEntry.setStatus('current')
if mibBuilder.loadTexts: vrcPowerPtEntry.setDescription('Entry in the vrcPowerPtTable: each entry represents power data for a\n\t\tVRC')
vrcPowerPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcPowerPtIndex.setStatus('current')
if mibBuilder.loadTexts: vrcPowerPtIndex.setDescription('Unique id for each entry in the table')
vrcPowerPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtName.setStatus('current')
if mibBuilder.loadTexts: vrcPowerPtName.setDescription('Power name (factory-assigned)')
vrcPowerPtVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('decivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtVoltage.setStatus('current')
if mibBuilder.loadTexts: vrcPowerPtVoltage.setDescription('Power voltage measurement in tenths of a volt')
vrcPowerPtFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('decihertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtFrequency.setStatus('current')
if mibBuilder.loadTexts: vrcPowerPtFrequency.setDescription('Power frequency measurement in tenths of hertz')
vrcPowerPtLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtLowVoltageAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcPowerPtLowVoltageAlarm.setDescription('Power low voltage alarm state')
vrcPowerPtHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtHighVoltageAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcPowerPtHighVoltageAlarm.setDescription('Power high voltage alarm state')
vrcPowerPtLossOfPhasePowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtLossOfPhasePowerAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcPowerPtLossOfPhasePowerAlarm.setDescription('Phase power loss alarm state')
vrcPowerPtLossOfPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtLossOfPowerAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcPowerPtLossOfPowerAlarm.setDescription('Power loss alarm state')
vrcPowerPtFrequencyErrorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 14, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcPowerPtFrequencyErrorAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcPowerPtFrequencyErrorAlarm.setDescription('Power frequency error alarm state')
vrcPowerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15), )
if mibBuilder.loadTexts: vrcPowerCfgTable.setStatus('current')
if mibBuilder.loadTexts: vrcPowerCfgTable.setDescription('Table used for VRC power configuration')
vrcPowerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcPowerCfgIndex"))
if mibBuilder.loadTexts: vrcPowerCfgEntry.setStatus('current')
if mibBuilder.loadTexts: vrcPowerCfgEntry.setDescription('Entry in the vrcPowerCfgTable: each entry contains config fields for\n\t\tVRC power')
vrcPowerCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcPowerCfgIndex.setStatus('current')
if mibBuilder.loadTexts: vrcPowerCfgIndex.setDescription('Unique id for each entry in the table')
vrcPowerCfgLowVoltageSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 230))).setUnits('volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcPowerCfgLowVoltageSetting.setStatus('current')
if mibBuilder.loadTexts: vrcPowerCfgLowVoltageSetting.setDescription('Power low voltage setting in volts')
vrcPowerCfgHighVoltageSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 300))).setUnits('volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcPowerCfgHighVoltageSetting.setStatus('current')
if mibBuilder.loadTexts: vrcPowerCfgHighVoltageSetting.setDescription('Power high voltage setting in volts')
vrcPowerCfgLowVoltageAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcPowerCfgLowVoltageAlarmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcPowerCfgLowVoltageAlarmCtrl.setDescription('Power low voltage alarm control:\n\t\t1 = close\n\t\t2 = suspend\n\t\t3 = open')
vrcPowerCfgHighVoltageAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcPowerCfgHighVoltageAlarmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcPowerCfgHighVoltageAlarmCtrl.setDescription('Power high voltage alarm control:\n\t\t1 = close\n\t\t2 = suspend\n\t\t3 = open')
vrcPowerCfgLossOfPowerAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcPowerCfgLossOfPowerAlarmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcPowerCfgLossOfPowerAlarmCtrl.setDescription('Power loss alarm control:\n\t\t1 = close\n\t\t2 = suspend\n\t\t3 = open')
vrcPowerCfgFreqErrorAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("close", 1), ("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcPowerCfgFreqErrorAlarmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcPowerCfgFreqErrorAlarmCtrl.setDescription('Power frequency error alarm control:\n\t\t1 = close\n\t\t2 = suspend\n\t\t3 = open')
vrcOutdoorPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 16), )
if mibBuilder.loadTexts: vrcOutdoorPtTable.setStatus('current')
if mibBuilder.loadTexts: vrcOutdoorPtTable.setDescription('Table that contains VRC outdoor status')
vrcOutdoorPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 16, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcOutdoorPtIndex"))
if mibBuilder.loadTexts: vrcOutdoorPtEntry.setStatus('current')
if mibBuilder.loadTexts: vrcOutdoorPtEntry.setDescription('Entry in the vrcOutdoorPtTable: each entry represents data for a VRC\n\t\toutdoor')
vrcOutdoorPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcOutdoorPtIndex.setStatus('current')
if mibBuilder.loadTexts: vrcOutdoorPtIndex.setDescription('Unique id for each entry in the table')
vrcOutdoorPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 16, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcOutdoorPtName.setStatus('current')
if mibBuilder.loadTexts: vrcOutdoorPtName.setDescription('Outdoor name (factory-assigned)')
vrcOutdoorPtTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 16, 1, 3), Integer32()).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcOutdoorPtTemp.setStatus('current')
if mibBuilder.loadTexts: vrcOutdoorPtTemp.setDescription('Outdoor temperature value in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo. The range is determined by the\n\t\tcurrent temperature units.\n\t\tCelsius:    -400 to 1000\n\t\tFahrenheit: -400 to 2120')
vrcDischPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18), )
if mibBuilder.loadTexts: vrcDischPtTable.setStatus('current')
if mibBuilder.loadTexts: vrcDischPtTable.setDescription('Table that contains VRC discharge status')
vrcDischPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcDischPtIndex"))
if mibBuilder.loadTexts: vrcDischPtEntry.setStatus('current')
if mibBuilder.loadTexts: vrcDischPtEntry.setDescription('Entry in the vrcDischPtTable: each entry represents discharge data for\n\t\ta VRC')
vrcDischPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcDischPtIndex.setStatus('current')
if mibBuilder.loadTexts: vrcDischPtIndex.setDescription('Unique id for each entry in the table')
vrcDischPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcDischPtName.setStatus('current')
if mibBuilder.loadTexts: vrcDischPtName.setDescription('Discharge name (factory-assigned)')
vrcDischPtTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1, 3), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcDischPtTemp.setStatus('current')
if mibBuilder.loadTexts: vrcDischPtTemp.setDescription('Discharge temperature value in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo. The range is determined by the\n\t\tcurrent temperature units.\n\t\tCelsius:    -400 to 1560\n\t\tFahrenheit: -400 to 3128')
vrcDischPtPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 460))).setUnits('decibars').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcDischPtPressure.setStatus('current')
if mibBuilder.loadTexts: vrcDischPtPressure.setDescription('Discharge air pressure value in tenths of a bar')
vrcDischPtHighTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcDischPtHighTempAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcDischPtHighTempAlarm.setDescription('Discharge high temperature alarm state')
vrcDischPtHighTempFreqAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcDischPtHighTempFreqAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcDischPtHighTempFreqAlarm.setDescription('Discharge high temperature frequently alarm state')
vrcDischPtTempSensorFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 18, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcDischPtTempSensorFailAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcDischPtTempSensorFailAlarm.setDescription('Discharge temperature sensor failure alarm state')
vrcDischCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19), )
if mibBuilder.loadTexts: vrcDischCfgTable.setStatus('current')
if mibBuilder.loadTexts: vrcDischCfgTable.setDescription('Table used for VRC discharge configuration')
vrcDischCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcDischCfgIndex"))
if mibBuilder.loadTexts: vrcDischCfgEntry.setStatus('current')
if mibBuilder.loadTexts: vrcDischCfgEntry.setDescription('Entry in the vrcDischCfgTable: each entry contains config fields for\n\t\tVRC discharge')
vrcDischCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcDischCfgIndex.setStatus('current')
if mibBuilder.loadTexts: vrcDischCfgIndex.setDescription('Unique id for each entry in the table')
vrcDischCfgTempCalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19, 1, 2), Integer32()).setUnits('decidegrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcDischCfgTempCalValue.setStatus('current')
if mibBuilder.loadTexts: vrcDischCfgTempCalValue.setDescription('Discharge temperature calibration value in tenths of a degree. Units\n\t\tare given by temperatureUnits field in deviceInfo. The settable range\n\t\tis determined by the current temperature units.\n\t\tCelsius:    -100 to 100\n\t\tFahrenheit: -179 to 179')
vrcDischCfgPressCalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('decibars').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcDischCfgPressCalValue.setStatus('current')
if mibBuilder.loadTexts: vrcDischCfgPressCalValue.setDescription('Discharge pressure calibration value in tenths of a bar')
vrcDischCfgHighTempAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcDischCfgHighTempAlmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcDischCfgHighTempAlmCtrl.setDescription('Discharge high temperature alarm control:\n\t\t2 = suspend\n\t\t3 = open')
vrcDischCfgHighTempFreqAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcDischCfgHighTempFreqAlmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcDischCfgHighTempFreqAlmCtrl.setDescription('Discharge high temperature frequenctly alarm control:\n\t\t2 = suspend\n\t\t3 = open')
vrcDischCfgTempSensFailAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcDischCfgTempSensFailAlmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcDischCfgTempSensFailAlmCtrl.setDescription('Discharge temperature sensor failure alarm control:\n\t\t2 = suspend\n\t\t3 = open')
vrcSuctPtTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20), )
if mibBuilder.loadTexts: vrcSuctPtTable.setStatus('current')
if mibBuilder.loadTexts: vrcSuctPtTable.setDescription('Table that contains VRC suction status')
vrcSuctPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcSuctPtIndex"))
if mibBuilder.loadTexts: vrcSuctPtEntry.setStatus('current')
if mibBuilder.loadTexts: vrcSuctPtEntry.setDescription('Entry in the vrcSuctPtTable: each entry represents suction data for a\n\t\tVRC')
vrcSuctPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcSuctPtIndex.setStatus('current')
if mibBuilder.loadTexts: vrcSuctPtIndex.setDescription('Unique id for each entry in the table')
vrcSuctPtName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSuctPtName.setStatus('current')
if mibBuilder.loadTexts: vrcSuctPtName.setDescription('Suction name (factory-assigned)')
vrcSuctPtTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20, 1, 3), Integer32()).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSuctPtTemp.setStatus('current')
if mibBuilder.loadTexts: vrcSuctPtTemp.setDescription('Suction temperature in tenths of a degree. Units are given by\n\t\ttemperatureUnits field in deviceInfo. The range is determined by the\n\t\tcurrent temperature units.\n\t\tCelsius:    -400 to 1000\n\t\tFahrenheit: -400 to 2120')
vrcSuctPtPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 173))).setUnits('decibars').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSuctPtPressure.setStatus('current')
if mibBuilder.loadTexts: vrcSuctPtPressure.setDescription('Suction air pressure in tenths of a bar')
vrcSuctPtSuperHeatTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20, 1, 5), Integer32()).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSuctPtSuperHeatTemp.setStatus('current')
if mibBuilder.loadTexts: vrcSuctPtSuperHeatTemp.setDescription('Suction super heat temperature in tenths of a degree. Units are given\n\t\tby temperatureUnits field in deviceInfo. The range is determined by\n\t\tthe current temperature units.\n\t\tCelsius:    -400 to 1000\n\t\tFahrenheit: -400 to 2120')
vrcSuctPtTempSensorFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 20, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrcSuctPtTempSensorFailAlarm.setStatus('current')
if mibBuilder.loadTexts: vrcSuctPtTempSensorFailAlarm.setDescription('Suction temperature sensor failure alarm state')
vrcSuctCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 21), )
if mibBuilder.loadTexts: vrcSuctCfgTable.setStatus('current')
if mibBuilder.loadTexts: vrcSuctCfgTable.setDescription('Table used for VRC suction configuration')
vrcSuctCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 21, 1), ).setIndexNames((0, "VERTIV-V5-MIB", "vrcSuctCfgIndex"))
if mibBuilder.loadTexts: vrcSuctCfgEntry.setStatus('current')
if mibBuilder.loadTexts: vrcSuctCfgEntry.setDescription('Entry in the vrcSuctCfgTable: each entry contains config fields for\n\t\tVRC suction')
vrcSuctCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: vrcSuctCfgIndex.setStatus('current')
if mibBuilder.loadTexts: vrcSuctCfgIndex.setDescription('Unique id for each entry in the table')
vrcSuctCfgPressCalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('decibars').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSuctCfgPressCalValue.setStatus('current')
if mibBuilder.loadTexts: vrcSuctCfgPressCalValue.setDescription('Suction pressure calibration value in tenths of a bar')
vrcSuctCfgTempSensFailAlmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 5, 2, 30, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("suspend", 2), ("open", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrcSuctCfgTempSensFailAlmCtrl.setStatus('current')
if mibBuilder.loadTexts: vrcSuctCfgTempSensFailAlmCtrl.setDescription('Suction temperature sensor failure alarm control:\n\t\t2 = suspend\n\t\t3 = open')
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767))
trapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0))
trapObj = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 1))
trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("warning", 1), ("alarm", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSeverity.setStatus('current')
if mibBuilder.loadTexts: trapSeverity.setDescription('Indicates the severity of the trap:\n\t\t0 = None\n\t\t1 = Warning\n\t\t2 = Alarm')
trapThreshType = MibScalar((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapThreshType.setStatus('current')
if mibBuilder.loadTexts: trapThreshType.setDescription('Only sent for threshold alarms. Identifies the threshold type:\n\t\t1 = Low\n\t\t2 = High')
internalTestNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10101))
if mibBuilder.loadTexts: internalTestNOTIFY.setStatus('current')
if mibBuilder.loadTexts: internalTestNOTIFY.setDescription('Test SNMP Trap')
pduMainAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10305)).setObjects(("VERTIV-V5-MIB", "pduMainAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"))
if mibBuilder.loadTexts: pduMainAvailNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduMainAvailNOTIFY.setDescription('PDU availability trap')
pduMainAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20305)).setObjects(("VERTIV-V5-MIB", "pduMainAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"))
if mibBuilder.loadTexts: pduMainAvailCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduMainAvailCLEAR.setDescription('PDU availability clear trap')
pduTotalRealPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10309)).setObjects(("VERTIV-V5-MIB", "pduTotalRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalRealPowerNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduTotalRealPowerNOTIFY.setDescription('PDU total real power trap')
pduTotalRealPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20309)).setObjects(("VERTIV-V5-MIB", "pduTotalRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalRealPowerCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduTotalRealPowerCLEAR.setDescription('PDU total real power clear trap')
pduTotalApparentPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10310)).setObjects(("VERTIV-V5-MIB", "pduTotalApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalApparentPowerNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduTotalApparentPowerNOTIFY.setDescription('PDU total apparent power trap')
pduTotalApparentPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20310)).setObjects(("VERTIV-V5-MIB", "pduTotalApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalApparentPowerCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduTotalApparentPowerCLEAR.setDescription('PDU total apparent power clear trap')
pduTotalPowerFactorNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10311)).setObjects(("VERTIV-V5-MIB", "pduTotalPowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalPowerFactorNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduTotalPowerFactorNOTIFY.setDescription('PDU total power factor trap')
pduTotalPowerFactorCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20311)).setObjects(("VERTIV-V5-MIB", "pduTotalPowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalPowerFactorCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduTotalPowerFactorCLEAR.setDescription('PDU total power factor clear trap')
pduTotalEnergyNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10312)).setObjects(("VERTIV-V5-MIB", "pduTotalEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalEnergyNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduTotalEnergyNOTIFY.setDescription('PDU total energy trap')
pduTotalEnergyCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20312)).setObjects(("VERTIV-V5-MIB", "pduTotalEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduTotalLabel"))
if mibBuilder.loadTexts: pduTotalEnergyCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduTotalEnergyCLEAR.setDescription('PDU total energy clear trap')
pduPhaseVoltageNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10324)).setObjects(("VERTIV-V5-MIB", "pduPhaseVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseVoltageNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduPhaseVoltageNOTIFY.setDescription('PDU phase voltage trap')
pduPhaseVoltageCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20324)).setObjects(("VERTIV-V5-MIB", "pduPhaseVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseVoltageCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduPhaseVoltageCLEAR.setDescription('PDU phase voltage clear trap')
pduPhaseCurrentNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10328)).setObjects(("VERTIV-V5-MIB", "pduPhaseCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseCurrentNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduPhaseCurrentNOTIFY.setDescription('PDU phase current trap')
pduPhaseCurrentCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20328)).setObjects(("VERTIV-V5-MIB", "pduPhaseCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseCurrentCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduPhaseCurrentCLEAR.setDescription('PDU phase current clear trap')
pduPhaseRealPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10332)).setObjects(("VERTIV-V5-MIB", "pduPhaseRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseRealPowerNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduPhaseRealPowerNOTIFY.setDescription('PDU phase real power trap')
pduPhaseRealPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20332)).setObjects(("VERTIV-V5-MIB", "pduPhaseRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseRealPowerCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduPhaseRealPowerCLEAR.setDescription('PDU phase real power clear trap')
pduPhaseApparentPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10333)).setObjects(("VERTIV-V5-MIB", "pduPhaseApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseApparentPowerNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduPhaseApparentPowerNOTIFY.setDescription('PDU phase apparent power trap')
pduPhaseApparentPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20333)).setObjects(("VERTIV-V5-MIB", "pduPhaseApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseApparentPowerCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduPhaseApparentPowerCLEAR.setDescription('PDU phase apparent power clear trap')
pduPhasePowerFactorNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10334)).setObjects(("VERTIV-V5-MIB", "pduPhasePowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhasePowerFactorNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduPhasePowerFactorNOTIFY.setDescription('PDU phase power factor trap')
pduPhasePowerFactorCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20334)).setObjects(("VERTIV-V5-MIB", "pduPhasePowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhasePowerFactorCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduPhasePowerFactorCLEAR.setDescription('PDU phase power factor clear trap')
pduPhaseEnergyNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10335)).setObjects(("VERTIV-V5-MIB", "pduPhaseEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseEnergyNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduPhaseEnergyNOTIFY.setDescription('PDU phase energy trap')
pduPhaseEnergyCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20335)).setObjects(("VERTIV-V5-MIB", "pduPhaseEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseEnergyCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduPhaseEnergyCLEAR.setDescription('PDU phase energy clear trap')
pduPhaseBalanceNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10337)).setObjects(("VERTIV-V5-MIB", "pduPhaseBalance"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseBalanceNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduPhaseBalanceNOTIFY.setDescription('PDU phase balance trap')
pduPhaseBalanceCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20337)).setObjects(("VERTIV-V5-MIB", "pduPhaseBalance"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseBalanceCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduPhaseBalanceCLEAR.setDescription('PDU phase balance clear trap')
pduPhaseCurrentCrestFactorNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10339)).setObjects(("VERTIV-V5-MIB", "pduPhaseCurrentCrestFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseCurrentCrestFactorNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduPhaseCurrentCrestFactorNOTIFY.setDescription('PDU phase current crest factor trap')
pduPhaseCurrentCrestFactorCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20339)).setObjects(("VERTIV-V5-MIB", "pduPhaseCurrentCrestFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduPhaseLabel"))
if mibBuilder.loadTexts: pduPhaseCurrentCrestFactorCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduPhaseCurrentCrestFactorCLEAR.setDescription('PDU phase current crest factor clear trap')
pduBreakerCurrentNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10354)).setObjects(("VERTIV-V5-MIB", "pduBreakerCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerCurrentNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduBreakerCurrentNOTIFY.setDescription('PDU breaker current trap')
pduBreakerCurrentCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20354)).setObjects(("VERTIV-V5-MIB", "pduBreakerCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerCurrentCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduBreakerCurrentCLEAR.setDescription('PDU breaker current clear trap')
pduBreakerVoltageNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10358)).setObjects(("VERTIV-V5-MIB", "pduBreakerVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerVoltageNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduBreakerVoltageNOTIFY.setDescription('PDU breaker voltage trap')
pduBreakerVoltageCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20358)).setObjects(("VERTIV-V5-MIB", "pduBreakerVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerVoltageCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduBreakerVoltageCLEAR.setDescription('PDU breaker voltage clear trap')
pduBreakerRealPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10362)).setObjects(("VERTIV-V5-MIB", "pduBreakerRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerRealPowerNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduBreakerRealPowerNOTIFY.setDescription('PDU breaker real power trap')
pduBreakerRealPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20362)).setObjects(("VERTIV-V5-MIB", "pduBreakerRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerRealPowerCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduBreakerRealPowerCLEAR.setDescription('PDU breaker real power clear trap')
pduBreakerApparentPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10363)).setObjects(("VERTIV-V5-MIB", "pduBreakerApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerApparentPowerNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduBreakerApparentPowerNOTIFY.setDescription('PDU breaker apparent power trap')
pduBreakerApparentPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20363)).setObjects(("VERTIV-V5-MIB", "pduBreakerApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerApparentPowerCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduBreakerApparentPowerCLEAR.setDescription('PDU breaker apparent power clear trap')
pduBreakerPowerFactorNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10364)).setObjects(("VERTIV-V5-MIB", "pduBreakerPowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerPowerFactorNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduBreakerPowerFactorNOTIFY.setDescription('PDU breaker power factor trap')
pduBreakerPowerFactorCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20364)).setObjects(("VERTIV-V5-MIB", "pduBreakerPowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerPowerFactorCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduBreakerPowerFactorCLEAR.setDescription('PDU breaker power factor clear trap')
pduBreakerEnergyNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10365)).setObjects(("VERTIV-V5-MIB", "pduBreakerEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerEnergyNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduBreakerEnergyNOTIFY.setDescription('PDU breaker energy trap')
pduBreakerEnergyCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20365)).setObjects(("VERTIV-V5-MIB", "pduBreakerEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduBreakerLabel"))
if mibBuilder.loadTexts: pduBreakerEnergyCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduBreakerEnergyCLEAR.setDescription('PDU breaker energy clear trap')
pduLineCurrentNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10374)).setObjects(("VERTIV-V5-MIB", "pduLineCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduLineLabel"))
if mibBuilder.loadTexts: pduLineCurrentNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduLineCurrentNOTIFY.setDescription('PDU line current trap')
pduLineCurrentCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20374)).setObjects(("VERTIV-V5-MIB", "pduLineCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduLineLabel"))
if mibBuilder.loadTexts: pduLineCurrentCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduLineCurrentCLEAR.setDescription('PDU line current clear trap')
pduOutletMeterVoltageNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10385)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterVoltageNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterVoltageNOTIFY.setDescription('PDU outlet voltage trap')
pduOutletMeterVoltageCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20385)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterVoltageCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterVoltageCLEAR.setDescription('PDU outlet voltage clear trap')
pduOutletMeterCurrentNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10389)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterCurrentNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterCurrentNOTIFY.setDescription('PDU outlet current trap')
pduOutletMeterCurrentCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20389)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterCurrent"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterCurrentCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterCurrentCLEAR.setDescription('PDU outlet current clear trap')
pduOutletMeterRealPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10393)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterRealPowerNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterRealPowerNOTIFY.setDescription('PDU outlet real power trap')
pduOutletMeterRealPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20393)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterRealPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterRealPowerCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterRealPowerCLEAR.setDescription('PDU outlet real power clear trap')
pduOutletMeterApparentPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10394)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterApparentPowerNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterApparentPowerNOTIFY.setDescription('PDU outlet apparent power trap')
pduOutletMeterApparentPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20394)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterApparentPower"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterApparentPowerCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterApparentPowerCLEAR.setDescription('PDU outlet apparent power clear trap')
pduOutletMeterPowerFactorNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10395)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterPowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterPowerFactorNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterPowerFactorNOTIFY.setDescription('PDU outlet power factor trap')
pduOutletMeterPowerFactorCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20395)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterPowerFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterPowerFactorCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterPowerFactorCLEAR.setDescription('PDU outlet power factor clear trap')
pduOutletMeterEnergyNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10396)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterEnergyNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterEnergyNOTIFY.setDescription('PDU outlet energy trap')
pduOutletMeterEnergyCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20396)).setObjects(("VERTIV-V5-MIB", "pduOutletMeterEnergy"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletMeterEnergyCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduOutletMeterEnergyCLEAR.setDescription('PDU outlet energy clear trap')
pduOutletCurrentCrestFactorNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10400)).setObjects(("VERTIV-V5-MIB", "pduOutletCurrentCrestFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletCurrentCrestFactorNOTIFY.setStatus('current')
if mibBuilder.loadTexts: pduOutletCurrentCrestFactorNOTIFY.setDescription('PDU outlet current crest factor trap')
pduOutletCurrentCrestFactorCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20400)).setObjects(("VERTIV-V5-MIB", "pduOutletCurrentCrestFactor"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "pduMainLabel"), ("VERTIV-V5-MIB", "pduOutletMeterLabel"))
if mibBuilder.loadTexts: pduOutletCurrentCrestFactorCLEAR.setStatus('current')
if mibBuilder.loadTexts: pduOutletCurrentCrestFactorCLEAR.setDescription('PDU outlet current crest factor clear trap')
tempSensorAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10404)).setObjects(("VERTIV-V5-MIB", "tempSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "tempSensorLabel"))
if mibBuilder.loadTexts: tempSensorAvailNOTIFY.setStatus('current')
if mibBuilder.loadTexts: tempSensorAvailNOTIFY.setDescription('RT availability trap')
tempSensorAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20404)).setObjects(("VERTIV-V5-MIB", "tempSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "tempSensorLabel"))
if mibBuilder.loadTexts: tempSensorAvailCLEAR.setStatus('current')
if mibBuilder.loadTexts: tempSensorAvailCLEAR.setDescription('RT availability clear trap')
tempSensorTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10405)).setObjects(("VERTIV-V5-MIB", "tempSensorTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "tempSensorLabel"))
if mibBuilder.loadTexts: tempSensorTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: tempSensorTempNOTIFY.setDescription('RT temperature trap')
tempSensorTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20405)).setObjects(("VERTIV-V5-MIB", "tempSensorTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "tempSensorLabel"))
if mibBuilder.loadTexts: tempSensorTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: tempSensorTempCLEAR.setDescription('RT temperature clear trap')
airFlowSensorAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10504)).setObjects(("VERTIV-V5-MIB", "airFlowSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorAvailNOTIFY.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorAvailNOTIFY.setDescription('AFHT3 availability trap')
airFlowSensorAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20504)).setObjects(("VERTIV-V5-MIB", "airFlowSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorAvailCLEAR.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorAvailCLEAR.setDescription('AFHT3 availability clear trap')
airFlowSensorTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10505)).setObjects(("VERTIV-V5-MIB", "airFlowSensorTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorTempNOTIFY.setDescription('AFHT3 temperature trap')
airFlowSensorTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20505)).setObjects(("VERTIV-V5-MIB", "airFlowSensorTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorTempCLEAR.setDescription('AFHT3 temperature clear trap')
airFlowSensorFlowNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10506)).setObjects(("VERTIV-V5-MIB", "airFlowSensorFlow"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorFlowNOTIFY.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorFlowNOTIFY.setDescription('AFHT3 airflow trap')
airFlowSensorFlowCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20506)).setObjects(("VERTIV-V5-MIB", "airFlowSensorFlow"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorFlowCLEAR.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorFlowCLEAR.setDescription('AFHT3 airflow clear trap')
airFlowSensorHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10507)).setObjects(("VERTIV-V5-MIB", "airFlowSensorHumidity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorHumidityNOTIFY.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorHumidityNOTIFY.setDescription('AFHT3 humidity trap')
airFlowSensorHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20507)).setObjects(("VERTIV-V5-MIB", "airFlowSensorHumidity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorHumidityCLEAR.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorHumidityCLEAR.setDescription('AFHT3 humidity clear trap')
airFlowSensorDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10508)).setObjects(("VERTIV-V5-MIB", "airFlowSensorDewPoint"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorDewPointNOTIFY.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorDewPointNOTIFY.setDescription('AFHT3 dewpoint trap')
airFlowSensorDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20508)).setObjects(("VERTIV-V5-MIB", "airFlowSensorDewPoint"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "airFlowSensorLabel"))
if mibBuilder.loadTexts: airFlowSensorDewPointCLEAR.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorDewPointCLEAR.setDescription('AFHT3 dewpoint clear trap')
t3hdSensorAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10804)).setObjects(("VERTIV-V5-MIB", "t3hdSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"))
if mibBuilder.loadTexts: t3hdSensorAvailNOTIFY.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorAvailNOTIFY.setDescription('T3HD availability trap')
t3hdSensorAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20804)).setObjects(("VERTIV-V5-MIB", "t3hdSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"))
if mibBuilder.loadTexts: t3hdSensorAvailCLEAR.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorAvailCLEAR.setDescription('T3HD availability clear trap')
t3hdSensorIntTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10806)).setObjects(("VERTIV-V5-MIB", "t3hdSensorIntTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorIntLabel"))
if mibBuilder.loadTexts: t3hdSensorIntTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntTempNOTIFY.setDescription('T3HD Internal temperature trap')
t3hdSensorIntTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20806)).setObjects(("VERTIV-V5-MIB", "t3hdSensorIntTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorIntLabel"))
if mibBuilder.loadTexts: t3hdSensorIntTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntTempCLEAR.setDescription('T3HD Internal temperature clear trap')
t3hdSensorIntHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10807)).setObjects(("VERTIV-V5-MIB", "t3hdSensorIntHumidity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorIntLabel"))
if mibBuilder.loadTexts: t3hdSensorIntHumidityNOTIFY.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntHumidityNOTIFY.setDescription('T3HD Internal humidity trap')
t3hdSensorIntHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20807)).setObjects(("VERTIV-V5-MIB", "t3hdSensorIntHumidity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorIntLabel"))
if mibBuilder.loadTexts: t3hdSensorIntHumidityCLEAR.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntHumidityCLEAR.setDescription('T3HD Internal humidity clear trap')
t3hdSensorIntDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10808)).setObjects(("VERTIV-V5-MIB", "t3hdSensorIntDewPoint"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorIntLabel"))
if mibBuilder.loadTexts: t3hdSensorIntDewPointNOTIFY.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntDewPointNOTIFY.setDescription('T3HD Internal dewpoint trap')
t3hdSensorIntDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20808)).setObjects(("VERTIV-V5-MIB", "t3hdSensorIntDewPoint"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorIntLabel"))
if mibBuilder.loadTexts: t3hdSensorIntDewPointCLEAR.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntDewPointCLEAR.setDescription('T3HD Internal dewpoint clear trap')
t3hdSensorExtATempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10811)).setObjects(("VERTIV-V5-MIB", "t3hdSensorExtATemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorExtALabel"))
if mibBuilder.loadTexts: t3hdSensorExtATempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtATempNOTIFY.setDescription('T3HD External A temperature trap')
t3hdSensorExtATempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20811)).setObjects(("VERTIV-V5-MIB", "t3hdSensorExtATemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorExtALabel"))
if mibBuilder.loadTexts: t3hdSensorExtATempCLEAR.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtATempCLEAR.setDescription('T3HD External A temperature clear trap')
t3hdSensorExtBTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10814)).setObjects(("VERTIV-V5-MIB", "t3hdSensorExtBTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorExtBLabel"))
if mibBuilder.loadTexts: t3hdSensorExtBTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtBTempNOTIFY.setDescription('T3HD External B temperature trap')
t3hdSensorExtBTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20814)).setObjects(("VERTIV-V5-MIB", "t3hdSensorExtBTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "t3hdSensorLabel"), ("VERTIV-V5-MIB", "t3hdSensorExtBLabel"))
if mibBuilder.loadTexts: t3hdSensorExtBTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtBTempCLEAR.setDescription('T3HD External B temperature clear trap')
thdSensorAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10904)).setObjects(("VERTIV-V5-MIB", "thdSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorAvailNOTIFY.setStatus('current')
if mibBuilder.loadTexts: thdSensorAvailNOTIFY.setDescription('THD availability trap')
thdSensorAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20904)).setObjects(("VERTIV-V5-MIB", "thdSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorAvailCLEAR.setStatus('current')
if mibBuilder.loadTexts: thdSensorAvailCLEAR.setDescription('THD availability clear trap')
thdSensorTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10905)).setObjects(("VERTIV-V5-MIB", "thdSensorTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: thdSensorTempNOTIFY.setDescription('THD temperature trap')
thdSensorTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20905)).setObjects(("VERTIV-V5-MIB", "thdSensorTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: thdSensorTempCLEAR.setDescription('THD temperature clear trap')
thdSensorHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10906)).setObjects(("VERTIV-V5-MIB", "thdSensorHumidity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorHumidityNOTIFY.setStatus('current')
if mibBuilder.loadTexts: thdSensorHumidityNOTIFY.setDescription('THD humidity trap')
thdSensorHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20906)).setObjects(("VERTIV-V5-MIB", "thdSensorHumidity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorHumidityCLEAR.setStatus('current')
if mibBuilder.loadTexts: thdSensorHumidityCLEAR.setDescription('THD humidity clear trap')
thdSensorDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 10907)).setObjects(("VERTIV-V5-MIB", "thdSensorDewPoint"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorDewPointNOTIFY.setStatus('current')
if mibBuilder.loadTexts: thdSensorDewPointNOTIFY.setDescription('THD dewpoint trap')
thdSensorDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 20907)).setObjects(("VERTIV-V5-MIB", "thdSensorDewPoint"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "thdSensorLabel"))
if mibBuilder.loadTexts: thdSensorDewPointCLEAR.setStatus('current')
if mibBuilder.loadTexts: thdSensorDewPointCLEAR.setDescription('THD dewpoint clear trap')
a2dSensorAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 11104)).setObjects(("VERTIV-V5-MIB", "a2dSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "a2dSensorLabel"))
if mibBuilder.loadTexts: a2dSensorAvailNOTIFY.setStatus('current')
if mibBuilder.loadTexts: a2dSensorAvailNOTIFY.setDescription('A2D availability trap')
a2dSensorAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 21104)).setObjects(("VERTIV-V5-MIB", "a2dSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "a2dSensorLabel"))
if mibBuilder.loadTexts: a2dSensorAvailCLEAR.setStatus('current')
if mibBuilder.loadTexts: a2dSensorAvailCLEAR.setDescription('A2D availability clear trap')
a2dSensorValueNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 11105)).setObjects(("VERTIV-V5-MIB", "a2dSensorValue"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "a2dSensorLabel"), ("VERTIV-V5-MIB", "a2dSensorAnalogLabel"), ("VERTIV-V5-MIB", "a2dSensorDisplayValue"))
if mibBuilder.loadTexts: a2dSensorValueNOTIFY.setStatus('current')
if mibBuilder.loadTexts: a2dSensorValueNOTIFY.setDescription('A2D measurement trap')
a2dSensorValueCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 21105)).setObjects(("VERTIV-V5-MIB", "a2dSensorValue"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "a2dSensorLabel"), ("VERTIV-V5-MIB", "a2dSensorAnalogLabel"), ("VERTIV-V5-MIB", "a2dSensorDisplayValue"))
if mibBuilder.loadTexts: a2dSensorValueCLEAR.setStatus('current')
if mibBuilder.loadTexts: a2dSensorValueCLEAR.setDescription('A2D measurement clear trap')
humiditySensorAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 11204)).setObjects(("VERTIV-V5-MIB", "humiditySensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "humiditySensorLabel"))
if mibBuilder.loadTexts: humiditySensorAvailNOTIFY.setStatus('current')
if mibBuilder.loadTexts: humiditySensorAvailNOTIFY.setDescription('Remote humidity availability trap')
humiditySensorAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 21204)).setObjects(("VERTIV-V5-MIB", "humiditySensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "humiditySensorLabel"))
if mibBuilder.loadTexts: humiditySensorAvailCLEAR.setStatus('current')
if mibBuilder.loadTexts: humiditySensorAvailCLEAR.setDescription('Remote humidity availability clear trap')
humiditySensorValueNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 11205)).setObjects(("VERTIV-V5-MIB", "humiditySensorValue"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "humiditySensorLabel"))
if mibBuilder.loadTexts: humiditySensorValueNOTIFY.setStatus('current')
if mibBuilder.loadTexts: humiditySensorValueNOTIFY.setDescription('Remote humidity value trap')
humiditySensorValueCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 21205)).setObjects(("VERTIV-V5-MIB", "humiditySensorValue"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "humiditySensorLabel"))
if mibBuilder.loadTexts: humiditySensorValueCLEAR.setStatus('current')
if mibBuilder.loadTexts: humiditySensorValueCLEAR.setDescription('Remote humidity value clear trap')
sn2dSensorAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 11304)).setObjects(("VERTIV-V5-MIB", "sn2dSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "sn2dSensorLabel"))
if mibBuilder.loadTexts: sn2dSensorAvailNOTIFY.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorAvailNOTIFY.setDescription('SN-2D availability trap')
sn2dSensorAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 21304)).setObjects(("VERTIV-V5-MIB", "sn2dSensorAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "sn2dSensorLabel"))
if mibBuilder.loadTexts: sn2dSensorAvailCLEAR.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorAvailCLEAR.setDescription('SN-2D availability clear trap')
sn2dSensorDoor1StateNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 11306)).setObjects(("VERTIV-V5-MIB", "sn2dSensorDoor1State"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "sn2dSensorLabel"), ("VERTIV-V5-MIB", "sn2dSensorDoor1Label"), ("VERTIV-V5-MIB", "sn2dSensorDoor1DisplayState"))
if mibBuilder.loadTexts: sn2dSensorDoor1StateNOTIFY.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorDoor1StateNOTIFY.setDescription('SN-2D Door switch 1 state trap')
sn2dSensorDoor1StateCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 21306)).setObjects(("VERTIV-V5-MIB", "sn2dSensorDoor1State"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "sn2dSensorLabel"), ("VERTIV-V5-MIB", "sn2dSensorDoor1Label"), ("VERTIV-V5-MIB", "sn2dSensorDoor1DisplayState"))
if mibBuilder.loadTexts: sn2dSensorDoor1StateCLEAR.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorDoor1StateCLEAR.setDescription('SN-2D Door switch 1 state clear trap')
sn2dSensorDoor2StateNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 11309)).setObjects(("VERTIV-V5-MIB", "sn2dSensorDoor2State"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "sn2dSensorLabel"), ("VERTIV-V5-MIB", "sn2dSensorDoor2Label"), ("VERTIV-V5-MIB", "sn2dSensorDoor2DisplayState"))
if mibBuilder.loadTexts: sn2dSensorDoor2StateNOTIFY.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorDoor2StateNOTIFY.setDescription('SN-2D Door switch 2 state trap')
sn2dSensorDoor2StateCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 21309)).setObjects(("VERTIV-V5-MIB", "sn2dSensorDoor2State"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "sn2dSensorLabel"), ("VERTIV-V5-MIB", "sn2dSensorDoor2Label"), ("VERTIV-V5-MIB", "sn2dSensorDoor2DisplayState"))
if mibBuilder.loadTexts: sn2dSensorDoor2StateCLEAR.setStatus('current')
if mibBuilder.loadTexts: sn2dSensorDoor2StateCLEAR.setDescription('SN-2D Door switch 2 state clear trap')
vrcMainAvailNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13001)).setObjects(("VERTIV-V5-MIB", "vrcMainAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcMainAvailNOTIFY.setStatus('current')
if mibBuilder.loadTexts: vrcMainAvailNOTIFY.setDescription('VRC availability trap')
vrcMainAvailCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23001)).setObjects(("VERTIV-V5-MIB", "vrcMainAvail"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcMainAvailCLEAR.setStatus('current')
if mibBuilder.loadTexts: vrcMainAvailCLEAR.setDescription('VRC availability clear trap')
vrcOutFanPtSpeedNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13002)).setObjects(("VERTIV-V5-MIB", "vrcOutFanPtSpeed"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcOutFanPtSpeedNOTIFY.setStatus('current')
if mibBuilder.loadTexts: vrcOutFanPtSpeedNOTIFY.setDescription('VRC out-fan speed trap')
vrcOutFanPtSpeedCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23002)).setObjects(("VERTIV-V5-MIB", "vrcOutFanPtSpeed"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcOutFanPtSpeedCLEAR.setStatus('current')
if mibBuilder.loadTexts: vrcOutFanPtSpeedCLEAR.setDescription('VRC out-fan speed clear trap')
vrcCompPtCapacityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13003)).setObjects(("VERTIV-V5-MIB", "vrcCompPtCapacity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcCompPtCapacityNOTIFY.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtCapacityNOTIFY.setDescription('VRC compressor capacity trap')
vrcCompPtCapacityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23003)).setObjects(("VERTIV-V5-MIB", "vrcCompPtCapacity"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcCompPtCapacityCLEAR.setStatus('current')
if mibBuilder.loadTexts: vrcCompPtCapacityCLEAR.setDescription('VRC compressor capacity clear trap')
vrcReturnPtTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13004)).setObjects(("VERTIV-V5-MIB", "vrcReturnPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcReturnPtTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: vrcReturnPtTempNOTIFY.setDescription('VRC return temperature trap')
vrcReturnPtTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23004)).setObjects(("VERTIV-V5-MIB", "vrcReturnPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcReturnPtTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: vrcReturnPtTempCLEAR.setDescription('VRC return temperature clear trap')
vrcSupplyPtTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13005)).setObjects(("VERTIV-V5-MIB", "vrcSupplyPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcSupplyPtTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyPtTempNOTIFY.setDescription('VRC supply temperature trap')
vrcSupplyPtTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23005)).setObjects(("VERTIV-V5-MIB", "vrcSupplyPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcSupplyPtTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: vrcSupplyPtTempCLEAR.setDescription('VRC supply temperature clear trap')
vrcPowerPtVoltageNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13006)).setObjects(("VERTIV-V5-MIB", "vrcPowerPtVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcPowerPtVoltageNOTIFY.setStatus('current')
if mibBuilder.loadTexts: vrcPowerPtVoltageNOTIFY.setDescription('VRC power voltage trap')
vrcPowerPtVoltageCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23006)).setObjects(("VERTIV-V5-MIB", "vrcPowerPtVoltage"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcPowerPtVoltageCLEAR.setStatus('current')
if mibBuilder.loadTexts: vrcPowerPtVoltageCLEAR.setDescription('VRC power voltage clear trap')
vrcPowerPtFrequencyNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13007)).setObjects(("VERTIV-V5-MIB", "vrcPowerPtFrequency"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcPowerPtFrequencyNOTIFY.setStatus('current')
if mibBuilder.loadTexts: vrcPowerPtFrequencyNOTIFY.setDescription('VRC power frequency trap')
vrcPowerPtFrequencyCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23007)).setObjects(("VERTIV-V5-MIB", "vrcPowerPtFrequency"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcPowerPtFrequencyCLEAR.setStatus('current')
if mibBuilder.loadTexts: vrcPowerPtFrequencyCLEAR.setDescription('VRC power frequency clear trap')
vrcOutdoorPtTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13008)).setObjects(("VERTIV-V5-MIB", "vrcOutdoorPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcOutdoorPtTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: vrcOutdoorPtTempNOTIFY.setDescription('VRC outdoor temperature trap')
vrcOutdoorPtTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23008)).setObjects(("VERTIV-V5-MIB", "vrcOutdoorPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcOutdoorPtTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: vrcOutdoorPtTempCLEAR.setDescription('VRC outdoor temperature clear trap')
vrcDischPtTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13009)).setObjects(("VERTIV-V5-MIB", "vrcDischPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcDischPtTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: vrcDischPtTempNOTIFY.setDescription('VRC discharge temperature trap')
vrcDischPtTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23009)).setObjects(("VERTIV-V5-MIB", "vrcDischPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcDischPtTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: vrcDischPtTempCLEAR.setDescription('VRC discharge temperature clear trap')
vrcDischPtPressureNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13010)).setObjects(("VERTIV-V5-MIB", "vrcDischPtPressure"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcDischPtPressureNOTIFY.setStatus('current')
if mibBuilder.loadTexts: vrcDischPtPressureNOTIFY.setDescription('VRC discharge pressure trap')
vrcDischPtPressureCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23010)).setObjects(("VERTIV-V5-MIB", "vrcDischPtPressure"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcDischPtPressureCLEAR.setStatus('current')
if mibBuilder.loadTexts: vrcDischPtPressureCLEAR.setDescription('VRC discharge pressure clear trap')
vrcSuctPtTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13011)).setObjects(("VERTIV-V5-MIB", "vrcSuctPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcSuctPtTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: vrcSuctPtTempNOTIFY.setDescription('VRC suction temperature trap')
vrcSuctPtTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23011)).setObjects(("VERTIV-V5-MIB", "vrcSuctPtTemp"), ("VERTIV-V5-MIB", "temperatureUnits"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcSuctPtTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: vrcSuctPtTempCLEAR.setDescription('VRC suction temperature clear trap')
vrcSuctPtPressureNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 13012)).setObjects(("VERTIV-V5-MIB", "vrcSuctPtPressure"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcSuctPtPressureNOTIFY.setStatus('current')
if mibBuilder.loadTexts: vrcSuctPtPressureNOTIFY.setDescription('VRC suction pressure trap')
vrcSuctPtPressureCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 5, 2, 32767, 0, 23012)).setObjects(("VERTIV-V5-MIB", "vrcSuctPtPressure"), ("VERTIV-V5-MIB", "trapThreshType"), ("VERTIV-V5-MIB", "trapSeverity"), ("SNMPv2-MIB", "sysName"), ("VERTIV-V5-MIB", "vrcMainLabel"))
if mibBuilder.loadTexts: vrcSuctPtPressureCLEAR.setStatus('current')
if mibBuilder.loadTexts: vrcSuctPtPressureCLEAR.setDescription('VRC suction pressure clear trap')
common = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 42))
identity = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 42, 1))
i03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 21239, 42, 1, 53))
if mibBuilder.loadTexts: i03.setStatus('current')
if mibBuilder.loadTexts: i03.setDescription('Value given for sysObjectID on IMD3 units')
r05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 21239, 42, 1, 15))
if mibBuilder.loadTexts: r05.setStatus('current')
if mibBuilder.loadTexts: r05.setDescription('Value given for sysObjectID on R-Series units')
mibBuilder.exportSymbols("VERTIV-V5-MIB", vrcOutFanCfgMaxPowerVoltage=vrcOutFanCfgMaxPowerVoltage, t3hdSensorLabel=t3hdSensorLabel, vrcCompCfgStartCapacity=vrcCompCfgStartCapacity, t3hdSensorIntDewPoint=t3hdSensorIntDewPoint, pduOutletMeterApparentPowerNOTIFY=pduOutletMeterApparentPowerNOTIFY, vrcOutFanCfgSpeed=vrcOutFanCfgSpeed, vrcInFanPtName=vrcInFanPtName, productHostname=productHostname, pduPhaseEnergy=pduPhaseEnergy, vrcMainPtComAlarmOutState=vrcMainPtComAlarmOutState, vrcOutFanPtEntry=vrcOutFanPtEntry, pduPhaseCurrentCrestFactor=pduPhaseCurrentCrestFactor, vrcOutFanPtIndex=vrcOutFanPtIndex, vrcSuctPtPressureCLEAR=vrcSuctPtPressureCLEAR, pduOutletSwitchRebootHoldDelay=pduOutletSwitchRebootHoldDelay, t3hdSensorTable=t3hdSensorTable, vrcInFanCfgJumpBand4=vrcInFanCfgJumpBand4, sn2dSensorDoor1Label=sn2dSensorDoor1Label, productPartNumber=productPartNumber, thdSensorIndex=thdSensorIndex, a2dSensorAvail=a2dSensorAvail, vrcCompCfgMinCapacity=vrcCompCfgMinCapacity, pduBreakerEnergy=pduBreakerEnergy, vrcCompPtDriverFaultU10=vrcCompPtDriverFaultU10, vrcDischCfgTable=vrcDischCfgTable, vrcDischPtPressureCLEAR=vrcDischPtPressureCLEAR, vrcMainPtRemoteShutDownFlag=vrcMainPtRemoteShutDownFlag, productFriendlyName=productFriendlyName, pduOutletSwitchLabel=pduOutletSwitchLabel, vrcPowerPtLossOfPhasePowerAlarm=vrcPowerPtLossOfPhasePowerAlarm, vrcSupplyCfgLowTempAlmCtrl=vrcSupplyCfgLowTempAlmCtrl, vrcReturnCfgTempSetting=vrcReturnCfgTempSetting, sn2dSensorDoor2StateNOTIFY=sn2dSensorDoor2StateNOTIFY, vrcCompPtDriverFaultU05=vrcCompPtDriverFaultU05, vrcOutdoorPtTemp=vrcOutdoorPtTemp, pduPhaseRealPowerNOTIFY=pduPhaseRealPowerNOTIFY, vrcInFanCfgReduceSpeedDelay=vrcInFanCfgReduceSpeedDelay, airFlowSensorHumidityCLEAR=airFlowSensorHumidityCLEAR, vrcInFanPtEntry=vrcInFanPtEntry, pduPhaseCurrent=pduPhaseCurrent, vrcMainPtHpAbnRecordCnt=vrcMainPtHpAbnRecordCnt, t3hdSensorEntry=t3hdSensorEntry, vrcMainPtHistoryAlarmNumbers=vrcMainPtHistoryAlarmNumbers, vrcMainCfgHpAlarmCtrl=vrcMainCfgHpAlarmCtrl, pduPhaseRealPower=pduPhaseRealPower, vrcDischPtTempCLEAR=vrcDischPtTempCLEAR, vrcCompPtName=vrcCompPtName, pduPhaseCurrentNOTIFY=pduPhaseCurrentNOTIFY, vrcMainCfgSystemTimeMonth=vrcMainCfgSystemTimeMonth, vrcDischCfgTempCalValue=vrcDischCfgTempCalValue, pduBreakerRealPowerNOTIFY=pduBreakerRealPowerNOTIFY, vrcCompPtDriverFaultU06=vrcCompPtDriverFaultU06, sn2dSensorAvailCLEAR=sn2dSensorAvailCLEAR, pduPhasePowerFactorCLEAR=pduPhasePowerFactorCLEAR, airFlowSensorIndex=airFlowSensorIndex, imd=imd, vertiv=vertiv, vrcMainPtLpFreqAlarm=vrcMainPtLpFreqAlarm, pduOutletMeterVoltage=pduOutletMeterVoltage, thdSensorEntry=thdSensorEntry, vrcMainCfgSystemTimeMin=vrcMainCfgSystemTimeMin, vrcMainName=vrcMainName, vrcMainIndex=vrcMainIndex, temperatureUnits=temperatureUnits, pduLineCurrentNOTIFY=pduLineCurrentNOTIFY, pduLineName=pduLineName, t3hdSensorIntTempCLEAR=t3hdSensorIntTempCLEAR, vrcCompCfgJumpFreq4=vrcCompCfgJumpFreq4, sn2dSensorDoor1DisplayState=sn2dSensorDoor1DisplayState, vrcSuctCfgPressCalValue=vrcSuctCfgPressCalValue, thdSensorHumidityCLEAR=thdSensorHumidityCLEAR, pduPhaseVoltage=pduPhaseVoltage, vrcDischPtName=vrcDischPtName, pduTotalLabel=pduTotalLabel, tempSensorTempCLEAR=tempSensorTempCLEAR, pduOutletMeterRealPowerCLEAR=pduOutletMeterRealPowerCLEAR, pduTotalRealPowerNOTIFY=pduTotalRealPowerNOTIFY, vrcCompPtDriverFaultU11=vrcCompPtDriverFaultU11, vrcSuctPtPressureNOTIFY=vrcSuctPtPressureNOTIFY, vrcCompPtDriverFaultU03=vrcCompPtDriverFaultU03, t3hdSensorIntDewPointNOTIFY=t3hdSensorIntDewPointNOTIFY, humiditySensorTable=humiditySensorTable, vrcPowerPtVoltageNOTIFY=vrcPowerPtVoltageNOTIFY, vrcCompCfgStandardCapacity=vrcCompCfgStandardCapacity, vrcMainCfgSystemTimeHour=vrcMainCfgSystemTimeHour, pduTotalEnergyNOTIFY=pduTotalEnergyNOTIFY, vrcCompPtCapacityCLEAR=vrcCompPtCapacityCLEAR, vrcReturnCfgOilCycle=vrcReturnCfgOilCycle, vrcInFanCfgLowSpeedStep=vrcInFanCfgLowSpeedStep, vrcMainPtRemoteShutdown=vrcMainPtRemoteShutdown, productTitle=productTitle, vrcSuctPtName=vrcSuctPtName, vrcMainPtEevCommFailAlarm=vrcMainPtEevCommFailAlarm, vrcMainPtTable=vrcMainPtTable, vrcOutFanPtSpeed=vrcOutFanPtSpeed, vrcDischCfgHighTempFreqAlmCtrl=vrcDischCfgHighTempFreqAlmCtrl, vrcSuctCfgTable=vrcSuctCfgTable, pduTotalPowerFactorCLEAR=pduTotalPowerFactorCLEAR, vrcPowerPtFrequencyCLEAR=vrcPowerPtFrequencyCLEAR, tempSensorEntry=tempSensorEntry, vrcInFanCfgEntry=vrcInFanCfgEntry, vrcMainPtHpFreqAlarm=vrcMainPtHpFreqAlarm, vrcPowerCfgTable=vrcPowerCfgTable, vrcMainLabel=vrcMainLabel, vrcMainCfgHpSensorFailAlarmCtrl=vrcMainCfgHpSensorFailAlarmCtrl, sn2dSensorLabel=sn2dSensorLabel, vrcCompPtDriverFaultU12=vrcCompPtDriverFaultU12, productMacAddress=productMacAddress, vrcInFanCfgJumpFreq2=vrcInFanCfgJumpFreq2, vrcMainSerial=vrcMainSerial, thdSensorHumidityNOTIFY=thdSensorHumidityNOTIFY, pduOutletSwitchRelayFailure=pduOutletSwitchRelayFailure, pdu=pdu, t3hdSensorSerial=t3hdSensorSerial, pduBreakerVoltageNOTIFY=pduBreakerVoltageNOTIFY, vrcMainPtLpSensorFailAlarm=vrcMainPtLpSensorFailAlarm, t3hdSensorIntTemp=t3hdSensorIntTemp, pduPhaseEntry=pduPhaseEntry, pduPhaseVoltageNOTIFY=pduPhaseVoltageNOTIFY, pduPhaseVoltageCLEAR=pduPhaseVoltageCLEAR, pduPhaseEnergyCLEAR=pduPhaseEnergyCLEAR, vrcInFanCfgTable=vrcInFanCfgTable, vrcCompPtIndex=vrcCompPtIndex, vrcOutdoorPtTempNOTIFY=vrcOutdoorPtTempNOTIFY, pduPhaseEnergyNOTIFY=pduPhaseEnergyNOTIFY, vrcPowerPtName=vrcPowerPtName, vrcCompCfgMinStopTime=vrcCompCfgMinStopTime, trapSeverity=trapSeverity, vrcPowerPtTable=vrcPowerPtTable, pduOutletSwitchOffDelay=pduOutletSwitchOffDelay, pduOutletSwitchTimeToAction=pduOutletSwitchTimeToAction, vrcPowerCfgHighVoltageAlarmCtrl=vrcPowerCfgHighVoltageAlarmCtrl, vrcSupplyCfgEntry=vrcSupplyCfgEntry, airFlowSensorDewPointNOTIFY=airFlowSensorDewPointNOTIFY, vrcCompCfgFaultLockAlmCtrl=vrcCompCfgFaultLockAlmCtrl, vrcSuctPtTempSensorFailAlarm=vrcSuctPtTempSensorFailAlarm, vrcCompCfgJumpFreq1=vrcCompCfgJumpFreq1, vrcCompPtDriverFaultU01=vrcCompPtDriverFaultU01, vrcMainCfgEevValveCloseSht=vrcMainCfgEevValveCloseSht, vrcSuctPtTempNOTIFY=vrcSuctPtTempNOTIFY, pduLineCurrent=pduLineCurrent, vrcCompPtDriverFaultU14=vrcCompPtDriverFaultU14, thdSensorDewPointNOTIFY=thdSensorDewPointNOTIFY, vrcDischPtHighTempFreqAlarm=vrcDischPtHighTempFreqAlarm, a2dSensorValueCLEAR=a2dSensorValueCLEAR, pduPhaseCurrentCLEAR=pduPhaseCurrentCLEAR, airFlowSensorAvailCLEAR=airFlowSensorAvailCLEAR, vrcInFanCfgIndex=vrcInFanCfgIndex, airFlowSensorFlowCLEAR=airFlowSensorFlowCLEAR, pduOutletMeterCurrent=pduOutletMeterCurrent, vrcReturnPtTempNOTIFY=vrcReturnPtTempNOTIFY, vrcInFanCfgTempP=vrcInFanCfgTempP, pduBreakerVoltageCLEAR=pduBreakerVoltageCLEAR, vrcInFanCfgJumpBand2=vrcInFanCfgJumpBand2, vrcInFanCfgJumpBand3=vrcInFanCfgJumpBand3, tempSensorAvailNOTIFY=tempSensorAvailNOTIFY, vrcMainPtAlarmNumbers=vrcMainPtAlarmNumbers, vrcSupplyPtTemp=vrcSupplyPtTemp, pduOutletSwitchName=pduOutletSwitchName, vrcReturnPtTemp=vrcReturnPtTemp, deviceInfo=deviceInfo, vrcCompPtDriverFaultU04=vrcCompPtDriverFaultU04, pduOutletCurrentCrestFactor=pduOutletCurrentCrestFactor, pduTotalEnergyCLEAR=pduTotalEnergyCLEAR, a2dSensorAvailNOTIFY=a2dSensorAvailNOTIFY, airFlowSensorFlow=airFlowSensorFlow, t3hdSensorExtBAvail=t3hdSensorExtBAvail, thdSensorTable=thdSensorTable, vrcPowerCfgLossOfPowerAlarmCtrl=vrcPowerCfgLossOfPowerAlarmCtrl, a2dSensorAvailCLEAR=a2dSensorAvailCLEAR, vrcOutdoorPtIndex=vrcOutdoorPtIndex, thdSensorTempNOTIFY=thdSensorTempNOTIFY, vrcMainCfgOnOffSwitch=vrcMainCfgOnOffSwitch, pduOutletMeterCurrentNOTIFY=pduOutletMeterCurrentNOTIFY, PYSNMP_MODULE_ID=vertiv, vrcOutFanPtName=vrcOutFanPtName, pduMainTable=pduMainTable, airFlowSensorTemp=airFlowSensorTemp, t3hdSensorExtATemp=t3hdSensorExtATemp, thdSensorTemp=thdSensorTemp, sn2dSensorEntry=sn2dSensorEntry, pduBreakerCurrentCLEAR=pduBreakerCurrentCLEAR, vrcOutFanPtTable=vrcOutFanPtTable, vrcMainCfgFilterMaintRemindTime=vrcMainCfgFilterMaintRemindTime, t3hdSensorIndex=t3hdSensorIndex, vrcCompCfgMinRunTime=vrcCompCfgMinRunTime, vrcReturnPtTempCLEAR=vrcReturnPtTempCLEAR, vrcDischPtTempNOTIFY=vrcDischPtTempNOTIFY, vrcPowerPtFrequencyNOTIFY=vrcPowerPtFrequencyNOTIFY, vrcMainCfgSystemTimeYear=vrcMainCfgSystemTimeYear, vrcMainAvailCLEAR=vrcMainAvailCLEAR, vrcMainCfgEevCommFailAlarmCtrl=vrcMainCfgEevCommFailAlarmCtrl, pduTotalPowerFactorNOTIFY=pduTotalPowerFactorNOTIFY, vrcSupplyCfgLowTempAlarmValue=vrcSupplyCfgLowTempAlarmValue, vrcMainCfgModelSelect=vrcMainCfgModelSelect, vrcOutFanCfgTable=vrcOutFanCfgTable, vrcCompPtDriverFaultU15=vrcCompPtDriverFaultU15, internalTestNOTIFY=internalTestNOTIFY, vrcSupplyPtTempNOTIFY=vrcSupplyPtTempNOTIFY, pduOutletMeterPowerFactor=pduOutletMeterPowerFactor, pduBreakerCurrentNOTIFY=pduBreakerCurrentNOTIFY, pduPhaseTable=pduPhaseTable, vrcPowerCfgFreqErrorAlarmCtrl=vrcPowerCfgFreqErrorAlarmCtrl, tempSensorTable=tempSensorTable, vrcMainCfgEevMopPressSetting=vrcMainCfgEevMopPressSetting, pduMainLabel=pduMainLabel, vrcInFanCfgHighSpeedStep=vrcInFanCfgHighSpeedStep, vrcMainAvailNOTIFY=vrcMainAvailNOTIFY, vrcMainCfgEevShtSettingMax=vrcMainCfgEevShtSettingMax, vrcReturnPtName=vrcReturnPtName, airFlowSensorAvail=airFlowSensorAvail, sn2dSensorDoor2DisplayState=sn2dSensorDoor2DisplayState, airFlowSensorTempNOTIFY=airFlowSensorTempNOTIFY, pduPhasePowerFactor=pduPhasePowerFactor, vrcMainPtEntry=vrcMainPtEntry, pduMainSerial=pduMainSerial, pduOutletSwitchOnDelay=pduOutletSwitchOnDelay, vrcCompPtFaultLockAlarm=vrcCompPtFaultLockAlarm, vrcDischPtHighTempAlarm=vrcDischPtHighTempAlarm, pduLineEntry=pduLineEntry, pduPhaseBalance=pduPhaseBalance, vrcMainTable=vrcMainTable, vrcReturnCfgTempSensFailAlmCtrl=vrcReturnCfgTempSensFailAlmCtrl, vrcSupplyPtIndex=vrcSupplyPtIndex, vrcCompCfgTable=vrcCompCfgTable, pduBreakerPowerFactorCLEAR=pduBreakerPowerFactorCLEAR, pduBreakerTable=pduBreakerTable, pduPhasePowerFactorNOTIFY=pduPhasePowerFactorNOTIFY, pduTotalRealPower=pduTotalRealPower, vrcMainCfgHpFreqAlarmCtrl=vrcMainCfgHpFreqAlarmCtrl, thdSensorAvail=thdSensorAvail, vrcMainCfgFilterMaintSetting=vrcMainCfgFilterMaintSetting, vrcInFanCfgJumpFreq3=vrcInFanCfgJumpFreq3, vrcMainCfgDeadBand=vrcMainCfgDeadBand, vrcCompCfgJumpBand2=vrcCompCfgJumpBand2, vrcPowerPtLossOfPowerAlarm=vrcPowerPtLossOfPowerAlarm, pduOutletMeterVoltageCLEAR=pduOutletMeterVoltageCLEAR, pduOutletMeterName=pduOutletMeterName, vrcCompCfgDriverFaultAlmCtrl=vrcCompCfgDriverFaultAlmCtrl, airFlowSensorDewPointCLEAR=airFlowSensorDewPointCLEAR, t3hdSensorExtBTempNOTIFY=t3hdSensorExtBTempNOTIFY, vrcInFanCfgJumpFreq1=vrcInFanCfgJumpFreq1, t3hdSensorExtALabel=t3hdSensorExtALabel, vrcMainCfgLpAlarmCtrl=vrcMainCfgLpAlarmCtrl, vrcSupplyPtTempSensorFailAlarm=vrcSupplyPtTempSensorFailAlarm, vrcMainCfgEevShtSettingMin=vrcMainCfgEevShtSettingMin, t3hdSensorExtBTemp=t3hdSensorExtBTemp, pduTotalApparentPowerNOTIFY=pduTotalApparentPowerNOTIFY, airFlowSensorEntry=airFlowSensorEntry, vrcDischPtEntry=vrcDischPtEntry, vrcSupplyCfgHighTempAlarmValue=vrcSupplyCfgHighTempAlarmValue, pduPhaseApparentPower=pduPhaseApparentPower, pduTotalApparentPower=pduTotalApparentPower, pduPhaseApparentPowerCLEAR=pduPhaseApparentPowerCLEAR)
mibBuilder.exportSymbols("VERTIV-V5-MIB", vrcMainCfgTable=vrcMainCfgTable, pduOutletMeterApparentPower=pduOutletMeterApparentPower, pduMainIndex=pduMainIndex, pduBreakerPowerFactor=pduBreakerPowerFactor, vrcMainCfgFilterMaintRemindCtrl=vrcMainCfgFilterMaintRemindCtrl, vrcMainPtEevOpened=vrcMainPtEevOpened, pduPhaseBalanceCLEAR=pduPhaseBalanceCLEAR, vrcMainCfgHighWaterAlarmCtrl=vrcMainCfgHighWaterAlarmCtrl, t3hdSensorIntHumidity=t3hdSensorIntHumidity, vrcReturnCfgHighTempAlarmCtrl=vrcReturnCfgHighTempAlarmCtrl, vrcOutFanPtSpeedCLEAR=vrcOutFanPtSpeedCLEAR, humiditySensorIndex=humiditySensorIndex, pduOutletSwitchControl=pduOutletSwitchControl, airFlowSensorHumidity=airFlowSensorHumidity, pduPhaseIndex=pduPhaseIndex, sn2dSensorSerial=sn2dSensorSerial, vrcCompCfgJumpFreq5=vrcCompCfgJumpFreq5, pduBreakerEntry=pduBreakerEntry, vrcSuctCfgTempSensFailAlmCtrl=vrcSuctCfgTempSensFailAlmCtrl, vrcMainPtIndex=vrcMainPtIndex, vrcMainPtHmiShutDownFlag=vrcMainPtHmiShutDownFlag, vrcOutdoorPtEntry=vrcOutdoorPtEntry, vrcDischPtIndex=vrcDischPtIndex, pduOutletMeterPowerFactorCLEAR=pduOutletMeterPowerFactorCLEAR, vrcDischCfgEntry=vrcDischCfgEntry, vrcCompCfgJumpBand3=vrcCompCfgJumpBand3, vrcReturnPtTempSensorFailAlarm=vrcReturnPtTempSensorFailAlarm, vrcSupplyPtEntry=vrcSupplyPtEntry, sn2dSensorAvailNOTIFY=sn2dSensorAvailNOTIFY, vrcReturnPtHighTempAlarm=vrcReturnPtHighTempAlarm, pduOutletSwitchTable=pduOutletSwitchTable, vrcCompCfgTempP=vrcCompCfgTempP, vrcSupplyCfgTable=vrcSupplyCfgTable, a2dSensorLabel=a2dSensorLabel, pduBreakerIndex=pduBreakerIndex, t3hdSensorAvailNOTIFY=t3hdSensorAvailNOTIFY, vrcMainPtRemoteShutDownAlarm=vrcMainPtRemoteShutDownAlarm, t3hdSensorAvail=t3hdSensorAvail, airFlowSensorFlowNOTIFY=airFlowSensorFlowNOTIFY, pduBreakerName=pduBreakerName, vrcMainCfgSystemTimeDay=vrcMainCfgSystemTimeDay, pduOutletMeterEnergyCLEAR=pduOutletMeterEnergyCLEAR, humiditySensorAvailNOTIFY=humiditySensorAvailNOTIFY, vrcReturnPtTable=vrcReturnPtTable, vrcMainCfgCommonAlarmOutputDir=vrcMainCfgCommonAlarmOutputDir, vrcDischCfgIndex=vrcDischCfgIndex, vrcMainPtMonitorBaudrate=vrcMainPtMonitorBaudrate, t3hdSensorExtATempCLEAR=t3hdSensorExtATempCLEAR, a2dSensorIndex=a2dSensorIndex, vrcCompCfgJumpFreq3=vrcCompCfgJumpFreq3, pduOutletSwitchState=pduOutletSwitchState, t3hdSensorExtBLabel=t3hdSensorExtBLabel, humiditySensorSerial=humiditySensorSerial, pduTotalName=pduTotalName, airFlowSensorSerial=airFlowSensorSerial, vrcCompCfgJumpFreq2=vrcCompCfgJumpFreq2, pduOutletSwitchPoaDelay=pduOutletSwitchPoaDelay, vrcReturnPtIndex=vrcReturnPtIndex, vrcMainCfgHpAbnAlarmSetting=vrcMainCfgHpAbnAlarmSetting, thdSensorAvailNOTIFY=thdSensorAvailNOTIFY, thdSensorDewPointCLEAR=thdSensorDewPointCLEAR, r05=r05, vrcSupplyCfgHighTempAlmCtrl=vrcSupplyCfgHighTempAlmCtrl, vrcSupplyPtTempCLEAR=vrcSupplyPtTempCLEAR, pduBreakerLabel=pduBreakerLabel, vrcSupplyCfgTempSensFailAlmCtrl=vrcSupplyCfgTempSensFailAlmCtrl, vrcInFanCfgMinCfc=vrcInFanCfgMinCfc, t3hdSensorExtATempNOTIFY=t3hdSensorExtATempNOTIFY, pduLineIndex=pduLineIndex, vrcInFanCfgOutputStatus=vrcInFanCfgOutputStatus, a2dSensorSerial=a2dSensorSerial, vrcMainPtHpAlarm=vrcMainPtHpAlarm, a2dSensorEntry=a2dSensorEntry, pduOutletMeterEnergyNOTIFY=pduOutletMeterEnergyNOTIFY, t3hdSensorIntHumidityNOTIFY=t3hdSensorIntHumidityNOTIFY, vrcOutdoorPtTable=vrcOutdoorPtTable, t3hdSensorAvailCLEAR=t3hdSensorAvailCLEAR, sn2dSensorDoor2Label=sn2dSensorDoor2Label, vrcReturnCfgTempCalValue=vrcReturnCfgTempCalValue, pduBreakerEnergyNOTIFY=pduBreakerEnergyNOTIFY, vrcCompCfgStopCfc=vrcCompCfgStopCfc, vrcDischPtPressureNOTIFY=vrcDischPtPressureNOTIFY, vrcReturnCfgIndex=vrcReturnCfgIndex, vrcReturnCfgOilRunTime=vrcReturnCfgOilRunTime, pduBreakerEnergyCLEAR=pduBreakerEnergyCLEAR, humiditySensorAvailCLEAR=humiditySensorAvailCLEAR, vrcMainPtHpSensorFailAlarm=vrcMainPtHpSensorFailAlarm, vrcCompPtRunTimeHours=vrcCompPtRunTimeHours, sn2dSensorTable=sn2dSensorTable, sn2dSensorAvail=sn2dSensorAvail, vrcPowerPtFrequencyErrorAlarm=vrcPowerPtFrequencyErrorAlarm, vrcCompPtCapacityNOTIFY=vrcCompPtCapacityNOTIFY, productModelNumber=productModelNumber, vrcMainPtHighWaterAlarm=vrcMainPtHighWaterAlarm, vrcPowerCfgHighVoltageSetting=vrcPowerCfgHighVoltageSetting, pduPhaseName=pduPhaseName, vrcDischCfgHighTempAlmCtrl=vrcDischCfgHighTempAlmCtrl, vrcOutdoorPtTempCLEAR=vrcOutdoorPtTempCLEAR, pduBreakerRealPower=pduBreakerRealPower, vrcInFanCfgJumpBand1=vrcInFanCfgJumpBand1, vrcCompCfgOutputDeadBand=vrcCompCfgOutputDeadBand, vrcMainPtCoolingFlag=vrcMainPtCoolingFlag, vrcInFanCfgStandardSpeed=vrcInFanCfgStandardSpeed, vrcSuctPtPressure=vrcSuctPtPressure, vrcCompCfgEntry=vrcCompCfgEntry, vrcInFanCfgJumpBand5=vrcInFanCfgJumpBand5, vrcCompPtStartStopCount=vrcCompPtStartStopCount, vrcReturnCfgTable=vrcReturnCfgTable, vrcInFanCfgTempI=vrcInFanCfgTempI, thdSensorTempCLEAR=thdSensorTempCLEAR, vrcMainCfgControlMode=vrcMainCfgControlMode, pduBreakerRealPowerCLEAR=pduBreakerRealPowerCLEAR, pduOutletMeterEnergy=pduOutletMeterEnergy, tempSensorAvail=tempSensorAvail, vrcCompPtDriverFaultU02=vrcCompPtDriverFaultU02, vrcDischCfgTempSensFailAlmCtrl=vrcDischCfgTempSensFailAlmCtrl, vrcInFanCfgTempD=vrcInFanCfgTempD, vrcCompPtDriverCommFailAlarm=vrcCompPtDriverCommFailAlarm, deviceCount=deviceCount, t3hdSensorExtAAvail=t3hdSensorExtAAvail, airFlowSensorLabel=airFlowSensorLabel, vrcMainAvail=vrcMainAvail, pduOutletSwitchIndex=pduOutletSwitchIndex, a2dSensorHighLabel=a2dSensorHighLabel, trapPrefix=trapPrefix, productPlatform=productPlatform, vrcSuctPtTempCLEAR=vrcSuctPtTempCLEAR, vrcSupplyCfgIndex=vrcSupplyCfgIndex, a2dSensorValueNOTIFY=a2dSensorValueNOTIFY, a2dSensorAnalogLabel=a2dSensorAnalogLabel, sn2dSensorDoor1StateCLEAR=sn2dSensorDoor1StateCLEAR, productVersion=productVersion, vrcMainEntry=vrcMainEntry, vrcMainPtRunState=vrcMainPtRunState, vrcMainPtWaterUnderFloorAlarm=vrcMainPtWaterUnderFloorAlarm, vrcPowerPtHighVoltageAlarm=vrcPowerPtHighVoltageAlarm, pduPhaseApparentPowerNOTIFY=pduPhaseApparentPowerNOTIFY, pduLineLabel=pduLineLabel, vrcCompCfgStartCfc=vrcCompCfgStartCfc, vrcSuctPtTemp=vrcSuctPtTemp, vrcPowerPtFrequency=vrcPowerPtFrequency, pduOutletMeterIndex=pduOutletMeterIndex, pduTotalPowerFactor=pduTotalPowerFactor, a2dSensorLowLabel=a2dSensorLowLabel, vrcPowerCfgLowVoltageSetting=vrcPowerCfgLowVoltageSetting, pduBreakerCurrent=pduBreakerCurrent, a2dSensorMode=a2dSensorMode, tempSensorSerial=tempSensorSerial, tempSensorTempNOTIFY=tempSensorTempNOTIFY, vrcCompCfgIndex=vrcCompCfgIndex, a2dSensorTable=a2dSensorTable, vrcCompCfgTempI=vrcCompCfgTempI, vrcInFanCfgStartDelay=vrcInFanCfgStartDelay, vrcCompPtDriverFaultU00=vrcCompPtDriverFaultU00, vrcCompPtDriverFaultU13=vrcCompPtDriverFaultU13, vrcOutFanCfgStartPress=vrcOutFanCfgStartPress, pduOutletMeterEntry=pduOutletMeterEntry, vrcDischPtTempSensorFailAlarm=vrcDischPtTempSensorFailAlarm, pduBreakerApparentPower=pduBreakerApparentPower, vrcMainCfgIndex=vrcMainCfgIndex, t3hdSensorExtBTempCLEAR=t3hdSensorExtBTempCLEAR, vrcOutdoorPtName=vrcOutdoorPtName, pduMainAvail=pduMainAvail, t3hdSensorIntHumidityCLEAR=t3hdSensorIntHumidityCLEAR, vrcOutFanCfgIndex=vrcOutFanCfgIndex, vrcSuctPtIndex=vrcSuctPtIndex, pduLineTable=pduLineTable, vrcReturnCfgEntry=vrcReturnCfgEntry, vrcCompPtDriverFaultU09=vrcCompPtDriverFaultU09, vrcInFanCfgJumpFreq5=vrcInFanCfgJumpFreq5, vrcInFanPtRunTimeHours=vrcInFanPtRunTimeHours, vrcPowerPtIndex=vrcPowerPtIndex, vrcMainCfgManualRunEnable=vrcMainCfgManualRunEnable, vrcReturnCfgOilRunCapacity=vrcReturnCfgOilRunCapacity, pduPhaseCurrentCrestFactorCLEAR=pduPhaseCurrentCrestFactorCLEAR, vrcCompPtDriverFaultU07=vrcCompPtDriverFaultU07, vrcDischPtTemp=vrcDischPtTemp, common=common, vrcMainCfgLpdt=vrcMainCfgLpdt, vrcMainPtNewAlarmFlag=vrcMainPtNewAlarmFlag, vrcSupplyPtHighTempAlarm=vrcSupplyPtHighTempAlarm, vrc=vrc, pduMainAvailNOTIFY=pduMainAvailNOTIFY, pduMainEntry=pduMainEntry, a2dSensorUnits=a2dSensorUnits, vrcMainPtMonitorAddress=vrcMainPtMonitorAddress, trapObj=trapObj, vrcPowerPtEntry=vrcPowerPtEntry, vrcReturnCfgHighTempAlarmValue=vrcReturnCfgHighTempAlarmValue, vrcMainCfgSystemTimeSec=vrcMainCfgSystemTimeSec, vrcCompCfgOutputStatus=vrcCompCfgOutputStatus, pduPhaseLabel=pduPhaseLabel, tempSensorIndex=tempSensorIndex, vrcCompCfgJumpBand1=vrcCompCfgJumpBand1, airFlowSensorDewPoint=airFlowSensorDewPoint, productSerialNumber=productSerialNumber, airFlowSensorHumidityNOTIFY=airFlowSensorHumidityNOTIFY, vrcInFanCfgMinSpeed=vrcInFanCfgMinSpeed, airFlowSensorAvailNOTIFY=airFlowSensorAvailNOTIFY, vrcCompCfgJumpBand4=vrcCompCfgJumpBand4, vrcSupplyPtTable=vrcSupplyPtTable, pduPhaseBalanceNOTIFY=pduPhaseBalanceNOTIFY, trap=trap, vrcMainPtLpAlarm=vrcMainPtLpAlarm, i03=i03, vrcMainCfgLpFreqAlarmCtrl=vrcMainCfgLpFreqAlarmCtrl, pduPhaseRealPowerCLEAR=pduPhaseRealPowerCLEAR, productAlarmCount=productAlarmCount, vrcOutFanCfgMinPowerVoltage=vrcOutFanCfgMinPowerVoltage, vrcMainPtSwShutDownStatus=vrcMainPtSwShutDownStatus, pduOutletMeterVoltageNOTIFY=pduOutletMeterVoltageNOTIFY, vrcMainCfgVacuumState=vrcMainCfgVacuumState, vrcMainCfgMonitorShutDownFlag=vrcMainCfgMonitorShutDownFlag, tempSensorAvailCLEAR=tempSensorAvailCLEAR, vrcCompCfgTempD=vrcCompCfgTempD, vrcReturnPtEntry=vrcReturnPtEntry, pduOutletCurrentCrestFactorCLEAR=pduOutletCurrentCrestFactorCLEAR, vrcMainCfgRemShutdownAlarmCtrl=vrcMainCfgRemShutdownAlarmCtrl, pduTotalApparentPowerCLEAR=pduTotalApparentPowerCLEAR, pduBreakerApparentPowerNOTIFY=pduBreakerApparentPowerNOTIFY, humiditySensorValue=humiditySensorValue, vrcCompPtEntry=vrcCompPtEntry, thdSensorAvailCLEAR=thdSensorAvailCLEAR, vrcPowerCfgIndex=vrcPowerCfgIndex, vrcMainPtHighWaterInput=vrcMainPtHighWaterInput, pduBreakerApparentPowerCLEAR=pduBreakerApparentPowerCLEAR, vrcInFanPtStartStopCount=vrcInFanPtStartStopCount, vrcInFanCfgJumpFreq4=vrcInFanCfgJumpFreq4, airFlowSensorTempCLEAR=airFlowSensorTempCLEAR, pduOutletCurrentCrestFactorNOTIFY=pduOutletCurrentCrestFactorNOTIFY, a2dSensorMin=a2dSensorMin, humiditySensorEntry=humiditySensorEntry, vrcSuctCfgEntry=vrcSuctCfgEntry, sn2dSensorDoor2StateCLEAR=sn2dSensorDoor2StateCLEAR, trapThreshType=trapThreshType, vrcOutFanCfgEntry=vrcOutFanCfgEntry, vrcSuctCfgIndex=vrcSuctCfgIndex, vrcMainCfgRemShutdownInput=vrcMainCfgRemShutdownInput, vrcInFanCfgStopDelay=vrcInFanCfgStopDelay, pduOutletMeterTable=pduOutletMeterTable, pduOutletMeterRealPowerNOTIFY=pduOutletMeterRealPowerNOTIFY, vrcDischCfgPressCalValue=vrcDischCfgPressCalValue, vrcSuctPtSuperHeatTemp=vrcSuctPtSuperHeatTemp, vrcPowerPtVoltageCLEAR=vrcPowerPtVoltageCLEAR, vrcCompPtCapacity=vrcCompPtCapacity, pduBreakerPowerFactorNOTIFY=pduBreakerPowerFactorNOTIFY, productManufacturer=productManufacturer, humiditySensorAvail=humiditySensorAvail, sn2dSensorDoor2State=sn2dSensorDoor2State, pduOutletMeterLabel=pduOutletMeterLabel, pduOutletMeterReset=pduOutletMeterReset, vrcMainPtLp=vrcMainPtLp, pduOutletSwitchEntry=pduOutletSwitchEntry, productWarnCount=productWarnCount)
mibBuilder.exportSymbols("VERTIV-V5-MIB", vrcOutFanCfgPressSetting=vrcOutFanCfgPressSetting, vrcPowerPtLowVoltageAlarm=vrcPowerPtLowVoltageAlarm, vrcCompCfgJumpBand5=vrcCompCfgJumpBand5, pduTotalEnergy=pduTotalEnergy, tempSensorTemp=tempSensorTemp, v5=v5, sn2dSensorDoor1StateNOTIFY=sn2dSensorDoor1StateNOTIFY, humiditySensorValueCLEAR=humiditySensorValueCLEAR, vrcSupplyPtName=vrcSupplyPtName, vrcCompCfgCapacityOutputValue=vrcCompCfgCapacityOutputValue, thdSensorSerial=thdSensorSerial, vrcSupplyCfgTempSetting=vrcSupplyCfgTempSetting, vrcOutFanPtSpeedNOTIFY=vrcOutFanPtSpeedNOTIFY, pduMainAvailCLEAR=pduMainAvailCLEAR, t3hdSensorIntTempNOTIFY=t3hdSensorIntTempNOTIFY, humiditySensorLabel=humiditySensorLabel, vrcDischPtPressure=vrcDischPtPressure, cooling=cooling, vrcInFanCfgStandardCfc=vrcInFanCfgStandardCfc, pduOutletMeterRealPower=pduOutletMeterRealPower, thdSensorLabel=thdSensorLabel, vrcMainPtFilterMaintRemind=vrcMainPtFilterMaintRemind, pduPhaseCurrentCrestFactorNOTIFY=pduPhaseCurrentCrestFactorNOTIFY, pduMeterType=pduMeterType, vrcSupplyPtLowTempAlarm=vrcSupplyPtLowTempAlarm, a2dSensorMax=a2dSensorMax, pduOutletMeterCurrentCLEAR=pduOutletMeterCurrentCLEAR, vrcMainPtFirstOnFlag=vrcMainPtFirstOnFlag, vrcDischPtTable=vrcDischPtTable, vrcSuctPtTable=vrcSuctPtTable, pduBreakerVoltage=pduBreakerVoltage, pduLineCurrentCLEAR=pduLineCurrentCLEAR, vrcCompCfgDriverCommFailAlmCtrl=vrcCompCfgDriverCommFailAlmCtrl, humiditySensorValueNOTIFY=humiditySensorValueNOTIFY, pduOutletSwitchPoaAction=pduOutletSwitchPoaAction, pduOutletMeterApparentPowerCLEAR=pduOutletMeterApparentPowerCLEAR, t3hdSensorIntLabel=t3hdSensorIntLabel, sn2dSensorDoor1State=sn2dSensorDoor1State, vrcInFanPtTable=vrcInFanPtTable, vrcCompPtDriverFaultU08=vrcCompPtDriverFaultU08, pduOutletMeterPowerFactorNOTIFY=pduOutletMeterPowerFactorNOTIFY, vrcMainCfgFirstOnPassword=vrcMainCfgFirstOnPassword, vrcSuctPtEntry=vrcSuctPtEntry, pduTotalRealPowerCLEAR=pduTotalRealPowerCLEAR, a2dSensorValue=a2dSensorValue, vrcSupplyCfgTempCalValue=vrcSupplyCfgTempCalValue, vrcCompPtTable=vrcCompPtTable, thdSensorDewPoint=thdSensorDewPoint, identity=identity, vrcPowerPtVoltage=vrcPowerPtVoltage, t3hdSensorIntDewPointCLEAR=t3hdSensorIntDewPointCLEAR, vrcMainCfgLpSensorFailAlarmCtrl=vrcMainCfgLpSensorFailAlarmCtrl, pduMainName=pduMainName, pduOutletSwitchRebootDelay=pduOutletSwitchRebootDelay, thdSensorHumidity=thdSensorHumidity, vrcMainCfgEntry=vrcMainCfgEntry, sn2dSensorIndex=sn2dSensorIndex, vrcPowerCfgLowVoltageAlarmCtrl=vrcPowerCfgLowVoltageAlarmCtrl, airFlowSensorTable=airFlowSensorTable, vrcPowerCfgEntry=vrcPowerCfgEntry, vrcInFanPtIndex=vrcInFanPtIndex, a2dSensorDisplayValue=a2dSensorDisplayValue, tempSensorLabel=tempSensorLabel)
