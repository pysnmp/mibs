#
# PySNMP MIB module IMCO-BIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/imco/IMCO-BIG-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:12:35 2024
# On host fv-az692-788 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, TimeTicks, MibIdentifier, Integer32, NotificationType, enterprises, Counter32, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, Unsigned32, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "MibIdentifier", "Integer32", "NotificationType", "enterprises", "Counter32", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "iso")
TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp")
netPartner = MibIdentifier((1, 3, 6, 1, 4, 1, 2185))
npModules = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1))
npProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 2))
imcoMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2185, 1, 3))
imcoMIB.setRevisions(('2006-03-20 10:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: imcoMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: imcoMIB.setLastUpdated('200603201030Z')
if mibBuilder.loadTexts: imcoMIB.setOrganization('NetPartner')
if mibBuilder.loadTexts: imcoMIB.setContactInfo('        Jaroslav Spacek\n             Postal: Psohlavcu 322/4\n\t\t     Praha 4\n                     Czech Republic\n\n                Tel: +420 2 61309111\n                Fax: +420 2 61309111\n\n             E-mail: netpartner@netpartner.cz')
if mibBuilder.loadTexts: imcoMIB.setDescription('The MIB module DC-power IMCO.')
class PositiveInteger(TextualConvention, Integer32):
    description = 'This data type is a non-zero and non-negative value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class NonNegativeInteger(TextualConvention, Integer32):
    description = 'This data type is a non-negative value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

imcoObjects3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11))
imco3Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 1))
imco3IdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imco3IdentManufacturer.setStatus('current')
if mibBuilder.loadTexts: imco3IdentManufacturer.setDescription('???.')
imco3IdentModel = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imco3IdentModel.setStatus('current')
if mibBuilder.loadTexts: imco3IdentModel.setDescription('???.')
imco3IdentSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imco3IdentSwVersion.setStatus('current')
if mibBuilder.loadTexts: imco3IdentSwVersion.setDescription('???.')
imco3IdentAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imco3IdentAgentVersion.setStatus('current')
if mibBuilder.loadTexts: imco3IdentAgentVersion.setDescription('???.')
imco3IdentName = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imco3IdentName.setStatus('current')
if mibBuilder.loadTexts: imco3IdentName.setDescription('???.')
imco3IdentAttachedDevices = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imco3IdentAttachedDevices.setStatus('current')
if mibBuilder.loadTexts: imco3IdentAttachedDevices.setDescription('???.')
imco3IdentPMnumber = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imco3IdentPMnumber.setStatus('current')
if mibBuilder.loadTexts: imco3IdentPMnumber.setDescription('???.')
imco3PanM = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2))
imPanM1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1))
imPanM2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2))
imPanM3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3))
imPanM4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4))
imPM1SystemID = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 1))
imPM1SystemIDManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemIDManufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemIDManufacturer.setDescription('???.')
imPM1SystemIDType = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemIDType.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemIDType.setDescription('???.')
imPM1SystemIDserNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemIDserNumb.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemIDserNumb.setDescription('???.')
imPM1SystemIDnextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemIDnextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemIDnextServiceDate.setDescription('???.')
imPM1SystemIDaddress = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 1, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemIDaddress.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemIDaddress.setDescription('???.')
imPM1SystemIDhwVersion = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 1, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemIDhwVersion.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemIDhwVersion.setDescription('???.')
imPM1SystemIDswVersion = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 1, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemIDswVersion.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemIDswVersion.setDescription('???.')
imPM1SystemIDPMserialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemIDPMserialNumber.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemIDPMserialNumber.setDescription('???.')
imPM1SystemIDbuttonName = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemIDbuttonName.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemIDbuttonName.setDescription('???.')
imPM1SystemGEN = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 2))
imPM1SystemGENSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemGENSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemGENSurgeArrester.setDescription('???.')
imPM1SystemGENDoor1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemGENDoor1.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemGENDoor1.setDescription('???.')
imPM1SystemGENDoor2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemGENDoor2.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemGENDoor2.setDescription('???.')
imPM1SystemGENFan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemGENFan.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemGENFan.setDescription('???.')
imPM1SystemGENuser1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemGENuser1.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemGENuser1.setDescription('???.')
imPM1SystemGENuser2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemGENuser2.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemGENuser2.setDescription('???.')
imPM1SystemGENuser3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemGENuser3.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemGENuser3.setDescription('???.')
imPM1SystemGENuser4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemGENuser4.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemGENuser4.setDescription('???.')
imPM1SystemGENtemperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 2, 9), NonNegativeInteger()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1SystemGENtemperature.setStatus('current')
if mibBuilder.loadTexts: imPM1SystemGENtemperature.setDescription('???.')
imPM1Power1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3))
imPM1Power1Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1Manufacturer.setDescription('???.')
imPM1Power1Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1Type.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1Type.setDescription('???.')
imPM1Power1serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1serNumb.setDescription('???.')
imPM1Power1nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1nextServiceDate.setDescription('???.')
imPm1Power1InputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 5), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputVoltage.setDescription('???.')
imPm1Power1InputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 6), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputCurrent.setDescription('???.')
imPm1Power1InputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 7), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputPowerVA.setDescription('???.')
imPm1Power1InputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 8), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputPowerKVA.setDescription('???.')
imPm1Power1InputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 9), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputPowerW.setDescription('???.')
imPm1Power1InputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 10), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputPowerKW.setDescription('???.')
imPm1Power1InputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 11), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputVoltagePhase1.setDescription('???.')
imPm1Power1InputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 12), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputCurrentPhase1.setDescription('???.')
imPm1Power1InputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 13), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputPowerVAphase1.setDescription('???.')
imPm1Power1InputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 14), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputPowerKVAphase1.setDescription('???.')
imPm1Power1InputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 15), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputVoltagePhase2.setDescription('???.')
imPm1Power1InputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 16), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputCurrentPhase2.setDescription('???.')
imPm1Power1InputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 17), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputPowerVAphase2.setDescription('???.')
imPm1Power1InputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 18), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputPowerKVAphase2.setDescription('???.')
imPm1Power1InputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 19), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputVoltagePhase3.setDescription('???.')
imPm1Power1InputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 20), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputCurrentPhase3.setDescription('???.')
imPm1Power1InputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 21), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputPowerVAphase3.setDescription('???.')
imPm1Power1InputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 22), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1InputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1InputPowerKVAphase3.setDescription('???.')
imPm1Power1OutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 23), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputVoltage.setDescription('???.')
imPm1Power1OutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 24), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputCurrent.setDescription('???.')
imPm1Power1OutputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 25), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputPowerVA.setDescription('???.')
imPm1Power1OutputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 26), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputPowerKVA.setDescription('???.')
imPm1Power1OutputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 27), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputPowerW.setDescription('???.')
imPm1Power1OutputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 28), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputPowerKW.setDescription('???.')
imPm1Power1OutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 29), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputLoad.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputLoad.setDescription('???.')
imPm1Power1OutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 30), NonNegativeInteger()).setUnits('0.1 Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputFrequency.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputFrequency.setDescription('???.')
imPm1Power1Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 31), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1Temperature.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1Temperature.setDescription('???.')
imPM1Power1Running1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1Running1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1Running1.setDescription('???.')
imPM1Power1Running2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1Running2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1Running2.setDescription('???.')
imPM1Power1Running3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1Running3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1Running3.setDescription('???.')
imPM1Power1Running4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1Running4.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1Running4.setDescription('???.')
imPM1Power1Running5 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1Running5.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1Running5.setDescription('???.')
imPM1Power1Running6 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1Running6.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1Running6.setDescription('???.')
imPM1Power1Running7 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1Running7.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1Running7.setDescription('???.')
imPM1Power1Running8 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1Running8.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1Running8.setDescription('???.')
imPM1Power1InputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1InputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1InputFuse.setDescription('???.')
imPM1Power1InputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1InputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1InputFuse1.setDescription('???.')
imPM1Power1InputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1InputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1InputFuse2.setDescription('???.')
imPM1Power1InputFuse3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1InputFuse3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1InputFuse3.setDescription('???.')
imPM1Power1InputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1InputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1InputBreaker.setDescription('???.')
imPM1Power1InputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1InputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1InputBreaker1.setDescription('???.')
imPM1Power1InputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1InputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1InputBreaker2.setDescription('???.')
imPM1Power1InputBreaker3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1InputBreaker3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1InputBreaker3.setDescription('???.')
imPM1Power1InputSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1InputSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1InputSurgeArrester.setDescription('???.')
imPM1Power1OutputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1OutputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1OutputFuse.setDescription('???.')
imPM1Power1OutputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1OutputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1OutputFuse1.setDescription('???.')
imPM1Power1OutputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1OutputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1OutputFuse2.setDescription('???.')
imPM1Power1OutputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1OutputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1OutputBreaker.setDescription('???.')
imPM1Power1OutputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1OutputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1OutputBreaker1.setDescription('???.')
imPM1Power1OutputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1OutputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1OutputBreaker2.setDescription('???.')
imPM1Power1Fan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1Fan.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1Fan.setDescription('???.')
imPM1Power1BatteryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power1BatteryAvailable.setStatus('current')
if mibBuilder.loadTexts: imPM1Power1BatteryAvailable.setDescription('???.')
imPm1Power1OutputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 57), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputVoltagePhase1.setDescription('???.')
imPm1Power1OutputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 58), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputCurrentPhase1.setDescription('???.')
imPm1Power1OutputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 59), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputPowerVAphase1.setDescription('???.')
imPm1Power1OutputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 60), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputPowerKVAphase1.setDescription('???.')
imPm1Power1OutputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 61), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputVoltagePhase2.setDescription('???.')
imPm1Power1OutputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 62), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputCurrentPhase2.setDescription('???.')
imPm1Power1OutputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 63), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputPowerVAphase2.setDescription('???.')
imPm1Power1OutputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 64), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputPowerKVAphase2.setDescription('???.')
imPm1Power1OutputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 65), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputVoltagePhase3.setDescription('???.')
imPm1Power1OutputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 66), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputCurrentPhase3.setDescription('???.')
imPm1Power1OutputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 67), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputPowerVAphase3.setDescription('???.')
imPm1Power1OutputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 3, 68), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power1OutputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power1OutputPowerKVAphase3.setDescription('???.')
imPM1Power2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4))
imPM1Power2Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2Manufacturer.setDescription('???.')
imPM1Power2Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2Type.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2Type.setDescription('???.')
imPM1Power2serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2serNumb.setDescription('???.')
imPM1Power2nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2nextServiceDate.setDescription('???.')
imPm1Power2InputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 5), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputVoltage.setDescription('???.')
imPm1Power2InputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 6), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputCurrent.setDescription('???.')
imPm1Power2InputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 7), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputPowerVA.setDescription('???.')
imPm1Power2InputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 8), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputPowerKVA.setDescription('???.')
imPm1Power2InputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 9), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputPowerW.setDescription('???.')
imPm1Power2InputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 10), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputPowerKW.setDescription('???.')
imPm1Power2InputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 11), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputVoltagePhase1.setDescription('???.')
imPm1Power2InputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 12), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputCurrentPhase1.setDescription('???.')
imPm1Power2InputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 13), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputPowerVAphase1.setDescription('???.')
imPm1Power2InputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 14), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputPowerKVAphase1.setDescription('???.')
imPm1Power2InputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 15), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputVoltagePhase2.setDescription('???.')
imPm1Power2InputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 16), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputCurrentPhase2.setDescription('???.')
imPm1Power2InputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 17), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputPowerVAphase2.setDescription('???.')
imPm1Power2InputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 18), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputPowerKVAphase2.setDescription('???.')
imPm1Power2InputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 19), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputVoltagePhase3.setDescription('???.')
imPm1Power2InputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 20), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputCurrentPhase3.setDescription('???.')
imPm1Power2InputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 21), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputPowerVAphase3.setDescription('???.')
imPm1Power2InputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 22), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2InputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2InputPowerKVAphase3.setDescription('???.')
imPm1Power2OutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 23), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2OutputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2OutputVoltage.setDescription('???.')
imPm1Power2OutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 24), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2OutputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2OutputCurrent.setDescription('???.')
imPm1Power2OutputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 25), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2OutputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2OutputPowerVA.setDescription('???.')
imPm1Power2OutputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 26), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2OutputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2OutputPowerKVA.setDescription('???.')
imPm1Power2OutputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 27), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2OutputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2OutputPowerW.setDescription('???.')
imPm1Power2OutputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 28), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2OutputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2OutputPowerKW.setDescription('???.')
imPm1Power2OutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 29), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2OutputLoad.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2OutputLoad.setDescription('???.')
imPm1Power2OutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 30), NonNegativeInteger()).setUnits('0.1 Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2OutputFrequency.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2OutputFrequency.setDescription('???.')
imPm1Power2Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 31), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power2Temperature.setStatus('current')
if mibBuilder.loadTexts: imPm1Power2Temperature.setDescription('???.')
imPM1Power2Running1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2Running1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2Running1.setDescription('???.')
imPM1Power2Running2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2Running2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2Running2.setDescription('???.')
imPM1Power2Running3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2Running3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2Running3.setDescription('???.')
imPM1Power2Running4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2Running4.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2Running4.setDescription('???.')
imPM1Power2Running5 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2Running5.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2Running5.setDescription('???.')
imPM1Power2Running6 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2Running6.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2Running6.setDescription('???.')
imPM1Power2Running7 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2Running7.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2Running7.setDescription('???.')
imPM1Power2Running8 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2Running8.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2Running8.setDescription('???.')
imPM1Power2InputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2InputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2InputFuse.setDescription('???.')
imPM1Power2InputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2InputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2InputFuse1.setDescription('???.')
imPM1Power2InputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2InputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2InputFuse2.setDescription('???.')
imPM1Power2InputFuse3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2InputFuse3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2InputFuse3.setDescription('???.')
imPM1Power2InputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2InputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2InputBreaker.setDescription('???.')
imPM1Power2InputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2InputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2InputBreaker1.setDescription('???.')
imPM1Power2InputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2InputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2InputBreaker2.setDescription('???.')
imPM1Power2InputBreaker3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2InputBreaker3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2InputBreaker3.setDescription('???.')
imPM1Power2InputSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2InputSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2InputSurgeArrester.setDescription('???.')
imPM1Power2OutputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputFuse.setDescription('???.')
imPM1Power2OutputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputFuse1.setDescription('???.')
imPM1Power2OutputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputFuse2.setDescription('???.')
imPM1Power2OutputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputBreaker.setDescription('???.')
imPM1Power2OutputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputBreaker1.setDescription('???.')
imPM1Power2OutputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputBreaker2.setDescription('???.')
imPM1Power2Fan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2Fan.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2Fan.setDescription('???.')
imPM1Power2BatteryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2BatteryAvailable.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2BatteryAvailable.setDescription('???.')
imPM1Power2OutputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 57), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputVoltagePhase1.setDescription('???.')
imPM1Power2OutputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 58), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputCurrentPhase1.setDescription('???.')
imPM1Power2OutputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 59), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputPowerVAphase1.setDescription('???.')
imPM1Power2OutputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 60), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputPowerKVAphase1.setDescription('???.')
imPM1Power2OutputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 61), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputVoltagePhase2.setDescription('???.')
imPM1Power2OutputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 62), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputCurrentPhase2.setDescription('???.')
imPM1Power2OutputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 63), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputPowerVAphase2.setDescription('???.')
imPM1Power2OutputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 64), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputPowerKVAphase2.setDescription('???.')
imPM1Power2OutputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 65), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputVoltagePhase3.setDescription('???.')
imPM1Power2OutputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 66), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputCurrentPhase3.setDescription('???.')
imPM1Power2OutputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 67), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputPowerVAphase3.setDescription('???.')
imPM1Power2OutputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 4, 68), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power2OutputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power2OutputPowerKVAphase3.setDescription('???.')
imPM1Power3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5))
imPM1Power3Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3Manufacturer.setDescription('???.')
imPM1Power3Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3Type.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3Type.setDescription('???.')
imPM1Power3serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3serNumb.setDescription('???.')
imPM1Power3nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3nextServiceDate.setDescription('???.')
imPm1Power3InputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 5), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputVoltage.setDescription('???.')
imPm1Power3InputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 6), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputCurrent.setDescription('???.')
imPm1Power3InputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 7), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputPowerVA.setDescription('???.')
imPm1Power3InputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 8), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputPowerKVA.setDescription('???.')
imPm1Power3InputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 9), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputPowerW.setDescription('???.')
imPm1Power3InputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 10), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputPowerKW.setDescription('???.')
imPm1Power3InputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 11), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputVoltagePhase1.setDescription('???.')
imPm1Power3InputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 12), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputCurrentPhase1.setDescription('???.')
imPm1Power3InputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 13), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputPowerVAphase1.setDescription('???.')
imPm1Power3InputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 14), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputPowerKVAphase1.setDescription('???.')
imPm1Power3InputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 15), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputVoltagePhase2.setDescription('???.')
imPm1Power3InputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 16), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputCurrentPhase2.setDescription('???.')
imPm1Power3InputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 17), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputPowerVAphase2.setDescription('???.')
imPm1Power3InputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 18), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputPowerKVAphase2.setDescription('???.')
imPm1Power3InputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 19), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputVoltagePhase3.setDescription('???.')
imPm1Power3InputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 20), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputCurrentPhase3.setDescription('???.')
imPm1Power3InputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 21), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputPowerVAphase3.setDescription('???.')
imPm1Power3InputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 22), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3InputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3InputPowerKVAphase3.setDescription('???.')
imPm1Power3OutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 23), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3OutputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3OutputVoltage.setDescription('???.')
imPm1Power3OutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 24), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3OutputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3OutputCurrent.setDescription('???.')
imPm1Power3OutputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 25), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3OutputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3OutputPowerVA.setDescription('???.')
imPm1Power3OutputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 26), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3OutputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3OutputPowerKVA.setDescription('???.')
imPm1Power3OutputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 27), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3OutputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3OutputPowerW.setDescription('???.')
imPm1Power3OutputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 28), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3OutputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3OutputPowerKW.setDescription('???.')
imPm1Power3OutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 29), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3OutputLoad.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3OutputLoad.setDescription('???.')
imPm1Power3OutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 30), NonNegativeInteger()).setUnits('0.1 Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3OutputFrequency.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3OutputFrequency.setDescription('???.')
imPm1Power3Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 31), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Power3Temperature.setStatus('current')
if mibBuilder.loadTexts: imPm1Power3Temperature.setDescription('???.')
imPM1Power3Running1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3Running1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3Running1.setDescription('???.')
imPM1Power3Running2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3Running2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3Running2.setDescription('???.')
imPM1Power3Running3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3Running3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3Running3.setDescription('???.')
imPM1Power3Running4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3Running4.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3Running4.setDescription('???.')
imPM1Power3Running5 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3Running5.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3Running5.setDescription('???.')
imPM1Power3Running6 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3Running6.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3Running6.setDescription('???.')
imPM1Power3Running7 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3Running7.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3Running7.setDescription('???.')
imPM1Power3Running8 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3Running8.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3Running8.setDescription('???.')
imPM1Power3InputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3InputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3InputFuse.setDescription('???.')
imPM1Power3InputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3InputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3InputFuse1.setDescription('???.')
imPM1Power3InputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3InputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3InputFuse2.setDescription('???.')
imPM1Power3InputFuse3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3InputFuse3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3InputFuse3.setDescription('???.')
imPM1Power3InputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3InputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3InputBreaker.setDescription('???.')
imPM1Power3InputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3InputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3InputBreaker1.setDescription('???.')
imPM1Power3InputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3InputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3InputBreaker2.setDescription('???.')
imPM1Power3InputBreaker3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3InputBreaker3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3InputBreaker3.setDescription('???.')
imPM1Power3InputSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3InputSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3InputSurgeArrester.setDescription('???.')
imPM1Power3OutputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputFuse.setDescription('???.')
imPM1Power3OutputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputFuse1.setDescription('???.')
imPM1Power3OutputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputFuse2.setDescription('???.')
imPM1Power3OutputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputBreaker.setDescription('???.')
imPM1Power3OutputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputBreaker1.setDescription('???.')
imPM1Power3OutputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputBreaker2.setDescription('???.')
imPM1Power3Fan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3Fan.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3Fan.setDescription('???.')
imPM1Power3BatteryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3BatteryAvailable.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3BatteryAvailable.setDescription('???.')
imPM1Power3OutputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 57), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputVoltagePhase1.setDescription('???.')
imPM1Power3OutputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 58), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputCurrentPhase1.setDescription('???.')
imPM1Power3OutputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 59), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputPowerVAphase1.setDescription('???.')
imPM1Power3OutputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 60), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputPowerKVAphase1.setDescription('???.')
imPM1Power3OutputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 61), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputVoltagePhase2.setDescription('???.')
imPM1Power3OutputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 62), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputCurrentPhase2.setDescription('???.')
imPM1Power3OutputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 63), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputPowerVAphase2.setDescription('???.')
imPM1Power3OutputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 64), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputPowerKVAphase2.setDescription('???.')
imPM1Power3OutputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 65), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputVoltagePhase3.setDescription('???.')
imPM1Power3OutputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 66), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputCurrentPhase3.setDescription('???.')
imPM1Power3OutputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 67), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputPowerVAphase3.setDescription('???.')
imPM1Power3OutputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 5, 68), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1Power3OutputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM1Power3OutputPowerKVAphase3.setDescription('???.')
imPM1Battery = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 6))
imPm1BatteryNominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 6, 1), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatteryNominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPm1BatteryNominalCapacity.setDescription('???.')
imPm1BatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 6, 2), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatteryVoltage.setStatus('current')
if mibBuilder.loadTexts: imPm1BatteryVoltage.setDescription('???.')
imPm1BatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 6, 3), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatteryCurrent.setStatus('current')
if mibBuilder.loadTexts: imPm1BatteryCurrent.setDescription('???.')
imPm1BatteryChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 6, 4), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatteryChargeState.setStatus('current')
if mibBuilder.loadTexts: imPm1BatteryChargeState.setDescription('???.')
imPm1BatteryAutonomyTime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 6, 5), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatteryAutonomyTime.setStatus('current')
if mibBuilder.loadTexts: imPm1BatteryAutonomyTime.setDescription('???.')
imPm1BatteryTimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 6, 6), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatteryTimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPm1BatteryTimeOnBattery.setDescription('???.')
imPM1BatLeg1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7))
imPM1BatLeg1Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg1Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg1Manufacturer.setDescription('???.')
imPM1BatLeg1Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg1Type.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg1Type.setDescription('???.')
imPM1BatLeg1serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg1serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg1serNumb.setDescription('???.')
imPM1BatLeg1nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg1nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg1nextServiceDate.setDescription('???.')
imPM1BatLeg1InstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg1InstallationDate.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg1InstallationDate.setDescription('???.')
imPm1BatLeg1NominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 6), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg1NominalVoltage.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg1NominalVoltage.setDescription('???.')
imPm1BatLeg1NominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 7), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg1NominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg1NominalCapacity.setDescription('???.')
imPm1BatLeg1Lifetime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 8), NonNegativeInteger()).setUnits('years').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg1Lifetime.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg1Lifetime.setDescription('???.')
imPm1BatLeg1Voltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 9), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg1Voltage.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg1Voltage.setDescription('???.')
imPm1BatLeg1Current = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 10), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg1Current.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg1Current.setDescription('???.')
imPm1BatLeg1Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 11), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg1Temperature.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg1Temperature.setDescription('???.')
imPm1BatLeg1ChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 12), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg1ChargeState.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg1ChargeState.setDescription('???.')
imPm1BatLeg1RestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 13), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg1RestCapacity.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg1RestCapacity.setDescription('???.')
imPm1BatLeg1Autonomytime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 14), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg1Autonomytime.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg1Autonomytime.setDescription('???.')
imPm1BatLeg1TimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 15), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg1TimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg1TimeOnBattery.setDescription('???.')
imPM1BatLeg1Fuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg1Fuse.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg1Fuse.setDescription('???.')
imPM1BatLeg1Breaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg1Breaker.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg1Breaker.setDescription('???.')
imPM1BatLeg1LowVoltageDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 7, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg1LowVoltageDisconnect.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg1LowVoltageDisconnect.setDescription('???.')
imPM1BatLeg2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8))
imPM1BatLeg2Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg2Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg2Manufacturer.setDescription('???.')
imPM1BatLeg2Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg2Type.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg2Type.setDescription('???.')
imPM1BatLeg2serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg2serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg2serNumb.setDescription('???.')
imPM1BatLeg2nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg2nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg2nextServiceDate.setDescription('???.')
imPM1BatLeg2InstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg2InstallationDate.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg2InstallationDate.setDescription('???.')
imPm1BatLeg2NominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 6), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg2NominalVoltage.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg2NominalVoltage.setDescription('???.')
imPm1BatLeg2NominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 7), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg2NominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg2NominalCapacity.setDescription('???.')
imPm1BatLeg2Lifetime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 8), NonNegativeInteger()).setUnits('years').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg2Lifetime.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg2Lifetime.setDescription('???.')
imPm1BatLeg2Voltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 9), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg2Voltage.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg2Voltage.setDescription('???.')
imPm1BatLeg2Current = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 10), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg2Current.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg2Current.setDescription('???.')
imPm1BatLeg2Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 11), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg2Temperature.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg2Temperature.setDescription('???.')
imPm1BatLeg2ChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 12), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg2ChargeState.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg2ChargeState.setDescription('???.')
imPm1BatLeg2RestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 13), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg2RestCapacity.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg2RestCapacity.setDescription('???.')
imPm1BatLeg2Autonomytime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 14), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg2Autonomytime.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg2Autonomytime.setDescription('???.')
imPm1BatLeg2TimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 15), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg2TimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg2TimeOnBattery.setDescription('???.')
imPM1BatLeg2Fuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg2Fuse.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg2Fuse.setDescription('???.')
imPM1BatLeg2Breaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg2Breaker.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg2Breaker.setDescription('???.')
imPM1BatLeg2LowVoltageDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 8, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg2LowVoltageDisconnect.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg2LowVoltageDisconnect.setDescription('???.')
imPM1BatLeg3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9))
imPM1BatLeg3Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg3Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg3Manufacturer.setDescription('???.')
imPM1BatLeg3Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg3Type.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg3Type.setDescription('???.')
imPM1BatLeg3serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg3serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg3serNumb.setDescription('???.')
imPM1BatLeg3nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg3nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg3nextServiceDate.setDescription('???.')
imPM1BatLeg3InstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg3InstallationDate.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg3InstallationDate.setDescription('???.')
imPm1BatLeg3NominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 6), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg3NominalVoltage.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg3NominalVoltage.setDescription('???.')
imPm1BatLeg3NominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 7), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg3NominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg3NominalCapacity.setDescription('???.')
imPm1BatLeg3Lifetime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 8), NonNegativeInteger()).setUnits('years').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg3Lifetime.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg3Lifetime.setDescription('???.')
imPm1BatLeg3Voltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 9), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg3Voltage.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg3Voltage.setDescription('???.')
imPm1BatLeg3Current = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 10), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg3Current.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg3Current.setDescription('???.')
imPm1BatLeg3Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 11), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg3Temperature.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg3Temperature.setDescription('???.')
imPm1BatLeg3ChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 12), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg3ChargeState.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg3ChargeState.setDescription('???.')
imPm1BatLeg3RestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 13), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg3RestCapacity.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg3RestCapacity.setDescription('???.')
imPm1BatLeg3Autonomytime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 14), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg3Autonomytime.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg3Autonomytime.setDescription('???.')
imPm1BatLeg3TimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 15), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1BatLeg3TimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPm1BatLeg3TimeOnBattery.setDescription('???.')
imPM1BatLeg3Fuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg3Fuse.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg3Fuse.setDescription('???.')
imPM1BatLeg3Breaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg3Breaker.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg3Breaker.setDescription('???.')
imPM1BatLeg3LowVoltageDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 9, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1BatLeg3LowVoltageDisconnect.setStatus('current')
if mibBuilder.loadTexts: imPM1BatLeg3LowVoltageDisconnect.setDescription('???.')
imPM1Distrib = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 10))
imPm1Distrib = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 10, 1), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm1Distrib.setStatus('current')
if mibBuilder.loadTexts: imPm1Distrib.setDescription('???.')
imPM1DistTable = MibTable((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 10, 2), )
if mibBuilder.loadTexts: imPM1DistTable.setStatus('current')
if mibBuilder.loadTexts: imPM1DistTable.setDescription('???.')
imPM1DistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 10, 2, 1), ).setIndexNames((0, "IMCO-BIG-MIB", "imPM1DistId"))
if mibBuilder.loadTexts: imPM1DistEntry.setStatus('current')
if mibBuilder.loadTexts: imPM1DistEntry.setDescription('???.')
imPM1DistId = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 10, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: imPM1DistId.setStatus('current')
if mibBuilder.loadTexts: imPM1DistId.setDescription('???.')
imPM1DistFuse = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1DistFuse.setStatus('current')
if mibBuilder.loadTexts: imPM1DistFuse.setDescription('???.')
imPM1DistBreaker = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1DistBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM1DistBreaker.setDescription('???.')
imPM1Control = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 11))
imPM1ContTable = MibTable((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 11, 1), )
if mibBuilder.loadTexts: imPM1ContTable.setStatus('current')
if mibBuilder.loadTexts: imPM1ContTable.setDescription('???.')
imPM1ContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 11, 1, 1), ).setIndexNames((0, "IMCO-BIG-MIB", "imPM1ContId"))
if mibBuilder.loadTexts: imPM1ContEntry.setStatus('current')
if mibBuilder.loadTexts: imPM1ContEntry.setDescription('???.')
imPM1ContId = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 11, 1, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: imPM1ContId.setStatus('current')
if mibBuilder.loadTexts: imPM1ContId.setDescription('???.')
imPM1ContState = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM1ContState.setStatus('current')
if mibBuilder.loadTexts: imPM1ContState.setDescription('???.')
imPM1ContLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1ContLabel.setStatus('current')
if mibBuilder.loadTexts: imPM1ContLabel.setDescription('???.')
imPM1ContTimeOFF = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 11, 1, 1, 4), Integer32()).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM1ContTimeOFF.setStatus('current')
if mibBuilder.loadTexts: imPM1ContTimeOFF.setDescription('???.')
imPM1ContAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM1ContAuto.setStatus('current')
if mibBuilder.loadTexts: imPM1ContAuto.setDescription('???.')
imPM1ContTestCAPcommand = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM1ContTestCAPcommand.setStatus('current')
if mibBuilder.loadTexts: imPM1ContTestCAPcommand.setDescription('???.')
imPM1ContTestCAPvoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 11, 3), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1ContTestCAPvoltage.setStatus('current')
if mibBuilder.loadTexts: imPM1ContTestCAPvoltage.setDescription('???.')
imPM1ContTestCAPcurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 11, 4), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1ContTestCAPcurrent.setStatus('current')
if mibBuilder.loadTexts: imPM1ContTestCAPcurrent.setDescription('???.')
imPM1ContTestCAPtemperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 11, 5), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1ContTestCAPtemperature.setStatus('current')
if mibBuilder.loadTexts: imPM1ContTestCAPtemperature.setDescription('???.')
imPM1ContTestCAPduration = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 11, 6), Integer32()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1ContTestCAPduration.setStatus('current')
if mibBuilder.loadTexts: imPM1ContTestCAPduration.setDescription('???.')
imPM1ContTestCAPstatus = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 1, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM1ContTestCAPstatus.setStatus('current')
if mibBuilder.loadTexts: imPM1ContTestCAPstatus.setDescription('???.')
imPM2SystemID = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 1))
imPM2SystemIDManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemIDManufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemIDManufacturer.setDescription('???.')
imPM2SystemIDType = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemIDType.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemIDType.setDescription('???.')
imPM2SystemIDserNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemIDserNumb.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemIDserNumb.setDescription('???.')
imPM2SystemIDnextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemIDnextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemIDnextServiceDate.setDescription('???.')
imPM2SystemIDaddress = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 1, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemIDaddress.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemIDaddress.setDescription('???.')
imPM2SystemIDhwVersion = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 1, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemIDhwVersion.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemIDhwVersion.setDescription('???.')
imPM2SystemIDswVersion = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 1, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemIDswVersion.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemIDswVersion.setDescription('???.')
imPM2SystemIDPMserialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemIDPMserialNumber.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemIDPMserialNumber.setDescription('???.')
imPM2SystemIDbuttonName = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemIDbuttonName.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemIDbuttonName.setDescription('???.')
imPM2SystemGEN = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 2))
imPM2SystemGENSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemGENSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemGENSurgeArrester.setDescription('???.')
imPM2SystemGENDoor1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemGENDoor1.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemGENDoor1.setDescription('???.')
imPM2SystemGENDoor2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemGENDoor2.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemGENDoor2.setDescription('???.')
imPM2SystemGENFan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemGENFan.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemGENFan.setDescription('???.')
imPM2SystemGENuser1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemGENuser1.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemGENuser1.setDescription('???.')
imPM2SystemGENuser2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemGENuser2.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemGENuser2.setDescription('???.')
imPM2SystemGENuser3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemGENuser3.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemGENuser3.setDescription('???.')
imPM2SystemGENuser4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemGENuser4.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemGENuser4.setDescription('???.')
imPM2SystemGENtemperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 2, 9), NonNegativeInteger()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2SystemGENtemperature.setStatus('current')
if mibBuilder.loadTexts: imPM2SystemGENtemperature.setDescription('???.')
imPM2Power1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3))
imPM2Power1Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1Manufacturer.setDescription('???.')
imPM2Power1Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1Type.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1Type.setDescription('???.')
imPM2Power1serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1serNumb.setDescription('???.')
imPM2Power1nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1nextServiceDate.setDescription('???.')
imPM2Power1InputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 5), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputVoltage.setDescription('???.')
imPM2Power1InputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 6), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputCurrent.setDescription('???.')
imPM2Power1InputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 7), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputPowerVA.setDescription('???.')
imPM2Power1InputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 8), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputPowerKVA.setDescription('???.')
imPM2Power1InputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 9), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputPowerW.setDescription('???.')
imPM2Power1InputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 10), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputPowerKW.setDescription('???.')
imPM2Power1InputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 11), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputVoltagePhase1.setDescription('???.')
imPM2Power1InputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 12), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputCurrentPhase1.setDescription('???.')
imPM2Power1InputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 13), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputPowerVAphase1.setDescription('???.')
imPM2Power1InputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 14), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputPowerKVAphase1.setDescription('???.')
imPM2Power1InputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 15), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputVoltagePhase2.setDescription('???.')
imPM2Power1InputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 16), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputCurrentPhase2.setDescription('???.')
imPM2Power1InputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 17), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputPowerVAphase2.setDescription('???.')
imPM2Power1InputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 18), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputPowerKVAphase2.setDescription('???.')
imPM2Power1InputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 19), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputVoltagePhase3.setDescription('???.')
imPM2Power1InputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 20), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputCurrentPhase3.setDescription('???.')
imPM2Power1InputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 21), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputPowerVAphase3.setDescription('???.')
imPM2Power1InputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 22), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputPowerKVAphase3.setDescription('???.')
imPM2Power1OutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 23), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputVoltage.setDescription('???.')
imPM2Power1OutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 24), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputCurrent.setDescription('???.')
imPM2Power1OutputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 25), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputPowerVA.setDescription('???.')
imPM2Power1OutputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 26), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputPowerKVA.setDescription('???.')
imPM2Power1OutputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 27), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputPowerW.setDescription('???.')
imPM2Power1OutputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 28), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputPowerKW.setDescription('???.')
imPM2Power1OutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 29), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputLoad.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputLoad.setDescription('???.')
imPM2Power1OutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 30), NonNegativeInteger()).setUnits('0.1 Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputFrequency.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputFrequency.setDescription('???.')
imPM2Power1Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 31), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1Temperature.setDescription('???.')
imPM2Power1Running1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1Running1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1Running1.setDescription('???.')
imPM2Power1Running2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1Running2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1Running2.setDescription('???.')
imPM2Power1Running3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1Running3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1Running3.setDescription('???.')
imPM2Power1Running4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1Running4.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1Running4.setDescription('???.')
imPM2Power1Running5 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1Running5.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1Running5.setDescription('???.')
imPM2Power1Running6 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1Running6.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1Running6.setDescription('???.')
imPM2Power1Running7 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1Running7.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1Running7.setDescription('???.')
imPM2Power1Running8 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1Running8.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1Running8.setDescription('???.')
imPM2Power1InputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputFuse.setDescription('???.')
imPM2Power1InputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputFuse1.setDescription('???.')
imPM2Power1InputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputFuse2.setDescription('???.')
imPM2Power1InputFuse3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputFuse3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputFuse3.setDescription('???.')
imPM2Power1InputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputBreaker.setDescription('???.')
imPM2Power1InputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputBreaker1.setDescription('???.')
imPM2Power1InputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputBreaker2.setDescription('???.')
imPM2Power1InputBreaker3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputBreaker3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputBreaker3.setDescription('???.')
imPM2Power1InputSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1InputSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1InputSurgeArrester.setDescription('???.')
imPM2Power1OutputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputFuse.setDescription('???.')
imPM2Power1OutputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputFuse1.setDescription('???.')
imPM2Power1OutputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputFuse2.setDescription('???.')
imPM2Power1OutputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputBreaker.setDescription('???.')
imPM2Power1OutputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputBreaker1.setDescription('???.')
imPM2Power1OutputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputBreaker2.setDescription('???.')
imPM2Power1Fan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1Fan.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1Fan.setDescription('???.')
imPM2Power1BatteryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1BatteryAvailable.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1BatteryAvailable.setDescription('???.')
imPM2Power1OutputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 57), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputVoltagePhase1.setDescription('???.')
imPM2Power1OutputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 58), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputCurrentPhase1.setDescription('???.')
imPM2Power1OutputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 59), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputPowerVAphase1.setDescription('???.')
imPM2Power1OutputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 60), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputPowerKVAphase1.setDescription('???.')
imPM2Power1OutputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 61), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputVoltagePhase2.setDescription('???.')
imPM2Power1OutputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 62), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputCurrentPhase2.setDescription('???.')
imPM2Power1OutputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 63), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputPowerVAphase2.setDescription('???.')
imPM2Power1OutputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 64), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputPowerKVAphase2.setDescription('???.')
imPM2Power1OutputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 65), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputVoltagePhase3.setDescription('???.')
imPM2Power1OutputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 66), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputCurrentPhase3.setDescription('???.')
imPM2Power1OutputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 67), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputPowerVAphase3.setDescription('???.')
imPM2Power1OutputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 3, 68), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power1OutputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power1OutputPowerKVAphase3.setDescription('???.')
imPM2Power2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4))
imPM2Power2Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2Manufacturer.setDescription('???.')
imPM2Power2Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2Type.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2Type.setDescription('???.')
imPM2Power2serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2serNumb.setDescription('???.')
imPM2Power2nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2nextServiceDate.setDescription('???.')
imPM2Power2InputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 5), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputVoltage.setDescription('???.')
imPM2Power2InputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 6), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputCurrent.setDescription('???.')
imPM2Power2InputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 7), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputPowerVA.setDescription('???.')
imPM2Power2InputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 8), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputPowerKVA.setDescription('???.')
imPM2Power2InputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 9), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputPowerW.setDescription('???.')
imPM2Power2InputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 10), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputPowerKW.setDescription('???.')
imPM2Power2InputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 11), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputVoltagePhase1.setDescription('???.')
imPM2Power2InputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 12), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputCurrentPhase1.setDescription('???.')
imPM2Power2InputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 13), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputPowerVAphase1.setDescription('???.')
imPM2Power2InputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 14), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputPowerKVAphase1.setDescription('???.')
imPM2Power2InputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 15), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputVoltagePhase2.setDescription('???.')
imPM2Power2InputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 16), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputCurrentPhase2.setDescription('???.')
imPM2Power2InputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 17), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputPowerVAphase2.setDescription('???.')
imPM2Power2InputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 18), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputPowerKVAphase2.setDescription('???.')
imPM2Power2InputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 19), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputVoltagePhase3.setDescription('???.')
imPM2Power2InputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 20), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputCurrentPhase3.setDescription('???.')
imPM2Power2InputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 21), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputPowerVAphase3.setDescription('???.')
imPM2Power2InputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 22), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputPowerKVAphase3.setDescription('???.')
imPM2Power2OutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 23), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputVoltage.setDescription('???.')
imPM2Power2OutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 24), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputCurrent.setDescription('???.')
imPM2Power2OutputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 25), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputPowerVA.setDescription('???.')
imPM2Power2OutputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 26), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputPowerKVA.setDescription('???.')
imPM2Power2OutputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 27), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputPowerW.setDescription('???.')
imPM2Power2OutputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 28), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputPowerKW.setDescription('???.')
imPM2Power2OutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 29), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputLoad.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputLoad.setDescription('???.')
imPM2Power2OutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 30), NonNegativeInteger()).setUnits('0.1 Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputFrequency.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputFrequency.setDescription('???.')
imPM2Power2Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 31), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2Temperature.setDescription('???.')
imPM2Power2Running1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2Running1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2Running1.setDescription('???.')
imPM2Power2Running2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2Running2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2Running2.setDescription('???.')
imPM2Power2Running3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2Running3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2Running3.setDescription('???.')
imPM2Power2Running4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2Running4.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2Running4.setDescription('???.')
imPM2Power2Running5 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2Running5.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2Running5.setDescription('???.')
imPM2Power2Running6 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2Running6.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2Running6.setDescription('???.')
imPM2Power2Running7 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2Running7.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2Running7.setDescription('???.')
imPM2Power2Running8 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2Running8.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2Running8.setDescription('???.')
imPM2Power2InputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputFuse.setDescription('???.')
imPM2Power2InputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputFuse1.setDescription('???.')
imPM2Power2InputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputFuse2.setDescription('???.')
imPM2Power2InputFuse3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputFuse3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputFuse3.setDescription('???.')
imPM2Power2InputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputBreaker.setDescription('???.')
imPM2Power2InputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputBreaker1.setDescription('???.')
imPM2Power2InputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputBreaker2.setDescription('???.')
imPM2Power2InputBreaker3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputBreaker3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputBreaker3.setDescription('???.')
imPM2Power2InputSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2InputSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2InputSurgeArrester.setDescription('???.')
imPM2Power2OutputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputFuse.setDescription('???.')
imPM2Power2OutputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputFuse1.setDescription('???.')
imPM2Power2OutputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputFuse2.setDescription('???.')
imPM2Power2OutputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputBreaker.setDescription('???.')
imPM2Power2OutputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputBreaker1.setDescription('???.')
imPM2Power2OutputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputBreaker2.setDescription('???.')
imPM2Power2Fan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2Fan.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2Fan.setDescription('???.')
imPM2Power2BatteryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2BatteryAvailable.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2BatteryAvailable.setDescription('???.')
imPM2Power2OutputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 57), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputVoltagePhase1.setDescription('???.')
imPM2Power2OutputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 58), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputCurrentPhase1.setDescription('???.')
imPM2Power2OutputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 59), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputPowerVAphase1.setDescription('???.')
imPM2Power2OutputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 60), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputPowerKVAphase1.setDescription('???.')
imPM2Power2OutputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 61), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputVoltagePhase2.setDescription('???.')
imPM2Power2OutputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 62), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputCurrentPhase2.setDescription('???.')
imPM2Power2OutputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 63), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputPowerVAphase2.setDescription('???.')
imPM2Power2OutputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 64), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputPowerKVAphase2.setDescription('???.')
imPM2Power2OutputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 65), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputVoltagePhase3.setDescription('???.')
imPM2Power2OutputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 66), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputCurrentPhase3.setDescription('???.')
imPM2Power2OutputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 67), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputPowerVAphase3.setDescription('???.')
imPM2Power2OutputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 4, 68), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power2OutputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power2OutputPowerKVAphase3.setDescription('???.')
imPM2Power3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5))
imPM2Power3Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3Manufacturer.setDescription('???.')
imPM2Power3Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3Type.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3Type.setDescription('???.')
imPM2Power3serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3serNumb.setDescription('???.')
imPM2Power3nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3nextServiceDate.setDescription('???.')
imPM2Power3InputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 5), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputVoltage.setDescription('???.')
imPM2Power3InputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 6), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputCurrent.setDescription('???.')
imPM2Power3InputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 7), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputPowerVA.setDescription('???.')
imPM2Power3InputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 8), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputPowerKVA.setDescription('???.')
imPM2Power3InputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 9), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputPowerW.setDescription('???.')
imPM2Power3InputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 10), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputPowerKW.setDescription('???.')
imPM2Power3InputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 11), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputVoltagePhase1.setDescription('???.')
imPM2Power3InputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 12), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputCurrentPhase1.setDescription('???.')
imPM2Power3InputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 13), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputPowerVAphase1.setDescription('???.')
imPM2Power3InputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 14), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputPowerKVAphase1.setDescription('???.')
imPM2Power3InputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 15), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputVoltagePhase2.setDescription('???.')
imPM2Power3InputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 16), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputCurrentPhase2.setDescription('???.')
imPM2Power3InputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 17), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputPowerVAphase2.setDescription('???.')
imPM2Power3InputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 18), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputPowerKVAphase2.setDescription('???.')
imPM2Power3InputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 19), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputVoltagePhase3.setDescription('???.')
imPM2Power3InputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 20), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputCurrentPhase3.setDescription('???.')
imPM2Power3InputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 21), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputPowerVAphase3.setDescription('???.')
imPM2Power3InputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 22), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputPowerKVAphase3.setDescription('???.')
imPM2Power3OutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 23), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputVoltage.setDescription('???.')
imPM2Power3OutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 24), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputCurrent.setDescription('???.')
imPM2Power3OutputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 25), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputPowerVA.setDescription('???.')
imPM2Power3OutputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 26), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputPowerKVA.setDescription('???.')
imPM2Power3OutputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 27), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputPowerW.setDescription('???.')
imPM2Power3OutputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 28), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputPowerKW.setDescription('???.')
imPM2Power3OutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 29), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputLoad.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputLoad.setDescription('???.')
imPM2Power3OutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 30), NonNegativeInteger()).setUnits('0.1 Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputFrequency.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputFrequency.setDescription('???.')
imPM2Power3Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 31), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3Temperature.setDescription('???.')
imPM2Power3Running1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3Running1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3Running1.setDescription('???.')
imPM2Power3Running2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3Running2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3Running2.setDescription('???.')
imPM2Power3Running3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3Running3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3Running3.setDescription('???.')
imPM2Power3Running4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3Running4.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3Running4.setDescription('???.')
imPM2Power3Running5 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3Running5.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3Running5.setDescription('???.')
imPM2Power3Running6 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3Running6.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3Running6.setDescription('???.')
imPM2Power3Running7 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3Running7.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3Running7.setDescription('???.')
imPM2Power3Running8 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3Running8.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3Running8.setDescription('???.')
imPM2Power3InputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputFuse.setDescription('???.')
imPM2Power3InputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputFuse1.setDescription('???.')
imPM2Power3InputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputFuse2.setDescription('???.')
imPM2Power3InputFuse3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputFuse3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputFuse3.setDescription('???.')
imPM2Power3InputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputBreaker.setDescription('???.')
imPM2Power3InputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputBreaker1.setDescription('???.')
imPM2Power3InputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputBreaker2.setDescription('???.')
imPM2Power3InputBreaker3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputBreaker3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputBreaker3.setDescription('???.')
imPM2Power3InputSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3InputSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3InputSurgeArrester.setDescription('???.')
imPM2Power3OutputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputFuse.setDescription('???.')
imPM2Power3OutputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputFuse1.setDescription('???.')
imPM2Power3OutputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputFuse2.setDescription('???.')
imPM2Power3OutputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputBreaker.setDescription('???.')
imPM2Power3OutputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputBreaker1.setDescription('???.')
imPM2Power3OutputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputBreaker2.setDescription('???.')
imPM2Power3Fan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3Fan.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3Fan.setDescription('???.')
imPM2Power3BatteryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3BatteryAvailable.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3BatteryAvailable.setDescription('???.')
imPM2Power3OutputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 57), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputVoltagePhase1.setDescription('???.')
imPM2Power3OutputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 58), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputCurrentPhase1.setDescription('???.')
imPM2Power3OutputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 59), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputPowerVAphase1.setDescription('???.')
imPM2Power3OutputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 60), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputPowerKVAphase1.setDescription('???.')
imPM2Power3OutputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 61), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputVoltagePhase2.setDescription('???.')
imPM2Power3OutputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 62), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputCurrentPhase2.setDescription('???.')
imPM2Power3OutputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 63), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputPowerVAphase2.setDescription('???.')
imPM2Power3OutputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 64), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputPowerKVAphase2.setDescription('???.')
imPM2Power3OutputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 65), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputVoltagePhase3.setDescription('???.')
imPM2Power3OutputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 66), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputCurrentPhase3.setDescription('???.')
imPM2Power3OutputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 67), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputPowerVAphase3.setDescription('???.')
imPM2Power3OutputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 5, 68), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2Power3OutputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM2Power3OutputPowerKVAphase3.setDescription('???.')
imPM2Battery = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 6))
imPM2BatteryNominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 6, 1), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatteryNominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM2BatteryNominalCapacity.setDescription('???.')
imPM2BatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 6, 2), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatteryVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM2BatteryVoltage.setDescription('???.')
imPM2BatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 6, 3), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatteryCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM2BatteryCurrent.setDescription('???.')
imPM2BatteryChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 6, 4), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatteryChargeState.setStatus('current')
if mibBuilder.loadTexts: imPM2BatteryChargeState.setDescription('???.')
imPM2BatteryAutonomyTime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 6, 5), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatteryAutonomyTime.setStatus('current')
if mibBuilder.loadTexts: imPM2BatteryAutonomyTime.setDescription('???.')
imPM2BatteryTimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 6, 6), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatteryTimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPM2BatteryTimeOnBattery.setDescription('???.')
imPM2BatLeg1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7))
imPM2BatLeg1Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1Manufacturer.setDescription('???.')
imPM2BatLeg1Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1Type.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1Type.setDescription('???.')
imPM2BatLeg1serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1serNumb.setDescription('???.')
imPM2BatLeg1nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1nextServiceDate.setDescription('???.')
imPM2BatLeg1InstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1InstallationDate.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1InstallationDate.setDescription('???.')
imPM2BatLeg1NominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 6), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1NominalVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1NominalVoltage.setDescription('???.')
imPM2BatLeg1NominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 7), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1NominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1NominalCapacity.setDescription('???.')
imPM2BatLeg1Lifetime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 8), NonNegativeInteger()).setUnits('years').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1Lifetime.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1Lifetime.setDescription('???.')
imPM2BatLeg1Voltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 9), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1Voltage.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1Voltage.setDescription('???.')
imPM2BatLeg1Current = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 10), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1Current.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1Current.setDescription('???.')
imPM2BatLeg1Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 11), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1Temperature.setDescription('???.')
imPM2BatLeg1ChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 12), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1ChargeState.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1ChargeState.setDescription('???.')
imPM2BatLeg1RestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 13), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1RestCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1RestCapacity.setDescription('???.')
imPM2BatLeg1Autonomytime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 14), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1Autonomytime.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1Autonomytime.setDescription('???.')
imPM2BatLeg1TimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 15), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1TimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1TimeOnBattery.setDescription('???.')
imPM2BatLeg1Fuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1Fuse.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1Fuse.setDescription('???.')
imPM2BatLeg1Breaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1Breaker.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1Breaker.setDescription('???.')
imPM2BatLeg1LowVoltageDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 7, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg1LowVoltageDisconnect.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg1LowVoltageDisconnect.setDescription('???.')
imPM2BatLeg2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8))
imPM2BatLeg2Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2Manufacturer.setDescription('???.')
imPM2BatLeg2Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2Type.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2Type.setDescription('???.')
imPM2BatLeg2serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2serNumb.setDescription('???.')
imPM2BatLeg2nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2nextServiceDate.setDescription('???.')
imPM2BatLeg2InstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2InstallationDate.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2InstallationDate.setDescription('???.')
imPM2BatLeg2NominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 6), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2NominalVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2NominalVoltage.setDescription('???.')
imPM2BatLeg2NominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 7), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2NominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2NominalCapacity.setDescription('???.')
imPM2BatLeg2Lifetime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 8), NonNegativeInteger()).setUnits('years').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2Lifetime.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2Lifetime.setDescription('???.')
imPM2BatLeg2Voltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 9), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2Voltage.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2Voltage.setDescription('???.')
imPM2BatLeg2Current = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 10), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2Current.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2Current.setDescription('???.')
imPM2BatLeg2Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 11), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2Temperature.setDescription('???.')
imPM2BatLeg2ChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 12), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2ChargeState.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2ChargeState.setDescription('???.')
imPM2BatLeg2RestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 13), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2RestCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2RestCapacity.setDescription('???.')
imPM2BatLeg2Autonomytime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 14), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2Autonomytime.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2Autonomytime.setDescription('???.')
imPM2BatLeg2TimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 15), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2TimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2TimeOnBattery.setDescription('???.')
imPM2BatLeg2Fuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2Fuse.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2Fuse.setDescription('???.')
imPM2BatLeg2Breaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2Breaker.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2Breaker.setDescription('???.')
imPM2BatLeg2LowVoltageDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 8, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg2LowVoltageDisconnect.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg2LowVoltageDisconnect.setDescription('???.')
imPM2BatLeg3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9))
imPM2BatLeg3Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3Manufacturer.setDescription('???.')
imPM2BatLeg3Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3Type.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3Type.setDescription('???.')
imPM2BatLeg3serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3serNumb.setDescription('???.')
imPM2BatLeg3nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3nextServiceDate.setDescription('???.')
imPM2BatLeg3InstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3InstallationDate.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3InstallationDate.setDescription('???.')
imPM2BatLeg3NominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 6), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3NominalVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3NominalVoltage.setDescription('???.')
imPM2BatLeg3NominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 7), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3NominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3NominalCapacity.setDescription('???.')
imPM2BatLeg3Lifetime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 8), NonNegativeInteger()).setUnits('years').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3Lifetime.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3Lifetime.setDescription('???.')
imPM2BatLeg3Voltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 9), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3Voltage.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3Voltage.setDescription('???.')
imPM2BatLeg3Current = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 10), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3Current.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3Current.setDescription('???.')
imPM2BatLeg3Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 11), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3Temperature.setDescription('???.')
imPM2BatLeg3ChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 12), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3ChargeState.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3ChargeState.setDescription('???.')
imPM2BatLeg3RestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 13), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3RestCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3RestCapacity.setDescription('???.')
imPM2BatLeg3Autonomytime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 14), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3Autonomytime.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3Autonomytime.setDescription('???.')
imPM2BatLeg3TimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 15), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3TimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3TimeOnBattery.setDescription('???.')
imPM2BatLeg3Fuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3Fuse.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3Fuse.setDescription('???.')
imPM2BatLeg3Breaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3Breaker.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3Breaker.setDescription('???.')
imPM2BatLeg3LowVoltageDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 9, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2BatLeg3LowVoltageDisconnect.setStatus('current')
if mibBuilder.loadTexts: imPM2BatLeg3LowVoltageDisconnect.setDescription('???.')
imPM2Distrib = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 10))
imPm2Distrib = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 10, 1), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm2Distrib.setStatus('current')
if mibBuilder.loadTexts: imPm2Distrib.setDescription('???.')
imPM2DistTable = MibTable((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 10, 2), )
if mibBuilder.loadTexts: imPM2DistTable.setStatus('current')
if mibBuilder.loadTexts: imPM2DistTable.setDescription('???.')
imPM2DistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 10, 2, 1), ).setIndexNames((0, "IMCO-BIG-MIB", "imPM2DistId"))
if mibBuilder.loadTexts: imPM2DistEntry.setStatus('current')
if mibBuilder.loadTexts: imPM2DistEntry.setDescription('???.')
imPM2DistId = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 10, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: imPM2DistId.setStatus('current')
if mibBuilder.loadTexts: imPM2DistId.setDescription('???.')
imPM2DistFuse = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2DistFuse.setStatus('current')
if mibBuilder.loadTexts: imPM2DistFuse.setDescription('???.')
imPM2DistBreaker = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2DistBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM2DistBreaker.setDescription('???.')
imPM2Control = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 11))
imPM2ContTable = MibTable((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 11, 1), )
if mibBuilder.loadTexts: imPM2ContTable.setStatus('current')
if mibBuilder.loadTexts: imPM2ContTable.setDescription('???.')
imPM2ContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 11, 1, 1), ).setIndexNames((0, "IMCO-BIG-MIB", "imPM2ContId"))
if mibBuilder.loadTexts: imPM2ContEntry.setStatus('current')
if mibBuilder.loadTexts: imPM2ContEntry.setDescription('???.')
imPM2ContId = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 11, 1, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: imPM2ContId.setStatus('current')
if mibBuilder.loadTexts: imPM2ContId.setDescription('???.')
imPM2ContState = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM2ContState.setStatus('current')
if mibBuilder.loadTexts: imPM2ContState.setDescription('???.')
imPM2ContLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2ContLabel.setStatus('current')
if mibBuilder.loadTexts: imPM2ContLabel.setDescription('???.')
imPM2ContTimeOFF = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 11, 1, 1, 4), Integer32()).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM2ContTimeOFF.setStatus('current')
if mibBuilder.loadTexts: imPM2ContTimeOFF.setDescription('???.')
imPM2ContAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM2ContAuto.setStatus('current')
if mibBuilder.loadTexts: imPM2ContAuto.setDescription('???.')
imPM2ContTestCAPcommand = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM2ContTestCAPcommand.setStatus('current')
if mibBuilder.loadTexts: imPM2ContTestCAPcommand.setDescription('???.')
imPM2ContTestCAPvoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 11, 3), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2ContTestCAPvoltage.setStatus('current')
if mibBuilder.loadTexts: imPM2ContTestCAPvoltage.setDescription('???.')
imPM2ContTestCAPcurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 11, 4), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2ContTestCAPcurrent.setStatus('current')
if mibBuilder.loadTexts: imPM2ContTestCAPcurrent.setDescription('???.')
imPM2ContTestCAPtemperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 11, 5), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2ContTestCAPtemperature.setStatus('current')
if mibBuilder.loadTexts: imPM2ContTestCAPtemperature.setDescription('???.')
imPM2ContTestCAPduration = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 11, 6), Integer32()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2ContTestCAPduration.setStatus('current')
if mibBuilder.loadTexts: imPM2ContTestCAPduration.setDescription('???.')
imPM2ContTestCAPstatus = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 2, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM2ContTestCAPstatus.setStatus('current')
if mibBuilder.loadTexts: imPM2ContTestCAPstatus.setDescription('???.')
imPM3SystemID = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 1))
imPM3SystemIDManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemIDManufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemIDManufacturer.setDescription('???.')
imPM3SystemIDType = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemIDType.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemIDType.setDescription('???.')
imPM3SystemIDserNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemIDserNumb.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemIDserNumb.setDescription('???.')
imPM3SystemIDnextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemIDnextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemIDnextServiceDate.setDescription('???.')
imPM3SystemIDaddress = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 1, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemIDaddress.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemIDaddress.setDescription('???.')
imPM3SystemIDhwVersion = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 1, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemIDhwVersion.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemIDhwVersion.setDescription('???.')
imPM3SystemIDswVersion = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 1, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemIDswVersion.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemIDswVersion.setDescription('???.')
imPM3SystemIDPMserialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemIDPMserialNumber.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemIDPMserialNumber.setDescription('???.')
imPM3SystemIDbuttonName = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemIDbuttonName.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemIDbuttonName.setDescription('???.')
imPM3SystemGEN = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 2))
imPM3SystemGENSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemGENSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemGENSurgeArrester.setDescription('???.')
imPM3SystemGENDoor1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemGENDoor1.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemGENDoor1.setDescription('???.')
imPM3SystemGENDoor2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemGENDoor2.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemGENDoor2.setDescription('???.')
imPM3SystemGENFan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemGENFan.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemGENFan.setDescription('???.')
imPM3SystemGENuser1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemGENuser1.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemGENuser1.setDescription('???.')
imPM3SystemGENuser2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemGENuser2.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemGENuser2.setDescription('???.')
imPM3SystemGENuser3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemGENuser3.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemGENuser3.setDescription('???.')
imPM3SystemGENuser4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemGENuser4.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemGENuser4.setDescription('???.')
imPM3SystemGENtemperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 2, 9), NonNegativeInteger()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3SystemGENtemperature.setStatus('current')
if mibBuilder.loadTexts: imPM3SystemGENtemperature.setDescription('???.')
imPM3Power1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3))
imPM3Power1Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1Manufacturer.setDescription('???.')
imPM3Power1Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1Type.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1Type.setDescription('???.')
imPM3Power1serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1serNumb.setDescription('???.')
imPM3Power1nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1nextServiceDate.setDescription('???.')
imPM3Power1InputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 5), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputVoltage.setDescription('???.')
imPM3Power1InputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 6), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputCurrent.setDescription('???.')
imPM3Power1InputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 7), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputPowerVA.setDescription('???.')
imPM3Power1InputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 8), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputPowerKVA.setDescription('???.')
imPM3Power1InputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 9), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputPowerW.setDescription('???.')
imPM3Power1InputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 10), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputPowerKW.setDescription('???.')
imPM3Power1InputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 11), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputVoltagePhase1.setDescription('???.')
imPM3Power1InputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 12), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputCurrentPhase1.setDescription('???.')
imPM3Power1InputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 13), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputPowerVAphase1.setDescription('???.')
imPM3Power1InputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 14), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputPowerKVAphase1.setDescription('???.')
imPM3Power1InputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 15), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputVoltagePhase2.setDescription('???.')
imPM3Power1InputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 16), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputCurrentPhase2.setDescription('???.')
imPM3Power1InputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 17), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputPowerVAphase2.setDescription('???.')
imPM3Power1InputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 18), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputPowerKVAphase2.setDescription('???.')
imPM3Power1InputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 19), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputVoltagePhase3.setDescription('???.')
imPM3Power1InputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 20), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputCurrentPhase3.setDescription('???.')
imPM3Power1InputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 21), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputPowerVAphase3.setDescription('???.')
imPM3Power1InputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 22), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputPowerKVAphase3.setDescription('???.')
imPM3Power1OutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 23), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputVoltage.setDescription('???.')
imPM3Power1OutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 24), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputCurrent.setDescription('???.')
imPM3Power1OutputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 25), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputPowerVA.setDescription('???.')
imPM3Power1OutputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 26), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputPowerKVA.setDescription('???.')
imPM3Power1OutputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 27), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputPowerW.setDescription('???.')
imPM3Power1OutputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 28), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputPowerKW.setDescription('???.')
imPM3Power1OutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 29), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputLoad.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputLoad.setDescription('???.')
imPM3Power1OutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 30), NonNegativeInteger()).setUnits('0.1 Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputFrequency.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputFrequency.setDescription('???.')
imPM3Power1Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 31), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1Temperature.setDescription('???.')
imPM3Power1Running1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1Running1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1Running1.setDescription('???.')
imPM3Power1Running2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1Running2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1Running2.setDescription('???.')
imPM3Power1Running3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1Running3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1Running3.setDescription('???.')
imPM3Power1Running4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1Running4.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1Running4.setDescription('???.')
imPM3Power1Running5 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1Running5.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1Running5.setDescription('???.')
imPM3Power1Running6 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1Running6.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1Running6.setDescription('???.')
imPM3Power1Running7 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1Running7.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1Running7.setDescription('???.')
imPM3Power1Running8 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1Running8.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1Running8.setDescription('???.')
imPM3Power1InputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputFuse.setDescription('???.')
imPM3Power1InputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputFuse1.setDescription('???.')
imPM3Power1InputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputFuse2.setDescription('???.')
imPM3Power1InputFuse3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputFuse3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputFuse3.setDescription('???.')
imPM3Power1InputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputBreaker.setDescription('???.')
imPM3Power1InputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputBreaker1.setDescription('???.')
imPM3Power1InputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputBreaker2.setDescription('???.')
imPM3Power1InputBreaker3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputBreaker3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputBreaker3.setDescription('???.')
imPM3Power1InputSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1InputSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1InputSurgeArrester.setDescription('???.')
imPM3Power1OutputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputFuse.setDescription('???.')
imPM3Power1OutputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputFuse1.setDescription('???.')
imPM3Power1OutputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputFuse2.setDescription('???.')
imPM3Power1OutputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputBreaker.setDescription('???.')
imPM3Power1OutputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputBreaker1.setDescription('???.')
imPM3Power1OutputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputBreaker2.setDescription('???.')
imPM3Power1Fan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1Fan.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1Fan.setDescription('???.')
imPM3Power1BatteryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1BatteryAvailable.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1BatteryAvailable.setDescription('???.')
imPM3Power1OutputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 57), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputVoltagePhase1.setDescription('???.')
imPM3Power1OutputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 58), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputCurrentPhase1.setDescription('???.')
imPM3Power1OutputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 59), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputPowerVAphase1.setDescription('???.')
imPM3Power1OutputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 60), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputPowerKVAphase1.setDescription('???.')
imPM3Power1OutputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 61), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputVoltagePhase2.setDescription('???.')
imPM3Power1OutputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 62), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputCurrentPhase2.setDescription('???.')
imPM3Power1OutputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 63), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputPowerVAphase2.setDescription('???.')
imPM3Power1OutputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 64), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputPowerKVAphase2.setDescription('???.')
imPM3Power1OutputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 65), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputVoltagePhase3.setDescription('???.')
imPM3Power1OutputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 66), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputCurrentPhase3.setDescription('???.')
imPM3Power1OutputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 67), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputPowerVAphase3.setDescription('???.')
imPM3Power1OutputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 3, 68), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power1OutputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power1OutputPowerKVAphase3.setDescription('???.')
imPM3Power2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4))
imPM3Power2Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2Manufacturer.setDescription('???.')
imPM3Power2Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2Type.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2Type.setDescription('???.')
imPM3Power2serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2serNumb.setDescription('???.')
imPM3Power2nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2nextServiceDate.setDescription('???.')
imPM3Power2InputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 5), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputVoltage.setDescription('???.')
imPM3Power2InputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 6), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputCurrent.setDescription('???.')
imPM3Power2InputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 7), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputPowerVA.setDescription('???.')
imPM3Power2InputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 8), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputPowerKVA.setDescription('???.')
imPM3Power2InputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 9), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputPowerW.setDescription('???.')
imPM3Power2InputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 10), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputPowerKW.setDescription('???.')
imPM3Power2InputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 11), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputVoltagePhase1.setDescription('???.')
imPM3Power2InputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 12), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputCurrentPhase1.setDescription('???.')
imPM3Power2InputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 13), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputPowerVAphase1.setDescription('???.')
imPM3Power2InputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 14), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputPowerKVAphase1.setDescription('???.')
imPM3Power2InputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 15), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputVoltagePhase2.setDescription('???.')
imPM3Power2InputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 16), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputCurrentPhase2.setDescription('???.')
imPM3Power2InputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 17), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputPowerVAphase2.setDescription('???.')
imPM3Power2InputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 18), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputPowerKVAphase2.setDescription('???.')
imPM3Power2InputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 19), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputVoltagePhase3.setDescription('???.')
imPM3Power2InputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 20), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputCurrentPhase3.setDescription('???.')
imPM3Power2InputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 21), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputPowerVAphase3.setDescription('???.')
imPM3Power2InputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 22), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputPowerKVAphase3.setDescription('???.')
imPM3Power2OutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 23), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputVoltage.setDescription('???.')
imPM3Power2OutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 24), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputCurrent.setDescription('???.')
imPM3Power2OutputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 25), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputPowerVA.setDescription('???.')
imPM3Power2OutputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 26), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputPowerKVA.setDescription('???.')
imPM3Power2OutputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 27), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputPowerW.setDescription('???.')
imPM3Power2OutputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 28), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputPowerKW.setDescription('???.')
imPM3Power2OutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 29), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputLoad.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputLoad.setDescription('???.')
imPM3Power2OutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 30), NonNegativeInteger()).setUnits('0.1 Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputFrequency.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputFrequency.setDescription('???.')
imPM3Power2Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 31), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2Temperature.setDescription('???.')
imPM3Power2Running1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2Running1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2Running1.setDescription('???.')
imPM3Power2Running2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2Running2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2Running2.setDescription('???.')
imPM3Power2Running3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2Running3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2Running3.setDescription('???.')
imPM3Power2Running4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2Running4.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2Running4.setDescription('???.')
imPM3Power2Running5 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2Running5.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2Running5.setDescription('???.')
imPM3Power2Running6 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2Running6.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2Running6.setDescription('???.')
imPM3Power2Running7 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2Running7.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2Running7.setDescription('???.')
imPM3Power2Running8 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2Running8.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2Running8.setDescription('???.')
imPM3Power2InputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputFuse.setDescription('???.')
imPM3Power2InputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputFuse1.setDescription('???.')
imPM3Power2InputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputFuse2.setDescription('???.')
imPM3Power2InputFuse3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputFuse3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputFuse3.setDescription('???.')
imPM3Power2InputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputBreaker.setDescription('???.')
imPM3Power2InputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputBreaker1.setDescription('???.')
imPM3Power2InputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputBreaker2.setDescription('???.')
imPM3Power2InputBreaker3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputBreaker3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputBreaker3.setDescription('???.')
imPM3Power2InputSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2InputSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2InputSurgeArrester.setDescription('???.')
imPM3Power2OutputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputFuse.setDescription('???.')
imPM3Power2OutputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputFuse1.setDescription('???.')
imPM3Power2OutputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputFuse2.setDescription('???.')
imPM3Power2OutputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputBreaker.setDescription('???.')
imPM3Power2OutputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputBreaker1.setDescription('???.')
imPM3Power2OutputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputBreaker2.setDescription('???.')
imPM3Power2Fan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2Fan.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2Fan.setDescription('???.')
imPM3Power2BatteryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2BatteryAvailable.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2BatteryAvailable.setDescription('???.')
imPM3Power2OutputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 57), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputVoltagePhase1.setDescription('???.')
imPM3Power2OutputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 58), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputCurrentPhase1.setDescription('???.')
imPM3Power2OutputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 59), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputPowerVAphase1.setDescription('???.')
imPM3Power2OutputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 60), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputPowerKVAphase1.setDescription('???.')
imPM3Power2OutputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 61), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputVoltagePhase2.setDescription('???.')
imPM3Power2OutputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 62), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputCurrentPhase2.setDescription('???.')
imPM3Power2OutputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 63), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputPowerVAphase2.setDescription('???.')
imPM3Power2OutputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 64), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputPowerKVAphase2.setDescription('???.')
imPM3Power2OutputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 65), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputVoltagePhase3.setDescription('???.')
imPM3Power2OutputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 66), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputCurrentPhase3.setDescription('???.')
imPM3Power2OutputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 67), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputPowerVAphase3.setDescription('???.')
imPM3Power2OutputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 4, 68), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power2OutputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power2OutputPowerKVAphase3.setDescription('???.')
imPM3Power3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5))
imPM3Power3Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3Manufacturer.setDescription('???.')
imPM3Power3Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3Type.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3Type.setDescription('???.')
imPM3Power3serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3serNumb.setDescription('???.')
imPM3Power3nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3nextServiceDate.setDescription('???.')
imPM3Power3InputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 5), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputVoltage.setDescription('???.')
imPM3Power3InputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 6), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputCurrent.setDescription('???.')
imPM3Power3InputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 7), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputPowerVA.setDescription('???.')
imPM3Power3InputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 8), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputPowerKVA.setDescription('???.')
imPM3Power3InputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 9), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputPowerW.setDescription('???.')
imPM3Power3InputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 10), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputPowerKW.setDescription('???.')
imPM3Power3InputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 11), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputVoltagePhase1.setDescription('???.')
imPM3Power3InputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 12), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputCurrentPhase1.setDescription('???.')
imPM3Power3InputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 13), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputPowerVAphase1.setDescription('???.')
imPM3Power3InputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 14), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputPowerKVAphase1.setDescription('???.')
imPM3Power3InputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 15), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputVoltagePhase2.setDescription('???.')
imPM3Power3InputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 16), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputCurrentPhase2.setDescription('???.')
imPM3Power3InputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 17), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputPowerVAphase2.setDescription('???.')
imPM3Power3InputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 18), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputPowerKVAphase2.setDescription('???.')
imPM3Power3InputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 19), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputVoltagePhase3.setDescription('???.')
imPM3Power3InputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 20), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputCurrentPhase3.setDescription('???.')
imPM3Power3InputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 21), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputPowerVAphase3.setDescription('???.')
imPM3Power3InputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 22), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputPowerKVAphase3.setDescription('???.')
imPM3Power3OutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 23), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputVoltage.setDescription('???.')
imPM3Power3OutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 24), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputCurrent.setDescription('???.')
imPM3Power3OutputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 25), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputPowerVA.setDescription('???.')
imPM3Power3OutputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 26), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputPowerKVA.setDescription('???.')
imPM3Power3OutputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 27), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputPowerW.setDescription('???.')
imPM3Power3OutputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 28), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputPowerKW.setDescription('???.')
imPM3Power3OutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 29), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputLoad.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputLoad.setDescription('???.')
imPM3Power3OutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 30), NonNegativeInteger()).setUnits('0.1 Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputFrequency.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputFrequency.setDescription('???.')
imPM3Power3Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 31), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3Temperature.setDescription('???.')
imPM3Power3Running1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3Running1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3Running1.setDescription('???.')
imPM3Power3Running2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3Running2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3Running2.setDescription('???.')
imPM3Power3Running3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3Running3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3Running3.setDescription('???.')
imPM3Power3Running4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3Running4.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3Running4.setDescription('???.')
imPM3Power3Running5 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3Running5.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3Running5.setDescription('???.')
imPM3Power3Running6 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3Running6.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3Running6.setDescription('???.')
imPM3Power3Running7 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3Running7.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3Running7.setDescription('???.')
imPM3Power3Running8 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3Running8.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3Running8.setDescription('???.')
imPM3Power3InputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputFuse.setDescription('???.')
imPM3Power3InputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputFuse1.setDescription('???.')
imPM3Power3InputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputFuse2.setDescription('???.')
imPM3Power3InputFuse3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputFuse3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputFuse3.setDescription('???.')
imPM3Power3InputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputBreaker.setDescription('???.')
imPM3Power3InputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputBreaker1.setDescription('???.')
imPM3Power3InputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputBreaker2.setDescription('???.')
imPM3Power3InputBreaker3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputBreaker3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputBreaker3.setDescription('???.')
imPM3Power3InputSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3InputSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3InputSurgeArrester.setDescription('???.')
imPM3Power3OutputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputFuse.setDescription('???.')
imPM3Power3OutputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputFuse1.setDescription('???.')
imPM3Power3OutputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputFuse2.setDescription('???.')
imPM3Power3OutputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputBreaker.setDescription('???.')
imPM3Power3OutputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputBreaker1.setDescription('???.')
imPM3Power3OutputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputBreaker2.setDescription('???.')
imPM3Power3Fan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3Fan.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3Fan.setDescription('???.')
imPM3Power3BatteryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3BatteryAvailable.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3BatteryAvailable.setDescription('???.')
imPM3Power3OutputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 57), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputVoltagePhase1.setDescription('???.')
imPM3Power3OutputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 58), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputCurrentPhase1.setDescription('???.')
imPM3Power3OutputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 59), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputPowerVAphase1.setDescription('???.')
imPM3Power3OutputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 60), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputPowerKVAphase1.setDescription('???.')
imPM3Power3OutputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 61), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputVoltagePhase2.setDescription('???.')
imPM3Power3OutputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 62), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputCurrentPhase2.setDescription('???.')
imPM3Power3OutputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 63), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputPowerVAphase2.setDescription('???.')
imPM3Power3OutputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 64), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputPowerKVAphase2.setDescription('???.')
imPM3Power3OutputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 65), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputVoltagePhase3.setDescription('???.')
imPM3Power3OutputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 66), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputCurrentPhase3.setDescription('???.')
imPM3Power3OutputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 67), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputPowerVAphase3.setDescription('???.')
imPM3Power3OutputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 5, 68), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3Power3OutputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM3Power3OutputPowerKVAphase3.setDescription('???.')
imPM3Battery = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 6))
imPM3BatteryNominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 6, 1), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatteryNominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM3BatteryNominalCapacity.setDescription('???.')
imPM3BatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 6, 2), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatteryVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM3BatteryVoltage.setDescription('???.')
imPM3BatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 6, 3), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatteryCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM3BatteryCurrent.setDescription('???.')
imPM3BatteryChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 6, 4), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatteryChargeState.setStatus('current')
if mibBuilder.loadTexts: imPM3BatteryChargeState.setDescription('???.')
imPM3BatteryAutonomyTime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 6, 5), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatteryAutonomyTime.setStatus('current')
if mibBuilder.loadTexts: imPM3BatteryAutonomyTime.setDescription('???.')
imPM3BatteryTimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 6, 6), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatteryTimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPM3BatteryTimeOnBattery.setDescription('???.')
imPM3BatLeg1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7))
imPM3BatLeg1Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1Manufacturer.setDescription('???.')
imPM3BatLeg1Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1Type.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1Type.setDescription('???.')
imPM3BatLeg1serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1serNumb.setDescription('???.')
imPM3BatLeg1nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1nextServiceDate.setDescription('???.')
imPM3BatLeg1InstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1InstallationDate.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1InstallationDate.setDescription('???.')
imPM3BatLeg1NominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 6), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1NominalVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1NominalVoltage.setDescription('???.')
imPM3BatLeg1NominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 7), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1NominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1NominalCapacity.setDescription('???.')
imPM3BatLeg1Lifetime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 8), NonNegativeInteger()).setUnits('years').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1Lifetime.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1Lifetime.setDescription('???.')
imPM3BatLeg1Voltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 9), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1Voltage.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1Voltage.setDescription('???.')
imPM3BatLeg1Current = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 10), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1Current.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1Current.setDescription('???.')
imPM3BatLeg1Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 11), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1Temperature.setDescription('???.')
imPM3BatLeg1ChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 12), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1ChargeState.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1ChargeState.setDescription('???.')
imPM3BatLeg1RestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 13), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1RestCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1RestCapacity.setDescription('???.')
imPM3BatLeg1Autonomytime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 14), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1Autonomytime.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1Autonomytime.setDescription('???.')
imPM3BatLeg1TimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 15), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1TimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1TimeOnBattery.setDescription('???.')
imPM3BatLeg1Fuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1Fuse.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1Fuse.setDescription('???.')
imPM3BatLeg1Breaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1Breaker.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1Breaker.setDescription('???.')
imPM3BatLeg1LowVoltageDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 7, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg1LowVoltageDisconnect.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg1LowVoltageDisconnect.setDescription('???.')
imPM3BatLeg2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8))
imPM3BatLeg2Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2Manufacturer.setDescription('???.')
imPM3BatLeg2Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2Type.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2Type.setDescription('???.')
imPM3BatLeg2serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2serNumb.setDescription('???.')
imPM3BatLeg2nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2nextServiceDate.setDescription('???.')
imPM3BatLeg2InstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2InstallationDate.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2InstallationDate.setDescription('???.')
imPM3BatLeg2NominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 6), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2NominalVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2NominalVoltage.setDescription('???.')
imPM3BatLeg2NominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 7), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2NominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2NominalCapacity.setDescription('???.')
imPM3BatLeg2Lifetime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 8), NonNegativeInteger()).setUnits('years').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2Lifetime.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2Lifetime.setDescription('???.')
imPM3BatLeg2Voltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 9), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2Voltage.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2Voltage.setDescription('???.')
imPM3BatLeg2Current = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 10), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2Current.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2Current.setDescription('???.')
imPM3BatLeg2Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 11), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2Temperature.setDescription('???.')
imPM3BatLeg2ChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 12), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2ChargeState.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2ChargeState.setDescription('???.')
imPM3BatLeg2RestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 13), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2RestCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2RestCapacity.setDescription('???.')
imPM3BatLeg2Autonomytime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 14), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2Autonomytime.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2Autonomytime.setDescription('???.')
imPM3BatLeg2TimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 15), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2TimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2TimeOnBattery.setDescription('???.')
imPM3BatLeg2Fuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2Fuse.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2Fuse.setDescription('???.')
imPM3BatLeg2Breaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2Breaker.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2Breaker.setDescription('???.')
imPM3BatLeg2LowVoltageDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 8, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg2LowVoltageDisconnect.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg2LowVoltageDisconnect.setDescription('???.')
imPM3BatLeg3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9))
imPM3BatLeg3Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3Manufacturer.setDescription('???.')
imPM3BatLeg3Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3Type.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3Type.setDescription('???.')
imPM3BatLeg3serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3serNumb.setDescription('???.')
imPM3BatLeg3nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3nextServiceDate.setDescription('???.')
imPM3BatLeg3InstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3InstallationDate.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3InstallationDate.setDescription('???.')
imPM3BatLeg3NominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 6), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3NominalVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3NominalVoltage.setDescription('???.')
imPM3BatLeg3NominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 7), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3NominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3NominalCapacity.setDescription('???.')
imPM3BatLeg3Lifetime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 8), NonNegativeInteger()).setUnits('years').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3Lifetime.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3Lifetime.setDescription('???.')
imPM3BatLeg3Voltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 9), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3Voltage.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3Voltage.setDescription('???.')
imPM3BatLeg3Current = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 10), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3Current.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3Current.setDescription('???.')
imPM3BatLeg3Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 11), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3Temperature.setDescription('???.')
imPM3BatLeg3ChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 12), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3ChargeState.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3ChargeState.setDescription('???.')
imPM3BatLeg3RestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 13), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3RestCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3RestCapacity.setDescription('???.')
imPM3BatLeg3Autonomytime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 14), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3Autonomytime.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3Autonomytime.setDescription('???.')
imPM3BatLeg3TimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 15), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3TimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3TimeOnBattery.setDescription('???.')
imPM3BatLeg3Fuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3Fuse.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3Fuse.setDescription('???.')
imPM3BatLeg3Breaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3Breaker.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3Breaker.setDescription('???.')
imPM3BatLeg3LowVoltageDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 9, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3BatLeg3LowVoltageDisconnect.setStatus('current')
if mibBuilder.loadTexts: imPM3BatLeg3LowVoltageDisconnect.setDescription('???.')
imPM3Distrib = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 10))
imPm3Distrib = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 10, 1), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm3Distrib.setStatus('current')
if mibBuilder.loadTexts: imPm3Distrib.setDescription('???.')
imPM3DistTable = MibTable((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 10, 2), )
if mibBuilder.loadTexts: imPM3DistTable.setStatus('current')
if mibBuilder.loadTexts: imPM3DistTable.setDescription('???.')
imPM3DistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 10, 2, 1), ).setIndexNames((0, "IMCO-BIG-MIB", "imPM3DistId"))
if mibBuilder.loadTexts: imPM3DistEntry.setStatus('current')
if mibBuilder.loadTexts: imPM3DistEntry.setDescription('???.')
imPM3DistId = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 10, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: imPM3DistId.setStatus('current')
if mibBuilder.loadTexts: imPM3DistId.setDescription('???.')
imPM3DistFuse = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3DistFuse.setStatus('current')
if mibBuilder.loadTexts: imPM3DistFuse.setDescription('???.')
imPM3DistBreaker = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3DistBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM3DistBreaker.setDescription('???.')
imPM3Control = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 11))
imPM3ContTable = MibTable((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 11, 1), )
if mibBuilder.loadTexts: imPM3ContTable.setStatus('current')
if mibBuilder.loadTexts: imPM3ContTable.setDescription('???.')
imPM3ContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 11, 1, 1), ).setIndexNames((0, "IMCO-BIG-MIB", "imPM3ContId"))
if mibBuilder.loadTexts: imPM3ContEntry.setStatus('current')
if mibBuilder.loadTexts: imPM3ContEntry.setDescription('???.')
imPM3ContId = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 11, 1, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: imPM3ContId.setStatus('current')
if mibBuilder.loadTexts: imPM3ContId.setDescription('???.')
imPM3ContState = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM3ContState.setStatus('current')
if mibBuilder.loadTexts: imPM3ContState.setDescription('???.')
imPM3ContLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3ContLabel.setStatus('current')
if mibBuilder.loadTexts: imPM3ContLabel.setDescription('???.')
imPM3ContTimeOFF = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 11, 1, 1, 4), Integer32()).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM3ContTimeOFF.setStatus('current')
if mibBuilder.loadTexts: imPM3ContTimeOFF.setDescription('???.')
imPM3ContAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM3ContAuto.setStatus('current')
if mibBuilder.loadTexts: imPM3ContAuto.setDescription('???.')
imPM3ContTestCAPcommand = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM3ContTestCAPcommand.setStatus('current')
if mibBuilder.loadTexts: imPM3ContTestCAPcommand.setDescription('???.')
imPM3ContTestCAPvoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 11, 3), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3ContTestCAPvoltage.setStatus('current')
if mibBuilder.loadTexts: imPM3ContTestCAPvoltage.setDescription('???.')
imPM3ContTestCAPcurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 11, 4), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3ContTestCAPcurrent.setStatus('current')
if mibBuilder.loadTexts: imPM3ContTestCAPcurrent.setDescription('???.')
imPM3ContTestCAPtemperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 11, 5), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3ContTestCAPtemperature.setStatus('current')
if mibBuilder.loadTexts: imPM3ContTestCAPtemperature.setDescription('???.')
imPM3ContTestCAPduration = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 11, 6), Integer32()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3ContTestCAPduration.setStatus('current')
if mibBuilder.loadTexts: imPM3ContTestCAPduration.setDescription('???.')
imPM3ContTestCAPstatus = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 3, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM3ContTestCAPstatus.setStatus('current')
if mibBuilder.loadTexts: imPM3ContTestCAPstatus.setDescription('???.')
imPM4SystemID = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 1))
imPM4SystemIDManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemIDManufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemIDManufacturer.setDescription('???.')
imPM4SystemIDType = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemIDType.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemIDType.setDescription('???.')
imPM4SystemIDserNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemIDserNumb.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemIDserNumb.setDescription('???.')
imPM4SystemIDnextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemIDnextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemIDnextServiceDate.setDescription('???.')
imPM4SystemIDaddress = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 1, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemIDaddress.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemIDaddress.setDescription('???.')
imPM4SystemIDhwVersion = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 1, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemIDhwVersion.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemIDhwVersion.setDescription('???.')
imPM4SystemIDswVersion = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 1, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemIDswVersion.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemIDswVersion.setDescription('???.')
imPM4SystemIDPMserialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemIDPMserialNumber.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemIDPMserialNumber.setDescription('???.')
imPM4SystemIDbuttonName = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemIDbuttonName.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemIDbuttonName.setDescription('???.')
imPM4SystemGEN = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 2))
imPM4SystemGENSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemGENSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemGENSurgeArrester.setDescription('???.')
imPM4SystemGENDoor1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemGENDoor1.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemGENDoor1.setDescription('???.')
imPM4SystemGENDoor2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("close", 0), ("open", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemGENDoor2.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemGENDoor2.setDescription('???.')
imPM4SystemGENFan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemGENFan.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemGENFan.setDescription('???.')
imPM4SystemGENuser1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemGENuser1.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemGENuser1.setDescription('???.')
imPM4SystemGENuser2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemGENuser2.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemGENuser2.setDescription('???.')
imPM4SystemGENuser3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemGENuser3.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemGENuser3.setDescription('???.')
imPM4SystemGENuser4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemGENuser4.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemGENuser4.setDescription('???.')
imPM4SystemGENtemperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 2, 9), NonNegativeInteger()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4SystemGENtemperature.setStatus('current')
if mibBuilder.loadTexts: imPM4SystemGENtemperature.setDescription('???.')
imPM4Power1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3))
imPM4Power1Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1Manufacturer.setDescription('???.')
imPM4Power1Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1Type.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1Type.setDescription('???.')
imPM4Power1serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1serNumb.setDescription('???.')
imPM4Power1nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1nextServiceDate.setDescription('???.')
imPM4Power1InputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 5), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputVoltage.setDescription('???.')
imPM4Power1InputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 6), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputCurrent.setDescription('???.')
imPM4Power1InputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 7), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputPowerVA.setDescription('???.')
imPM4Power1InputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 8), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputPowerKVA.setDescription('???.')
imPM4Power1InputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 9), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputPowerW.setDescription('???.')
imPM4Power1InputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 10), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputPowerKW.setDescription('???.')
imPM4Power1InputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 11), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputVoltagePhase1.setDescription('???.')
imPM4Power1InputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 12), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputCurrentPhase1.setDescription('???.')
imPM4Power1InputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 13), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputPowerVAphase1.setDescription('???.')
imPM4Power1InputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 14), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputPowerKVAphase1.setDescription('???.')
imPM4Power1InputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 15), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputVoltagePhase2.setDescription('???.')
imPM4Power1InputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 16), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputCurrentPhase2.setDescription('???.')
imPM4Power1InputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 17), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputPowerVAphase2.setDescription('???.')
imPM4Power1InputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 18), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputPowerKVAphase2.setDescription('???.')
imPM4Power1InputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 19), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputVoltagePhase3.setDescription('???.')
imPM4Power1InputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 20), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputCurrentPhase3.setDescription('???.')
imPM4Power1InputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 21), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputPowerVAphase3.setDescription('???.')
imPM4Power1InputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 22), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputPowerKVAphase3.setDescription('???.')
imPM4Power1OutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 23), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputVoltage.setDescription('???.')
imPM4Power1OutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 24), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputCurrent.setDescription('???.')
imPM4Power1OutputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 25), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputPowerVA.setDescription('???.')
imPM4Power1OutputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 26), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputPowerKVA.setDescription('???.')
imPM4Power1OutputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 27), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputPowerW.setDescription('???.')
imPM4Power1OutputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 28), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputPowerKW.setDescription('???.')
imPM4Power1OutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 29), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputLoad.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputLoad.setDescription('???.')
imPM4Power1OutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 30), NonNegativeInteger()).setUnits('0.1 Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputFrequency.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputFrequency.setDescription('???.')
imPM4Power1Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 31), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1Temperature.setDescription('???.')
imPM4Power1Running1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1Running1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1Running1.setDescription('???.')
imPM4Power1Running2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1Running2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1Running2.setDescription('???.')
imPM4Power1Running3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1Running3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1Running3.setDescription('???.')
imPM4Power1Running4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1Running4.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1Running4.setDescription('???.')
imPM4Power1Running5 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1Running5.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1Running5.setDescription('???.')
imPM4Power1Running6 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1Running6.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1Running6.setDescription('???.')
imPM4Power1Running7 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1Running7.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1Running7.setDescription('???.')
imPM4Power1Running8 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1Running8.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1Running8.setDescription('???.')
imPM4Power1InputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputFuse.setDescription('???.')
imPM4Power1InputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputFuse1.setDescription('???.')
imPM4Power1InputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputFuse2.setDescription('???.')
imPM4Power1InputFuse3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputFuse3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputFuse3.setDescription('???.')
imPM4Power1InputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputBreaker.setDescription('???.')
imPM4Power1InputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputBreaker1.setDescription('???.')
imPM4Power1InputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputBreaker2.setDescription('???.')
imPM4Power1InputBreaker3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputBreaker3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputBreaker3.setDescription('???.')
imPM4Power1InputSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1InputSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1InputSurgeArrester.setDescription('???.')
imPM4Power1OutputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputFuse.setDescription('???.')
imPM4Power1OutputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputFuse1.setDescription('???.')
imPM4Power1OutputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputFuse2.setDescription('???.')
imPM4Power1OutputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputBreaker.setDescription('???.')
imPM4Power1OutputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputBreaker1.setDescription('???.')
imPM4Power1OutputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputBreaker2.setDescription('???.')
imPM4Power1Fan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1Fan.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1Fan.setDescription('???.')
imPM4Power1BatteryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1BatteryAvailable.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1BatteryAvailable.setDescription('???.')
imPM4Power1OutputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 57), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputVoltagePhase1.setDescription('???.')
imPM4Power1OutputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 58), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputCurrentPhase1.setDescription('???.')
imPM4Power1OutputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 59), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputPowerVAphase1.setDescription('???.')
imPM4Power1OutputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 60), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputPowerKVAphase1.setDescription('???.')
imPM4Power1OutputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 61), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputVoltagePhase2.setDescription('???.')
imPM4Power1OutputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 62), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputCurrentPhase2.setDescription('???.')
imPM4Power1OutputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 63), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputPowerVAphase2.setDescription('???.')
imPM4Power1OutputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 64), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputPowerKVAphase2.setDescription('???.')
imPM4Power1OutputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 65), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputVoltagePhase3.setDescription('???.')
imPM4Power1OutputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 66), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputCurrentPhase3.setDescription('???.')
imPM4Power1OutputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 67), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputPowerVAphase3.setDescription('???.')
imPM4Power1OutputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 3, 68), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power1OutputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power1OutputPowerKVAphase3.setDescription('???.')
imPM4Power2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4))
imPM4Power2Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2Manufacturer.setDescription('???.')
imPM4Power2Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2Type.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2Type.setDescription('???.')
imPM4Power2serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2serNumb.setDescription('???.')
imPM4Power2nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2nextServiceDate.setDescription('???.')
imPM4Power2InputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 5), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputVoltage.setDescription('???.')
imPM4Power2InputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 6), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputCurrent.setDescription('???.')
imPM4Power2InputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 7), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputPowerVA.setDescription('???.')
imPM4Power2InputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 8), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputPowerKVA.setDescription('???.')
imPM4Power2InputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 9), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputPowerW.setDescription('???.')
imPM4Power2InputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 10), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputPowerKW.setDescription('???.')
imPM4Power2InputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 11), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputVoltagePhase1.setDescription('???.')
imPM4Power2InputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 12), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputCurrentPhase1.setDescription('???.')
imPM4Power2InputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 13), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputPowerVAphase1.setDescription('???.')
imPM4Power2InputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 14), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputPowerKVAphase1.setDescription('???.')
imPM4Power2InputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 15), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputVoltagePhase2.setDescription('???.')
imPM4Power2InputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 16), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputCurrentPhase2.setDescription('???.')
imPM4Power2InputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 17), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputPowerVAphase2.setDescription('???.')
imPM4Power2InputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 18), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputPowerKVAphase2.setDescription('???.')
imPM4Power2InputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 19), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputVoltagePhase3.setDescription('???.')
imPM4Power2InputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 20), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputCurrentPhase3.setDescription('???.')
imPM4Power2InputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 21), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputPowerVAphase3.setDescription('???.')
imPM4Power2InputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 22), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputPowerKVAphase3.setDescription('???.')
imPM4Power2OutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 23), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputVoltage.setDescription('???.')
imPM4Power2OutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 24), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputCurrent.setDescription('???.')
imPM4Power2OutputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 25), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputPowerVA.setDescription('???.')
imPM4Power2OutputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 26), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputPowerKVA.setDescription('???.')
imPM4Power2OutputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 27), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputPowerW.setDescription('???.')
imPM4Power2OutputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 28), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputPowerKW.setDescription('???.')
imPM4Power2OutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 29), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputLoad.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputLoad.setDescription('???.')
imPM4Power2OutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 30), NonNegativeInteger()).setUnits('0.1 Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputFrequency.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputFrequency.setDescription('???.')
imPM4Power2Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 31), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2Temperature.setDescription('???.')
imPM4Power2Running1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2Running1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2Running1.setDescription('???.')
imPM4Power2Running2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2Running2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2Running2.setDescription('???.')
imPM4Power2Running3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2Running3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2Running3.setDescription('???.')
imPM4Power2Running4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2Running4.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2Running4.setDescription('???.')
imPM4Power2Running5 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2Running5.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2Running5.setDescription('???.')
imPM4Power2Running6 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2Running6.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2Running6.setDescription('???.')
imPM4Power2Running7 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2Running7.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2Running7.setDescription('???.')
imPM4Power2Running8 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2Running8.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2Running8.setDescription('???.')
imPM4Power2InputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputFuse.setDescription('???.')
imPM4Power2InputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputFuse1.setDescription('???.')
imPM4Power2InputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputFuse2.setDescription('???.')
imPM4Power2InputFuse3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputFuse3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputFuse3.setDescription('???.')
imPM4Power2InputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputBreaker.setDescription('???.')
imPM4Power2InputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputBreaker1.setDescription('???.')
imPM4Power2InputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputBreaker2.setDescription('???.')
imPM4Power2InputBreaker3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputBreaker3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputBreaker3.setDescription('???.')
imPM4Power2InputSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2InputSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2InputSurgeArrester.setDescription('???.')
imPM4Power2OutputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputFuse.setDescription('???.')
imPM4Power2OutputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputFuse1.setDescription('???.')
imPM4Power2OutputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputFuse2.setDescription('???.')
imPM4Power2OutputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputBreaker.setDescription('???.')
imPM4Power2OutputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputBreaker1.setDescription('???.')
imPM4Power2OutputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputBreaker2.setDescription('???.')
imPM4Power2Fan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2Fan.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2Fan.setDescription('???.')
imPM4Power2BatteryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2BatteryAvailable.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2BatteryAvailable.setDescription('???.')
imPM4Power2OutputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 57), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputVoltagePhase1.setDescription('???.')
imPM4Power2OutputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 58), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputCurrentPhase1.setDescription('???.')
imPM4Power2OutputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 59), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputPowerVAphase1.setDescription('???.')
imPM4Power2OutputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 60), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputPowerKVAphase1.setDescription('???.')
imPM4Power2OutputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 61), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputVoltagePhase2.setDescription('???.')
imPM4Power2OutputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 62), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputCurrentPhase2.setDescription('???.')
imPM4Power2OutputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 63), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputPowerVAphase2.setDescription('???.')
imPM4Power2OutputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 64), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputPowerKVAphase2.setDescription('???.')
imPM4Power2OutputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 65), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputVoltagePhase3.setDescription('???.')
imPM4Power2OutputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 66), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputCurrentPhase3.setDescription('???.')
imPM4Power2OutputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 67), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputPowerVAphase3.setDescription('???.')
imPM4Power2OutputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 4, 68), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power2OutputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power2OutputPowerKVAphase3.setDescription('???.')
imPM4Power3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5))
imPM4Power3Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3Manufacturer.setDescription('???.')
imPM4Power3Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3Type.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3Type.setDescription('???.')
imPM4Power3serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3serNumb.setDescription('???.')
imPM4Power3nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3nextServiceDate.setDescription('???.')
imPM4Power3InputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 5), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputVoltage.setDescription('???.')
imPM4Power3InputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 6), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputCurrent.setDescription('???.')
imPM4Power3InputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 7), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputPowerVA.setDescription('???.')
imPM4Power3InputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 8), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputPowerKVA.setDescription('???.')
imPM4Power3InputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 9), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputPowerW.setDescription('???.')
imPM4Power3InputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 10), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputPowerKW.setDescription('???.')
imPM4Power3InputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 11), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputVoltagePhase1.setDescription('???.')
imPM4Power3InputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 12), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputCurrentPhase1.setDescription('???.')
imPM4Power3InputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 13), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputPowerVAphase1.setDescription('???.')
imPM4Power3InputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 14), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputPowerKVAphase1.setDescription('???.')
imPM4Power3InputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 15), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputVoltagePhase2.setDescription('???.')
imPM4Power3InputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 16), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputCurrentPhase2.setDescription('???.')
imPM4Power3InputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 17), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputPowerVAphase2.setDescription('???.')
imPM4Power3InputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 18), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputPowerKVAphase2.setDescription('???.')
imPM4Power3InputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 19), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputVoltagePhase3.setDescription('???.')
imPM4Power3InputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 20), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputCurrentPhase3.setDescription('???.')
imPM4Power3InputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 21), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputPowerVAphase3.setDescription('???.')
imPM4Power3InputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 22), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputPowerKVAphase3.setDescription('???.')
imPM4Power3OutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 23), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputVoltage.setDescription('???.')
imPM4Power3OutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 24), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputCurrent.setDescription('???.')
imPM4Power3OutputPowerVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 25), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputPowerVA.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputPowerVA.setDescription('???.')
imPM4Power3OutputPowerKVA = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 26), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputPowerKVA.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputPowerKVA.setDescription('???.')
imPM4Power3OutputPowerW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 27), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputPowerW.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputPowerW.setDescription('???.')
imPM4Power3OutputPowerKW = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 28), Integer32()).setUnits('0.1 kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputPowerKW.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputPowerKW.setDescription('???.')
imPM4Power3OutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 29), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputLoad.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputLoad.setDescription('???.')
imPM4Power3OutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 30), NonNegativeInteger()).setUnits('0.1 Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputFrequency.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputFrequency.setDescription('???.')
imPM4Power3Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 31), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3Temperature.setDescription('???.')
imPM4Power3Running1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3Running1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3Running1.setDescription('???.')
imPM4Power3Running2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3Running2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3Running2.setDescription('???.')
imPM4Power3Running3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3Running3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3Running3.setDescription('???.')
imPM4Power3Running4 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3Running4.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3Running4.setDescription('???.')
imPM4Power3Running5 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3Running5.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3Running5.setDescription('???.')
imPM4Power3Running6 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3Running6.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3Running6.setDescription('???.')
imPM4Power3Running7 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3Running7.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3Running7.setDescription('???.')
imPM4Power3Running8 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3Running8.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3Running8.setDescription('???.')
imPM4Power3InputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputFuse.setDescription('???.')
imPM4Power3InputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputFuse1.setDescription('???.')
imPM4Power3InputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputFuse2.setDescription('???.')
imPM4Power3InputFuse3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputFuse3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputFuse3.setDescription('???.')
imPM4Power3InputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputBreaker.setDescription('???.')
imPM4Power3InputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputBreaker1.setDescription('???.')
imPM4Power3InputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputBreaker2.setDescription('???.')
imPM4Power3InputBreaker3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputBreaker3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputBreaker3.setDescription('???.')
imPM4Power3InputSurgeArrester = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3InputSurgeArrester.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3InputSurgeArrester.setDescription('???.')
imPM4Power3OutputFuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputFuse.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputFuse.setDescription('???.')
imPM4Power3OutputFuse1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputFuse1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputFuse1.setDescription('???.')
imPM4Power3OutputFuse2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputFuse2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputFuse2.setDescription('???.')
imPM4Power3OutputBreaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputBreaker.setDescription('???.')
imPM4Power3OutputBreaker1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputBreaker1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputBreaker1.setDescription('???.')
imPM4Power3OutputBreaker2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputBreaker2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputBreaker2.setDescription('???.')
imPM4Power3Fan = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3Fan.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3Fan.setDescription('???.')
imPM4Power3BatteryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3BatteryAvailable.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3BatteryAvailable.setDescription('???.')
imPM4Power3OutputVoltagePhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 57), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputVoltagePhase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputVoltagePhase1.setDescription('???.')
imPM4Power3OutputCurrentPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 58), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputCurrentPhase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputCurrentPhase1.setDescription('???.')
imPM4Power3OutputPowerVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 59), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputPowerVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputPowerVAphase1.setDescription('???.')
imPM4Power3OutputPowerKVAphase1 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 60), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputPowerKVAphase1.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputPowerKVAphase1.setDescription('???.')
imPM4Power3OutputVoltagePhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 61), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputVoltagePhase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputVoltagePhase2.setDescription('???.')
imPM4Power3OutputCurrentPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 62), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputCurrentPhase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputCurrentPhase2.setDescription('???.')
imPM4Power3OutputPowerVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 63), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputPowerVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputPowerVAphase2.setDescription('???.')
imPM4Power3OutputPowerKVAphase2 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 64), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputPowerKVAphase2.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputPowerKVAphase2.setDescription('???.')
imPM4Power3OutputVoltagePhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 65), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputVoltagePhase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputVoltagePhase3.setDescription('???.')
imPM4Power3OutputCurrentPhase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 66), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputCurrentPhase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputCurrentPhase3.setDescription('???.')
imPM4Power3OutputPowerVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 67), Integer32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputPowerVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputPowerVAphase3.setDescription('???.')
imPM4Power3OutputPowerKVAphase3 = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 5, 68), Integer32()).setUnits('0.1 kVA').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4Power3OutputPowerKVAphase3.setStatus('current')
if mibBuilder.loadTexts: imPM4Power3OutputPowerKVAphase3.setDescription('???.')
imPM4Battery = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 6))
imPM4BatteryNominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 6, 1), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatteryNominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM4BatteryNominalCapacity.setDescription('???.')
imPM4BatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 6, 2), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatteryVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM4BatteryVoltage.setDescription('???.')
imPM4BatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 6, 3), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatteryCurrent.setStatus('current')
if mibBuilder.loadTexts: imPM4BatteryCurrent.setDescription('???.')
imPM4BatteryChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 6, 4), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatteryChargeState.setStatus('current')
if mibBuilder.loadTexts: imPM4BatteryChargeState.setDescription('???.')
imPM4BatteryAutonomyTime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 6, 5), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatteryAutonomyTime.setStatus('current')
if mibBuilder.loadTexts: imPM4BatteryAutonomyTime.setDescription('???.')
imPM4BatteryTimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 6, 6), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatteryTimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPM4BatteryTimeOnBattery.setDescription('???.')
imPM4BatLeg1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7))
imPM4BatLeg1Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1Manufacturer.setDescription('???.')
imPM4BatLeg1Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1Type.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1Type.setDescription('???.')
imPM4BatLeg1serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1serNumb.setDescription('???.')
imPM4BatLeg1nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1nextServiceDate.setDescription('???.')
imPM4BatLeg1InstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1InstallationDate.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1InstallationDate.setDescription('???.')
imPM4BatLeg1NominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 6), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1NominalVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1NominalVoltage.setDescription('???.')
imPM4BatLeg1NominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 7), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1NominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1NominalCapacity.setDescription('???.')
imPM4BatLeg1Lifetime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 8), NonNegativeInteger()).setUnits('years').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1Lifetime.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1Lifetime.setDescription('???.')
imPM4BatLeg1Voltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 9), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1Voltage.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1Voltage.setDescription('???.')
imPM4BatLeg1Current = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 10), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1Current.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1Current.setDescription('???.')
imPM4BatLeg1Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 11), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1Temperature.setDescription('???.')
imPM4BatLeg1ChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 12), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1ChargeState.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1ChargeState.setDescription('???.')
imPM4BatLeg1RestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 13), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1RestCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1RestCapacity.setDescription('???.')
imPM4BatLeg1Autonomytime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 14), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1Autonomytime.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1Autonomytime.setDescription('???.')
imPM4BatLeg1TimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 15), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1TimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1TimeOnBattery.setDescription('???.')
imPM4BatLeg1Fuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1Fuse.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1Fuse.setDescription('???.')
imPM4BatLeg1Breaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1Breaker.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1Breaker.setDescription('???.')
imPM4BatLeg1LowVoltageDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 7, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg1LowVoltageDisconnect.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg1LowVoltageDisconnect.setDescription('???.')
imPM4BatLeg2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8))
imPM4BatLeg2Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2Manufacturer.setDescription('???.')
imPM4BatLeg2Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2Type.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2Type.setDescription('???.')
imPM4BatLeg2serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2serNumb.setDescription('???.')
imPM4BatLeg2nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2nextServiceDate.setDescription('???.')
imPM4BatLeg2InstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2InstallationDate.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2InstallationDate.setDescription('???.')
imPM4BatLeg2NominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 6), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2NominalVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2NominalVoltage.setDescription('???.')
imPM4BatLeg2NominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 7), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2NominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2NominalCapacity.setDescription('???.')
imPM4BatLeg2Lifetime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 8), NonNegativeInteger()).setUnits('years').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2Lifetime.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2Lifetime.setDescription('???.')
imPM4BatLeg2Voltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 9), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2Voltage.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2Voltage.setDescription('???.')
imPM4BatLeg2Current = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 10), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2Current.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2Current.setDescription('???.')
imPM4BatLeg2Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 11), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2Temperature.setDescription('???.')
imPM4BatLeg2ChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 12), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2ChargeState.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2ChargeState.setDescription('???.')
imPM4BatLeg2RestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 13), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2RestCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2RestCapacity.setDescription('???.')
imPM4BatLeg2Autonomytime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 14), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2Autonomytime.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2Autonomytime.setDescription('???.')
imPM4BatLeg2TimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 15), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2TimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2TimeOnBattery.setDescription('???.')
imPM4BatLeg2Fuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2Fuse.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2Fuse.setDescription('???.')
imPM4BatLeg2Breaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2Breaker.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2Breaker.setDescription('???.')
imPM4BatLeg2LowVoltageDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 8, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg2LowVoltageDisconnect.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg2LowVoltageDisconnect.setDescription('???.')
imPM4BatLeg3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9))
imPM4BatLeg3Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3Manufacturer.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3Manufacturer.setDescription('???.')
imPM4BatLeg3Type = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3Type.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3Type.setDescription('???.')
imPM4BatLeg3serNumb = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3serNumb.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3serNumb.setDescription('???.')
imPM4BatLeg3nextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3nextServiceDate.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3nextServiceDate.setDescription('???.')
imPM4BatLeg3InstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3InstallationDate.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3InstallationDate.setDescription('???.')
imPM4BatLeg3NominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 6), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3NominalVoltage.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3NominalVoltage.setDescription('???.')
imPM4BatLeg3NominalCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 7), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3NominalCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3NominalCapacity.setDescription('???.')
imPM4BatLeg3Lifetime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 8), NonNegativeInteger()).setUnits('years').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3Lifetime.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3Lifetime.setDescription('???.')
imPM4BatLeg3Voltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 9), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3Voltage.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3Voltage.setDescription('???.')
imPM4BatLeg3Current = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 10), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3Current.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3Current.setDescription('???.')
imPM4BatLeg3Temperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 11), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3Temperature.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3Temperature.setDescription('???.')
imPM4BatLeg3ChargeState = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 12), NonNegativeInteger()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3ChargeState.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3ChargeState.setDescription('???.')
imPM4BatLeg3RestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 13), NonNegativeInteger()).setUnits('Ah').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3RestCapacity.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3RestCapacity.setDescription('???.')
imPM4BatLeg3Autonomytime = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 14), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3Autonomytime.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3Autonomytime.setDescription('???.')
imPM4BatLeg3TimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 15), NonNegativeInteger()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3TimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3TimeOnBattery.setDescription('???.')
imPM4BatLeg3Fuse = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3Fuse.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3Fuse.setDescription('???.')
imPM4BatLeg3Breaker = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3Breaker.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3Breaker.setDescription('???.')
imPM4BatLeg3LowVoltageDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 9, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4BatLeg3LowVoltageDisconnect.setStatus('current')
if mibBuilder.loadTexts: imPM4BatLeg3LowVoltageDisconnect.setDescription('???.')
imPM4Distrib = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 10))
imPm4Distrib = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 10, 1), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPm4Distrib.setStatus('current')
if mibBuilder.loadTexts: imPm4Distrib.setDescription('???.')
imPM4DistTable = MibTable((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 10, 2), )
if mibBuilder.loadTexts: imPM4DistTable.setStatus('current')
if mibBuilder.loadTexts: imPM4DistTable.setDescription('???.')
imPM4DistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 10, 2, 1), ).setIndexNames((0, "IMCO-BIG-MIB", "imPM4DistId"))
if mibBuilder.loadTexts: imPM4DistEntry.setStatus('current')
if mibBuilder.loadTexts: imPM4DistEntry.setDescription('???.')
imPM4DistId = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 10, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: imPM4DistId.setStatus('current')
if mibBuilder.loadTexts: imPM4DistId.setDescription('???.')
imPM4DistFuse = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4DistFuse.setStatus('current')
if mibBuilder.loadTexts: imPM4DistFuse.setDescription('???.')
imPM4DistBreaker = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("err", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4DistBreaker.setStatus('current')
if mibBuilder.loadTexts: imPM4DistBreaker.setDescription('???.')
imPM4Control = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 11))
imPM4ContTable = MibTable((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 11, 1), )
if mibBuilder.loadTexts: imPM4ContTable.setStatus('current')
if mibBuilder.loadTexts: imPM4ContTable.setDescription('???.')
imPM4ContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 11, 1, 1), ).setIndexNames((0, "IMCO-BIG-MIB", "imPM4ContId"))
if mibBuilder.loadTexts: imPM4ContEntry.setStatus('current')
if mibBuilder.loadTexts: imPM4ContEntry.setDescription('???.')
imPM4ContId = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 11, 1, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: imPM4ContId.setStatus('current')
if mibBuilder.loadTexts: imPM4ContId.setDescription('???.')
imPM4ContState = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM4ContState.setStatus('current')
if mibBuilder.loadTexts: imPM4ContState.setDescription('???.')
imPM4ContLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4ContLabel.setStatus('current')
if mibBuilder.loadTexts: imPM4ContLabel.setDescription('???.')
imPM4ContTimeOFF = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 11, 1, 1, 4), Integer32()).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM4ContTimeOFF.setStatus('current')
if mibBuilder.loadTexts: imPM4ContTimeOFF.setDescription('???.')
imPM4ContAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM4ContAuto.setStatus('current')
if mibBuilder.loadTexts: imPM4ContAuto.setDescription('???.')
imPM4ContTestCAPcommand = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imPM4ContTestCAPcommand.setStatus('current')
if mibBuilder.loadTexts: imPM4ContTestCAPcommand.setDescription('???.')
imPM4ContTestCAPvoltage = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 11, 3), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4ContTestCAPvoltage.setStatus('current')
if mibBuilder.loadTexts: imPM4ContTestCAPvoltage.setDescription('???.')
imPM4ContTestCAPcurrent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 11, 4), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4ContTestCAPcurrent.setStatus('current')
if mibBuilder.loadTexts: imPM4ContTestCAPcurrent.setDescription('???.')
imPM4ContTestCAPtemperature = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 11, 5), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4ContTestCAPtemperature.setStatus('current')
if mibBuilder.loadTexts: imPM4ContTestCAPtemperature.setDescription('???.')
imPM4ContTestCAPduration = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 11, 6), Integer32()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4ContTestCAPduration.setStatus('current')
if mibBuilder.loadTexts: imPM4ContTestCAPduration.setDescription('???.')
imPM4ContTestCAPstatus = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 2, 4, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imPM4ContTestCAPstatus.setStatus('current')
if mibBuilder.loadTexts: imPM4ContTestCAPstatus.setDescription('???.')
imco3Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 3))
imco3AlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imco3AlarmsPresent.setStatus('current')
if mibBuilder.loadTexts: imco3AlarmsPresent.setDescription('The present number of active alarm conditions.')
imco3AlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 3, 2), )
if mibBuilder.loadTexts: imco3AlarmTable.setStatus('current')
if mibBuilder.loadTexts: imco3AlarmTable.setDescription('A list of alarm table entries.\n\n            The number of rows in the table at any given time is\n            reflected by the value of imco3AlarmsPresent.')
imco3AlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 3, 2, 1), ).setIndexNames((0, "IMCO-BIG-MIB", "imco3AlarmId"))
if mibBuilder.loadTexts: imco3AlarmEntry.setStatus('current')
if mibBuilder.loadTexts: imco3AlarmEntry.setDescription('An entry containing information applicable to a\n            particular alarm.')
imco3AlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 3, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: imco3AlarmId.setStatus('current')
if mibBuilder.loadTexts: imco3AlarmId.setDescription('A unique identifier for an alarm condition.  This\n            value must remain constant.')
imco3AlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255), SingleValueConstraint(256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316))).clone(namedValues=NamedValues(("aCommunicationLost", 1), ("aLowBattery", 2), ("aOnBattery", 3), ("aActionAlarm4", 4), ("aActionAlarm5", 5), ("aActionAlarm6", 6), ("aActionAlarm7", 7), ("aActionAlarm8", 8), ("aTimeforSystemService", 9), ("aGeneralSurgeArresterActivated", 10), ("aGeneralDoor1Opened", 11), ("aGeneralDoor2Opened", 12), ("aGeneralFanalarm", 13), ("aGeneralOvertemperature", 14), ("aGeneralUndertemperature", 15), ("aGeneralUser1Alarm", 16), ("aGeneralUser2Alarm", 17), ("aGeneralUser3Alarm", 18), ("aGeneralUser4Alarm", 19), ("aTimeforPowerSupply1Service", 20), ("aPowerSupply1InputOvervoltage", 21), ("aPowerSupply1InputUndervoltage", 22), ("aPowerSupply1InputOvercurrent", 23), ("aPowerSupply1InputOverload", 24), ("aPowerSupply1OutputOvervoltage", 25), ("aPowerSupply1OutputUndervoltage", 26), ("aPowerSupply1OutputOvercurrent", 27), ("aPowerSupply1OutputOverload", 28), ("aPowerSupply1Overtemperature", 29), ("aPowerSupply1Undertemperature", 30), ("aPowerSupply1Converter1notRunning", 31), ("aPowerSupply1Converter2notRunning", 32), ("aPowerSupply1Converter3notRunning", 33), ("aPowerSupply1Converter4notRunning", 34), ("aPowerSupply1Converter5notRunning", 35), ("aPowerSupply1Converter6notRunning", 36), ("aPowerSupply1Converter7notRunning", 37), ("aPowerSupply1Converter8notRunning", 38), ("aPowerSupply1InputFuseOff", 39), ("aPowerSupply1InputFuse1Off", 40), ("aPowerSupply1InputFuse2Off", 41), ("aPowerSupply1InputFuse3Off", 42), ("aPowerSupply1InputBreakerOff", 43), ("aPowerSupply1InputBreaker1Off", 44), ("aPowerSupply1InputBreaker2Off", 45), ("aPowerSupply1InputBreaker3Off", 46), ("aPowerSupply1InputSurgeArrester", 47), ("aPowerSupply1OutputFuseOff", 48), ("aPowerSupply1OutputFuse1Off", 49), ("aPowerSupply1OutputFuse2Off", 50), ("aPowerSupply1OutputBreakerOff", 51), ("aPowerSupply1OutputBreaker1Off", 52), ("aPowerSupply1OutputBreaker2Off", 53), ("aPowerSupply1FanMalfunction", 54), ("aPowerSupply1OutputOutOfPhase", 55), ("aPowerSupply1UserAlarm1", 56), ("aPowerSupply1UserAlarm2", 57), ("aTimeOrPowerSupply2Service", 58), ("aPowerSupply2InputOvervoltage", 59), ("aPowerSupply2InputUndervoltage", 60), ("aPowerSupply2InputOvercurrent", 61), ("aPowerSupply2InputOverload", 62), ("aPowerSupply2OutputOvervoltage", 63), ("aPowerSupply2OutputUndervoltage", 64), ("aPowerSupply2OutputOvercurrent", 65), ("aPowerSupply2OutputOverload", 66), ("aPowerSupply2Overtemperature", 67), ("aPowerSupply2Undertemperature", 68), ("aPowerSupply2Converter1NotRunning", 69), ("aPowerSupply2Converter2NotRunning", 70), ("aPowerSupply2Converter3NotRunning", 71), ("aPowerSupply2Converter4NotRunning", 72), ("aPowerSupply2Converter5NotRunning", 73), ("aPowerSupply2Converter6NotRunning", 74), ("aPowerSupply2Converter7NotRunning", 75), ("aPowerSupply2Converter8NotRunning", 76), ("aPowerSupply2InputFuseOff", 77), ("aPowerSupply2InputFuse1Off", 78), ("aPowerSupply2InputFuse2Off", 79), ("aPowerSupply2InputFuse3Off", 80), ("aPowerSupply2InputBreakerOff", 81), ("aPowerSupply2InputBreaker1Off", 82), ("aPowerSupply2InputBreaker2Off", 83), ("aPowerSupply2InputBreaker3Off", 84), ("aPowerSupply2InputSurgeArrester", 85), ("aPowerSupply2OutputFuseOff", 86), ("aPowerSupply2OutputFuse1Off", 87), ("aPowerSupply2OutputFuse2Off", 88), ("aPowerSupply2OutputBreakerOff", 89), ("aPowerSupply2OutputBreaker1Off", 90), ("aPowerSupply2OutputBreaker2Off", 91), ("aPowerSupply2FanMalfunction", 92), ("aPowerSupply2OutputOutOfPhase", 93), ("aPowerSupply2UserAlarm1", 94), ("aPowerSupply2UserAlarm2", 95), ("aTimeForPowerSupply3Service", 96), ("aPowerSupply3InputOvervoltage", 97), ("aPowerSupply3InputUndervoltage", 98), ("aPowerSupply3InputOvercurrent", 99), ("aPowerSupply3InputOverload", 100), ("aPowerSupply3OutputOvervoltage", 101), ("aPowerSupply3OutputUndervoltage", 102), ("aPowerSupply3OutputOvercurrent", 103), ("aPowerSupply3OutputOverload", 104), ("aPowerSupply3Overtemperature", 105), ("aPowerSupply3Undertemperature", 106), ("aPowerSupply3Converter1notRunning", 107), ("aPowerSupply3Converter2notRunning", 108), ("aPowerSupply3Converter3notRunning", 109), ("aPowerSupply3Converter4notRunning", 110), ("aPowerSupply3Converter5notRunning", 111), ("aPowerSupply3Converter6notRunning", 112), ("aPowerSupply3Converter7notRunning", 113), ("aPowerSupply3Converter8notRunning", 114), ("aPowerSupply3InputFuseOff", 115), ("aPowerSupply3InputFuse1Off", 116), ("aPowerSupply3InputFuse2Off", 117), ("aPowerSupply3InputFuse3Off", 118), ("aPowerSupply3InputBreakerOff", 119), ("aPowerSupply3InputBreaker1Off", 120), ("aPowerSupply3InputBreaker2Off", 121), ("aPowerSupply3InputBreaker3Off", 122), ("aPowerSupply3InputSurgeArrester", 123), ("aPowerSupply3OutputFuseOff", 124), ("aPowerSupply3OutputFuse1Off", 125), ("aPowerSupply3OutputFuse2Off", 126), ("aPowerSupply3OutputBreakerOff", 127), ("aPowerSupply3OutputBreaker1Off", 128), ("aPowerSupply3OutputBreaker2Off", 129), ("aPowerSupply3FanMalfunction", 130), ("aPowerSupply3OutputOutOfPhase", 131), ("aPowerSupply3UserAlarm1", 132), ("aPowerSupply3UserAlarm2", 133), ("aBatteryOvervoltage", 134), ("aBatteryUndervoltage", 135), ("aBatteryOvercurrent", 136), ("aRunningOnBattery", 137), ("aBatteryLow", 138), ("aTimeForBatteryLeg1Service", 139), ("aBatteryLeg1LifetimeExpired", 140), ("aBatteryLeg1Overvoltage", 141), ("aBatteryLeg1Undervoltage", 142), ("aBatteryLeg1Overcurrent", 143), ("aBatteryLeg1Overtemperature", 144), ("aBatteryLeg1Undertemperature", 145), ("aRunningOnBatteryLeg1", 146), ("aBatteryLeg1Low", 147), ("aBatteryLeg1Critical", 148), ("aBatteryLeg1FuseOff", 149), ("aBatteryLeg1BreakerOff", 150), ("aBatteryLeg1LVDOff", 151), ("aBatteryLeg1UserAlarm1", 152), ("aBatteryLeg1UserAlarm2", 153), ("aTimeForBatteryLeg2Service", 154), ("aBatteryLeg2LifetimeExpired", 155), ("aBatteryLeg2Overvoltage", 156), ("aBatteryLeg2Undervoltage", 157), ("aBatteryLeg2Overcurrent", 158), ("aBatteryLeg2Overtemperature", 159), ("aBatteryLeg2Undertemperature", 160), ("aRunningOnBatteryLeg2", 161), ("aBatteryLeg2Low", 162), ("aBatteryLeg2Critical", 163), ("aBatteryLeg2FuseOff", 164), ("aBatteryLeg2BreakerOff", 165), ("aBatteryLeg2LVDOff", 166), ("aBatteryLeg2UserAlarm1", 167), ("aBatteryLeg2UserAlarm2", 168), ("aTimeForBatteryLeg3Service", 169), ("aBatteryLeg3LifetimeExpired", 170), ("aBatteryLeg3Overvoltage", 171), ("aBatteryLeg3Undervoltage", 172), ("aBatteryLeg3Overcurrent", 173), ("aBatteryLeg3Overtemperature", 174), ("aBatteryLeg3Undertemperature", 175), ("aRunningOnBatteryLeg3", 176), ("aBatteryLeg3Low", 177), ("aBatteryLeg3Critical", 178), ("aBatteryLeg3FuseOff", 179), ("aBatteryLeg3BreakerOff", 180), ("aBatteryLeg3LVDOff", 181), ("aBatteryLeg3UserAlarm1", 182), ("aBatteryLeg3UserAlarm2", 183), ("aDistributionFuse1Off", 184), ("aDistributionFuse2Off", 185), ("aDistributionFuse3Off", 186), ("aDistributionFuse4Off", 187), ("aDistributionFuse5Off", 188), ("aDistributionFuse6Off", 189), ("aDistributionFuse7Off", 190), ("aDistributionFuse8Off", 191), ("aDistributionFuse9Off", 192), ("aDistributionFuse10Off", 193), ("aDistributionFuse11Off", 194), ("aDistributionFuse12Off", 195), ("aDistributionFuse13Off", 196), ("aDistributionFuse14Off", 197), ("aDistributionFuse15Off", 198), ("aDistributionFuse16Off", 199), ("aDistributionFuse17Off", 200), ("aDistributionFuse18Off", 201), ("aDistributionFuse19Off", 202), ("aDistributionFuse20Off", 203), ("aDistributionFuse21Off", 204), ("aDistributionFuse22Off", 205), ("aDistributionFuse23Off", 206), ("aDistributionFuse24Off", 207), ("aDistributionFuse25Off", 208), ("aDistributionFuse26Off", 209), ("aDistributionFuse27Off", 210), ("aDistributionFuse28Off", 211), ("aDistributionFuse29Off", 212), ("aDistributionFuse30Off", 213), ("aDistributionFuse31Off", 214), ("aDistributionFuse32Off", 215), ("aDistributionBreaker1Off", 216), ("aDistributionBreaker2Off", 217), ("aDistributionBreaker3Off", 218), ("aDistributionBreaker4Off", 219), ("aDistributionBreaker5Off", 220), ("aDistributionBreaker6Off", 221), ("aDistributionBreaker7Off", 222), ("aDistributionBreaker8Off", 223), ("aDistributionBreaker9Off", 224), ("aDistributionBreaker10Off", 225), ("aDistributionBreaker11Off", 226), ("aDistributionBreaker12Off", 227), ("aDistributionBreaker13Off", 228), ("aDistributionBreaker14Off", 229), ("aDistributionBreaker15Off", 230), ("aDistributionBreaker16Off", 231), ("aDistributionBreaker17Off", 232), ("aDistributionBreaker18Off", 233), ("aDistributionBreaker19Off", 234), ("aDistributionBreaker20Off", 235), ("aDistributionBreaker21Off", 236), ("aDistributionBreaker22Off", 237), ("aDistributionBreaker23Off", 238), ("aDistributionBreaker24Off", 239), ("aDistributionBreaker25Off", 240), ("aDistributionBreaker26Off", 241), ("aDistributionBreaker27Off", 242), ("aDistributionBreaker28Off", 243), ("aDistributionBreaker29Off", 244), ("aDistributionBreaker30Off", 245), ("aDistributionBreaker31Off", 246), ("aDistributionBreaker32Off", 247), ("aDistributionBreaker33Off", 248), ("aDistributionBreaker34Off", 249), ("aDistributionBreaker35Off", 250), ("aDistributionBreaker36Off", 251), ("aDistributionBreaker37Off", 252), ("aDistributionBreaker38Off", 253), ("aDistributionBreaker39Off", 254), ("aDistributionBreaker40Off", 255)) + NamedValues(("aDistributionBreaker41Off", 256), ("aDistributionBreaker42Off", 257), ("aDistributionBreaker43Off", 258), ("aDistributionBreaker44Off", 259), ("aDistributionBreaker45Off", 260), ("aDistributionBreaker46Off", 261), ("aDistributionBreaker47Off", 262), ("aDistributionBreaker48Off", 263), ("aDistributionBreaker49Off", 264), ("aDistributionBreaker50Off", 265), ("aDistributionBreaker51Off", 266), ("aDistributionBreaker52Off", 267), ("aDistributionBreaker53Off", 268), ("aDistributionBreaker54Off", 269), ("aDistributionBreaker55Off", 270), ("aDistributionBreaker56Off", 271), ("aDistributionBreaker57Off", 272), ("aDistributionBreaker58Off", 273), ("aDistributionBreaker59Off", 274), ("aDistributionBreaker60Off", 275), ("aDistributionBreaker61Off", 276), ("aDistributionBreaker62Off", 277), ("aDistributionBreaker63Off", 278), ("aDistributionBreaker64Off", 279), ("aDistributionStripOvertemperature", 280), ("aSupply1UnitAny", 281), ("aSupply1UnitAll", 282), ("aSupply1UnitMains", 283), ("aSupply1UnitInputPhase1", 284), ("aSupply1UnitInputPhase2", 285), ("aSupply1UnitInputPhase3", 286), ("aSupply1UnitInputPhaseAll", 287), ("aSupply1Reserva1", 288), ("aSupply1Reserva2", 289), ("aSupply1Reserva3", 290), ("aSupply1Reserva4", 291), ("aSupply1Reserva5", 292), ("aSupply2UnitAny", 293), ("aSupply2UnitAll", 294), ("aSupply2UnitMains", 295), ("aSupply2UnitInputPhase1", 296), ("aSupply2UnitInputPhase2", 297), ("aSupply2UnitInputPhase3", 298), ("aSupply2UnitInputPhaseAll", 299), ("aSupply2Reserva1", 300), ("aSupply2Reserva2", 301), ("aSupply2Reserva3", 302), ("aSupply2Reserva4", 303), ("aSupply2Reserva5", 304), ("aSupply3UnitAny", 305), ("aSupply3UnitAll", 306), ("aSupply3UnitMains", 307), ("aSupply3UnitInputPhase1", 308), ("aSupply3UnitInputPhase2", 309), ("aSupply3UnitInputPhase3", 310), ("aSupply3UnitInputPhaseAll", 311), ("aSupply3Reserva1", 312), ("aSupply3Reserva2", 313), ("aSupply3Reserva3", 314), ("aSupply3Reserva4", 315), ("aSupply3Reserva5", 316)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imco3AlarmDescr.setStatus('current')
if mibBuilder.loadTexts: imco3AlarmDescr.setDescription('Description of the alarm condition.')
imco3AlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 3, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imco3AlarmTime.setStatus('current')
if mibBuilder.loadTexts: imco3AlarmTime.setDescription('The value of sysUpTime when the alarm condition was\n            detected.  If the alarm condition was detected at the\n            time of agent startup and presumably existed before\n            agent startup, the value of gsAlarmTime shall equal\n            0.')
imco3AlarmPMnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2185, 1, 3, 11, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imco3AlarmPMnumber.setStatus('current')
if mibBuilder.loadTexts: imco3AlarmPMnumber.setDescription('PM number of the alarm condition.')
imco3Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12))
imco3TrapNoDevice = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 1))
if mibBuilder.loadTexts: imco3TrapNoDevice.setStatus('current')
if mibBuilder.loadTexts: imco3TrapNoDevice.setDescription('???.')
imco3TrapOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 2))
if mibBuilder.loadTexts: imco3TrapOnBattery.setStatus('current')
if mibBuilder.loadTexts: imco3TrapOnBattery.setDescription('???.')
imco3TrapNewAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 3)).setObjects(("IMCO-BIG-MIB", "imco3AlarmDescr"), ("IMCO-BIG-MIB", "imco3AlarmTime"), ("IMCO-BIG-MIB", "imco3AlarmPMnumber"))
if mibBuilder.loadTexts: imco3TrapNewAlarm.setStatus('current')
if mibBuilder.loadTexts: imco3TrapNewAlarm.setDescription('???.')
imco3TrapAlarmEnd = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 4)).setObjects(("IMCO-BIG-MIB", "imco3AlarmDescr"), ("IMCO-BIG-MIB", "imco3AlarmTime"), ("IMCO-BIG-MIB", "imco3AlarmPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmEnd.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmEnd.setDescription('???.')
imco3TrapAlarmOut1ON = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 10)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut1ON.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut1ON.setDescription('???.')
imco3TrapAlarmOut2ON = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 11)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut2ON.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut2ON.setDescription('???.')
imco3TrapAlarmOut3ON = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 12)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut3ON.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut3ON.setDescription('???.')
imco3TrapAlarmOut4ON = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 13)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut4ON.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut4ON.setDescription('???.')
imco3TrapAlarmOut5ON = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 14)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut5ON.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut5ON.setDescription('???.')
imco3TrapAlarmOut6ON = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 15)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut6ON.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut6ON.setDescription('???.')
imco3TrapAlarmOut7ON = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 16)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut7ON.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut7ON.setDescription('???.')
imco3TrapAlarmOut8ON = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 17)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut8ON.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut8ON.setDescription('???.')
imco3TrapAlarmOut1OFF = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 20)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut1OFF.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut1OFF.setDescription('???.')
imco3TrapAlarmOut2OFF = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 21)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut2OFF.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut2OFF.setDescription('???.')
imco3TrapAlarmOut3OFF = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 22)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut3OFF.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut3OFF.setDescription('???.')
imco3TrapAlarmOut4OFF = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 23)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut4OFF.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut4OFF.setDescription('???.')
imco3TrapAlarmOut5OFF = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 24)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut5OFF.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut5OFF.setDescription('???.')
imco3TrapAlarmOut6OFF = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 25)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut6OFF.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut6OFF.setDescription('???.')
imco3TrapAlarmOut7OFF = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 26)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut7OFF.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut7OFF.setDescription('???.')
imco3TrapAlarmOut8OFF = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 27)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapAlarmOut8OFF.setStatus('current')
if mibBuilder.loadTexts: imco3TrapAlarmOut8OFF.setDescription('???.')
imco3TrapTestCAPstart = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 30)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapTestCAPstart.setStatus('current')
if mibBuilder.loadTexts: imco3TrapTestCAPstart.setDescription('???.')
imco3TrapTestCAPstop = NotificationType((1, 3, 6, 1, 4, 1, 2185, 1, 3, 12, 31)).setObjects(("IMCO-BIG-MIB", "imco3IdentPMnumber"))
if mibBuilder.loadTexts: imco3TrapTestCAPstop.setStatus('current')
if mibBuilder.loadTexts: imco3TrapTestCAPstop.setDescription('???.')
mibBuilder.exportSymbols("IMCO-BIG-MIB", imco3TrapAlarmOut8ON=imco3TrapAlarmOut8ON, imPm1Power1OutputCurrentPhase1=imPm1Power1OutputCurrentPhase1, imPm1Power1OutputFrequency=imPm1Power1OutputFrequency, imPM4Power2OutputPowerKVAphase1=imPM4Power2OutputPowerKVAphase1, imPM3Power3Running5=imPM3Power3Running5, imPM3BatLeg1NominalVoltage=imPM3BatLeg1NominalVoltage, imPM3Power2BatteryAvailable=imPM3Power2BatteryAvailable, imPm1Power1InputCurrentPhase2=imPm1Power1InputCurrentPhase2, imPM4BatLeg2Lifetime=imPM4BatLeg2Lifetime, imPM4SystemGENuser2=imPM4SystemGENuser2, imPM2SystemIDbuttonName=imPM2SystemIDbuttonName, imPM4Power1InputBreaker3=imPM4Power1InputBreaker3, imPM1Power3InputSurgeArrester=imPM1Power3InputSurgeArrester, imPM3Power1Running4=imPM3Power1Running4, imPM2DistEntry=imPM2DistEntry, imPM2Power2OutputLoad=imPM2Power2OutputLoad, imPM3Power3OutputPowerVAphase3=imPM3Power3OutputPowerVAphase3, imPM3Power2Running4=imPM3Power2Running4, imPM2BatLeg2Breaker=imPM2BatLeg2Breaker, imPm1Power1InputVoltage=imPm1Power1InputVoltage, imPM3SystemGENDoor1=imPM3SystemGENDoor1, imPm1Distrib=imPm1Distrib, imPM3SystemGENuser2=imPM3SystemGENuser2, imPM1Power1serNumb=imPM1Power1serNumb, imPM1Power3OutputCurrentPhase3=imPM1Power3OutputCurrentPhase3, imPM3Power3InputBreaker1=imPM3Power3InputBreaker1, imPM2Power2OutputPowerKVAphase2=imPM2Power2OutputPowerKVAphase2, imPM3Power3OutputVoltagePhase2=imPM3Power3OutputVoltagePhase2, imPM3Power2OutputPowerKVA=imPM3Power2OutputPowerKVA, npProducts=npProducts, imPM4Power3OutputCurrentPhase2=imPM4Power3OutputCurrentPhase2, imPM4Power3InputVoltage=imPM4Power3InputVoltage, imco3IdentManufacturer=imco3IdentManufacturer, imPM2Power1InputPowerVA=imPM2Power1InputPowerVA, imPM4ContTestCAPduration=imPM4ContTestCAPduration, imPM4Power1OutputCurrentPhase2=imPM4Power1OutputCurrentPhase2, imPM4Power1InputPowerKVA=imPM4Power1InputPowerKVA, imPM3BatLeg3Current=imPM3BatLeg3Current, imPM4Power3InputBreaker2=imPM4Power3InputBreaker2, imPM2Power2OutputPowerVAphase1=imPM2Power2OutputPowerVAphase1, imPM4SystemIDserNumb=imPM4SystemIDserNumb, imPM1Power3nextServiceDate=imPM1Power3nextServiceDate, imPM4Power1OutputLoad=imPM4Power1OutputLoad, imco3IdentAttachedDevices=imco3IdentAttachedDevices, imPM1BatLeg1nextServiceDate=imPM1BatLeg1nextServiceDate, imPM4SystemIDType=imPM4SystemIDType, imPm1Power1OutputVoltage=imPm1Power1OutputVoltage, imPM3BatLeg3Voltage=imPM3BatLeg3Voltage, imPM3BatLeg2nextServiceDate=imPM3BatLeg2nextServiceDate, imPM4Power1OutputVoltage=imPM4Power1OutputVoltage, imPM1SystemGENSurgeArrester=imPM1SystemGENSurgeArrester, imPM2Power2InputPowerVAphase2=imPM2Power2InputPowerVAphase2, imPM3Power1OutputVoltagePhase3=imPM3Power1OutputVoltagePhase3, imPM2BatLeg1Breaker=imPM2BatLeg1Breaker, netPartner=netPartner, imPM3Power3InputFuse2=imPM3Power3InputFuse2, imPM1Power1OutputBreaker1=imPM1Power1OutputBreaker1, imPM3BatLeg1Breaker=imPM3BatLeg1Breaker, imPm1Power3InputPowerVAphase3=imPm1Power3InputPowerVAphase3, imPm1BatLeg2RestCapacity=imPm1BatLeg2RestCapacity, imPM3BatLeg1nextServiceDate=imPM3BatLeg1nextServiceDate, imPM4BatLeg2Autonomytime=imPM4BatLeg2Autonomytime, imPM2Power2Manufacturer=imPM2Power2Manufacturer, imPM4SystemIDswVersion=imPM4SystemIDswVersion, imPM4Power2Running2=imPM4Power2Running2, imPM2Power3OutputPowerKVAphase3=imPM2Power3OutputPowerKVAphase3, imPM4Power3OutputVoltagePhase1=imPM4Power3OutputVoltagePhase1, imPM3BatLeg2=imPM3BatLeg2, imPm1BatLeg1Lifetime=imPm1BatLeg1Lifetime, imPM4Power1OutputCurrentPhase1=imPM4Power1OutputCurrentPhase1, imPM1Power3OutputVoltagePhase3=imPM1Power3OutputVoltagePhase3, imPm1BatLeg3NominalCapacity=imPm1BatLeg3NominalCapacity, imPM3BatLeg2NominalVoltage=imPM3BatLeg2NominalVoltage, imPM2Power1OutputPowerVA=imPM2Power1OutputPowerVA, imPM1Power2InputBreaker1=imPM1Power2InputBreaker1, imPM4Power3OutputBreaker1=imPM4Power3OutputBreaker1, imPm1Power1InputPowerVAphase1=imPm1Power1InputPowerVAphase1, imPM1Power2OutputCurrentPhase1=imPM1Power2OutputCurrentPhase1, imPM3Power3Temperature=imPM3Power3Temperature, imPM2BatteryNominalCapacity=imPM2BatteryNominalCapacity, imPM2Power1Fan=imPM2Power1Fan, imPM3Power1OutputPowerKVAphase3=imPM3Power1OutputPowerKVAphase3, imPM1SystemIDbuttonName=imPM1SystemIDbuttonName, imco3AlarmTime=imco3AlarmTime, imPM2DistBreaker=imPM2DistBreaker, imPm1BatLeg1RestCapacity=imPm1BatLeg1RestCapacity, imPM3BatLeg3Autonomytime=imPM3BatLeg3Autonomytime, imPM4Power3OutputPowerVAphase1=imPM4Power3OutputPowerVAphase1, imPM4BatLeg3ChargeState=imPM4BatLeg3ChargeState, imPM1Power1Fan=imPM1Power1Fan, imPM3BatLeg3Type=imPM3BatLeg3Type, imPM1Power3InputBreaker2=imPM1Power3InputBreaker2, imPM2SystemGENSurgeArrester=imPM2SystemGENSurgeArrester, imPM2BatLeg2Autonomytime=imPM2BatLeg2Autonomytime, imPM4Power3InputFuse1=imPM4Power3InputFuse1, imPM2Power2InputBreaker3=imPM2Power2InputBreaker3, imPM2BatLeg2Temperature=imPM2BatLeg2Temperature, imPM2Power3InputSurgeArrester=imPM2Power3InputSurgeArrester, imPM1Power2Running5=imPM1Power2Running5, imPM1DistEntry=imPM1DistEntry, imco3AlarmPMnumber=imco3AlarmPMnumber, imPm1Power2OutputPowerVA=imPm1Power2OutputPowerVA, imPM3BatLeg1InstallationDate=imPM3BatLeg1InstallationDate, imPM1Power3OutputPowerKVAphase1=imPM1Power3OutputPowerKVAphase1, imPM1Power3OutputBreaker=imPM1Power3OutputBreaker, imPM2Power2Running6=imPM2Power2Running6, imPM2BatLeg3Manufacturer=imPM2BatLeg3Manufacturer, imPM3Power2InputVoltagePhase1=imPM3Power2InputVoltagePhase1, imPM3Power1InputFuse3=imPM3Power1InputFuse3, imPM1Power1Running3=imPM1Power1Running3, imPm1Power2InputVoltagePhase2=imPm1Power2InputVoltagePhase2, imPM4Power2InputCurrentPhase1=imPM4Power2InputCurrentPhase1, imPm1Power3OutputCurrent=imPm1Power3OutputCurrent, imPM3DistFuse=imPM3DistFuse, imPM4BatteryTimeOnBattery=imPM4BatteryTimeOnBattery, imPM2ContTestCAPtemperature=imPM2ContTestCAPtemperature, imPM1Power3Type=imPM1Power3Type, imPM4Power1Running1=imPM4Power1Running1, imPM3Power3OutputBreaker=imPM3Power3OutputBreaker, imPM4Power2OutputFuse2=imPM4Power2OutputFuse2, imPM4BatLeg2Fuse=imPM4BatLeg2Fuse, imPM1BatLeg2Type=imPM1BatLeg2Type, imPM2Power2OutputPowerW=imPM2Power2OutputPowerW, imPM3Power2InputPowerKVAphase2=imPM3Power2InputPowerKVAphase2, imPM3Power3InputPowerVAphase2=imPM3Power3InputPowerVAphase2, imPM2BatLeg3ChargeState=imPM2BatLeg3ChargeState, imPM4Power3OutputPowerKVAphase1=imPM4Power3OutputPowerKVAphase1, imPM1Power1BatteryAvailable=imPM1Power1BatteryAvailable, imPM2BatLeg1Current=imPM2BatLeg1Current, imPM4ContState=imPM4ContState, imPM2Power2OutputFrequency=imPM2Power2OutputFrequency, imPM3Power1OutputCurrentPhase3=imPM3Power1OutputCurrentPhase3, imPM4Power2OutputVoltagePhase2=imPM4Power2OutputVoltagePhase2, imPM2SystemIDhwVersion=imPM2SystemIDhwVersion, imPM3Power2InputVoltagePhase2=imPM3Power2InputVoltagePhase2, imPM2BatLeg1Autonomytime=imPM2BatLeg1Autonomytime, imPM2Power1OutputCurrentPhase1=imPM2Power1OutputCurrentPhase1, imPM1Power3InputBreaker1=imPM1Power3InputBreaker1, imPM4Power3=imPM4Power3, imPM1ContId=imPM1ContId, imPM2Power1OutputFuse1=imPM2Power1OutputFuse1, imPM3Power1InputPowerKVAphase1=imPM3Power1InputPowerKVAphase1, imPM3Power2Running6=imPM3Power2Running6, imco3TrapAlarmOut2ON=imco3TrapAlarmOut2ON, imPm1Power2InputPowerVAphase3=imPm1Power2InputPowerVAphase3, imPm1BatLeg3RestCapacity=imPm1BatLeg3RestCapacity, imPM3Power3OutputPowerVAphase1=imPM3Power3OutputPowerVAphase1, imPM4Power3OutputPowerKW=imPM4Power3OutputPowerKW, imPM4BatteryAutonomyTime=imPM4BatteryAutonomyTime, imPm1BatLeg2ChargeState=imPm1BatLeg2ChargeState, imPM4ContTestCAPcommand=imPM4ContTestCAPcommand, imPM3Power1OutputPowerVAphase1=imPM3Power1OutputPowerVAphase1, imPM4Power2InputPowerVA=imPM4Power2InputPowerVA, imPM3SystemGENFan=imPM3SystemGENFan, imPM2SystemGENFan=imPM2SystemGENFan, imPM3Power3Running6=imPM3Power3Running6, imPM1Power2OutputVoltagePhase3=imPM1Power2OutputVoltagePhase3, imPM3Power3InputBreaker2=imPM3Power3InputBreaker2, imPM4Power3InputPowerVAphase1=imPM4Power3InputPowerVAphase1, imPM2Power2InputPowerW=imPM2Power2InputPowerW, imPM2SystemGENtemperature=imPM2SystemGENtemperature, imPM4Power2InputVoltagePhase1=imPM4Power2InputVoltagePhase1, imPM4Power2OutputPowerKVAphase3=imPM4Power2OutputPowerKVAphase3, imPM4Power2Running3=imPM4Power2Running3, imPm1Power3InputVoltagePhase2=imPm1Power3InputVoltagePhase2, imPM3ContTimeOFF=imPM3ContTimeOFF, imPM2Power3InputCurrentPhase2=imPM2Power3InputCurrentPhase2, imPM1Power3OutputFuse1=imPM1Power3OutputFuse1, imPM2Power1=imPM2Power1, imPM2Power3OutputBreaker1=imPM2Power3OutputBreaker1, imPM4Power3InputVoltagePhase2=imPM4Power3InputVoltagePhase2, imPM2Power1InputFuse2=imPM2Power1InputFuse2, imPM4Power2InputVoltage=imPM4Power2InputVoltage, imPM1BatLeg3nextServiceDate=imPM1BatLeg3nextServiceDate, imPM3Power1serNumb=imPM3Power1serNumb, imPM2BatLeg1Fuse=imPM2BatLeg1Fuse, imPM3Power2OutputPowerVA=imPM3Power2OutputPowerVA, imPM1DistFuse=imPM1DistFuse, imPM1SystemIDnextServiceDate=imPM1SystemIDnextServiceDate, imPM1Power2=imPM1Power2, imPM4Power1InputCurrentPhase2=imPM4Power1InputCurrentPhase2, imPM3Power3OutputFuse=imPM3Power3OutputFuse, imPM2Power1OutputFuse=imPM2Power1OutputFuse, imPM2Power3OutputCurrentPhase3=imPM2Power3OutputCurrentPhase3, imPm1Power2InputPowerVAphase1=imPm1Power2InputPowerVAphase1, imPM3Power1InputBreaker2=imPM3Power1InputBreaker2, imPM3Power1OutputFuse=imPM3Power1OutputFuse, imPM2Power1OutputPowerKVAphase1=imPM2Power1OutputPowerKVAphase1, imPM2Power1InputPowerKVA=imPM2Power1InputPowerKVA, imPm1Power2InputVoltagePhase3=imPm1Power2InputVoltagePhase3, imPM3BatLeg3RestCapacity=imPM3BatLeg3RestCapacity, imPM2Power2OutputVoltagePhase3=imPM2Power2OutputVoltagePhase3, imPm1BatteryCurrent=imPm1BatteryCurrent, imPM3Power2OutputPowerKVAphase1=imPM3Power2OutputPowerKVAphase1, imPM4BatteryCurrent=imPM4BatteryCurrent, imPM4Power1InputPowerKVAphase3=imPM4Power1InputPowerKVAphase3, imPM4Power3Running2=imPM4Power3Running2, imPM2SystemIDPMserialNumber=imPM2SystemIDPMserialNumber, imPM3Power2OutputFuse2=imPM3Power2OutputFuse2, imPM4DistFuse=imPM4DistFuse, imPM3Power3InputPowerVA=imPM3Power3InputPowerVA, imPM4BatLeg1LowVoltageDisconnect=imPM4BatLeg1LowVoltageDisconnect, imPM3Power1OutputPowerKVA=imPM3Power1OutputPowerKVA, imPM4BatLeg2Manufacturer=imPM4BatLeg2Manufacturer, imPM1Power3InputFuse1=imPM1Power3InputFuse1, imPM3Power1OutputBreaker2=imPM3Power1OutputBreaker2, imPM3Power2InputFuse2=imPM3Power2InputFuse2, imPM3BatLeg3nextServiceDate=imPM3BatLeg3nextServiceDate, imPM2ContTestCAPstatus=imPM2ContTestCAPstatus, imPM1Power1Running2=imPM1Power1Running2, imPM2Power1OutputCurrentPhase3=imPM2Power1OutputCurrentPhase3, imPM3Power2Manufacturer=imPM3Power2Manufacturer, imPM2Power1Running6=imPM2Power1Running6, imPM2Power2OutputFuse=imPM2Power2OutputFuse, imPM4Power1OutputPowerW=imPM4Power1OutputPowerW, imPM3BatLeg2Current=imPM3BatLeg2Current, imPM2Power1Running5=imPM2Power1Running5, imPM1BatLeg2=imPM1BatLeg2, imPm1BatLeg2NominalCapacity=imPm1BatLeg2NominalCapacity, imPm1Power3InputPowerVAphase1=imPm1Power3InputPowerVAphase1, imPM2Power3OutputPowerVAphase1=imPM2Power3OutputPowerVAphase1, imPM2Power1InputBreaker3=imPM2Power1InputBreaker3, imPM3Power1InputPowerVAphase2=imPM3Power1InputPowerVAphase2, imPM4Power3InputPowerKVAphase1=imPM4Power3InputPowerKVAphase1, imPM2Power2BatteryAvailable=imPM2Power2BatteryAvailable, imPM4Power2InputPowerVAphase3=imPM4Power2InputPowerVAphase3, imPM3Power3OutputBreaker1=imPM3Power3OutputBreaker1, imPM2ContId=imPM2ContId, imPM2BatLeg3Autonomytime=imPM2BatLeg3Autonomytime, imPM3SystemIDserNumb=imPM3SystemIDserNumb, imPM4Power2OutputPowerVAphase1=imPM4Power2OutputPowerVAphase1, imPM3Power2OutputBreaker=imPM3Power2OutputBreaker, imPM2Power3OutputFuse2=imPM2Power3OutputFuse2, imPM3Power3InputPowerVAphase1=imPM3Power3InputPowerVAphase1, imco3TrapAlarmOut7ON=imco3TrapAlarmOut7ON, imPM1Power3=imPM1Power3, imPM2Power2InputPowerKVAphase1=imPM2Power2InputPowerKVAphase1, imPM4Power2OutputVoltagePhase3=imPM4Power2OutputVoltagePhase3, imPM2Power2Fan=imPM2Power2Fan, imPM4Power3Manufacturer=imPM4Power3Manufacturer, imPM1BatLeg2serNumb=imPM1BatLeg2serNumb, imPM2Distrib=imPM2Distrib, imPM3BatLeg3ChargeState=imPM3BatLeg3ChargeState, imPM3Power2InputPowerVA=imPM3Power2InputPowerVA, imPM2BatLeg2RestCapacity=imPM2BatLeg2RestCapacity, imPM3BatLeg3LowVoltageDisconnect=imPM3BatLeg3LowVoltageDisconnect, imPM4Power1OutputPowerKVAphase2=imPM4Power1OutputPowerKVAphase2, imPM2Power1InputVoltagePhase2=imPM2Power1InputVoltagePhase2, imPM4BatteryChargeState=imPM4BatteryChargeState, imPM3Power1InputCurrentPhase2=imPM3Power1InputCurrentPhase2, imPM3SystemGENuser1=imPM3SystemGENuser1, imPM4BatLeg3Breaker=imPM4BatLeg3Breaker, imPM4BatteryNominalCapacity=imPM4BatteryNominalCapacity, imPM3BatLeg3serNumb=imPM3BatLeg3serNumb)
mibBuilder.exportSymbols("IMCO-BIG-MIB", imPm1Power2InputVoltage=imPm1Power2InputVoltage, imPM3Power2InputFuse3=imPM3Power2InputFuse3, imPm1Power1OutputVoltagePhase1=imPm1Power1OutputVoltagePhase1, imPM4Power2Fan=imPM4Power2Fan, imPm1BatLeg3NominalVoltage=imPm1BatLeg3NominalVoltage, imPM2SystemGEN=imPM2SystemGEN, imPM2Power2OutputPowerKVA=imPM2Power2OutputPowerKVA, imPM2BatLeg3TimeOnBattery=imPM2BatLeg3TimeOnBattery, imPM4Power1Running8=imPM4Power1Running8, imco3TrapAlarmOut4OFF=imco3TrapAlarmOut4OFF, imPM4Power2InputPowerKVAphase1=imPM4Power2InputPowerKVAphase1, imPM1Power3OutputPowerVAphase2=imPM1Power3OutputPowerVAphase2, imPM4BatLeg3Fuse=imPM4BatLeg3Fuse, imPM2Power2InputPowerKVA=imPM2Power2InputPowerKVA, imPM3Power2OutputCurrentPhase2=imPM3Power2OutputCurrentPhase2, imPm1Power1InputVoltagePhase2=imPm1Power1InputVoltagePhase2, imPM1Power3Running8=imPM1Power3Running8, imPM1Power1Running4=imPM1Power1Running4, imPM2Power3InputVoltagePhase3=imPM2Power3InputVoltagePhase3, imPM4Power2InputBreaker3=imPM4Power2InputBreaker3, imPM2SystemGENuser3=imPM2SystemGENuser3, imPM1Power3OutputCurrentPhase2=imPM1Power3OutputCurrentPhase2, imPM1Power3OutputPowerKVAphase3=imPM1Power3OutputPowerKVAphase3, imPM4ContTestCAPvoltage=imPM4ContTestCAPvoltage, imPM4Power3InputFuse2=imPM4Power3InputFuse2, imPM2BatLeg1nextServiceDate=imPM2BatLeg1nextServiceDate, imPM4Power2Manufacturer=imPM4Power2Manufacturer, imco3TrapTestCAPstop=imco3TrapTestCAPstop, imPM4BatLeg3Temperature=imPM4BatLeg3Temperature, imPM4ContTable=imPM4ContTable, imPm1Power1OutputVoltagePhase2=imPm1Power1OutputVoltagePhase2, imPM2BatLeg2Lifetime=imPM2BatLeg2Lifetime, imPm1BatLeg3Autonomytime=imPm1BatLeg3Autonomytime, imPm1Power3InputCurrent=imPm1Power3InputCurrent, imPM3BatLeg1Autonomytime=imPM3BatLeg1Autonomytime, imPm1Power2InputPowerKVAphase1=imPm1Power2InputPowerKVAphase1, imPM3SystemGENSurgeArrester=imPM3SystemGENSurgeArrester, imPm1BatteryAutonomyTime=imPm1BatteryAutonomyTime, imPM4Power3nextServiceDate=imPM4Power3nextServiceDate, imco3TrapAlarmOut3OFF=imco3TrapAlarmOut3OFF, imPM3Power1OutputPowerW=imPM3Power1OutputPowerW, imPM2Power2OutputPowerVA=imPM2Power2OutputPowerVA, imPM4Power3InputCurrent=imPM4Power3InputCurrent, imPM4BatLeg1NominalCapacity=imPM4BatLeg1NominalCapacity, imPanM3=imPanM3, imPM3Power2InputPowerKVAphase1=imPM3Power2InputPowerKVAphase1, imPM3Distrib=imPM3Distrib, imPM2Power2InputFuse=imPM2Power2InputFuse, imPM3Power3Fan=imPM3Power3Fan, imPM1Power3InputBreaker=imPM1Power3InputBreaker, imPM3Power1OutputPowerVAphase2=imPM3Power1OutputPowerVAphase2, imPM4Power2Running1=imPM4Power2Running1, imPM4BatLeg1Voltage=imPM4BatLeg1Voltage, imPM4Power3Running4=imPM4Power3Running4, imPM3Power3InputPowerKVAphase1=imPM3Power3InputPowerKVAphase1, imPM2Power1InputPowerVAphase3=imPM2Power1InputPowerVAphase3, imPM2Power2InputVoltagePhase2=imPM2Power2InputVoltagePhase2, imPM3Power1Running1=imPM3Power1Running1, imPM3SystemIDhwVersion=imPM3SystemIDhwVersion, imPM3Power1InputPowerVAphase3=imPM3Power1InputPowerVAphase3, imPM3Power1InputBreaker=imPM3Power1InputBreaker, imPM4Power3Running5=imPM4Power3Running5, imPM1Power2InputFuse2=imPM1Power2InputFuse2, imPM2SystemIDserNumb=imPM2SystemIDserNumb, imPM3Power3InputBreaker3=imPM3Power3InputBreaker3, imPM1Power3InputFuse=imPM1Power3InputFuse, imPM4Power3OutputVoltage=imPM4Power3OutputVoltage, imPm4Distrib=imPm4Distrib, imPM1BatLeg2nextServiceDate=imPM1BatLeg2nextServiceDate, imPM3Power2OutputPowerKVAphase3=imPM3Power2OutputPowerKVAphase3, imPm1Power3InputPowerKVAphase3=imPm1Power3InputPowerKVAphase3, imPM2Power2OutputCurrentPhase2=imPM2Power2OutputCurrentPhase2, imPM2BatLeg1Voltage=imPM2BatLeg1Voltage, imPM4Power2InputBreaker2=imPM4Power2InputBreaker2, imPM4BatLeg3Voltage=imPM4BatLeg3Voltage, imPM2Power3InputBreaker=imPM2Power3InputBreaker, imPm1Power2InputCurrentPhase1=imPm1Power2InputCurrentPhase1, imPM2BatLeg2Current=imPM2BatLeg2Current, imPM3BatLeg1RestCapacity=imPM3BatLeg1RestCapacity, imPm1Power1OutputPowerKW=imPm1Power1OutputPowerKW, imPM3ContTestCAPcurrent=imPM3ContTestCAPcurrent, imPM2BatLeg3NominalCapacity=imPM2BatLeg3NominalCapacity, imPM1ContTestCAPstatus=imPM1ContTestCAPstatus, imPM3Power3OutputCurrentPhase3=imPM3Power3OutputCurrentPhase3, imPM1Power3OutputBreaker2=imPM1Power3OutputBreaker2, imPM2Power3InputPowerKVA=imPM2Power3InputPowerKVA, imPM4BatLeg3NominalCapacity=imPM4BatLeg3NominalCapacity, imco3TrapAlarmOut8OFF=imco3TrapAlarmOut8OFF, imPm1Power2InputPowerKVA=imPm1Power2InputPowerKVA, imPM3BatLeg3NominalVoltage=imPM3BatLeg3NominalVoltage, imPm1Power2InputPowerKW=imPm1Power2InputPowerKW, imPm1BatteryNominalCapacity=imPm1BatteryNominalCapacity, imPM3BatLeg2Lifetime=imPM3BatLeg2Lifetime, imPM2Power3InputCurrent=imPM2Power3InputCurrent, imPM3Power1Temperature=imPM3Power1Temperature, imPM2Power3OutputBreaker=imPM2Power3OutputBreaker, imPM1DistId=imPM1DistId, imPM2Power1OutputCurrentPhase2=imPM2Power1OutputCurrentPhase2, imPm1Power1OutputPowerVAphase3=imPm1Power1OutputPowerVAphase3, imPM1Power1OutputBreaker=imPM1Power1OutputBreaker, imco3AlarmEntry=imco3AlarmEntry, imPM1Power2Running2=imPM1Power2Running2, imPm1Power1OutputPowerKVA=imPm1Power1OutputPowerKVA, imPM3Power3OutputCurrent=imPM3Power3OutputCurrent, imPM4Power1OutputPowerVAphase3=imPM4Power1OutputPowerVAphase3, imPM1Power2OutputFuse2=imPM1Power2OutputFuse2, imPM2BatteryChargeState=imPM2BatteryChargeState, imPm1Power1OutputVoltagePhase3=imPm1Power1OutputVoltagePhase3, imPm1BatLeg3ChargeState=imPm1BatLeg3ChargeState, imPM2SystemIDaddress=imPM2SystemIDaddress, imPM1DistBreaker=imPM1DistBreaker, imPM4BatLeg1RestCapacity=imPM4BatLeg1RestCapacity, imPM1Power2Fan=imPM1Power2Fan, imPM2Power1InputPowerVAphase1=imPM2Power1InputPowerVAphase1, imPM4ContId=imPM4ContId, imPM4Power3InputCurrentPhase1=imPM4Power3InputCurrentPhase1, imPM4Power2InputPowerVAphase1=imPM4Power2InputPowerVAphase1, imPM4Power2InputPowerKVAphase3=imPM4Power2InputPowerKVAphase3, imco3TrapAlarmOut1ON=imco3TrapAlarmOut1ON, imPM4Power2InputFuse2=imPM4Power2InputFuse2, imPM1Power2OutputBreaker1=imPM1Power2OutputBreaker1, imPm1Power1OutputCurrentPhase3=imPm1Power1OutputCurrentPhase3, imPM2Power3InputBreaker3=imPM2Power3InputBreaker3, imPM3BatLeg3Breaker=imPM3BatLeg3Breaker, imPM4Power1InputPowerVAphase3=imPM4Power1InputPowerVAphase3, imPM1Power1InputFuse=imPM1Power1InputFuse, imPm1BatteryTimeOnBattery=imPm1BatteryTimeOnBattery, imPM2Power1Manufacturer=imPM2Power1Manufacturer, imPM4BatLeg2InstallationDate=imPM4BatLeg2InstallationDate, imPM2BatLeg1NominalVoltage=imPM2BatLeg1NominalVoltage, imPM4DistEntry=imPM4DistEntry, imco3AlarmsPresent=imco3AlarmsPresent, imPM3Power2OutputVoltagePhase1=imPM3Power2OutputVoltagePhase1, imPM2Power1Running3=imPM2Power1Running3, imPM1Power1InputBreaker1=imPM1Power1InputBreaker1, imPm1Power1OutputPowerKVAphase2=imPm1Power1OutputPowerKVAphase2, imPM1Power1Manufacturer=imPM1Power1Manufacturer, imPM1Power2OutputBreaker=imPM1Power2OutputBreaker, imPM3Power2OutputPowerW=imPM3Power2OutputPowerW, imPM2Power3Running7=imPM2Power3Running7, imPM2Power3OutputPowerVA=imPM2Power3OutputPowerVA, imPM2Power1OutputPowerKW=imPM2Power1OutputPowerKW, imPM2BatLeg1TimeOnBattery=imPM2BatLeg1TimeOnBattery, imPM2BatteryCurrent=imPM2BatteryCurrent, imPM4Power1OutputPowerVAphase1=imPM4Power1OutputPowerVAphase1, imPM3Power3Type=imPM3Power3Type, imPM3SystemID=imPM3SystemID, imPM1Power2OutputPowerVAphase3=imPM1Power2OutputPowerVAphase3, imPM2Power2Running2=imPM2Power2Running2, imPM1Power2OutputVoltagePhase2=imPM1Power2OutputVoltagePhase2, imPM2Power1InputBreaker=imPM2Power1InputBreaker, imPM1Power3OutputCurrentPhase1=imPM1Power3OutputCurrentPhase1, imPM3BatLeg2RestCapacity=imPM3BatLeg2RestCapacity, imPM2Power1InputBreaker1=imPM2Power1InputBreaker1, imPM2DistTable=imPM2DistTable, imPM2Power2nextServiceDate=imPM2Power2nextServiceDate, imPM3ContTestCAPcommand=imPM3ContTestCAPcommand, imPM3Power1nextServiceDate=imPM3Power1nextServiceDate, imPM4Power1InputCurrentPhase1=imPM4Power1InputCurrentPhase1, imPM2Power1Type=imPM2Power1Type, imPM2Power3OutputVoltagePhase3=imPM2Power3OutputVoltagePhase3, imPM1BatLeg3Type=imPM1BatLeg3Type, imPM4Power1OutputBreaker1=imPM4Power1OutputBreaker1, imPM1Power3OutputPowerVAphase1=imPM1Power3OutputPowerVAphase1, imPM2Power3InputFuse3=imPM2Power3InputFuse3, imPM1Power2InputBreaker2=imPM1Power2InputBreaker2, imPM2Power2Running3=imPM2Power2Running3, imPM3Power1InputVoltagePhase1=imPM3Power1InputVoltagePhase1, imPM2BatLeg1serNumb=imPM2BatLeg1serNumb, imPM3Power2OutputFuse1=imPM3Power2OutputFuse1, imPM4SystemGENuser4=imPM4SystemGENuser4, imPM3Power1OutputVoltagePhase1=imPM3Power1OutputVoltagePhase1, imPM2Power1InputPowerKVAphase2=imPM2Power1InputPowerKVAphase2, imPM2Power1InputPowerW=imPM2Power1InputPowerW, imPM4Power3serNumb=imPM4Power3serNumb, imPM4Power1Manufacturer=imPM4Power1Manufacturer, imPM3Power1InputBreaker3=imPM3Power1InputBreaker3, imPM3BatLeg1ChargeState=imPM3BatLeg1ChargeState, imPM4Power1Fan=imPM4Power1Fan, imPM2Power2InputPowerKVAphase2=imPM2Power2InputPowerKVAphase2, imPM2Power3OutputPowerKVA=imPM2Power3OutputPowerKVA, imPM3Power1InputFuse1=imPM3Power1InputFuse1, imPM2ContTestCAPvoltage=imPM2ContTestCAPvoltage, imPM2Power2InputVoltage=imPM2Power2InputVoltage, imPM2BatLeg3RestCapacity=imPM2BatLeg3RestCapacity, imPM1Power1InputFuse3=imPM1Power1InputFuse3, imPM1BatLeg3Manufacturer=imPM1BatLeg3Manufacturer, imPM4Power3InputPowerKW=imPM4Power3InputPowerKW, imPM3Power1OutputCurrent=imPM3Power1OutputCurrent, imPM4BatLeg2TimeOnBattery=imPM4BatLeg2TimeOnBattery, imco3PanM=imco3PanM, imPM3Power2InputPowerVAphase1=imPM3Power2InputPowerVAphase1, imPM4SystemIDbuttonName=imPM4SystemIDbuttonName, imPM4Power3Running7=imPM4Power3Running7, imPM2Power2InputPowerKW=imPM2Power2InputPowerKW, imPM2Power3OutputVoltagePhase2=imPM2Power3OutputVoltagePhase2, imPM4Power2InputPowerW=imPM4Power2InputPowerW, imPM3Power3InputPowerKVAphase3=imPM3Power3InputPowerKVAphase3, imPm1BatLeg1Temperature=imPm1BatLeg1Temperature, imPM4Power1InputFuse=imPM4Power1InputFuse, imPM1Power3Running2=imPM1Power3Running2, imPM4DistBreaker=imPM4DistBreaker, imPM3Power3InputPowerKVA=imPM3Power3InputPowerKVA, imPM4Power1InputVoltagePhase2=imPM4Power1InputVoltagePhase2, imPm1Power3InputPowerKW=imPm1Power3InputPowerKW, imPM4Power2InputFuse3=imPM4Power2InputFuse3, imPM1SystemGENuser2=imPM1SystemGENuser2, imPM1Power1InputSurgeArrester=imPM1Power1InputSurgeArrester, imPM4BatLeg2RestCapacity=imPM4BatLeg2RestCapacity, imPM4BatLeg1Current=imPM4BatLeg1Current, imPM3Power2OutputPowerKW=imPM3Power2OutputPowerKW, imPM2Power2OutputVoltagePhase1=imPM2Power2OutputVoltagePhase1, imPM3Power2OutputFrequency=imPM3Power2OutputFrequency, imPM4Power3InputPowerKVAphase3=imPM4Power3InputPowerKVAphase3, imPM4Power3InputFuse3=imPM4Power3InputFuse3, imPM4Power2InputPowerVAphase2=imPM4Power2InputPowerVAphase2, imPM3SystemIDnextServiceDate=imPM3SystemIDnextServiceDate, imPM2ContAuto=imPM2ContAuto, imPM4Power3InputPowerKVAphase2=imPM4Power3InputPowerKVAphase2, imPanM1=imPanM1, imPM1BatLeg3Fuse=imPM1BatLeg3Fuse, imPM3Power3InputPowerKVAphase2=imPM3Power3InputPowerKVAphase2, imPM2SystemGENuser2=imPM2SystemGENuser2, imPM4Power2nextServiceDate=imPM4Power2nextServiceDate, imPM4Power1OutputFrequency=imPM4Power1OutputFrequency, imPM1SystemIDManufacturer=imPM1SystemIDManufacturer, imPM2Power3InputPowerKW=imPM2Power3InputPowerKW, imPM1Power2OutputPowerKVAphase3=imPM1Power2OutputPowerKVAphase3, imPM3Power3OutputPowerKVAphase1=imPM3Power3OutputPowerKVAphase1, imPM4BatLeg3serNumb=imPM4BatLeg3serNumb, imPM4Power3Running3=imPM4Power3Running3, imPM2Power1InputFuse3=imPM2Power1InputFuse3, imPm1Power1InputPowerW=imPm1Power1InputPowerW, imco3AlarmTable=imco3AlarmTable, imPM2BatLeg1InstallationDate=imPM2BatLeg1InstallationDate, imPM4BatLeg2Current=imPM4BatLeg2Current, imPM4Battery=imPM4Battery, imco3TrapAlarmOut7OFF=imco3TrapAlarmOut7OFF, imPM2Power3Fan=imPM2Power3Fan, imPM1BatLeg1LowVoltageDisconnect=imPM1BatLeg1LowVoltageDisconnect, imPM4BatLeg3=imPM4BatLeg3, imPM3Power2Type=imPM3Power2Type, imPM3ContLabel=imPM3ContLabel, imPM3BatLeg3NominalCapacity=imPM3BatLeg3NominalCapacity, imPM3Power2Running8=imPM3Power2Running8, imPM1Power2OutputPowerKVAphase2=imPM1Power2OutputPowerKVAphase2, imPM3BatLeg1TimeOnBattery=imPM3BatLeg1TimeOnBattery, imPM1Power3InputFuse2=imPM1Power3InputFuse2, imPM4Power3OutputFuse1=imPM4Power3OutputFuse1, imPM4Power1InputPowerVAphase2=imPM4Power1InputPowerVAphase2, imPM4Power3InputPowerVAphase3=imPM4Power3InputPowerVAphase3, imPM1Power3OutputPowerKVAphase2=imPM1Power3OutputPowerKVAphase2, imPm1Power1InputCurrent=imPm1Power1InputCurrent, imPM3Power3OutputFrequency=imPM3Power3OutputFrequency)
mibBuilder.exportSymbols("IMCO-BIG-MIB", imPM4Power2Running4=imPM4Power2Running4, imPM4BatLeg1serNumb=imPM4BatLeg1serNumb, imPM3Power2OutputBreaker1=imPM3Power2OutputBreaker1, imPM2Power3InputVoltage=imPM2Power3InputVoltage, imPM2Power3InputPowerW=imPM2Power3InputPowerW, imPM2BatLeg2LowVoltageDisconnect=imPM2BatLeg2LowVoltageDisconnect, imPm1Power2InputPowerVAphase2=imPm1Power2InputPowerVAphase2, imPM3Power1InputPowerKVAphase2=imPM3Power1InputPowerKVAphase2, imPM3Power2InputPowerKVAphase3=imPM3Power2InputPowerKVAphase3, imPM2Power3Type=imPM2Power3Type, imPM1SystemGENFan=imPM1SystemGENFan, imPM2Power2Running8=imPM2Power2Running8, imPM3Power1OutputPowerKVAphase1=imPM3Power1OutputPowerKVAphase1, imPM2Power1InputCurrentPhase1=imPM2Power1InputCurrentPhase1, imPM1SystemGEN=imPM1SystemGEN, imPM1BatLeg1Type=imPM1BatLeg1Type, imPM1ContState=imPM1ContState, imPM3Power2OutputCurrentPhase1=imPM3Power2OutputCurrentPhase1, imPM2DistFuse=imPM2DistFuse, imPM3Power3Running4=imPM3Power3Running4, imPM2Power2OutputBreaker=imPM2Power2OutputBreaker, imPM2Power1InputPowerVAphase2=imPM2Power1InputPowerVAphase2, imPM3ContEntry=imPM3ContEntry, imPM3ContId=imPM3ContId, imPM2Power3Running8=imPM2Power3Running8, imPM2BatLeg2Type=imPM2BatLeg2Type, imPM3BatLeg3Lifetime=imPM3BatLeg3Lifetime, imPM4Power1OutputVoltagePhase3=imPM4Power1OutputVoltagePhase3, imPM4Power3Running6=imPM4Power3Running6, imPM2Power1OutputPowerKVA=imPM2Power1OutputPowerKVA, imPM1Power3Running3=imPM1Power3Running3, imPM2Power3InputFuse=imPM2Power3InputFuse, imPM4Power3Running1=imPM4Power3Running1, imco3IdentSwVersion=imco3IdentSwVersion, imPM2Power3BatteryAvailable=imPM2Power3BatteryAvailable, imPM2BatLeg3Fuse=imPM2BatLeg3Fuse, imPM2Power3InputPowerKVAphase3=imPM2Power3InputPowerKVAphase3, imPM3Power1OutputPowerVA=imPM3Power1OutputPowerVA, imPM4Power3Temperature=imPM4Power3Temperature, imPM4BatLeg3LowVoltageDisconnect=imPM4BatLeg3LowVoltageDisconnect, imPM4Power1Running7=imPM4Power1Running7, imPM2BatLeg1Lifetime=imPM2BatLeg1Lifetime, imPM3Power2OutputPowerVAphase1=imPM3Power2OutputPowerVAphase1, imPM4BatLeg3Type=imPM4BatLeg3Type, imPM4Power3OutputCurrent=imPM4Power3OutputCurrent, imPM4SystemIDnextServiceDate=imPM4SystemIDnextServiceDate, imPM2Power1Running2=imPM2Power1Running2, imPM1Power2Running6=imPM1Power2Running6, imPM4BatLeg1Temperature=imPM4BatLeg1Temperature, imPm1Power1OutputPowerVA=imPm1Power1OutputPowerVA, imPM4BatLeg2Breaker=imPM4BatLeg2Breaker, imPM2Power1InputPowerKVAphase1=imPM2Power1InputPowerKVAphase1, imPM3BatLeg3Fuse=imPM3BatLeg3Fuse, imPM4Power2InputCurrentPhase3=imPM4Power2InputCurrentPhase3, imPM2ContState=imPM2ContState, imPM3BatteryChargeState=imPM3BatteryChargeState, imPM2Power2Type=imPM2Power2Type, imPM2Power1InputCurrentPhase3=imPM2Power1InputCurrentPhase3, imPM2Power2serNumb=imPM2Power2serNumb, imPM3Power3InputPowerW=imPM3Power3InputPowerW, imPM1Power1Running6=imPM1Power1Running6, imPM1BatLeg3=imPM1BatLeg3, imPM2BatLeg2TimeOnBattery=imPM2BatLeg2TimeOnBattery, imPM3Power3OutputVoltagePhase1=imPM3Power3OutputVoltagePhase1, imPM2Power1OutputBreaker2=imPM2Power1OutputBreaker2, imPM3BatLeg3=imPM3BatLeg3, imPM4Power1OutputPowerKVA=imPM4Power1OutputPowerKVA, imPM3Power1InputCurrent=imPM3Power1InputCurrent, imco3TrapAlarmOut6OFF=imco3TrapAlarmOut6OFF, imPM4Power2OutputFuse1=imPM4Power2OutputFuse1, imPM2Power1OutputFrequency=imPM2Power1OutputFrequency, imPm1Power3InputVoltagePhase3=imPm1Power3InputVoltagePhase3, imPM1BatLeg3Breaker=imPM1BatLeg3Breaker, imPM2Power1InputVoltagePhase1=imPM2Power1InputVoltagePhase1, imPM1ContEntry=imPM1ContEntry, imPM3Power1InputPowerKVA=imPM3Power1InputPowerKVA, imPM2Power3Running2=imPM2Power3Running2, imPM4SystemGENDoor1=imPM4SystemGENDoor1, imPM4Power2InputCurrent=imPM4Power2InputCurrent, imPM3Power3OutputVoltage=imPM3Power3OutputVoltage, imPM3Control=imPM3Control, imPM3Power3InputVoltage=imPM3Power3InputVoltage, imPM3Power2InputCurrentPhase1=imPM3Power2InputCurrentPhase1, imPM2Power2InputVoltagePhase3=imPM2Power2InputVoltagePhase3, imPM2SystemGENDoor2=imPM2SystemGENDoor2, imPM1Power2OutputBreaker2=imPM1Power2OutputBreaker2, imPM2BatLeg3Temperature=imPM2BatLeg3Temperature, imPM2Power3OutputFrequency=imPM2Power3OutputFrequency, imPM1BatLeg1serNumb=imPM1BatLeg1serNumb, imPM3Power3InputCurrent=imPM3Power3InputCurrent, imPM3Power1Type=imPM3Power1Type, imPM1Battery=imPM1Battery, imPM1ContTestCAPcommand=imPM1ContTestCAPcommand, imPM1Power1InputBreaker=imPM1Power1InputBreaker, imPM3Power2InputCurrent=imPM3Power2InputCurrent, imPM3SystemGENuser3=imPM3SystemGENuser3, imPm1Power1OutputPowerKVAphase3=imPm1Power1OutputPowerKVAphase3, imPM4Power1OutputBreaker=imPM4Power1OutputBreaker, imPM2Power1OutputBreaker1=imPM2Power1OutputBreaker1, imPM1SystemGENuser4=imPM1SystemGENuser4, imPM4Power2Type=imPM4Power2Type, imPM4BatLeg2NominalVoltage=imPM4BatLeg2NominalVoltage, imPM2Power1InputSurgeArrester=imPM2Power1InputSurgeArrester, imPM3Power2InputPowerKVA=imPM3Power2InputPowerKVA, imPM3BatLeg1Manufacturer=imPM3BatLeg1Manufacturer, imPM4BatLeg1nextServiceDate=imPM4BatLeg1nextServiceDate, imPM4Power2OutputBreaker2=imPM4Power2OutputBreaker2, imPM3BatteryVoltage=imPM3BatteryVoltage, imPM3BatteryAutonomyTime=imPM3BatteryAutonomyTime, imPM3Power3Running7=imPM3Power3Running7, imco3TrapAlarmOut5OFF=imco3TrapAlarmOut5OFF, imPM3SystemGENtemperature=imPM3SystemGENtemperature, imPM2Power3InputPowerKVAphase2=imPM2Power3InputPowerKVAphase2, imPM3Power3InputBreaker=imPM3Power3InputBreaker, imPM3Power2OutputBreaker2=imPM3Power2OutputBreaker2, imPM1BatLeg3LowVoltageDisconnect=imPM1BatLeg3LowVoltageDisconnect, imPM4Power2Temperature=imPM4Power2Temperature, imPM2Power2OutputCurrentPhase1=imPM2Power2OutputCurrentPhase1, imPM2Power2OutputPowerKW=imPM2Power2OutputPowerKW, imPM2Power1OutputPowerVAphase3=imPM2Power1OutputPowerVAphase3, imPM2Power1OutputVoltage=imPM2Power1OutputVoltage, imPM4Power1InputBreaker2=imPM4Power1InputBreaker2, imPM1SystemIDserNumb=imPM1SystemIDserNumb, imPM4SystemGENtemperature=imPM4SystemGENtemperature, imPM1Power3BatteryAvailable=imPM1Power3BatteryAvailable, imPM2Power1BatteryAvailable=imPM2Power1BatteryAvailable, imPM3Power2Running1=imPM3Power2Running1, imPM2BatLeg3Current=imPM2BatLeg3Current, imPM3BatteryCurrent=imPM3BatteryCurrent, imPM4Power1InputVoltage=imPM4Power1InputVoltage, imPM4BatteryVoltage=imPM4BatteryVoltage, imPM1SystemGENDoor2=imPM1SystemGENDoor2, imPM3Power1InputPowerW=imPM3Power1InputPowerW, imPM4BatLeg2Temperature=imPM4BatLeg2Temperature, imPM2Power3InputPowerVAphase3=imPM2Power3InputPowerVAphase3, imPM4Power1Temperature=imPM4Power1Temperature, imPM2BatLeg2nextServiceDate=imPM2BatLeg2nextServiceDate, imPM2Power2OutputBreaker1=imPM2Power2OutputBreaker1, imPM4BatLeg2ChargeState=imPM4BatLeg2ChargeState, imPM1ContTestCAPcurrent=imPM1ContTestCAPcurrent, imPM2Power3OutputPowerVAphase2=imPM2Power3OutputPowerVAphase2, imPM3BatLeg2TimeOnBattery=imPM3BatLeg2TimeOnBattery, imPM2SystemGENuser1=imPM2SystemGENuser1, imPM3BatLeg1Current=imPM3BatLeg1Current, imPM2BatLeg1Type=imPM2BatLeg1Type, imPM3Power1Running3=imPM3Power1Running3, imPm1Power1InputPowerKVAphase2=imPm1Power1InputPowerKVAphase2, imPm1Power1InputPowerVA=imPm1Power1InputPowerVA, imPM2SystemID=imPM2SystemID, imPM2Power2InputBreaker=imPM2Power2InputBreaker, imPM2Power2OutputBreaker2=imPM2Power2OutputBreaker2, imPM2BatLeg1ChargeState=imPM2BatLeg1ChargeState, imPM4Power1InputPowerVAphase1=imPM4Power1InputPowerVAphase1, imco3TrapAlarmOut5ON=imco3TrapAlarmOut5ON, imPM1Power3OutputPowerVAphase3=imPM1Power3OutputPowerVAphase3, imPM3Power1Running5=imPM3Power1Running5, imPM3Power1InputFuse2=imPM3Power1InputFuse2, npModules=npModules, imPm1BatLeg3TimeOnBattery=imPm1BatLeg3TimeOnBattery, imPM3Power2Running7=imPM3Power2Running7, imPm1Power1InputVoltagePhase1=imPm1Power1InputVoltagePhase1, imPM4Power2InputVoltagePhase3=imPM4Power2InputVoltagePhase3, imPM3Power3OutputPowerKVA=imPM3Power3OutputPowerKVA, imPm1Power1OutputCurrentPhase2=imPm1Power1OutputCurrentPhase2, imPM3Power2serNumb=imPM3Power2serNumb, imPM4Power1InputCurrentPhase3=imPM4Power1InputCurrentPhase3, imPM1BatLeg1InstallationDate=imPM1BatLeg1InstallationDate, imPM3DistEntry=imPM3DistEntry, imPM3BatLeg1Fuse=imPM3BatLeg1Fuse, imPM3Power1InputPowerKVAphase3=imPM3Power1InputPowerKVAphase3, imPM2Power2OutputPowerVAphase3=imPM2Power2OutputPowerVAphase3, imPM4Power1InputFuse3=imPM4Power1InputFuse3, imPM4Power2OutputPowerVAphase2=imPM4Power2OutputPowerVAphase2, imco3TrapOnBattery=imco3TrapOnBattery, imPM2Power3OutputLoad=imPM2Power3OutputLoad, imPM3Power1OutputFuse2=imPM3Power1OutputFuse2, imPM3BatLeg1Type=imPM3BatLeg1Type, imPM3Power1OutputLoad=imPM3Power1OutputLoad, imPM1BatLeg2Breaker=imPM1BatLeg2Breaker, imPM1Power3OutputVoltagePhase2=imPM1Power3OutputVoltagePhase2, imPM3BatLeg1Voltage=imPM3BatLeg1Voltage, imPM4Power1Type=imPM4Power1Type, imPM3BatLeg2NominalCapacity=imPM3BatLeg2NominalCapacity, imPM3Power3OutputFuse2=imPM3Power3OutputFuse2, imPM4ContLabel=imPM4ContLabel, imPM3Power3BatteryAvailable=imPM3Power3BatteryAvailable, imPM4Power2InputPowerKW=imPM4Power2InputPowerKW, imPM1Power2InputFuse=imPM1Power2InputFuse, imPM3ContState=imPM3ContState, imco3AlarmId=imco3AlarmId, imPM4Power2OutputBreaker1=imPM4Power2OutputBreaker1, imPM4Power2OutputVoltage=imPM4Power2OutputVoltage, imPM3Power2nextServiceDate=imPM3Power2nextServiceDate, imPM3BatLeg1LowVoltageDisconnect=imPM3BatLeg1LowVoltageDisconnect, imPM2Power3Manufacturer=imPM2Power3Manufacturer, imPM3Power3OutputFuse1=imPM3Power3OutputFuse1, imPm1BatLeg2Current=imPm1BatLeg2Current, imPM2BatLeg3Voltage=imPM2BatLeg3Voltage, imPM4BatLeg3TimeOnBattery=imPM4BatLeg3TimeOnBattery, imPm1Power2OutputPowerKVA=imPm1Power2OutputPowerKVA, imPM2Power2Temperature=imPM2Power2Temperature, imPM1Power2nextServiceDate=imPM1Power2nextServiceDate, imPM2Power3InputPowerVAphase1=imPM2Power3InputPowerVAphase1, imPm1Power2OutputVoltage=imPm1Power2OutputVoltage, imPM2Power3InputFuse2=imPM2Power3InputFuse2, imco3IdentPMnumber=imco3IdentPMnumber, imPM3Power3OutputPowerKVAphase2=imPM3Power3OutputPowerKVAphase2, imPM3Power2OutputPowerVAphase2=imPM3Power2OutputPowerVAphase2, imPM3SystemIDbuttonName=imPM3SystemIDbuttonName, imPM1SystemGENuser1=imPM1SystemGENuser1, imPM3Power3OutputBreaker2=imPM3Power3OutputBreaker2, imPm1Power2InputCurrentPhase3=imPm1Power2InputCurrentPhase3, imPM2Power1InputVoltage=imPM2Power1InputVoltage, imPM1Power1=imPM1Power1, imPM2BatLeg2ChargeState=imPM2BatLeg2ChargeState, imPM4BatLeg1=imPM4BatLeg1, imPM2Power1serNumb=imPM2Power1serNumb, imPM2Power2OutputPowerKVAphase3=imPM2Power2OutputPowerKVAphase3, imPM3BatLeg3Manufacturer=imPM3BatLeg3Manufacturer, PYSNMP_MODULE_ID=imcoMIB, imco3Ident=imco3Ident, imPM4Power3OutputLoad=imPM4Power3OutputLoad, imPm1Power3Temperature=imPm1Power3Temperature, imPM2Power3InputCurrentPhase1=imPM2Power3InputCurrentPhase1, imPM3Power2Running3=imPM3Power2Running3, imPM3BatLeg2Type=imPM3BatLeg2Type, imPM4Power2Running7=imPM4Power2Running7, imPM3BatLeg2LowVoltageDisconnect=imPM3BatLeg2LowVoltageDisconnect, imPM3Power2Temperature=imPM3Power2Temperature, imPM1BatLeg1Breaker=imPM1BatLeg1Breaker, imPm1Power3InputPowerKVAphase1=imPm1Power3InputPowerKVAphase1, imPM4BatLeg3NominalVoltage=imPM4BatLeg3NominalVoltage, imPM1Power1InputBreaker2=imPM1Power1InputBreaker2, imPM4Power3OutputVoltagePhase3=imPM4Power3OutputVoltagePhase3, imPm1BatLeg1Voltage=imPm1BatLeg1Voltage, imPm1Power1InputCurrentPhase3=imPm1Power1InputCurrentPhase3, imPM2BatLeg1=imPM2BatLeg1, imPM2Power3OutputCurrent=imPM2Power3OutputCurrent, imPM1SystemIDPMserialNumber=imPM1SystemIDPMserialNumber, imPM2BatLeg2serNumb=imPM2BatLeg2serNumb, imPM4Power3OutputPowerVAphase2=imPM4Power3OutputPowerVAphase2, imPM3Power3InputFuse3=imPM3Power3InputFuse3, imPm1Power2InputPowerW=imPm1Power2InputPowerW, imPM2BatLeg2NominalCapacity=imPM2BatLeg2NominalCapacity, imPM3Power3OutputPowerVAphase2=imPM3Power3OutputPowerVAphase2, imPM4SystemIDPMserialNumber=imPM4SystemIDPMserialNumber, imcoMIB=imcoMIB, imPM1Power1nextServiceDate=imPM1Power1nextServiceDate, imco3TrapAlarmOut6ON=imco3TrapAlarmOut6ON, imPM4BatLeg1Breaker=imPM4BatLeg1Breaker, imPM1Power1InputBreaker3=imPM1Power1InputBreaker3, imPm1Power3InputPowerVAphase2=imPm1Power3InputPowerVAphase2, imPM1Power3OutputFuse2=imPM1Power3OutputFuse2, imPM4Power3InputPowerVA=imPM4Power3InputPowerVA)
mibBuilder.exportSymbols("IMCO-BIG-MIB", imPm1Power3InputVoltagePhase1=imPm1Power3InputVoltagePhase1, imPM3Power2InputSurgeArrester=imPM3Power2InputSurgeArrester, imPM1BatLeg2InstallationDate=imPM1BatLeg2InstallationDate, imPM3BatLeg1serNumb=imPM3BatLeg1serNumb, imPM4Power1InputPowerKVAphase1=imPM4Power1InputPowerKVAphase1, imPM2Power3OutputPowerKW=imPM2Power3OutputPowerKW, imPM2Power3OutputFuse1=imPM2Power3OutputFuse1, imPM3Power2OutputPowerKVAphase2=imPM3Power2OutputPowerKVAphase2, imPM2Power3Running5=imPM2Power3Running5, imPM2Power2InputCurrentPhase2=imPM2Power2InputCurrentPhase2, imPM1Power2InputFuse3=imPM1Power2InputFuse3, imPm1Power1OutputPowerW=imPm1Power1OutputPowerW, imPM2Power2Running7=imPM2Power2Running7, imPM2Control=imPM2Control, imPM1Distrib=imPM1Distrib, imPm1Power1InputPowerKVAphase3=imPm1Power1InputPowerKVAphase3, imPM3Power2Running2=imPM3Power2Running2, imPm1BatLeg2Lifetime=imPm1BatLeg2Lifetime, imPM4SystemGENSurgeArrester=imPM4SystemGENSurgeArrester, imPM2Power1OutputFuse2=imPM2Power1OutputFuse2, imPM2Power2InputSurgeArrester=imPM2Power2InputSurgeArrester, imPM4Power1OutputBreaker2=imPM4Power1OutputBreaker2, imPM1Power2serNumb=imPM1Power2serNumb, imPM3Power3OutputCurrentPhase1=imPM3Power3OutputCurrentPhase1, imPM4SystemID=imPM4SystemID, imPM2SystemIDswVersion=imPM2SystemIDswVersion, imPM4Power1InputFuse1=imPM4Power1InputFuse1, imPM1ContTestCAPtemperature=imPM1ContTestCAPtemperature, imPM3Power2InputBreaker=imPM3Power2InputBreaker, imPM3Battery=imPM3Battery, imPM4SystemIDaddress=imPM4SystemIDaddress, imPM1Power2OutputCurrentPhase2=imPM1Power2OutputCurrentPhase2, imPM2BatLeg3Breaker=imPM2BatLeg3Breaker, imPM1Power1InputFuse2=imPM1Power1InputFuse2, imPM2ContTimeOFF=imPM2ContTimeOFF, imPM4Power3OutputPowerKVAphase3=imPM4Power3OutputPowerKVAphase3, imPm1Power1Temperature=imPm1Power1Temperature, imPM2ContLabel=imPM2ContLabel, imPM2BatLeg2Voltage=imPM2BatLeg2Voltage, imPM2SystemIDnextServiceDate=imPM2SystemIDnextServiceDate, imPM2BatLeg2Fuse=imPM2BatLeg2Fuse, imPM4Power1OutputFuse1=imPM4Power1OutputFuse1, imPM1BatLeg1Fuse=imPM1BatLeg1Fuse, imPM2Power3OutputBreaker2=imPM2Power3OutputBreaker2, imPM3Power3InputFuse1=imPM3Power3InputFuse1, imPM3SystemIDswVersion=imPM3SystemIDswVersion, imPM2Power3InputCurrentPhase3=imPM2Power3InputCurrentPhase3, imPM3Power2OutputVoltagePhase2=imPM3Power2OutputVoltagePhase2, imPM2Power1OutputBreaker=imPM2Power1OutputBreaker, imPM4Power2OutputLoad=imPM4Power2OutputLoad, imco3Alarm=imco3Alarm, imPM2BatLeg2=imPM2BatLeg2, imPM1Power1Running5=imPM1Power1Running5, imPM4Power1nextServiceDate=imPM4Power1nextServiceDate, imPM4Distrib=imPM4Distrib, imPM4Power2InputBreaker=imPM4Power2InputBreaker, imPm1Power2Temperature=imPm1Power2Temperature, imPM3ContAuto=imPM3ContAuto, imPM4SystemGENuser3=imPM4SystemGENuser3, imPM3Power1OutputPowerVAphase3=imPM3Power1OutputPowerVAphase3, imPM3Power1InputPowerKW=imPM3Power1InputPowerKW, imPM4Power1BatteryAvailable=imPM4Power1BatteryAvailable, imPM1SystemGENuser3=imPM1SystemGENuser3, imPM1Power3Running7=imPM1Power3Running7, imPM1ContLabel=imPM1ContLabel, imPM3Power1Running2=imPM3Power1Running2, imPM2BatLeg1LowVoltageDisconnect=imPM2BatLeg1LowVoltageDisconnect, imPm1Power3OutputLoad=imPm1Power3OutputLoad, imPM1Power3Running1=imPM1Power3Running1, imPM4Control=imPM4Control, imPM3Power3OutputVoltagePhase3=imPM3Power3OutputVoltagePhase3, imPM3BatteryTimeOnBattery=imPM3BatteryTimeOnBattery, imPM3Power1OutputFuse1=imPM3Power1OutputFuse1, imPM3Power1Fan=imPM3Power1Fan, imPM3BatLeg2Manufacturer=imPM3BatLeg2Manufacturer, imPM2Power1OutputPowerKVAphase3=imPM2Power1OutputPowerKVAphase3, imPM2Power2OutputFuse1=imPM2Power2OutputFuse1, imPM4Power2Running5=imPM4Power2Running5, imPM1Power2Running1=imPM1Power2Running1, imPM3Power3InputVoltagePhase1=imPM3Power3InputVoltagePhase1, imPM1SystemGENtemperature=imPM1SystemGENtemperature, imPM2Power1OutputLoad=imPM2Power1OutputLoad, imPanM4=imPanM4, imPM4Power1OutputPowerKVAphase3=imPM4Power1OutputPowerKVAphase3, imco3TrapNewAlarm=imco3TrapNewAlarm, imPM3Power3InputPowerVAphase3=imPM3Power3InputPowerVAphase3, imPM4Power1OutputPowerVA=imPM4Power1OutputPowerVA, imPM4Power1=imPM4Power1, imPm1BatLeg3Voltage=imPm1BatLeg3Voltage, imPm1Power2InputPowerKVAphase3=imPm1Power2InputPowerKVAphase3, imPM2Power3InputBreaker2=imPM2Power3InputBreaker2, imPM2Power3InputBreaker1=imPM2Power3InputBreaker1, imPM4Power1InputPowerW=imPM4Power1InputPowerW, imPM4Power3OutputPowerVA=imPM4Power3OutputPowerVA, imPM3Power3serNumb=imPM3Power3serNumb, imPM2Power1InputPowerKW=imPM2Power1InputPowerKW, imPM1Power2Running8=imPM1Power2Running8, imPM4Power3OutputPowerKVA=imPM4Power3OutputPowerKVA, imPM3Power3Running3=imPM3Power3Running3, imPm1Power2InputCurrent=imPm1Power2InputCurrent, imPM2Power1Running7=imPM2Power1Running7, imPM2Power3InputFuse1=imPM2Power3InputFuse1, imPM4Power2InputCurrentPhase2=imPM4Power2InputCurrentPhase2, imPM4Power2OutputCurrentPhase3=imPM4Power2OutputCurrentPhase3, imPM4Power3OutputCurrentPhase1=imPM4Power3OutputCurrentPhase1, imPM1Power3Running6=imPM1Power3Running6, imPM2BatteryTimeOnBattery=imPM2BatteryTimeOnBattery, imPm1BatLeg2TimeOnBattery=imPm1BatLeg2TimeOnBattery, imPM3Power2InputVoltagePhase3=imPM3Power2InputVoltagePhase3, imPM3Power2InputCurrentPhase2=imPM3Power2InputCurrentPhase2, imPM3Power2InputFuse=imPM3Power2InputFuse, imPM2Power2InputCurrentPhase1=imPM2Power2InputCurrentPhase1, imPM3Power2OutputCurrent=imPM3Power2OutputCurrent, imPM4ContEntry=imPM4ContEntry, imPm1BatLeg1Current=imPm1BatLeg1Current, imPM1ContAuto=imPM1ContAuto, imPm1Power2InputCurrentPhase2=imPm1Power2InputCurrentPhase2, imPM4BatLeg3RestCapacity=imPM4BatLeg3RestCapacity, imPM3BatLeg2Temperature=imPM3BatLeg2Temperature, imPM2Battery=imPM2Battery, imPM2BatLeg3Type=imPM2BatLeg3Type, imPM2ContEntry=imPM2ContEntry, imPM3BatLeg3Temperature=imPM3BatLeg3Temperature, imPM3Power1Running7=imPM3Power1Running7, imPm1BatLeg2Voltage=imPm1BatLeg2Voltage, imPM2Power2InputFuse3=imPM2Power2InputFuse3, imPM4Power3InputVoltagePhase3=imPM4Power3InputVoltagePhase3, imPM2Power1InputVoltagePhase3=imPM2Power1InputVoltagePhase3, imPM4Power1OutputPowerVAphase2=imPM4Power1OutputPowerVAphase2, imPM3Power3Manufacturer=imPM3Power3Manufacturer, imPM3Power3Running2=imPM3Power3Running2, imPM4Power2InputSurgeArrester=imPM4Power2InputSurgeArrester, imPM3Power2OutputCurrentPhase3=imPM3Power2OutputCurrentPhase3, imPM4Power2OutputPowerKVAphase2=imPM4Power2OutputPowerKVAphase2, imPM2Power2InputBreaker1=imPM2Power2InputBreaker1, imPM1SystemIDaddress=imPM1SystemIDaddress, imPM4Power2OutputCurrentPhase2=imPM4Power2OutputCurrentPhase2, imPM3Power1OutputFrequency=imPM3Power1OutputFrequency, imPM4Power3InputCurrentPhase3=imPM4Power3InputCurrentPhase3, imPM2ContTestCAPcurrent=imPM2ContTestCAPcurrent, imPM2BatLeg3InstallationDate=imPM2BatLeg3InstallationDate, imPM4Power3OutputBreaker=imPM4Power3OutputBreaker, imPM4BatLeg2NominalCapacity=imPM4BatLeg2NominalCapacity, imPM2Power1InputFuse1=imPM2Power1InputFuse1, imco3IdentAgentVersion=imco3IdentAgentVersion, imPm1Power3InputCurrentPhase2=imPm1Power3InputCurrentPhase2, imPm1Power1InputPowerKW=imPm1Power1InputPowerKW, imPm1Power2OutputLoad=imPm1Power2OutputLoad, imPM4Power2InputPowerKVAphase2=imPM4Power2InputPowerKVAphase2, imPM3DistTable=imPM3DistTable, imPM4ContTimeOFF=imPM4ContTimeOFF, imPM3Power3nextServiceDate=imPM3Power3nextServiceDate, imPM4BatLeg3Current=imPM4BatLeg3Current, imPM1Power2Type=imPM1Power2Type, imPM4BatLeg3nextServiceDate=imPM4BatLeg3nextServiceDate, imPM4Power2=imPM4Power2, imPM1Power1Running7=imPM1Power1Running7, imPM4Power1InputSurgeArrester=imPM4Power1InputSurgeArrester, imPM4DistId=imPM4DistId, imPM4SystemIDManufacturer=imPM4SystemIDManufacturer, imPM4Power1OutputPowerKW=imPM4Power1OutputPowerKW, imPm1Power3InputPowerKVAphase2=imPm1Power3InputPowerKVAphase2, imPM4Power2Running6=imPM4Power2Running6, imPm1Power2InputPowerKVAphase2=imPm1Power2InputPowerKVAphase2, imPM1Power3OutputBreaker1=imPM1Power3OutputBreaker1, imPM2BatteryVoltage=imPM2BatteryVoltage, imPM3BatLeg1NominalCapacity=imPM3BatLeg1NominalCapacity, imPM1Power1OutputFuse1=imPM1Power1OutputFuse1, imPM2Power1OutputVoltagePhase3=imPM2Power1OutputVoltagePhase3, imPM4Power1OutputVoltagePhase1=imPM4Power1OutputVoltagePhase1, imPM3Power1InputVoltage=imPM3Power1InputVoltage, imPM2Power3OutputFuse=imPM2Power3OutputFuse, imPM4Power2OutputPowerW=imPM4Power2OutputPowerW, imPM3Power3OutputPowerVA=imPM3Power3OutputPowerVA, imPm1BatLeg2Autonomytime=imPm1BatLeg2Autonomytime, imco3Traps=imco3Traps, imPM4Power1OutputVoltagePhase2=imPM4Power1OutputVoltagePhase2, imPM3Power2InputPowerVAphase3=imPM3Power2InputPowerVAphase3, imPM3BatteryNominalCapacity=imPM3BatteryNominalCapacity, imPM4SystemGEN=imPM4SystemGEN, imPM3Power2Running5=imPM3Power2Running5, imPM3Power2InputVoltage=imPM3Power2InputVoltage, imPM3Power1InputPowerVAphase1=imPM3Power1InputPowerVAphase1, imPM3BatLeg2InstallationDate=imPM3BatLeg2InstallationDate, imPM2Power2InputFuse1=imPM2Power2InputFuse1, imPM3SystemGENuser4=imPM3SystemGENuser4, imPM3Power2InputPowerW=imPM3Power2InputPowerW, imPM2SystemIDType=imPM2SystemIDType, imPm1Power3OutputPowerVA=imPm1Power3OutputPowerVA, imPM3BatLeg2Autonomytime=imPM3BatLeg2Autonomytime, imPM4Power3OutputBreaker2=imPM4Power3OutputBreaker2, imPM2Power1Running4=imPM2Power1Running4, imPM1Power2Manufacturer=imPM1Power2Manufacturer, imPM2BatLeg3Lifetime=imPM2BatLeg3Lifetime, imPM3ContTestCAPduration=imPM3ContTestCAPduration, imcoObjects3=imcoObjects3, imPM1Power2OutputVoltagePhase1=imPM1Power2OutputVoltagePhase1, imPM2Power2OutputCurrentPhase3=imPM2Power2OutputCurrentPhase3, imPM3BatLeg1=imPM3BatLeg1, imPM2Power1InputBreaker2=imPM2Power1InputBreaker2, imPM2BatLeg2NominalVoltage=imPM2BatLeg2NominalVoltage, imPM4SystemIDhwVersion=imPM4SystemIDhwVersion, imPM2BatLeg3LowVoltageDisconnect=imPM2BatLeg3LowVoltageDisconnect, imPM3Power3OutputLoad=imPM3Power3OutputLoad, imco3TrapAlarmEnd=imco3TrapAlarmEnd, imPM4Power1Running2=imPM4Power1Running2, imPm1Power1InputPowerVAphase2=imPm1Power1InputPowerVAphase2, imPM2Power1OutputVoltagePhase2=imPM2Power1OutputVoltagePhase2, imPM4Power3InputBreaker1=imPM4Power3InputBreaker1, imPM4Power2InputFuse1=imPM4Power2InputFuse1, imPM2Power3OutputPowerVAphase3=imPM2Power3OutputPowerVAphase3, imPM4BatLeg1NominalVoltage=imPM4BatLeg1NominalVoltage, imPM1Power2OutputPowerVAphase2=imPM1Power2OutputPowerVAphase2, imPm1Power1OutputLoad=imPm1Power1OutputLoad, imPM2BatLeg3nextServiceDate=imPM2BatLeg3nextServiceDate, imPM1Power3Running4=imPM1Power3Running4, imPM4Power2BatteryAvailable=imPM4Power2BatteryAvailable, imPM3Power3OutputPowerW=imPM3Power3OutputPowerW, imPM4Power3InputPowerVAphase2=imPM4Power3InputPowerVAphase2, imPm1BatLeg3Temperature=imPm1BatLeg3Temperature, imPM2BatLeg3=imPM2BatLeg3, imco3TrapAlarmOut2OFF=imco3TrapAlarmOut2OFF, imPM4Power3OutputPowerVAphase3=imPM4Power3OutputPowerVAphase3, imPM2Power3Running1=imPM2Power3Running1, imPM4Power2OutputFuse=imPM4Power2OutputFuse, imPM3Power3InputVoltagePhase3=imPM3Power3InputVoltagePhase3, imPM4Power1InputPowerKVAphase2=imPM4Power1InputPowerKVAphase2, imPM4Power3InputPowerW=imPM4Power3InputPowerW, imPM1Power1Running1=imPM1Power1Running1, imPM4Power1InputPowerKW=imPM4Power1InputPowerKW, imPM4Power1OutputCurrentPhase3=imPM4Power1OutputCurrentPhase3, imPM4Power3InputPowerKVA=imPM4Power3InputPowerKVA, imPM3Power1Manufacturer=imPM3Power1Manufacturer, imPM1Power3OutputVoltagePhase1=imPM1Power3OutputVoltagePhase1, imPM4Power2OutputVoltagePhase1=imPM4Power2OutputVoltagePhase1, imPM1BatLeg3serNumb=imPM1BatLeg3serNumb, imPM4ContTestCAPtemperature=imPM4ContTestCAPtemperature, imPM2Power3InputVoltagePhase2=imPM2Power3InputVoltagePhase2, imPM2Power1InputCurrent=imPM2Power1InputCurrent, imPM1SystemGENDoor1=imPM1SystemGENDoor1, imPM4Power2InputPowerKVA=imPM4Power2InputPowerKVA, imPm1Power2OutputPowerKW=imPm1Power2OutputPowerKW, imPm1Power2OutputCurrent=imPm1Power2OutputCurrent, imPM4ContAuto=imPM4ContAuto, imPM2Power1Running8=imPM2Power1Running8, imPM3DistBreaker=imPM3DistBreaker, imPm1Power1OutputPowerVAphase1=imPm1Power1OutputPowerVAphase1, imPM4BatLeg2nextServiceDate=imPM4BatLeg2nextServiceDate, imPM1Power3Fan=imPM1Power3Fan, imPm1Power3OutputFrequency=imPm1Power3OutputFrequency, imPM4Power2Running8=imPM4Power2Running8, imPM4Power1InputVoltagePhase1=imPM4Power1InputVoltagePhase1, imPM1BatLeg1=imPM1BatLeg1, imPM4Power1InputCurrent=imPM4Power1InputCurrent)
mibBuilder.exportSymbols("IMCO-BIG-MIB", imPM3Power2OutputVoltage=imPM3Power2OutputVoltage, imPM2BatLeg1RestCapacity=imPM2BatLeg1RestCapacity, imPm1BatLeg1NominalVoltage=imPm1BatLeg1NominalVoltage, imPM4Power2OutputPowerKW=imPM4Power2OutputPowerKW, imPM1BatLeg3InstallationDate=imPM1BatLeg3InstallationDate, imPm1Power3InputPowerVA=imPm1Power3InputPowerVA, imPM3Power2=imPM3Power2, imPM4Power2OutputPowerKVA=imPM4Power2OutputPowerKVA, imPM3BatLeg2ChargeState=imPM3BatLeg2ChargeState, imPM2Power1OutputPowerKVAphase2=imPM2Power1OutputPowerKVAphase2, imPM4Power1Running5=imPM4Power1Running5, imPM4Power2serNumb=imPM4Power2serNumb, imPM1SystemIDhwVersion=imPM1SystemIDhwVersion, imPM4BatLeg1Fuse=imPM4BatLeg1Fuse, imPM1Power2OutputCurrentPhase3=imPM1Power2OutputCurrentPhase3, imPM1Control=imPM1Control, imPM1Power2InputFuse1=imPM1Power2InputFuse1, imPm1BatLeg1NominalCapacity=imPm1BatLeg1NominalCapacity, imco3TrapTestCAPstart=imco3TrapTestCAPstart, imPm1Power3InputPowerW=imPm1Power3InputPowerW, imPM3Power2InputCurrentPhase3=imPM3Power2InputCurrentPhase3, imPM2Power2OutputFuse2=imPM2Power2OutputFuse2, imPM3BatLeg2Voltage=imPM3BatLeg2Voltage, imPM4SystemGENFan=imPM4SystemGENFan, imPm1Power1InputCurrentPhase1=imPm1Power1InputCurrentPhase1, imPM3SystemGENDoor2=imPM3SystemGENDoor2, imPM4BatLeg3InstallationDate=imPM4BatLeg3InstallationDate, imPM2Power3Running4=imPM2Power3Running4, imPM4BatLeg3Lifetime=imPM4BatLeg3Lifetime, imPM1Power3Running5=imPM1Power3Running5, imPm1Power3InputCurrentPhase1=imPm1Power3InputCurrentPhase1, imPM4Power3OutputFuse2=imPM4Power3OutputFuse2, imPM2Power2=imPM2Power2, imPM4BatLeg1ChargeState=imPM4BatLeg1ChargeState, imPM3BatLeg2Breaker=imPM3BatLeg2Breaker, imPM2DistId=imPM2DistId, imPM1BatLeg2Manufacturer=imPM1BatLeg2Manufacturer, imPM1Power2OutputPowerKVAphase1=imPM1Power2OutputPowerKVAphase1, imPM2BatLeg3serNumb=imPM2BatLeg3serNumb, imPM3Power1InputPowerVA=imPM3Power1InputPowerVA, imPm1BatLeg1Autonomytime=imPm1BatLeg1Autonomytime, imPM1Power1OutputFuse=imPM1Power1OutputFuse, imPM3BatLeg2Fuse=imPM3BatLeg2Fuse, imPM3Power1InputSurgeArrester=imPM3Power1InputSurgeArrester, imPM4Power3OutputPowerKVAphase2=imPM4Power3OutputPowerKVAphase2, imPM3BatLeg1Temperature=imPM3BatLeg1Temperature, imPM1Power2InputSurgeArrester=imPM1Power2InputSurgeArrester, imPM4Power2OutputCurrentPhase1=imPM4Power2OutputCurrentPhase1, imPM2Power3InputPowerKVAphase1=imPM2Power3InputPowerKVAphase1, imPM3Power3InputCurrentPhase2=imPM3Power3InputCurrentPhase2, imPM3Power2OutputLoad=imPM3Power2OutputLoad, imPM3Power3InputCurrentPhase1=imPM3Power3InputCurrentPhase1, imPM4Power1Running6=imPM4Power1Running6, imPM2Power3OutputVoltagePhase1=imPM2Power3OutputVoltagePhase1, imPM4Power1Running3=imPM4Power1Running3, imPm1Power3OutputPowerKVA=imPm1Power3OutputPowerKVA, imPM1Power1Type=imPM1Power1Type, imPM3Power2InputPowerVAphase2=imPM3Power2InputPowerVAphase2, imPM3ContTestCAPstatus=imPM3ContTestCAPstatus, imPM2Power2InputPowerVAphase3=imPM2Power2InputPowerVAphase3, imPM3Power3InputVoltagePhase2=imPM3Power3InputVoltagePhase2, imPM4Power1OutputCurrent=imPM4Power1OutputCurrent, imPm1Power3InputCurrentPhase3=imPm1Power3InputCurrentPhase3, imPM3Power1InputVoltagePhase2=imPM3Power1InputVoltagePhase2, imPm1Power1InputPowerVAphase3=imPm1Power1InputPowerVAphase3, imPM1SystemID=imPM1SystemID, imPM4BatLeg1Manufacturer=imPM4BatLeg1Manufacturer, imPM4BatLeg1Type=imPM4BatLeg1Type, imPM2Power3OutputVoltage=imPM2Power3OutputVoltage, imPM1Power2OutputPowerVAphase1=imPM1Power2OutputPowerVAphase1, imPM3Power1OutputPowerKVAphase2=imPM3Power1OutputPowerKVAphase2, imPM2BatteryAutonomyTime=imPM2BatteryAutonomyTime, imPM4Power3Type=imPM4Power3Type, imPM4Power2OutputFrequency=imPM4Power2OutputFrequency, imPM4Power2InputBreaker1=imPM4Power2InputBreaker1, imPM2Power3=imPM2Power3, imPM2Power1InputPowerKVAphase3=imPM2Power1InputPowerKVAphase3, imPm1BatLeg1ChargeState=imPm1BatLeg1ChargeState, imPm1Power2InputPowerVA=imPm1Power2InputPowerVA, imPM2Power2InputPowerKVAphase3=imPM2Power2InputPowerKVAphase3, imco3IdentName=imco3IdentName, imPM4Power3Fan=imPM4Power3Fan, imPM2Power2OutputVoltage=imPM2Power2OutputVoltage, imPM4BatLeg2Type=imPM4BatLeg2Type, imPm1Power3InputVoltage=imPm1Power3InputVoltage, imPM4BatLeg3Manufacturer=imPM4BatLeg3Manufacturer, imPM2BatLeg1NominalCapacity=imPM2BatLeg1NominalCapacity, imPM1BatLeg1Manufacturer=imPM1BatLeg1Manufacturer, imPM4BatLeg1TimeOnBattery=imPM4BatLeg1TimeOnBattery, imPM3Power1InputBreaker1=imPM3Power1InputBreaker1, imPM2Power1InputCurrentPhase2=imPM2Power1InputCurrentPhase2, imPM2Power1InputFuse=imPM2Power1InputFuse, imPM2BatLeg2InstallationDate=imPM2BatLeg2InstallationDate, imPM4Power3OutputFrequency=imPM4Power3OutputFrequency, imPanM2=imPanM2, imPM1Power3OutputFuse=imPM1Power3OutputFuse, imPm1Power1OutputPowerVAphase2=imPm1Power1OutputPowerVAphase2, imPM4BatLeg2LowVoltageDisconnect=imPM4BatLeg2LowVoltageDisconnect, imPM4Power2OutputPowerVAphase3=imPM4Power2OutputPowerVAphase3, imPM2ContTable=imPM2ContTable, imPM3Power1OutputVoltage=imPM3Power1OutputVoltage, imPM3Power1=imPM3Power1, imPM2Power2InputFuse2=imPM2Power2InputFuse2, imPm1BatteryVoltage=imPm1BatteryVoltage, imPM4Power2OutputBreaker=imPM4Power2OutputBreaker, imPM3Power2OutputVoltagePhase3=imPM3Power2OutputVoltagePhase3, NonNegativeInteger=NonNegativeInteger, imPM2Power3serNumb=imPM2Power3serNumb, imPM3Power3=imPM3Power3, imPM3Power1OutputPowerKW=imPM3Power1OutputPowerKW, imPM1Power3InputFuse3=imPM1Power3InputFuse3, imPM2Power3OutputCurrentPhase2=imPM2Power3OutputCurrentPhase2, imPM4Power1serNumb=imPM4Power1serNumb, imPM3Power2OutputFuse=imPM3Power2OutputFuse, imPm1BatLeg2Temperature=imPm1BatLeg2Temperature, imPM2Power1OutputPowerVAphase1=imPM2Power1OutputPowerVAphase1, imPM2Power2OutputCurrent=imPM2Power2OutputCurrent, imPM4Power1InputBreaker=imPM4Power1InputBreaker, imPM3SystemIDaddress=imPM3SystemIDaddress, imPM4Power1InputFuse2=imPM4Power1InputFuse2, imPM1Power3serNumb=imPM1Power3serNumb, imPM3Power2InputFuse1=imPM3Power2InputFuse1, imPM4Power1InputBreaker1=imPM4Power1InputBreaker1, imPM3Power1InputCurrentPhase1=imPM3Power1InputCurrentPhase1, imPM2Power3nextServiceDate=imPM2Power3nextServiceDate, imPm1BatLeg1TimeOnBattery=imPm1BatLeg1TimeOnBattery, imPM4Power3OutputFuse=imPM4Power3OutputFuse, imPm1Power1OutputPowerKVAphase1=imPm1Power1OutputPowerKVAphase1, imPm1Power2OutputPowerW=imPm1Power2OutputPowerW, imPM3Power3Running8=imPM3Power3Running8, imPM2Power1OutputPowerW=imPM2Power1OutputPowerW, imPM2Power1OutputCurrent=imPM2Power1OutputCurrent, imPM2Power1Temperature=imPM2Power1Temperature, imPM3Power1OutputBreaker1=imPM3Power1OutputBreaker1, imPM3Power1Running8=imPM3Power1Running8, imPM4Power2InputVoltagePhase2=imPM4Power2InputVoltagePhase2, imPM1DistTable=imPM1DistTable, imPM1Power2OutputFuse=imPM1Power2OutputFuse, imPM2Power1OutputPowerVAphase2=imPM2Power1OutputPowerVAphase2, imPM3Power1InputCurrentPhase3=imPM3Power1InputCurrentPhase3, imPM3BatLeg2serNumb=imPM3BatLeg2serNumb, imPM1Power2BatteryAvailable=imPM1Power2BatteryAvailable, imPM3Power3InputFuse=imPM3Power3InputFuse, imco3TrapAlarmOut3ON=imco3TrapAlarmOut3ON, imPM3Power2OutputPowerVAphase3=imPM3Power2OutputPowerVAphase3, imPM4DistTable=imPM4DistTable, imco3AlarmDescr=imco3AlarmDescr, imPM3Power3InputSurgeArrester=imPM3Power3InputSurgeArrester, imPm1Power1InputPowerKVA=imPm1Power1InputPowerKVA, imPM3Power1OutputBreaker=imPM3Power1OutputBreaker, imPM2Power2InputCurrentPhase3=imPM2Power2InputCurrentPhase3, imPM3Power3InputPowerKW=imPM3Power3InputPowerKW, imPM4ContTestCAPcurrent=imPM4ContTestCAPcurrent, imPM4Power3InputBreaker=imPM4Power3InputBreaker, imPM2Power2OutputPowerVAphase2=imPM2Power2OutputPowerVAphase2, imPM2ContTestCAPcommand=imPM2ContTestCAPcommand, imPM2Power3OutputPowerKVAphase2=imPM2Power3OutputPowerKVAphase2, imPM4Power1InputVoltagePhase3=imPM4Power1InputVoltagePhase3, imPM4Power3BatteryAvailable=imPM4Power3BatteryAvailable, imPM1Power2Running3=imPM1Power2Running3, imPM1Power2OutputFuse1=imPM1Power2OutputFuse1, imPM1Power1Running8=imPM1Power1Running8, imPM4Power3InputVoltagePhase1=imPM4Power3InputVoltagePhase1, imPM3Power3OutputCurrentPhase2=imPM3Power3OutputCurrentPhase2, imPM2SystemGENDoor1=imPM2SystemGENDoor1, imPM4Power3InputBreaker3=imPM4Power3InputBreaker3, imPM3Power3Running1=imPM3Power3Running1, imPM2Power3Running6=imPM2Power3Running6, imPM1Power2Running7=imPM1Power2Running7, imPM4BatLeg1Autonomytime=imPM4BatLeg1Autonomytime, imPM4BatLeg2=imPM4BatLeg2, imco3TrapAlarmOut4ON=imco3TrapAlarmOut4ON, imPM2Power2Running4=imPM2Power2Running4, imPM4Power3OutputPowerW=imPM4Power3OutputPowerW, imPM1SystemIDswVersion=imPM1SystemIDswVersion, imPM2Power3OutputPowerW=imPM2Power3OutputPowerW, imPM3Power1BatteryAvailable=imPM3Power1BatteryAvailable, imPm1Power1OutputCurrent=imPm1Power1OutputCurrent, imPM3Power1OutputCurrentPhase1=imPM3Power1OutputCurrentPhase1, imPM2SystemIDManufacturer=imPM2SystemIDManufacturer, imPM2Power3Temperature=imPM2Power3Temperature, imPM2Power2OutputVoltagePhase2=imPM2Power2OutputVoltagePhase2, imPM1Power2InputBreaker3=imPM1Power2InputBreaker3, imPM2Power3InputPowerVAphase2=imPM2Power3InputPowerVAphase2, imPm1BatteryChargeState=imPm1BatteryChargeState, imPm1BatLeg3Lifetime=imPm1BatLeg3Lifetime, imPM2Power2OutputPowerKVAphase1=imPM2Power2OutputPowerKVAphase1, imPM2Power2Running5=imPM2Power2Running5, imPM3Power3OutputPowerKW=imPM3Power3OutputPowerKW, imPM3Power2Fan=imPM3Power2Fan, imPM4Power3InputFuse=imPM4Power3InputFuse, imPm1Power3InputPowerKVA=imPm1Power3InputPowerKVA, imPM3Power1InputVoltagePhase3=imPM3Power1InputVoltagePhase3, imPM1SystemIDType=imPM1SystemIDType, imPm1Power2InputVoltagePhase1=imPm1Power2InputVoltagePhase1, imPM4Power1InputPowerVA=imPM4Power1InputPowerVA, imPm1BatLeg3Current=imPm1BatLeg3Current, imPM2ContTestCAPduration=imPM2ContTestCAPduration, imPM3Power1Running6=imPM3Power1Running6, imPM1Power2InputBreaker=imPM1Power2InputBreaker, imPM3Power2InputBreaker3=imPM3Power2InputBreaker3, imPM4Power3InputSurgeArrester=imPM4Power3InputSurgeArrester, imPM2Power2InputVoltagePhase1=imPM2Power2InputVoltagePhase1, imPM3Power3InputCurrentPhase3=imPM3Power3InputCurrentPhase3, imPM4BatLeg2Voltage=imPM4BatLeg2Voltage, imPM1Power1OutputBreaker2=imPM1Power1OutputBreaker2, imPm1BatLeg2NominalVoltage=imPm1BatLeg2NominalVoltage, imPM2BatLeg1Manufacturer=imPM2BatLeg1Manufacturer, imPM2Power3OutputCurrentPhase1=imPM2Power3OutputCurrentPhase1, imco3IdentModel=imco3IdentModel, imPM3ContTable=imPM3ContTable, imPM3Power1OutputVoltagePhase2=imPM3Power1OutputVoltagePhase2, imPM3BatLeg1Lifetime=imPM3BatLeg1Lifetime, imPM4BatLeg1Lifetime=imPM4BatLeg1Lifetime, imPM4Power3OutputVoltagePhase2=imPM4Power3OutputVoltagePhase2, imPm2Distrib=imPm2Distrib, imPM4BatLeg1InstallationDate=imPM4BatLeg1InstallationDate, PositiveInteger=PositiveInteger, imPM1ContTestCAPvoltage=imPM1ContTestCAPvoltage, imPM1Power3InputBreaker3=imPM1Power3InputBreaker3, imPm1Power2OutputFrequency=imPm1Power2OutputFrequency, imPM2Power2InputPowerVAphase1=imPM2Power2InputPowerVAphase1, imPM2Power1OutputVoltagePhase1=imPM2Power1OutputVoltagePhase1, imPM2Power2InputPowerVA=imPM2Power2InputPowerVA, imPM1Power3Manufacturer=imPM1Power3Manufacturer, imPm1Power3OutputPowerW=imPm1Power3OutputPowerW, imPM1ContTable=imPM1ContTable, imPM4ContTestCAPstatus=imPM4ContTestCAPstatus, imco3TrapNoDevice=imco3TrapNoDevice, imPm1Power3OutputPowerKW=imPm1Power3OutputPowerKW, imPm1Power1InputPowerKVAphase1=imPm1Power1InputPowerKVAphase1, imPM1Power1InputFuse1=imPM1Power1InputFuse1, imPM2BatLeg2Manufacturer=imPM2BatLeg2Manufacturer, imPM3Power2InputBreaker1=imPM3Power2InputBreaker1, imPM2BatLeg3NominalVoltage=imPM2BatLeg3NominalVoltage, imPM1ContTestCAPduration=imPM1ContTestCAPduration, imPM3Power1InputFuse=imPM3Power1InputFuse, imPM3Power3OutputPowerKVAphase3=imPM3Power3OutputPowerKVAphase3, imPM4Power3Running8=imPM4Power3Running8, imPM4Power1OutputPowerKVAphase1=imPM4Power1OutputPowerKVAphase1, imPM2Power3OutputPowerKVAphase1=imPM2Power3OutputPowerKVAphase1, imPM2BatLeg1Temperature=imPM2BatLeg1Temperature, imPM4Power1Running4=imPM4Power1Running4, imPM4Power3InputCurrentPhase2=imPM4Power3InputCurrentPhase2, imPM3Power2InputPowerKW=imPM3Power2InputPowerKW, imPM4Power1OutputFuse=imPM4Power1OutputFuse, imPM4Power2OutputCurrent=imPM4Power2OutputCurrent, imPM4SystemGENuser1=imPM4SystemGENuser1, imPM2Power1nextServiceDate=imPM2Power1nextServiceDate, imPM3ContTestCAPvoltage=imPM3ContTestCAPvoltage, imPM3BatLeg3InstallationDate=imPM3BatLeg3InstallationDate, imPM2Power3Running3=imPM2Power3Running3, imPM4Power1OutputFuse2=imPM4Power1OutputFuse2, imPM4BatLeg2serNumb=imPM4BatLeg2serNumb)
mibBuilder.exportSymbols("IMCO-BIG-MIB", imPM2Power2InputCurrent=imPM2Power2InputCurrent, imco3TrapAlarmOut1OFF=imco3TrapAlarmOut1OFF, imPM3BatLeg3TimeOnBattery=imPM3BatLeg3TimeOnBattery, imPm1Power1InputVoltagePhase3=imPm1Power1InputVoltagePhase3, imPM4Power3OutputCurrentPhase3=imPM4Power3OutputCurrentPhase3, imPM1Power2Running4=imPM1Power2Running4, imPM3SystemIDManufacturer=imPM3SystemIDManufacturer, imPM2SystemGENuser4=imPM2SystemGENuser4, imPM2Power2InputBreaker2=imPM2Power2InputBreaker2, imPm3Distrib=imPm3Distrib, imPM2Power3InputPowerVA=imPM2Power3InputPowerVA, imPM3SystemIDPMserialNumber=imPM3SystemIDPMserialNumber, imPM4BatLeg3Autonomytime=imPM4BatLeg3Autonomytime, imPM2Power3InputVoltagePhase1=imPM2Power3InputVoltagePhase1, imPM3DistId=imPM3DistId, imPM2Power1Running1=imPM2Power1Running1, imPM3ContTestCAPtemperature=imPM3ContTestCAPtemperature, imPM4SystemGENDoor2=imPM4SystemGENDoor2, imPM4Power2InputFuse=imPM4Power2InputFuse, imPM3Power1OutputCurrentPhase2=imPM3Power1OutputCurrentPhase2, imPM1ContTimeOFF=imPM1ContTimeOFF, imPm1Power3OutputVoltage=imPm1Power3OutputVoltage, imPM4Power2OutputPowerVA=imPM4Power2OutputPowerVA, imPM2Power2Running1=imPM2Power2Running1, imPM3SystemIDType=imPM3SystemIDType, imPM3SystemGEN=imPM3SystemGEN, imPM1Power1OutputFuse2=imPM1Power1OutputFuse2, imPM3Power2InputBreaker2=imPM3Power2InputBreaker2, imPM1BatLeg2LowVoltageDisconnect=imPM1BatLeg2LowVoltageDisconnect, imPM1BatLeg2Fuse=imPM1BatLeg2Fuse)
