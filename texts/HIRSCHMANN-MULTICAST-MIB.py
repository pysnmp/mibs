#
# PySNMP MIB module HIRSCHMANN-MULTICAST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hirschmann/hmPlatform4Mcast.mib
# Produced by pysmi-1.1.12 at Mon Jun  3 11:22:03 2024
# On host fv-az1766-862 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
hmPlatform4, = mibBuilder.importSymbols("HIRSCHMANN-MMP4-BASICL2-MIB", "hmPlatform4")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Gauge32, Bits, iso, IpAddress, Integer32, ModuleIdentity, TimeTicks, Counter64, MibIdentifier, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Gauge32", "Bits", "iso", "IpAddress", "Integer32", "ModuleIdentity", "TimeTicks", "Counter64", "MibIdentifier", "Counter32", "Unsigned32")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
hmPlatform4Multicast = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 15, 4))
hmPlatform4Multicast.setRevisions(('2006-02-03 12:00', '2002-05-08 14:18',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hmPlatform4Multicast.setRevisionsDescriptions(('Revisions made for new release.', 'Initial revision.',))
if mibBuilder.loadTexts: hmPlatform4Multicast.setLastUpdated('200602031200Z')
if mibBuilder.loadTexts: hmPlatform4Multicast.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hmPlatform4Multicast.setContactInfo('Customer Support\r\n           Postal: \r\n           Hirschmann Automation and Control GmbH\r\n           Stuttgarter Str. 45-51\r\n           72654 Neckartenzlingen\r\n           Germany\r\n           Tel: +49 7127 14 1981\r\n           Web: http://www.hicomcenter.com/\r\n           E-Mail: hicomcenter@hirschmann.com')
if mibBuilder.loadTexts: hmPlatform4Multicast.setDescription('The Hirschmann Private Platform4 Multicast MIB definitions for Platform devices.')
hmAgentMulticastIGMPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 4, 1))
hmAgentMulticastIGMPAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastIGMPAdminMode.setStatus('current')
if mibBuilder.loadTexts: hmAgentMulticastIGMPAdminMode.setDescription('This enables or disables IGMP on the system.\r\n                      Enabling IGMP enables also IGMP-Snooping.')
hmAgentMulticastIGMPInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 4, 1, 2), )
if mibBuilder.loadTexts: hmAgentMulticastIGMPInterfaceTable.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastIGMPInterfaceTable.setDescription('Provides Per-Interface configuration of IGMP.')
hmAgentMulticastIGMPInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 4, 1, 2, 1), ).setIndexNames((0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentMulticastIGMPInterfaceIfIndex"))
if mibBuilder.loadTexts: hmAgentMulticastIGMPInterfaceEntry.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastIGMPInterfaceEntry.setDescription('Information about a table entry.')
hmAgentMulticastIGMPInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentMulticastIGMPInterfaceIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastIGMPInterfaceIfIndex.setDescription('Identifies the external interface number.')
hmAgentMulticastIGMPInterfaceAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastIGMPInterfaceAdminMode.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastIGMPInterfaceAdminMode.setDescription('This enables or disables IGMP on this interface.')
hmAgentMulticastIGMPSoftwareDSCP = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 1, 210), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(48)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastIGMPSoftwareDSCP.setStatus('current')
if mibBuilder.loadTexts: hmAgentMulticastIGMPSoftwareDSCP.setDescription('Configures the DSCP value that is written into\r\n                      multicast packets that are routed in software.\r\n                      If set to 64, the DSCP value of incoming packets\r\n                      is not changed.')
hmAgentMulticastPIMConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 4, 2))
hmAgentMulticastPIMConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sparse", 1), ("dense", 2))).clone('dense')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMConfigMode.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastPIMConfigMode.setDescription('This controls which PIM mode configuration the PIM-MIB displays.')
hmAgentMulticastPIMPruneHoldtime = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 64800)).clone(210)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMPruneHoldtime.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastPIMPruneHoldtime.setDescription('This sets the holdtime for PIMDM Prunes and Asserts.')
hmAgentMulticastPIMSMConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 4, 3))
hmAgentMulticastPIMSMAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMSMAdminMode.setStatus('current')
if mibBuilder.loadTexts: hmAgentMulticastPIMSMAdminMode.setDescription('This enables or disables PIM Sparse Mode on the system.')
hmAgentMulticastPIMSMDataThresholdRate = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMSMDataThresholdRate.setStatus('current')
if mibBuilder.loadTexts: hmAgentMulticastPIMSMDataThresholdRate.setDescription('Specifies the minimum rate in Kbits/sec for the last hop router to initiate switching to the shortest path.')
hmAgentMulticastPIMSMRegThresholdRate = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMSMRegThresholdRate.setStatus('current')
if mibBuilder.loadTexts: hmAgentMulticastPIMSMRegThresholdRate.setDescription('Specifies the minimum rate in Kbits/sec for the RP to switch to the shortest path.')
hmAgentMulticastPIMSMStaticRPTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 4), )
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPTable.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPTable.setDescription('Provides Per-Interface configuration of PIM-SM.')
hmAgentMulticastPIMSMStaticRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 4, 1), ).setIndexNames((0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentMulticastPIMSMStaticRPIpAddr"), (0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentMulticastPIMSMStaticRPGroupIpAddr"), (0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentMulticastPIMSMStaticRPGroupIpMask"))
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPEntry.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPEntry.setDescription('Information about a table entry.')
hmAgentMulticastPIMSMStaticRPIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPIpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPIpAddr.setDescription('IP Address of the RP.')
hmAgentMulticastPIMSMStaticRPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPGroupIpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPGroupIpAddr.setDescription('Group IP Address supported by the RP.')
hmAgentMulticastPIMSMStaticRPGroupIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 4, 1, 3), IpAddress())
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPGroupIpMask.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPGroupIpMask.setDescription('Group mask for the group IP Address.')
hmAgentMulticastPIMSMStaticRPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPStatus.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastPIMSMStaticRPStatus.setDescription('Status of this entry in the Static RP Table.\r\n                     \r\n                     Allowed values are:\r\n                     \r\n                     active(1)      - This entry is active\r\n                     destroy(6)     - Setting an entry to this value removes the \r\n                                      entry from the table.')
hmAgentMulticastPIMSMInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 5), )
if mibBuilder.loadTexts: hmAgentMulticastPIMSMInterfaceTable.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastPIMSMInterfaceTable.setDescription('Provides Per-Interface configuration of PIM-SM.')
hmAgentMulticastPIMSMInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 5, 1), ).setIndexNames((0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentMulticastPIMSMInterfaceIndex"))
if mibBuilder.loadTexts: hmAgentMulticastPIMSMInterfaceEntry.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastPIMSMInterfaceEntry.setDescription('Allows configuration of parameters not provided in the \r\n                      standard PIM-MIB.')
hmAgentMulticastPIMSMInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hmAgentMulticastPIMSMInterfaceIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastPIMSMInterfaceIndex.setDescription('Routing Interface associated with this PIM SM configuration entry.')
hmAgentMulticastPIMSMInterfaceCBSRHashMaskLength = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMSMInterfaceCBSRHashMaskLength.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastPIMSMInterfaceCBSRHashMaskLength.setDescription('The BSR hash mask length to be advertised in bootstrap messages if \r\n                     this interface is elected as the bootstrap router. This hash mask \r\n                     length will be used in the hash algorith for selecting the RP for \r\n                     a particular group.')
hmAgentMulticastPIMSMInterfaceCRPPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMSMInterfaceCRPPreference.setStatus('obsolete')
if mibBuilder.loadTexts: hmAgentMulticastPIMSMInterfaceCRPPreference.setDescription('The preference value for the local interface as a Candidate \r\n                     Rendezvous Point. The value of -1 is used to indicate that the local \r\n                     interface is not a Candidate RP interface.')
hmAgentMulticastPIMDMConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 4, 4))
hmAgentMulticastPIMDMAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastPIMDMAdminMode.setStatus('current')
if mibBuilder.loadTexts: hmAgentMulticastPIMDMAdminMode.setDescription('This enables or disables PIM Dense Mode on the system.')
hmAgentMulticastRoutingConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 4, 5))
hmAgentMulticastRoutingAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastRoutingAdminMode.setStatus('current')
if mibBuilder.loadTexts: hmAgentMulticastRoutingAdminMode.setDescription('This enables or disables Multicast Routing Mode on the system.')
hmAgentMulticastDVMRPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 4, 6))
hmAgentMulticastDVMRPAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentMulticastDVMRPAdminMode.setStatus('current')
if mibBuilder.loadTexts: hmAgentMulticastDVMRPAdminMode.setDescription('This enables or disables DVMRP on the system.')
hmAgentSnmpTrapFlagsConfigGroupMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 4, 7))
hmAgentSnmpDVMRPTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpDVMRPTrapFlag.setStatus('current')
if mibBuilder.loadTexts: hmAgentSnmpDVMRPTrapFlag.setDescription('This enables or disables DVMRP Traps on the system.')
hmAgentSnmpPIMTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 4, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpPIMTrapFlag.setStatus('current')
if mibBuilder.loadTexts: hmAgentSnmpPIMTrapFlag.setDescription('This enables or disables PIM Traps on the system.')
hmAgentIpStaticMRouteTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 4, 8), )
if mibBuilder.loadTexts: hmAgentIpStaticMRouteTable.setStatus('current')
if mibBuilder.loadTexts: hmAgentIpStaticMRouteTable.setDescription('The table listing the Static Multicast Route Entries.')
hmAgentIpStaticMRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1), ).setIndexNames((0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentIpStaticMRouteSrcAddressType"), (0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentIpStaticMRouteSrcIpAddr"), (0, "HIRSCHMANN-MULTICAST-MIB", "hmAgentIpStaticMRouteSrcNetMask"))
if mibBuilder.loadTexts: hmAgentIpStaticMRouteEntry.setStatus('current')
if mibBuilder.loadTexts: hmAgentIpStaticMRouteEntry.setDescription('Information about a table entry.')
hmAgentIpStaticMRouteSrcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hmAgentIpStaticMRouteSrcAddressType.setStatus('current')
if mibBuilder.loadTexts: hmAgentIpStaticMRouteSrcAddressType.setDescription('The address type of this Multicast data source.')
hmAgentIpStaticMRouteSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1, 2), InetAddress())
if mibBuilder.loadTexts: hmAgentIpStaticMRouteSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: hmAgentIpStaticMRouteSrcIpAddr.setDescription('The address of the Multicast data source.')
hmAgentIpStaticMRouteSrcNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: hmAgentIpStaticMRouteSrcNetMask.setStatus('current')
if mibBuilder.loadTexts: hmAgentIpStaticMRouteSrcNetMask.setDescription('The network mask for the IP address of the Multicast data source.')
hmAgentIpStaticMRouteRpfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentIpStaticMRouteRpfIpAddr.setStatus('current')
if mibBuilder.loadTexts: hmAgentIpStaticMRouteRpfIpAddr.setDescription('The RPF Address.')
hmAgentIpStaticMRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1, 5), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentIpStaticMRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: hmAgentIpStaticMRouteIfIndex.setDescription('The interface index is valid only for IPv6 and only if RPF address is link-local.')
hmAgentIpStaticMRoutePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentIpStaticMRoutePreference.setStatus('current')
if mibBuilder.loadTexts: hmAgentIpStaticMRoutePreference.setDescription('The preference of this route entry.')
hmAgentIpStaticMRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 4, 8, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentIpStaticMRouteStatus.setStatus('current')
if mibBuilder.loadTexts: hmAgentIpStaticMRouteStatus.setDescription('The preference of this route entry.')
mibBuilder.exportSymbols("HIRSCHMANN-MULTICAST-MIB", hmAgentMulticastIGMPInterfaceTable=hmAgentMulticastIGMPInterfaceTable, hmAgentIpStaticMRoutePreference=hmAgentIpStaticMRoutePreference, hmAgentMulticastPIMSMInterfaceCBSRHashMaskLength=hmAgentMulticastPIMSMInterfaceCBSRHashMaskLength, hmAgentMulticastPIMSMInterfaceTable=hmAgentMulticastPIMSMInterfaceTable, hmAgentMulticastPIMSMDataThresholdRate=hmAgentMulticastPIMSMDataThresholdRate, hmAgentMulticastPIMSMInterfaceCRPPreference=hmAgentMulticastPIMSMInterfaceCRPPreference, hmAgentMulticastPIMSMStaticRPGroupIpMask=hmAgentMulticastPIMSMStaticRPGroupIpMask, hmAgentIpStaticMRouteEntry=hmAgentIpStaticMRouteEntry, hmAgentMulticastPIMSMConfigGroup=hmAgentMulticastPIMSMConfigGroup, PYSNMP_MODULE_ID=hmPlatform4Multicast, hmAgentMulticastPIMSMRegThresholdRate=hmAgentMulticastPIMSMRegThresholdRate, hmAgentMulticastPIMDMConfigGroup=hmAgentMulticastPIMDMConfigGroup, hmAgentSnmpTrapFlagsConfigGroupMulticast=hmAgentSnmpTrapFlagsConfigGroupMulticast, hmAgentMulticastPIMSMStaticRPEntry=hmAgentMulticastPIMSMStaticRPEntry, hmAgentIpStaticMRouteStatus=hmAgentIpStaticMRouteStatus, hmPlatform4Multicast=hmPlatform4Multicast, hmAgentMulticastPIMDMAdminMode=hmAgentMulticastPIMDMAdminMode, hmAgentMulticastIGMPConfigGroup=hmAgentMulticastIGMPConfigGroup, hmAgentIpStaticMRouteTable=hmAgentIpStaticMRouteTable, hmAgentMulticastPIMSMStaticRPTable=hmAgentMulticastPIMSMStaticRPTable, hmAgentMulticastPIMSMStaticRPIpAddr=hmAgentMulticastPIMSMStaticRPIpAddr, hmAgentMulticastIGMPSoftwareDSCP=hmAgentMulticastIGMPSoftwareDSCP, hmAgentMulticastPIMConfigGroup=hmAgentMulticastPIMConfigGroup, hmAgentMulticastPIMConfigMode=hmAgentMulticastPIMConfigMode, hmAgentMulticastIGMPAdminMode=hmAgentMulticastIGMPAdminMode, hmAgentMulticastRoutingConfigGroup=hmAgentMulticastRoutingConfigGroup, hmAgentMulticastPIMSMStaticRPGroupIpAddr=hmAgentMulticastPIMSMStaticRPGroupIpAddr, hmAgentMulticastIGMPInterfaceIfIndex=hmAgentMulticastIGMPInterfaceIfIndex, hmAgentMulticastPIMSMInterfaceEntry=hmAgentMulticastPIMSMInterfaceEntry, hmAgentSnmpPIMTrapFlag=hmAgentSnmpPIMTrapFlag, hmAgentIpStaticMRouteSrcNetMask=hmAgentIpStaticMRouteSrcNetMask, hmAgentMulticastDVMRPAdminMode=hmAgentMulticastDVMRPAdminMode, hmAgentMulticastIGMPInterfaceAdminMode=hmAgentMulticastIGMPInterfaceAdminMode, hmAgentIpStaticMRouteSrcAddressType=hmAgentIpStaticMRouteSrcAddressType, hmAgentMulticastIGMPInterfaceEntry=hmAgentMulticastIGMPInterfaceEntry, hmAgentMulticastPIMSMAdminMode=hmAgentMulticastPIMSMAdminMode, hmAgentIpStaticMRouteIfIndex=hmAgentIpStaticMRouteIfIndex, hmAgentMulticastRoutingAdminMode=hmAgentMulticastRoutingAdminMode, hmAgentSnmpDVMRPTrapFlag=hmAgentSnmpDVMRPTrapFlag, hmAgentIpStaticMRouteRpfIpAddr=hmAgentIpStaticMRouteRpfIpAddr, hmAgentMulticastPIMSMInterfaceIndex=hmAgentMulticastPIMSMInterfaceIndex, hmAgentIpStaticMRouteSrcIpAddr=hmAgentIpStaticMRouteSrcIpAddr, hmAgentMulticastDVMRPConfigGroup=hmAgentMulticastDVMRPConfigGroup, hmAgentMulticastPIMSMStaticRPStatus=hmAgentMulticastPIMSMStaticRPStatus, hmAgentMulticastPIMPruneHoldtime=hmAgentMulticastPIMPruneHoldtime)
