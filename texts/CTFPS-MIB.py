#
# PySNMP MIB module CTFPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTFPS-MIB
# Produced by pysmi-1.1.12 at Thu May 30 02:16:05 2024
# On host fv-az1567-87 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ctFPS, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctFPS")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, TimeTicks, Counter64, MibIdentifier, iso, Integer32, Bits, IpAddress, Gauge32, Unsigned32, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "Counter64", "MibIdentifier", "iso", "Integer32", "Bits", "IpAddress", "Gauge32", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fpsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1))
fpsSystemSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsSystemSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: fpsSystemSlotNum.setDescription('The chassis slot of this FPS system.')
fpsSystemMode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridge", 1), ("switch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsSystemMode.setStatus('mandatory')
if mibBuilder.loadTexts: fpsSystemMode.setDescription('The current operation mode of the FPS.')
fpsMaxPktRam = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsMaxPktRam.setStatus('mandatory')
if mibBuilder.loadTexts: fpsMaxPktRam.setDescription('The maximum number of packet buffers supported by the system.')
fpsFreePktRam = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsFreePktRam.setStatus('mandatory')
if mibBuilder.loadTexts: fpsFreePktRam.setDescription('The number of packet buffers currently free in the system.')
fpsOperTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsOperTime.setStatus('mandatory')
if mibBuilder.loadTexts: fpsOperTime.setDescription('Indicates the amount of time the FPS has been operational.')
fpsInPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: fpsInPkts.setDescription('The number of packets received by the FPS since the last time\n            the FPS became operational.')
fpsOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: fpsOutPkts.setDescription('The number of packets forwarded by the FPS.')
fpsInOctets = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: fpsInOctets.setDescription('The number of octets received by the FPS.')
fpsOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: fpsOutOctets.setDescription('The number of octets forwarded by the FPS.')
fpsPort = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2))
fpsActivePorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsActivePorts.setStatus('mandatory')
if mibBuilder.loadTexts: fpsActivePorts.setDescription('The number of active FPS ports.')
fpsMaxPortNum = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsMaxPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: fpsMaxPortNum.setDescription('The maximum number of ports that this FPS system can support.')
fpsPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3), )
if mibBuilder.loadTexts: fpsPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortTable.setDescription('A list of status and configuration information on active\n           FPS ports in the system')
fpsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1), ).setIndexNames((0, "CTFPS-MIB", "fpsPortNum"))
if mibBuilder.loadTexts: fpsPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortEntry.setDescription('A collection of fps port status and configurations.')
fpsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortNum.setDescription(' FPS port number.  A unique value in the range between 1 and\n           fpsActivePorts.')
fpsPortIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortIfNum.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortIfNum.setDescription(' This object uniquely identifies the interface associated\n           with the FPS port.  This interface number is the same as\n           the MIBII interface number, ifIndex, defined in RFC1213.')
fpsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ether", 1), ("tokenRing", 2), ("inb", 3), ("fddi", 4), ("host", 5), ("atm", 6), ("wan", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortType.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortType.setDescription('Media type of this FPS port.')
fpsPortClusterNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortClusterNum.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortClusterNum.setDescription('FPS cluster associated with this FPS port.  Cluster numbers\n           are used to allocate FPS bandwidth for this port.')
fpsPortTotalAvailQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortTotalAvailQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortTotalAvailQueDepth.setDescription("Que depth assigned to this FPS port's queue.  This number\n           represents the hardware limit for the queue and can be no\n           greater than fpsPortMaxQueDepth for this FPS port.")
fpsPortMaxQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortMaxQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortMaxQueDepth.setDescription('Maximum depth this queue can be set to for this FPS port.\n           This number may be equal or less than the hardware limit.')
fpsPortCurrentQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortCurrentQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortCurrentQueDepth.setDescription('The actual queue depth on this FPS port.  This value is from\n           (fpsPortTotalAvailQueDepth - the number of queue entries on the\n           queue at any one time).')
fpsPortBandwidthRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortBandwidthRequested.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortBandwidthRequested.setDescription('Amount of bandwidth (in Mb/s) that this port is\n           requesting from the FPS')
fpsPortBandwidthAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortBandwidthAllocated.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortBandwidthAllocated.setDescription('Estimate of the actual bandwidth this port is receiving\n           (in Mb/s) from the FPS. This value may be lower or higher\n           than the required bandwidth.')
fpsPortXmitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortXmitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortXmitStatus.setDescription("Current state of this port's transmit enable bit in\n           the Transmit Enable Register (LUFW).")
fpsPortFwdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortFwdStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortFwdStatus.setDescription("Current state of this port's forward enable bit\n           in the Forward Enable Register (LUFW).  If enabled,\n           the FPS will allow packets received on this port to\n           be forwarded through the system")
fpsPortLearningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortLearningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortLearningStatus.setDescription("Current state of this port's bit in the Learn Enable\n           Mask (LUFW).  If enabled the FPS will allow dynamic\n           learning on frames received on this port.")
fpsPortUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortUnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortUnknownStatus.setDescription("Current state of this port's bit in the Unkown Mask\n           (LUFW). If enabled the FPS will forward packets that\n           are unknown to this port.")
fpsPortBroadcastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortBroadcastStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortBroadcastStatus.setDescription("Current state of this port's bit in the Broadcast\n           Mask (LUFW).  If enabled the FPS will forward broadcast\n           packets to this port.")
fpsPortViolationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortViolationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortViolationStatus.setDescription("Current state of this port's bit in the Violation\n           Mask (LUFW).  If enabled the FPS will forward packets\n           that are in violation to this port.  Note:  This value\n           is only valid in connection mode.")
fpsPortCopyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortCopyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortCopyStatus.setDescription("Current state of this port's bit in the Copy\n           Mask (LUFW).  If enabled the FPS will copy packets\n           to this port whose BAF entry has the 'copyl' bit set.")
fpsPortStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortStatsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortStatsStatus.setDescription("Current state of this port's bit in the Statistics\n           Mask (LUFW).  If enabled the FPS will collect statistics\n           on this port.  These stats are found in the system table.")
fpsPortSpecialPortsSMT = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortSpecialPortsSMT.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortSpecialPortsSMT.setDescription('This object represents whether or not this port has been\n           selected to receive SMT multicast and broadcast frames')
fpsPortSpecialPortsHost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortSpecialPortsHost.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortSpecialPortsHost.setDescription('This object represents whether or not this port has been\n           selected to receive to-host frames')
fpsPortSpecialPortsError = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortSpecialPortsError.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortSpecialPortsError.setDescription('This object represents whether or not this port has been\n           selected to receive errored frames')
fpsCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3))
fpsActiveClusters = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsActiveClusters.setStatus('mandatory')
if mibBuilder.loadTexts: fpsActiveClusters.setDescription('Number of valid FPS clusters in the system.')
fpsClusterTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3, 2), )
if mibBuilder.loadTexts: fpsClusterTable.setStatus('mandatory')
if mibBuilder.loadTexts: fpsClusterTable.setDescription('A list of fps cluster entries')
fpsClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3, 2, 1), ).setIndexNames((0, "CTFPS-MIB", "fpsClusterNumber"))
if mibBuilder.loadTexts: fpsClusterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fpsClusterEntry.setDescription('A collection of fps cluster entries.')
fpsClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsClusterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fpsClusterNumber.setDescription('The value of this object uniquely identifies the cluster\n           table entry.  Cluster numbers are mapped to FPS ports for\n           bandwidth allocation.')
fpsClusterType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ethernet", 1), ("token-ring", 2), ("inb", 3), ("fnb", 4), ("host", 5), ("atm", 6), ("wan", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsClusterType.setStatus('mandatory')
if mibBuilder.loadTexts: fpsClusterType.setDescription('Media type of the FPS port that is attached to this cluster\n           number.')
fpsClusterRoundRobin = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpsClusterRoundRobin.setStatus('mandatory')
if mibBuilder.loadTexts: fpsClusterRoundRobin.setDescription('Whether a cluster is signed up for RoundRobin arbitration or\n           not.  Round Robin clusters will be given unused time slices.')
fpsPortsPerCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpsPortsPerCluster.setStatus('mandatory')
if mibBuilder.loadTexts: fpsPortsPerCluster.setDescription('Number of FPS ports that share this cluster number for FPS\n           bandwidth.')
fpsDMAF = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 4))
dmafBandWidth3SecUtil = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmafBandWidth3SecUtil.setStatus('mandatory')
if mibBuilder.loadTexts: dmafBandWidth3SecUtil.setDescription('Estimate of total FPS bandwidth utilized over\n           the last three seconds as a function of DMAFTimeSlices.\n           The counter represents hundreths of percent utilization.\n           For example a count of 25 would represent .25 percent\n           utilization.')
fpsBAF = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 5))
bafEntryCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bafEntryCount.setStatus('mandatory')
if mibBuilder.loadTexts: bafEntryCount.setDescription('The number of entries currently used in this BAF.\n           This number shall include static as well as dynamic entries')
bafMaxEntry = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bafMaxEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bafMaxEntry.setDescription('The maximum number of entries this BAF can hold per hardware.\n           This includes static as well as dynamic entries')
baf3SecUtil = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 11, 2, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baf3SecUtil.setStatus('mandatory')
if mibBuilder.loadTexts: baf3SecUtil.setDescription('Percentage of time that the BAF was utilized\n           over the last three seconds. The Counter represents\n           hundreths of percent. For example a value of 20 would\n           represent .20 percent.')
mibBuilder.exportSymbols("CTFPS-MIB", fpsSystem=fpsSystem, fpsPortXmitStatus=fpsPortXmitStatus, baf3SecUtil=baf3SecUtil, fpsPortBandwidthRequested=fpsPortBandwidthRequested, fpsClusterRoundRobin=fpsClusterRoundRobin, fpsMaxPortNum=fpsMaxPortNum, fpsPortBandwidthAllocated=fpsPortBandwidthAllocated, fpsClusterNumber=fpsClusterNumber, bafEntryCount=bafEntryCount, fpsPortClusterNum=fpsPortClusterNum, fpsSystemMode=fpsSystemMode, fpsOutOctets=fpsOutOctets, fpsBAF=fpsBAF, fpsPortTable=fpsPortTable, fpsFreePktRam=fpsFreePktRam, fpsOperTime=fpsOperTime, fpsDMAF=fpsDMAF, dmafBandWidth3SecUtil=dmafBandWidth3SecUtil, fpsClusterEntry=fpsClusterEntry, fpsPortViolationStatus=fpsPortViolationStatus, fpsPortEntry=fpsPortEntry, fpsPortType=fpsPortType, fpsPortLearningStatus=fpsPortLearningStatus, fpsActivePorts=fpsActivePorts, fpsClusterTable=fpsClusterTable, fpsCluster=fpsCluster, bafMaxEntry=bafMaxEntry, fpsPortUnknownStatus=fpsPortUnknownStatus, fpsInOctets=fpsInOctets, fpsMaxPktRam=fpsMaxPktRam, fpsPortBroadcastStatus=fpsPortBroadcastStatus, fpsPortSpecialPortsHost=fpsPortSpecialPortsHost, fpsSystemSlotNum=fpsSystemSlotNum, fpsPortIfNum=fpsPortIfNum, fpsPort=fpsPort, fpsPortNum=fpsPortNum, fpsOutPkts=fpsOutPkts, fpsPortMaxQueDepth=fpsPortMaxQueDepth, fpsPortTotalAvailQueDepth=fpsPortTotalAvailQueDepth, fpsPortCurrentQueDepth=fpsPortCurrentQueDepth, fpsPortCopyStatus=fpsPortCopyStatus, fpsPortFwdStatus=fpsPortFwdStatus, fpsPortSpecialPortsSMT=fpsPortSpecialPortsSMT, fpsInPkts=fpsInPkts, fpsClusterType=fpsClusterType, fpsPortSpecialPortsError=fpsPortSpecialPortsError, fpsActiveClusters=fpsActiveClusters, fpsPortsPerCluster=fpsPortsPerCluster, fpsPortStatsStatus=fpsPortStatsStatus)
