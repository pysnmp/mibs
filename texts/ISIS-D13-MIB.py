#
# PySNMP MIB module ISIS-D13-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/internet-drafts/ISIS-D13-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:17:10 2024
# On host fv-az692-788 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, iso, Counter64, ObjectIdentity, Counter32, IpAddress, experimental, MibIdentifier, NotificationType, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "iso", "Counter64", "ObjectIdentity", "Counter32", "IpAddress", "experimental", "MibIdentifier", "NotificationType", "Gauge32", "Bits")
TruthValue, DisplayString, TestAndIncr, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TestAndIncr", "RowStatus", "TextualConvention")
isisD13MIB = ModuleIdentity((1, 3, 6, 1, 3, 37))
if mibBuilder.loadTexts: isisD13MIB.setLastUpdated('200401191200Z')
if mibBuilder.loadTexts: isisD13MIB.setOrganization('IETF IS-IS for IP Internets Working Group')
if mibBuilder.loadTexts: isisD13MIB.setContactInfo('Jeff Parker\n             Axiowave Networks\n             200 Nickerson Rd.\n             Marlborough, MA 01752\n\n             jparker@axiowave.com')
if mibBuilder.loadTexts: isisD13MIB.setDescription('This document describes a management information base for\n\n\n\n             the IS-IS Routing protocol, as described in ISO 10589,\n             when it is used to construct routing tables for IP networks,\n             as described in RFC 1195.\n\n             This document defines an experimental portion of the\n             Management Information Base (MIB) for use with network\n             management protocols in the Internet community.\n\n             This document is based on a 1994 IETF draft by Chris Gunner.\n             This version has been modified to include MIB-II syntax, to\n             exclude portions of the protocol that are not relevant to IP,\n             and to add management support for current practice.')
isisD13Objects = MibIdentifier((1, 3, 6, 1, 3, 37, 1))
isisD13Notifications = MibIdentifier((1, 3, 6, 1, 3, 37, 2))
isisD13Conformance = MibIdentifier((1, 3, 6, 1, 3, 37, 3))
isisD13System = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 1))
if mibBuilder.loadTexts: isisD13System.setStatus('current')
if mibBuilder.loadTexts: isisD13System.setDescription('The object describes system wide attributes.')
isisD13SysLevel = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 2))
if mibBuilder.loadTexts: isisD13SysLevel.setStatus('current')
if mibBuilder.loadTexts: isisD13SysLevel.setDescription('This object describes attributes associated with\n             the domain or with the area.')
isisD13Circ = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 3))
if mibBuilder.loadTexts: isisD13Circ.setStatus('current')
if mibBuilder.loadTexts: isisD13Circ.setDescription('This object describes attributes associated with\n             one Circuit')
isisD13CircLevelValues = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 4))
if mibBuilder.loadTexts: isisD13CircLevelValues.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelValues.setDescription('This object describes attributes associated with\n             area or domain relevant within a Circuit.')
isisD13Counters = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 5))
if mibBuilder.loadTexts: isisD13Counters.setStatus('current')
if mibBuilder.loadTexts: isisD13Counters.setDescription('This object collects system and circuit counters')
isisD13ISAdj = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 6))
if mibBuilder.loadTexts: isisD13ISAdj.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdj.setDescription('This object describes attributes associated with an\n             adjacent Protocol Peer.')
isisD13ReachAddr = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 7))
if mibBuilder.loadTexts: isisD13ReachAddr.setStatus('current')
if mibBuilder.loadTexts: isisD13ReachAddr.setDescription('This object describes attributes associated with\n             a configured address')
isisD13IPReachAddr = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 8))
if mibBuilder.loadTexts: isisD13IPReachAddr.setStatus('current')
if mibBuilder.loadTexts: isisD13IPReachAddr.setDescription('This object describes attributes associated with\n             IP routes learned by configuration or through another\n             protocol.')
isisD13LSPDataBase = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 9))
if mibBuilder.loadTexts: isisD13LSPDataBase.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPDataBase.setDescription('This object describes the collection of Link State PDUs\n             known to the system.')
isisD13Notification = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 10))
if mibBuilder.loadTexts: isisD13Notification.setStatus('current')
if mibBuilder.loadTexts: isisD13Notification.setDescription('Objects included in Notifications.')
class OSINSAddress(TextualConvention, OctetString):
    description = 'OSI Network Service Address, e.g. NSAP, SNPA, or Network\n             Entity Title'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

class SystemID(TextualConvention, OctetString):
    description = 'A system ID.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class LinkStatePDUID(TextualConvention, OctetString):
    description = 'A Link State PDU Identifier.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), )
class AdminState(TextualConvention, Integer32):
    description = 'Type used in enabling and disabling a row.\n             Values match those in RFC 2863.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class LSPBuffSize(TextualConvention, Integer32):
    description = 'Integer sub range for LSP size.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(512, 16000)

class LevelState(TextualConvention, Integer32):
    description = 'States of the IS-IS protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("off", 1), ("on", 2), ("waiting", 3), ("overloaded", 4))

class SupportedProtocol(TextualConvention, Integer32):
    description = 'Types of network protocol supported by Integrated IS-IS.\n             The values for ISO8473 and IP are those registered for\n             these protocols in ISO TR9577.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(129, 142, 204))
    namedValues = NamedValues(("iso8473", 129), ("ipV6", 142), ("ip", 204))

class DefaultMetric(TextualConvention, Integer32):
    description = "Integer sub-range for default metric for single hop.\n             ISO 10589 provides for 4 types of metric.  Only the\n             'default' metric is used in practice."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

class WideMetric(TextualConvention, Unsigned32):
    description = 'Wide Metric for IS Neighbors.  ISO 10589 provides a 6 bit metric.\n             Traffic Engineering extensions provide 24 bit metrics.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 16777215)

class FullMetric(TextualConvention, Unsigned32):
    description = 'Full Metric for IP Routes.  Traffic Engineering extensions\n             provide 32 bit metrics.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 16777215)

class MetricType(TextualConvention, Integer32):
    description = 'Is this an Internal or External Metric?'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("internal", 1), ("external", 2))

class MetricStyle(TextualConvention, Integer32):
    description = 'Do we use 1195 style Metrics or wide metrics.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("narrow", 1), ("wide", 2), ("both", 3))

class ISLevel(TextualConvention, Integer32):
    description = 'Identifies a level.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("area", 1), ("domain", 2))

class IsisPDUHeader(TextualConvention, OctetString):
    description = 'A block to contain the header from a PDU.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

class CircuitID(TextualConvention, OctetString):
    description = 'ID for a circuit.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(7, 7)
    fixedLength = 7

class ISPriority(TextualConvention, Integer32):
    description = 'Integer sub-range for IS-IS priority.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 127)

class Unsigned16TC(TextualConvention, Unsigned32):
    description = 'An Unsigned32 further restricted to 16 Bits. Note that\n             the ASN.1 BER encoding may still require 24 Bits for\n             some values.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class Unsigned8TC(TextualConvention, Unsigned32):
    description = 'An Unsigned32 further restricted to 8 Bits. Note that\n             the ASN.1 BER encoding may still require 16 Bits for\n             some values.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 255)

isisD13SysTable = MibTable((1, 3, 6, 1, 3, 37, 1, 1, 1), )
if mibBuilder.loadTexts: isisD13SysTable.setStatus('current')
if mibBuilder.loadTexts: isisD13SysTable.setDescription('The set of instance of the Integrated IS-IS\n             protocol existing on the system.')
isisD13SysEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 1, 1, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"))
if mibBuilder.loadTexts: isisD13SysEntry.setReference('{ISIS.poi cLNSISISBasic-P (1)}')
if mibBuilder.loadTexts: isisD13SysEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13SysEntry.setDescription('Each row defines information specific to a single\n             instance of the IS-IS protocol existing on the system.')
isisD13SysInstance = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: isisD13SysInstance.setStatus('current')
if mibBuilder.loadTexts: isisD13SysInstance.setDescription('The unique identifier of the Integrated IS-IS\n             instance to which this row corresponds.\n             This object follows the index behavior.')
isisD13SysVersion = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 2), DisplayString().clone('1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13SysVersion.setReference('{ISIS.aoi version (1)}')
if mibBuilder.loadTexts: isisD13SysVersion.setStatus('current')
if mibBuilder.loadTexts: isisD13SysVersion.setDescription('The version number of the IS-IS protocol which this\n             instance implements.')
isisD13SysType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2), ("level1L2IS", 3))).clone('level1L2IS')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysType.setReference('{ISIS.aoi iSType (2)}')
if mibBuilder.loadTexts: isisD13SysType.setStatus('current')
if mibBuilder.loadTexts: isisD13SysType.setDescription('The type of this instance of the Integrated\n             IS-IS protocol. This object follows the\n             replaceOnlyWhileDisabled behavior.')
isisD13SysID = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 4), SystemID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysID.setReference('{ISIS.aoi systemId (119)}')
if mibBuilder.loadTexts: isisD13SysID.setStatus('current')
if mibBuilder.loadTexts: isisD13SysID.setDescription('The ID for this instance of the Integrated IS-IS\n             protocol. This value is appended to each of the\n             area addresses to form the Network Entity Titles.\n             The derivation of a value for this object is\n             implementation-specific.  Some implementations may\n             automatically assign values and not permit an\n             SNMP write, while others may require the value\n             to be set manually.')
isisD13SysMaxPathSplits = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysMaxPathSplits.setReference('{ISIS.aoi maximumPathSplits (3)}')
if mibBuilder.loadTexts: isisD13SysMaxPathSplits.setStatus('current')
if mibBuilder.loadTexts: isisD13SysMaxPathSplits.setDescription('Maximum number of paths with equal routing metric value\n             which it is permitted to split between. This object\n             follows the replaceOnlyWhileDisabled behavior.')
isisD13SysMaxLSPGenInt = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65235)).clone(900)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysMaxLSPGenInt.setReference('{ISIS.aoi maximumLSPGenerationInterval (6)}')
if mibBuilder.loadTexts: isisD13SysMaxLSPGenInt.setStatus('current')
if mibBuilder.loadTexts: isisD13SysMaxLSPGenInt.setDescription('Maximum interval, in seconds, between generated LSPs\n             by this instance of the protocol. This object follows\n             the resettingTimer behavior.\n             Should be at least 300 seconds less than isisD13SysMaxAge.')
isisD13SysPollESHelloRate = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 7), Unsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysPollESHelloRate.setReference('{ISIS.aoi pollESHelloRate (13)}')
if mibBuilder.loadTexts: isisD13SysPollESHelloRate.setStatus('current')
if mibBuilder.loadTexts: isisD13SysPollESHelloRate.setDescription('The value, in seconds, to be used for the suggested ES\n             configuration timer in ISH PDUs when soliciting the ES\n             configuration.')
isisD13SysWaitTime = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 8), Unsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysWaitTime.setReference('{ISIS.aoi waitingTime (15)}')
if mibBuilder.loadTexts: isisD13SysWaitTime.setStatus('current')
if mibBuilder.loadTexts: isisD13SysWaitTime.setDescription('Number of seconds to delay in waiting state before\n             entering on state. This object follows the resettingTimer\n             behavior.')
isisD13SysAdminState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 9), AdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysAdminState.setStatus('current')
if mibBuilder.loadTexts: isisD13SysAdminState.setDescription("The administrative state of this instance of the\n             Integrated IS-IS protocol. Setting this object to the\n             value 'on' when its current value is 'off' enables operation\n             of this instance of the Integrated IS-IS protocol.")
isisD13SysLogAdjacencyChanges = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysLogAdjacencyChanges.setStatus('current')
if mibBuilder.loadTexts: isisD13SysLogAdjacencyChanges.setDescription('If true, causes IS-IS to generate a log message when an\n             IS-IS adjacency changes state (up or down).')
isisD13SysNextCircIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 11), TestAndIncr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13SysNextCircIndex.setStatus('current')
if mibBuilder.loadTexts: isisD13SysNextCircIndex.setDescription("This object is used to assign values to\n             isisD13CircIndex as described in 'Textual\n             Conventions for SNMPv2'.  The network manager\n             reads this object, and then writes the value\n             back as the isisD13CircIndex in a SET that creates\n             a new instance of isisD13CircEntry.  If the SET\n             fails with the code 'inconsistentValue', then\n             the process must be repeated; If the SET succeeds,\n             then the object is incremented, and the new\n             isisD13Circuit is created according to the manager's\n             directions.")
isisD13SysL2toL1Leaking = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysL2toL1Leaking.setStatus('current')
if mibBuilder.loadTexts: isisD13SysL2toL1Leaking.setDescription('If true, allow the router to leak L2 routes into L1.')
isisD13SysMaxAge = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 13), Unsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(350, 65535)).clone(1200)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysMaxAge.setStatus('current')
if mibBuilder.loadTexts: isisD13SysMaxAge.setDescription('Value to place in RemainingLifeTime field of\n             the LSPs we generate.\n             This is should be at least 300 seconds greater than\n             isisD13SysMaxLSPGenInt.')
isisD13SysReceiveLSPBufferSize = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 14), Unsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1492, 16000)).clone(1492)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysReceiveLSPBufferSize.setStatus('current')
if mibBuilder.loadTexts: isisD13SysReceiveLSPBufferSize.setDescription('Size of the largest Buffer we are designed or\n             configured to store.  This should be at least\n             as big as the maximum isisD13SysOrigLSPBuffSize\n             supported by the system.\n\n             If resources allow, we will store and flood LSPs\n             larger than isisD13SysReceiveLSPBufferSize, as this\n             can help avoid problems in networks with different\n             values for isisD13SysOrigLSPBuffSize.')
isisD13SysExistState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysExistState.setStatus('current')
if mibBuilder.loadTexts: isisD13SysExistState.setDescription("The state of the IS-IS router.  Turning this to\n             state 'destroy' forces the router to forget all\n             the current configuration.  Setting the state to\n             'notInService' stops protocol processing, but\n             retains the configuration.")
isisD13ManAreaAddrTable = MibTable((1, 3, 6, 1, 3, 37, 1, 1, 2), )
if mibBuilder.loadTexts: isisD13ManAreaAddrTable.setReference('{ISIS.aoi manualAreaAddresses (10)}')
if mibBuilder.loadTexts: isisD13ManAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisD13ManAreaAddrTable.setDescription('The set of manual area addresses configured on this\n             Intermediate System.')
isisD13ManAreaAddrEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 1, 2, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13ManAreaAddr"))
if mibBuilder.loadTexts: isisD13ManAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13ManAreaAddrEntry.setDescription('Each entry contains one area address manually configured\n             on this system')
isisD13ManAreaAddr = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 2, 1, 1), OSINSAddress())
if mibBuilder.loadTexts: isisD13ManAreaAddr.setStatus('current')
if mibBuilder.loadTexts: isisD13ManAreaAddr.setDescription('A manually configured area address for this system. This\n             object follows the index behavior.\n\n             Note: an index for the entry {1, {49.0001} active} in\n             this table would be the ordered pair\n             (1, (0x03 0x49 0x00 0x01)), as the length of an Octet\n             string is part of the OID.')
isisD13ManAreaAddrExistState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13ManAreaAddrExistState.setStatus('current')
if mibBuilder.loadTexts: isisD13ManAreaAddrExistState.setDescription("The state of the isisD13ManAreaAddrEntry. This object\n             follows the Row Status behavior. If the isisD13SysAdminState\n             for this instance of the IS-IS protocol is 'on', and an\n             attempt is made to set this object to the value 'destroy'\n             or 'notInService' when this is the only isisD13ManAreaAddrEntry\n             in state 'active' for this instance of the IS-IS protocol\n             should return  inconsistentValue.")
isisD13AreaAddrTable = MibTable((1, 3, 6, 1, 3, 37, 1, 1, 3), )
if mibBuilder.loadTexts: isisD13AreaAddrTable.setReference('{ISIS.aoi areaAddresses (18)}')
if mibBuilder.loadTexts: isisD13AreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisD13AreaAddrTable.setDescription('The union of the sets of area addresses reported in all\n             Level 1 LSPs with segment number zero received by this\n             instance of the protocol from Intermediate Systems which\n             are reachable via Level 1 routing.')
isisD13AreaAddrEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 1, 3, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13AreaAddr"))
if mibBuilder.loadTexts: isisD13AreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13AreaAddrEntry.setDescription('Each entry contains one area address reported in a\n             Level 1 LSP received by this instance of the IS-IS\n             protocol.')
isisD13AreaAddr = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 3, 1, 1), OSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13AreaAddr.setStatus('current')
if mibBuilder.loadTexts: isisD13AreaAddr.setDescription('An area address reported in a Level 1 LSP received by\n             this instance of the IS-IS protocol.')
isisD13SysProtSuppTable = MibTable((1, 3, 6, 1, 3, 37, 1, 1, 4), )
if mibBuilder.loadTexts: isisD13SysProtSuppTable.setStatus('current')
if mibBuilder.loadTexts: isisD13SysProtSuppTable.setDescription('This table contains the manually configured set of\n             protocols supported by each instance of the Integrated\n             IS-IS protocol.')
isisD13SysProtSuppEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 1, 4, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13SysProtSuppProtocol"))
if mibBuilder.loadTexts: isisD13SysProtSuppEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13SysProtSuppEntry.setDescription('Each entry contains one protocol supported by an\n             instance of the Integrated IS-IS protocol.')
isisD13SysProtSuppProtocol = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 4, 1, 1), SupportedProtocol())
if mibBuilder.loadTexts: isisD13SysProtSuppProtocol.setStatus('current')
if mibBuilder.loadTexts: isisD13SysProtSuppProtocol.setDescription('One supported protocol. This object follows the index\n             behavior.')
isisD13SysProtSuppExistState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysProtSuppExistState.setStatus('current')
if mibBuilder.loadTexts: isisD13SysProtSuppExistState.setDescription('The state of the isisD13SysProtSuppEntry. This object\n             follows the RowStatus behavior.')
isisD13SummAddrTable = MibTable((1, 3, 6, 1, 3, 37, 1, 1, 5), )
if mibBuilder.loadTexts: isisD13SummAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisD13SummAddrTable.setDescription('The set of IP summary addresses to use in forming\n             summary TLVs originated by this Intermediate System.\n\n             An administrator may use a summary address to combine\n             and modify IP Reachability announcements.  If the\n             Intermediate system can reach any subset of the summary\n             address, the summary address will be announced instead,\n             at the configured metric.')
isisD13SummAddrEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 1, 5, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13SummAddressType"), (0, "ISIS-D13-MIB", "isisD13SummAddress"), (0, "ISIS-D13-MIB", "isisD13SummAddrPrefixLen"))
if mibBuilder.loadTexts: isisD13SummAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13SummAddrEntry.setDescription('Each entry contains one IP summary address.')
isisD13SummAddressType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: isisD13SummAddressType.setStatus('current')
if mibBuilder.loadTexts: isisD13SummAddressType.setDescription('The Type of IP address for this summary address.\n             This object follows the index behavior.')
isisD13SummAddress = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 5, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: isisD13SummAddress.setStatus('current')
if mibBuilder.loadTexts: isisD13SummAddress.setDescription('The IP Address value for this summary address.\n             This object follows the index behavior.')
isisD13SummAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 5, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: isisD13SummAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: isisD13SummAddrPrefixLen.setDescription('The Length of the IP NetMask for this summary address.')
isisD13SummAddrExistState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SummAddrExistState.setStatus('current')
if mibBuilder.loadTexts: isisD13SummAddrExistState.setDescription('The existence state of this summary address. This object\n             follows the row status behavior.')
isisD13SummAddrMetric = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 5, 1, 5), DefaultMetric().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SummAddrMetric.setStatus('current')
if mibBuilder.loadTexts: isisD13SummAddrMetric.setDescription('The metric value to announce this summary\n             address with in LSPs generated by this system.')
isisD13SummAddrFullMetric = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 5, 1, 6), FullMetric().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SummAddrFullMetric.setStatus('current')
if mibBuilder.loadTexts: isisD13SummAddrFullMetric.setDescription('The wide metric value to announce this summary\n             address with in LSPs generated by this system.')
isisD13RedistributeAddrTable = MibTable((1, 3, 6, 1, 3, 37, 1, 1, 6), )
if mibBuilder.loadTexts: isisD13RedistributeAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisD13RedistributeAddrTable.setDescription('This table provides criteria to decide if a route should\n             be leaked from L2 to L1 when Domain Wide Prefix leaking is\n             enabled.\n\n             Addresses that match the summary mask in the table will\n             be announced at L1 by routers when isisD13SysL2toL1Leaking\n             is enabled.  Routes that fall into the ranges specified\n             are announced as is, without being summarized.  Routes\n             that do not match a summary mask are not announced.')
isisD13RedistributeAddrEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 1, 6, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13RedistributeAddrType"), (0, "ISIS-D13-MIB", "isisD13RedistributeAddrAddress"), (0, "ISIS-D13-MIB", "isisD13RedistributeAddrPrefixLen"))
if mibBuilder.loadTexts: isisD13RedistributeAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13RedistributeAddrEntry.setDescription('Each entry contains one IP summary address to\n             manage leaking L2 addresses into L1.')
isisD13RedistributeAddrType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: isisD13RedistributeAddrType.setStatus('current')
if mibBuilder.loadTexts: isisD13RedistributeAddrType.setDescription('The Type of IP address for this summary address.\n             This object follows the index behavior.')
isisD13RedistributeAddrAddress = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 6, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: isisD13RedistributeAddrAddress.setStatus('current')
if mibBuilder.loadTexts: isisD13RedistributeAddrAddress.setDescription('The IP Address value for this summary address.\n             This object follows the index behavior.')
isisD13RedistributeAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 6, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: isisD13RedistributeAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: isisD13RedistributeAddrPrefixLen.setDescription('The Length of the IP NetMask for this summary address.')
isisD13RedistributeAddrExistState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13RedistributeAddrExistState.setStatus('current')
if mibBuilder.loadTexts: isisD13RedistributeAddrExistState.setDescription('The existence state of this summary address. This object\n             follows the row status behavior.')
isisD13RouterTable = MibTable((1, 3, 6, 1, 3, 37, 1, 1, 7), )
if mibBuilder.loadTexts: isisD13RouterTable.setStatus('current')
if mibBuilder.loadTexts: isisD13RouterTable.setDescription('The set of hostnames and router ID.')
isisD13RouterEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 1, 7, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13RouterSysID"), (0, "ISIS-D13-MIB", "isisD13RouterLevel"))
if mibBuilder.loadTexts: isisD13RouterEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13RouterEntry.setDescription('Each entry tracks information about one peer at one level.')
isisD13RouterSysID = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 7, 1, 1), SystemID())
if mibBuilder.loadTexts: isisD13RouterSysID.setStatus('current')
if mibBuilder.loadTexts: isisD13RouterSysID.setDescription('The System ID of the Router Peer.')
isisD13RouterLevel = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 7, 1, 2), ISLevel())
if mibBuilder.loadTexts: isisD13RouterLevel.setStatus('current')
if mibBuilder.loadTexts: isisD13RouterLevel.setDescription('The level of this Intermediate System.')
isisD13RouterHostName = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13RouterHostName.setStatus('current')
if mibBuilder.loadTexts: isisD13RouterHostName.setDescription('The hostname listed in LSP, or NULL if none.')
isisD13RouterID = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13RouterID.setStatus('current')
if mibBuilder.loadTexts: isisD13RouterID.setDescription('The Router ID of the Peer found in LSP, or NULL if none.')
isisD13SysLevelTable = MibTable((1, 3, 6, 1, 3, 37, 1, 2, 1), )
if mibBuilder.loadTexts: isisD13SysLevelTable.setStatus('current')
if mibBuilder.loadTexts: isisD13SysLevelTable.setDescription('Level specific information about the System.')
isisD13SysLevelEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 2, 1, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13SysLevelIndex"))
if mibBuilder.loadTexts: isisD13SysLevelEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13SysLevelEntry.setDescription('Describe variables defined for Area or Domain.')
isisD13SysLevelIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2))))
if mibBuilder.loadTexts: isisD13SysLevelIndex.setStatus('current')
if mibBuilder.loadTexts: isisD13SysLevelIndex.setDescription('The level that this entry describes.')
isisD13SysLevelOrigLSPBuffSize = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 2), LSPBuffSize().clone(1492)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysLevelOrigLSPBuffSize.setReference('{ISIS.aoi originatingL1LSPBufferSize (9)}')
if mibBuilder.loadTexts: isisD13SysLevelOrigLSPBuffSize.setStatus('current')
if mibBuilder.loadTexts: isisD13SysLevelOrigLSPBuffSize.setDescription('The maximum size of LSPs and SNPs originated by\n             this instance of the protocol at this level.\n             This object follows the replaceOnlyWhileDisabled\n             behavior.')
isisD13SysLevelMinLSPGenInt = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 3), Unsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysLevelMinLSPGenInt.setReference('{ISIS.aoi minimumLSPGenerationInterval (11)}')
if mibBuilder.loadTexts: isisD13SysLevelMinLSPGenInt.setStatus('current')
if mibBuilder.loadTexts: isisD13SysLevelMinLSPGenInt.setDescription('Minimum interval, in seconds, between successive generation\n             of LSPs with the same LSPID at this level by this instance\n             of the protocol.  This object follows the resettingTimer\n             behavior.')
isisD13SysLevelOverloadState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 4), LevelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13SysLevelOverloadState.setReference('{ISIS.aoi l1State (17)}')
if mibBuilder.loadTexts: isisD13SysLevelOverloadState.setStatus('current')
if mibBuilder.loadTexts: isisD13SysLevelOverloadState.setDescription("The Overload state of the database at this level.\n             The value 'overloaded' indicates a database that is\n             low on an essential resource, such as memory.\n             The administrator may indirectly force the state to\n             'waiting' when the router is initializing by setting\n             the object isisD13SysLevelSetOverload.\n             If the state is waiting or overloaded, we\n             originate LSPs with the Overload bit set.")
isisD13SysLevelSetOverload = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysLevelSetOverload.setStatus('current')
if mibBuilder.loadTexts: isisD13SysLevelSetOverload.setDescription('Administratively set the overload bit for the level.\n             The overload bit will continue to be set if the\n             implementation runs out of memory, independent of\n             this variable')
isisD13SysLevelSetOverloadUntil = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 6), TimeTicks()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysLevelSetOverloadUntil.setStatus('current')
if mibBuilder.loadTexts: isisD13SysLevelSetOverloadUntil.setDescription('If set, the overload bit should be set, and cleared\n             after sysUpTime exceeds this value.')
isisD13SysLevelMetricStyle = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 7), MetricStyle().clone('narrow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysLevelMetricStyle.setStatus('current')
if mibBuilder.loadTexts: isisD13SysLevelMetricStyle.setDescription('Which style of Metric do we generate in our LSPs\n             at this level? This object follows the\n             replaceOnlyWhileDisabled behavior.')
isisD13SysLevelSPFConsiders = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 8), MetricStyle().clone('narrow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysLevelSPFConsiders.setStatus('current')
if mibBuilder.loadTexts: isisD13SysLevelSPFConsiders.setDescription('Which style of Metric do we consider in our\n             SPF computation at this level?')
isisD13SysLevelTEEnabled = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13SysLevelTEEnabled.setStatus('current')
if mibBuilder.loadTexts: isisD13SysLevelTEEnabled.setDescription('Do we do Traffic Engineering at this level?')
isisD13CircTable = MibTable((1, 3, 6, 1, 3, 37, 1, 3, 1), )
if mibBuilder.loadTexts: isisD13CircTable.setStatus('current')
if mibBuilder.loadTexts: isisD13CircTable.setDescription('The table of circuits used by each instance of\n             Integrated IS-IS on this system.')
isisD13CircEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 3, 1, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13CircIndex"))
if mibBuilder.loadTexts: isisD13CircEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13CircEntry.setDescription('An isisD13CircEntry exists for each circuit used by\n             Integrated IS-IS on this system.')
isisD13CircIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisD13CircIndex.setStatus('current')
if mibBuilder.loadTexts: isisD13CircIndex.setDescription('The identifier of this circuit, unique within the\n             instance of the IS-IS protocol. This object follows\n             the index behavior.  This is for SNMP Indexing\n             purposes only and need not have any relation to\n             any protocol value.')
isisD13CircIfIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircIfIndex.setStatus('current')
if mibBuilder.loadTexts: isisD13CircIfIndex.setDescription('The value of ifIndex for the interface to which this\n             circuit corresponds.   This object cannot be modified\n             after creation')
isisD13CircIfSubIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircIfSubIndex.setStatus('current')
if mibBuilder.loadTexts: isisD13CircIfSubIndex.setDescription('A specifier for the part of the interface ifIndex to which\n             this circuit corresponds, such as a DLCI or VPI/VCI.\n             This object cannot be modified after creation')
isisD13CircAdminState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 4), AdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircAdminState.setStatus('current')
if mibBuilder.loadTexts: isisD13CircAdminState.setDescription('The administrative state of the circuit. This\n             object follows the AdminState behavior.')
isisD13CircExistState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircExistState.setStatus('current')
if mibBuilder.loadTexts: isisD13CircExistState.setDescription("The existence state of this circuit. This object follows\n\n\n\n             the Row Status behavior.  Setting the state to 'notInService'\n             halts the generation and processing of IS-IS protocol PDUs\n             on this circuit.  Setting the state to destroy will also\n             erase any configuration associated with the circuit.")
isisD13CircType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("broadcast", 1), ("ptToPt", 2), ("staticIn", 3), ("staticOut", 4), ("dA", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircType.setReference('{ISIS.aoi type (33)}')
if mibBuilder.loadTexts: isisD13CircType.setStatus('current')
if mibBuilder.loadTexts: isisD13CircType.setDescription('The type of the circuit. This object follows the\n             replaceOnlyWhileDisabled behavior. The type specified\n             must be compatible with the type of the interface defined\n             by the value of isisD13CircIfIndex.')
isisD13CircExtDomain = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircExtDomain.setReference('{ISIS.aoi externalDomain (46)}')
if mibBuilder.loadTexts: isisD13CircExtDomain.setStatus('current')
if mibBuilder.loadTexts: isisD13CircExtDomain.setDescription('If true, suppress normal transmission of and\n             interpretation of Intra-domain IS-IS PDUs on this\n             circuit.')
isisD13CircLevel = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level1L2", 3))).clone('level1L2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircLevel.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevel.setDescription('Indicates which type of packets will be sent and\n\n\n\n             accepted on this circuit. The values used will be\n             modified by the settings of isisD13SysType. This\n             object follows the replaceOnlyWhileDisabled behavior.')
isisD13CircPassiveCircuit = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircPassiveCircuit.setReference('{}')
if mibBuilder.loadTexts: isisD13CircPassiveCircuit.setStatus('current')
if mibBuilder.loadTexts: isisD13CircPassiveCircuit.setDescription('Should we include this interface in LSPs, even if\n             it is not running the IS-IS Protocol?')
isisD13CircMeshGroupEnabled = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("blocked", 2), ("set", 3))).clone('inactive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircMeshGroupEnabled.setReference('{ RFC 2973 }')
if mibBuilder.loadTexts: isisD13CircMeshGroupEnabled.setStatus('current')
if mibBuilder.loadTexts: isisD13CircMeshGroupEnabled.setDescription('Is this port a member of a mesh group, or blocked?\n             Circuits in the same mesh group act as a virtual\n             multiaccess network.  LSPs seen on one circuit in\n             a mesh group will not be flooded to another circuit\n             in the same mesh group.')
isisD13CircMeshGroup = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircMeshGroup.setReference('{ RFC 2973 }')
if mibBuilder.loadTexts: isisD13CircMeshGroup.setStatus('current')
if mibBuilder.loadTexts: isisD13CircMeshGroup.setDescription('Circuits in the same mesh group act as a virtual\n             multiaccess network.  LSPs seen on one circuit in\n             a mesh group will not be flooded to another circuit\n             in the same mesh group.  If isisD13CircMeshGroupEnabled\n             is inactive or blocked, this value is ignored.')
isisD13CircSmallHellos = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircSmallHellos.setStatus('current')
if mibBuilder.loadTexts: isisD13CircSmallHellos.setDescription('Can we send unpadded hellos on LAN circuits?  False\n             means LAN Hellos must be padded.\n             Implementations should allow the administrator to read\n             this value.  An implementation need not be able to\n             support unpadded hellos to be conformant.')
isisD13CircLastUpTime = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 13), TimeTicks()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13CircLastUpTime.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLastUpTime.setDescription('If the circuit is enabled, the value of sysUpTime\n             when isisD13CircAdminState most recently entered\n             the state on.  If the circuit is not on,\n             the value of sysUpTime when the circuit last\n             entered state on, 0 if the circuit has never\n             been on.')
isisD13Circ3WayEnabled = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13Circ3WayEnabled.setStatus('current')
if mibBuilder.loadTexts: isisD13Circ3WayEnabled.setDescription('Is this circuit enabled to run 3Way handshake?')
isisD13CircExtendedCircID = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircExtendedCircID.setStatus('current')
if mibBuilder.loadTexts: isisD13CircExtendedCircID.setDescription('A unique value to be used as the extended circuit ID\n             in 3Way handshake.')
isisD13CircLevelTable = MibTable((1, 3, 6, 1, 3, 37, 1, 4, 1), )
if mibBuilder.loadTexts: isisD13CircLevelTable.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelTable.setDescription('Level specific information about circuits used by IS-IS')
isisD13CircLevelEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 4, 1, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13CircIndex"), (0, "ISIS-D13-MIB", "isisD13CircLevelIndex"))
if mibBuilder.loadTexts: isisD13CircLevelEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelEntry.setDescription('An isisD13CircLevelEntry exists for each level on\n             each circuit used by Integrated IS-IS on this system.')
isisD13CircLevelIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2))))
if mibBuilder.loadTexts: isisD13CircLevelIndex.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelIndex.setDescription('The level that this entry describes.')
isisD13CircLevelMetric = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 2), DefaultMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircLevelMetric.setReference('{ISIS.aoi l1DefaultMetric (35)}')
if mibBuilder.loadTexts: isisD13CircLevelMetric.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelMetric.setDescription('The metric value of this circuit for this level.')
isisD13CircLevelWideMetric = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 3), WideMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircLevelWideMetric.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelWideMetric.setDescription('The wide metric value of this circuit for this level.')
isisD13CircLevelISPriority = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 4), ISPriority().clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircLevelISPriority.setReference('{ISIS.aoi l2IntermediateSystemPriority (73)}')
if mibBuilder.loadTexts: isisD13CircLevelISPriority.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelISPriority.setDescription('The priority for becoming LAN Designated\n             Intermediate System at this level.')
isisD13CircLevelIDOctet = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircLevelIDOctet.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelIDOctet.setDescription('A one byte identifier that can be used in protocol packets\n             to identify a circuit.  Values of isisD13CircLevelIDOctet\n             do not need to be unique.  They are only required to differ\n             on LANs where the Intermediate System is the Designated\n             Intermediate System.')
isisD13CircLevelID = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 6), CircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13CircLevelID.setReference('{ISIS.aoi ptPtCircuitID (51)}')
if mibBuilder.loadTexts: isisD13CircLevelID.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelID.setDescription('The ID of the circuit allocated during initialization.\n             If no value has been negotiated (either because the\n             adjacency is to an End System, or because initialization\n             has not yet successfully completed), this object has the\n             value which would be proposed for this circuit (i.e. the\n             concatenation of the local system ID and the one byte\n             isisD13CircLevelIDOctet for this circuit.')
isisD13CircLevelDesIS = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 7), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(7, 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13CircLevelDesIS.setReference('{ISIS.aoi l2DesignatedIntermediateSystem (75)}')
if mibBuilder.loadTexts: isisD13CircLevelDesIS.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelDesIS.setDescription('The ID of the LAN Designated Intermediate System\n             on this circuit at this level. If, for any reason,\n             this system is not partaking in the relevant\n             Designated Intermediate System election process,\n             then the value returned is the zero length OCTET STRING.')
isisD13CircLevelHelloMultiplier = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 100)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircLevelHelloMultiplier.setReference('{ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: isisD13CircLevelHelloMultiplier.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelHelloMultiplier.setDescription('This value is multiplied by the corresponding HelloTimer\n             and the result in seconds (rounded up) is used as the\n             holding time in transmitted hellos, to be used by receivers\n             of hello packets from this IS')
isisD13CircLevelHelloTimer = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600000)).clone(3000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircLevelHelloTimer.setReference('{ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: isisD13CircLevelHelloTimer.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelHelloTimer.setDescription('Maximum period, in milliseconds, between IIH PDUs\n             on multiaccess networks at this level for LANs.\n             The value at level 1 is used as the period between\n             Hellos on L1L2 point to point circuits.  Setting\n             this value at level 2 on an L1L2 point to point\n             circuit will result in an error of InconsistentValue.\n\n             This object follows the resettingTimer behavior.')
isisD13CircLevelDRHelloTimer = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircLevelDRHelloTimer.setReference('{ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: isisD13CircLevelDRHelloTimer.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelDRHelloTimer.setDescription('Period, in milliseconds, between Hello PDUs on\n             multiaccess networks when this IS is the Designated\n             Intermediate System.  This object follows the\n             resettingTimer behavior.')
isisD13CircLevelLSPThrottle = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 11), Unsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircLevelLSPThrottle.setReference('{ISIS.aoi minimumBroadcastLSPTransmissionInterval (5)}')
if mibBuilder.loadTexts: isisD13CircLevelLSPThrottle.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelLSPThrottle.setDescription('Minimal interval of time, in milliseconds, between\n             transmissions of LSPs on an interface at this level.')
isisD13CircLevelMinLSPRetransInt = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircLevelMinLSPRetransInt.setReference('{ISIS.aoi minimumLSPTransmissionInterval (5)}')
if mibBuilder.loadTexts: isisD13CircLevelMinLSPRetransInt.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelMinLSPRetransInt.setDescription('Minimum interval, in seconds, between re-transmission of\n             an LSP at this level. This object follows the resettingTimer\n             behavior.\n\n             Note that isisD13CircLevelLSPThrottle controls\n             how fast we send back to back LSPs.  This variable\n             controls how fast we re-send the same LSP.')
isisD13CircLevelCSNPInterval = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircLevelCSNPInterval.setReference('{}')
if mibBuilder.loadTexts: isisD13CircLevelCSNPInterval.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelCSNPInterval.setDescription('Interval of time, in seconds, between periodic\n             transmission of a complete set of CSNPs on\n             multiaccess networks if this router is the\n             designated router at this level.')
isisD13CircLevelPartSNPInterval = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(2)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13CircLevelPartSNPInterval.setReference('{ISIS.aoi partialSNPInterval (14)}')
if mibBuilder.loadTexts: isisD13CircLevelPartSNPInterval.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLevelPartSNPInterval.setDescription('Minimum interval in seconds between sending Partial Sequence\n             Number PDUs at this level. This object follows the\n             resettingTimer behavior.')
isisD13SystemCounterTable = MibTable((1, 3, 6, 1, 3, 37, 1, 5, 1), )
if mibBuilder.loadTexts: isisD13SystemCounterTable.setStatus('current')
if mibBuilder.loadTexts: isisD13SystemCounterTable.setDescription('System wide counters for one instance of the IS-IS\n             protocol on the system.')
isisD13SystemCounterEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 5, 1, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13SysStatLevel"))
if mibBuilder.loadTexts: isisD13SystemCounterEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13SystemCounterEntry.setDescription('System-wide IS-IS counters.')
isisD13SysStatLevel = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2))))
if mibBuilder.loadTexts: isisD13SysStatLevel.setStatus('current')
if mibBuilder.loadTexts: isisD13SysStatLevel.setDescription('The level that this entry describes.')
isisD13SysStatCorrLSPs = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13SysStatCorrLSPs.setReference('{ISIS.aoi corruptedLSPsDetected (19)}')
if mibBuilder.loadTexts: isisD13SysStatCorrLSPs.setStatus('current')
if mibBuilder.loadTexts: isisD13SysStatCorrLSPs.setDescription('Number of corrupted in-memory LSPs detected.\n\n             LSPs received from the wire with a bad checksum\n             are silently dropped and not counted.')
isisD13SysStatAuthTypeFails = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13SysStatAuthTypeFails.setStatus('current')
if mibBuilder.loadTexts: isisD13SysStatAuthTypeFails.setDescription('The number of authentication type mismatches recognized\n             by this instance of the protocol.')
isisD13SysStatAuthFails = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13SysStatAuthFails.setStatus('current')
if mibBuilder.loadTexts: isisD13SysStatAuthFails.setDescription('The number of authentication failures recognized by this\n             instance of the protocol.')
isisD13SysStatLSPDbaseOloads = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13SysStatLSPDbaseOloads.setReference('{ISIS.aoi lSPL1DatabaseOverloads (20)}')
if mibBuilder.loadTexts: isisD13SysStatLSPDbaseOloads.setStatus('current')
if mibBuilder.loadTexts: isisD13SysStatLSPDbaseOloads.setDescription('Number of times the LSP database has become\n\n\n\n             overloaded.')
isisD13SysStatManAddrDropFromAreas = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13SysStatManAddrDropFromAreas.setReference('{ISIS.aoi manualAddressesDroppedFromArea (21)}')
if mibBuilder.loadTexts: isisD13SysStatManAddrDropFromAreas.setStatus('current')
if mibBuilder.loadTexts: isisD13SysStatManAddrDropFromAreas.setDescription('Number of times a manual address has been dropped from\n             the area.')
isisD13SysStatAttmptToExMaxSeqNums = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13SysStatAttmptToExMaxSeqNums.setReference('{ISIS.aoi attemptsToExceedmaximumSequenceNumber (22)}')
if mibBuilder.loadTexts: isisD13SysStatAttmptToExMaxSeqNums.setStatus('current')
if mibBuilder.loadTexts: isisD13SysStatAttmptToExMaxSeqNums.setDescription('Number of times the IS has attempted to exceed the\n             maximum sequence number.')
isisD13SysStatSeqNumSkips = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13SysStatSeqNumSkips.setReference('{ISIS.aoi sequenceNumberSkips (23)}')
if mibBuilder.loadTexts: isisD13SysStatSeqNumSkips.setStatus('current')
if mibBuilder.loadTexts: isisD13SysStatSeqNumSkips.setDescription('Number of times a sequence number skip has occurred.')
isisD13SysStatOwnLSPPurges = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13SysStatOwnLSPPurges.setReference('{ISIS.aoi ownLSPPurges (24)}')
if mibBuilder.loadTexts: isisD13SysStatOwnLSPPurges.setStatus('current')
if mibBuilder.loadTexts: isisD13SysStatOwnLSPPurges.setDescription("Number of times a zero-aged copy of the system's own LSP\n             is received from some other node.")
isisD13SysStatIDFieldLenMismatches = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13SysStatIDFieldLenMismatches.setReference('{ISIS.aoi iDFieldLengthMismatches (25)}')
if mibBuilder.loadTexts: isisD13SysStatIDFieldLenMismatches.setStatus('current')
if mibBuilder.loadTexts: isisD13SysStatIDFieldLenMismatches.setDescription('Number of times a PDU is received with a different value\n             for ID field length to that of the receiving system.')
isisD13SysStatMaxAreaAddrMismatches = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 11), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13SysStatMaxAreaAddrMismatches.setReference('{ISIS.aoi MaximumAreaAddressesMismatches (118)}')
if mibBuilder.loadTexts: isisD13SysStatMaxAreaAddrMismatches.setStatus('current')
if mibBuilder.loadTexts: isisD13SysStatMaxAreaAddrMismatches.setDescription('Number of times a PDU is received with a different value\n             for MaximumAreaAddresses from that of the receiving\n             system.')
isisD13SysStatPartChanges = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13SysStatPartChanges.setStatus('current')
if mibBuilder.loadTexts: isisD13SysStatPartChanges.setDescription('Partition changes')
isisD13SysStatSPFRuns = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13SysStatSPFRuns.setStatus('current')
if mibBuilder.loadTexts: isisD13SysStatSPFRuns.setDescription('Number of times we ran SPF at this level.')
isisD13CircuitCounterTable = MibTable((1, 3, 6, 1, 3, 37, 1, 5, 2), )
if mibBuilder.loadTexts: isisD13CircuitCounterTable.setStatus('current')
if mibBuilder.loadTexts: isisD13CircuitCounterTable.setDescription('Circuit specific counters for one instance of the IS-IS\n             protocol on the system.')
isisD13CircuitCounterEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 5, 2, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13CircIndex"), (0, "ISIS-D13-MIB", "isisD13CircuitType"))
if mibBuilder.loadTexts: isisD13CircuitCounterEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13CircuitCounterEntry.setDescription('An isisD13CircCountEntry exists for each circuit\n             used by Integrated IS-IS on this system.')
isisD13CircuitType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lanlevel1", 1), ("lanlevel2", 2), ("p2pcircuit", 3))))
if mibBuilder.loadTexts: isisD13CircuitType.setStatus('current')
if mibBuilder.loadTexts: isisD13CircuitType.setDescription('What type of circuit saw these counts?\n\n             The point to point Hello PDU includes\n             both L1 and L2, and ISs form a single\n             adjacency on point to point links.\n\n\n\n             Thus we combine counts on\n             point to point links into one group.')
isisD13CircAdjChanges = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13CircAdjChanges.setReference('{ISIS.aoi changesInAdjacencyState (40)}')
if mibBuilder.loadTexts: isisD13CircAdjChanges.setStatus('current')
if mibBuilder.loadTexts: isisD13CircAdjChanges.setDescription('The number of times an adjacency state change has\n             occurred on this circuit.')
isisD13CircNumAdj = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13CircNumAdj.setReference('{ISIS.aoi changesInAdjacencyState (40)}')
if mibBuilder.loadTexts: isisD13CircNumAdj.setStatus('current')
if mibBuilder.loadTexts: isisD13CircNumAdj.setDescription('The number of adjacencies on this circuit.')
isisD13CircInitFails = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13CircInitFails.setReference('{ISIS.aoi initialisationFailures (41)}')
if mibBuilder.loadTexts: isisD13CircInitFails.setStatus('current')
if mibBuilder.loadTexts: isisD13CircInitFails.setDescription('The number of times initialization of this circuit has\n             failed.')
isisD13CircRejAdjs = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13CircRejAdjs.setReference('{ISIS.aoi rejectedAdjacencies (42)}')
if mibBuilder.loadTexts: isisD13CircRejAdjs.setStatus('current')
if mibBuilder.loadTexts: isisD13CircRejAdjs.setDescription('The number of times an adjacency has been rejected on\n             this circuit.')
isisD13CircIDFieldLenMismatches = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 2, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13CircIDFieldLenMismatches.setReference('{ISIS.aoi iDFieldLengthMismatches (25)}')
if mibBuilder.loadTexts: isisD13CircIDFieldLenMismatches.setStatus('current')
if mibBuilder.loadTexts: isisD13CircIDFieldLenMismatches.setDescription('The number of times an IS-IS control PDU with an ID\n             field length different to that for this system has been\n             received.')
isisD13CircMaxAreaAddrMismatches = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13CircMaxAreaAddrMismatches.setReference('{ISIS.aoi iDFieldLengthMismatches (25)}')
if mibBuilder.loadTexts: isisD13CircMaxAreaAddrMismatches.setStatus('current')
if mibBuilder.loadTexts: isisD13CircMaxAreaAddrMismatches.setDescription('The number of times an IS-IS control PDU with a\n             max area address field different to that for this\n             system has been received.')
isisD13CircAuthTypeFails = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13CircAuthTypeFails.setStatus('current')
if mibBuilder.loadTexts: isisD13CircAuthTypeFails.setDescription('The number of times an IS-IS control PDU with\n             an auth type field different to that for this\n             system has been received.')
isisD13CircAuthFails = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13CircAuthFails.setStatus('current')
if mibBuilder.loadTexts: isisD13CircAuthFails.setDescription('The number of times an IS-IS control PDU with\n             the correct auth type has failed to pass authentication\n             validation.')
isisD13CircLANDesISChanges = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13CircLANDesISChanges.setStatus('current')
if mibBuilder.loadTexts: isisD13CircLANDesISChanges.setDescription('The number of times the Designated IS has changed\n             on this circuit at this level.  If the circuit is\n             point to point, this count is zero.')
isisD13PacketCounterTable = MibTable((1, 3, 6, 1, 3, 37, 1, 5, 3), )
if mibBuilder.loadTexts: isisD13PacketCounterTable.setStatus('current')
if mibBuilder.loadTexts: isisD13PacketCounterTable.setDescription('Information about IS-IS protocol traffic at one level\n             on one circuit in one direction')
isisD13PacketCounterEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 5, 3, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13CircIndex"), (0, "ISIS-D13-MIB", "isisD13PacketCountLevel"), (0, "ISIS-D13-MIB", "isisD13PacketCountDirection"))
if mibBuilder.loadTexts: isisD13PacketCounterEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13PacketCounterEntry.setDescription('Information about IS-IS protocol traffic at one level\n             on one circuit in one direction')
isisD13PacketCountLevel = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2))))
if mibBuilder.loadTexts: isisD13PacketCountLevel.setStatus('current')
if mibBuilder.loadTexts: isisD13PacketCountLevel.setDescription('The level at which these PDU counts have been collected.')
isisD13PacketCountDirection = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sending", 1), ("receiving", 2))))
if mibBuilder.loadTexts: isisD13PacketCountDirection.setStatus('current')
if mibBuilder.loadTexts: isisD13PacketCountDirection.setDescription('Were we sending or receiving these PDUs?')
isisD13PacketCountIIHello = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 3, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13PacketCountIIHello.setReference('{ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: isisD13PacketCountIIHello.setStatus('current')
if mibBuilder.loadTexts: isisD13PacketCountIIHello.setDescription('The number of IS-IS Hello PDUs seen in this\n             direction at this level.\n\n             Point-to-Point IIH PDUs are counted at\n             Level 1 if the value of their Circuit Type\n             field is 1, and are counted at Level 2 otherwise.')
isisD13PacketCountISHello = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 3, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13PacketCountISHello.setStatus('current')
if mibBuilder.loadTexts: isisD13PacketCountISHello.setDescription('The number of ES-IS Hello PDUs seen in this\n             direction.  ISH PDUs are counted at the\n             lowest enabled level: at L1 on L1 or L1L2\n             circuits, and at L2 otherwise.')
isisD13PacketCountESHello = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 3, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13PacketCountESHello.setStatus('current')
if mibBuilder.loadTexts: isisD13PacketCountESHello.setDescription('The number of ES Hello PDUs seen in this\n             direction.  ESH PDUs are counted at the\n             lowest enabled level: at L1 on L1 or L1L2\n             circuits, and at L2 otherwise.')
isisD13PacketCountLSP = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 3, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13PacketCountLSP.setReference('{ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: isisD13PacketCountLSP.setStatus('current')
if mibBuilder.loadTexts: isisD13PacketCountLSP.setDescription('The number of IS-IS LSPs seen in this\n             direction at this level.')
isisD13PacketCountCSNP = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 3, 1, 7), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13PacketCountCSNP.setReference('{ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: isisD13PacketCountCSNP.setStatus('current')
if mibBuilder.loadTexts: isisD13PacketCountCSNP.setDescription('The number of IS-IS CSNPs seen in this\n             direction at this level.')
isisD13PacketCountPSNP = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 3, 1, 8), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13PacketCountPSNP.setReference('{ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: isisD13PacketCountPSNP.setStatus('current')
if mibBuilder.loadTexts: isisD13PacketCountPSNP.setDescription('The number of IS-IS PSNPs seen in this\n             direction at this level.')
isisD13PacketCountUnknown = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 3, 1, 9), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13PacketCountUnknown.setReference('{ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: isisD13PacketCountUnknown.setStatus('current')
if mibBuilder.loadTexts: isisD13PacketCountUnknown.setDescription('The number of unknown IS-IS PDUs seen\n             at this level.')
isisD13ISAdjTable = MibTable((1, 3, 6, 1, 3, 37, 1, 6, 1), )
if mibBuilder.loadTexts: isisD13ISAdjTable.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjTable.setDescription('The table of adjacencies to Intermediate Systems.')
isisD13ISAdjEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 6, 1, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13CircIndex"), (0, "ISIS-D13-MIB", "isisD13ISAdjIndex"))
if mibBuilder.loadTexts: isisD13ISAdjEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjEntry.setDescription('Each entry corresponds to one adjacency to an\n             Intermediate System on this system.')
isisD13ISAdjIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisD13ISAdjIndex.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjIndex.setDescription('A unique value identifying the IS adjacency from all\n             other such adjacencies on this circuit. This value is\n             assigned by the system when the adjacency is created\n             automatically.')
isisD13ISAdjState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("initializing", 2), ("up", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13ISAdjState.setReference('{ISIS.aoi adjacencyState (78)}')
if mibBuilder.loadTexts: isisD13ISAdjState.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjState.setDescription('The state of the adjacency')
isisD13ISAdj3WayState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("up", 0), ("initializing", 1), ("down", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13ISAdj3WayState.setReference('{ RFC 3373 }')
if mibBuilder.loadTexts: isisD13ISAdj3WayState.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdj3WayState.setDescription('The 3Way state of the adjacency.  These are picked\n             to match the historical on-the-wire representation\n             of the 3Way state, and are not intended to match\n             isisD13ISAdjState.')
isisD13ISAdjNeighSNPAAddress = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 4), OSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13ISAdjNeighSNPAAddress.setReference('{ISIS.aoi neighbourSNPAAddress (79)}')
if mibBuilder.loadTexts: isisD13ISAdjNeighSNPAAddress.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjNeighSNPAAddress.setDescription('The SNPA address of the neighboring system.')
isisD13ISAdjNeighSysType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("l1IntermediateSystem", 1), ("l2IntermediateSystem", 2), ("l1L2IntermediateSystem", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13ISAdjNeighSysType.setReference('{ISIS.aoi neighbourSystemType (80)}')
if mibBuilder.loadTexts: isisD13ISAdjNeighSysType.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjNeighSysType.setDescription('The type of the neighboring system.')
isisD13ISAdjNeighSysID = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 6), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13ISAdjNeighSysID.setReference('{ISIS.aoi neighbourSystemIds (83)}')
if mibBuilder.loadTexts: isisD13ISAdjNeighSysID.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjNeighSysID.setDescription('The system ID of the neighboring Intermediate\n             System.')
isisD13ISAdjNbrExtendedCircID = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13ISAdjNbrExtendedCircID.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjNbrExtendedCircID.setDescription('The 4 byte Extended Circuit ID learned from the\n             Neighbor during 3-way handshake, or 0.')
isisD13ISAdjUsage = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level1and2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13ISAdjUsage.setReference('{ISIS.aoi adjacencyUsage (82)}')
if mibBuilder.loadTexts: isisD13ISAdjUsage.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjUsage.setDescription('How is the adjacency used?  On a point-to-point link,\n             this might be level1and2, but on a LAN, the usage will\n             be level1 on the adjacency between peers at level 1,\n             and level2 for the adjacency between peers at level 2.')
isisD13ISAdjHoldTimer = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 9), Unsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13ISAdjHoldTimer.setReference('{ISIS.aoi holdingTimer (85)}')
if mibBuilder.loadTexts: isisD13ISAdjHoldTimer.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjHoldTimer.setDescription('The holding time in seconds for this adjacency.\n             This value is based on received IIH PDUs and\n             the elapsed time since receipt.')
isisD13ISAdjNeighPriority = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 10), ISPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13ISAdjNeighPriority.setReference('{ISIS.aoi lANPriority (86)}')
if mibBuilder.loadTexts: isisD13ISAdjNeighPriority.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjNeighPriority.setDescription('Priority of the neighboring Intermediate System for\n             becoming the Designated Intermediate System.')
isisD13ISAdjLastUpTime = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 11), TimeTicks()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13ISAdjLastUpTime.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjLastUpTime.setDescription("If the isisD13ISAdjState is in state 'up', the value\n             of sysUpTime when the adjacency most recently\n             entered the state 'up',  or 0 if it has never\n             been in state 'up'.")
isisD13ISAdjAreaAddrTable = MibTable((1, 3, 6, 1, 3, 37, 1, 6, 2), )
if mibBuilder.loadTexts: isisD13ISAdjAreaAddrTable.setReference('{ISIS.aoi areaAddressesOfNeighbour (84)}')
if mibBuilder.loadTexts: isisD13ISAdjAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjAreaAddrTable.setDescription('This table contains the set of Area Addresses of\n             neighboring Intermediate Systems as reported in received\n             IIH PDUs.')
isisD13ISAdjAreaAddrEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 6, 2, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13CircIndex"), (0, "ISIS-D13-MIB", "isisD13ISAdjIndex"), (0, "ISIS-D13-MIB", "isisD13ISAdjAreaAddrIndex"))
if mibBuilder.loadTexts: isisD13ISAdjAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjAreaAddrEntry.setDescription('Each entry contains one Area Address reported by a\n             neighboring Intermediate System in its IIH PDUs.')
isisD13ISAdjAreaAddrIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisD13ISAdjAreaAddrIndex.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjAreaAddrIndex.setDescription('An index for the areas associated with one neighbor.\n             This provides a simpler way to walk the table.')
isisD13ISAdjAreaAddress = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 2, 1, 2), OSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13ISAdjAreaAddress.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjAreaAddress.setDescription('One Area Address as reported in IIH PDUs received from\n             the neighbor.')
isisD13ISAdjIPAddrTable = MibTable((1, 3, 6, 1, 3, 37, 1, 6, 3), )
if mibBuilder.loadTexts: isisD13ISAdjIPAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjIPAddrTable.setDescription('This table contains the set of IP Addresses of\n             neighboring Intermediate Systems as reported in received\n             IIH PDUs.')
isisD13ISAdjIPAddrEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 6, 3, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13CircIndex"), (0, "ISIS-D13-MIB", "isisD13ISAdjIndex"), (0, "ISIS-D13-MIB", "isisD13ISAdjIPAddrIndex"))
if mibBuilder.loadTexts: isisD13ISAdjIPAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjIPAddrEntry.setDescription('Each entry contains one IP Address reported by a\n             neighboring Intermediate System in its IIH PDUs.')
isisD13ISAdjIPAddrIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisD13ISAdjIPAddrIndex.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjIPAddrIndex.setDescription('An index to this table which identifies the IP addresss\n             to which this entry belongs.')
isisD13ISAdjIPAddressType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13ISAdjIPAddressType.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjIPAddressType.setDescription('The type of one IP Address as reported in IIH PDUs\n             received from the neighbor.')
isisD13ISAdjIPAddress = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 3, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13ISAdjIPAddress.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjIPAddress.setDescription('One IP Address as reported in IIH PDUs received from the\n             neighbor.')
isisD13ISAdjProtSuppTable = MibTable((1, 3, 6, 1, 3, 37, 1, 6, 4), )
if mibBuilder.loadTexts: isisD13ISAdjProtSuppTable.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjProtSuppTable.setDescription('This table contains the set of protocols supported by\n             neighboring Intermediate Systems as reported in received\n\n\n\n             IIH PDUs.')
isisD13ISAdjProtSuppEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 6, 4, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13CircIndex"), (0, "ISIS-D13-MIB", "isisD13ISAdjIndex"), (0, "ISIS-D13-MIB", "isisD13ISAdjProtSuppProtocol"))
if mibBuilder.loadTexts: isisD13ISAdjProtSuppEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjProtSuppEntry.setDescription('Each entry contains one protocol supported by a\n             neighboring Intermediate System as reported in its IIH\n             PDUs.')
isisD13ISAdjProtSuppProtocol = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 4, 1, 1), SupportedProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13ISAdjProtSuppProtocol.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjProtSuppProtocol.setDescription('One supported protocol as reported in IIH PDUs received\n             from the neighbor.')
isisD13RATable = MibTable((1, 3, 6, 1, 3, 37, 1, 7, 1), )
if mibBuilder.loadTexts: isisD13RATable.setStatus('current')
if mibBuilder.loadTexts: isisD13RATable.setDescription('The table of Reachable Addresses to NSAPs or Address\n             Prefixes.')
isisD13RAEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 7, 1, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13CircIndex"), (0, "ISIS-D13-MIB", "isisD13RAIndex"))
if mibBuilder.loadTexts: isisD13RAEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13RAEntry.setDescription('Each entry defines a Reachable Address to a NSAP or\n             Address Prefix.')
isisD13RAIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisD13RAIndex.setStatus('current')
if mibBuilder.loadTexts: isisD13RAIndex.setDescription('The identifier for this isisD13RAEntry. This value must be\n             unique amongst all Reachable Addresses on the same parent\n             Circuit. This object follows the index and ManualOrAutomatic\n             behaviors.')
isisD13RAExistState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13RAExistState.setStatus('current')
if mibBuilder.loadTexts: isisD13RAExistState.setDescription('The existence state of this Reachable Address. This\n             object follows the ManualOrAutomatic behaviors.')
isisD13RAAdminState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 3), AdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13RAAdminState.setStatus('current')
if mibBuilder.loadTexts: isisD13RAAdminState.setDescription('The administrative state of the Reachable Address. This\n             object follows the AdminState and ManualOrAutomatic\n             behaviors.')
isisD13RAAddrPrefix = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 4), OSINSAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13RAAddrPrefix.setReference('{ISIS.aoi addressPrefix (98)}')
if mibBuilder.loadTexts: isisD13RAAddrPrefix.setStatus('current')
if mibBuilder.loadTexts: isisD13RAAddrPrefix.setDescription('The destination of this Reachable Address. This is an\n             Address Prefix. This object follows the\n             replaceOnlyWhileDisabled and ManualOrAutomatic\n             behaviors.')
isisD13RAMapType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("explicit", 2), ("extractIDI", 3), ("extractDSP", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13RAMapType.setReference('{ISO10589-ISIS.aoi mappingType (107)}')
if mibBuilder.loadTexts: isisD13RAMapType.setStatus('current')
if mibBuilder.loadTexts: isisD13RAMapType.setDescription('The type of mapping to be employed to ascertain the SNPA\n             Address which should be used in forwarding PDUs for this\n             Reachable Address prefix. This object follows the\n             ManualOrAutomatic behavior. The following values of\n             mapping type are defined:\n\n\n\n                 none: The mapping is null because the neighbor SNPA is\n                       implicit by nature of the subnetwork (e.g. a\n                       point-to-point linkage).\n\n                 explicit: The subnetwork addresses in the object\n                       isisD13RASNPAAddress is to be used.\n\n                 extractIDI: The SNPA is embedded in the IDI of\n                       the destination NSAP Address. The mapping\n                       algorithm extracts the SNPA to be used\n                       according to the format and encoding rules of\n                       ISO8473/Add2. This SNPA extraction algorithm can\n                       be used in conjunction with Reachable Address\n                       prefixes from the X.121, F.69, E.163 and E.164\n                       addressing subdomains.\n\n                 extractDSP: All, or a suffix, of the SNPA is embedded\n                       in the DSP of the destination address. This SNPA\n                       extraction algorithm extracts the embedded\n                       subnetwork addressing information by performing a\n                       logical AND of the isisD13RASNPAMask object value with\n                       the destination address. The part of the SNPA\n                       extracted from the destination NSAP is appended to\n                       the isisD13RASNPAPrefix object value to form the next\n                       hop subnetwork addressing information.')
isisD13RAMetric = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 6), DefaultMetric().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13RAMetric.setReference('{ISIS.aoi DefaultMetric (99)}')
if mibBuilder.loadTexts: isisD13RAMetric.setStatus('current')
if mibBuilder.loadTexts: isisD13RAMetric.setDescription('The metric value for reaching the specified\n             prefix over this circuit. This object follows the\n             ManualOrAutomatic behavior.')
isisD13RAMetricType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 7), MetricType().clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13RAMetricType.setReference('{ISIS.aoi DefaultMetricType (103)}')
if mibBuilder.loadTexts: isisD13RAMetricType.setStatus('current')
if mibBuilder.loadTexts: isisD13RAMetricType.setDescription('Indicates whether the metric is internal or\n             external. This object follows the ManualOrAutomatic\n\n\n\n             behavior.')
isisD13RASNPAAddress = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 8), OSINSAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13RASNPAAddress.setReference('{ISIS.aoi sNPAAddresses (109)}')
if mibBuilder.loadTexts: isisD13RASNPAAddress.setStatus('current')
if mibBuilder.loadTexts: isisD13RASNPAAddress.setDescription('The SNPA Address to which a PDU may be forwarded in\n             order to reach a destination which matches the address\n             prefix of the Reachable Address. This object follows the\n             ManualOrAutomatic behavior.')
isisD13RASNPAMask = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 9), OSINSAddress().clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13RASNPAMask.setReference('{ISIS.aoi sNPAMask (122)}')
if mibBuilder.loadTexts: isisD13RASNPAMask.setStatus('current')
if mibBuilder.loadTexts: isisD13RASNPAMask.setDescription('A bit mask with 1 bits indicating the positions in the\n             effective destination address from which embedded SNPA\n             information is to be extracted. For the extraction the\n             first octet of the isisD13RASNPAMask object value is aligned\n             with the first octet (AFI) of the NSAP Address. If the\n             isisD13RASNPAMask object value and NSAP Address are of\n             different lengths, the shorter of the two is logically\n             padded with zeros before performing the extraction. This\n             object follows the ManualOrAutomatic behavior.')
isisD13RASNPAPrefix = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 10), OSINSAddress().clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13RASNPAPrefix.setReference('{ISIS.aoi sNPAPrefix (123)}')
if mibBuilder.loadTexts: isisD13RASNPAPrefix.setStatus('current')
if mibBuilder.loadTexts: isisD13RASNPAPrefix.setDescription('A fixed SNPA prefix for use when the isisD13RAMapType is\n             extractDSP. The SNPA Address to use is formed by\n             concatenating the fixed SNPA prefix with a variable SNPA\n             part that is extracted from the effective destination\n             address. For Reachable Address prefixes in which the\n\n\n\n             entire SNPA is embedded in the DSP the SNPA Prefix shall\n             be null. This object follows the ManualOrAutomatic\n             behavior.')
isisD13RAType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2))).clone('manual')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13RAType.setStatus('current')
if mibBuilder.loadTexts: isisD13RAType.setDescription('The type of Reachable address. Those of type\n             manual are created by the network manager. Those\n             of type automatic are created through propagation\n             of routing information from another routing\n             protocol (eg. IDRP). ')
isisD13IPRATable = MibTable((1, 3, 6, 1, 3, 37, 1, 8, 1), )
if mibBuilder.loadTexts: isisD13IPRATable.setStatus('current')
if mibBuilder.loadTexts: isisD13IPRATable.setDescription('The table of IP Reachable Addresses to networks,\n             subnetworks or hosts either manually configured or\n             learned from another protocol.')
isisD13IPRAEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 8, 1, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13IPRADestType"), (0, "ISIS-D13-MIB", "isisD13IPRADest"), (0, "ISIS-D13-MIB", "isisD13IPRADestPrefixLen"))
if mibBuilder.loadTexts: isisD13IPRAEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13IPRAEntry.setDescription('Each entry defines an IP Reachable Address to a network,\n             subnetwork or host.')
isisD13IPRADestType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 8, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: isisD13IPRADestType.setStatus('current')
if mibBuilder.loadTexts: isisD13IPRADestType.setDescription('The type of this IP Reachable Address.  This object\n             follows the ManualOrAutomatic behavior.')
isisD13IPRADest = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 8, 1, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: isisD13IPRADest.setStatus('current')
if mibBuilder.loadTexts: isisD13IPRADest.setDescription('The destination of this IP Reachable Address. This is\n             either a network address, subnetwork address or host\n             address. This object follows the ManualOrAutomatic\n             behavior.')
isisD13IPRADestPrefixLen = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 8, 1, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: isisD13IPRADestPrefixLen.setStatus('current')
if mibBuilder.loadTexts: isisD13IPRADestPrefixLen.setDescription('The length of the IP Netmask for Reachability Address.\n             This object follows the ManualOrAutomatic behavior.')
isisD13IPRANextHopType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 8, 1, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13IPRANextHopType.setStatus('current')
if mibBuilder.loadTexts: isisD13IPRANextHopType.setDescription('The type of the IP next hop address.')
isisD13IPRANextHop = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 8, 1, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13IPRANextHop.setStatus('current')
if mibBuilder.loadTexts: isisD13IPRANextHop.setDescription('The IP next hop to this destination.')
isisD13IPRAType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13IPRAType.setStatus('current')
if mibBuilder.loadTexts: isisD13IPRAType.setDescription('The type of this IP Reachable Address. Those of type\n             manual are created by the network manager. Those of type\n             automatic are created through propagation of routing\n             information from another routing protocol.  This object\n             follows the ManualOrAutomatic behavior.')
isisD13IPRAExistState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 8, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13IPRAExistState.setStatus('current')
if mibBuilder.loadTexts: isisD13IPRAExistState.setDescription('The state of this IP Reachable Address. This object\n             follows the ExistenceState and ManualOrAutomatic\n             behaviors.')
isisD13IPRAAdminState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 8, 1, 1, 8), AdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13IPRAAdminState.setStatus('current')
if mibBuilder.loadTexts: isisD13IPRAAdminState.setDescription('The administrative state of the IP Reachable Address. This\n             object follows the AdminState and ManualOrAutomatic\n             behaviors.')
isisD13IPRAMetric = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 8, 1, 1, 9), DefaultMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13IPRAMetric.setStatus('current')
if mibBuilder.loadTexts: isisD13IPRAMetric.setDescription('The metric value for reaching the specified\n             destination over this circuit. This object follows the\n             ManualOrAutomatic behavior.')
isisD13IPRAMetricType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 8, 1, 1, 10), MetricType().clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13IPRAMetricType.setStatus('current')
if mibBuilder.loadTexts: isisD13IPRAMetricType.setDescription('Indicates whether the metric is internal or\n             external. This object follows the ManualOrAutomatic\n             behavior.')
isisD13IPRAFullMetric = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 8, 1, 1, 11), FullMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13IPRAFullMetric.setStatus('current')
if mibBuilder.loadTexts: isisD13IPRAFullMetric.setDescription('The wide metric value for reaching the specified\n             destination over this circuit. This object follows the\n             ManualOrAutomatic behavior.')
isisD13IPRASNPAAddress = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 8, 1, 1, 12), OSINSAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisD13IPRASNPAAddress.setStatus('current')
if mibBuilder.loadTexts: isisD13IPRASNPAAddress.setDescription('The SNPA Address to which a PDU may be forwarded in\n             order to reach a destination which matches this IP\n             Reachable Address. This object follows the\n             ManualOrAutomatic behavior.')
isisD13IPRASourceType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("static", 1), ("direct", 2), ("ospfv2", 3), ("ospfv3", 4), ("isisD13", 5), ("rip", 6), ("igrp", 7), ("eigrp", 8), ("bgp", 9), ("other", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13IPRASourceType.setStatus('current')
if mibBuilder.loadTexts: isisD13IPRASourceType.setDescription('The origin of this route.')
isisD13LSPSummaryTable = MibTable((1, 3, 6, 1, 3, 37, 1, 9, 1), )
if mibBuilder.loadTexts: isisD13LSPSummaryTable.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPSummaryTable.setDescription('The table of LSP Headers.')
isisD13LSPSummaryEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 9, 1, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13LSPLevel"), (0, "ISIS-D13-MIB", "isisD13LSPID"))
if mibBuilder.loadTexts: isisD13LSPSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPSummaryEntry.setDescription('Each entry describes an LSP current stored in the system.')
isisD13LSPLevel = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 9, 1, 1, 1), ISLevel())
if mibBuilder.loadTexts: isisD13LSPLevel.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPLevel.setDescription('At which level does this LSP appear?')
isisD13LSPID = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 9, 1, 1, 2), LinkStatePDUID())
if mibBuilder.loadTexts: isisD13LSPID.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPID.setDescription('The 8 byte LSP ID, consisting of the SystemID,\n             Circuit ID, and Fragment Number.')
isisD13LSPSeq = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 9, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13LSPSeq.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPSeq.setDescription('The sequence number for this LSP.')
isisD13LSPZeroLife = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 9, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13LSPZeroLife.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPZeroLife.setDescription('Is this LSP being purged by this System?')
isisD13LSPChecksum = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 9, 1, 1, 5), Unsigned16TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13LSPChecksum.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPChecksum.setDescription('The 16 bit Fletcher Checksum.')
isisD13LSPLifetimeRemain = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 9, 1, 1, 6), Unsigned16TC()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13LSPLifetimeRemain.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPLifetimeRemain.setDescription('The remaining lifetime in seconds for this LSP.')
isisD13LSPPDULength = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 9, 1, 1, 7), Unsigned16TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13LSPPDULength.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPPDULength.setDescription('The length of this LSP.')
isisD13LSPAttributes = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 9, 1, 1, 8), Unsigned8TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13LSPAttributes.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPAttributes.setDescription('Flags carried by the LSP.')
isisD13LSPTLVTable = MibTable((1, 3, 6, 1, 3, 37, 1, 9, 2), )
if mibBuilder.loadTexts: isisD13LSPTLVTable.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPTLVTable.setDescription('The contents of each LSP.')
isisD13LSPTLVEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 9, 2, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"), (0, "ISIS-D13-MIB", "isisD13LSPLevel"), (0, "ISIS-D13-MIB", "isisD13LSPID"), (0, "ISIS-D13-MIB", "isisD13LSPTLVIndex"))
if mibBuilder.loadTexts: isisD13LSPTLVEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPTLVEntry.setDescription('Each entry describes an LSP current stored in the system.')
isisD13LSPTLVIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 9, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: isisD13LSPTLVIndex.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPTLVIndex.setDescription('The index of this TLV in the LSP.  The first TLV has index 1\n             and the Nth TLV has an index of N.')
isisD13LSPTLVSeq = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 9, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13LSPTLVSeq.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPTLVSeq.setDescription('The sequence number for this LSP.')
isisD13LSPTLVChecksum = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 9, 2, 1, 3), Unsigned16TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13LSPTLVChecksum.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPTLVChecksum.setDescription('The 16 bit Fletcher Checksum.')
isisD13LSPTLVType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 9, 2, 1, 4), Unsigned8TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13LSPTLVType.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPTLVType.setDescription('The Type of this TLV.')
isisD13LSPTLVLen = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 9, 2, 1, 5), Unsigned8TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13LSPTLVLen.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPTLVLen.setDescription('The length of this TLV.')
isisD13LSPTLVValue = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 9, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisD13LSPTLVValue.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPTLVValue.setDescription('The value of this TLV.')
isisD13NotificationTable = MibTable((1, 3, 6, 1, 3, 37, 1, 10, 1), )
if mibBuilder.loadTexts: isisD13NotificationTable.setStatus('current')
if mibBuilder.loadTexts: isisD13NotificationTable.setDescription('Objects seen in the most recent notification\n             this instance of the IS-IS protocol.')
isisD13NotificationEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 10, 1, 1), ).setIndexNames((0, "ISIS-D13-MIB", "isisD13SysInstance"))
if mibBuilder.loadTexts: isisD13NotificationEntry.setStatus('current')
if mibBuilder.loadTexts: isisD13NotificationEntry.setDescription('Each entry defines variables relevant to notifications\n             for one instance of the IS-IS protocol.')
isisD13PduLspId = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 10, 1, 1, 1), LinkStatePDUID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisD13PduLspId.setStatus('current')
if mibBuilder.loadTexts: isisD13PduLspId.setDescription('An Octet String that uniquely identifies\n             a Link State PDU.')
isisD13PduFragment = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 10, 1, 1, 2), IsisPDUHeader()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisD13PduFragment.setStatus('current')
if mibBuilder.loadTexts: isisD13PduFragment.setDescription('Holds up to the first 64 bytes of a PDU that\n             triggered the notification.')
isisD13PduFieldLen = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 10, 1, 1, 3), Unsigned8TC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisD13PduFieldLen.setStatus('current')
if mibBuilder.loadTexts: isisD13PduFieldLen.setDescription('Holds the System ID length reported in PDU we received.')
isisD13PduMaxAreaAddress = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 10, 1, 1, 4), Unsigned8TC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisD13PduMaxAreaAddress.setStatus('current')
if mibBuilder.loadTexts: isisD13PduMaxAreaAddress.setDescription('Holds the Max Area Addresses reported in a PDU we received.')
isisD13PduProtocolVersion = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 10, 1, 1, 5), Unsigned8TC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisD13PduProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: isisD13PduProtocolVersion.setDescription('Holds the Protocol version reported in PDU we received.')
isisD13PduLspSize = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisD13PduLspSize.setStatus('current')
if mibBuilder.loadTexts: isisD13PduLspSize.setDescription('Holds the size of LSP we received that is too\n             big to forward.')
isisD13PduOriginatingBufferSize = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 10, 1, 1, 7), Unsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(0, 16000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisD13PduOriginatingBufferSize.setStatus('current')
if mibBuilder.loadTexts: isisD13PduOriginatingBufferSize.setDescription('Holds the size of isisD13SysOrigLSPBuffSize\n             advertised by peer in TLV.')
isisD13PduProtocolsSupported = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 10, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisD13PduProtocolsSupported.setStatus('current')
if mibBuilder.loadTexts: isisD13PduProtocolsSupported.setDescription('The list of protocols supported by an\n             adjacent system.  This may be empty.')
isisD13AdjState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("initializing", 2), ("up", 3), ("failed", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisD13AdjState.setStatus('current')
if mibBuilder.loadTexts: isisD13AdjState.setDescription('The current state of an adjacency.')
isisD13PduRemoteRouterID = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 10, 1, 1, 10), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisD13PduRemoteRouterID.setStatus('current')
if mibBuilder.loadTexts: isisD13PduRemoteRouterID.setDescription('The Router ID of a remote system.\n             If not known, we set this to 0.')
isisD13TrapPrefix = MibIdentifier((1, 3, 6, 1, 3, 37, 2, 0))
isisD13DatabaseOverload = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 1)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13SysLevelOverloadState"))
if mibBuilder.loadTexts: isisD13DatabaseOverload.setStatus('current')
if mibBuilder.loadTexts: isisD13DatabaseOverload.setDescription('This notification is generated when the system\n             enters or leaves the Overload state.  The number\n             of times this has be generated and cleared is kept\n             track of by isisD13SysStatLSPDbaseOloads.')
isisD13ManualAddressDrops = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 2)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13ManAreaAddrExistState"))
if mibBuilder.loadTexts: isisD13ManualAddressDrops.setStatus('current')
if mibBuilder.loadTexts: isisD13ManualAddressDrops.setDescription('This notification is generated when one of the\n             manual areaAddresses assigned to this system is\n             ignored when computing routes.  The object\n             isisD13ManAreaAddrExistState describes the area that\n             has been dropped.\n\n             The number of times this event has been generated\n             is counted by isisD13SysManAddrDropFromAreas.\n\n             This notification is edge triggered, and should not\n             be regenerated until an address that was used in\n             the previous computation has been dropped.')
isisD13CorruptedLSPDetected = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 3)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13PduLspId"))
if mibBuilder.loadTexts: isisD13CorruptedLSPDetected.setStatus('current')
if mibBuilder.loadTexts: isisD13CorruptedLSPDetected.setDescription('This notification is generated when we find that\n             an LSP that was stored in memory has become\n             corrupted.  The number of times this has been\n             generated is counted by isisD13SysCorrLSPs.\n\n             We forward an LSP ID.  We may have independent\n             knowledge of the ID, but in some implementations\n             there is a chance that the ID itself will be\n             corrupted.')
isisD13AttemptToExceedMaxSequence = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 4)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13PduLspId"))
if mibBuilder.loadTexts: isisD13AttemptToExceedMaxSequence.setStatus('current')
if mibBuilder.loadTexts: isisD13AttemptToExceedMaxSequence.setDescription('When the sequence number on an LSP we generate\n             wraps the 32 bit sequence counter, we purge and\n             wait to re-announce this information.  This\n             notification describes that event.  Since these\n             should not be generated rapidly, we generate\n             an event each time this happens.\n\n             While the first 6 bytes of the LSPID are ours,\n             the other two contain useful information.')
isisD13IDLenMismatch = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 5)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13PduFieldLen"), ("ISIS-D13-MIB", "isisD13CircIfIndex"), ("ISIS-D13-MIB", "isisD13PduFragment"))
if mibBuilder.loadTexts: isisD13IDLenMismatch.setStatus('current')
if mibBuilder.loadTexts: isisD13IDLenMismatch.setDescription('A notification sent when we receive a PDU\n             with a different value of the System ID Length.\n             This notification includes the an index to identify\n             the circuit where we saw the PDU and the header of\n             the PDU which may help a network manager identify\n\n\n\n             the source of the confusion.\n\n             This should be an edge-triggered notification.\n             We should not send a second notification about\n             PDUs received from what seem to be the same source.\n             This decision is up to the agent to make, and may\n             be based on the circuit or on some MAC level\n             information.')
isisD13MaxAreaAddressesMismatch = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 6)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13PduMaxAreaAddress"), ("ISIS-D13-MIB", "isisD13CircIfIndex"), ("ISIS-D13-MIB", "isisD13PduFragment"))
if mibBuilder.loadTexts: isisD13MaxAreaAddressesMismatch.setStatus('current')
if mibBuilder.loadTexts: isisD13MaxAreaAddressesMismatch.setDescription('A notification sent when we receive a PDU\n             with a different value of the Maximum Area\n             Addresses.  This notification includes the\n             header of the packet, which may help a\n             network manager identify the source of the\n             confusion.\n\n             This should be an edge-triggered notification.\n             We should not send a second notification about\n             PDUs received from what seem to be the same source.')
isisD13OwnLSPPurge = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 7)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13CircIfIndex"), ("ISIS-D13-MIB", "isisD13PduLspId"), ("ISIS-D13-MIB", "isisD13PduRemoteRouterID"))
if mibBuilder.loadTexts: isisD13OwnLSPPurge.setStatus('current')
if mibBuilder.loadTexts: isisD13OwnLSPPurge.setDescription('A notification sent when we receive a PDU\n             with our systemID and zero age.  This\n             notification includes the circuit Index\n             and router ID from the LSP, if available,\n\n\n\n             which may help a network manager\n             identify the source of the confusion.')
isisD13SequenceNumberSkip = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 8)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13CircIfIndex"), ("ISIS-D13-MIB", "isisD13PduLspId"))
if mibBuilder.loadTexts: isisD13SequenceNumberSkip.setStatus('current')
if mibBuilder.loadTexts: isisD13SequenceNumberSkip.setDescription('When we receive an LSP with out System ID\n             and different contents, we may need to reissue\n             the LSP with a higher sequence number.\n\n             We send this notification if we need to increase\n             the sequence number by more than one.  If two\n             Intermediate Systems are configured with the same\n             System ID, this notification will fire.')
isisD13AuthenticationTypeFailure = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 9)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13CircIfIndex"), ("ISIS-D13-MIB", "isisD13PduFragment"))
if mibBuilder.loadTexts: isisD13AuthenticationTypeFailure.setStatus('current')
if mibBuilder.loadTexts: isisD13AuthenticationTypeFailure.setDescription('A notification sent when we receive a PDU\n             with the wrong authentication type field.\n             This notification includes the header of the\n             packet, which may help a network manager\n             identify the source of the confusion.\n\n             This should be an edge-triggered notification.\n             We should not send a second notification about\n             PDUs received from what seem to be the same source.')
isisD13AuthenticationFailure = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 10)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13CircIfIndex"), ("ISIS-D13-MIB", "isisD13PduFragment"))
if mibBuilder.loadTexts: isisD13AuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: isisD13AuthenticationFailure.setDescription('A notification sent when we receive a PDU\n             with incorrect authentication information\n             field.  This notification includes the header\n             of the packet, which may help a network manager\n             identify the source of the confusion.\n\n             This should be an edge-triggered notification.\n             We should not send a second notification about\n             PDUs received from what seem to be the same source.')
isisD13VersionSkew = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 11)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13CircIfIndex"), ("ISIS-D13-MIB", "isisD13PduProtocolVersion"), ("ISIS-D13-MIB", "isisD13PduFragment"))
if mibBuilder.loadTexts: isisD13VersionSkew.setStatus('current')
if mibBuilder.loadTexts: isisD13VersionSkew.setDescription('A notification sent when we receive a Hello\n             PDU from an IS running a different version\n             of the protocol. This notification includes\n             the header of the packet, which may help a\n             network manager identify the source of the\n             confusion.\n\n             This should be an edge-triggered notification.\n             We should not send a second notification about\n             PDUs received from what seem to be the same source.\n             This decision is up to the agent to make, and may\n             be based on the circuit or on some MAC level\n             information.')
isisD13AreaMismatch = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 12)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13CircIfIndex"), ("ISIS-D13-MIB", "isisD13PduFragment"))
if mibBuilder.loadTexts: isisD13AreaMismatch.setStatus('current')
if mibBuilder.loadTexts: isisD13AreaMismatch.setDescription('A notification sent when we receive a Hello\n             PDU from an IS which does not share any\n             area address. This notification includes\n             the header of the packet, which may help a\n             network manager identify the source of the\n             confusion.\n\n             This should be an edge-triggered notification.\n             We should not send a second notification about\n             PDUs received from what seem to be the same source.\n             This decision is up to the agent to make, and may\n             be based on the circuit or on some MAC level\n             information.')
isisD13RejectedAdjacency = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 13)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13CircIfIndex"), ("ISIS-D13-MIB", "isisD13PduFragment"))
if mibBuilder.loadTexts: isisD13RejectedAdjacency.setStatus('current')
if mibBuilder.loadTexts: isisD13RejectedAdjacency.setDescription('A notification sent when we receive a Hello\n             PDU from an IS, but do not establish an\n             adjacency for some reason.\n\n             This should be an edge-triggered notification.\n             We should not send a second notification about\n             PDUs received from the same source.')
isisD13LSPTooLargeToPropagate = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 14)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13CircIfIndex"), ("ISIS-D13-MIB", "isisD13PduLspSize"), ("ISIS-D13-MIB", "isisD13PduLspId"))
if mibBuilder.loadTexts: isisD13LSPTooLargeToPropagate.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPTooLargeToPropagate.setDescription('A notification sent when we attempt to propagate\n             an LSP which is larger than the dataLinkBlockSize\n             for the circuit.\n             This should be an edge-triggered notification.\n             We should not send a second notification about\n             PDUs received from the same source.')
isisD13OrigLSPBuffSizeMismatch = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 15)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13CircIfIndex"), ("ISIS-D13-MIB", "isisD13PduLspId"), ("ISIS-D13-MIB", "isisD13PduOriginatingBufferSize"))
if mibBuilder.loadTexts: isisD13OrigLSPBuffSizeMismatch.setStatus('current')
if mibBuilder.loadTexts: isisD13OrigLSPBuffSizeMismatch.setDescription('A notification sent when a Level 1 LSP or Level\n             2 LSP is received which is larger than the local\n             value for isisD13OriginatingBufferSize, or when an\n             LSP is received containing the isisD13OriginatingBufferSize\n             option and the value in the PDU option field does\n             not match the local value for isisD13OriginatingBufferSize.\n             We pass up the size from the option field or the\n             size of the LSP that exceeds our configuration.\n\n             This should be an edge-triggered notification.\n             We should not send a second notification about\n             PDUs received from the same source.')
isisD13ProtocolsSupportedMismatch = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 16)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13CircIfIndex"), ("ISIS-D13-MIB", "isisD13PduProtocolsSupported"), ("ISIS-D13-MIB", "isisD13PduLspId"), ("ISIS-D13-MIB", "isisD13PduFragment"))
if mibBuilder.loadTexts: isisD13ProtocolsSupportedMismatch.setStatus('current')
if mibBuilder.loadTexts: isisD13ProtocolsSupportedMismatch.setDescription('A notification sent when a non-pseudonode\n             segment 0 LSP is received that has no matching\n             protocols supported.\n             This may be because the system does not generate\n             the field, or because there are no common elements.\n             The list of protocols supported should be included\n             in the notification: it may be empty if the TLV\n             is not supported, or if the TLV is empty.\n\n             This should be an edge-triggered notification.\n             We should not send a second notification about\n             PDUs received from the same source.')
isisD13AdjacencyChange = NotificationType((1, 3, 6, 1, 3, 37, 2, 0, 17)).setObjects(("ISIS-D13-MIB", "isisD13SysInstance"), ("ISIS-D13-MIB", "isisD13SysLevelIndex"), ("ISIS-D13-MIB", "isisD13CircIfIndex"), ("ISIS-D13-MIB", "isisD13PduLspId"), ("ISIS-D13-MIB", "isisD13AdjState"))
if mibBuilder.loadTexts: isisD13AdjacencyChange.setStatus('current')
if mibBuilder.loadTexts: isisD13AdjacencyChange.setDescription('A notification sent when an adjacency changes\n             state, entering or leaving state up.\n             The first 6 bytes of the isisD13PduLspId are the\n             SystemID of the adjacent IS.\n             The isisD13AdjState is the new state of the adjacency.')
isisD13Groups = MibIdentifier((1, 3, 6, 1, 3, 37, 3, 1))
isisD13Compliances = MibIdentifier((1, 3, 6, 1, 3, 37, 3, 2))
isisD13Compliance = ModuleCompliance((1, 3, 6, 1, 3, 37, 3, 2, 1)).setObjects(("ISIS-D13-MIB", "isisD13SystemGroup"), ("ISIS-D13-MIB", "isisD13CircuitGroup"), ("ISIS-D13-MIB", "isisD13ISAdjGroup"), ("ISIS-D13-MIB", "isisD13NotificationObjectGroup"), ("ISIS-D13-MIB", "isisD13NotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisD13Compliance = isisD13Compliance.setStatus('current')
if mibBuilder.loadTexts: isisD13Compliance.setDescription('The compliance statement for agents that support\n             the IS-IS MIB')
isisD13AdvancedCompliance = ModuleCompliance((1, 3, 6, 1, 3, 37, 3, 2, 2)).setObjects(("ISIS-D13-MIB", "isisD13SystemGroup"), ("ISIS-D13-MIB", "isisD13CircuitGroup"), ("ISIS-D13-MIB", "isisD13ISAdjGroup"), ("ISIS-D13-MIB", "isisD13NotificationObjectGroup"), ("ISIS-D13-MIB", "isisD13NotificationGroup"), ("ISIS-D13-MIB", "isisD13ISPDUCounterGroup"), ("ISIS-D13-MIB", "isisD13RATableGroup"), ("ISIS-D13-MIB", "isisD13ISIPRADestGroup"), ("ISIS-D13-MIB", "isisD13LSPGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisD13AdvancedCompliance = isisD13AdvancedCompliance.setStatus('current')
if mibBuilder.loadTexts: isisD13AdvancedCompliance.setDescription('The compliance statement for agents that support\n             the IS-IS MIB')
isisD13SystemGroup = ObjectGroup((1, 3, 6, 1, 3, 37, 3, 1, 1)).setObjects(("ISIS-D13-MIB", "isisD13SysVersion"), ("ISIS-D13-MIB", "isisD13SysType"), ("ISIS-D13-MIB", "isisD13SysID"), ("ISIS-D13-MIB", "isisD13SysMaxPathSplits"), ("ISIS-D13-MIB", "isisD13SysMaxLSPGenInt"), ("ISIS-D13-MIB", "isisD13SysPollESHelloRate"), ("ISIS-D13-MIB", "isisD13SysWaitTime"), ("ISIS-D13-MIB", "isisD13SysAdminState"), ("ISIS-D13-MIB", "isisD13SysLogAdjacencyChanges"), ("ISIS-D13-MIB", "isisD13SysNextCircIndex"), ("ISIS-D13-MIB", "isisD13SysExistState"), ("ISIS-D13-MIB", "isisD13SysL2toL1Leaking"), ("ISIS-D13-MIB", "isisD13SysMaxAge"), ("ISIS-D13-MIB", "isisD13SysLevelOrigLSPBuffSize"), ("ISIS-D13-MIB", "isisD13SysLevelMinLSPGenInt"), ("ISIS-D13-MIB", "isisD13SysLevelOverloadState"), ("ISIS-D13-MIB", "isisD13SysLevelSetOverload"), ("ISIS-D13-MIB", "isisD13SysLevelSetOverloadUntil"), ("ISIS-D13-MIB", "isisD13SysLevelMetricStyle"), ("ISIS-D13-MIB", "isisD13SysLevelSPFConsiders"), ("ISIS-D13-MIB", "isisD13SysLevelTEEnabled"), ("ISIS-D13-MIB", "isisD13SysReceiveLSPBufferSize"), ("ISIS-D13-MIB", "isisD13ManAreaAddrExistState"), ("ISIS-D13-MIB", "isisD13AreaAddr"), ("ISIS-D13-MIB", "isisD13SysProtSuppExistState"), ("ISIS-D13-MIB", "isisD13SummAddrExistState"), ("ISIS-D13-MIB", "isisD13SummAddrMetric"), ("ISIS-D13-MIB", "isisD13SummAddrFullMetric"), ("ISIS-D13-MIB", "isisD13RedistributeAddrExistState"), ("ISIS-D13-MIB", "isisD13RouterHostName"), ("ISIS-D13-MIB", "isisD13RouterID"), ("ISIS-D13-MIB", "isisD13SysStatCorrLSPs"), ("ISIS-D13-MIB", "isisD13SysStatLSPDbaseOloads"), ("ISIS-D13-MIB", "isisD13SysStatManAddrDropFromAreas"), ("ISIS-D13-MIB", "isisD13SysStatAttmptToExMaxSeqNums"), ("ISIS-D13-MIB", "isisD13SysStatSeqNumSkips"), ("ISIS-D13-MIB", "isisD13SysStatOwnLSPPurges"), ("ISIS-D13-MIB", "isisD13SysStatIDFieldLenMismatches"), ("ISIS-D13-MIB", "isisD13SysStatMaxAreaAddrMismatches"), ("ISIS-D13-MIB", "isisD13SysStatPartChanges"), ("ISIS-D13-MIB", "isisD13SysStatSPFRuns"), ("ISIS-D13-MIB", "isisD13SysStatAuthTypeFails"), ("ISIS-D13-MIB", "isisD13SysStatAuthFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisD13SystemGroup = isisD13SystemGroup.setStatus('current')
if mibBuilder.loadTexts: isisD13SystemGroup.setDescription('The collections of objects used to manage an IS-IS router.')
isisD13CircuitGroup = ObjectGroup((1, 3, 6, 1, 3, 37, 3, 1, 2)).setObjects(("ISIS-D13-MIB", "isisD13CircIfSubIndex"), ("ISIS-D13-MIB", "isisD13CircAdminState"), ("ISIS-D13-MIB", "isisD13CircExistState"), ("ISIS-D13-MIB", "isisD13CircType"), ("ISIS-D13-MIB", "isisD13CircExtDomain"), ("ISIS-D13-MIB", "isisD13CircAdjChanges"), ("ISIS-D13-MIB", "isisD13CircNumAdj"), ("ISIS-D13-MIB", "isisD13CircInitFails"), ("ISIS-D13-MIB", "isisD13CircRejAdjs"), ("ISIS-D13-MIB", "isisD13CircIDFieldLenMismatches"), ("ISIS-D13-MIB", "isisD13CircMaxAreaAddrMismatches"), ("ISIS-D13-MIB", "isisD13CircAuthTypeFails"), ("ISIS-D13-MIB", "isisD13CircAuthFails"), ("ISIS-D13-MIB", "isisD13CircLANDesISChanges"), ("ISIS-D13-MIB", "isisD13CircLevel"), ("ISIS-D13-MIB", "isisD13CircPassiveCircuit"), ("ISIS-D13-MIB", "isisD13CircMeshGroupEnabled"), ("ISIS-D13-MIB", "isisD13CircMeshGroup"), ("ISIS-D13-MIB", "isisD13CircSmallHellos"), ("ISIS-D13-MIB", "isisD13CircLastUpTime"), ("ISIS-D13-MIB", "isisD13Circ3WayEnabled"), ("ISIS-D13-MIB", "isisD13CircExtendedCircID"), ("ISIS-D13-MIB", "isisD13CircIfIndex"), ("ISIS-D13-MIB", "isisD13CircLevelMetric"), ("ISIS-D13-MIB", "isisD13CircLevelWideMetric"), ("ISIS-D13-MIB", "isisD13CircLevelISPriority"), ("ISIS-D13-MIB", "isisD13CircLevelIDOctet"), ("ISIS-D13-MIB", "isisD13CircLevelID"), ("ISIS-D13-MIB", "isisD13CircLevelDesIS"), ("ISIS-D13-MIB", "isisD13CircLevelHelloMultiplier"), ("ISIS-D13-MIB", "isisD13CircLevelHelloTimer"), ("ISIS-D13-MIB", "isisD13CircLevelDRHelloTimer"), ("ISIS-D13-MIB", "isisD13CircLevelLSPThrottle"), ("ISIS-D13-MIB", "isisD13CircLevelMinLSPRetransInt"), ("ISIS-D13-MIB", "isisD13CircLevelCSNPInterval"), ("ISIS-D13-MIB", "isisD13CircLevelPartSNPInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisD13CircuitGroup = isisD13CircuitGroup.setStatus('current')
if mibBuilder.loadTexts: isisD13CircuitGroup.setDescription('The collection of objects used to describe in IS-IS Circuit.')
isisD13ISAdjGroup = ObjectGroup((1, 3, 6, 1, 3, 37, 3, 1, 3)).setObjects(("ISIS-D13-MIB", "isisD13ISAdjState"), ("ISIS-D13-MIB", "isisD13ISAdj3WayState"), ("ISIS-D13-MIB", "isisD13ISAdjNeighSNPAAddress"), ("ISIS-D13-MIB", "isisD13ISAdjNeighSysType"), ("ISIS-D13-MIB", "isisD13ISAdjNeighSysID"), ("ISIS-D13-MIB", "isisD13ISAdjNbrExtendedCircID"), ("ISIS-D13-MIB", "isisD13ISAdjUsage"), ("ISIS-D13-MIB", "isisD13ISAdjHoldTimer"), ("ISIS-D13-MIB", "isisD13ISAdjNeighPriority"), ("ISIS-D13-MIB", "isisD13ISAdjLastUpTime"), ("ISIS-D13-MIB", "isisD13ISAdjAreaAddress"), ("ISIS-D13-MIB", "isisD13ISAdjIPAddressType"), ("ISIS-D13-MIB", "isisD13ISAdjIPAddress"), ("ISIS-D13-MIB", "isisD13ISAdjProtSuppProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisD13ISAdjGroup = isisD13ISAdjGroup.setStatus('current')
if mibBuilder.loadTexts: isisD13ISAdjGroup.setDescription('The collections of objects used to manage an IS-IS Adjacency.')
isisD13NotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 3, 37, 3, 1, 4)).setObjects(("ISIS-D13-MIB", "isisD13PduLspId"), ("ISIS-D13-MIB", "isisD13PduFragment"), ("ISIS-D13-MIB", "isisD13PduFieldLen"), ("ISIS-D13-MIB", "isisD13PduMaxAreaAddress"), ("ISIS-D13-MIB", "isisD13PduProtocolVersion"), ("ISIS-D13-MIB", "isisD13PduLspSize"), ("ISIS-D13-MIB", "isisD13PduOriginatingBufferSize"), ("ISIS-D13-MIB", "isisD13PduProtocolsSupported"), ("ISIS-D13-MIB", "isisD13AdjState"), ("ISIS-D13-MIB", "isisD13PduRemoteRouterID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisD13NotificationObjectGroup = isisD13NotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: isisD13NotificationObjectGroup.setDescription('The objects used to record notification parameters.')
isisD13NotificationGroup = NotificationGroup((1, 3, 6, 1, 3, 37, 3, 1, 5)).setObjects(("ISIS-D13-MIB", "isisD13DatabaseOverload"), ("ISIS-D13-MIB", "isisD13ManualAddressDrops"), ("ISIS-D13-MIB", "isisD13CorruptedLSPDetected"), ("ISIS-D13-MIB", "isisD13AttemptToExceedMaxSequence"), ("ISIS-D13-MIB", "isisD13IDLenMismatch"), ("ISIS-D13-MIB", "isisD13MaxAreaAddressesMismatch"), ("ISIS-D13-MIB", "isisD13OwnLSPPurge"), ("ISIS-D13-MIB", "isisD13SequenceNumberSkip"), ("ISIS-D13-MIB", "isisD13AuthenticationTypeFailure"), ("ISIS-D13-MIB", "isisD13AuthenticationFailure"), ("ISIS-D13-MIB", "isisD13VersionSkew"), ("ISIS-D13-MIB", "isisD13AreaMismatch"), ("ISIS-D13-MIB", "isisD13RejectedAdjacency"), ("ISIS-D13-MIB", "isisD13LSPTooLargeToPropagate"), ("ISIS-D13-MIB", "isisD13OrigLSPBuffSizeMismatch"), ("ISIS-D13-MIB", "isisD13ProtocolsSupportedMismatch"), ("ISIS-D13-MIB", "isisD13AdjacencyChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisD13NotificationGroup = isisD13NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: isisD13NotificationGroup.setDescription('The collections of notifications sent by an IS.')
isisD13ISPDUCounterGroup = ObjectGroup((1, 3, 6, 1, 3, 37, 3, 1, 6)).setObjects(("ISIS-D13-MIB", "isisD13PacketCountIIHello"), ("ISIS-D13-MIB", "isisD13PacketCountISHello"), ("ISIS-D13-MIB", "isisD13PacketCountESHello"), ("ISIS-D13-MIB", "isisD13PacketCountLSP"), ("ISIS-D13-MIB", "isisD13PacketCountCSNP"), ("ISIS-D13-MIB", "isisD13PacketCountPSNP"), ("ISIS-D13-MIB", "isisD13PacketCountUnknown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisD13ISPDUCounterGroup = isisD13ISPDUCounterGroup.setStatus('current')
if mibBuilder.loadTexts: isisD13ISPDUCounterGroup.setDescription('The collections of objects used to count protocol PDUs.')
isisD13RATableGroup = ObjectGroup((1, 3, 6, 1, 3, 37, 3, 1, 7)).setObjects(("ISIS-D13-MIB", "isisD13RAExistState"), ("ISIS-D13-MIB", "isisD13RAAdminState"), ("ISIS-D13-MIB", "isisD13RAAddrPrefix"), ("ISIS-D13-MIB", "isisD13RAMapType"), ("ISIS-D13-MIB", "isisD13RAMetric"), ("ISIS-D13-MIB", "isisD13RAMetricType"), ("ISIS-D13-MIB", "isisD13RASNPAAddress"), ("ISIS-D13-MIB", "isisD13RASNPAMask"), ("ISIS-D13-MIB", "isisD13RASNPAPrefix"), ("ISIS-D13-MIB", "isisD13RAType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisD13RATableGroup = isisD13RATableGroup.setStatus('current')
if mibBuilder.loadTexts: isisD13RATableGroup.setDescription('The collections of objects used to manage the\n             reachable NSAP prefixes.')
isisD13ISIPRADestGroup = ObjectGroup((1, 3, 6, 1, 3, 37, 3, 1, 8)).setObjects(("ISIS-D13-MIB", "isisD13IPRANextHopType"), ("ISIS-D13-MIB", "isisD13IPRANextHop"), ("ISIS-D13-MIB", "isisD13IPRAType"), ("ISIS-D13-MIB", "isisD13IPRAExistState"), ("ISIS-D13-MIB", "isisD13IPRAAdminState"), ("ISIS-D13-MIB", "isisD13IPRAMetric"), ("ISIS-D13-MIB", "isisD13IPRAFullMetric"), ("ISIS-D13-MIB", "isisD13IPRAMetricType"), ("ISIS-D13-MIB", "isisD13IPRASNPAAddress"), ("ISIS-D13-MIB", "isisD13IPRASourceType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisD13ISIPRADestGroup = isisD13ISIPRADestGroup.setStatus('current')
if mibBuilder.loadTexts: isisD13ISIPRADestGroup.setDescription('The collections of objects used to manage configured\n             IP addresses.')
isisD13LSPGroup = ObjectGroup((1, 3, 6, 1, 3, 37, 3, 1, 9)).setObjects(("ISIS-D13-MIB", "isisD13LSPSeq"), ("ISIS-D13-MIB", "isisD13LSPZeroLife"), ("ISIS-D13-MIB", "isisD13LSPChecksum"), ("ISIS-D13-MIB", "isisD13LSPLifetimeRemain"), ("ISIS-D13-MIB", "isisD13LSPPDULength"), ("ISIS-D13-MIB", "isisD13LSPAttributes"), ("ISIS-D13-MIB", "isisD13LSPTLVSeq"), ("ISIS-D13-MIB", "isisD13LSPTLVChecksum"), ("ISIS-D13-MIB", "isisD13LSPTLVType"), ("ISIS-D13-MIB", "isisD13LSPTLVLen"), ("ISIS-D13-MIB", "isisD13LSPTLVValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisD13LSPGroup = isisD13LSPGroup.setStatus('current')
if mibBuilder.loadTexts: isisD13LSPGroup.setDescription('The collections of objects used to observe the LSP\n             Data Base.')
mibBuilder.exportSymbols("ISIS-D13-MIB", isisD13ISAdjGroup=isisD13ISAdjGroup, isisD13PduMaxAreaAddress=isisD13PduMaxAreaAddress, isisD13SysStatIDFieldLenMismatches=isisD13SysStatIDFieldLenMismatches, isisD13PacketCountLevel=isisD13PacketCountLevel, isisD13Counters=isisD13Counters, isisD13LSPLifetimeRemain=isisD13LSPLifetimeRemain, isisD13SysMaxPathSplits=isisD13SysMaxPathSplits, OSINSAddress=OSINSAddress, isisD13CircIfSubIndex=isisD13CircIfSubIndex, isisD13ISAdjEntry=isisD13ISAdjEntry, isisD13CircLevelIndex=isisD13CircLevelIndex, isisD13SysLevelOrigLSPBuffSize=isisD13SysLevelOrigLSPBuffSize, isisD13SysStatManAddrDropFromAreas=isisD13SysStatManAddrDropFromAreas, isisD13CircLevelHelloMultiplier=isisD13CircLevelHelloMultiplier, isisD13OwnLSPPurge=isisD13OwnLSPPurge, isisD13SysProtSuppEntry=isisD13SysProtSuppEntry, isisD13ManAreaAddr=isisD13ManAreaAddr, isisD13Compliance=isisD13Compliance, isisD13CircNumAdj=isisD13CircNumAdj, isisD13CircRejAdjs=isisD13CircRejAdjs, isisD13ISAdjAreaAddrEntry=isisD13ISAdjAreaAddrEntry, isisD13CircLevelIDOctet=isisD13CircLevelIDOctet, isisD13IPRADest=isisD13IPRADest, isisD13Notification=isisD13Notification, isisD13CircIfIndex=isisD13CircIfIndex, isisD13LSPChecksum=isisD13LSPChecksum, MetricStyle=MetricStyle, FullMetric=FullMetric, isisD13Conformance=isisD13Conformance, isisD13ISAdjIPAddress=isisD13ISAdjIPAddress, Unsigned16TC=Unsigned16TC, isisD13RAEntry=isisD13RAEntry, isisD13PduOriginatingBufferSize=isisD13PduOriginatingBufferSize, isisD13NotificationObjectGroup=isisD13NotificationObjectGroup, isisD13SysWaitTime=isisD13SysWaitTime, isisD13SummAddressType=isisD13SummAddressType, isisD13CircExtDomain=isisD13CircExtDomain, isisD13LSPTLVEntry=isisD13LSPTLVEntry, isisD13Circ3WayEnabled=isisD13Circ3WayEnabled, isisD13IPRAFullMetric=isisD13IPRAFullMetric, ISLevel=ISLevel, isisD13CircMaxAreaAddrMismatches=isisD13CircMaxAreaAddrMismatches, isisD13CircAdminState=isisD13CircAdminState, isisD13RAMetric=isisD13RAMetric, isisD13Circ=isisD13Circ, isisD13PacketCounterTable=isisD13PacketCounterTable, isisD13PacketCountPSNP=isisD13PacketCountPSNP, isisD13ISAdjNeighPriority=isisD13ISAdjNeighPriority, isisD13RedistributeAddrPrefixLen=isisD13RedistributeAddrPrefixLen, isisD13RouterSysID=isisD13RouterSysID, isisD13RAExistState=isisD13RAExistState, isisD13CircLevelMinLSPRetransInt=isisD13CircLevelMinLSPRetransInt, SupportedProtocol=SupportedProtocol, isisD13LSPPDULength=isisD13LSPPDULength, isisD13Objects=isisD13Objects, isisD13CircPassiveCircuit=isisD13CircPassiveCircuit, isisD13SummAddress=isisD13SummAddress, isisD13SysPollESHelloRate=isisD13SysPollESHelloRate, isisD13CircLevelValues=isisD13CircLevelValues, isisD13ReachAddr=isisD13ReachAddr, isisD13SysVersion=isisD13SysVersion, isisD13RouterLevel=isisD13RouterLevel, isisD13SysLevelMetricStyle=isisD13SysLevelMetricStyle, isisD13DatabaseOverload=isisD13DatabaseOverload, isisD13AuthenticationFailure=isisD13AuthenticationFailure, isisD13RouterTable=isisD13RouterTable, isisD13LSPDataBase=isisD13LSPDataBase, isisD13AdvancedCompliance=isisD13AdvancedCompliance, isisD13IPRASNPAAddress=isisD13IPRASNPAAddress, isisD13SysLevelTable=isisD13SysLevelTable, isisD13CircLevelWideMetric=isisD13CircLevelWideMetric, isisD13CircuitCounterTable=isisD13CircuitCounterTable, isisD13CircTable=isisD13CircTable, isisD13PduRemoteRouterID=isisD13PduRemoteRouterID, isisD13SysExistState=isisD13SysExistState, isisD13CircType=isisD13CircType, isisD13ManAreaAddrTable=isisD13ManAreaAddrTable, isisD13SysL2toL1Leaking=isisD13SysL2toL1Leaking, isisD13ISAdjIPAddrEntry=isisD13ISAdjIPAddrEntry, isisD13ISAdj=isisD13ISAdj, LevelState=LevelState, isisD13NotificationEntry=isisD13NotificationEntry, isisD13IPRANextHop=isisD13IPRANextHop, isisD13ManAreaAddrEntry=isisD13ManAreaAddrEntry, isisD13IPRAEntry=isisD13IPRAEntry, MetricType=MetricType, isisD13IPRAType=isisD13IPRAType, isisD13Groups=isisD13Groups, isisD13SysStatCorrLSPs=isisD13SysStatCorrLSPs, isisD13CircIndex=isisD13CircIndex, isisD13CircLevelTable=isisD13CircLevelTable, isisD13LSPTLVSeq=isisD13LSPTLVSeq, isisD13ISAdjProtSuppTable=isisD13ISAdjProtSuppTable, isisD13RedistributeAddrType=isisD13RedistributeAddrType, isisD13SysLevelIndex=isisD13SysLevelIndex, isisD13CircLevel=isisD13CircLevel, isisD13AuthenticationTypeFailure=isisD13AuthenticationTypeFailure, isisD13ISAdjHoldTimer=isisD13ISAdjHoldTimer, isisD13ISAdj3WayState=isisD13ISAdj3WayState, Unsigned8TC=Unsigned8TC, isisD13AreaAddrEntry=isisD13AreaAddrEntry, isisD13SysMaxLSPGenInt=isisD13SysMaxLSPGenInt, isisD13ISAdjNeighSNPAAddress=isisD13ISAdjNeighSNPAAddress, isisD13ISAdjAreaAddrIndex=isisD13ISAdjAreaAddrIndex, LinkStatePDUID=LinkStatePDUID, isisD13SystemCounterEntry=isisD13SystemCounterEntry, isisD13SummAddrTable=isisD13SummAddrTable, isisD13RASNPAAddress=isisD13RASNPAAddress, isisD13LSPTLVType=isisD13LSPTLVType, isisD13ManualAddressDrops=isisD13ManualAddressDrops, isisD13ISPDUCounterGroup=isisD13ISPDUCounterGroup, isisD13SysReceiveLSPBufferSize=isisD13SysReceiveLSPBufferSize, isisD13LSPID=isisD13LSPID, isisD13SysTable=isisD13SysTable, isisD13CircInitFails=isisD13CircInitFails, ISPriority=ISPriority, isisD13ISAdjTable=isisD13ISAdjTable, isisD13OrigLSPBuffSizeMismatch=isisD13OrigLSPBuffSizeMismatch, isisD13LSPGroup=isisD13LSPGroup, isisD13ManAreaAddrExistState=isisD13ManAreaAddrExistState, isisD13ISIPRADestGroup=isisD13ISIPRADestGroup, isisD13CircExtendedCircID=isisD13CircExtendedCircID, isisD13CircLevelID=isisD13CircLevelID, isisD13PduProtocolVersion=isisD13PduProtocolVersion, isisD13SysStatOwnLSPPurges=isisD13SysStatOwnLSPPurges, isisD13PduLspSize=isisD13PduLspSize, CircuitID=CircuitID, isisD13SysStatPartChanges=isisD13SysStatPartChanges, isisD13SysNextCircIndex=isisD13SysNextCircIndex, AdminState=AdminState, isisD13AreaAddr=isisD13AreaAddr, isisD13SysStatAuthTypeFails=isisD13SysStatAuthTypeFails, isisD13RAMetricType=isisD13RAMetricType, isisD13RedistributeAddrAddress=isisD13RedistributeAddrAddress, isisD13IPRAAdminState=isisD13IPRAAdminState, isisD13SysLevel=isisD13SysLevel, isisD13LSPTLVLen=isisD13LSPTLVLen, isisD13AdjState=isisD13AdjState, isisD13ProtocolsSupportedMismatch=isisD13ProtocolsSupportedMismatch, isisD13NotificationGroup=isisD13NotificationGroup, PYSNMP_MODULE_ID=isisD13MIB, isisD13SystemCounterTable=isisD13SystemCounterTable, isisD13RATable=isisD13RATable, isisD13PacketCountISHello=isisD13PacketCountISHello, isisD13LSPTLVValue=isisD13LSPTLVValue, isisD13SysAdminState=isisD13SysAdminState, WideMetric=WideMetric, isisD13IPReachAddr=isisD13IPReachAddr, isisD13CircLevelPartSNPInterval=isisD13CircLevelPartSNPInterval, isisD13ISAdjIPAddressType=isisD13ISAdjIPAddressType, isisD13CircLevelDesIS=isisD13CircLevelDesIS, isisD13SysProtSuppTable=isisD13SysProtSuppTable, isisD13System=isisD13System, isisD13CircLevelMetric=isisD13CircLevelMetric, isisD13ISAdjState=isisD13ISAdjState, isisD13ISAdjProtSuppProtocol=isisD13ISAdjProtSuppProtocol, isisD13LSPSummaryTable=isisD13LSPSummaryTable, isisD13LSPTooLargeToPropagate=isisD13LSPTooLargeToPropagate, isisD13ISAdjAreaAddress=isisD13ISAdjAreaAddress, isisD13RejectedAdjacency=isisD13RejectedAdjacency, isisD13LSPTLVIndex=isisD13LSPTLVIndex, isisD13SysLevelOverloadState=isisD13SysLevelOverloadState, isisD13CircMeshGroupEnabled=isisD13CircMeshGroupEnabled, isisD13SysProtSuppProtocol=isisD13SysProtSuppProtocol, isisD13ISAdjNeighSysType=isisD13ISAdjNeighSysType, isisD13ISAdjIPAddrTable=isisD13ISAdjIPAddrTable, isisD13LSPTLVChecksum=isisD13LSPTLVChecksum, isisD13SysLevelMinLSPGenInt=isisD13SysLevelMinLSPGenInt, isisD13RASNPAPrefix=isisD13RASNPAPrefix, isisD13CircuitCounterEntry=isisD13CircuitCounterEntry, isisD13CircIDFieldLenMismatches=isisD13CircIDFieldLenMismatches, isisD13ISAdjAreaAddrTable=isisD13ISAdjAreaAddrTable, isisD13SysID=isisD13SysID, isisD13CircSmallHellos=isisD13CircSmallHellos, isisD13ISAdjIndex=isisD13ISAdjIndex, isisD13IPRAMetric=isisD13IPRAMetric, isisD13SummAddrMetric=isisD13SummAddrMetric, isisD13RAMapType=isisD13RAMapType, isisD13MaxAreaAddressesMismatch=isisD13MaxAreaAddressesMismatch, isisD13SysMaxAge=isisD13SysMaxAge, isisD13ISAdjNeighSysID=isisD13ISAdjNeighSysID, isisD13LSPZeroLife=isisD13LSPZeroLife, isisD13SysProtSuppExistState=isisD13SysProtSuppExistState, isisD13CircAuthTypeFails=isisD13CircAuthTypeFails, isisD13IDLenMismatch=isisD13IDLenMismatch, isisD13SysStatAttmptToExMaxSeqNums=isisD13SysStatAttmptToExMaxSeqNums, isisD13Notifications=isisD13Notifications, isisD13LSPTLVTable=isisD13LSPTLVTable, isisD13SummAddrExistState=isisD13SummAddrExistState, isisD13RAType=isisD13RAType, isisD13SysStatSeqNumSkips=isisD13SysStatSeqNumSkips, DefaultMetric=DefaultMetric, isisD13ISAdjProtSuppEntry=isisD13ISAdjProtSuppEntry, isisD13SysLevelSetOverload=isisD13SysLevelSetOverload, isisD13RAIndex=isisD13RAIndex, isisD13PacketCountCSNP=isisD13PacketCountCSNP, isisD13RAAdminState=isisD13RAAdminState, isisD13IPRANextHopType=isisD13IPRANextHopType, isisD13PduLspId=isisD13PduLspId, isisD13PacketCountDirection=isisD13PacketCountDirection, isisD13LSPLevel=isisD13LSPLevel, isisD13CorruptedLSPDetected=isisD13CorruptedLSPDetected, isisD13RedistributeAddrTable=isisD13RedistributeAddrTable, isisD13RouterEntry=isisD13RouterEntry, isisD13CircLevelISPriority=isisD13CircLevelISPriority, isisD13SystemGroup=isisD13SystemGroup, isisD13CircLevelDRHelloTimer=isisD13CircLevelDRHelloTimer, isisD13SysStatSPFRuns=isisD13SysStatSPFRuns, isisD13SummAddrPrefixLen=isisD13SummAddrPrefixLen, isisD13SysStatLSPDbaseOloads=isisD13SysStatLSPDbaseOloads, isisD13PacketCountIIHello=isisD13PacketCountIIHello, IsisPDUHeader=IsisPDUHeader, isisD13RouterID=isisD13RouterID, isisD13ISAdjUsage=isisD13ISAdjUsage, isisD13PduFieldLen=isisD13PduFieldLen, isisD13CircMeshGroup=isisD13CircMeshGroup, isisD13AreaMismatch=isisD13AreaMismatch, isisD13SequenceNumberSkip=isisD13SequenceNumberSkip, isisD13PduProtocolsSupported=isisD13PduProtocolsSupported, isisD13SysLevelSetOverloadUntil=isisD13SysLevelSetOverloadUntil, isisD13PduFragment=isisD13PduFragment, isisD13SummAddrEntry=isisD13SummAddrEntry, isisD13CircLevelCSNPInterval=isisD13CircLevelCSNPInterval, isisD13CircEntry=isisD13CircEntry, isisD13PacketCountUnknown=isisD13PacketCountUnknown, isisD13SysType=isisD13SysType, isisD13ISAdjIPAddrIndex=isisD13ISAdjIPAddrIndex, isisD13AttemptToExceedMaxSequence=isisD13AttemptToExceedMaxSequence, isisD13SysLogAdjacencyChanges=isisD13SysLogAdjacencyChanges, isisD13CircuitGroup=isisD13CircuitGroup, isisD13CircLevelLSPThrottle=isisD13CircLevelLSPThrottle, isisD13CircAuthFails=isisD13CircAuthFails, isisD13TrapPrefix=isisD13TrapPrefix, isisD13RouterHostName=isisD13RouterHostName, isisD13CircLANDesISChanges=isisD13CircLANDesISChanges, isisD13AreaAddrTable=isisD13AreaAddrTable, isisD13CircAdjChanges=isisD13CircAdjChanges, isisD13CircExistState=isisD13CircExistState, isisD13SysLevelTEEnabled=isisD13SysLevelTEEnabled, isisD13ISAdjNbrExtendedCircID=isisD13ISAdjNbrExtendedCircID, isisD13IPRAMetricType=isisD13IPRAMetricType, isisD13IPRADestType=isisD13IPRADestType, isisD13IPRASourceType=isisD13IPRASourceType, isisD13SysEntry=isisD13SysEntry, isisD13RedistributeAddrExistState=isisD13RedistributeAddrExistState, isisD13LSPSeq=isisD13LSPSeq, isisD13SysStatLevel=isisD13SysStatLevel, isisD13SummAddrFullMetric=isisD13SummAddrFullMetric, SystemID=SystemID, isisD13SysStatMaxAreaAddrMismatches=isisD13SysStatMaxAreaAddrMismatches, isisD13IPRAExistState=isisD13IPRAExistState, isisD13LSPAttributes=isisD13LSPAttributes, isisD13SysLevelEntry=isisD13SysLevelEntry, isisD13NotificationTable=isisD13NotificationTable)
mibBuilder.exportSymbols("ISIS-D13-MIB", isisD13AdjacencyChange=isisD13AdjacencyChange, isisD13PacketCountESHello=isisD13PacketCountESHello, isisD13VersionSkew=isisD13VersionSkew, LSPBuffSize=LSPBuffSize, isisD13RAAddrPrefix=isisD13RAAddrPrefix, isisD13LSPSummaryEntry=isisD13LSPSummaryEntry, isisD13PacketCounterEntry=isisD13PacketCounterEntry, isisD13Compliances=isisD13Compliances, isisD13RedistributeAddrEntry=isisD13RedistributeAddrEntry, isisD13MIB=isisD13MIB, isisD13SysInstance=isisD13SysInstance, isisD13CircLastUpTime=isisD13CircLastUpTime, isisD13RATableGroup=isisD13RATableGroup, isisD13CircLevelEntry=isisD13CircLevelEntry, isisD13RASNPAMask=isisD13RASNPAMask, isisD13ISAdjLastUpTime=isisD13ISAdjLastUpTime, isisD13IPRADestPrefixLen=isisD13IPRADestPrefixLen, isisD13SysStatAuthFails=isisD13SysStatAuthFails, isisD13IPRATable=isisD13IPRATable, isisD13PacketCountLSP=isisD13PacketCountLSP, isisD13CircuitType=isisD13CircuitType, isisD13SysLevelSPFConsiders=isisD13SysLevelSPFConsiders, isisD13CircLevelHelloTimer=isisD13CircLevelHelloTimer)
