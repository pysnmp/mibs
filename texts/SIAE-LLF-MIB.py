#
# PySNMP MIB module SIAE-LLF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/siae/SIAE-LLF-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 14:16:46 2024
# On host fv-az693-600 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
AlarmStatus, AlarmSeverityCode = mibBuilder.importSymbols("SIAE-ALARM-MIB", "AlarmStatus", "AlarmSeverityCode")
siaeMib, = mibBuilder.importSymbols("SIAE-TREE-MIB", "siaeMib")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, Gauge32, Unsigned32, Bits, ObjectIdentity, Counter64, TimeTicks, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "Gauge32", "Unsigned32", "Bits", "ObjectIdentity", "Counter64", "TimeTicks", "ModuleIdentity", "MibIdentifier")
TextualConvention, DisplayString, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus")
llf = ModuleIdentity((1, 3, 6, 1, 4, 1, 3373, 1103, 85))
if mibBuilder.loadTexts: llf.setLastUpdated('201409020000Z')
if mibBuilder.loadTexts: llf.setOrganization('SIAE MICROELETTRONICA spa')
if mibBuilder.loadTexts: llf.setContactInfo('SIAE MICROELETTONICA s.p.a.\n             Via Michelangelo Buonarroti, 21\n             20093 - Cologno Monzese\n             Milano - ITALY\n             Phone :  +39-02-27325-1\n             E-mail: tbd@siaemic.com\n            ')
if mibBuilder.loadTexts: llf.setDescription("SIAE's Link Loss Forwarding MIB.\n            ")
llfMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 1), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: llfMibVersion.setStatus('current')
if mibBuilder.loadTexts: llfMibVersion.setDescription('Numerical version of this module.\n             The string version of this MIB have the following format:\n                XX.YY.ZZ\n             so, for example, the value 1 should be interpreted as 00.00.01\n             and the value 10001 should be interpreted as 01.00.01.')
llfTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 2), )
if mibBuilder.loadTexts: llfTable.setStatus('current')
if mibBuilder.loadTexts: llfTable.setDescription("Table with SIAE's LLF entries.")
llfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 2, 1), ).setIndexNames((0, "SIAE-LLF-MIB", "llfIndex"))
if mibBuilder.loadTexts: llfEntry.setStatus('current')
if mibBuilder.loadTexts: llfEntry.setDescription("SIAE's LLF entry.")
llfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: llfIndex.setStatus('current')
if mibBuilder.loadTexts: llfIndex.setDescription('A unique value, greater than zero, for each\n             interface supporting LLF. This object is identical to the ifIndex\n             of the standard MIB-2 ifTable.')
llfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llfEnable.setStatus('current')
if mibBuilder.loadTexts: llfEnable.setDescription('On interfaces supporting LLF, this object is used to disable\n             or enable LLF towards local LAN interfaces.')
llfUnidirectionalFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llfUnidirectionalFault.setStatus('current')
if mibBuilder.loadTexts: llfUnidirectionalFault.setDescription('When enable is set, a local link fault causes LLF on both local\n             and remote interfaces.')
llfDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llfDelayTime.setStatus('current')
if mibBuilder.loadTexts: llfDelayTime.setDescription('The LLF delay time specifies the time interval (in seconds)\n             to wait for to actuate or to remove the Link Loss Forwarding\n             condition.\n            ')
llfProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llfProtectionMode.setStatus('current')
if mibBuilder.loadTexts: llfProtectionMode.setDescription('When protection mode is enabled, LLF alarm is issued only when\n             all radio links or circuits connected to interface are alarmed.\n            ')
llfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 2, 1, 6), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llfAlarm.setStatus('current')
if mibBuilder.loadTexts: llfAlarm.setDescription('Interface Link Loss Forwarding alarm status.')
llfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llfRowStatus.setStatus('current')
if mibBuilder.loadTexts: llfRowStatus.setDescription('Status of this row of llfTable.\n             This object may not be set to destroy until at least a circuit\n             belong to this LLF interface. In other words, circuits must be\n             deleted before a LLF interface.\n            ')
llfMapTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 3), )
if mibBuilder.loadTexts: llfMapTable.setStatus('current')
if mibBuilder.loadTexts: llfMapTable.setDescription('This table map llf interface on llf circuits.')
llfMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 3, 1), ).setIndexNames((0, "SIAE-LLF-MIB", "llfIndex"), (0, "SIAE-LLF-MIB", "llfMapLinkIndex"), (0, "SIAE-LLF-MIB", "llfMapPolIndex"), (0, "SIAE-LLF-MIB", "llfMapCircuitIndex"))
if mibBuilder.loadTexts: llfMapEntry.setStatus('current')
if mibBuilder.loadTexts: llfMapEntry.setDescription("SIAE's llf cross-connection entry.")
llfMapLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llfMapLinkIndex.setStatus('current')
if mibBuilder.loadTexts: llfMapLinkIndex.setDescription('Radio link identifier. With llfMapPolIndex and llfMapCircuitIndex it points to a\n             specific instance of llfCircuitTable.')
llfMapPolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llfMapPolIndex.setStatus('current')
if mibBuilder.loadTexts: llfMapPolIndex.setDescription('Radio polarization identifier. With llfMapLinkIndex and llfMapCircuitIndex it points to a\n             specific instance of llfCircuitTable.')
llfMapCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llfMapCircuitIndex.setStatus('current')
if mibBuilder.loadTexts: llfMapCircuitIndex.setDescription('LLF circuit identifier. With llfMapLinkIndex and llfMapPolIndex it points to a\n             specific instance of llfCircuitTable.')
llfMapLosInsertion = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llfMapLosInsertion.setStatus('current')
if mibBuilder.loadTexts: llfMapLosInsertion.setDescription('Enable or disable insertion of interface LOS into a specified\n             circuit. The inserted LOS is transported through the radio link.')
llfMapInsertionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single", 1), ("group", 2))).clone('single')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llfMapInsertionMode.setStatus('current')
if mibBuilder.loadTexts: llfMapInsertionMode.setDescription('In single mode, LOS is inserted in the circuit if the relative\n             interface has a LOS alarm. \n             In group mode, LOS is inserted when all (grouped) interfaces \n             mapped to the same circuit have a LOS alarm.')
llfMapSignalFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llfMapSignalFail.setStatus('current')
if mibBuilder.loadTexts: llfMapSignalFail.setDescription('Alarm condition detected on specified circuit.')
llfMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llfMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: llfMapRowStatus.setDescription('Status of this row of llfMapTable')
llfCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 4), )
if mibBuilder.loadTexts: llfCircuitTable.setStatus('current')
if mibBuilder.loadTexts: llfCircuitTable.setDescription('Table describing llf circuits available over each link.\n             This circuits can be connected to available interfaces via\n             llfMapTable.')
llfCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 4, 1), ).setIndexNames((0, "SIAE-LLF-MIB", "llfCircuitLinkIndex"), (0, "SIAE-LLF-MIB", "llfCircuitPolIndex"), (0, "SIAE-LLF-MIB", "llfCircuitIndex"))
if mibBuilder.loadTexts: llfCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: llfCircuitEntry.setDescription("SIAE's llf circuit entry.")
llfCircuitLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llfCircuitLinkIndex.setStatus('current')
if mibBuilder.loadTexts: llfCircuitLinkIndex.setDescription('Radio link identifier.')
llfCircuitPolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llfCircuitPolIndex.setStatus('current')
if mibBuilder.loadTexts: llfCircuitPolIndex.setDescription('Radio polarization identifier.')
llfCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llfCircuitIndex.setStatus('current')
if mibBuilder.loadTexts: llfCircuitIndex.setDescription('LLF circuit identifier.')
llfCircuitLinkLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llfCircuitLinkLabel.setStatus('current')
if mibBuilder.loadTexts: llfCircuitLinkLabel.setDescription('ASCII string used to assign a name to the radio link and polarization.')
llfCircuitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llfCircuitRowStatus.setStatus('current')
if mibBuilder.loadTexts: llfCircuitRowStatus.setDescription('Status of this row of llfCircuitTable')
llfAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 85, 5), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llfAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: llfAlarmSeverityCode.setDescription('Defines the severity associated to the llfAlarm\n             and enables/disables the trap generation on status change event.')
mibBuilder.exportSymbols("SIAE-LLF-MIB", llfAlarmSeverityCode=llfAlarmSeverityCode, llfUnidirectionalFault=llfUnidirectionalFault, PYSNMP_MODULE_ID=llf, llfMapSignalFail=llfMapSignalFail, llfMibVersion=llfMibVersion, llfRowStatus=llfRowStatus, llfMapRowStatus=llfMapRowStatus, llfCircuitLinkIndex=llfCircuitLinkIndex, llfMapEntry=llfMapEntry, llfCircuitEntry=llfCircuitEntry, llf=llf, llfMapLosInsertion=llfMapLosInsertion, llfProtectionMode=llfProtectionMode, llfIndex=llfIndex, llfAlarm=llfAlarm, llfTable=llfTable, llfMapLinkIndex=llfMapLinkIndex, llfMapPolIndex=llfMapPolIndex, llfMapCircuitIndex=llfMapCircuitIndex, llfMapTable=llfMapTable, llfCircuitLinkLabel=llfCircuitLinkLabel, llfEntry=llfEntry, llfCircuitTable=llfCircuitTable, llfDelayTime=llfDelayTime, llfCircuitPolIndex=llfCircuitPolIndex, llfMapInsertionMode=llfMapInsertionMode, llfEnable=llfEnable, llfCircuitRowStatus=llfCircuitRowStatus, llfCircuitIndex=llfCircuitIndex)
