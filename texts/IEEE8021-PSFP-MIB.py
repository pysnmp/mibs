#
# PySNMP MIB module IEEE8021-PSFP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/IEEE8021-PSFP-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 09:25:54 2024
# On host fv-az1146-179 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ieee8021BridgeBaseComponentId, = mibBuilder.importSymbols("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentId")
IEEE8021STPTPtimeValue, = mibBuilder.importSymbols("IEEE8021-ST-MIB", "IEEE8021STPTPtimeValue")
ieee802dot1mibs, = mibBuilder.importSymbols("IEEE8021-TC-MIB", "ieee802dot1mibs")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, Integer32, ModuleIdentity, iso, TimeTicks, Bits, MibIdentifier, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "Integer32", "ModuleIdentity", "iso", "TimeTicks", "Bits", "MibIdentifier", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "NotificationType")
TextualConvention, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "RowStatus")
ieee8021PSFPMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 31))
ieee8021PSFPMib.setRevisions(('2018-06-28 00:00', '2017-09-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021PSFPMib.setRevisionsDescriptions(('Published as part of IEEE Std 802.1Q 2017 revision.\n            Cross references updated and corrected.', 'Initial version published as part of IEEE Std 802.1Qci.',))
if mibBuilder.loadTexts: ieee8021PSFPMib.setLastUpdated('201806280000Z')
if mibBuilder.loadTexts: ieee8021PSFPMib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021PSFPMib.setContactInfo('  WG-URL: http://www.ieee802.org/1/\n         WG-EMail: stds-802-1-L@ieee.org\n\n          Contact: IEEE 802.1 Working Group Chair\n           Postal: C/O IEEE 802.1 Working Group\n                   IEEE Standards Association\n                   445 Hoes Lane\n                   Piscataway\n                   NJ 08854\n                   USA\n           E-mail: stds-802-1-L@ieee.org')
if mibBuilder.loadTexts: ieee8021PSFPMib.setDescription('The Bridge MIB module for managing devices that support\n        the Per-Stream Filtering and Policing enhancements\n        for IEEE 802.1Q Bridges.\n\n        Unless otherwise indicated, the references in this MIB\n        module are to IEEE Std 802.1Q.\n\n        Copyright (C) IEEE (2018).\n        This version of this MIB module is part of IEEE Std 802.1Q;\n        see the draft itself for full legal notices.')
ieee8021PSFPNotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 31, 0))
ieee8021PSFPObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 31, 1))
ieee8021PSFPConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 31, 2))
ieee8021PSFPStreamFilterParameters = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 31, 1, 1))
ieee8021PSFPStreamGateParameters = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 31, 1, 2))
ieee8021PSFPFlowMeterParameters = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 31, 1, 3))
ieee8021PSFPStreamParameters = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 31, 1, 4))
ieee8021PSFPStreamFilterTable = MibTable((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1), )
if mibBuilder.loadTexts: ieee8021PSFPStreamFilterTable.setReference('8.6.5, 8.6.5.1, 12.31.2')
if mibBuilder.loadTexts: ieee8021PSFPStreamFilterTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPStreamFilterTable.setDescription('A table that contains the per-filter instance\n        manageable parameters for stream filters.\n\n        A row in the table exists for each stream filter instance.\n        associated with a Bridge component.\n\n        All writable objects in this table must be\n        persistent over power up restart/reboot.')
ieee8021PSFPStreamFilterEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentId"), (0, "IEEE8021-PSFP-MIB", "ieee8021PSFPStreamFilterInstance"))
if mibBuilder.loadTexts: ieee8021PSFPStreamFilterEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPStreamFilterEntry.setDescription('A list of objects that contains the manageable parameters for \n        stream filters for a Bridge component.')
ieee8021PSFPStreamFilterInstance = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ieee8021PSFPStreamFilterInstance.setReference('8.6.5.1, 12.31.2')
if mibBuilder.loadTexts: ieee8021PSFPStreamFilterInstance.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPStreamFilterInstance.setDescription('The StreamFilterInstance parameter is an index into the \n        StreamFilterTable.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPStreamHandleSpec = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPStreamHandleSpec.setReference('8.6.5.1, 12.31.2')
if mibBuilder.loadTexts: ieee8021PSFPStreamHandleSpec.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPStreamHandleSpec.setDescription('The StreamHandleSpec parameter contains a stream identifier \n        specification value. A value of -1 denotes the wild card value;\n        all positive values denote stream identifier values.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPPrioritySpec = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPPrioritySpec.setReference('8.6.5.1, 12.31.2')
if mibBuilder.loadTexts: ieee8021PSFPPrioritySpec.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPPrioritySpec.setDescription('The PrioritySpec parameter contains a priority \n        specification value. A value of -1 denotes the wild card value;\n        zero or positive values denote priority values.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPStreamGateInstanceID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPStreamGateInstanceID.setReference('8.6.5.1, 12.31.2')
if mibBuilder.loadTexts: ieee8021PSFPStreamGateInstanceID.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPStreamGateInstanceID.setDescription('The StreamGateInstance parameter contains the index of an  \n        entry in the Stream Gate Table.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPFilterSpecificationList = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPFilterSpecificationList.setReference('8.6.5.1, 12.31.2')
if mibBuilder.loadTexts: ieee8021PSFPFilterSpecificationList.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPFilterSpecificationList.setDescription('The FilterSpecificationList parameter contains a list of  \n        filter specifications associated with this stream filter.\n\n        The octet string value represents the contents of the list as\n        an ordered list of entries, each encoded as a TLV, as follows.\n\n        The first octet  of each TLV is interpreted as an\n        unsigned integer representing a filter specification type:\n            0: Maximum SDU Size.\n            1: Flow meter instance identifier.\n            2-255: Reserved for future gate operations\n            \n        The second and third octets of the TLV are the length field, \n        interpreted as an unsigned integer, indicating the number of\n        octets of the value that follows the length. A length of\n        zero indicates that there is no value \n        (i.e., the filter specification has no parameters).\n        \n        The fourth through (4 + length -1)th octets encode the \n        parameters of the filter specification, as defined for each\n        filter specification type.\n        \n        - Maximum SDU Size:\n            A single SDU size parameter is encoded in four octets, and\n            is interpreted as an unsigned integer value.\n            \n        - Flow meter instance identifier:\n            A single flow meter instance identifier is encoded in\n            four octets, and is interpreted as an unsigned integer value.\n             \n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPMatchingFramesCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPMatchingFramesCount.setReference('8.6.5.1, 12.31.2')
if mibBuilder.loadTexts: ieee8021PSFPMatchingFramesCount.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPMatchingFramesCount.setDescription('The MatchingFramesCount counter counts received frames that\n        match this stream filter.\n        ')
ieee8021PSFPPassingFramesCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPPassingFramesCount.setReference('8.6.5.1, 12.31.2')
if mibBuilder.loadTexts: ieee8021PSFPPassingFramesCount.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPPassingFramesCount.setDescription('The PassingFramesCount counter counts received frames that\n        pass the gate associated with this stream filter.\n        ')
ieee8021PSFPNotPassingFramesCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPNotPassingFramesCount.setReference('8.6.5.1, 12.31.2')
if mibBuilder.loadTexts: ieee8021PSFPNotPassingFramesCount.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPNotPassingFramesCount.setDescription('The NotPassingFramesCount counter counts received frames that\n        do not pass the gate associated\n        with this stream filter.\n        ')
ieee8021PSFPPassingSDUCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPPassingSDUCount.setReference('8.6.5.1, 12.31.2')
if mibBuilder.loadTexts: ieee8021PSFPPassingSDUCount.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPPassingSDUCount.setDescription('The  PassingSDUCount counter counts received frames that\n        pass the SDU size filter specification associated\n        with this stream filter.\n        ')
ieee8021PSFPNotPassingSDUCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPNotPassingSDUCount.setReference('8.6.5.1, 12.31.2')
if mibBuilder.loadTexts: ieee8021PSFPNotPassingSDUCount.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPNotPassingSDUCount.setDescription('The  NotPassingSDUCount counter counts received frames that\n        do not pass the SDU size filter specification associated\n        with this stream filter.\n        ')
ieee8021PSFPREDFramesCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPREDFramesCount.setReference('8.6.5.1, 12.31.2')
if mibBuilder.loadTexts: ieee8021PSFPREDFramesCount.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPREDFramesCount.setDescription('The REDFramesCount counter counts received\n         frames that were discarded as a result of the\n         operation of the flow meter.\n        ')
ieee8021PSFPStreamBlockedDueToOversizeFrameEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPStreamBlockedDueToOversizeFrameEnable.setReference('8.6.5.1, 8.6.5.1.1, 12.31.2')
if mibBuilder.loadTexts: ieee8021PSFPStreamBlockedDueToOversizeFrameEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPStreamBlockedDueToOversizeFrameEnable.setDescription('The ieee8021PSFPStreamBlockedDueToOversizeFrameEnable object \n        contains a Boolean value that indicates whether the \n        ieee8021PSFPStreamBlockedDueToOversizeFrame function is\n        enabled (TRUE) or disabled (FALSE).\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPStreamBlockedDueToOversizeFrame = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPStreamBlockedDueToOversizeFrame.setReference('8.6.5.1, 8.6.5.1.1, 12.31.2')
if mibBuilder.loadTexts: ieee8021PSFPStreamBlockedDueToOversizeFrame.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPStreamBlockedDueToOversizeFrame.setDescription('The ieee8021PSFPStreamBlockedDueToOversizeFrame object \n        contains a Boolean value that indicates whether, if the\n        ieee8021PSFPStreamBlockedDueToOversizeFrame function is \n        enabled, all frames are to be discarded (TRUE) \n        or not (FALSE).\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPStreamFilterEntryRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPStreamFilterEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPStreamFilterEntryRowStatus.setDescription('The status of the row.\n\n         The writable columns in a row cannot be changed if the row\n         is active. All columns MUST have a valid value before a row\n         can be activated.\n        ')
ieee8021PSFPStreamGateTable = MibTable((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1), )
if mibBuilder.loadTexts: ieee8021PSFPStreamGateTable.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPStreamGateTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPStreamGateTable.setDescription('A table that contains the per-gate instance\n        manageable parameters for stream gate scheduling.\n\n        For a given Bridge component, a row in the table exists for\n        each stream gate instance.\n\n        All writable objects in this table must be\n        persistent over power up restart/reboot.')
ieee8021PSFPStreamGateEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentId"), (0, "IEEE8021-PSFP-MIB", "ieee8021PSFPStreamGateInstance"))
if mibBuilder.loadTexts: ieee8021PSFPStreamGateEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPStreamGateEntry.setDescription('A list of objects that contains the manageable parameters for \n        stream gate scheduling for a Bridge component.')
ieee8021PSFPStreamGateInstance = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ieee8021PSFPStreamGateInstance.setReference('8.6.5.1, 8.6.5.1.2, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPStreamGateInstance.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPStreamGateInstance.setDescription('The StreamGateInstance parameter is an index into the \n        StreamGateTable.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPGateEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPGateEnabled.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPGateEnabled.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPGateEnabled.setDescription('The GateEnabled parameter determines whether the stream gate\n        is active (true) or inactive (false).\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPAdminGateStates = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPAdminGateStates.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPAdminGateStates.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPAdminGateStates.setDescription('The administrative value of the GateStates parameter for the\n        stream gate.\n        The open value indicates that the gate is open, \n        the closed value indicates that the gate is closed.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPOperGateStates = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPOperGateStates.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPOperGateStates.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPOperGateStates.setDescription('The operational value of the GateStates parameter for the\n        stream gate.\n        The open value indicates that the gate is open, \n        the closed value indicates that the gate is closed.\n')
ieee8021PSFPAdminControlListLength = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPAdminControlListLength.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPAdminControlListLength.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPAdminControlListLength.setDescription('The administrative value of the ListMax parameter for the gate.\n        The integer value indicates the number of entries (TLVs) in the\n        AdminControlList.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPOperControlListLength = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPOperControlListLength.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPOperControlListLength.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPOperControlListLength.setDescription('The operational value of the ListMax parameter for the gate.\n        The integer value indicates the number of entries (TLVs) in the\n        OperControlList.')
ieee8021PSFPAdminControlList = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 7), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPAdminControlList.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPAdminControlList.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPAdminControlList.setDescription('The administrative value of the ControlList parameter for the gate.\n        The octet string value represents the contents of the control list as\n        an ordered list of entries, each encoded as a TLV, as follows.\n        The first octet  of each TLV is interpreted as an\n        unsigned integer representing a gate operation name:\n            0: SetGateAndIPV\n            1-255: Reserved for future gate operations\n            \n        The second octet of the TLV is the length field, \n        interpreted as an unsigned integer, indicating the number of\n        octets of the value that follows the length. A length of\n        zero indicates that there is no value \n        (i.e., the gate operation has no parameters).\n        \n        The third through (3 + length -1)th octets encode the \n        parameters of the gate operation, in the order that they \n        appear in the definition of the operation\n        in Table 8-4. Three parameter types are defined:\n        \n        - StreamGateState:\n            A GateState parameter is encoded in a single octet, and\n            is interpreted as an integer value.\n            The value 1 indicates open; the value 2 indicates closed.\n            \n        - IPV:\n            An IPV is encoded in four octets as a 32-bit \n            signed integer. A negative denotes the null value;\n            zero or positive values denote internal priority values.\n            \n        - TimeInterval: \n            A TimeInterval is encoded in 4 octets as a 32-bit \n            unsigned integer, representing a number of nanoseconds.\n            The first octet encodes the most significant 8 bits of the \n            integer, and the fourth octet encodes the least \n            significant 8 bits.\n        - IntervalOctetMax:\n            An integer representing the maximum number of MSDU octets \n            that are permitted to pas the gate during the specified\n            TimeInterval. If this parameter is omitted, there is\n            no maximum.\n        \n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPOperControlList = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPOperControlList.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPOperControlList.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPOperControlList.setDescription('The operational value of the ControlList parameter for the gate.\n        The octet string value represents the contents of the control list as\n        an ordered list of entries, each encoded as a TLV, as follows.\n        The first octet  of each TLV is interpreted as an\n        unsigned integer representing a gate operation name:\n            0: SetGateAndIPV\n            1-255: Reserved for future gate operations\n            \n        The second octet of the TLV is the length field, \n        interpreted as an unsigned integer, indicating the number of\n        octets of the value that follows the length. A length of\n        zero indicates that there is no value \n        (i.e., the gate operation has no parameters).\n        \n        The third through (3 + length -1)th octets encode the \n        parameters of the gate operation, in the order that they \n        appear in the definition of the operation\n        in Table 8-4. Three parameter types are defined:\n        \n        - StreamGateState:\n            A GateState parameter is encoded in a single octet, and\n            is interpreted as an integer value.\n            The value 1 indicates open; the value 2 indicates closed.\n            \n        - IPV:\n            An IPV is encoded in four octets as a 32-bit \n            signed integer. A negative value denotes the null value;\n            zero and positive values denote internal priority values.\n            \n        - TimeInterval: \n            A TimeInterval is encoded in 4 octets as a 32-bit \n            unsigned integer, representing\n            a number of nanoseconds. The first octet encodes the\n            most significant 8 bits of the integer, and the fourth\n            octet encodes the least significant 8 bits.\n        - IntervalOctetMax:\n            An integer representing the maximum number of MSDU octets \n            that are permitted to pas the gate during the specified\n            TimeInterval. If this parameter is omitted, there is\n            no maximum.\n        ')
ieee8021PSFPAdminCycleTimeNumerator = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPAdminCycleTimeNumerator.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPAdminCycleTimeNumerator.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPAdminCycleTimeNumerator.setDescription('The administrative value of the numerator of the CycleTime\n        parameter for the gate.\n        The numerator and denominator together represent the cycle time as\n        a rational number of seconds.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPAdminCycleTimeDenominator = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPAdminCycleTimeDenominator.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPAdminCycleTimeDenominator.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPAdminCycleTimeDenominator.setDescription('The administrative value of the denominator of the \n        CycleTime parameter for the gate.\n        The numerator and denominator together represent the cycle time as\n        a rational number of seconds.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPOperCycleTimeNumerator = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPOperCycleTimeNumerator.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPOperCycleTimeNumerator.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPOperCycleTimeNumerator.setDescription('The operational value of the numerator of the \n        CycleTime parameter for the gate.\n        The numerator and denominator together represent the cycle\n        time as a rational number of seconds.')
ieee8021PSFPOperCycleTimeDenominator = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPOperCycleTimeDenominator.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPOperCycleTimeDenominator.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPOperCycleTimeDenominator.setDescription('The operational value of the denominator of the \n        CycleTime parameter for the gate.\n        The numerator and denominator together represent the \n        cycle time as a rational number of seconds.')
ieee8021PSFPAdminCycleTimeExtension = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 13), Unsigned32()).setUnits('nanoseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPAdminCycleTimeExtension.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPAdminCycleTimeExtension.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPAdminCycleTimeExtension.setDescription('The administrative value of the CycleTimeExtension \n        parameter for the gate. \n        The value is an unsigned integer number of nanoseconds.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPOperCycleTimeExtension = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 14), Unsigned32()).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPOperCycleTimeExtension.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPOperCycleTimeExtension.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPOperCycleTimeExtension.setDescription('The operational value of the CycleTimeExtension\n        parameter for the gate.\n        The value is an unsigned integer number of nanoseconds.')
ieee8021PSFPAdminBaseTime = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 15), IEEE8021STPTPtimeValue()).setUnits('PTP time').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPAdminBaseTime.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPAdminBaseTime.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPAdminBaseTime.setDescription('The administrative value of the BaseTime parameter for the gate.\n        The value is a representation of a PTPtime value, \n        consisting of a 48-bit integer\n        number of seconds and a 32-bit integer number of nanoseconds.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPOperBaseTime = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 16), IEEE8021STPTPtimeValue()).setUnits('PTP time').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPOperBaseTime.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPOperBaseTime.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPOperBaseTime.setDescription('The operationsl value of the BaseTime parameter for the gate.\n        The value is a representation of a PTPtime value, \n        consisting of a 48-bit integer\n        number of seconds and a 32-bit integer number of nanoseconds.')
ieee8021PSFPConfigChange = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPConfigChange.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPConfigChange.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPConfigChange.setDescription('The ConfigChange parameter signals the start of a \n        configuration change for the gate\n        when it is set to TRUE. This should only be done\n        when the various administrative parameters\n        are all set to appropriate values.')
ieee8021PSFPConfigChangeTime = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 18), IEEE8021STPTPtimeValue()).setUnits('PTP time').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPConfigChangeTime.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPConfigChangeTime.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPConfigChangeTime.setDescription('The PTPtime at which the next config change is scheduled to occur.\n        The value is a representation of a PTPtime value, \n        consisting of a 48-bit integer\n        number of seconds and a 32-bit integer number of nanoseconds.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPTickGranularity = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPTickGranularity.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPTickGranularity.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPTickGranularity.setDescription('The granularity of the cycle time clock, represented as an\n        unsigned number of tenths of nanoseconds.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPCurrentTime = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 20), IEEE8021STPTPtimeValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPCurrentTime.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPCurrentTime.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPCurrentTime.setDescription('The current time, in PTPtime, as maintained by the local system.\n        The value is a representation of a PTPtime value, \n        consisting of a 48-bit integer\n        number of seconds and a 32-bit integer number of nanoseconds.')
ieee8021PSFPConfigPending = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPConfigPending.setReference('8.6.8.4, 8.6.9.4, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPConfigPending.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPConfigPending.setDescription('The value of the ConfigPending state machine variable.\n        The value is TRUE if a configuration change is in progress\n        but has not yet completed.')
ieee8021PSFPConfigChangeError = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPConfigChangeError.setReference('8.6.8.4, 8.6.9.3, 8.6.9.1.1, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPConfigChangeError.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPConfigChangeError.setDescription('A counter of the number of times that a re-configuration\n        of the traffic schedule has been requested with the old\n        schedule still running and the requested base time was\n        in the past.')
ieee8021PSFPAdminIPV = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPAdminIPV.setReference('8.6.5.1.2, 8.6.10, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPAdminIPV.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPAdminIPV.setDescription('The administrative value of the IPV parameter for the gate.\n        A value of -1 denotes the null value.\n        ')
ieee8021PSFPOperIPV = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPOperIPV.setReference('8.6.5.1.2, 8.6.10, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPOperIPV.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPOperIPV.setDescription('The operational value of the IPV parameter for the gate.\n        A value of -1 denotes the null value.\n        ')
ieee8021PSFPGateClosedDueToInvalidRxEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPGateClosedDueToInvalidRxEnable.setReference('8.6.5.1, 8.6.5.1.2, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPGateClosedDueToInvalidRxEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPGateClosedDueToInvalidRxEnable.setDescription('The PSFPGateClosedDueToInvalidRxEnable object contains\n        a Boolean value that indicates whether the \n        PSFPGateClosedDueToInvalidRx function is enabled (TRUE) or\n        disabled (FALSE).\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPGateClosedDueToInvalidRx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPGateClosedDueToInvalidRx.setReference('8.6.5.1, 8.6.5.1.2, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPGateClosedDueToInvalidRx.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPGateClosedDueToInvalidRx.setDescription('The PSFPGateClosedDueToInvalidRx object contains\n        a Boolean value that indicates whether, if the\n        PSFPGateClosedDueToInvalidRx function is enabled, \n        all frames are to be discarded (TRUE) or not (FALSE).\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPGateClosedDueToOctetsExceededEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPGateClosedDueToOctetsExceededEnable.setReference('8.6.5.1, 8.6.5.1.2, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPGateClosedDueToOctetsExceededEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPGateClosedDueToOctetsExceededEnable.setDescription('The PSFPGateClosedDueToOctetsExceededEnable object contains\n        a Boolean value that indicates whether the\n        PSFPGateClosedDueToOctetsExceeded function is enabled (TRUE)\n        or disabled (FALSE).\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPGateClosedDueToOctetsExceeded = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 29), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPGateClosedDueToOctetsExceeded.setReference('8.6.5.1, 8.6.5.1.2, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPGateClosedDueToOctetsExceeded.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPGateClosedDueToOctetsExceeded.setDescription('The PSFPGateClosedDueToOctetsExceeded parameter contains\n        a Boolean value that indicates whether, if the \n        PSFPGateClosedDueToOctetsExceeded function is enabled, all \n        frames are to be discarded (TRUE) or not (FALSE).\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPStreamGateEntryRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPStreamGateEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPStreamGateEntryRowStatus.setDescription('The status of the row.\n\n         The writable columns in a row cannot be changed if the row\n         is active. All columns MUST have a valid value before a row\n         can be activated.\n        ')
ieee8021PSFPFlowMeterTable = MibTable((1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1), )
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterTable.setReference('8.6.5, 8.6.5.1, 12.31.4')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterTable.setDescription('A table that contains the per-meter instance\n        manageable parameters for flow meters.\n\n        For a given Bridge component, a row in the table exists for\n        each flow meter instance.\n\n        All writable objects in this table must be\n        persistent over power up restart/reboot.')
ieee8021PSFPFlowMeterEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentId"), (0, "IEEE8021-PSFP-MIB", "ieee8021PSFPFlowMeterInstance"))
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterEntry.setDescription('A list of objects that contains the manageable parameters for \n        flow meters for a Bridge component.')
ieee8021PSFPFlowMeterInstance = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterInstance.setReference('8.6.5.1, 12.31.4')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterInstance.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterInstance.setDescription('The FlowMeterInstance parameter is an index into the \n        FlowMeterTable.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPFlowMeterCIR = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterCIR.setReference('8.6.5.1, 12.31.4')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterCIR.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterCIR.setDescription('The FlowMeterCIR parameter contains an integer value that\n        represents the CIR value for the flow meter, in bit/second.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPFlowMeterCBS = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterCBS.setReference('8.6.5.1, 12.31.4')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterCBS.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterCBS.setDescription('The FlowMeterCBS parameter contains an integer value that\n        represents the CBS value for the flow meter, in octets.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPFlowMeterEIR = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterEIR.setReference('8.6.5.1, 12.31.4')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterEIR.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterEIR.setDescription('The FlowMeterEIR parameter contains an integer value that\n        represents the EIR value for the flow meter, in bit/second.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPFlowMeterEBS = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterEBS.setReference('8.6.5.1, 12.31.4')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterEBS.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterEBS.setDescription('The FlowMeterEBS parameter contains an integer value that\n        represents the EBS value for the flow meter, in octets.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPFlowMeterCF = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterCF.setReference('8.6.5.1, 12.31.4')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterCF.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterCF.setDescription('The FlowMeterCF parameter contains an integer value that\n        represents the CF value for the flow meter, as an integer\n        value 0 or 1.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPFlowMeterCM = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("colorBlind", 1), ("colorAware", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterCM.setReference('8.6.5.1, 12.31.4')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterCM.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterCM.setDescription('The FlowMeterCM parameter contains an integer value that\n        represents the CM value for the flow meter, as an enumerated\n        value indicating colorBlind(1) or colorAware(2).\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPFlowMeterDropOnYellow = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterDropOnYellow.setReference('8.6.5.1, 12.31.4')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterDropOnYellow.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterDropOnYellow.setDescription('The FlowMeterDropOnYellow parameter contains a Boolean value that\n        indicates whether yellow frames are dropped (TRUE) or\n        have drop_eligible set to TRUE (FALSE).\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPFlowMeterMarkAllFramesRedEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterMarkAllFramesRedEnable.setReference('8.6.5.1, 8.6.5.1.3, 12.31.4')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterMarkAllFramesRedEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterMarkAllFramesRedEnable.setDescription('The FlowMeterMarkAllFramesRedEnable parameter contains\n        a Boolean value that indicates whether the MarkAllFramesRed\n        function is enabled (TRUE) or disabled (FALSE).\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPFlowMeterMarkAllFramesRed = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterMarkAllFramesRed.setReference('8.6.5.1, 8.6.5.1.3, 12.31.4')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterMarkAllFramesRed.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterMarkAllFramesRed.setDescription('The FlowMeterMarkAllFramesRed parameter contains\n        a Boolean value that indicates whether, if the \n        MarkAllFramesRed function is enabled, all frames are to\n        be discarded (TRUE) or not (FALSE).\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
ieee8021PSFPFlowMeterEntryRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPFlowMeterEntryRowStatus.setDescription('The status of the row.\n\n         The writable columns in a row cannot be changed if the row\n         is active. All columns MUST have a valid value before a row\n         can be activated.\n        ')
ieee8021PSFPStreamParameterTable = MibTable((1, 3, 111, 2, 802, 1, 1, 31, 1, 4, 1), )
if mibBuilder.loadTexts: ieee8021PSFPStreamParameterTable.setReference('8.6.5, 8.6.5.1, 12.31.4')
if mibBuilder.loadTexts: ieee8021PSFPStreamParameterTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPStreamParameterTable.setDescription('A table that contains per-Bridge component\n        manageable parameters for PSFP.\n\n        A row in the table exists for each Bridge component.\n\n        All writable objects in this table must be\n        persistent over power up restart/reboot.')
ieee8021PSFPStreamParameterEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 31, 1, 4, 1, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentId"))
if mibBuilder.loadTexts: ieee8021PSFPStreamParameterEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPStreamParameterEntry.setDescription('A list of objects that contains the manageable parameters for \n        flow meters for a Bridge component.')
ieee8021PSFPMaxStreamFilterInstances = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPMaxStreamFilterInstances.setReference('8.6.5.1, 12.31.2')
if mibBuilder.loadTexts: ieee8021PSFPMaxStreamFilterInstances.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPMaxStreamFilterInstances.setDescription('The MaxStreamFilterInstances parameter defines the \n        maximum number of stream filter instances that are\n        supported by this Bridge component.')
ieee8021PSFPMaxStreamGateInstances = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPMaxStreamGateInstances.setReference('8.6.5.1, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPMaxStreamGateInstances.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPMaxStreamGateInstances.setDescription('The MaxStreamGateInstances parameter defines the \n        maximum number of stream gate instances that are\n        supported by this Bridge component.')
ieee8021PSFPMaxFlowMeterInstances = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPMaxFlowMeterInstances.setReference('8.6.5.1, 12.31.4')
if mibBuilder.loadTexts: ieee8021PSFPMaxFlowMeterInstances.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPMaxFlowMeterInstances.setDescription('The MaxFlowMeterInstances parameter defines the \n        maximum number of flow meter instances that are\n        supported by this Bridge component.')
ieee8021PSFPSupportedListMax = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 31, 1, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PSFPSupportedListMax.setReference('8.6.5.1, 12.31.3')
if mibBuilder.loadTexts: ieee8021PSFPSupportedListMax.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPSupportedListMax.setDescription('The SupportedListMax parameter defines the \n        The maximum value supported by this Bridge component of\n        the AdminControlListLength and\n        OperControlListLength parameters.')
ieee8021PSFPCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 31, 2, 1))
ieee8021PSFPGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 31, 2, 2))
ieee8021PSFPObjectsGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 31, 2, 2, 1)).setObjects(("IEEE8021-PSFP-MIB", "ieee8021PSFPStreamHandleSpec"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPPrioritySpec"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPStreamGateInstanceID"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPFilterSpecificationList"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPMatchingFramesCount"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPPassingFramesCount"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPNotPassingFramesCount"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPPassingSDUCount"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPNotPassingSDUCount"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPREDFramesCount"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPStreamBlockedDueToOversizeFrameEnable"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPStreamBlockedDueToOversizeFrame"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPStreamFilterEntryRowStatus"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPGateEnabled"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPAdminGateStates"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPOperGateStates"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPAdminControlListLength"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPOperControlListLength"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPAdminControlList"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPOperControlList"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPAdminCycleTimeNumerator"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPAdminCycleTimeDenominator"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPOperCycleTimeNumerator"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPOperCycleTimeDenominator"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPAdminCycleTimeExtension"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPOperCycleTimeExtension"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPAdminBaseTime"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPOperBaseTime"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPConfigChange"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPConfigChangeTime"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPTickGranularity"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPCurrentTime"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPConfigPending"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPConfigChangeError"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPAdminIPV"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPOperIPV"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPGateClosedDueToInvalidRxEnable"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPGateClosedDueToInvalidRx"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPGateClosedDueToOctetsExceededEnable"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPGateClosedDueToOctetsExceeded"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPStreamGateEntryRowStatus"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPFlowMeterCIR"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPFlowMeterCBS"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPFlowMeterEIR"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPFlowMeterEBS"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPFlowMeterCF"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPFlowMeterCM"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPFlowMeterDropOnYellow"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPFlowMeterMarkAllFramesRedEnable"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPFlowMeterMarkAllFramesRed"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPFlowMeterEntryRowStatus"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPMaxStreamFilterInstances"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPMaxStreamGateInstances"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPMaxFlowMeterInstances"), ("IEEE8021-PSFP-MIB", "ieee8021PSFPSupportedListMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PSFPObjectsGroup = ieee8021PSFPObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPObjectsGroup.setDescription('Objects that allow management of PSFP.')
ieee8021PSFPCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 31, 2, 1, 1)).setObjects(("IEEE8021-PSFP-MIB", "ieee8021PSFPObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PSFPCompliance = ieee8021PSFPCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021PSFPCompliance.setDescription('The compliance statement for devices supporting \n        PSFP. \n\n        Support of the objects defined in this MIB module\n        also requires support of the IEEE8021-BRIDGE-MIB; the\n        provisions of 17.3.2 apply to implementations claiming\n        support of this MIB. ')
mibBuilder.exportSymbols("IEEE8021-PSFP-MIB", ieee8021PSFPStreamFilterTable=ieee8021PSFPStreamFilterTable, ieee8021PSFPGateClosedDueToOctetsExceededEnable=ieee8021PSFPGateClosedDueToOctetsExceededEnable, ieee8021PSFPPassingSDUCount=ieee8021PSFPPassingSDUCount, ieee8021PSFPConfigChangeError=ieee8021PSFPConfigChangeError, ieee8021PSFPOperBaseTime=ieee8021PSFPOperBaseTime, ieee8021PSFPConfigChange=ieee8021PSFPConfigChange, ieee8021PSFPTickGranularity=ieee8021PSFPTickGranularity, ieee8021PSFPCompliance=ieee8021PSFPCompliance, ieee8021PSFPFilterSpecificationList=ieee8021PSFPFilterSpecificationList, ieee8021PSFPAdminBaseTime=ieee8021PSFPAdminBaseTime, ieee8021PSFPAdminCycleTimeExtension=ieee8021PSFPAdminCycleTimeExtension, ieee8021PSFPFlowMeterEntryRowStatus=ieee8021PSFPFlowMeterEntryRowStatus, ieee8021PSFPAdminIPV=ieee8021PSFPAdminIPV, ieee8021PSFPFlowMeterEBS=ieee8021PSFPFlowMeterEBS, ieee8021PSFPFlowMeterParameters=ieee8021PSFPFlowMeterParameters, ieee8021PSFPNotifications=ieee8021PSFPNotifications, ieee8021PSFPAdminControlList=ieee8021PSFPAdminControlList, ieee8021PSFPFlowMeterCM=ieee8021PSFPFlowMeterCM, ieee8021PSFPObjects=ieee8021PSFPObjects, ieee8021PSFPObjectsGroup=ieee8021PSFPObjectsGroup, ieee8021PSFPStreamGateInstanceID=ieee8021PSFPStreamGateInstanceID, ieee8021PSFPConformance=ieee8021PSFPConformance, ieee8021PSFPFlowMeterCF=ieee8021PSFPFlowMeterCF, ieee8021PSFPGateClosedDueToInvalidRx=ieee8021PSFPGateClosedDueToInvalidRx, ieee8021PSFPPrioritySpec=ieee8021PSFPPrioritySpec, ieee8021PSFPStreamFilterParameters=ieee8021PSFPStreamFilterParameters, PYSNMP_MODULE_ID=ieee8021PSFPMib, ieee8021PSFPAdminGateStates=ieee8021PSFPAdminGateStates, ieee8021PSFPPassingFramesCount=ieee8021PSFPPassingFramesCount, ieee8021PSFPStreamGateEntry=ieee8021PSFPStreamGateEntry, ieee8021PSFPOperGateStates=ieee8021PSFPOperGateStates, ieee8021PSFPFlowMeterMarkAllFramesRed=ieee8021PSFPFlowMeterMarkAllFramesRed, ieee8021PSFPOperIPV=ieee8021PSFPOperIPV, ieee8021PSFPStreamGateParameters=ieee8021PSFPStreamGateParameters, ieee8021PSFPOperControlList=ieee8021PSFPOperControlList, ieee8021PSFPAdminCycleTimeDenominator=ieee8021PSFPAdminCycleTimeDenominator, ieee8021PSFPStreamParameters=ieee8021PSFPStreamParameters, ieee8021PSFPConfigPending=ieee8021PSFPConfigPending, ieee8021PSFPStreamGateInstance=ieee8021PSFPStreamGateInstance, ieee8021PSFPFlowMeterMarkAllFramesRedEnable=ieee8021PSFPFlowMeterMarkAllFramesRedEnable, ieee8021PSFPMaxFlowMeterInstances=ieee8021PSFPMaxFlowMeterInstances, ieee8021PSFPOperCycleTimeDenominator=ieee8021PSFPOperCycleTimeDenominator, ieee8021PSFPFlowMeterDropOnYellow=ieee8021PSFPFlowMeterDropOnYellow, ieee8021PSFPMib=ieee8021PSFPMib, ieee8021PSFPNotPassingFramesCount=ieee8021PSFPNotPassingFramesCount, ieee8021PSFPOperCycleTimeExtension=ieee8021PSFPOperCycleTimeExtension, ieee8021PSFPFlowMeterCIR=ieee8021PSFPFlowMeterCIR, ieee8021PSFPREDFramesCount=ieee8021PSFPREDFramesCount, ieee8021PSFPGateEnabled=ieee8021PSFPGateEnabled, ieee8021PSFPConfigChangeTime=ieee8021PSFPConfigChangeTime, ieee8021PSFPStreamHandleSpec=ieee8021PSFPStreamHandleSpec, ieee8021PSFPSupportedListMax=ieee8021PSFPSupportedListMax, ieee8021PSFPCurrentTime=ieee8021PSFPCurrentTime, ieee8021PSFPNotPassingSDUCount=ieee8021PSFPNotPassingSDUCount, ieee8021PSFPFlowMeterTable=ieee8021PSFPFlowMeterTable, ieee8021PSFPOperCycleTimeNumerator=ieee8021PSFPOperCycleTimeNumerator, ieee8021PSFPOperControlListLength=ieee8021PSFPOperControlListLength, ieee8021PSFPGateClosedDueToOctetsExceeded=ieee8021PSFPGateClosedDueToOctetsExceeded, ieee8021PSFPMatchingFramesCount=ieee8021PSFPMatchingFramesCount, ieee8021PSFPFlowMeterEIR=ieee8021PSFPFlowMeterEIR, ieee8021PSFPStreamBlockedDueToOversizeFrame=ieee8021PSFPStreamBlockedDueToOversizeFrame, ieee8021PSFPGroups=ieee8021PSFPGroups, ieee8021PSFPStreamFilterEntryRowStatus=ieee8021PSFPStreamFilterEntryRowStatus, ieee8021PSFPStreamFilterInstance=ieee8021PSFPStreamFilterInstance, ieee8021PSFPFlowMeterInstance=ieee8021PSFPFlowMeterInstance, ieee8021PSFPCompliances=ieee8021PSFPCompliances, ieee8021PSFPStreamGateEntryRowStatus=ieee8021PSFPStreamGateEntryRowStatus, ieee8021PSFPMaxStreamFilterInstances=ieee8021PSFPMaxStreamFilterInstances, ieee8021PSFPFlowMeterCBS=ieee8021PSFPFlowMeterCBS, ieee8021PSFPMaxStreamGateInstances=ieee8021PSFPMaxStreamGateInstances, ieee8021PSFPStreamParameterEntry=ieee8021PSFPStreamParameterEntry, ieee8021PSFPStreamParameterTable=ieee8021PSFPStreamParameterTable, ieee8021PSFPStreamFilterEntry=ieee8021PSFPStreamFilterEntry, ieee8021PSFPFlowMeterEntry=ieee8021PSFPFlowMeterEntry, ieee8021PSFPStreamBlockedDueToOversizeFrameEnable=ieee8021PSFPStreamBlockedDueToOversizeFrameEnable, ieee8021PSFPAdminControlListLength=ieee8021PSFPAdminControlListLength, ieee8021PSFPStreamGateTable=ieee8021PSFPStreamGateTable, ieee8021PSFPGateClosedDueToInvalidRxEnable=ieee8021PSFPGateClosedDueToInvalidRxEnable, ieee8021PSFPAdminCycleTimeNumerator=ieee8021PSFPAdminCycleTimeNumerator)
