#
# PySNMP MIB module BCN-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/bluecatnetworks/BCN-SYSTEM-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 10:02:18 2024
# On host fv-az1771-969 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
bcnMgmt, = mibBuilder.importSymbols("BCN-SMI-MIB", "bcnMgmt")
BcnAlarmSeverity, = mibBuilder.importSymbols("BCN-TC-MIB", "BcnAlarmSeverity")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, Counter32, ModuleIdentity, Bits, NotificationType, Integer32, ObjectIdentity, Gauge32, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "ModuleIdentity", "Bits", "NotificationType", "Integer32", "ObjectIdentity", "Gauge32", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "TimeTicks")
DisplayString, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeStamp")
bcnSystemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 13315, 3, 2, 1))
bcnSystemMIB.setRevisions(('2010-11-30 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bcnSystemMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: bcnSystemMIB.setLastUpdated('201011301200Z')
if mibBuilder.loadTexts: bcnSystemMIB.setOrganization('BlueCat Networks')
if mibBuilder.loadTexts: bcnSystemMIB.setContactInfo('BlueCat Networks.\n        Customer Care\n\n        North America\n        Call: +1.866.491.2228\n\n        Europe\n        Call: +44.8081.011.306\n\n        Other\n        Call: +1.416.646.8433\n        \n        Email: support@bluecatnetworks.com')
if mibBuilder.loadTexts: bcnSystemMIB.setDescription('This module contains the objects that define a system.  ')
bcnSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2))
bcnSystemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2))
bcnSystemNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 3))
bcnSystemConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 4))
bcnSysIdentification = ObjectIdentity((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 1))
if mibBuilder.loadTexts: bcnSysIdentification.setStatus('current')
if mibBuilder.loadTexts: bcnSysIdentification.setDescription('Identification of the running system.')
bcnSysIdProduct = MibScalar((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcnSysIdProduct.setStatus('current')
if mibBuilder.loadTexts: bcnSysIdProduct.setDescription('OIDs for this object are obtained from BCN-PRODUCTS-MIB, i.e.:\n        bcnProductsAdonis250 1.3.6.1.4.1.13315.2.1')
bcnSysIdOSRelease = MibScalar((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcnSysIdOSRelease.setStatus('current')
if mibBuilder.loadTexts: bcnSysIdOSRelease.setDescription('The BlueCat Networks running OS release.')
bcnSysIdSerial = MibScalar((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcnSysIdSerial.setStatus('current')
if mibBuilder.loadTexts: bcnSysIdSerial.setDescription('Serial number usually assigned to a hardware platform.')
bcnSysIdServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcnSysIdServiceTag.setStatus('current')
if mibBuilder.loadTexts: bcnSysIdServiceTag.setDescription('Manufacturer service tag.')
bcnSysIdPlatform = MibScalar((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcnSysIdPlatform.setStatus('current')
if mibBuilder.loadTexts: bcnSysIdPlatform.setDescription('Platform identification.')
bcnSysIdVendorPlatform = MibScalar((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcnSysIdVendorPlatform.setStatus('current')
if mibBuilder.loadTexts: bcnSysIdVendorPlatform.setDescription('Platform vendor identification.')
bcnSysIdServicesTable = MibTable((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 1, 7), )
if mibBuilder.loadTexts: bcnSysIdServicesTable.setStatus('current')
if mibBuilder.loadTexts: bcnSysIdServicesTable.setDescription('This table enumerates the services available on this system.')
bcnSysIdServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 1, 7, 1), ).setIndexNames((0, "BCN-SYSTEM-MIB", "bcnSysIdServicesIndex"))
if mibBuilder.loadTexts: bcnSysIdServicesEntry.setStatus('current')
if mibBuilder.loadTexts: bcnSysIdServicesEntry.setDescription('A logical row in the bcnSysIdServicesTable.')
bcnSysIdServicesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bcnSysIdServicesIndex.setStatus('current')
if mibBuilder.loadTexts: bcnSysIdServicesIndex.setDescription('Table index.')
bcnSysIdServicesOID = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 1, 7, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcnSysIdServicesOID.setStatus('current')
if mibBuilder.loadTexts: bcnSysIdServicesOID.setDescription('This is the OID of the service available on the system.')
bcnSysIdServicesStateTS = MibTableColumn((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 1, 7, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcnSysIdServicesStateTS.setStatus('current')
if mibBuilder.loadTexts: bcnSysIdServicesStateTS.setDescription('Last time this particular service changed state.')
bcnSysServices = ObjectIdentity((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 2))
if mibBuilder.loadTexts: bcnSysServices.setStatus('current')
if mibBuilder.loadTexts: bcnSysServices.setDescription('Identification of services or Components available on this system.')
bcnSysServDNSService = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 2, 1))
bcnSysServDHCPService = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 2, 2))
bcnSysServTFTPService = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 2, 3))
bcnSysServLicensing = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 2, 4))
bcnSysServTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 2, 5))
bcnSysServNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 2, 6))
bcnSysServPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 2, 7))
bcnSysServNetworkInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 2, 8))
bcnSysServHighAvailability = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 2, 9))
bcnSysServReplication = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 2, 10))
bcnSysServSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 2, 2, 11))
bcnSysNotificationEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 3, 0))
bcnSysNotificationData = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 3, 1))
bcnSysSerOperState = MibScalar((1, 3, 6, 1, 4, 1, 13315, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("reboot", 2), ("shutdown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcnSysSerOperState.setStatus('current')
if mibBuilder.loadTexts: bcnSysSerOperState.setDescription('System operational states. The possible states are:\n        start(1)\tThe system started.\n        reboot(2)\tThe system is rebooting.\n        shutdown(3)\tThe system is shutting down.\n        ')
bcnSysAlarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 13315, 3, 2, 3, 1, 2), BcnAlarmSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bcnSysAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: bcnSysAlarmSeverity.setDescription('Severity classification for the alarm.')
bcnSysAlarmInfo = MibScalar((1, 3, 6, 1, 4, 1, 13315, 3, 2, 3, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bcnSysAlarmInfo.setStatus('current')
if mibBuilder.loadTexts: bcnSysAlarmInfo.setDescription('Descriptive information about the alarm event.')
bcnSysAlarmNotif = NotificationType((1, 3, 6, 1, 4, 1, 13315, 3, 2, 3, 0, 1)).setObjects(("BCN-SYSTEM-MIB", "bcnSysSerOperState"), ("BCN-SYSTEM-MIB", "bcnSysAlarmSeverity"), ("BCN-SYSTEM-MIB", "bcnSysAlarmInfo"))
if mibBuilder.loadTexts: bcnSysAlarmNotif.setStatus('current')
if mibBuilder.loadTexts: bcnSysAlarmNotif.setDescription('This notification is sent when the system starts, reboots or shuts down')
bcnSysServliances = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 4, 1))
bcnSysGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 13315, 3, 2, 4, 2))
bcnSysIdentificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13315, 3, 2, 4, 2, 1)).setObjects(("BCN-SYSTEM-MIB", "bcnSysIdProduct"), ("BCN-SYSTEM-MIB", "bcnSysIdOSRelease"), ("BCN-SYSTEM-MIB", "bcnSysIdSerial"), ("BCN-SYSTEM-MIB", "bcnSysIdServiceTag"), ("BCN-SYSTEM-MIB", "bcnSysIdPlatform"), ("BCN-SYSTEM-MIB", "bcnSysIdVendorPlatform"), ("BCN-SYSTEM-MIB", "bcnSysIdServicesOID"), ("BCN-SYSTEM-MIB", "bcnSysIdServicesStateTS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bcnSysIdentificationGroup = bcnSysIdentificationGroup.setStatus('current')
if mibBuilder.loadTexts: bcnSysIdentificationGroup.setDescription('At a minimum a system must be able to identify itself. This\n        group has to be implemented even by unconfigured systems.')
bcnSysNotificationEventGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 13315, 3, 2, 4, 2, 2)).setObjects(("BCN-SYSTEM-MIB", "bcnSysAlarmNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bcnSysNotificationEventGroup = bcnSysNotificationEventGroup.setStatus('current')
if mibBuilder.loadTexts: bcnSysNotificationEventGroup.setDescription('System notifications conformance.')
bcnSysNotificationDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13315, 3, 2, 4, 2, 3)).setObjects(("BCN-SYSTEM-MIB", "bcnSysSerOperState"), ("BCN-SYSTEM-MIB", "bcnSysAlarmSeverity"), ("BCN-SYSTEM-MIB", "bcnSysAlarmInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bcnSysNotificationDataGroup = bcnSysNotificationDataGroup.setStatus('current')
if mibBuilder.loadTexts: bcnSysNotificationDataGroup.setDescription('Server statistics conformance.')
bcnSysServliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 13315, 3, 2, 4, 1, 1)).setObjects(("BCN-SYSTEM-MIB", "bcnSysIdentificationGroup"), ("BCN-SYSTEM-MIB", "bcnSysNotificationEventGroup"), ("BCN-SYSTEM-MIB", "bcnSysNotificationDataGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bcnSysServliance = bcnSysServliance.setStatus('current')
if mibBuilder.loadTexts: bcnSysServliance.setDescription('Basic conformance')
mibBuilder.exportSymbols("BCN-SYSTEM-MIB", bcnSysIdServicesEntry=bcnSysIdServicesEntry, bcnSysServTFTP=bcnSysServTFTP, bcnSystemObjects=bcnSystemObjects, bcnSysNotificationEvents=bcnSysNotificationEvents, bcnSysSerOperState=bcnSysSerOperState, bcnSysGroups=bcnSysGroups, bcnSysServNTP=bcnSysServNTP, bcnSysServNetworkInterface=bcnSysServNetworkInterface, bcnSysIdOSRelease=bcnSysIdOSRelease, bcnSysIdPlatform=bcnSysIdPlatform, bcnSysIdServicesTable=bcnSysIdServicesTable, bcnSysServliances=bcnSysServliances, bcnSysIdServicesStateTS=bcnSysIdServicesStateTS, bcnSystemConformance=bcnSystemConformance, bcnSysNotificationEventGroup=bcnSysNotificationEventGroup, bcnSysIdProduct=bcnSysIdProduct, bcnSysServices=bcnSysServices, bcnSystemMIB=bcnSystemMIB, bcnSysIdVendorPlatform=bcnSysIdVendorPlatform, bcnSysServDNSService=bcnSysServDNSService, bcnSysServSystem=bcnSysServSystem, bcnSystemNotification=bcnSystemNotification, bcnSysServHighAvailability=bcnSysServHighAvailability, bcnSysIdServicesOID=bcnSysIdServicesOID, bcnSysAlarmSeverity=bcnSysAlarmSeverity, bcnSysServReplication=bcnSysServReplication, PYSNMP_MODULE_ID=bcnSystemMIB, bcnSysServDHCPService=bcnSysServDHCPService, bcnSysNotificationData=bcnSysNotificationData, bcnSysIdentificationGroup=bcnSysIdentificationGroup, bcnSysIdServiceTag=bcnSysIdServiceTag, bcnSysServTFTPService=bcnSysServTFTPService, bcnSysAlarmInfo=bcnSysAlarmInfo, bcnSysServLicensing=bcnSysServLicensing, bcnSystem=bcnSystem, bcnSysAlarmNotif=bcnSysAlarmNotif, bcnSysIdentification=bcnSysIdentification, bcnSysIdServicesIndex=bcnSysIdServicesIndex, bcnSysNotificationDataGroup=bcnSysNotificationDataGroup, bcnSysIdSerial=bcnSysIdSerial, bcnSysServliance=bcnSysServliance, bcnSysServPowerSupply=bcnSysServPowerSupply)
