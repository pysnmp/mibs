#
# PySNMP MIB module COLUBRIS-DEVICE-WDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hpmsm/COLUBRIS-DEVICE-WDS-MIB.my
# Produced by pysmi-1.1.12 at Mon Jun  3 13:44:04 2024
# On host fv-az1530-906 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
coDevDisIndex, = mibBuilder.importSymbols("COLUBRIS-DEVICE-MIB", "coDevDisIndex")
colubrisMgmtV2, = mibBuilder.importSymbols("COLUBRIS-SMI", "colubrisMgmtV2")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, Bits, Counter64, MibIdentifier, ModuleIdentity, NotificationType, IpAddress, ObjectIdentity, Unsigned32, TimeTicks, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "Bits", "Counter64", "MibIdentifier", "ModuleIdentity", "NotificationType", "IpAddress", "ObjectIdentity", "Unsigned32", "TimeTicks", "Integer32", "Gauge32")
MacAddress, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "DisplayString", "TextualConvention")
colubrisDeviceWdsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 8744, 5, 34))
if mibBuilder.loadTexts: colubrisDeviceWdsMIB.setLastUpdated('200801040000Z')
if mibBuilder.loadTexts: colubrisDeviceWdsMIB.setOrganization('Colubris Networks, Inc.')
if mibBuilder.loadTexts: colubrisDeviceWdsMIB.setContactInfo('Colubris Networks\n                     Postal: 200 West Street Ste 300\n                             Waltham, Massachusetts 02451-1121\n                             UNITED STATES\n                     Phone:  +1 781 684 0001\n                     Fax:    +1 781 684 0009\n\n                     E-mail: cn-snmp@colubris.com')
if mibBuilder.loadTexts: colubrisDeviceWdsMIB.setDescription('Colubris Device WDS MIB.')
colubrisDeviceWdsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1))
coDeviceWDSInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 2))
coDeviceWDSRadioGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 3))
coDeviceWDSGroupGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 4))
coDeviceWDSLinkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5))
coDeviceWDSNetworkScanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 6))
coDeviceWdsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 2, 1), )
if mibBuilder.loadTexts: coDeviceWdsInfoTable.setStatus('current')
if mibBuilder.loadTexts: coDeviceWdsInfoTable.setDescription('Device WDS information attributes.')
coDeviceWdsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 2, 1, 1), ).setIndexNames((0, "COLUBRIS-DEVICE-MIB", "coDevDisIndex"))
if mibBuilder.loadTexts: coDeviceWdsInfoEntry.setStatus('current')
if mibBuilder.loadTexts: coDeviceWdsInfoEntry.setDescription('An entry in the coDeviceWdsInfoTable.\n                 coDevDisIndex - Uniquely identifies a device on the\n                                 MultiService Controller.')
coDevWDSInfoMaxNumberOfGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSInfoMaxNumberOfGroup.setStatus('current')
if mibBuilder.loadTexts: coDevWDSInfoMaxNumberOfGroup.setDescription('Maximum number of WDS groups supported by the device.')
coDeviceWDSRadioTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 3, 1), )
if mibBuilder.loadTexts: coDeviceWDSRadioTable.setStatus('current')
if mibBuilder.loadTexts: coDeviceWDSRadioTable.setDescription('Conceptual table for the WDS radio parameters.')
coDeviceWDSRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 3, 1, 1), ).setIndexNames((0, "COLUBRIS-DEVICE-MIB", "coDevDisIndex"), (0, "COLUBRIS-DEVICE-WDS-MIB", "coDevWDSRadioIndex"))
if mibBuilder.loadTexts: coDeviceWDSRadioEntry.setStatus('current')
if mibBuilder.loadTexts: coDeviceWDSRadioEntry.setDescription('An Entry (conceptual row) in the WDS radio Table.\n                 coDevDisIndex - Uniquely identifies a device on the\n                                 MultiService Controller\n                 coDevWDSRadioIndex - Radio number where the WDS radio\n                                      parameters are applied.')
coDevWDSRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: coDevWDSRadioIndex.setStatus('current')
if mibBuilder.loadTexts: coDevWDSRadioIndex.setDescription('Radio number.')
coDevWDSRadioAckDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 3, 1, 1, 2), Unsigned32()).setUnits('km').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSRadioAckDistance.setStatus('current')
if mibBuilder.loadTexts: coDevWDSRadioAckDistance.setDescription('Maximum distance between the device and the remote peers.')
coDevWDSRadioQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("vlan", 2), ("veryHigh", 3), ("high", 4), ("normal", 5), ("low", 6), ("diffSrv", 7), ("tos", 8), ("ipQos", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSRadioQoS.setStatus('current')
if mibBuilder.loadTexts: coDevWDSRadioQoS.setDescription('QoS priority mechanism used to maps the traffic to\n                 one of the four WMM traffic queues.')
coDeviceWDSGroupTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 4, 1), )
if mibBuilder.loadTexts: coDeviceWDSGroupTable.setStatus('current')
if mibBuilder.loadTexts: coDeviceWDSGroupTable.setDescription('Conceptual table for the WDS Groups. This table contains\n                 the six WDS Groups configuration information.')
coDeviceWDSGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 4, 1, 1), ).setIndexNames((0, "COLUBRIS-DEVICE-MIB", "coDevDisIndex"), (0, "COLUBRIS-DEVICE-WDS-MIB", "coDevWDSGroupIndex"))
if mibBuilder.loadTexts: coDeviceWDSGroupEntry.setStatus('current')
if mibBuilder.loadTexts: coDeviceWDSGroupEntry.setDescription('An Entry (conceptual row) in the WDS Group Table.\n                 coDevDisIndex - Uniquely identifies a device on the\n                                 MultiService Controller\n                 coDevWDSGroupIndex - Uniquely identify a WDS group\n                                      inside the Device WDS group table.')
coDevWDSGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: coDevWDSGroupIndex.setStatus('current')
if mibBuilder.loadTexts: coDevWDSGroupIndex.setDescription('The auxiliary variable used to identify instances of WDS\n                 groups.')
coDevWDSGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSGroupName.setStatus('current')
if mibBuilder.loadTexts: coDevWDSGroupName.setDescription('Friendly name of the WDS group.')
coDevWDSGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("discovery", 1), ("negotiation", 2), ("acquisition", 3), ("locked", 4), ("shutdown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSGroupState.setStatus('current')
if mibBuilder.loadTexts: coDevWDSGroupState.setDescription('Specifies if the WDS group is active in the radios.')
coDevWDSGroupSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("tkip", 3), ("aes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSGroupSecurity.setStatus('current')
if mibBuilder.loadTexts: coDevWDSGroupSecurity.setDescription('Specifies the encryption used by the WDS group.')
coDevWDSGroupDynamicMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("alternateMaster", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSGroupDynamicMode.setStatus('current')
if mibBuilder.loadTexts: coDevWDSGroupDynamicMode.setDescription('Specifies the mode of the dynamic WDS group.')
coDevWDSGroupDynamicGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSGroupDynamicGroupId.setStatus('current')
if mibBuilder.loadTexts: coDevWDSGroupDynamicGroupId.setDescription('Specifies the group identifier of the dynamic WDS group.')
coDeviceWDSLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1), )
if mibBuilder.loadTexts: coDeviceWDSLinkStatusTable.setStatus('current')
if mibBuilder.loadTexts: coDeviceWDSLinkStatusTable.setDescription('Conceptual table for the status of WDS links.')
coDeviceWDSLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1), ).setIndexNames((0, "COLUBRIS-DEVICE-MIB", "coDevDisIndex"), (0, "COLUBRIS-DEVICE-WDS-MIB", "coDevWDSGroupIndex"), (0, "COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaIndex"))
if mibBuilder.loadTexts: coDeviceWDSLinkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: coDeviceWDSLinkStatusEntry.setDescription('An Entry (conceptual row) in the WDS Link status Table.\n                 coDevDisIndex - Uniquely identifies a device on the\n                                 MultiService Controller\n                 coDevWDSGroupIndex - Uniquely identify a WDS group\n                                      inside the Device WDS group table.\n                 coDevWDSLinkStaIndex - Uniquely identify a WDS link\n                                     inside a Device WDS group.')
coDevWDSLinkStaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coDevWDSLinkStaIndex.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaIndex.setDescription('The auxiliary variable used to identify instances of WDS\n                 links.')
coDevWDSLinkStaState = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("acquiring", 2), ("inactive", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaState.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaState.setDescription('Specifies the state of the WDS link.')
coDevWDSLinkStaRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaRadio.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaRadio.setDescription('Radio number where the WDS peer was detected.')
coDevWDSLinkStaPeerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaPeerMacAddress.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaPeerMacAddress.setDescription('MAC address of the WDS peer.')
coDevWDSLinkStaMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaMaster.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaMaster.setDescription('Determine if this link is a link to a master.\n                 Providing upstream network access.')
coDevWDSLinkStaAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaAuthorized.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaAuthorized.setDescription('Encryption, if any, can proceed.')
coDevWDSLinkStaEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("tkip", 3), ("aes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaEncryption.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaEncryption.setDescription('Specifies the encryption used by the WDS link.')
coDevWDSLinkStaIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaIdleTime.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaIdleTime.setDescription('Inactivity time.')
coDevWDSLinkStaSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 92))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaSNR.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaSNR.setDescription('Signal noise ratio of the WDS peer.')
coDevWDSLinkStaTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 10), Unsigned32()).setUnits('500Kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaTxRate.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaTxRate.setDescription('Current transmit rate of the WDS peer.')
coDevWDSLinkStaRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 11), Unsigned32()).setUnits('500Kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaRxRate.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaRxRate.setDescription('Current receive rate of the WDS peer.')
coDevWDSLinkStaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaIfIndex.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaIfIndex.setDescription('coDevIfStaIfIndex of the associated interface in the\n                 device coDeviceIfStatusTable.')
coDevWDSLinkStaHT = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaHT.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaHT.setDescription('Determine if this link is using HT rates.')
coDevWDSLinkStaTxMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaTxMCS.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaTxMCS.setDescription('Current transmit MCS of the WDS peer.')
coDevWDSLinkStaRxMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaRxMCS.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaRxMCS.setDescription('Current receive MCS of the WDS peer.')
coDevWDSLinkStaSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 16), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaSignal.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaSignal.setDescription('Strength of the wireless signal.')
coDevWDSLinkStaNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 1, 1, 17), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStaNoise.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStaNoise.setDescription('Level of local background noise.')
coDeviceWDSLinkStatsRatesTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2), )
if mibBuilder.loadTexts: coDeviceWDSLinkStatsRatesTable.setStatus('current')
if mibBuilder.loadTexts: coDeviceWDSLinkStatsRatesTable.setDescription('Conceptual table for the statistics of WDS links.')
coDeviceWDSLinkStatsRatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1), )
coDeviceWDSLinkStatusEntry.registerAugmentions(("COLUBRIS-DEVICE-WDS-MIB", "coDeviceWDSLinkStatsRatesEntry"))
coDeviceWDSLinkStatsRatesEntry.setIndexNames(*coDeviceWDSLinkStatusEntry.getIndexNames())
if mibBuilder.loadTexts: coDeviceWDSLinkStatsRatesEntry.setStatus('current')
if mibBuilder.loadTexts: coDeviceWDSLinkStatsRatesEntry.setDescription('An Entry (conceptual row) in the WDS Link Statistics\n                 Table.\n                 coDevDisIndex - Uniquely identifies a device on the\n                                 MultiService Controller\n                 coDevWDSGroupIndex - Uniquely identify a WDS group\n                                      inside the Device WDS group table.\n                 coDevWDSLinkIndex - Uniquely identify a WDS link\n                                     inside a Device WDS group.')
coDevWDSLinkStsPktsTxRate1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate1.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate1.setDescription('Number of frames transmitted at 1 Mbit/s.')
coDevWDSLinkStsPktsTxRate2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate2.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate2.setDescription('Number of frames transmitted at 2 Mbit/s.')
coDevWDSLinkStsPktsTxRate5dot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate5dot5.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate5dot5.setDescription('Number of frames transmitted at 5.5 Mbit/s.')
coDevWDSLinkStsPktsTxRate11 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate11.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate11.setDescription('Number of frames transmitted at 11 Mbit/s.')
coDevWDSLinkStsPktsTxRate6 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate6.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate6.setDescription('Number of frames transmitted at 6 Mbit/s.')
coDevWDSLinkStsPktsTxRate9 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate9.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate9.setDescription('Number of frames transmitted at 9 Mbit/s.')
coDevWDSLinkStsPktsTxRate12 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate12.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate12.setDescription('Number of frames transmitted at 12 Mbit/s.')
coDevWDSLinkStsPktsTxRate18 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate18.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate18.setDescription('Number of frames transmitted at 18 Mbit/s.')
coDevWDSLinkStsPktsTxRate24 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate24.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate24.setDescription('Number of frames transmitted at 24 Mbit/s.')
coDevWDSLinkStsPktsTxRate36 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate36.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate36.setDescription('Number of frames transmitted at 36 Mbit/s.')
coDevWDSLinkStsPktsTxRate48 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate48.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate48.setDescription('Number of frames transmitted at 48 Mbit/s.')
coDevWDSLinkStsPktsTxRate54 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate54.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxRate54.setDescription('Number of frames transmitted at 54 Mbit/s.')
coDevWDSLinkStsPktsRxRate1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate1.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate1.setDescription('Number of frames received at 1 Mbit/s.')
coDevWDSLinkStsPktsRxRate2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate2.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate2.setDescription('Number of frames received at 2 Mbit/s.')
coDevWDSLinkStsPktsRxRate5dot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate5dot5.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate5dot5.setDescription('Number of frames received at 5.5 Mbit/s.')
coDevWDSLinkStsPktsRxRate11 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate11.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate11.setDescription('Number of frames received at 11 Mbit/s.')
coDevWDSLinkStsPktsRxRate6 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate6.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate6.setDescription('Number of frames received at 6 Mbit/s.')
coDevWDSLinkStsPktsRxRate9 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate9.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate9.setDescription('Number of frames received at 9 Mbit/s.')
coDevWDSLinkStsPktsRxRate12 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate12.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate12.setDescription('Number of frames received at 12 Mbit/s.')
coDevWDSLinkStsPktsRxRate18 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate18.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate18.setDescription('Number of frames received at 18 Mbit/s.')
coDevWDSLinkStsPktsRxRate24 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate24.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate24.setDescription('Number of frames received at 24 Mbit/s.')
coDevWDSLinkStsPktsRxRate36 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate36.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate36.setDescription('Number of frames received at 36 Mbit/s.')
coDevWDSLinkStsPktsRxRate48 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate48.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate48.setDescription('Number of frames received at 48 Mbit/s.')
coDevWDSLinkStsPktsRxRate54 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate54.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxRate54.setDescription('Number of frames received at 54 Mbit/s.')
coDeviceWDSLinkStatsHTRatesTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3), )
if mibBuilder.loadTexts: coDeviceWDSLinkStatsHTRatesTable.setStatus('current')
if mibBuilder.loadTexts: coDeviceWDSLinkStatsHTRatesTable.setDescription('Conceptual table for the statistics of WDS HT links.')
coDeviceWDSLinkStatsHTRatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1), )
coDeviceWDSLinkStatusEntry.registerAugmentions(("COLUBRIS-DEVICE-WDS-MIB", "coDeviceWDSLinkStatsHTRatesEntry"))
coDeviceWDSLinkStatsHTRatesEntry.setIndexNames(*coDeviceWDSLinkStatusEntry.getIndexNames())
if mibBuilder.loadTexts: coDeviceWDSLinkStatsHTRatesEntry.setStatus('current')
if mibBuilder.loadTexts: coDeviceWDSLinkStatsHTRatesEntry.setDescription('An Entry (conceptual row) in the WDS HT Link Statistics\n                 Table.\n                 coDevDisIndex - Uniquely identifies a device on the\n                                 MultiService Controller\n                 coDevWDSGroupIndex - Uniquely identify a WDS group\n                                      inside the Device WDS group table.\n                 coDevWDSLinkIndex - Uniquely identify a WDS link\n                                     inside a Device WDS group.')
coDevWDSLinkStsPktsTxMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS0.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS0.setDescription('Number of frames transmitted at MCS0 since the\n                 link was established.')
coDevWDSLinkStsPktsTxMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS1.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS1.setDescription('Number of frames transmitted at MCS1 since the\n                 link was established.')
coDevWDSLinkStsPktsTxMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS2.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS2.setDescription('Number of frames transmitted at MCS2 since the\n                 link was established.')
coDevWDSLinkStsPktsTxMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS3.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS3.setDescription('Number of frames transmitted at MCS3 since the\n                 link was established.')
coDevWDSLinkStsPktsTxMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS4.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS4.setDescription('Number of frames transmitted at MCS4 since the\n                 link was established.')
coDevWDSLinkStsPktsTxMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS5.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS5.setDescription('Number of frames transmitted at MCS5 since the\n                 link was established.')
coDevWDSLinkStsPktsTxMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS6.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS6.setDescription('Number of frames transmitted at MCS6 since the\n                 link was established.')
coDevWDSLinkStsPktsTxMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS7.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS7.setDescription('Number of frames transmitted at MCS7 since the\n                 link was established.')
coDevWDSLinkStsPktsTxMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS8.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS8.setDescription('Number of frames transmitted at MCS8 since the\n                 link was established.')
coDevWDSLinkStsPktsTxMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS9.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS9.setDescription('Number of frames transmitted at MCS9 since the\n                 link was established.')
coDevWDSLinkStsPktsTxMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS10.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS10.setDescription('Number of frames transmitted at MCS10 since the\n                 link was established.')
coDevWDSLinkStsPktsTxMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS11.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS11.setDescription('Number of frames transmitted at MCS11 since the\n                 link was established.')
coDevWDSLinkStsPktsTxMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS12.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS12.setDescription('Number of frames transmitted at MCS12 since the\n                 link was established.')
coDevWDSLinkStsPktsTxMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS13.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS13.setDescription('Number of frames transmitted at MCS13 since the\n                 link was established.')
coDevWDSLinkStsPktsTxMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS14.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS14.setDescription('Number of frames transmitted at MCS14 since the\n                 link was established.')
coDevWDSLinkStsPktsTxMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS15.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsTxMCS15.setDescription('Number of frames transmitted at MCS15 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS0.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS0.setDescription('Number of frames received at MCS0 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS1.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS1.setDescription('Number of frames received at MCS1 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS2.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS2.setDescription('Number of frames received at MCS2 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS3.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS3.setDescription('Number of frames received at MCS3 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS4.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS4.setDescription('Number of frames received at MCS4 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS5.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS5.setDescription('Number of frames received at MCS5 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS6.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS6.setDescription('Number of frames received at MCS6 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS7.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS7.setDescription('Number of frames received at MCS7 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS8.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS8.setDescription('Number of frames received at MCS8 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS9.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS9.setDescription('Number of frames received at MCS9 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS10.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS10.setDescription('Number of frames received at MCS10 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS11.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS11.setDescription('Number of frames received at MCS11 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS12.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS12.setDescription('Number of frames received at MCS12 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS13.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS13.setDescription('Number of frames received at MCS13 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS14.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS14.setDescription('Number of frames received at MCS14 since the\n                 link was established.')
coDevWDSLinkStsPktsRxMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 5, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS15.setStatus('current')
if mibBuilder.loadTexts: coDevWDSLinkStsPktsRxMCS15.setDescription('Number of frames received at MCS15 since the\n                 link was established.')
coDeviceWDSNetworkScanTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 6, 1), )
if mibBuilder.loadTexts: coDeviceWDSNetworkScanTable.setStatus('current')
if mibBuilder.loadTexts: coDeviceWDSNetworkScanTable.setDescription('Conceptual table for the WDS network scans.')
coDeviceWDSNetworkScanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 6, 1, 1), ).setIndexNames((0, "COLUBRIS-DEVICE-MIB", "coDevDisIndex"), (0, "COLUBRIS-DEVICE-WDS-MIB", "coDevWDSScanRadioIndex"), (0, "COLUBRIS-DEVICE-WDS-MIB", "coDevWDSScanPeerIndex"))
if mibBuilder.loadTexts: coDeviceWDSNetworkScanEntry.setStatus('current')
if mibBuilder.loadTexts: coDeviceWDSNetworkScanEntry.setDescription('An Entry (conceptual row) in the WDS Network Scan\n                 Table.\n                 coDevDisIndex - Uniquely identifies a device on the\n                                 MultiService Controller\n                 coDevWDSScanRadioIndex - Radio number where the WDS peer\n                                       was detected.\n                 coDevWDSScanPeerIndex - Uniquely identify a WDS peer\n                                      on a radio inside the WDS\n                                      network scan table.')
coDevWDSScanRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: coDevWDSScanRadioIndex.setStatus('current')
if mibBuilder.loadTexts: coDevWDSScanRadioIndex.setDescription('Radio number where the WDS peer was detected.')
coDevWDSScanPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: coDevWDSScanPeerIndex.setStatus('current')
if mibBuilder.loadTexts: coDevWDSScanPeerIndex.setDescription('Uniquely identify a WDS peer on a radio.')
coDevWDSScanGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 6, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSScanGroupId.setStatus('current')
if mibBuilder.loadTexts: coDevWDSScanGroupId.setDescription('Group id used by the WDS peer.')
coDevWDSScanPeerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 6, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSScanPeerMacAddress.setStatus('current')
if mibBuilder.loadTexts: coDevWDSScanPeerMacAddress.setDescription('MAC address of the WDS peer.')
coDevWDSScanChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 6, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSScanChannel.setStatus('current')
if mibBuilder.loadTexts: coDevWDSScanChannel.setDescription('Channel on which the peer is transmitting.')
coDevWDSScanSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 92))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSScanSNR.setStatus('current')
if mibBuilder.loadTexts: coDevWDSScanSNR.setDescription('Signal noise ratio of the WDS peer.')
coDevWDSScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("alternateMaster", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSScanMode.setStatus('current')
if mibBuilder.loadTexts: coDevWDSScanMode.setDescription('Current mode of the WDS peer.')
coDevWDSScanAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 34, 1, 6, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDevWDSScanAvailable.setStatus('current')
if mibBuilder.loadTexts: coDevWDSScanAvailable.setDescription('Peer is accepting connections.')
colubrisDeviceWdsMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 34, 2))
colubrisDeviceWdsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 34, 2, 0))
colubrisDeviceWdsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 34, 3))
colubrisDeviceWdsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 34, 3, 1))
colubrisDeviceWdsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 34, 3, 2))
colubrisDeviceWdsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 8744, 5, 34, 3, 1, 1)).setObjects(("COLUBRIS-DEVICE-WDS-MIB", "colubrisDeviceWdsInfoMIBGroup"), ("COLUBRIS-DEVICE-WDS-MIB", "colubrisDeviceWdsRadioMIBGroup"), ("COLUBRIS-DEVICE-WDS-MIB", "colubrisDeviceWdsGroupMIBGroup"), ("COLUBRIS-DEVICE-WDS-MIB", "colubrisDeviceWdsLinkMIBGroup"), ("COLUBRIS-DEVICE-WDS-MIB", "colubrisDeviceWdsNetworkScanMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisDeviceWdsMIBCompliance = colubrisDeviceWdsMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: colubrisDeviceWdsMIBCompliance.setDescription('The compliance statement for the device WDS MIB.')
colubrisDeviceWdsInfoMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 34, 3, 2, 1)).setObjects(("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSInfoMaxNumberOfGroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisDeviceWdsInfoMIBGroup = colubrisDeviceWdsInfoMIBGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisDeviceWdsInfoMIBGroup.setDescription('A collection of objects for the device WDS\n                 information group.')
colubrisDeviceWdsRadioMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 34, 3, 2, 2)).setObjects(("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSRadioAckDistance"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSRadioQoS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisDeviceWdsRadioMIBGroup = colubrisDeviceWdsRadioMIBGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisDeviceWdsRadioMIBGroup.setDescription('A collection of objects for the device WDS\n                 radio group.')
colubrisDeviceWdsGroupMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 34, 3, 2, 3)).setObjects(("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSGroupName"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSGroupState"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSGroupSecurity"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSGroupDynamicMode"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSGroupDynamicGroupId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisDeviceWdsGroupMIBGroup = colubrisDeviceWdsGroupMIBGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisDeviceWdsGroupMIBGroup.setDescription('A collection of objects for the device WDS\n                 group group.')
colubrisDeviceWdsLinkMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 34, 3, 2, 4)).setObjects(("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaState"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaRadio"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaPeerMacAddress"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaMaster"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaAuthorized"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaEncryption"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaIdleTime"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaSNR"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaTxRate"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaRxRate"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaIfIndex"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaHT"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaTxMCS"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaRxMCS"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaSignal"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStaNoise"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxRate1"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxRate2"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxRate5dot5"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxRate11"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxRate6"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxRate9"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxRate12"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxRate18"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxRate24"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxRate36"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxRate48"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxRate54"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxRate1"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxRate2"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxRate5dot5"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxRate11"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxRate6"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxRate9"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxRate12"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxRate18"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxRate24"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxRate36"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxRate48"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxRate54"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS0"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS1"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS2"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS3"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS4"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS5"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS6"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS7"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS8"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS9"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS10"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS11"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS12"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS13"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS14"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsTxMCS15"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS0"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS1"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS2"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS3"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS4"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS5"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS6"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS7"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS8"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS9"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS10"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS11"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS12"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS13"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS14"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSLinkStsPktsRxMCS15"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisDeviceWdsLinkMIBGroup = colubrisDeviceWdsLinkMIBGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisDeviceWdsLinkMIBGroup.setDescription('A collection of objects for the device WDS\n                 link group.')
colubrisDeviceWdsNetworkScanMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 34, 3, 2, 5)).setObjects(("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSScanGroupId"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSScanPeerMacAddress"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSScanChannel"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSScanSNR"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSScanMode"), ("COLUBRIS-DEVICE-WDS-MIB", "coDevWDSScanAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    colubrisDeviceWdsNetworkScanMIBGroup = colubrisDeviceWdsNetworkScanMIBGroup.setStatus('current')
if mibBuilder.loadTexts: colubrisDeviceWdsNetworkScanMIBGroup.setDescription('A collection of objects for the device WDS\n                 network scan group.')
mibBuilder.exportSymbols("COLUBRIS-DEVICE-WDS-MIB", coDevWDSLinkStsPktsRxRate2=coDevWDSLinkStsPktsRxRate2, coDevWDSLinkStsPktsTxMCS2=coDevWDSLinkStsPktsTxMCS2, coDevWDSGroupIndex=coDevWDSGroupIndex, coDevWDSLinkStsPktsRxRate6=coDevWDSLinkStsPktsRxRate6, coDevWDSLinkStaPeerMacAddress=coDevWDSLinkStaPeerMacAddress, coDevWDSLinkStsPktsRxRate12=coDevWDSLinkStsPktsRxRate12, coDevWDSScanMode=coDevWDSScanMode, coDevWDSScanRadioIndex=coDevWDSScanRadioIndex, coDevWDSLinkStsPktsTxMCS0=coDevWDSLinkStsPktsTxMCS0, PYSNMP_MODULE_ID=colubrisDeviceWdsMIB, coDevWDSLinkStsPktsRxRate18=coDevWDSLinkStsPktsRxRate18, coDevWDSScanPeerIndex=coDevWDSScanPeerIndex, coDevWDSLinkStsPktsTxRate48=coDevWDSLinkStsPktsTxRate48, coDevWDSLinkStsPktsRxMCS12=coDevWDSLinkStsPktsRxMCS12, coDeviceWDSLinkStatsHTRatesEntry=coDeviceWDSLinkStatsHTRatesEntry, coDevWDSLinkStsPktsRxRate1=coDevWDSLinkStsPktsRxRate1, coDevWDSLinkStsPktsRxRate24=coDevWDSLinkStsPktsRxRate24, coDevWDSLinkStaNoise=coDevWDSLinkStaNoise, coDevWDSGroupDynamicMode=coDevWDSGroupDynamicMode, coDevWDSLinkStsPktsRxMCS4=coDevWDSLinkStsPktsRxMCS4, coDevWDSGroupDynamicGroupId=coDevWDSGroupDynamicGroupId, coDevWDSLinkStsPktsTxMCS13=coDevWDSLinkStsPktsTxMCS13, coDevWDSLinkStsPktsRxMCS10=coDevWDSLinkStsPktsRxMCS10, coDevWDSLinkStaRxRate=coDevWDSLinkStaRxRate, coDevWDSLinkStsPktsRxMCS6=coDevWDSLinkStsPktsRxMCS6, coDevWDSLinkStsPktsTxMCS10=coDevWDSLinkStsPktsTxMCS10, coDevWDSLinkStsPktsRxMCS13=coDevWDSLinkStsPktsRxMCS13, coDevWDSGroupName=coDevWDSGroupName, coDevWDSLinkStsPktsTxRate1=coDevWDSLinkStsPktsTxRate1, coDeviceWDSLinkStatsRatesEntry=coDeviceWDSLinkStatsRatesEntry, coDevWDSLinkStsPktsRxMCS2=coDevWDSLinkStsPktsRxMCS2, coDevWDSLinkStsPktsRxMCS0=coDevWDSLinkStsPktsRxMCS0, coDevWDSLinkStsPktsTxMCS7=coDevWDSLinkStsPktsTxMCS7, colubrisDeviceWdsMIB=colubrisDeviceWdsMIB, coDevWDSLinkStsPktsTxRate24=coDevWDSLinkStsPktsTxRate24, coDeviceWDSLinkGroup=coDeviceWDSLinkGroup, colubrisDeviceWdsNetworkScanMIBGroup=colubrisDeviceWdsNetworkScanMIBGroup, coDevWDSLinkStaIndex=coDevWDSLinkStaIndex, coDevWDSGroupSecurity=coDevWDSGroupSecurity, coDeviceWDSLinkStatusTable=coDeviceWDSLinkStatusTable, coDevWDSLinkStsPktsTxRate12=coDevWDSLinkStsPktsTxRate12, coDevWDSLinkStaState=coDevWDSLinkStaState, coDevWDSLinkStsPktsRxRate48=coDevWDSLinkStsPktsRxRate48, coDevWDSLinkStsPktsTxMCS3=coDevWDSLinkStsPktsTxMCS3, coDevWDSLinkStsPktsTxMCS5=coDevWDSLinkStsPktsTxMCS5, coDevWDSScanGroupId=coDevWDSScanGroupId, coDevWDSLinkStaEncryption=coDevWDSLinkStaEncryption, coDevWDSLinkStaAuthorized=coDevWDSLinkStaAuthorized, coDevWDSLinkStsPktsRxMCS9=coDevWDSLinkStsPktsRxMCS9, coDevWDSLinkStsPktsTxMCS15=coDevWDSLinkStsPktsTxMCS15, coDevWDSLinkStsPktsRxRate11=coDevWDSLinkStsPktsRxRate11, coDeviceWDSLinkStatsHTRatesTable=coDeviceWDSLinkStatsHTRatesTable, coDeviceWdsInfoEntry=coDeviceWdsInfoEntry, colubrisDeviceWdsGroupMIBGroup=colubrisDeviceWdsGroupMIBGroup, coDeviceWDSRadioGroup=coDeviceWDSRadioGroup, colubrisDeviceWdsRadioMIBGroup=colubrisDeviceWdsRadioMIBGroup, coDevWDSScanAvailable=coDevWDSScanAvailable, coDevWDSLinkStaTxMCS=coDevWDSLinkStaTxMCS, coDevWDSGroupState=coDevWDSGroupState, coDevWDSLinkStsPktsTxRate9=coDevWDSLinkStsPktsTxRate9, coDeviceWDSNetworkScanTable=coDeviceWDSNetworkScanTable, coDevWDSRadioIndex=coDevWDSRadioIndex, coDevWDSLinkStsPktsTxMCS11=coDevWDSLinkStsPktsTxMCS11, coDevWDSLinkStaSNR=coDevWDSLinkStaSNR, coDevWDSLinkStsPktsRxMCS7=coDevWDSLinkStsPktsRxMCS7, coDeviceWDSInfoGroup=coDeviceWDSInfoGroup, coDevWDSLinkStsPktsRxMCS11=coDevWDSLinkStsPktsRxMCS11, coDevWDSLinkStsPktsTxRate18=coDevWDSLinkStsPktsTxRate18, coDeviceWDSLinkStatsRatesTable=coDeviceWDSLinkStatsRatesTable, coDevWDSLinkStsPktsRxRate36=coDevWDSLinkStsPktsRxRate36, coDevWDSLinkStsPktsTxRate11=coDevWDSLinkStsPktsTxRate11, coDeviceWDSLinkStatusEntry=coDeviceWDSLinkStatusEntry, coDevWDSLinkStsPktsTxRate6=coDevWDSLinkStsPktsTxRate6, coDevWDSLinkStsPktsTxMCS12=coDevWDSLinkStsPktsTxMCS12, coDevWDSLinkStsPktsTxRate2=coDevWDSLinkStsPktsTxRate2, coDevWDSScanPeerMacAddress=coDevWDSScanPeerMacAddress, coDevWDSLinkStaHT=coDevWDSLinkStaHT, coDeviceWDSRadioTable=coDeviceWDSRadioTable, coDevWDSLinkStaMaster=coDevWDSLinkStaMaster, coDevWDSInfoMaxNumberOfGroup=coDevWDSInfoMaxNumberOfGroup, colubrisDeviceWdsMIBObjects=colubrisDeviceWdsMIBObjects, coDeviceWDSGroupGroup=coDeviceWDSGroupGroup, coDevWDSLinkStsPktsRxRate9=coDevWDSLinkStsPktsRxRate9, coDevWDSLinkStsPktsRxMCS8=coDevWDSLinkStsPktsRxMCS8, coDevWDSLinkStsPktsRxMCS15=coDevWDSLinkStsPktsRxMCS15, coDevWDSLinkStsPktsTxRate36=coDevWDSLinkStsPktsTxRate36, coDevWDSLinkStsPktsTxRate5dot5=coDevWDSLinkStsPktsTxRate5dot5, colubrisDeviceWdsMIBCompliances=colubrisDeviceWdsMIBCompliances, coDevWDSLinkStaIfIndex=coDevWDSLinkStaIfIndex, coDevWDSScanChannel=coDevWDSScanChannel, coDevWDSLinkStsPktsTxMCS14=coDevWDSLinkStsPktsTxMCS14, colubrisDeviceWdsInfoMIBGroup=colubrisDeviceWdsInfoMIBGroup, coDevWDSLinkStsPktsTxRate54=coDevWDSLinkStsPktsTxRate54, colubrisDeviceWdsMIBGroups=colubrisDeviceWdsMIBGroups, coDevWDSRadioQoS=coDevWDSRadioQoS, coDevWDSLinkStsPktsTxMCS9=coDevWDSLinkStsPktsTxMCS9, coDevWDSLinkStsPktsTxMCS1=coDevWDSLinkStsPktsTxMCS1, coDevWDSLinkStsPktsRxRate54=coDevWDSLinkStsPktsRxRate54, coDevWDSLinkStsPktsTxMCS4=coDevWDSLinkStsPktsTxMCS4, coDevWDSLinkStsPktsRxMCS3=coDevWDSLinkStsPktsRxMCS3, coDevWDSLinkStsPktsTxMCS6=coDevWDSLinkStsPktsTxMCS6, colubrisDeviceWdsMIBCompliance=colubrisDeviceWdsMIBCompliance, coDevWDSLinkStaRadio=coDevWDSLinkStaRadio, coDevWDSLinkStaTxRate=coDevWDSLinkStaTxRate, colubrisDeviceWdsMIBNotifications=colubrisDeviceWdsMIBNotifications, coDeviceWDSNetworkScanGroup=coDeviceWDSNetworkScanGroup, coDevWDSLinkStsPktsTxMCS8=coDevWDSLinkStsPktsTxMCS8, coDeviceWDSGroupTable=coDeviceWDSGroupTable, coDevWDSLinkStsPktsRxMCS1=coDevWDSLinkStsPktsRxMCS1, coDevWDSLinkStsPktsRxRate5dot5=coDevWDSLinkStsPktsRxRate5dot5, coDevWDSRadioAckDistance=coDevWDSRadioAckDistance, coDeviceWDSNetworkScanEntry=coDeviceWDSNetworkScanEntry, colubrisDeviceWdsLinkMIBGroup=colubrisDeviceWdsLinkMIBGroup, coDevWDSLinkStaRxMCS=coDevWDSLinkStaRxMCS, coDevWDSLinkStsPktsRxMCS14=coDevWDSLinkStsPktsRxMCS14, coDevWDSLinkStaIdleTime=coDevWDSLinkStaIdleTime, coDeviceWdsInfoTable=coDeviceWdsInfoTable, coDeviceWDSRadioEntry=coDeviceWDSRadioEntry, coDevWDSLinkStsPktsRxMCS5=coDevWDSLinkStsPktsRxMCS5, colubrisDeviceWdsMIBNotificationPrefix=colubrisDeviceWdsMIBNotificationPrefix, coDeviceWDSGroupEntry=coDeviceWDSGroupEntry, coDevWDSLinkStaSignal=coDevWDSLinkStaSignal, coDevWDSScanSNR=coDevWDSScanSNR, colubrisDeviceWdsMIBConformance=colubrisDeviceWdsMIBConformance)
