#
# PySNMP MIB module InterSeptor-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/jacarta/InterSeptor-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:12:52 2024
# On host fv-az692-788 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, enterprises, MibIdentifier, Gauge32, Counter64, IpAddress, ModuleIdentity, Integer32, iso, TimeTicks, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "enterprises", "MibIdentifier", "Gauge32", "Counter64", "IpAddress", "ModuleIdentity", "Integer32", "iso", "TimeTicks", "Counter32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jacarta = MibIdentifier((1, 3, 6, 1, 4, 1, 19011))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1))
webAppliance = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3))
inSept = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1))
inSeptObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1))
inSeptTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2))
inSeptIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 1))
inSeptConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2))
inSeptsensorMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 3))
inSeptsensorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4))
inSeptIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSeptIdentManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptIdentManufacturer.setDescription('The name of the interSeptor manufacturer.')
inSeptIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSeptIdentModel.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptIdentModel.setDescription('The interSeptor Model designation.')
inSeptIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSeptIdentAgentSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptIdentAgentSoftwareVersion.setDescription('The interSeptor software/firmware version.')
inSeptIdentName = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptIdentName.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptIdentName.setDescription('A string identifying the interSeptor.  This object should be\n               set by the administrator.')
inSeptConfigMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSeptConfigMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigMibVersion.setDescription('The version of MIB spec.')
inSeptConfigNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 2))
inSeptConfigIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigIpAddress.setDescription(' The ip address that NMS can identify the managed\n                device')
inSeptConfigGateway = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigGateway.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigGateway.setDescription(' The default gateway that allows the device to be managed\n                through routers ')
inSeptConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigSubnetMask.setDescription(' Internet address subnet mask')
inSeptConfigDateTime = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 3))
inSeptConfigDate = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigDate.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigDate.setDescription('The date in inSept, format is (dd/mm/yyyy)')
inSeptConfigTime = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigTime.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigTime.setDescription('The time in interSeptor, format is (hh:mm:ss)')
inSeptConfigTimeFromNtp = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigTimeFromNtp.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigTimeFromNtp.setDescription('Enable/disable update date/time from NTP server.')
inSeptConfigNtpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigNtpIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigNtpIpAddress.setDescription('NTP IP address.')
inSeptConfigNtpTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("gMT-1200", 1), ("gMT-1100", 2), ("gMT-1000", 3), ("gMT-0900", 4), ("gMT-0800", 5), ("gMT-0700", 6), ("gMT-0600", 7), ("gMT-0500", 8), ("gMT-0400", 9), ("gMT-0330", 10), ("gMT-0300", 11), ("gMT-0200", 12), ("gMT-0100", 13), ("gMT-0000", 14), ("gMT0100", 15), ("gMT0200", 16), ("gMT0300", 17), ("gMT0330", 18), ("gMT0400", 19), ("gMT0500", 20), ("gMT0530", 21), ("gMT0600", 22), ("gMT0700", 23), ("gMT0800", 24), ("gMT0900", 25), ("gMT1000", 26), ("gMT1100", 27), ("gMT1200", 28)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigNtpTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigNtpTimeZone.setDescription('Enable/disable update date/time from NTP server.')
inSeptConfigDayLightSaving = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigDayLightSaving.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigDayLightSaving.setDescription('Enable/disable daylight saving for NTP time, if enabled, the time get from NTP will be set\n\t\t set one hour in advance to reflect daylight saving status.')
inSeptConfigLog = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 4))
inSeptConfigHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigHistoryLogFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigHistoryLogFrequency.setDescription('The frequency of the update of the history log. The value\n                 is in seconds')
inSeptConfigExtHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigExtHistoryLogFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigExtHistoryLogFrequency.setDescription('The frequency of the update of the extended history log.\n                 The value is in seconds')
inSeptConfigConfigurationLog = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigConfigurationLog.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigConfigurationLog.setDescription(' Enable/disable inSept to log parameter change.')
inSeptConfigDhcpStatue = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigDhcpStatue.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigDhcpStatue.setDescription('Enable or disable DHCP/BootP capability')
inSeptConfigPingStatue = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigPingStatue.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigPingStatue.setDescription('Enable or disable Ping Echo capability')
inSeptConfigTftpStatue = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigTftpStatue.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigTftpStatue.setDescription('Enable or disable TFTP network upgrade capability')
inSeptConfigTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 8))
inSeptConfigTelnetStatue = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigTelnetStatue.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigTelnetStatue.setDescription('Enable or disable telnet access')
inSeptConfigTelnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigTelnetPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigTelnetPortNumber.setDescription('Setting the server port of telnet.')
inSeptConfigHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 9))
inSeptConfigHttpStatue = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigHttpStatue.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigHttpStatue.setDescription('Enable or disable HTTP access')
inSeptConfigHttpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigHttpPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigHttpPortNumber.setDescription('Setting the server port of HTTP.')
inSeptConfigHttpSecurity = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigHttpSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigHttpSecurity.setDescription('Enable/disable HTTP access for read-only users')
inSeptConfigSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 10))
inSeptConfigSnmpStatue = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigSnmpStatue.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigSnmpStatue.setDescription('Enable or disable SNMP access')
inSeptConfigSnmpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigSnmpPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigSnmpPortNumber.setDescription('Setting the server port of SNMP.')
inSeptConfigControl = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 11))
inSeptConfigResetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigResetToDefault.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigResetToDefault.setDescription('Reset all parameters of interSeptor to default value')
inSeptConfigRestart = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigRestart.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigRestart.setDescription('Restart interSeptor')
inSeptConfigTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 12))
inSeptConfigTrapRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigTrapRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigTrapRetryCount.setDescription('The count of repeat traps to send to NMS before trap\n                 acknowledgement is received.')
inSeptConfigTrapRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigTrapRetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigTrapRetryTime.setDescription('The time between retrying to send traps to NMS.')
inSeptConfigTrapAckSignature = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 12, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigTrapAckSignature.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigTrapAckSignature.setDescription('The signature of trap acknowledgement.')
inSeptConfigPollRate = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigPollRate.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigPollRate.setDescription(' The frequency that interSeptor updates readings from sensors\n                (unit : second).')
inSeptConfigTrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 14), )
if mibBuilder.loadTexts: inSeptConfigTrapsReceiversTable.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigTrapsReceiversTable.setDescription('A list of managers to send traps to.  The number of\n                 entries is given by the value of inSeptConfigNumTrapReceivers')
inSeptConfigTrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 14, 1), ).setIndexNames((0, "InterSeptor-MIB", "inSepttrapsIndex"))
if mibBuilder.loadTexts: inSeptConfigTrapsReceiversEntry.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigTrapsReceiversEntry.setDescription('The managers to send traps to.')
inSepttrapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSepttrapsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: inSepttrapsIndex.setDescription('The index to a trap receiver entry.')
inSepttrapsReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 14, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSepttrapsReceiverAddr.setStatus('mandatory')
if mibBuilder.loadTexts: inSepttrapsReceiverAddr.setDescription('The IP address of the manager to send a trap to.')
inSeptreceiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptreceiverCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptreceiverCommunityString.setDescription('The community name to use in the trap when\n                 sent to the manager.')
inSeptreceiverSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptreceiverSeverityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptreceiverSeverityLevel.setDescription('The severity level of traps to be received by this manager.')
inSeptreceiverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 14, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptreceiverDescription.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptreceiverDescription.setDescription('Description of trap receivers')
inSeptConfigAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 15), )
if mibBuilder.loadTexts: inSeptConfigAccessControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigAccessControlTable.setDescription('A list of managers which can access interSeptor with private\n                community string.')
inSeptConfigAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 15, 1), ).setIndexNames((0, "InterSeptor-MIB", "accessIndex"))
if mibBuilder.loadTexts: inSeptConfigAccessControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigAccessControlEntry.setDescription('The managers.')
accessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: accessIndex.setDescription('The index to a access control entry.')
accessControlAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlAddr.setStatus('mandatory')
if mibBuilder.loadTexts: accessControlAddr.setDescription('The IP address of the manager to access interSeptor')
accessCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: accessCommunityString.setDescription('The community name to use in the manager when\n                 access interSeptor')
accessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readOnly", 1), ("read-write", 2), ("notAccess", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: accessControlMode.setDescription('Access type, only read/Write access type can change parameter\n                 of interSeptor')
inSeptConfigTemperatureUnit = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigTemperatureUnit.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigTemperatureUnit.setDescription('The temperature unit of the system, can be Celsius or Farenheit')
inSeptConfigDateFormat = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dd-mm-yyyy", 1), ("mm-dd-yyyy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptConfigDateFormat.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptConfigDateFormat.setDescription('The date format of the system, can be dd/mm/yyyy or mm/dd/yyyy')
inSeptsensorMonitorSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSeptsensorMonitorSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorMonitorSensorNumber.setDescription('The number of sensors that can be monitored.')
inSeptsensorMonitorSensorTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 3, 2), )
if mibBuilder.loadTexts: inSeptsensorMonitorSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorMonitorSensorTable.setDescription('A list of sensor devices to be monitored.')
inSeptsensorMonitorSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 3, 2, 1), ).setIndexNames((0, "InterSeptor-MIB", "inSeptsensorMonitorDeviceIndex"))
if mibBuilder.loadTexts: inSeptsensorMonitorSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorMonitorSensorEntry.setDescription('The sensor device.')
inSeptsensorMonitorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSeptsensorMonitorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorMonitorDeviceIndex.setDescription('The index to a sensor device entry.')
inSeptsensorMonitorDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("eMD-HT", 3), ("eMD-T", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSeptsensorMonitorDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorMonitorDeviceStatus.setDescription('The device type connected to interSeptor.')
inSeptsensorMonitorDeviceTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSeptsensorMonitorDeviceTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorMonitorDeviceTemperature.setDescription('The temperature of sensor on device interSeptor, the unit is 0.1 degree.')
inSeptsensorMonitorDeviceTemperatureAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("normal", 3), ("lowWarning", 4), ("lowCritical", 5), ("highWarning", 6), ("highCritical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSeptsensorMonitorDeviceTemperatureAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorMonitorDeviceTemperatureAlarm.setDescription('The alarm type of sensor on device interSeptor.')
inSeptsensorMonitorDeviceHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSeptsensorMonitorDeviceHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorMonitorDeviceHumidity.setDescription('The humidity of sensor on device interSeptor, the unit is 0.1%.')
inSeptsensorMonitorDeviceHumidityAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("normal", 3), ("lowWarning", 4), ("lowCritical", 5), ("highWarning", 6), ("highCritical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSeptsensorMonitorDeviceHumidityAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorMonitorDeviceHumidityAlarm.setDescription('The alarm type of sensor on device interSeptor.')
inSeptsensorMonitorAlarm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSeptsensorMonitorAlarm1.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorMonitorAlarm1.setDescription('The device status of sensor 1 connected to interSeptor.')
inSeptsensorMonitorAlarm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSeptsensorMonitorAlarm2.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorMonitorAlarm2.setDescription('The device status of sensor 2 connected to interSeptor.')
inSeptsensorConfigSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSeptsensorConfigSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensorNumber.setDescription('The number of sensors that are connected to interSeptor.')
inSeptsensorConfigSensorTable = MibTable((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 2), )
if mibBuilder.loadTexts: inSeptsensorConfigSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensorTable.setDescription('A list of sensor devices to be configured.')
inSeptsensorConfigSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 2, 1), ).setIndexNames((0, "InterSeptor-MIB", "inSeptsensorConfigDeviceIndex"))
if mibBuilder.loadTexts: inSeptsensorConfigSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensorEntry.setDescription('The sensor device.')
inSeptsensorConfigDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inSeptsensorConfigDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigDeviceIndex.setDescription('The index to a sensor device entry.')
inSeptsensorConfigDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigDeviceName.setDescription('The name of the sensor device for identification.')
inSeptsensorConfigDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigDeviceState.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigDeviceState.setDescription('The setup of sensor device type.')
inSeptsensorConfigSensor1 = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3))
inSeptsensorConfigSensor1DeviceName = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1DeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1DeviceName.setDescription('The name of sensor device.')
inSeptsensorConfigSensor1DeviceState = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1DeviceState.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1DeviceState.setDescription('The setup of sensor device type.')
inSeptsensorConfigSensor1Temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 3))
inSeptsensorConfigSensor1TemperatureName = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureName.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureName.setDescription('The temperature sensor name.')
inSeptsensorConfigSensor1TemperatureLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureLowWarning.setDescription('The set point to trigger low warning alarm.')
inSeptsensorConfigSensor1TemperatureLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureLowCritical.setDescription('The threshold to trigger low critical alarm.')
inSeptsensorConfigSensor1TemperatureHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureHighWarning.setDescription('The threshold to trigger high warning alarm.')
inSeptsensorConfigSensor1TemperatureHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureHighCritical.setDescription('The threshold to trigger high critical alarm.')
inSeptsensorConfigSensor1TemperatureHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureHysteresis.setDescription('The set value to prevent too many alarms when temperature is hovering around the\n                 set threshold.')
inSeptsensorConfigSensor1TemperatureCalibration = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("temperatureIncrease0Point0", 1), ("temperatureIncrease0Point5", 2), ("temperatureIncrease1Point0", 3), ("temperatureIncrease1Point5", 4), ("temperatureIncrease2Point0", 5), ("temperatureIncrease2Point5", 6), ("temperatureIncrease3Point0", 7), ("temperatureMinus0Point5", 8), ("temperatureMinus1Point0", 9), ("temperatureMinus1Point5", 10), ("temperatureMinus2Point0", 11), ("temperatureMinus2Point5", 12), ("temperatureMinusPoint0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureCalibration.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureCalibration.setDescription('The set value to get the correct temperature according to your reference temperature.')
inSeptsensorConfigSensor1TemperatureLowWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureLowWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureLowWarningStatus.setDescription('Enable/disable the set point to trigger low warning alarm.')
inSeptsensorConfigSensor1TemperatureLowCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureLowCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureLowCriticalStatus.setDescription('Enable/disable the set point to trigger low critical alarm.')
inSeptsensorConfigSensor1TemperatureHighWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureHighWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureHighWarningStatus.setDescription('Enable/disable the set point to trigger high warning alarm.')
inSeptsensorConfigSensor1TemperatureHighCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureHighCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1TemperatureHighCriticalStatus.setDescription('Enable/disable the set point to trigger high critical alarm.')
inSeptsensorConfigSensor1Humidity = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 4))
inSeptsensorConfigSensor1HumdityName = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumdityName.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumdityName.setDescription('The humidity sensor name.')
inSeptsensorConfigSensor1HumidityLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityLowWarning.setDescription('The set point to trigger low warning alarm.')
inSeptsensorConfigSensor1HumidityLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityLowCritical.setDescription('The threshole to trigger low critical alarm.')
inSeptsensorConfigSensor1HumidityHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityHighWarning.setDescription('The threshold to trigger high warning alarm.')
inSeptsensorConfigSensor1HumidityHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityHighCritical.setDescription('The threshold to trigger high critical alarm.')
inSeptsensorConfigSensor1HumidityHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityHysteresis.setDescription('The set value to prevent too many alarms when Humidity is hovering around the\n                 set threshold.')
inSeptsensorConfigSensor1HumidityCalibration = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("humidityIncrease0Point0", 1), ("humidityIncrease1Point0", 2), ("humidityIncrease2Point0", 3), ("humidityIncrease3Point0", 4), ("humidityIncrease4Point0", 5), ("humidityIncrease5Point0", 6), ("humidityIncrease6Point0", 7), ("humidityMinus1Point0", 8), ("humidityMinus2Point0", 9), ("humidityMinus3Point0", 10), ("humidityMinus4Point0", 11), ("humidityMinus5Point0", 12), ("humidityMinus6Point0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityCalibration.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityCalibration.setDescription('The set value to get the correct temperature according to your reference temperature.')
inSeptsensorConfigSensor1HumidityLowWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityLowWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityLowWarningStatus.setDescription('Enable/disable the set point to trigger low warning alarm.')
inSeptsensorConfigSensor1HumidityLowCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityLowCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityLowCriticalStatus.setDescription('Enable/disable the set point to trigger low critical alarm.')
inSeptsensorConfigSensor1HumidityHighWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityHighWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityHighWarningStatus.setDescription('Enable/disable the set point to trigger high warning alarm.')
inSeptsensorConfigSensor1HumidityHighCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityHighCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1HumidityHighCriticalStatus.setDescription('Enable/disable the set point to trigger high critical alarm.')
inSeptsensorConfigSensor1Alarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 5))
inSeptsensorConfigSensor1Alarm1Name = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1Alarm1Name.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1Alarm1Name.setDescription('The name of alarm-1.')
inSeptsensorConfigSensor1Alarm1State = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3), ("highActive", 4), ("lowActive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1Alarm1State.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1Alarm1State.setDescription('Setup the signal type to trigger alarm.')
inSeptsensorConfigSensor1Alarm1Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1Alarm1Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1Alarm1Hysteresis.setDescription('The set value to delay the alarm triggered when event occurs.')
inSeptsensorConfigSensor1Alarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 6))
inSeptsensorConfigSensor1Alarm2Name = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1Alarm2Name.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1Alarm2Name.setDescription('The name of alarm-1.')
inSeptsensorConfigSensor1Alarm2State = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3), ("highActive", 4), ("lowActive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1Alarm2State.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1Alarm2State.setDescription('Setup the signal type to trigger alarm.')
inSeptsensorConfigSensor1Alarm2Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 3, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor1Alarm2Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor1Alarm2Hysteresis.setDescription('The set value to delay the alarm triggered when event occurs.')
inSeptsensorConfigSensor2 = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4))
inSeptsensorConfigSensor2DeviceName = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2DeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2DeviceName.setDescription('The name of sensor device.')
inSeptsensorConfigSensor2DeviceState = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2DeviceState.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2DeviceState.setDescription('The setup of sensor device type.')
inSeptsensorConfigSensor2Temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 3))
inSeptsensorConfigSensor2TemperatureName = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureName.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureName.setDescription('The temperature sensor name.')
inSeptsensorConfigSensor2TemperatureLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureLowWarning.setDescription('The set point to trigger low warning alarm.')
inSeptsensorConfigSensor2TemperatureLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureLowCritical.setDescription('The threshold to trigger low critical alarm.')
inSeptsensorConfigSensor2TemperatureHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureHighWarning.setDescription('The threshold to trigger high warning alarm.')
inSeptsensorConfigSensor2TemperatureHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureHighCritical.setDescription('The threshold to trigger high critical alarm.')
inSeptsensorConfigSensor2TemperatureHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureHysteresis.setDescription('The set value to prevent too many alarms when temperature is hovering around the\n                 set threshold.')
inSeptsensorConfigSensor2TemperatureCalibration = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("temperatureIncrease0Point0", 1), ("temperatureIncrease0Point5", 2), ("temperatureIncrease1Point0", 3), ("temperatureIncrease1Point5", 4), ("temperatureIncrease2Point0", 5), ("temperatureIncrease2Point5", 6), ("temperatureIncrease3Point0", 7), ("temperatureMinus0Point5", 8), ("temperatureMinus1Point0", 9), ("temperatureMinus1Point5", 10), ("temperatureMinus2Point0", 11), ("temperatureMinus2Point5", 12), ("temperatureMinusPoint0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureCalibration.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureCalibration.setDescription('The set value to get the correct temperature according to your reference temperature.')
inSeptsensorConfigSensor2TemperatureLowWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureLowWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureLowWarningStatus.setDescription('Enable/disable the set point to trigger low warning alarm.')
inSeptsensorConfigSensor2TemperatureLowCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureLowCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureLowCriticalStatus.setDescription('Enable/disable the set point to trigger low critical alarm.')
inSeptsensorConfigSensor2TemperatureHighWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureHighWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureHighWarningStatus.setDescription('Enable/disable the set point to trigger high warning alarm.')
inSeptsensorConfigSensor2TemperatureHighCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureHighCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2TemperatureHighCriticalStatus.setDescription('Enable/disable the set point to trigger high critical alarm.')
inSeptsensorConfigSensor2Humidity = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 4))
inSeptsensorConfigSensor2HumdityName = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumdityName.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumdityName.setDescription('The humidity sensor name.')
inSeptsensorConfigSensor2HumidityLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityLowWarning.setDescription('The set point to trigger low warning alarm.')
inSeptsensorConfigSensor2HumidityLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityLowCritical.setDescription('The threshold to trigger low critical alarm.')
inSeptsensorConfigSensor2HumidityHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityHighWarning.setDescription('The threshold to trigger high warning alarm.')
inSeptsensorConfigSensor2HumidityHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityHighCritical.setDescription('The threshold to trigger high critical alarm.')
inSeptsensorConfigSensor2HumidityHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityHysteresis.setDescription('The set value to prevent too many alarms when Humidity is hovering around the\n                 set threshold.')
inSeptsensorConfigSensor2HumidityCalibration = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("humidityIncrease0Point0", 1), ("humidityIncrease1Point0", 2), ("humidityIncrease2Point0", 3), ("humidityIncrease3Point0", 4), ("humidityIncrease4Point0", 5), ("humidityIncrease5Point0", 6), ("humidityIncrease6Point0", 7), ("humidityMinus1Point0", 8), ("humidityMinus2Point0", 9), ("humidityMinus3Point0", 10), ("humidityMinus4Point0", 11), ("humidityMinus5Point0", 12), ("humidityMinus6Point0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityCalibration.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityCalibration.setDescription('The set value to get the correct temperature according to your reference temperature.')
inSeptsensorConfigSensor2HumidityLowWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityLowWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityLowWarningStatus.setDescription('Enable/disable the set point to trigger low warning alarm.')
inSeptsensorConfigSensor2HumidityLowCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityLowCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityLowCriticalStatus.setDescription('Enable/disable the set point to trigger low critical alarm.')
inSeptsensorConfigSensor2HumidityHighWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityHighWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityHighWarningStatus.setDescription('Enable/disable the set point to trigger high warning alarm.')
inSeptsensorConfigSensor2HumidityHighCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityHighCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2HumidityHighCriticalStatus.setDescription('Enable/disable the set point to trigger high critical alarm.')
inSeptsensorConfigSensor2Alarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 5))
inSeptsensorConfigSensor2Alarm1Name = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2Alarm1Name.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2Alarm1Name.setDescription('The name of alarm-1.')
inSeptsensorConfigSensor2Alarm1State = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3), ("highActive", 4), ("lowActive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2Alarm1State.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2Alarm1State.setDescription('Setup the signal type to trigger alarm.')
inSeptsensorConfigSensor2Alarm1Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2Alarm1Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2Alarm1Hysteresis.setDescription('The set value to delay the alarm triggered when event occurs.')
inSeptsensorConfigSensor2Alarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 6))
inSeptsensorConfigSensor2Alarm2Name = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2Alarm2Name.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2Alarm2Name.setDescription('The name of alarm-1.')
inSeptsensorConfigSensor2Alarm2State = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3), ("highActive", 4), ("lowActive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2Alarm2State.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2Alarm2State.setDescription('Setup the signal type to trigger alarm.')
inSeptsensorConfigSensor2Alarm2Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 1, 4, 4, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inSeptsensorConfigSensor2Alarm2Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: inSeptsensorConfigSensor2Alarm2Hysteresis.setDescription('The set value to delay the alarm triggered when event occurs.')
inSeptCommunicationRestored = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,1))
if mibBuilder.loadTexts: inSeptCommunicationRestored.setDescription('INFORMATION: Communication between interSeptor and sensor has been\n                 established.')
inSeptCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,2))
if mibBuilder.loadTexts: inSeptCommunicationLost.setDescription('WARNING: Communication between interSeptor and sensor has been\n                 lost.')
inSeptAlarm1Inactive = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,3))
if mibBuilder.loadTexts: inSeptAlarm1Inactive.setDescription('INFORMATION: Alarm1 of sensor has returned from active state.')
inSeptAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,4))
if mibBuilder.loadTexts: inSeptAlarm1Active.setDescription('WARNING: Alarm1 has become active.')
inSeptAlarm2Inactive = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,5))
if mibBuilder.loadTexts: inSeptAlarm2Inactive.setDescription('INFORMATION: Alarm2 of sensor has returned from active state.')
inSeptAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,6))
if mibBuilder.loadTexts: inSeptAlarm2Active.setDescription('WARNING: Alarm2 has become active.')
inSeptTemperatureNotHighWarning = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,7))
if mibBuilder.loadTexts: inSeptTemperatureNotHighWarning.setDescription('INFORMATION: The temperature of sensor has returned from High warning to normal.')
inSeptTemperatureHighWarning = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,8))
if mibBuilder.loadTexts: inSeptTemperatureHighWarning.setDescription('WARNING: The temperature of sensor is higher than High warning set point.')
inSeptTemperatureNotLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,9))
if mibBuilder.loadTexts: inSeptTemperatureNotLowWarning.setDescription('INFORMATION: The temperature of sensor has returned from low warning to normal.')
inSeptTemperatureLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,10))
if mibBuilder.loadTexts: inSeptTemperatureLowWarning.setDescription('WARNING: The temperature of sensor is lower than low warning set point.')
inSeptTemperatureNotHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,11))
if mibBuilder.loadTexts: inSeptTemperatureNotHighCritical.setDescription('INFORMATION: The temperature of sensor is lower than high critical set point.')
inSeptTemperatureHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,12))
if mibBuilder.loadTexts: inSeptTemperatureHighCritical.setDescription('CRITICAL: The temperature of sensor is higher than high critical set point.')
inSeptTemperatureNotLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,13))
if mibBuilder.loadTexts: inSeptTemperatureNotLowCritical.setDescription('INFORMATION: The temperature of sensor is higher than low critical set point.')
inSeptTemperatureLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,14))
if mibBuilder.loadTexts: inSeptTemperatureLowCritical.setDescription('CRITICAL: The temperature of sensor is lower than low critical set point.')
inSeptHumidityNotHighWarning = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,15))
if mibBuilder.loadTexts: inSeptHumidityNotHighWarning.setDescription('INFORMATION: The humidity of sensor has returned from High warning to normal.')
inSeptHumidityHighWarning = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,16))
if mibBuilder.loadTexts: inSeptHumidityHighWarning.setDescription('WARNING: The humidity of sensor is higher than High warning set point.')
inSeptHumidityNotLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,17))
if mibBuilder.loadTexts: inSeptHumidityNotLowWarning.setDescription('INFORMATION: The humidity of sensor has returned from low warning to normal.')
inSeptHumidityLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,18))
if mibBuilder.loadTexts: inSeptHumidityLowWarning.setDescription('WARNING: The humidity of sensor is lower than low warning set point.')
inSeptHumidityNotHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,19))
if mibBuilder.loadTexts: inSeptHumidityNotHighCritical.setDescription('INFORMATION: The humidity of sensor is lower than high critical set point.')
inSeptHumidityHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,20))
if mibBuilder.loadTexts: inSeptHumidityHighCritical.setDescription('CRITICAL: The humidity of sensor is higher than high critical set point.')
inSeptHumidityNotLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,21))
if mibBuilder.loadTexts: inSeptHumidityNotLowCritical.setDescription('INFORMATION: The humidity of sensor is higher than low critical set point.')
inSeptHumidityLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 19011, 1, 3, 1, 2) + (0,22))
if mibBuilder.loadTexts: inSeptHumidityLowCritical.setDescription('CRITICAL: The humidity of sensor is lower than low critical set point.')
mibBuilder.exportSymbols("InterSeptor-MIB", inSeptsensorConfigSensor1TemperatureCalibration=inSeptsensorConfigSensor1TemperatureCalibration, accessCommunityString=accessCommunityString, inSeptTemperatureLowWarning=inSeptTemperatureLowWarning, inSeptConfigSnmpPortNumber=inSeptConfigSnmpPortNumber, inSeptsensorMonitorDeviceHumidityAlarm=inSeptsensorMonitorDeviceHumidityAlarm, inSeptsensorConfigSensor1HumidityLowWarning=inSeptsensorConfigSensor1HumidityLowWarning, inSeptAlarm1Active=inSeptAlarm1Active, inSeptConfigPingStatue=inSeptConfigPingStatue, inSeptHumidityNotHighWarning=inSeptHumidityNotHighWarning, inSeptHumidityHighCritical=inSeptHumidityHighCritical, inSeptConfigConfigurationLog=inSeptConfigConfigurationLog, inSeptHumidityHighWarning=inSeptHumidityHighWarning, inSeptConfigTrapAckSignature=inSeptConfigTrapAckSignature, inSeptConfigSubnetMask=inSeptConfigSubnetMask, inSeptTemperatureHighCritical=inSeptTemperatureHighCritical, inSeptTemperatureNotHighWarning=inSeptTemperatureNotHighWarning, inSeptConfigHttpSecurity=inSeptConfigHttpSecurity, inSeptConfigTelnetStatue=inSeptConfigTelnetStatue, inSeptsensorConfigSensorEntry=inSeptsensorConfigSensorEntry, inSeptsensorConfigSensor1Alarm2Hysteresis=inSeptsensorConfigSensor1Alarm2Hysteresis, inSeptsensorConfigSensor1Temperature=inSeptsensorConfigSensor1Temperature, inSeptsensorConfigSensor2Humidity=inSeptsensorConfigSensor2Humidity, inSeptConfigSnmp=inSeptConfigSnmp, inSeptIdentAgentSoftwareVersion=inSeptIdentAgentSoftwareVersion, inSeptsensorConfigSensorTable=inSeptsensorConfigSensorTable, inSeptsensorConfigDeviceState=inSeptsensorConfigDeviceState, inSeptConfigDhcpStatue=inSeptConfigDhcpStatue, accessControlAddr=accessControlAddr, inSeptsensorConfigSensor2Alarm1State=inSeptsensorConfigSensor2Alarm1State, inSeptConfigHttpStatue=inSeptConfigHttpStatue, inSeptsensorConfigSensor2Temperature=inSeptsensorConfigSensor2Temperature, inSeptsensorConfigSensor2TemperatureHighWarning=inSeptsensorConfigSensor2TemperatureHighWarning, inSept=inSept, inSeptsensorConfigSensor1Alarm1Hysteresis=inSeptsensorConfigSensor1Alarm1Hysteresis, inSeptsensorMonitorAlarm1=inSeptsensorMonitorAlarm1, inSeptHumidityLowCritical=inSeptHumidityLowCritical, jacarta=jacarta, inSeptsensorConfigSensor1TemperatureHighCriticalStatus=inSeptsensorConfigSensor1TemperatureHighCriticalStatus, inSeptConfigTrapRetryCount=inSeptConfigTrapRetryCount, inSeptConfigTimeFromNtp=inSeptConfigTimeFromNtp, inSeptsensorConfigSensor1HumidityHysteresis=inSeptsensorConfigSensor1HumidityHysteresis, inSeptsensorConfigSensor1Alarm1=inSeptsensorConfigSensor1Alarm1, inSeptsensorMonitor=inSeptsensorMonitor, inSeptsensorConfigSensor1HumidityLowCritical=inSeptsensorConfigSensor1HumidityLowCritical, inSeptConfigTftpStatue=inSeptConfigTftpStatue, inSeptsensorConfigSensor2TemperatureLowWarningStatus=inSeptsensorConfigSensor2TemperatureLowWarningStatus, inSeptConfigNtpIpAddress=inSeptConfigNtpIpAddress, inSeptsensorConfigSensor1HumidityCalibration=inSeptsensorConfigSensor1HumidityCalibration, inSeptHumidityNotHighCritical=inSeptHumidityNotHighCritical, inSeptConfigAccessControlTable=inSeptConfigAccessControlTable, inSeptsensorConfigSensor1Alarm2State=inSeptsensorConfigSensor1Alarm2State, inSeptsensorMonitorAlarm2=inSeptsensorMonitorAlarm2, inSeptConfigHttp=inSeptConfigHttp, inSeptsensorConfigSensor1HumidityLowCriticalStatus=inSeptsensorConfigSensor1HumidityLowCriticalStatus, inSeptsensorConfigSensor2HumidityLowCriticalStatus=inSeptsensorConfigSensor2HumidityLowCriticalStatus, inSeptsensorMonitorDeviceTemperature=inSeptsensorMonitorDeviceTemperature, inSeptConfigAccessControlEntry=inSeptConfigAccessControlEntry, inSeptsensorConfigSensor1Alarm1Name=inSeptsensorConfigSensor1Alarm1Name, inSeptConfigDate=inSeptConfigDate, inSeptConfigTime=inSeptConfigTime, inSeptsensorMonitorSensorTable=inSeptsensorMonitorSensorTable, inSeptHumidityLowWarning=inSeptHumidityLowWarning, inSeptsensorConfigSensorNumber=inSeptsensorConfigSensorNumber, inSeptsensorConfig=inSeptsensorConfig, webAppliance=webAppliance, inSeptConfigRestart=inSeptConfigRestart, inSeptsensorConfigSensor2HumidityLowCritical=inSeptsensorConfigSensor2HumidityLowCritical, inSeptsensorConfigSensor2Alarm2Hysteresis=inSeptsensorConfigSensor2Alarm2Hysteresis, inSeptsensorConfigSensor2HumidityHighCriticalStatus=inSeptsensorConfigSensor2HumidityHighCriticalStatus, inSeptCommunicationLost=inSeptCommunicationLost, inSeptsensorConfigDeviceName=inSeptsensorConfigDeviceName, inSeptConfigGateway=inSeptConfigGateway, inSeptsensorConfigSensor2HumdityName=inSeptsensorConfigSensor2HumdityName, inSeptConfigTrapsReceiversTable=inSeptConfigTrapsReceiversTable, inSeptsensorConfigSensor2Alarm2State=inSeptsensorConfigSensor2Alarm2State, inSeptConfigExtHistoryLogFrequency=inSeptConfigExtHistoryLogFrequency, inSeptsensorConfigSensor1TemperatureHighWarning=inSeptsensorConfigSensor1TemperatureHighWarning, inSeptIdentName=inSeptIdentName, inSepttrapsReceiverAddr=inSepttrapsReceiverAddr, inSeptConfigLog=inSeptConfigLog, inSeptsensorConfigSensor1HumidityHighWarningStatus=inSeptsensorConfigSensor1HumidityHighWarningStatus, inSeptTemperatureLowCritical=inSeptTemperatureLowCritical, accessIndex=accessIndex, inSeptsensorConfigSensor1HumdityName=inSeptsensorConfigSensor1HumdityName, inSeptConfigDayLightSaving=inSeptConfigDayLightSaving, inSeptsensorConfigSensor1Humidity=inSeptsensorConfigSensor1Humidity, inSeptConfigTelnetPortNumber=inSeptConfigTelnetPortNumber, inSeptConfigHttpPortNumber=inSeptConfigHttpPortNumber, inSeptCommunicationRestored=inSeptCommunicationRestored, inSeptConfigDateTime=inSeptConfigDateTime, inSeptConfigControl=inSeptConfigControl, inSeptsensorMonitorDeviceStatus=inSeptsensorMonitorDeviceStatus, inSeptsensorConfigSensor1HumidityHighWarning=inSeptsensorConfigSensor1HumidityHighWarning, inSeptConfig=inSeptConfig, inSeptsensorConfigSensor1TemperatureLowWarning=inSeptsensorConfigSensor1TemperatureLowWarning, inSeptsensorMonitorSensorEntry=inSeptsensorMonitorSensorEntry, inSeptsensorConfigSensor2HumidityHighWarning=inSeptsensorConfigSensor2HumidityHighWarning, inSeptsensorConfigSensor2Alarm1Name=inSeptsensorConfigSensor2Alarm1Name, inSeptTemperatureNotLowCritical=inSeptTemperatureNotLowCritical, inSeptHumidityNotLowCritical=inSeptHumidityNotLowCritical, inSeptsensorConfigSensor1HumidityHighCritical=inSeptsensorConfigSensor1HumidityHighCritical, inSeptsensorMonitorDeviceHumidity=inSeptsensorMonitorDeviceHumidity, inSeptsensorConfigSensor2Alarm2Name=inSeptsensorConfigSensor2Alarm2Name, inSepttrapsIndex=inSepttrapsIndex, inSeptsensorConfigSensor2TemperatureLowWarning=inSeptsensorConfigSensor2TemperatureLowWarning, inSeptsensorConfigSensor2TemperatureHysteresis=inSeptsensorConfigSensor2TemperatureHysteresis, inSeptsensorMonitorSensorNumber=inSeptsensorMonitorSensorNumber, inSeptsensorConfigSensor2HumidityLowWarningStatus=inSeptsensorConfigSensor2HumidityLowWarningStatus, inSeptConfigTelnet=inSeptConfigTelnet, inSeptsensorConfigSensor2HumidityLowWarning=inSeptsensorConfigSensor2HumidityLowWarning, inSeptsensorConfigSensor2DeviceName=inSeptsensorConfigSensor2DeviceName, inSeptIdentManufacturer=inSeptIdentManufacturer, inSeptConfigNtpTimeZone=inSeptConfigNtpTimeZone, inSeptsensorConfigSensor2HumidityCalibration=inSeptsensorConfigSensor2HumidityCalibration, inSeptsensorConfigSensor1HumidityHighCriticalStatus=inSeptsensorConfigSensor1HumidityHighCriticalStatus, inSeptConfigMibVersion=inSeptConfigMibVersion, inSeptIdent=inSeptIdent, inSeptsensorConfigSensor1TemperatureName=inSeptsensorConfigSensor1TemperatureName, inSeptAlarm2Inactive=inSeptAlarm2Inactive, inSeptTemperatureNotHighCritical=inSeptTemperatureNotHighCritical, inSeptTemperatureNotLowWarning=inSeptTemperatureNotLowWarning, inSeptObjects=inSeptObjects, inSeptConfigIpAddress=inSeptConfigIpAddress, inSeptsensorConfigSensor2TemperatureHighWarningStatus=inSeptsensorConfigSensor2TemperatureHighWarningStatus, inSeptsensorConfigSensor1DeviceName=inSeptsensorConfigSensor1DeviceName, product=product, inSeptsensorConfigSensor1HumidityLowWarningStatus=inSeptsensorConfigSensor1HumidityLowWarningStatus, inSeptsensorConfigSensor2TemperatureLowCritical=inSeptsensorConfigSensor2TemperatureLowCritical, inSeptsensorConfigSensor2TemperatureCalibration=inSeptsensorConfigSensor2TemperatureCalibration, inSeptConfigTrapRetryTime=inSeptConfigTrapRetryTime, inSeptsensorConfigSensor2HumidityHysteresis=inSeptsensorConfigSensor2HumidityHysteresis, inSeptsensorConfigSensor2DeviceState=inSeptsensorConfigSensor2DeviceState, inSeptsensorConfigSensor2Alarm1Hysteresis=inSeptsensorConfigSensor2Alarm1Hysteresis, inSeptsensorConfigSensor1DeviceState=inSeptsensorConfigSensor1DeviceState, inSeptConfigDateFormat=inSeptConfigDateFormat, inSeptConfigTemperatureUnit=inSeptConfigTemperatureUnit, inSeptreceiverSeverityLevel=inSeptreceiverSeverityLevel, inSeptConfigTrap=inSeptConfigTrap, accessControlMode=accessControlMode, inSeptsensorConfigSensor1TemperatureHysteresis=inSeptsensorConfigSensor1TemperatureHysteresis, inSeptsensorConfigSensor2Alarm2=inSeptsensorConfigSensor2Alarm2, inSeptsensorConfigSensor2TemperatureName=inSeptsensorConfigSensor2TemperatureName, inSeptsensorConfigSensor1TemperatureLowCriticalStatus=inSeptsensorConfigSensor1TemperatureLowCriticalStatus, inSeptsensorConfigSensor1TemperatureHighWarningStatus=inSeptsensorConfigSensor1TemperatureHighWarningStatus, inSeptsensorMonitorDeviceIndex=inSeptsensorMonitorDeviceIndex, inSeptsensorConfigSensor2HumidityHighWarningStatus=inSeptsensorConfigSensor2HumidityHighWarningStatus, inSeptHumidityNotLowWarning=inSeptHumidityNotLowWarning, inSeptsensorConfigDeviceIndex=inSeptsensorConfigDeviceIndex, inSeptsensorConfigSensor2=inSeptsensorConfigSensor2, inSeptsensorMonitorDeviceTemperatureAlarm=inSeptsensorMonitorDeviceTemperatureAlarm, inSeptsensorConfigSensor1TemperatureLowWarningStatus=inSeptsensorConfigSensor1TemperatureLowWarningStatus, inSeptsensorConfigSensor1=inSeptsensorConfigSensor1, inSeptAlarm2Active=inSeptAlarm2Active, inSeptTemperatureHighWarning=inSeptTemperatureHighWarning, inSeptsensorConfigSensor1Alarm2=inSeptsensorConfigSensor1Alarm2, inSeptConfigSnmpStatue=inSeptConfigSnmpStatue, inSeptsensorConfigSensor1Alarm1State=inSeptsensorConfigSensor1Alarm1State, inSeptsensorConfigSensor2Alarm1=inSeptsensorConfigSensor2Alarm1, inSeptTraps=inSeptTraps, inSeptIdentModel=inSeptIdentModel, inSeptConfigResetToDefault=inSeptConfigResetToDefault, inSeptsensorConfigSensor1Alarm2Name=inSeptsensorConfigSensor1Alarm2Name, inSeptreceiverDescription=inSeptreceiverDescription, inSeptConfigNetwork=inSeptConfigNetwork, inSeptConfigHistoryLogFrequency=inSeptConfigHistoryLogFrequency, inSeptConfigPollRate=inSeptConfigPollRate, inSeptConfigTrapsReceiversEntry=inSeptConfigTrapsReceiversEntry, inSeptsensorConfigSensor2HumidityHighCritical=inSeptsensorConfigSensor2HumidityHighCritical, inSeptsensorConfigSensor1TemperatureLowCritical=inSeptsensorConfigSensor1TemperatureLowCritical, inSeptAlarm1Inactive=inSeptAlarm1Inactive, inSeptsensorConfigSensor1TemperatureHighCritical=inSeptsensorConfigSensor1TemperatureHighCritical, inSeptsensorConfigSensor2TemperatureHighCritical=inSeptsensorConfigSensor2TemperatureHighCritical, inSeptsensorConfigSensor2TemperatureHighCriticalStatus=inSeptsensorConfigSensor2TemperatureHighCriticalStatus, inSeptreceiverCommunityString=inSeptreceiverCommunityString, inSeptsensorConfigSensor2TemperatureLowCriticalStatus=inSeptsensorConfigSensor2TemperatureLowCriticalStatus)
