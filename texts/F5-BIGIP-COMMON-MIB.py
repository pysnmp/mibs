#
# PySNMP MIB module F5-BIGIP-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/f5/F5-BIGIP-COMMON-MIB
# Produced by pysmi-1.1.12 at Wed May 29 10:22:13 2024
# On host fv-az1984-402 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, Counter64, MibIdentifier, iso, Gauge32, Integer32, ObjectIdentity, enterprises, NotificationType, ModuleIdentity, Counter32, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "Counter64", "MibIdentifier", "iso", "Gauge32", "Integer32", "ObjectIdentity", "enterprises", "NotificationType", "ModuleIdentity", "Counter32", "TimeTicks", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
f5 = ModuleIdentity((1, 3, 6, 1, 4, 1, 3375))
if mibBuilder.loadTexts: f5.setLastUpdated('202004092222Z')
if mibBuilder.loadTexts: f5.setOrganization('F5 Networks, Inc.')
if mibBuilder.loadTexts: f5.setContactInfo('postal: F5 Networks, Inc. \n\t \t  801 Fifth Avenue\n                  Seattle, WA 98104\n          phone:  (206) 272-6500\n          email:  support@f5.com')
if mibBuilder.loadTexts: f5.setDescription('Top-level infrastructure of the F5 enterprise MIB tree.')
bigipTrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2))
bigipNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 4))
bigipCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 5))
bigipNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0))
bigipNotifyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 4, 1))
bigipCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 5, 1))
bigipGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2))
bigipNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 4))
bigipNotifyObjMsg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bigipNotifyObjMsg.setStatus('current')
if mibBuilder.loadTexts: bigipNotifyObjMsg.setDescription('The additional information about the related notification.')
bigipNotifyObjNode = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bigipNotifyObjNode.setStatus('current')
if mibBuilder.loadTexts: bigipNotifyObjNode.setDescription('The user-assigned name or IP address of the node.')
bigipNotifyObjPort = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bigipNotifyObjPort.setStatus('current')
if mibBuilder.loadTexts: bigipNotifyObjPort.setDescription('The port or service name.')
bigipNotifyObjHostName = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bigipNotifyObjHostName.setStatus('current')
if mibBuilder.loadTexts: bigipNotifyObjHostName.setDescription('The host name.')
bigipNotifyObjSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bigipNotifyObjSeverity.setStatus('current')
if mibBuilder.loadTexts: bigipNotifyObjSeverity.setDescription('The severity level of the trap.')
bigipNotifyObjEventId = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bigipNotifyObjEventId.setStatus('current')
if mibBuilder.loadTexts: bigipNotifyObjEventId.setDescription('The message log ID.')
bigipNotifyObjTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bigipNotifyObjTimestamp.setStatus('current')
if mibBuilder.loadTexts: bigipNotifyObjTimestamp.setDescription('The time of trap generation.')
bigipAgentStart = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 1))
if mibBuilder.loadTexts: bigipAgentStart.setStatus('current')
if mibBuilder.loadTexts: bigipAgentStart.setDescription('An indication that the agent has started running.')
bigipAgentShutdown = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 2))
if mibBuilder.loadTexts: bigipAgentShutdown.setStatus('current')
if mibBuilder.loadTexts: bigipAgentShutdown.setDescription('An indication that the agent is in the process of being shut down.')
bigipAgentRestart = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 3))
if mibBuilder.loadTexts: bigipAgentRestart.setStatus('current')
if mibBuilder.loadTexts: bigipAgentRestart.setDescription('An indication that the agent has been restarted.\n\t\t(eg. It happens when a SIGHUP is received.)\n\t\tThis does not imply anything about whether the configuration has\n\t\tchanged (unlike the standard coldStart or warmStart traps)')
bigipCpuTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 4)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipCpuTempHigh.setStatus('current')
if mibBuilder.loadTexts: bigipCpuTempHigh.setDescription('CPU temperature is too high.')
bigipCpuFanSpeedLow = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 5)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipCpuFanSpeedLow.setStatus('current')
if mibBuilder.loadTexts: bigipCpuFanSpeedLow.setDescription('CPU fan speed is too low.')
bigipCpuFanSpeedBad = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 6)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipCpuFanSpeedBad.setStatus('current')
if mibBuilder.loadTexts: bigipCpuFanSpeedBad.setDescription('CPU fan speed signal not received.')
bigipChassisTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 7)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipChassisTempHigh.setStatus('current')
if mibBuilder.loadTexts: bigipChassisTempHigh.setDescription('Chassis temperature is too high.')
bigipChassisFanBad = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 8)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipChassisFanBad.setStatus('current')
if mibBuilder.loadTexts: bigipChassisFanBad.setDescription('Chassis fan status is bad.')
bigipChassisPowerSupplyBad = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 9)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipChassisPowerSupplyBad.setStatus('current')
if mibBuilder.loadTexts: bigipChassisPowerSupplyBad.setDescription('Chassis power supply status is bad.')
bigipServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 10)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjNode"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjPort"))
if mibBuilder.loadTexts: bigipServiceDown.setStatus('current')
if mibBuilder.loadTexts: bigipServiceDown.setDescription('A pool member is detected DOWN.')
bigipServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 11)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjNode"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjPort"))
if mibBuilder.loadTexts: bigipServiceUp.setStatus('current')
if mibBuilder.loadTexts: bigipServiceUp.setDescription('A pool member is detected UP.')
bigipNodeDown = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 12)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjNode"))
if mibBuilder.loadTexts: bigipNodeDown.setStatus('current')
if mibBuilder.loadTexts: bigipNodeDown.setDescription('A node is detected DOWN.')
bigipNodeUp = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 13)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjNode"))
if mibBuilder.loadTexts: bigipNodeUp.setStatus('current')
if mibBuilder.loadTexts: bigipNodeUp.setDescription('A node is detected UP.')
bigipStandby = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 14)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipStandby.setStatus('current')
if mibBuilder.loadTexts: bigipStandby.setDescription('The system is going into standby mode.')
bigipActive = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 15)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipActive.setStatus('current')
if mibBuilder.loadTexts: bigipActive.setDescription('The system is going into active mode.')
bigipActiveActive = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 16)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipActiveActive.setStatus('current')
if mibBuilder.loadTexts: bigipActiveActive.setDescription('The system is going into active-active mode.')
bigipFeatureFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 17)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipFeatureFailed.setStatus('current')
if mibBuilder.loadTexts: bigipFeatureFailed.setDescription('A high availability feature triggered action failed.')
bigipFeatureOnline = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 18)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipFeatureOnline.setStatus('current')
if mibBuilder.loadTexts: bigipFeatureOnline.setDescription('A high availability feature is now responding.')
bigipLicenseFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 19)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLicenseFailed.setStatus('current')
if mibBuilder.loadTexts: bigipLicenseFailed.setDescription('The license validation failed.')
bigipLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 20)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLicenseExpired.setStatus('current')
if mibBuilder.loadTexts: bigipLicenseExpired.setDescription('The license has expired.')
bigipTamdAlert = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 21)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipTamdAlert.setStatus('current')
if mibBuilder.loadTexts: bigipTamdAlert.setDescription('Too many authentication failures (> 60) in 1 second to\n\t\tTMM (Traffic Management Module).')
bigipAggrReaperStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 22)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAggrReaperStateChange.setStatus('current')
if mibBuilder.loadTexts: bigipAggrReaperStateChange.setDescription('The aggressive reaper state changed. Aggressive reaper \n\t\tstate changes indicate the system is moving into distress-mode \n\t\tfor DOS prevention.')
bigipARPConflict = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 23)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipARPConflict.setStatus('current')
if mibBuilder.loadTexts: bigipARPConflict.setDescription('There is an ARP conflict.')
bigipNetLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 24)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipNetLinkDown.setStatus('current')
if mibBuilder.loadTexts: bigipNetLinkDown.setDescription('An internal interface link is down. This is for L1 and L2. \n\t\tThese are internal links within the box connecting the CPU \n\t\tand Switch subsystems, which should never lose link. \n\t\tIf they do, it indicates a serious problem.')
bigipDiskPartitionWarn = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 25)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipDiskPartitionWarn.setStatus('current')
if mibBuilder.loadTexts: bigipDiskPartitionWarn.setDescription('The disk partition free space is very limited, which is   \n\t\tless than a specified limit. By default, the limit is set\n\t\tto 30% of total disk space.')
bigipDiskPartitionGrowth = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 26)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipDiskPartitionGrowth.setStatus('current')
if mibBuilder.loadTexts: bigipDiskPartitionGrowth.setDescription('The disk partition exceeds the specified growth limit. \n\t\tBy default, the limit is set to 5% of the total disk space.\n\t\tThe growth is difference of two consecutive monitoring data.')
bigipAuthFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 27)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAuthFailed.setStatus('current')
if mibBuilder.loadTexts: bigipAuthFailed.setDescription('The login/sshd authentication has failed.')
bigipConfigLoaded = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 28)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipConfigLoaded.setStatus('deprecated')
if mibBuilder.loadTexts: bigipConfigLoaded.setDescription('Deprecated! The component which created this event has been\ndeprecated.  The configuration was loaded.')
bigipLogEmerg = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 29)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLogEmerg.setStatus('current')
if mibBuilder.loadTexts: bigipLogEmerg.setDescription('The system is in an unusable situation.')
bigipLogAlert = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 30)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLogAlert.setStatus('current')
if mibBuilder.loadTexts: bigipLogAlert.setDescription('Action must be taken immediately for the system to work\nproperly.')
bigipLogCrit = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 31)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLogCrit.setStatus('current')
if mibBuilder.loadTexts: bigipLogCrit.setDescription('The system is in a critical condition.')
bigipLogErr = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 32)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLogErr.setStatus('current')
if mibBuilder.loadTexts: bigipLogErr.setDescription('The system has some error conditions.')
bigipLogWarning = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 33)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLogWarning.setStatus('current')
if mibBuilder.loadTexts: bigipLogWarning.setDescription('The system is experiencing some warning conditions.')
bigipPacketRejected = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 34)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipPacketRejected.setStatus('current')
if mibBuilder.loadTexts: bigipPacketRejected.setDescription('The packets are rejected.')
bigipCompLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 35)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipCompLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: bigipCompLimitExceeded.setDescription('The compression license limit is exceeded.')
bigipSslLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 36)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipSslLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: bigipSslLimitExceeded.setDescription('The SSL license limits are exceeded, \n\t\teither for TPS (Transactions Per Second) or \n\t\tfor MPS (Megabits Per Second).')
bigipExternalLinkChange = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 37)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipExternalLinkChange.setStatus('current')
if mibBuilder.loadTexts: bigipExternalLinkChange.setDescription('An external interface link status changes.  \n\t\tFor a fixed port, this is an occurrence when network cables \n\t\tare connected  or removed, and the network is reconfigured; \n\t\tfor a pluggable port (such as a SFP or XFP port), this happens \n\t\twhen the pluggable unit is plugged in or unplugged, \n\t\tor when a cable is connected or removed from a plugged port.  \n\t\tThe possible values are UP, DOWN, or UNPOPULATED.')
bigipAsmRequestBlocked = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 38)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAsmRequestBlocked.setStatus('current')
if mibBuilder.loadTexts: bigipAsmRequestBlocked.setDescription('The HTTP request was blocked because it issued (at least one)\n\t\tviolation(s) which is marked as blocking at the current active \n\t\tpolicy in Application Security Module.')
bigipAsmRequestViolation = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 39)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAsmRequestViolation.setStatus('current')
if mibBuilder.loadTexts: bigipAsmRequestViolation.setDescription('The HTTP request issued a violation to the current active policy. \n\t\tThis violation is marked as an alerting violation in that policy\n\t\tin Application Security Module.')
bigipGtmPoolAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 40)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmPoolAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmPoolAvail.setDescription('A pool is becoming available in global traffic management module.')
bigipGtmPoolNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 41)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmPoolNotAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmPoolNotAvail.setDescription('A pool is becoming unavailable in global traffic management module.')
bigipGtmPoolDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 42)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmPoolDisabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmPoolDisabled.setDescription('A pool is disabled in global traffic management module.')
bigipGtmPoolEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 43)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmPoolEnabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmPoolEnabled.setDescription('A pool is enabled in global traffic management module.')
bigipGtmLinkAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 44)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmLinkAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmLinkAvail.setDescription('A link is becoming available in global traffic management module.')
bigipGtmLinkNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 45)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmLinkNotAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmLinkNotAvail.setDescription('A link is becoming unavailable in global traffic management module.')
bigipGtmLinkDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 46)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmLinkDisabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmLinkDisabled.setDescription('A link is disabled in global traffic management module.')
bigipGtmLinkEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 47)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmLinkEnabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmLinkEnabled.setDescription('A link is enabled in global traffic management module.')
bigipGtmWideIpAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 48)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmWideIpAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmWideIpAvail.setDescription('A wide IP is becoming available in global traffic management module.')
bigipGtmWideIpNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 49)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmWideIpNotAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmWideIpNotAvail.setDescription('A wide IP is becoming unavailable in global traffic management module.')
bigipGtmWideIpDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 50)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmWideIpDisabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmWideIpDisabled.setDescription('A wide IP is disabled in global traffic management module.')
bigipGtmWideIpEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 51)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmWideIpEnabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmWideIpEnabled.setDescription('A wide IP is enabled in global traffic management module.')
bigipGtmPoolMbrAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 52)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmPoolMbrAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmPoolMbrAvail.setDescription('A pool member is becoming available in global traffic management module.')
bigipGtmPoolMbrNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 53)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmPoolMbrNotAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmPoolMbrNotAvail.setDescription('A pool member is becoming unavailable in global traffic management module.')
bigipGtmPoolMbrDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 54)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmPoolMbrDisabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmPoolMbrDisabled.setDescription('A pool member is disabled in global traffic management module.')
bigipGtmPoolMbrEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 55)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmPoolMbrEnabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmPoolMbrEnabled.setDescription('A pool member is enabled in global traffic management module.')
bigipGtmServerAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 56)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmServerAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmServerAvail.setDescription('A server is becoming available in global traffic management module.')
bigipGtmServerNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 57)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmServerNotAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmServerNotAvail.setDescription('A server is becoming unavailable in global traffic management module.')
bigipGtmServerDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 58)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmServerDisabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmServerDisabled.setDescription('A server is disabled in global traffic management module.')
bigipGtmServerEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 59)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmServerEnabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmServerEnabled.setDescription('A server is enabled in global traffic management module.')
bigipGtmVsAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 60)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmVsAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmVsAvail.setDescription('A virtual server is becoming available in global traffic management module.')
bigipGtmVsNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 61)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmVsNotAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmVsNotAvail.setDescription('A virtual server is becoming unavailable in global traffic management module.')
bigipGtmVsDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 62)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmVsDisabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmVsDisabled.setDescription('A virtual server is disabled in global traffic management module.')
bigipGtmVsEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 63)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmVsEnabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmVsEnabled.setDescription('A virtual server is enabled in global traffic management module.')
bigipGtmDcAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 64)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmDcAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmDcAvail.setDescription('A data center is becoming available in global traffic management module.')
bigipGtmDcNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 65)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmDcNotAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmDcNotAvail.setDescription('A data center is becoming unavailable in global traffic management module.')
bigipGtmDcDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 66)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmDcDisabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmDcDisabled.setDescription('A data center is disabled in global traffic management module.')
bigipGtmDcEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 67)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmDcEnabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmDcEnabled.setDescription('A data center is enabled in global traffic management module.')
bigipHardDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 68)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipHardDiskFailure.setStatus('deprecated')
if mibBuilder.loadTexts: bigipHardDiskFailure.setDescription('Deprecated!  This object has been eliminated.\n                The hard disk is failing.')
bigipGtmAppObjAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 69)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmAppObjAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmAppObjAvail.setDescription('An application object is becoming available in global management module.')
bigipGtmAppObjNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 70)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmAppObjNotAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmAppObjNotAvail.setDescription('An application object is becoming unavailable in global management module.')
bigipGtmAppAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 71)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmAppAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmAppAvail.setDescription('An application is becoming available in global management module.')
bigipGtmAppNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 72)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmAppNotAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmAppNotAvail.setDescription('An application is becoming unavailable in global management module.')
bigipGtmJoinedGroup = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 73)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmJoinedGroup.setStatus('current')
if mibBuilder.loadTexts: bigipGtmJoinedGroup.setDescription('BIG-IP GTM joined sync group.')
bigipGtmLeftGroup = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 74)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmLeftGroup.setStatus('current')
if mibBuilder.loadTexts: bigipGtmLeftGroup.setDescription('BIG-IP GTM left sync group.')
bigipStandByFail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 75)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipStandByFail.setStatus('current')
if mibBuilder.loadTexts: bigipStandByFail.setDescription('In failover condition, this standby will not be able to go active.')
bigipInetPortExhaustion = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 76)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipInetPortExhaustion.setStatus('current')
if mibBuilder.loadTexts: bigipInetPortExhaustion.setDescription('The TMM has run out of source ports and cannot open new communications channels with other machines.')
bigipGtmBoxAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 77)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmBoxAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmBoxAvail.setDescription('A gtm machine (which equates to an iquery connect to a gtm machine) has gone UP')
bigipGtmBoxNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 78)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmBoxNotAvail.setStatus('current')
if mibBuilder.loadTexts: bigipGtmBoxNotAvail.setDescription('A gtm machine (which equates to an iquery connect to a gtm machine) has gone DOWN')
bigipAsmFtpRequestBlocked = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 79)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAsmFtpRequestBlocked.setStatus('current')
if mibBuilder.loadTexts: bigipAsmFtpRequestBlocked.setDescription('The FTP request was blocked because it issued (at least one)\n\t\tviolation(s) which is marked as blocking at the current active\n\t\tpolicy in Application Security Module.')
bigipAsmFtpRequestViolation = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 80)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAsmFtpRequestViolation.setStatus('current')
if mibBuilder.loadTexts: bigipAsmFtpRequestViolation.setDescription('The FTP request issued a violation to the current active\n\t\tpolicy. This violation is marked as an alerting violation \n\t\tin that policy in Application Security Module.')
bigipGtmBig3dSslCertExpired = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 81)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmBig3dSslCertExpired.setStatus('current')
if mibBuilder.loadTexts: bigipGtmBig3dSslCertExpired.setDescription('BIG-IP GTM BIG3D SSL Cert has expired.')
bigipGtmBig3dSslCertWillExpire = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 82)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmBig3dSslCertWillExpire.setStatus('current')
if mibBuilder.loadTexts: bigipGtmBig3dSslCertWillExpire.setDescription('BIG-IP GTM BIG3D SSL Cert will expire.')
bigipGtmSslCertExpired = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 83)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmSslCertExpired.setStatus('current')
if mibBuilder.loadTexts: bigipGtmSslCertExpired.setDescription('BIG-IP GTM SSL Cert has expired.')
bigipGtmSslCertWillExpire = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 84)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmSslCertWillExpire.setStatus('current')
if mibBuilder.loadTexts: bigipGtmSslCertWillExpire.setDescription('BIG-IP GTM SSL Cert will expire.')
bigipAsmSmtpRequestBlocked = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 85)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAsmSmtpRequestBlocked.setStatus('current')
if mibBuilder.loadTexts: bigipAsmSmtpRequestBlocked.setDescription('The SMTP request was blocked because it issued (at least one)\n\t\tviolation(s) which is marked as blocking at the current active\n\t\tpolicy in Application Security Module.')
bigipAsmSmtpRequestViolation = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 86)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAsmSmtpRequestViolation.setStatus('current')
if mibBuilder.loadTexts: bigipAsmSmtpRequestViolation.setDescription('The SMTP request issued a violation to the current active\n\t\tpolicy. This violation is marked as an alerting violation \n\t\tin that policy in Application Security Module.')
bigipBladeTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 87)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipBladeTempHigh.setStatus('current')
if mibBuilder.loadTexts: bigipBladeTempHigh.setDescription('Blade temperature is too high.')
bigipBladeNoPower = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 88)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipBladeNoPower.setStatus('current')
if mibBuilder.loadTexts: bigipBladeNoPower.setDescription('A blade lost power. The blade may be pulled out')
bigipClusterdNoResponse = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 89)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipClusterdNoResponse.setStatus('current')
if mibBuilder.loadTexts: bigipClusterdNoResponse.setDescription('The cluster daemon failed to respond for 10 or more seconds.')
bigipBladeOffline = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 90)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipBladeOffline.setStatus('current')
if mibBuilder.loadTexts: bigipBladeOffline.setDescription('A blade has failed - offline.')
bigipAsmDosAttackDetected = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 91)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAsmDosAttackDetected.setStatus('current')
if mibBuilder.loadTexts: bigipAsmDosAttackDetected.setDescription('DoS attack detected by Application Security Module.')
bigipAsmBruteForceAttackDetected = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 92)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAsmBruteForceAttackDetected.setStatus('current')
if mibBuilder.loadTexts: bigipAsmBruteForceAttackDetected.setDescription('Brute force attack detected by Application Security Module.')
bigipAomCpuTempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 93)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAomCpuTempTooHigh.setStatus('current')
if mibBuilder.loadTexts: bigipAomCpuTempTooHigh.setDescription('AOM reports the air temperature near the host CPU too high.')
bigipGtmKeyGenerationRollover = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 94)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmKeyGenerationRollover.setStatus('current')
if mibBuilder.loadTexts: bigipGtmKeyGenerationRollover.setDescription('DNSSEC Key generation has rolled over.')
bigipGtmKeyGenerationExpiration = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 95)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmKeyGenerationExpiration.setStatus('current')
if mibBuilder.loadTexts: bigipGtmKeyGenerationExpiration.setDescription('DNSSEC Key generation has expired.')
bigipRaidDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 96)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipRaidDiskFailure.setStatus('current')
if mibBuilder.loadTexts: bigipRaidDiskFailure.setDescription('Disk failure in a RAID disk array.')
bigipGtmProberPoolStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 97)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmProberPoolStatusChange.setStatus('current')
if mibBuilder.loadTexts: bigipGtmProberPoolStatusChange.setDescription('Prober Pool Status Change.')
bigipGtmProberPoolStatusChangeReason = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 98)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmProberPoolStatusChangeReason.setStatus('current')
if mibBuilder.loadTexts: bigipGtmProberPoolStatusChangeReason.setDescription('Prober Pool Status Change Reason.')
bigipGtmProberPoolDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 99)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmProberPoolDisabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmProberPoolDisabled.setDescription('Prober Pool Disabled.')
bigipGtmProberPoolEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 100)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmProberPoolEnabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmProberPoolEnabled.setDescription('Prober Pool Enabled.')
bigipGtmProberPoolMbrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 101)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmProberPoolMbrStatusChange.setStatus('current')
if mibBuilder.loadTexts: bigipGtmProberPoolMbrStatusChange.setDescription('Prober Pool Member Status Change.')
bigipGtmProberPoolMbrStatusChangeReason = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 102)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmProberPoolMbrStatusChangeReason.setStatus('current')
if mibBuilder.loadTexts: bigipGtmProberPoolMbrStatusChangeReason.setDescription('Prober Pool Member Status Change Reason.')
bigipGtmProberPoolMbrDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 103)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmProberPoolMbrDisabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmProberPoolMbrDisabled.setDescription('Prober Pool Member Disabled.')
bigipGtmProberPoolMbrEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 104)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmProberPoolMbrEnabled.setStatus('current')
if mibBuilder.loadTexts: bigipGtmProberPoolMbrEnabled.setDescription('Prober Pool Member Enabled.')
bigipAvrAlertsMetricSnmp = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 105)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAvrAlertsMetricSnmp.setStatus('current')
if mibBuilder.loadTexts: bigipAvrAlertsMetricSnmp.setDescription('AVR alert metric state changed - notification for SNMP.')
bigipAvrAlertsMetricSmtp = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 106)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAvrAlertsMetricSmtp.setStatus('deprecated')
if mibBuilder.loadTexts: bigipAvrAlertsMetricSmtp.setDescription('Deprecated! AVR alert metric state changed - notification for SMTP (based on SNMP).')
bigipVcmpAlertsVcmpPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 107)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipVcmpAlertsVcmpPowerOn.setStatus('current')
if mibBuilder.loadTexts: bigipVcmpAlertsVcmpPowerOn.setDescription('A VCMP guest is powered on from a suspended or powered off state.')
bigipVcmpAlertsVcmpPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 108)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipVcmpAlertsVcmpPowerOff.setStatus('current')
if mibBuilder.loadTexts: bigipVcmpAlertsVcmpPowerOff.setDescription('A VCMP guest is powered off.')
bigipVcmpAlertsVcmpHBLost = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 109)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipVcmpAlertsVcmpHBLost.setStatus('current')
if mibBuilder.loadTexts: bigipVcmpAlertsVcmpHBLost.setDescription('A VCMP guest heartbeat is lost.')
bigipVcmpAlertsVcmpHBDetected = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 110)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipVcmpAlertsVcmpHBDetected.setStatus('current')
if mibBuilder.loadTexts: bigipVcmpAlertsVcmpHBDetected.setDescription('A VCMP guest heartbeat is detected or regained.')
bigipSsdMwiNearThreshold = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 111)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipSsdMwiNearThreshold.setStatus('current')
if mibBuilder.loadTexts: bigipSsdMwiNearThreshold.setDescription('SSD disk wear-out indicator is near its threshold.')
bigipSsdMwiReachedThreshold = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 112)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipSsdMwiReachedThreshold.setStatus('current')
if mibBuilder.loadTexts: bigipSsdMwiReachedThreshold.setDescription('SSD disk wear-out indicator has reached its threshold.')
bigipSystemCheckAlertTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 113)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipSystemCheckAlertTempHigh.setStatus('current')
if mibBuilder.loadTexts: bigipSystemCheckAlertTempHigh.setDescription('Temperature is too high.')
bigipSystemCheckAlertVoltageHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 114)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipSystemCheckAlertVoltageHigh.setStatus('current')
if mibBuilder.loadTexts: bigipSystemCheckAlertVoltageHigh.setDescription('Voltage is too high.')
bigipSystemCheckAlertFanSpeedLow = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 115)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipSystemCheckAlertFanSpeedLow.setStatus('current')
if mibBuilder.loadTexts: bigipSystemCheckAlertFanSpeedLow.setDescription('Fan speed is too low.')
bigipLibhalSsdPhysicalDiskRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 116)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalSsdPhysicalDiskRemoved.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalSsdPhysicalDiskRemoved.setDescription('SSD physical disk was removed.')
bigipLibhalSsdLogicalDiskRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 117)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalSsdLogicalDiskRemoved.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalSsdLogicalDiskRemoved.setDescription('SSD logical disk was removed.')
bigipLibhalDiskBayRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 118)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalDiskBayRemoved.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalDiskBayRemoved.setDescription('Disk sled was removed from a bay.')
bigipLibhalBladePoweredOff = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 119)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalBladePoweredOff.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalBladePoweredOff.setDescription('Blade is about to be powered off.')
bigipLibhalSensorAlarmCritical = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 120)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalSensorAlarmCritical.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalSensorAlarmCritical.setDescription('Blade hardware sensor indicated critical alarm.')
bigipChmandAlertFanTrayBad = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 121)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipChmandAlertFanTrayBad.setStatus('current')
if mibBuilder.loadTexts: bigipChmandAlertFanTrayBad.setDescription('Chassis fan tray is bad or removed.')
bigipUnsolicitedRepliesExceededThreshold = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 122)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipUnsolicitedRepliesExceededThreshold.setStatus('current')
if mibBuilder.loadTexts: bigipUnsolicitedRepliesExceededThreshold.setDescription('The DNS cache object received unsolicited query replies\n                exceeding a configured threshold.')
bigipSystemCheckAlertVoltageLow = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 123)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipSystemCheckAlertVoltageLow.setStatus('current')
if mibBuilder.loadTexts: bigipSystemCheckAlertVoltageLow.setDescription('Voltage is too low.')
bigipSystemCheckAlertMilliVoltageHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 124)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipSystemCheckAlertMilliVoltageHigh.setStatus('current')
if mibBuilder.loadTexts: bigipSystemCheckAlertMilliVoltageHigh.setDescription('Milli-Voltage is too high.')
bigipSystemCheckAlertCurrentHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 125)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipSystemCheckAlertCurrentHigh.setStatus('current')
if mibBuilder.loadTexts: bigipSystemCheckAlertCurrentHigh.setDescription('Current is too high.')
bigipSystemCheckAlertPowerHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 126)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipSystemCheckAlertPowerHigh.setStatus('current')
if mibBuilder.loadTexts: bigipSystemCheckAlertPowerHigh.setDescription('Power is too high.')
bigipSystemCheckAlertMilliVoltageLow = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 127)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipSystemCheckAlertMilliVoltageLow.setStatus('current')
if mibBuilder.loadTexts: bigipSystemCheckAlertMilliVoltageLow.setDescription('Milli-Voltage is too low.')
bigipSystemCheckAlertCurrentLow = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 128)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipSystemCheckAlertCurrentLow.setStatus('current')
if mibBuilder.loadTexts: bigipSystemCheckAlertCurrentLow.setDescription('Current is too low.')
bigipSystemCheckAlertPowerLow = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 129)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipSystemCheckAlertPowerLow.setStatus('current')
if mibBuilder.loadTexts: bigipSystemCheckAlertPowerLow.setDescription('Power is too low.')
bigipNodeRate = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 130)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipNodeRate.setStatus('current')
if mibBuilder.loadTexts: bigipNodeRate.setDescription('A node has exceeded the allowed rate.')
bigipMemberRate = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 131)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipMemberRate.setStatus('current')
if mibBuilder.loadTexts: bigipMemberRate.setDescription('A pool member has exceeded the allowed rate.')
bigipVirtualRate = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 132)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipVirtualRate.setStatus('current')
if mibBuilder.loadTexts: bigipVirtualRate.setDescription('A virtual has exceeded the allowed rate.')
bigipDosAttackStart = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 133)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipDosAttackStart.setStatus('current')
if mibBuilder.loadTexts: bigipDosAttackStart.setDescription('A DOS attack start was detected.')
bigipDosAttackStop = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 134)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipDosAttackStop.setStatus('current')
if mibBuilder.loadTexts: bigipDosAttackStop.setDescription('A DOS attack stop was detected.')
bigipLtmVsAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 135)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLtmVsAvail.setStatus('current')
if mibBuilder.loadTexts: bigipLtmVsAvail.setDescription('A virtual has become available.')
bigipLtmVsUnavail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 136)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLtmVsUnavail.setStatus('current')
if mibBuilder.loadTexts: bigipLtmVsUnavail.setDescription('A virtual has become unavailable.')
bigipLtmVsEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 137)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLtmVsEnabled.setStatus('current')
if mibBuilder.loadTexts: bigipLtmVsEnabled.setDescription('A virtual has become enabled.')
bigipLtmVsDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 138)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLtmVsDisabled.setStatus('current')
if mibBuilder.loadTexts: bigipLtmVsDisabled.setDescription('A virtual has become disabled.')
bigipDnsRequestRateLimiterEngaged = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 139)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipDnsRequestRateLimiterEngaged.setStatus('current')
if mibBuilder.loadTexts: bigipDnsRequestRateLimiterEngaged.setDescription('The DNS Services request rate limiter has been engaged.')
bigipGtmRequestRateLimiterEngaged = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 140)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmRequestRateLimiterEngaged.setStatus('current')
if mibBuilder.loadTexts: bigipGtmRequestRateLimiterEngaged.setDescription('The GTM request rate limiter has been engaged.')
bigipTrafficGroupStandby = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 141)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipTrafficGroupStandby.setStatus('current')
if mibBuilder.loadTexts: bigipTrafficGroupStandby.setDescription('A traffic group is going into standby mode on the system.')
bigipTrafficGroupActive = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 142)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipTrafficGroupActive.setStatus('current')
if mibBuilder.loadTexts: bigipTrafficGroupActive.setDescription('A traffic group is going into active mode on the system.')
bigipTrafficGroupOffline = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 143)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipTrafficGroupOffline.setStatus('current')
if mibBuilder.loadTexts: bigipTrafficGroupOffline.setDescription('A traffic group is going into offline mode on the system.')
bigipTrafficGroupForcedOffline = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 144)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipTrafficGroupForcedOffline.setStatus('current')
if mibBuilder.loadTexts: bigipTrafficGroupForcedOffline.setDescription('A traffic group is going into forced offline mode on the system.')
bigipTrafficGroupDeactivate = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 145)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipTrafficGroupDeactivate.setStatus('current')
if mibBuilder.loadTexts: bigipTrafficGroupDeactivate.setDescription('A traffic group is being deactivated on the system.')
bigipTrafficGroupActivate = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 146)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipTrafficGroupActivate.setStatus('current')
if mibBuilder.loadTexts: bigipTrafficGroupActivate.setDescription('A traffic group is being activated on the system.')
bigipPsPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 147)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipPsPowerOn.setStatus('current')
if mibBuilder.loadTexts: bigipPsPowerOn.setDescription('Power supply unit has powered on.')
bigipPsPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 148)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipPsPowerOff.setStatus('current')
if mibBuilder.loadTexts: bigipPsPowerOff.setDescription('Power supply unit has powered off.')
bigipPsAbsent = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 149)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipPsAbsent.setStatus('current')
if mibBuilder.loadTexts: bigipPsAbsent.setDescription('Power supply unit is absent.')
bigipClusterPrimaryChanged = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 150)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipClusterPrimaryChanged.setStatus('current')
if mibBuilder.loadTexts: bigipClusterPrimaryChanged.setDescription('The primary blade has been changed in the cluster system.')
bigipSystemShutdown = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 151)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipSystemShutdown.setStatus('current')
if mibBuilder.loadTexts: bigipSystemShutdown.setDescription('The system is shutting down.')
bigipFipsDeviceError = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 152)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipFipsDeviceError.setStatus('current')
if mibBuilder.loadTexts: bigipFipsDeviceError.setDescription('Encountered error in the FIPS card operation.')
bigipUpdatePriority = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 153)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipUpdatePriority.setStatus('current')
if mibBuilder.loadTexts: bigipUpdatePriority.setDescription('There is a high priority software update available.')
bigipUpdateServer = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 154)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipUpdateServer.setStatus('current')
if mibBuilder.loadTexts: bigipUpdateServer.setDescription('Unable to connect to the F5 Update Check server.')
bigipUpdateError = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 155)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipUpdateError.setStatus('current')
if mibBuilder.loadTexts: bigipUpdateError.setDescription('There was an error checking for updates.')
bigipGtmDeletedFromGroup = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 156)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmDeletedFromGroup.setStatus('current')
if mibBuilder.loadTexts: bigipGtmDeletedFromGroup.setDescription('BIG-IP GTM deleted from sync group.')
bigipGtmServerNotAvailNoIP = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 157)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipGtmServerNotAvailNoIP.setStatus('current')
if mibBuilder.loadTexts: bigipGtmServerNotAvailNoIP.setDescription('A server is becoming unavailable in global traffic management module.')
bigipDDMPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 158)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipDDMPowerAlarm.setStatus('current')
if mibBuilder.loadTexts: bigipDDMPowerAlarm.setDescription('The Digital Diagnostic Monitoring on a pluggable optical\n\t\ttransceiver detected an alarm condition.\n\t\tDDM monitors both transmit and receive optical power\n\t\tto ensure the laser power is between vendor-specified\n\t\tpower thresholds for pluggable optical modules  such \n\t\tas SFP/SFP+/QSFP+/QSFP28.\n\t\tAn alarm can occur when a cable is removed from a plugged port,\n\t\tor when the transceiver is not configured or operating properly.')
bigipDDMPowerWarn = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 159)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipDDMPowerWarn.setStatus('current')
if mibBuilder.loadTexts: bigipDDMPowerWarn.setDescription('The Digital Diagnostic Monitoring on a pluggable optical\n\t\ttransceiver detected a warning condition.\n\t\tDDM monitors both transmit and receive optical power\n\t\tto ensure the laser power is between vendor-specified\n\t\tpower thresholds for pluggable optical modules  such \n\t\tas SFP/SFP+/QSFP+/QSFP28.\n\t\tA warning can occur when a cable is removed from a plugged port,\n\t\tor when the transceiver is not configured or operating properly.')
bigipDDMPowerAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 160)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipDDMPowerAlarmClear.setStatus('current')
if mibBuilder.loadTexts: bigipDDMPowerAlarmClear.setDescription('The Digital Diagnostic Monitoring on a pluggable optical\n\t\ttransceiver no longer detects an alarm condition.\n\t\tDDM monitors both transmit and receive optical power\n\t\tto ensure the laser power is between vendor-specified\n\t\tpower thresholds.')
bigipDDMPowerWarnClear = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 161)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipDDMPowerWarnClear.setStatus('current')
if mibBuilder.loadTexts: bigipDDMPowerWarnClear.setDescription('The Digital Diagnostic Monitoring on a pluggable optical\n\t\ttransceiver no longer detects a warning condition.\n\t\tDDM monitors both transmit and receive optical power\n\t\tto ensure the laser power is between vendor-specified\n\t\tpower thresholds.')
bigipDDMNonF5Optics = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 162)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipDDMNonF5Optics.setStatus('current')
if mibBuilder.loadTexts: bigipDDMNonF5Optics.setDescription('A non-F5 pluggable optical transceiver\n\t\tis present in an interface.  See support.f5.com SOL8153 for\n\t\trestrictions on third-party hardware components with\n\t\tF5 products.')
bigipTrafficGroupFailoverCond = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 163)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipTrafficGroupFailoverCond.setStatus('current')
if mibBuilder.loadTexts: bigipTrafficGroupFailoverCond.setDescription('A traffic group has reported a failover condition and will not be able to go active.')
bigipTrafficGroupFailoverCondClear = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 164)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipTrafficGroupFailoverCondClear.setStatus('current')
if mibBuilder.loadTexts: bigipTrafficGroupFailoverCondClear.setDescription('Failover condition for a traffic group has been cleared.')
bigipDisableNonF5Optics = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 165)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipDisableNonF5Optics.setStatus('current')
if mibBuilder.loadTexts: bigipDisableNonF5Optics.setDescription('A non-F5 pluggable optical transceiver\n\t\thas been disabled in an interface.  See support.f5.com SOL8153 for\n\t\trestrictions on third-party hardware components with\n\t\tF5 products.')
bigipFipsFault = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 166)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipFipsFault.setStatus('current')
if mibBuilder.loadTexts: bigipFipsFault.setDescription('The FIPS card is currently in faulty state.')
bigipLibhalAomEventWarning = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 167)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomEventWarning.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomEventWarning.setDescription('AOM has issued a warning event.')
bigipLibhalAomEventError = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 168)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomEventError.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomEventError.setDescription('AOM has issued an error event.')
bigipLibhalAomEventAlert = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 169)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomEventAlert.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomEventAlert.setDescription('AOM has issued an alert event.')
bigipLibhalAomEventCritical = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 170)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomEventCritical.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomEventCritical.setDescription('AOM has issued a critical event.')
bigipLibhalAomEventEmergency = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 171)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomEventEmergency.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomEventEmergency.setDescription('AOM has issued an emergency event.')
bigipLibhalAomEventInfo = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 172)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomEventInfo.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomEventInfo.setDescription('AOM has issued an information event.')
bigipLibhalAomSensorTempWarning = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 173)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorTempWarning.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorTempWarning.setDescription('AOM has issued a temperature sensor warning level event.')
bigipLibhalAomSensorTempError = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 174)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorTempError.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorTempError.setDescription('AOM has issued a temperature sensor error level event.')
bigipLibhalAomSensorTempAlert = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 175)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorTempAlert.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorTempAlert.setDescription('AOM has issued a temperature sensor alert level event.')
bigipLibhalAomSensorTempCritical = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 176)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorTempCritical.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorTempCritical.setDescription('AOM has issued a temperature sensor critical level event.')
bigipLibhalAomSensorTempEmergency = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 177)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorTempEmergency.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorTempEmergency.setDescription('AOM has issued a temperature sensor emergency level event.')
bigipLibhalAomSensorTempInfo = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 178)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorTempInfo.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorTempInfo.setDescription('AOM has issued a temperature sensor information level event.')
bigipLibhalAomSensorFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 179)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorFanWarning.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorFanWarning.setDescription('AOM has issued a fan sensor warning level event.')
bigipLibhalAomSensorFanError = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 180)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorFanError.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorFanError.setDescription('AOM has issued a fan sensor error level event.')
bigipLibhalAomSensorFanAlert = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 181)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorFanAlert.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorFanAlert.setDescription('AOM has issued a fan sensor alert level event.')
bigipLibhalAomSensorFanCritical = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 182)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorFanCritical.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorFanCritical.setDescription('AOM has issued a fan sensor critical level event.')
bigipLibhalAomSensorFanEmergency = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 183)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorFanEmergency.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorFanEmergency.setDescription('AOM has issued a fan sensor emergency level event.')
bigipLibhalAomSensorFanInfo = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 184)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorFanInfo.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorFanInfo.setDescription('AOM has issued a fan sensor information level event.')
bigipLibhalAomSensorPwrWarning = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 185)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorPwrWarning.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorPwrWarning.setDescription('AOM has issued a power sensor warning level event.')
bigipLibhalAomSensorPwrError = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 186)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorPwrError.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorPwrError.setDescription('AOM has issued a power sensor error level event.')
bigipLibhalAomSensorPwrAlert = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 187)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorPwrAlert.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorPwrAlert.setDescription('AOM has issued a power sensor alert level event.')
bigipLibhalAomSensorPwrCritical = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 188)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorPwrCritical.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorPwrCritical.setDescription('AOM has issued a power sensor critical level event.')
bigipLibhalAomSensorPwrEmergency = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 189)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorPwrEmergency.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorPwrEmergency.setDescription('AOM has issued a power sensor emergency level event.')
bigipLibhalAomSensorPwrInfo = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 190)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipLibhalAomSensorPwrInfo.setStatus('current')
if mibBuilder.loadTexts: bigipLibhalAomSensorPwrInfo.setDescription('AOM has issued a power sensor information level event.')
bigipAccessGlobalLicenseTHDExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 191)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAccessGlobalLicenseTHDExceeded.setStatus('current')
if mibBuilder.loadTexts: bigipAccessGlobalLicenseTHDExceeded.setDescription('Global access license usage exceeds threshold.')
bigipAccessCCULicenseTHDExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 192)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAccessCCULicenseTHDExceeded.setStatus('current')
if mibBuilder.loadTexts: bigipAccessCCULicenseTHDExceeded.setDescription('Global concurrent connectivity license usage exceeds threshold.')
bigipAccessURLFLicenseTHDExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 193)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAccessURLFLicenseTHDExceeded.setStatus('current')
if mibBuilder.loadTexts: bigipAccessURLFLicenseTHDExceeded.setDescription('Global URL filtering license usage exceeds threshold.')
bigipAccessHATransition = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 194)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAccessHATransition.setStatus('current')
if mibBuilder.loadTexts: bigipAccessHATransition.setDescription('APM HA state transitioned.')
bigipMonDBDaemonHungSQL = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 195)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipMonDBDaemonHungSQL.setStatus('current')
if mibBuilder.loadTexts: bigipMonDBDaemonHungSQL.setDescription('Hung SQL monitor connection.')
bigipMonDBDaemonIdle = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 196)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipMonDBDaemonIdle.setStatus('current')
if mibBuilder.loadTexts: bigipMonDBDaemonIdle.setDescription('DBDaemon unresponsive, shut down.')
bigipAccessURLFLimitedLicenseTHDExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 197)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipAccessURLFLimitedLicenseTHDExceeded.setStatus('current')
if mibBuilder.loadTexts: bigipAccessURLFLimitedLicenseTHDExceeded.setDescription('Global URL filtering limited license usage exceeds threshold.')
bigipChassisInadequatePower = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 198)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipChassisInadequatePower.setStatus('current')
if mibBuilder.loadTexts: bigipChassisInadequatePower.setDescription('Chassis is inadequately powered.')
bigipChassisPsUnidentified = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 199)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipChassisPsUnidentified.setStatus('current')
if mibBuilder.loadTexts: bigipChassisPsUnidentified.setDescription('Power supply unit is unidentified.')
bigipIPsecTunnelUp = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 200)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipIPsecTunnelUp.setStatus('current')
if mibBuilder.loadTexts: bigipIPsecTunnelUp.setDescription('An IPSEC Tunnel has come up.')
bigipIPsecTunnelDown = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 201)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipIPsecTunnelDown.setStatus('current')
if mibBuilder.loadTexts: bigipIPsecTunnelDown.setDescription('An IPSEC Tunnel has come down.')
bigipMrfPeerDelayHealthChanged = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 202)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if mibBuilder.loadTexts: bigipMrfPeerDelayHealthChanged.setStatus('current')
if mibBuilder.loadTexts: bigipMrfPeerDelayHealthChanged.setDescription('Peer health has changed due to peer delay.')
bigipMrfPeerOutgoingRateLimitChanged = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 203)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if mibBuilder.loadTexts: bigipMrfPeerOutgoingRateLimitChanged.setStatus('current')
if mibBuilder.loadTexts: bigipMrfPeerOutgoingRateLimitChanged.setDescription('The peer outgoing ratelimit has changed')
bigipMrfPeerIncomingRateLimitChanged = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 204)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if mibBuilder.loadTexts: bigipMrfPeerIncomingRateLimitChanged.setStatus('current')
if mibBuilder.loadTexts: bigipMrfPeerIncomingRateLimitChanged.setDescription('The peer incoming ratelimit has changed.')
bigipCertExpiration = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 205)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipCertExpiration.setStatus('current')
if mibBuilder.loadTexts: bigipCertExpiration.setDescription('Certificate with lifecycle management options configured is going\n            to expire within a week.')
bigipMrfPeerErrorsHealthChanged = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 206)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if mibBuilder.loadTexts: bigipMrfPeerErrorsHealthChanged.setStatus('current')
if mibBuilder.loadTexts: bigipMrfPeerErrorsHealthChanged.setDescription('Peer health has changed due to error responses.')
bigipMrfPeerTimeoutsHealthChanged = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 207)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if mibBuilder.loadTexts: bigipMrfPeerTimeoutsHealthChanged.setStatus('current')
if mibBuilder.loadTexts: bigipMrfPeerTimeoutsHealthChanged.setDescription('Peer health has changed due to peer timeouts.')
bigipMrfPeerHealthChanged = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 208)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if mibBuilder.loadTexts: bigipMrfPeerHealthChanged.setStatus('current')
if mibBuilder.loadTexts: bigipMrfPeerHealthChanged.setDescription('Peer health has changed.')
bigipMrfPeerConnectionStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 209)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if mibBuilder.loadTexts: bigipMrfPeerConnectionStateChanged.setStatus('current')
if mibBuilder.loadTexts: bigipMrfPeerConnectionStateChanged.setDescription('Peer connection state has changed: Disconnected.')
bigipSctpActivePathDown = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 210)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if mibBuilder.loadTexts: bigipSctpActivePathDown.setStatus('current')
if mibBuilder.loadTexts: bigipSctpActivePathDown.setDescription('SCTP active path is down.')
bigipSctpPathRestored = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 211)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if mibBuilder.loadTexts: bigipSctpPathRestored.setStatus('current')
if mibBuilder.loadTexts: bigipSctpPathRestored.setDescription('SCTP path is restored.')
bigipGeoredundancyOffline = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 212)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if mibBuilder.loadTexts: bigipGeoredundancyOffline.setStatus('current')
if mibBuilder.loadTexts: bigipGeoredundancyOffline.setDescription('Georedundancy status is offline')
bigipGeoredundancyConnected = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 213)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if mibBuilder.loadTexts: bigipGeoredundancyConnected.setStatus('current')
if mibBuilder.loadTexts: bigipGeoredundancyConnected.setDescription('Georedundancy status is connected')
bigipGeoredundancyReloadReceiving = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 214)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if mibBuilder.loadTexts: bigipGeoredundancyReloadReceiving.setStatus('current')
if mibBuilder.loadTexts: bigipGeoredundancyReloadReceiving.setDescription('Georedundancy status is reloadReceiving')
bigipGeoredundancyReloadSending = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 215)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if mibBuilder.loadTexts: bigipGeoredundancyReloadSending.setStatus('current')
if mibBuilder.loadTexts: bigipGeoredundancyReloadSending.setDescription('Georedundancy status is reload sending')
bigipGeoredundancyWatchdogAlive = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 216)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if mibBuilder.loadTexts: bigipGeoredundancyWatchdogAlive.setStatus('current')
if mibBuilder.loadTexts: bigipGeoredundancyWatchdogAlive.setDescription('Georedundancy watchdog is alive')
bigipGeoredundancyWatchdogExpired = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 217)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if mibBuilder.loadTexts: bigipGeoredundancyWatchdogExpired.setStatus('current')
if mibBuilder.loadTexts: bigipGeoredundancyWatchdogExpired.setDescription('Georedundancy watchdog is expired')
bigipExternalLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 218)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipExternalLinkDown.setStatus('current')
if mibBuilder.loadTexts: bigipExternalLinkDown.setDescription('An interface link status changed. This can be an\n                administrative disable.  For a fixed port, this is\n                when network cables are removed, for a pluggable port\n                (such as an SFP or XFP port), this is when the\n                pluggable unit is unplugged, or when a cable is removed\n                from a plugged port. The possible values are DOWN or DISABLED')
bigipExternalLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 219)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipExternalLinkUp.setStatus('current')
if mibBuilder.loadTexts: bigipExternalLinkUp.setDescription('An interface link status changed. This can be an\n                administrative enable.  For a fixed port, this is\n                when network cables are inserted, for a pluggable port\n                (such as an SFP or XFP port), this is when the\n                pluggable unit is inserted, or when a cable is\n                inserted. The possible value is UP.')
bigipFipsDeviceHighTemperature = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 220)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipFipsDeviceHighTemperature.setStatus('current')
if mibBuilder.loadTexts: bigipFipsDeviceHighTemperature.setDescription('The FIPS device has overheated and is currently above 80 degrees Celsius.')
bigipFipsDeviceCriticalTemperature = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 221)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipFipsDeviceCriticalTemperature.setStatus('current')
if mibBuilder.loadTexts: bigipFipsDeviceCriticalTemperature.setDescription('The FIPS device temperature has exceeded 85 degrees Celsius.')
bigipFipsDeviceNormalTemperature = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 222)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"))
if mibBuilder.loadTexts: bigipFipsDeviceNormalTemperature.setStatus('current')
if mibBuilder.loadTexts: bigipFipsDeviceNormalTemperature.setDescription('The FIPS device temperature has fallen back to below 80 degrees Celsius.')
bigipNotificationCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3375, 2, 5, 1, 4)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjectsGroup"), ("F5-BIGIP-COMMON-MIB", "bigipAgentNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bigipNotificationCompliance = bigipNotificationCompliance.setStatus('current')
if mibBuilder.loadTexts: bigipNotificationCompliance.setDescription('This specifies the objects that are required to claim\n                 compliance to F5 Traffic Management System.')
bigipNotifyObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 4, 1)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjNode"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjPort"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjHostName"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjSeverity"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjEventId"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjTimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bigipNotifyObjectsGroup = bigipNotifyObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: bigipNotifyObjectsGroup.setDescription('A collection of objects used for the notification MIB.')
bigipAgentNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 4, 2)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipAgentStart"), ("F5-BIGIP-COMMON-MIB", "bigipAgentShutdown"), ("F5-BIGIP-COMMON-MIB", "bigipAgentRestart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bigipAgentNotifyGroup = bigipAgentNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: bigipAgentNotifyGroup.setDescription('The notifications relating to the basic operation of \n\t\tthe BIGIP agent.')
bigipSystemNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 4, 3)).setObjects(("F5-BIGIP-COMMON-MIB", "bigipCpuTempHigh"), ("F5-BIGIP-COMMON-MIB", "bigipCpuFanSpeedLow"), ("F5-BIGIP-COMMON-MIB", "bigipCpuFanSpeedBad"), ("F5-BIGIP-COMMON-MIB", "bigipChassisTempHigh"), ("F5-BIGIP-COMMON-MIB", "bigipChassisFanBad"), ("F5-BIGIP-COMMON-MIB", "bigipChassisPowerSupplyBad"), ("F5-BIGIP-COMMON-MIB", "bigipServiceDown"), ("F5-BIGIP-COMMON-MIB", "bigipServiceUp"), ("F5-BIGIP-COMMON-MIB", "bigipNodeDown"), ("F5-BIGIP-COMMON-MIB", "bigipNodeUp"), ("F5-BIGIP-COMMON-MIB", "bigipStandby"), ("F5-BIGIP-COMMON-MIB", "bigipActive"), ("F5-BIGIP-COMMON-MIB", "bigipActiveActive"), ("F5-BIGIP-COMMON-MIB", "bigipFeatureFailed"), ("F5-BIGIP-COMMON-MIB", "bigipFeatureOnline"), ("F5-BIGIP-COMMON-MIB", "bigipLicenseFailed"), ("F5-BIGIP-COMMON-MIB", "bigipLicenseExpired"), ("F5-BIGIP-COMMON-MIB", "bigipTamdAlert"), ("F5-BIGIP-COMMON-MIB", "bigipAggrReaperStateChange"), ("F5-BIGIP-COMMON-MIB", "bigipARPConflict"), ("F5-BIGIP-COMMON-MIB", "bigipNetLinkDown"), ("F5-BIGIP-COMMON-MIB", "bigipDiskPartitionWarn"), ("F5-BIGIP-COMMON-MIB", "bigipDiskPartitionGrowth"), ("F5-BIGIP-COMMON-MIB", "bigipAuthFailed"), ("F5-BIGIP-COMMON-MIB", "bigipConfigLoaded"), ("F5-BIGIP-COMMON-MIB", "bigipLogEmerg"), ("F5-BIGIP-COMMON-MIB", "bigipLogAlert"), ("F5-BIGIP-COMMON-MIB", "bigipLogCrit"), ("F5-BIGIP-COMMON-MIB", "bigipLogErr"), ("F5-BIGIP-COMMON-MIB", "bigipLogWarning"), ("F5-BIGIP-COMMON-MIB", "bigipPacketRejected"), ("F5-BIGIP-COMMON-MIB", "bigipCompLimitExceeded"), ("F5-BIGIP-COMMON-MIB", "bigipSslLimitExceeded"), ("F5-BIGIP-COMMON-MIB", "bigipExternalLinkChange"), ("F5-BIGIP-COMMON-MIB", "bigipAsmRequestBlocked"), ("F5-BIGIP-COMMON-MIB", "bigipAsmRequestViolation"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmLinkAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmLinkNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmLinkDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmLinkEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmWideIpAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmWideIpNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmWideIpDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmWideIpEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolMbrAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolMbrNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolMbrDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolMbrEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmServerAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmServerNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmServerDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmServerEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmVsAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmVsNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmVsDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmVsEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmDcAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmDcNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmDcDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmDcEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipHardDiskFailure"), ("F5-BIGIP-COMMON-MIB", "bigipGtmAppObjAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmAppObjNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmAppAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmAppNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmJoinedGroup"), ("F5-BIGIP-COMMON-MIB", "bigipGtmLeftGroup"), ("F5-BIGIP-COMMON-MIB", "bigipStandByFail"), ("F5-BIGIP-COMMON-MIB", "bigipInetPortExhaustion"), ("F5-BIGIP-COMMON-MIB", "bigipGtmBoxAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmBoxNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipAsmFtpRequestBlocked"), ("F5-BIGIP-COMMON-MIB", "bigipAsmFtpRequestViolation"), ("F5-BIGIP-COMMON-MIB", "bigipGtmBig3dSslCertExpired"), ("F5-BIGIP-COMMON-MIB", "bigipGtmBig3dSslCertWillExpire"), ("F5-BIGIP-COMMON-MIB", "bigipGtmSslCertExpired"), ("F5-BIGIP-COMMON-MIB", "bigipGtmSslCertWillExpire"), ("F5-BIGIP-COMMON-MIB", "bigipAsmSmtpRequestBlocked"), ("F5-BIGIP-COMMON-MIB", "bigipAsmSmtpRequestViolation"), ("F5-BIGIP-COMMON-MIB", "bigipBladeTempHigh"), ("F5-BIGIP-COMMON-MIB", "bigipBladeNoPower"), ("F5-BIGIP-COMMON-MIB", "bigipClusterdNoResponse"), ("F5-BIGIP-COMMON-MIB", "bigipBladeOffline"), ("F5-BIGIP-COMMON-MIB", "bigipAsmDosAttackDetected"), ("F5-BIGIP-COMMON-MIB", "bigipAsmBruteForceAttackDetected"), ("F5-BIGIP-COMMON-MIB", "bigipAomCpuTempTooHigh"), ("F5-BIGIP-COMMON-MIB", "bigipGtmKeyGenerationRollover"), ("F5-BIGIP-COMMON-MIB", "bigipGtmKeyGenerationExpiration"), ("F5-BIGIP-COMMON-MIB", "bigipRaidDiskFailure"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolStatusChange"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolStatusChangeReason"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolMbrStatusChange"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolMbrStatusChangeReason"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolMbrDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolMbrEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipAvrAlertsMetricSnmp"), ("F5-BIGIP-COMMON-MIB", "bigipAvrAlertsMetricSmtp"), ("F5-BIGIP-COMMON-MIB", "bigipVcmpAlertsVcmpPowerOn"), ("F5-BIGIP-COMMON-MIB", "bigipVcmpAlertsVcmpPowerOff"), ("F5-BIGIP-COMMON-MIB", "bigipVcmpAlertsVcmpHBLost"), ("F5-BIGIP-COMMON-MIB", "bigipVcmpAlertsVcmpHBDetected"), ("F5-BIGIP-COMMON-MIB", "bigipSsdMwiNearThreshold"), ("F5-BIGIP-COMMON-MIB", "bigipSsdMwiReachedThreshold"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertTempHigh"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertVoltageHigh"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertFanSpeedLow"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalSsdPhysicalDiskRemoved"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalSsdLogicalDiskRemoved"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalDiskBayRemoved"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalBladePoweredOff"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalSensorAlarmCritical"), ("F5-BIGIP-COMMON-MIB", "bigipChmandAlertFanTrayBad"), ("F5-BIGIP-COMMON-MIB", "bigipUnsolicitedRepliesExceededThreshold"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertVoltageLow"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertMilliVoltageHigh"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertCurrentHigh"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertPowerHigh"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertMilliVoltageLow"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertCurrentLow"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertPowerLow"), ("F5-BIGIP-COMMON-MIB", "bigipNodeRate"), ("F5-BIGIP-COMMON-MIB", "bigipMemberRate"), ("F5-BIGIP-COMMON-MIB", "bigipVirtualRate"), ("F5-BIGIP-COMMON-MIB", "bigipDosAttackStart"), ("F5-BIGIP-COMMON-MIB", "bigipDosAttackStop"), ("F5-BIGIP-COMMON-MIB", "bigipLtmVsAvail"), ("F5-BIGIP-COMMON-MIB", "bigipLtmVsUnavail"), ("F5-BIGIP-COMMON-MIB", "bigipLtmVsEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipLtmVsDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipDnsRequestRateLimiterEngaged"), ("F5-BIGIP-COMMON-MIB", "bigipGtmRequestRateLimiterEngaged"), ("F5-BIGIP-COMMON-MIB", "bigipTrafficGroupStandby"), ("F5-BIGIP-COMMON-MIB", "bigipTrafficGroupActive"), ("F5-BIGIP-COMMON-MIB", "bigipTrafficGroupOffline"), ("F5-BIGIP-COMMON-MIB", "bigipTrafficGroupForcedOffline"), ("F5-BIGIP-COMMON-MIB", "bigipTrafficGroupDeactivate"), ("F5-BIGIP-COMMON-MIB", "bigipTrafficGroupActivate"), ("F5-BIGIP-COMMON-MIB", "bigipPsPowerOn"), ("F5-BIGIP-COMMON-MIB", "bigipPsPowerOff"), ("F5-BIGIP-COMMON-MIB", "bigipPsAbsent"), ("F5-BIGIP-COMMON-MIB", "bigipClusterPrimaryChanged"), ("F5-BIGIP-COMMON-MIB", "bigipSystemShutdown"), ("F5-BIGIP-COMMON-MIB", "bigipFipsDeviceError"), ("F5-BIGIP-COMMON-MIB", "bigipUpdatePriority"), ("F5-BIGIP-COMMON-MIB", "bigipUpdateServer"), ("F5-BIGIP-COMMON-MIB", "bigipUpdateError"), ("F5-BIGIP-COMMON-MIB", "bigipGtmDeletedFromGroup"), ("F5-BIGIP-COMMON-MIB", "bigipGtmServerNotAvailNoIP"), ("F5-BIGIP-COMMON-MIB", "bigipDDMPowerAlarm"), ("F5-BIGIP-COMMON-MIB", "bigipDDMPowerWarn"), ("F5-BIGIP-COMMON-MIB", "bigipDDMPowerAlarmClear"), ("F5-BIGIP-COMMON-MIB", "bigipDDMPowerWarnClear"), ("F5-BIGIP-COMMON-MIB", "bigipDDMNonF5Optics"), ("F5-BIGIP-COMMON-MIB", "bigipTrafficGroupFailoverCond"), ("F5-BIGIP-COMMON-MIB", "bigipTrafficGroupFailoverCondClear"), ("F5-BIGIP-COMMON-MIB", "bigipDisableNonF5Optics"), ("F5-BIGIP-COMMON-MIB", "bigipFipsFault"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomEventWarning"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomEventError"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomEventAlert"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomEventCritical"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomEventEmergency"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomEventInfo"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorTempWarning"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorTempError"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorTempAlert"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorTempCritical"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorTempEmergency"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorTempInfo"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorFanWarning"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorFanError"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorFanAlert"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorFanCritical"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorFanEmergency"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorFanInfo"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorPwrWarning"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorPwrError"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorPwrAlert"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorPwrCritical"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorPwrEmergency"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalAomSensorPwrInfo"), ("F5-BIGIP-COMMON-MIB", "bigipAccessGlobalLicenseTHDExceeded"), ("F5-BIGIP-COMMON-MIB", "bigipAccessCCULicenseTHDExceeded"), ("F5-BIGIP-COMMON-MIB", "bigipAccessURLFLicenseTHDExceeded"), ("F5-BIGIP-COMMON-MIB", "bigipAccessHATransition"), ("F5-BIGIP-COMMON-MIB", "bigipMonDBDaemonHungSQL"), ("F5-BIGIP-COMMON-MIB", "bigipMonDBDaemonIdle"), ("F5-BIGIP-COMMON-MIB", "bigipAccessURLFLimitedLicenseTHDExceeded"), ("F5-BIGIP-COMMON-MIB", "bigipChassisInadequatePower"), ("F5-BIGIP-COMMON-MIB", "bigipChassisPsUnidentified"), ("F5-BIGIP-COMMON-MIB", "bigipIPsecTunnelUp"), ("F5-BIGIP-COMMON-MIB", "bigipIPsecTunnelDown"), ("F5-BIGIP-COMMON-MIB", "bigipMrfPeerDelayHealthChanged"), ("F5-BIGIP-COMMON-MIB", "bigipMrfPeerOutgoingRateLimitChanged"), ("F5-BIGIP-COMMON-MIB", "bigipMrfPeerIncomingRateLimitChanged"), ("F5-BIGIP-COMMON-MIB", "bigipCertExpiration"), ("F5-BIGIP-COMMON-MIB", "bigipMrfPeerErrorsHealthChanged"), ("F5-BIGIP-COMMON-MIB", "bigipMrfPeerTimeoutsHealthChanged"), ("F5-BIGIP-COMMON-MIB", "bigipMrfPeerHealthChanged"), ("F5-BIGIP-COMMON-MIB", "bigipMrfPeerConnectionStateChanged"), ("F5-BIGIP-COMMON-MIB", "bigipSctpActivePathDown"), ("F5-BIGIP-COMMON-MIB", "bigipSctpPathRestored"), ("F5-BIGIP-COMMON-MIB", "bigipGeoredundancyOffline"), ("F5-BIGIP-COMMON-MIB", "bigipGeoredundancyConnected"), ("F5-BIGIP-COMMON-MIB", "bigipGeoredundancyReloadReceiving"), ("F5-BIGIP-COMMON-MIB", "bigipGeoredundancyReloadSending"), ("F5-BIGIP-COMMON-MIB", "bigipGeoredundancyWatchdogAlive"), ("F5-BIGIP-COMMON-MIB", "bigipGeoredundancyWatchdogExpired"), ("F5-BIGIP-COMMON-MIB", "bigipExternalLinkDown"), ("F5-BIGIP-COMMON-MIB", "bigipExternalLinkUp"), ("F5-BIGIP-COMMON-MIB", "bigipFipsDeviceHighTemperature"), ("F5-BIGIP-COMMON-MIB", "bigipFipsDeviceCriticalTemperature"), ("F5-BIGIP-COMMON-MIB", "bigipFipsDeviceNormalTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bigipSystemNotifyGroup = bigipSystemNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: bigipSystemNotifyGroup.setDescription('The notifications relating to the operation of\n\t\tthe BIGIP system.')
class LongDisplayString(TextualConvention, OctetString):
    description = 'A longer version of SNMPv2-TC::DisplayString.'
    status = 'current'
    displayHint = '1024a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 1024)

mibBuilder.exportSymbols("F5-BIGIP-COMMON-MIB", bigipGtmJoinedGroup=bigipGtmJoinedGroup, bigipAccessCCULicenseTHDExceeded=bigipAccessCCULicenseTHDExceeded, bigipDosAttackStop=bigipDosAttackStop, bigipLicenseFailed=bigipLicenseFailed, bigipGtmLinkDisabled=bigipGtmLinkDisabled, bigipAsmFtpRequestBlocked=bigipAsmFtpRequestBlocked, bigipNotifyObjHostName=bigipNotifyObjHostName, bigipGtmLeftGroup=bigipGtmLeftGroup, bigipSystemCheckAlertTempHigh=bigipSystemCheckAlertTempHigh, bigipLibhalAomSensorFanError=bigipLibhalAomSensorFanError, bigipDosAttackStart=bigipDosAttackStart, bigipGtmPoolDisabled=bigipGtmPoolDisabled, bigipGtmKeyGenerationRollover=bigipGtmKeyGenerationRollover, bigipLibhalAomEventWarning=bigipLibhalAomEventWarning, bigipGtmProberPoolMbrDisabled=bigipGtmProberPoolMbrDisabled, bigipSsdMwiNearThreshold=bigipSsdMwiNearThreshold, bigipClusterPrimaryChanged=bigipClusterPrimaryChanged, bigipAccessHATransition=bigipAccessHATransition, bigipNotificationGroups=bigipNotificationGroups, bigipGtmWideIpEnabled=bigipGtmWideIpEnabled, bigipTrafficGroupDeactivate=bigipTrafficGroupDeactivate, bigipLibhalAomSensorTempInfo=bigipLibhalAomSensorTempInfo, bigipLibhalAomSensorFanCritical=bigipLibhalAomSensorFanCritical, bigipSctpActivePathDown=bigipSctpActivePathDown, bigipGeoredundancyWatchdogAlive=bigipGeoredundancyWatchdogAlive, bigipLogErr=bigipLogErr, bigipAsmBruteForceAttackDetected=bigipAsmBruteForceAttackDetected, bigipGtmPoolMbrNotAvail=bigipGtmPoolMbrNotAvail, bigipLibhalAomSensorTempError=bigipLibhalAomSensorTempError, bigipFeatureFailed=bigipFeatureFailed, bigipGeoredundancyWatchdogExpired=bigipGeoredundancyWatchdogExpired, bigipLibhalAomSensorTempWarning=bigipLibhalAomSensorTempWarning, bigipGtmWideIpAvail=bigipGtmWideIpAvail, bigipTrafficGroupFailoverCond=bigipTrafficGroupFailoverCond, bigipGtmDcAvail=bigipGtmDcAvail, bigipGtmLinkAvail=bigipGtmLinkAvail, bigipSystemCheckAlertCurrentLow=bigipSystemCheckAlertCurrentLow, bigipDDMPowerAlarm=bigipDDMPowerAlarm, bigipMrfPeerErrorsHealthChanged=bigipMrfPeerErrorsHealthChanged, f5=f5, bigipLibhalSsdLogicalDiskRemoved=bigipLibhalSsdLogicalDiskRemoved, bigipMrfPeerHealthChanged=bigipMrfPeerHealthChanged, bigipNotifyObjMsg=bigipNotifyObjMsg, bigipLibhalAomEventEmergency=bigipLibhalAomEventEmergency, LongDisplayString=LongDisplayString, bigipGtmBig3dSslCertExpired=bigipGtmBig3dSslCertExpired, bigipIPsecTunnelDown=bigipIPsecTunnelDown, bigipBladeOffline=bigipBladeOffline, bigipLibhalAomEventAlert=bigipLibhalAomEventAlert, bigipLibhalAomSensorTempAlert=bigipLibhalAomSensorTempAlert, bigipCpuFanSpeedBad=bigipCpuFanSpeedBad, bigipGtmWideIpNotAvail=bigipGtmWideIpNotAvail, bigipGtmProberPoolMbrStatusChange=bigipGtmProberPoolMbrStatusChange, bigipLogCrit=bigipLogCrit, bigipGtmProberPoolMbrEnabled=bigipGtmProberPoolMbrEnabled, bigipLtmVsDisabled=bigipLtmVsDisabled, bigipNotification=bigipNotification, bigipGtmLinkNotAvail=bigipGtmLinkNotAvail, bigipRaidDiskFailure=bigipRaidDiskFailure, bigipAgentShutdown=bigipAgentShutdown, bigipSsdMwiReachedThreshold=bigipSsdMwiReachedThreshold, bigipUpdatePriority=bigipUpdatePriority, bigipGtmSslCertExpired=bigipGtmSslCertExpired, bigipGtmAppObjAvail=bigipGtmAppObjAvail, bigipDisableNonF5Optics=bigipDisableNonF5Optics, bigipLibhalAomSensorPwrEmergency=bigipLibhalAomSensorPwrEmergency, bigipNotifyObjectsGroup=bigipNotifyObjectsGroup, bigipNetLinkDown=bigipNetLinkDown, bigipLogAlert=bigipLogAlert, bigipChmandAlertFanTrayBad=bigipChmandAlertFanTrayBad, bigipGtmWideIpDisabled=bigipGtmWideIpDisabled, bigipNodeRate=bigipNodeRate, bigipSystemCheckAlertFanSpeedLow=bigipSystemCheckAlertFanSpeedLow, bigipCpuFanSpeedLow=bigipCpuFanSpeedLow, bigipAsmFtpRequestViolation=bigipAsmFtpRequestViolation, bigipChassisPsUnidentified=bigipChassisPsUnidentified, bigipActiveActive=bigipActiveActive, bigipMrfPeerOutgoingRateLimitChanged=bigipMrfPeerOutgoingRateLimitChanged, bigipMrfPeerDelayHealthChanged=bigipMrfPeerDelayHealthChanged, bigipMrfPeerConnectionStateChanged=bigipMrfPeerConnectionStateChanged, bigipAsmDosAttackDetected=bigipAsmDosAttackDetected, bigipLibhalAomSensorFanInfo=bigipLibhalAomSensorFanInfo, bigipGtmPoolNotAvail=bigipGtmPoolNotAvail, bigipNotifyObjTimestamp=bigipNotifyObjTimestamp, bigipGtmVsAvail=bigipGtmVsAvail, bigipUpdateServer=bigipUpdateServer, bigipLibhalSsdPhysicalDiskRemoved=bigipLibhalSsdPhysicalDiskRemoved, bigipAvrAlertsMetricSnmp=bigipAvrAlertsMetricSnmp, bigipConfigLoaded=bigipConfigLoaded, bigipFeatureOnline=bigipFeatureOnline, bigipGroups=bigipGroups, bigipLibhalSensorAlarmCritical=bigipLibhalSensorAlarmCritical, bigipLtmVsAvail=bigipLtmVsAvail, bigipGtmProberPoolDisabled=bigipGtmProberPoolDisabled, bigipPacketRejected=bigipPacketRejected, bigipGtmVsDisabled=bigipGtmVsDisabled, bigipDDMPowerWarn=bigipDDMPowerWarn, bigipIPsecTunnelUp=bigipIPsecTunnelUp, bigipGtmDcNotAvail=bigipGtmDcNotAvail, bigipVcmpAlertsVcmpPowerOn=bigipVcmpAlertsVcmpPowerOn, bigipCpuTempHigh=bigipCpuTempHigh, bigipGeoredundancyReloadSending=bigipGeoredundancyReloadSending, bigipExternalLinkDown=bigipExternalLinkDown, bigipNotifyObjNode=bigipNotifyObjNode, bigipLibhalAomSensorFanEmergency=bigipLibhalAomSensorFanEmergency, bigipCompliance=bigipCompliance, bigipTrafficGroupActivate=bigipTrafficGroupActivate, bigipGtmPoolMbrAvail=bigipGtmPoolMbrAvail, bigipAsmRequestBlocked=bigipAsmRequestBlocked, bigipUpdateError=bigipUpdateError, bigipGtmBig3dSslCertWillExpire=bigipGtmBig3dSslCertWillExpire, bigipSystemCheckAlertCurrentHigh=bigipSystemCheckAlertCurrentHigh, bigipSystemCheckAlertPowerLow=bigipSystemCheckAlertPowerLow, bigipAvrAlertsMetricSmtp=bigipAvrAlertsMetricSmtp, bigipDiskPartitionWarn=bigipDiskPartitionWarn, bigipLibhalAomSensorFanAlert=bigipLibhalAomSensorFanAlert, bigipMrfPeerIncomingRateLimitChanged=bigipMrfPeerIncomingRateLimitChanged, bigipChassisTempHigh=bigipChassisTempHigh, bigipGtmServerNotAvailNoIP=bigipGtmServerNotAvailNoIP, bigipGtmVsEnabled=bigipGtmVsEnabled, bigipFipsDeviceCriticalTemperature=bigipFipsDeviceCriticalTemperature, bigipLibhalAomEventInfo=bigipLibhalAomEventInfo, bigipServiceUp=bigipServiceUp, bigipGtmServerNotAvail=bigipGtmServerNotAvail, bigipAsmSmtpRequestBlocked=bigipAsmSmtpRequestBlocked, bigipGeoredundancyReloadReceiving=bigipGeoredundancyReloadReceiving, bigipAgentRestart=bigipAgentRestart, bigipTrafficGroupOffline=bigipTrafficGroupOffline, bigipGtmPoolMbrDisabled=bigipGtmPoolMbrDisabled, bigipNotifyObjEventId=bigipNotifyObjEventId, bigipNotifyObjSeverity=bigipNotifyObjSeverity, bigipLibhalAomSensorPwrInfo=bigipLibhalAomSensorPwrInfo, bigipLibhalAomSensorTempEmergency=bigipLibhalAomSensorTempEmergency, bigipChassisInadequatePower=bigipChassisInadequatePower, bigipNodeUp=bigipNodeUp, bigipGtmAppNotAvail=bigipGtmAppNotAvail, bigipNodeDown=bigipNodeDown, bigipLogEmerg=bigipLogEmerg, bigipVcmpAlertsVcmpHBLost=bigipVcmpAlertsVcmpHBLost, bigipVcmpAlertsVcmpPowerOff=bigipVcmpAlertsVcmpPowerOff, bigipGeoredundancyConnected=bigipGeoredundancyConnected, bigipAsmRequestViolation=bigipAsmRequestViolation, bigipDDMNonF5Optics=bigipDDMNonF5Optics, bigipLicenseExpired=bigipLicenseExpired, bigipCompliances=bigipCompliances, bigipLogWarning=bigipLogWarning, bigipPsPowerOn=bigipPsPowerOn, bigipARPConflict=bigipARPConflict, bigipFipsFault=bigipFipsFault, bigipTrafficGroupFailoverCondClear=bigipTrafficGroupFailoverCondClear, bigipMonDBDaemonIdle=bigipMonDBDaemonIdle, bigipTrafficMgmt=bigipTrafficMgmt, bigipLibhalAomSensorPwrError=bigipLibhalAomSensorPwrError, bigipClusterdNoResponse=bigipClusterdNoResponse, bigipGtmProberPoolStatusChange=bigipGtmProberPoolStatusChange, bigipLibhalBladePoweredOff=bigipLibhalBladePoweredOff, bigipGtmServerDisabled=bigipGtmServerDisabled, bigipGtmDcDisabled=bigipGtmDcDisabled, bigipAomCpuTempTooHigh=bigipAomCpuTempTooHigh, bigipAccessGlobalLicenseTHDExceeded=bigipAccessGlobalLicenseTHDExceeded, bigipInetPortExhaustion=bigipInetPortExhaustion, bigipLibhalAomSensorPwrWarning=bigipLibhalAomSensorPwrWarning, bigipDiskPartitionGrowth=bigipDiskPartitionGrowth, bigipGtmDeletedFromGroup=bigipGtmDeletedFromGroup, bigipLibhalAomSensorFanWarning=bigipLibhalAomSensorFanWarning, bigipLibhalDiskBayRemoved=bigipLibhalDiskBayRemoved, bigipVirtualRate=bigipVirtualRate, bigipFipsDeviceError=bigipFipsDeviceError, bigipNotifyObjects=bigipNotifyObjects, bigipDnsRequestRateLimiterEngaged=bigipDnsRequestRateLimiterEngaged, bigipMemberRate=bigipMemberRate, bigipAccessURLFLimitedLicenseTHDExceeded=bigipAccessURLFLimitedLicenseTHDExceeded, bigipGtmPoolMbrEnabled=bigipGtmPoolMbrEnabled, bigipGtmSslCertWillExpire=bigipGtmSslCertWillExpire, bigipCertExpiration=bigipCertExpiration, bigipNotifyObjPort=bigipNotifyObjPort, bigipDDMPowerAlarmClear=bigipDDMPowerAlarmClear, bigipHardDiskFailure=bigipHardDiskFailure, bigipLibhalAomSensorTempCritical=bigipLibhalAomSensorTempCritical, bigipPsPowerOff=bigipPsPowerOff, bigipChassisFanBad=bigipChassisFanBad, bigipMonDBDaemonHungSQL=bigipMonDBDaemonHungSQL, bigipGtmPoolAvail=bigipGtmPoolAvail, bigipFipsDeviceHighTemperature=bigipFipsDeviceHighTemperature, bigipGtmDcEnabled=bigipGtmDcEnabled, bigipSystemCheckAlertMilliVoltageLow=bigipSystemCheckAlertMilliVoltageLow, bigipGtmVsNotAvail=bigipGtmVsNotAvail, bigipGtmAppObjNotAvail=bigipGtmAppObjNotAvail, bigipLibhalAomSensorPwrAlert=bigipLibhalAomSensorPwrAlert, bigipGtmRequestRateLimiterEngaged=bigipGtmRequestRateLimiterEngaged, bigipTrafficGroupForcedOffline=bigipTrafficGroupForcedOffline, PYSNMP_MODULE_ID=f5, bigipNotifications=bigipNotifications, bigipGtmProberPoolEnabled=bigipGtmProberPoolEnabled, bigipGeoredundancyOffline=bigipGeoredundancyOffline, bigipLibhalAomSensorPwrCritical=bigipLibhalAomSensorPwrCritical, bigipGtmPoolEnabled=bigipGtmPoolEnabled, bigipSslLimitExceeded=bigipSslLimitExceeded, bigipAgentStart=bigipAgentStart, bigipGtmServerAvail=bigipGtmServerAvail, bigipGtmKeyGenerationExpiration=bigipGtmKeyGenerationExpiration, bigipSystemCheckAlertVoltageLow=bigipSystemCheckAlertVoltageLow, bigipVcmpAlertsVcmpHBDetected=bigipVcmpAlertsVcmpHBDetected, bigipAgentNotifyGroup=bigipAgentNotifyGroup, bigipSystemShutdown=bigipSystemShutdown, bigipPsAbsent=bigipPsAbsent, bigipExternalLinkUp=bigipExternalLinkUp, bigipCompLimitExceeded=bigipCompLimitExceeded, bigipFipsDeviceNormalTemperature=bigipFipsDeviceNormalTemperature, bigipGtmAppAvail=bigipGtmAppAvail, bigipGtmServerEnabled=bigipGtmServerEnabled, bigipDDMPowerWarnClear=bigipDDMPowerWarnClear, bigipLibhalAomEventCritical=bigipLibhalAomEventCritical, bigipAccessURLFLicenseTHDExceeded=bigipAccessURLFLicenseTHDExceeded, bigipChassisPowerSupplyBad=bigipChassisPowerSupplyBad, bigipTrafficGroupActive=bigipTrafficGroupActive, bigipGtmProberPoolStatusChangeReason=bigipGtmProberPoolStatusChangeReason, bigipActive=bigipActive, bigipAsmSmtpRequestViolation=bigipAsmSmtpRequestViolation, bigipBladeNoPower=bigipBladeNoPower, bigipSystemCheckAlertPowerHigh=bigipSystemCheckAlertPowerHigh, bigipBladeTempHigh=bigipBladeTempHigh, bigipAuthFailed=bigipAuthFailed, bigipLtmVsUnavail=bigipLtmVsUnavail, bigipLibhalAomEventError=bigipLibhalAomEventError, bigipSystemNotifyGroup=bigipSystemNotifyGroup, bigipSystemCheckAlertVoltageHigh=bigipSystemCheckAlertVoltageHigh, bigipAggrReaperStateChange=bigipAggrReaperStateChange, bigipSctpPathRestored=bigipSctpPathRestored, bigipExternalLinkChange=bigipExternalLinkChange, bigipSystemCheckAlertMilliVoltageHigh=bigipSystemCheckAlertMilliVoltageHigh, bigipMrfPeerTimeoutsHealthChanged=bigipMrfPeerTimeoutsHealthChanged, bigipNotificationCompliance=bigipNotificationCompliance, bigipGtmBoxAvail=bigipGtmBoxAvail, bigipTamdAlert=bigipTamdAlert, bigipStandByFail=bigipStandByFail, bigipGtmProberPoolMbrStatusChangeReason=bigipGtmProberPoolMbrStatusChangeReason, bigipLtmVsEnabled=bigipLtmVsEnabled, bigipServiceDown=bigipServiceDown, bigipGtmLinkEnabled=bigipGtmLinkEnabled, bigipUnsolicitedRepliesExceededThreshold=bigipUnsolicitedRepliesExceededThreshold, bigipGtmBoxNotAvail=bigipGtmBoxNotAvail, bigipStandby=bigipStandby, bigipTrafficGroupStandby=bigipTrafficGroupStandby)
