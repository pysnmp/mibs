#
# PySNMP MIB module ARRIS-CMTS-FFT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/ARRIS-CMTS-FFT-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 10:53:52 2024
# On host fv-az1986-135 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
cmtsCommon, = mibBuilder.importSymbols("ARRIS-MIB", "cmtsCommon")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, iso, Bits, NotificationType, Gauge32, TimeTicks, ObjectIdentity, Counter32, enterprises, IpAddress, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "iso", "Bits", "NotificationType", "Gauge32", "TimeTicks", "ObjectIdentity", "Counter32", "enterprises", "IpAddress", "ModuleIdentity", "Integer32")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
cmtsFftMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1))
if mibBuilder.loadTexts: cmtsFftMIB.setLastUpdated('200402270000Z')
if mibBuilder.loadTexts: cmtsFftMIB.setOrganization('Arris International')
if mibBuilder.loadTexts: cmtsFftMIB.setContactInfo('   Network Management\n                Postal: Arris International.\n                        4400 Cork Airport Business Park\n                        Cork Airport, Kinsale Road\n                        Cork, Ireland.\n                Tel:    +353 21 7305 800\n                Fax:    +353 21 4321 972')
if mibBuilder.loadTexts: cmtsFftMIB.setDescription('This MIB manages the FFT software on the Arris CMTS')
dcxFftObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1))
dcxFftUpstreamChannelTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1), )
if mibBuilder.loadTexts: dcxFftUpstreamChannelTable.setStatus('current')
if mibBuilder.loadTexts: dcxFftUpstreamChannelTable.setDescription('Arris CMTS FFT upstream channel configuration table. An entry in this table\n                exists for each ifEntry with an ifType of docsCableUpstreamInterface (129)\n                that supports FFT collection and reporting.')
dcxFftUpstreamChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dcxFftUpstreamChannelEntry.setStatus('current')
if mibBuilder.loadTexts: dcxFftUpstreamChannelEntry.setDescription('Arris FFT upstream channel entry.')
dcxFftSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 1), Unsigned32().clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFftSize.setStatus('current')
if mibBuilder.loadTexts: dcxFftSize.setDescription('Number of samples to be collected for FFT. Valid\n                    values are 256, 512, 1024, 2048. The FFT payload size\n                    will be the number of samples multiplied by the number\n                    of bytes per sample as determined by dcxFftOutputFormat.\n                    The duration of the FFT sample will be the number of samples\n                    divided by the sample rate as determined by dcxFftSampleRate.')
dcxFftSampleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("adcRate", 1), ("halfAdcRate", 2), ("quarterAdcRate", 3), ("quadrupleSymbolRate", 4))).clone('halfAdcRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFftSampleRate.setStatus('current')
if mibBuilder.loadTexts: dcxFftSampleRate.setDescription("FFT sample rate based on the input source to the FFT. The input to the FFT\n                    can be the ADC output, the ADC output followed by a down-mixer and half-band\n                    filter, the ADC output followed by a down-mixer and quarter-band filter, or\n                    the received channel's Nyquist filter output.")
dcxFftCentreFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 3), Integer32().clone(40960000)).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFftCentreFrequency.setStatus('current')
if mibBuilder.loadTexts: dcxFftCentreFrequency.setDescription('FFT centre frequency. This object is used only if dcxFftSampleRate is set\n                    to halfAdcRate or quarterAdcRate to set the down-mixer frequency.')
dcxFftWindowing = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rectangular", 1), ("hanning", 2), ("hamming", 3), ("blackman", 4), ("blackmanHarris", 5))).clone('blackmanHarris')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFftWindowing.setStatus('current')
if mibBuilder.loadTexts: dcxFftWindowing.setDescription('Set the frequency-domain windowing filter.')
dcxFftLogAveragingTimeConstant = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFftLogAveragingTimeConstant.setStatus('current')
if mibBuilder.loadTexts: dcxFftLogAveragingTimeConstant.setDescription('Time averaging constant exponent, M. Constant is\n                    2^M. Setting this object to zero disables averaging.')
dcxFftOutputFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("raw", 1), ("fftIQ", 2), ("fftPower", 3), ("fftAmplitude", 4))).clone('fftAmplitude')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFftOutputFormat.setStatus('current')
if mibBuilder.loadTexts: dcxFftOutputFormat.setDescription('FFT processor output format. Format can be i. raw complex\n                    time-domain I/Q format ii. FFT data in I/Q format iii. FFT\n                    data in power format iv. FFT data in amplitude format. The \n                    sample sizes are 4 bytes (i. - iii.) and 2 bytes (iv.)')
dcxFftOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("baseSpectrum", 1), ("burstSpectrum", 2), ("periodicSpectrum", 3))).clone('baseSpectrum')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFftOperatingMode.setStatus('current')
if mibBuilder.loadTexts: dcxFftOperatingMode.setDescription('Operating mode of FFT process. Determines whether\n                    the FFT measurement takes place while no CMs are \n                    transmitting (measuring noise floor), during a CM\n                    burst, or by periodically sampling the spectrum\n                    without regard to scheduling of the upstream.')
dcxFftIdleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 8), Unsigned32().clone(50000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFftIdleInterval.setStatus('current')
if mibBuilder.loadTexts: dcxFftIdleInterval.setDescription('Interval in microseconds between consecutive FFT\n                    triggers when dcxFftOperatingMode is baseSpectrum\n                    or periodicSpectrum. This object is not used if\n                    dcxFftOperatingMode is set to burstSpectrum or if\n                    dcxFftTriggerCount is 1.')
dcxFftBurstSid = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFftBurstSid.setStatus('current')
if mibBuilder.loadTexts: dcxFftBurstSid.setDescription('SID on which to trigger the FFT process. This \n                    object is used only if dcxFftOperatingMode is set \n                    to burstSpectrum.')
dcxFftBurstIUC = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFftBurstIUC.setStatus('current')
if mibBuilder.loadTexts: dcxFftBurstIUC.setDescription('IUC type on which to trigger the FFT process. This \n                    object is used only if dcxFftOperatingMode is set \n                    to burstSpectrum or periodicSpectrum. A value of 0\n                    means trigger on any IUC type.')
dcxFftLogicalChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 3)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFftLogicalChannel.setStatus('current')
if mibBuilder.loadTexts: dcxFftLogicalChannel.setDescription('Logical channel on which to trigger the FFT process.\n                    This object is used only if dcxFftOperatingMode is\n                    set to periodicSpectrum. A value of -1 means trigger\n                    on any logical channel.')
dcxFftTriggerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFftTriggerCount.setStatus('current')
if mibBuilder.loadTexts: dcxFftTriggerCount.setDescription('Number of times to trigger FFT when dcxFftEnable and\n                    dcxFftApplyConfig are set to true. Set this object to\n                    zero to trigger FFT continuously.')
dcxFftEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFftEnable.setStatus('current')
if mibBuilder.loadTexts: dcxFftEnable.setDescription('Set to true to enable FFT on this channel. Set to false to \n                    disable. Setting will take effect when dcxFftApplyConfig is \n                    set to true')
dcxFftApplyConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxFftApplyConfig.setStatus('current')
if mibBuilder.loadTexts: dcxFftApplyConfig.setDescription('Set to true to trigger an FFT process with configuration \n                    determined by the other objects in this group. An SNMP GET \n                    of this object will always return false')
dcxFftInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFftInProgress.setStatus('current')
if mibBuilder.loadTexts: dcxFftInProgress.setDescription('This object will return true if an FFT process is currently\n                    in progress (having been started by a SET to dcxFftApplyConfig)\n                    for this upstream channel. Returns false otherwise')
dcxFftCurrentTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFftCurrentTriggers.setStatus('current')
if mibBuilder.loadTexts: dcxFftCurrentTriggers.setDescription('Number of FFT triggers since the last FFT process was\n                    started.')
class DcxFftPayloadBuffer(TextualConvention, OctetString):
    description = 'A buffer that contains upstream FFT payload data.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

dcxFftPayloadTable = MibTable((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 2), )
if mibBuilder.loadTexts: dcxFftPayloadTable.setStatus('current')
if mibBuilder.loadTexts: dcxFftPayloadTable.setDescription('Arris CMTS FFT upstream channel payload table.')
dcxFftPayloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ARRIS-CMTS-FFT-MIB", "dcxFftPayloadIndex"))
if mibBuilder.loadTexts: dcxFftPayloadEntry.setStatus('current')
if mibBuilder.loadTexts: dcxFftPayloadEntry.setDescription('Arris CMTS FFT upstream channel payload entry. Multiple entries in this \n                    table exist for each ifEntry with an ifType of \n                    docsCableUpstreamInterface (129) that supports the FFT collection and\n                    currently has FFT data to report.')
dcxFftPayloadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dcxFftPayloadIndex.setStatus('current')
if mibBuilder.loadTexts: dcxFftPayloadIndex.setDescription('An identifier for the 256-byte buffer available\n                        at the dcxFftPayloadData object.')
dcxFftPayloadData = MibTableColumn((1, 3, 6, 1, 4, 1, 4115, 1, 4, 5, 1, 1, 2, 1, 2), DcxFftPayloadBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxFftPayloadData.setStatus('current')
if mibBuilder.loadTexts: dcxFftPayloadData.setDescription('The FFT payload data in the buffer identified by\n                        dcxFftPayloadIndex.')
mibBuilder.exportSymbols("ARRIS-CMTS-FFT-MIB", dcxFftCurrentTriggers=dcxFftCurrentTriggers, dcxFftCentreFrequency=dcxFftCentreFrequency, dcxFftUpstreamChannelTable=dcxFftUpstreamChannelTable, dcxFftPayloadEntry=dcxFftPayloadEntry, dcxFftIdleInterval=dcxFftIdleInterval, PYSNMP_MODULE_ID=cmtsFftMIB, dcxFftSampleRate=dcxFftSampleRate, dcxFftInProgress=dcxFftInProgress, dcxFftObjects=dcxFftObjects, dcxFftPayloadData=dcxFftPayloadData, dcxFftUpstreamChannelEntry=dcxFftUpstreamChannelEntry, dcxFftEnable=dcxFftEnable, dcxFftSize=dcxFftSize, dcxFftWindowing=dcxFftWindowing, dcxFftPayloadIndex=dcxFftPayloadIndex, cmtsFftMIB=cmtsFftMIB, dcxFftOutputFormat=dcxFftOutputFormat, dcxFftBurstSid=dcxFftBurstSid, dcxFftTriggerCount=dcxFftTriggerCount, dcxFftLogicalChannel=dcxFftLogicalChannel, dcxFftBurstIUC=dcxFftBurstIUC, dcxFftOperatingMode=dcxFftOperatingMode, DcxFftPayloadBuffer=DcxFftPayloadBuffer, dcxFftPayloadTable=dcxFftPayloadTable, dcxFftLogAveragingTimeConstant=dcxFftLogAveragingTimeConstant, dcxFftApplyConfig=dcxFftApplyConfig)
