#
# PySNMP MIB module SL-EDFA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/packetlight/SL-EDFA.mib
# Produced by pysmi-1.1.12 at Tue May 28 12:52:33 2024
# On host fv-az847-244 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
PerfTotalCount, PerfCurrentCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfTotalCount", "PerfCurrentCount", "PerfIntervalCount")
sitelight, = mibBuilder.importSymbols("SL-NE-MIB", "sitelight")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, Counter32, MibIdentifier, Bits, Unsigned32, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, IpAddress, Integer32, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "MibIdentifier", "Bits", "Unsigned32", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "IpAddress", "Integer32", "TimeTicks", "NotificationType")
TimeStamp, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "DisplayString", "TruthValue")
slEdfa = ModuleIdentity((1, 3, 6, 1, 4, 1, 4515, 1, 9))
if mibBuilder.loadTexts: slEdfa.setLastUpdated('200202040000Z')
if mibBuilder.loadTexts: slEdfa.setOrganization('PacketLight Networks Ltd.')
if mibBuilder.loadTexts: slEdfa.setContactInfo('Omri_Viner@PacketLight.com')
if mibBuilder.loadTexts: slEdfa.setDescription('This MIB module describes the EDFA Cards')
edfaConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1))
edfaTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 9, 2))
edfaTraps0 = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 9, 2, 0))
edfaConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1), )
if mibBuilder.loadTexts: edfaConfigTable.setStatus('current')
if mibBuilder.loadTexts: edfaConfigTable.setDescription('The EDFA configuration table.')
edfaConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1), ).setIndexNames((0, "SL-EDFA-MIB", "edfaIfIndex"))
if mibBuilder.loadTexts: edfaConfigEntry.setStatus('current')
if mibBuilder.loadTexts: edfaConfigEntry.setDescription('An entry in the EDFA interface configuration table.\n\t\tThe index to this table is the same as the\n\t\tan ifIndex.')
edfaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaIfIndex.setStatus('current')
if mibBuilder.loadTexts: edfaIfIndex.setDescription('The amplifier interface index.')
edfaPumpTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaPumpTemp.setStatus('current')
if mibBuilder.loadTexts: edfaPumpTemp.setDescription('The pump temperture (in Kelvin).')
edfaRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaRxPower.setStatus('current')
if mibBuilder.loadTexts: edfaRxPower.setDescription("The measured Rx Power.\n\t\tThe value is specified in ten'th of Dbm units increments, starting \n\t\tfrom -30.0 dbm (e.g. value 0 means -30.0 dbm).")
edfaPumpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("restart", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfaPumpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: edfaPumpAdminStatus.setDescription('The desired state of the laser.  The restart(3)\n               state indicates that the edfa pump should be restarted.\n               The restart(3) is not a state, thus it is not kept\n               in the configuration file.')
edfaPumpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("restart", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaPumpOperStatus.setStatus('current')
if mibBuilder.loadTexts: edfaPumpOperStatus.setDescription('The current operational state of the laser.  \n               If edfaPumpAdminStatus is down(2) then\n               edfaPumpOperStatus should be down(2).  \n               If edfaPumpAdminStatus is changed to up(1) then \n               edfaPumpOperStatus should change to\n               up(1) if the interface is ready to transmit and\n               receive network traffic; it should remain in the down(2) state if\n               and only if there is a fault that prevents it from\n               going to the up(1) state.\n               The operational status is equal to restart(3) if the edfa pump\n               is still in restart process.')
edfaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaStatus.setStatus('current')
if mibBuilder.loadTexts: edfaStatus.setDescription('This variable indicates the Line Status of the\n\t\tEdfa module.  \n\n\t\tThe edfaStatus is a bit map represented as a\n\t\tsum, therefore, it can represent multiple failures (alarms) \n\t\tsimultaneously.\n\n\t\tedfaNoAlarm must be set if and only if no other\n\t\tflag is set.\n\n\t    The various bit positions are:\n\t       1    edfaNoAlarm           No alarm present\n\t       2    edfaPumpTemperuture   Pump temperatur is out-of-bound\n\t       4    edfaPumpWavelength    Pump wavelength is out-of-bound\n\t       8    edfaHwFail            Pump HW failure\n\t      16    edfaRvcSignalDetect   Loss of input signal\n\t      32    edfaPumpPower         Pump power is out-of-bound\n\t      64    edfaRcvPower          Rx Power is out-of-bound\n\t     128    edfaTemprature        Edfa temperature is out-of-bound\n\t     256\tedfaEyeSafty\t\t  Eye safety alarm (available only in eye-safety mode)\n\t     512\tedafGainFlatness\t  Gain flatness alarm\n\t    1024    edfaXmtPower          Tx Power is out-of-bound\n\t    2048    edfaGain              Edfa Gain is out-of-bound\n\t    4096    edfaEol               Pump End Of Life')
edfaVoa = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaVoa.setStatus('current')
if mibBuilder.loadTexts: edfaVoa.setDescription('The computed VOA output attenuation specified in \n\t\t0.1 dB units. From 0.0 to +15.0 dB.')
edfaAutomaticMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfaAutomaticMode.setStatus('current')
if mibBuilder.loadTexts: edfaAutomaticMode.setDescription('Defines the Edfa automatic mode. If equals TRUE,\n\t\tthe Edfa control mode should selected automaticaly.\n\t\tOtherwise it should be selected manualy.')
edfaAdminControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("apc", 1), ("agc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfaAdminControlMode.setStatus('current')
if mibBuilder.loadTexts: edfaAdminControlMode.setDescription('Configure the Edfa control mode. This object\n\t\tmay be set only when edfaAtomaticMode is FALSE.')
edfaOperControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("apc", 1), ("agc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaOperControlMode.setStatus('current')
if mibBuilder.loadTexts: edfaOperControlMode.setDescription('The current Edfa control mode. Initialy the Edfa\n\t\tstarts in APC mode. The AGC mode is used only when\n\t\tselected manualy or after transient input power change.')
edfaAdminGain = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfaAdminGain.setStatus('current')
if mibBuilder.loadTexts: edfaAdminGain.setDescription('The required Edfa Gain value given in 0.1 dB units. This value\n\t\tmay be configured only when the edfa automatic mode is FALSE\n\t\tand the edfa control mode is Agc.')
edfaOperGain = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaOperGain.setStatus('current')
if mibBuilder.loadTexts: edfaOperGain.setDescription('The actual Edfa Gain value given in 0.1 dB units.\n\t\tValue range starts with 0.0 dbm')
edfaAdminOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfaAdminOutputPower.setStatus('current')
if mibBuilder.loadTexts: edfaAdminOutputPower.setDescription('The required Edfa output power value given in 0.1 dBm units.\n\t\tThe range starts with -30.0 dBm. This value\n\t\tmay be configured only when the edfa control mode is Apc.')
edfaOperOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaOperOutputPower.setStatus('current')
if mibBuilder.loadTexts: edfaOperOutputPower.setDescription('The actual Edfa output power value specified in 0.1 dBm units.\n\t\tValid valuse are in the range of 0.0 dBm upto +15.0 dBm.')
edfaChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaChannelsNumber.setStatus('current')
if mibBuilder.loadTexts: edfaChannelsNumber.setDescription('The number of optical channels on this signal.')
edfaTotalChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaTotalChannelsNumber.setStatus('current')
if mibBuilder.loadTexts: edfaTotalChannelsNumber.setDescription('The total number of optical channels on this fiber.')
edfaEyeSafetyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfaEyeSafetyMode.setStatus('current')
if mibBuilder.loadTexts: edfaEyeSafetyMode.setDescription('When in Eye-Safety mode the edfa reduces the laser \n\t\tpower budget down to safe level upon detection of an\n\t\toutput fiber cut.')
edfaShutDownLipEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfaShutDownLipEnable.setStatus('current')
if mibBuilder.loadTexts: edfaShutDownLipEnable.setDescription('EDFA shout-down on LIP (Loss of signal) - \n\t\tenable/disable.')
edfaAutoPowerUpLipEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfaAutoPowerUpLipEnable.setStatus('current')
if mibBuilder.loadTexts: edfaAutoPowerUpLipEnable.setDescription('EDFA automatic power up (after signal returns) - \n\t\tenable/disable.')
edfaMaxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaMaxGain.setStatus('current')
if mibBuilder.loadTexts: edfaMaxGain.setDescription('The EDFA max gain is determined by the result of the VER command.\n\t\tLegal values:\n\t\tgainUnknown(1)\n\t\tgain14dbm(2) - Booster/Inline, (-2)-14dBm output power, gain (-5)-22dB \n\t\tgain17dbm(3) - Booster/Inline, (-2)-17dBm output power, gain (-5)-22dB\n\t\tgain20dbm(4) - Booster/Inline, (-2)-20dBm output power, gain (-5)-22dB  \n\t\tgain23dbm(5) - Booster/Inline, 5-23dBm output power, gain (-5)-22dB, 16 channels \n\t\tgain18dbmPreAmp8Ch(6)     - Preamp (-18)-5dBm output power, fixed gain 18dB \n\t\tgain18dbmPreAmp16ChRed(7) - Preamp (-18)-5dBm output power, fixed gain 18dB  \n\t\tgain18dbmPreAmp16ChBlue(8)- Preamp (-18)-0dBm output power, fixed gain 18dB\n\t\tgain23dbmGain10(9)        - Booster/Inline, 23dBm output power with fixed gain of 10dB, 32 channels\n\t\t')
edfaGainInFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaGainInFrom.setStatus('current')
if mibBuilder.loadTexts: edfaGainInFrom.setDescription('Lower input gain range of the edfa in units of 0.1 db.')
edfaGainInTo = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaGainInTo.setStatus('current')
if mibBuilder.loadTexts: edfaGainInTo.setDescription('Upper input gain range of the edfa in units of 0.1 db.')
edfaGainOutFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaGainOutFrom.setStatus('current')
if mibBuilder.loadTexts: edfaGainOutFrom.setDescription('Lower output gain range of the edfa in units of 0.1 db.')
edfaGainOutTo = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaGainOutTo.setStatus('current')
if mibBuilder.loadTexts: edfaGainOutTo.setDescription('Upper output gain range of the edfa in units of 0.1 db.')
edfaPowerInFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaPowerInFrom.setStatus('current')
if mibBuilder.loadTexts: edfaPowerInFrom.setDescription('Lower input power range of the edfa in units of 0.1 dbm.')
edfaPowerInTo = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaPowerInTo.setStatus('current')
if mibBuilder.loadTexts: edfaPowerInTo.setDescription('Upper input power range of the edfa in units of 0.1 dbm.')
edfaPowerOutFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaPowerOutFrom.setStatus('current')
if mibBuilder.loadTexts: edfaPowerOutFrom.setDescription('Lower output power range of the edfa in units of 0.1 dbm.')
edfaPowerOutTo = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaPowerOutTo.setStatus('current')
if mibBuilder.loadTexts: edfaPowerOutTo.setDescription('Upper output power range of the edfa in units of 0.1 dbm.')
edfaFromChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaFromChannel.setStatus('current')
if mibBuilder.loadTexts: edfaFromChannel.setDescription('The first channel number supported by the edfa; 0 to ignore.')
edfaToChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaToChannel.setStatus('current')
if mibBuilder.loadTexts: edfaToChannel.setDescription('The last channel number supported by the edfa; 0 to ignore.')
edfaOscChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaOscChannel.setStatus('current')
if mibBuilder.loadTexts: edfaOscChannel.setDescription('The wavelenght of the optical supervisory channel e.g. 1510, 1490.')
edfaRedBlueType = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("red", 1), ("blue", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaRedBlueType.setStatus('current')
if mibBuilder.loadTexts: edfaRedBlueType.setDescription('The type of the edaf.')
edfaRole = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("booster", 1), ("boosterInline", 2), ("preamp", 3), ("inline", 4), ("raman", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaRole.setStatus('current')
if mibBuilder.loadTexts: edfaRole.setDescription('The role of the edaf.')
edfaFreeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaFreeDescription.setStatus('current')
if mibBuilder.loadTexts: edfaFreeDescription.setDescription('A free text with additional edfa information.')
edfaConfigSafetyThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 9, 1, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfaConfigSafetyThreshold.setStatus('current')
if mibBuilder.loadTexts: edfaConfigSafetyThreshold.setDescription('The Eye Safety threshold level specified in dBm units.\n\t\tThe value given in 0.1 dBm units. The range starts with -50.0 dBm.')
edfaStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4515, 1, 9, 2, 1)).setObjects(("SL-EDFA-MIB", "edfaIfIndex"), ("SL-EDFA-MIB", "edfaStatus"))
if mibBuilder.loadTexts: edfaStatusChange.setStatus('current')
if mibBuilder.loadTexts: edfaStatusChange.setDescription('A edfaStatusChange trap is sent when the\n\t\tvalue of an instance edfaStatus changes. It\n\t\tcan be utilized by an NMS to trigger polls.')
edfaControlModeChange = NotificationType((1, 3, 6, 1, 4, 1, 4515, 1, 9, 2, 2)).setObjects(("SL-EDFA-MIB", "edfaIfIndex"), ("SL-EDFA-MIB", "edfaOperControlMode"))
if mibBuilder.loadTexts: edfaControlModeChange.setStatus('current')
if mibBuilder.loadTexts: edfaControlModeChange.setDescription('A edfaControlModeChange trap is sent when the\n\t\tvalue of an instance edfaOperControlMode when going \n\t\tfrom APC to AGC (both directions) in automatic mode.')
edfaStatusChange0 = NotificationType((1, 3, 6, 1, 4, 1, 4515, 1, 9, 2, 0, 1)).setObjects(("SL-EDFA-MIB", "edfaIfIndex"), ("SL-EDFA-MIB", "edfaStatus"))
if mibBuilder.loadTexts: edfaStatusChange0.setStatus('current')
if mibBuilder.loadTexts: edfaStatusChange0.setDescription("A edfaStatusChange trap is sent when the\n\t\tvalue of an instance edfaStatus changes. It\n\t\tcan be utilized by an NMS to trigger polls.\n\t\tIt is defined to support browsers that don't recognize RFC 2576.")
edfaControlModeChange0 = NotificationType((1, 3, 6, 1, 4, 1, 4515, 1, 9, 2, 0, 2)).setObjects(("SL-EDFA-MIB", "edfaIfIndex"), ("SL-EDFA-MIB", "edfaOperControlMode"))
if mibBuilder.loadTexts: edfaControlModeChange0.setStatus('current')
if mibBuilder.loadTexts: edfaControlModeChange0.setDescription("A edfaControlModeChange trap is sent when the\n\t\tvalue of an instance edfaOperControlMode when going \n\t\tfrom APC to AGC (both directions) in automatic mode.\n\t\tIt is defined to support browsers that don't recognize RFC 2576.")
mibBuilder.exportSymbols("SL-EDFA-MIB", edfaOperGain=edfaOperGain, edfaOperControlMode=edfaOperControlMode, edfaRole=edfaRole, edfaGainOutTo=edfaGainOutTo, edfaFreeDescription=edfaFreeDescription, edfaGainInFrom=edfaGainInFrom, edfaTraps=edfaTraps, edfaGainOutFrom=edfaGainOutFrom, edfaFromChannel=edfaFromChannel, edfaConfigEntry=edfaConfigEntry, edfaOscChannel=edfaOscChannel, edfaPowerOutTo=edfaPowerOutTo, edfaToChannel=edfaToChannel, edfaPowerInFrom=edfaPowerInFrom, edfaAutomaticMode=edfaAutomaticMode, edfaAdminOutputPower=edfaAdminOutputPower, edfaRedBlueType=edfaRedBlueType, edfaChannelsNumber=edfaChannelsNumber, edfaRxPower=edfaRxPower, edfaGainInTo=edfaGainInTo, edfaPumpAdminStatus=edfaPumpAdminStatus, slEdfa=slEdfa, edfaStatusChange=edfaStatusChange, edfaControlModeChange0=edfaControlModeChange0, edfaConfig=edfaConfig, edfaPowerOutFrom=edfaPowerOutFrom, edfaTraps0=edfaTraps0, edfaStatusChange0=edfaStatusChange0, edfaStatus=edfaStatus, edfaMaxGain=edfaMaxGain, edfaVoa=edfaVoa, edfaPumpOperStatus=edfaPumpOperStatus, edfaPowerInTo=edfaPowerInTo, edfaAutoPowerUpLipEnable=edfaAutoPowerUpLipEnable, edfaShutDownLipEnable=edfaShutDownLipEnable, edfaPumpTemp=edfaPumpTemp, edfaConfigTable=edfaConfigTable, edfaTotalChannelsNumber=edfaTotalChannelsNumber, edfaConfigSafetyThreshold=edfaConfigSafetyThreshold, edfaIfIndex=edfaIfIndex, edfaAdminControlMode=edfaAdminControlMode, edfaOperOutputPower=edfaOperOutputPower, edfaControlModeChange=edfaControlModeChange, PYSNMP_MODULE_ID=slEdfa, edfaAdminGain=edfaAdminGain, edfaEyeSafetyMode=edfaEyeSafetyMode)
