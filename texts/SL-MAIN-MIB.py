#
# PySNMP MIB module SL-MAIN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/packetlight/SL-MAIN-MIB
# Produced by pysmi-1.1.12 at Wed Jun 26 13:38:00 2024
# On host fv-az1984-994 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
PerfIntervalCount, PerfTotalCount, PerfCurrentCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount", "PerfTotalCount", "PerfCurrentCount")
sitelight, = mibBuilder.importSymbols("SL-NE-MIB", "sitelight")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, MibIdentifier, iso, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, Integer32, IpAddress, Counter64, TimeTicks, Gauge32, Unsigned32, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "iso", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Opaque", "Integer32", "IpAddress", "Counter64", "TimeTicks", "Gauge32", "Unsigned32", "ModuleIdentity", "Counter32")
TextualConvention, TruthValue, RowStatus, DisplayString, TimeStamp, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString", "TimeStamp", "DateAndTime")
slMain = ModuleIdentity((1, 3, 6, 1, 4, 1, 4515, 1, 3))
if mibBuilder.loadTexts: slMain.setLastUpdated('200008280000Z')
if mibBuilder.loadTexts: slMain.setOrganization('PacketLight Networks Ltd.')
if mibBuilder.loadTexts: slMain.setContactInfo('Omri_Viner@PacketLight.com')
if mibBuilder.loadTexts: slMain.setDescription('This MIB module describes the Main Board')
slmSys = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1))
slmAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 2))
slmAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 3))
slmLogin = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 4))
slmTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5))
slmLogFile = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 8))
slmConfigFile = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 9))
slmChPass = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 12))
slmLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 17))
class UserLogin(DisplayString):
    description = 'The User Login Type.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 20)

class UserPassword(DisplayString):
    description = 'The User Password Type.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 20)

class UserCommunity(DisplayString):
    description = 'The User Community Type.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 20)

class SoftwareRevision(DisplayString):
    description = 'The Software Revision Name.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 20)

class AdminAccess(TextualConvention, Integer32):
    description = 'The administration access level.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 0), ("read", 1), ("readwrite", 2), ("provisioning", 3), ("admin", 4), ("trap", 5))

slmSysGatewayAddr = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysGatewayAddr.setStatus('current')
if mibBuilder.loadTexts: slmSysGatewayAddr.setDescription('Gateway node IP Address.')
slmSysSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysSubnetMask.setStatus('current')
if mibBuilder.loadTexts: slmSysSubnetMask.setDescription('Subnetwork Mask IP Address.')
slmSysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysIpAddr.setStatus('current')
if mibBuilder.loadTexts: slmSysIpAddr.setDescription('Node IP Address.')
slmSysAlmAct = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysAlmAct.setStatus('current')
if mibBuilder.loadTexts: slmSysAlmAct.setDescription('Alarm Activation Time specified in Half-Seconds units. \n\t\tAlarm will be considered active only if it     \n        has been stable for that time.')
slmSysAlmDeact = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysAlmDeact.setStatus('current')
if mibBuilder.loadTexts: slmSysAlmDeact.setDescription('Alarm Clearance Time specified in Half-Seconds units. \n\t\tAlarm will be considered clear only if it\n        has been stable for that time.')
slmSysAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("warmBoot", 3), ("coldBoot", 4), ("factoryBoot", 5), ("testing", 6), ("hotBoot", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slmSysAdminStatus.setDescription('Instruct the system to perform the boot\n        according to the specified type.')
slmSysOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmSysOperStatus.setStatus('current')
if mibBuilder.loadTexts: slmSysOperStatus.setDescription('The operational system state.')
slmBoxSize = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmBoxSize.setStatus('current')
if mibBuilder.loadTexts: slmBoxSize.setDescription('The box size as was configured in the SEEP.')
slmSysCalendarTime = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 9), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysCalendarTime.setStatus('current')
if mibBuilder.loadTexts: slmSysCalendarTime.setDescription('The system calendar time.')
slmSysPmStartOfDay = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysPmStartOfDay.setStatus('current')
if mibBuilder.loadTexts: slmSysPmStartOfDay.setDescription('The time of day that marks the beginning of each 1-day interval\n        used in the performance monitoring parameters for all interfaces \n        in the NE. This time is on an hour boundary.')
slmSysActiveSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("swRevA", 1), ("swRevB", 2), ("swRevFtpStart", 3), ("swRevFtpEnd", 4), ("swRevAHot", 5), ("swRevBHot", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysActiveSwVersion.setStatus('current')
if mibBuilder.loadTexts: slmSysActiveSwVersion.setDescription('Determines the active software version. This is the version that will\n        be loaded by rebooted cards. It is not legal to set this object\n        to the id of an illegal system software version.\n        swRevFtpStart(3) - is set by the NMS to signal the FTP start.\n        swRevFtpEnd(4) - is set by the NMS to signal the FTP completion.\n        swRevAHot(5) - means to change the active software version to A,\n                       and to preform hot restart to all cards.\n        swRevBHot(6) - means to change the active software version to B,\n                       and to preform hot restart to all cards.\n        Reading the object returns the current active software version.')
slmSwRevTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 12), )
if mibBuilder.loadTexts: slmSwRevTable.setStatus('current')
if mibBuilder.loadTexts: slmSwRevTable.setDescription('This table keeps the information about the system\n\t\tsoftware revisions.')
slmConfigSysUptime = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmConfigSysUptime.setStatus('current')
if mibBuilder.loadTexts: slmConfigSysUptime.setDescription('The number of timer ticks at the last configuration command.')
slmConfigSysSignalType = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmConfigSysSignalType.setStatus('current')
if mibBuilder.loadTexts: slmConfigSysSignalType.setDescription('This variable identifies whether a SONET\n       or a SDH signal is used across this node.\n       This value is configured by the NMS.')
slmRebootDelay = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmRebootDelay.setStatus('current')
if mibBuilder.loadTexts: slmRebootDelay.setDescription('The number of seconds to wait before reboot.\n\t\tWhen this number equal to 0 the reboot should occur immediately.\n\t\tAfter the reboot command is initiated, the value of this object\n\t\tdecrements accordingly.\n\t\tInitially, the object value is 0.\n\t\tIt is also possible to change this value after starting the reboot\n\t\tprocess.\n\t\tGetting the value 0 means that there is no\n\t\tpending reboot process in the background.')
slmVcatDelay = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmVcatDelay.setStatus('current')
if mibBuilder.loadTexts: slmVcatDelay.setDescription('The value of the VCAT delay as was read from the SEEP.')
slmTid = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmTid.setStatus('current')
if mibBuilder.loadTexts: slmTid.setDescription('The SL TL1 name.')
slmPsuNumber = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmPsuNumber.setStatus('current')
if mibBuilder.loadTexts: slmPsuNumber.setDescription('Let the NMS to configure the number of PSU in the system.\n            If this number mismatch the reality, a mismatch alarm is declared.')
slmOemType = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmOemType.setStatus('current')
if mibBuilder.loadTexts: slmOemType.setDescription('This value tells the NMS the type of the OEM.\n            This value is read from the SEEP.')
slmSysName = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmSysName.setStatus('current')
if mibBuilder.loadTexts: slmSysName.setDescription('This value is the shadow of the sysName object.')
slmSysLocation = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmSysLocation.setStatus('current')
if mibBuilder.loadTexts: slmSysLocation.setDescription('This value is the shadow of the sysLocation object.')
slmSysResetPm = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysResetPm.setStatus('current')
if mibBuilder.loadTexts: slmSysResetPm.setDescription('Writing 1 to this object reset the system PM counters.')
slmSysUplinkRate = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up100", 1), ("up1000", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysUplinkRate.setStatus('current')
if mibBuilder.loadTexts: slmSysUplinkRate.setDescription('This object is used to configure the rate of the Uplink.\n            The configured rate applies to both Uplink ports.')
slmSysChassisId = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysChassisId.setStatus('current')
if mibBuilder.loadTexts: slmSysChassisId.setDescription('This object is used to configure the chassis-id.\n            Node with the same value are considered to be stacked.')
slmSysNetworkPrefix = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysNetworkPrefix.setStatus('current')
if mibBuilder.loadTexts: slmSysNetworkPrefix.setDescription('This object is used to configure the Network Prefix.\n            The prefix is used when the IP address of the node is \n            assigned automatically.\n            The automatic IP address of the node has the form A.x.y.z \n            where x.y.z is the last 3 bytes of the \n            MAC address 00:05:fd:x:y:z of the box.\n            The A is the assigned Network Prefix.\n            For example if the A is 10 and the MAC address is\n            00:05:fd:f6:55:11 the automatic IP of the node shall be\n            10.253.85.17.')
slmSysLanIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysLanIpAddr.setStatus('current')
if mibBuilder.loadTexts: slmSysLanIpAddr.setDescription('Node LAN IP Address.')
slmSysLanSubnetAddr = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysLanSubnetAddr.setStatus('current')
if mibBuilder.loadTexts: slmSysLanSubnetAddr.setDescription('Node LAN Subnet Address.')
slmPmAvailable = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmPmAvailable.setStatus('current')
if mibBuilder.loadTexts: slmPmAvailable.setDescription('This value tells the NMS if the PM support is available.\n          The value is taken from the SEEP and can not be changed.')
slmPortsNumber = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmPortsNumber.setStatus('current')
if mibBuilder.loadTexts: slmPortsNumber.setDescription('The number of ports in the system.\n          The value is taken from the SEEP.')
slmEdfaNumber = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmEdfaNumber.setStatus('current')
if mibBuilder.loadTexts: slmEdfaNumber.setDescription('The number of EDFA units in the system.\n          The value is taken from the SEEP.')
slmMuxNumber = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmMuxNumber.setStatus('current')
if mibBuilder.loadTexts: slmMuxNumber.setDescription('The number of MUX units in the system.\n          The value is taken from the SEEP.')
slmOpticalSwitchExist = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmOpticalSwitchExist.setStatus('current')
if mibBuilder.loadTexts: slmOpticalSwitchExist.setDescription('Should an Optical Switch unit exist in the system.\n          The value is taken from the SEEP.')
slmReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmReadCommunity.setStatus('current')
if mibBuilder.loadTexts: slmReadCommunity.setDescription('The SNMP read-only community.\n         This object should be accessible only by the Admin users of the Web.')
slmWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmWriteCommunity.setStatus('current')
if mibBuilder.loadTexts: slmWriteCommunity.setDescription('The SNMP read-write community.\n         This object should be accessible only by the Admin users of the Web.')
slmSysEffectiveSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 36), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmSysEffectiveSubnetMask.setStatus('current')
if mibBuilder.loadTexts: slmSysEffectiveSubnetMask.setDescription('Effective Management subnetwork mask IP Address.')
slmSysEffectiveIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 37), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmSysEffectiveIpAddr.setStatus('current')
if mibBuilder.loadTexts: slmSysEffectiveIpAddr.setDescription('Effective Management IP Address.')
slmSysLanEffectiveIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 38), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmSysLanEffectiveIpAddr.setStatus('current')
if mibBuilder.loadTexts: slmSysLanEffectiveIpAddr.setDescription('Effective LAN IP Address.')
slmSysLanEffectiveSubnetAddr = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 39), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmSysLanEffectiveSubnetAddr.setStatus('current')
if mibBuilder.loadTexts: slmSysLanEffectiveSubnetAddr.setDescription('Effective LAN subnetwork mask address.')
slmSysGatewayEffectiveIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 40), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmSysGatewayEffectiveIpAddr.setStatus('current')
if mibBuilder.loadTexts: slmSysGatewayEffectiveIpAddr.setDescription('Effective Gateway IP Address.')
slmSysMode = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysMode.setStatus('current')
if mibBuilder.loadTexts: slmSysMode.setDescription('System Mode configuration (this object applies to muxponder).')
slmSysTrapFormat = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullIfIndex", 1), ("portIfIndex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysTrapFormat.setStatus('current')
if mibBuilder.loadTexts: slmSysTrapFormat.setDescription('The format of the sent trap:\n\t\t 1 - the full ifIndex is sent.\n\t\t 2 - only the port number part of the ifIndex is sent.')
slmSysTemperature = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmSysTemperature.setStatus('current')
if mibBuilder.loadTexts: slmSysTemperature.setDescription('The temperature of the PL device in Celsius.')
slmNetworkMode = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("routing", 1), ("switching", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmNetworkMode.setStatus('current')
if mibBuilder.loadTexts: slmNetworkMode.setDescription('1 - means that the LAN is define on a different vlan than the MNG ports.\n\t\t 2 - means that the LAN is on the same vlan and the MNG ports')
slm40GConf = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 100))).clone(namedValues=NamedValues(("g40", 0), ("g41", 1), ("g42", 2), ("g43", 3), ("g100", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slm40GConf.setStatus('current')
if mibBuilder.loadTexts: slm40GConf.setDescription('g40(0) - No 40G ports (service ports 3..10 are disabled)\n\t\t g41(1) - Single 40G Port 1 (service ports 7,8,9,10 are disabled)\n\t\t g42(2) - Single 40G Port 2 (service ports 3,4,5,6 are disabled)\n\t\t g43(3) - Dual 40G ports')
slmRstpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 46), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmRstpEnabled.setStatus('current')
if mibBuilder.loadTexts: slmRstpEnabled.setDescription('Enable/Disable the RSTP protocol.\n\t\t Defalut value is TRUE.')
slmTopologyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 47), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmTopologyEnabled.setStatus('current')
if mibBuilder.loadTexts: slmTopologyEnabled.setDescription('Enable/Disable the topology discovery protocol.\n\t\t Defalut value is TRUE.')
slmAdminCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmAdminCommunity.setStatus('current')
if mibBuilder.loadTexts: slmAdminCommunity.setDescription('The SNMP admin community.\n\t\t This object should be accessible only by the Admin users of the Web.')
slmTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: slmTrapCommunity.setDescription('The SNMP v1/v2c trap community.\n\t\t This object should be accessible only by the Admin users of the Web.')
slmSysSnmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("v3Only", 3), ("v1v2v3", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmSysSnmpVersion.setStatus('current')
if mibBuilder.loadTexts: slmSysSnmpVersion.setDescription('The format of the sent trap:\n\t\t3 - allow only SNMPv3 pdus.\n\t\t4 - allow all pdus (coexistance mode).')
slmSysEncryptionCapability = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmSysEncryptionCapability.setStatus('current')
if mibBuilder.loadTexts: slmSysEncryptionCapability.setDescription('The encryption capability:\n\t\t1 - No Encryption.\n\t\t2 - Encryption Supported.')
slmSwRevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 12, 1), ).setIndexNames((0, "SL-MAIN-MIB", "slmSwRevDirectory"))
if mibBuilder.loadTexts: slmSwRevEntry.setStatus('current')
if mibBuilder.loadTexts: slmSwRevEntry.setDescription('An entry exist per system revsion type (A or B).')
slmSwRevDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("swRevDirA", 1), ("swRevDirB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmSwRevDirectory.setStatus('current')
if mibBuilder.loadTexts: slmSwRevDirectory.setDescription('The directory name A or B of this system software\n\t\trevision.')
slmSwRevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("copyingToStandby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmSwRevStatus.setStatus('current')
if mibBuilder.loadTexts: slmSwRevStatus.setDescription('The status of the system software directory content. \n\t\tThe value valid(1) means that the data of this entry is \n\t\tvalid and that the software is loaded correctly and is \n\t\tcurrently used.\n\t\tThe value copyingToStandby(3) means that the SW is currently\n\t\tbeing copied to the Standby Switch. During this period\n\t\tthe NMS is not allowed to upgrade the SW version. This value\n\t\tis applicable only to the Standby software version. \n\t\tThe value invalid(2) means otherwise. This value is applicable\n\t\tonly to the Standby software version.')
slmSwRevName = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 12, 1, 3), SoftwareRevision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmSwRevName.setStatus('current')
if mibBuilder.loadTexts: slmSwRevName.setDescription('The identification string of the system software revision.\n\t\tThis value is taken from the content of the system software\n\t\tconfiguration data that is downloded with the rest of the\n\t\tsoftware files.')
slmSwRevDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 1, 12, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmSwRevDate.setStatus('current')
if mibBuilder.loadTexts: slmSwRevDate.setDescription('The release date of the system software revision.\n\t\tThis value is taken from the content of the system software\n\t\tconfiguration data that is downloded with the rest of the\n\t\tsoftware files.')
slmAdminTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 3, 2, 1), )
if mibBuilder.loadTexts: slmAdminTable.setStatus('current')
if mibBuilder.loadTexts: slmAdminTable.setDescription('The admin table is used to supply the access \n\t\tlevel for the user login.')
slmAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 3, 2, 1, 1), ).setIndexNames((0, "SL-MAIN-MIB", "slmAdminLogin"))
if mibBuilder.loadTexts: slmAdminEntry.setStatus('current')
if mibBuilder.loadTexts: slmAdminEntry.setDescription('An entry exist per user.')
slmAdminLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 2, 1, 1, 3), UserLogin()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmAdminLogin.setStatus('current')
if mibBuilder.loadTexts: slmAdminLogin.setDescription('The user login.')
slmAdminPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 2, 1, 1, 4), UserPassword()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmAdminPassword.setStatus('current')
if mibBuilder.loadTexts: slmAdminPassword.setDescription('The user password.')
slmAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmAdminRowStatus.setStatus('current')
if mibBuilder.loadTexts: slmAdminRowStatus.setDescription('This object is used to create and delete rows in the\n        slmAdminTable.')
slmAdminAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 2, 1, 1, 6), AdminAccess()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmAdminAccess.setStatus('current')
if mibBuilder.loadTexts: slmAdminAccess.setDescription('The user access level.')
slmSnmpv3Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noaccess", 1), ("noauth", 2), ("md5", 3), ("sha", 4), ("sha224", 5), ("sha256", 6), ("sha384", 7), ("sha512", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmSnmpv3Auth.setStatus('current')
if mibBuilder.loadTexts: slmSnmpv3Auth.setDescription('The user SNMP v3 authentication mode.')
slmSnmpv3Priv = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noaccess", 1), ("nopriv", 2), ("des", 3), ("aes", 4), ("des3", 5), ("aes192", 6), ("aes256", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmSnmpv3Priv.setStatus('current')
if mibBuilder.loadTexts: slmSnmpv3Priv.setDescription('The user SNMP v3 privacy mode.')
slmSnmpv3Password = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 2, 1, 1, 9), UserPassword()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmSnmpv3Password.setStatus('current')
if mibBuilder.loadTexts: slmSnmpv3Password.setDescription('The SNMP v3 Password')
slmAuthTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 3, 3, 1), )
if mibBuilder.loadTexts: slmAuthTable.setStatus('current')
if mibBuilder.loadTexts: slmAuthTable.setDescription('The authentication table is used\n\t\tfor creating authentication requests.')
slmAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 3, 3, 1, 1), ).setIndexNames((0, "SL-MAIN-MIB", "slmAuthLogin"), (0, "SL-MAIN-MIB", "slmAuthPassword"))
if mibBuilder.loadTexts: slmAuthEntry.setStatus('current')
if mibBuilder.loadTexts: slmAuthEntry.setDescription('The entry is used to compute the slmAuthCommunity based\n\t\ton the indexes Login and Password. Note that the table contains\n\t\tno data, and when using GetNext it apears to be empty.\n\t\tTo compute the community the NMS should Get the field\n\t\tslmAuthCommunity with the corresponding indexes.')
slmAuthLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 3, 1, 1, 1), UserLogin())
if mibBuilder.loadTexts: slmAuthLogin.setStatus('current')
if mibBuilder.loadTexts: slmAuthLogin.setDescription('The user login.')
slmAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 3, 1, 1, 2), UserPassword())
if mibBuilder.loadTexts: slmAuthPassword.setStatus('current')
if mibBuilder.loadTexts: slmAuthPassword.setDescription('The user password.')
slmAuthCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 3, 1, 1, 3), UserCommunity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmAuthCommunity.setStatus('current')
if mibBuilder.loadTexts: slmAuthCommunity.setDescription("The user community name correponds to slmAuthLogin and\n\t\tslmAuthPassword and which defines user'a access scope.\n\t\tThe value of this object is available for reading only\n\t\tafter the the first three colunms have been filled")
slmChPassTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 3, 12, 1), )
if mibBuilder.loadTexts: slmChPassTable.setStatus('current')
if mibBuilder.loadTexts: slmChPassTable.setDescription('The table is used for changing the user passowrd.')
slmChPassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 3, 12, 1, 1), ).setIndexNames((0, "SL-MAIN-MIB", "slmChPassLogin"), (0, "SL-MAIN-MIB", "slmChPassOldPass"))
if mibBuilder.loadTexts: slmChPassEntry.setStatus('current')
if mibBuilder.loadTexts: slmChPassEntry.setDescription('The entry is used to set the slmChPassNewPass. \n\t\tNote that the table contains no data, and when \n\t\tusing GetNext it apears to be empty.\n\t\tTo change the password, the NMS should issue a SET\n\t\tcommand with the new password while the two indexes\n\t\tequal to the old user login and password.')
slmChPassLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 12, 1, 1, 1), UserLogin())
if mibBuilder.loadTexts: slmChPassLogin.setStatus('current')
if mibBuilder.loadTexts: slmChPassLogin.setDescription('The user login.')
slmChPassOldPass = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 12, 1, 1, 2), UserPassword())
if mibBuilder.loadTexts: slmChPassOldPass.setStatus('current')
if mibBuilder.loadTexts: slmChPassOldPass.setDescription('The user password.')
slmChPassNewPass = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 12, 1, 1, 3), UserPassword()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slmChPassNewPass.setStatus('current')
if mibBuilder.loadTexts: slmChPassNewPass.setDescription('The user password.')
slmTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 1), )
if mibBuilder.loadTexts: slmTrapDestTable.setStatus('current')
if mibBuilder.loadTexts: slmTrapDestTable.setDescription('A list of trap destination entries.')
slmTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 1, 1), ).setIndexNames((0, "SL-MAIN-MIB", "slmTrapDestAddress"))
if mibBuilder.loadTexts: slmTrapDestEntry.setStatus('current')
if mibBuilder.loadTexts: slmTrapDestEntry.setDescription('This entry includes a destination IP address to which to send\n        traps for this community. An entry in the table is created by\n        the NMS.\n        In order to keep the entry in the table the management should\n        refresh the entry periodicaly. Otherwise it will be deleted\n        by the GNE after 5 minutes.')
slmTrapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmTrapDestAddress.setStatus('current')
if mibBuilder.loadTexts: slmTrapDestAddress.setDescription('A copy of slmTrapDestIpAddress represented as an integer.\n        Needed due to VxWorks failure to handle an ip address as a table index.')
slmTrapDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmTrapDestRowStatus.setStatus('current')
if mibBuilder.loadTexts: slmTrapDestRowStatus.setDescription('This object is used to create and delete rows in the\n\t     trapDestTable.')
slmTrapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 1, 1, 3), UserCommunity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmTrapDestCommunity.setStatus('current')
if mibBuilder.loadTexts: slmTrapDestCommunity.setDescription('A community to which this destination address belongs.\n        This entry is associated with any eventEntries in the RMON\n        MIB whose value of eventCommunity is equal to the value of\n        this object.  Every time an associated event entry sends a\n        trap due to an event, that trap will be sent to each\n        address in the trapDestTable with a trapDestCommunity equal to\n        eventCommunity.\n        This object may not be modified if the associated\n        trapDestStatus object is equal to active(1).')
slmTrapDestProtVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmpVer1", 1), ("snmpVer2", 2), ("snmpVer3", 3))).clone('snmpVer2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmTrapDestProtVersion.setStatus('current')
if mibBuilder.loadTexts: slmTrapDestProtVersion.setDescription('The SNMP version of the traps which this manager expects to receive.')
slmTrapUserLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 1, 1, 5), UserLogin()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmTrapUserLogin.setStatus('current')
if mibBuilder.loadTexts: slmTrapUserLogin.setDescription('The user login. This is used to describe to the manager\n\t\tthe current active login sessions. The NMS should read\n\t\tthis value periodicaly in order to refresh its entry, otherwise\n\t\tthe entry will be deleted by the GNE after a timeout of 5 minutes.')
slmTrapUserAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 1, 1, 6), AdminAccess()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmTrapUserAccess.setStatus('current')
if mibBuilder.loadTexts: slmTrapUserAccess.setDescription('The user access.')
slmTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 1, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmTrapEnable.setStatus('current')
if mibBuilder.loadTexts: slmTrapEnable.setDescription('TRUE - means that that the alarms are allowed.\n\t\tFALSE - means that all alarms should not be sent for this session.')
slmTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 1, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmTrapPort.setStatus('current')
if mibBuilder.loadTexts: slmTrapPort.setDescription('The destination port for to send the trap. \n\t\tThe default value is 162.')
slmTrapDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 1, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmTrapDestIpAddress.setStatus('current')
if mibBuilder.loadTexts: slmTrapDestIpAddress.setDescription('The address to send traps on behalf of this entry.\n        This object may not be modified if the associated\n        slmTrapDestStatus object is equal to active(1).')
slmTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 2), )
if mibBuilder.loadTexts: slmTrapLogTable.setStatus('current')
if mibBuilder.loadTexts: slmTrapLogTable.setDescription('A list of trap log entries.')
slmTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 2, 1), ).setIndexNames((0, "SL-MAIN-MIB", "slmTrapLogId"))
if mibBuilder.loadTexts: slmTrapLogEntry.setStatus('current')
if mibBuilder.loadTexts: slmTrapLogEntry.setDescription('An entry in the table keeps the log of a single trap.')
slmTrapLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmTrapLogId.setStatus('current')
if mibBuilder.loadTexts: slmTrapLogId.setDescription('The trap log id. The id increments each time a new log\n        entry arrives.')
slmTrapLogName = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmTrapLogName.setStatus('current')
if mibBuilder.loadTexts: slmTrapLogName.setDescription('The object id of the trap.')
slmTrapLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmTrapLogTimeStamp.setStatus('current')
if mibBuilder.loadTexts: slmTrapLogTimeStamp.setDescription('The trap time stamp.')
slmTrapLogParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmTrapLogParam1.setStatus('current')
if mibBuilder.loadTexts: slmTrapLogParam1.setDescription('The first parameter of the trap.')
slmTrapLogParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmTrapLogParam2.setStatus('current')
if mibBuilder.loadTexts: slmTrapLogParam2.setDescription('The second parameter of the trap.')
slmTrapLogParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmTrapLogParam3.setStatus('current')
if mibBuilder.loadTexts: slmTrapLogParam3.setDescription('The third parameter of the trap.')
slmTrapLogParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmTrapLogParam4.setStatus('current')
if mibBuilder.loadTexts: slmTrapLogParam4.setDescription('The forth parameter of the trap.')
slmTrapLogParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmTrapLogParam5.setStatus('current')
if mibBuilder.loadTexts: slmTrapLogParam5.setDescription('The fifth parameter of the trap.')
slmTrapLogParam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmTrapLogParam6.setStatus('current')
if mibBuilder.loadTexts: slmTrapLogParam6.setDescription('The sixth parameter of the trap.')
slmTrapSoftwareStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 4)).setObjects(("SL-MAIN-MIB", "slmSwRevDirectory"), ("SL-MAIN-MIB", "slmSwRevStatus"))
if mibBuilder.loadTexts: slmTrapSoftwareStatusChange.setStatus('current')
if mibBuilder.loadTexts: slmTrapSoftwareStatusChange.setDescription('A slmTrapSoftwareStatusChange trap is sent when the\n\t\tvalue of the slmSwRevStatus of one of the directories changes.')
slmTrapSysNameChange = NotificationType((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 5)).setObjects(("SL-MAIN-MIB", "slmSysName"))
if mibBuilder.loadTexts: slmTrapSysNameChange.setStatus('current')
if mibBuilder.loadTexts: slmTrapSysNameChange.setDescription('A slmTrapSysNameChange trap is sent when the\n\t\tvalue of the slmSysName is changed.')
slmTrapSysLocationChange = NotificationType((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 6)).setObjects(("SL-MAIN-MIB", "slmSysLocation"))
if mibBuilder.loadTexts: slmTrapSysLocationChange.setStatus('current')
if mibBuilder.loadTexts: slmTrapSysLocationChange.setDescription('A slmTrapSysLocationChange trap is sent when the\n\t\tvalue of the slmSysLocation is changed.')
slmSyslogDestTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 7), )
if mibBuilder.loadTexts: slmSyslogDestTable.setStatus('current')
if mibBuilder.loadTexts: slmSyslogDestTable.setDescription('A list of syslog destination entries.')
slmSyslogDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 7, 1), ).setIndexNames((0, "SL-MAIN-MIB", "slmSyslogDestAddress"))
if mibBuilder.loadTexts: slmSyslogDestEntry.setStatus('current')
if mibBuilder.loadTexts: slmSyslogDestEntry.setDescription('This entry includes a destination IP addresses to which to send\n        log messages.')
slmSyslogDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 7, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmSyslogDestAddress.setStatus('current')
if mibBuilder.loadTexts: slmSyslogDestAddress.setDescription('A copy of slmSyslogDestTable represented as an integer.\n        Needed due to VxWorks failure to handle an ip address as a table index.')
slmSyslogDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmSyslogDestRowStatus.setStatus('current')
if mibBuilder.loadTexts: slmSyslogDestRowStatus.setDescription('This object is used to create and delete rows in the slmSyslogDestTable.')
slmSyslogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("traps", 1), ("log", 2), ("debug", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmSyslogLevel.setStatus('current')
if mibBuilder.loadTexts: slmSyslogLevel.setDescription('The level of log messages which this manager expects to receive.')
slmSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 7, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmSyslogPort.setStatus('current')
if mibBuilder.loadTexts: slmSyslogPort.setDescription('The destination port for to send the log message. \n\t\tThe default value is 514.')
slmSyslogDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 5, 7, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slmSyslogDestIpAddress.setStatus('current')
if mibBuilder.loadTexts: slmSyslogDestIpAddress.setDescription('The address to send log messages on behalf of this entry.')
slmLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 3, 17, 1), )
if mibBuilder.loadTexts: slmLicenseTable.setStatus('current')
if mibBuilder.loadTexts: slmLicenseTable.setDescription('A list of License entries.')
slmLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 3, 17, 1, 1), ).setIndexNames((0, "SL-MAIN-MIB", "slmLicenseIndex"))
if mibBuilder.loadTexts: slmLicenseEntry.setStatus('current')
if mibBuilder.loadTexts: slmLicenseEntry.setDescription('An entry in the table correspond to installed license.')
slmLicenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmLicenseIndex.setStatus('current')
if mibBuilder.loadTexts: slmLicenseIndex.setDescription('The license index.')
slmLicenseExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 17, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmLicenseExpiration.setStatus('current')
if mibBuilder.loadTexts: slmLicenseExpiration.setDescription('The number of seconds to expiration. \n\t\tValue -1 for permanent.')
slmLicenseId = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 17, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slmLicenseId.setStatus('current')
if mibBuilder.loadTexts: slmLicenseId.setDescription('The license text')
mibBuilder.exportSymbols("SL-MAIN-MIB", slmSnmpv3Priv=slmSnmpv3Priv, slmEdfaNumber=slmEdfaNumber, slmSysGatewayAddr=slmSysGatewayAddr, slmSyslogDestEntry=slmSyslogDestEntry, slmSwRevEntry=slmSwRevEntry, slmTrapSoftwareStatusChange=slmTrapSoftwareStatusChange, slmTrapDestAddress=slmTrapDestAddress, slmLogFile=slmLogFile, slmSysSubnetMask=slmSysSubnetMask, slmLicenseExpiration=slmLicenseExpiration, slmTrapSysLocationChange=slmTrapSysLocationChange, SoftwareRevision=SoftwareRevision, slmAuthLogin=slmAuthLogin, slmTrapLogParam5=slmTrapLogParam5, slmChPassTable=slmChPassTable, slmSysAlmAct=slmSysAlmAct, slmTrapLogEntry=slmTrapLogEntry, slmSysLanEffectiveIpAddr=slmSysLanEffectiveIpAddr, slmAuthEntry=slmAuthEntry, slmSwRevDirectory=slmSwRevDirectory, slmTrapLogParam3=slmTrapLogParam3, slmTrapEnable=slmTrapEnable, slmSysTrapFormat=slmSysTrapFormat, slmSysLocation=slmSysLocation, slmSyslogLevel=slmSyslogLevel, slmRstpEnabled=slmRstpEnabled, slmWriteCommunity=slmWriteCommunity, slmSysLanEffectiveSubnetAddr=slmSysLanEffectiveSubnetAddr, slmTrap=slmTrap, slmLogin=slmLogin, slmSwRevName=slmSwRevName, slmRebootDelay=slmRebootDelay, slmSyslogPort=slmSyslogPort, AdminAccess=AdminAccess, slmLicenseId=slmLicenseId, slmSysChassisId=slmSysChassisId, slmConfigSysUptime=slmConfigSysUptime, PYSNMP_MODULE_ID=slMain, slmPortsNumber=slmPortsNumber, slmAdmin=slmAdmin, slmAuthPassword=slmAuthPassword, slmTrapLogId=slmTrapLogId, slmAdminTable=slmAdminTable, slmTrapLogParam4=slmTrapLogParam4, slmOpticalSwitchExist=slmOpticalSwitchExist, slmSysName=slmSysName, slmConfigFile=slmConfigFile, slmTopologyEnabled=slmTopologyEnabled, slmSnmpv3Password=slmSnmpv3Password, slmVcatDelay=slmVcatDelay, slmSysEncryptionCapability=slmSysEncryptionCapability, slmTrapDestEntry=slmTrapDestEntry, slmTrapPort=slmTrapPort, slmSysSnmpVersion=slmSysSnmpVersion, slmChPassNewPass=slmChPassNewPass, slmTrapLogParam2=slmTrapLogParam2, slmSys=slmSys, slmAdminEntry=slmAdminEntry, slmAdminPassword=slmAdminPassword, slmSyslogDestIpAddress=slmSyslogDestIpAddress, slmLicense=slmLicense, slmBoxSize=slmBoxSize, slmPsuNumber=slmPsuNumber, slmSwRevTable=slmSwRevTable, slmSysEffectiveSubnetMask=slmSysEffectiveSubnetMask, slmTrapUserAccess=slmTrapUserAccess, slmConfigSysSignalType=slmConfigSysSignalType, slmAdminAccess=slmAdminAccess, slmSysOperStatus=slmSysOperStatus, slmTrapLogParam1=slmTrapLogParam1, UserCommunity=UserCommunity, slmTrapDestTable=slmTrapDestTable, slmSysCalendarTime=slmSysCalendarTime, slmSysPmStartOfDay=slmSysPmStartOfDay, slmSysNetworkPrefix=slmSysNetworkPrefix, slmSnmpv3Auth=slmSnmpv3Auth, slmChPassEntry=slmChPassEntry, slmAuth=slmAuth, slmTrapDestCommunity=slmTrapDestCommunity, slmSysLanSubnetAddr=slmSysLanSubnetAddr, slmPmAvailable=slmPmAvailable, slmTrapUserLogin=slmTrapUserLogin, slmTrapLogName=slmTrapLogName, slmReadCommunity=slmReadCommunity, slmTrapLogTable=slmTrapLogTable, slmTid=slmTid, slmMuxNumber=slmMuxNumber, UserPassword=UserPassword, slmAdminLogin=slmAdminLogin, slmSyslogDestTable=slmSyslogDestTable, slmTrapDestIpAddress=slmTrapDestIpAddress, slmTrapLogTimeStamp=slmTrapLogTimeStamp, slmTrapDestProtVersion=slmTrapDestProtVersion, slmTrapSysNameChange=slmTrapSysNameChange, slmSysAdminStatus=slmSysAdminStatus, slmChPassLogin=slmChPassLogin, slmAdminCommunity=slmAdminCommunity, slmAuthCommunity=slmAuthCommunity, slmSyslogDestRowStatus=slmSyslogDestRowStatus, slmSysMode=slmSysMode, slmTrapDestRowStatus=slmTrapDestRowStatus, slmLicenseIndex=slmLicenseIndex, slmSysLanIpAddr=slmSysLanIpAddr, slmSysAlmDeact=slmSysAlmDeact, slmSwRevStatus=slmSwRevStatus, slmSysEffectiveIpAddr=slmSysEffectiveIpAddr, slmTrapCommunity=slmTrapCommunity, slmSysActiveSwVersion=slmSysActiveSwVersion, slmOemType=slmOemType, slmSysTemperature=slmSysTemperature, slmNetworkMode=slmNetworkMode, UserLogin=UserLogin, slmAuthTable=slmAuthTable, slmSysGatewayEffectiveIpAddr=slmSysGatewayEffectiveIpAddr, slmSysResetPm=slmSysResetPm, slmSyslogDestAddress=slmSyslogDestAddress, slm40GConf=slm40GConf, slmTrapLogParam6=slmTrapLogParam6, slmSysUplinkRate=slmSysUplinkRate, slmAdminRowStatus=slmAdminRowStatus, slMain=slMain, slmSwRevDate=slmSwRevDate, slmSysIpAddr=slmSysIpAddr, slmChPass=slmChPass, slmChPassOldPass=slmChPassOldPass, slmLicenseEntry=slmLicenseEntry, slmLicenseTable=slmLicenseTable)
