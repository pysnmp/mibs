#
# PySNMP MIB module IDRAC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/drac/IDRAC-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 12:16:52 2024
# On host fv-az1385-751 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter64, Gauge32, IpAddress, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, enterprises, NotificationType, ObjectIdentity, Unsigned32, NotificationType, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "Gauge32", "IpAddress", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "enterprises", "NotificationType", "ObjectIdentity", "Unsigned32", "NotificationType", "TimeTicks", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
server3 = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892))
outOfBandGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5))
informationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1))
racInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1))
chassisInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 2))
systemInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3))
statusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2))
alertGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3))
alertVariablesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1))
alertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2))
systemAlertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1))
storageAlertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2))
updatesAlertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 3))
auditAlertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4))
configurationAlertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5))
systemDetailsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4))
mIBVersionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1))
systemStateGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200))
chassisInformationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300))
powerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600))
thermalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700))
deviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100))
slotGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200))
fruGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000))
storageDetailsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1))
storageManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20))
physicalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130))
logicalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140))
class StringType(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 1023)

class String64(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 64)

class FQDDString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 512)

class MACAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class ObjectRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 128)

class Unsigned8BitRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class Unsigned16BitRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class Unsigned32BitRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class Signed32BitRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-2147483647, 2147483647)

class BooleanType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1)

class DateName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(25, 25)
    fixedLength = 25

class StateCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2), ("notReadyCapable", 4), ("enableAndNotReadyCapable", 6))

class StateSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("notReady", 4), ("enabledAndNotReady", 6))

class ProbeCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("upperNonCriticalThresholdSetCapable", 1), ("lowerNonCriticalThresholdSetCapable", 2), ("upperNonCriticalThresholdDefaultCapable", 4), ("lowerNonCriticalThresholdDefaultCapable", 8))

class StatusProbeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCriticalUpper", 4), ("criticalUpper", 5), ("nonRecoverableUpper", 6), ("nonCriticalLower", 7), ("criticalLower", 8), ("nonRecoverableLower", 9), ("failed", 10))

class StatusRedundancyEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("full", 3), ("degraded", 4), ("lost", 5), ("notRedundant", 6), ("redundancyOffline", 7))

class ObjectStatusEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6))

class RacTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 16, 17, 32, 33))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("idrac7monolithic", 16), ("idrac7modular", 17), ("idrac8monolithic", 32), ("idrac8modular", 33))

class SystemFormFactorEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("u1", 3), ("u2", 4), ("u4", 5), ("u7", 6), ("singleWidthHalfHeight", 7), ("dualWidthHalfHeight", 8), ("singleWidthFullHeight", 9), ("dualWidthFullHeight", 10), ("singleWidthQuarterHeight", 11), ("u5", 12), ("u1HalfWidth", 13), ("u1QuarterWidth", 14), ("u1FullWidth", 15))

class BladeGeometryEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("singleWidthHalfHeight", 3), ("dualWidthHalfHeight", 4), ("singleWidthFullHeight", 5), ("dualWidthFullHeight", 6), ("singleWidthQuarterHeight", 7), ("u1HalfWidth", 8), ("u1QuarterWidth", 9), ("u1FullWidth", 10))

class PowerStateStatusEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("off", 3), ("on", 4))

racName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 1), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racName.setStatus('mandatory')
if mibBuilder.loadTexts: racName.setDescription('This attribute defines the product name of a remote access card.')
racShortName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 2), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racShortName.setStatus('mandatory')
if mibBuilder.loadTexts: racShortName.setDescription('This attribute defines the short product name of a remote access\n        card.')
racDescription = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 3), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racDescription.setStatus('mandatory')
if mibBuilder.loadTexts: racDescription.setDescription('This attribute defines the product description of a remote access\n        card.')
racManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 4), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: racManufacturer.setDescription('This attribute defines the product manufacturer of a remote access\n        card.')
racVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 5), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racVersion.setStatus('mandatory')
if mibBuilder.loadTexts: racVersion.setDescription('This attribute defines the product version of a remote access card.')
racURL = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 6), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racURL.setStatus('mandatory')
if mibBuilder.loadTexts: racURL.setDescription('This attribute defines the out-of-band UI URL of a remote access\n        card.')
racType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 7), RacTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racType.setStatus('mandatory')
if mibBuilder.loadTexts: racType.setDescription('This attribute defines the type of a remote access card.')
racFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 8), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: racFirmwareVersion.setDescription('This attribute defines the firmware version of a remote access card.')
chassisServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 2, 1), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisServiceTag.setStatus('mandatory')
if mibBuilder.loadTexts: chassisServiceTag.setDescription('This attribute defines the service tag of the modular chassis.\n         The value is zero length if not a modular system.')
chassisNameModular = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 2, 2), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNameModular.setStatus('mandatory')
if mibBuilder.loadTexts: chassisNameModular.setDescription('This attribute defines the chassis name of the modular chassis.\n         The value is zero length if not a modular system.')
chassisModelModular = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 2, 3), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModelModular.setStatus('mandatory')
if mibBuilder.loadTexts: chassisModelModular.setDescription('This attribute defines the model of the modular chassis.\n         The value is zero length if not a modular system.')
systemFQDN = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 1), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFQDN.setStatus('mandatory')
if mibBuilder.loadTexts: systemFQDN.setDescription('This attribute defines the fully qualified domain name of the system.\n         For example, hostname.domainname.')
systemServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 2), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServiceTag.setStatus('mandatory')
if mibBuilder.loadTexts: systemServiceTag.setDescription('This attribute defines the service tag of the system.')
systemExpressServiceCode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 3), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemExpressServiceCode.setStatus('mandatory')
if mibBuilder.loadTexts: systemExpressServiceCode.setDescription('This attribute defines the express service code of the system.')
systemAssetTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 4), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAssetTag.setStatus('mandatory')
if mibBuilder.loadTexts: systemAssetTag.setDescription('This attribute defines the asset tag of the system.')
systemBladeSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 5), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBladeSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: systemBladeSlotNumber.setDescription('This attribute defines the slot number of the system in the modular\n         chassis.')
systemOSName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 6), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemOSName.setStatus('mandatory')
if mibBuilder.loadTexts: systemOSName.setDescription('This attribute defines the name of the operating system that the host\n         is running.')
systemFormFactor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 7), SystemFormFactorEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFormFactor.setStatus('mandatory')
if mibBuilder.loadTexts: systemFormFactor.setDescription('This attribute defines the form factor of the system.')
systemDataCenterName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 8), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDataCenterName.setStatus('mandatory')
if mibBuilder.loadTexts: systemDataCenterName.setDescription('This attribute defines the Data Center locator of the system.')
systemAisleName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 9), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAisleName.setStatus('mandatory')
if mibBuilder.loadTexts: systemAisleName.setDescription('This attribute defines the Aisle locator of the system.')
systemRackName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 10), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemRackName.setStatus('mandatory')
if mibBuilder.loadTexts: systemRackName.setDescription('This attribute defines the Rack locator of the system.')
systemRackSlot = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 11), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemRackSlot.setStatus('mandatory')
if mibBuilder.loadTexts: systemRackSlot.setDescription('This attribute defines the Rack Slot locator of the system.')
systemModelName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 12), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemModelName.setStatus('mandatory')
if mibBuilder.loadTexts: systemModelName.setDescription('This attribute defines the model name of the system.')
systemSystemID = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 13), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSystemID.setStatus('mandatory')
if mibBuilder.loadTexts: systemSystemID.setDescription('This attribute defines the system ID of the system.')
systemOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 14), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemOSVersion.setStatus('mandatory')
if mibBuilder.loadTexts: systemOSVersion.setDescription('This attribute defines the version of the operating system that the\n        host is running.')
systemRoomName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 15), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemRoomName.setStatus('mandatory')
if mibBuilder.loadTexts: systemRoomName.setDescription('This attribute defines the Room locator of the system.')
systemChassisSystemHeight = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 16), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemChassisSystemHeight.setStatus('mandatory')
if mibBuilder.loadTexts: systemChassisSystemHeight.setDescription("This attribute defines the height of the system, in 'U's.\n        A U is a standard unit of measure for the height of a rack or\n        rack-mountable component.\n        (If not applicable, a 'no such name' error is returned.)")
systemBladeGeometry = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 17), BladeGeometryEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBladeGeometry.setStatus('mandatory')
if mibBuilder.loadTexts: systemBladeGeometry.setDescription("This attribute defines the geometry for a modular system.\n        (If not applicable, a 'no such name' error is returned.)")
systemNodeID = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 18), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNodeID.setStatus('mandatory')
if mibBuilder.loadTexts: systemNodeID.setDescription('This attribute defines the node ID of the system.  The node ID\n        provides a unique identifier for the system.')
globalSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2, 1), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalSystemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: globalSystemStatus.setDescription('This attribute defines the overall rollup status of all\n        components in the system being monitored by the remote\n        access card. Includes system, storage, IO devices, iDRAC,\n        CPU, memory, etc.')
systemLCDStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2, 2), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemLCDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemLCDStatus.setDescription('This attribute defines the system status as it is reflected by\n        the LCD front panel. Not all system components may be included.')
globalStorageStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2, 3), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalStorageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: globalStorageStatus.setDescription('This attribute defines the overall storage status being\n        monitored by the remote access card.')
systemPowerState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2, 4), PowerStateStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPowerState.setStatus('mandatory')
if mibBuilder.loadTexts: systemPowerState.setDescription('This attribute defines the power state of the system.')
systemPowerUpTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2, 5), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPowerUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: systemPowerUpTime.setDescription('This attribute defines the power-up time of the system in seconds.')
alertMessageID = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertMessageID.setStatus('mandatory')
if mibBuilder.loadTexts: alertMessageID.setDescription('Message ID of the event.')
alertMessage = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 2), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertMessage.setStatus('mandatory')
if mibBuilder.loadTexts: alertMessage.setDescription('Message describing the alert.')
alertCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 3), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertCurrentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alertCurrentStatus.setDescription('Current status of object causing the alert, if applicable.')
alertSystemServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertSystemServiceTag.setStatus('mandatory')
if mibBuilder.loadTexts: alertSystemServiceTag.setDescription('Service tag of the system.')
alertSystemFQDN = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 5), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertSystemFQDN.setStatus('mandatory')
if mibBuilder.loadTexts: alertSystemFQDN.setDescription('Fully qualified domain name of the system.')
alertFQDD = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: alertFQDD.setDescription('Fully qualified device descriptor of the device.')
alertDeviceDisplayName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertDeviceDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: alertDeviceDisplayName.setDescription('Display name of the device/FQDD.')
alertMessageArguments = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 8), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertMessageArguments.setStatus('mandatory')
if mibBuilder.loadTexts: alertMessageArguments.setDescription('Concatenated set of strings representing the message arguments of the\n         event. Each message argument string is enclosed in double quotes,\n         and there is a comma after the ending double quote of each message\n         argument string, except the last one. Any double quotes found within\n         a message argument string are preprocessed and changed to single\n         quotes.')
alertChassisServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertChassisServiceTag.setStatus('mandatory')
if mibBuilder.loadTexts: alertChassisServiceTag.setDescription('For modular systems, the service tag of the enclosing chassis.\n         For rack and tower systems, this varbind will be empty (zero\n         length).')
alertChassisName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertChassisName.setStatus('mandatory')
if mibBuilder.loadTexts: alertChassisName.setDescription('For modular systems, the chassis name of the enclosing chassis.\n         For rack and tower systems, this varbind will be empty (zero\n         length).')
alertRacFQDN = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 11), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertRacFQDN.setStatus('mandatory')
if mibBuilder.loadTexts: alertRacFQDN.setDescription('Fully qualified domain name of the remote access card.')
mIBMajorVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1, 1), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mIBMajorVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mIBMajorVersionNumber.setDescription('0001.0001 This attribute defines the major version number for the\n        version of this MIB supported by the iDRAC.')
mIBMinorVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1, 2), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mIBMinorVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mIBMinorVersionNumber.setDescription('0001.0002 This attribute defines the minor version number for the\n        version of this MIB supported by the iDRAC.')
mIBMaintenanceVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1, 3), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mIBMaintenanceVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mIBMaintenanceVersionNumber.setDescription('0001.0003 This attribute defines the maintenance version number for\n        the version of this MIB supported by the iDRAC.')
systemStateTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10), )
if mibBuilder.loadTexts: systemStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateTable.setDescription('0200.0010 This object defines the System State Table.')
systemStateTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1), ).setIndexNames((0, "IDRAC-MIB", "systemStatechassisIndex"))
if mibBuilder.loadTexts: systemStateTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateTableEntry.setDescription('0200.0010.0001 This object defines the System State Table Entry.')
systemStatechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatechassisIndex.setDescription('0200.0010.0001.0001 This attribute defines the index (one based) of\n        this system chassis.')
systemStateGlobalSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 2), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateGlobalSystemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateGlobalSystemStatus.setDescription('0200.0010.0001.0002 This attribute defines the global system status\n        of all system chassis being monitored by the systems management software.')
systemStateChassisState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 3), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisState.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateChassisState.setDescription('0200.0010.0001.0003 This attribute defines the state settings of this\n        system chassis.')
systemStateChassisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 4), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateChassisStatus.setDescription('0200.0010.0001.0004 This attribute defines the status of this system\n        chassis.')
systemStatePowerUnitStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerUnitStateDetails.setDescription('0200.0010.0001.0005 This attribute lists the state settings of each\n        power unit of this system.  The results are returned as a binary octet\n        string where each byte of the octet string represents the state settings\n        of a power unit.  The first byte returned represents the state settings\n        of the first power unit, etc.  The bytes have the same definition type\n        as StateSettingsFlags.')
systemStatePowerUnitStatusRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 6), StatusRedundancyEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusRedundancy.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerUnitStatusRedundancy.setDescription('0200.0010.0001.0006 This attribute defines the combined redundancy status\n        of all power units of this system.')
systemStatePowerUnitStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerUnitStatusDetails.setDescription('0200.0010.0001.0007 This attribute lists the redundancy status of each\n        power unit of this system.  The results are returned as a binary octet\n        string where each byte of the octet string represents the redundancy status\n        of a power unit.  The first byte returned represents the redundancy status\n        of the first power unit, etc.  The bytes have the same definition type as\n        StatusRedundancyEnum.')
systemStatePowerSupplyStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerSupplyStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerSupplyStateDetails.setDescription('0200.0010.0001.0008 This attribute lists the state settings of each\n        power supply of this system.  The results are returned as a binary octet\n        string where each byte of the octet string represents the state settings\n        of a power supply.  The first byte returned represents the state settings\n        of the first power supply, etc.  The bytes have the same definition type\n        as StateSettingsFlags.')
systemStatePowerSupplyStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 9), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerSupplyStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerSupplyStatusCombined.setDescription('0200.0010.0001.0009 This attribute defines the combined status of all\n        power supplies of this system.')
systemStatePowerSupplyStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerSupplyStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerSupplyStatusDetails.setDescription('0200.0010.0001.0010 This attribute lists the status of each power supply\n        of this system.  The results are returned as a binary octet string where\n        each byte of the octet string represents the status of a power supply.\n        The first byte returned represents the status of the first power supply,\n        etc.  The bytes have the same definition type as ObjectStatusEnum.')
systemStateVoltageStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateVoltageStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateVoltageStateDetails.setDescription('0200.0010.0001.0011 This attribute lists the state settings of each\n        voltage probe of this system.  The results are returned as a binary octet\n        string where each byte of the octet string represents the state settings\n        of a voltage probe.  The first byte returned represents the state settings\n        of the first voltage probe, etc.  The bytes have the same definition type\n        as StateSettingsFlags.')
systemStateVoltageStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 12), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateVoltageStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateVoltageStatusCombined.setDescription('0200.0010.0001.0012 This attribute defines the combined status of all\n        voltage probes of this system.')
systemStateVoltageStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateVoltageStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateVoltageStatusDetails.setDescription('0200.0010.0001.0013 This attribute lists the status of each voltage probe\n        of this system.  The results are returned as a binary octet string where\n        each byte of the octet string represents the status of a voltage probe.\n        The first byte returned represents the status of the first voltage probe,\n        etc.  The bytes have the same definition type as ObjectStatusEnum.')
systemStateAmperageStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateAmperageStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateAmperageStateDetails.setDescription('0200.0010.0001.0014 This attribute lists the state settings of each\n        amperage probe of this system.  The results are returned as a binary octet\n        string where each byte of the octet string represents the state settings\n        of an amperage probe.  The first byte returned represents the state settings\n        of the first amperage probe, etc.  The bytes have the same definition type\n        as StateSettingsFlags.')
systemStateAmperageStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 15), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateAmperageStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateAmperageStatusCombined.setDescription('0200.0010.0001.0015 This attribute defines the combined status of all\n        amperage probes of this system.')
systemStateAmperageStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateAmperageStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateAmperageStatusDetails.setDescription('0200.0010.0001.0016 This attribute lists the status of each amperage probe\n        of this system.  The results are returned as a binary octet string where\n        each byte of the octet string represents the status of an amperage probe.\n        The first byte returned represents the status of the first amperage probe,\n        etc.  The bytes have the same definition type as ObjectStatusEnum.')
systemStateCoolingUnitStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingUnitStateDetails.setDescription('0200.0010.0001.0017 This attribute lists the state settings of each\n        cooling unit of this system.  The results are returned as a binary octet\n        string where each byte of the octet string represents the state settings\n        of a cooling unit.  The first byte returned represents the state settings\n        of the first cooling unit, etc.  The bytes have the same definition type\n        as StateSettingsFlags.')
systemStateCoolingUnitStatusRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 18), StatusRedundancyEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusRedundancy.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingUnitStatusRedundancy.setDescription('0200.0010.0001.0018 This attribute defines the combined redundancy status\n        of all cooling units of this system.')
systemStateCoolingUnitStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingUnitStatusDetails.setDescription('0200.0010.0001.0019 This attribute lists the redundancy status of each\n        cooling unit of this system.  The results are returned as a binary octet\n        string where each byte of the octet string represents the redundancy status\n        of a cooling unit.  The first byte returned represents the redundancy status\n        of the first cooling unit, etc.  The bytes have the same definition type as\n        StatusRedundancyEnum.')
systemStateCoolingDeviceStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingDeviceStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingDeviceStateDetails.setDescription('0200.0010.0001.0020 This attribute lists the state settings of each\n        cooling device of this system.  The results are returned as a binary octet\n        string where each byte of the octet string represents the state settings\n        of a cooling device.  The first byte returned represents the state settings\n        of the first cooling device, etc.  The bytes have the same definition type\n        as StateSettingsFlags.')
systemStateCoolingDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 21), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingDeviceStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingDeviceStatusCombined.setDescription('0200.0010.0001.0021 This attribute defines the combined status of all\n        cooling devices of this system.')
systemStateCoolingDeviceStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingDeviceStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingDeviceStatusDetails.setDescription('0200.0010.0001.0022 This attribute lists the status of each cooling device\n        of this system.  The results are returned as a binary octet string where\n        each byte of the octet string represents the status of a cooling device.\n        The first byte returned represents the status of the first cooling device,\n        etc.  The bytes have the same definition type as ObjectStatusEnum.')
systemStateTemperatureStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateTemperatureStateDetails.setDescription('0200.0010.0001.0023 This attribute lists the state settings of each\n        temperature probe of this system.  The results are returned as a binary octet\n        string where each byte of the octet string represents the state settings\n        of a temperature probe.  The first byte returned represents the state settings\n        of the first temperature probe, etc.  The bytes have the same definition type\n        as StateSettingsFlags.')
systemStateTemperatureStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 24), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateTemperatureStatusCombined.setDescription('0200.0010.0001.0024 This attribute defines the combined status of all\n        temperature probes of this system.')
systemStateTemperatureStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateTemperatureStatusDetails.setDescription('0200.0010.0001.0025 This attribute lists the status of each temperature probe\n        of this system.  The results are returned as a binary octet string where\n        each byte of the octet string represents the status of a temperature probe.\n        The first byte returned represents the status of the first temperature probe,\n        etc.  The bytes have the same definition type as ObjectStatusEnum.')
systemStateMemoryDeviceStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateMemoryDeviceStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateMemoryDeviceStateDetails.setDescription('0200.0010.0001.0026 This attribute lists the state settings of each\n        memory device of this system.  The results are returned as a binary octet\n        string where each byte of the octet string represents the state settings\n        of a memory device.  The first byte returned represents the state settings\n        of the first memory device, etc.  The bytes have the same definition type\n        as StateSettingsFlags.')
systemStateMemoryDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 27), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateMemoryDeviceStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateMemoryDeviceStatusCombined.setDescription('0200.0010.0001.0027 This attribute defines the combined status of all\n        memory devices of this system.')
systemStateMemoryDeviceStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateMemoryDeviceStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateMemoryDeviceStatusDetails.setDescription('0200.0010.0001.0028 This attribute lists the status of each memory device\n        of this system.  The results are returned as a binary octet string where\n        each byte of the octet string represents the status of a memory device.\n        The first byte returned represents the status of the first memory device,\n        etc.  The bytes have the same definition type as ObjectStatusEnum.')
systemStateChassisIntrusionStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisIntrusionStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateChassisIntrusionStateDetails.setDescription('0200.0010.0001.0029 This attribute lists the state settings of each\n        intrusion detection device of this system chassis.  The results are returned as\n        a binary octet string where each byte of the octet string represents the\n        state settings of an intrusion detection device.  The first byte returned\n        represents the state settings of the first intrusion detection device, etc.\n        The bytes have the same definition type as StateSettingsFlags.')
systemStateChassisIntrusionStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 30), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisIntrusionStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateChassisIntrusionStatusCombined.setDescription('0200.0010.0001.0030 This attribute defines the combined status of all\n        intrusion detection devices of this system chassis.')
systemStateChassisIntrusionStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisIntrusionStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateChassisIntrusionStatusDetails.setDescription('0200.0010.0001.0031 This attribute lists the status of each intrusion\n        detection device of this system chassis.  The results are returned as a binary\n        octet string where each byte of the octet string represents the status\n        of an intrusion detection device.  The first byte returned represents the\n        status of the first intrusion detection device, etc.  The bytes have the\n        same definition type as ObjectStatusEnum.')
systemStatePowerUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 42), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerUnitStatusCombined.setDescription('0200.0010.0001.0042 This attribute defines the combined status\n        of all power units of this chassis.')
systemStatePowerUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatePowerUnitStatusList.setDescription('0200.0010.0001.0043 This attribute lists the status of each\n        power unit of this chassis.  The results are returned as a binary octet\n        string where each byte of the octet string represents the status\n        of a power unit.  The first byte returned represents the status\n        of the first power unit, etc.  The bytes have the same definition type\n        as ObjectStatusEnum.')
systemStateCoolingUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 44), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingUnitStatusCombined.setDescription('0200.0010.0001.0044 This attribute defines the combined status\n        of all cooling units of this system.')
systemStateCoolingUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateCoolingUnitStatusList.setDescription('0200.0010.0001.0045 This attribute lists the status of each\n        cooling unit of this system.  The results are returned as a binary octet\n        string where each byte of the octet string represents the status\n        of a cooling unit.  The first byte returned represents the status\n        of the first cooling unit, etc.  The bytes have the same definition type\n        as ObjectStatusEnum.')
systemStateProcessorDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 50), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateProcessorDeviceStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateProcessorDeviceStatusCombined.setDescription('0200.0010.0001.0050 This attribute defines the combined status of all\n        processor devices of this system.')
systemStateProcessorDeviceStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateProcessorDeviceStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateProcessorDeviceStatusList.setDescription('0200.0010.0001.0051 This attribute lists the status of each processor device\n        of this system.  The results are returned as a binary octet string where\n        each byte of the octet string represents the status of a processor device.\n        The first byte returned represents the status of the first processor device,\n        etc.  The bytes have the same definition type as ObjectStatusEnum.')
systemStateBatteryStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 52), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateBatteryStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateBatteryStatusCombined.setDescription('0200.0010.0001.0052 This attribute defines the combined status of all\n        batteries of this system.')
systemStateBatteryStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateBatteryStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateBatteryStatusList.setDescription('0200.0010.0001.0053 This attribute lists the status of each battery\n        of this system.  The results are returned as a binary octet string where\n        each byte of the octet string represents the status of a battery.\n        The first byte returned represents the status of the first battery,\n        etc.  The bytes have the same definition type as ObjectStatusEnum.')
systemStateSDCardUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 54), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardUnitStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateSDCardUnitStatusCombined.setDescription('0200.0010.0001.0054 This attribute defines the combined status\n        of all SD Card units of this system.')
systemStateSDCardUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardUnitStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateSDCardUnitStatusList.setDescription('0200.0010.0001.0055 This attribute lists the status of each\n        SD Card unit of this system.  The results are returned as a binary\n        octet string where each byte of the octet string represents the status\n        of a SD Card unit.  The first byte returned represents the status\n        of the first SD Card unit, etc.  The bytes have the same definition\n        type as ObjectStatusEnum.')
systemStateSDCardDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 56), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardDeviceStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateSDCardDeviceStatusCombined.setDescription('0200.0010.0001.0056 This attribute defines the combined status of all\n        SD Card devices of this system.')
systemStateSDCardDeviceStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 57), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardDeviceStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateSDCardDeviceStatusList.setDescription('0200.0010.0001.0057 This attribute lists the status of each SD Card device\n        of this system.  The results are returned as a binary octet string where\n        each byte of the octet string represents the status of a SD Card device.\n        The first byte returned represents the status of the first SD Card device,\n        etc.  The bytes have the same definition type as ObjectStatusEnum.')
systemStateIDSDMCardUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 58), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateIDSDMCardUnitStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateIDSDMCardUnitStatusCombined.setDescription('0200.0010.0001.0058 This attribute defines the combined status\n        of all IDSDM Card units of this system.')
systemStateIDSDMCardUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 59), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateIDSDMCardUnitStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateIDSDMCardUnitStatusList.setDescription('0200.0010.0001.0059 This attribute lists the status of each\n        IDSDM Card unit of this system.  The results are returned as a binary\n        octet string where each byte of the octet string represents the status\n        of an IDSDM Card unit.  The first byte returned represents the status\n        of the first IDSDM Card unit, etc.  The bytes have the same definition\n        type as ObjectStatusEnum.')
systemStateIDSDMCardDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 60), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateIDSDMCardDeviceStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateIDSDMCardDeviceStatusCombined.setDescription('0200.0010.0001.0060 This attribute defines the combined status of all\n        IDSDM Card devices of this system.')
systemStateIDSDMCardDeviceStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateIDSDMCardDeviceStatusList.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateIDSDMCardDeviceStatusList.setDescription('0200.0010.0001.0061 This attribute lists the status of each IDSDM Card device\n        of this system.  The results are returned as a binary octet string where\n        each byte of the octet string represents the status of an IDSDM Card device.\n        The first byte returned represents the status of the first IDSDM Card device,\n        etc.  The bytes have the same definition type as ObjectStatusEnum.')
systemStateTemperatureStatisticsStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 62), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatisticsStateDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateTemperatureStatisticsStateDetails.setDescription('0200.0010.0001.0062 This attribute lists the state settings of each\n        temperature statistics object of this system.  The results are returned\n        as a binary octet string where each byte of the octet string represents\n        the state settings of a temperature statistics object.  The first byte\n        returned represents the state settings of the first temperature\n        statistics object, etc.  The bytes have the same definition type\n        as StateSettingsFlags.')
systemStateTemperatureStatisticsStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 63), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatisticsStatusCombined.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateTemperatureStatisticsStatusCombined.setDescription('0200.0010.0001.0063 This attribute defines the combined status of all\n         temperature statistics objects of this system.')
systemStateTemperatureStatisticsStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatisticsStatusDetails.setStatus('mandatory')
if mibBuilder.loadTexts: systemStateTemperatureStatisticsStatusDetails.setDescription('0200.0010.0001.0064 This attribute lists the status of each\n        temperature statistics object of this system.  The results are returned\n        as a binary octet string where each byte of the octet string represents\n        the status of a temperature statistics object.  The first byte returned\n        represents the status of the first temperature statistics object, etc.\n        The bytes have the same definition type as ObjectStatusEnum.')
class StateCapabilitiesLogUniqueFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("unknown", 1), ("onlineCapable", 2), ("notReadyCapable", 4), ("resetCapable", 8))

class StateSettingsLogUniqueFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("unknown", 1), ("online", 2), ("notReady", 4), ("reset", 8))

class LogFormatType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("raw", 1), ("ascii", 2), ("uniCode", 3))

numEventLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 1), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numEventLogEntries.setStatus('mandatory')
if mibBuilder.loadTexts: numEventLogEntries.setDescription('0300.0001.0000 This attribute provides the number of entries\n        currently in the eventLogTable.')
numLCLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 2), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numLCLogEntries.setStatus('mandatory')
if mibBuilder.loadTexts: numLCLogEntries.setDescription('0300.0002.0000 This attribute provides the number of entries\n        currently in the lcLogTable.\n        Note: This attribute can only be accessed via SNMPv3 queries.')
class ChassisTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("desktop", 3), ("lowProfileDesktop", 4), ("pizzaBox", 5), ("miniTower", 6), ("tower", 7), ("portable", 8), ("lapTop", 9), ("noteBook", 10), ("handHeld", 11), ("dockingStation", 12), ("allInOne", 13), ("subNoteBook", 14), ("spaceSaving", 15), ("lunchBox", 16), ("mainSystemChassis", 17), ("expansionChassis", 18), ("subChassis", 19), ("busExpansionChassis", 20), ("peripheralChassis", 21), ("raidChassis", 22), ("rackMountChassis", 23), ("sealedCasePC", 24), ("multiSystemChassis", 25))

class ChassisSystemClassEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("workstationClass", 3), ("serverClass", 4), ("desktopClass", 5), ("portableClass", 6), ("netPCClass", 7), ("storageClass", 8))

class LEDControlCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("unknown", 1), ("alertOnErrorCapable", 2), ("alertOnWarningAndErrorCapable", 4), ("alertOnWarningOrErrorCapable", 6))

class LEDControlSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("alertOnError", 2), ("alertOnWarningAndError", 4))

class ChassisIdentifyControlCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2), ("notReadyCapable", 4), ("identifyCapable", 8))

class ChassisIdentifyControlSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("notReady", 4), ("identifyChassis", 8), ("identifyChassisAndEnable", 10))

class HostControlCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7, 8, 15, 16, 32, 64, 128, 256, 512))
    namedValues = NamedValues(("manualRebootCapable", 1), ("manualPowerOFFCapable", 2), ("manualPowerCycleCapable", 4), ("manualAllExceptOperatingSystemShutdownCapable", 7), ("manualOperatingSystemShutdownCapable", 8), ("manualFullyCapable", 15), ("manualRebootWithOSShutdownCapable", 16), ("manualRebootWithoutOSShutdownCapable", 32), ("manualPowerOffWithOSShutdownCapable", 64), ("manualPowerOffWithoutOSShutdownCapable", 128), ("manualPowerCycleWithOSShutdownCapable", 256), ("manualPowerCycleWithoutOSShutdownCapable", 512))

class HostControlSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 9, 10, 12))
    namedValues = NamedValues(("manualReboot", 1), ("manualPowerOFF", 2), ("manualPowerCycle", 4), ("manualOperatingSystemShutdown", 8), ("manualOperatingSystemShutdownThenReboot", 9), ("manualOperatingSystemShutdownThenPowerOFF", 10), ("manualOperatingSystemShutdownThenPowerCycle", 12))

class WatchDogControlCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 27, 31))
    namedValues = NamedValues(("automaticRebootCapable", 1), ("automaticPowerCycleCapable", 2), ("automaticNotificationCapable", 4), ("automaticWatchDogTimerCapable", 8), ("automaticPowerOffCapable", 16), ("automaticAllExceptNotificationCapable", 27), ("automaticFullyCapable", 31))

class WatchControlSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("automaticRebootEnabled", 1), ("automaticPowerCycleEnabled", 2), ("automaticNotificationEnabled", 4), ("automaticPowerOffEnabled", 8))

class WatchDogTimerCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("type1Capable", 1), ("type2Capable", 2), ("type3Capable", 4))

class PowerButtonControlCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2))

class PowerButtonControlSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 4))

class NMIButtonControlCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2))

class NMIButtonControlSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 4))

class SystemPropertiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("energySmart", 1))

chassisInformationTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10), )
if mibBuilder.loadTexts: chassisInformationTable.setStatus('mandatory')
if mibBuilder.loadTexts: chassisInformationTable.setDescription('0300.0010 This object defines the Chassis Information Table.')
chassisInformationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1), ).setIndexNames((0, "IDRAC-MIB", "chassisIndexChassisInformation"))
if mibBuilder.loadTexts: chassisInformationTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: chassisInformationTableEntry.setDescription('0300.0010.0001 This object defines the Chassis Information Table Entry.')
chassisIndexChassisInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIndexChassisInformation.setStatus('mandatory')
if mibBuilder.loadTexts: chassisIndexChassisInformation.setDescription('0300.0010.0001.0001 This attribute defines the index (one based) of\n        the system chassis.')
chassisStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 2), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: chassisStateCapabilities.setDescription('0300.0010.0001.0002 This attribute defines the state capabilities of the system chassis.')
chassisStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 3), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: chassisStateSettings.setDescription('0300.0010.0001.0003 This attribute defines the state settings of the system chassis.')
chassisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 4), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisStatus.setStatus('mandatory')
if mibBuilder.loadTexts: chassisStatus.setDescription('0300.0010.0001.0004 This attribute defines the status of the system chassis.')
chassisparentIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 5), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisparentIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: chassisparentIndexReference.setDescription('0300.0010.0001.0005 This attribute defines the index (one based) to the\n        parent system of this system chassis, if any.')
chassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 6), ChassisTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisType.setStatus('mandatory')
if mibBuilder.loadTexts: chassisType.setDescription('0300.0010.0001.0006 This attribute defines the system type of the system chassis.')
chassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisName.setDescription('0300.0010.0001.0007 This attribute defines the user-assigned name of the system chassis.')
chassisManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisManufacturerName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisManufacturerName.setDescription('0300.0010.0001.0008 This attribute defines the name of the manufacturer\n        of the system chassis.')
chassisModelTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 9), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModelTypeName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisModelTypeName.setDescription('0300.0010.0001.0009 This attribute defines the system model type of the system chassis.')
chassisAssetTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisAssetTagName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisAssetTagName.setDescription('0300.0010.0001.0010 This attribute defines the asset tag name of the system chassis.')
chassisServiceTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisServiceTagName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisServiceTagName.setDescription('0300.0010.0001.0011 This attribute defines the service tag name of the system chassis.')
chassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 12), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisID.setStatus('mandatory')
if mibBuilder.loadTexts: chassisID.setDescription('0300.0010.0001.0012 This attribute defines the system ID.  If the value\n        is 254 (0xFE), the attribute systemIDExtension provides the system ID.')
chassisIDExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 13), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIDExtension.setStatus('mandatory')
if mibBuilder.loadTexts: chassisIDExtension.setDescription('0300.0010.0001.0013 This attribute defines the system ID extension.')
chassisSystemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 14), ChassisSystemClassEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemClass.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSystemClass.setDescription('0300.0010.0001.0014 This attribute defines the system class.')
chassisSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 15), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSystemName.setDescription('0300.0010.0001.0015 This attribute defines the host name of the system chassis.')
chassisLEDControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 24), LEDControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLEDControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassisLEDControlCapabilitiesUnique.setDescription('0300.0010.0001.0024 This attribute defines the capabilities of the\n        LED control hardware in the system chassis.')
chassisLEDControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 25), LEDControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLEDControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassisLEDControlSettingsUnique.setDescription('0300.0010.0001.0025 This attribute defines the reading and setting of the\n        LED control hardware in the system chassis.')
chassisIdentifyFlashControlCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 28), ChassisIdentifyControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIdentifyFlashControlCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: chassisIdentifyFlashControlCapabilities.setDescription('0300.0010.0001.0028 This attribute defines if the system allows setting\n        of the system front panel LED to flash.')
chassisIdentifyFlashControlSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 29), ChassisIdentifyControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIdentifyFlashControlSettings.setStatus('mandatory')
if mibBuilder.loadTexts: chassisIdentifyFlashControlSettings.setDescription('0300.0010.0001.0029 This attribute setting causes the system front panel\n        LED to flash.')
chassisLockPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 30), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLockPresent.setStatus('mandatory')
if mibBuilder.loadTexts: chassisLockPresent.setDescription('0300.0010.0001.0030 If true, a system lock is present on the system chassis.')
chassishostControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 31), HostControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassishostControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassishostControlCapabilitiesUnique.setDescription('0300.0010.0001.0031 This attribute defines the capabilities of the\n        host control function.')
chassishostControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 32), HostControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassishostControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassishostControlSettingsUnique.setDescription('0300.0010.0001.0032 This attribute defines the settings of the\n        host control function.')
chassiswatchDogControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 33), WatchDogControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassiswatchDogControlCapabilitiesUnique.setDescription('0300.0010.0001.0033 This attribute defines the capabilities of the\n        watchdog control function.')
chassiswatchDogControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 34), WatchControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassiswatchDogControlSettingsUnique.setDescription('0300.0010.0001.0034 This attribute defines the settings of the\n        watchdog control function.')
chassiswatchDogControlExpiryTimeCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 35), WatchDogTimerCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlExpiryTimeCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassiswatchDogControlExpiryTimeCapabilitiesUnique.setDescription('0300.0010.0001.0035 This attribute defines the capabilities of the\n        watchdog control expiry timer function.')
chassiswatchDogControlExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 36), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlExpiryTime.setStatus('mandatory')
if mibBuilder.loadTexts: chassiswatchDogControlExpiryTime.setDescription('0300.0010.0001.0036 This attribute defines the current watchdog timer\n        value in seconds.')
chassisPowerButtonControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 38), PowerButtonControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerButtonControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassisPowerButtonControlCapabilitiesUnique.setDescription('0300.0010.0001.0038 This attribute defines the capabilities of the\n        power button control hardware in the system chassis.')
chassisPowerButtonControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 39), PowerButtonControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerButtonControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassisPowerButtonControlSettingsUnique.setDescription('0300.0010.0001.0039 This attribute defines the reading and setting of\n        the power button control hardware in the system chassis.')
chassisNMIButtonControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 44), NMIButtonControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNMIButtonControlCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassisNMIButtonControlCapabilitiesUnique.setDescription('0300.0010.0001.0044 This attribute defines the capabilities of the\n        NMI button control hardware in the system chassis.')
chassisNMIButtonControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 45), NMIButtonControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNMIButtonControlSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: chassisNMIButtonControlSettingsUnique.setDescription('0300.0010.0001.0045 This attribute defines the reading and setting of\n        the NMI button control hardware in the system chassis.')
chassisSystemProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 46), SystemPropertiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemProperties.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSystemProperties.setDescription('0300.0010.0001.0046 This attribute defines the properties of the system chassis.')
chassisSystemRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 47), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemRevisionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSystemRevisionNumber.setDescription('0300.0010.0001.0047 This attribute defines the revision number of the system\n        where zero indicates the original version of the system chassis.  The revision number\n        is not available on all systems.')
chassisSystemRevisionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 48), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemRevisionName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSystemRevisionName.setDescription('0300.0010.0001.0048 This attribute defines the revision name of the system,\n        if applicable.')
chassisExpressServiceCodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 49), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisExpressServiceCodeName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisExpressServiceCodeName.setDescription('0300.0010.0001.0049 This attribute defines the Express Service Code of the system chassis.')
eventLogTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40), )
if mibBuilder.loadTexts: eventLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogTable.setDescription('0300.0040 This object defines the Event (ESM) Log Table.')
eventLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1), ).setIndexNames((0, "IDRAC-MIB", "eventLogchassisIndex"), (0, "IDRAC-MIB", "eventLogRecordIndex"))
if mibBuilder.loadTexts: eventLogTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogTableEntry.setDescription('0300.0040.0001 This object defines the Event (ESM) Log Table Entry.')
eventLogchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogchassisIndex.setDescription('0300.0040.0001.0001 This attribute defines the index (one based) of the\n        associated system chassis.')
eventLogRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 2), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogRecordIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogRecordIndex.setDescription('0300.0040.0001.0002 This attribute defines the index (one based) of the\n        event log record.')
eventLogStateCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 3), StateCapabilitiesLogUniqueFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogStateCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogStateCapabilitiesUnique.setDescription('0300.0040.0001.0003 This attribute defines the state capabilities of the\n        object that is writing the event log.')
eventLogStateSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 4), StateSettingsLogUniqueFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogStateSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogStateSettingsUnique.setDescription('0300.0040.0001.0004 This attribute defines the state settings of the\n        object that is writing the event log.')
eventLogRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogRecord.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogRecord.setDescription('0300.0040.0001.0005 This attribute defines the data of the event log record.')
eventLogFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 6), LogFormatType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogFormat.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogFormat.setDescription('0300.0040.0001.0006 This attribute defines the format of the event log record.')
eventLogSeverityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 7), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogSeverityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogSeverityStatus.setDescription('0300.0040.0001.0007 This attribute defines the severity of the\n        event log record.')
eventLogDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 8), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogDateName.setStatus('mandatory')
if mibBuilder.loadTexts: eventLogDateName.setDescription('0300.0040.0001.0008 This attribute defines the date and time of the\n        event log record.')
systemBIOSTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50), )
if mibBuilder.loadTexts: systemBIOSTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSTable.setDescription('0300.0050 This object defines the System BIOS Table.')
systemBIOSTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1), ).setIndexNames((0, "IDRAC-MIB", "systemBIOSchassisIndex"), (0, "IDRAC-MIB", "systemBIOSIndex"))
if mibBuilder.loadTexts: systemBIOSTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSTableEntry.setDescription('0300.0050.0001 This object defines the System BIOS Table Entry.')
systemBIOSchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSchassisIndex.setDescription('0300.0050.0001.0001 This attribute defines the index (one based) of the\n        associated system chassis.')
systemBIOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSIndex.setDescription('0300.0050.0001.0002 This attribute defines the index (one based) of the\n        system BIOS.')
systemBIOSStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSStateCapabilities.setDescription('0300.0050.0001.0003 This attribute defines the state capabilities of the\n        system BIOS.')
systemBIOSStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSStateSettings.setDescription('0300.0050.0001.0004 This attribute defines the state settings of the\n        system BIOS.')
systemBIOSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSStatus.setDescription('0300.0050.0001.0005 This attribute defines the status of the system BIOS.')
systemBIOSReleaseDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 7), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSReleaseDateName.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSReleaseDateName.setDescription('0300.0050.0001.0007 This attribute defines the release date name of the\n        system BIOS.')
systemBIOSVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSVersionName.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSVersionName.setDescription('0300.0050.0001.0008 This attribute defines the version name of the\n        system BIOS.')
systemBIOSManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 11), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSManufacturerName.setStatus('mandatory')
if mibBuilder.loadTexts: systemBIOSManufacturerName.setDescription('0300.0050.0001.0011 This attribute defines the name of the manufacturer\n        of the system BIOS.')
class FirmwareType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 20, 21, 22))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("lifecycleController", 20), ("iDRAC7", 21), ("iDRAC8", 22))

firmwareTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60), )
if mibBuilder.loadTexts: firmwareTable.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareTable.setDescription('0300.0060 This object defines the Firmware Table.')
firmwareTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1), ).setIndexNames((0, "IDRAC-MIB", "firmwarechassisIndex"), (0, "IDRAC-MIB", "firmwareIndex"))
if mibBuilder.loadTexts: firmwareTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareTableEntry.setDescription('0300.0060.0001 This object defines the Firmware Table Entry.')
firmwarechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwarechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: firmwarechassisIndex.setDescription('0300.0060.0001.0001 This attribute defines the index (one based) of the\n        associated system chassis.')
firmwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareIndex.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareIndex.setDescription('0300.0060.0001.0002 This attribute defines the index (one based) of the\n        firmware.')
firmwareStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareStateCapabilities.setDescription('0300.0060.0001.0003 This attribute defines the state capabilities of the\n        firmware.')
firmwareStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareStateSettings.setDescription('0300.0060.0001.0004 This attribute defines the state settings of the\n        firmware.')
firmwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareStatus.setDescription('0300.0060.0001.0005 This attribute defines the status of the firmware.')
firmwareSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 6), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareSize.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareSize.setDescription('0300.0060.0001.0006 This attribute defines the image size of the firmware\n        in KBytes.  Zero indicates size is unknown.')
firmwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 7), FirmwareType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareType.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareType.setDescription('0300.0060.0001.0007 This attribute defines the type of firmware.')
firmwareTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareTypeName.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareTypeName.setDescription('0300.0060.0001.0008 This attribute defines the type name of the firmware.')
firmwareUpdateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 9), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateCapabilities.setDescription('0300.0060.0001.0009 This attribute defines the bitmap of supported methods\n        for firmware update.')
firmwareVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 11), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersionName.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareVersionName.setDescription('0300.0060.0001.0011 This attribute defines the version of the firmware.')
class IntrusionReadingEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("chassisNotBreached", 1), ("chassisBreached", 2), ("chassisBreachedPrior", 3), ("chassisBreachSensorFailure", 4))

class IntrusionTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("chassisBreachDetectionWhenPowerON", 1), ("chassisBreachDetectionWhenPowerOFF", 2))

intrusionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70), )
if mibBuilder.loadTexts: intrusionTable.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionTable.setDescription('0300.0070 This object defines the Intrusion Table.')
intrusionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1), ).setIndexNames((0, "IDRAC-MIB", "intrusionchassisIndex"), (0, "IDRAC-MIB", "intrusionIndex"))
if mibBuilder.loadTexts: intrusionTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionTableEntry.setDescription('0300.0070.0001 This object defines the Intrusion Table Entry.')
intrusionchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionchassisIndex.setDescription('0300.0070.0001.0001 This attribute defines the index (one based) of the\n        associated system chassis.')
intrusionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionIndex.setDescription('0300.0070.0001.0002 This attribute defines the index (one based) of the\n        intrusion sensor.')
intrusionStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionStateCapabilities.setDescription('0300.0070.0001.0003 This attribute defines the state capabilities of the\n        intrusion sensor.')
intrusionStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionStateSettings.setDescription('0300.0070.0001.0004 This attribute defines the state settings of the\n        intrusion sensor.')
intrusionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionStatus.setDescription('0300.0070.0001.0005 This attribute defines the status of the\n        intrusion sensor.')
intrusionReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 6), IntrusionReadingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionReading.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionReading.setDescription('0300.0070.0001.0006 This attribute defines the reading of the\n        intrusion sensor.')
intrusionType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 7), IntrusionTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionType.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionType.setDescription('0300.0070.0001.0007 This attribute defines the type of the\n        intrusion sensor.')
intrusionLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: intrusionLocationName.setDescription('0300.0070.0001.0008 This attribute defines the location of the\n        intrusion sensor.')
class LcLogCategoryEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("system", 1), ("storage", 2), ("updates", 3), ("audit", 4), ("configuration", 5), ("workNotes", 6))

lcLogTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90), )
if mibBuilder.loadTexts: lcLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: lcLogTable.setDescription('0300.0090 This object defines the Lifecycle (LC) Log Table.\n        Lifecycle (LC) Log table records are ordered from oldest to newest.\n        Note: This table can only be accessed via SNMPv3 queries.')
lcLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1), ).setIndexNames((0, "IDRAC-MIB", "lcLogChassisIndex"), (0, "IDRAC-MIB", "lcLogRecordIndex"))
if mibBuilder.loadTexts: lcLogTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lcLogTableEntry.setDescription('0300.0090.0001 This object defines the Lifcycle (LC) Log Table Entry.')
lcLogChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lcLogChassisIndex.setDescription('0300.0090.0001.0001 This attribute defines the index (one based)\n        of the associated system chassis.')
lcLogRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 2), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogRecordIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lcLogRecordIndex.setDescription('0300.0090.0001.0002 This attribute defines the index (one based)\n        of the LC log record.')
lcLogSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 3), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogSequenceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lcLogSequenceNumber.setDescription('0300.0090.0001.0003 This attribute defines the LC Log sequence number\n        of the event associated with the LC log record.')
lcLogCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 4), LcLogCategoryEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogCategory.setStatus('mandatory')
if mibBuilder.loadTexts: lcLogCategory.setDescription('0300.0090.0001.0004 This attribute defines the category\n        of the event associated with the LC log record.')
lcLogSeverityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogSeverityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lcLogSeverityStatus.setDescription('0300.0090.0001.0005 This attribute defines the severity\n        of the event associated with the LC log record.')
lcLogDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 6), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogDateName.setStatus('mandatory')
if mibBuilder.loadTexts: lcLogDateName.setDescription('0300.0090.0001.0006 This attribute defines the date and time\n        of the event associated with the LC log record.')
lcLogFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 7), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: lcLogFQDD.setDescription('0300.0090.0001.0007 Fully qualified device descriptor (FQDD)\n        of the device associated with the event associated with the LC log record.')
lcLogMessageID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogMessageID.setStatus('mandatory')
if mibBuilder.loadTexts: lcLogMessageID.setDescription('0300.0090.0001.0008 This attribute defines the Message ID\n        of the event associated with the LC log record.')
lcLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogMessage.setStatus('mandatory')
if mibBuilder.loadTexts: lcLogMessage.setDescription('0300.0090.0001.0009 This attribute defines the message\n        of the event associated with the LC log record.')
lcLogDetailedDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogDetailedDescription.setStatus('mandatory')
if mibBuilder.loadTexts: lcLogDetailedDescription.setDescription('0300.0090.0001.0010 This attribute defines the detailed description\n        of the event associated with the LC log record.')
lcLogRecommededAction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogRecommededAction.setStatus('mandatory')
if mibBuilder.loadTexts: lcLogRecommededAction.setDescription('0300.0090.0001.0011 This attribute defines an optional recommended action\n        associated with the event associated with the LC log record.')
lcLogComment = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogComment.setStatus('mandatory')
if mibBuilder.loadTexts: lcLogComment.setDescription('0300.0090.0001.0012 This attribute defines an optional user comment\n        associated with the event associated with the LC log record.')
powerUnitTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10), )
if mibBuilder.loadTexts: powerUnitTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitTable.setDescription('0600.0010 This object defines the Power Unit Table.')
powerUnitTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1), ).setIndexNames((0, "IDRAC-MIB", "powerUnitchassisIndex"), (0, "IDRAC-MIB", "powerUnitIndex"))
if mibBuilder.loadTexts: powerUnitTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitTableEntry.setDescription('0600.0010.0001 This object defines the Power Unit Table Entry.')
powerUnitchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitchassisIndex.setDescription('0600.0010.0001.0001 This attribute defines the index (one based) of\n         the system chassis.')
powerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitIndex.setDescription('0600.0010.0001.0002 This attribute defines the index (one based) of the\n        power unit.')
powerUnitStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitStateCapabilities.setDescription('0600.0010.0001.0003 This attribute defines the state capabilities of the\n        power unit.')
powerUnitStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitStateSettings.setDescription('0600.0010.0001.0004 This attribute defines the state settings of the\n        power unit.')
powerUnitRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 5), StatusRedundancyEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitRedundancyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitRedundancyStatus.setDescription('0600.0010.0001.0005 This attribute defines the redundancy status of the\n        power unit.')
powerSupplyCountForRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 6), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyCountForRedundancy.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyCountForRedundancy.setDescription('0600.0010.0001.0006 This attribute defines the total number of power supplies\n        required for this power unit to have full redundancy.')
powerUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitName.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitName.setDescription('0600.0010.0001.0007 This attribute defines the name of the power unit.')
powerUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 8), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerUnitStatus.setDescription('0600.0010.0001.0008 This attribute defines the status of the power unit.')
class PowerSupplyStateCapabilitiesUniqueFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("onlineCapable", 2), ("notReadyCapable", 4))

class PowerSupplyStateSettingsUniqueFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 16, 32, 64, 66, 128, 130, 210, 242))
    namedValues = NamedValues(("unknown", 1), ("onLine", 2), ("notReady", 4), ("fanFailure", 8), ("onlineAndFanFailure", 10), ("powerSupplyIsON", 16), ("powerSupplyIsOK", 32), ("acSwitchIsON", 64), ("onlineandAcSwitchIsON", 66), ("acPowerIsON", 128), ("onlineAndAcPowerIsON", 130), ("onlineAndPredictiveFailure", 210), ("acPowerAndSwitchAreOnPowerSupplyIsOnIsOkAndOnline", 242))

class PowerSupplyTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("powerSupplyTypeIsOther", 1), ("powerSupplyTypeIsUnknown", 2), ("powerSupplyTypeIsLinear", 3), ("powerSupplyTypeIsSwitching", 4), ("powerSupplyTypeIsBattery", 5), ("powerSupplyTypeIsUPS", 6), ("powerSupplyTypeIsConverter", 7), ("powerSupplyTypeIsRegulator", 8), ("powerSupplyTypeIsAC", 9), ("powerSupplyTypeIsDC", 10), ("powerSupplyTypeIsVRM", 11))

class PowerSupplySensorStateFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64))
    namedValues = NamedValues(("presenceDetected", 1), ("psFailureDetected", 2), ("predictiveFailure", 4), ("psACLost", 8), ("acLostOrOutOfRange", 16), ("acOutOfRangeButPresent", 32), ("configurationError", 64))

class PowerSupplyConfigurationErrorTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("vendorMismatch", 1), ("revisionMismatch", 2), ("processorMissing", 3))

powerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12), )
if mibBuilder.loadTexts: powerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyTable.setDescription('0600.0012 This object defines the Power Supply Table.')
powerSupplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1), ).setIndexNames((0, "IDRAC-MIB", "powerSupplychassisIndex"), (0, "IDRAC-MIB", "powerSupplyIndex"))
if mibBuilder.loadTexts: powerSupplyTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyTableEntry.setDescription('0600.0012.0001 This object defines the Power Supply Table Entry.')
powerSupplychassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplychassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplychassisIndex.setDescription('0600.0012.0001.0001 This attribute defines the index (one based) of\n         the system chassis.')
powerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyIndex.setDescription('0600.0012.0001.0002 This attribute defines the index (one based) of the\n        power supply.')
powerSupplyStateCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 3), PowerSupplyStateCapabilitiesUniqueFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStateCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyStateCapabilitiesUnique.setDescription('0600.0012.0001.0003 This attribute defines the state capabilities of the\n        power supply.')
powerSupplyStateSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 4), PowerSupplyStateSettingsUniqueFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStateSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyStateSettingsUnique.setDescription('0600.0012.0001.0004 This attribute defines the state settings of the\n        power supply.')
powerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyStatus.setDescription('0600.0012.0001.0005 This attribute defines the status of the power supply.')
powerSupplyOutputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 6), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyOutputWatts.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyOutputWatts.setDescription('0600.0012.0001.0006 This attribute defines the maximum sustained output\n        wattage of the power supply (in tenths of Watts).')
powerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 7), PowerSupplyTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyType.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyType.setDescription('0600.0012.0001.0007 This attribute defines the type of the power supply.')
powerSupplyLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyLocationName.setDescription('0600.0012.0001.0008 This attribute defines the location of the power supply.')
powerSupplyMaximumInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 9), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyMaximumInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyMaximumInputVoltage.setDescription('0600.0012.0001.0009 This attribute defines the maximum input voltage of the\n        power supply (in Volts).')
powerSupplypowerUnitIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 10), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplypowerUnitIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplypowerUnitIndexReference.setDescription('0600.0012.0001.0010 This attribute defines the index to the associated\n        power unit if the power supply is part of a power unit.')
powerSupplySensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 11), PowerSupplySensorStateFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplySensorState.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplySensorState.setDescription('0600.0012.0001.0011 This attribute defines the state reported by the\n        power supply sensor.  This attribute supplements the attribute\n        powerSupplyStateSettingsUnique.')
powerSupplyConfigurationErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 12), PowerSupplyConfigurationErrorTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyConfigurationErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyConfigurationErrorType.setDescription('0600.0012.0001.0012 This attribute defines the type of configuration error\n        reported by the power supply sensor.  When the configurationError bit is on\n        in the value for the attribute powerSupplySensorState, a value is returned\n        for this attribute; otherwise, a value is not returned for this attribute.')
powerSupplyPowerMonitorCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 13), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPowerMonitorCapable.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyPowerMonitorCapable.setDescription('0600.0012.0001.0013 This attribute defines a boolean value that reports\n        whether the power supply is capable of monitoring power consumption.')
powerSupplyRatedInputWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyRatedInputWattage.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyRatedInputWattage.setDescription('0600.0012.0001.0014 This attribute defines the rated input wattage of the\n        power supply (in tenths of Watts).')
powerSupplyFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 15), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyFQDD.setDescription('0600.0012.0001.0015 Fully qualified device descriptor (FQDD) of the\n        power supply.')
powerSupplyCurrentInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 16), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyCurrentInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyCurrentInputVoltage.setDescription('0600.0012.0001.0016 This attribute defines the current input voltage to the\n        power supply (in Volts).')
class VoltageTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("voltageProbeTypeIsOther", 1), ("voltageProbeTypeIsUnknown", 2), ("voltageProbeTypeIs1Point5Volt", 3), ("voltageProbeTypeIs3Point3Volt", 4), ("voltageProbeTypeIs5Volt", 5), ("voltageProbeTypeIsMinus5Volt", 6), ("voltageProbeTypeIs12Volt", 7), ("voltageProbeTypeIsMinus12Volt", 8), ("voltageProbeTypeIsIO", 9), ("voltageProbeTypeIsCore", 10), ("voltageProbeTypeIsFLEA", 11), ("voltageProbeTypeIsBattery", 12), ("voltageProbeTypeIsTerminator", 13), ("voltageProbeTypeIs2Point5Volt", 14), ("voltageProbeTypeIsGTL", 15), ("voltageProbeTypeIsDiscrete", 16), ("voltageProbeTypeIsGenericDiscrete", 17), ("voltageProbeTypeIsPSVoltage", 18), ("voltageProbeTypeIsMemoryStatus", 19))

class VoltageDiscreteReadingEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("voltageIsGood", 1), ("voltageIsBad", 2))

voltageProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20), )
if mibBuilder.loadTexts: voltageProbeTable.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeTable.setDescription('0600.0020 This object defines the Voltage Probe Table.')
voltageProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1), ).setIndexNames((0, "IDRAC-MIB", "voltageProbechassisIndex"), (0, "IDRAC-MIB", "voltageProbeIndex"))
if mibBuilder.loadTexts: voltageProbeTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeTableEntry.setDescription('0600.0020.001 This object defines the Voltage Probe Table Entry.')
voltageProbechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbechassisIndex.setDescription('0600.0020.0001.0001 This attribute defines the index (one based) of\n         the system chassis.')
voltageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeIndex.setDescription('0600.0020.0001.0002 This attribute defines the index (one based) of the\n        voltage probe.')
voltageProbeStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeStateCapabilities.setDescription('0600.0020.0001.0003 This attribute defines the state capabilities of the\n        voltage probe.')
voltageProbeStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeStateSettings.setDescription('0600.0020.0001.0004 This attribute defines the state settings of the\n        voltage probe.')
voltageProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 5), StatusProbeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeStatus.setDescription('0600.0020.0001.0005 This attribute defines the probe status of the\n        voltage probe.')
voltageProbeReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 6), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeReading.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeReading.setDescription('0600.0020.0001.0006 This attribute defines the reading for a voltage\n        probe of type other than voltageProbeTypeIsDiscrete.  When the value\n        for voltageProbeType is other than voltageProbeTypeIsDiscrete, the value\n        returned for this attribute is the voltage that the probe is reading\n        in millivolts.  When the value for voltageProbeType is\n        voltageProbeTypeIsDiscrete, a value is not returned for this attribute.')
voltageProbeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 7), VoltageTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeType.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeType.setDescription('0600.0020.0001.0007 This attribute defines the type of the voltage probe.')
voltageProbeLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeLocationName.setDescription('0600.0020.0001.0008 This attribute defines the location name of the\n        voltage probe.')
voltageProbeUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 9), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeUpperNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeUpperNonRecoverableThreshold.setDescription('0600.0020.0001.0009 This attribute defines the upper nonrecoverable threshold\n        of the voltage probe.  The value is an integer representing the voltage\n        of the threshold in millivolts.')
voltageProbeUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 10), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeUpperCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeUpperCriticalThreshold.setDescription('0600.0020.0001.0010 This attribute defines the upper critical threshold\n        of the voltage probe.  The value is an integer representing the voltage\n        of the threshold in millivolts.')
voltageProbeUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 11), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeUpperNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeUpperNonCriticalThreshold.setDescription('0600.0020.0001.0011 This attribute defines the upper noncritical threshold\n        of the voltage probe.  The value is an integer representing the voltage\n        of the threshold in millivolts.')
voltageProbeLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 12), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLowerNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeLowerNonCriticalThreshold.setDescription('0600.0020.0001.0012 This attribute defines the lower noncritical threshold\n        of the voltage probe.  The value is an integer representing the voltage\n        of the threshold in millivolts.')
voltageProbeLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 13), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLowerCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeLowerCriticalThreshold.setDescription('0600.0020.0001.0013 This attribute defines the lower critical threshold\n        of the voltage probe.  The value is an integer representing the voltage\n        of the threshold in millivolts.')
voltageProbeLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLowerNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeLowerNonRecoverableThreshold.setDescription('0600.0020.0001.0014 This attribute defines the lower nonrecoverable threshold\n        of the voltage probe.  The value is an integer representing the voltage\n        of the threshold in millivolts.')
voltageProbeProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 15), ProbeCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeProbeCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeProbeCapabilities.setDescription('0600.0020.0001.0015 This attribute defines the probe capabilities of the\n        voltage probe.')
voltageProbeDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 16), VoltageDiscreteReadingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeDiscreteReading.setStatus('mandatory')
if mibBuilder.loadTexts: voltageProbeDiscreteReading.setDescription('0600.0020.0001.0016 This attribute defines the reading for a voltage\n        probe of type voltageProbeTypeIsDiscrete.  When the value for voltageProbeType\n        is other than voltageProbeTypeIsDiscrete, a value is not returned for this\n        attribute.  When the value for voltageProbeType is voltageProbeTypeIsDiscrete,\n        the value returned for this attribute is the discrete reading for the probe.')
class AmperageProbeTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25, 26))
    namedValues = NamedValues(("amperageProbeTypeIsOther", 1), ("amperageProbeTypeIsUnknown", 2), ("amperageProbeTypeIs1Point5Volt", 3), ("amperageProbeTypeIs3Point3volt", 4), ("amperageProbeTypeIs5Volt", 5), ("amperageProbeTypeIsMinus5Volt", 6), ("amperageProbeTypeIs12Volt", 7), ("amperageProbeTypeIsMinus12Volt", 8), ("amperageProbeTypeIsIO", 9), ("amperageProbeTypeIsCore", 10), ("amperageProbeTypeIsFLEA", 11), ("amperageProbeTypeIsBattery", 12), ("amperageProbeTypeIsTerminator", 13), ("amperageProbeTypeIs2Point5Volt", 14), ("amperageProbeTypeIsGTL", 15), ("amperageProbeTypeIsDiscrete", 16), ("amperageProbeTypeIsPowerSupplyAmps", 23), ("amperageProbeTypeIsPowerSupplyWatts", 24), ("amperageProbeTypeIsSystemAmps", 25), ("amperageProbeTypeIsSystemWatts", 26))

class AmperageDiscreteReadingEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("amperageIsGood", 1), ("amperageIsBad", 2))

amperageProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30), )
if mibBuilder.loadTexts: amperageProbeTable.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeTable.setDescription('0600.0030 This object defines the Amperage Probe Table.')
amperageProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1), ).setIndexNames((0, "IDRAC-MIB", "amperageProbechassisIndex"), (0, "IDRAC-MIB", "amperageProbeIndex"))
if mibBuilder.loadTexts: amperageProbeTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeTableEntry.setDescription('0600.0030.0001 This object defines the Amperage Probe Table Entry.')
amperageProbechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbechassisIndex.setDescription('0600.0030.0001.0001 This attribute defines the index (one based) of\n         the system chassis.')
amperageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeIndex.setDescription('0600.0030.0001.0002 This attribute defines the index (one based) of the\n        amperage probe.')
amperageProbeStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeStateCapabilities.setDescription('0600.0030.0001.0003 This attribute defines the state capabilities of the\n        amperage probe.')
amperageProbeStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeStateSettings.setDescription('0600.0030.0001.0004 This attribute defines the state settings of the\n        amperage probe.')
amperageProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 5), StatusProbeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeStatus.setDescription('0600.0030.0001.0005 This attribute defines the probe status of the\n        amperage probe.')
amperageProbeReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 6), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeReading.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeReading.setDescription('0600.0030.0001.0006 This attribute defines the reading for an amperage\n        probe of type other than amperageProbeTypeIsDiscrete.\n\n        When the value for amperageProbeType is amperageProbeTypeIsPowerSupplyAmps\n        or amperageProbeTypeIsSystemAmps, the value returned for this attribute\n        is the power usage that the probe is reading in tenths of Amps.\n\n        When the value for amperageProbeType is amperageProbeTypeIsPowerSupplyWatts\n        or amperageProbeTypeIsSystemWatts, the value returned for this attribute\n        is the power usage that the probe is reading in Watts.\n\n        When the value for amperageProbeType is other than amperageProbeTypeIsDiscrete,\n        amperageProbeTypeIsPowerSupplyAmps, amperageProbeTypeIsPowerSupplyWatts,\n        amperageProbeTypeIsSystemAmps or amperageProbeTypeIsSystemWatts,\n        the value returned for this attribute is the amperage that the probe is\n        reading in Milliamps.\n\n        When the value for amperageProbeType is amperageProbeTypeIsDiscrete,\n        a value is not returned for this attribute.')
amperageProbeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 7), AmperageProbeTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeType.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeType.setDescription('0600.0030.0001.0007 This attribute defines the type of the amperage probe.')
amperageProbeLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeLocationName.setDescription('0600.0030.0001.0008 This attribute defines the location of the amperage probe.')
amperageProbeUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 9), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeUpperNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeUpperNonRecoverableThreshold.setDescription('0600.0030.0001.0009 This attribute defines the upper nonrecoverable threshold\n        of the amperage probe.  The value is an integer representing the amperage\n        of the threshold in milliamps.')
amperageProbeUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 10), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeUpperCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeUpperCriticalThreshold.setDescription('0600.0030.0001.0010 This attribute defines the upper critical threshold\n        of the amperage probe.  The value is an integer representing the amperage\n        of the threshold in milliamps.')
amperageProbeUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 11), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeUpperNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeUpperNonCriticalThreshold.setDescription('0600.0030.0001.0011 This attribute defines the upper noncritical threshold\n        of the amperage probe.  The value is an integer representing the amperage\n        of the threshold in milliamps.')
amperageProbeLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 12), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLowerNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeLowerNonCriticalThreshold.setDescription('0600.0030.0001.0012 This attribute defines the lower noncritical threshold\n        of the amperage probe.  The value is an integer representing the amperage\n        of the threshold in milliamps.')
amperageProbeLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 13), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLowerCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeLowerCriticalThreshold.setDescription('0600.0030.0001.0013 This attribute defines the lower critical threshold\n        of the amperage probe.  The value is an integer representing the amperage\n        of the threshold in milliamps.')
amperageProbeLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLowerNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeLowerNonRecoverableThreshold.setDescription('0600.0030.0001.0014 This attribute defines the lower nonrecoverable threshold\n        of the amperage probe.  The value is an integer representing the amperage\n        of the threshold in milliamps.')
amperageProbeProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 15), ProbeCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeProbeCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeProbeCapabilities.setDescription('0600.0030.0001.0015 This attribute defines the probe capabilities of the\n        amperage probe.')
amperageProbeDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 16), AmperageDiscreteReadingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeDiscreteReading.setStatus('mandatory')
if mibBuilder.loadTexts: amperageProbeDiscreteReading.setDescription('0600.0030.0001.0016 This attribute defines the reading for an amperage\n        probe of type amperageProbeTypeIsDiscrete.  When the value for amperageProbeType\n        is other than amperageProbeTypeIsDiscrete, a value is not returned for this\n        attribute.  When the value for amperageProbeType is amperageProbeTypeIsDiscrete,\n        the value returned for this attribute is the discrete reading for the probe.')
class SystemBatteryReadingFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("predictiveFailure", 1), ("failed", 2), ("presenceDetected", 4))

systemBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50), )
if mibBuilder.loadTexts: systemBatteryTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemBatteryTable.setDescription('0600.0050 This object defines the System Battery Table.')
systemBatteryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1), ).setIndexNames((0, "IDRAC-MIB", "systemBatteryChassisIndex"), (0, "IDRAC-MIB", "systemBatteryIndex"))
if mibBuilder.loadTexts: systemBatteryTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemBatteryTableEntry.setDescription('0600.0050.0001 This object defines the System Battery Table Entry.')
systemBatteryChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemBatteryChassisIndex.setDescription('0600.0050.0001.0001 This attribute defines the index (one based) of\n         the system chassis that contains the battery.')
systemBatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemBatteryIndex.setDescription('0600.0050.0001.0002 This attribute defines the index (one based) of the battery.')
systemBatteryStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: systemBatteryStateCapabilities.setDescription('0600.0050.0001.0003 This attribute defines the state capabilities of the battery.')
systemBatteryStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: systemBatteryStateSettings.setDescription('0600.0050.0001.0004 This attribute defines the state settings of the battery.')
systemBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemBatteryStatus.setDescription('0600.0050.0001.0005 This attribute defines the status of the battery.')
systemBatteryReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 6), SystemBatteryReadingFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryReading.setStatus('mandatory')
if mibBuilder.loadTexts: systemBatteryReading.setDescription('0600.0050.0001.0006 This attribute defines the reading of the battery.')
systemBatteryLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: systemBatteryLocationName.setDescription('0600.0050.0001.0007 This attribute defines the location of the battery.')
class PowerCapCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class PowerCapSettingEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("enabled", 1))

powerUsageTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60), )
if mibBuilder.loadTexts: powerUsageTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageTable.setDescription('0600.0060 This object defines the Power Usage Table.')
powerUsageTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1), ).setIndexNames((0, "IDRAC-MIB", "powerUsageChassisIndex"), (0, "IDRAC-MIB", "powerUsageIndex"))
if mibBuilder.loadTexts: powerUsageTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageTableEntry.setDescription('0600.0060.0001 This object defines the Power Usage Table Entry.')
powerUsageChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageChassisIndex.setDescription('0600.0060.0001.0001 This attribute defines the index (one based) of\n         the associated system chassis.')
powerUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageIndex.setDescription('0600.0060.0001.0002 This attribute defines the index (one based) of the\n        power usage information.')
powerUsageStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageStateCapabilities.setDescription('0600.0060.0001.0003 This attribute defines the state capabilities of the\n        power usage information.')
powerUsageStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageStateSettings.setDescription('0600.0060.0001.0004 This attribute defines the state settings of the\n        power usage information.')
powerUsageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageStatus.setDescription('0600.0060.0001.0005 This attribute defines the status of the\n        power usage information.')
powerUsageEntityName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 6), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageEntityName.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageEntityName.setDescription('0600.0060.0001.0006 This attribute defines the name of the entity\n        associated with this power usage information.')
powerUsageCumulativeWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 7), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageCumulativeWattage.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageCumulativeWattage.setDescription('0600.0060.0001.0007 This attribute defines the total wattage used\n        (in Watt-hours) by this entity since the date and time specified\n        by the powerUsageCumulativeWattageStartDateName attribute.')
powerUsageCumulativeWattageStartDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 8), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageCumulativeWattageStartDateName.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageCumulativeWattageStartDateName.setDescription('0600.0060.0001.0008 This attribute defines the date and time at\n        which the data collection started for the value reported by the \n        powerUsageCumulativeWattage attribute.')
powerUsagePeakWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 9), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakWatts.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePeakWatts.setDescription('0600.0060.0001.0009 This attribute defines the peak wattage reading\n        (in Watts) for this entity since the date and time specified by the\n        powerUsagePeakWattsStartDateName attribute.')
powerUsagePeakWattsStartDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 10), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakWattsStartDateName.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePeakWattsStartDateName.setDescription('0600.0060.0001.0010 This attribute defines the date and time at\n        which the data collection started for the value reported by the \n        powerUsagePeakWatts attribute.')
powerUsagePeakWattsReadingDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 11), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakWattsReadingDateName.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePeakWattsReadingDateName.setDescription('0600.0060.0001.0011 This attribute defines the date and time at\n        which the value reported by the powerUsagePeakWatts attribute was\n        measured.')
powerUsagePeakAmps = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 12), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakAmps.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePeakAmps.setDescription('0600.0060.0001.0012 This attribute defines the peak amperage reading\n        (in tenths of Amps) for this entity since the date and time specified\n        by the powerUsagePeakAmpsStartDateName attribute.')
powerUsagePeakAmpsStartDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 13), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakAmpsStartDateName.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePeakAmpsStartDateName.setDescription('0600.0060.0001.0013 This attribute defines the date and time at\n        which the data collection started for the value reported by the \n        powerUsagePeakAmps attribute.')
powerUsagePeakAmpsReadingDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 14), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakAmpsReadingDateName.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePeakAmpsReadingDateName.setDescription('0600.0060.0001.0014 This attribute defines the date and time at\n        which the value reported by the powerUsagePeakAmps attribute was\n        measured.')
powerUsageIdlePower = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 15), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageIdlePower.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageIdlePower.setDescription('0600.0060.0001.0015 This attribute defines the system idle power\n        (in Watts).  This is the minimum power the system can consume\n        based on the current hardware configuration.')
powerUsageMaxPotentialPower = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 16), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageMaxPotentialPower.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageMaxPotentialPower.setDescription('0600.0060.0001.0016 This attribute defines the system maximum potential\n        power (in Watts).  This is the maximum power the system can consume\n        based on the current hardware configuration.')
powerUsagePowerCapCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 17), PowerCapCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePowerCapCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePowerCapCapabilities.setDescription('0600.0060.0001.0017 This attribute defines the system power cap capabilities.')
powerUsagePowerCapSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 18), PowerCapSettingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePowerCapSetting.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePowerCapSetting.setDescription('0600.0060.0001.0018 This attribute defines the system power cap setting.')
powerUsagePowerCapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 19), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePowerCapValue.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePowerCapValue.setDescription('0600.0060.0001.0019 This attribute defines the system power cap value\n        (in Watts).')
powerUsageInstantaneousHeadroom = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 20), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageInstantaneousHeadroom.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsageInstantaneousHeadroom.setDescription('0600.0060.0001.0020 This attribute defines the system instantaneous\n        headroom (in Watts).  This is the theoretical maximum power drawn by\n        the power supply minus instantaneous power draw.')
powerUsagePeakHeadroom = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 21), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakHeadroom.setStatus('mandatory')
if mibBuilder.loadTexts: powerUsagePeakHeadroom.setDescription('0600.0060.0001.0021 This attribute defines the system peak headroom\n        (in Watts).  This is the theoretical maximum power drawn by the power\n        supply minus peak power draw.')
coolingUnitTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10), )
if mibBuilder.loadTexts: coolingUnitTable.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitTable.setDescription('0700.0010 This object defines the Cooling Unit Table.')
coolingUnitTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1), ).setIndexNames((0, "IDRAC-MIB", "coolingUnitchassisIndex"), (0, "IDRAC-MIB", "coolingUnitIndex"))
if mibBuilder.loadTexts: coolingUnitTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitTableEntry.setDescription('0700.0010.0001 This object defines the Cooling Unit Table Entry.')
coolingUnitchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitchassisIndex.setDescription('0700.0010.0001.0001 This attribute defines the index (one based) of\n        the associated system chassis.')
coolingUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitIndex.setDescription('0700.0010.0001.0002 This attribute defines the index (one based) of the\n        cooling unit.')
coolingUnitStateCapabilties = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStateCapabilties.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitStateCapabilties.setDescription('0700.0010.0001.0003 This attribute defines the state capabilities of the\n        cooling unit.')
coolingUnitStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitStateSettings.setDescription('0700.0010.0001.0004 This attribute defines the state settings of the\n        cooling unit.')
coolingUnitRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 5), StatusRedundancyEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitRedundancyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitRedundancyStatus.setDescription('0700.0010.0001.0005 This attribute defines the redundancy status of the\n        cooling unit.')
coolingDeviceCountForRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 6), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceCountForRedundancy.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceCountForRedundancy.setDescription('0700.0010.0001.0006 This attribute defines the total number of cooling devices\n        required for this cooling unit to have full redundancy.')
coolingUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitName.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitName.setDescription('0700.0010.0001.0007 This attribute defines the name of the cooling unit.')
coolingUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 8), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: coolingUnitStatus.setDescription('0700.0010.0001.0008 This attribute defines the status of the cooling unit.')
class CoolingDeviceTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("coolingDeviceTypeIsOther", 1), ("coolingDeviceTypeIsUnknown", 2), ("coolingDeviceTypeIsAFan", 3), ("coolingDeviceTypeIsABlower", 4), ("coolingDeviceTypeIsAChipFan", 5), ("coolingDeviceTypeIsACabinetFan", 6), ("coolingDeviceTypeIsAPowerSupplyFan", 7), ("coolingDeviceTypeIsAHeatPipe", 8), ("coolingDeviceTypeIsRefrigeration", 9), ("coolingDeviceTypeIsActiveCooling", 10), ("coolingDeviceTypeIsPassiveCooling", 11))

class CoolingDeviceSubTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 16))
    namedValues = NamedValues(("coolingDeviceSubTypeIsOther", 1), ("coolingDeviceSubTypeIsUnknown", 2), ("coolingDeviceSubTypeIsAFanThatReadsInRPM", 3), ("coolingDeviceSubTypeIsAFanReadsONorOFF", 4), ("coolingDeviceSubTypeIsAPowerSupplyFanThatReadsinRPM", 5), ("coolingDeviceSubTypeIsAPowerSupplyFanThatReadsONorOFF", 6), ("coolingDeviceSubTypeIsDiscrete", 16))

class CoolingDeviceDiscreteReadingEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("coolingDeviceIsGood", 1), ("coolingDeviceIsBad", 2))

coolingDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12), )
if mibBuilder.loadTexts: coolingDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceTable.setDescription('0700.0012 This object defines the Cooling Device Table.')
coolingDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1), ).setIndexNames((0, "IDRAC-MIB", "coolingDevicechassisIndex"), (0, "IDRAC-MIB", "coolingDeviceIndex"))
if mibBuilder.loadTexts: coolingDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceTableEntry.setDescription('0700.0012.0001 This object defines the Cooling Device Table Entry.')
coolingDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDevicechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDevicechassisIndex.setDescription('0700.0012.0001.0001 This attribute defines the index (one based) of the\n        associated system chassis.')
coolingDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceIndex.setDescription('0700.0012.0001.0002 This attribute defines the index (one based) of the\n        cooling device.')
coolingDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceStateCapabilities.setDescription('0700.0012.0001.0003 This attribute defines the state capabilities of the\n        cooling device.')
coolingDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceStateSettings.setDescription('0700.0012.0001.0004 This attribute defines the state settings of the\n        cooling device.')
coolingDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 5), StatusProbeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceStatus.setDescription('0700.0012.0001.0005 This attribute defines the probe status of the\n        cooling device.')
coolingDeviceReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 6), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceReading.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceReading.setDescription('0700.0012.0001.0006 This attribute defines the reading for a cooling device\n        of subtype other than coolingDeviceSubTypeIsDiscrete.  When the value\n        for coolingDeviceSubType is other than coolingDeviceSubTypeIsDiscrete, the\n        value returned for this attribute is the speed in RPM or the OFF/ON value\n        of the cooling device.  When the value for coolingDeviceSubType is\n        coolingDeviceSubTypeIsDiscrete, a value is not returned for this attribute.')
coolingDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 7), CoolingDeviceTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceType.setDescription('0700.0012.0001.0007 This attribute defines the type of the cooling device.')
coolingDeviceLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceLocationName.setDescription('0700.0012.0001.0008 This attribute defines the location name of the\n        cooling device.')
coolingDeviceUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 9), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceUpperNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceUpperNonRecoverableThreshold.setDescription('0700.0012.0001.0009 This attribute defines the upper nonrecoverable threshold\n        of the cooling device.  The value is an integer representing fan speed\n        in revolutions per minute (RPM).  It is not applicable to OFF/ON type\n        cooling devices or non-cooling device types.')
coolingDeviceUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 10), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceUpperCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceUpperCriticalThreshold.setDescription('0700.0012.0001.0010 This attribute defines the upper critical threshold\n        of the cooling device.  The value is an integer representing fan speed\n        in revolutions per minute (RPM).  It is not applicable to OFF/ON type\n        cooling devices or non-cooling device types.')
coolingDeviceUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 11), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceUpperNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceUpperNonCriticalThreshold.setDescription('0700.0012.0001.0011 This attribute defines the upper noncritical threshold\n        of the cooling device.  The value is an integer representing fan speed\n        in revolutions per minute (RPM).  It is not applicable to OFF/ON type\n        cooling devices or non-cooling device types.')
coolingDeviceLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 12), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLowerNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceLowerNonCriticalThreshold.setDescription('0700.0012.0001.0012 This attribute defines the lower noncritical threshold\n        of the cooling device.  The value is an integer representing fan speed\n        in revolutions per minute (RPM).  It is not applicable to OFF/ON type\n        cooling devices or non-cooling device types.')
coolingDeviceLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 13), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLowerCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceLowerCriticalThreshold.setDescription('0700.0012.0001.0013 This attribute defines the lower critical threshold\n        of the cooling device.  The value is an integer representing fan speed\n        in revolutions per minute (RPM).  It is not applicable to OFF/ON type\n        cooling devices or non-cooling device types.')
coolingDeviceLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLowerNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceLowerNonRecoverableThreshold.setDescription('0700.0012.0001.0014 This attribute defines the lower nonrecoverable threshold\n        of the cooling device.  The value is an integer representing fan speed\n        in revolutions per minute (RPM).  It is not applicable to OFF/ON type\n        cooling devices or non-cooling device types.')
coolingDevicecoolingUnitIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 15), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDevicecoolingUnitIndexReference.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDevicecoolingUnitIndexReference.setDescription('0700.0012.0001.0015 This attribute defines the index to the associated\n        cooling unit.')
coolingDeviceSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 16), CoolingDeviceSubTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceSubType.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceSubType.setDescription('0700.0012.0001.0016 This attribute defines the subtype of the cooling device.')
coolingDeviceProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 17), ProbeCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceProbeCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceProbeCapabilities.setDescription('0700.0012.0001.0017 This attribute defines the probe capabilities of the\n        cooling device.')
coolingDeviceDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 18), CoolingDeviceDiscreteReadingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceDiscreteReading.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceDiscreteReading.setDescription('0700.0012.0001.0018 This attribute defines the reading for a cooling device\n        of type coolingDeviceSubTypeIsDiscrete.  When the value for\n        coolingDeviceSubType is other than coolingDeviceSubTypeIsDiscrete, a value\n        is not returned for this attribute.  When the value for coolingDeviceSubType\n        is coolingDeviceSubTypeIsDiscrete, the value returned for this attribute\n        is the discrete reading for the cooling device.')
coolingDeviceFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 19), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: coolingDeviceFQDD.setDescription('0700.0012.0001.0019 Fully qualified device descriptor (FQDD) of the\n        cooling device.')
class TemperatureProbeTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 16))
    namedValues = NamedValues(("temperatureProbeTypeIsOther", 1), ("temperatureProbeTypeIsUnknown", 2), ("temperatureProbeTypeIsAmbientESM", 3), ("temperatureProbeTypeIsDiscrete", 16))

class TemperatureDiscreteReadingEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("temperatureIsGood", 1), ("temperatureIsBad", 2))

temperatureProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20), )
if mibBuilder.loadTexts: temperatureProbeTable.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeTable.setDescription('0700.0020 This object defines the Temperature Probe Table.')
temperatureProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1), ).setIndexNames((0, "IDRAC-MIB", "temperatureProbechassisIndex"), (0, "IDRAC-MIB", "temperatureProbeIndex"))
if mibBuilder.loadTexts: temperatureProbeTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeTableEntry.setDescription('0700.0020.0001 This object defines the Temperature Probe Table Entry.')
temperatureProbechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbechassisIndex.setDescription('0700.0020.0001.0001 This attribute defines the index (one based) of the\n        associated system chassis.')
temperatureProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeIndex.setDescription('0700.0020.0001.0002 This attribute defines the index (one based) of the\n        temperature probe.')
temperatureProbeStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeStateCapabilities.setDescription('0700.0020.0001.0003 This attribute defines the state capabilities of the\n        temperature probe.')
temperatureProbeStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeStateSettings.setDescription('0700.0020.0001.0004 This attribute defines the state settings of the\n        temperature probe.')
temperatureProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 5), StatusProbeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeStatus.setDescription('0700.0020.0001.0005 This attribute defines the probe status of the\n        temperature probe.')
temperatureProbeReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 6), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeReading.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeReading.setDescription('0700.0020.0001.0006 This attribute defines the reading for a temperature\n        probe of type other than temperatureProbeTypeIsDiscrete.  When the value\n        for temperatureProbeType is other than temperatureProbeTypeIsDiscrete,\n        the value returned for this attribute is the temperature that the probe\n        is reading in tenths of degrees Centigrade.  When the value for\n        temperatureProbeType is temperatureProbeTypeIsDiscrete, a value is not\n        returned for this attribute.')
temperatureProbeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 7), TemperatureProbeTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeType.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeType.setDescription('0700.0020.0001.0007 This attribute defines the type of the temperature probe.')
temperatureProbeLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeLocationName.setDescription('0700.0020.0001.0008 This attribute defines the location name of the\n        temperature probe.')
temperatureProbeUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 9), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeUpperNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeUpperNonRecoverableThreshold.setDescription('0700.0020.0001.0009 This attribute defines the upper nonrecoverable threshold\n        of the temperature probe.  The value is an integer representing the temperature\n        of the threshold in tenths of degrees Centigrade.')
temperatureProbeUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 10), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeUpperCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeUpperCriticalThreshold.setDescription('0700.0020.0001.0010 This attribute defines the upper critical threshold\n        of the temperature probe.  The value is an integer representing the temperature\n        of the threshold in tenths of degrees Centigrade.')
temperatureProbeUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 11), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeUpperNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeUpperNonCriticalThreshold.setDescription('0700.0020.0001.0011 This attribute defines the upper noncritical threshold\n        of the temperature probe.  The value is an integer representing the temperature\n        of the threshold in tenths of degrees Centigrade.')
temperatureProbeLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 12), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLowerNonCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeLowerNonCriticalThreshold.setDescription('0700.0020.0001.0012 This attribute defines the lower noncritical threshold\n        of the temperature probe.  The value is an integer representing the temperature\n        of the threshold in tenths of degrees Centigrade.')
temperatureProbeLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 13), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLowerCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeLowerCriticalThreshold.setDescription('0700.0020.0001.0013 This attribute defines the lower critical threshold\n        of the temperature probe.  The value is an integer representing the temperature\n        of the threshold in tenths of degrees Centigrade.')
temperatureProbeLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLowerNonRecoverableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeLowerNonRecoverableThreshold.setDescription('0700.0020.0001.0014 This attribute defines the lower nonrecoverable threshold\n        of the temperature probe.  The value is an integer representing the temperature\n        of the threshold in tenths of degrees Centigrade.')
temperatureProbeProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 15), ProbeCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeProbeCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeProbeCapabilities.setDescription('0700.0020.0001.0015 This attribute defines the probe capabilities of the\n        temperature probe.')
temperatureProbeDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 16), TemperatureDiscreteReadingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeDiscreteReading.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeDiscreteReading.setDescription('0700.0020.0001.0016 This attribute defines the reading for a temperature\n        probe of type temperatureProbeTypeIsDiscrete.  When the value for\n        temperatureProbeType is other than temperatureProbeTypeIsDiscrete, a value\n        is not returned for this attribute.  When the value for temperatureProbeType\n        is temperatureProbeTypeIsDiscrete, the value returned for this attribute\n        is the discrete reading for the probe.')
class ProcessorDeviceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("deviceTypeIsOther", 1), ("deviceTypeIsUnknown", 2), ("deviceTypeIsCPU", 3), ("deviceTypeIsMathProcessor", 4), ("deviceTypeIsDSP", 5), ("deviceTypeIsAVideoProcessor", 6))

class ProcessorDeviceFamily(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 98, 99, 100, 101, 112, 120, 121, 122, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 250, 251))
    namedValues = NamedValues(("deviceFamilyIsOther", 1), ("deviceFamilyIsUnknown", 2), ("deviceFamilyIs8086", 3), ("deviceFamilyIs80286", 4), ("deviceFamilyIsIntel386", 5), ("deviceFamilyIsIntel486", 6), ("deviceFamilyIs8087", 7), ("deviceFamilyIs80287", 8), ("deviceFamilyIs80387", 9), ("deviceFamilyIs80487", 10), ("deviceFamilyIsPentium", 11), ("deviceFamilyIsPentiumPro", 12), ("deviceFamilyIsPentiumII", 13), ("deviceFamilyIsPentiumMMX", 14), ("deviceFamilyIsCeleron", 15), ("deviceFamilyIsPentiumIIXeon", 16), ("deviceFamilyIsPentiumIII", 17), ("deviceFamilyIsPentiumIIIXeon", 18), ("deviceFamilyIsPentiumIIISpeedStep", 19), ("deviceFamilyIsItanium", 20), ("deviceFamilyIsIntelXeon", 21), ("deviceFamilyIsPentium4", 22), ("deviceFamilyIsIntelXeonMP", 23), ("deviceFamilyIsIntelItanium2", 24), ("deviceFamilyIsK5", 25), ("deviceFamilyIsK6", 26), ("deviceFamilyIsK6Dash2", 27), ("deviceFamilyIsK6Dash3", 28), ("deviceFamilyIsAMDAthlon", 29), ("deviceFamilyIsAMD2900", 30), ("deviceFamilyIsK6Dash2Plus", 31), ("deviceFamilyIsPowerPC", 32), ("deviceFamilyIsPowerPC601", 33), ("deviceFamilyIsPowerPC603", 34), ("deviceFamilyIsPowerPC603Plus", 35), ("deviceFamilyIsPowerPC604", 36), ("deviceFamilyIsPowerPC620", 37), ("deviceFamilyIsPowerPCx704", 38), ("deviceFamilyIsPowerPC750", 39), ("deviceFamilyIsIntelCoreDuo", 40), ("deviceFamilyIsIntelCoreDuoMobile", 41), ("deviceFamilyIsIntelCoreSoloMobile", 42), ("deviceFamilyIsIntelAtom", 43), ("deviceFamilyIsAlpha", 48), ("deviceFamilyIsAlpha21064", 49), ("deviceFamilyIsAlpha21066", 50), ("deviceFamilyIsAlpha21164", 51), ("deviceFamilyIsAlpha21164PC", 52), ("deviceFamilyIsAlpha21164a", 53), ("deviceFamilyIsAlpha21264", 54), ("deviceFamilyIsAlpha21364", 55), ("deviceFamilyIsAMDTurionIIUltraDualMobileM", 56), ("deviceFamilyIsAMDTurionIIDualMobileM", 57), ("deviceFamilyIsAMDAthlonIIDualMobileM", 58), ("deviceFamilyIsAMDOpteron6100", 59), ("deviceFamilyIsAMDOpteron4100", 60), ("deviceFamilyIsAMDOpteron6200", 61), ("deviceFamilyIsAMDOpteron4200", 62), ("deviceFamilyIsMIPS", 64), ("deviceFamilyIsMIPSR4000", 65), ("deviceFamilyIsMIPSR4200", 66), ("deviceFamilyIsMIPSR4400", 67), ("deviceFamilyIsMIPSR4600", 68), ("deviceFamilyIsMIPSR10000", 69), ("deviceFamilyIsSPARC", 80), ("deviceFamilyIsSuperSPARC", 81), ("deviceFamilyIsmicroSPARCII", 82), ("deviceFamilyIsmicroSPARCIIep", 83), ("deviceFamilyIsUltraSPARC", 84), ("deviceFamilyIsUltraSPARCII", 85), ("deviceFamilyIsUltraSPARCIIi", 86), ("deviceFamilyIsUltraSPARCIII", 87), ("deviceFamilyIsUltraSPARCIIIi", 88), ("deviceFamilyIs68040", 96), ("deviceFamilyIs68xxx", 97), ("deviceFamilyIs68000", 98), ("deviceFamilyIs68010", 99), ("deviceFamilyIs68020", 100), ("deviceFamilyIs68030", 101), ("deviceFamilyIsHobbit", 112), ("deviceFamilyIsCrusoeTM5000", 120), ("deviceFamilyIsCrusoeTM3000", 121), ("deviceFamilyIsEfficeonTM8000", 122), ("deviceFamilyIsWeitek", 128), ("deviceFamilyIsIntelCeleronM", 130), ("deviceFamilyIsAMDAthlon64", 131), ("deviceFamilyIsAMDOpteron", 132), ("deviceFamilyIsAMDSempron", 133), ("deviceFamilyIsAMDTurion64Mobile", 134), ("deviceFamilyIsDualCoreAMDOpteron", 135), ("deviceFamilyIsAMDAthlon64X2DualCore", 136), ("deviceFamilyIsAMDTurion64X2Mobile", 137), ("deviceFamilyIsQuadCoreAMDOpteron", 138), ("deviceFamilyIsThirdGenerationAMDOpteron", 139), ("deviceFamilyIsAMDPhenomFXQuadCore", 140), ("deviceFamilyIsAMDPhenomX4QuadCore", 141), ("deviceFamilyIsAMDPhenomX2DualCore", 142), ("deviceFamilyIsAMDAthlonX2DualCore", 143), ("deviceFamilyIsPARISC", 144), ("deviceFamilyIsPARISC8500", 145), ("deviceFamilyIsPARISC8000", 146), ("deviceFamilyIsPARISC7300LC", 147), ("deviceFamilyIsPARISC7200", 148), ("deviceFamilyIsPARISC7100LC", 149), ("deviceFamilyIsPARISC7100", 150), ("deviceFamilyIsV30", 160), ("deviceFamilyIsQuadCoreIntelXeon3200", 161), ("deviceFamilyIsDualCoreIntelXeon3000", 162), ("deviceFamilyIsQuadCoreIntelXeon5300", 163), ("deviceFamilyIsDualCoreIntelXeon5100", 164), ("deviceFamilyIsDualCoreIntelXeon5000", 165), ("deviceFamilyIsDualCoreIntelXeonLV", 166), ("deviceFamilyIsDualCoreIntelXeonULV", 167), ("deviceFamilyIsDualCoreIntelXeon7100", 168), ("deviceFamilyIsQuadCoreIntelXeon5400", 169), ("deviceFamilyIsQuadCoreIntelXeon", 170), ("deviceFamilyIsDualCoreIntelXeon5200", 171), ("deviceFamilyIsDualCoreIntelXeon7200", 172), ("deviceFamilyIsQuadCoreIntelXeon7300", 173), ("deviceFamilyIsQuadCoreIntelXeon7400", 174), ("deviceFamilyIsMultiCoreIntelXeon7400", 175), ("deviceFamilyIsM1", 176), ("deviceFamilyIsM2", 177), ("deviceFamilyIsIntelPentium4HT", 179), ("deviceFamilyIsAS400", 180), ("deviceFamilyIsAMDAthlonXP", 182), ("deviceFamilyIsAMDAthlonMP", 183), ("deviceFamilyIsAMDDuron", 184), ("deviceFamilyIsIntelPentiumM", 185), ("deviceFamilyIsIntelCeleronD", 186), ("deviceFamilyIsIntelPentiumD", 187), ("deviceFamilyIsIntelPentiumExtreme", 188), ("deviceFamilyIsIntelCoreSolo", 189), ("deviceFamilyIsIntelCore2", 190), ("deviceFamilyIsIntelCore2Duo", 191), ("deviceFamilyIsIntelCore2Solo", 192), ("deviceFamilyIsIntelCore2Extreme", 193), ("deviceFamilyIsIntelCore2Quad", 194), ("deviceFamilyIsIntelCore2ExtremeMobile", 195), ("deviceFamilyIsIntelCore2DuoMobile", 196), ("deviceFamilyIsIntelCore2SoloMobile", 197), ("deviceFamilyIsIntelCorei7", 198), ("deviceFamilyIsDualCoreIntelCeleron", 199), ("deviceFamilyIsIBM390", 200), ("deviceFamilyIsG4", 201), ("deviceFamilyIsG5", 202), ("deviceFamilyIsESA390G6", 203), ("deviceFamilyIszArchitectur", 204), ("deviceFamilyIsIntelCorei5", 205), ("deviceFamilyIsIntelCorei3", 206), ("deviceFamilyIsVIAC7M", 210), ("deviceFamilyIsVIAC7D", 211), ("deviceFamilyIsVIAC7", 212), ("deviceFamilyIsVIAEden", 213), ("deviceFamilyIsMultiCoreIntelXeon", 214), ("deviceFamilyIsDualCoreIntelXeon3xxx", 215), ("deviceFamilyIsQuadCoreIntelXeon3xxx", 216), ("deviceFamilyIsVIANano", 217), ("deviceFamilyIsDualCoreIntelXeon5xxx", 218), ("deviceFamilyIsQuadCoreIntelXeon5xxx", 219), ("deviceFamilyIsDualCoreIntelXeon7xxx", 221), ("deviceFamilyIsQuadCoreIntelXeon7xxx", 222), ("deviceFamilyIsMultiCoreIntelXeon7xxx", 223), ("deviceFamilyIsMultiCoreIntelXeon3400", 224), ("deviceFamilyIsEmbeddedAMDOpertonQuadCore", 230), ("deviceFamilyIsAMDPhenomTripleCore", 231), ("deviceFamilyIsAMDTurionUltraDualCoreMobile", 232), ("deviceFamilyIsAMDTurionDualCoreMobile", 233), ("deviceFamilyIsAMDAthlonDualCore", 234), ("deviceFamilyIsAMDSempronSI", 235), ("deviceFamilyIsAMDPhenomII", 236), ("deviceFamilyIsAMDAthlonII", 237), ("deviceFamilyIsSixCoreAMDOpteron", 238), ("deviceFamilyIsAMDSempronM", 239), ("deviceFamilyIsi860", 250), ("deviceFamilyIsi960", 251))

class ProcessorDeviceStatusState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("userDisabled", 4), ("biosDisabled", 5), ("idle", 6))

processorDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30), )
if mibBuilder.loadTexts: processorDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceTable.setDescription('1100.0030 This object defines the Processor Device Table.')
processorDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1), ).setIndexNames((0, "IDRAC-MIB", "processorDevicechassisIndex"), (0, "IDRAC-MIB", "processorDeviceIndex"))
if mibBuilder.loadTexts: processorDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceTableEntry.setDescription('1100.0030.0001 This object defines the Processor Device Table Entry.')
processorDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDevicechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: processorDevicechassisIndex.setDescription('1100.0030.0001.0001 This attribute defines the index (one based) of the\n        associated system chassis.')
processorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceIndex.setDescription('1100.0030.0001.0002 This attribute defines the index (one based) of the\n        processor device.')
processorDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStateCapabilities.setDescription('1100.0030.0001.0003 This attribute defines the state capabilities of the\n        processor device.')
processorDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStateSettings.setDescription('1100.0030.0001.0004 This attribute defines the state settings of the\n        processor device.')
processorDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatus.setDescription('1100.0030.0001.0005 This attribute defines the status of the\n        processor device.')
processorDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 7), ProcessorDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceType.setDescription('1100.0030.0001.0007 This attribute defines the type of the processor device.')
processorDeviceManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceManufacturerName.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceManufacturerName.setDescription('1100.0030.0001.0008 This attribute defines the name of the manufacturer\n        of the processor device.')
processorDeviceStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 9), ProcessorDeviceStatusState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusState.setDescription('1100.0030.0001.0009 This attribute defines the status state of the\n        processor device.')
processorDeviceFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 10), ProcessorDeviceFamily()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceFamily.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceFamily.setDescription('1100.0030.0001.0010 This attribute defines the family of the\n        processor device.')
processorDeviceMaximumSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 11), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceMaximumSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceMaximumSpeed.setDescription('1100.0030.0001.0011 This attribute defines the maximum speed of the\n        processor device in MHz.  Zero indicates the maximum speed is unknown.')
processorDeviceCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 12), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCurrentSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceCurrentSpeed.setDescription('1100.0030.0001.0012 This attribute defines the current speed of the\n        processor device in MHz.  Zero indicates the current speed is unknown.')
processorDeviceExternalClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 13), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceExternalClockSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceExternalClockSpeed.setDescription('1100.0030.0001.0013 This attribute defines the speed of the\n        external clock for the processor device in MHz.  Zero indicates\n        the external clock speed is unknown.')
processorDeviceVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceVoltage.setDescription('1100.0030.0001.0014 This attribute defines the voltage powering the\n        processor device in millivolts.  Zero indicates the voltage is unknown.')
processorDeviceVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 16), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceVersionName.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceVersionName.setDescription('1100.0030.0001.0016 This attribute defines the version of the\n        processor device.  On some systems, this value contains the\n        brand and stepping information; on other systems, this value\n        contains the model and stepping information.')
processorDeviceCoreCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 17), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCoreCount.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceCoreCount.setDescription('1100.0030.0001.0017 This attribute defines the number of processor cores\n        detected for the processor device.')
processorDeviceCoreEnabledCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 18), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCoreEnabledCount.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceCoreEnabledCount.setDescription('1100.0030.0001.0018 This attribute defines the number of processor cores\n        enabled for the processor device.')
processorDeviceThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 19), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceThreadCount.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceThreadCount.setDescription('1100.0030.0001.0019 This attribute defines the number of processor threads\n        detected for the processor device.')
processorDeviceCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 20), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCharacteristics.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceCharacteristics.setDescription('1100.0030.0001.0020 This attribute defines characteristics of the\n        processor device.  This attribute is a bit field where a bit has the meaning\n        defined below when set to 1 (one).\n\n        NOTE: Bits 2-15 need to be examined in the context of bit 1.\n        If bit 1 is set, the processor charactistics are unknown and bits 2-15 cannot\n        be used to determine if the functions associated with the bits are supported.\n\n            Bit\n            Position    Meaning if Set\n            --------    --------------\n            Bit 0       Reserved\n            Bit 1       Unknown\n            Bit 2       64-bit capable\n            Bit 3-15    Reserved')
processorDeviceExtendedCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 21), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceExtendedCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceExtendedCapabilities.setDescription('1100.0030.0001.0021 This attribute defines extended capabilities of the\n        processor device.  This attribute is a bit field where a bit has the meaning\n        defined below when set to 1 (one).\n\n            Bit\n            Position    Meaning if Set\n            --------    --------------\n            Bit 0       Virtualization Technology (VT) supported\n            Bit 2       eXecute Disable (XD) supported\n            Bit 3       Hyper-Threading (HT) supported\n            Bit 4       Turbo Mode supported')
processorDeviceExtendedSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 22), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceExtendedSettings.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceExtendedSettings.setDescription('1100.0030.0001.0022 This attribute defines extended settings of the\n        processor device.  This attribute is a bit field where a bit has the meaning\n        defined below when set to 1 (one).\n\n            Bit\n            Position    Meaning if Set\n            --------    --------------\n            Bit 0       Virtualization Technology (VT) enabled\n            Bit 2       eXecute Disable (XD) enabled\n            Bit 3       Hyper-Threading (HT) enabled\n            Bit 4       Turbo Mode enabled')
processorDeviceBrandName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 23), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceBrandName.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceBrandName.setDescription('1100.0030.0001.0023 This attribute defines the brand of the\n        processor device.')
processorDeviceFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 26), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceFQDD.setDescription('1100.0030.0001.0026 Fully qualified device descriptor (FQDD) of the\n        processor device.')
class ProcessorDeviceStatusReadingFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 32, 128, 256, 512, 1024))
    namedValues = NamedValues(("internalError", 1), ("thermalTrip", 2), ("configurationError", 32), ("processorPresent", 128), ("processorDisabled", 256), ("terminatorPresent", 512), ("processorThrottled", 1024))

processorDeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32), )
if mibBuilder.loadTexts: processorDeviceStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusTable.setDescription('1100.0032 This object defines the Processor Device Status Table.')
processorDeviceStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1), ).setIndexNames((0, "IDRAC-MIB", "processorDeviceStatusChassisIndex"), (0, "IDRAC-MIB", "processorDeviceStatusIndex"))
if mibBuilder.loadTexts: processorDeviceStatusTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusTableEntry.setDescription('1100.0032.0001 This object defines the Processor Device Status Table Entry.')
processorDeviceStatusChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusChassisIndex.setDescription('1100.0032.0001.0001 This attribute defines the index (one based) of the\n        associated system chassis.')
processorDeviceStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusIndex.setDescription('1100.0032.0001.0002 This attribute defines the index (one based) of the\n        processor device status probe.')
processorDeviceStatusStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusStateCapabilities.setDescription('1100.0032.0001.0003 This attribute defines the state capabilities of the\n        processor device status probe.')
processorDeviceStatusStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusStateSettings.setDescription('1100.0032.0001.0004 This attribute defines the state settings of the\n        processor device status probe.')
processorDeviceStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusStatus.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusStatus.setDescription('1100.0032.0001.0005 This attribute defines the status of the\n        processor device status probe.  This status will be joined into\n        the processorDeviceStatus attribute.')
processorDeviceStatusReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 6), ProcessorDeviceStatusReadingFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusReading.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusReading.setDescription('1100.0032.0001.0006 This attribute defines the reading of the\n        processor device status probe.')
processorDeviceStatusLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: processorDeviceStatusLocationName.setDescription('1100.0032.0001.0007 This attribute defines the location name of the\n        processor device status probe.')
class MemoryDeviceTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26))
    namedValues = NamedValues(("deviceTypeIsOther", 1), ("deviceTypeIsUnknown", 2), ("deviceTypeIsDRAM", 3), ("deviceTypeIsEDRAM", 4), ("deviceTypeIsVRAM", 5), ("deviceTypeIsSRAM", 6), ("deviceTypeIsRAM", 7), ("deviceTypeIsROM", 8), ("deviceTypeIsFLASH", 9), ("deviceTypeIsEEPROM", 10), ("deviceTypeIsFEPROM", 11), ("deviceTypeIsEPROM", 12), ("deviceTypeIsCDRAM", 13), ("deviceTypeIs3DRAM", 14), ("deviceTypeIsSDRAM", 15), ("deviceTypeIsSGRAM", 16), ("deviceTypeIsRDRAM", 17), ("deviceTypeIsDDR", 18), ("deviceTypeIsDDR2", 19), ("deviceTypeIsDDR2FBDIMM", 20), ("deviceTypeIsDDR3", 24), ("deviceTypeIsFBD2", 25), ("deviceTypeIsDDR4", 26))

memoryDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50), )
if mibBuilder.loadTexts: memoryDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceTable.setDescription('1100.0050 This object defines the Memory Device Table.')
memoryDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1), ).setIndexNames((0, "IDRAC-MIB", "memoryDevicechassisIndex"), (0, "IDRAC-MIB", "memoryDeviceIndex"))
if mibBuilder.loadTexts: memoryDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceTableEntry.setDescription('1100.0050.0001 This object defines the Memory Device Table Entry.')
memoryDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicechassisIndex.setDescription('1100.0050.0001.0001 This attribute defines the index (one based) of the\n        associated system chassis.')
memoryDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceIndex.setDescription('1100.0050.0001.0002 This attribute defines the index (one based) of the\n        memory device.')
memoryDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceStateCapabilities.setDescription('1100.0050.0001.0003 This attribute defines the state capabilities of the\n        memory device.')
memoryDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceStateSettings.setDescription('1100.0050.0001.0004 This attribute defines the state settings of the\n        memory device.')
memoryDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceStatus.setDescription('1100.0050.0001.0005 This attribute defines the status of the memory device.')
memoryDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 7), MemoryDeviceTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceType.setDescription('1100.0050.0001.0007 This attribute defines the type of the memory device.')
memoryDeviceLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceLocationName.setDescription('1100.0050.0001.0008 This attribute defines the location of the memory device.')
memoryDeviceBankLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 10), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceBankLocationName.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceBankLocationName.setDescription('1100.0050.0001.0010 This attribute defines the location of the bank for the\n        memory device.')
memoryDeviceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 14), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSize.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceSize.setDescription('1100.0050.0001.0014 This attribute defines the size in KBytes of the\n        memory device.  Zero indicates no memory installed; 2,147,483,647 indicates\n        an unknown memory size.')
memoryDeviceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 15), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceSpeed.setDescription('1100.0050.0001.0015 This attribute defines the maximum capable speed\n        in megahertz (MHz) of the memory device.  Zero indicates an unknown speed.')
memoryDeviceManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 21), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceManufacturerName.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceManufacturerName.setDescription('1100.0050.0001.0021 This attribute defines the manufacturer of the\n        memory device.')
memoryDevicePartNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 22), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicePartNumberName.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDevicePartNumberName.setDescription("1100.0050.0001.0022 This attribute defines the manufacturer's part number\n        for the memory device.")
memoryDeviceSerialNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 23), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSerialNumberName.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceSerialNumberName.setDescription('1100.0050.0001.0023 This attribute defines the serial number of the\n        memory device.')
memoryDeviceFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 26), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceFQDD.setDescription('1100.0050.0001.0026 Fully qualified device descriptor (FQDD) of the\n        memory device.')
memoryDeviceCurrentOperatingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 27), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceCurrentOperatingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: memoryDeviceCurrentOperatingSpeed.setDescription('1100.0050.0001.0027 This attribute defines the current operating speed\n        in megahertz (MHz) of the memory device.  Zero indicates an unknown speed.')
pCIDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80), )
if mibBuilder.loadTexts: pCIDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceTable.setDescription('1100.0080 This object defines the PCI Device Table.')
pCIDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1), ).setIndexNames((0, "IDRAC-MIB", "pCIDevicechassisIndex"), (0, "IDRAC-MIB", "pCIDeviceIndex"))
if mibBuilder.loadTexts: pCIDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceTableEntry.setDescription('1100.0080.0001 This object defines the PCI Device Table Entry.')
pCIDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDevicechassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDevicechassisIndex.setDescription('1100.0080.0001.0001 This attribute defines the index (one based) of the\n        associated system chassis.')
pCIDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceIndex.setDescription('1100.0080.0001.0002 This attribute defines the index (one based) of the\n        PCI device.')
pCIDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceStateCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceStateCapabilities.setDescription('1100.0080.0001.0003 This attribute defines the state capabilities of the\n        PCI device.')
pCIDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceStateSettings.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceStateSettings.setDescription('1100.0080.0001.0004 This attribute defines the state settings of the\n        PCI device.')
pCIDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceStatus.setDescription('1100.0080.0001.0005 This attribute defines the status of the PCI device.')
pCIDeviceDataBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 7), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceDataBusWidth.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceDataBusWidth.setDescription('1100.0080.0001.0007 This attribute defines the width of the data bus\n        of the PCI device. This attribute contains an enumeration value.\n        The possible values and their meanings are defined below.\n\n            Value       Meaning\n            ----------  --------------\n            0x00000001  Other\n            0x00000002  Unknown\n            0x00000003  8 bit\n            0x00000004  16 bit\n            0x00000005  32 bit\n            0x00000006  64 bit\n            0x00000007  128 bit\n            0x00000008  1x or x1\n            0x00000009  2x or x2\n            0x0000000A  4x or x4\n            0x0000000B  8x or x8\n            0x0000000C  12x or x12\n            0x0000000D  16x or x16\n            0x0000000E  32x or x32')
pCIDeviceManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceManufacturerName.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceManufacturerName.setDescription('1100.0080.0001.0008 This attribute defines the name of the manufacturer\n        of the PCI device.')
pCIDeviceDescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 9), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceDescriptionName.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceDescriptionName.setDescription('1100.0080.0001.0009 This attribute defines the description of the PCI device.')
pCIDeviceFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 12), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: pCIDeviceFQDD.setDescription('1100.0080.0001.0012 Fully qualified device descriptor (FQDD) of the\n        PCI device.')
class NetworkDeviceConnectionStatusEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10, 11, 12, 13))
    namedValues = NamedValues(("connected", 1), ("disconnected", 2), ("driverBad", 3), ("driverDisabled", 4), ("hardwareInitalizing", 10), ("hardwareResetting", 11), ("hardwareClosing", 12), ("hardwareNotReady", 13))

class NetworkDeviceTOECapabilityFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("unknown", 1), ("available", 2), ("notAvailable", 4), ("cannotBeDetermined", 8), ("driverNotResponding", 16))

class NetworkDeviceiSCSICapabilityFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("unknown", 1), ("available", 2), ("notAvailable", 4), ("cannotBeDetermined", 8), ("driverNotResponding", 16))

class NetworkDeviceCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("supported", 1), ("toe", 2), ("iscsiOffload", 4), ("fcoeOffload", 8))

networkDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90), )
if mibBuilder.loadTexts: networkDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceTable.setDescription('1100.0090 This object defines the Network Device Table.')
networkDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1), ).setIndexNames((0, "IDRAC-MIB", "networkDeviceChassisIndex"), (0, "IDRAC-MIB", "networkDeviceIndex"))
if mibBuilder.loadTexts: networkDeviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceTableEntry.setDescription('1100.0090.0001 This object defines the Network Device Table Entry.')
networkDeviceChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceChassisIndex.setDescription('1100.0090.0001.0001 This attribute defines the index (one based) of the\n        system chassis that contains the network device.')
networkDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceIndex.setDescription('1100.0090.0001.0002 This attribute defines the index (one based) of the\n        network device.')
networkDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 3), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceStatus.setDescription('1100.0090.0001.0003 This attribute defines the status of the network device.')
networkDeviceConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 4), NetworkDeviceConnectionStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceConnectionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceConnectionStatus.setDescription('1100.0090.0001.0004 This attribute defines the connection status of the\n        network device.')
networkDeviceProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 6), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceProductName.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceProductName.setDescription('1100.0090.0001.0006 This attribute defines the product name of the\n        network device.')
networkDeviceVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceVendorName.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceVendorName.setDescription('1100.0090.0001.0007 This attribute defines the name of the vendor of the\n        network device.')
networkDeviceCurrentMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 15), MACAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceCurrentMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceCurrentMACAddress.setDescription('1100.0090.0001.0015 This attribute defines the current MAC address of the\n        network device.')
networkDevicePermanentMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 16), MACAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePermanentMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: networkDevicePermanentMACAddress.setDescription('1100.0090.0001.0016 This attribute defines the permanent MAC address of the\n        network device.')
networkDevicePCIBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 17), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePCIBusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: networkDevicePCIBusNumber.setDescription('1100.0090.0001.0017 This attribute defines the PCI bus number of the\n        network device.')
networkDevicePCIDeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 18), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePCIDeviceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: networkDevicePCIDeviceNumber.setDescription('1100.0090.0001.0018 This attribute defines the PCI device number of the\n        network device.')
networkDevicePCIFunctionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 19), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePCIFunctionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: networkDevicePCIFunctionNumber.setDescription('1100.0090.0001.0019 This attribute defines the PCI function number of the\n        network device.')
networkDeviceTOECapabilityFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 23), NetworkDeviceTOECapabilityFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceTOECapabilityFlags.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceTOECapabilityFlags.setDescription('1100.0090.0001.0023 This attribute defines the TCP/IP Offload Engine (TOE)\n        capability flags of the network device.')
networkDeviceiSCSICapabilityFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 27), NetworkDeviceiSCSICapabilityFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceiSCSICapabilityFlags.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceiSCSICapabilityFlags.setDescription('1100.0090.0001.0027 This attribute defines the Internet Small Computer\n        System Interface (iSCSI) capability flags of the network device.')
networkDeviceiSCSIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 28), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceiSCSIEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceiSCSIEnabled.setDescription('1100.0090.0001.0028 This attribute defines if iSCSI is enabled for the\n        network device.')
networkDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 29), NetworkDeviceCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceCapabilities.setDescription('1100.0090.0001.0029 This attribute defines the capabilities of the network device.\n        If this value is notSupported(0), the networkDeviceTOECapabilityFlags,\n        networkDeviceiSCSICapabilityFlags and networkDeviceiSCSIEnabled attributes should\n        be used to determine the network device capabilities.  If the supported(1) bit\n        is on, this attribute should be used to determine the network device capabilities,\n        and the attributes mentioned above should not be used.  NOTE: For a network device\n        on Converged Network Adapter (CNA), this attribute provides capability information\n        for the CNA and not for the network device. For more information read vendor\n        documentation.')
networkDeviceFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 30), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: networkDeviceFQDD.setDescription('1100.0090.0001.0030 Fully qualified device descriptor (FQDD) of the\n        network device.')
class SystemSlotStateCapabilitiesFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 126, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32640, 32766))
    namedValues = NamedValues(("systemSlotHotPlugIsUnknown", 1), ("systemSlotHotPlugIsHotPluggableCapable", 2), ("systemSlotHotPlugCanBePoweredOn", 4), ("systemSlotHotPlugCanSignalAttention", 8), ("systemSlotHotPlugCanSignalPowerFault", 16), ("systemSlotHotPlugCanSignalAdapterPresent", 32), ("systemSlotHotPlugCanSignalPowerButtonPressed", 64), ("canSupportAllHotPlugCapabilities", 126), ("systemSlotCanProvide5Volts", 128), ("systemSlotCanProvide3Point3Volts", 256), ("systemSlotCanSignalIfShared", 512), ("systemSlotCanSupportCard16", 1024), ("systemSlotCanSupportCardBus", 2048), ("systemSlotCanSupportZoomVideo", 4096), ("systemSlotCanSupportModemRingResume", 8192), ("systemSlotCanSupportPMESignal", 16384), ("canSupportAllSlotCapabilities", 32640), ("canSupportAllSlotAndAllHotPlugCapabilities", 32766))

class SystemSlotStateSettingsFlags(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 36, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 16770, 16804, 16806, 17316))
    namedValues = NamedValues(("systemSlotHotPlugIsUnknown", 1), ("systemSlotHotPlugIsHotPluggable", 2), ("systemSlotHotPlugIsPoweredOn", 4), ("systemSlotHotPlugIsAtAttention", 8), ("systemSlotHotPlugHasPowerFaulted", 16), ("systemSlotHotPlugAdapterIsPresent", 32), ("systemSlotHotPlugAdapterPresentAndPoweredOn", 36), ("systemSlotHotPlugPowerButtonPressed", 64), ("systemSlotProvides5Volts", 128), ("systemSlotProvides3Point3Volts", 256), ("systemSlotIsShared", 512), ("systemSlotSupportsCard16", 1024), ("systemSlotSupportsCardBus", 2048), ("systemSlotSupportsZoomVideo", 4096), ("systemSlotSupportsModemRingResume", 8192), ("systemSlotSupportsPMESignal", 16384), ("supportsPMEand3P3Vand5VandHotPluggable", 16770), ("supportsPMEand3P3Vand5VhasAdapterOn", 16804), ("supportsPMEand3P3Vand5VhasAdapterOnandisHotPluggable", 16806), ("supportsPMEand3P3VIsSharedand5VhasAdapterOnandHotPlugable", 17316))

class SystemSlotTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176))
    namedValues = NamedValues(("systemSlotIsOther", 1), ("systemSlotIsUnknown", 2), ("systemSlotIsISA", 3), ("systemSlotIsMCA", 4), ("systemSlotIsEISA", 5), ("systemSlotIsPCI", 6), ("systemSlotIsPCMCIA", 7), ("systemSlotIsVLVESA", 8), ("systemSlotIsProprietary", 9), ("systemSlotIsProcessorCard", 10), ("systemSlotIsProprietaryMemory", 11), ("systemSlotIsIORiserCard", 12), ("systemSlotIsNuBUS", 13), ("systemSlotIsPCI66MHz", 14), ("systemSlotIsAGP", 15), ("systemSlotIsAGP2X", 16), ("systemSlotIsAGP4X", 17), ("systemSlotIsPC98C20", 18), ("systemSlotIsPC98C24", 19), ("systemSlotIsPC98E", 20), ("systemSlotIsPC98LocalBus", 21), ("systemSlotIsPC98Card", 22), ("systemSlotIsPCIX", 23), ("systemSlotIsPCIExpress", 24), ("systemSlotIsAGP8X", 25), ("systemSlotIsPCIExpressX1", 166), ("systemSlotIsPCIExpressX2", 167), ("systemSlotIsPCIExpressX4", 168), ("systemSlotIsPCIExpressX8", 169), ("systemSlotIsPCIExpressX16", 170), ("systemSlotIsPCIExpressGen2", 171), ("systemSlotIsPCIExpressGen2X1", 172), ("systemSlotIsPCIExpressGen2X2", 173), ("systemSlotIsPCIExpressGen2X4", 174), ("systemSlotIsPCIExpressGen2X8", 175), ("systemSlotIsPCIExpressGen2X16", 176))

class SystemSlotUsageEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("systemSlotUsageIsOther", 1), ("systemSlotUsageIsUnknown", 2), ("systemSlotUsageIsAvailable", 3), ("systemSlotUsageIsInUse", 4))

class SystemSlotCategoryEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("systemSlotCategoryIsOther", 1), ("systemSlotCategoryIsUnknown", 2), ("systemSlotCategoryIsBusConnector", 3), ("systemSlotCategoryIsPCMCIA", 4), ("systemSlotCategoryIsMotherboard", 5))

systemSlotTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10), )
if mibBuilder.loadTexts: systemSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotTable.setDescription('1200.0010 This object defines the System Slot Table.')
systemSlotTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1), ).setIndexNames((0, "IDRAC-MIB", "systemSlotchassisIndex"), (0, "IDRAC-MIB", "systemSlotIndex"))
if mibBuilder.loadTexts: systemSlotTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotTableEntry.setDescription('1200.0010.0001 This object defines the System Slot Table Entry.')
systemSlotchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotchassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotchassisIndex.setDescription('1200.0010.0001.0001 This attribute defines the index (one based) of the\n        associated system chassis.')
systemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotIndex.setDescription('1200.0010.0001.0002 This attribute defines the index (one based) of the\n        system slot.')
systemSlotStateCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 3), SystemSlotStateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotStateCapabilitiesUnique.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotStateCapabilitiesUnique.setDescription('1200.0010.0001.0003 This attribute defines the state capabilities of the\n        system slot.')
systemSlotStateSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 4), SystemSlotStateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotStateSettingsUnique.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotStateSettingsUnique.setDescription('1200.0010.0001.0004 This attribute defines the state settings of the\n        system slot.')
systemSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotStatus.setDescription('1200.0010.0001.0005 This attribute defines the status of the system slot.')
systemSlotCurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 6), SystemSlotUsageEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotCurrentUsage.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotCurrentUsage.setDescription('1200.0010.0001.0006 This attribute defines the current usage of the\n        system slot.')
systemSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 7), SystemSlotTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotType.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotType.setDescription('1200.0010.0001.0007 This attribute defines the type of the system slot.')
systemSlotSlotExternalSlotName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotSlotExternalSlotName.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotSlotExternalSlotName.setDescription('1200.0010.0001.0008 This attribute defines the name of the external\n        connector name of the system slot.')
systemSlotCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 11), SystemSlotCategoryEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotCategory.setStatus('mandatory')
if mibBuilder.loadTexts: systemSlotCategory.setDescription('1200.0010.0001.0011 This attribute defines the category of the system slot.')
fruTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10), )
if mibBuilder.loadTexts: fruTable.setStatus('mandatory')
if mibBuilder.loadTexts: fruTable.setDescription('2000.0010 This object defines the Field Replaceable Unit table.')
fruTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1), ).setIndexNames((0, "IDRAC-MIB", "fruChassisIndex"), (0, "IDRAC-MIB", "fruIndex"))
if mibBuilder.loadTexts: fruTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fruTableEntry.setDescription('2000.0010.0001 This object defines the Field Replaceable Unit table entry.')
fruChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fruChassisIndex.setDescription('2000.0010.0001.0001 This attribute defines the index (one based) of the\n        system chassis containing the field replaceable unit.')
fruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fruIndex.setDescription('2000.0010.0001.0002 This attribute defines the index (one based) of the\n        field replaceable unit.')
fruInformationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 3), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruInformationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fruInformationStatus.setDescription('2000.0010.0001.0003 This attribute defines the status of the\n        field replaceable unit information.')
fruManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruManufacturerName.setStatus('mandatory')
if mibBuilder.loadTexts: fruManufacturerName.setDescription('2000.0010.0001.0006 This attribute defines the manufacturer of the\n        field replaceable unit.')
fruSerialNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruSerialNumberName.setStatus('mandatory')
if mibBuilder.loadTexts: fruSerialNumberName.setDescription('2000.0010.0001.0007 This attribute defines the serial number of the\n        field replaceable unit.')
fruPartNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruPartNumberName.setStatus('mandatory')
if mibBuilder.loadTexts: fruPartNumberName.setDescription('2000.0010.0001.0008 This attribute defines the part number of the\n        field replaceable unit.')
fruRevisionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruRevisionName.setStatus('mandatory')
if mibBuilder.loadTexts: fruRevisionName.setDescription('2000.0010.0001.0009 This attribute defines the revision of the\n        field replaceable unit.')
fruFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 12), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: fruFQDD.setDescription('2000.0010.0001.0012 Fully qualified device descriptor (FQDD) of the\n        field replaceable unit.')
batteryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15), )
if mibBuilder.loadTexts: batteryTable.setStatus('mandatory')
if mibBuilder.loadTexts: batteryTable.setDescription('A table of managed batteries. The number of \n        entries is related to number of Batteries\n        discovered in the system.  The maximum number of entries \n        is implementation dependent.\n        Note: The properties in this table may not be applicable to all \n        entries.\n        ')
batteryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1), ).setIndexNames((0, "IDRAC-MIB", "batteryNumber"))
if mibBuilder.loadTexts: batteryTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: batteryTableEntry.setDescription('An entry in the battery table. A row in this table cannot be\n        created or deleted by SNMP operations on columns of the table.\n        ')
batteryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: batteryNumber.setDescription('Instance number of this battery entry.\n        ')
batteryState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("degraded", 4), ("missing", 5), ("charging", 6), ("belowThreshold", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryState.setStatus('mandatory')
if mibBuilder.loadTexts: batteryState.setDescription('Current state of battery.\n        Possible values:\n        1: The current state could not be determined.\n        2: The battery is operating normally.\n        3: The battery has failed and needs to be replaced.\n        4: The battery temperature is high or charge level is depleting.\n        5: The battery is missing or not detected. \n        6: The battery is undergoing the re-charge phase.\n        7: The battery voltage or charge level is below the threshold.\n        ')
batteryComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 6), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: batteryComponentStatus.setDescription('The status of the battery itself without the \n        propagation of any contained component status.\n        Possible values:\n        1: Other\n        2: Unknown\n        3: OK \n        4: Non-critical \n        5: Critical\n        6: Non-recoverable')
batteryPredictedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("failed", 2), ("ready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryPredictedCapacity.setStatus('obsolete')
if mibBuilder.loadTexts: batteryPredictedCapacity.setDescription('This entry is obsolete. Use the batteryComponentStatus or \n        batteryState instead.\n        ')
batteryFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: batteryFQDD.setDescription("The battery's Fully Qualified Device Descriptor (FQDD) as \n        represented in Storage Management.\n        ")
batteryDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: batteryDisplayName.setDescription("The battery's friendly FQDD as represented in Storage Management.")
controllerTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1), )
if mibBuilder.loadTexts: controllerTable.setStatus('mandatory')
if mibBuilder.loadTexts: controllerTable.setDescription('A table of managed RAID controllers. The number of entries\n        is related to number of RAID controllers discovered in the\n        system. The maximum number of entries is implementation dependent.\n        Note: The properties in this table may not be applicable to all \n        entries.\n        ')
controllerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1), ).setIndexNames((0, "IDRAC-MIB", "controllerNumber"))
if mibBuilder.loadTexts: controllerTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: controllerTableEntry.setDescription('An entry in the table of RAID controllers. A row in this table \n        cannot be created or deleted by SNMP operations on columns of \n        the table.')
controllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: controllerNumber.setDescription('Instance number of this controller entry.')
controllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerName.setStatus('mandatory')
if mibBuilder.loadTexts: controllerName.setDescription("The controller's name as represented in Storage Management.\n        ")
controllerRebuildRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerRebuildRate.setStatus('mandatory')
if mibBuilder.loadTexts: controllerRebuildRate.setDescription("The rebuild rate is the percentage of the controller's \n        resources dedicated to rebuilding a failed disk when a rebuild \n        is necessary.\n        ")
controllerFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerFWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: controllerFWVersion.setDescription("The controller's current firmware version.\n        ")
controllerCacheSizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCacheSizeInMB.setStatus('mandatory')
if mibBuilder.loadTexts: controllerCacheSizeInMB.setDescription("The controller's current amount of cache memory in megabytes.  \n        ")
controllerRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 37), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerRollUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: controllerRollUpStatus.setDescription('Severity of the controller state.  \n        This is the combined status of the controller and its components.\n        Possible values:\n        1: Other.\n        2: Unknown.\n        3: OK \n        4: Non-critical \n        5: Critical.\n        6: Non-recoverable.\n        ')
controllerComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 38), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: controllerComponentStatus.setDescription('The status of the controller itself without the \n        propagation of any contained component status.\n        Possible values:\n        1: Other\n        2: Unknown\n        3: OK \n        4: Non-critical \n        5: Critical\n        6: Non-recoverable')
controllerDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerDriverVersion.setStatus('mandatory')
if mibBuilder.loadTexts: controllerDriverVersion.setDescription('Currently installed driver version for this controller on the host.\n        ')
controllerPCISlot = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPCISlot.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPCISlot.setDescription('The PCI slot on the server where the controller is seated. This \n        data is not reported for embedded or integrated controllers, \n        ')
controllerReconstructRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerReconstructRate.setStatus('mandatory')
if mibBuilder.loadTexts: controllerReconstructRate.setDescription("The reconstruct rate is the percentage of the controller's resources \n        dedicated to reconstructing a disk group after adding a physical disk \n        or changing the RAID level of a virtual disk residing on the disk \n        group.\n        ")
controllerPatrolReadRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPatrolReadRate.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPatrolReadRate.setDescription("The patrol read rate is the percentage of the controller's \n        resources dedicated to perform a patrol read on disks participating\n        in a virtual disk or hot spares.\n        ")
controllerBGIRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerBGIRate.setStatus('mandatory')
if mibBuilder.loadTexts: controllerBGIRate.setDescription("The background initialization (BGI) rate is the percentage of the \n        controller's resources dedicated to performing the background \n        initialization of a redundant virtual disk after it is created.\n        ")
controllerCheckConsistencyRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCheckConsistencyRate.setStatus('mandatory')
if mibBuilder.loadTexts: controllerCheckConsistencyRate.setDescription("The check consistency rate is the percentage of the \n        controller's resources dedicated to performing a check consistency \n        on a redundant virtual disk.\n        ")
controllerPatrolReadMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("disabled", 3), ("auto", 4), ("manual", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPatrolReadMode.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPatrolReadMode.setDescription('Identifies the patrol read mode setting for the controller.\n        Possible values:\n        1: Not one of the following or could not be determined.\n        2: Not Supported on this controller. \n        3: Disabled.\n        4: Automatic.\n        5: Manual.\n        ')
controllerPatrolReadState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("stopped", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPatrolReadState.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPatrolReadState.setDescription('This property displays the current state of the patrol read process.\n         Possible values:\n        1: Not one of the following or could not be determined.\n        2: Patrol read is not running.\n        3: Patrol read is running.\n        ')
controllerPersistentHotSpare = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 59), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPersistentHotSpare.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPersistentHotSpare.setDescription('Indicates whether hot spare drives would be restored on insertion \n        into the same slot.\n        ')
controllerSpinDownUnconfiguredDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 60), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSpinDownUnconfiguredDrives.setStatus('mandatory')
if mibBuilder.loadTexts: controllerSpinDownUnconfiguredDrives.setDescription('Indicates whether un-configured drives would be put in power\n        save mode by the controller.\n        ')
controllerSpinDownHotSpareDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 61), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSpinDownHotSpareDrives.setStatus('mandatory')
if mibBuilder.loadTexts: controllerSpinDownHotSpareDrives.setDescription('Indicates whether hot spare drives would be put in power\n        save mode by the controller.\n        ')
controllerSpinDownTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSpinDownTimeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: controllerSpinDownTimeInterval.setDescription('The duration in minutes after which, the unconfigured or hot \n        spare drives will be spun down to power save mode.\n        ')
controllerPreservedCache = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 69), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPreservedCache.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPreservedCache.setDescription('Indicates whether preserved cache or pinned cache is \n        present on the controller.\n        ')
controllerCheckConsistencyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unsupported", 2), ("normal", 3), ("stopOnError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCheckConsistencyMode.setStatus('mandatory')
if mibBuilder.loadTexts: controllerCheckConsistencyMode.setDescription('The current check consistency mode setting \n        for the controller.\n        Possible values:\n        1: Not one of the following.\n        2: Not supported on this controller.\n        3: Normal check consistency operation.\n        4: Check consistency operation will stop on encountering \n        an error.\n        ')
controllerCopyBackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unsupported", 2), ("on", 3), ("onWithSmart", 4), ("off", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCopyBackMode.setStatus('mandatory')
if mibBuilder.loadTexts: controllerCopyBackMode.setDescription('The current copy back mode setting \n        for the controller.\n        Possible values:\n        1: Not one of the following.\n        2: Not supported on this controller.\n        3: Disks assigned as spares could revert back to spare status.\n        4: Data from physical disk participating in a \n        virtual disk could be automatically copied to the assigned \n        hot spare in case former has a predictive failure event. \n        5: Copyback mode is disabled. \n        ')
controllerSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("lkm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSecurityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: controllerSecurityStatus.setDescription("The controller's current security/encryption status..\n        Possible values:\n        1: The current status could not be determined.\n        2: Controller is not operating in an encryption mode.\n        3: Controller is operating in the Local Key Management\n        (LKM) encryption mode.\n        ")
controllerEncryptionKeyPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 73), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerEncryptionKeyPresent.setStatus('mandatory')
if mibBuilder.loadTexts: controllerEncryptionKeyPresent.setDescription('Indicates whether encryption key is assigned for the controller.\n        ')
controllerEncryptionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("lkm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerEncryptionCapability.setStatus('mandatory')
if mibBuilder.loadTexts: controllerEncryptionCapability.setDescription('The type of encryption supported by the controller.\n    Possible values:\n    1: Not one of the following.\n    2: No encryption supported, \n    3: Local Key Management,\n    ')
controllerLoadBalanceSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unsupported", 2), ("auto", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerLoadBalanceSetting.setStatus('mandatory')
if mibBuilder.loadTexts: controllerLoadBalanceSetting.setDescription('The ability of the controller to automatically use both \n        controller ports (or connectors) connected to the same enclosure in \n        order to route I/O requests.\n        Possible values:\n        1: Not one of the following.\n        2: Not supported.\n        3: Automatic load balancing is active.\n        4: Load balancing is inactive.\n        ')
controllerMaxCapSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("oneDotFiveGbps", 2), ("threeGbps", 3), ("sixGbps", 4), ("twelveGbps", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerMaxCapSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: controllerMaxCapSpeed.setDescription('The maximum speed of the controller.in \n        Gigbits per second (Gbps).\n        Possible values:\n        1: The speed could not be determined.\n        2. 1.5 Gbps\n        3: 3.0 Gbps\n        4: 6.0 Gbps\n        5: 12.0 Gbps\n        ')
controllerSASAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 77), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSASAddress.setStatus('mandatory')
if mibBuilder.loadTexts: controllerSASAddress.setDescription('The SAS address of the controller.\n        ')
controllerFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 78), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: controllerFQDD.setDescription("The controller's Fully Qualified Device Descriptor (FQDD) as \n        represented in Storage Management.\n        ")
controllerDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 79), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: controllerDisplayName.setDescription("The controller's friendly FQDD as represented in Storage \n    Management.")
controllerT10PICapability = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("capable", 2), ("notCapable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerT10PICapability.setStatus('mandatory')
if mibBuilder.loadTexts: controllerT10PICapability.setDescription('Indicates whether the controller supports the T10 PI (Protection \n        Information). These protection fields are known as DIF\n        (Data Integrity Fields).\n        Possible values:\n        1: Not one of the following.\n        2: Capable of supporting T10 PI.\n        3: Not capable of supporting T10 PI.\n        ')
controllerRAID10UnevenSpansSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 81), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerRAID10UnevenSpansSupported.setStatus('mandatory')
if mibBuilder.loadTexts: controllerRAID10UnevenSpansSupported.setDescription('Indicates whether uneven spans for RAID 10 virtual disk \n        is supported on the controller.\n        ')
controllerEnhancedAutoImportForeignConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("disabled", 3), ("enabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerEnhancedAutoImportForeignConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: controllerEnhancedAutoImportForeignConfigMode.setDescription('Indicates the status of enhanced auto-import of foreign \n        configuration property of the controller.\n        1: Not one of the following.\n        2: Not Supported.\n        3: Disabled.\n        4: Enabled.\n        ')
controllerBootModeSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 83), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerBootModeSupported.setStatus('mandatory')
if mibBuilder.loadTexts: controllerBootModeSupported.setDescription('Indicates whether headless boot mode settings are supported \n        on the controller.\n        ')
controllerBootMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("user", 2), ("contOnError", 3), ("headlessContOnError", 4), ("headlessSafe", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerBootMode.setStatus('mandatory')
if mibBuilder.loadTexts: controllerBootMode.setDescription('Indicates the boot mode of the controller.\n        Possible values:\n        1: Not applicable for this controller.\n        2: User mode: User interaction required for all boot messages (not \n        applicable for uEFI environments).\n        3: Continue Boot On Error. User interaction only required for \n        critical messages.\n        4: Headless Mode Continue On Error. User interaction is not required.\n        Controller boot may halt on Error.\n        5: Headless Safe Mode. Controller shall boot to safe mode on critical\n        errors.\n        ')
physicalDiskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4), )
if mibBuilder.loadTexts: physicalDiskTable.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskTable.setDescription('A table of managed physical disks. The number of entries is \n        related to number of physical Disks discovered in the system.\n        The maximum number of entries is implementation dependent.\n        Note: The properties in this table may not be applicable to \n        all entries.\n        ')
physicalDiskTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1), ).setIndexNames((0, "IDRAC-MIB", "physicalDiskNumber"))
if mibBuilder.loadTexts: physicalDiskTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskTableEntry.setDescription('An entry in the physical Disk table. A row in this table cannot be\n        created or deleted by SNMP operations on columns of the table.\n        ')
physicalDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskNumber.setDescription('Instance number of this physical disk entry.\n        ')
physicalDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskName.setDescription("The physical disk's name as represented in Storage Management.\n        ")
physicalDiskManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskManufacturer.setDescription("The name of the physical disk's manufacturer.\n        ")
physicalDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("online", 3), ("foreign", 4), ("offline", 5), ("blocked", 6), ("failed", 7), ("nonraid", 8), ("removed", 9), ("readonly", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskState.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskState.setDescription('The current state of this physical disk.\n        Possible states:\n        1: The current state could not be determined.\n        2: The physical disk is available for use, but no RAID configuration \n        has been assigned. \n        3: A RAID configuration has been assigned to the physical disk.\n        4: The physical disk has been moved from another\n        controller and contains all or some portion of a virtual disk.\n        5: The physical disk is not available to the RAID\n        controller. \n        6: The physical disk is currently blocked by\n        controller.\n        7: The physical disk is not operational.\n        8: The physical disk is not a RAID capable disk \n        9: The physical disk has been removed.\n        10:The physical disk media has been placed in read only mode.\n        ')
physicalDiskProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskProductID.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskProductID.setDescription('The model number of the physical disk.\n        ')
physicalDiskSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskSerialNo.setDescription("The physical disk's unique identification number \n        from the manufacturer.\n        ")
physicalDiskRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskRevision.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskRevision.setDescription('The firmware version of the physical disk.\n        ')
physicalDiskCapacityInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskCapacityInMB.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskCapacityInMB.setDescription('The size of the physical disk in megabytes.\n        ')
physicalDiskUsedSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskUsedSpaceInMB.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskUsedSpaceInMB.setDescription('The amount of used space in megabytes on the physical\n        disk. This is not applicable for NVMe devices.\n        ')
physicalDiskFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskFreeSpaceInMB.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskFreeSpaceInMB.setDescription('The amount of free space in megabytes on the physical\n        disk. This is not applicable for NVMe devices.\n        ')
physicalDiskBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("scsi", 2), ("sas", 3), ("sata", 4), ("fibre", 5), ("pcie", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskBusType.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskBusType.setDescription('The bus type of the physical disk.\n        Possible values:\n        1: The bus type could not be determined.\n        2: Small Computer System Interface (SCSI).\n        3: Serial Attached SCSI (SAS).\n        4: Serial Advanced Technology Attachment (SATA).\n        5: Fibre channel.\n        6: PCIe.\n        ')
physicalDiskSpareState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notASpare", 1), ("dedicatedHotSpare", 2), ("globalHotSpare", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskSpareState.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskSpareState.setDescription('The status of the disk as a spare.\n        Possible values:\n        1: Physical disk is not a spare.\n        2: Physical disk is a dedicated hot spare.\n        3: Physical disk is a global hot spare.\n        ')
physicalDiskComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 24), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskComponentStatus.setDescription('The status of the physical disk itself without the \n        propagation of any contained component status.\n        Possible values:\n        1: Other\n        2: Unknown\n        3: OK \n        4: Non-critical \n        5: Critical\n        6: Non-recoverable\n        ')
physicalDiskPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskPartNumber.setDescription('The part number of the disk.\n        ')
physicalDiskSASAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskSASAddress.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskSASAddress.setDescription('The SAS address of the physical disk.\n        ')
physicalDiskNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("oneDotFiveGbps", 2), ("threeGbps", 3), ("sixGbps", 4), ("twelveGbps", 5), ("fiveGTps", 6), ("eightGTps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskNegotiatedSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskNegotiatedSpeed.setDescription('The data transfer speed that the disk negotiated while spinning up \n        in Gigbits per second (Gbps).\n        Possible values:\n        1: The speed could not be determined.\n        2. 1.5 Gbps\n        3: 3.0 Gbps\n        4: 6.0 Gbps\n        5: 12.0 Gbps\n        6: 5 GT/s (applicable for NVMe devices).\n        7: 8 GT/s (applicable for NVMe devices).\n        ')
physicalDiskCapableSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("oneDotFiveGbps", 2), ("threeGbps", 3), ("sixGbps", 4), ("twelveGbps", 5), ("fiveGTps", 6), ("eightGTps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskCapableSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskCapableSpeed.setDescription('The maximum data transfer speed supported by the disk \n        in Gigbits per second (Gbps).\n        Possible values:\n        1: The speed could not be determined.\n        2. 1.5 Gbps\n        3: 3.0 Gbps\n        4: 6.0 Gbps\n        5: 12.0 Gbps\n        6: 5 GT/s (applicable for NVMe devices).\n        7: 8 GT/s (applicable for NVMe devices).\n        ')
physicalDiskSmartAlertIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 31), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskSmartAlertIndication.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskSmartAlertIndication.setDescription('Indicates whether the physical disk has received a predictive \n        failure alert.\n        ')
physicalDiskManufactureDay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskManufactureDay.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskManufactureDay.setDescription('The day of the week (1=Sunday thru 7=Saturday) \n        on which the physical disk was manufactured.\n        ')
physicalDiskManufactureWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskManufactureWeek.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskManufactureWeek.setDescription('The week (1 thru 53) in which the physical disk \n        was manufactured.\n        ')
physicalDiskManufactureYear = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskManufactureYear.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskManufactureYear.setDescription('The four digit year in which the physical disk was manufactured.\n        ')
physicalDiskMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("hdd", 2), ("ssd", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskMediaType.setDescription('The media type of the physical disk.\n        Possible Values:\n        1: The media type could not be determined.\n        2: Hard Disk Drive (HDD).\n        3: Solid State Device (SSD).\n        ')
physicalDiskPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("spunUp", 2), ("spunDown", 3), ("transition", 4), ("on", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskPowerState.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskPowerState.setDescription('The power state of the physical disk.\n        Possible Values:\n        1: Not one of the following.\n        2: The physical disk is in the spun up state.\n        3: The physical disk is in the spun down state.\n        4: The physical disk is changing from spun down state\n        to spun up state or vice versa.\n        5: The Solid State Device (SSD) is powered on.\n        ')
physicalDiskRemainingRatedWriteEndurance = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskRemainingRatedWriteEndurance.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskRemainingRatedWriteEndurance.setDescription('This property is applicable to SSD media type only. This indicates \n        the wear-out percentage of the SSD. Typically it is a value between \n        0 to 100. However, if the value is not available or not applicable \n        (in the case of HDD media type) the value will be 255.\n        ')
physicalDiskOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("rebuild", 2), ("clear", 3), ("copyback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskOperationalState.setDescription('The state of the physical disk when there are progressive\n        operations ongoing.\n        Possible values:\n        1: There is no active operation running.\n        2: Data from a redundant virtual disk is \n        currently being rebuilt onto the physical disk.\n        3: Data on the disk is being erased.\n        4: Data is being copied from a hot spare disk to \n        the physical disk or vice versa.\n         ')
physicalDiskProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskProgress.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskProgress.setDescription('The progress percentage of the operation that is being \n        performed on the physical disk. This is applicable \n        only if there is a progressive operations ongoing\n        ')
physicalDiskSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2), ("secured", 3), ("locked", 4), ("foreign", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskSecurityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskSecurityStatus.setDescription('The security/encryption status of the physical disk.\n        Possible Values:\n        1: The physical disk supports encryption.\n        2: The physical disk does not support encryption\n        3: The physical disk is encrypted.\n        4: The physical disk is locked by a key.\n        5: The physical disk is locked by a foreign key.\n        ')
physicalDiskFormFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("oneDotEight", 2), ("twoDotFive", 3), ("threeDotFive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskFormFactor.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskFormFactor.setDescription('The form factor of the physical disk.\n        Possible values:\n        1: The form factor could not be determined.\n        2: 1.8 inch.\n        3: 2.5 inch.\n        4: 3.5 inch.\n        ')
physicalDiskFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 54), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskFQDD.setDescription("The physical disk's Fully Qualified Device Descriptor (FQDD) \n        as represented in Storage Management.\n        ")
physicalDiskDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskDisplayName.setDescription("The physical disk's friendly FQDD as represented in Storage \n        Management.\n        ")
physicalDiskT10PICapability = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("capable", 2), ("notCapable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskT10PICapability.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskT10PICapability.setDescription('Indicates whether the physical disk supports the T10 PI (Protection \n        Information). These protection fields are known as DIF \n        (Data Integrity Fields).\n        Possible values:\n        1: Not one of the following.\n        2: Capable of supporting T10 PI.\n        3: Not capable of supporting T10 PI.\n        ')
physicalDiskBlockSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskBlockSizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskBlockSizeInBytes.setDescription('The block size (in bytes) of the physical disk. This is not \n        applicable for NVMe devices.\n        Possible values:\n        1: 512.\n        2: 4096\n        ')
physicalDiskProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 59), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskProtocolVersion.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskProtocolVersion.setDescription('Applicable for NVMe devices only. The NVMe protocol version supported \n        by the device.\n        ')
physicalDiskPCIeNegotiatedLinkWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("notApplicable", 2), ("byOne", 3), ("byTwp", 4), ("byFour", 5), ("byEight", 6), ("bySixteen", 7), ("byThirtyTwp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskPCIeNegotiatedLinkWidth.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskPCIeNegotiatedLinkWidth.setDescription('Applicable for NVMe devices  only. The PCIe link width negotiated with the host\n        during device initialization.\n        ')
physicalDiskPCIeCapableLinkWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("notApplicable", 2), ("byOne", 3), ("byTwp", 4), ("byFour", 5), ("byEight", 6), ("bySixteen", 7), ("byThirtyTwp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskPCIeCapableLinkWidth.setStatus('mandatory')
if mibBuilder.loadTexts: physicalDiskPCIeCapableLinkWidth.setDescription('Applicable for NVMe devices only. The PCIe link widths the device is capable of \n        supporting.\n        ')
virtualDiskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1), )
if mibBuilder.loadTexts: virtualDiskTable.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskTable.setDescription('A table of managed virtual disks. The number of entries is related\n        to number of virtual disks discovered in the system. \n        The maximum number of entries is implementation dependent.\n        Note: The properties in this table may not be applicable to all\n        entries.\n        ')
virtualDiskTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1), ).setIndexNames((0, "IDRAC-MIB", "virtualDiskNumber"))
if mibBuilder.loadTexts: virtualDiskTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskTableEntry.setDescription('An entry in the virtual disk table. A row in this table cannot be\n        created or deleted by SNMP operations on columns of the table.\n        ')
virtualDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskNumber.setDescription('Instance number of this virtual disk entry.\n        ')
virtualDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskName.setDescription("The virtual disk's label as entered by the user.\n        ")
virtualDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("online", 2), ("failed", 3), ("degraded", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskState.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskState.setDescription('The current state of this virtual disk\n        (which includes any member physical disks.)\n        Possible states:\n        1: The current state could not be determined.\n        2: The virtual disk is operating normally or optimally.\n        3: The virtual disk has encountered a failure. The data on disk \n        is lost or is about to be lost.\n        4: The virtual disk encounterd a failure with one or all of the \n        constituent redundant physical disks. The data on the virtual \n        disk might no longer be fault tolerant.\n        ')
virtualDiskSizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskSizeInMB.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskSizeInMB.setDescription('The size of the virtual disk in megabytes.\n        ')
virtualDiskWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("writeThrough", 1), ("writeBack", 2), ("writeBackForce", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskWritePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskWritePolicy.setDescription('The write policy used by the controller for write operations on \n        this virtual disk.\n        Possible values:\n        1: Write Through.\n        2: Write Back.\n        3: Force Write Back.\n        ')
virtualDiskReadPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noReadAhead", 1), ("readAhead", 2), ("adaptiveReadAhead", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskReadPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskReadPolicy.setDescription('The read policy used by the controller for read operations on \n        this virtual disk.\n        Possible values:\n        1: No Read Ahead.\n        2: Read Ahead.\n        3: Adaptive Read Ahead.\n        ')
virtualDiskLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("r0", 2), ("r1", 3), ("r5", 4), ("r6", 5), ("r10", 6), ("r50", 7), ("r60", 8), ("concatRaid1", 9), ("concatRaid5", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskLayout.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskLayout.setDescription("The virtual disk's RAID type.\n         Possible values:\n         1: Not one of the following\n         2: RAID-0\n         3: RAID-1\n         4: RAID-5\n         5: RAID-6\n         6: RAID-10\n         7: RAID-50\n         8: RAID-60\n         9: Concatenated RAID 1\n        10: Concatenated RAID 5\n        ")
virtualDiskStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("other", 1), ("default", 2), ("fiveHundredAndTwelvebytes", 3), ("oneKilobytes", 4), ("twoKilobytes", 5), ("fourKilobytes", 6), ("eightKilobytes", 7), ("sixteenKilobytes", 8), ("thirtyTwoKilobytes", 9), ("sixtyFourKilobytes", 10), ("oneTwentyEightKilobytes", 11), ("twoFiftySixKilobytes", 12), ("fiveOneTwoKilobytes", 13), ("oneMegabye", 14), ("twoMegabytes", 15), ("fourMegabytes", 16), ("eightMegabytes", 17), ("sixteenMegabytes", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskStripeSize.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskStripeSize.setDescription('The stripe size of this virtual disk.\n        Possible values:\n        1: Not one of the following\n        2: Default.\n        3: 512 bytes\n        4: 1 kB,\n        5: 2 kB,\n        6: 4 kB,\n        7: 8 kB,\n        8: 16 kB,\n        9: 32 kB,\n        10: 64 kB,\n        11: 128 kB,\n        12: 256 kB,\n        13: 512 kB,\n        14: 1 MB,\n        15: 2 MB,\n        16: 4 MB,\n        17: 8 MB,\n        18: 16 MB\n        ')
virtualDiskComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 20), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskComponentStatus.setDescription('The status of the virtual disk itself without the \n        propagation of any contained component status.\n        Possible values:\n        1: Other.\n        2: Unknown.\n        3: OK.\n        4: Non-critical .\n        5: Critical.\n        6: Non-recoverable.\n        ')
virtualDiskBadBlocksDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 23), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskBadBlocksDetected.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskBadBlocksDetected.setDescription('Indicates whether the virtual disk has bad blocks.\n        ')
virtualDiskSecured = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 24), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskSecured.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskSecured.setDescription('Indicates whether the virtual disk is secured or not.\n        ')
virtualDiskIsCacheCade = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 25), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskIsCacheCade.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskIsCacheCade.setDescription('Indicates whether the virtual disk is being used as a secondary \n        cache by the controller.\n        ')
virtualDiskDiskCachePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("defullt", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskDiskCachePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskDiskCachePolicy.setDescription('The cache policy of the physical disks that are \n        part of this virtual disk \n        Possible values:\n        1: Enabled.\n        2: Disabled.\n        3: Default.\n        ')
virtualDiskOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("reconstructing", 2), ("resynching", 3), ("initializing", 4), ("backgroundInit", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskOperationalState.setDescription('The state of the virtual disk when there are progressive\n        operations ongoing.\n        Possible values:\n        1: There is no active operation running.\n        2: The virtual disk configuration has changed.\n        The physical disks included in the virtual disk are being \n        modified to support the new configuration.\n        3: A Consistency Check (CC) is being performed \n        on the virtual disk.\n        4: The virtual disk is being initialized.\n        5: BackGround Initialization (BGI) is being performed \n        on the virtual disk.\n        ')
virtualDiskProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskProgress.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskProgress.setDescription('The progress percentage of the operation that is being \n        performed on the virtual disk. This is applicable \n        only if there is a progressive operations ongoing\n        ')
virtualDiskAvailableProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskAvailableProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskAvailableProtocols.setDescription('List of protocols support by physical disks part of this virtual\n        disk. For e.g. SAS for Serial Attached SCSI or SATA for \n        Serial Advanced Technology Attachment.\n        ')
virtualDiskMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskMediaType.setDescription('List of media types of the physical disks part of this virtual\n        disk. For e.g. HDD for Hard Disk Drive or SSD for Solid State Device.\n        ')
virtualDiskRemainingRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskRemainingRedundancy.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskRemainingRedundancy.setDescription('The number of physical disks which can be lost before the\n        virtual disk loses its redundancy.\n        ')
virtualDiskFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 35), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskFQDD.setDescription("The virtual disk's Fully Qualified Device Descriptor (FQDD) as \n        represented in Storage Management.\n        ")
virtualDiskDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskDisplayName.setDescription("The virtual disk's friendly FQDD as represented in Storage \n        Management.\n        ")
virtualDiskT10PIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskT10PIStatus.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskT10PIStatus.setDescription('Indicates whether the virtual disk supports the T10 PI (Protection \n        Information). These protection fields are known as DIF \n        (Data Integrity Fields).\n        Possible values:\n        1: Not one of the following.\n        2: Enabled.\n        3: Disabled.\n        ')
virtualDiskBlockSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskBlockSizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskBlockSizeInBytes.setDescription('The block size (in bytes) of the physical disk part of the virtual disk.\n        Possible values:\n        1: 512.\n        2: 4096\n        ')
enclosureTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3), )
if mibBuilder.loadTexts: enclosureTable.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTable.setDescription('A table of managed enclosures/backplanes. The number of entries is \n        related to number of internal backplane(s) discovered in the system \n        and external storage enclosure(s) attached to the system..\n        The maximum number of entries is implementation dependent.\n        Note: The properties in this table may not be applicable to all \n        entries.\n        ')
enclosureTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1), ).setIndexNames((0, "IDRAC-MIB", "enclosureNumber"))
if mibBuilder.loadTexts: enclosureTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTableEntry.setDescription('An entry in the enclosure table. A row in this table cannot be\n        created or deleted by SNMP operations on columns of the table.\n        ')
enclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureNumber.setDescription('Instance number of this enclossre/backplane.\n        ')
enclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureName.setDescription("The enclosure/backplane's name as represented in Storage Management.\n        ")
enclosureState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("missing", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureState.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureState.setDescription('The current state of this enclosure/backplane.\n        Possible states:\n        1: The current state could not be determined.\n        2: The enclosure is operating normally.\n        3: The enclosure has encountered a hardware problem or is not \n        responding.\n        4: The enclosure is no longer connected to the controller or \n        there exists a problem communicating to the enclosure.\n        5: The enclosure is unstable.\n        ')
enclosureServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureServiceTag.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureServiceTag.setDescription('Enclosure identification used when consulting customer support.\n        ')
enclosureAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAssetTag.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureAssetTag.setDescription('The asset tag information for the enclosure.')
enclosureConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureConnectedPort.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureConnectedPort.setDescription('The port on the controller to which the \n        storage enclosure is connected.\n        ')
enclosureRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 23), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureRollUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureRollUpStatus.setDescription('Severity of the enclosure/backplane state.\n        This is the combined status of the enclosure and its sub-components.\n        Possible values:\n        1: Other.\n        2: Unknown.\n        3: OK.\n        4: Non-critical.\n        5: Critical.\n        6: Non-recoverable.\n        ')
enclosureComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 24), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureComponentStatus.setDescription('The status of the enclosure/backplane.itself without the \n        propagation of any contained component status.\n        Possible values:\n        1: Other.\n        2: Unknown.\n        3: OK.\n        4: Non-critical .\n        5: Critical.\n        6: Non-recoverable.\n        ')
enclosureFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureFirmwareVersion.setDescription('The firmware information for the enclosure/backplane.\n        ')
enclosureSASAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSASAddress.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureSASAddress.setDescription('The SAS address of the enclosure/backplane.\n        ')
enclosureDriveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureDriveCount.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureDriveCount.setDescription('The number of disks present in the enclosure/backplane.\n        ')
enclosureTotalSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTotalSlots.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTotalSlots.setDescription('The total physical drive slots in a storage enclosure \n        or server backplane.\n        ')
enclosureFanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanCount.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureFanCount.setDescription('The number of fans present in the storage enclosure.\n        ')
enclosurePSUCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePSUCount.setStatus('mandatory')
if mibBuilder.loadTexts: enclosurePSUCount.setDescription('The number of Power Supply Units (PSU) present \n        in the storage enclosure.\n        ')
enclosureEMMCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureEMMCount.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureEMMCount.setDescription('The number of Enclosure Management Modules (EMM) \n        present in the storage enclosure.\n        ')
enclosureTempProbeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTempProbeCount.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTempProbeCount.setDescription('The number of temperature sensing devices \n        present in the storage enclosure.\n        ')
enclosureRedundantPath = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureRedundantPath.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureRedundantPath.setDescription('Indicates whether the controller has multiply paths to \n        reach the storage enclosure.\n        ')
enclosurePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePosition.setStatus('mandatory')
if mibBuilder.loadTexts: enclosurePosition.setDescription('The possition of the storage enclosure within a daisy chain.\n         ')
enclosureBackplaneBayID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureBackplaneBayID.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureBackplaneBayID.setDescription('The unique bay ID of the backplane.\n        ')
enclosureFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 47), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureFQDD.setDescription("The enclosure/backplane's Fully Qualified Device Descriptor (FQDD) \n        as represented in Storage Management.\n        ")
enclosureDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureDisplayName.setDescription("The enclosure/backplane's friendly FQDD as represented in \n        Storage Management.\n        ")
enclosureType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notApplicable", 2), ("sassata", 3), ("pcie", 4), ("universal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureType.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureType.setDescription('The protocol supported by the backplane.\n        Possible states:\n        1: Not one of the following or could not be determined.\n        2: Not applicable (i.e. object is not a backplane).\n        3: Supports SAS/SATA.\n        4: Supports PCIe.\n        5: Both SAS/SATA and PCIe.\n        ')
enclosureManagementModuleTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13), )
if mibBuilder.loadTexts: enclosureManagementModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleTable.setDescription('A table of managed Enclosure Management Modules (EMM) \n        in the external storage enclosure(s). The number of \n        entries is related to number of enclosure management modules\n        discovered in the enclosure(s). The maximum number of entries \n        is implementation dependent.\n        Note: The properties in this table may not be applicable to all \n        entries.\n        ')
enclosureManagementModuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1), ).setIndexNames((0, "IDRAC-MIB", "enclosureManagementModuleNumber"))
if mibBuilder.loadTexts: enclosureManagementModuleTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleTableEntry.setDescription('An entry in the enclosure management module table. A row in \n        this table cannot be created or deleted by SNMP operations \n        on columns of the table.\n        ')
enclosureManagementModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleNumber.setDescription('Instance number of this enclosure management module.\n        ')
enclosureManagementModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleName.setDescription("The enclosure management module's name as \n        represented in Storage Management.\n        ")
enclosureManagementModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("missing", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleState.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleState.setDescription('The current state of this enclosure management module.\n        Possible states:\n        1: The current state could not be determined.\n        2: The enclosure management module is operating normally.\n        3: The enclosure management module has encountered a \n        hardware problem or is not responding.\n        4: The enclosure management module is no longer connected\n        to the enclosure or there exists a problem communicating to it.\n        5: The enclosure management module is unstable.\n        ')
enclosureManagementModulePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModulePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModulePartNumber.setDescription('The part number of the enclosure management module.\n        ')
enclosureManagementModuleFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleFWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleFWVersion.setDescription('Firmware version of the enclosure management module.\n        ')
enclosureManagementModuleComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 11), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleComponentStatus.setDescription('The status of the enclosure management module.itself without the \n        propagation of any contained component status.\n        Possible values:\n        1: Other.\n        2: Unknown.\n        3: OK.\n        4: Non-critical .\n        5: Critical.\n        6: Non-recoverable.\n        ')
enclosureManagementModuleFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 15), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleFQDD.setDescription("The enclosure management module's Fully Qualified Device \n        Descriptor (FQDD) as represented in Storage Management.\n        ")
enclosureManagementModuleDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleDisplayName.setDescription("The enclosure management module's friendly FQDD as represented in \n        Storage Management.\n        ")
enclosureFanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7), )
if mibBuilder.loadTexts: enclosureFanTable.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureFanTable.setDescription('A table of managed fans in the external storage enclosure(s). \n        The number of entries is related to number of fans discovered in \n        the enclosure(s). The maximum number of entries is implementation \n        dependent.\n        Note: The properties in this table may not be applicable to all \n        entries.\n        ')
enclosureFanTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1), ).setIndexNames((0, "IDRAC-MIB", "enclosureFanNumber"))
if mibBuilder.loadTexts: enclosureFanTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureFanTableEntry.setDescription('An entry in the fan table. A row in this table cannot be\n        created or deleted by SNMP operations on columns of the table.\n        ')
enclosureFanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureFanNumber.setDescription('Instance number of this fan.\n        ')
enclosureFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureFanName.setDescription("The fan's name as represented in Storage Management.\n        ")
enclosureFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("missing", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanState.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureFanState.setDescription('The current state of this fan.\n        Possible states:\n        1: The current state could not be determined.\n        2: The fan is operating normally.\n        3: The fan has encountered a hardware problem or is not \n        responding.\n        4: The fan is no longer connected to the enclosure or \n        there exists a problem communicating to it.\n        5: The fan is unstable.\n        ')
enclosureFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("slow", 3), ("medium", 4), ("fast", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureFanSpeed.setDescription('Indicates the current relative speed of the fan.\n        ')
enclosureFanComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 15), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureFanComponentStatus.setDescription('The status of the fan itself without the \n        propagation of any contained component status.\n        Possible values:\n        1: Other.\n        2: Unknown.\n        3: OK.\n        4: Non-critical .\n        5: Critical.\n        6: Non-recoverable.\n        ')
enclosureFanFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 20), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureFanFQDD.setDescription("The fan's Fully Qualified Device Descriptor (FQDD) \n        as represented in Storage Management.\n        ")
enclosureFanDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureFanDisplayName.setDescription("The fan's friendly FQDD as represented in \n        Storage Management.\n        ")
enclosurePowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9), )
if mibBuilder.loadTexts: enclosurePowerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: enclosurePowerSupplyTable.setDescription('A table of managed Power Supply Units(PSU) in the external \n        storage enclosure(s). The number of entries is related to number \n        of power supply unit(s) discovered in the enclosure(s). The \n        maximum number of entries is implementation \n        dependent.\n        Note: The properties in this table may not be applicable to all \n        entries.\n        ')
enclosurePowerSupplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1), ).setIndexNames((0, "IDRAC-MIB", "enclosurePowerSupplyNumber"))
if mibBuilder.loadTexts: enclosurePowerSupplyTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: enclosurePowerSupplyTableEntry.setDescription('An entry in the power supply unit table. A row in this table cannot \n        be created or deleted by SNMP operations on columns of the table.\n        ')
enclosurePowerSupplyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosurePowerSupplyNumber.setDescription('Instance number of this power supply unit.\n        ')
enclosurePowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosurePowerSupplyName.setDescription("The power supply unit's name as represented in \n        Storage Management.\n        ")
enclosurePowerSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("missing", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyState.setStatus('mandatory')
if mibBuilder.loadTexts: enclosurePowerSupplyState.setDescription('The current state of this power supply unit.\n        Possible states:\n        1: The current state could not be determined.\n        2: The power supply unit is operating normally.\n        3: The power supply unit has encountered a hardware problem \n        or is not responding.\n        4: The power supply unit is no longer connected to the enclosure \n        or there exists a problem communicating to it.\n        5: The power supply unit is unstable.\n        ')
enclosurePowerSupplyPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosurePowerSupplyPartNumber.setDescription('The part number of the power supply unit. \n        ')
enclosurePowerSupplyComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 9), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: enclosurePowerSupplyComponentStatus.setDescription('The status of the power supply unit itself without the \n        propagation of any contained component status.\n        Possible values:\n        1: Other.\n        2: Unknown.\n        3: OK.\n        4: Non-critical .\n        5: Critical.\n        6: Non-recoverable.\n        ')
enclosurePowerSupplyFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 15), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: enclosurePowerSupplyFQDD.setDescription("The power supply unit's Fully Qualified Device Descriptor (FQDD)\n        as represented in Storage Management.\n        ")
enclosurePowerSupplyDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosurePowerSupplyDisplayName.setDescription("The power supply unit's friendly FQDD as represented in \n        Storage Management.\n        ")
enclosureTemperatureProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11), )
if mibBuilder.loadTexts: enclosureTemperatureProbeTable.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTemperatureProbeTable.setDescription('A table of managed temperature probes in the external storage\n        enclosure(s). The number of entries is related to number of \n        temperature probes discovered in the enclosure(s). The maximum \n        number of entries is implementation dependent.\n        Note: The properties in this table may not be applicable to all \n        entries.\n        ')
enclosureTemperatureProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1), ).setIndexNames((0, "IDRAC-MIB", "enclosureTemperatureProbeNumber"))
if mibBuilder.loadTexts: enclosureTemperatureProbeTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTemperatureProbeTableEntry.setDescription('An entry in the temperature probe table. A row in this table cannot be\n        created or deleted by SNMP operations on columns of the table.\n        ')
enclosureTemperatureProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTemperatureProbeNumber.setDescription('Instance number of this temperature probe.\n        ')
enclosureTemperatureProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTemperatureProbeName.setDescription("The temperature probe's name as represented in \n        Storage Management.\n        ")
enclosureTemperatureProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("missing", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeState.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTemperatureProbeState.setDescription('The current state of this temperature probe.\n        Possible states:\n        1: The current state could not be determined.\n        2: The temperature probe is operating normally.\n        3: The temperature probe has encountered a hardware problem \n        or is not responding.\n        4: The temperature probe is no longer connected to the enclosure \n        or there exists a problem communicating to it.\n        5: The temperature probe is unstable.\n        ')
enclosureTemperatureProbeMinWarningValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeMinWarningValue.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTemperatureProbeMinWarningValue.setDescription('The minimum temperature that will force the probe into\n        a warning state.\n        ')
enclosureTemperatureProbeMinCriticalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeMinCriticalValue.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTemperatureProbeMinCriticalValue.setDescription('The minimum temperature that will force the probe into\n        a error state.\n        ')
enclosureTemperatureProbeMaxWarningValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeMaxWarningValue.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTemperatureProbeMaxWarningValue.setDescription('The maximum temperature that will force the probe into\n        a warning state.\n        ')
enclosureTemperatureProbeMaxCriticalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeMaxCriticalValue.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTemperatureProbeMaxCriticalValue.setDescription('The maximum temperature that will force the probe into\n        a warning state.\n        ')
enclosureTemperatureProbeCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeCurValue.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTemperatureProbeCurValue.setDescription('The maximum temperature that will force the probe into\n        a warning state.\n        ')
enclosureTemperatureProbeComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 13), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeComponentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTemperatureProbeComponentStatus.setDescription('The status of the enclosure management module.itself without the \n        propagation of any contained component status.\n        Possible values:\n        1: Other.\n        2: Unknown.\n        3: OK.\n        4: Non-critical .\n        5: Critical.\n        6: Non-recoverable.\n        ')
enclosureTemperatureProbeFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 15), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeFQDD.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTemperatureProbeFQDD.setDescription("The temperature probe's Fully Qualified Device Descriptor (FQDD)\n        as represented in Storage Management.\n        ")
enclosureTemperatureProbeDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureTemperatureProbeDisplayName.setDescription("The temperature probe's friendly FQDD as represented \n        in Storage Management.\n        ")
alertAmperageProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2179)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertAmperageProbeNormal.setDescription('Current sensor reading is within range.')
alertAmperageProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2178)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertAmperageProbeWarning.setDescription('Current sensor has detected a warning value.')
alertAmperageProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2177)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertAmperageProbeFailure.setDescription('Current sensor has detected a failure value.')
alertAutomaticSystemRecovery = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2233)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertAutomaticSystemRecovery.setDescription('Automatic system recovery (ASR) was performed.')
alertBatteryNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2227)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertBatteryNormal.setDescription('Battery state has returned to normal;\n         or battery presence had been detected.')
alertBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2226)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertBatteryWarning.setDescription('Battery is low.')
alertBatteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2225)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertBatteryFailure.setDescription('Battery has failed or battery is absent.')
alertCableFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2393)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertCableFailure.setDescription('Cable failure or critical event.')
alertCMCWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2546)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertCMCWarning.setDescription('Chassis Management Controller detected a warning.')
alertCMCFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2545)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertCMCFailure.setDescription('Chassis Management Controller detected an error.')
alertProcessorDeviceStatusNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2243)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertProcessorDeviceStatusNormal.setDescription('Processor device status has returned to normal.')
alertProcessorDeviceStatusWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2242)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertProcessorDeviceStatusWarning.setDescription('Processor device status has detected a warning.')
alertProcessorDeviceStatusFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2241)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertProcessorDeviceStatusFailure.setDescription('Processor device status has detected a failure.')
alertProcessorDeviceAbsent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2457)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertProcessorDeviceAbsent.setDescription('Processor device is absent.')
alertFanInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2155)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertFanInformation.setDescription('Fan information.')
alertFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2154)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertFanWarning.setDescription('Fan warning.')
alertFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2153)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertFanFailure.setDescription('Fan failure.')
alertFiberChannelInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2539)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertFiberChannelInformation.setDescription('Fiber Channel information.')
alertFiberChannelWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2538)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertFiberChannelWarning.setDescription('Fiber Channel warning.')
alertFiberChannelFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2537)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertFiberChannelFailure.setDescription('Fiber Channel failure or critical event.')
alertHardwareConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2331)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertHardwareConfigurationInformation.setDescription('Hardware configuration information.')
alertHardwareConfigurationWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2330)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertHardwareConfigurationWarning.setDescription('Hardware configuration warning.')
alertHardwareConfigurationFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2329)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertHardwareConfigurationFailure.setDescription('Hardware configuration failure or critical event.')
alertIOVirtualizationFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2553)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIOVirtualizationFailure.setDescription('IO Virtualization failure or critical event.')
alertLinkStatusInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2251)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertLinkStatusInformation.setDescription('Link status information.')
alertLinkStatusWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2250)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertLinkStatusWarning.setDescription('Link status warning.')
alertLinkStatusFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2249)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertLinkStatusFailure.setDescription('Link status failure or critical event.')
alertMemoryDeviceInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2267)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertMemoryDeviceInformation.setDescription('Memory device informational event.')
alertMemoryDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2266)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertMemoryDeviceWarning.setDescription('Memory device status is noncritical.')
alertMemoryDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2265)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertMemoryDeviceFailure.setDescription('Memory device status is critical.')
alertNetworkInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2091)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertNetworkInformation.setDescription('Network information.')
alertNetworkWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2090)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertNetworkWarning.setDescription('Network warning.')
alertNetworkFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2089)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertNetworkFailure.setDescription('Network failure or critical event.')
alertOSInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2411)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertOSInformation.setDescription('An OS graceful stop occurred;\n         or an OS graceful shut-down occurred.')
alertOSFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2409)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertOSFailure.setDescription('A critical stop occurred during OS load;\n         or a runtime critical stop occurred.')
alertPCIDeviceInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2419)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPCIDeviceInformation.setDescription('An informational event was detected for a PCI device.')
alertPCIDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2418)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPCIDeviceWarning.setDescription('A warning event was detected for a PCI device.')
alertPCIDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2417)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPCIDeviceFailure.setDescription('An error was detected for a PCI device.')
alertPhysicalDiskInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2299)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPhysicalDiskInformation.setDescription('Physical disk information.')
alertPhysicalDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2298)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPhysicalDiskWarning.setDescription('Physical disk warning.')
alertPhysicalDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2297)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPhysicalDiskFailure.setDescription('Physical disk failure.')
alertBiosPostFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2425)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertBiosPostFailure.setDescription('System BIOS detected a failure.')
alertPowerSupplyNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2187)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerSupplyNormal.setDescription('Power supply has returned to normal.')
alertPowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2186)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerSupplyWarning.setDescription('Power supply has detected a warning.')
alertPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2185)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerSupplyFailure.setDescription('Power supply has detected a failure.')
alertPowerSupplyAbsent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2465)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerSupplyAbsent.setDescription('Power supply is absent.')
alertPowerUsageInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2275)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerUsageInformation.setDescription('System performance restored.')
alertPowerUsageWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2274)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerUsageWarning.setDescription('System performance degraded.')
alertPowerUsageFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2273)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerUsageFailure.setDescription('The system halted because system power exceeds capacity;\n         or the system performance degraded because power draw exceeds the\n         power threshold.')
alertRedundancyInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2475)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertRedundancyInformation.setDescription('Redundancy information.')
alertRedundancyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2474)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertRedundancyDegraded.setDescription('Redundancy is degraded.')
alertRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2473)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertRedundancyLost.setDescription('Redundancy is lost.')
alertIntegratedDualSDModuleInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2211)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIntegratedDualSDModuleInformation.setDescription('Integrated Dual SD Module information.')
alertIntegratedDualSDModuleWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2210)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIntegratedDualSDModuleWarning.setDescription('Integrated Dual SD Module warning.')
alertIntegratedDualSDModuleFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2209)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIntegratedDualSDModuleFailure.setDescription('Integrated Dual SD Module failure.')
alertIntegratedDualSDModuleAbsent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2481)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIntegratedDualSDModuleAbsent.setDescription('Integrated Dual SD Module is absent.')
alertIntegratedDualSDModuleRedundancyInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2491)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIntegratedDualSDModuleRedundancyInformation.setDescription('Integrated Dual SD Module redundancy information.')
alertIntegratedDualSDModuleRedundancyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2490)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIntegratedDualSDModuleRedundancyDegraded.setDescription('Integrated Dual SD Module redundancy is degraded.')
alertIntegratedDualSDModuleRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2489)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIntegratedDualSDModuleRedundancyLost.setDescription('Integrated Dual SD Module redundancy is lost.')
alertSecurityInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2387)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSecurityInformation.setDescription('Security information.')
alertSecurityWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2386)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSecurityWarning.setDescription('Security warning.')
alertSecurityFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2385)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSecurityFailure.setDescription('Security failure or critical event.')
alertSystemEventLogInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2379)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSystemEventLogInformation.setDescription('System Event Log information.')
alertSystemEventLogWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2378)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSystemEventLogWarning.setDescription('System Event Log warning.')
alertSystemEventLogFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2377)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSystemEventLogFailure.setDescription('System Event Log failure or critical event.')
alertSoftwareConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2339)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSoftwareConfigurationInformation.setDescription('Software configuration information.')
alertSoftwareConfigurationWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2338)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSoftwareConfigurationWarning.setDescription('Software configuration warning.')
alertSoftwareConfigurationFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2337)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSoftwareConfigurationFailure.setDescription('Software configuration failure.')
alertTemperatureProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2163)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertTemperatureProbeNormal.setDescription('Temperature sensor value is within range.')
alertTemperatureProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2162)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertTemperatureProbeWarning.setDescription('Temperature sensor has detected a warning value.')
alertTemperatureProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2161)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertTemperatureProbeFailure.setDescription('Temperature sensor has detected a failure value.')
alertTemperatureStatisticsWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2522)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertTemperatureStatisticsWarning.setDescription('Temperature has been above the warning or critical threshold level\n         for a long enough period of time to be considered in a warning state.')
alertTemperatureStatisticsFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2521)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertTemperatureStatisticsFailure.setDescription('Temperature has been above the warning or critical threshold level\n         for a long enough period of time to be considered in a critical state.')
alertvFlashMediaDeviceInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2507)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertvFlashMediaDeviceInformation.setDescription('vFlash Media device information.')
alertvFlashMediaDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2506)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertvFlashMediaDeviceWarning.setDescription('vFlash Media device warning.')
alertvFlashMediaDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2505)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertvFlashMediaDeviceFailure.setDescription('vFlash Media device failure.')
alertvFlashMediaDeviceAbsent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2515)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertvFlashMediaDeviceAbsent.setDescription('vFlash Media device is absent.')
alertVoltageProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2171)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertVoltageProbeNormal.setDescription('Voltage sensor reading is within range.')
alertVoltageProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2170)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertVoltageProbeWarning.setDescription('Voltage sensor has detected a warning value.')
alertVoltageProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2169)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertVoltageProbeFailure.setDescription('Voltage sensor has detected a failure value.')
alertRACInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2531)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertRACInformation.setDescription('RAC information.')
alertSystemPerformanceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1) + (0,2650)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSystemPerformanceWarning.setDescription('System Performance warning.')
alertStorageBatteryInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4275)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageBatteryInformation.setDescription('Battery information.')
alertStorageBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4274)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageBatteryWarning.setDescription('Battery warning.')
alertStorageBatteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4273)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageBatteryFailure.setDescription('Battery failure.')
alertStorageControllerInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4331)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageControllerInformation.setDescription('Controller information.')
alertStorageControllerWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4330)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageControllerWarning.setDescription('Controller warning.')
alertStorageControllerFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4329)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageControllerFailure.setDescription('Controller failure.')
alertStorageEnclosureInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4339)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageEnclosureInformation.setDescription('Enclosure information.')
alertStorageEnclosureWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4338)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageEnclosureWarning.setDescription('Enclosure warning.')
alertStorageEnclosureFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4337)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageEnclosureFailure.setDescription('Enclosure failure.')
alertStorageFanInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4203)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageFanInformation.setDescription('Fan information.')
alertStorageFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4202)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageFanWarning.setDescription('Fan warning.')
alertStorageFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4201)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageFanFailure.setDescription('Fan failure.')
alertStoragePhysicalDiskInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4347)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStoragePhysicalDiskInformation.setDescription('Physical disk information.')
alertStoragePhysicalDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4346)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStoragePhysicalDiskWarning.setDescription('Physical disk warning.')
alertStoragePhysicalDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4345)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStoragePhysicalDiskFailure.setDescription('Physical disk failure.')
alertStoragePowerSupplyInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4235)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStoragePowerSupplyInformation.setDescription('Power supply information.')
alertStoragePowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4234)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStoragePowerSupplyWarning.setDescription('Power supply warning.')
alertStoragePowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4233)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStoragePowerSupplyFailure.setDescription('Power supply failure.')
alertStorageSecurityInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4435)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageSecurityInformation.setDescription('Storage Security information.')
alertStorageSecurityWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4434)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageSecurityWarning.setDescription('Storage Security warning.')
alertStorageSecurityFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4433)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageSecurityFailure.setDescription('Storage Security failure or critical event.')
alertStorageManagementInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4179)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageManagementInformation.setDescription('Storage Management Information.\n        There is no global status change associated with this trap.')
alertStorageManagementWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4178)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageManagementWarning.setDescription('Storage Management has detected a device independent warning\n        condition. There is no global status change associated with this\n        trap.')
alertStorageManagementFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4177)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageManagementFailure.setDescription('Storage Management has detected a device independent error condition.\n        There is no global status change associated with this trap.')
alertStorageTemperatureProbeInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4211)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageTemperatureProbeInformation.setDescription('Temperature probe information.')
alertStorageTemperatureProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4210)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageTemperatureProbeWarning.setDescription('Temperature probe warning.')
alertStorageTemperatureProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4209)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageTemperatureProbeFailure.setDescription('Temperature probe failure.')
alertStorageVirtualDiskInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4355)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageVirtualDiskInformation.setDescription('Virtual disk information.')
alertStorageVirtualDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4354)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageVirtualDiskWarning.setDescription('Virtual disk warning.')
alertStorageVirtualDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2) + (0,4353)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageVirtualDiskFailure.setDescription('Virtual disk failure.')
alertUpdateJobInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 3) + (0,6211)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertUpdateJobInformation.setDescription('Update job information')
alertSoftwareChangeUpdateWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 3) + (0,6314)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSoftwareChangeUpdateWarning.setDescription('Software change update warning.')
alertCMCAuditInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8691)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertCMCAuditInformation.setDescription('Chassis Management Controller audit information.')
alertCMCAuditWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8690)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertCMCAuditWarning.setDescription('Chassis Management Controller audit warning.')
alertCMCAuditFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8689)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertCMCAuditFailure.setDescription('Chassis Management Controller audit failure or critical event.')
alertDebugInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8595)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertDebugInformation.setDescription('Debug authorized.')
alertDebugWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8594)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertDebugWarning.setDescription('Debug authorization failed.')
alertiDRACIPAddressChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8499)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertiDRACIPAddressChange.setDescription('iDRAC IP address has changed.')
alertLicenseInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8515)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertLicenseInformation.setDescription('License information.')
alertLicenseWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8514)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertLicenseWarning.setDescription('License warning.')
alertLicenseFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8513)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertLicenseFailure.setDescription('License failure.')
alertPCIDeviceAuditWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8562)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPCIDeviceAuditWarning.setDescription('PCI device audit warning.')
alertPowerSupplyAuditWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8330)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerSupplyAuditWarning.setDescription('Power Supply audit warning.')
alertPowerSupplyAuditFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8329)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerSupplyAuditFailure.setDescription('Power Supply audit failure or critical event.')
alertPowerUsageAuditInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8419)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerUsageAuditInformation.setDescription('Power usage audit information.')
alertPowerUsageAuditWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8418)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerUsageAuditWarning.setDescription('Power usage audit warning.')
alertPowerUsageAuditFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8417)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerUsageAuditFailure.setDescription('Power usage audit failure or critical event.')
alertSystemPowerStateChangeInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8579)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSystemPowerStateChangeInformation.setDescription('Host is going through a power state change\n         (powering on or powering off).')
alertUserTrackingWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4) + (0,8490)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertUserTrackingWarning.setDescription('User Tracking warning.')
alertAutoDiscoveryInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10635)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertAutoDiscoveryInformation.setDescription('Auto discovery information.')
alertNetworkConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10771)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertNetworkConfigurationInformation.setDescription('Network configuration information.')
alertNetworkConfigurationWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10770)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertNetworkConfigurationWarning.setDescription('Network configuration warning.')
alertIPAddressConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10547)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIPAddressConfigurationInformation.setDescription('IP Address configuration information.')
alertJobControlConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10267)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertJobControlConfigurationInformation.setDescription('Job Control configuration information.')
alertPCIDeviceConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10611)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPCIDeviceConfigurationInformation.setDescription('PCI device configuration information.')
alertSecurityConfigurationWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10578)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSecurityConfigurationWarning.setDescription('Security configuration warning.')
alertSWCConfigurationWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10530)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSWCConfigurationWarning.setDescription('Software configuration warning.')
alertSWCConfigurationFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10529)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSWCConfigurationFailure.setDescription('Software configuration failure.')
alertTestTrapEvent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5) + (0,10395)).setObjects(("IDRAC-MIB", "alertMessageID"), ("IDRAC-MIB", "alertMessage"), ("IDRAC-MIB", "alertCurrentStatus"), ("IDRAC-MIB", "alertSystemServiceTag"), ("IDRAC-MIB", "alertSystemFQDN"), ("IDRAC-MIB", "alertFQDD"), ("IDRAC-MIB", "alertDeviceDisplayName"), ("IDRAC-MIB", "alertMessageArguments"), ("IDRAC-MIB", "alertChassisServiceTag"), ("IDRAC-MIB", "alertChassisName"), ("IDRAC-MIB", "alertRacFQDN"))
if mibBuilder.loadTexts: alertTestTrapEvent.setDescription('The iDRAC generated a test trap event in response to a user request.')
mibBuilder.exportSymbols("IDRAC-MIB", coolingDeviceStateCapabilities=coolingDeviceStateCapabilities, chassisAssetTagName=chassisAssetTagName, alertStoragePhysicalDiskInformation=alertStoragePhysicalDiskInformation, processorDeviceVoltage=processorDeviceVoltage, alertIOVirtualizationFailure=alertIOVirtualizationFailure, alertFanFailure=alertFanFailure, chassisIdentifyFlashControlSettings=chassisIdentifyFlashControlSettings, LEDControlCapabilitiesFlags=LEDControlCapabilitiesFlags, powerUsageCumulativeWattageStartDateName=powerUsageCumulativeWattageStartDateName, coolingDeviceSubType=coolingDeviceSubType, alertPCIDeviceConfigurationInformation=alertPCIDeviceConfigurationInformation, physicalDiskOperationalState=physicalDiskOperationalState, processorDeviceExtendedCapabilities=processorDeviceExtendedCapabilities, slotGroup=slotGroup, controllerCopyBackMode=controllerCopyBackMode, chassisExpressServiceCodeName=chassisExpressServiceCodeName, alertNetworkWarning=alertNetworkWarning, systemStateTemperatureStatisticsStateDetails=systemStateTemperatureStatisticsStateDetails, processorDeviceStatusTableEntry=processorDeviceStatusTableEntry, controllerSASAddress=controllerSASAddress, alertStorageSecurityFailure=alertStorageSecurityFailure, systemSlotTableEntry=systemSlotTableEntry, batteryTableEntry=batteryTableEntry, systemStateChassisState=systemStateChassisState, networkDeviceCapabilities=networkDeviceCapabilities, enclosureTemperatureProbeDisplayName=enclosureTemperatureProbeDisplayName, alertStoragePowerSupplyFailure=alertStoragePowerSupplyFailure, powerUsagePowerCapCapabilities=powerUsagePowerCapCapabilities, processorDeviceStatusStateCapabilities=processorDeviceStatusStateCapabilities, virtualDiskProgress=virtualDiskProgress, virtualDiskMediaType=virtualDiskMediaType, powerSupplyTableEntry=powerSupplyTableEntry, controllerPreservedCache=controllerPreservedCache, alertStorageEnclosureWarning=alertStorageEnclosureWarning, firmwareUpdateCapabilities=firmwareUpdateCapabilities, powerSupplyTable=powerSupplyTable, controllerName=controllerName, HostControlCapabilitiesFlags=HostControlCapabilitiesFlags, systemStateAmperageStateDetails=systemStateAmperageStateDetails, enclosureFirmwareVersion=enclosureFirmwareVersion, enclosureFanDisplayName=enclosureFanDisplayName, virtualDiskT10PIStatus=virtualDiskT10PIStatus, chassisStateSettings=chassisStateSettings, enclosureNumber=enclosureNumber, alertCurrentStatus=alertCurrentStatus, systemStateTable=systemStateTable, Unsigned16BitRange=Unsigned16BitRange, pCIDeviceStateCapabilities=pCIDeviceStateCapabilities, pCIDeviceStatus=pCIDeviceStatus, alertSWCConfigurationWarning=alertSWCConfigurationWarning, powerSupplyType=powerSupplyType, temperatureProbeLowerNonRecoverableThreshold=temperatureProbeLowerNonRecoverableThreshold, alertSecurityInformation=alertSecurityInformation, alertStorageFanWarning=alertStorageFanWarning, systemStateMemoryDeviceStatusCombined=systemStateMemoryDeviceStatusCombined, pCIDeviceDataBusWidth=pCIDeviceDataBusWidth, controllerT10PICapability=controllerT10PICapability, intrusionTable=intrusionTable, systemDataCenterName=systemDataCenterName, WatchDogControlCapabilitiesFlags=WatchDogControlCapabilitiesFlags, physicalDiskNegotiatedSpeed=physicalDiskNegotiatedSpeed, processorDeviceStateCapabilities=processorDeviceStateCapabilities, chassisID=chassisID, processorDeviceTable=processorDeviceTable, firmwareIndex=firmwareIndex, alertMemoryDeviceWarning=alertMemoryDeviceWarning, ObjectRange=ObjectRange, enclosurePowerSupplyTableEntry=enclosurePowerSupplyTableEntry, voltageProbeTable=voltageProbeTable, eventLogRecord=eventLogRecord, BooleanType=BooleanType, powerUsageIdlePower=powerUsageIdlePower, physicalDiskManufactureYear=physicalDiskManufactureYear, alertPowerUsageAuditFailure=alertPowerUsageAuditFailure, alertTemperatureProbeFailure=alertTemperatureProbeFailure, chassisNameModular=chassisNameModular, temperatureProbeLowerNonCriticalThreshold=temperatureProbeLowerNonCriticalThreshold, fruTableEntry=fruTableEntry, eventLogStateCapabilitiesUnique=eventLogStateCapabilitiesUnique, temperatureProbeStatus=temperatureProbeStatus, NMIButtonControlCapabilitiesFlags=NMIButtonControlCapabilitiesFlags, physicalDiskComponentStatus=physicalDiskComponentStatus, fruManufacturerName=fruManufacturerName, networkDevicePermanentMACAddress=networkDevicePermanentMACAddress, systemStateCoolingDeviceStatusCombined=systemStateCoolingDeviceStatusCombined, Unsigned32BitRange=Unsigned32BitRange, systemBIOSStateCapabilities=systemBIOSStateCapabilities, ChassisSystemClassEnum=ChassisSystemClassEnum, coolingUnitStatus=coolingUnitStatus, batteryPredictedCapacity=batteryPredictedCapacity, racVersion=racVersion, systemSlotStateCapabilitiesUnique=systemSlotStateCapabilitiesUnique, physicalDiskBlockSizeInBytes=physicalDiskBlockSizeInBytes, alertPCIDeviceInformation=alertPCIDeviceInformation, systemStateVoltageStateDetails=systemStateVoltageStateDetails, alertvFlashMediaDeviceAbsent=alertvFlashMediaDeviceAbsent, chassishostControlSettingsUnique=chassishostControlSettingsUnique, enclosureFanNumber=enclosureFanNumber, enclosureFanSpeed=enclosureFanSpeed, coolingDeviceDiscreteReading=coolingDeviceDiscreteReading, HostControlSettingsFlags=HostControlSettingsFlags, amperageProbeIndex=amperageProbeIndex, enclosureTemperatureProbeMaxWarningValue=enclosureTemperatureProbeMaxWarningValue, systemBatteryTableEntry=systemBatteryTableEntry, batteryTable=batteryTable, powerUsagePeakWattsReadingDateName=powerUsagePeakWattsReadingDateName, temperatureProbeUpperNonRecoverableThreshold=temperatureProbeUpperNonRecoverableThreshold, alertvFlashMediaDeviceWarning=alertvFlashMediaDeviceWarning, ProbeCapabilitiesFlags=ProbeCapabilitiesFlags, powerGroup=powerGroup, coolingUnitIndex=coolingUnitIndex, virtualDiskBlockSizeInBytes=virtualDiskBlockSizeInBytes, alertStorageVirtualDiskInformation=alertStorageVirtualDiskInformation, StatusRedundancyEnum=StatusRedundancyEnum, PowerSupplyTypeEnum=PowerSupplyTypeEnum, alertStorageBatteryWarning=alertStorageBatteryWarning, chassisServiceTagName=chassisServiceTagName, alertCMCAuditInformation=alertCMCAuditInformation, amperageProbeLowerNonRecoverableThreshold=amperageProbeLowerNonRecoverableThreshold, physicalDiskFreeSpaceInMB=physicalDiskFreeSpaceInMB, eventLogStateSettingsUnique=eventLogStateSettingsUnique, alertAmperageProbeWarning=alertAmperageProbeWarning, alertSystemFQDN=alertSystemFQDN, controllerDriverVersion=controllerDriverVersion, chassisSystemProperties=chassisSystemProperties, alertPCIDeviceAuditWarning=alertPCIDeviceAuditWarning, systemStateCoolingUnitStatusList=systemStateCoolingUnitStatusList, enclosureTemperatureProbeState=enclosureTemperatureProbeState, processorDevicechassisIndex=processorDevicechassisIndex, pCIDeviceTableEntry=pCIDeviceTableEntry, LEDControlSettingsFlags=LEDControlSettingsFlags, intrusionStatus=intrusionStatus, systemOSVersion=systemOSVersion, firmwareStateCapabilities=firmwareStateCapabilities, powerUsageTableEntry=powerUsageTableEntry, enclosureManagementModuleFQDD=enclosureManagementModuleFQDD, powerUsageStateSettings=powerUsageStateSettings, processorDeviceStatusReading=processorDeviceStatusReading, powerUsageMaxPotentialPower=powerUsageMaxPotentialPower, physicalDevices=physicalDevices, ChassisIdentifyControlSettingsFlags=ChassisIdentifyControlSettingsFlags, controllerReconstructRate=controllerReconstructRate, enclosureManagementModuleTableEntry=enclosureManagementModuleTableEntry, powerUsagePeakAmpsReadingDateName=powerUsagePeakAmpsReadingDateName, ProcessorDeviceStatusState=ProcessorDeviceStatusState, coolingDeviceLocationName=coolingDeviceLocationName, coolingDeviceUpperNonCriticalThreshold=coolingDeviceUpperNonCriticalThreshold, systemStateChassisStatus=systemStateChassisStatus, memoryDeviceStateSettings=memoryDeviceStateSettings, powerUsagePeakAmpsStartDateName=powerUsagePeakAmpsStartDateName, systemPowerUpTime=systemPowerUpTime, memoryDevicechassisIndex=memoryDevicechassisIndex, powerUnitRedundancyStatus=powerUnitRedundancyStatus, controllerBootMode=controllerBootMode, enclosurePowerSupplyDisplayName=enclosurePowerSupplyDisplayName, firmwareTypeName=firmwareTypeName, chassisInformationGroup=chassisInformationGroup, SystemBatteryReadingFlags=SystemBatteryReadingFlags, voltageProbeTableEntry=voltageProbeTableEntry, controllerMaxCapSpeed=controllerMaxCapSpeed, systemStateChassisIntrusionStatusDetails=systemStateChassisIntrusionStatusDetails, powerUnitName=powerUnitName, chassisLEDControlCapabilitiesUnique=chassisLEDControlCapabilitiesUnique, controllerSpinDownTimeInterval=controllerSpinDownTimeInterval, systemBIOSTableEntry=systemBIOSTableEntry, pCIDeviceDescriptionName=pCIDeviceDescriptionName, systemSlotSlotExternalSlotName=systemSlotSlotExternalSlotName, fruChassisIndex=fruChassisIndex, alertProcessorDeviceStatusNormal=alertProcessorDeviceStatusNormal, amperageProbeReading=amperageProbeReading, physicalDiskManufactureWeek=physicalDiskManufactureWeek, coolingUnitStateCapabilties=coolingUnitStateCapabilties, enclosureFanState=enclosureFanState, systemSlotCategory=systemSlotCategory, enclosureState=enclosureState, firmwareVersionName=firmwareVersionName, alertStoragePowerSupplyWarning=alertStoragePowerSupplyWarning, enclosureFanComponentStatus=enclosureFanComponentStatus, chassisNMIButtonControlCapabilitiesUnique=chassisNMIButtonControlCapabilitiesUnique, networkDeviceTOECapabilityFlags=networkDeviceTOECapabilityFlags, virtualDiskFQDD=virtualDiskFQDD, chassisModelModular=chassisModelModular, updatesAlertTrapGroup=updatesAlertTrapGroup, CoolingDeviceDiscreteReadingEnum=CoolingDeviceDiscreteReadingEnum, networkDeviceiSCSICapabilityFlags=networkDeviceiSCSICapabilityFlags, deviceGroup=deviceGroup, processorDeviceStatusChassisIndex=processorDeviceStatusChassisIndex, alertFQDD=alertFQDD, alertDeviceDisplayName=alertDeviceDisplayName, systemStateVoltageStatusCombined=systemStateVoltageStatusCombined, chassisIDExtension=chassisIDExtension, AmperageDiscreteReadingEnum=AmperageDiscreteReadingEnum, alertSystemEventLogInformation=alertSystemEventLogInformation, pCIDeviceManufacturerName=pCIDeviceManufacturerName, NetworkDeviceiSCSICapabilityFlags=NetworkDeviceiSCSICapabilityFlags, physicalDiskTable=physicalDiskTable, alertStorageTemperatureProbeWarning=alertStorageTemperatureProbeWarning, processorDeviceCharacteristics=processorDeviceCharacteristics, controllerPatrolReadMode=controllerPatrolReadMode, memoryDeviceBankLocationName=memoryDeviceBankLocationName, amperageProbeProbeCapabilities=amperageProbeProbeCapabilities, systemBIOSTable=systemBIOSTable, voltageProbeDiscreteReading=voltageProbeDiscreteReading, systemStateProcessorDeviceStatusList=systemStateProcessorDeviceStatusList, SystemSlotTypeEnum=SystemSlotTypeEnum, controllerCacheSizeInMB=controllerCacheSizeInMB, virtualDiskNumber=virtualDiskNumber, enclosureConnectedPort=enclosureConnectedPort, coolingDeviceType=coolingDeviceType, powerUsageChassisIndex=powerUsageChassisIndex, racManufacturer=racManufacturer, enclosurePowerSupplyFQDD=enclosurePowerSupplyFQDD, voltageProbeProbeCapabilities=voltageProbeProbeCapabilities, amperageProbeUpperNonRecoverableThreshold=amperageProbeUpperNonRecoverableThreshold, FQDDString=FQDDString, systemStateCoolingUnitStatusCombined=systemStateCoolingUnitStatusCombined, alertBatteryWarning=alertBatteryWarning, alertUpdateJobInformation=alertUpdateJobInformation, informationGroup=informationGroup, powerUnitchassisIndex=powerUnitchassisIndex, coolingUnitTable=coolingUnitTable, powerSupplychassisIndex=powerSupplychassisIndex, coolingDeviceStateSettings=coolingDeviceStateSettings, networkDeviceStatus=networkDeviceStatus, processorDeviceStatusLocationName=processorDeviceStatusLocationName, alertNetworkInformation=alertNetworkInformation, alertLicenseWarning=alertLicenseWarning, ObjectStatusEnum=ObjectStatusEnum, physicalDiskBusType=physicalDiskBusType, enclosurePowerSupplyName=enclosurePowerSupplyName, systemInfoGroup=systemInfoGroup, alertHardwareConfigurationInformation=alertHardwareConfigurationInformation, alertJobControlConfigurationInformation=alertJobControlConfigurationInformation, PowerCapSettingEnum=PowerCapSettingEnum, systemStatePowerUnitStatusRedundancy=systemStatePowerUnitStatusRedundancy, processorDeviceStatusTable=processorDeviceStatusTable, alertiDRACIPAddressChange=alertiDRACIPAddressChange, PowerSupplyStateSettingsUniqueFlags=PowerSupplyStateSettingsUniqueFlags, enclosureSASAddress=enclosureSASAddress, controllerEnhancedAutoImportForeignConfigMode=controllerEnhancedAutoImportForeignConfigMode, batteryFQDD=batteryFQDD, alertSoftwareConfigurationInformation=alertSoftwareConfigurationInformation, SystemSlotUsageEnum=SystemSlotUsageEnum, systemStateGlobalSystemStatus=systemStateGlobalSystemStatus, amperageProbechassisIndex=amperageProbechassisIndex, alertStorageControllerInformation=alertStorageControllerInformation, TemperatureProbeTypeEnum=TemperatureProbeTypeEnum, racType=racType, alertTemperatureProbeWarning=alertTemperatureProbeWarning, systemStateCoolingDeviceStateDetails=systemStateCoolingDeviceStateDetails, enclosureTotalSlots=enclosureTotalSlots, coolingUnitStateSettings=coolingUnitStateSettings, StateCapabilitiesLogUniqueFlags=StateCapabilitiesLogUniqueFlags, systemStateBatteryStatusList=systemStateBatteryStatusList)
mibBuilder.exportSymbols("IDRAC-MIB", physicalDiskPCIeCapableLinkWidth=physicalDiskPCIeCapableLinkWidth, chassisStatus=chassisStatus, controllerSecurityStatus=controllerSecurityStatus, enclosureFanFQDD=enclosureFanFQDD, controllerPersistentHotSpare=controllerPersistentHotSpare, alertStorageManagementFailure=alertStorageManagementFailure, virtualDiskWritePolicy=virtualDiskWritePolicy, alertSystemEventLogWarning=alertSystemEventLogWarning, networkDeviceIndex=networkDeviceIndex, systemStateCoolingDeviceStatusDetails=systemStateCoolingDeviceStatusDetails, alertSecurityWarning=alertSecurityWarning, eventLogDateName=eventLogDateName, alertMemoryDeviceInformation=alertMemoryDeviceInformation, alertStorageSecurityInformation=alertStorageSecurityInformation, alertLicenseInformation=alertLicenseInformation, coolingDeviceReading=coolingDeviceReading, processorDeviceStatus=processorDeviceStatus, systemStatePowerSupplyStatusDetails=systemStatePowerSupplyStatusDetails, powerUsageCumulativeWattage=powerUsageCumulativeWattage, amperageProbeStateSettings=amperageProbeStateSettings, coolingDeviceTableEntry=coolingDeviceTableEntry, server3=server3, systemStateGroup=systemStateGroup, alertVoltageProbeNormal=alertVoltageProbeNormal, alertRedundancyDegraded=alertRedundancyDegraded, coolingDeviceUpperCriticalThreshold=coolingDeviceUpperCriticalThreshold, enclosureTemperatureProbeName=enclosureTemperatureProbeName, temperatureProbeLocationName=temperatureProbeLocationName, systemFormFactor=systemFormFactor, lcLogMessage=lcLogMessage, systemBatteryTable=systemBatteryTable, virtualDiskLayout=virtualDiskLayout, alertPowerUsageAuditInformation=alertPowerUsageAuditInformation, fruInformationStatus=fruInformationStatus, voltageProbeLowerCriticalThreshold=voltageProbeLowerCriticalThreshold, temperatureProbeUpperCriticalThreshold=temperatureProbeUpperCriticalThreshold, lcLogRecommededAction=lcLogRecommededAction, controllerBGIRate=controllerBGIRate, processorDeviceExternalClockSpeed=processorDeviceExternalClockSpeed, physicalDiskPCIeNegotiatedLinkWidth=physicalDiskPCIeNegotiatedLinkWidth, lcLogDetailedDescription=lcLogDetailedDescription, amperageProbeLocationName=amperageProbeLocationName, enclosureManagementModuleName=enclosureManagementModuleName, alertPowerSupplyAbsent=alertPowerSupplyAbsent, voltageProbeUpperNonRecoverableThreshold=voltageProbeUpperNonRecoverableThreshold, controllerNumber=controllerNumber, alertPowerUsageAuditWarning=alertPowerUsageAuditWarning, alertPhysicalDiskWarning=alertPhysicalDiskWarning, alertMessage=alertMessage, StateSettingsLogUniqueFlags=StateSettingsLogUniqueFlags, alertVoltageProbeWarning=alertVoltageProbeWarning, intrusionType=intrusionType, statusGroup=statusGroup, StateSettingsFlags=StateSettingsFlags, networkDeviceVendorName=networkDeviceVendorName, powerUnitTable=powerUnitTable, chassisparentIndexReference=chassisparentIndexReference, systemBatteryLocationName=systemBatteryLocationName, pCIDeviceTable=pCIDeviceTable, controllerRebuildRate=controllerRebuildRate, alertSoftwareConfigurationWarning=alertSoftwareConfigurationWarning, controllerSpinDownUnconfiguredDrives=controllerSpinDownUnconfiguredDrives, ChassisTypeEnum=ChassisTypeEnum, alertCableFailure=alertCableFailure, storageAlertTrapGroup=storageAlertTrapGroup, processorDeviceStatusIndex=processorDeviceStatusIndex, dell=dell, chassisInfoGroup=chassisInfoGroup, SystemFormFactorEnum=SystemFormFactorEnum, alertChassisServiceTag=alertChassisServiceTag, SystemSlotStateCapabilitiesFlags=SystemSlotStateCapabilitiesFlags, controllerBootModeSupported=controllerBootModeSupported, CoolingDeviceTypeEnum=CoolingDeviceTypeEnum, alertSecurityFailure=alertSecurityFailure, physicalDiskT10PICapability=physicalDiskT10PICapability, alertStoragePhysicalDiskFailure=alertStoragePhysicalDiskFailure, memoryDeviceType=memoryDeviceType, coolingDeviceUpperNonRecoverableThreshold=coolingDeviceUpperNonRecoverableThreshold, batteryComponentStatus=batteryComponentStatus, fruGroup=fruGroup, alertTrapGroup=alertTrapGroup, physicalDiskSmartAlertIndication=physicalDiskSmartAlertIndication, alertPowerSupplyWarning=alertPowerSupplyWarning, intrusionLocationName=intrusionLocationName, alertMessageArguments=alertMessageArguments, alertNetworkConfigurationInformation=alertNetworkConfigurationInformation, physicalDiskProtocolVersion=physicalDiskProtocolVersion, systemBatteryStatus=systemBatteryStatus, systemStateAmperageStatusCombined=systemStateAmperageStatusCombined, alertGroup=alertGroup, virtualDiskBadBlocksDetected=virtualDiskBadBlocksDetected, virtualDiskTableEntry=virtualDiskTableEntry, alertStorageTemperatureProbeInformation=alertStorageTemperatureProbeInformation, systemStateIDSDMCardUnitStatusList=systemStateIDSDMCardUnitStatusList, systemBladeGeometry=systemBladeGeometry, systemRackSlot=systemRackSlot, enclosureFQDD=enclosureFQDD, physicalDiskUsedSpaceInMB=physicalDiskUsedSpaceInMB, alertPowerSupplyAuditWarning=alertPowerSupplyAuditWarning, systemBIOSManufacturerName=systemBIOSManufacturerName, fruPartNumberName=fruPartNumberName, MACAddress=MACAddress, temperatureProbeIndex=temperatureProbeIndex, alertBiosPostFailure=alertBiosPostFailure, enclosureManagementModuleDisplayName=enclosureManagementModuleDisplayName, alertIntegratedDualSDModuleRedundancyLost=alertIntegratedDualSDModuleRedundancyLost, systemBIOSStateSettings=systemBIOSStateSettings, IntrusionTypeEnum=IntrusionTypeEnum, systemAlertTrapGroup=systemAlertTrapGroup, alertTemperatureStatisticsWarning=alertTemperatureStatisticsWarning, powerSupplyFQDD=powerSupplyFQDD, RacTypeEnum=RacTypeEnum, enclosureManagementModuleComponentStatus=enclosureManagementModuleComponentStatus, LogFormatType=LogFormatType, alertCMCFailure=alertCMCFailure, alertStorageFanFailure=alertStorageFanFailure, amperageProbeUpperCriticalThreshold=amperageProbeUpperCriticalThreshold, systemBladeSlotNumber=systemBladeSlotNumber, software=software, enclosureType=enclosureType, systemSystemID=systemSystemID, coolingUnitRedundancyStatus=coolingUnitRedundancyStatus, alertProcessorDeviceAbsent=alertProcessorDeviceAbsent, BladeGeometryEnum=BladeGeometryEnum, powerSupplyPowerMonitorCapable=powerSupplyPowerMonitorCapable, enclosureTemperatureProbeMaxCriticalValue=enclosureTemperatureProbeMaxCriticalValue, alertDebugWarning=alertDebugWarning, systemStateBatteryStatusCombined=systemStateBatteryStatusCombined, powerSupplyMaximumInputVoltage=powerSupplyMaximumInputVoltage, voltageProbeLowerNonCriticalThreshold=voltageProbeLowerNonCriticalThreshold, NetworkDeviceConnectionStatusEnum=NetworkDeviceConnectionStatusEnum, voltageProbeIndex=voltageProbeIndex, racShortName=racShortName, intrusionTableEntry=intrusionTableEntry, powerUsageEntityName=powerUsageEntityName, WatchControlSettingsFlags=WatchControlSettingsFlags, physicalDiskManufactureDay=physicalDiskManufactureDay, alertStorageEnclosureInformation=alertStorageEnclosureInformation, virtualDiskTable=virtualDiskTable, alertTemperatureProbeNormal=alertTemperatureProbeNormal, processorDeviceIndex=processorDeviceIndex, alertPhysicalDiskInformation=alertPhysicalDiskInformation, alertPowerSupplyFailure=alertPowerSupplyFailure, enclosureTemperatureProbeComponentStatus=enclosureTemperatureProbeComponentStatus, firmwareSize=firmwareSize, physicalDiskSASAddress=physicalDiskSASAddress, virtualDiskState=virtualDiskState, firmwareTableEntry=firmwareTableEntry, firmwareType=firmwareType, controllerPCISlot=controllerPCISlot, alertDebugInformation=alertDebugInformation, PowerCapCapabilitiesFlags=PowerCapCapabilitiesFlags, VoltageDiscreteReadingEnum=VoltageDiscreteReadingEnum, alertMemoryDeviceFailure=alertMemoryDeviceFailure, alertStorageVirtualDiskFailure=alertStorageVirtualDiskFailure, enclosurePowerSupplyPartNumber=enclosurePowerSupplyPartNumber, networkDevicePCIBusNumber=networkDevicePCIBusNumber, virtualDiskRemainingRedundancy=virtualDiskRemainingRedundancy, chassisIdentifyFlashControlCapabilities=chassisIdentifyFlashControlCapabilities, enclosureManagementModulePartNumber=enclosureManagementModulePartNumber, systemStateProcessorDeviceStatusCombined=systemStateProcessorDeviceStatusCombined, powerSupplypowerUnitIndexReference=powerSupplypowerUnitIndexReference, memoryDeviceTableEntry=memoryDeviceTableEntry, processorDeviceStatusState=processorDeviceStatusState, virtualDiskDiskCachePolicy=virtualDiskDiskCachePolicy, physicalDiskName=physicalDiskName, racInfoGroup=racInfoGroup, PowerStateStatusEnum=PowerStateStatusEnum, systemStatePowerSupplyStatusCombined=systemStatePowerSupplyStatusCombined, alertLinkStatusInformation=alertLinkStatusInformation, processorDeviceStateSettings=processorDeviceStateSettings, physicalDiskSecurityStatus=physicalDiskSecurityStatus, enclosureManagementModuleFWVersion=enclosureManagementModuleFWVersion, systemStateTemperatureStatusDetails=systemStateTemperatureStatusDetails, alertAutoDiscoveryInformation=alertAutoDiscoveryInformation, String64=String64, powerSupplyConfigurationErrorType=powerSupplyConfigurationErrorType, physicalDiskRemainingRatedWriteEndurance=physicalDiskRemainingRatedWriteEndurance, StringType=StringType, chassiswatchDogControlExpiryTimeCapabilitiesUnique=chassiswatchDogControlExpiryTimeCapabilitiesUnique, enclosureFanCount=enclosureFanCount, physicalDiskFQDD=physicalDiskFQDD, batteryDisplayName=batteryDisplayName, controllerFWVersion=controllerFWVersion, systemStateSDCardDeviceStatusCombined=systemStateSDCardDeviceStatusCombined, temperatureProbeReading=temperatureProbeReading, enclosureRedundantPath=enclosureRedundantPath, alertPCIDeviceWarning=alertPCIDeviceWarning, processorDeviceVersionName=processorDeviceVersionName, physicalDiskSerialNo=physicalDiskSerialNo, temperatureProbechassisIndex=temperatureProbechassisIndex, lcLogFQDD=lcLogFQDD, PowerSupplyConfigurationErrorTypeEnum=PowerSupplyConfigurationErrorTypeEnum, memoryDeviceLocationName=memoryDeviceLocationName, StateCapabilitiesFlags=StateCapabilitiesFlags, amperageProbeLowerNonCriticalThreshold=amperageProbeLowerNonCriticalThreshold, systemSlotCurrentUsage=systemSlotCurrentUsage, alertRACInformation=alertRACInformation, alertStorageEnclosureFailure=alertStorageEnclosureFailure, alertSWCConfigurationFailure=alertSWCConfigurationFailure, memoryDeviceStateCapabilities=memoryDeviceStateCapabilities, fruFQDD=fruFQDD, powerUsagePeakAmps=powerUsagePeakAmps, temperatureProbeTable=temperatureProbeTable, voltageProbeLowerNonRecoverableThreshold=voltageProbeLowerNonRecoverableThreshold, processorDeviceFamily=processorDeviceFamily, systemBatteryIndex=systemBatteryIndex, systemRackName=systemRackName, systemServiceTag=systemServiceTag, systemStateVoltageStatusDetails=systemStateVoltageStatusDetails, enclosureAssetTag=enclosureAssetTag, alertLicenseFailure=alertLicenseFailure, controllerCheckConsistencyMode=controllerCheckConsistencyMode, powerUsageTable=powerUsageTable, chassisLockPresent=chassisLockPresent, eventLogTable=eventLogTable, processorDeviceFQDD=processorDeviceFQDD, pCIDeviceIndex=pCIDeviceIndex, networkDeviceTable=networkDeviceTable, alertStorageTemperatureProbeFailure=alertStorageTemperatureProbeFailure, networkDeviceCurrentMACAddress=networkDeviceCurrentMACAddress, systemStateSDCardUnitStatusCombined=systemStateSDCardUnitStatusCombined, enclosureManagementModuleNumber=enclosureManagementModuleNumber, voltageProbeStateSettings=voltageProbeStateSettings, voltageProbeType=voltageProbeType, systemSlotIndex=systemSlotIndex, systemSlotTable=systemSlotTable, physicalDiskState=physicalDiskState, alertSoftwareConfigurationFailure=alertSoftwareConfigurationFailure, lcLogTable=lcLogTable, alertFiberChannelFailure=alertFiberChannelFailure, firmwareStateSettings=firmwareStateSettings, fruSerialNumberName=fruSerialNumberName, powerUsageIndex=powerUsageIndex, controllerTableEntry=controllerTableEntry, alertPowerSupplyAuditFailure=alertPowerSupplyAuditFailure, systemOSName=systemOSName, temperatureProbeType=temperatureProbeType, chassisStateCapabilities=chassisStateCapabilities, alertRedundancyInformation=alertRedundancyInformation, networkDeviceConnectionStatus=networkDeviceConnectionStatus, amperageProbeDiscreteReading=amperageProbeDiscreteReading, coolingDeviceFQDD=coolingDeviceFQDD, processorDeviceStatusStatus=processorDeviceStatusStatus, alertIntegratedDualSDModuleRedundancyDegraded=alertIntegratedDualSDModuleRedundancyDegraded, systemStateTemperatureStatisticsStatusCombined=systemStateTemperatureStatisticsStatusCombined, chassisSystemName=chassisSystemName, enclosureTempProbeCount=enclosureTempProbeCount, powerUnitIndex=powerUnitIndex, enclosureDisplayName=enclosureDisplayName, systemAssetTag=systemAssetTag, NetworkDeviceCapabilitiesFlags=NetworkDeviceCapabilitiesFlags, chassisName=chassisName, systemStateIDSDMCardDeviceStatusList=systemStateIDSDMCardDeviceStatusList)
mibBuilder.exportSymbols("IDRAC-MIB", intrusionReading=intrusionReading, ChassisIdentifyControlCapabilitiesFlags=ChassisIdentifyControlCapabilitiesFlags, alertOSInformation=alertOSInformation, chassisServiceTag=chassisServiceTag, virtualDiskIsCacheCade=virtualDiskIsCacheCade, alertStorageVirtualDiskWarning=alertStorageVirtualDiskWarning, systemStateChassisIntrusionStateDetails=systemStateChassisIntrusionStateDetails, eventLogRecordIndex=eventLogRecordIndex, powerUsagePowerCapValue=powerUsagePowerCapValue, fruTable=fruTable, systemLCDStatus=systemLCDStatus, coolingDeviceLowerNonRecoverableThreshold=coolingDeviceLowerNonRecoverableThreshold, coolingDeviceCountForRedundancy=coolingDeviceCountForRedundancy, processorDeviceMaximumSpeed=processorDeviceMaximumSpeed, eventLogchassisIndex=eventLogchassisIndex, alertRacFQDN=alertRacFQDN, systemBIOSStatus=systemBIOSStatus, voltageProbeStateCapabilities=voltageProbeStateCapabilities, enclosureTemperatureProbeTable=enclosureTemperatureProbeTable, alertStorageControllerFailure=alertStorageControllerFailure, alertHardwareConfigurationFailure=alertHardwareConfigurationFailure, coolingUnitchassisIndex=coolingUnitchassisIndex, alertSystemPerformanceWarning=alertSystemPerformanceWarning, controllerEncryptionCapability=controllerEncryptionCapability, memoryDeviceFQDD=memoryDeviceFQDD, systemNodeID=systemNodeID, lcLogCategory=lcLogCategory, PowerSupplyStateCapabilitiesUniqueFlags=PowerSupplyStateCapabilitiesUniqueFlags, ProcessorDeviceStatusReadingFlags=ProcessorDeviceStatusReadingFlags, systemStatePowerSupplyStateDetails=systemStatePowerSupplyStateDetails, controllerCheckConsistencyRate=controllerCheckConsistencyRate, physicalDiskMediaType=physicalDiskMediaType, alertRedundancyLost=alertRedundancyLost, chassisPowerButtonControlCapabilitiesUnique=chassisPowerButtonControlCapabilitiesUnique, powerUnitTableEntry=powerUnitTableEntry, numLCLogEntries=numLCLogEntries, powerUnitStatus=powerUnitStatus, lcLogMessageID=lcLogMessageID, racName=racName, enclosureTemperatureProbeMinWarningValue=enclosureTemperatureProbeMinWarningValue, alertPowerUsageWarning=alertPowerUsageWarning, intrusionStateSettings=intrusionStateSettings, systemStateSDCardUnitStatusList=systemStateSDCardUnitStatusList, enclosureTemperatureProbeFQDD=enclosureTemperatureProbeFQDD, enclosurePowerSupplyTable=enclosurePowerSupplyTable, systemBIOSchassisIndex=systemBIOSchassisIndex, enclosureFanTable=enclosureFanTable, networkDeviceProductName=networkDeviceProductName, alertCMCAuditWarning=alertCMCAuditWarning, systemStatePowerUnitStatusCombined=systemStatePowerUnitStatusCombined, memoryDeviceManufacturerName=memoryDeviceManufacturerName, coolingDeviceIndex=coolingDeviceIndex, systemStateCoolingUnitStatusDetails=systemStateCoolingUnitStatusDetails, systemExpressServiceCode=systemExpressServiceCode, processorDeviceTableEntry=processorDeviceTableEntry, memoryDeviceSpeed=memoryDeviceSpeed, memoryDeviceSerialNumberName=memoryDeviceSerialNumberName, auditAlertTrapGroup=auditAlertTrapGroup, virtualDiskDisplayName=virtualDiskDisplayName, enclosurePowerSupplyComponentStatus=enclosurePowerSupplyComponentStatus, alertProcessorDeviceStatusFailure=alertProcessorDeviceStatusFailure, powerUnitStateCapabilities=powerUnitStateCapabilities, systemSlotchassisIndex=systemSlotchassisIndex, alertStoragePowerSupplyInformation=alertStoragePowerSupplyInformation, firmwareTable=firmwareTable, physicalDiskPowerState=physicalDiskPowerState, alertIntegratedDualSDModuleRedundancyInformation=alertIntegratedDualSDModuleRedundancyInformation, TemperatureDiscreteReadingEnum=TemperatureDiscreteReadingEnum, pCIDevicechassisIndex=pCIDevicechassisIndex, processorDeviceStatusStateSettings=processorDeviceStatusStateSettings, powerUsagePeakWatts=powerUsagePeakWatts, controllerPatrolReadState=controllerPatrolReadState, enclosurePowerSupplyState=enclosurePowerSupplyState, StatusProbeEnum=StatusProbeEnum, networkDevicePCIFunctionNumber=networkDevicePCIFunctionNumber, alertAmperageProbeNormal=alertAmperageProbeNormal, temperatureProbeLowerCriticalThreshold=temperatureProbeLowerCriticalThreshold, alertHardwareConfigurationWarning=alertHardwareConfigurationWarning, amperageProbeUpperNonCriticalThreshold=amperageProbeUpperNonCriticalThreshold, coolingDeviceStatus=coolingDeviceStatus, coolingDeviceLowerNonCriticalThreshold=coolingDeviceLowerNonCriticalThreshold, physicalDiskCapableSpeed=physicalDiskCapableSpeed, alertSecurityConfigurationWarning=alertSecurityConfigurationWarning, alertStorageBatteryInformation=alertStorageBatteryInformation, systemStateCoolingUnitStatusRedundancy=systemStateCoolingUnitStatusRedundancy, enclosureTemperatureProbeCurValue=enclosureTemperatureProbeCurValue, enclosureTable=enclosureTable, enclosureTemperatureProbeTableEntry=enclosureTemperatureProbeTableEntry, alertIntegratedDualSDModuleInformation=alertIntegratedDualSDModuleInformation, temperatureProbeProbeCapabilities=temperatureProbeProbeCapabilities, enclosureName=enclosureName, chassisLEDControlSettingsUnique=chassisLEDControlSettingsUnique, controllerRAID10UnevenSpansSupported=controllerRAID10UnevenSpansSupported, alertIPAddressConfigurationInformation=alertIPAddressConfigurationInformation, amperageProbeTableEntry=amperageProbeTableEntry, controllerDisplayName=controllerDisplayName, enclosureServiceTag=enclosureServiceTag, systemSlotStatus=systemSlotStatus, enclosureBackplaneBayID=enclosureBackplaneBayID, enclosureTableEntry=enclosureTableEntry, alertPhysicalDiskFailure=alertPhysicalDiskFailure, SystemSlotStateSettingsFlags=SystemSlotStateSettingsFlags, alertStorageBatteryFailure=alertStorageBatteryFailure, Unsigned8BitRange=Unsigned8BitRange, DateName=DateName, alertFanInformation=alertFanInformation, physicalDiskDisplayName=physicalDiskDisplayName, chassisType=chassisType, firmwareStatus=firmwareStatus, coolingDevicechassisIndex=coolingDevicechassisIndex, ProcessorDeviceType=ProcessorDeviceType, pCIDeviceStateSettings=pCIDeviceStateSettings, enclosureDriveCount=enclosureDriveCount, alertIntegratedDualSDModuleAbsent=alertIntegratedDualSDModuleAbsent, systemRoomName=systemRoomName, memoryDeviceIndex=memoryDeviceIndex, alertAutomaticSystemRecovery=alertAutomaticSystemRecovery, alertTemperatureStatisticsFailure=alertTemperatureStatisticsFailure, alertPowerUsageFailure=alertPowerUsageFailure, alertSystemServiceTag=alertSystemServiceTag, eventLogFormat=eventLogFormat, powerSupplyCountForRedundancy=powerSupplyCountForRedundancy, batteryNumber=batteryNumber, alertBatteryFailure=alertBatteryFailure, physicalDiskPartNumber=physicalDiskPartNumber, alertStorageManagementInformation=alertStorageManagementInformation, lcLogChassisIndex=lcLogChassisIndex, chassisIndexChassisInformation=chassisIndexChassisInformation, alertMessageID=alertMessageID, systemStateCoolingUnitStateDetails=systemStateCoolingUnitStateDetails, batteryState=batteryState, PowerSupplySensorStateFlags=PowerSupplySensorStateFlags, systemModelName=systemModelName, controllerComponentStatus=controllerComponentStatus, temperatureProbeTableEntry=temperatureProbeTableEntry, coolingDeviceTable=coolingDeviceTable, alertTestTrapEvent=alertTestTrapEvent, controllerEncryptionKeyPresent=controllerEncryptionKeyPresent, controllerPatrolReadRate=controllerPatrolReadRate, enclosurePSUCount=enclosurePSUCount, alertSoftwareChangeUpdateWarning=alertSoftwareChangeUpdateWarning, processorDeviceCoreCount=processorDeviceCoreCount, chassishostControlCapabilitiesUnique=chassishostControlCapabilitiesUnique, virtualDiskSecured=virtualDiskSecured, temperatureProbeStateSettings=temperatureProbeStateSettings, powerSupplyRatedInputWattage=powerSupplyRatedInputWattage, powerUnitStateSettings=powerUnitStateSettings, lcLogSeverityStatus=lcLogSeverityStatus, temperatureProbeDiscreteReading=temperatureProbeDiscreteReading, systemStatePowerUnitStatusDetails=systemStatePowerUnitStatusDetails, physicalDiskCapacityInMB=physicalDiskCapacityInMB, alertLinkStatusWarning=alertLinkStatusWarning, amperageProbeType=amperageProbeType, systemBatteryChassisIndex=systemBatteryChassisIndex, systemStatePowerUnitStatusList=systemStatePowerUnitStatusList, SystemPropertiesFlags=SystemPropertiesFlags, mIBMinorVersionNumber=mIBMinorVersionNumber, physicalDiskFormFactor=physicalDiskFormFactor, alertPCIDeviceFailure=alertPCIDeviceFailure, physicalDiskProductID=physicalDiskProductID, powerSupplyStateCapabilitiesUnique=powerSupplyStateCapabilitiesUnique, voltageProbeReading=voltageProbeReading, amperageProbeStateCapabilities=amperageProbeStateCapabilities, enclosureTemperatureProbeMinCriticalValue=enclosureTemperatureProbeMinCriticalValue, alertOSFailure=alertOSFailure, processorDeviceCurrentSpeed=processorDeviceCurrentSpeed, mIBVersionGroup=mIBVersionGroup, controllerLoadBalanceSetting=controllerLoadBalanceSetting, powerSupplySensorState=powerSupplySensorState, storageDetailsGroup=storageDetailsGroup, systemStateSDCardDeviceStatusList=systemStateSDCardDeviceStatusList, mIBMajorVersionNumber=mIBMajorVersionNumber, virtualDiskOperationalState=virtualDiskOperationalState, systemStateMemoryDeviceStateDetails=systemStateMemoryDeviceStateDetails, alertvFlashMediaDeviceInformation=alertvFlashMediaDeviceInformation, alertNetworkFailure=alertNetworkFailure, systemDetailsGroup=systemDetailsGroup, NetworkDeviceTOECapabilityFlags=NetworkDeviceTOECapabilityFlags, chassiswatchDogControlSettingsUnique=chassiswatchDogControlSettingsUnique, enclosureFanName=enclosureFanName, controllerTable=controllerTable, racURL=racURL, enclosurePowerSupplyNumber=enclosurePowerSupplyNumber, alertVoltageProbeFailure=alertVoltageProbeFailure, systemStateChassisIntrusionStatusCombined=systemStateChassisIntrusionStatusCombined, systemSlotStateSettingsUnique=systemSlotStateSettingsUnique, processorDeviceThreadCount=processorDeviceThreadCount, powerUsagePowerCapSetting=powerUsagePowerCapSetting, powerSupplyIndex=powerSupplyIndex, PowerButtonControlCapabilitiesFlags=PowerButtonControlCapabilitiesFlags, alertChassisName=alertChassisName, chassisPowerButtonControlSettingsUnique=chassisPowerButtonControlSettingsUnique, processorDeviceBrandName=processorDeviceBrandName, amperageProbeLowerCriticalThreshold=amperageProbeLowerCriticalThreshold, systemBIOSReleaseDateName=systemBIOSReleaseDateName, chassisSystemRevisionName=chassisSystemRevisionName, storageManagement=storageManagement, voltageProbeUpperCriticalThreshold=voltageProbeUpperCriticalThreshold, intrusionStateCapabilities=intrusionStateCapabilities, processorDeviceExtendedSettings=processorDeviceExtendedSettings, systemBIOSIndex=systemBIOSIndex, alertFiberChannelWarning=alertFiberChannelWarning, networkDeviceFQDD=networkDeviceFQDD, MemoryDeviceTypeEnum=MemoryDeviceTypeEnum, pCIDeviceFQDD=pCIDeviceFQDD, powerUsageStateCapabilities=powerUsageStateCapabilities, chassisSystemClass=chassisSystemClass, firmwarechassisIndex=firmwarechassisIndex, lcLogComment=lcLogComment, alertStorageControllerWarning=alertStorageControllerWarning, alertAmperageProbeFailure=alertAmperageProbeFailure, alertBatteryNormal=alertBatteryNormal, voltageProbeStatus=voltageProbeStatus, mIBMaintenanceVersionNumber=mIBMaintenanceVersionNumber, coolingUnitName=coolingUnitName, fruRevisionName=fruRevisionName, PowerButtonControlSettingsFlags=PowerButtonControlSettingsFlags, powerUsagePeakHeadroom=powerUsagePeakHeadroom, thermalGroup=thermalGroup, systemStateMemoryDeviceStatusDetails=systemStateMemoryDeviceStatusDetails, lcLogRecordIndex=lcLogRecordIndex, powerUsageStatus=powerUsageStatus, systemAisleName=systemAisleName, logicalDevices=logicalDevices, alertUserTrackingWarning=alertUserTrackingWarning, chassisInformationTableEntry=chassisInformationTableEntry, alertProcessorDeviceStatusWarning=alertProcessorDeviceStatusWarning, systemStateTemperatureStateDetails=systemStateTemperatureStateDetails, powerSupplyLocationName=powerSupplyLocationName, systemStateTemperatureStatusCombined=systemStateTemperatureStatusCombined, alertCMCAuditFailure=alertCMCAuditFailure, NMIButtonControlSettingsFlags=NMIButtonControlSettingsFlags, alertSystemPowerStateChangeInformation=alertSystemPowerStateChangeInformation, systemBatteryReading=systemBatteryReading, enclosureManagementModuleState=enclosureManagementModuleState, numEventLogEntries=numEventLogEntries, networkDeviceiSCSIEnabled=networkDeviceiSCSIEnabled, outOfBandGroup=outOfBandGroup, globalStorageStatus=globalStorageStatus, WatchDogTimerCapabilitiesFlags=WatchDogTimerCapabilitiesFlags, chassisInformationTable=chassisInformationTable, physicalDiskProgress=physicalDiskProgress, virtualDiskReadPolicy=virtualDiskReadPolicy, amperageProbeTable=amperageProbeTable, enclosureComponentStatus=enclosureComponentStatus, alertFanWarning=alertFanWarning, virtualDiskComponentStatus=virtualDiskComponentStatus, enclosureFanTableEntry=enclosureFanTableEntry, CoolingDeviceSubTypeEnum=CoolingDeviceSubTypeEnum, controllerSpinDownHotSpareDrives=controllerSpinDownHotSpareDrives, systemStateTableEntry=systemStateTableEntry, lcLogSequenceNumber=lcLogSequenceNumber, alertNetworkConfigurationWarning=alertNetworkConfigurationWarning, systemFQDN=systemFQDN)
mibBuilder.exportSymbols("IDRAC-MIB", systemBatteryStateSettings=systemBatteryStateSettings, enclosureManagementModuleTable=enclosureManagementModuleTable, systemStatePowerUnitStateDetails=systemStatePowerUnitStateDetails, memoryDeviceTable=memoryDeviceTable, powerUsageInstantaneousHeadroom=powerUsageInstantaneousHeadroom, virtualDiskSizeInMB=virtualDiskSizeInMB, systemStateIDSDMCardDeviceStatusCombined=systemStateIDSDMCardDeviceStatusCombined, IntrusionReadingEnum=IntrusionReadingEnum, alertFiberChannelInformation=alertFiberChannelInformation, powerSupplyStatus=powerSupplyStatus, memoryDeviceCurrentOperatingSpeed=memoryDeviceCurrentOperatingSpeed, temperatureProbeStateCapabilities=temperatureProbeStateCapabilities, eventLogSeverityStatus=eventLogSeverityStatus, alertSystemEventLogFailure=alertSystemEventLogFailure, alertStorageFanInformation=alertStorageFanInformation, processorDeviceCoreEnabledCount=processorDeviceCoreEnabledCount, alertIntegratedDualSDModuleWarning=alertIntegratedDualSDModuleWarning, enclosurePosition=enclosurePosition, intrusionchassisIndex=intrusionchassisIndex, alertIntegratedDualSDModuleFailure=alertIntegratedDualSDModuleFailure, alertStorageManagementWarning=alertStorageManagementWarning, enclosureTemperatureProbeNumber=enclosureTemperatureProbeNumber, networkDevicePCIDeviceNumber=networkDevicePCIDeviceNumber, powerUsagePeakWattsStartDateName=powerUsagePeakWattsStartDateName, powerSupplyCurrentInputVoltage=powerSupplyCurrentInputVoltage, processorDeviceType=processorDeviceType, systemStateIDSDMCardUnitStatusCombined=systemStateIDSDMCardUnitStatusCombined, alertLinkStatusFailure=alertLinkStatusFailure, chassisSystemRevisionNumber=chassisSystemRevisionNumber, chassiswatchDogControlExpiryTime=chassiswatchDogControlExpiryTime, systemStateAmperageStatusDetails=systemStateAmperageStatusDetails, racDescription=racDescription, systemPowerState=systemPowerState, powerSupplyOutputWatts=powerSupplyOutputWatts, systemBatteryStateCapabilities=systemBatteryStateCapabilities, physicalDiskSpareState=physicalDiskSpareState, coolingDevicecoolingUnitIndexReference=coolingDevicecoolingUnitIndexReference, virtualDiskStripeSize=virtualDiskStripeSize, systemBIOSVersionName=systemBIOSVersionName, alertPowerSupplyNormal=alertPowerSupplyNormal, physicalDiskTableEntry=physicalDiskTableEntry, SystemSlotCategoryEnum=SystemSlotCategoryEnum, VoltageTypeEnum=VoltageTypeEnum, eventLogTableEntry=eventLogTableEntry, FirmwareType=FirmwareType, amperageProbeStatus=amperageProbeStatus, physicalDiskNumber=physicalDiskNumber, voltageProbechassisIndex=voltageProbechassisIndex, enclosureRollUpStatus=enclosureRollUpStatus, ProcessorDeviceFamily=ProcessorDeviceFamily, controllerFQDD=controllerFQDD, Signed32BitRange=Signed32BitRange, coolingUnitTableEntry=coolingUnitTableEntry, lcLogTableEntry=lcLogTableEntry, networkDeviceChassisIndex=networkDeviceChassisIndex, coolingDeviceLowerCriticalThreshold=coolingDeviceLowerCriticalThreshold, globalSystemStatus=globalSystemStatus, configurationAlertTrapGroup=configurationAlertTrapGroup, virtualDiskName=virtualDiskName, temperatureProbeUpperNonCriticalThreshold=temperatureProbeUpperNonCriticalThreshold, processorDeviceManufacturerName=processorDeviceManufacturerName, chassisModelTypeName=chassisModelTypeName, systemStateTemperatureStatisticsStatusDetails=systemStateTemperatureStatisticsStatusDetails, lcLogDateName=lcLogDateName, intrusionIndex=intrusionIndex, coolingDeviceProbeCapabilities=coolingDeviceProbeCapabilities, chassisManufacturerName=chassisManufacturerName, physicalDiskRevision=physicalDiskRevision, enclosureEMMCount=enclosureEMMCount, alertStoragePhysicalDiskWarning=alertStoragePhysicalDiskWarning, fruIndex=fruIndex, voltageProbeLocationName=voltageProbeLocationName, memoryDeviceStatus=memoryDeviceStatus, voltageProbeUpperNonCriticalThreshold=voltageProbeUpperNonCriticalThreshold, powerSupplyStateSettingsUnique=powerSupplyStateSettingsUnique, networkDeviceTableEntry=networkDeviceTableEntry, systemStatechassisIndex=systemStatechassisIndex, systemSlotType=systemSlotType, systemChassisSystemHeight=systemChassisSystemHeight, alertVariablesGroup=alertVariablesGroup, AmperageProbeTypeEnum=AmperageProbeTypeEnum, memoryDevicePartNumberName=memoryDevicePartNumberName, virtualDiskAvailableProtocols=virtualDiskAvailableProtocols, alertPowerUsageInformation=alertPowerUsageInformation, racFirmwareVersion=racFirmwareVersion, chassisNMIButtonControlSettingsUnique=chassisNMIButtonControlSettingsUnique, LcLogCategoryEnum=LcLogCategoryEnum, physicalDiskManufacturer=physicalDiskManufacturer, alertvFlashMediaDeviceFailure=alertvFlashMediaDeviceFailure, controllerRollUpStatus=controllerRollUpStatus, alertCMCWarning=alertCMCWarning, alertStorageSecurityWarning=alertStorageSecurityWarning, chassiswatchDogControlCapabilitiesUnique=chassiswatchDogControlCapabilitiesUnique, memoryDeviceSize=memoryDeviceSize)
