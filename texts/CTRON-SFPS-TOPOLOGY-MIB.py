#
# PySNMP MIB module CTRON-SFPS-TOPOLOGY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFPS-TOPOLOGY-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 10:06:08 2024
# On host fv-az575-513 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
sfpsTopologyServerTestIn, sfpsDirRestriction, sfpsServiceCenter, sfpsRATopologyAgent, sfpsVLANTopAgentPortTableAPIIn, sfpsTAPITestIn, sfpsDapiNvramStats, sfpsTopologyServerTest, sfpsDirViolation, sfpsTopologyServerPortEventRelay, sfpsTAPITestOut, sfpsRATopAgentPortTableAPIIn, sfpsVMTopologyServer, sfpsDirLockConfig, sfpsTopologyPortManager, sfpsDirViolationDeltaAPI, sfpsRestrictedMobilityAPI, sfpsNeighborEvents, sfpsRestrictedMobility, sfpsTopologyVNSNeighbors, sfpsVLANTopologyAgent, sfpsDirViolationAPI, sfpsTPMPortTableAPIOut, sfpsTopologyFCL, sfpsRATopAgentPortTableAPIOut, sfpsTopologyAgentCommon, sfpsDirLockStats, sfpsTPMPortTableAPIIn, sfpsESPTopologyAgent = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "sfpsTopologyServerTestIn", "sfpsDirRestriction", "sfpsServiceCenter", "sfpsRATopologyAgent", "sfpsVLANTopAgentPortTableAPIIn", "sfpsTAPITestIn", "sfpsDapiNvramStats", "sfpsTopologyServerTest", "sfpsDirViolation", "sfpsTopologyServerPortEventRelay", "sfpsTAPITestOut", "sfpsRATopAgentPortTableAPIIn", "sfpsVMTopologyServer", "sfpsDirLockConfig", "sfpsTopologyPortManager", "sfpsDirViolationDeltaAPI", "sfpsRestrictedMobilityAPI", "sfpsNeighborEvents", "sfpsRestrictedMobility", "sfpsTopologyVNSNeighbors", "sfpsVLANTopologyAgent", "sfpsDirViolationAPI", "sfpsTPMPortTableAPIOut", "sfpsTopologyFCL", "sfpsRATopAgentPortTableAPIOut", "sfpsTopologyAgentCommon", "sfpsDirLockStats", "sfpsTPMPortTableAPIIn", "sfpsESPTopologyAgent")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Unsigned32, Gauge32, Counter64, NotificationType, TimeTicks, Integer32, Counter32, ModuleIdentity, ObjectIdentity, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "Gauge32", "Counter64", "NotificationType", "TimeTicks", "Integer32", "Counter32", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class HexInteger(Integer32):
    pass

class SfpsAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sfpsServiceCenterTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8), )
if mibBuilder.loadTexts: sfpsServiceCenterTopologyTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterTopologyTable.setDescription('This table gives topology semantics to call processing.')
sfpsServiceCenterTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsServiceCenterTopologyHashLeaf"))
if mibBuilder.loadTexts: sfpsServiceCenterTopologyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterTopologyEntry.setDescription('Each entry contains the configuration of the Topology Entry.')
sfpsServiceCenterTopologyHashLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 1), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyHashLeaf.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterTopologyHashLeaf.setDescription('Server hash, part of instance key.')
sfpsServiceCenterTopologyMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyMetric.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterTopologyMetric.setDescription('Defines order servers are called low to high.')
sfpsServiceCenterTopologyName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyName.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterTopologyName.setDescription('Server name.')
sfpsServiceCenterTopologyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("kStatusRunning", 1), ("kStatusHalted", 2), ("kStatusPending", 3), ("kStatusFaulted", 4), ("kStatusNotStarted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterTopologyOperStatus.setDescription('Operational state of entry.')
sfpsServiceCenterTopologyAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterTopologyAdminStatus.setDescription('Administrative State of Entry.')
sfpsServiceCenterTopologyStatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyStatusTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterTopologyStatusTime.setDescription('Time Tick of last operStatus change.')
sfpsServiceCenterTopologyRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyRequests.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterTopologyRequests.setDescription('Requests made to server.')
sfpsServiceCenterTopologyResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 2, 4, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsServiceCenterTopologyResponses.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsServiceCenterTopologyResponses.setDescription('GOOD replies by server.')
sfpsHistoryTopologyServerTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7), )
if mibBuilder.loadTexts: sfpsHistoryTopologyServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsHistoryTopologyServerTable.setDescription('')
sfpsHistoryTopologyServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsHistoryTopologyServerIndex"))
if mibBuilder.loadTexts: sfpsHistoryTopologyServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsHistoryTopologyServerEntry.setDescription('')
sfpsHistoryTopologyServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsHistoryTopologyServerIndex.setDescription('Index')
sfpsHistoryTopologyServerLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerLogicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsHistoryTopologyServerLogicalPort.setDescription('Logical port neighbor was discovered on')
sfpsHistoryTopologyServerSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerSwitchID.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsHistoryTopologyServerSwitchID.setDescription("neighboring switch's switchID or portName")
sfpsHistoryTopologyServerEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("foundNeighbor", 1), ("optionsGain", 2), ("optionsLoss", 3), ("agingNghLoss", 4), ("portDownNghLoss", 5), ("duplicateNghLoss", 6), ("subtractPortNghLoss", 7), ("loopedPortNhgLoss", 8), ("crossedPortNghLoss", 9), ("functionalLevelNghLoss", 10), ("versionedPortNghLoss", 11), ("twoWayCommLoss", 12), ("sequenceNumberReset", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerEvent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsHistoryTopologyServerEvent.setDescription('Event')
sfpsHistoryTopologyServerSwitchIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerSwitchIP.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsHistoryTopologyServerSwitchIP.setDescription("neighboring switch's IP")
sfpsHistoryTopologyServerChassisMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 6), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerChassisMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsHistoryTopologyServerChassisMAC.setDescription('Chassis MAC address')
sfpsHistoryTopologyServerChassisIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerChassisIP.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsHistoryTopologyServerChassisIP.setDescription('Chassis IP address')
sfpsHistoryTopologyServerAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerAgent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsHistoryTopologyServerAgent.setDescription('topology agent that discovered neighbor')
sfpsHistoryTopologyServerDeltaOptionsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerDeltaOptionsMask.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsHistoryTopologyServerDeltaOptionsMask.setDescription(" switch's delta options mask")
sfpsHistoryTopologyServerCurrentOptionsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerCurrentOptionsMask.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsHistoryTopologyServerCurrentOptionsMask.setDescription('Current options mask')
sfpsHistoryTopologyServerFCL = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerFCL.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsHistoryTopologyServerFCL.setDescription('systime of options mask change')
sfpsHistoryTopologyServerSysTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 7, 7, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsHistoryTopologyServerSysTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsHistoryTopologyServerSysTime.setDescription('systime of switch')
sfpsTPMPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1), )
if mibBuilder.loadTexts: sfpsTPMPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortTable.setDescription('')
sfpsTPMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsTPMPortLogicalPort"))
if mibBuilder.loadTexts: sfpsTPMPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortEntry.setDescription('')
sfpsTPMPortLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortLogicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortLogicalPort.setDescription('Key')
sfpsTPMPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ethernet", 1), ("fddi", 2), ("atm-lec", 3), ("token-ring", 4), ("wan", 5), ("inb", 6), ("hcp", 7), ("hdp", 8), ("atm-encap", 9), ("atm-pvc", 10), ("unknown", 11), ("atm-forum-lec", 12), ("atm-forum-pvc", 13), ("atm-forum-svc", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortMediaType.setDescription('Gapi media type')
sfpsTPMPortTopologyAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortTopologyAgent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortTopologyAgent.setDescription('TopologyAgent of the port - NVRAM')
sfpsTPMPortVlanAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortVlanAttributes.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortVlanAttributes.setDescription('Port Vlan attributes')
sfpsTPMPortNVRAMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortNVRAMStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortNVRAMStatus.setDescription('NVRAM Status - set/unset')
sfpsTPMPortCorePortVID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortCorePortVID.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortCorePortVID.setDescription('')
sfpsTPMPortTableAPIInVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("getPortInfo", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInVerb.setDescription('Action to take')
sfpsTPMPortTableAPIInLogicalPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInLogicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInLogicalPort.setDescription('TPM Port Table entry specifier')
sfpsTPMPortTableAPIInTopologyAgent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInTopologyAgent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInTopologyAgent.setDescription('Modifies topologyAgent of the specified entry')
sfpsTPMPortTableAPIInAdminPortUp = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInAdminPortUp.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInAdminPortUp.setDescription('Modifies adminPortUp of the specified entry')
sfpsTPMPortTableAPIInAdminPortDown = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInAdminPortDown.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInAdminPortDown.setDescription('Modifies adminPortDown of the specified entry')
sfpsTPMPortTableAPIInCorePortVID = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInCorePortVID.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortTableAPIInCorePortVID.setDescription('')
sfpsTPMPortTableAPIOutLogicalPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIOutLogicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortTableAPIOutLogicalPort.setDescription('TPMPortTable entry specifier')
sfpsTPMPortTableAPIOutTopologyAgent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTPMPortTableAPIOutTopologyAgent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTPMPortTableAPIOutTopologyAgent.setDescription('Displays topologyAgent of the specified entry')
sfpsCommonNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1), )
if mibBuilder.loadTexts: sfpsCommonNeighborTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborTable.setDescription('The CommonNeighborTable holds all switch neighbors.  It is populated by all topology agents')
sfpsCommonNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsCommonNeighborLogicalPort"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsCommonNeighborSwitchID"))
if mibBuilder.loadTexts: sfpsCommonNeighborEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborEntry.setDescription('')
sfpsCommonNeighborLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborLogicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborLogicalPort.setDescription('Key')
sfpsCommonNeighborSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborSwitchID.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborSwitchID.setDescription('Key')
sfpsCommonNeighborSwitchIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborSwitchIP.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborSwitchIP.setDescription('IP address of neighboring switch')
sfpsCommonNeighborSwitchMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 4), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborSwitchMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborSwitchMAC.setDescription('Interface mac address of neighboring switch')
sfpsCommonNeighborSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vns", 1), ("vlan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborSwitchType.setDescription('Type of SecureFast switch')
sfpsCommonNeighborHellosReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborHellosReceived.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborHellosReceived.setDescription('Hello packet counter')
sfpsCommonNeighborFirstHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborFirstHeard.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborFirstHeard.setDescription('Time stamp of first hello received')
sfpsCommonNeighborLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborLastHeard.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborLastHeard.setDescription('Time stamp of last hello received')
sfpsCommonNeighborReceiveFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborReceiveFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborReceiveFrequency.setDescription('Allows CommonNeighborTable to age entries')
sfpsCommonNeighborTopologyAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborTopologyAgent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborTopologyAgent.setDescription('Owner of entry')
sfpsCommonNeighborChassisMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 11), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborChassisMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborChassisMAC.setDescription('Not currently used')
sfpsCommonNeighborCommState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("oneWay", 2), ("twoWay", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborCommState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborCommState.setDescription('Neighbor communication state')
sfpsCommonNeighborNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("unNotified", 2), ("notified", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborNotifyState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborNotifyState.setDescription('Topology server notification state')
sfpsCommonNeighborTwoWayLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborTwoWayLossCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborTwoWayLossCount.setDescription('Two-way communication loss count')
sfpsCommonNeighborTwoWayLossTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborTwoWayLossTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborTwoWayLossTime.setDescription('Time stamp of last two-way communication loss')
sfpsCommonNeighborSeqNumLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborSeqNumLossCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborSeqNumLossCount.setDescription('Sequence number loss count')
sfpsCommonNeighborSeqNumLossTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborSeqNumLossTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborSeqNumLossTime.setDescription('Timestamp of last sequence number loss')
sfpsCommonNeighborFalseAgingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborFalseAgingCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborFalseAgingCount.setDescription('False aging loss count')
sfpsCommonNeighborFalseAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborFalseAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborFalseAgingTime.setDescription('Timestamp of last false aging loss')
sfpsCommonNeighborChassisIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborChassisIP.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborChassisIP.setDescription('IP address of the switch chassis')
sfpsCommonNeighborFCL = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 21), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborFCL.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborFCL.setDescription('Functional Capability Level')
sfpsCommonNeighborOptionsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborOptionsMask.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborOptionsMask.setDescription('Bit encoded list of switch features')
sfpsCommonNeighborRcvdPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgnt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9), ("networkOnly", 10), ("accessOnly", 11), ("raPrimary", 12), ("uplink", 13), ("fclStandby", 14), ("loopStandby", 15), ("raStandby", 16), ("flood", 17), ("uplinkFlood", 18), ("downlingFlood", 19), ("unknown-ra-standy", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborRcvdPortState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborRcvdPortState.setDescription('')
sfpsCommonNeighborSendPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgnt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9), ("networkOnly", 10), ("accessOnly", 11), ("raPrimary", 12), ("uplink", 13), ("fclStandby", 14), ("loopStandby", 15), ("raStandby", 16), ("flood", 17), ("uplinkFlood", 18), ("downlingFlood", 19), ("unknown-ra-standy", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborSendPortState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborSendPortState.setDescription('')
sfpsCommonNeighborCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("compatible", 1), ("notCompatible", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborCompatibility.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborCompatibility.setDescription('Neighbor compatibility state')
sfpsCommonNeighborCorePortVID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsCommonNeighborCorePortVID.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsCommonNeighborCorePortVID.setDescription('')
sfpsTopologyFCLTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 7, 1), )
if mibBuilder.loadTexts: sfpsTopologyFCLTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyFCLTable.setDescription('')
sfpsTopologyFCLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 7, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsTopologyFCLFunctionalLevel"))
if mibBuilder.loadTexts: sfpsTopologyFCLEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyFCLEntry.setDescription('')
sfpsTopologyFCLFunctionalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyFCLFunctionalLevel.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyFCLFunctionalLevel.setDescription('functional compatability level')
sfpsTopologyFCLCompatability = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("compatable", 1), ("notCompatable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyFCLCompatability.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyFCLCompatability.setDescription("compatability to this switch's FCL")
sfpsTopologyFCLThisPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostManagement", 4), ("hostControl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyFCLThisPortState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyFCLThisPortState.setDescription("This switch's port state when neighboring a switch of this FCL")
sfpsTopologyFCLSendPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostManagement", 4), ("hostControl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsTopologyFCLSendPortState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyFCLSendPortState.setDescription("Sending switch's port state when neighboring a switch of this FCL")
sfpsNeighborEventsFoundEvents = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNeighborEventsFoundEvents.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNeighborEventsFoundEvents.setDescription('number of VLAN neighbors found')
sfpsNeighborEventsLostEvents = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsNeighborEventsLostEvents.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsNeighborEventsLostEvents.setDescription('number of VLAN neighbors lost')
sfpsRATopAgentNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1), )
if mibBuilder.loadTexts: sfpsRATopAgentNeighborTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentNeighborTable.setDescription('')
sfpsRATopAgentNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRATopAgentNeighborInPort"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRATopAgentNeighborSwitchID"))
if mibBuilder.loadTexts: sfpsRATopAgentNeighborEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentNeighborEntry.setDescription('')
sfpsRATopAgentNeighborInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborInPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentNeighborInPort.setDescription('Key')
sfpsRATopAgentNeighborSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborSwitchID.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentNeighborSwitchID.setDescription('Key')
sfpsRATopAgentNeighborPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborPriority.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentNeighborPriority.setDescription('Neighbor switch priority')
sfpsRATopAgentNeighborNetworkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborNetworkPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentNeighborNetworkPort.setDescription('')
sfpsRATopAgentNeighborCallTag = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborCallTag.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentNeighborCallTag.setDescription('')
sfpsRATopAgentNeighborNetHellosRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborNetHellosRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentNeighborNetHellosRcvd.setDescription('')
sfpsRATopAgentNeighborSeqNumMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborSeqNumMismatch.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentNeighborSeqNumMismatch.setDescription('')
sfpsRATopAgentNeighborNetHelloAgeTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborNetHelloAgeTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentNeighborNetHelloAgeTimeOuts.setDescription('')
sfpsRATopAgentNeighborNetHelloNetPortLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborNetHelloNetPortLosses.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentNeighborNetHelloNetPortLosses.setDescription('')
sfpsRATopAgentNeighborNetHelloNetPortChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentNeighborNetHelloNetPortChanges.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentNeighborNetHelloNetPortChanges.setDescription('')
sfpsRATopAgentPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2), )
if mibBuilder.loadTexts: sfpsRATopAgentPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTable.setDescription('')
sfpsRATopAgentPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRATopAgentPortLogicalPort"))
if mibBuilder.loadTexts: sfpsRATopAgentPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortEntry.setDescription('')
sfpsRATopAgentPortLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortLogicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortLogicalPort.setDescription('Key')
sfpsRATopAgentPortHelloVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("version1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortHelloVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortHelloVersion.setDescription('RAHello version of the port')
sfpsRATopAgentPortSendFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortSendFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortSendFrequency.setDescription('RAHello transmission frequency of the port')
sfpsRATopAgentPortRecvFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortRecvFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortRecvFrequency.setDescription('RAHello reception frequency of the port (used for aging neighbors)')
sfpsRATopAgentPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortPriority.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortPriority.setDescription('Priority of the port (used for primary switch election)')
sfpsRATopAgentPortPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("added", 1), ("init", 2), ("poised", 3), ("primary", 4), ("backup", 5), ("down", 6), ("halted", 7), ("deleted", 8), ("backupWait", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortPortState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortPortState.setDescription('RAPortState of the port')
sfpsRATopAgentPortPrimarySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 7), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortPrimarySwitch.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortPrimarySwitch.setDescription('BaseMAC Address of switch providing connectivity')
sfpsRATopAgentPortNetHelloRecvFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortNetHelloRecvFreq.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortNetHelloRecvFreq.setDescription('NetHelloRecvFreq of the port')
sfpsRATopAgentPortStateChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortStateChangeCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortStateChangeCount.setDescription('PortStateChangeCount of the port')
sfpsRATopAgentPortNVRAMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("unset", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortNVRAMStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortNVRAMStatus.setDescription('NVRAM status - set/unset')
sfpsRATopAgentPortTableAPIInVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("getPortInfo", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInVerb.setDescription('Action to take')
sfpsRATopAgentPortTableAPIInLogicalPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInLogicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInLogicalPort.setDescription('RATopAgentPortTable entry specifier')
sfpsRATopAgentPortTableAPIInHelloVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInHelloVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInHelloVersion.setDescription('Modifies helloVersion of the specified entry')
sfpsRATopAgentPortTableAPIInSendFrequency = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInSendFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInSendFrequency.setDescription('Modifies sendFrequency of the specified entry')
sfpsRATopAgentPortTableAPIInRecvFrequency = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInRecvFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInRecvFrequency.setDescription('modified receiveFrequency of the specified entry')
sfpsRATopAgentPortTableAPIInPriority = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInPriority.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInPriority.setDescription('Modifies priority of the specified entry')
sfpsRATopAgentPortTableAPIInNetHelloRecvFreq = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInNetHelloRecvFreq.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIInNetHelloRecvFreq.setDescription('Modifies NetHelloRecvFreq of the specified entry')
sfpsRATopAgentPortTableAPIOutLogicalPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutLogicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutLogicalPort.setDescription('RATopAgentPortTable entry specifier')
sfpsRATopAgentPortTableAPIOutHelloVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutHelloVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutHelloVersion.setDescription('RAHelloVersion of the specified entry')
sfpsRATopAgentPortTableAPIOutSendFrequency = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutSendFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutSendFrequency.setDescription('Modifies sendFrequency of specified entry')
sfpsRATopAgentPortTableAPIOutRecvFrequency = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutRecvFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutRecvFrequency.setDescription('Modifies receiveFrequency of specified entry')
sfpsRATopAgentPortTableAPIOutPriority = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutPriority.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutPriority.setDescription('Priority of the specified entry')
sfpsRATopAgentPortTableAPIOutPortState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("added", 1), ("init", 2), ("poised", 3), ("primary", 4), ("backup", 5), ("down", 6), ("halted", 7), ("deleted", 8), ("backupWait", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutPortState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutPortState.setDescription('RAPortState of the specified entry')
sfpsRATopAgentPortTableAPIOutPrimarySwitch = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 7), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutPrimarySwitch.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutPrimarySwitch.setDescription('BaseMAC address of switch providing connectivity')
sfpsRATopAgentPortTableAPIOutNetHelloRecvFreq = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutNetHelloRecvFreq.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutNetHelloRecvFreq.setDescription('NetHelloRecvFreq of the specified entry')
sfpsRATopAgentPortTableAPIOutPortStateChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 2, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutPortStateChangeCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRATopAgentPortTableAPIOutPortStateChangeCount.setDescription('PortStateChangeCount of the specified entry')
sfpsVMTopServerDeltaTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1), )
if mibBuilder.loadTexts: sfpsVMTopServerDeltaTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVMTopServerDeltaTable.setDescription('Table displaying status changes of neighboring switch')
sfpsVMTopServerDeltaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsVMTopServerDeltaIndex"))
if mibBuilder.loadTexts: sfpsVMTopServerDeltaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVMTopServerDeltaEntry.setDescription('Logical port neighboring switch was discovered on')
sfpsVMTopServerDeltaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerDeltaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVMTopServerDeltaIndex.setDescription('Table index')
sfpsVMTopServerDeltaInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerDeltaInPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVMTopServerDeltaInPort.setDescription('Logical port neighboring switch was discovered on')
sfpsVMTopServerDeltaSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerDeltaSwitchID.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVMTopServerDeltaSwitchID.setDescription('Switch ID or PortName of neighboring switch')
sfpsVMTopServerDeltaState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("added", 2), ("deleted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerDeltaState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVMTopServerDeltaState.setDescription('Status of neighboring switch - lost or found')
sfpsVMTopServerDeltaIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerDeltaIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVMTopServerDeltaIPAddress.setDescription('IP address of switch of neighboring switch')
sfpsVMTopServerDeltaAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerDeltaAgent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVMTopServerDeltaAgent.setDescription('Topology agent that discovered neighboring switch')
sfpsVMTopServerDeltaCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerDeltaCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVMTopServerDeltaCount.setDescription('Number of entries in Delta Table')
sfpsVMTopServerTableLock = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lock", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsVMTopServerTableLock.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVMTopServerTableLock.setDescription('Table update prevention while table is read')
sfpsVMTopServerPortChange = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPortChange", 1), ("portChange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerPortChange.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVMTopServerPortChange.setDescription('Port state change indictor')
sfpsVMTopServerTableFull = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tableFull", 1), ("tableNotFull", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVMTopServerTableFull.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVMTopServerTableFull.setDescription('')
sfpsVMTopServerChangeCnt = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsVMTopServerChangeCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVMTopServerChangeCnt.setDescription('')
sfpsTAPITestInVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("portUp", 3), ("portDown", 4), ("changePortAccess", 5), ("resolvePortNameToPort", 6), ("resolveBaseMACToPorts", 7), ("resolveINBNeighbor", 8), ("getPortNeighbors", 9), ("getTotalNeighbors", 10), ("getLogicalNetworkPortMask", 11), ("getPhysicalNetworkPortMask", 12), ("getPhysicalStandByPortMask", 13), ("getLogicalINBNetworkPortMask", 14), ("getPhysicalINBNetworkPortMask", 15), ("enableAccessPortOnly", 16), ("disableAccessPortOnly", 17), ("getPhysicalPortDownPortMask", 18), ("getLogicalSameFCLPortMask", 19), ("getNeighborFCL", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestInVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTAPITestInVerb.setDescription('Action input indicator')
sfpsTAPITestInLogicalPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestInLogicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTAPITestInLogicalPort.setDescription('Logical port input value')
sfpsTAPITestInSwitchID = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestInSwitchID.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTAPITestInSwitchID.setDescription('SwitchID or portName input value')
sfpsTAPITestInMAC = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestInMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTAPITestInMAC.setDescription('MAC Address input value')
sfpsTAPITestInPortTypeState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgmt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9), ("networkOnly", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestInPortTypeState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTAPITestInPortTypeState.setDescription('PortTypeState input value')
sfpsTAPITestInTopologyAgentID = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestInTopologyAgentID.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTAPITestInTopologyAgentID.setDescription('')
sfpsTAPITestInUNIT321 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestInUNIT321.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTAPITestInUNIT321.setDescription('')
sfpsTAPITestOutOutputInteger = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestOutOutputInteger.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTAPITestOutOutputInteger.setDescription('Integer output value')
sfpsTAPITestOutOutPutString = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 1, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTAPITestOutOutPutString.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTAPITestOutOutPutString.setDescription('String output value')
sfpsTopologyServerTestInVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("clear", 3), ("lostEvent", 4), ("foundEvent", 5), ("portEvent", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestInVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestInVerb.setDescription('Action input indicator')
sfpsTopologyServerTestInServer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestInServer.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestInServer.setDescription('Topology server to send toprelays to')
sfpsTopologyServerTestInNumberOfRelays = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestInNumberOfRelays.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestInNumberOfRelays.setDescription('Number of linked toprelays to send')
sfpsTopologyServerTestTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2), )
if mibBuilder.loadTexts: sfpsTopologyServerTestTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestTable.setDescription('Table displaying toprelay test entries')
sfpsTopologyServerTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsTopologyServerTestRelayNumber"))
if mibBuilder.loadTexts: sfpsTopologyServerTestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestEntry.setDescription('A toprelay plus its index')
sfpsTopologyServerTestRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestRelayNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestRelayNumber.setDescription('Toprelay index')
sfpsTopologyServerTestServerFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vns", 1), ("vlan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestServerFlavor.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestServerFlavor.setDescription('Type of neighbor/event relayed')
sfpsTopologyServerTestPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestPortNumber.setDescription('Logical port')
sfpsTopologyServerTestPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestPortName.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestPortName.setDescription('SwitchId or PortName of neighboring switch')
sfpsTopologyServerTestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestIpAddr.setDescription('IP address of neighboring switch')
sfpsTopologyServerTestLostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestLostPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestLostPort.setDescription('Electrical loss of port indicator')
sfpsTopologyServerTestOldState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgmt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestOldState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestOldState.setDescription('Previous port type state of port')
sfpsTopologyServerTestNewState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgmt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestNewState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestNewState.setDescription('Current port type state of port')
sfpsTopologyServerTestTopologyAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopologyAgent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestTopologyAgent.setDescription('Topology agent that discovered neighboring switch')
sfpsVLANTopAgentNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 1), )
if mibBuilder.loadTexts: sfpsVLANTopAgentNeighborTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentNeighborTable.setDescription('Table of neighboring switches')
sfpsVLANTopAgentNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsVLANTopAgentNeighborInPort"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsVLANTopAgentNeighborSwitchID"))
if mibBuilder.loadTexts: sfpsVLANTopAgentNeighborEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentNeighborEntry.setDescription('Neighboring switch descriptors')
sfpsVLANTopAgentNeighborInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentNeighborInPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentNeighborInPort.setDescription('Logical port neighbor was discovered on')
sfpsVLANTopAgentNeighborSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentNeighborSwitchID.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentNeighborSwitchID.setDescription('SwitchID or PortName of switch')
sfpsVLANTopAgentNeighborOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentNeighborOptions.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentNeighborOptions.setDescription('Functional capabilities of switch in bitmask')
sfpsVLANTopAgentPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2), )
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTable.setDescription('Table of logical ports')
sfpsVLANTopAgentPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsVLANTopAgentPortPort"))
if mibBuilder.loadTexts: sfpsVLANTopAgentPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentPortEntry.setDescription('Entry into VLANTopAgentPortTable - Logical port information')
sfpsVLANTopAgentPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentPortPort.setDescription('Logical port of switch')
sfpsVLANTopAgentPortHelloVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("versionOther", 1), ("version2", 2), ("version3", 3), ("version4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortHelloVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentPortHelloVersion.setDescription('Version of hello sent on the port')
sfpsVLANTopAgentPortSendFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortSendFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentPortSendFrequency.setDescription('Number of seconds between hellos sent')
sfpsVLANTopAgentPortRecvFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortRecvFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentPortRecvFrequency.setDescription('Number of seconds without hello reception')
sfpsVLANTopAgentPortPortOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortPortOptions.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentPortPortOptions.setDescription('Port options')
sfpsVLANTopAgentPortNVRAMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("unset", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortNVRAMStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentPortNVRAMStatus.setDescription('Status of NVRAM - set/unset')
sfpsVLANTopAgentPortTableAPIInVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("add", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTableAPIInVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTableAPIInVerb.setDescription('Action input indicator')
sfpsVLANTopAgentPortTableAPIInLogicalPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTableAPIInLogicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTableAPIInLogicalPort.setDescription('Logical port of switch')
sfpsVLANTopAgentPortTableAPIInHelloVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTableAPIInHelloVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTableAPIInHelloVersion.setDescription('Version of hello sent on the port')
sfpsVLANTopAgentPortTableAPIInSendFrequency = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTableAPIInSendFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTableAPIInSendFrequency.setDescription('Number of seconds between hellos sent')
sfpsVLANTopAgentPortTableAPIInRecvFrequency = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTableAPIInRecvFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVLANTopAgentPortTableAPIInRecvFrequency.setDescription('Number of seconds without hello reception')
sfpsIncompatibleNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2), )
if mibBuilder.loadTexts: sfpsIncompatibleNeighborTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborTable.setDescription('The IncompatibleNeighborTable holds all incompatible switch neighbors')
sfpsIncompatibleNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsIncompatibleNeighborLogicalPort"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsIncompatibleNeighborSwitchID"))
if mibBuilder.loadTexts: sfpsIncompatibleNeighborEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborEntry.setDescription('')
sfpsIncompatibleNeighborLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborLogicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborLogicalPort.setDescription('Key')
sfpsIncompatibleNeighborSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSwitchID.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSwitchID.setDescription('Key')
sfpsIncompatibleNeighborSwitchIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSwitchIP.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSwitchIP.setDescription('IP address of neighboring switch')
sfpsIncompatibleNeighborSwitchMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 4), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSwitchMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSwitchMAC.setDescription('Interface mac address of neighboring switch')
sfpsIncompatibleNeighborSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vns", 1), ("vlan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSwitchType.setDescription('Type of SecureFast switch')
sfpsIncompatibleNeighborHellosReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborHellosReceived.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborHellosReceived.setDescription('Hello packet counter')
sfpsIncompatibleNeighborFirstHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborFirstHeard.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborFirstHeard.setDescription('Time stamp of first hello received')
sfpsIncompatibleNeighborLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborLastHeard.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborLastHeard.setDescription('Time stamp of last hello received')
sfpsIncompatibleNeighborReceiveFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborReceiveFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborReceiveFrequency.setDescription('Allows IncompatibleNeighborTable to age entries')
sfpsIncompatibleNeighborTopologyAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborTopologyAgent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborTopologyAgent.setDescription('Owner of entry')
sfpsIncompatibleNeighborChassisMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 11), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborChassisMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborChassisMAC.setDescription('Not currently used')
sfpsIncompatibleNeighborCommState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("oneWay", 2), ("twoWay", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborCommState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborCommState.setDescription('Neighbor communication state')
sfpsIncompatibleNeighborNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("unNotified", 2), ("notified", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborNotifyState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborNotifyState.setDescription('Topology server notification state')
sfpsIncompatibleNeighborTwoWayLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborTwoWayLossCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborTwoWayLossCount.setDescription('Two-way communication loss count')
sfpsIncompatibleNeighborTwoWayLossTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborTwoWayLossTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborTwoWayLossTime.setDescription('Time stamp of last two-way communication loss')
sfpsIncompatibleNeighborSeqNumLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSeqNumLossCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSeqNumLossCount.setDescription('Sequence number loss count')
sfpsIncompatibleNeighborSeqNumLossTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSeqNumLossTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborSeqNumLossTime.setDescription('Timestamp of last sequence number loss')
sfpsIncompatibleNeighborFalseAgingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborFalseAgingCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborFalseAgingCount.setDescription('False aging loss count')
sfpsIncompatibleNeighborFalseAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborFalseAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborFalseAgingTime.setDescription('Timestamp of last false aging loss')
sfpsIncompatibleNeighborChassisIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborChassisIP.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborChassisIP.setDescription('IP address of the switch chassis')
sfpsIncompatibleNeighborFCL = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 21), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborFCL.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborFCL.setDescription('Functional Capability Level')
sfpsIncompatibleNeighborOptionsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborOptionsMask.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborOptionsMask.setDescription('Bit encoded list of switch features')
sfpsIncompatibleNeighborLocalPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgnt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborLocalPortState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborLocalPortState.setDescription("Neighbor's idea of what our port should be")
sfpsIncompatibleNeighborRemotePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgnt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAccess", 7), ("hybrid", 8), ("standBy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborRemotePortState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborRemotePortState.setDescription("This switch's idea of what the neighbor's port should be")
sfpsIncompatibleNeighborCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("compatible", 1), ("notCompatible", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsIncompatibleNeighborCompatibility.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsIncompatibleNeighborCompatibility.setDescription('Neighbor compatibility state')
sfpsDirViolationTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1), )
if mibBuilder.loadTexts: sfpsDirViolationTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationTable.setDescription('')
sfpsDirViolationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsDirViolationHash"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsDirViolationHashIndex"))
if mibBuilder.loadTexts: sfpsDirViolationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationEntry.setDescription('')
sfpsDirViolationHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationHash.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationHash.setDescription('')
sfpsDirViolationHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationHashIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationHashIndex.setDescription('')
sfpsDirViolationType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("userLock", 1), ("restrictPort", 2), ("ipNotLearned", 3), ("ipInvalid", 4), ("restrictMobility", 5), ("userLockSamePort", 6), ("sapDisabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationType.setDescription('')
sfpsDirViolationSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationSrcPort.setDescription('')
sfpsDirViolationAOType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("aoMacDX", 1), ("aoIpxSap", 2), ("aoIpxRIP", 3), ("aoInetYP", 4), ("aoInetUDP", 5), ("aoIpxIpx", 6), ("aoInetIP", 7), ("aoInetRPC", 8), ("aoInetRIP", 9), ("aoMacDXMcast", 10), ("aoAtDDP", 11), ("aoEmpty", 12), ("aoVlan", 13), ("aoHostName", 14), ("aoNetBiosName", 15), ("aoInetIPMask", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationAOType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationAOType.setDescription('')
sfpsDirViolationAOValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationAOValue.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationAOValue.setDescription('')
sfpsDirViolationLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationLocalPort.setDescription('')
sfpsDirViolationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationCount.setDescription('')
sfpsDirViolationLastSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationLastSeen.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationLastSeen.setDescription('')
sfpsDirViolationFirstSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationFirstSeen.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationFirstSeen.setDescription('')
sfpsDirViolationSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationSrcMac.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationSrcMac.setDescription('')
sfpsDirViolationCPId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationCPId.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationCPId.setDescription('')
sfpsDirViolationAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3), ("reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirViolationAPIVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationAPIVerb.setDescription('Specifies the action to be initiated as a result of setting this leaf.')
sfpsDirViolationAPIViolType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("restrictPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirViolationAPIViolType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationAPIViolType.setDescription('Specifies the violation type.')
sfpsDirViolationAPISourcePort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirViolationAPISourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationAPISourcePort.setDescription('Specifies source port')
sfpsDirViolationAPIAOType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirViolationAPIAOType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationAPIAOType.setDescription('Specifies AO type')
sfpsDirViolationAPIAOValue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirViolationAPIAOValue.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationAPIAOValue.setDescription('Specifies AO value')
sfpsDirViolationAPIChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationAPIChangeCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationAPIChangeCount.setDescription('')
sfpsDirViolationAPICPId = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationAPICPId.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationAPICPId.setDescription('')
sfpsDirViolationDeltaTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 3), )
if mibBuilder.loadTexts: sfpsDirViolationDeltaTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationDeltaTable.setDescription('')
sfpsDirViolationDeltaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 3, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsDirViolationDeltaIndex"))
if mibBuilder.loadTexts: sfpsDirViolationDeltaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationDeltaEntry.setDescription('')
sfpsDirViolationDeltaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationDeltaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationDeltaIndex.setDescription('')
sfpsDirViolationDeltaSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationDeltaSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationDeltaSrcPort.setDescription('')
sfpsDirViolationDeltaAOType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("aoMacDX", 1), ("aoIpxSap", 2), ("aoIpxRIP", 3), ("aoInetYP", 4), ("aoInetUDP", 5), ("aoIpxIpx", 6), ("aoInetIP", 7), ("aoInetRPC", 8), ("aoInetRIP", 9), ("aoMacDXMcast", 10), ("aoAtDDP", 11), ("aoEmpty", 12), ("aoVlan", 13), ("aoHostName", 14), ("aoNetBiosName", 15), ("aoInetIPMask", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationDeltaAOType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationDeltaAOType.setDescription('')
sfpsDirViolationDeltaAOValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationDeltaAOValue.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationDeltaAOValue.setDescription('')
sfpsDirViolationDeltaEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("added", 2), ("deleted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationDeltaEntryType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationDeltaEntryType.setDescription('')
sfpsDirViolationDeltaAPINumEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirViolationDeltaAPINumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationDeltaAPINumEntries.setDescription('Specifies the number of entries in the Directory Violation Delta Table')
sfpsDirViolationDeltaAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lock", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirViolationDeltaAPIVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirViolationDeltaAPIVerb.setDescription('Set the state of the Violation Table.  When the table is locked,\n                 no changes to the Violation Table will be allowed. Events that occur \n                 while the table is locked will not be logged when the table is \n                 subsequently unlocked.')
sfpsRestrictedPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 2, 1), )
if mibBuilder.loadTexts: sfpsRestrictedPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedPortTable.setDescription('')
sfpsRestrictedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRestrictedPortPort"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRestrictedPortHash"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRestrictedPortHashIndex"))
if mibBuilder.loadTexts: sfpsRestrictedPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedPortEntry.setDescription('')
sfpsRestrictedPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedPortPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedPortPort.setDescription('')
sfpsRestrictedPortHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedPortHash.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedPortHash.setDescription('')
sfpsRestrictedPortHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedPortHashIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedPortHashIndex.setDescription('')
sfpsRestrictedPortSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedPortSrcMac.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedPortSrcMac.setDescription('')
sfpsDirLockStatsNumViolators = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsNumViolators.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirLockStatsNumViolators.setDescription('')
sfpsDirLockStatsNumNodeLocked = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsNumNodeLocked.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirLockStatsNumNodeLocked.setDescription('')
sfpsDirLockStatsNumAliasLocked = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsNumAliasLocked.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirLockStatsNumAliasLocked.setDescription('')
sfpsDirLockStatsNumRestrictedPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsNumRestrictedPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirLockStatsNumRestrictedPort.setDescription('')
sfpsDirLockStatsNumRestrictMob = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsNumRestrictMob.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirLockStatsNumRestrictMob.setDescription('')
sfpsDirLockStatsViolationTblSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsViolationTblSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirLockStatsViolationTblSize.setDescription('')
sfpsDirLockStatsRestrictPortTblSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsRestrictPortTblSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirLockStatsRestrictPortTblSize.setDescription('')
sfpsDirLockStatsRestrictMobTblSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockStatsRestrictMobTblSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirLockStatsRestrictMobTblSize.setDescription('')
sfpsDirLockConfigUserLocking = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirLockConfigUserLocking.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirLockConfigUserLocking.setDescription('')
sfpsDirLockConfigRestrictedPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirLockConfigRestrictedPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirLockConfigRestrictedPort.setDescription('')
sfpsDirLockConfigRouterPortLock = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsDirLockConfigRouterPortLock.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirLockConfigRouterPortLock.setDescription('')
sfpsDirLockConfigRAPortLock = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDirLockConfigRAPortLock.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDirLockConfigRAPortLock.setDescription('')
sfpsDapiNvramStatsVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("clearAllEntries", 2), ("clearAllUserLock", 3), ("clearAllSrcUnblock", 4), ("clearAllPortUnblock", 5), ("clearAllLimitMobility", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDapiNvramStatsVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDapiNvramStatsVerb.setDescription('')
sfpsDapiNvramStatsTotalEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDapiNvramStatsTotalEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDapiNvramStatsTotalEntries.setDescription('')
sfpsDapiNvramStatsMacEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDapiNvramStatsMacEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDapiNvramStatsMacEntries.setDescription('')
sfpsDapiNvramStatsAliasEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDapiNvramStatsAliasEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDapiNvramStatsAliasEntries.setDescription('')
sfpsDapiNvramStatsMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDapiNvramStatsMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDapiNvramStatsMaxEntries.setDescription('')
sfpsDapiNvramStatsNvramUsed = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 16, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsDapiNvramStatsNvramUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsDapiNvramStatsNvramUsed.setDescription('')
sfpsESPTopAgentPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 3, 2), )
if mibBuilder.loadTexts: sfpsESPTopAgentPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsESPTopAgentPortTable.setDescription('')
sfpsESPTopAgentPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 3, 2, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsESPTopAgentPortPort"))
if mibBuilder.loadTexts: sfpsESPTopAgentPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsESPTopAgentPortEntry.setDescription('')
sfpsESPTopAgentPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsESPTopAgentPortPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsESPTopAgentPortPort.setDescription('Key')
sfpsESPTopAgentPortHelloVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("versionOther", 1), ("version2", 2), ("version3", 3), ("version4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsESPTopAgentPortHelloVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsESPTopAgentPortHelloVersion.setDescription('Key')
sfpsESPTopAgentPortSendFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsESPTopAgentPortSendFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsESPTopAgentPortSendFrequency.setDescription('Key')
sfpsESPTopAgentPortRecvFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 3, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsESPTopAgentPortRecvFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsESPTopAgentPortRecvFrequency.setDescription('Key')
sfpsTopologyServerTestTopRelayTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3), )
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayTable.setDescription('Table displaying top relay test entries')
sfpsTopologyServerTestTopRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsTopologyServerTestTopRelayRelayNumber"))
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayEntry.setDescription('A top relay plus its index')
sfpsTopologyServerTestTopRelayRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayRelayNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayRelayNumber.setDescription('Toprelay index')
sfpsTopologyServerTestTopRelayEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayEvent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayEvent.setDescription('')
sfpsTopologyServerTestTopRelayDeltaOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("foundNeighbor", 1), ("optionsGain", 2), ("optionsLoss", 3), ("agingNghLoss", 4), ("portDownNghLoss", 5), ("duplicateNghLoss", 6), ("subtractPortNghLoss", 7), ("loopedPortNghLoss", 8), ("crossedPortNghLoss", 9), ("functionalLevelNghLoss", 10), ("versionedPortNghLoss", 11), ("twoWayCommLoss", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayDeltaOptions.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayDeltaOptions.setDescription('')
sfpsTopologyServerTestTopRelayCurrentOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayCurrentOptions.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayCurrentOptions.setDescription('')
sfpsTopologyServerTestTopRelayLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayLogicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayLogicalPort.setDescription('')
sfpsTopologyServerTestTopRelayPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayPortName.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayPortName.setDescription('')
sfpsTopologyServerTestTopRelayIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayIPAddr.setDescription('')
sfpsTopologyServerTestTopRelayChassisMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 8), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayChassisMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayChassisMAC.setDescription('')
sfpsTopologyServerTestTopRelayChassisIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayChassisIP.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayChassisIP.setDescription('')
sfpsTopologyServerTestTopRelayFLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayFLevel.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayFLevel.setDescription('')
sfpsTopologyServerTestTopRelayTopologyAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayTopologyAgent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerTestTopRelayTopologyAgent.setDescription('')
sfpsRestrictedMobilityTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 1), )
if mibBuilder.loadTexts: sfpsRestrictedMobilityTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedMobilityTable.setDescription('')
sfpsRestrictedMobilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 1, 1), ).setIndexNames((0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRestrictedMobilityHash"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRestrictedMobilityPort"), (0, "CTRON-SFPS-TOPOLOGY-MIB", "sfpsRestrictedMobilityHashIndex"))
if mibBuilder.loadTexts: sfpsRestrictedMobilityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedMobilityEntry.setDescription('')
sfpsRestrictedMobilityHash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedMobilityHash.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedMobilityHash.setDescription('')
sfpsRestrictedMobilityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedMobilityPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedMobilityPort.setDescription('')
sfpsRestrictedMobilityHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedMobilityHashIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedMobilityHashIndex.setDescription('')
sfpsRestrictedMobilitySrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedMobilitySrcMac.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedMobilitySrcMac.setDescription('')
sfpsRestrictedMobilitySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 1, 1, 5), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsRestrictedMobilitySwitch.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedMobilitySwitch.setDescription('')
sfpsRestrictedMobilityAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3), ("reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRestrictedMobilityAPIVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedMobilityAPIVerb.setDescription('')
sfpsRestrictedMobilityAPISourcePort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRestrictedMobilityAPISourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedMobilityAPISourcePort.setDescription('')
sfpsRestrictedMobilityAPISrcMac = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 2, 3), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRestrictedMobilityAPISrcMac.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedMobilityAPISrcMac.setDescription('')
sfpsRestrictedMobilityAPISwitch = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 15, 5, 2, 4), SfpsAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsRestrictedMobilityAPISwitch.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsRestrictedMobilityAPISwitch.setDescription('')
sfpsTopologyServerPortEventRelayLogicalPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerPortEventRelayLogicalPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerPortEventRelayLogicalPort.setDescription('')
sfpsTopologyServerPortEventRelayOldState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgmt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAcces", 7), ("standBy", 8), ("networkOnly", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerPortEventRelayOldState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerPortEventRelayOldState.setDescription('')
sfpsTopologyServerPortEventRelayNewState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 2, 3, 12, 5, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("network", 3), ("hostMgmt", 4), ("hostCtrl", 5), ("unknown", 6), ("goingToAcces", 7), ("standBy", 8), ("networkOnly", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsTopologyServerPortEventRelayNewState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsTopologyServerPortEventRelayNewState.setDescription('')
mibBuilder.exportSymbols("CTRON-SFPS-TOPOLOGY-MIB", sfpsCommonNeighborOptionsMask=sfpsCommonNeighborOptionsMask, sfpsDirLockConfigUserLocking=sfpsDirLockConfigUserLocking, sfpsDirLockStatsNumAliasLocked=sfpsDirLockStatsNumAliasLocked, sfpsTopologyServerTestServerFlavor=sfpsTopologyServerTestServerFlavor, sfpsDirViolationAPIViolType=sfpsDirViolationAPIViolType, sfpsDirLockStatsNumViolators=sfpsDirLockStatsNumViolators, sfpsVLANTopAgentNeighborInPort=sfpsVLANTopAgentNeighborInPort, sfpsIncompatibleNeighborReceiveFrequency=sfpsIncompatibleNeighborReceiveFrequency, sfpsRATopAgentPortTableAPIOutHelloVersion=sfpsRATopAgentPortTableAPIOutHelloVersion, sfpsTopologyServerTestIpAddr=sfpsTopologyServerTestIpAddr, sfpsTopologyServerTestTopRelayRelayNumber=sfpsTopologyServerTestTopRelayRelayNumber, sfpsVMTopServerDeltaInPort=sfpsVMTopServerDeltaInPort, sfpsHistoryTopologyServerChassisMAC=sfpsHistoryTopologyServerChassisMAC, sfpsRestrictedPortHashIndex=sfpsRestrictedPortHashIndex, sfpsTopologyServerTestTopRelayCurrentOptions=sfpsTopologyServerTestTopRelayCurrentOptions, sfpsTopologyServerTestInServer=sfpsTopologyServerTestInServer, sfpsCommonNeighborSeqNumLossTime=sfpsCommonNeighborSeqNumLossTime, sfpsTopologyServerTestTopRelayIPAddr=sfpsTopologyServerTestTopRelayIPAddr, sfpsRATopAgentPortTableAPIOutPortStateChangeCount=sfpsRATopAgentPortTableAPIOutPortStateChangeCount, sfpsVMTopServerDeltaTable=sfpsVMTopServerDeltaTable, sfpsServiceCenterTopologyHashLeaf=sfpsServiceCenterTopologyHashLeaf, sfpsTopologyServerTestOldState=sfpsTopologyServerTestOldState, sfpsDirViolationDeltaAOType=sfpsDirViolationDeltaAOType, sfpsVMTopServerDeltaState=sfpsVMTopServerDeltaState, sfpsHistoryTopologyServerLogicalPort=sfpsHistoryTopologyServerLogicalPort, sfpsVLANTopAgentPortRecvFrequency=sfpsVLANTopAgentPortRecvFrequency, sfpsCommonNeighborLastHeard=sfpsCommonNeighborLastHeard, sfpsVMTopServerTableLock=sfpsVMTopServerTableLock, sfpsRATopAgentNeighborNetHellosRcvd=sfpsRATopAgentNeighborNetHellosRcvd, sfpsCommonNeighborCommState=sfpsCommonNeighborCommState, sfpsCommonNeighborLogicalPort=sfpsCommonNeighborLogicalPort, SfpsAddress=SfpsAddress, sfpsServiceCenterTopologyResponses=sfpsServiceCenterTopologyResponses, sfpsRestrictedPortTable=sfpsRestrictedPortTable, sfpsESPTopAgentPortEntry=sfpsESPTopAgentPortEntry, sfpsRATopAgentNeighborTable=sfpsRATopAgentNeighborTable, sfpsTPMPortLogicalPort=sfpsTPMPortLogicalPort, sfpsTopologyServerPortEventRelayOldState=sfpsTopologyServerPortEventRelayOldState, sfpsTopologyServerTestTopRelayTable=sfpsTopologyServerTestTopRelayTable, sfpsVMTopServerDeltaIPAddress=sfpsVMTopServerDeltaIPAddress, sfpsServiceCenterTopologyEntry=sfpsServiceCenterTopologyEntry, sfpsTPMPortTableAPIInVerb=sfpsTPMPortTableAPIInVerb, sfpsTopologyServerTestPortName=sfpsTopologyServerTestPortName, sfpsTopologyServerTestPortNumber=sfpsTopologyServerTestPortNumber, sfpsHistoryTopologyServerAgent=sfpsHistoryTopologyServerAgent, sfpsIncompatibleNeighborTopologyAgent=sfpsIncompatibleNeighborTopologyAgent, sfpsDirViolationAPIVerb=sfpsDirViolationAPIVerb, sfpsTopologyFCLSendPortState=sfpsTopologyFCLSendPortState, sfpsRATopAgentNeighborSeqNumMismatch=sfpsRATopAgentNeighborSeqNumMismatch, sfpsDirViolationAPICPId=sfpsDirViolationAPICPId, sfpsRATopAgentPortSendFrequency=sfpsRATopAgentPortSendFrequency, sfpsVLANTopAgentPortTableAPIInLogicalPort=sfpsVLANTopAgentPortTableAPIInLogicalPort, sfpsTopologyServerTestTopRelayEvent=sfpsTopologyServerTestTopRelayEvent, sfpsCommonNeighborNotifyState=sfpsCommonNeighborNotifyState, sfpsDirViolationSrcPort=sfpsDirViolationSrcPort, sfpsDapiNvramStatsTotalEntries=sfpsDapiNvramStatsTotalEntries, sfpsRestrictedMobilitySrcMac=sfpsRestrictedMobilitySrcMac, sfpsTopologyServerTestRelayNumber=sfpsTopologyServerTestRelayNumber, sfpsIncompatibleNeighborChassisIP=sfpsIncompatibleNeighborChassisIP, sfpsNeighborEventsFoundEvents=sfpsNeighborEventsFoundEvents, sfpsTPMPortMediaType=sfpsTPMPortMediaType, sfpsRATopAgentPortTableAPIOutSendFrequency=sfpsRATopAgentPortTableAPIOutSendFrequency, sfpsHistoryTopologyServerChassisIP=sfpsHistoryTopologyServerChassisIP, sfpsRATopAgentPortTableAPIOutNetHelloRecvFreq=sfpsRATopAgentPortTableAPIOutNetHelloRecvFreq, sfpsTPMPortTableAPIInAdminPortDown=sfpsTPMPortTableAPIInAdminPortDown, sfpsTPMPortNVRAMStatus=sfpsTPMPortNVRAMStatus, sfpsIncompatibleNeighborOptionsMask=sfpsIncompatibleNeighborOptionsMask, sfpsTPMPortTableAPIInAdminPortUp=sfpsTPMPortTableAPIInAdminPortUp, sfpsHistoryTopologyServerIndex=sfpsHistoryTopologyServerIndex, sfpsDirLockStatsNumRestrictedPort=sfpsDirLockStatsNumRestrictedPort, sfpsTAPITestOutOutPutString=sfpsTAPITestOutOutPutString, sfpsDirLockStatsNumRestrictMob=sfpsDirLockStatsNumRestrictMob, sfpsDirViolationHash=sfpsDirViolationHash, sfpsTopologyServerTestTable=sfpsTopologyServerTestTable, sfpsDirViolationSrcMac=sfpsDirViolationSrcMac, sfpsDapiNvramStatsAliasEntries=sfpsDapiNvramStatsAliasEntries, sfpsRATopAgentPortNVRAMStatus=sfpsRATopAgentPortNVRAMStatus, sfpsRATopAgentPortTableAPIInSendFrequency=sfpsRATopAgentPortTableAPIInSendFrequency, sfpsVLANTopAgentPortPort=sfpsVLANTopAgentPortPort, sfpsServiceCenterTopologyStatusTime=sfpsServiceCenterTopologyStatusTime, sfpsRATopAgentPortTableAPIInVerb=sfpsRATopAgentPortTableAPIInVerb, sfpsServiceCenterTopologyRequests=sfpsServiceCenterTopologyRequests, sfpsTopologyFCLFunctionalLevel=sfpsTopologyFCLFunctionalLevel, sfpsNeighborEventsLostEvents=sfpsNeighborEventsLostEvents, sfpsIncompatibleNeighborLocalPortState=sfpsIncompatibleNeighborLocalPortState, sfpsRestrictedPortPort=sfpsRestrictedPortPort, sfpsVMTopServerChangeCnt=sfpsVMTopServerChangeCnt, sfpsHistoryTopologyServerDeltaOptionsMask=sfpsHistoryTopologyServerDeltaOptionsMask, sfpsESPTopAgentPortRecvFrequency=sfpsESPTopAgentPortRecvFrequency, HexInteger=HexInteger, sfpsServiceCenterTopologyTable=sfpsServiceCenterTopologyTable, sfpsRestrictedMobilityAPIVerb=sfpsRestrictedMobilityAPIVerb, sfpsCommonNeighborTwoWayLossCount=sfpsCommonNeighborTwoWayLossCount, sfpsRestrictedMobilityAPISrcMac=sfpsRestrictedMobilityAPISrcMac, sfpsVLANTopAgentPortTableAPIInVerb=sfpsVLANTopAgentPortTableAPIInVerb, sfpsESPTopAgentPortSendFrequency=sfpsESPTopAgentPortSendFrequency, sfpsVLANTopAgentPortTableAPIInSendFrequency=sfpsVLANTopAgentPortTableAPIInSendFrequency, sfpsDirViolationAOType=sfpsDirViolationAOType, sfpsRestrictedMobilityAPISourcePort=sfpsRestrictedMobilityAPISourcePort, sfpsRATopAgentPortTableAPIOutPrimarySwitch=sfpsRATopAgentPortTableAPIOutPrimarySwitch, sfpsHistoryTopologyServerTable=sfpsHistoryTopologyServerTable, sfpsServiceCenterTopologyOperStatus=sfpsServiceCenterTopologyOperStatus, sfpsTopologyServerTestTopRelayPortName=sfpsTopologyServerTestTopRelayPortName, sfpsHistoryTopologyServerSwitchIP=sfpsHistoryTopologyServerSwitchIP, sfpsRestrictedMobilitySwitch=sfpsRestrictedMobilitySwitch, sfpsCommonNeighborTopologyAgent=sfpsCommonNeighborTopologyAgent, sfpsRATopAgentNeighborInPort=sfpsRATopAgentNeighborInPort, sfpsRATopAgentNeighborPriority=sfpsRATopAgentNeighborPriority, sfpsDirViolationTable=sfpsDirViolationTable, sfpsRestrictedMobilityEntry=sfpsRestrictedMobilityEntry, sfpsRATopAgentNeighborNetHelloNetPortChanges=sfpsRATopAgentNeighborNetHelloNetPortChanges, sfpsVMTopServerDeltaSwitchID=sfpsVMTopServerDeltaSwitchID, sfpsRestrictedMobilityTable=sfpsRestrictedMobilityTable, sfpsRestrictedPortEntry=sfpsRestrictedPortEntry, sfpsRestrictedPortSrcMac=sfpsRestrictedPortSrcMac, sfpsRATopAgentPortTableAPIOutPortState=sfpsRATopAgentPortTableAPIOutPortState, sfpsTopologyFCLThisPortState=sfpsTopologyFCLThisPortState, sfpsRATopAgentPortHelloVersion=sfpsRATopAgentPortHelloVersion, sfpsVMTopServerTableFull=sfpsVMTopServerTableFull, sfpsDirViolationDeltaSrcPort=sfpsDirViolationDeltaSrcPort, sfpsRestrictedMobilityHashIndex=sfpsRestrictedMobilityHashIndex, sfpsIncompatibleNeighborSwitchType=sfpsIncompatibleNeighborSwitchType, sfpsDirViolationDeltaEntry=sfpsDirViolationDeltaEntry, sfpsDirLockConfigRouterPortLock=sfpsDirLockConfigRouterPortLock, sfpsRATopAgentPortTableAPIInPriority=sfpsRATopAgentPortTableAPIInPriority, sfpsVLANTopAgentPortPortOptions=sfpsVLANTopAgentPortPortOptions, sfpsVMTopServerPortChange=sfpsVMTopServerPortChange, sfpsRATopAgentPortTableAPIInRecvFrequency=sfpsRATopAgentPortTableAPIInRecvFrequency, sfpsESPTopAgentPortTable=sfpsESPTopAgentPortTable, sfpsCommonNeighborFCL=sfpsCommonNeighborFCL, sfpsRATopAgentPortPriority=sfpsRATopAgentPortPriority, sfpsTAPITestInLogicalPort=sfpsTAPITestInLogicalPort, sfpsTAPITestInTopologyAgentID=sfpsTAPITestInTopologyAgentID, sfpsVLANTopAgentNeighborOptions=sfpsVLANTopAgentNeighborOptions, sfpsIncompatibleNeighborCommState=sfpsIncompatibleNeighborCommState, sfpsHistoryTopologyServerFCL=sfpsHistoryTopologyServerFCL, sfpsTopologyServerTestInVerb=sfpsTopologyServerTestInVerb, sfpsRATopAgentPortTableAPIOutRecvFrequency=sfpsRATopAgentPortTableAPIOutRecvFrequency, sfpsVLANTopAgentPortTable=sfpsVLANTopAgentPortTable, sfpsIncompatibleNeighborTwoWayLossTime=sfpsIncompatibleNeighborTwoWayLossTime, sfpsRATopAgentNeighborNetHelloAgeTimeOuts=sfpsRATopAgentNeighborNetHelloAgeTimeOuts, sfpsDirViolationDeltaAPIVerb=sfpsDirViolationDeltaAPIVerb, sfpsTopologyServerTestTopRelayChassisIP=sfpsTopologyServerTestTopRelayChassisIP, sfpsCommonNeighborRcvdPortState=sfpsCommonNeighborRcvdPortState, sfpsCommonNeighborSwitchType=sfpsCommonNeighborSwitchType, sfpsIncompatibleNeighborSwitchMAC=sfpsIncompatibleNeighborSwitchMAC, sfpsRATopAgentPortEntry=sfpsRATopAgentPortEntry, sfpsRestrictedMobilityPort=sfpsRestrictedMobilityPort, sfpsCommonNeighborReceiveFrequency=sfpsCommonNeighborReceiveFrequency, sfpsIncompatibleNeighborHellosReceived=sfpsIncompatibleNeighborHellosReceived, sfpsVMTopServerDeltaAgent=sfpsVMTopServerDeltaAgent, sfpsVLANTopAgentPortHelloVersion=sfpsVLANTopAgentPortHelloVersion, sfpsTAPITestInSwitchID=sfpsTAPITestInSwitchID, sfpsTopologyServerTestTopRelayEntry=sfpsTopologyServerTestTopRelayEntry, sfpsIncompatibleNeighborTable=sfpsIncompatibleNeighborTable, sfpsTAPITestInMAC=sfpsTAPITestInMAC, sfpsTPMPortTableAPIOutTopologyAgent=sfpsTPMPortTableAPIOutTopologyAgent, sfpsTopologyServerTestInNumberOfRelays=sfpsTopologyServerTestInNumberOfRelays, sfpsTopologyFCLEntry=sfpsTopologyFCLEntry, sfpsDapiNvramStatsNvramUsed=sfpsDapiNvramStatsNvramUsed, sfpsIncompatibleNeighborChassisMAC=sfpsIncompatibleNeighborChassisMAC, sfpsRATopAgentPortRecvFrequency=sfpsRATopAgentPortRecvFrequency, sfpsDirViolationLocalPort=sfpsDirViolationLocalPort, sfpsIncompatibleNeighborCompatibility=sfpsIncompatibleNeighborCompatibility, sfpsRestrictedMobilityAPISwitch=sfpsRestrictedMobilityAPISwitch, sfpsRestrictedPortHash=sfpsRestrictedPortHash, sfpsHistoryTopologyServerEvent=sfpsHistoryTopologyServerEvent, sfpsVLANTopAgentPortEntry=sfpsVLANTopAgentPortEntry, sfpsDirViolationAPISourcePort=sfpsDirViolationAPISourcePort, sfpsTopologyServerTestTopRelayFLevel=sfpsTopologyServerTestTopRelayFLevel, sfpsDirViolationAPIAOType=sfpsDirViolationAPIAOType, sfpsTPMPortTableAPIInTopologyAgent=sfpsTPMPortTableAPIInTopologyAgent, sfpsVLANTopAgentNeighborEntry=sfpsVLANTopAgentNeighborEntry, sfpsTopologyServerTestTopRelayDeltaOptions=sfpsTopologyServerTestTopRelayDeltaOptions, sfpsTPMPortCorePortVID=sfpsTPMPortCorePortVID, sfpsVLANTopAgentPortTableAPIInRecvFrequency=sfpsVLANTopAgentPortTableAPIInRecvFrequency, sfpsCommonNeighborChassisIP=sfpsCommonNeighborChassisIP, sfpsDirViolationFirstSeen=sfpsDirViolationFirstSeen, sfpsTopologyServerTestNewState=sfpsTopologyServerTestNewState, sfpsRATopAgentNeighborSwitchID=sfpsRATopAgentNeighborSwitchID, sfpsIncompatibleNeighborSwitchID=sfpsIncompatibleNeighborSwitchID, sfpsIncompatibleNeighborLastHeard=sfpsIncompatibleNeighborLastHeard, sfpsIncompatibleNeighborSeqNumLossCount=sfpsIncompatibleNeighborSeqNumLossCount, sfpsTPMPortTable=sfpsTPMPortTable, sfpsIncompatibleNeighborFalseAgingTime=sfpsIncompatibleNeighborFalseAgingTime, sfpsCommonNeighborSendPortState=sfpsCommonNeighborSendPortState, sfpsTAPITestInPortTypeState=sfpsTAPITestInPortTypeState, sfpsIncompatibleNeighborRemotePortState=sfpsIncompatibleNeighborRemotePortState, sfpsCommonNeighborEntry=sfpsCommonNeighborEntry, sfpsIncompatibleNeighborFalseAgingCount=sfpsIncompatibleNeighborFalseAgingCount, sfpsDirViolationHashIndex=sfpsDirViolationHashIndex, sfpsDirLockStatsRestrictPortTblSize=sfpsDirLockStatsRestrictPortTblSize, sfpsServiceCenterTopologyName=sfpsServiceCenterTopologyName, sfpsRATopAgentPortPrimarySwitch=sfpsRATopAgentPortPrimarySwitch, sfpsIncompatibleNeighborSwitchIP=sfpsIncompatibleNeighborSwitchIP, sfpsIncompatibleNeighborLogicalPort=sfpsIncompatibleNeighborLogicalPort, sfpsRATopAgentPortPortState=sfpsRATopAgentPortPortState, sfpsDirViolationType=sfpsDirViolationType, sfpsVLANTopAgentPortTableAPIInHelloVersion=sfpsVLANTopAgentPortTableAPIInHelloVersion, sfpsDirViolationDeltaAPINumEntries=sfpsDirViolationDeltaAPINumEntries, sfpsDirLockStatsViolationTblSize=sfpsDirLockStatsViolationTblSize, sfpsESPTopAgentPortPort=sfpsESPTopAgentPortPort, sfpsTopologyServerTestEntry=sfpsTopologyServerTestEntry, sfpsIncompatibleNeighborNotifyState=sfpsIncompatibleNeighborNotifyState, sfpsDirViolationCPId=sfpsDirViolationCPId, sfpsDirViolationEntry=sfpsDirViolationEntry, sfpsCommonNeighborCompatibility=sfpsCommonNeighborCompatibility, sfpsRATopAgentPortTableAPIInNetHelloRecvFreq=sfpsRATopAgentPortTableAPIInNetHelloRecvFreq, sfpsDirViolationAOValue=sfpsDirViolationAOValue, sfpsVMTopServerDeltaEntry=sfpsVMTopServerDeltaEntry, sfpsTopologyServerTestTopRelayChassisMAC=sfpsTopologyServerTestTopRelayChassisMAC, sfpsHistoryTopologyServerSwitchID=sfpsHistoryTopologyServerSwitchID, sfpsCommonNeighborFalseAgingTime=sfpsCommonNeighborFalseAgingTime, sfpsTPMPortVlanAttributes=sfpsTPMPortVlanAttributes, sfpsHistoryTopologyServerEntry=sfpsHistoryTopologyServerEntry, sfpsTAPITestInVerb=sfpsTAPITestInVerb, sfpsCommonNeighborCorePortVID=sfpsCommonNeighborCorePortVID, sfpsVLANTopAgentNeighborSwitchID=sfpsVLANTopAgentNeighborSwitchID, sfpsCommonNeighborTable=sfpsCommonNeighborTable, sfpsDirViolationDeltaTable=sfpsDirViolationDeltaTable, sfpsDirViolationDeltaEntryType=sfpsDirViolationDeltaEntryType, sfpsRATopAgentPortTable=sfpsRATopAgentPortTable, sfpsRATopAgentNeighborCallTag=sfpsRATopAgentNeighborCallTag, sfpsServiceCenterTopologyAdminStatus=sfpsServiceCenterTopologyAdminStatus, sfpsTopologyServerTestTopologyAgent=sfpsTopologyServerTestTopologyAgent, sfpsIncompatibleNeighborTwoWayLossCount=sfpsIncompatibleNeighborTwoWayLossCount, sfpsDapiNvramStatsVerb=sfpsDapiNvramStatsVerb, sfpsDapiNvramStatsMaxEntries=sfpsDapiNvramStatsMaxEntries, sfpsTopologyServerTestTopRelayTopologyAgent=sfpsTopologyServerTestTopRelayTopologyAgent, sfpsVMTopServerDeltaCount=sfpsVMTopServerDeltaCount, sfpsTAPITestOutOutputInteger=sfpsTAPITestOutOutputInteger, sfpsIncompatibleNeighborSeqNumLossTime=sfpsIncompatibleNeighborSeqNumLossTime, sfpsServiceCenterTopologyMetric=sfpsServiceCenterTopologyMetric, sfpsTopologyServerTestLostPort=sfpsTopologyServerTestLostPort, sfpsTPMPortTopologyAgent=sfpsTPMPortTopologyAgent, sfpsIncompatibleNeighborEntry=sfpsIncompatibleNeighborEntry, sfpsTopologyFCLCompatability=sfpsTopologyFCLCompatability, sfpsCommonNeighborHellosReceived=sfpsCommonNeighborHellosReceived, sfpsTPMPortTableAPIInCorePortVID=sfpsTPMPortTableAPIInCorePortVID, sfpsRATopAgentPortTableAPIInLogicalPort=sfpsRATopAgentPortTableAPIInLogicalPort, sfpsDirLockStatsRestrictMobTblSize=sfpsDirLockStatsRestrictMobTblSize, sfpsDirLockConfigRestrictedPort=sfpsDirLockConfigRestrictedPort, sfpsRATopAgentNeighborNetHelloNetPortLosses=sfpsRATopAgentNeighborNetHelloNetPortLosses, sfpsHistoryTopologyServerCurrentOptionsMask=sfpsHistoryTopologyServerCurrentOptionsMask, sfpsDirLockStatsNumNodeLocked=sfpsDirLockStatsNumNodeLocked, sfpsCommonNeighborSwitchID=sfpsCommonNeighborSwitchID, sfpsTopologyServerPortEventRelayLogicalPort=sfpsTopologyServerPortEventRelayLogicalPort, sfpsVLANTopAgentPortSendFrequency=sfpsVLANTopAgentPortSendFrequency, sfpsDirViolationDeltaIndex=sfpsDirViolationDeltaIndex, sfpsDapiNvramStatsMacEntries=sfpsDapiNvramStatsMacEntries, sfpsCommonNeighborTwoWayLossTime=sfpsCommonNeighborTwoWayLossTime, sfpsRATopAgentPortTableAPIOutPriority=sfpsRATopAgentPortTableAPIOutPriority, sfpsTopologyFCLTable=sfpsTopologyFCLTable, sfpsDirViolationAPIAOValue=sfpsDirViolationAPIAOValue)
mibBuilder.exportSymbols("CTRON-SFPS-TOPOLOGY-MIB", sfpsRATopAgentNeighborNetworkPort=sfpsRATopAgentNeighborNetworkPort, sfpsRATopAgentPortNetHelloRecvFreq=sfpsRATopAgentPortNetHelloRecvFreq, sfpsTPMPortTableAPIInLogicalPort=sfpsTPMPortTableAPIInLogicalPort, sfpsTAPITestInUNIT321=sfpsTAPITestInUNIT321, sfpsDirLockConfigRAPortLock=sfpsDirLockConfigRAPortLock, sfpsDirViolationCount=sfpsDirViolationCount, sfpsCommonNeighborSwitchMAC=sfpsCommonNeighborSwitchMAC, sfpsVMTopServerDeltaIndex=sfpsVMTopServerDeltaIndex, sfpsTPMPortEntry=sfpsTPMPortEntry, sfpsRestrictedMobilityHash=sfpsRestrictedMobilityHash, sfpsIncompatibleNeighborFCL=sfpsIncompatibleNeighborFCL, sfpsTopologyServerTestTopRelayLogicalPort=sfpsTopologyServerTestTopRelayLogicalPort, sfpsVLANTopAgentNeighborTable=sfpsVLANTopAgentNeighborTable, sfpsCommonNeighborFirstHeard=sfpsCommonNeighborFirstHeard, sfpsESPTopAgentPortHelloVersion=sfpsESPTopAgentPortHelloVersion, sfpsDirViolationLastSeen=sfpsDirViolationLastSeen, sfpsRATopAgentNeighborEntry=sfpsRATopAgentNeighborEntry, sfpsTopologyServerPortEventRelayNewState=sfpsTopologyServerPortEventRelayNewState, sfpsCommonNeighborChassisMAC=sfpsCommonNeighborChassisMAC, sfpsCommonNeighborFalseAgingCount=sfpsCommonNeighborFalseAgingCount, sfpsDirViolationAPIChangeCount=sfpsDirViolationAPIChangeCount, sfpsIncompatibleNeighborFirstHeard=sfpsIncompatibleNeighborFirstHeard, sfpsDirViolationDeltaAOValue=sfpsDirViolationDeltaAOValue, sfpsRATopAgentPortTableAPIOutLogicalPort=sfpsRATopAgentPortTableAPIOutLogicalPort, sfpsVLANTopAgentPortNVRAMStatus=sfpsVLANTopAgentPortNVRAMStatus, sfpsTPMPortTableAPIOutLogicalPort=sfpsTPMPortTableAPIOutLogicalPort, sfpsRATopAgentPortStateChangeCount=sfpsRATopAgentPortStateChangeCount, sfpsRATopAgentPortTableAPIInHelloVersion=sfpsRATopAgentPortTableAPIInHelloVersion, sfpsHistoryTopologyServerSysTime=sfpsHistoryTopologyServerSysTime, sfpsCommonNeighborSeqNumLossCount=sfpsCommonNeighborSeqNumLossCount, sfpsRATopAgentPortLogicalPort=sfpsRATopAgentPortLogicalPort, sfpsCommonNeighborSwitchIP=sfpsCommonNeighborSwitchIP)
