#
# PySNMP MIB module IANA-PRINTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iana/IANA-PRINTER-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:57:37 2024
# On host fv-az914-826 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, mib_2, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, ModuleIdentity, NotificationType, IpAddress, Counter64, Bits, TimeTicks, iso, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "mib-2", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "ModuleIdentity", "NotificationType", "IpAddress", "Counter64", "Bits", "TimeTicks", "iso", "Counter32", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ianaPrinterMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 109))
ianaPrinterMIB.setRevisions(('2004-06-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ianaPrinterMIB.setRevisionsDescriptions(('Original version, published in coordination\n                  with Printer MIB (RFC 3805).',))
if mibBuilder.loadTexts: ianaPrinterMIB.setLastUpdated('200406020000Z')
if mibBuilder.loadTexts: ianaPrinterMIB.setOrganization('IANA')
if mibBuilder.loadTexts: ianaPrinterMIB.setContactInfo('Internet Assigned Numbers Authority\n                  Postal: ICANN\n                          4676 Admiralty Way, Suite 330\n                          Marina del Rey, CA 90292\n\n                  Tel:    +1 310 823 9358\n                  E-Mail: iana@iana.org')
if mibBuilder.loadTexts: ianaPrinterMIB.setDescription('This MIB module defines a set of printing-related\n                  TEXTUAL-CONVENTIONs for use in Printer MIB (RFC 3805),\n                  Finisher MIB (RFC 3806), and other MIBs which need to\n                  specify printing mechanism details.\n\n                  Any additions or changes to the contents of this MIB\n                  module require either publication of an RFC, or\n                  Designated Expert Review as defined in RFC 2434,\n                  Guidelines for Writing an IANA Considerations Section\n                  in RFCs.  The Designated Expert will be selected by\n                  the IESG Area Director(s) of the Applications Area.\n\n                  Copyright (C) The Internet Society (2004). The\n                  initial version of this MIB module was published\n                  in RFC 3805.  For full legal notices see the RFC\n                  itself or see:\n                  http://www.ietf.org/copyrights/ianamib.html')
class PrtCoverStatusTC(TextualConvention, Integer32):
    description = 'Values for encoding the state of a particular cover or\n        access panel on the printer case or enclosure.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("coverOpen", 3), ("coverClosed", 4), ("interlockOpen", 5), ("interlockClosed", 6))

class PrtGeneralResetTC(TextualConvention, Integer32):
    description = 'Values for reading and writing the prtGeneralReset object.\n\n        If a device does not have NVRAM, the device shall none the\n        less respond to a SET with the value resetToNVRAM(5) with a\n        sort of warm reset that resets the device to implementation-\n        defined state that is preferably under control of the system\n        administrator by some means outside the scope of the Printer\n        MIB specification.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))
    namedValues = NamedValues(("notResetting", 3), ("powerCycleReset", 4), ("resetToNVRAM", 5), ("resetToFactoryDefaults", 6))

class PrtChannelTypeTC(TextualConvention, Integer32):
    description = 'This enumeration indicates the type of channel that is\n        receiving jobs.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))
    namedValues = NamedValues(("other", 1), ("chSerialPort", 3), ("chParallelPort", 4), ("chIEEE1284Port", 5), ("chSCSIPort", 6), ("chAppleTalkPAP", 7), ("chLPDServer", 8), ("chNetwareRPrinter", 9), ("chNetwarePServer", 10), ("chPort9100", 11), ("chAppSocket", 12), ("chFTP", 13), ("chTFTP", 14), ("chDLCLLCPort", 15), ("chIBM3270", 16), ("chIBM5250", 17), ("chFax", 18), ("chIEEE1394", 19), ("chTransport1", 20), ("chCPAP", 21), ("chDCERemoteProcCall", 22), ("chONCRemoteProcCall", 23), ("chOLE", 24), ("chNamedPipe", 25), ("chPCPrint", 26), ("chServerMessageBlock", 27), ("chDPMF", 28), ("chDLLAPI", 29), ("chVxDAPI", 30), ("chSystemObjectManager", 31), ("chDECLAT", 32), ("chNPAP", 33), ("chUSB", 34), ("chIRDA", 35), ("chPrintXChange", 36), ("chPortTCP", 37), ("chBidirPortTCP", 38), ("chUNPP", 39), ("chAppleTalkADSP", 40), ("chPortSPX", 41), ("chPortHTTP", 42), ("chNDPS", 43), ("chIPP", 44), ("chSMTP", 45))

class PrtInterpreterLangFamilyTC(TextualConvention, Integer32):
    description = 'This enumeration indicates the type of interpreter that is\n        receiving jobs.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("langPCL", 3), ("langHPGL", 4), ("langPJL", 5), ("langPS", 6), ("langIPDS", 7), ("langPPDS", 8), ("langEscapeP", 9), ("langEpson", 10), ("langDDIF", 11), ("langInterpress", 12), ("langISO6429", 13), ("langLineData", 14), ("langMODCA", 15), ("langREGIS", 16), ("langSCS", 17), ("langSPDL", 18), ("langTEK4014", 19), ("langPDS", 20), ("langIGP", 21), ("langCodeV", 22), ("langDSCDSE", 23), ("langWPS", 24), ("langLN03", 25), ("langCCITT", 26), ("langQUIC", 27), ("langCPAP", 28), ("langDecPPL", 29), ("langSimpleText", 30), ("langNPAP", 31), ("langDOC", 32), ("langimPress", 33), ("langPinwriter", 34), ("langNPDL", 35), ("langNEC201PL", 36), ("langAutomatic", 37), ("langPages", 38), ("langLIPS", 39), ("langTIFF", 40), ("langDiagnostic", 41), ("langPSPrinter", 42), ("langCaPSL", 43), ("langEXCL", 44), ("langLCDS", 45), ("langXES", 46), ("langPCLXL", 47), ("langART", 48), ("langTIPSI", 49), ("langPrescribe", 50), ("langLinePrinter", 51), ("langIDP", 52), ("langXJCL", 53), ("langPDF", 54), ("langRPDL", 55), ("langIntermecIPL", 56), ("langUBIFingerprint", 57), ("langUBIDirectProtocol", 58), ("langFujitsu", 59), ("langCGM", 60), ("langJPEG", 61), ("langCALS1", 62), ("langCALS2", 63), ("langNIRS", 64), ("langC4", 65))

class PrtInputTypeTC(TextualConvention, Integer32):
    description = 'The type of technology (discriminated primarily according to\n        feeder mechanism type) employed by a specific component or\n        components.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("sheetFeedAutoRemovableTray", 3), ("sheetFeedAutoNonRemovableTray", 4), ("sheetFeedManual", 5), ("continuousRoll", 6), ("continuousFanFold", 7))

class PrtOutputTypeTC(TextualConvention, Integer32):
    description = 'The Type of technology supported by this output subunit.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("removableBin", 3), ("unRemovableBin", 4), ("continuousRollDevice", 5), ("mailBox", 6), ("continuousFanFold", 7))

class PrtMarkerMarkTechTC(TextualConvention, Integer32):
    description = 'The type of marking technology used for this marking\n        subunit.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("electrophotographicLED", 3), ("electrophotographicLaser", 4), ("electrophotographicOther", 5), ("impactMovingHeadDotMatrix9pin", 6), ("impactMovingHeadDotMatrix24pin", 7), ("impactMovingHeadDotMatrixOther", 8), ("impactMovingHeadFullyFormed", 9), ("impactBand", 10), ("impactOther", 11), ("inkjetAqueous", 12), ("inkjetSolid", 13), ("inkjetOther", 14), ("pen", 15), ("thermalTransfer", 16), ("thermalSensitive", 17), ("thermalDiffusion", 18), ("thermalOther", 19), ("electroerosion", 20), ("electrostatic", 21), ("photographicMicrofiche", 22), ("photographicImagesetter", 23), ("photographicOther", 24), ("ionDeposition", 25), ("eBeam", 26), ("typesetter", 27))

class PrtMarkerSuppliesTypeTC(TextualConvention, Integer32):
    description = 'The type of this supply.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("toner", 3), ("wasteToner", 4), ("ink", 5), ("inkCartridge", 6), ("inkRibbon", 7), ("wasteInk", 8), ("opc", 9), ("developer", 10), ("fuserOil", 11), ("solidWax", 12), ("ribbonWax", 13), ("wasteWax", 14), ("fuser", 15), ("coronaWire", 16), ("fuserOilWick", 17), ("cleanerUnit", 18), ("fuserCleaningPad", 19), ("transferUnit", 20), ("tonerCartridge", 21), ("fuserOiler", 22), ("water", 23), ("wasteWater", 24), ("glueWaterAdditive", 25), ("wastePaper", 26), ("bindingSupply", 27), ("bandingSupply", 28), ("stitchingWire", 29), ("shrinkWrap", 30), ("paperWrap", 31), ("staples", 32), ("inserts", 33), ("covers", 34))

class PrtMediaPathTypeTC(TextualConvention, Integer32):
    description = 'The type of the media path for this media path.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("longEdgeBindingDuplex", 3), ("shortEdgeBindingDuplex", 4), ("simplex", 5))

class PrtConsoleColorTC(TextualConvention, Integer32):
    description = 'The color of this light.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("white", 3), ("red", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("yellow", 9), ("orange", 10))

class PrtConsoleDisableTC(TextualConvention, Integer32):
    description = "This value indicates whether or not input is accepted from\n        the operator console.  A value of 'enabled' indicates that\n        input is accepted from the console, and a value of 'disabled'\n        indicates that input is not accepted from the console. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4))
    namedValues = NamedValues(("enabled", 3), ("disabled", 4))

class PrtAlertTrainingLevelTC(TextualConvention, Integer32):
    description = "The level of training required to handle this alert, if\n        human intervention is required.  The noInterventionRequired\n        value should be used if the event does not require any human\n        intervention.  The training level is an enumeration that is\n        determined and assigned by the printer manufacturer based on\n        the information or training required to handle this alert.\n        The printer will break alerts into these different training\n        levels.  It is the responsibility of a management application\n        in the system to determine how a particular alert is handled\n        and how and to whom that alert is routed.  The following are\n        the four training levels of alerts:\n\n        Field Service - Alerts that typically require advanced\n            training and technical knowledge of the printer and its\n            subunits.  An example of a technical person would be a\n            manufacturer's Field Service representative, or other\n            person formally trained by the manufacturer or similar\n            representative.\n        Trained - Alerts that require an intermediate or moderate\n            knowledge of the printer and its subunits.  A typical\n            example of such an alert is replacing a toner cartridge.\n        Untrained -     Alerts that can be fixed without prior\n            training either because the action to correct the alert\n            is obvious or the printer can help the untrained person\n            fix the problem.  A typical example of such an alert is\n            reloading paper trays or emptying output bins on a low\n            end printer.\n        Management -    Alerts that have to do with overall operation\n            of and configuration of the printer.  Examples of such\n            management events are configuration change of subunits."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("untrained", 3), ("trained", 4), ("fieldService", 5), ("management", 6), ("noInterventionRequired", 7))

class PrtAlertGroupTC(TextualConvention, Integer32):
    description = "The type of subunit within the printer model that this alert\n        is related.  Input, output, and markers are examples of\n        printer model groups, i.e., examples of types of subunits.\n        Wherever possible, the enumerations match the sub-identifier\n        that identifies the relevant table in the Printer MIB.\n\n        NOTE: Alert type codes have been added for the Host Resources\n        MIB storage table and device table.  These additional types\n        are for situations in which the printer's storage and device\n        objects must generate alerts (and possibly traps for critical\n        alerts)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 30, 31, 32, 33))
    namedValues = NamedValues(("other", 1), ("hostResourcesMIBStorageTable", 3), ("hostResourcesMIBDeviceTable", 4), ("generalPrinter", 5), ("cover", 6), ("localization", 7), ("input", 8), ("output", 9), ("marker", 10), ("markerSupplies", 11), ("markerColorant", 12), ("mediaPath", 13), ("channel", 14), ("interpreter", 15), ("consoleDisplayBuffer", 16), ("consoleLights", 17), ("alert", 18), ("finDevice", 30), ("finSupply", 31), ("finSupplyMediaInput", 32), ("finAttribute", 33))

class PrtAlertCodeTC(TextualConvention, Integer32):
    description = 'The code that describes the type of alert for this entry in\n\n        the table.  Binary change event alerts describe states of the\n        subunit while unary change event alerts describe a single\n        event.  The same alert code can be used for a binary change\n        event or a unary change event, depending on implementation.\n        Also, the same alert code can be used to indicate a critical\n        or non-critical (warning) alert, depending on implementation.\n        The value of prtAlertSeverityLevel specifies binary vs. unary\n        and critical vs. non-critical for each event for the\n        implementation.\n\n        While there are some specific codes for many subunits, the\n        generic codes should be used for most subunit alerts.  The\n        network management station can then query the subunit\n        specified by prtAlertGroup to determine further subunit\n        status and other subunit information.\n\n        An agent shall not add two entries to the alert table for the\n        same event, one containing a generic event code and the other\n        containing a specific event code; the agent shall add only\n        one entry in the alert table for each event; either generic\n        (preferred) or specific, not both.\n\n        Implementation of the unary change event\n        alertRemovalOfBinaryChangeEntry(1801) is optional.  When\n        implemented, this alert code shall indicate to network\n        management stations that the trailing edge of a binary change\n        event has occurred and the corresponding alert entry has been\n        removed from the alert table.  As with all events, the\n        alertRemovalOfBinaryChangeEntry(1801) alert shall be placed\n        at the end of the alert table.  Such an alert table entry\n        shall specify the following information:\n\n        prtAlertSeverityLevel   warningUnaryChangeEvent(4)\n        prtAlertTrainingLevel   noInterventionRequired(7)\n        prtAlertGroup           alert(18)\n        prtAlertGroupIndex      the index of the row in the\n                                alert table of the binary\n                                change event that this event\n                                has removed.\n        prtAlertLocation        unknown (-2)\n        prtAlertCode            alertRemovalOfBinaryChangeEntry(1801)\n        prtAlertDescription     <description or null string>\n        prtAlertTime            the value of sysUpTime at\n                                the time of the removal of the\n                                binary change event from the\n                                alert table.\n\n        Optionally, the agent may generate a trap coincident with\n\n        removing the binary change event and placing the unary change\n        event alertRemovalOfBinaryChangeEntry(1801) in the alert\n        table.  For such a trap, the prtAlertIndex sent with the above\n        trap parameters shall be the index of the\n        alertRemovalOfBinaryChangeEvent row that was added to the\n        prtAlertTable; not the index of the row that was removed from\n        the prtAlertTable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 501, 502, 503, 504, 505, 506, 507, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 901, 902, 903, 904, 1001, 1002, 1003, 1004, 1005, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1301, 1302, 1303, 1304, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1509, 1801))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("coverOpen", 3), ("coverClosed", 4), ("interlockOpen", 5), ("interlockClosed", 6), ("configurationChange", 7), ("jam", 8), ("subunitMissing", 9), ("subunitLifeAlmostOver", 10), ("subunitLifeOver", 11), ("subunitAlmostEmpty", 12), ("subunitEmpty", 13), ("subunitAlmostFull", 14), ("subunitFull", 15), ("subunitNearLimit", 16), ("subunitAtLimit", 17), ("subunitOpened", 18), ("subunitClosed", 19), ("subunitTurnedOn", 20), ("subunitTurnedOff", 21), ("subunitOffline", 22), ("subunitPowerSaver", 23), ("subunitWarmingUp", 24), ("subunitAdded", 25), ("subunitRemoved", 26), ("subunitResourceAdded", 27), ("subunitResourceRemoved", 28), ("subunitRecoverableFailure", 29), ("subunitUnrecoverableFailure", 30), ("subunitRecoverableStorageError", 31), ("subunitUnrecoverableStorageError", 32), ("subunitMotorFailure", 33), ("subunitMemoryExhausted", 34), ("subunitUnderTemperature", 35), ("subunitOverTemperature", 36), ("subunitTimingFailure", 37), ("subunitThermistorFailure", 38), ("doorOpen", 501), ("doorClosed", 502), ("powerUp", 503), ("powerDown", 504), ("printerNMSReset", 505), ("printerManualReset", 506), ("printerReadyToPrint", 507), ("inputMediaTrayMissing", 801), ("inputMediaSizeChange", 802), ("inputMediaWeightChange", 803), ("inputMediaTypeChange", 804), ("inputMediaColorChange", 805), ("inputMediaFormPartsChange", 806), ("inputMediaSupplyLow", 807), ("inputMediaSupplyEmpty", 808), ("inputMediaChangeRequest", 809), ("inputManualInputRequest", 810), ("inputTrayPositionFailure", 811), ("inputTrayElevationFailure", 812), ("inputCannotFeedSizeSelected", 813), ("outputMediaTrayMissing", 901), ("outputMediaTrayAlmostFull", 902), ("outputMediaTrayFull", 903), ("outputMailboxSelectFailure", 904), ("markerFuserUnderTemperature", 1001), ("markerFuserOverTemperature", 1002), ("markerFuserTimingFailure", 1003), ("markerFuserThermistorFailure", 1004), ("markerAdjustingPrintQuality", 1005), ("markerTonerEmpty", 1101), ("markerInkEmpty", 1102), ("markerPrintRibbonEmpty", 1103), ("markerTonerAlmostEmpty", 1104), ("markerInkAlmostEmpty", 1105), ("markerPrintRibbonAlmostEmpty", 1106), ("markerWasteTonerReceptacleAlmostFull", 1107), ("markerWasteInkReceptacleAlmostFull", 1108), ("markerWasteTonerReceptacleFull", 1109), ("markerWasteInkReceptacleFull", 1110), ("markerOpcLifeAlmostOver", 1111), ("markerOpcLifeOver", 1112), ("markerDeveloperAlmostEmpty", 1113), ("markerDeveloperEmpty", 1114), ("markerTonerCartridgeMissing", 1115), ("mediaPathMediaTrayMissing", 1301), ("mediaPathMediaTrayAlmostFull", 1302), ("mediaPathMediaTrayFull", 1303), ("mediaPathCannotDuplexMediaSelected", 1304), ("interpreterMemoryIncrease", 1501), ("interpreterMemoryDecrease", 1502), ("interpreterCartridgeAdded", 1503), ("interpreterCartridgeDeleted", 1504), ("interpreterResourceAdded", 1505), ("interpreterResourceDeleted", 1506), ("interpreterResourceUnavailable", 1507), ("interpreterComplexPageEncountered", 1509), ("alertRemovalOfBinaryChangeEntry", 1801))

mibBuilder.exportSymbols("IANA-PRINTER-MIB", PrtMarkerMarkTechTC=PrtMarkerMarkTechTC, PrtMarkerSuppliesTypeTC=PrtMarkerSuppliesTypeTC, PYSNMP_MODULE_ID=ianaPrinterMIB, PrtAlertTrainingLevelTC=PrtAlertTrainingLevelTC, PrtMediaPathTypeTC=PrtMediaPathTypeTC, PrtConsoleDisableTC=PrtConsoleDisableTC, PrtAlertGroupTC=PrtAlertGroupTC, PrtChannelTypeTC=PrtChannelTypeTC, PrtOutputTypeTC=PrtOutputTypeTC, PrtGeneralResetTC=PrtGeneralResetTC, ianaPrinterMIB=ianaPrinterMIB, PrtInputTypeTC=PrtInputTypeTC, PrtConsoleColorTC=PrtConsoleColorTC, PrtInterpreterLangFamilyTC=PrtInterpreterLangFamilyTC, PrtAlertCodeTC=PrtAlertCodeTC, PrtCoverStatusTC=PrtCoverStatusTC)
