#
# PySNMP MIB module BENU-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/benuos/BENU-CHASSIS-MIB
# Produced by pysmi-1.1.12 at Mon Oct  7 02:50:35 2024
# On host fv-az775-99 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
benuPlatform, = mibBuilder.importSymbols("BENU-PLATFORM-MIB", "benuPlatform")
ifIndex, ifDescr, ifOperStatus, ifAdminStatus, ifType = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr", "ifOperStatus", "ifAdminStatus", "ifType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, MibIdentifier, Unsigned32, NotificationType, ModuleIdentity, Integer32, Counter32, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "MibIdentifier", "Unsigned32", "NotificationType", "ModuleIdentity", "Integer32", "Counter32", "ObjectIdentity", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
benuChassisMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 39406, 1, 1))
benuChassisMIB.setRevisions(('2016-11-18 00:00', '2016-10-14 00:00', '2016-01-26 00:00', '2015-10-14 00:00', '2015-01-27 00:00', '2015-01-05 00:00', '2014-11-14 00:00', '2014-06-27 00:00', '2013-11-25 00:00', '2012-12-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: benuChassisMIB.setRevisionsDescriptions(('Added xMEG card type', 'Changes for xMEG platform', 'Added benuCardIfVirtualType', 'Added benuPowerSupplyTable', 'Updated benuChassisId from read-write to read-only.\n       Also, updated the description appropriately.', 'Updated notification assignments to comply with standards (RFC 2578).', 'changed benuChassisNotifObjects type to  scalar (2 to 0)', 'Added new encapsulation column in Card interface table', 'Added Fan Table ', 'Initial creation MIB module for Benu Networks Chassis',))
if mibBuilder.loadTexts: benuChassisMIB.setLastUpdated('201611180000Z')
if mibBuilder.loadTexts: benuChassisMIB.setOrganization('Benu Networks')
if mibBuilder.loadTexts: benuChassisMIB.setContactInfo('Benu Networks Inc,\n      300 Concord Road,\n      Billerca MA 01821\n      Email: support@benunets.com')
if mibBuilder.loadTexts: benuChassisMIB.setDescription('Initial creation MIB module for Benu Networks Chassis.\n    Copyright (C) 2001, 2008 by Benu Networks, Inc.\n    All rights reserved.')
benuChassisMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1))
benuChassisNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 39406, 1, 1, 0))
benuChassisNotifVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 39406, 1, 1, 2))
benuChassisInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 1))
benuCardInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 2))
benuCardIfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 3))
benuSensorInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 4))
benuChassisGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 5))
benuFanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 6))
benuPowerSupplyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 7))
benuChassisType = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("meg100", 1), ("meg400", 2), ("meg1200", 3), ("meg50", 4), ("xMEG100", 5), ("xMEG10", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuChassisType.setStatus('current')
if mibBuilder.loadTexts: benuChassisType.setDescription('Chassis type.')
benuChassisHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuChassisHwVersion.setStatus('current')
if mibBuilder.loadTexts: benuChassisHwVersion.setDescription('Chassis hardware revision level, or an empty\n        string if unavailable.')
benuChassisId = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuChassisId.setStatus('current')
if mibBuilder.loadTexts: benuChassisId.setDescription('Unique ID string. Defaults to chassis serial\n        number if available, otherwise empty')
benuChassisNumOfSlots = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuChassisNumOfSlots.setStatus('current')
if mibBuilder.loadTexts: benuChassisNumOfSlots.setDescription('Number of slots in this chassis, or -1 \n        if neither applicable nor determinable.')
benuChassisPowerTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: benuChassisPowerTrapEnable.setStatus('current')
if mibBuilder.loadTexts: benuChassisPowerTrapEnable.setDescription('This object controls SNMP traps for chassis Power Failure. \n        If its value is set to enabled(1), then traps \n        are generated. If the value is disabled(2), then traps \n        are not generated.\n        By default, this object has the value enabled(1).\n        ')
benuChassisFanTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: benuChassisFanTrapEnable.setStatus('current')
if mibBuilder.loadTexts: benuChassisFanTrapEnable.setDescription('This object controls SNMP traps for chassis Fan Failure. \n        If its value is set to enabled(1), then traps \n        are generated. If the value is disabled(2), then traps \n        are not generated.\n        By default, this object has the value enabled(1).\n        ')
benuChassisSensorTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: benuChassisSensorTrapEnable.setStatus('current')
if mibBuilder.loadTexts: benuChassisSensorTrapEnable.setDescription('This object controls SNMP traps for chassis senor Failure. \n        If its value is set to enabled(1), then traps \n        are generated. If the value is disabled(2), then traps \n        are not generated.\n        By default, this object has the value enabled(1).\n        ')
benuSysUpTimeAtLastChassisChange = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuSysUpTimeAtLastChassisChange.setStatus('current')
if mibBuilder.loadTexts: benuSysUpTimeAtLastChassisChange.setDescription("Time (in hundredths of a second) from the last \n           cold start to the last change in the chassis'\n           configuration. This value will be updated\n           whenever the chassis experiences a change\n            in the count, type, or slot position of\n            a card in cardTable.")
benuCardTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: benuCardTable.setStatus('current')
if mibBuilder.loadTexts: benuCardTable.setDescription('Chassis card table.')
benuCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "BENU-CHASSIS-MIB", "benuCardIndex"))
if mibBuilder.loadTexts: benuCardEntry.setStatus('current')
if mibBuilder.loadTexts: benuCardEntry.setDescription('Chassis card table.')
benuCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: benuCardIndex.setStatus('current')
if mibBuilder.loadTexts: benuCardIndex.setDescription('Index into cardTable (not physical chassis\n        slot number).')
benuCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("rsm", 1), ("switchFabric", 2), ("shelfmgr", 3), ("seFP", 4), ("inputOutputCard", 5), ("switchMesh", 6), ("xmeg", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardType.setStatus('current')
if mibBuilder.loadTexts: benuCardType.setDescription('Functional type of this card.')
benuCardDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardDescr.setStatus('current')
if mibBuilder.loadTexts: benuCardDescr.setDescription('Text description of this card.')
benuCardSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardSerial.setStatus('current')
if mibBuilder.loadTexts: benuCardSerial.setDescription('The serial number of this card, or zero if\n        unavailable.')
benuCardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardPartNumber.setStatus('current')
if mibBuilder.loadTexts: benuCardPartNumber.setDescription('The part number of this card, or an \n         empty string if unavailable.')
benuCardHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardHwVersion.setStatus('current')
if mibBuilder.loadTexts: benuCardHwVersion.setDescription('Hardware revision level of this card, or an\n        empty string if unavailable.')
benuCardSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardSwVersion.setStatus('current')
if mibBuilder.loadTexts: benuCardSwVersion.setDescription('Version of the firmware or microcode\n        installed on this card, or an empty string if\n        unavailable.')
benuCardSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardSlotNumber.setStatus('current')
if mibBuilder.loadTexts: benuCardSlotNumber.setDescription('Slot number relative to the containing card or \n        chassis, or -1 if neither applicable nor \n        determinable.')
benuCardRamSize = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardRamSize.setStatus('current')
if mibBuilder.loadTexts: benuCardRamSize.setDescription('Number of kilobytes of DRAM.\n         A value -1 means not available / not applicable\n         A value  0 means internal error.')
benuCardPrimaryDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardPrimaryDiskSize.setStatus('current')
if mibBuilder.loadTexts: benuCardPrimaryDiskSize.setDescription('Number of kilobytes of Disk Memory (SATA or Hard Disk).\n         A value -1 means not available / not applicable.\n         A value  0 means internal error.')
benuCardSecondaryDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardSecondaryDiskSize.setStatus('current')
if mibBuilder.loadTexts: benuCardSecondaryDiskSize.setDescription('Number of kilobytes of Disk Memory (SATA or Hard Disk).\n         A value -1 means not available / not applicable.\n         A value  0 means internal error.')
benuCardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notSpecified", 1), ("up", 2), ("down", 3), ("standby", 4), ("rom", 5), ("flash", 6), ("diag", 7), ("boot", 8), ("config", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardOperStatus.setStatus('current')
if mibBuilder.loadTexts: benuCardOperStatus.setDescription('The operational status of the card.\n        cardOperStatus is up when a card is\n        recognized by the device and is enabled for\n        operation. cardOperStatus is down if the\n        card is not recognized by the device, or if\n        it is not enabled for operation.\n        cardOperStatus is standby if the card is\n        enabled and acting as a standby slave.\n        Intermediate stages (rom,flash,diag,boot,config)\n        are also exposed.')
benuCardIfIndexTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: benuCardIfIndexTable.setStatus('current')
if mibBuilder.loadTexts: benuCardIfIndexTable.setDescription('Chassis card Interface table.')
benuCardIfIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "BENU-CHASSIS-MIB", "benuCardIfIndex"))
if mibBuilder.loadTexts: benuCardIfIndexEntry.setStatus('current')
if mibBuilder.loadTexts: benuCardIfIndexEntry.setDescription('Chassis card table.')
benuCardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: benuCardIfIndex.setStatus('current')
if mibBuilder.loadTexts: benuCardIfIndex.setDescription('matches RFC1213 ifTable IfIndex')
benuCardIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardIfName.setStatus('current')
if mibBuilder.loadTexts: benuCardIfName.setDescription('matches RFC1213 ifXTable IfName')
benuCardIfPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardIfPortNumber.setStatus('current')
if mibBuilder.loadTexts: benuCardIfPortNumber.setDescription('Chassis port number, unique per port on a \n        given card if available.')
benuCardIfSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardIfSlotNumber.setStatus('current')
if mibBuilder.loadTexts: benuCardIfSlotNumber.setDescription('Physical slot number of the card in \n         the Chassis which contains this interface')
benuCardIfLinkUpDownEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: benuCardIfLinkUpDownEnable.setStatus('current')
if mibBuilder.loadTexts: benuCardIfLinkUpDownEnable.setDescription("This enables and disables the sending of\n        the proprietary notifications 'benuLinkUpTrap'\n        and 'benuLinkDownTrap' that provide more \n        information than the standard link up and \n        link down notifications.  By default, these\n        traps are disabled.")
benuCardIfPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("none", 0), ("ethernet", 1), ("fastEthernet", 2), ("gigaEthernet", 3), ("tunnel", 4), ("ipGre", 5), ("vlan", 6), ("l2tp", 7), ("cable", 8), ("bridge", 9), ("ip", 10), ("multiBind", 11), ("p2p", 12), ("loopback", 13), ("multiBindLastResort", 14), ("lag", 15), ("max", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardIfPortType.setStatus('current')
if mibBuilder.loadTexts: benuCardIfPortType.setDescription('This object is used to identify port types for\n        a given card.')
benuCardIfBindName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 3, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardIfBindName.setStatus('current')
if mibBuilder.loadTexts: benuCardIfBindName.setDescription('interface name which is bound to this port . \n         This string will be empty if there is no interface \n         bind to this port ')
benuCardIfEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardIfEncapsulation.setStatus('current')
if mibBuilder.loadTexts: benuCardIfEncapsulation.setDescription('The encapsulation method used by the port.')
benuCardIfVirtualType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("physical", 1), ("virtual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuCardIfVirtualType.setStatus('current')
if mibBuilder.loadTexts: benuCardIfVirtualType.setDescription('This object is used to identify virtualized\n        interfaces.')
benuSensorTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: benuSensorTable.setStatus('current')
if mibBuilder.loadTexts: benuSensorTable.setDescription('Chassis card table.')
benuSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "BENU-CHASSIS-MIB", "benuSensorCardIndex"), (0, "BENU-CHASSIS-MIB", "benuSensorIndex"))
if mibBuilder.loadTexts: benuSensorEntry.setStatus('current')
if mibBuilder.loadTexts: benuSensorEntry.setDescription('Chassis card table.')
benuSensorCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: benuSensorCardIndex.setStatus('current')
if mibBuilder.loadTexts: benuSensorCardIndex.setDescription('cardIndex of the card in the Chassis cardTable\n        which contains this sensor.')
benuSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 4, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: benuSensorIndex.setStatus('current')
if mibBuilder.loadTexts: benuSensorIndex.setDescription('Index into sensorTable.')
benuSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuSensorName.setStatus('current')
if mibBuilder.loadTexts: benuSensorName.setDescription('Name of the sensor.')
benuSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 0), ("temparature", 1), ("voltage", 2), ("electicCurrent", 3), ("fan", 4), ("power", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuSensorType.setStatus('current')
if mibBuilder.loadTexts: benuSensorType.setDescription('Type of the sensor.')
benuSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuSensorValue.setStatus('current')
if mibBuilder.loadTexts: benuSensorValue.setDescription('Current Value of this sensor.\n        The unit types for different type of sensors:\n        temparature -- celcius\n        Fan         -- rpm\n        Volatage    -- volts\n        Electric Current -- amperes\n        Power            -- watts ')
benuSensorMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuSensorMinThresh.setStatus('current')
if mibBuilder.loadTexts: benuSensorMinThresh.setDescription('Minimum threshold for this sensor.')
benuSensorMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuSensorMaxThresh.setStatus('current')
if mibBuilder.loadTexts: benuSensorMaxThresh.setDescription('Maximum threshold for this sensor.')
benuSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("normal", 1), ("critical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuSensorState.setStatus('current')
if mibBuilder.loadTexts: benuSensorState.setDescription('State  of the sensor.')
benuSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuSensorId.setStatus('current')
if mibBuilder.loadTexts: benuSensorId.setDescription('Unique ID of the sensor.')
benuFanTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 6, 1), )
if mibBuilder.loadTexts: benuFanTable.setStatus('current')
if mibBuilder.loadTexts: benuFanTable.setDescription('Chassis Fan table.')
benuFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 6, 1, 1), ).setIndexNames((0, "BENU-CHASSIS-MIB", "benuFanCardIndex"))
if mibBuilder.loadTexts: benuFanEntry.setStatus('current')
if mibBuilder.loadTexts: benuFanEntry.setDescription('Chassis card table.')
benuFanCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: benuFanCardIndex.setStatus('current')
if mibBuilder.loadTexts: benuFanCardIndex.setDescription('cardIndex of the card in the Chassis cardTable\n        which contains this Fan.')
benuFanMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 6, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuFanMaxSpeed.setStatus('current')
if mibBuilder.loadTexts: benuFanMaxSpeed.setDescription('Maximum expected speed of each Fan.\n        This value is applicable to all Fans \n        in the card.\n        Units : The value range is from 0 to 100')
benuFanCurSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 6, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuFanCurSpeed.setStatus('current')
if mibBuilder.loadTexts: benuFanCurSpeed.setDescription('Current speed of each Fan.\n        This value is applicable to all Fans \n        in the card.\n        Units : The value range is from 0 to 100\n        and is less than or equal to benuFanMaxSpeed')
benuFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuFanStatus.setStatus('current')
if mibBuilder.loadTexts: benuFanStatus.setDescription(' A value of -1 means Not available / Not applicable.\n          The lower order 7 bits indicates status of 7 Fans.\n          A bit value of one indicates FAN is non-operational.\n          A bit value of zero indicates FAN is operational.\n          Examples : \n          (a) Value of 1 ( 0000 0001 ) indicates FAN #1 is \n              non-operational.\n          (b) Value of 9 ( 0000 1001 ) indicates FAN #1 and FAN #4 \n              are non-operational.\n          (c) Value of 73( 0100 1001 ) indicates FAN #1,FAN #4 and FAN #7\n              are non-operational. ')
benuPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 7, 1), )
if mibBuilder.loadTexts: benuPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: benuPowerSupplyTable.setDescription('Benu power supply state information.')
benuPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 7, 1, 1), ).setIndexNames((0, "BENU-CHASSIS-MIB", "benuPowerSupplyIndex"))
if mibBuilder.loadTexts: benuPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: benuPowerSupplyEntry.setDescription('Power supply table.')
benuPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerA", 1), ("powerB", 2))))
if mibBuilder.loadTexts: benuPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: benuPowerSupplyIndex.setDescription('This object is used to identify the power supply.')
benuPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuPowerSupplyName.setStatus('current')
if mibBuilder.loadTexts: benuPowerSupplyName.setDescription('The name of the power supply.')
benuPowerSupplyPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuPowerSupplyPresent.setStatus('current')
if mibBuilder.loadTexts: benuPowerSupplyPresent.setDescription('Indicates whether or not the power supply is installed in the chassis.')
benuPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuPowerSupplyType.setStatus('current')
if mibBuilder.loadTexts: benuPowerSupplyType.setDescription('Indicates the type of the power supply.')
benuPowerSupplyPowered = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("powered", 1), ("notPowered", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuPowerSupplyPowered.setStatus('current')
if mibBuilder.loadTexts: benuPowerSupplyPowered.setDescription('Indicates whether or not the power supply is actively supplying power.\n             The value of notApplicable(3) will show if the entry for benuPowerSupplyPresent is no(2).')
benuSysUpTimeSinceLastConfigChange = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 1, 1, 5, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: benuSysUpTimeSinceLastConfigChange.setStatus('current')
if mibBuilder.loadTexts: benuSysUpTimeSinceLastConfigChange.setDescription('The time (in hundredths of a second) since the last\n        configuration change in the system.')
benuChassisPowerFailureInfo = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("powerFailureA", 1), ("powerFailureB", 2), ("powerRestoredA", 3), ("powerRestoredB", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: benuChassisPowerFailureInfo.setStatus('obsolete')
if mibBuilder.loadTexts: benuChassisPowerFailureInfo.setDescription('Indicates the location of the Power Failure.')
benuChassisPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 39406, 1, 1, 0, 1)).setObjects(("BENU-CHASSIS-MIB", "benuChassisPowerFailureCardInfo"), ("BENU-CHASSIS-MIB", "benuChassisPowerFailureInfo"))
if mibBuilder.loadTexts: benuChassisPowerFailure.setStatus('obsolete')
if mibBuilder.loadTexts: benuChassisPowerFailure.setDescription('A chassisPowerFailureTrap is generated when a Power\n        Failure is detected in the system')
benuChassisFanFailureInfo = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 1, 2, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: benuChassisFanFailureInfo.setStatus('current')
if mibBuilder.loadTexts: benuChassisFanFailureInfo.setDescription('Indicates the location of the Fan Failure.')
benuChassisFanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 39406, 1, 1, 0, 2)).setObjects(("BENU-CHASSIS-MIB", "benuChassisFanFailureInfo"))
if mibBuilder.loadTexts: benuChassisFanFailureTrap.setStatus('current')
if mibBuilder.loadTexts: benuChassisFanFailureTrap.setDescription('A chassisFanFailureTrap is generated when a Fan \n        Failure is detected in the system')
benuLinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 39406, 1, 1, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("IF-MIB", "ifType"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"))
if mibBuilder.loadTexts: benuLinkUpTrap.setStatus('current')
if mibBuilder.loadTexts: benuLinkUpTrap.setDescription("A proprietary Link Up Notification for all \n        interfaces. This notification contains more details \n        than the standard 'linkUp' notification in RFC 2863.")
benuLinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 39406, 1, 1, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("IF-MIB", "ifType"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"))
if mibBuilder.loadTexts: benuLinkDownTrap.setStatus('current')
if mibBuilder.loadTexts: benuLinkDownTrap.setDescription("A proprietary Link Down Notification for all \n        interfaces. This notification contains more details \n        than the standard 'linkDown' notification in RFC 2863.")
benuChassisPowerFailureCardInfo = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 1, 2, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: benuChassisPowerFailureCardInfo.setStatus('obsolete')
if mibBuilder.loadTexts: benuChassisPowerFailureCardInfo.setDescription('Indicates the  Card Index\n         Card Index starts from #1. ')
benuSensorCritical = NotificationType((1, 3, 6, 1, 4, 1, 39406, 1, 1, 0, 5)).setObjects(("BENU-CHASSIS-MIB", "benuSensorName"), ("BENU-CHASSIS-MIB", "benuSensorType"), ("BENU-CHASSIS-MIB", "benuSensorValue"), ("BENU-CHASSIS-MIB", "benuSensorId"))
if mibBuilder.loadTexts: benuSensorCritical.setStatus('current')
if mibBuilder.loadTexts: benuSensorCritical.setDescription('This notification signifies the transition\n           of the sensor state from normal to critical.')
benuSensorNormal = NotificationType((1, 3, 6, 1, 4, 1, 39406, 1, 1, 0, 6)).setObjects(("BENU-CHASSIS-MIB", "benuSensorName"), ("BENU-CHASSIS-MIB", "benuSensorType"), ("BENU-CHASSIS-MIB", "benuSensorValue"), ("BENU-CHASSIS-MIB", "benuSensorId"))
if mibBuilder.loadTexts: benuSensorNormal.setStatus('current')
if mibBuilder.loadTexts: benuSensorNormal.setDescription('This notification signifies the transition\n           of the sensor state from critical to normal.')
benuChassisPowerInfo = MibScalar((1, 3, 6, 1, 4, 1, 39406, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerSupplyA", 1), ("powerSupplyB", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: benuChassisPowerInfo.setStatus('current')
if mibBuilder.loadTexts: benuChassisPowerInfo.setDescription('Indicates the location of the Power Failure or recovery.')
benuChassisPowerFault = NotificationType((1, 3, 6, 1, 4, 1, 39406, 1, 1, 0, 7)).setObjects(("BENU-CHASSIS-MIB", "benuChassisPowerInfo"))
if mibBuilder.loadTexts: benuChassisPowerFault.setStatus('current')
if mibBuilder.loadTexts: benuChassisPowerFault.setDescription('A chassisPowerFaultTrap is generated when a Power\n        Failure is detected in the system')
benuChassisPowerRecovery = NotificationType((1, 3, 6, 1, 4, 1, 39406, 1, 1, 0, 8)).setObjects(("BENU-CHASSIS-MIB", "benuChassisPowerInfo"))
if mibBuilder.loadTexts: benuChassisPowerRecovery.setStatus('current')
if mibBuilder.loadTexts: benuChassisPowerRecovery.setDescription('A chassisPowerRecoveryTrap is generated when a failed\n        Power supply recovery is detected in the system')
benuChassisPowerPresent = NotificationType((1, 3, 6, 1, 4, 1, 39406, 1, 1, 0, 9)).setObjects(("BENU-CHASSIS-MIB", "benuChassisPowerInfo"))
if mibBuilder.loadTexts: benuChassisPowerPresent.setStatus('current')
if mibBuilder.loadTexts: benuChassisPowerPresent.setDescription('A chassisPowerPresentTrap is generated when a \n        redundant Power supply is inserted in the system')
benuChassisPowerAbsent = NotificationType((1, 3, 6, 1, 4, 1, 39406, 1, 1, 0, 10)).setObjects(("BENU-CHASSIS-MIB", "benuChassisPowerInfo"))
if mibBuilder.loadTexts: benuChassisPowerAbsent.setStatus('current')
if mibBuilder.loadTexts: benuChassisPowerAbsent.setDescription('A chassisPowerAbsentTrap is generated when a \n        redundant Power supply is removed from the system')
mibBuilder.exportSymbols("BENU-CHASSIS-MIB", benuSensorId=benuSensorId, benuChassisPowerAbsent=benuChassisPowerAbsent, benuPowerSupplyPowered=benuPowerSupplyPowered, benuCardRamSize=benuCardRamSize, benuChassisPowerTrapEnable=benuChassisPowerTrapEnable, benuCardIfIndex=benuCardIfIndex, benuChassisGeneralInfo=benuChassisGeneralInfo, benuCardSecondaryDiskSize=benuCardSecondaryDiskSize, benuCardIfName=benuCardIfName, benuCardTable=benuCardTable, benuSensorCritical=benuSensorCritical, benuPowerSupplyTable=benuPowerSupplyTable, benuChassisPowerInfo=benuChassisPowerInfo, benuSensorTable=benuSensorTable, benuCardIfPortType=benuCardIfPortType, benuSensorNormal=benuSensorNormal, benuChassisInfo=benuChassisInfo, benuPowerSupplyType=benuPowerSupplyType, benuChassisNotifVariables=benuChassisNotifVariables, benuCardIfInfo=benuCardIfInfo, benuCardIfLinkUpDownEnable=benuCardIfLinkUpDownEnable, benuSensorMinThresh=benuSensorMinThresh, benuCardPrimaryDiskSize=benuCardPrimaryDiskSize, benuChassisPowerFault=benuChassisPowerFault, benuSensorMaxThresh=benuSensorMaxThresh, benuSensorValue=benuSensorValue, benuChassisHwVersion=benuChassisHwVersion, benuFanCardIndex=benuFanCardIndex, benuSysUpTimeAtLastChassisChange=benuSysUpTimeAtLastChassisChange, benuCardIfSlotNumber=benuCardIfSlotNumber, benuPowerSupplyInfo=benuPowerSupplyInfo, benuChassisFanFailureTrap=benuChassisFanFailureTrap, benuChassisMIB=benuChassisMIB, benuSensorEntry=benuSensorEntry, benuFanMaxSpeed=benuFanMaxSpeed, benuFanTable=benuFanTable, benuChassisNumOfSlots=benuChassisNumOfSlots, benuCardInfo=benuCardInfo, benuCardDescr=benuCardDescr, benuSensorName=benuSensorName, benuCardPartNumber=benuCardPartNumber, benuCardIfIndexTable=benuCardIfIndexTable, benuSensorInfo=benuSensorInfo, benuChassisFanFailureInfo=benuChassisFanFailureInfo, benuChassisPowerFailure=benuChassisPowerFailure, benuChassisNotifObjects=benuChassisNotifObjects, benuCardHwVersion=benuCardHwVersion, benuCardIfBindName=benuCardIfBindName, benuChassisPowerFailureInfo=benuChassisPowerFailureInfo, benuCardIndex=benuCardIndex, benuChassisPowerPresent=benuChassisPowerPresent, benuSensorState=benuSensorState, benuCardSerial=benuCardSerial, benuCardIfIndexEntry=benuCardIfIndexEntry, benuCardIfEncapsulation=benuCardIfEncapsulation, benuChassisSensorTrapEnable=benuChassisSensorTrapEnable, benuSensorIndex=benuSensorIndex, benuChassisMIBObjects=benuChassisMIBObjects, benuPowerSupplyName=benuPowerSupplyName, benuPowerSupplyIndex=benuPowerSupplyIndex, benuLinkUpTrap=benuLinkUpTrap, benuChassisId=benuChassisId, benuCardIfPortNumber=benuCardIfPortNumber, benuLinkDownTrap=benuLinkDownTrap, benuFanCurSpeed=benuFanCurSpeed, benuCardEntry=benuCardEntry, benuChassisType=benuChassisType, benuPowerSupplyEntry=benuPowerSupplyEntry, benuChassisPowerRecovery=benuChassisPowerRecovery, benuCardSwVersion=benuCardSwVersion, benuCardType=benuCardType, benuFanInfo=benuFanInfo, benuFanStatus=benuFanStatus, benuChassisPowerFailureCardInfo=benuChassisPowerFailureCardInfo, PYSNMP_MODULE_ID=benuChassisMIB, benuPowerSupplyPresent=benuPowerSupplyPresent, benuCardOperStatus=benuCardOperStatus, benuCardSlotNumber=benuCardSlotNumber, benuSensorCardIndex=benuSensorCardIndex, benuCardIfVirtualType=benuCardIfVirtualType, benuFanEntry=benuFanEntry, benuSensorType=benuSensorType, benuChassisFanTrapEnable=benuChassisFanTrapEnable, benuSysUpTimeSinceLastConfigChange=benuSysUpTimeSinceLastConfigChange)
