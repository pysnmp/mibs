#
# PySNMP MIB module ExaltComProducts (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/exalt/ExaltComProducts
# Produced by pysmi-1.1.12 at Wed Jul  3 09:11:18 2024
# On host fv-az2021-432 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
TimeZoneT, EthPortMode, Te1StatusT, EthAuxStatusT, FileTransferTypeT, FileTransferStartT, NtpClientEnableT, Led4ColorT, AcmModulationT, Te1LoopBackModeT, VlanGroupT, exaltcommunications, VlanStatusT, EnableStatusT, AuxNmsMode, ExaltEnableT, Te1LineCodeT, AlarmLevelT, EthMainStatusT, Te1LboT = mibBuilder.importSymbols("ExaltComm", "TimeZoneT", "EthPortMode", "Te1StatusT", "EthAuxStatusT", "FileTransferTypeT", "FileTransferStartT", "NtpClientEnableT", "Led4ColorT", "AcmModulationT", "Te1LoopBackModeT", "VlanGroupT", "exaltcommunications", "VlanStatusT", "EnableStatusT", "AuxNmsMode", "ExaltEnableT", "Te1LineCodeT", "AlarmLevelT", "EthMainStatusT", "Te1LboT")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ObjectIdentity, Counter64, Integer32, Gauge32, MibIdentifier, IpAddress, NotificationType, Unsigned32, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "Integer32", "Gauge32", "MibIdentifier", "IpAddress", "NotificationType", "Unsigned32", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
productsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25651, 1))
productsMIB.setRevisions(('2013-04-29 10:21',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: productsMIB.setRevisionsDescriptions(('This is the Exalt Products mib. rev:1.01',))
if mibBuilder.loadTexts: productsMIB.setLastUpdated('201304291021Z')
if mibBuilder.loadTexts: productsMIB.setOrganization('Exalt')
if mibBuilder.loadTexts: productsMIB.setContactInfo('Exalt Wireless Inc.\n                            250 E Hacienda Ave.,\n                            Campbell, CA, 95008\n                            USA')
if mibBuilder.loadTexts: productsMIB.setDescription('Exalt devices')
class PwType(TextualConvention, OctetString):
    description = 'This is a PW field.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 16)

productsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 1))
productsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2))
radioInfo = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1))
if mibBuilder.loadTexts: radioInfo.setStatus('current')
if mibBuilder.loadTexts: radioInfo.setDescription('Common Radio Information to all Exalt devices.')
modelName = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelName.setStatus('current')
if mibBuilder.loadTexts: modelName.setDescription('A descriptive name for the Radio.  See Web, Radio Information, Model Name.')
partNumber = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partNumber.setStatus('current')
if mibBuilder.loadTexts: partNumber.setDescription('The Part Number of the Radio.  See Web, Radio Information, Part Number.')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('The Radio Serial Number.  See Web, Radio Inforamtion, Serial Number.')
interfaceType = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceType.setStatus('current')
if mibBuilder.loadTexts: interfaceType.setDescription('The Interfaces available on this radio.  Ethernet, T1/E1, etc.\n                            See Web, Radio Information, Interface Type.')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
if mibBuilder.loadTexts: firmwareVersion.setDescription('The Radio Firmware Version.  See Web, Radio Information, Firmware Version.')
bootVersion = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersion.setStatus('current')
if mibBuilder.loadTexts: bootVersion.setDescription('The Radio Boot Code Version.  See Web, Radio Information, Boot Version.')
rdkDbVer = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdkDbVer.setStatus('current')
if mibBuilder.loadTexts: rdkDbVer.setDescription('The Device RDK Database Version. See Web, Radio Information, RDK Database Version.')
txFreqRange = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txFreqRange.setStatus('current')
if mibBuilder.loadTexts: txFreqRange.setDescription('The Radio Tx Frequency Range.\n                            FDD radios have a Tx and Rx frequency range.\n                            See Web, Radio Information, RF Transmit range.\n                            TDD radios have one frequency range.\n                            See Web, Radio Information, RF Frequency Band.')
rxFreqRange = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFreqRange.setStatus('current')
if mibBuilder.loadTexts: rxFreqRange.setDescription('The Radio Rx Frequency Range.\n                            FDD radios have a Tx and Rx frequency range.\n                            See Web, Radio Information, RF Receive range.\n                            TDD radios have one frequency range.\n                            See Web, Radio Information, RF Frequency Band.')
rfFreqBand = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfFreqBand.setStatus('current')
if mibBuilder.loadTexts: rfFreqBand.setDescription('The Device Frequency Band (Range).\n                            TDD radios have N/A value in this field.\n                            FDD radios have TX High or TX Low depending on used diplexer and Transmit frequency.\n                            See Web, Radio Information, Tx Band.')
hwId = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwId.setStatus('current')
if mibBuilder.loadTexts: hwId.setDescription('The Device Hardware ID number. See Web, Radio Information, Hardware ID number')
modelNumber = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelNumber.setStatus('current')
if mibBuilder.loadTexts: modelNumber.setDescription('The Model Number of the Radio. See Web, Radio Information, Model Number')
licenseFeatures = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatures.setStatus('current')
if mibBuilder.loadTexts: licenseFeatures.setDescription('The list of the features enabled by License Key')
radioAdmin = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2))
if mibBuilder.loadTexts: radioAdmin.setStatus('current')
if mibBuilder.loadTexts: radioAdmin.setDescription('Radio Administration parameters.')
sysDate = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setUnits('MM/DD/YYYY').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDate.setStatus('current')
if mibBuilder.loadTexts: sysDate.setDescription('The Radio System Date, MM/DD/YYYY.  See Web, Administration, Settings, Date.\n                            To make permanent, write save to commitAdminSettings after change.\n                            After commit, SNMP restarts and will be down for 30 seconds.')
sysTime = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTime.setStatus('current')
if mibBuilder.loadTexts: sysTime.setDescription('The Radio System Time, HH:MM:SS, as 24 hours.  See Web, Administration, Settings, Time.\n                            To make permanent, write save to commitAdminSettings after change.\n                            After commit, SNMP restarts and will be down for 30 seconds.')
radioName = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 3))
rnLocal = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rnLocal.setStatus('current')
if mibBuilder.loadTexts: rnLocal.setDescription('The user specifiable Radio Name for this radio.\n                            See Web, Administration, Settings, Radio Name.\n                            To make permanent, write save to commitAdminSettings after change.')
rnRemote = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnRemote.setStatus('current')
if mibBuilder.loadTexts: rnRemote.setDescription('The Radio Name of the Radio at the far end of this RF Link.\n                            Can only be set at that radio.  See Web, Administration, Settings, Radio Name.')
linkName = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkName.setStatus('current')
if mibBuilder.loadTexts: linkName.setDescription('The user specifiable Link Name for this radio.\n                            See Web, Administration, Settings, Link Name.\n                            To make permanent, write save to commitAdminSettings after change.')
linkSecKey = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkSecKey.setStatus('current')
if mibBuilder.loadTexts: linkSecKey.setDescription('The Link Security Key must match on both ends of an RF Link for traffic to pass.\n                            See Web, Administration, Settings, Link Security Key.\n                            To make permanent, write save to commitAdminSettings after change.')
adminPassword = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPassword.setStatus('current')
if mibBuilder.loadTexts: adminPassword.setDescription('The password for admin login to Web/CLI.\n                            See Web, Administration, Settings, Admin Password.\n                            To make permanent, write save to commitAdminSettings after change.')
userPassword = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('current')
if mibBuilder.loadTexts: userPassword.setDescription('The password for user login to Web/CLI.\n                            See Web, Administration, Settings, User Password.\n                            To make permanent, write save to commitAdminSettings after change.')
ipAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 8))
ipLocal = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 8, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipLocal.setStatus('current')
if mibBuilder.loadTexts: ipLocal.setDescription('The IP address of local radio.\n                            This IP address is used to manage radio.\n                            See Web, Administration, Settings, IP Address.\n                            To make permanent, write save to commitAdminSettings after change.')
ipRemote = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 8, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRemote.setStatus('current')
if mibBuilder.loadTexts: ipRemote.setDescription('The IP address of the remote Radio.\n                            This IP address is used to manage Remote radio.\n                            Can only be set at that radio. See Web, Administration, Settings, IP Address.')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
if mibBuilder.loadTexts: subnetMask.setDescription('The Subnet Mask for IP address of local radio.\n                            See Web, Administration, Settings, IP Mask.\n                            To make permanent, write save to commitAdminSettings after change.')
ipAddressNetmask = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 18))).setUnits('IP/NN Where NN=00 To 32').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddressNetmask.setStatus('current')
if mibBuilder.loadTexts: ipAddressNetmask.setDescription('The IP address and Subnet Mask of local radio. ie 10.0.0.1/24.\n                            To make permanent, write save to commitAdminSettings after change.')
defaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultGateway.setStatus('current')
if mibBuilder.loadTexts: defaultGateway.setDescription('The Default Gateway for local radio port.\n                            See Web, Administration, Settings, Default Gateway.\n                            To make permanent, write save to commitAdminSettings after change.')
aesEnable = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("aesDisable", 0), ("aesEnable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesEnable.setStatus('current')
if mibBuilder.loadTexts: aesEnable.setDescription('The AES enable(0)/disable(1).\n                            AES (Advance Encryption Standard) can be implemented to provide additional \n                            data security for the wireless link. \n                            This function requires an upgrade license key (purchased separately).\n                            See Web, Administration, Settings, AES Settings, Enable AES.\n                            To make permanent, write save to commitAdminSettings after change.')
aesKey = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesKey.setStatus('current')
if mibBuilder.loadTexts: aesKey.setDescription('The symmetric AES key for encrypt/decrypt payload data.\n                            Different bitlength encryption license keys (for example, 128-bit and 256-bit)\n                            are available, depending on model type and license type.\n                            AES Key should match both on local radio and far end radio.\n                            See Web, Administration, Settings, AES Settings, AES Key.\n                            To make permanent, write save to commitAdminSettings after change.')
licKey = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licKey.setStatus('current')
if mibBuilder.loadTexts: licKey.setDescription('The license key which defines radio features and capabilities.\n                            See Web, Administration, Settings, License Key.\n                            To make permanent, write save to commitAdminSettings after change.')
snmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17))
trapIpaddr1 = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIpaddr1.setStatus('current')
if mibBuilder.loadTexts: trapIpaddr1.setDescription('The IP address to which the SNMP traps are directed.\n                            See Web, Administration, SNMP, Traps, Trap Destination IP Address.')
trapIpaddrEnable1 = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 2), EnableStatusT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIpaddrEnable1.setStatus('current')
if mibBuilder.loadTexts: trapIpaddrEnable1.setDescription('Enable/Disable trap ip address.')
trapIpaddr2 = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIpaddr2.setStatus('current')
if mibBuilder.loadTexts: trapIpaddr2.setDescription('The IP address to which the SNMP traps are directed.\n                            See Web, Administration, SNMP, Traps, Trap Destination IP Address.')
trapIpaddrEnable2 = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 4), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIpaddrEnable2.setStatus('current')
if mibBuilder.loadTexts: trapIpaddrEnable2.setDescription('Enable/Disable trap ip address.')
trapIpaddr3 = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIpaddr3.setStatus('current')
if mibBuilder.loadTexts: trapIpaddr3.setDescription('The IP address to which the SNMP traps are directed.\n                            See Web, Administration, SNMP, Traps, Trap Destination IP Address.')
trapIpaddrEnable3 = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 6), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIpaddrEnable3.setStatus('current')
if mibBuilder.loadTexts: trapIpaddrEnable3.setDescription('Enable/Disable trap ip address.')
trapIpaddr4 = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIpaddr4.setStatus('current')
if mibBuilder.loadTexts: trapIpaddr4.setDescription('The IP address to which the SNMP traps are directed.\n                            See Web, Administration, SNMP, Traps, Trap Destination IP Address.')
trapIpaddrEnable4 = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 8), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIpaddrEnable4.setStatus('current')
if mibBuilder.loadTexts: trapIpaddrEnable4.setDescription('Enable/Disable trap ip address.')
trapAuth = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 9), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAuth.setStatus('current')
if mibBuilder.loadTexts: trapAuth.setDescription('Authentication trap enable(1)/disable(0).\n                            This is an SNMP standard trap when password information for SNMP is incorrect.\n                            See Web, Administration, SNMP, Traps, Authentication Trap.')
trapReboot = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 10), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapReboot.setStatus('current')
if mibBuilder.loadTexts: trapReboot.setDescription('Reboot trap enable(0)/disable(1).\n                            This trap is sent after any radio reboot to inform the manager of the reboot status.\n                            See Web, Administration, SNMP, Traps, Radio Reboot Trap.')
trapLocLinkStat = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 11), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLocLinkStat.setStatus('current')
if mibBuilder.loadTexts: trapLocLinkStat.setDescription('Local Link Status trap enable(0)/disable(1).\n                            This trap is sent when Link is in errored state (equivalent to the Link LED).\n                            See Web, Administration, SNMP, Traps, Local Link Status Trap.')
trapLocAlarmStat = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 12), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLocAlarmStat.setStatus('current')
if mibBuilder.loadTexts: trapLocAlarmStat.setDescription('Local Alarm Status trap enable(0)/disable(1).\n                            This trap is sent when local radio Status is in errored state \n                            (equivalent to the Status LED).\n                            See Web, Administration, SNMP, Traps, Local Radio Status Trap.')
trapRemAlarmStat = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 13), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapRemAlarmStat.setStatus('current')
if mibBuilder.loadTexts: trapRemAlarmStat.setDescription('Remote Alarm Status trap enable(0)/disable(1).\n                            This trap is sent when remote radio Status is in errored state \n                            (equivalent to the Status LED).\n                            See Web, Administration, SNMP, Traps, Remote Radio Status Trap.')
trapLocTempStat = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 14), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLocTempStat.setStatus('current')
if mibBuilder.loadTexts: trapLocTempStat.setDescription('Local Temperature Status trap enable(0)/disable(1).\n                            This trap is sent when the internal temperature reaches the warning point.\n                            See Web, Administration, SNMP, Traps, Temperature Status Trap.')
trapv1Enable = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 15), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapv1Enable.setStatus('current')
if mibBuilder.loadTexts: trapv1Enable.setDescription('SNMPv1 Traps enable(0)/disable(1).\n                            Enables traps for SNMP protocol version 1.\n                            See Web, Administration, SNMP, Traps, Enable SNMPv1 Traps.')
trapv2cEnable = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 16), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapv2cEnable.setStatus('current')
if mibBuilder.loadTexts: trapv2cEnable.setDescription('SNMPv2c Traps enable(0)/disable(1).\n                            Enables traps for SNMP protocol version 2c.\n                            See Web, Administration, SNMP, Traps, Enable SNMPv2c Traps.')
trapv3Enable = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 17), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapv3Enable.setStatus('current')
if mibBuilder.loadTexts: trapv3Enable.setDescription('SNMPv3 Traps enable(0)/disable(1).\n                            Enables traps for SNMP protocol version 3.\n                            See Web, Administration, SNMP, Traps, Enable SNMPv3 Traps.')
trapLocRslStat = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 18), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLocRslStat.setStatus('current')
if mibBuilder.loadTexts: trapLocRslStat.setDescription('Local RSL Status trap enable(0)/disable(1).\n                            This trap is sent when the local RSL drops below the value set in the\n                            RSL Threshold Value (dBm) field.\n                            See Web, Administration, SNMP, Traps, Local RSL Status Trap.')
trapLocRslThreshold = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLocRslThreshold.setStatus('current')
if mibBuilder.loadTexts: trapLocRslThreshold.setDescription('Local RSL Threshold.\n                            Exalt recommends that this trap be set to a value 5dBm or 10dBm above \n                            the threshold as a warning that the system has faded and may be approaching an outage.\n                            See Web, Administration, SNMP, Traps, Threshold Value.')
commitSnmpSettings = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 1000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commitSnmpSettings.setStatus('current')
if mibBuilder.loadTexts: commitSnmpSettings.setDescription('Option strings to be written are: save, clear, correspondingly saving changes to\n                            configuration to the persistent storage or clearing unsaved changes.')
ntp = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18))
if mibBuilder.loadTexts: ntp.setStatus('current')
if mibBuilder.loadTexts: ntp.setDescription('NTP and Time zone configuration.')
ntpClientEnable = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18, 1), NtpClientEnableT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClientEnable.setStatus('current')
if mibBuilder.loadTexts: ntpClientEnable.setDescription('this mib to enable/disable the NTP client in the radio.\n                             0 - disable NTP client. \n                             1 - enable with 1 NTP server. \n                             2 - enable with 2 NTP servers.\n                             3 - enable with 3 NTP servers.\n                             4 - enable with 4 NTP servers.')
ntpServer1IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer1IpAddr.setStatus('current')
if mibBuilder.loadTexts: ntpServer1IpAddr.setDescription('IP address for the first NTP server in xxx.xxx.xxx.xxx format')
ntpServer2IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer2IpAddr.setStatus('current')
if mibBuilder.loadTexts: ntpServer2IpAddr.setDescription('IP address for the second NTP server in xxx.xxx.xxx.xxx format')
ntpServer3IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer3IpAddr.setStatus('current')
if mibBuilder.loadTexts: ntpServer3IpAddr.setDescription('IP address for the third NTP server in xxx.xxx.xxx.xxx format')
ntpServer4IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer4IpAddr.setStatus('current')
if mibBuilder.loadTexts: ntpServer4IpAddr.setDescription('IP address for the forth NTP server in xxx.xxx.xxx.xxx format')
ntpTimeZoneSelect = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18, 6), TimeZoneT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpTimeZoneSelect.setStatus('current')
if mibBuilder.loadTexts: ntpTimeZoneSelect.setDescription('Time Zone selection.\n\n                            0 - (GMT-11:00) Samoa\n                            1 - (GMT-10.00) Hawaii\n                            2 - (GMT-09:00) Alaska\n                            3 - (GMT-08:00) Pacific Time\n                            4 - (GMT-07:00) Arizona\n                            5 - (GMT-07:00) Montain Time\n                            6 - (GMT-06:00) Central Time\n                            7 - (GMT-05:00) Eastern Time\n                            8 - (GMT-05:00) Indiana (East)\n                            9 - (GMT-04:00) Atlantic Time (Canada)\n                            10- (GMT) Coordinated Universal Time\n                            11- (GMT) London\n                            12- (GMT+01:00) Berlin\n                            13- (GMT+01:00) Belgrade\n                            14- (GMT+01:00) Paris\n                            15- (GMT+02:00) Cairo\n                            16- (GMT+02:00) Helsinki\n                            17- (GMT+03:00) Baghdad\n                            18- (GMT+03:00) Moscow\n                            19- (GMT+03:30) Tehran\n                            20- (GMT+04:30) Kabul\n                            21- (GMT+05:00) Karachi\n                            22- (GMT+07:00) Bangkok\n                            23- (GMT+08:00) Shanghai\n                            24- (GMT+08:00) Taipei\n                            25- (GMT+09:00) Tokyo\n                            26- (GMT+09:00) Seoul\n                            27- (GMT+10:00) Sydney\n                            28- (GMT+10:00) Vladivostok')
commitNtpSettings = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18, 1000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commitNtpSettings.setStatus('current')
if mibBuilder.loadTexts: commitNtpSettings.setDescription('This command allows saving or clear the NTP and Tome Zone configuration.\n                            If the save includes the change of time zone, the radio will automatically reboot\n                            to take effect the newly selected time zone. \n                            Option strings to be written are: save, clear, correspondingly saving changes to\n                            configuration to the persistent storage or clearing unsaved changes.')
commitAdminSettings = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 1000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commitAdminSettings.setStatus('current')
if mibBuilder.loadTexts: commitAdminSettings.setDescription("The Commit Administration settings command. Valid values: 'save', 'clear'.\n                            Configuration changes via SNMP do not take effect until \n                            'save' (Commit) command is sent to this parameter.\n                            'clear' (Cancel) command is used to cancel configuration changes before commit operation.\n                            In case of invalid configuration this parameter contains text description of the problem.")
radioConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3))
if mibBuilder.loadTexts: radioConfig.setStatus('current')
if mibBuilder.loadTexts: radioConfig.setDescription('The Radio Configuration Section.')
systemConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1))
if mibBuilder.loadTexts: systemConfig.setStatus('current')
if mibBuilder.loadTexts: systemConfig.setDescription('This is the device specific configuration section.')
commitSystemSettings = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1, 1000), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commitSystemSettings.setStatus('current')
if mibBuilder.loadTexts: commitSystemSettings.setDescription("The Commit System Configuration settings command. Valid values: 'save', 'clear'.\n                            Configuration changes via SNMP do not take effect until \n                            'save' (Commit) command is sent to this parameter.\n                            'clear' (Cancel) command is used to cancel configuration changes before commit operation.\n                            In case of invalid configuration this parameter contains text description of the problem.")
interface = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2))
if mibBuilder.loadTexts: interface.setStatus('current')
if mibBuilder.loadTexts: interface.setDescription('Radio Interfaces Configuration section.')
te1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2))
if mibBuilder.loadTexts: te1.setStatus('current')
if mibBuilder.loadTexts: te1.setDescription('T1,E1 interfaces Configuration section.\n                            Section allows to configure T1/E1 ports on the radio if any.')
te1NumChannels = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 1), Gauge32()).setUnits('channels').setMaxAccess("readonly")
if mibBuilder.loadTexts: te1NumChannels.setStatus('current')
if mibBuilder.loadTexts: te1NumChannels.setDescription('The Number of T1 or E1 channels supported by the Radio.')
te1NumActiveChannels = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 2), Gauge32()).setUnits('channels').setMaxAccess("readonly")
if mibBuilder.loadTexts: te1NumActiveChannels.setStatus('current')
if mibBuilder.loadTexts: te1NumActiveChannels.setDescription('The Current number of channels available, based\n                             on bandwitdh of the RF link and the license key.')
selectT1orE1 = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("t1", 0), ("e1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: selectT1orE1.setStatus('current')
if mibBuilder.loadTexts: selectT1orE1.setDescription('Select operation mode of T1/E1 interfaces. Either T1(0) or E1(1).\n                            See Web, Configuration, Interface, T1/E1, Set To E1/T1 Mode button.')
te1Interfaces = MibTable((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 4), )
if mibBuilder.loadTexts: te1Interfaces.setStatus('current')
if mibBuilder.loadTexts: te1Interfaces.setDescription('Attributes for T1 or E1 ports.')
te1Interface = MibTableRow((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 4, 1), ).setIndexNames((0, "ExaltComProducts", "te1Status"), (0, "ExaltComProducts", "t1LBO"), (0, "ExaltComProducts", "te1AIS"), (0, "ExaltComProducts", "t1LineCode"), (0, "ExaltComProducts", "te1LoopBackMode"))
if mibBuilder.loadTexts: te1Interface.setStatus('current')
if mibBuilder.loadTexts: te1Interface.setDescription('An entry in the T1/E1 Attribute table.')
te1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 4, 1, 1), Te1StatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: te1Status.setStatus('current')
if mibBuilder.loadTexts: te1Status.setDescription('The T1/E1 status: enable(1)/disable(0).\n                            Parameter allows to enable/disable each individual T1 channel.\n                            See Web, Configuration, Interface, T1/E1, Status.\n                            To make permanent, write save to commitTe1Settings after change.')
t1LBO = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 4, 1, 2), Te1LboT()).setUnits('feet').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1LBO.setStatus('current')
if mibBuilder.loadTexts: t1LBO.setDescription('The Line Build Out length range.\n                            Valid values (ft): lbo0to133(0), lbo133to266(1), lbo266to399(2), lbo399to533(3), lbo533to655(4).\n                            See Web, Configuration, Interface, T1/E1, LBO.\n                            To make permanent, write save to commitTe1Settings after change.')
te1AIS = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 4, 1, 3), Te1StatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: te1AIS.setStatus('current')
if mibBuilder.loadTexts: te1AIS.setDescription('The T1/E1 AIS enabled flag: enable(1)/disable(0).\n                            If enabled, the radio places an AIS code on the output of the associated interface \n                            if and when the link fails or when there is no E1 signal available from the far\n                            end to provide the user at the local end.\n                            See Web, Configuration, Interface, T1/E1, AIS.\n                            To make permanent, write save to commitTe1Settings after change.')
t1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 4, 1, 4), Te1LineCodeT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1LineCode.setStatus('current')
if mibBuilder.loadTexts: t1LineCode.setDescription('The T1/E1 Line Code type: b8zs(0), ami(1). \n                            See Web, Configuration, Interface, T1/E1, AIS, Line Code.\n                            To make permanent, write save to commitTe1Settings after change.')
te1LoopBackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 4, 1, 5), Te1LoopBackModeT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: te1LoopBackMode.setStatus('current')
if mibBuilder.loadTexts: te1LoopBackMode.setDescription('The Loop Back Mode for a T1/E1 interface.\n                            Valid values: disabled(0), ExternalLocal(1), ExternalRemote(2), Internal(3).\n                            All loopback configurations control the loop at the Line Interface integrated circuit,\n                            which is the device wired directly to the front panel ports.\n                            See Web, Configuration, Interface, T1/E1, AIS, Loopback.\n                            To make permanent, write save to commitTe1Settings after change.')
commitTe1Settings = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 1000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commitTe1Settings.setStatus('current')
if mibBuilder.loadTexts: commitTe1Settings.setDescription("The Commit TE1 Configuration settings command. Valid values: 'save', 'clear'.\n                            Configuration changes to TE1 ports via SNMP do not take effect until \n                            'save' (Commit) command is sent to this parameter.\n                            'clear' (Cancel) command is used to cancel configuration changes before commit operation.\n                            In case of invalid configuration this parameter contains text description of the problem.")
fileManagement = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3))
if mibBuilder.loadTexts: fileManagement.setStatus('current')
if mibBuilder.loadTexts: fileManagement.setDescription('The File Management Section. \n                            This section allows to initiate Upload/Download firmware/configuration/logs, \n                            perform Firmware activation procedure.')
currentFwFilename = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFwFilename.setStatus('current')
if mibBuilder.loadTexts: currentFwFilename.setDescription('The file name of the currently running firmware.\n                            See Web, Administration, File Management, File Activation, Current File.')
alternateFwFilename = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alternateFwFilename.setStatus('current')
if mibBuilder.loadTexts: alternateFwFilename.setDescription('The file name of the alternate firmware image.\n                            See Web, Administration, File Management, File Activation, Alternative File.')
swapFWimage = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swapFWimage.setStatus('current')
if mibBuilder.loadTexts: swapFWimage.setDescription("Swap the firmware images and restart radio.\n                            To perform swap operation 'swap' command needs to be sent to this parameter.\n                            For ExtendAirG2 to perform revert to factory operation 'factory' command needs to be sent.\n                            Radio will become unavailable for several minutes.")
fileTransfer = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 4))
if mibBuilder.loadTexts: fileTransfer.setStatus('current')
if mibBuilder.loadTexts: fileTransfer.setDescription('The File Transfer Section.\n                            This section allows to initiate Upload/Download firmware/configuration/logs \n                            over TFTP protocol.')
factoryFwFilename = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryFwFilename.setStatus('current')
if mibBuilder.loadTexts: factoryFwFilename.setDescription('The file name of the factory firmware image.\n                            See Web, Administration, File Management, File Activation, Factory File.')
tftpServerIp = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServerIp.setStatus('current')
if mibBuilder.loadTexts: tftpServerIp.setDescription('The TFTP Server IP address.\n                            ')
uploadFilename = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uploadFilename.setStatus('current')
if mibBuilder.loadTexts: uploadFilename.setDescription("The name of the file for upload operation.\n                            For configuration file uploadFilename should be always 'config.xml'.\n                            uploadFilename value should match the file name in TFTP server folder.")
transferType = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 4, 3), FileTransferTypeT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferType.setStatus('current')
if mibBuilder.loadTexts: transferType.setDescription('The file transfer type.\n                            Valid values:\n                              - uploadFirmware(0)\n                              - uploadConfig(1)\n                              - uploadRDD(2) (Valid only for TDD radios)\n                              - downloadFirmware(3)\n                              - downloadConfig(4)\n                              - downloadMIBs(5)\n                              - downloadEventLogs(6).\n                            The actual operation starts via updating transferStart parameter value.')
transferStart = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 4, 4), FileTransferStartT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferStart.setStatus('current')
if mibBuilder.loadTexts: transferStart.setDescription('TransferStart parameter is used to initiate file transfer operation.\n                            Send startTransfer(1) to this parameter.')
transferStatus = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferStatus.setStatus('current')
if mibBuilder.loadTexts: transferStatus.setDescription('The current file transfer status.')
radioMonitor = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4))
if mibBuilder.loadTexts: radioMonitor.setStatus('current')
if mibBuilder.loadTexts: radioMonitor.setDescription('Monitor Various components.')
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2))
almLocal = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3))
locSysAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1))
locEthAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 2))
locTe1Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 3))
locLinkState = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1, 1), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locLinkState.setStatus('current')
if mibBuilder.loadTexts: locLinkState.setDescription('The Link Status Alarm.\n                            Possible values:\n                             - almNORMAL(0) - Error-free connection (BER<10e-6)\n                             - almMINOR(1)  - Errorred connection (BER<10e-3)\n                             - almMAJOR(2) - No link (BER>10e-3)\n                            See Web, Monitor, Alarms, Link')
locTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1, 2), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locTempAlarm.setStatus('current')
if mibBuilder.loadTexts: locTempAlarm.setDescription('The Temperature Alarm state.\n                            Possible values:\n                             - almNORMAL(0) - Normal temprature range\n                             - almMINOR(1)  - Exceeding normal temprature range\n                            See Web, Monitor, Alarms, Temperature')
locCurrentTemp = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1, 3), Integer32()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: locCurrentTemp.setStatus('current')
if mibBuilder.loadTexts: locCurrentTemp.setDescription('The Internal Temperature in Celsius.')
locCurrentTempS = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locCurrentTempS.setStatus('current')
if mibBuilder.loadTexts: locCurrentTempS.setDescription('The Internal Temperature as a string. ')
locLinkSecMismatch = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1, 9), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locLinkSecMismatch.setStatus('current')
if mibBuilder.loadTexts: locLinkSecMismatch.setDescription('This is link security mismatch alarm.\n                            This alarm tells if the Link Security Key is matching or not.\n                            Possible values:\n                             - almNORMAL(0) - Link Secutiry keys match\n                             - almMAJOR(2) - Link Secutiry keys do not match\n                            ')
locLinkStateV = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1, 15), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locLinkStateV.setStatus('current')
if mibBuilder.loadTexts: locLinkStateV.setDescription('Vertical Link Status Alarm. -<g89><>')
locLinkStateH = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1, 16), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locLinkStateH.setStatus('current')
if mibBuilder.loadTexts: locLinkStateH.setDescription('Horizontal Link Status Alarm. -<g89><>')
locTe1LinkSummary = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 3, 1), Led4ColorT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locTe1LinkSummary.setStatus('current')
if mibBuilder.loadTexts: locTe1LinkSummary.setDescription('The T1/E1 Link Summary LED color. ')
locTE1Alarms = MibTable((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 3, 2), )
if mibBuilder.loadTexts: locTE1Alarms.setStatus('current')
if mibBuilder.loadTexts: locTE1Alarms.setDescription('The Local T1/E1 Interface Alarms.')
locTe1AlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 3, 2, 1), ).setIndexNames((0, "ExaltComProducts", "locTe1Alarm"))
if mibBuilder.loadTexts: locTe1AlarmsEntry.setStatus('current')
if mibBuilder.loadTexts: locTe1AlarmsEntry.setDescription('T1/E1 Alarms table Entry.')
locTe1Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 3, 2, 1, 1), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locTe1Alarm.setStatus('current')
if mibBuilder.loadTexts: locTe1Alarm.setDescription('The Alarms state for the Local T1/E1 Channel.\n                            Possible values:\n                             - almNORMAL(0) - Enabled and connection present\n                             - almMAJOR(2) - Enabled and no connection present\n                             - almDisable(3) - Disabled and no connection present\n                             - almNotAvailable(4) - T1/E1 channel is not available\n                            See Web, Monitor, Alarms, T1/E1 Input')
almRemote = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4))
remSysAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1))
remEthAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 2))
remTe1Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 3))
remLinkState = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1, 1), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remLinkState.setStatus('current')
if mibBuilder.loadTexts: remLinkState.setDescription('The Link Status Alarm for far end radio.\n                            Possible values:\n                             - almNORMAL(0) - Error-free connection (BER<10e-6)\n                             - almMINOR(1)  - Errorred connection (BER<10e-3)\n                             - almMAJOR(2) - No link (BER>10e-3)\n                             - almNotAvailable(4) - Telemetry is down\n                            See Web, Monitor, Alarms, Link')
remTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1, 2), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remTempAlarm.setStatus('current')
if mibBuilder.loadTexts: remTempAlarm.setDescription('The Temperature Alarm state for far end radio.\n                            Possible values:\n                             - almNORMAL(0) - Normal temprature range\n                             - almMINOR(1)  - Exceeding normal temprature range\n                             - almNotAvailable(4) - Telemetry is down\n                            See Web, Monitor, Alarms, Temperature')
remCurrentTemp = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1, 3), Integer32()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: remCurrentTemp.setStatus('current')
if mibBuilder.loadTexts: remCurrentTemp.setDescription('The Internal Temperature in Celsius for far end radio. ')
remCurrentTempS = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remCurrentTempS.setStatus('current')
if mibBuilder.loadTexts: remCurrentTempS.setDescription('The internal Temperature as a string for far end radio. ')
remLinkSecMismatch = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1, 9), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remLinkSecMismatch.setStatus('current')
if mibBuilder.loadTexts: remLinkSecMismatch.setDescription('This is link security mismatch alarm.\n                            This alarm tells if the Link Security Key is matching or not.\n                            Possible values:\n                             - almNORMAL(0) - Link Secutiry keys match\n                             - almMAJOR(2) - Link Secutiry keys do not match\n                             - almNotAvailable(4) - Telemetry is down\n                            ')
remLinkStateV = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1, 15), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remLinkStateV.setStatus('current')
if mibBuilder.loadTexts: remLinkStateV.setDescription('Vertical Link Status Alarm. -<g89><>')
remLinkStateH = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1, 16), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remLinkStateH.setStatus('current')
if mibBuilder.loadTexts: remLinkStateH.setDescription('Horizontal Link Status Alarm. -<g89><>')
remTe1LinkSummary = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 3, 1), Led4ColorT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remTe1LinkSummary.setStatus('current')
if mibBuilder.loadTexts: remTe1LinkSummary.setDescription('The T1/E1 Link Summary LED color. ')
remTE1Alarms = MibTable((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 3, 2), )
if mibBuilder.loadTexts: remTE1Alarms.setStatus('current')
if mibBuilder.loadTexts: remTE1Alarms.setDescription('The Remotel T1/E1 Interface Alarms.')
remTe1AlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 3, 2, 1), ).setIndexNames((0, "ExaltComProducts", "remTe1Alarm"))
if mibBuilder.loadTexts: remTe1AlarmsEntry.setStatus('current')
if mibBuilder.loadTexts: remTe1AlarmsEntry.setDescription('T1/E1 Alarms table Entry.')
remTe1Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 3, 2, 1, 1), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remTe1Alarm.setStatus('current')
if mibBuilder.loadTexts: remTe1Alarm.setDescription('The Alarms state for the Local T1/E1 Channel of far end radio.\n                            Possible values:\n                             - almNORMAL(0) - Enabled and connection present\n                             - almMAJOR(2) - Enabled and no connection present\n                             - almDisable(3) - Disabled and no connection present\n                             - almNotAvailable(4) - Telemetry is down or T1/E1 channel is not available\n                            See Web, Monitor, Alarms, T1/E1 Input')
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3))
perfLocal = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1))
perfRemote = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2))
locCurrentBER = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 1), Integer32()).setUnits('BER * 1000000.0').setMaxAccess("readonly")
if mibBuilder.loadTexts: locCurrentBER.setStatus('current')
if mibBuilder.loadTexts: locCurrentBER.setDescription('The Curent Bit-Error Rate as scaled integer for local radio.\n                            The BER multiplied by 1,000,000.\n                            If the link is operating perfectly, this should indicate zero.\n                            See Web, Monitor, Performance, Current BER')
locCurrentBERstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locCurrentBERstr.setStatus('current')
if mibBuilder.loadTexts: locCurrentBERstr.setDescription('The Current Bit-Error Rate as a string. ')
locCurrentRSL = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: locCurrentRSL.setStatus('current')
if mibBuilder.loadTexts: locCurrentRSL.setDescription('Current RSL is the measurement of the received signal level.\n                            When the RSL falls below the threshold specification, \n                            the link disconnects and will not reconnect until \n                            the RSL is above the threshold specification.\n                            See Web, Monitor, Performance, Current RSL')
locCurrentRSLstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locCurrentRSLstr.setStatus('current')
if mibBuilder.loadTexts: locCurrentRSLstr.setDescription('The Current RSL as a string.')
locErrorDuration = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 5), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: locErrorDuration.setStatus('current')
if mibBuilder.loadTexts: locErrorDuration.setDescription('The Error Duration indicates the total number of seconds that occurred where \n                            there was at least one bit error since the last time that \n                            the radio statistics counter was reset.\n                            See Web, Monitor, Performance, Errored Seconds')
locErrorDurationStr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locErrorDurationStr.setStatus('current')
if mibBuilder.loadTexts: locErrorDurationStr.setDescription('The Error Duration as a formatted string.')
locUnavailDuration = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 7), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: locUnavailDuration.setStatus('current')
if mibBuilder.loadTexts: locUnavailDuration.setDescription('Unavailable Duration keeps track of every second where the BER equals or exceeds 1x10-3, \n                            as well as any seconds where there is a complete loss of radio communication.\n                            See Web, Monitor, Performance, Unavailable Seconds')
locUnavailDurationStr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locUnavailDurationStr.setStatus('current')
if mibBuilder.loadTexts: locUnavailDurationStr.setDescription('The Unavailable Duration as a formatted string.')
locMinRSL = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 9), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: locMinRSL.setStatus('current')
if mibBuilder.loadTexts: locMinRSL.setDescription('The Minimum RSL indicates the worst (lowest) received signal level \n                            that occurred since the last counter reset.\n                            See Web, Monitor, Performance, Minimum RSL')
locMinRSLstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMinRSLstr.setStatus('current')
if mibBuilder.loadTexts: locMinRSLstr.setDescription('The Minimum RSL value as a string.')
locMinRSLtimestamp = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMinRSLtimestamp.setStatus('current')
if mibBuilder.loadTexts: locMinRSLtimestamp.setDescription('The Minimum RSL Timestamp indicates the date and time when the Minimum RSL occurred.\n                            See Web, Monitor, Performance, Minimum RSL Timestamp')
locMaxRSL = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 12), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: locMaxRSL.setStatus('current')
if mibBuilder.loadTexts: locMaxRSL.setDescription('The Maximum RSL indicates the best (highest) RSL \n                            that occurred since the last counter reset.\n                            See Web, Monitor, Performance, Maximum RSL')
locMaxRSLstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 13), DisplayString()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: locMaxRSLstr.setStatus('current')
if mibBuilder.loadTexts: locMaxRSLstr.setDescription('The Maximum RSL level As string.')
locSampleDuration = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 14), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: locSampleDuration.setStatus('current')
if mibBuilder.loadTexts: locSampleDuration.setDescription('The Sample Duration indicates the amount of time passed since the last counter reset.\n                            See Web, Monitor, Performance, Time Since Reset')
locSampleDurationStr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locSampleDurationStr.setStatus('current')
if mibBuilder.loadTexts: locSampleDurationStr.setDescription('The Sample Duration value as a formatted string.')
locEthPerfInterfaces = MibTable((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 16), )
if mibBuilder.loadTexts: locEthPerfInterfaces.setStatus('current')
if mibBuilder.loadTexts: locEthPerfInterfaces.setDescription('Performance characteristics of local Ethernet interfaces')
locEthPerfInterfacesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 16, 1), ).setIndexNames((0, "ExaltComProducts", "locEthUtilizationIn"), (0, "ExaltComProducts", "locEthUtilizationOut"), (0, "ExaltComProducts", "locEthSpeed"))
if mibBuilder.loadTexts: locEthPerfInterfacesEntry.setStatus('current')
if mibBuilder.loadTexts: locEthPerfInterfacesEntry.setDescription('An entry in the Performance characteristics of local Ethernet interfaces table')
locEthUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locEthUtilizationIn.setStatus('current')
if mibBuilder.loadTexts: locEthUtilizationIn.setDescription('Inbound ethernet utilization (%).\n                            See Web, Analysis, Ethernet Utilization.')
locEthUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locEthUtilizationOut.setStatus('current')
if mibBuilder.loadTexts: locEthUtilizationOut.setDescription('Outbound ethernet utilization (%).\n                            See Web, Analysis, Ethernet Utilization.')
locEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locEthSpeed.setStatus('current')
if mibBuilder.loadTexts: locEthSpeed.setDescription('Current Ethernet Speed.\n                            See Web, Monitor, Ethernet Performance.')
locEthUtilizationWatermarkEnabled = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 17), ExaltEnableT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locEthUtilizationWatermarkEnabled.setStatus('current')
if mibBuilder.loadTexts: locEthUtilizationWatermarkEnabled.setDescription('Ethernet utilization watermark enable(1)/disable(0).\n                            See Web, Analysis, Ethernet Utilization, Ethernet Utilization Watermark.')
locEthUtilizationWatermark = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locEthUtilizationWatermark.setStatus('current')
if mibBuilder.loadTexts: locEthUtilizationWatermark.setDescription('Ethernet utilization watermark level (%).\n                            See Web, Analysis, Ethernet Utilization, Watermark level.')
locEthUtilizationWatermarkTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 19), ExaltEnableT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locEthUtilizationWatermarkTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: locEthUtilizationWatermarkTrapEnabled.setDescription('Ethernet utilization watermark trap enable(1)/disable(0).\n                            The watermark trap function allows administrators to receive an SNMP trap\n                            when watermark conditions are exceeded.\n                            See Web, Analysis, Ethernet Utilization, Enable Ethernet Utilization Trap.')
locEthUtilizationWatermarkTrapDuration = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locEthUtilizationWatermarkTrapDuration.setStatus('current')
if mibBuilder.loadTexts: locEthUtilizationWatermarkTrapDuration.setDescription('Ethernet utilization trap limit in minutes/day (0-1440 minutes).\n                            See Web, Analysis, Ethernet Utilization, Send trap if watermark hit duration exceeds.')
locMaximumTxModulation = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 100), AcmModulationT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMaximumTxModulation.setStatus('current')
if mibBuilder.loadTexts: locMaximumTxModulation.setDescription('The highest/maximum Tx modulation when ACM is enabled since the last counter reset.\n                            See Web, Monitor, Performance, Tx modulation.')
locActiveTxModulation = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 101), AcmModulationT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locActiveTxModulation.setStatus('current')
if mibBuilder.loadTexts: locActiveTxModulation.setDescription('The active Tx modulation when ACM is enabled.\n                            See Web, Monitor, Performance, Tx modulation.')
locMinimumTxModulation = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 102), AcmModulationT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMinimumTxModulation.setStatus('current')
if mibBuilder.loadTexts: locMinimumTxModulation.setDescription('The lowest/minimum Tx modulation when ACM is enabled since the last counter reset.\n                            See Web, Monitor, Performance, Tx modulation.')
locMaximumRxModulation = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 103), AcmModulationT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMaximumRxModulation.setStatus('current')
if mibBuilder.loadTexts: locMaximumRxModulation.setDescription('The highest/maximum Rx modulation when ACM is enabled since the last counter reset.\n                            See Web, Monitor, Performance, Rx modulation.')
locActiveRxModulation = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 104), AcmModulationT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locActiveRxModulation.setStatus('current')
if mibBuilder.loadTexts: locActiveRxModulation.setDescription('The active Rx modulation when ACM is enabled.\n                            See Web, Monitor, Performance, Rx modulation.')
locMinimumRxModulation = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 105), AcmModulationT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMinimumRxModulation.setStatus('current')
if mibBuilder.loadTexts: locMinimumRxModulation.setDescription('The lowest/minimum Rx modulation when ACM is enabled since the last counter reset.\n                            See Web, Monitor, Performance, Rx modulation.')
locMaximumTxEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMaximumTxEthernetThroughput.setStatus('current')
if mibBuilder.loadTexts: locMaximumTxEthernetThroughput.setDescription('The highest/maximum Tx Ethernet throughput in Mbps when ACM is enabled \n                            since the last counter reset.\n                            See Web, Monitor, Performance, Tx Ethernet Throughput.')
locActiveTxEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locActiveTxEthernetThroughput.setStatus('current')
if mibBuilder.loadTexts: locActiveTxEthernetThroughput.setDescription('The active Tx Ethernet throughput in Mbps when ACM is enabled.\n                            See Web, Monitor, Performance, Tx Ethernet Throughput.')
locMinimumTxEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMinimumTxEthernetThroughput.setStatus('current')
if mibBuilder.loadTexts: locMinimumTxEthernetThroughput.setDescription('The lowest/minimum Tx Ethernet throughput in Mbps when ACM is enabled\n                            since the last counter reset.\n                            See Web, Monitor, Performance, Tx Ethernet Throughput.')
locMaximumRxEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMaximumRxEthernetThroughput.setStatus('current')
if mibBuilder.loadTexts: locMaximumRxEthernetThroughput.setDescription('The highest/maximum Rx Ethernet throughput in Mbps when ACM is enabled\n                            since the last counter reset.\n                            See Web, Monitor, Performance, Rx Ethernet Throughput.')
locActiveRxEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 110), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locActiveRxEthernetThroughput.setStatus('current')
if mibBuilder.loadTexts: locActiveRxEthernetThroughput.setDescription('The active Rx Ethernet throughput in Mbps when ACM is enabled.\n                            See Web, Monitor, Performance, Rx Ethernet Throughput.')
locMinimumRxEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMinimumRxEthernetThroughput.setStatus('current')
if mibBuilder.loadTexts: locMinimumRxEthernetThroughput.setDescription('The lowest/minimum Rx Ethernet throughput in Mbps when ACM is enabled\n                            since the last counter reset.\n                            See Web, Monitor, Performance, Rx Ethernet Throughput.')
locResetStats = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 1000), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locResetStats.setStatus('current')
if mibBuilder.loadTexts: locResetStats.setDescription("Write 'reset' to locResetStats to clear the Performance statistics.")
remCurrentBER = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 1), Integer32()).setUnits('BER * 1000000.0').setMaxAccess("readonly")
if mibBuilder.loadTexts: remCurrentBER.setStatus('current')
if mibBuilder.loadTexts: remCurrentBER.setDescription('The Curent Bit-Error Rate as scaled integer for far end radio.\n                            The BER multiplied by 1,000,000.\n                            If the link is operating perfectly, this should indicate zero.\n                            See Web, Monitor, Performance, Current BER')
remCurrentBERstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remCurrentBERstr.setStatus('current')
if mibBuilder.loadTexts: remCurrentBERstr.setDescription('The Current Bit-Error Rate as a string. Far end radio')
remCurrentRSL = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: remCurrentRSL.setStatus('current')
if mibBuilder.loadTexts: remCurrentRSL.setDescription('Current RSL is the measurement of the received signal level.\n                            When the RSL falls below the threshold specification, \n                            the link disconnects and will not reconnect until \n                            the RSL is above the threshold specification.\n                            See Web, Monitor, Performance, Current RSL')
remCurrentRSLstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remCurrentRSLstr.setStatus('current')
if mibBuilder.loadTexts: remCurrentRSLstr.setDescription('The Current RSL as a string.')
remErrorDuration = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 5), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: remErrorDuration.setStatus('current')
if mibBuilder.loadTexts: remErrorDuration.setDescription('The Error Duration indicates the total number of seconds that occurred where \n                            there was at least one bit error since the last time that \n                            the radio statistics counter was reset.\n                            See Web, Monitor, Performance, Errored Seconds, Remote column.')
remErrorDurationStr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remErrorDurationStr.setStatus('current')
if mibBuilder.loadTexts: remErrorDurationStr.setDescription('The Error Duration as a formatted string. Far end radio.')
remUnavailDuration = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 7), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: remUnavailDuration.setStatus('current')
if mibBuilder.loadTexts: remUnavailDuration.setDescription('Unavailable Duration keeps track of every second where the BER equals or exceeds 1x10-3, \n                            as well as any seconds where there is a complete loss of radio communication.\n                            See Web, Monitor, Performance, Unavailable Seconds')
remUnavailDurationStr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remUnavailDurationStr.setStatus('current')
if mibBuilder.loadTexts: remUnavailDurationStr.setDescription('The Unavailable Duration as a formatted string. Far end radio.')
remMinRSL = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 9), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: remMinRSL.setStatus('current')
if mibBuilder.loadTexts: remMinRSL.setDescription('The Minimum RSL indicates the worst (lowest) received signal level \n                            that occurred since the last counter reset.\n                            See Web, Monitor, Performance, Minimum RSL, Remote column.')
remMinRSLstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remMinRSLstr.setStatus('current')
if mibBuilder.loadTexts: remMinRSLstr.setDescription('The Minimum RSL value as a string. Far end radio.')
remMinRSLtimestamp = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remMinRSLtimestamp.setStatus('current')
if mibBuilder.loadTexts: remMinRSLtimestamp.setDescription('The Minimum RSL Timestamp indicates the date and time when the Minimum RSL occurred.\n                            See Web, Monitor, Performance, Minimum RSL Timestamp, Remote column.')
remMaxRSL = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 12), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: remMaxRSL.setStatus('current')
if mibBuilder.loadTexts: remMaxRSL.setDescription('The Maximum RSL indicates the best (highest) RSL \n                            that occurred since the last counter reset.\n                            See Web, Monitor, Performance, Maximum RSL, Remote column.')
remMaxRSLstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 13), DisplayString()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: remMaxRSLstr.setStatus('current')
if mibBuilder.loadTexts: remMaxRSLstr.setDescription('The Maximum RSL level As string. Far end radio.')
remSampleDuration = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 14), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: remSampleDuration.setStatus('current')
if mibBuilder.loadTexts: remSampleDuration.setDescription('The Sample Duration indicates the amount of time passed since the last counter reset.\n                            See Web, Monitor, Performance, Time Since Reset, Remote column.')
remSampleDurationStr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remSampleDurationStr.setStatus('current')
if mibBuilder.loadTexts: remSampleDurationStr.setDescription('The Sample Duration value as a formatted string. Far end radio.')
remResetStats = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 1000), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remResetStats.setStatus('current')
if mibBuilder.loadTexts: remResetStats.setDescription("Write 'reset' to remResetStats to clear the Performance statistics.")
userThroughput = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 5))
aggregateUserThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 5, 1), DisplayString()).setUnits('MBit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregateUserThroughput.setStatus('current')
if mibBuilder.loadTexts: aggregateUserThroughput.setDescription('Aggregated User Throughput. \n                            For FDD radios this parameter is always equal to fullDuplexEthernetThroughput.')
inboundEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 5, 2), DisplayString()).setUnits('MBit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: inboundEthernetThroughput.setStatus('current')
if mibBuilder.loadTexts: inboundEthernetThroughput.setDescription('Inbound Ethernet Throughput.\n                            For FDD radios this parameter is always N/A.')
outboundEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 5, 3), DisplayString()).setUnits('MBit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: outboundEthernetThroughput.setStatus('current')
if mibBuilder.loadTexts: outboundEthernetThroughput.setDescription('Outbound Ethernet Throughput.\n                            For FDD radios this parameter is always N/A.')
fullDuplexEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 5, 4), DisplayString()).setUnits('MBit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: fullDuplexEthernetThroughput.setStatus('current')
if mibBuilder.loadTexts: fullDuplexEthernetThroughput.setDescription('The Full Duplex Ethernet Throughput is determined by \n                            the combination of settings for Mode and Bandwidth.\n                            See Web, Monitor, User Throughput, Full Duplex Ethernet Throughput.')
radioReboot = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioReboot.setStatus('current')
if mibBuilder.loadTexts: radioReboot.setDescription("Reboot the radio device.\n                            Send 'reboot' to radioReboot parameter to reboot the radio device.")
productsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 3))
productsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 3, 1))
productsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 3, 2))
productsAllObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 25651, 1, 3, 2, 1)).setObjects(("ExaltComProducts", "modelName"), ("ExaltComProducts", "partNumber"), ("ExaltComProducts", "serialNumber"), ("ExaltComProducts", "interfaceType"), ("ExaltComProducts", "firmwareVersion"), ("ExaltComProducts", "bootVersion"), ("ExaltComProducts", "rfFreqBand"), ("ExaltComProducts", "sysDate"), ("ExaltComProducts", "sysTime"), ("ExaltComProducts", "rnLocal"), ("ExaltComProducts", "rnRemote"), ("ExaltComProducts", "linkName"), ("ExaltComProducts", "linkSecKey"), ("ExaltComProducts", "adminPassword"), ("ExaltComProducts", "userPassword"), ("ExaltComProducts", "ipLocal"), ("ExaltComProducts", "ipRemote"), ("ExaltComProducts", "subnetMask"), ("ExaltComProducts", "ipAddressNetmask"), ("ExaltComProducts", "defaultGateway"), ("ExaltComProducts", "commitAdminSettings"), ("ExaltComProducts", "te1NumChannels"), ("ExaltComProducts", "te1NumActiveChannels"), ("ExaltComProducts", "selectT1orE1"), ("ExaltComProducts", "commitTe1Settings"), ("ExaltComProducts", "currentFwFilename"), ("ExaltComProducts", "alternateFwFilename"), ("ExaltComProducts", "swapFWimage"), ("ExaltComProducts", "locLinkState"), ("ExaltComProducts", "locLinkStateV"), ("ExaltComProducts", "locLinkStateH"), ("ExaltComProducts", "locTe1LinkSummary"), ("ExaltComProducts", "locTempAlarm"), ("ExaltComProducts", "locCurrentTemp"), ("ExaltComProducts", "locCurrentTempS"), ("ExaltComProducts", "locLinkSecMismatch"), ("ExaltComProducts", "remLinkState"), ("ExaltComProducts", "remLinkStateV"), ("ExaltComProducts", "remLinkStateH"), ("ExaltComProducts", "remTe1LinkSummary"), ("ExaltComProducts", "remTempAlarm"), ("ExaltComProducts", "remCurrentTemp"), ("ExaltComProducts", "remCurrentTempS"), ("ExaltComProducts", "remLinkSecMismatch"), ("ExaltComProducts", "locCurrentBER"), ("ExaltComProducts", "locCurrentBERstr"), ("ExaltComProducts", "locCurrentRSL"), ("ExaltComProducts", "locCurrentRSLstr"), ("ExaltComProducts", "locErrorDuration"), ("ExaltComProducts", "locErrorDurationStr"), ("ExaltComProducts", "locUnavailDuration"), ("ExaltComProducts", "locUnavailDurationStr"), ("ExaltComProducts", "locMinRSL"), ("ExaltComProducts", "locMinRSLstr"), ("ExaltComProducts", "locMinRSLtimestamp"), ("ExaltComProducts", "locMaxRSL"), ("ExaltComProducts", "locMaxRSLstr"), ("ExaltComProducts", "locSampleDuration"), ("ExaltComProducts", "locSampleDurationStr"), ("ExaltComProducts", "locResetStats"), ("ExaltComProducts", "remCurrentBER"), ("ExaltComProducts", "remCurrentBERstr"), ("ExaltComProducts", "remCurrentRSL"), ("ExaltComProducts", "remCurrentRSLstr"), ("ExaltComProducts", "remErrorDuration"), ("ExaltComProducts", "remErrorDurationStr"), ("ExaltComProducts", "remUnavailDuration"), ("ExaltComProducts", "remUnavailDurationStr"), ("ExaltComProducts", "remMinRSL"), ("ExaltComProducts", "remMinRSLstr"), ("ExaltComProducts", "remMinRSLtimestamp"), ("ExaltComProducts", "remMaxRSL"), ("ExaltComProducts", "remMaxRSLstr"), ("ExaltComProducts", "remSampleDuration"), ("ExaltComProducts", "remSampleDurationStr"), ("ExaltComProducts", "remResetStats"), ("ExaltComProducts", "radioReboot"), ("ExaltComProducts", "te1Status"), ("ExaltComProducts", "t1LBO"), ("ExaltComProducts", "te1AIS"), ("ExaltComProducts", "t1LineCode"), ("ExaltComProducts", "te1LoopBackMode"), ("ExaltComProducts", "locTe1Alarm"), ("ExaltComProducts", "remTe1Alarm"), ("ExaltComProducts", "aesEnable"), ("ExaltComProducts", "licKey"), ("ExaltComProducts", "aggregateUserThroughput"), ("ExaltComProducts", "inboundEthernetThroughput"), ("ExaltComProducts", "outboundEthernetThroughput"), ("ExaltComProducts", "fullDuplexEthernetThroughput"), ("ExaltComProducts", "locEthUtilizationIn"), ("ExaltComProducts", "locEthUtilizationOut"), ("ExaltComProducts", "locEthUtilizationWatermarkEnabled"), ("ExaltComProducts", "locEthUtilizationWatermark"), ("ExaltComProducts", "locEthUtilizationWatermarkTrapEnabled"), ("ExaltComProducts", "locEthUtilizationWatermarkTrapDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    productsAllObjects = productsAllObjects.setStatus('current')
if mibBuilder.loadTexts: productsAllObjects.setDescription('This automatically created object group contains\n                            all those objects that do not belong to any other\n                            OBJECT-GROUP')
mibBuilder.exportSymbols("ExaltComProducts", locLinkStateH=locLinkStateH, partNumber=partNumber, aesEnable=aesEnable, locTe1AlarmsEntry=locTe1AlarmsEntry, locMinimumTxEthernetThroughput=locMinimumTxEthernetThroughput, remMinRSLtimestamp=remMinRSLtimestamp, inboundEthernetThroughput=inboundEthernetThroughput, productsMIBCompliances=productsMIBCompliances, remTe1AlarmsEntry=remTe1AlarmsEntry, remCurrentRSLstr=remCurrentRSLstr, aggregateUserThroughput=aggregateUserThroughput, modelName=modelName, te1LoopBackMode=te1LoopBackMode, remResetStats=remResetStats, remLinkStateV=remLinkStateV, alternateFwFilename=alternateFwFilename, remTe1Alarm=remTe1Alarm, remSampleDuration=remSampleDuration, trapRemAlarmStat=trapRemAlarmStat, txFreqRange=txFreqRange, locEthUtilizationOut=locEthUtilizationOut, te1=te1, locCurrentTempS=locCurrentTempS, locCurrentRSL=locCurrentRSL, locMinimumRxModulation=locMinimumRxModulation, remCurrentBER=remCurrentBER, subnetMask=subnetMask, ipAddressNetmask=ipAddressNetmask, locActiveRxModulation=locActiveRxModulation, locEthUtilizationWatermarkTrapDuration=locEthUtilizationWatermarkTrapDuration, productsMIBGroups=productsMIBGroups, productsMIBObjects=productsMIBObjects, alarms=alarms, almRemote=almRemote, trapAuth=trapAuth, trapIpaddr2=trapIpaddr2, t1LBO=t1LBO, currentFwFilename=currentFwFilename, tftpServerIp=tftpServerIp, locResetStats=locResetStats, remCurrentBERstr=remCurrentBERstr, locTe1Alarm=locTe1Alarm, radioReboot=radioReboot, productsMIBNotifications=productsMIBNotifications, commitAdminSettings=commitAdminSettings, trapLocRslThreshold=trapLocRslThreshold, trapLocLinkStat=trapLocLinkStat, outboundEthernetThroughput=outboundEthernetThroughput, trapIpaddr1=trapIpaddr1, trapIpaddr3=trapIpaddr3, sysDate=sysDate, trapLocTempStat=trapLocTempStat, remSysAlarms=remSysAlarms, remUnavailDuration=remUnavailDuration, te1NumActiveChannels=te1NumActiveChannels, commitNtpSettings=commitNtpSettings, ntpTimeZoneSelect=ntpTimeZoneSelect, bootVersion=bootVersion, trapv3Enable=trapv3Enable, remErrorDuration=remErrorDuration, interfaceType=interfaceType, locActiveTxModulation=locActiveTxModulation, remMinRSLstr=remMinRSLstr, commitSnmpSettings=commitSnmpSettings, trapLocAlarmStat=trapLocAlarmStat, radioConfig=radioConfig, locCurrentRSLstr=locCurrentRSLstr, locEthAlarms=locEthAlarms, ntp=ntp, perfRemote=perfRemote, remTempAlarm=remTempAlarm, locEthUtilizationIn=locEthUtilizationIn, ntpServer4IpAddr=ntpServer4IpAddr, te1Interfaces=te1Interfaces, locMaxRSL=locMaxRSL, interface=interface, locCurrentTemp=locCurrentTemp, ntpServer3IpAddr=ntpServer3IpAddr, locErrorDurationStr=locErrorDurationStr, firmwareVersion=firmwareVersion, linkSecKey=linkSecKey, ntpServer1IpAddr=ntpServer1IpAddr, locEthSpeed=locEthSpeed, trapReboot=trapReboot, adminPassword=adminPassword, factoryFwFilename=factoryFwFilename, locTe1Alarms=locTe1Alarms, remEthAlarms=remEthAlarms, trapLocRslStat=trapLocRslStat, locLinkStateV=locLinkStateV, trapIpaddrEnable1=trapIpaddrEnable1, licKey=licKey, locLinkSecMismatch=locLinkSecMismatch, selectT1orE1=selectT1orE1, commitTe1Settings=commitTe1Settings, PYSNMP_MODULE_ID=productsMIB, locMinimumTxModulation=locMinimumTxModulation, locSampleDurationStr=locSampleDurationStr, locTe1LinkSummary=locTe1LinkSummary, trapv1Enable=trapv1Enable, radioName=radioName, remCurrentTemp=remCurrentTemp, remCurrentTempS=remCurrentTempS, te1Interface=te1Interface, locSysAlarms=locSysAlarms, locUnavailDurationStr=locUnavailDurationStr, rfFreqBand=rfFreqBand, perfLocal=perfLocal, productsMIBConformance=productsMIBConformance, t1LineCode=t1LineCode, rnRemote=rnRemote, almLocal=almLocal, remTe1Alarms=remTe1Alarms, radioInfo=radioInfo, swapFWimage=swapFWimage, trapIpaddrEnable4=trapIpaddrEnable4, te1Status=te1Status, userThroughput=userThroughput, aesKey=aesKey, trapv2cEnable=trapv2cEnable, locMinRSL=locMinRSL, remMaxRSL=remMaxRSL, transferStatus=transferStatus, locMaximumRxModulation=locMaximumRxModulation, locMinRSLstr=locMinRSLstr, locCurrentBERstr=locCurrentBERstr, modelNumber=modelNumber, productsAllObjects=productsAllObjects, locActiveTxEthernetThroughput=locActiveTxEthernetThroughput, userPassword=userPassword, hwId=hwId, locMinRSLtimestamp=locMinRSLtimestamp, fileManagement=fileManagement, remLinkState=remLinkState, ntpServer2IpAddr=ntpServer2IpAddr, te1AIS=te1AIS, radioAdmin=radioAdmin, radioMonitor=radioMonitor, performance=performance, fullDuplexEthernetThroughput=fullDuplexEthernetThroughput, locEthPerfInterfacesEntry=locEthPerfInterfacesEntry, licenseFeatures=licenseFeatures, locLinkState=locLinkState, systemConfig=systemConfig, trapIpaddrEnable2=trapIpaddrEnable2, locMaximumRxEthernetThroughput=locMaximumRxEthernetThroughput, locActiveRxEthernetThroughput=locActiveRxEthernetThroughput, rxFreqRange=rxFreqRange, PwType=PwType, remLinkSecMismatch=remLinkSecMismatch, remUnavailDurationStr=remUnavailDurationStr, rnLocal=rnLocal, uploadFilename=uploadFilename, remMinRSL=remMinRSL, ntpClientEnable=ntpClientEnable, locCurrentBER=locCurrentBER, remLinkStateH=remLinkStateH, rdkDbVer=rdkDbVer, locEthUtilizationWatermark=locEthUtilizationWatermark, te1NumChannels=te1NumChannels, linkName=linkName, remErrorDurationStr=remErrorDurationStr, ipRemote=ipRemote, trapIpaddrEnable3=trapIpaddrEnable3, ipLocal=ipLocal, locSampleDuration=locSampleDuration, defaultGateway=defaultGateway, locTE1Alarms=locTE1Alarms, trapIpaddr4=trapIpaddr4, locEthPerfInterfaces=locEthPerfInterfaces, locMaximumTxEthernetThroughput=locMaximumTxEthernetThroughput, transferStart=transferStart, locEthUtilizationWatermarkTrapEnabled=locEthUtilizationWatermarkTrapEnabled, serialNumber=serialNumber, remCurrentRSL=remCurrentRSL, remTe1LinkSummary=remTe1LinkSummary, locTempAlarm=locTempAlarm, locMaxRSLstr=locMaxRSLstr, snmpConfig=snmpConfig, remMaxRSLstr=remMaxRSLstr, remSampleDurationStr=remSampleDurationStr, sysTime=sysTime, locMaximumTxModulation=locMaximumTxModulation, locMinimumRxEthernetThroughput=locMinimumRxEthernetThroughput, commitSystemSettings=commitSystemSettings, productsMIB=productsMIB, locEthUtilizationWatermarkEnabled=locEthUtilizationWatermarkEnabled, transferType=transferType, locUnavailDuration=locUnavailDuration, locErrorDuration=locErrorDuration, remTE1Alarms=remTE1Alarms, fileTransfer=fileTransfer, ipAddress=ipAddress)
