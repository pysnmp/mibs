#
# PySNMP MIB module ACD-CFM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/accedian/ACD-CFM-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 11:09:20 2024
# On host fv-az1493-704 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
acdMibs, = mibBuilder.importSymbols("ACCEDIAN-SMI", "acdMibs")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, IpAddress, MibIdentifier, TimeTicks, ModuleIdentity, iso, Counter64, NotificationType, Gauge32, ObjectIdentity, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "IpAddress", "MibIdentifier", "TimeTicks", "ModuleIdentity", "iso", "Counter64", "NotificationType", "Gauge32", "ObjectIdentity", "Unsigned32", "Counter32")
DateAndTime, DisplayString, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention", "TruthValue", "RowStatus")
acdCfm = ModuleIdentity((1, 3, 6, 1, 4, 1, 22420, 2, 7))
acdCfm.setRevisions(('2011-12-21 01:00', '2011-12-20 01:00', '2011-09-21 01:00', '2011-03-30 01:00', '2009-11-01 01:00', '2009-02-23 01:00', '2008-05-01 01:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acdCfm.setRevisionsDescriptions(('Add support for ETH-SLM Tx/Rx PDU counters.', 'Add support for ETH-CSF Tx/Rx PDU counters.', 'Add support for CFM Stack Table.', 'Add support for Instantaneous values.', 'Add support for extended packet loss ratio.', 'Add support for extended packet loss ratio.', 'Initial version of MIB module ACD-CFM-MIB.',))
if mibBuilder.loadTexts: acdCfm.setLastUpdated('201112210100Z')
if mibBuilder.loadTexts: acdCfm.setOrganization('Accedian Networks, Inc.')
if mibBuilder.loadTexts: acdCfm.setContactInfo('Accedian Technical Assistance Center\n             Accedian Networks, Inc.\n             4878 Levy, suite 202\n             Saint-Laurent, Quebec Canada H4R 2P1\n             E-mail: support@accedian.com')
if mibBuilder.loadTexts: acdCfm.setDescription('This MIB is complementary to the IEEE P802.1ag(TM) CFM MIB. It\n             covers the delay measurment and the packet loss configuration\n             and results.')
acdCfmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 7, 0))
acdCfmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1))
acdCfmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2))
acdCfmDelayMeasurement = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1))
acdCfmPacketLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2))
acdCfmMep = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3))
acdCfmStack = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 4))
acdCfmSlm = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5))
acdCfmDmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1), )
if mibBuilder.loadTexts: acdCfmDmCfgTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgTable.setDescription('Configuration table of all DM entries.')
acdCfmDmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmDmCfgID"))
if mibBuilder.loadTexts: acdCfmDmCfgEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgEntry.setDescription('An entry consisting of all settings to manage a DM instance.')
acdCfmDmCfgID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmDmCfgID.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgID.setDescription('Unique value for each Delay Measurement instance. This value follows\n        the ordering of the results table.')
acdCfmDmCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmDmCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgRowStatus.setDescription('All columns must have a valid value before a row can be activated.')
acdCfmDmCfgMepIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmDmCfgMepIdx.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgMepIdx.setDescription('Maintenance association End Point Identifier.')
acdCfmDmCfgRemoteMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmDmCfgRemoteMepId.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgRemoteMepId.setDescription('Remote Maintenance association End Point Identifier used for this\n         delay measurement configuration.')
acdCfmDmCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmDmCfgPriority.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgPriority.setDescription('The VLAN priority. Its value ranges from 0 to 7.')
acdCfmDmCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmDmCfgEnable.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgEnable.setDescription('Enable CFM to issues DMM measurement packets.')
acdCfmDmCfgInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(10000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmDmCfgInterval.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgInterval.setDescription('Interval in milliseconds at which CFM issues DMM measurement packets.')
acdCfmDmCfgRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(15)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmDmCfgRefPeriod.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgRefPeriod.setDescription('Reference period in minutes for Delay Measurement.')
acdCfmDmCfgOneWayDelayEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 9), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmDmCfgOneWayDelayEnable.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgOneWayDelayEnable.setDescription('Enable CFM to compute one-way delay measurements.')
acdCfmDmCfgOneWayDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 10), Unsigned32().clone(50)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdCfmDmCfgOneWayDelayMax.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgOneWayDelayMax.setDescription('Maximum allowed instantaneous delay in milliseconds.')
acdCfmDmCfgOneWayDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 11), Unsigned32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdCfmDmCfgOneWayDelayThresh.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgOneWayDelayThresh.setDescription('Number of consecutive delay greater than the maximum allowed value\n        before alert.')
acdCfmDmCfgOneWayAvgDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 12), Unsigned32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdCfmDmCfgOneWayAvgDelayThresh.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgOneWayAvgDelayThresh.setDescription('One-way average delay threshold in milliseconds.')
acdCfmDmCfgOneWayDvEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmDmCfgOneWayDvEnable.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgOneWayDvEnable.setDescription('Enable CFM to compute one-way delay variation measurements.')
acdCfmDmCfgOneWayDvMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 14), Unsigned32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdCfmDmCfgOneWayDvMax.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgOneWayDvMax.setDescription('Maximum allowed instantaneous delay variation in milliseconds.')
acdCfmDmCfgOneWayDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 15), Unsigned32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdCfmDmCfgOneWayDvThresh.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgOneWayDvThresh.setDescription('Number of consecutive delay variation greater than the maximum\n        allowed value before alert.')
acdCfmDmCfgOneWayAvgDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 16), Unsigned32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdCfmDmCfgOneWayAvgDvThresh.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgOneWayAvgDvThresh.setDescription('One-way average delay variation threshold in milliseconds.')
acdCfmDmCfgTwoWayDelayEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 17), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayDelayEnable.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayDelayEnable.setDescription('Enable CFM to compute Two-way delay measurements.')
acdCfmDmCfgTwoWayDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 18), Unsigned32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayDelayMax.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayDelayMax.setDescription('Maximum allowed instantaneous delay in milliseconds.')
acdCfmDmCfgTwoWayDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 19), Unsigned32().clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayDelayThresh.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayDelayThresh.setDescription('Number of consecutive delay greater than the maximum allowed value\n        before alert.')
acdCfmDmCfgTwoWayAvgDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 20), Unsigned32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayAvgDelayThresh.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayAvgDelayThresh.setDescription('Two-way average delay threshold in milliseconds.')
acdCfmDmCfgTwoWayDvEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 21), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayDvEnable.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayDvEnable.setDescription('Enable CFM to compute Two-way delay variation measurements.')
acdCfmDmCfgTwoWayDvMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 22), Unsigned32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayDvMax.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayDvMax.setDescription('Maximum allowed instantaneous delay variation in milliseconds.')
acdCfmDmCfgTwoWayDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 23), Unsigned32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayDvThresh.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayDvThresh.setDescription('Number of consecutive delay variation greater than the maximum\n        allowed value before alert.')
acdCfmDmCfgTwoWayAvgDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 1, 1, 24), Unsigned32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayAvgDvThresh.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgTwoWayAvgDvThresh.setDescription('Two-way average delay variation threshold in milliseconds.')
acdCfmResultOneWayDelayTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 2), )
if mibBuilder.loadTexts: acdCfmResultOneWayDelayTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDelayTable.setDescription('One way delay result table of all DM entries.')
acdCfmResultOneWayDelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 2, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmResultOneWayDelayID"))
if mibBuilder.loadTexts: acdCfmResultOneWayDelayEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDelayEntry.setDescription('An entry consisting of One Way Delay results for a DM entry.')
acdCfmResultOneWayDelayID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmResultOneWayDelayID.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDelayID.setDescription('Unique value for each Delay Measurement instance. This value follows\n        the ordering of the Dm table.')
acdCfmResultOneWayDelayPeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDelayPeriodIndex.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDelayPeriodIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same DM instance.\n         This index starts at 1 and increases by one as each new period.')
acdCfmResultOneWayDelayIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDelayIntervalStart.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDelayIntervalStart.setDescription('This is the time of the start of the period.')
acdCfmResultOneWayDelayValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDelayValid.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDelayValid.setDescription('Indicates the validity of the One-way delay results during this\n        sampling interval.')
acdCfmResultOneWayDelayAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDelayAlert.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDelayAlert.setDescription('Indicate the presence of the One Way Delay alert.')
acdCfmResultOneWayDelayAvgAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDelayAvgAlert.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDelayAvgAlert.setDescription('Indicate the presence of the One Way Average Delay alert.')
acdCfmResultOneWayDelaySamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDelaySamples.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDelaySamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate One-way delay results.')
acdCfmResultOneWayDelayMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 2, 1, 8), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDelayMinValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDelayMinValue.setDescription('Indicates the One-way delay minimum value. The value is expressed in\n        micro-seconds.')
acdCfmResultOneWayDelayMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 2, 1, 9), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDelayMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDelayMaxValue.setDescription('Indicates the One-way delay maximum value. The value is expressed in\n        micro-seconds.')
acdCfmResultOneWayDelayAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 2, 1, 10), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDelayAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDelayAvgValue.setDescription('Indicates the One-way delay average value. The value is expressed in\n        micro-seconds.')
acdCfmResultOneWayDelayThreshExc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDelayThreshExc.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDelayThreshExc.setDescription('Indicates the number of samples exceeding the limit.')
acdCfmResultOneWayDelayInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 2, 1, 12), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDelayInstValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDelayInstValue.setDescription('Indicates the One-way delay Instantaneous value. The value is expressed in\n        micro-seconds.')
acdCfmResultOneWayDvTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 3), )
if mibBuilder.loadTexts: acdCfmResultOneWayDvTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDvTable.setDescription('One way delay variation result table of all DM entries.')
acdCfmResultOneWayDvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 3, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmResultOneWayDvID"))
if mibBuilder.loadTexts: acdCfmResultOneWayDvEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDvEntry.setDescription('An entry consisting of One Way Delay variation results for a DM entry.')
acdCfmResultOneWayDvID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmResultOneWayDvID.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDvID.setDescription('Unique value for each Delay variation Measurement instance. This value follows\n        the ordering of the DM table.')
acdCfmResultOneWayDvPeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDvPeriodIndex.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDvPeriodIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same DM instance.\n         This index starts at 1 and increases by one as each new period.')
acdCfmResultOneWayDvIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 3, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDvIntervalStart.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDvIntervalStart.setDescription('This is the time of the start of the period.')
acdCfmResultOneWayDvValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDvValid.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDvValid.setDescription('Indicates the validity of the One-way delay variation results during this\n        sampling interval.')
acdCfmResultOneWayDvAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDvAlert.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDvAlert.setDescription('Indicate the presence of the One Way Delay variation alert.')
acdCfmResultOneWayDvAvgAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDvAvgAlert.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDvAvgAlert.setDescription('Indicate the presence of the One Way Average Delay variation alert.')
acdCfmResultOneWayDvSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDvSamples.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDvSamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate One-way delay variation results.')
acdCfmResultOneWayDvMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 3, 1, 8), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDvMinValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDvMinValue.setDescription('Indicates the One-way delay variation minimum value. The value is\n        expressed in micro-seconds.')
acdCfmResultOneWayDvMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 3, 1, 9), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDvMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDvMaxValue.setDescription('Indicates the One-way delay variationmaximum value. The value is\n        expressed in micro-seconds.')
acdCfmResultOneWayDvAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 3, 1, 10), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDvAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDvAvgValue.setDescription('Indicates the One-way delay variation average value. The value is\n        expressed in micro-seconds.')
acdCfmResultOneWayDvThreshExc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDvThreshExc.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDvThreshExc.setDescription('Indicates the number of samples exceeding the limit.')
acdCfmResultOneWayDvInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 3, 1, 12), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultOneWayDvInstValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDvInstValue.setDescription('Indicates the One-way delay variation Instantaneous value. The value is\n        expressed in micro-seconds.')
acdCfmResultTwoWayDelayTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 4), )
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayTable.setDescription('Two way delay result table of all DM entries.')
acdCfmResultTwoWayDelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 4, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmResultTwoWayDelayID"))
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayEntry.setDescription('An entry consisting of Two Way Delay results for a DM entry.')
acdCfmResultTwoWayDelayID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayID.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayID.setDescription('Unique value for each Delay Measurement instance. This value follows\n        the ordering of the Dm table.')
acdCfmResultTwoWayDelayPeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayPeriodIndex.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayPeriodIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same DM instance.\n         This index starts at 1 and increases by one as each new period.')
acdCfmResultTwoWayDelayIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 4, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayIntervalStart.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayIntervalStart.setDescription('This is the time of the start of the period.')
acdCfmResultTwoWayDelayValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayValid.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayValid.setDescription('Indicates the validity of the Two way delay results during this\n        sampling interval.')
acdCfmResultTwoWayDelayAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayAlert.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayAlert.setDescription('Indicate the presence of the Two Way Delay alert.')
acdCfmResultTwoWayDelayAvgAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayAvgAlert.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayAvgAlert.setDescription('Indicate the presence of the Two Way Average Delay alert.')
acdCfmResultTwoWayDelaySamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDelaySamples.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDelaySamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate Two-way delay results.')
acdCfmResultTwoWayDelayMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 4, 1, 8), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayMinValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayMinValue.setDescription('Indicates the Two-way delay minimum value. The value is expressed in\n        micro-seconds.')
acdCfmResultTwoWayDelayMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 4, 1, 9), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayMaxValue.setDescription('Indicates the Two-way delay maximum value. The value is expressed in\n        micro-seconds.')
acdCfmResultTwoWayDelayAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 4, 1, 10), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayAvgValue.setDescription('Indicates the Two-way delay average value. The value is expressed in\n        micro-seconds.')
acdCfmResultTwoWayDelayThreshExc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayThreshExc.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayThreshExc.setDescription('Indicates the number of samples exceeding the limit.')
acdCfmResultTwoWayDelayInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 4, 1, 12), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayInstValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayInstValue.setDescription('Indicates the Two-way delay Instantaneous value. The value is expressed in\n        micro-seconds.')
acdCfmResultTwoWayDvTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 5), )
if mibBuilder.loadTexts: acdCfmResultTwoWayDvTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDvTable.setDescription('Two way delay variation result table of all DM entries.')
acdCfmResultTwoWayDvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 5, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmResultTwoWayDvID"))
if mibBuilder.loadTexts: acdCfmResultTwoWayDvEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDvEntry.setDescription('An entry consisting of One Way Delay variation results for a DM entry.')
acdCfmResultTwoWayDvID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmResultTwoWayDvID.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDvID.setDescription('Unique value for each Delay variation Measurement instance. This\n        value follows the ordering of the Dm table.')
acdCfmResultTwoWayDvPeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDvPeriodIndex.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDvPeriodIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same DM instance.\n         This index starts at 1 and increases by one as each new period.')
acdCfmResultTwoWayDvIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 5, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDvIntervalStart.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDvIntervalStart.setDescription('This is the time of the start of the period.')
acdCfmResultTwoWayDvValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDvValid.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDvValid.setDescription('Indicates the validity of the two-way delay variation results during this\n        sampling interval.')
acdCfmResultTwoWayDvAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDvAlert.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDvAlert.setDescription('Indicate the presence of the Two Way Delay variation alert.')
acdCfmResultTwoWayDvAvgAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 5, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDvAvgAlert.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDvAvgAlert.setDescription('Indicate the presence of the Two Way Average Delay variation alert.')
acdCfmResultTwoWayDvSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDvSamples.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDvSamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate Two-way delay variation results.')
acdCfmResultTwoWayDvMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 5, 1, 8), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDvMinValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDvMinValue.setDescription('Indicates the two-way delay variation minimum value. The value is expressed in\n        micro-seconds.')
acdCfmResultTwoWayDvMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 5, 1, 9), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDvMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDvMaxValue.setDescription('Indicates the two-way delay variation maximum value. The value is expressed in\n        micro-seconds.')
acdCfmResultTwoWayDvAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 5, 1, 10), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDvAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDvAvgValue.setDescription('Indicates the two-way delay variation average value. The value is expressed in\n        micro-seconds.')
acdCfmResultTwoWayDvThreshExc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDvThreshExc.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDvThreshExc.setDescription('Indicates the number of samples exceeding the limit.')
acdCfmResultTwoWayDvInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 5, 1, 12), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultTwoWayDvInstValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDvInstValue.setDescription('Indicates the two-way delay variation Instantaneous value. The value is\n        expressed in micro-seconds.')
acdCfmHistResultOneWayDelayTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 6), )
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayTable.setDescription('One way delay result table of all DM entries.')
acdCfmHistResultOneWayDelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 6, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmHistResultOneWayDelayID"), (0, "ACD-CFM-MIB", "acdCfmHistResultOneWayDelaySampleIndex"))
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayEntry.setDescription('An entry consisting of One Way Delay results for a DM entry.')
acdCfmHistResultOneWayDelayID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayID.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayID.setDescription('Unique value for each Delay Measurement instance. This value follows\n        the ordering of the Dm table.')
acdCfmHistResultOneWayDelaySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelaySampleIndex.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelaySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same DM instance.\n         This index starts at 1 and increases by one as each new period.')
acdCfmHistResultOneWayDelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayStatus.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayStatus.setDescription('Indicates the validity of the One-way delay results during this\n        sampling interval.')
acdCfmHistResultOneWayDelayDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayDuration.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayDuration.setDescription('Unique value for each Delay Measurement instance. This value follows\n        the ordering of the Dm table.')
acdCfmHistResultOneWayDelayIntervalEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 6, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayIntervalEnd.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayIntervalEnd.setDescription('This is the time of the end of the period.')
acdCfmHistResultOneWayDelaySamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelaySamples.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelaySamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate One-way delay results.')
acdCfmHistResultOneWayDelayMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 6, 1, 7), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayMinValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayMinValue.setDescription('Indicates the One-way delay minimum value. The value is expressed in\n        micro-seconds.')
acdCfmHistResultOneWayDelayMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 6, 1, 8), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayMaxValue.setDescription('Indicates the One-way delay maximum value. The value is expressed in\n        micro-seconds.')
acdCfmHistResultOneWayDelayAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 6, 1, 9), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayAvgValue.setDescription('Indicates the One-way delay average value. The value is expressed in\n        micro-seconds.')
acdCfmHistResultOneWayDelayThreshExc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayThreshExc.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayThreshExc.setDescription('Indicates the number of samples exceeding the limit.')
acdCfmHistResultOneWayDvTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 7), )
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvTable.setDescription('One way delay variation result table of all DM entries.')
acdCfmHistResultOneWayDvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 7, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmHistResultOneWayDvID"), (0, "ACD-CFM-MIB", "acdCfmHistResultOneWayDvSampleIndex"))
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvEntry.setDescription('An entry consisting of One Way Delay variation results for a DM entry.')
acdCfmHistResultOneWayDvID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvID.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvID.setDescription('Unique value for each Delay variation Measurement instance. This value follows\n        the ordering of the DM table.')
acdCfmHistResultOneWayDvSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvSampleIndex.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvSampleIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same DM instance.\n         This index starts at 1 and increases by one as each new period.')
acdCfmHistResultOneWayDvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvStatus.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvStatus.setDescription('Indicates the validity of the One-way delay variation results during this\n        sampling interval.')
acdCfmHistResultOneWayDvDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvDuration.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvDuration.setDescription('The interval in seconds over which the data is sampled for this entry.')
acdCfmHistResultOneWayDvIntervalEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 7, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvIntervalEnd.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvIntervalEnd.setDescription('This is the time of the end of the period.')
acdCfmHistResultOneWayDvSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvSamples.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvSamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate One-way delay variation results.')
acdCfmHistResultOneWayDvMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 7, 1, 7), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvMinValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvMinValue.setDescription('Indicates the One-way delay variation minimum value. The value is\n        expressed in micro-seconds.')
acdCfmHistResultOneWayDvMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 7, 1, 8), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvMaxValue.setDescription('Indicates the One-way delay variationmaximum value. The value is\n        expressed in micro-seconds.')
acdCfmHistResultOneWayDvAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 7, 1, 9), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvAvgValue.setDescription('Indicates the One-way delay variation average value. The value is\n        expressed in micro-seconds.')
acdCfmHistResultOneWayDvThreshExc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 7, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvThreshExc.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvThreshExc.setDescription('Indicates the number of samples exceeding the limit.')
acdCfmHistResultTwoWayDelayTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 8), )
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayTable.setDescription('Two way delay result table of all DM entries.')
acdCfmHistResultTwoWayDelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 8, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmHistResultTwoWayDelayID"), (0, "ACD-CFM-MIB", "acdCfmHistResultTwoWayDelaySampleIndex"))
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayEntry.setDescription('An entry consisting of Two Way Delay results for a DM entry.')
acdCfmHistResultTwoWayDelayID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayID.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayID.setDescription('Unique value for each Delay Measurement instance. This value follows\n        the ordering of the Dm table.')
acdCfmHistResultTwoWayDelaySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 8, 1, 2), Unsigned32())
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelaySampleIndex.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelaySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same DM instance.\n         This index starts at 1 and increases by one as each new period.')
acdCfmHistResultTwoWayDelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayStatus.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayStatus.setDescription('Indicates the validity of the Two way delay results during this\n        sampling interval.')
acdCfmHistResultTwoWayDelayDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayDuration.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayDuration.setDescription('The interval in seconds over which the data is sampled for this entry.')
acdCfmHistResultTwoWayDelayIntervalEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 8, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayIntervalEnd.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayIntervalEnd.setDescription('This is the time of the end of the period.')
acdCfmHistResultTwoWayDelaySamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelaySamples.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelaySamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate Two-way delay results.')
acdCfmHistResultTwoWayDelayMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 8, 1, 7), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayMinValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayMinValue.setDescription('Indicates the Two-way delay minimum value. The value is expressed in\n        micro-seconds.')
acdCfmHistResultTwoWayDelayMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 8, 1, 8), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayMaxValue.setDescription('Indicates the Two-way delay maximum value. The value is expressed in\n        micro-seconds.')
acdCfmHistResultTwoWayDelayAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 8, 1, 9), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayAvgValue.setDescription('Indicates the Two-way delay average value. The value is expressed in\n        micro-seconds.')
acdCfmHistResultTwoWayDelayThreshExc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayThreshExc.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayThreshExc.setDescription('Indicates the number of samples exceeding the limit.')
acdCfmHistResultTwoWayDvTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 9), )
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvTable.setDescription('Two way delay variation result table of all DM entries.')
acdCfmHistResultTwoWayDvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 9, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmHistResultTwoWayDvID"), (0, "ACD-CFM-MIB", "acdCfmHistResultTwoWayDvSampleIndex"))
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvEntry.setDescription('An entry consisting of two Way Delay variation results for a DM entry.')
acdCfmHistResultTwoWayDvID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvID.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvID.setDescription('Unique value for each Delay variation Measurement instance. This\n        value follows the ordering of the Dm table.')
acdCfmHistResultTwoWayDvSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvSampleIndex.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvSampleIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same DM instance.\n         This index starts at 1 and increases by one as each new period.')
acdCfmHistResultTwoWayDvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvStatus.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvStatus.setDescription('Indicates the validity of the two-way delay variation results during this\n        sampling interval.')
acdCfmHistResultTwoWayDvDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvDuration.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvDuration.setDescription('The interval in seconds over which the data is sampled for this entry.')
acdCfmHistResultTwoWayDvIntervalEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 9, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvIntervalEnd.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvIntervalEnd.setDescription('This is the time of the end of the period.')
acdCfmHistResultTwoWayDvSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 9, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvSamples.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvSamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate Two-way delay variation results.')
acdCfmHistResultTwoWayDvMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 9, 1, 7), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvMinValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvMinValue.setDescription('Indicates the two-way delay variation minimum value. The value is expressed in\n        micro-seconds.')
acdCfmHistResultTwoWayDvMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 9, 1, 8), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvMaxValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvMaxValue.setDescription('Indicates the two-way delay variation maximum value. The value is expressed in\n        micro-seconds.')
acdCfmHistResultTwoWayDvAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 9, 1, 9), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvAvgValue.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvAvgValue.setDescription('Indicates the two-way delay variation average value. The value is expressed in\n        micro-seconds.')
acdCfmHistResultTwoWayDvThreshExc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 1, 9, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvThreshExc.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvThreshExc.setDescription('Indicates the number of samples exceeding the limit.')
acdCfmPktLossCfgTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 1), )
if mibBuilder.loadTexts: acdCfmPktLossCfgTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmPktLossCfgTable.setDescription('Configuration table of all Packet Loss entries.')
acdCfmPktLossCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 1, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmPktLossCfgID"))
if mibBuilder.loadTexts: acdCfmPktLossCfgEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmPktLossCfgEntry.setDescription('An entry consisting of all settings to manage a Packet loss instance.')
acdCfmPktLossCfgID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmPktLossCfgID.setStatus('current')
if mibBuilder.loadTexts: acdCfmPktLossCfgID.setDescription('Unique value for each Packet Loss instance. This value follows the\n         ordering the results table.')
acdCfmPktLossCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmPktLossCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: acdCfmPktLossCfgRowStatus.setDescription('The writable columns in a row can not be changed if the row is active.\n       All columns must have a valid value before a row can be activated.')
acdCfmPktLossCfgMepIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmPktLossCfgMepIdx.setStatus('current')
if mibBuilder.loadTexts: acdCfmPktLossCfgMepIdx.setDescription('Maintenance association End Point Identifier.')
acdCfmPktLossCfgRemoteMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmPktLossCfgRemoteMepId.setStatus('current')
if mibBuilder.loadTexts: acdCfmPktLossCfgRemoteMepId.setDescription('Remote Maintenance association End Point Identifier.')
acdCfmPktLossCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmPktLossCfgPriority.setStatus('current')
if mibBuilder.loadTexts: acdCfmPktLossCfgPriority.setDescription('The VLAN priority. Its value ranges from 0 to 7. Same has CCM\n         priority for packet loss based on CCM.')
acdCfmPktLossCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmPktLossCfgEnable.setStatus('current')
if mibBuilder.loadTexts: acdCfmPktLossCfgEnable.setDescription('Enable CFM to perform Packet Loss measurement.')
acdCfmPktLossCfgInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(10000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmPktLossCfgInterval.setStatus('current')
if mibBuilder.loadTexts: acdCfmPktLossCfgInterval.setDescription('Interval in milliseconds at which CFM issues Packet Loss measurement\n        packets. Same has CCM interval for packet loss based on CCM.')
acdCfmPktLossCfgRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(15)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdCfmPktLossCfgRefPeriod.setStatus('current')
if mibBuilder.loadTexts: acdCfmPktLossCfgRefPeriod.setDescription('Reference period in minutes for Packet Loss Measurement.')
acdCfmPktLossCfgThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 1, 1, 9), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdCfmPktLossCfgThresh.setStatus('current')
if mibBuilder.loadTexts: acdCfmPktLossCfgThresh.setDescription('Maximum number of packet loss allowed without issuing an alarm.')
acdCfmPktLossCfgRatioThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdCfmPktLossCfgRatioThresh.setStatus('current')
if mibBuilder.loadTexts: acdCfmPktLossCfgRatioThresh.setDescription('Packet loss ratio threshold allowed without issuing an alarm\n         expressed in millionth of percent (1,000,000 is 1%).')
acdCfmResultPktLossTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2), )
if mibBuilder.loadTexts: acdCfmResultPktLossTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossTable.setDescription('Packet loss result table of a MEP and remote MEP pair.')
acdCfmResultPktLossEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmResultPktLossID"))
if mibBuilder.loadTexts: acdCfmResultPktLossEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossEntry.setDescription('An entry consisting of packet loss result for a specific MEP and\n        remote MEP pair.')
acdCfmResultPktLossID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmResultPktLossID.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossID.setDescription('Unique value for each Delay variation Measurement instance. This\n        value follows the ordering of the Dm table.')
acdCfmResultPktLossPeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossPeriodIndex.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossPeriodIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same PL instance.\n         This index starts at 1 and increases by one as each new period.')
acdCfmResultPktLossIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossIntervalStart.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossIntervalStart.setDescription('This is the time of the start of the period.')
acdCfmResultPktLossValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossValid.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossValid.setDescription('Indicates the validity of the packet loss results during this\n        sampling interval.')
acdCfmResultPktLossAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossAlert.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossAlert.setDescription('Indicate the presence of the Packet Loss alert.')
acdCfmResultPktLossSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossSamples.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossSamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate packet loss results.')
acdCfmResultPktLossOverflowSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossOverflowSamples.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossOverflowSamples.setDescription('The number of times the associated acdCfmResultPktLossSamples counter\n         has overflowed during this sampling interval. This is a 32 bits counter.\n         Combined with acdCfmResultPktLossSamples, it provides the equivalent of\n         the 64 bits counter acdCfmResultPktLossHCSamples.')
acdCfmResultPktLossHCSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossHCSamples.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossHCSamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate packet loss results.')
acdCfmResultPktLossNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossNbrLoss.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossNbrLoss.setDescription('This is the number of packet loss.')
acdCfmResultPktLossOverflowNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossOverflowNbrLoss.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossOverflowNbrLoss.setDescription('The number of times the associated acdCfmResultPktLossNbrLoss counter\n         has overflowed during this sampling interval. This is a 32 bits counter.\n         Combined with acdCfmResultPktLossNbrLoss, it provides the equivalent of\n         the 64 bits counter acdCfmResultPktLossHCNbrLoss.')
acdCfmResultPktLossHCNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossHCNbrLoss.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossHCNbrLoss.setDescription('This is the number of packet loss.')
acdCfmResultPktLossNbrGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossNbrGaps.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossNbrGaps.setDescription('This is the number of gap.')
acdCfmResultPktLossOverflowNbrGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossOverflowNbrGaps.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossOverflowNbrGaps.setDescription('The number of times the associated acdCfmResultPktLossNbrGaps counter\n         has overflowed during this sampling interval. This is a 32 bits counter.\n         Combined with acdCfmResultPktLossNbrGaps, it provides the equivalent of\n         the 64 bits counter acdCfmResultPktLossHCNbrGaps.')
acdCfmResultPktLossHCNbrGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossHCNbrGaps.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossHCNbrGaps.setDescription('This is the number of gap.')
acdCfmResultPktLossLargestGap = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossLargestGap.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossLargestGap.setDescription('the largest gap size in packets.')
acdCfmResultPktLossOverflowLargestGap = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossOverflowLargestGap.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossOverflowLargestGap.setDescription('The number of times the associated acdCfmResultPktLossLargestGap counter\n         has overflowed during this sampling interval. This is a 32 bits counter.\n         Combined with acdCfmResultPktLossLargestGap, it provides the equivalent\n         of the 64 bits counter acdCfmResultPktLossHCLargestGap.')
acdCfmResultPktLossHCLargestGap = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossHCLargestGap.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossHCLargestGap.setDescription('the largest gap size in packets.')
acdCfmResultPktLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmResultPktLossRatio.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossRatio.setDescription('Indicates the packet loss ratio. The packet loss ratio is the percent\n         of packets transmitted but not received in millionth of a percent\n         (1,000,000 is 1%).')
acdCfmHistResultPktLossTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3), )
if mibBuilder.loadTexts: acdCfmHistResultPktLossTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossTable.setDescription('Packet loss history result table of a MEP and remote MEP pair.')
acdCfmHistResultPktLossEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmHistResultPktLossID"), (0, "ACD-CFM-MIB", "acdCfmHistResultPktLossSampleIndex"))
if mibBuilder.loadTexts: acdCfmHistResultPktLossEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossEntry.setDescription('An entry consisting of Packet loss history result for a specific\n        MEP and remote MEP pair.')
acdCfmHistResultPktLossID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmHistResultPktLossID.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossID.setDescription('Unique value for each Delay variation Measurement instance. This\n        value follows the ordering of the Dm table.')
acdCfmHistResultPktLossSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: acdCfmHistResultPktLossSampleIndex.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossSampleIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same PL instance.\n         This index starts at 1 and increases by one as each new period.')
acdCfmHistResultPktLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossStatus.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossStatus.setDescription('Indicates the validity of the packet loss results during this\n        sampling interval.')
acdCfmHistResultPktLossDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossDuration.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossDuration.setDescription('The interval in seconds over which the data is sampled for this entry.')
acdCfmHistResultPktLossIntervalEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossIntervalEnd.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossIntervalEnd.setDescription('This is the time of the end of this entry.')
acdCfmHistResultPktLossSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossSamples.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossSamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate packet loss results.  This is a 32 bits counter.\n         Combined with the overflow counter it provides the equivalent of the\n         64 bits counter acdCfmHistResultPktLossHCSamples.')
acdCfmHistResultPktLossOverflowSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossOverflowSamples.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossOverflowSamples.setDescription('The number of times the associated acdCfmHistResultPktLossSamples\n         counter has overflowed during this sampling interval. This is a\n         32 bits counter. Combined with acdCfmHistResultPktLossSamples, it\n         provides the equivalent of the 64 bits counter\n         acdCfmHistResultPktLossHCSamples.')
acdCfmHistResultPktLossHCSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossHCSamples.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossHCSamples.setDescription('Indicates the number of samples gathered during the sampling\n         interval to calculate packet loss results.')
acdCfmHistResultPktLossNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossNbrLoss.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossNbrLoss.setDescription('The total number of packets loss during this sampling interval. This is\n         a 32 bits counter. Combined with the overflow counter it provides the\n         equivalent of the 64 bits counter acdCfmHistResultPktLossHCNbrLoss.')
acdCfmHistResultPktLossOverflowNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossOverflowNbrLoss.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossOverflowNbrLoss.setDescription('The number of times the associated acdCfmHistResultPktLossNbrLoss counter\n         has overflowed during this sampling interval. This is a 32 bits counter.\n         Combined with acdCfmHistResultPktLossNbrLoss, it provides the equivalent of\n         the 64 bits counter acdCfmHistResultPktLossHCNbrLoss.')
acdCfmHistResultPktLossHCNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossHCNbrLoss.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossHCNbrLoss.setDescription('The total number of packets loss during this sampling interval.')
acdCfmHistResultPktLossNbrGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossNbrGaps.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossNbrGaps.setDescription('The total number of gap during this sampling interval. This is a\n         32 bits counter. Combined with the overflow counter it provides the\n         equivalent of the 64 bits counter acdCfmHistResultPktLossHCNbrGaps.')
acdCfmHistResultPktLossOverflowNbrGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossOverflowNbrGaps.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossOverflowNbrGaps.setDescription('The number of times the associated acdCfmHistResultPktLossNbrGaps counter\n         has overflowed during this sampling interval. This is a 32 bits counter.\n         Combined with acdCfmHistResultPktLossNbrGaps, it provides the equivalent of\n         the 64 bits counter acdCfmHistResultPktLossHCNbrGaps.')
acdCfmHistResultPktLossHCNbrGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossHCNbrGaps.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossHCNbrGaps.setDescription('The total number of gap during this sampling interval.')
acdCfmHistResultPktLossLargestGap = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossLargestGap.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossLargestGap.setDescription('the largest gap size in packets during this sampling interval. This is\n         a 32 bits counter. Combined with the overflow counter it provides the\n         equivalent of the 64 bits counter acdCfmHistResultPktLossHCNbrGaps.')
acdCfmHistResultPktLossOverflowLargestGap = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossOverflowLargestGap.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossOverflowLargestGap.setDescription('The number of times the associated acdCfmHistResultPktLossLargestGap\n         counter has overflowed during this sampling interval. This is a\n         32 bits counter. Combined with acdCfmHistResultPktLossLargestGap, it\n         provides the equivalent of the 64 bits counter\n         acdCfmHistResultPktLossHCLargestGap.')
acdCfmHistResultPktLossHCLargestGap = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossHCLargestGap.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossHCLargestGap.setDescription('the largest gap size in packets during this sampling interval.')
acdCfmHistResultPktLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 2, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmHistResultPktLossRatio.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossRatio.setDescription('Indicates the packet loss ratio. The packet loss ratio is the percent\n         of packets transmitted but not received in millionth of a percent\n         (1,000,000 is 1%).')
acdCfmSlmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 1), )
if mibBuilder.loadTexts: acdCfmSlmCfgTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmCfgTable.setDescription('Configuration table of all SLM entries.')
acdCfmSlmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 1, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmSlmCfgID"))
if mibBuilder.loadTexts: acdCfmSlmCfgEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmCfgEntry.setDescription('An entry consisting of all settings to manage a SLM instance.')
acdCfmSlmCfgID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmSlmCfgID.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmCfgID.setDescription('Unique value for each SLM instance. This value follows the\n         ordering the results table.')
acdCfmSlmCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmCfgRowStatus.setDescription('The writable columns in a row can not be changed if the row is active.\n       All columns must have a valid value before a row can be activated.')
acdCfmSlmCfgMepIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmCfgMepIdx.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmCfgMepIdx.setDescription('Maintenance association End Point Identifier.')
acdCfmSlmCfgRemoteMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmCfgRemoteMepId.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmCfgRemoteMepId.setDescription('Remote Maintenance association End Point Identifier.')
acdCfmSlmCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmCfgPriority.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmCfgPriority.setDescription('The VLAN priority. Its value ranges from 0 to 7.')
acdCfmSlmCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmCfgState.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmCfgState.setDescription('State of the SLM instance')
acdCfmSlmCfgInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmCfgInterval.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmCfgInterval.setDescription('Interval in milliseconds at which CFM issues Synthetic Loss Measurement\n        packets.')
acdCfmSlmCfgRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(15)).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmCfgRefPeriod.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmCfgRefPeriod.setDescription('Reference period in minutes for Synthetic Loss Measurement.')
acdCfmSlmCfgNearEndThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmCfgNearEndThresh.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmCfgNearEndThresh.setDescription('Near end packet loss ratio threshold allowed without issuing an alarm\n         expressed in millionth of percent (1,000,000 is 1%).')
acdCfmSlmCfgFarEndThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmCfgFarEndThresh.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmCfgFarEndThresh.setDescription('Far end packet loss ratio threshold allowed without issuing an alarm\n         expressed in millionth of percent (1,000,000 is 1%).')
acdCfmSlmCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)).clone('new')).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmCfgName.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmCfgName.setDescription('The name of the instance')
acdCfmSlmResultTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2), )
if mibBuilder.loadTexts: acdCfmSlmResultTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultTable.setDescription('SLM result table of a MEP and remote MEP pair.')
acdCfmSlmResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmSlmResultID"))
if mibBuilder.loadTexts: acdCfmSlmResultEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultEntry.setDescription('An entry consisting of SLM result for a specific MEP and\n        remote MEP pair.')
acdCfmSlmResultID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmSlmResultID.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultID.setDescription('Unique value for each SLM instance. This\n        value follows the ordering of the SLM table.')
acdCfmSlmResultPeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmResultPeriodIndex.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultPeriodIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same PL instance.\n         This index starts at 1 and increases by one as each new period.')
acdCfmSlmResultIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmResultIntervalStart.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultIntervalStart.setDescription('This is the time of the start of the period.')
acdCfmSlmResultValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmResultValid.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultValid.setDescription('Reserved for future use.')
acdCfmSlmResultNearEndAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmResultNearEndAlert.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultNearEndAlert.setDescription('Indicate the presence of the SLM near end alert.')
acdCfmSlmResultFarEndAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmResultFarEndAlert.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultFarEndAlert.setDescription('Indicate the presence of the SLM far end alert.')
acdCfmSlmResultTxSlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmResultTxSlm.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultTxSlm.setDescription('Indicates the number of SLM frames sent.')
acdCfmSlmResultRxSlr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmResultRxSlr.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultRxSlr.setDescription('Indicates the number of SLR frames received.')
acdCfmSlmResultRemoteRxSlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmResultRemoteRxSlm.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultRemoteRxSlm.setDescription('Indicates the number of SLM frames received at the far end.')
acdCfmSlmResultNearEndNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmResultNearEndNbrLoss.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultNearEndNbrLoss.setDescription('This is the number of packets lost at the near end.')
acdCfmSlmResultFarEndNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmResultFarEndNbrLoss.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultFarEndNbrLoss.setDescription('This is the number of packets lost at the far end.')
acdCfmSlmResultNearEndRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmResultNearEndRatio.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultNearEndRatio.setDescription('This is the packet loss ratio at the near end.')
acdCfmSlmResultFarEndRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmResultFarEndRatio.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultFarEndRatio.setDescription('This is the packet loss ratio at the far end.')
acdCfmSlmResultNbrGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmResultNbrGaps.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultNbrGaps.setDescription('This is the number of gap.')
acdCfmSlmResultLargestGap = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmResultLargestGap.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultLargestGap.setDescription('This is the largest gap.')
acdCfmSlmHistResultTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 3), )
if mibBuilder.loadTexts: acdCfmSlmHistResultTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmHistResultTable.setDescription('SLM history result table of a MEP and remote MEP pair.')
acdCfmSlmHistResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 3, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmSlmHistResultInstanceIndex"), (0, "ACD-CFM-MIB", "acdCfmSlmHistResultID"))
if mibBuilder.loadTexts: acdCfmSlmHistResultEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmHistResultEntry.setDescription('An entry consisting of SLM  history result for a specific\n        MEP and remote MEP pair.')
acdCfmSlmHistResultID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmSlmHistResultID.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmHistResultID.setDescription('Unique value for each SLM instance. This\n        value follows the ordering of the SLM table.')
acdCfmSlmHistResultPeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmHistResultPeriodIndex.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmHistResultPeriodIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same PL instance.\n         This index starts at 1 and increases by one as each new period.')
acdCfmSlmHistResultIntervalEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 3, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmHistResultIntervalEnd.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmHistResultIntervalEnd.setDescription('This is the time of the end of the period.')
acdCfmSlmHistResultTxSlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmHistResultTxSlm.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmHistResultTxSlm.setDescription('Indicates the number of SLM frames sent.')
acdCfmSlmHistResultRxSlr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmHistResultRxSlr.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmHistResultRxSlr.setDescription('Indicates the number of SLR frames received.')
acdCfmSlmHistResultRemoteRxSlm = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmHistResultRemoteRxSlm.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmHistResultRemoteRxSlm.setDescription('Indicates the number of SLM frames received at the far end.')
acdCfmSlmHistResultNearEndRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmHistResultNearEndRatio.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmHistResultNearEndRatio.setDescription('This is the packet loss ratio at the near end.')
acdCfmSlmHistResultFarEndRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmHistResultFarEndRatio.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmHistResultFarEndRatio.setDescription('This is the packet loss ratio at the far end.')
acdCfmSlmHistResultNbrGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmHistResultNbrGaps.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmHistResultNbrGaps.setDescription('This is the number of gap.')
acdCfmSlmHistResultLargestGap = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmSlmHistResultLargestGap.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmHistResultLargestGap.setDescription('This is the largest gap.')
acdCfmSlmHistResultInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 5, 3, 1, 11), Unsigned32())
if mibBuilder.loadTexts: acdCfmSlmHistResultInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmHistResultInstanceIndex.setDescription('The instance index.')
acdCfmMepStatsTxTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2), )
if mibBuilder.loadTexts: acdCfmMepStatsTxTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxTable.setDescription('Transmit Statictics table of all MEP entries.')
acdCfmMepStatsTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmMepStatsTxID"))
if mibBuilder.loadTexts: acdCfmMepStatsTxEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxEntry.setDescription('An entry consisting of all transmit statistics related to a MEP entry.')
acdCfmMepStatsTxID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmMepStatsTxID.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxID.setDescription('Unique value for each MEP instance. This value follows the ordering\n        of the MEP table.')
acdCfmMepStatsTxCcmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxCcmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxCcmPdu.setDescription('This is a count of the total number of Continuity Check Message (CCM)\n         PDU transmitted by the MEP (OpCode 1).')
acdCfmMepStatsTxLbmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxLbmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxLbmPdu.setDescription('This is a count of the total number of LoopBack Message (LBM)\n         PDU transmitted by the MEP (OpCode 3).')
acdCfmMepStatsTxLbrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxLbrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxLbrPdu.setDescription('This is a count of the total number of LoopBack Reply (LBR)\n         PDU transmitted by the MEP (OpCode 2).')
acdCfmMepStatsTxLtmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxLtmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxLtmPdu.setDescription('This is a count of the total number of Link Trace Message (LTM)\n         PDU transmitted by the MEP (OpCode 5).')
acdCfmMepStatsTxLtrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxLtrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxLtrPdu.setDescription('This is a count of the total number of Link Trace Reply (LTR)\n         PDU transmitted by the MEP (OpCode 4).')
acdCfmMepStatsTxAisPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxAisPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxAisPdu.setDescription('This is a count of the total number of Alarm Indication Signal (AIS)\n         PDU transmitted by the MEP (OpCode 33).')
acdCfmMepStatsTxLckPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxLckPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxLckPdu.setDescription('This is a count of the total number of Locked (LCK) PDU transmitted\n         by the MEP  (OpCode 35).')
acdCfmMepStatsTxTstPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxTstPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxTstPdu.setDescription('This is a count of the total number of Test (TST) PDU transmitted by\n         the MEP (OpCode 37).')
acdCfmMepStatsTxLinearApsPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxLinearApsPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxLinearApsPdu.setDescription('This is a count of the total number of linear Automatic Protection Switching\n         (APS) PDU transmitted by the MEP  (OpCode 39).')
acdCfmMepStatsTxRingApsPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxRingApsPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxRingApsPdu.setDescription('This is a count of the total number of ring Automatic Protection Switching\n         (APS) PDU transmitted by the MEP (OpCode 40).')
acdCfmMepStatsTxMccPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxMccPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxMccPdu.setDescription('This is a count of the total number of Maintenance Communication\n         Channel  (MCC) PDU transmitted by the MEP (OpCode 41).')
acdCfmMepStatsTxLmmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxLmmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxLmmPdu.setDescription('This is a count of the total number of Loss Measurement Message (LMM)\n         PDU transmitted by the MEP (OpCode 43).')
acdCfmMepStatsTxLmrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxLmrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxLmrPdu.setDescription('This is a count of the total number of Loss Measurement Reply (LMR)\n         PDU transmitted by the MEP (OpCode 42).')
acdCfmMepStatsTx1dmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTx1dmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTx1dmPdu.setDescription('This is a count of the total number of One-way Delay Measurement (1DM)\n         PDU transmitted by the MEP (OpCode 45).')
acdCfmMepStatsTxDmmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxDmmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxDmmPdu.setDescription('This is a count of the total number of Delay Measurement Message (DMM)\n         PDU transmitted by the MEP (OpCode 47).')
acdCfmMepStatsTxDmrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxDmrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxDmrPdu.setDescription('This is a count of the total number of Delay Measurement Reply (DMR)\n         PDU transmitted by the MEP (OpCode 46).')
acdCfmMepStatsTxExmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxExmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxExmPdu.setDescription('This is a count of the total number of EXperimental Message (EXM)\n         PDU transmitted by the MEP (OpCode 49).')
acdCfmMepStatsTxExrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxExrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxExrPdu.setDescription('This is a count of the total number of EXperimental Reply (EXR)\n         PDU transmitted by the MEP (OpCode 48).')
acdCfmMepStatsTxVsmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxVsmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxVsmPdu.setDescription('This is a count of the total number of Vendor Specific Message (VSM)\n         PDU transmitted by the MEP  (OpCode 51).')
acdCfmMepStatsTxVsrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxVsrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxVsrPdu.setDescription('This is a count of the total number of Vendor Specific Reply (VSR)\n         PDU transmitted by the MEP (OpCode 50).')
acdCfmMepStatsTxCsfPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxCsfPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxCsfPdu.setDescription('This is a count of the total number of Client Signal Fail (CSF)\n         PDU transmitted by the MEP (OpCode 52).')
acdCfmMepStatsTxSlmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxSlmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxSlmPdu.setDescription('This is a count of the total number of Synthetic Loss Message (SLM)\n         PDU transmitted by the MEP (OpCode 55).')
acdCfmMepStatsTxSlrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsTxSlrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxSlrPdu.setDescription('This is a count of the total number of Synthetic Loss Reply (SLR)\n         PDU transmitted by the MEP (OpCode 54).')
acdCfmMepStatsRxTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3), )
if mibBuilder.loadTexts: acdCfmMepStatsRxTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxTable.setDescription('Receive Statictics table of all MEP entries.')
acdCfmMepStatsRxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmMepStatsRxID"))
if mibBuilder.loadTexts: acdCfmMepStatsRxEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxEntry.setDescription('An entry consisting of all receive statistics related to a MEP entry.')
acdCfmMepStatsRxID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmMepStatsRxID.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxID.setDescription('.')
acdCfmMepStatsRxCcmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxCcmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxCcmPdu.setDescription('This is a count of the total number of Continuity Check Message (CCM)\n         PDU received by the MEP  (OpCode 1).')
acdCfmMepStatsRxLbmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxLbmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxLbmPdu.setDescription('This is a count of the total number of LoopBack Message (LBM)\n         PDU received by the MEP  (OpCode 3).')
acdCfmMepStatsRxLbrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxLbrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxLbrPdu.setDescription('This is a count of the total number of LoopBack Reply (LBR)\n         PDU received by the MEP  (OpCode 2).')
acdCfmMepStatsRxLtmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxLtmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxLtmPdu.setDescription('This is a count of the total number of Link Trace Message (LTM)\n         PDU received by the MEP  (OpCode 5).')
acdCfmMepStatsRxLtrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxLtrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxLtrPdu.setDescription('This is a count of the total number of Link Trace Reply (LTR)\n         PDU received by the MEP  (OpCode 4).')
acdCfmMepStatsRxAisPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxAisPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxAisPdu.setDescription('This is a count of the total number of Alarm Indication Signal (AIS)\n         PDU received by the MEP  (OpCode 33).')
acdCfmMepStatsRxLckPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxLckPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxLckPdu.setDescription('This is a count of the total number of Locked (LCK) PDU received\n         by the MEP  (OpCode 35).')
acdCfmMepStatsRxTstPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxTstPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxTstPdu.setDescription('This is a count of the total number of Test (TST) PDU received by\n         the MEP  (OpCode 37).')
acdCfmMepStatsRxLinearApsPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxLinearApsPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxLinearApsPdu.setDescription('This is a count of the total number of linear Automatic Protection Switching\n         (APS) PDU received by the MEP (OpCode 39).')
acdCfmMepStatsRxRingApsPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxRingApsPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxRingApsPdu.setDescription('This is a count of the total number of ring Automatic Protection Switching\n         (APS) PDU received by the MEP (OpCode 40).')
acdCfmMepStatsRxMccPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxMccPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxMccPdu.setDescription('This is a count of the total number of Maintenance Communication\n         Channel (MCC) PDU received by the MEP (OpCode 41).')
acdCfmMepStatsRxLmmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxLmmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxLmmPdu.setDescription('This is a count of the total number of Loss Measurement Message (LMM)\n         PDU received by the MEP (OpCode 43).')
acdCfmMepStatsRxLmrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxLmrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxLmrPdu.setDescription('This is a count of the total number of Loss Measurement Reply (LMR)\n         PDU received by the MEP  (OpCode 42).')
acdCfmMepStatsRx1dmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRx1dmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRx1dmPdu.setDescription('This is a count of the total number of One-way Delay Measurement (1DM)\n         PDU received by the MEP (OpCode 45).')
acdCfmMepStatsRxDmmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxDmmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxDmmPdu.setDescription('This is a count of the total number of Delay Measurement Message (DMM)\n         PDU received by the MEP (OpCode 47).')
acdCfmMepStatsRxDmrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxDmrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxDmrPdu.setDescription('This is a count of the total number of Delay Measurement Reply (DMR)\n         PDU received by the MEP (OpCode 46).')
acdCfmMepStatsRxExmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxExmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxExmPdu.setDescription('This is a count of the total number of EXperimental Message (EXM)\n         PDU received by the MEP (OpCode 49).')
acdCfmMepStatsRxExrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxExrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxExrPdu.setDescription('This is a count of the total number of EXperimental Reply (EXR)\n         PDU received by the MEP (OpCode 48).')
acdCfmMepStatsRxVsmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxVsmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxVsmPdu.setDescription('This is a count of the total number of Vendor Specific Message (VSM)\n         PDU received by the MEP (OpCode 51).')
acdCfmMepStatsRxVsrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxVsrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxVsrPdu.setDescription('This is a count of the total number of Vendor Specific Reply (VSR)\n         PDU received by the MEP (OpCode 50).')
acdCfmMepStatsRxCcmSeqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxCcmSeqErrors.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxCcmSeqErrors.setDescription('The total number of out-of-sequence CCMs received from all remote\n         MEPs.')
acdCfmMepStatsRxLtrUnexpectedPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxLtrUnexpectedPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxLtrUnexpectedPdu.setDescription('The total number of LTRs received when no linktrace request is active\n         for that MEP.')
acdCfmMepStatsRxLtrMacErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxLtrMacErrors.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxLtrMacErrors.setDescription('The total number of Link Trace Replies dropped because of bad MAC\n         address.')
acdCfmMepStatsRxLbrOooErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxLbrOooErrors.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxLbrOooErrors.setDescription('The total number of valid, out-of-order Loopback Replies received.')
acdCfmMepStatsRxLbrUnexpectedPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxLbrUnexpectedPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxLbrUnexpectedPdu.setDescription('The total number of LBRs received when no loopback request is active\n         for that MEP.')
acdCfmMepStatsRxLbrDataErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxLbrDataErrors.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxLbrDataErrors.setDescription('The total number of LBRs received whose MACService Data Unit did not\n          match (except for the OpCode) that of the corresponding LBM.')
acdCfmMepStatsRxCsfPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxCsfPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxCsfPdu.setDescription('This is a count of the total number of Client Signal Fail (CSF)\n         PDU received by the MEP (OpCode 52).')
acdCfmMepStatsRxSlmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxSlmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxSlmPdu.setDescription('This is a count of the total number of Synthetic Loss Message (SLM)\n         PDU received by the MEP (OpCode 55).')
acdCfmMepStatsRxSlrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepStatsRxSlrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxSlrPdu.setDescription('This is a count of the total number of Synthetic Loss Reply (SLR)\n         PDU received by the MEP (OpCode 54).')
acdCfmMepDmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 4), )
if mibBuilder.loadTexts: acdCfmMepDmStatsTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepDmStatsTable.setDescription('Transmit DMM/DMR statictics per priority table for a MEP entry.')
acdCfmMepDmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 4, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmMepDmStatsID"), (0, "ACD-CFM-MIB", "acdCfmMepDmStatsPriority"))
if mibBuilder.loadTexts: acdCfmMepDmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepDmStatsEntry.setDescription('An entry consisting of all DMM/DMR statistics related to a MEP entry.')
acdCfmMepDmStatsID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmMepDmStatsID.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepDmStatsID.setDescription('Unique value for each MEP instance. This value follows the ordering\n        of the MEP table. Same as acdCfmMepStatsTxID and acdCfmMepStatsRxID.')
acdCfmMepDmStatsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: acdCfmMepDmStatsPriority.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepDmStatsPriority.setDescription('Unique value for each priority level.')
acdCfmMepDmStatsTxDmmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepDmStatsTxDmmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepDmStatsTxDmmPdu.setDescription('This is a count of the total number of Delay Measurement Message (DMM)\n         (OpCode 47) PDU transmitted by the MEP for this specific priority level.')
acdCfmMepDmStatsRxDmmPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepDmStatsRxDmmPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepDmStatsRxDmmPdu.setDescription('This is a count of the total number of Delay Measurement Message (DMM)\n         (OpCode 47) PDU received by the MEP for this specific priority level.')
acdCfmMepDmStatsTxDmrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepDmStatsTxDmrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepDmStatsTxDmrPdu.setDescription('This is a count of the total number of Delay Measurement Reply (DMR)\n         (OpCode 46) PDU transmitted by the MEP for this specific priority level.')
acdCfmMepDmStatsRxDmrPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 3, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepDmStatsRxDmrPdu.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepDmStatsRxDmrPdu.setDescription('This is a count of the total number of Delay Measurement Reply (DMR)\n         (OpCode 46) PDU received by the MEP for this specific priority level.')
acdCfmStackTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 4, 1), )
if mibBuilder.loadTexts: acdCfmStackTable.setStatus('current')
if mibBuilder.loadTexts: acdCfmStackTable.setDescription('Configuration table of stack entries.')
acdCfmStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 4, 1, 1), ).setIndexNames((0, "ACD-CFM-MIB", "acdCfmMdIdx"), (0, "ACD-CFM-MIB", "acdCfmMaIdx"), (0, "ACD-CFM-MIB", "acdCfmMepID"))
if mibBuilder.loadTexts: acdCfmStackEntry.setStatus('current')
if mibBuilder.loadTexts: acdCfmStackEntry.setDescription('An entry consisting of all informations to tie together.')
acdCfmMdIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdCfmMdIdx.setStatus('current')
if mibBuilder.loadTexts: acdCfmMdIdx.setDescription('Maintenance Domain(MD) index from table dot1agCfmMepTable in IEEE8021-CFM-MIB.')
acdCfmMaIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 4, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: acdCfmMaIdx.setStatus('current')
if mibBuilder.loadTexts: acdCfmMaIdx.setDescription('Maintenance Association(MA) index from table dot1agCfmMepTable in IEEE8021-CFM-MIB.')
acdCfmMepID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 4, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: acdCfmMepID.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepID.setDescription('Maintenance End Point(Mep) index from table dot1agCfmMepTable in IEEE8021-CFM-MIB.')
acdCfmMepIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 7, 1, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdCfmMepIdx.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepIdx.setDescription('Maintenance End Point(Mep) index from table acdCfmDmCfgTable in ACD-CFM-MIB.')
acdCfmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 1))
acdCfmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2))
acdCfmDmCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 1)).setObjects(("ACD-CFM-MIB", "acdCfmDmCfgRowStatus"), ("ACD-CFM-MIB", "acdCfmDmCfgMepIdx"), ("ACD-CFM-MIB", "acdCfmDmCfgRemoteMepId"), ("ACD-CFM-MIB", "acdCfmDmCfgPriority"), ("ACD-CFM-MIB", "acdCfmDmCfgEnable"), ("ACD-CFM-MIB", "acdCfmDmCfgInterval"), ("ACD-CFM-MIB", "acdCfmDmCfgRefPeriod"), ("ACD-CFM-MIB", "acdCfmDmCfgOneWayDelayEnable"), ("ACD-CFM-MIB", "acdCfmDmCfgOneWayDelayMax"), ("ACD-CFM-MIB", "acdCfmDmCfgOneWayDelayThresh"), ("ACD-CFM-MIB", "acdCfmDmCfgOneWayAvgDelayThresh"), ("ACD-CFM-MIB", "acdCfmDmCfgOneWayDvEnable"), ("ACD-CFM-MIB", "acdCfmDmCfgOneWayDvMax"), ("ACD-CFM-MIB", "acdCfmDmCfgOneWayDvThresh"), ("ACD-CFM-MIB", "acdCfmDmCfgOneWayAvgDvThresh"), ("ACD-CFM-MIB", "acdCfmDmCfgTwoWayDelayEnable"), ("ACD-CFM-MIB", "acdCfmDmCfgTwoWayDelayMax"), ("ACD-CFM-MIB", "acdCfmDmCfgTwoWayDelayThresh"), ("ACD-CFM-MIB", "acdCfmDmCfgTwoWayAvgDelayThresh"), ("ACD-CFM-MIB", "acdCfmDmCfgTwoWayDvEnable"), ("ACD-CFM-MIB", "acdCfmDmCfgTwoWayDvMax"), ("ACD-CFM-MIB", "acdCfmDmCfgTwoWayDvThresh"), ("ACD-CFM-MIB", "acdCfmDmCfgTwoWayAvgDvThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmDmCfgGroup = acdCfmDmCfgGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmDmCfgGroup.setDescription('Objects for the Delay Measurement configuration Group.')
acdCfmResultOneWayDelayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 2)).setObjects(("ACD-CFM-MIB", "acdCfmResultOneWayDelayPeriodIndex"), ("ACD-CFM-MIB", "acdCfmResultOneWayDelayIntervalStart"), ("ACD-CFM-MIB", "acdCfmResultOneWayDelayValid"), ("ACD-CFM-MIB", "acdCfmResultOneWayDelayAlert"), ("ACD-CFM-MIB", "acdCfmResultOneWayDelayAvgAlert"), ("ACD-CFM-MIB", "acdCfmResultOneWayDelaySamples"), ("ACD-CFM-MIB", "acdCfmResultOneWayDelayMinValue"), ("ACD-CFM-MIB", "acdCfmResultOneWayDelayMaxValue"), ("ACD-CFM-MIB", "acdCfmResultOneWayDelayAvgValue"), ("ACD-CFM-MIB", "acdCfmResultOneWayDelayThreshExc"), ("ACD-CFM-MIB", "acdCfmResultOneWayDelayInstValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmResultOneWayDelayGroup = acdCfmResultOneWayDelayGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDelayGroup.setDescription('Objects for the One Way Delay result Group.')
acdCfmResultOneWayDvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 3)).setObjects(("ACD-CFM-MIB", "acdCfmResultOneWayDvPeriodIndex"), ("ACD-CFM-MIB", "acdCfmResultOneWayDvIntervalStart"), ("ACD-CFM-MIB", "acdCfmResultOneWayDvValid"), ("ACD-CFM-MIB", "acdCfmResultOneWayDvAlert"), ("ACD-CFM-MIB", "acdCfmResultOneWayDvAvgAlert"), ("ACD-CFM-MIB", "acdCfmResultOneWayDvSamples"), ("ACD-CFM-MIB", "acdCfmResultOneWayDvMinValue"), ("ACD-CFM-MIB", "acdCfmResultOneWayDvMaxValue"), ("ACD-CFM-MIB", "acdCfmResultOneWayDvAvgValue"), ("ACD-CFM-MIB", "acdCfmResultOneWayDvThreshExc"), ("ACD-CFM-MIB", "acdCfmResultOneWayDvInstValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmResultOneWayDvGroup = acdCfmResultOneWayDvGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultOneWayDvGroup.setDescription('Objects for the One Way Delay variation result Group.')
acdCfmResultTwoWayDelayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 4)).setObjects(("ACD-CFM-MIB", "acdCfmResultTwoWayDelayPeriodIndex"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDelayIntervalStart"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDelayValid"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDelayAlert"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDelayAvgAlert"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDelaySamples"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDelayMinValue"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDelayMaxValue"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDelayAvgValue"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDelayThreshExc"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDelayInstValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmResultTwoWayDelayGroup = acdCfmResultTwoWayDelayGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDelayGroup.setDescription('Objects for the Two Way Delay result Group.')
acdCfmResultTwoWayDvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 5)).setObjects(("ACD-CFM-MIB", "acdCfmResultTwoWayDvPeriodIndex"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDvIntervalStart"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDvValid"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDvAlert"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDvAvgAlert"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDvSamples"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDvMinValue"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDvMaxValue"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDvAvgValue"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDvThreshExc"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDvInstValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmResultTwoWayDvGroup = acdCfmResultTwoWayDvGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultTwoWayDvGroup.setDescription('Objects for the Two Way Delay varition result Group.')
acdCfmHistResultOneWayDelayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 6)).setObjects(("ACD-CFM-MIB", "acdCfmHistResultOneWayDelayStatus"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDelayDuration"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDelayIntervalEnd"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDelaySamples"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDelayMinValue"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDelayMaxValue"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDelayAvgValue"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDelayThreshExc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmHistResultOneWayDelayGroup = acdCfmHistResultOneWayDelayGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDelayGroup.setDescription('Objects for the One Way Delay history result Group.')
acdCfmHistResultOneWayDvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 7)).setObjects(("ACD-CFM-MIB", "acdCfmHistResultOneWayDvStatus"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDvDuration"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDvIntervalEnd"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDvSamples"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDvMinValue"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDvMaxValue"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDvAvgValue"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDvThreshExc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmHistResultOneWayDvGroup = acdCfmHistResultOneWayDvGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultOneWayDvGroup.setDescription('Objects for the One Way Delay variation history result Group.')
acdCfmHistResultTwoWayDelayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 8)).setObjects(("ACD-CFM-MIB", "acdCfmHistResultTwoWayDelayStatus"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDelayDuration"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDelayIntervalEnd"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDelaySamples"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDelayMinValue"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDelayMaxValue"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDelayAvgValue"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDelayThreshExc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmHistResultTwoWayDelayGroup = acdCfmHistResultTwoWayDelayGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDelayGroup.setDescription('Objects for the Two Way Delay history result Group.')
acdCfmHistResultTwoWayDvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 9)).setObjects(("ACD-CFM-MIB", "acdCfmHistResultTwoWayDvStatus"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDvDuration"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDvIntervalEnd"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDvSamples"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDvMinValue"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDvMaxValue"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDvAvgValue"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDvThreshExc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmHistResultTwoWayDvGroup = acdCfmHistResultTwoWayDvGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultTwoWayDvGroup.setDescription('Objects for the Two Way Delay variation history result Group.')
acdCfmPktLossCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 10)).setObjects(("ACD-CFM-MIB", "acdCfmPktLossCfgRowStatus"), ("ACD-CFM-MIB", "acdCfmPktLossCfgMepIdx"), ("ACD-CFM-MIB", "acdCfmPktLossCfgRemoteMepId"), ("ACD-CFM-MIB", "acdCfmPktLossCfgPriority"), ("ACD-CFM-MIB", "acdCfmPktLossCfgEnable"), ("ACD-CFM-MIB", "acdCfmPktLossCfgInterval"), ("ACD-CFM-MIB", "acdCfmPktLossCfgRefPeriod"), ("ACD-CFM-MIB", "acdCfmPktLossCfgThresh"), ("ACD-CFM-MIB", "acdCfmPktLossCfgRatioThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmPktLossCfgGroup = acdCfmPktLossCfgGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmPktLossCfgGroup.setDescription('Objects for Packet loss configuration Group.')
acdCfmResultPktLossGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 11)).setObjects(("ACD-CFM-MIB", "acdCfmResultPktLossPeriodIndex"), ("ACD-CFM-MIB", "acdCfmResultPktLossIntervalStart"), ("ACD-CFM-MIB", "acdCfmResultPktLossValid"), ("ACD-CFM-MIB", "acdCfmResultPktLossAlert"), ("ACD-CFM-MIB", "acdCfmResultPktLossSamples"), ("ACD-CFM-MIB", "acdCfmResultPktLossOverflowSamples"), ("ACD-CFM-MIB", "acdCfmResultPktLossHCSamples"), ("ACD-CFM-MIB", "acdCfmResultPktLossNbrLoss"), ("ACD-CFM-MIB", "acdCfmResultPktLossOverflowNbrLoss"), ("ACD-CFM-MIB", "acdCfmResultPktLossHCNbrLoss"), ("ACD-CFM-MIB", "acdCfmResultPktLossNbrGaps"), ("ACD-CFM-MIB", "acdCfmResultPktLossOverflowNbrGaps"), ("ACD-CFM-MIB", "acdCfmResultPktLossHCNbrGaps"), ("ACD-CFM-MIB", "acdCfmResultPktLossLargestGap"), ("ACD-CFM-MIB", "acdCfmResultPktLossOverflowLargestGap"), ("ACD-CFM-MIB", "acdCfmResultPktLossHCLargestGap"), ("ACD-CFM-MIB", "acdCfmResultPktLossRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmResultPktLossGroup = acdCfmResultPktLossGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmResultPktLossGroup.setDescription('Objects for Packet loss result Group.')
acdCfmHistResultPktLossGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 12)).setObjects(("ACD-CFM-MIB", "acdCfmHistResultPktLossStatus"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossDuration"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossIntervalEnd"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossSamples"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossOverflowSamples"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossHCSamples"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossNbrLoss"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossOverflowNbrLoss"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossHCNbrLoss"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossNbrGaps"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossOverflowNbrGaps"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossHCNbrGaps"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossLargestGap"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossOverflowLargestGap"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossHCLargestGap"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmHistResultPktLossGroup = acdCfmHistResultPktLossGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmHistResultPktLossGroup.setDescription('Objects for Packet loss history result Group.')
acdCfmMepStatsTxGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 13)).setObjects(("ACD-CFM-MIB", "acdCfmMepStatsTxCcmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxLbmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxLbrPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxLtmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxLtrPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxAisPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxLckPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxTstPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxLinearApsPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxRingApsPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxMccPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxLmmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxLmrPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTx1dmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxDmmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxDmrPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxExmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxExrPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxVsmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxVsrPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxCsfPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxSlmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxSlrPdu"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmMepStatsTxGroup = acdCfmMepStatsTxGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsTxGroup.setDescription('Objects for MEP transmit statistics Group.')
acdCfmMepStatsRxGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 14)).setObjects(("ACD-CFM-MIB", "acdCfmMepStatsRxCcmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxLbmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxLbrPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxLtmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxLtrPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxAisPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxLckPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxTstPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxLinearApsPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxRingApsPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxMccPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxLmmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxLmrPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRx1dmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxDmmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxDmrPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxExmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxExrPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxVsmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxVsrPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxCcmSeqErrors"), ("ACD-CFM-MIB", "acdCfmMepStatsRxLtrUnexpectedPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxLtrMacErrors"), ("ACD-CFM-MIB", "acdCfmMepStatsRxLbrOooErrors"), ("ACD-CFM-MIB", "acdCfmMepStatsRxLbrUnexpectedPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxLbrDataErrors"), ("ACD-CFM-MIB", "acdCfmMepStatsRxCsfPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxSlrPdu"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmMepStatsRxGroup = acdCfmMepStatsRxGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStatsRxGroup.setDescription('Objects for MEP receive statistics Group.')
acdCfmMepDmStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 15)).setObjects(("ACD-CFM-MIB", "acdCfmMepDmStatsTxDmmPdu"), ("ACD-CFM-MIB", "acdCfmMepDmStatsRxDmmPdu"), ("ACD-CFM-MIB", "acdCfmMepDmStatsTxDmrPdu"), ("ACD-CFM-MIB", "acdCfmMepDmStatsRxDmrPdu"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmMepDmStatsGroup = acdCfmMepDmStatsGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepDmStatsGroup.setDescription('Objects for DMM/DMR MEP statistics Group.')
acdCfmMepStackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 16)).setObjects(("ACD-CFM-MIB", "acdCfmMepIdx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmMepStackGroup = acdCfmMepStackGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepStackGroup.setDescription('Objects for cfm Stack Group.')
acdCfmMepSlmStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 17)).setObjects(("ACD-CFM-MIB", "acdCfmMepStatsTxSlmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxSlmPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsTxSlrPdu"), ("ACD-CFM-MIB", "acdCfmMepStatsRxSlrPdu"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmMepSlmStatsGroup = acdCfmMepSlmStatsGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmMepSlmStatsGroup.setDescription('Objects for SLM/SLR MEP statistics Group.')
acdCfmSlmCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 18)).setObjects(("ACD-CFM-MIB", "acdCfmSlmCfgRowStatus"), ("ACD-CFM-MIB", "acdCfmSlmCfgMepIdx"), ("ACD-CFM-MIB", "acdCfmSlmCfgRemoteMepId"), ("ACD-CFM-MIB", "acdCfmSlmCfgPriority"), ("ACD-CFM-MIB", "acdCfmSlmCfgState"), ("ACD-CFM-MIB", "acdCfmSlmCfgInterval"), ("ACD-CFM-MIB", "acdCfmSlmCfgRefPeriod"), ("ACD-CFM-MIB", "acdCfmSlmCfgNearEndThresh"), ("ACD-CFM-MIB", "acdCfmSlmCfgFarEndThresh"), ("ACD-CFM-MIB", "acdCfmSlmCfgName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmSlmCfgGroup = acdCfmSlmCfgGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmCfgGroup.setDescription('Objects for SLM configuration Group.')
acdCfmSlmResultGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 19)).setObjects(("ACD-CFM-MIB", "acdCfmSlmResultPeriodIndex"), ("ACD-CFM-MIB", "acdCfmSlmResultIntervalStart"), ("ACD-CFM-MIB", "acdCfmSlmResultValid"), ("ACD-CFM-MIB", "acdCfmSlmResultNearEndAlert"), ("ACD-CFM-MIB", "acdCfmSlmResultFarEndAlert"), ("ACD-CFM-MIB", "acdCfmSlmResultTxSlm"), ("ACD-CFM-MIB", "acdCfmSlmResultRxSlr"), ("ACD-CFM-MIB", "acdCfmSlmResultRemoteRxSlm"), ("ACD-CFM-MIB", "acdCfmSlmResultNearEndNbrLoss"), ("ACD-CFM-MIB", "acdCfmSlmResultFarEndNbrLoss"), ("ACD-CFM-MIB", "acdCfmSlmResultNearEndRatio"), ("ACD-CFM-MIB", "acdCfmSlmResultFarEndRatio"), ("ACD-CFM-MIB", "acdCfmSlmResultNbrGaps"), ("ACD-CFM-MIB", "acdCfmSlmResultLargestGap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmSlmResultGroup = acdCfmSlmResultGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmResultGroup.setDescription('Objects for SLM result Group.')
acdCfmSlmHistResultGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 2, 20)).setObjects(("ACD-CFM-MIB", "acdCfmSlmHistResultPeriodIndex"), ("ACD-CFM-MIB", "acdCfmSlmHistResultIntervalEnd"), ("ACD-CFM-MIB", "acdCfmSlmHistResultTxSlm"), ("ACD-CFM-MIB", "acdCfmSlmHistResultRxSlr"), ("ACD-CFM-MIB", "acdCfmSlmHistResultRemoteRxSlm"), ("ACD-CFM-MIB", "acdCfmSlmHistResultNearEndRatio"), ("ACD-CFM-MIB", "acdCfmSlmHistResultFarEndRatio"), ("ACD-CFM-MIB", "acdCfmSlmHistResultNbrGaps"), ("ACD-CFM-MIB", "acdCfmSlmHistResultLargestGap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmSlmHistResultGroup = acdCfmSlmHistResultGroup.setStatus('current')
if mibBuilder.loadTexts: acdCfmSlmHistResultGroup.setDescription('Objects for SLM history result Group.')
acdCfmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 22420, 2, 7, 2, 1, 1)).setObjects(("ACD-CFM-MIB", "acdCfmDmCfgGroup"), ("ACD-CFM-MIB", "acdCfmResultOneWayDelayGroup"), ("ACD-CFM-MIB", "acdCfmResultOneWayDvGroup"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDelayGroup"), ("ACD-CFM-MIB", "acdCfmResultTwoWayDvGroup"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDelayGroup"), ("ACD-CFM-MIB", "acdCfmHistResultOneWayDvGroup"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDelayGroup"), ("ACD-CFM-MIB", "acdCfmHistResultTwoWayDvGroup"), ("ACD-CFM-MIB", "acdCfmPktLossCfgGroup"), ("ACD-CFM-MIB", "acdCfmResultPktLossGroup"), ("ACD-CFM-MIB", "acdCfmHistResultPktLossGroup"), ("ACD-CFM-MIB", "acdCfmMepStatsTxGroup"), ("ACD-CFM-MIB", "acdCfmMepStatsRxGroup"), ("ACD-CFM-MIB", "acdCfmMepDmStatsGroup"), ("ACD-CFM-MIB", "acdCfmMepStackGroup"), ("ACD-CFM-MIB", "acdCfmMepSlmStatsGroup"), ("ACD-CFM-MIB", "acdCfmSlmCfgGroup"), ("ACD-CFM-MIB", "acdCfmSlmResultGroup"), ("ACD-CFM-MIB", "acdCfmSlmHistResultGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdCfmCompliance = acdCfmCompliance.setStatus('current')
if mibBuilder.loadTexts: acdCfmCompliance.setDescription('The compliance statement for support of the ACD-CFM-MIB module.')
mibBuilder.exportSymbols("ACD-CFM-MIB", acdCfmMepStatsRxCsfPdu=acdCfmMepStatsRxCsfPdu, acdCfmHistResultPktLossID=acdCfmHistResultPktLossID, acdCfmResultPktLossTable=acdCfmResultPktLossTable, acdCfmDmCfgOneWayAvgDvThresh=acdCfmDmCfgOneWayAvgDvThresh, acdCfmHistResultTwoWayDvSamples=acdCfmHistResultTwoWayDvSamples, acdCfmResultTwoWayDvID=acdCfmResultTwoWayDvID, acdCfmMepStatsTxLmrPdu=acdCfmMepStatsTxLmrPdu, acdCfmPktLossCfgTable=acdCfmPktLossCfgTable, acdCfmHistResultPktLossNbrLoss=acdCfmHistResultPktLossNbrLoss, acdCfmHistResultPktLossEntry=acdCfmHistResultPktLossEntry, acdCfmMepDmStatsTable=acdCfmMepDmStatsTable, acdCfmResultTwoWayDvValid=acdCfmResultTwoWayDvValid, acdCfmDmCfgOneWayAvgDelayThresh=acdCfmDmCfgOneWayAvgDelayThresh, acdCfmPktLossCfgEnable=acdCfmPktLossCfgEnable, acdCfmResultTwoWayDvThreshExc=acdCfmResultTwoWayDvThreshExc, acdCfmMepStatsRxEntry=acdCfmMepStatsRxEntry, acdCfmMepDmStatsPriority=acdCfmMepDmStatsPriority, acdCfmHistResultPktLossOverflowNbrGaps=acdCfmHistResultPktLossOverflowNbrGaps, acdCfmResultTwoWayDelayThreshExc=acdCfmResultTwoWayDelayThreshExc, acdCfmDmCfgRowStatus=acdCfmDmCfgRowStatus, acdCfmMepStatsTxLtmPdu=acdCfmMepStatsTxLtmPdu, acdCfmSlm=acdCfmSlm, acdCfmHistResultOneWayDelayDuration=acdCfmHistResultOneWayDelayDuration, acdCfmHistResultPktLossHCSamples=acdCfmHistResultPktLossHCSamples, acdCfmHistResultTwoWayDelayIntervalEnd=acdCfmHistResultTwoWayDelayIntervalEnd, acdCfmDmCfgOneWayDvThresh=acdCfmDmCfgOneWayDvThresh, acdCfmPktLossCfgRowStatus=acdCfmPktLossCfgRowStatus, acdCfmSlmHistResultTable=acdCfmSlmHistResultTable, acdCfmSlmResultNearEndAlert=acdCfmSlmResultNearEndAlert, acdCfmHistResultOneWayDelaySamples=acdCfmHistResultOneWayDelaySamples, acdCfmSlmResultLargestGap=acdCfmSlmResultLargestGap, acdCfmSlmCfgInterval=acdCfmSlmCfgInterval, acdCfmResultOneWayDvTable=acdCfmResultOneWayDvTable, acdCfmPktLossCfgRefPeriod=acdCfmPktLossCfgRefPeriod, acdCfmSlmHistResultGroup=acdCfmSlmHistResultGroup, acdCfmMepStatsTxSlrPdu=acdCfmMepStatsTxSlrPdu, acdCfmResultTwoWayDelayMinValue=acdCfmResultTwoWayDelayMinValue, acdCfmSlmCfgFarEndThresh=acdCfmSlmCfgFarEndThresh, acdCfmMepStatsRxMccPdu=acdCfmMepStatsRxMccPdu, acdCfmHistResultTwoWayDvThreshExc=acdCfmHistResultTwoWayDvThreshExc, acdCfmHistResultPktLossOverflowLargestGap=acdCfmHistResultPktLossOverflowLargestGap, acdCfmPktLossCfgInterval=acdCfmPktLossCfgInterval, acdCfmHistResultOneWayDvAvgValue=acdCfmHistResultOneWayDvAvgValue, acdCfmResultOneWayDelaySamples=acdCfmResultOneWayDelaySamples, acdCfmMepStatsTxExmPdu=acdCfmMepStatsTxExmPdu, acdCfmResultTwoWayDvMaxValue=acdCfmResultTwoWayDvMaxValue, acdCfmMepStackGroup=acdCfmMepStackGroup, acdCfmResultOneWayDelayMinValue=acdCfmResultOneWayDelayMinValue, acdCfmResultOneWayDvMaxValue=acdCfmResultOneWayDvMaxValue, acdCfmResultOneWayDelayAlert=acdCfmResultOneWayDelayAlert, acdCfmHistResultTwoWayDvID=acdCfmHistResultTwoWayDvID, acdCfmStack=acdCfmStack, acdCfmDmCfgTwoWayDvMax=acdCfmDmCfgTwoWayDvMax, acdCfmHistResultPktLossTable=acdCfmHistResultPktLossTable, acdCfmSlmHistResultNbrGaps=acdCfmSlmHistResultNbrGaps, acdCfmHistResultTwoWayDvAvgValue=acdCfmHistResultTwoWayDvAvgValue, acdCfmHistResultTwoWayDvEntry=acdCfmHistResultTwoWayDvEntry, acdCfmHistResultOneWayDvStatus=acdCfmHistResultOneWayDvStatus, acdCfmDmCfgOneWayDelayEnable=acdCfmDmCfgOneWayDelayEnable, acdCfmResultTwoWayDvAvgAlert=acdCfmResultTwoWayDvAvgAlert, acdCfmMepStatsRxCcmSeqErrors=acdCfmMepStatsRxCcmSeqErrors, acdCfmMepStatsRxID=acdCfmMepStatsRxID, acdCfmResultPktLossPeriodIndex=acdCfmResultPktLossPeriodIndex, acdCfmSlmResultGroup=acdCfmSlmResultGroup, acdCfmResultOneWayDvEntry=acdCfmResultOneWayDvEntry, acdCfmResultOneWayDvInstValue=acdCfmResultOneWayDvInstValue, acdCfmMepStatsRxLtmPdu=acdCfmMepStatsRxLtmPdu, acdCfmStackTable=acdCfmStackTable, acdCfmResultOneWayDelayThreshExc=acdCfmResultOneWayDelayThreshExc, acdCfmHistResultTwoWayDelayThreshExc=acdCfmHistResultTwoWayDelayThreshExc, acdCfmHistResultPktLossOverflowNbrLoss=acdCfmHistResultPktLossOverflowNbrLoss, acdCfmHistResultTwoWayDvDuration=acdCfmHistResultTwoWayDvDuration, acdCfmPktLossCfgRemoteMepId=acdCfmPktLossCfgRemoteMepId, acdCfmDmCfgMepIdx=acdCfmDmCfgMepIdx, acdCfmResultOneWayDvAlert=acdCfmResultOneWayDvAlert, acdCfmResultTwoWayDvEntry=acdCfmResultTwoWayDvEntry, acdCfmDmCfgOneWayDvEnable=acdCfmDmCfgOneWayDvEnable, acdCfmDmCfgPriority=acdCfmDmCfgPriority, acdCfmSlmCfgNearEndThresh=acdCfmSlmCfgNearEndThresh, acdCfmNotifications=acdCfmNotifications, acdCfmSlmHistResultFarEndRatio=acdCfmSlmHistResultFarEndRatio, acdCfmMepDmStatsID=acdCfmMepDmStatsID, acdCfmSlmHistResultTxSlm=acdCfmSlmHistResultTxSlm, acdCfmSlmResultEntry=acdCfmSlmResultEntry, acdCfmSlmCfgID=acdCfmSlmCfgID, acdCfmResultPktLossOverflowSamples=acdCfmResultPktLossOverflowSamples, acdCfmDmCfgTwoWayAvgDelayThresh=acdCfmDmCfgTwoWayAvgDelayThresh, acdCfmMepStatsRxLtrMacErrors=acdCfmMepStatsRxLtrMacErrors, acdCfmSlmResultTxSlm=acdCfmSlmResultTxSlm, acdCfmResultPktLossHCNbrLoss=acdCfmResultPktLossHCNbrLoss, acdCfmHistResultOneWayDvThreshExc=acdCfmHistResultOneWayDvThreshExc, acdCfmSlmCfgState=acdCfmSlmCfgState, acdCfmGroups=acdCfmGroups, acdCfmMepStatsRxLbrUnexpectedPdu=acdCfmMepStatsRxLbrUnexpectedPdu, acdCfmResultPktLossNbrLoss=acdCfmResultPktLossNbrLoss, acdCfmHistResultOneWayDvTable=acdCfmHistResultOneWayDvTable, acdCfmPktLossCfgMepIdx=acdCfmPktLossCfgMepIdx, acdCfmHistResultOneWayDelayThreshExc=acdCfmHistResultOneWayDelayThreshExc, acdCfmMepStatsRxLmrPdu=acdCfmMepStatsRxLmrPdu, acdCfmSlmResultPeriodIndex=acdCfmSlmResultPeriodIndex, acdCfmResultTwoWayDvSamples=acdCfmResultTwoWayDvSamples, acdCfmMepStatsRxExrPdu=acdCfmMepStatsRxExrPdu, acdCfmHistResultTwoWayDelayID=acdCfmHistResultTwoWayDelayID, acdCfmDmCfgTable=acdCfmDmCfgTable, acdCfmMepStatsTxLmmPdu=acdCfmMepStatsTxLmmPdu, acdCfmMepStatsTxDmrPdu=acdCfmMepStatsTxDmrPdu, acdCfmResultTwoWayDvGroup=acdCfmResultTwoWayDvGroup, acdCfmMepStatsTxVsrPdu=acdCfmMepStatsTxVsrPdu, acdCfmHistResultTwoWayDvMinValue=acdCfmHistResultTwoWayDvMinValue, acdCfmPktLossCfgThresh=acdCfmPktLossCfgThresh, acdCfmResultPktLossRatio=acdCfmResultPktLossRatio, acdCfmHistResultPktLossHCLargestGap=acdCfmHistResultPktLossHCLargestGap, acdCfmMepDmStatsGroup=acdCfmMepDmStatsGroup, acdCfmPktLossCfgEntry=acdCfmPktLossCfgEntry, acdCfmResultTwoWayDvPeriodIndex=acdCfmResultTwoWayDvPeriodIndex, acdCfmHistResultTwoWayDvMaxValue=acdCfmHistResultTwoWayDvMaxValue, acdCfmSlmCfgName=acdCfmSlmCfgName, acdCfmResultOneWayDelayTable=acdCfmResultOneWayDelayTable, acdCfmHistResultOneWayDvSamples=acdCfmHistResultOneWayDvSamples, acdCfmHistResultOneWayDvMinValue=acdCfmHistResultOneWayDvMinValue, acdCfmHistResultPktLossGroup=acdCfmHistResultPktLossGroup, acdCfmHistResultOneWayDvSampleIndex=acdCfmHistResultOneWayDvSampleIndex, acdCfmHistResultTwoWayDvStatus=acdCfmHistResultTwoWayDvStatus, acdCfmSlmCfgPriority=acdCfmSlmCfgPriority, acdCfmMepStatsTxDmmPdu=acdCfmMepStatsTxDmmPdu, acdCfmMepDmStatsRxDmmPdu=acdCfmMepDmStatsRxDmmPdu, acdCfmResultTwoWayDvAvgValue=acdCfmResultTwoWayDvAvgValue, acdCfmSlmHistResultInstanceIndex=acdCfmSlmHistResultInstanceIndex, acdCfmMepStatsRxLbrDataErrors=acdCfmMepStatsRxLbrDataErrors, acdCfmDmCfgTwoWayDvEnable=acdCfmDmCfgTwoWayDvEnable, acdCfmPktLossCfgPriority=acdCfmPktLossCfgPriority, acdCfmMIBObjects=acdCfmMIBObjects, acdCfmMepStatsRxVsmPdu=acdCfmMepStatsRxVsmPdu, acdCfmMepStatsRxSlrPdu=acdCfmMepStatsRxSlrPdu, acdCfmMepStatsTxEntry=acdCfmMepStatsTxEntry, acdCfmResultPktLossAlert=acdCfmResultPktLossAlert, acdCfmSlmCfgRowStatus=acdCfmSlmCfgRowStatus, acdCfmMepStatsRxSlmPdu=acdCfmMepStatsRxSlmPdu, acdCfmResultTwoWayDelaySamples=acdCfmResultTwoWayDelaySamples, acdCfmSlmResultIntervalStart=acdCfmSlmResultIntervalStart, acdCfmHistResultPktLossHCNbrGaps=acdCfmHistResultPktLossHCNbrGaps, acdCfmResultPktLossOverflowNbrLoss=acdCfmResultPktLossOverflowNbrLoss, acdCfmMepStatsTxID=acdCfmMepStatsTxID, acdCfmResultTwoWayDelayEntry=acdCfmResultTwoWayDelayEntry, acdCfmResultTwoWayDvIntervalStart=acdCfmResultTwoWayDvIntervalStart, acdCfmResultPktLossLargestGap=acdCfmResultPktLossLargestGap, acdCfmHistResultOneWayDvMaxValue=acdCfmHistResultOneWayDvMaxValue, acdCfmDmCfgRemoteMepId=acdCfmDmCfgRemoteMepId, acdCfmSlmResultFarEndAlert=acdCfmSlmResultFarEndAlert, acdCfmPktLossCfgRatioThresh=acdCfmPktLossCfgRatioThresh, acdCfmDmCfgEntry=acdCfmDmCfgEntry, acdCfmMepStatsTxExrPdu=acdCfmMepStatsTxExrPdu, acdCfmHistResultOneWayDvIntervalEnd=acdCfmHistResultOneWayDvIntervalEnd, acdCfmSlmCfgRemoteMepId=acdCfmSlmCfgRemoteMepId, acdCfmMepStatsTxCsfPdu=acdCfmMepStatsTxCsfPdu, acdCfmPacketLoss=acdCfmPacketLoss, acdCfmMepStatsRxTstPdu=acdCfmMepStatsRxTstPdu, acdCfmResultPktLossGroup=acdCfmResultPktLossGroup, acdCfmDmCfgOneWayDelayThresh=acdCfmDmCfgOneWayDelayThresh, acdCfmResultTwoWayDelayAlert=acdCfmResultTwoWayDelayAlert, acdCfmMepStatsRxVsrPdu=acdCfmMepStatsRxVsrPdu, acdCfmHistResultTwoWayDelayAvgValue=acdCfmHistResultTwoWayDelayAvgValue, acdCfmResultOneWayDvAvgAlert=acdCfmResultOneWayDvAvgAlert, acdCfmMepStatsRxAisPdu=acdCfmMepStatsRxAisPdu, acdCfmResultOneWayDelayMaxValue=acdCfmResultOneWayDelayMaxValue, acdCfmHistResultOneWayDelayTable=acdCfmHistResultOneWayDelayTable, acdCfmMepStatsTxLbmPdu=acdCfmMepStatsTxLbmPdu, acdCfmCompliances=acdCfmCompliances, acdCfmResultTwoWayDelayValid=acdCfmResultTwoWayDelayValid, acdCfmResultPktLossOverflowLargestGap=acdCfmResultPktLossOverflowLargestGap, acdCfmHistResultPktLossStatus=acdCfmHistResultPktLossStatus, acdCfmHistResultOneWayDelayMinValue=acdCfmHistResultOneWayDelayMinValue, acdCfmResultOneWayDvSamples=acdCfmResultOneWayDvSamples, acdCfmMepStatsTxAisPdu=acdCfmMepStatsTxAisPdu, acdCfmResultTwoWayDelayID=acdCfmResultTwoWayDelayID, acdCfmDmCfgTwoWayDelayMax=acdCfmDmCfgTwoWayDelayMax, acdCfmHistResultTwoWayDelaySamples=acdCfmHistResultTwoWayDelaySamples, acdCfmResultOneWayDvID=acdCfmResultOneWayDvID, acdCfmHistResultPktLossIntervalEnd=acdCfmHistResultPktLossIntervalEnd, acdCfmResultTwoWayDelayTable=acdCfmResultTwoWayDelayTable, acdCfmMepStatsRxLmmPdu=acdCfmMepStatsRxLmmPdu, acdCfmDmCfgGroup=acdCfmDmCfgGroup, acdCfmResultOneWayDelayAvgAlert=acdCfmResultOneWayDelayAvgAlert, acdCfmSlmHistResultNearEndRatio=acdCfmSlmHistResultNearEndRatio, acdCfmHistResultOneWayDvID=acdCfmHistResultOneWayDvID, acdCfmSlmResultNbrGaps=acdCfmSlmResultNbrGaps, acdCfmHistResultPktLossHCNbrLoss=acdCfmHistResultPktLossHCNbrLoss, acdCfmSlmHistResultRemoteRxSlm=acdCfmSlmHistResultRemoteRxSlm, acdCfmMepStatsRxExmPdu=acdCfmMepStatsRxExmPdu, acdCfmMepStatsRxLinearApsPdu=acdCfmMepStatsRxLinearApsPdu, acdCfmPktLossCfgID=acdCfmPktLossCfgID, acdCfmResultPktLossHCSamples=acdCfmResultPktLossHCSamples, acdCfmSlmCfgRefPeriod=acdCfmSlmCfgRefPeriod, acdCfmSlmResultTable=acdCfmSlmResultTable, acdCfmSlmCfgMepIdx=acdCfmSlmCfgMepIdx, acdCfmMepStatsTxCcmPdu=acdCfmMepStatsTxCcmPdu, acdCfmHistResultTwoWayDelayMinValue=acdCfmHistResultTwoWayDelayMinValue, PYSNMP_MODULE_ID=acdCfm, acdCfmDmCfgRefPeriod=acdCfmDmCfgRefPeriod, acdCfmDmCfgTwoWayDelayEnable=acdCfmDmCfgTwoWayDelayEnable, acdCfmSlmHistResultEntry=acdCfmSlmHistResultEntry, acdCfmHistResultPktLossSampleIndex=acdCfmHistResultPktLossSampleIndex, acdCfmResultOneWayDvAvgValue=acdCfmResultOneWayDvAvgValue, acdCfmSlmResultRxSlr=acdCfmSlmResultRxSlr, acdCfmResultPktLossSamples=acdCfmResultPktLossSamples, acdCfmMepID=acdCfmMepID, acdCfmDmCfgOneWayDvMax=acdCfmDmCfgOneWayDvMax, acdCfmSlmResultNearEndRatio=acdCfmSlmResultNearEndRatio, acdCfmHistResultTwoWayDelayStatus=acdCfmHistResultTwoWayDelayStatus, acdCfmHistResultOneWayDelayStatus=acdCfmHistResultOneWayDelayStatus, acdCfmResultPktLossID=acdCfmResultPktLossID, acdCfmSlmResultID=acdCfmSlmResultID, acdCfmSlmResultNearEndNbrLoss=acdCfmSlmResultNearEndNbrLoss, acdCfmHistResultTwoWayDelayMaxValue=acdCfmHistResultTwoWayDelayMaxValue, acdCfmHistResultTwoWayDvIntervalEnd=acdCfmHistResultTwoWayDvIntervalEnd, acdCfmMepStatsRxLbrOooErrors=acdCfmMepStatsRxLbrOooErrors, acdCfmDmCfgTwoWayDelayThresh=acdCfmDmCfgTwoWayDelayThresh, acdCfmHistResultTwoWayDvTable=acdCfmHistResultTwoWayDvTable, acdCfmResultTwoWayDvAlert=acdCfmResultTwoWayDvAlert, acdCfmHistResultTwoWayDelayTable=acdCfmHistResultTwoWayDelayTable, acdCfmMepStatsRxLtrPdu=acdCfmMepStatsRxLtrPdu, acdCfmMepStatsTxLinearApsPdu=acdCfmMepStatsTxLinearApsPdu, acdCfmDmCfgID=acdCfmDmCfgID, acdCfmMepStatsTxMccPdu=acdCfmMepStatsTxMccPdu, acdCfmMepIdx=acdCfmMepIdx, acdCfmSlmHistResultLargestGap=acdCfmSlmHistResultLargestGap, acdCfmMepStatsRxLckPdu=acdCfmMepStatsRxLckPdu, acdCfmMepStatsTxTable=acdCfmMepStatsTxTable, acdCfmDmCfgInterval=acdCfmDmCfgInterval, acdCfmResultTwoWayDelayIntervalStart=acdCfmResultTwoWayDelayIntervalStart, acdCfmHistResultTwoWayDvGroup=acdCfmHistResultTwoWayDvGroup, acdCfmHistResultPktLossRatio=acdCfmHistResultPktLossRatio, acdCfmResultTwoWayDelayInstValue=acdCfmResultTwoWayDelayInstValue, acdCfmSlmHistResultID=acdCfmSlmHistResultID, acdCfmConformance=acdCfmConformance, acdCfmResultTwoWayDvTable=acdCfmResultTwoWayDvTable, acdCfmHistResultPktLossNbrGaps=acdCfmHistResultPktLossNbrGaps, acdCfmResultPktLossHCLargestGap=acdCfmResultPktLossHCLargestGap, acdCfmMep=acdCfmMep, acdCfmMepStatsTxLbrPdu=acdCfmMepStatsTxLbrPdu, acdCfmResultOneWayDelayID=acdCfmResultOneWayDelayID, acdCfmResultPktLossEntry=acdCfmResultPktLossEntry, acdCfmHistResultPktLossLargestGap=acdCfmHistResultPktLossLargestGap, acdCfmHistResultOneWayDvEntry=acdCfmHistResultOneWayDvEntry, acdCfmResultOneWayDvValid=acdCfmResultOneWayDvValid, acdCfmSlmResultFarEndRatio=acdCfmSlmResultFarEndRatio, acdCfmMepStatsRxCcmPdu=acdCfmMepStatsRxCcmPdu, acdCfmMepDmStatsTxDmrPdu=acdCfmMepDmStatsTxDmrPdu, acdCfmMepDmStatsRxDmrPdu=acdCfmMepDmStatsRxDmrPdu, acdCfmResultOneWayDvGroup=acdCfmResultOneWayDvGroup, acdCfmResultPktLossHCNbrGaps=acdCfmResultPktLossHCNbrGaps, acdCfmStackEntry=acdCfmStackEntry, acdCfm=acdCfm, acdCfmSlmCfgGroup=acdCfmSlmCfgGroup)
mibBuilder.exportSymbols("ACD-CFM-MIB", acdCfmHistResultOneWayDelayID=acdCfmHistResultOneWayDelayID, acdCfmDmCfgTwoWayDvThresh=acdCfmDmCfgTwoWayDvThresh, acdCfmResultOneWayDelayAvgValue=acdCfmResultOneWayDelayAvgValue, acdCfmMepStatsRxLbmPdu=acdCfmMepStatsRxLbmPdu, acdCfmSlmCfgEntry=acdCfmSlmCfgEntry, acdCfmResultOneWayDelayInstValue=acdCfmResultOneWayDelayInstValue, acdCfmHistResultOneWayDelayEntry=acdCfmHistResultOneWayDelayEntry, acdCfmResultPktLossNbrGaps=acdCfmResultPktLossNbrGaps, acdCfmResultTwoWayDvMinValue=acdCfmResultTwoWayDvMinValue, acdCfmMepStatsRxDmmPdu=acdCfmMepStatsRxDmmPdu, acdCfmMepStatsTxSlmPdu=acdCfmMepStatsTxSlmPdu, acdCfmResultTwoWayDelayMaxValue=acdCfmResultTwoWayDelayMaxValue, acdCfmMepStatsTxLtrPdu=acdCfmMepStatsTxLtrPdu, acdCfmSlmResultRemoteRxSlm=acdCfmSlmResultRemoteRxSlm, acdCfmResultPktLossOverflowNbrGaps=acdCfmResultPktLossOverflowNbrGaps, acdCfmMaIdx=acdCfmMaIdx, acdCfmPktLossCfgGroup=acdCfmPktLossCfgGroup, acdCfmHistResultTwoWayDelaySampleIndex=acdCfmHistResultTwoWayDelaySampleIndex, acdCfmSlmHistResultPeriodIndex=acdCfmSlmHistResultPeriodIndex, acdCfmHistResultOneWayDvGroup=acdCfmHistResultOneWayDvGroup, acdCfmMepStatsRxRingApsPdu=acdCfmMepStatsRxRingApsPdu, acdCfmResultTwoWayDvInstValue=acdCfmResultTwoWayDvInstValue, acdCfmMepStatsRxGroup=acdCfmMepStatsRxGroup, acdCfmMepStatsTxLckPdu=acdCfmMepStatsTxLckPdu, acdCfmHistResultOneWayDelayAvgValue=acdCfmHistResultOneWayDelayAvgValue, acdCfmHistResultOneWayDelayIntervalEnd=acdCfmHistResultOneWayDelayIntervalEnd, acdCfmResultTwoWayDelayAvgValue=acdCfmResultTwoWayDelayAvgValue, acdCfmHistResultOneWayDelayMaxValue=acdCfmHistResultOneWayDelayMaxValue, acdCfmHistResultPktLossSamples=acdCfmHistResultPktLossSamples, acdCfmDmCfgTwoWayAvgDvThresh=acdCfmDmCfgTwoWayAvgDvThresh, acdCfmMepDmStatsTxDmmPdu=acdCfmMepDmStatsTxDmmPdu, acdCfmHistResultTwoWayDelayGroup=acdCfmHistResultTwoWayDelayGroup, acdCfmHistResultPktLossOverflowSamples=acdCfmHistResultPktLossOverflowSamples, acdCfmDmCfgEnable=acdCfmDmCfgEnable, acdCfmMepStatsTxRingApsPdu=acdCfmMepStatsTxRingApsPdu, acdCfmResultOneWayDelayEntry=acdCfmResultOneWayDelayEntry, acdCfmMepStatsTxGroup=acdCfmMepStatsTxGroup, acdCfmHistResultTwoWayDelayEntry=acdCfmHistResultTwoWayDelayEntry, acdCfmDmCfgOneWayDelayMax=acdCfmDmCfgOneWayDelayMax, acdCfmResultOneWayDelayGroup=acdCfmResultOneWayDelayGroup, acdCfmHistResultOneWayDvDuration=acdCfmHistResultOneWayDvDuration, acdCfmSlmHistResultRxSlr=acdCfmSlmHistResultRxSlr, acdCfmResultTwoWayDelayAvgAlert=acdCfmResultTwoWayDelayAvgAlert, acdCfmMepSlmStatsGroup=acdCfmMepSlmStatsGroup, acdCfmResultOneWayDelayPeriodIndex=acdCfmResultOneWayDelayPeriodIndex, acdCfmHistResultPktLossDuration=acdCfmHistResultPktLossDuration, acdCfmResultPktLossIntervalStart=acdCfmResultPktLossIntervalStart, acdCfmMepStatsRxTable=acdCfmMepStatsRxTable, acdCfmMdIdx=acdCfmMdIdx, acdCfmHistResultOneWayDelaySampleIndex=acdCfmHistResultOneWayDelaySampleIndex, acdCfmResultOneWayDvThreshExc=acdCfmResultOneWayDvThreshExc, acdCfmResultOneWayDelayValid=acdCfmResultOneWayDelayValid, acdCfmSlmHistResultIntervalEnd=acdCfmSlmHistResultIntervalEnd, acdCfmResultOneWayDvPeriodIndex=acdCfmResultOneWayDvPeriodIndex, acdCfmSlmResultFarEndNbrLoss=acdCfmSlmResultFarEndNbrLoss, acdCfmMepStatsTxTstPdu=acdCfmMepStatsTxTstPdu, acdCfmResultOneWayDelayIntervalStart=acdCfmResultOneWayDelayIntervalStart, acdCfmCompliance=acdCfmCompliance, acdCfmResultPktLossValid=acdCfmResultPktLossValid, acdCfmDelayMeasurement=acdCfmDelayMeasurement, acdCfmHistResultTwoWayDvSampleIndex=acdCfmHistResultTwoWayDvSampleIndex, acdCfmSlmResultValid=acdCfmSlmResultValid, acdCfmMepDmStatsEntry=acdCfmMepDmStatsEntry, acdCfmMepStatsRxLbrPdu=acdCfmMepStatsRxLbrPdu, acdCfmHistResultOneWayDelayGroup=acdCfmHistResultOneWayDelayGroup, acdCfmMepStatsTxVsmPdu=acdCfmMepStatsTxVsmPdu, acdCfmResultOneWayDvMinValue=acdCfmResultOneWayDvMinValue, acdCfmSlmCfgTable=acdCfmSlmCfgTable, acdCfmMepStatsRxDmrPdu=acdCfmMepStatsRxDmrPdu, acdCfmMepStatsTx1dmPdu=acdCfmMepStatsTx1dmPdu, acdCfmHistResultTwoWayDelayDuration=acdCfmHistResultTwoWayDelayDuration, acdCfmResultTwoWayDelayPeriodIndex=acdCfmResultTwoWayDelayPeriodIndex, acdCfmResultTwoWayDelayGroup=acdCfmResultTwoWayDelayGroup, acdCfmResultOneWayDvIntervalStart=acdCfmResultOneWayDvIntervalStart, acdCfmMepStatsRx1dmPdu=acdCfmMepStatsRx1dmPdu, acdCfmMepStatsRxLtrUnexpectedPdu=acdCfmMepStatsRxLtrUnexpectedPdu)
