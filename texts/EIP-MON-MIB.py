#
# PySNMP MIB module EIP-MON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/efficientip/EIP-MON-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 09:29:31 2024
# On host fv-az1146-179 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, ModuleIdentity, ObjectIdentity, NotificationType, Counter64, Unsigned32, iso, MibIdentifier, Bits, IpAddress, Integer32, TimeTicks, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Counter64", "Unsigned32", "iso", "MibIdentifier", "Bits", "IpAddress", "Integer32", "TimeTicks", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
eip = ModuleIdentity((1, 3, 6, 1, 4, 1, 2440))
eip.setRevisions(('2016-09-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eip.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: eip.setLastUpdated('201609210000Z')
if mibBuilder.loadTexts: eip.setOrganization('EfficientIP')
if mibBuilder.loadTexts: eip.setContactInfo('support@efficientip.com')
if mibBuilder.loadTexts: eip.setDescription('EfficientIP SOLIDserver monitoring MIB')
products = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1))
eipHw = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 14))
eipHwAppliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 14, 1))
eipHwHdd = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 14, 2))
eipHwTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 14, 3))
eipHwFan = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 14, 4))
eipHwPsu = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 14, 5))
eipHwPower = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 14, 6))
eipHwRaid = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 14, 7))
eipHwCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 14, 8))
eipHwMem = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 14, 9))
eipHwChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 14, 10))
eipNet = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 15))
eipNetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 15, 1))
eipNetCarp = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 15, 1, 1))
eipNetCarpIf = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 15, 1, 1, 1))
eipNetLagg = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 15, 1, 2))
eipNetStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2))
eipNetStatHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 1))
eipNetStatDns = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 2))
eipNetStatDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 3))
eipNetStatDb = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 4))
eipNetStatSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 5))
eipSvc = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 16))
eipSvcSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 16, 1))
eipSvcSsh = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 16, 2))
eipSvcApache = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 16, 3))
eipSvcIpmServer = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 16, 4))
eipSvcDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 16, 5))
eipSvcDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 16, 6))
eipSvcDhcpMs = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 16, 7))
eipSvcDns = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 16, 8))
eipSvcGuardian = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 16, 9))
eipSvcQuagga = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 16, 10))
eipSvcNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 16, 11))
eipSvcTftp = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 16, 12))
eipSvcSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 16, 13))
eipSvcSendmail = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 16, 14))
eipSds = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 17))
eipSdsVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 17, 1))
eipSdsMember = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 17, 2))
eipCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2440, 1, 1000))
eipMainCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2440, 1, 1000, 1)).setObjects(("EIP-MON-MIB", "eipNetStatIn"), ("EIP-MON-MIB", "eipNetStatOut"), ("EIP-MON-MIB", "eipSvcStatus"), ("EIP-MON-MIB", "eipSvcCpu"), ("EIP-MON-MIB", "eipSvcMem"), ("EIP-MON-MIB", "eipSvcDiskIoRead"), ("EIP-MON-MIB", "eipSvcDiskIoWrite"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eipMainCompliance = eipMainCompliance.setStatus('current')
if mibBuilder.loadTexts: eipMainCompliance.setDescription('The compliance statement for SNMPv2 entities\n            which implement the EIP-MON-MIB.')
eipHwApplianceModel = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwApplianceModel.setStatus('current')
if mibBuilder.loadTexts: eipHwApplianceModel.setDescription('Appliance model name.')
eipHwApplianceSerial = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwApplianceSerial.setStatus('current')
if mibBuilder.loadTexts: eipHwApplianceSerial.setDescription('Appliance serial number.')
eipHwApplianceBiosVersion = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwApplianceBiosVersion.setStatus('current')
if mibBuilder.loadTexts: eipHwApplianceBiosVersion.setDescription('Appliance BIOS version.')
eipHwHddFreeRoot = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 2, 1), Counter64()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwHddFreeRoot.setStatus('current')
if mibBuilder.loadTexts: eipHwHddFreeRoot.setDescription('Free disk space for / mount point (Kbytes).')
eipHwHddUsedRootPercent = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 2, 2), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwHddUsedRootPercent.setStatus('current')
if mibBuilder.loadTexts: eipHwHddUsedRootPercent.setDescription('Percentage of used disk space for / mount point.')
eipHwHddFreeTmp = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 2, 3), Counter64()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwHddFreeTmp.setStatus('current')
if mibBuilder.loadTexts: eipHwHddFreeTmp.setDescription('Free disk space for /tmp mount point (Kbytes).')
eipHwHddUsedTmpPercent = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 2, 4), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwHddUsedTmpPercent.setStatus('current')
if mibBuilder.loadTexts: eipHwHddUsedTmpPercent.setDescription('Percentage of used disk space for /tmp mount point.')
eipHwHddFreeVar = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 2, 5), Counter64()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwHddFreeVar.setStatus('current')
if mibBuilder.loadTexts: eipHwHddFreeVar.setDescription('Free disk space for /var mount point (Kbytes).')
eipHwHddUsedVarPercent = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 2, 6), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwHddUsedVarPercent.setStatus('current')
if mibBuilder.loadTexts: eipHwHddUsedVarPercent.setDescription('Percentage of used disk space for /var mount point.')
eipHwHddFreeData1 = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 2, 7), Counter64()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwHddFreeData1.setStatus('current')
if mibBuilder.loadTexts: eipHwHddFreeData1.setDescription('Free disk space for /data1 mount point (Kbytes).')
eipHwHddUsedData1Percent = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 2, 8), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwHddUsedData1Percent.setStatus('current')
if mibBuilder.loadTexts: eipHwHddUsedData1Percent.setDescription('Percentage of used disk space for /data1 mount point.')
eipHwHddUsedSwap = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 2, 50), Counter64()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwHddUsedSwap.setStatus('current')
if mibBuilder.loadTexts: eipHwHddUsedSwap.setDescription('Used swap space (Kbytes).')
eipHwHddUsedSwapPercent = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 2, 51), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwHddUsedSwapPercent.setStatus('current')
if mibBuilder.loadTexts: eipHwHddUsedSwapPercent.setDescription('Percentage of used swap space (%).')
eipHwHddIoLoad = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 2, 100), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwHddIoLoad.setStatus('current')
if mibBuilder.loadTexts: eipHwHddIoLoad.setDescription('Global disk I/O load (%).')
eipHwTempCpu = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 3, 1), Integer32()).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwTempCpu.setStatus('current')
if mibBuilder.loadTexts: eipHwTempCpu.setDescription('CPU temperature (degrees C).')
eipHwTempCpuCoreMax = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 3, 2), Integer32()).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwTempCpuCoreMax.setStatus('current')
if mibBuilder.loadTexts: eipHwTempCpuCoreMax.setDescription('Current maximum CPU core temperature (degrees C).')
eipHwTempCpuCoreMin = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 3, 3), Integer32()).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwTempCpuCoreMin.setStatus('current')
if mibBuilder.loadTexts: eipHwTempCpuCoreMin.setDescription('Current minimum CPU core temperature (degrees C).')
eipHwTempInlet = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 3, 4), Integer32()).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwTempInlet.setStatus('current')
if mibBuilder.loadTexts: eipHwTempInlet.setDescription('Inlet temperature (degrees C).')
eipHwTempBaseboard = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 3, 5), Integer32()).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwTempBaseboard.setStatus('current')
if mibBuilder.loadTexts: eipHwTempBaseboard.setDescription('Baseboard temperature (degrees C).')
eipHwTempRaidController = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 3, 6), Integer32()).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwTempRaidController.setStatus('current')
if mibBuilder.loadTexts: eipHwTempRaidController.setDescription('RAID controller temperature (degrees C).')
eipHwFan1Speed = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 4, 1), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwFan1Speed.setStatus('current')
if mibBuilder.loadTexts: eipHwFan1Speed.setDescription('FAN #1 Speed (RPM).')
eipHwFan2Speed = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 4, 2), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwFan2Speed.setStatus('current')
if mibBuilder.loadTexts: eipHwFan2Speed.setDescription('FAN #2 Speed (RPM).')
eipHwFan3Speed = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 4, 3), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwFan3Speed.setStatus('current')
if mibBuilder.loadTexts: eipHwFan3Speed.setDescription('FAN #3 Speed (RPM).')
eipHwFan4Speed = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 4, 4), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwFan4Speed.setStatus('current')
if mibBuilder.loadTexts: eipHwFan4Speed.setDescription('FAN #4 Speed (RPM).')
eipHwFan5Speed = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 4, 5), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwFan5Speed.setStatus('current')
if mibBuilder.loadTexts: eipHwFan5Speed.setDescription('FAN #5 Speed (RPM).')
eipHwFan6Speed = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 4, 6), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwFan6Speed.setStatus('current')
if mibBuilder.loadTexts: eipHwFan6Speed.setDescription('FAN #6 Speed (RPM).')
eipHwFan7Speed = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 4, 7), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwFan7Speed.setStatus('current')
if mibBuilder.loadTexts: eipHwFan7Speed.setDescription('FAN #7 Speed (RPM).')
eipHwFan8Speed = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 4, 8), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwFan8Speed.setStatus('current')
if mibBuilder.loadTexts: eipHwFan8Speed.setDescription('FAN #8 Speed (RPM).')
eipHwPsuRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwPsuRedundancy.setStatus('current')
if mibBuilder.loadTexts: eipHwPsuRedundancy.setDescription('Power supply redundancy status.\n\t\t0 : no redundancy available\n\t\t1 : fully redundant\n\t\t2 : redundancy lost')
eipHwPsu1Status = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("ok", 1), ("present", 2), ("notpresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwPsu1Status.setStatus('current')
if mibBuilder.loadTexts: eipHwPsu1Status.setDescription('Power supply #1 status.\n\t\t0 : no power supply available\n\t\t1 : AC connected\n\t\t2 : power supply is present but unplugged\n\t\t3 : power supply is not present')
eipHwPsu2Status = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("ok", 1), ("present", 2), ("notpresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwPsu2Status.setStatus('current')
if mibBuilder.loadTexts: eipHwPsu2Status.setDescription('Power supply #2 status.\n\t\t0 : no power supply available\n\t\t1 : AC connected\n\t\t2 : power supply is present but not connected\n\t\t3 : power supply is not present')
eipHwPowerInstant = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 6, 1), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwPowerInstant.setStatus('current')
if mibBuilder.loadTexts: eipHwPowerInstant.setDescription('Instantaneous power reading (W).')
eipHwPowerCumulative = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 6, 2), Integer32()).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwPowerCumulative.setStatus('current')
if mibBuilder.loadTexts: eipHwPowerCumulative.setDescription('Cumulative energy consumption (kWh).')
eipHwPowerPeak = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 6, 3), Integer32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwPowerPeak.setStatus('current')
if mibBuilder.loadTexts: eipHwPowerPeak.setDescription('System peak power (W).')
eipHwPowerPeakAmperage = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 6, 4), Integer32()).setUnits('mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwPowerPeakAmperage.setStatus('current')
if mibBuilder.loadTexts: eipHwPowerPeakAmperage.setDescription('System peak amperage (mA).')
eipHwRaidController = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 7, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwRaidController.setStatus('current')
if mibBuilder.loadTexts: eipHwRaidController.setDescription('Raid controller name.')
eipHwRaidStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("ok", 1), ("degraded", 2), ("offline", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwRaidStatus.setStatus('current')
if mibBuilder.loadTexts: eipHwRaidStatus.setDescription('Raid controller status.\n\t\t0 : RAID is not enabled\n\t\t1 : RAID is active\n\t\t2 : RAID is degraded\n\t\t3 : RAID is offline')
eipHwRaidDisks = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwRaidDisks.setStatus('current')
if mibBuilder.loadTexts: eipHwRaidDisks.setDescription('Number of disks.')
eipHwRaidDisksCritical = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwRaidDisksCritical.setStatus('current')
if mibBuilder.loadTexts: eipHwRaidDisksCritical.setDescription('Number of critical disks.')
eipHwRaidDisksFailed = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwRaidDisksFailed.setStatus('current')
if mibBuilder.loadTexts: eipHwRaidDisksFailed.setDescription('Number of failed disks.')
eipHwRaidBbuStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("ok", 1), ("degraded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwRaidBbuStatus.setStatus('current')
if mibBuilder.loadTexts: eipHwRaidBbuStatus.setDescription('Raid backup battery unit status.\n                0 : BBU is not enabled\n                1 : BBU state is optimal\n                2 : BBU state is degraded')
eipHwRaidBbuCharge = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 7, 7), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwRaidBbuCharge.setStatus('current')
if mibBuilder.loadTexts: eipHwRaidBbuCharge.setDescription('Raid backup battery unit relative state of charge (%).')
eipHwCpuLoadInt = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwCpuLoadInt.setStatus('current')
if mibBuilder.loadTexts: eipHwCpuLoadInt.setDescription('The 1,5 and 15 minute load averages per core as an integer.\n                This is computed by taking the floating point\n                loadaverage value and multiplying by 100, then\n                converting the value to an integer.')
eipHwCpuCoreNumber = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwCpuCoreNumber.setStatus('current')
if mibBuilder.loadTexts: eipHwCpuCoreNumber.setDescription('The number of CPU cores.')
eipHwMemUsed = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 9, 1), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwMemUsed.setStatus('current')
if mibBuilder.loadTexts: eipHwMemUsed.setDescription('The percentage of used physical memory.')
eipHwChassisIntrusion = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 14, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipHwChassisIntrusion.setStatus('current')
if mibBuilder.loadTexts: eipHwChassisIntrusion.setDescription('The chassis intrusion detection status.\n\t\t0 : no chassis intrusion information\n\t\t1 : chassis intrusion alarm is inactive\n\t\t2 : chassis intrusion alarm is active')
eipNetStatIn = ObjectGroup((1, 3, 6, 1, 4, 1, 2440, 1, 15, 201)).setObjects(("EIP-MON-MIB", "eipNetStatHttpInOctets"), ("EIP-MON-MIB", "eipNetStatHttpInPkts"), ("EIP-MON-MIB", "eipNetStatDnsInOctets"), ("EIP-MON-MIB", "eipNetStatDnsInPkts"), ("EIP-MON-MIB", "eipNetStatDhcpInOctets"), ("EIP-MON-MIB", "eipNetStatDhcpInPkts"), ("EIP-MON-MIB", "eipNetStatDbInOctets"), ("EIP-MON-MIB", "eipNetStatDbInPkts"), ("EIP-MON-MIB", "eipNetStatSnmpInOctets"), ("EIP-MON-MIB", "eipNetStatSnmpInPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eipNetStatIn = eipNetStatIn.setStatus('current')
if mibBuilder.loadTexts: eipNetStatIn.setDescription('A collection of objects providing\n            network traffic info per protocol (incoming bytes or packets).')
eipNetStatOut = ObjectGroup((1, 3, 6, 1, 4, 1, 2440, 1, 15, 202)).setObjects(("EIP-MON-MIB", "eipNetStatHttpOutOctets"), ("EIP-MON-MIB", "eipNetStatHttpOutPkts"), ("EIP-MON-MIB", "eipNetStatDnsOutOctets"), ("EIP-MON-MIB", "eipNetStatDnsOutPkts"), ("EIP-MON-MIB", "eipNetStatDhcpOutOctets"), ("EIP-MON-MIB", "eipNetStatDhcpOutPkts"), ("EIP-MON-MIB", "eipNetStatDbOutOctets"), ("EIP-MON-MIB", "eipNetStatDbOutPkts"), ("EIP-MON-MIB", "eipNetStatSnmpOutPkts"), ("EIP-MON-MIB", "eipNetStatSnmpOutPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eipNetStatOut = eipNetStatOut.setStatus('current')
if mibBuilder.loadTexts: eipNetStatOut.setDescription('A collection of objects providing\n            network traffic info per protocol (outgoing bytes or packets).')
eipNetCarpIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetCarpIfNumber.setStatus('current')
if mibBuilder.loadTexts: eipNetCarpIfNumber.setDescription('The number of CARP interfaces present on this system.')
eipNetCarpIfTable = MibTable((1, 3, 6, 1, 4, 1, 2440, 1, 15, 1, 1, 1, 2), )
if mibBuilder.loadTexts: eipNetCarpIfTable.setStatus('current')
if mibBuilder.loadTexts: eipNetCarpIfTable.setDescription('A list of CARP interface entries.')
eipNetCarpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2440, 1, 15, 1, 1, 1, 2, 1), ).setIndexNames((0, "EIP-MON-MIB", "eipNetCarpIfIndex"))
if mibBuilder.loadTexts: eipNetCarpIfEntry.setStatus('current')
if mibBuilder.loadTexts: eipNetCarpIfEntry.setDescription('Each entry contains one interface CARP.')
eipNetCarpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2440, 1, 15, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetCarpIfIndex.setStatus('current')
if mibBuilder.loadTexts: eipNetCarpIfIndex.setDescription('A unique value, greater than zero, for each CARP interface.')
eipNetCarpIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2440, 1, 15, 1, 1, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetCarpIfDescr.setStatus('current')
if mibBuilder.loadTexts: eipNetCarpIfDescr.setDescription('The name of the CARP interface.')
eipNetCarpIfVhid = MibTableColumn((1, 3, 6, 1, 4, 1, 2440, 1, 15, 1, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetCarpIfVhid.setStatus('current')
if mibBuilder.loadTexts: eipNetCarpIfVhid.setDescription('The Virtual HostID of the CARP interface.')
eipNetCarpIfDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2440, 1, 15, 1, 1, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetCarpIfDev.setStatus('current')
if mibBuilder.loadTexts: eipNetCarpIfDev.setDescription('The parent interface that the CARP interface is bound to.')
eipNetCarpIfAdvbase = MibTableColumn((1, 3, 6, 1, 4, 1, 2440, 1, 15, 1, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetCarpIfAdvbase.setStatus('current')
if mibBuilder.loadTexts: eipNetCarpIfAdvbase.setDescription('The advbase value of the CARP interface.')
eipNetCarpIfAdvskew = MibTableColumn((1, 3, 6, 1, 4, 1, 2440, 1, 15, 1, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetCarpIfAdvskew.setStatus('current')
if mibBuilder.loadTexts: eipNetCarpIfAdvskew.setDescription('The advskew value of the CARP interface.')
eipNetCarpIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 2440, 1, 15, 1, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("init", 0), ("backup", 1), ("master", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetCarpIfState.setStatus('current')
if mibBuilder.loadTexts: eipNetCarpIfState.setDescription('Indicates the operational state of the CARP interface.')
eipNetLaggStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetLaggStatus.setStatus('current')
if mibBuilder.loadTexts: eipNetLaggStatus.setDescription('Global lagg status.\n\t\t0 : no lagg configured\n\t\t1 : all lagg interfaces are UP\n\t\t2 : at least one lagg interface is DOWN')
eipNetStatHttpInOctets = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 1, 1), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatHttpInOctets.setStatus('current')
if mibBuilder.loadTexts: eipNetStatHttpInOctets.setDescription('Incoming HTTP traffic (bytes).')
eipNetStatHttpInPkts = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatHttpInPkts.setStatus('current')
if mibBuilder.loadTexts: eipNetStatHttpInPkts.setDescription('Incoming HTTP traffic (packets).')
eipNetStatHttpOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 1, 3), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatHttpOutOctets.setStatus('current')
if mibBuilder.loadTexts: eipNetStatHttpOutOctets.setDescription('Outgoing HTTP traffic (bytes).')
eipNetStatHttpOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatHttpOutPkts.setStatus('current')
if mibBuilder.loadTexts: eipNetStatHttpOutPkts.setDescription('Outgoing HTTP traffic (packets).')
eipNetStatDnsInOctets = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 2, 1), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatDnsInOctets.setStatus('current')
if mibBuilder.loadTexts: eipNetStatDnsInOctets.setDescription('Incoming DNS traffic (bytes).')
eipNetStatDnsInPkts = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatDnsInPkts.setStatus('current')
if mibBuilder.loadTexts: eipNetStatDnsInPkts.setDescription('Incoming DNS traffic (packets).')
eipNetStatDnsOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 2, 3), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatDnsOutOctets.setStatus('current')
if mibBuilder.loadTexts: eipNetStatDnsOutOctets.setDescription('Outgoing DNS traffic (bytes).')
eipNetStatDnsOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatDnsOutPkts.setStatus('current')
if mibBuilder.loadTexts: eipNetStatDnsOutPkts.setDescription('Outgoing DNS traffic (packets).')
eipNetStatDhcpInOctets = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 3, 1), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatDhcpInOctets.setStatus('current')
if mibBuilder.loadTexts: eipNetStatDhcpInOctets.setDescription('Incoming DHCP traffic (bytes).')
eipNetStatDhcpInPkts = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatDhcpInPkts.setStatus('current')
if mibBuilder.loadTexts: eipNetStatDhcpInPkts.setDescription('Incoming DHCP traffic (packets).')
eipNetStatDhcpOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 3, 3), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatDhcpOutOctets.setStatus('current')
if mibBuilder.loadTexts: eipNetStatDhcpOutOctets.setDescription('Outgoing DHCP traffic (bytes).')
eipNetStatDhcpOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatDhcpOutPkts.setStatus('current')
if mibBuilder.loadTexts: eipNetStatDhcpOutPkts.setDescription('Outgoing DHCP traffic (packets).')
eipNetStatDbInOctets = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 4, 1), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatDbInOctets.setStatus('current')
if mibBuilder.loadTexts: eipNetStatDbInOctets.setDescription('Incoming database replication traffic (bytes).')
eipNetStatDbInPkts = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatDbInPkts.setStatus('current')
if mibBuilder.loadTexts: eipNetStatDbInPkts.setDescription('Incoming database replication traffic (packets).')
eipNetStatDbOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 4, 3), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatDbOutOctets.setStatus('current')
if mibBuilder.loadTexts: eipNetStatDbOutOctets.setDescription('Outgoing database replication traffic (bytes).')
eipNetStatDbOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatDbOutPkts.setStatus('current')
if mibBuilder.loadTexts: eipNetStatDbOutPkts.setDescription('Outgoing database replication traffic (packets).')
eipNetStatSnmpInOctets = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 5, 1), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatSnmpInOctets.setStatus('current')
if mibBuilder.loadTexts: eipNetStatSnmpInOctets.setDescription('Incoming SNMP traffic (bytes).')
eipNetStatSnmpInPkts = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 5, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatSnmpInPkts.setStatus('current')
if mibBuilder.loadTexts: eipNetStatSnmpInPkts.setDescription('Incoming SNMP traffic (packets).')
eipNetStatSnmpOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 5, 3), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatSnmpOutOctets.setStatus('current')
if mibBuilder.loadTexts: eipNetStatSnmpOutOctets.setDescription('Outgoing SNMP traffic (bytes).')
eipNetStatSnmpOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 15, 2, 5, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipNetStatSnmpOutPkts.setStatus('current')
if mibBuilder.loadTexts: eipNetStatSnmpOutPkts.setDescription('Outgoing SNMP traffic (packets).')
eipSvcStatus = ObjectGroup((1, 3, 6, 1, 4, 1, 2440, 1, 16, 201)).setObjects(("EIP-MON-MIB", "eipSvcSyslogStatus"), ("EIP-MON-MIB", "eipSvcSshStatus"), ("EIP-MON-MIB", "eipSvcApacheStatus"), ("EIP-MON-MIB", "eipSvcIpmServerStatus"), ("EIP-MON-MIB", "eipSvcDatabaseStatus"), ("EIP-MON-MIB", "eipSvcDhcpStatus"), ("EIP-MON-MIB", "eipSvcDhcpMsStatus"), ("EIP-MON-MIB", "eipSvcDnsStatus"), ("EIP-MON-MIB", "eipSvcGuardianStatus"), ("EIP-MON-MIB", "eipSvcQuaggaStatus"), ("EIP-MON-MIB", "eipSvcNtpStatus"), ("EIP-MON-MIB", "eipSvcTftpStatus"), ("EIP-MON-MIB", "eipSvcSnmpStatus"), ("EIP-MON-MIB", "eipSvcSendmailStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eipSvcStatus = eipSvcStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcStatus.setDescription('A collection of objects providing status info per service.\n            0 : service is disabled\n            1 : service is running\n            2 : service is misconfigured (running but disabled)\n            3 : service execution failed (enabled but not running)')
eipSvcCpu = ObjectGroup((1, 3, 6, 1, 4, 1, 2440, 1, 16, 202)).setObjects(("EIP-MON-MIB", "eipSvcSyslogCpu"), ("EIP-MON-MIB", "eipSvcSshCpu"), ("EIP-MON-MIB", "eipSvcApacheCpu"), ("EIP-MON-MIB", "eipSvcIpmServerCpu"), ("EIP-MON-MIB", "eipSvcDatabaseCpu"), ("EIP-MON-MIB", "eipSvcDhcpCpu"), ("EIP-MON-MIB", "eipSvcDhcpMsCpu"), ("EIP-MON-MIB", "eipSvcDnsCpu"), ("EIP-MON-MIB", "eipSvcGuardianCpu"), ("EIP-MON-MIB", "eipSvcQuaggaCpu"), ("EIP-MON-MIB", "eipSvcNtpCpu"), ("EIP-MON-MIB", "eipSvcTftpCpu"), ("EIP-MON-MIB", "eipSvcSnmpCpu"), ("EIP-MON-MIB", "eipSvcSendmailCpu"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eipSvcCpu = eipSvcCpu.setStatus('current')
if mibBuilder.loadTexts: eipSvcCpu.setDescription('A collection of objects providing\n            CPU usage per service (%).')
eipSvcMem = ObjectGroup((1, 3, 6, 1, 4, 1, 2440, 1, 16, 203)).setObjects(("EIP-MON-MIB", "eipSvcSyslogMem"), ("EIP-MON-MIB", "eipSvcSshMem"), ("EIP-MON-MIB", "eipSvcApacheMem"), ("EIP-MON-MIB", "eipSvcIpmServerMem"), ("EIP-MON-MIB", "eipSvcDatabaseMem"), ("EIP-MON-MIB", "eipSvcDhcpMem"), ("EIP-MON-MIB", "eipSvcDhcpMsMem"), ("EIP-MON-MIB", "eipSvcDnsMem"), ("EIP-MON-MIB", "eipSvcGuardianMem"), ("EIP-MON-MIB", "eipSvcQuaggaMem"), ("EIP-MON-MIB", "eipSvcNtpMem"), ("EIP-MON-MIB", "eipSvcTftpMem"), ("EIP-MON-MIB", "eipSvcSnmpMem"), ("EIP-MON-MIB", "eipSvcSendmailMem"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eipSvcMem = eipSvcMem.setStatus('current')
if mibBuilder.loadTexts: eipSvcMem.setDescription('A collection of objects providing\n            memory usage info per service (Kbytes).')
eipSvcDiskIoRead = ObjectGroup((1, 3, 6, 1, 4, 1, 2440, 1, 16, 204)).setObjects(("EIP-MON-MIB", "eipSvcSyslogDiskIoRead"), ("EIP-MON-MIB", "eipSvcSshDiskIoRead"), ("EIP-MON-MIB", "eipSvcApacheDiskIoRead"), ("EIP-MON-MIB", "eipSvcIpmServerDiskIoRead"), ("EIP-MON-MIB", "eipSvcDatabaseDiskIoRead"), ("EIP-MON-MIB", "eipSvcDhcpDiskIoRead"), ("EIP-MON-MIB", "eipSvcDhcpMsDiskIoRead"), ("EIP-MON-MIB", "eipSvcDnsDiskIoRead"), ("EIP-MON-MIB", "eipSvcGuardianDiskIoRead"), ("EIP-MON-MIB", "eipSvcQuaggaDiskIoRead"), ("EIP-MON-MIB", "eipSvcNtpDiskIoRead"), ("EIP-MON-MIB", "eipSvcTftpDiskIoRead"), ("EIP-MON-MIB", "eipSvcSnmpDiskIoRead"), ("EIP-MON-MIB", "eipSvcSendmailDiskIoRead"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eipSvcDiskIoRead = eipSvcDiskIoRead.setStatus('current')
if mibBuilder.loadTexts: eipSvcDiskIoRead.setDescription('A collection of objects providing\n            disk IO usage info per service (blocks read).')
eipSvcDiskIoWrite = ObjectGroup((1, 3, 6, 1, 4, 1, 2440, 1, 16, 205)).setObjects(("EIP-MON-MIB", "eipSvcSyslogDiskIoWrite"), ("EIP-MON-MIB", "eipSvcSshDiskIoWrite"), ("EIP-MON-MIB", "eipSvcApacheDiskIoWrite"), ("EIP-MON-MIB", "eipSvcIpmServerDiskIoWrite"), ("EIP-MON-MIB", "eipSvcDatabaseDiskIoWrite"), ("EIP-MON-MIB", "eipSvcDhcpDiskIoWrite"), ("EIP-MON-MIB", "eipSvcDhcpMsDiskIoWrite"), ("EIP-MON-MIB", "eipSvcDnsDiskIoWrite"), ("EIP-MON-MIB", "eipSvcGuardianDiskIoWrite"), ("EIP-MON-MIB", "eipSvcQuaggaDiskIoWrite"), ("EIP-MON-MIB", "eipSvcNtpDiskIoWrite"), ("EIP-MON-MIB", "eipSvcTftpDiskIoWrite"), ("EIP-MON-MIB", "eipSvcSnmpDiskIoWrite"), ("EIP-MON-MIB", "eipSvcSendmailDiskIoWrite"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eipSvcDiskIoWrite = eipSvcDiskIoWrite.setStatus('current')
if mibBuilder.loadTexts: eipSvcDiskIoWrite.setDescription('A collection of objects providing\n            disk IO usage info per service (blocks written).')
eipSvcSyslogStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("running", 1), ("misconfigured", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSyslogStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcSyslogStatus.setDescription('Syslog service status.\n                1 : service is running\n                3 : service execution failed (not running)')
eipSvcSyslogCpu = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 1, 2), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSyslogCpu.setStatus('current')
if mibBuilder.loadTexts: eipSvcSyslogCpu.setDescription('Syslog service CPU usage (%).')
eipSvcSyslogMem = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 1, 3), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSyslogMem.setStatus('current')
if mibBuilder.loadTexts: eipSvcSyslogMem.setDescription('Syslog service resident memory usage in Kbytes.')
eipSvcSyslogDiskIoRead = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 1, 4), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSyslogDiskIoRead.setStatus('current')
if mibBuilder.loadTexts: eipSvcSyslogDiskIoRead.setDescription('Syslog service disk IO: blocks read.')
eipSvcSyslogDiskIoWrite = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 1, 5), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSyslogDiskIoWrite.setStatus('current')
if mibBuilder.loadTexts: eipSvcSyslogDiskIoWrite.setDescription('Syslog service disk IO: blocks written.')
eipSvcSshStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("running", 1), ("misconfigured", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSshStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcSshStatus.setDescription('SSH service status.\n                0 : service is disabled\n                1 : service is running\n                2 : service is misconfigured (running but disabled)\n                3 : service execution failed (enabled but not running)')
eipSvcSshCpu = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 2, 2), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSshCpu.setStatus('current')
if mibBuilder.loadTexts: eipSvcSshCpu.setDescription('SSH service CPU usage (%).')
eipSvcSshMem = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 2, 3), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSshMem.setStatus('current')
if mibBuilder.loadTexts: eipSvcSshMem.setDescription('SSH service resident memory usage in Kbytes.')
eipSvcSshDiskIoRead = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 2, 4), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSshDiskIoRead.setStatus('current')
if mibBuilder.loadTexts: eipSvcSshDiskIoRead.setDescription('SSH service disk IO: blocks read.')
eipSvcSshDiskIoWrite = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 2, 5), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSshDiskIoWrite.setStatus('current')
if mibBuilder.loadTexts: eipSvcSshDiskIoWrite.setDescription('SSH service disk IO: blocks written.')
eipSvcSshConnections = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 2, 6), Integer32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSshConnections.setStatus('current')
if mibBuilder.loadTexts: eipSvcSshConnections.setDescription('SSH established connections count.')
eipSvcApacheStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("running", 1), ("misconfigured", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcApacheStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcApacheStatus.setDescription('Apache service status.\n                0 : service is disabled\n                1 : service is running\n                2 : service is misconfigured (running but disabled)\n                3 : service execution failed (enabled but not running)')
eipSvcApacheCpu = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 3, 2), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcApacheCpu.setStatus('current')
if mibBuilder.loadTexts: eipSvcApacheCpu.setDescription('Apache service CPU usage (%).')
eipSvcApacheMem = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 3, 3), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcApacheMem.setStatus('current')
if mibBuilder.loadTexts: eipSvcApacheMem.setDescription('Apache service resident memory usage in Kbytes.')
eipSvcApacheDiskIoRead = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 3, 4), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcApacheDiskIoRead.setStatus('current')
if mibBuilder.loadTexts: eipSvcApacheDiskIoRead.setDescription('Apache service disk IO: blocks read.')
eipSvcApacheDiskIoWrite = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 3, 5), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcApacheDiskIoWrite.setStatus('current')
if mibBuilder.loadTexts: eipSvcApacheDiskIoWrite.setDescription('Apache service disk IO: blocks written.')
eipSvcApacheConnections = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 3, 6), Integer32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcApacheConnections.setStatus('current')
if mibBuilder.loadTexts: eipSvcApacheConnections.setDescription('Apache established connections count.')
eipSvcIpmServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("running", 1), ("misconfigured", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcIpmServerStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcIpmServerStatus.setDescription('IPMServer service status.\n                1 : service is running\n                3 : service execution failed (not running)')
eipSvcIpmServerCpu = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 4, 2), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcIpmServerCpu.setStatus('current')
if mibBuilder.loadTexts: eipSvcIpmServerCpu.setDescription('IPMServer service CPU usage (%).')
eipSvcIpmServerMem = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 4, 3), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcIpmServerMem.setStatus('current')
if mibBuilder.loadTexts: eipSvcIpmServerMem.setDescription('IPMServer service resident memory usage in Kbytes.')
eipSvcIpmServerDiskIoRead = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 4, 4), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcIpmServerDiskIoRead.setStatus('current')
if mibBuilder.loadTexts: eipSvcIpmServerDiskIoRead.setDescription('IPMServer service disk IO: blocks read.')
eipSvcIpmServerDiskIoWrite = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 4, 5), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcIpmServerDiskIoWrite.setStatus('current')
if mibBuilder.loadTexts: eipSvcIpmServerDiskIoWrite.setDescription('IPMServer service disk IO: blocks written.')
eipSvcIpmServerUserSessions = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 4, 6), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcIpmServerUserSessions.setStatus('current')
if mibBuilder.loadTexts: eipSvcIpmServerUserSessions.setDescription('IPMServer service current active user sessions count.')
eipSvcIpmServerThreads = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 4, 7), Counter32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcIpmServerThreads.setStatus('current')
if mibBuilder.loadTexts: eipSvcIpmServerThreads.setDescription('Number of IPMServer service threads created since its start time.')
eipSvcIpmServerDbQueries = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 4, 8), Counter32()).setUnits('queries').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcIpmServerDbQueries.setStatus('current')
if mibBuilder.loadTexts: eipSvcIpmServerDbQueries.setDescription('Number of database queries done by IPMServer since its start time.')
eipSvcDatabaseStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("running", 1), ("misconfigured", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDatabaseStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcDatabaseStatus.setDescription('Database service status.\n                0 : service is disabled\n                1 : service is running\n                2 : service is misconfigured (running but disabled)\n                3 : service execution failed (enabled but not running)')
eipSvcDatabaseCpu = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 5, 2), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDatabaseCpu.setStatus('current')
if mibBuilder.loadTexts: eipSvcDatabaseCpu.setDescription('Database service CPU usage (%).')
eipSvcDatabaseMem = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 5, 3), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDatabaseMem.setStatus('current')
if mibBuilder.loadTexts: eipSvcDatabaseMem.setDescription('Database service resident memory usage in Kbytes.')
eipSvcDatabaseDiskIoRead = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 5, 4), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDatabaseDiskIoRead.setStatus('current')
if mibBuilder.loadTexts: eipSvcDatabaseDiskIoRead.setDescription('Database service disk IO: blocks read.')
eipSvcDatabaseDiskIoWrite = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 5, 5), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDatabaseDiskIoWrite.setStatus('current')
if mibBuilder.loadTexts: eipSvcDatabaseDiskIoWrite.setDescription('Database service disk IO: blocks written.')
eipSvcDatabaseReplicationStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("active", 1), ("initializing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDatabaseReplicationStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcDatabaseReplicationStatus.setDescription('Database replication status.\n\t\tThis value is available on master only.\n                0 : replication is disabled\n                1 : replication is active\n                2 : replication is initializing')
eipSvcDatabaseReplicationOffset = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 5, 7), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDatabaseReplicationOffset.setStatus('current')
if mibBuilder.loadTexts: eipSvcDatabaseReplicationOffset.setDescription('Database replication offset (Kbytes).')
eipSvcDatabaseReplicationLastReplay = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 5, 8), Gauge32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDatabaseReplicationLastReplay.setStatus('current')
if mibBuilder.loadTexts: eipSvcDatabaseReplicationLastReplay.setDescription('Database replication last replay delay (sec).\n\t\tThis value is available on hot-standby only.')
eipSvcDatabaseBackends = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 5, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDatabaseBackends.setStatus('current')
if mibBuilder.loadTexts: eipSvcDatabaseBackends.setDescription('Number of backends connected to the database.')
eipSvcDatabaseDeadlocks = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 5, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDatabaseDeadlocks.setStatus('current')
if mibBuilder.loadTexts: eipSvcDatabaseDeadlocks.setDescription('Number of deadlocks detected in the database.')
eipSvcDatabaseBloat = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 5, 11), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDatabaseBloat.setStatus('current')
if mibBuilder.loadTexts: eipSvcDatabaseBloat.setDescription('Database bloat size (Kbytes).')
eipSvcDhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("running", 1), ("misconfigured", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDhcpStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpStatus.setDescription('DHCP service status.\n                0 : service is disabled\n                1 : service is running\n                2 : service is misconfigured (running but disabled)\n                3 : service execution failed (enabled but not running)')
eipSvcDhcpCpu = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 6, 2), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDhcpCpu.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpCpu.setDescription('DHCP service CPU usage (%).')
eipSvcDhcpMem = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 6, 3), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDhcpMem.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpMem.setDescription('DHCP service resident memory usage in Kbytes.')
eipSvcDhcpDiskIoRead = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 6, 4), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDhcpDiskIoRead.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpDiskIoRead.setDescription('DHCP service disk IO: blocks read.')
eipSvcDhcpDiskIoWrite = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 6, 5), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDhcpDiskIoWrite.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpDiskIoWrite.setDescription('DHCP service disk IO: blocks written.')
eipSvcDhcpFailoverNumber = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDhcpFailoverNumber.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpFailoverNumber.setDescription('The number of DHCP failover channels configured.')
eipSvcDhcpFailoverTable = MibTable((1, 3, 6, 1, 4, 1, 2440, 1, 16, 6, 7), )
if mibBuilder.loadTexts: eipSvcDhcpFailoverTable.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpFailoverTable.setDescription('A list of DHCP failover channel entries.')
eipSvcDhcpFailoverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2440, 1, 16, 6, 7, 1), ).setIndexNames((0, "EIP-MON-MIB", "eipSvcDhcpFailoverIndex"))
if mibBuilder.loadTexts: eipSvcDhcpFailoverEntry.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpFailoverEntry.setDescription('Each entry contains one DHCP failover channel.')
eipSvcDhcpFailoverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2440, 1, 16, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDhcpFailoverIndex.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpFailoverIndex.setDescription('A unique value, greater than zero, for each DHCP failover channel.')
eipSvcDhcpFailoverName = MibTableColumn((1, 3, 6, 1, 4, 1, 2440, 1, 16, 6, 7, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDhcpFailoverName.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpFailoverName.setDescription('The name of the DHCP failover channel.')
eipSvcDhcpFailoverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2440, 1, 16, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 254))).clone(namedValues=NamedValues(("unknown", 0), ("startup", 1), ("normal", 2), ("communicationsInterrupted", 3), ("partnerDown", 4), ("potentialConflict", 5), ("recover", 6), ("paused", 7), ("shutdown", 8), ("recoverDone", 9), ("resolutionInterrupted", 10), ("conflictDone", 11), ("recoverWait", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDhcpFailoverStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpFailoverStatus.setDescription('DHCP failover status.\n                0 : unknown\n                1 : startup\n                2 : normal\n                3 : communications interrupted\n                4 : partner down\n                5 : potential conflict\n                6 : recover\n                7 : paused\n                8 : shutdown\n                9 : recover done\n                10 : resolution interrupted\n                11 : conflict done\n                254 : recover wait')
eipSvcDhcpMsStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("running", 1), ("misconfigured", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDhcpMsStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpMsStatus.setDescription('EIP MS DHCP service status.\n                0 : service is stopped\n                1 : service is running')
eipSvcDhcpMsCpu = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 7, 2), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDhcpMsCpu.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpMsCpu.setDescription('EIP MS DHCP service CPU usage (%).')
eipSvcDhcpMsMem = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 7, 3), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDhcpMsMem.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpMsMem.setDescription('EIP MS DHCP service resident memory usage in Kbytes.')
eipSvcDhcpMsDiskIoRead = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 7, 4), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDhcpMsDiskIoRead.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpMsDiskIoRead.setDescription('EIP MS DHCP service disk IO: blocks read.')
eipSvcDhcpMsDiskIoWrite = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 7, 5), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDhcpMsDiskIoWrite.setStatus('current')
if mibBuilder.loadTexts: eipSvcDhcpMsDiskIoWrite.setDescription('EIP MS DHCP service disk IO: blocks written.')
eipSvcDnsStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("running", 1), ("misconfigured", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDnsStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcDnsStatus.setDescription('DNS service status.\n                0 : service is disabled\n                1 : service is running\n                2 : service is misconfigured (running but disabled)\n                3 : service execution failed (enabled but not running)')
eipSvcDnsCpu = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 8, 2), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDnsCpu.setStatus('current')
if mibBuilder.loadTexts: eipSvcDnsCpu.setDescription('DNS service CPU usage (%).')
eipSvcDnsMem = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 8, 3), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDnsMem.setStatus('current')
if mibBuilder.loadTexts: eipSvcDnsMem.setDescription('DNS service resident memory usage in Kbytes.')
eipSvcDnsDiskIoRead = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 8, 4), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDnsDiskIoRead.setStatus('current')
if mibBuilder.loadTexts: eipSvcDnsDiskIoRead.setDescription('DNS service disk IO: blocks read.')
eipSvcDnsDiskIoWrite = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 8, 5), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDnsDiskIoWrite.setStatus('current')
if mibBuilder.loadTexts: eipSvcDnsDiskIoWrite.setDescription('DNS service disk IO: blocks written.')
eipSvcDnsEngine = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 8, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcDnsEngine.setStatus('current')
if mibBuilder.loadTexts: eipSvcDnsEngine.setDescription('DNS service engine name.')
eipSvcGuardianStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("running", 1), ("misconfigured", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcGuardianStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcGuardianStatus.setDescription('EIP Guardian service status.\n                0 : service is disabled\n                1 : service is running\n                2 : service is misconfigured (running but disabled)\n                3 : service execution failed (enabled but not running)')
eipSvcGuardianCpu = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 9, 2), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcGuardianCpu.setStatus('current')
if mibBuilder.loadTexts: eipSvcGuardianCpu.setDescription('EIP Guardian service CPU usage (%).')
eipSvcGuardianMem = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 9, 3), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcGuardianMem.setStatus('current')
if mibBuilder.loadTexts: eipSvcGuardianMem.setDescription('EIP Guardian service resident memory usage in Kbytes.')
eipSvcGuardianDiskIoRead = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 9, 4), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcGuardianDiskIoRead.setStatus('current')
if mibBuilder.loadTexts: eipSvcGuardianDiskIoRead.setDescription('EIP Guardian service disk IO: blocks read.')
eipSvcGuardianDiskIoWrite = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 9, 5), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcGuardianDiskIoWrite.setStatus('current')
if mibBuilder.loadTexts: eipSvcGuardianDiskIoWrite.setDescription('EIP Guardian service disk IO: blocks written.')
eipSvcQuaggaStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("running", 1), ("misconfigured", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcQuaggaStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcQuaggaStatus.setDescription('Quagga service status.\n                0 : service is disabled\n                1 : service is running\n                2 : service is misconfigured (running but disabled)\n                3 : service execution failed (enabled but not running)')
eipSvcQuaggaCpu = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 10, 2), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcQuaggaCpu.setStatus('current')
if mibBuilder.loadTexts: eipSvcQuaggaCpu.setDescription('Quagga service CPU usage (%).')
eipSvcQuaggaMem = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 10, 3), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcQuaggaMem.setStatus('current')
if mibBuilder.loadTexts: eipSvcQuaggaMem.setDescription('Quagga service resident memory usage in Kbytes.')
eipSvcQuaggaDiskIoRead = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 10, 4), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcQuaggaDiskIoRead.setStatus('current')
if mibBuilder.loadTexts: eipSvcQuaggaDiskIoRead.setDescription('Quagga service disk IO: blocks read.')
eipSvcQuaggaDiskIoWrite = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 10, 5), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcQuaggaDiskIoWrite.setStatus('current')
if mibBuilder.loadTexts: eipSvcQuaggaDiskIoWrite.setDescription('Quagga service disk IO: blocks written.')
eipSvcNtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("running", 1), ("misconfigured", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcNtpStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcNtpStatus.setDescription('NTP service status.\n                0 : service is disabled\n                1 : service is running\n                2 : service is misconfigured (running but disabled)\n                3 : service execution failed (enabled but not running)')
eipSvcNtpCpu = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 11, 2), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcNtpCpu.setStatus('current')
if mibBuilder.loadTexts: eipSvcNtpCpu.setDescription('NTP service CPU usage (%).')
eipSvcNtpMem = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 11, 3), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcNtpMem.setStatus('current')
if mibBuilder.loadTexts: eipSvcNtpMem.setDescription('NTP service resident memory usage in Kbytes.')
eipSvcNtpDiskIoRead = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 11, 4), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcNtpDiskIoRead.setStatus('current')
if mibBuilder.loadTexts: eipSvcNtpDiskIoRead.setDescription('NTP service disk IO: blocks read.')
eipSvcNtpDiskIoWrite = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 11, 5), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcNtpDiskIoWrite.setStatus('current')
if mibBuilder.loadTexts: eipSvcNtpDiskIoWrite.setDescription('NTP service disk IO: blocks written.')
eipSvcTftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("running", 1), ("misconfigured", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcTftpStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcTftpStatus.setDescription('TFTP service status.\n                0 : service is disabled\n                1 : service is running\n                2 : service is misconfigured (running but disabled)\n                3 : service execution failed (enabled but not running)')
eipSvcTftpCpu = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 12, 2), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcTftpCpu.setStatus('current')
if mibBuilder.loadTexts: eipSvcTftpCpu.setDescription('TFTP service CPU usage (%).')
eipSvcTftpMem = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 12, 3), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcTftpMem.setStatus('current')
if mibBuilder.loadTexts: eipSvcTftpMem.setDescription('TFTP service resident memory usage in Kbytes.')
eipSvcTftpDiskIoRead = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 12, 4), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcTftpDiskIoRead.setStatus('current')
if mibBuilder.loadTexts: eipSvcTftpDiskIoRead.setDescription('TFTP service disk IO: blocks read.')
eipSvcTftpDiskIoWrite = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 12, 5), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcTftpDiskIoWrite.setStatus('current')
if mibBuilder.loadTexts: eipSvcTftpDiskIoWrite.setDescription('TFTP service disk IO: blocks written.')
eipSvcSnmpStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("running", 1), ("misconfigured", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSnmpStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcSnmpStatus.setDescription('SNMP service status.\n                0 : service is disabled\n                1 : service is running\n                2 : service is misconfigured (running but disabled)\n                3 : service execution failed (enabled but not running)')
eipSvcSnmpCpu = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 13, 2), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSnmpCpu.setStatus('current')
if mibBuilder.loadTexts: eipSvcSnmpCpu.setDescription('SNMP service CPU usage (%).')
eipSvcSnmpMem = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 13, 3), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSnmpMem.setStatus('current')
if mibBuilder.loadTexts: eipSvcSnmpMem.setDescription('SNMP service resident memory usage in Kbytes.')
eipSvcSnmpDiskIoRead = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 13, 4), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSnmpDiskIoRead.setStatus('current')
if mibBuilder.loadTexts: eipSvcSnmpDiskIoRead.setDescription('SNMP service disk IO: blocks read.')
eipSvcSnmpDiskIoWrite = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 13, 5), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSnmpDiskIoWrite.setStatus('current')
if mibBuilder.loadTexts: eipSvcSnmpDiskIoWrite.setDescription('SNMP service disk IO: blocks written.')
eipSvcSendmailStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("running", 1), ("misconfigured", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSendmailStatus.setStatus('current')
if mibBuilder.loadTexts: eipSvcSendmailStatus.setDescription('Sendmail service status.\n                0 : service is disabled\n                1 : service is running\n                2 : service is misconfigured (running but disabled)\n                3 : service execution failed (enabled but not running)')
eipSvcSendmailCpu = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 14, 2), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSendmailCpu.setStatus('current')
if mibBuilder.loadTexts: eipSvcSendmailCpu.setDescription('Sendmail service CPU usage (%).')
eipSvcSendmailMem = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 14, 3), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSendmailMem.setStatus('current')
if mibBuilder.loadTexts: eipSvcSendmailMem.setDescription('Sendmail service resident memory usage in Kbytes.')
eipSvcSendmailDiskIoRead = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 14, 4), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSendmailDiskIoRead.setStatus('current')
if mibBuilder.loadTexts: eipSvcSendmailDiskIoRead.setDescription('Sendmail service disk IO: blocks read.')
eipSvcSendmailDiskIoWrite = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 14, 5), Gauge32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSendmailDiskIoWrite.setStatus('current')
if mibBuilder.loadTexts: eipSvcSendmailDiskIoWrite.setDescription('Sendmail service disk IO: blocks written.')
eipSvcSendmailQueueSize = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 16, 14, 6), Integer32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSvcSendmailQueueSize.setStatus('current')
if mibBuilder.loadTexts: eipSvcSendmailQueueSize.setDescription('Sendmail service queue size.')
eipSdsVersionOs = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("i386", 0), ("amd64", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSdsVersionOs.setStatus('current')
if mibBuilder.loadTexts: eipSdsVersionOs.setDescription('SOLIDserver version architecture.\n                0 : i386  (32b)\n                1 : amd64 (64b)')
eipSdsVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSdsVersionNumber.setStatus('current')
if mibBuilder.loadTexts: eipSdsVersionNumber.setDescription('SOLIDserver version number.')
eipSdsVersionDate = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 17, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSdsVersionDate.setStatus('current')
if mibBuilder.loadTexts: eipSdsVersionDate.setDescription('SOLIDserver version date (YYYYMMDDHHMM).')
eipSdsMemberRole = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 17, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("standalone", 0), ("master", 1), ("hotStandby", 2), ("masterRecovered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSdsMemberRole.setStatus('current')
if mibBuilder.loadTexts: eipSdsMemberRole.setDescription('SOLIDserver role.\n                0 : standalone\n                1 : master\n                2 : hot-standby\n                3 : master recovered')
eipSdsMemberStatus = MibScalar((1, 3, 6, 1, 4, 1, 2440, 1, 17, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 0), ("notConfigured", 1), ("upgrading", 2), ("initStandby", 3), ("invalidCredentials", 4), ("remoteManaged", 5), ("timeout", 6), ("splitBrain", 7), ("replicationStopped", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eipSdsMemberStatus.setStatus('current')
if mibBuilder.loadTexts: eipSdsMemberStatus.setDescription('SOLIDserver status.\n                0 : ok\n                1 : not configured\n                2 : upgrading\n                3 : init standby\n                4 : invalid credentials\n                5 : remote managed\n                6 : timeout\n                7 : split-brain\n                8 : replication stopped')
mibBuilder.exportSymbols("EIP-MON-MIB", eipSvcSnmpStatus=eipSvcSnmpStatus, eipSvcIpmServerCpu=eipSvcIpmServerCpu, eipHwPowerCumulative=eipHwPowerCumulative, eipSvcIpmServerDiskIoRead=eipSvcIpmServerDiskIoRead, eipSds=eipSds, eipHwFan1Speed=eipHwFan1Speed, eipHwFan7Speed=eipHwFan7Speed, eipSvcApacheStatus=eipSvcApacheStatus, eipNetCarpIfTable=eipNetCarpIfTable, eipHwTempInlet=eipHwTempInlet, eipSvcSshConnections=eipSvcSshConnections, eipSvcDnsEngine=eipSvcDnsEngine, eipSvcNtpStatus=eipSvcNtpStatus, eipSvcDatabase=eipSvcDatabase, eipNetCfg=eipNetCfg, eipSvcIpmServerDbQueries=eipSvcIpmServerDbQueries, eipSvcQuaggaDiskIoWrite=eipSvcQuaggaDiskIoWrite, eipHw=eipHw, eipHwRaid=eipHwRaid, eipSvcDnsDiskIoRead=eipSvcDnsDiskIoRead, eipSvcApacheMem=eipSvcApacheMem, eipHwRaidStatus=eipHwRaidStatus, eipHwAppliance=eipHwAppliance, eipHwHddUsedSwapPercent=eipHwHddUsedSwapPercent, eipSvcSshDiskIoRead=eipSvcSshDiskIoRead, eipHwHddUsedData1Percent=eipHwHddUsedData1Percent, eipHwHddFreeTmp=eipHwHddFreeTmp, eipSvcGuardianDiskIoWrite=eipSvcGuardianDiskIoWrite, eipNetStatDb=eipNetStatDb, eipSvcDhcpMsCpu=eipSvcDhcpMsCpu, eipSvcSyslog=eipSvcSyslog, eipHwMemUsed=eipHwMemUsed, eipNetStatDbOutPkts=eipNetStatDbOutPkts, eipSvcDatabaseBloat=eipSvcDatabaseBloat, eipSvcSyslogCpu=eipSvcSyslogCpu, eipSvcDhcpStatus=eipSvcDhcpStatus, eipSvcSendmailCpu=eipSvcSendmailCpu, eipSvcIpmServerMem=eipSvcIpmServerMem, eipNetLaggStatus=eipNetLaggStatus, eipNetStatDnsInOctets=eipNetStatDnsInOctets, eipSvcDatabaseDiskIoRead=eipSvcDatabaseDiskIoRead, eipSvcSyslogDiskIoRead=eipSvcSyslogDiskIoRead, eipHwRaidDisksCritical=eipHwRaidDisksCritical, eipSvcTftp=eipSvcTftp, eipHwPsu=eipHwPsu, eipNetCarpIfDescr=eipNetCarpIfDescr, eipSvcGuardian=eipSvcGuardian, eipHwPowerPeak=eipHwPowerPeak, eipNetStatDbInPkts=eipNetStatDbInPkts, eipSvcDhcpMsDiskIoRead=eipSvcDhcpMsDiskIoRead, eipSvcGuardianStatus=eipSvcGuardianStatus, eipSvcApacheConnections=eipSvcApacheConnections, eipHwApplianceBiosVersion=eipHwApplianceBiosVersion, eipSvcNtpCpu=eipSvcNtpCpu, eipSvcDhcpFailoverStatus=eipSvcDhcpFailoverStatus, eipNetStatHttpOutPkts=eipNetStatHttpOutPkts, eipSvcTftpMem=eipSvcTftpMem, eipSvcIpmServerDiskIoWrite=eipSvcIpmServerDiskIoWrite, eipSvcDatabaseStatus=eipSvcDatabaseStatus, eipSdsMemberStatus=eipSdsMemberStatus, eipNetStatDnsInPkts=eipNetStatDnsInPkts, eipSvcDhcpDiskIoWrite=eipSvcDhcpDiskIoWrite, eipSdsMember=eipSdsMember, eipSvcSyslogMem=eipSvcSyslogMem, eipSvcSshDiskIoWrite=eipSvcSshDiskIoWrite, eipSvcDnsStatus=eipSvcDnsStatus, eipNetStatHttpInOctets=eipNetStatHttpInOctets, eipHwFan2Speed=eipHwFan2Speed, eipHwRaidBbuStatus=eipHwRaidBbuStatus, eipNetCarpIfEntry=eipNetCarpIfEntry, eipSvcSendmail=eipSvcSendmail, eipNetStatHttpInPkts=eipNetStatHttpInPkts, eipNetStatDhcpInPkts=eipNetStatDhcpInPkts, eipSvcGuardianDiskIoRead=eipSvcGuardianDiskIoRead, eipSvcNtpMem=eipSvcNtpMem, eipSvcApacheDiskIoRead=eipSvcApacheDiskIoRead, eipHwCpuCoreNumber=eipHwCpuCoreNumber, eipSvcDhcp=eipSvcDhcp, eipSvcGuardianCpu=eipSvcGuardianCpu, eipHwTempCpuCoreMin=eipHwTempCpuCoreMin, eipSvcSnmpMem=eipSvcSnmpMem, eipSvcSendmailDiskIoRead=eipSvcSendmailDiskIoRead, eip=eip, eipHwPowerInstant=eipHwPowerInstant, eipSvcDiskIoWrite=eipSvcDiskIoWrite, eipSvcSshCpu=eipSvcSshCpu, eipSvcDatabaseMem=eipSvcDatabaseMem, eipHwTempRaidController=eipHwTempRaidController, eipSdsVersion=eipSdsVersion, eipSvcIpmServerThreads=eipSvcIpmServerThreads, eipNet=eipNet, eipNetStatDhcpOutOctets=eipNetStatDhcpOutOctets, eipNetStatDhcp=eipNetStatDhcp, eipHwTempCpu=eipHwTempCpu, eipSvcSnmp=eipSvcSnmp, eipSvcQuagga=eipSvcQuagga, eipSvcDhcpFailoverNumber=eipSvcDhcpFailoverNumber, products=products, eipHwRaidDisks=eipHwRaidDisks, eipHwHddFreeVar=eipHwHddFreeVar, eipHwCpu=eipHwCpu, eipSdsMemberRole=eipSdsMemberRole, eipHwHddUsedRootPercent=eipHwHddUsedRootPercent, eipSvcDns=eipSvcDns, eipSvcTftpDiskIoRead=eipSvcTftpDiskIoRead, eipHwHddFreeData1=eipHwHddFreeData1, eipSvcDatabaseReplicationOffset=eipSvcDatabaseReplicationOffset, eipCompliances=eipCompliances, eipSvcQuaggaStatus=eipSvcQuaggaStatus, eipSvcSnmpDiskIoRead=eipSvcSnmpDiskIoRead, eipHwHddUsedVarPercent=eipHwHddUsedVarPercent, eipHwChassisIntrusion=eipHwChassisIntrusion, eipSvcDatabaseDeadlocks=eipSvcDatabaseDeadlocks, eipHwMem=eipHwMem, eipSvcDhcpMsStatus=eipSvcDhcpMsStatus, eipNetCarpIfVhid=eipNetCarpIfVhid, eipNetStatHttpOutOctets=eipNetStatHttpOutOctets, eipNetStatDhcpOutPkts=eipNetStatDhcpOutPkts, PYSNMP_MODULE_ID=eip, eipHwPsu1Status=eipHwPsu1Status, eipSvcSshMem=eipSvcSshMem, eipSvcDatabaseDiskIoWrite=eipSvcDatabaseDiskIoWrite, eipHwPower=eipHwPower, eipHwHddUsedSwap=eipHwHddUsedSwap, eipHwFan4Speed=eipHwFan4Speed, eipNetCarpIfNumber=eipNetCarpIfNumber, eipNetStatDbOutOctets=eipNetStatDbOutOctets, eipSvcSnmpCpu=eipSvcSnmpCpu, eipHwRaidDisksFailed=eipHwRaidDisksFailed, eipNetCarpIfState=eipNetCarpIfState, eipSdsVersionNumber=eipSdsVersionNumber, eipSvcDhcpMs=eipSvcDhcpMs, eipHwCpuLoadInt=eipHwCpuLoadInt, eipNetStatDnsOutOctets=eipNetStatDnsOutOctets, eipNetCarpIfDev=eipNetCarpIfDev, eipSvcDhcpMsMem=eipSvcDhcpMsMem, eipSvcNtpDiskIoRead=eipSvcNtpDiskIoRead, eipHwFan8Speed=eipHwFan8Speed, eipSvcDatabaseCpu=eipSvcDatabaseCpu, eipSvcTftpCpu=eipSvcTftpCpu, eipHwTemp=eipHwTemp, eipNetStatSnmpInPkts=eipNetStatSnmpInPkts, eipSvcGuardianMem=eipSvcGuardianMem, eipSvcSyslogDiskIoWrite=eipSvcSyslogDiskIoWrite, eipSvcQuaggaMem=eipSvcQuaggaMem, eipSdsVersionOs=eipSdsVersionOs, eipSvcDnsCpu=eipSvcDnsCpu, eipSvcSnmpDiskIoWrite=eipSvcSnmpDiskIoWrite, eipSvc=eipSvc, eipSvcDhcpFailoverEntry=eipSvcDhcpFailoverEntry, eipHwPsu2Status=eipHwPsu2Status, eipSvcDhcpFailoverName=eipSvcDhcpFailoverName, eipHwPowerPeakAmperage=eipHwPowerPeakAmperage, eipSvcApacheDiskIoWrite=eipSvcApacheDiskIoWrite, eipHwTempBaseboard=eipHwTempBaseboard, eipSvcStatus=eipSvcStatus, eipHwApplianceSerial=eipHwApplianceSerial, eipSvcSyslogStatus=eipSvcSyslogStatus, eipSvcDhcpMem=eipSvcDhcpMem, eipNetStatDbInOctets=eipNetStatDbInOctets, eipSvcIpmServer=eipSvcIpmServer, eipHwApplianceModel=eipHwApplianceModel, eipNetCarpIfAdvbase=eipNetCarpIfAdvbase, eipNetStat=eipNetStat, eipNetCarp=eipNetCarp, eipHwTempCpuCoreMax=eipHwTempCpuCoreMax, eipSvcDatabaseReplicationLastReplay=eipSvcDatabaseReplicationLastReplay, eipSvcDhcpFailoverIndex=eipSvcDhcpFailoverIndex, eipSvcCpu=eipSvcCpu, eipHwFan6Speed=eipHwFan6Speed, eipSvcDatabaseBackends=eipSvcDatabaseBackends, eipNetCarpIf=eipNetCarpIf, eipNetStatHttp=eipNetStatHttp, eipNetStatSnmp=eipNetStatSnmp, eipNetCarpIfIndex=eipNetCarpIfIndex, eipSvcNtp=eipSvcNtp, eipSvcSshStatus=eipSvcSshStatus, eipSvcDatabaseReplicationStatus=eipSvcDatabaseReplicationStatus, eipHwFan=eipHwFan, eipHwHddIoLoad=eipHwHddIoLoad, eipSvcDhcpFailoverTable=eipSvcDhcpFailoverTable, eipHwChassis=eipHwChassis, eipSvcApacheCpu=eipSvcApacheCpu, eipSvcDnsMem=eipSvcDnsMem, eipSvcSendmailDiskIoWrite=eipSvcSendmailDiskIoWrite, eipSvcApache=eipSvcApache, eipNetStatDnsOutPkts=eipNetStatDnsOutPkts, eipHwRaidBbuCharge=eipHwRaidBbuCharge, eipNetStatDns=eipNetStatDns, eipSvcMem=eipSvcMem, eipNetStatSnmpOutPkts=eipNetStatSnmpOutPkts, eipSvcDhcpMsDiskIoWrite=eipSvcDhcpMsDiskIoWrite, eipSvcDnsDiskIoWrite=eipSvcDnsDiskIoWrite, eipSvcNtpDiskIoWrite=eipSvcNtpDiskIoWrite, eipSvcTftpStatus=eipSvcTftpStatus, eipSvcSendmailMem=eipSvcSendmailMem, eipNetStatSnmpInOctets=eipNetStatSnmpInOctets, eipSvcIpmServerUserSessions=eipSvcIpmServerUserSessions, eipNetStatIn=eipNetStatIn, eipSdsVersionDate=eipSdsVersionDate, eipSvcSsh=eipSvcSsh, eipSvcSendmailStatus=eipSvcSendmailStatus, eipSvcTftpDiskIoWrite=eipSvcTftpDiskIoWrite, eipSvcIpmServerStatus=eipSvcIpmServerStatus, eipHwHddUsedTmpPercent=eipHwHddUsedTmpPercent, eipMainCompliance=eipMainCompliance, eipSvcSendmailQueueSize=eipSvcSendmailQueueSize, eipNetLagg=eipNetLagg, eipSvcDhcpCpu=eipSvcDhcpCpu, eipHwHddFreeRoot=eipHwHddFreeRoot, eipHwRaidController=eipHwRaidController, eipNetStatOut=eipNetStatOut, eipNetStatDhcpInOctets=eipNetStatDhcpInOctets, eipNetCarpIfAdvskew=eipNetCarpIfAdvskew, eipHwFan5Speed=eipHwFan5Speed, eipHwPsuRedundancy=eipHwPsuRedundancy, eipSvcQuaggaCpu=eipSvcQuaggaCpu, eipSvcQuaggaDiskIoRead=eipSvcQuaggaDiskIoRead, eipNetStatSnmpOutOctets=eipNetStatSnmpOutOctets, eipSvcDiskIoRead=eipSvcDiskIoRead, eipHwFan3Speed=eipHwFan3Speed, eipSvcDhcpDiskIoRead=eipSvcDhcpDiskIoRead, eipHwHdd=eipHwHdd)
