#
# PySNMP MIB module BENU-CGNAT-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/benuos/BENU-CGNAT-STATS-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 12:15:09 2024
# On host fv-az1385-751 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
benuWAG, = mibBuilder.importSymbols("BENU-WAG-MIB", "benuWAG")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibIdentifier, iso, IpAddress, Counter64, ObjectIdentity, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Unsigned32, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "iso", "IpAddress", "Counter64", "ObjectIdentity", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Unsigned32", "TimeTicks", "NotificationType")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
benuCgnatStatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9))
benuCgnatStatsMIB.setRevisions(('2017-01-24 00:00', '2017-01-04 00:00', '2016-12-22 00:00', '2015-01-27 00:00', '2014-12-10 00:00', '2014-11-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: benuCgnatStatsMIB.setRevisionsDescriptions(('Added scalar for DS-Lite Tunnel port blocks usage rising threshold.', 'Added notification for Tunnel CGNAT port block allocation low threshold.', 'Added notification for Tunnel CGNAT port block allocation high threshold.', 'Updated notification assignments to comply with standards (RFC 2578).', 'A separate table to show CGNAT subscribers\n                         actively utilizing ports greater than the \n                         configured threshold.', 'Initial Version',))
if mibBuilder.loadTexts: benuCgnatStatsMIB.setLastUpdated('201701240000Z')
if mibBuilder.loadTexts: benuCgnatStatsMIB.setOrganization('Benu Networks,Inc')
if mibBuilder.loadTexts: benuCgnatStatsMIB.setContactInfo('Benu Networks,Inc\n                          Corporate Headquarters\n                          300 Concord Road, Suite 110\n                          Billerica, MA 01821 USA\n                          Tel: +1 978-223-4700\n                          Fax: +1 978-362-1908\n                          Email: info@benunets.com')
if mibBuilder.loadTexts: benuCgnatStatsMIB.setDescription('This MIB module defines CGNAT statistics of\n                Benu Wireless Access Gateway.\n\n                Copyright (C)  2014 by Benu Networks, Inc.\n                All rights reserved.')
bCgnatMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1))
if mibBuilder.loadTexts: bCgnatMIBObjects.setStatus('current')
if mibBuilder.loadTexts: bCgnatMIBObjects.setDescription('WAG CGNAT objects are defined in this branch.')
bCgnatNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 0))
if mibBuilder.loadTexts: bCgnatNotifications.setStatus('current')
if mibBuilder.loadTexts: bCgnatNotifications.setDescription('CGNAT notifications are defined in this branch.')
bCgnatNotifObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 2))
if mibBuilder.loadTexts: bCgnatNotifObjects.setStatus('current')
if mibBuilder.loadTexts: bCgnatNotifObjects.setDescription('MIB objects for CGNAT notifications are defined in this branch.')
bCgnatAuthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1), )
if mibBuilder.loadTexts: bCgnatAuthStatsTable.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthStatsTable.setDescription('A list of CGNAT statistics for authenticated subscribers.')
bCgnatAuthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1), ).setIndexNames((0, "BENU-CGNAT-STATS-MIB", "bCgnatAuthStatsIndex"))
if mibBuilder.loadTexts: bCgnatAuthStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthStatsEntry.setDescription('A logical row in the bCgnatAuthStatsTable.')
bCgnatAuthStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bCgnatAuthStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthStatsIndex.setDescription('A number uniquely identifying this row in the CGNAT statistics table.')
bCgnatAuthProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthProfileName.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthProfileName.setDescription('The name of the CGNAT profile.')
bCgnatAuthDomainPublicIpZeroCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthDomainPublicIpZeroCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthDomainPublicIpZeroCount.setDescription('Domain Public IP as zero count.')
bCgnatAuthDomainNoFreePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthDomainNoFreePortCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthDomainNoFreePortCount.setDescription('Domain no free port count.')
bCgnatAuthFlowAddSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthFlowAddSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthFlowAddSuccessCount.setDescription('Flow add success count.')
bCgnatAuthFlowAddFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthFlowAddFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthFlowAddFailureCount.setDescription('Flow add failure count.')
bCgnatAuthTimerAllocFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthTimerAllocFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthTimerAllocFailureCount.setDescription('Timer allocation failure count.')
bCgnatAuthFlowDeleteSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthFlowDeleteSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthFlowDeleteSuccessCount.setDescription('Flow delete success count.')
bCgnatAuthFlowDeleteFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthFlowDeleteFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthFlowDeleteFailureCount.setDescription('Flow delete failure count.')
bCgnatAuthUnsupportedL4DropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthUnsupportedL4DropCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthUnsupportedL4DropCount.setDescription('Unsupported L4 Protocol packets drop count.')
bCgnatAuthNatflowSyncFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthNatflowSyncFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthNatflowSyncFailureCount.setDescription('NAT Flow sync failure count.')
bCgnatAuthIcmpIdAllocSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthIcmpIdAllocSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthIcmpIdAllocSuccessCount.setDescription('ICMP ID Allocation success count.')
bCgnatAuthTcpPortAllocSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthTcpPortAllocSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthTcpPortAllocSuccessCount.setDescription('TCP port allocation success count.')
bCgnatAuthUdpPortAllocSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthUdpPortAllocSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthUdpPortAllocSuccessCount.setDescription('UDP port allocation success count.')
bCgnatAuthIcmpIdAllocFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthIcmpIdAllocFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthIcmpIdAllocFailureCount.setDescription('ICMP ID Allocation failure count.')
bCgnatAuthTcpPortAllocFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthTcpPortAllocFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthTcpPortAllocFailureCount.setDescription('TCP Port allocation falire count.')
bCgnatAuthUdpPortAllocFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthUdpPortAllocFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthUdpPortAllocFailureCount.setDescription('UDP Port allocation failure count.')
bCgnatAuthIcmpIdReleaseSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthIcmpIdReleaseSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthIcmpIdReleaseSuccessCount.setDescription('ICMP ID release success count.')
bCgnatAuthTcpPortReleaseSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthTcpPortReleaseSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthTcpPortReleaseSuccessCount.setDescription('TCP Port release success count.')
bCgnatAuthUdpPortReleaseSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthUdpPortReleaseSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthUdpPortReleaseSuccessCount.setDescription('UDP Port release success count.')
bCgnatAuthIcmpIdReleaseFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthIcmpIdReleaseFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthIcmpIdReleaseFailureCount.setDescription('ICMP Id release failure count.')
bCgnatAuthTcpPortReleaseFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthTcpPortReleaseFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthTcpPortReleaseFailureCount.setDescription('TCP Port release failure count.')
bCgnatAuthUdpPortReleaseFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthUdpPortReleaseFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthUdpPortReleaseFailureCount.setDescription('UDP port release failure count.')
bCgnatAuthMaxCgnatPortsExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthMaxCgnatPortsExceeded.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthMaxCgnatPortsExceeded.setDescription('Maximum CGNAT Ports exceeded count.')
bCgnatAuthMaxIcmpIdsExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthMaxIcmpIdsExceeded.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthMaxIcmpIdsExceeded.setDescription('Maximum ICMP Id exceeded count.')
bCgnatAuthFlowDeleteRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthFlowDeleteRcvd.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthFlowDeleteRcvd.setDescription('CGNAT Flow delete received count.')
bCgnatAuthFlowDeleteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthFlowDeleteSent.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthFlowDeleteSent.setDescription('CGNAT Flow delete sent count.')
bCgnatAuthFlowDeleteFindFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthFlowDeleteFindFailure.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthFlowDeleteFindFailure.setDescription('CGNAT Flow delete find failure count.')
bCgnatAuthDnsFlowAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthDnsFlowAlloc.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthDnsFlowAlloc.setDescription('DNS Flow allocation count.')
bCgnatAuthDnsFlowRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthDnsFlowRelease.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthDnsFlowRelease.setDescription('DNS Flow release count.')
bCgnatAuthDnsFlowAllocSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthDnsFlowAllocSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthDnsFlowAllocSuccessCount.setDescription('DNS Flow allocation success count.')
bCgnatAuthDnsFlowReleaseSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthDnsFlowReleaseSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthDnsFlowReleaseSuccessCount.setDescription('DNS Flow release success count.')
bCgnatAuthDnsFlowAllocFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthDnsFlowAllocFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthDnsFlowAllocFailureCount.setDescription('DNS Flow allocation failure count.')
bCgnatAuthDnsFlowReleaseFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthDnsFlowReleaseFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthDnsFlowReleaseFailureCount.setDescription('DNS Flow release failure count.')
bCgnatAuthPortsThresholdExceededSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthPortsThresholdExceededSent.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthPortsThresholdExceededSent.setDescription('Port threshold exceeded sent count.')
bCgnatAuthPortsThresholdExceededRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthPortsThresholdExceededRcvd.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthPortsThresholdExceededRcvd.setDescription('Port threshold exceeded received count.')
bCgnatAuthPortsThresholdExceededInt = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthPortsThresholdExceededInt.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthPortsThresholdExceededInt.setDescription('Port threshold exceeded interrupt count.')
bCgnatAuthPortsThresholdExceededErr = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthPortsThresholdExceededErr.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthPortsThresholdExceededErr.setDescription('Port threshold exceeded error count.')
bCgnatAuthUnsupportedActionIdRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthUnsupportedActionIdRcvd.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthUnsupportedActionIdRcvd.setDescription('Unsupported action Id received count.')
bCgnatAuthNonTcpSynPortAllocDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthNonTcpSynPortAllocDrop.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthNonTcpSynPortAllocDrop.setDescription('Non TCP SYN Port allocation count.')
bCgnatAuthFlowDeletedTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthFlowDeletedTimer.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthFlowDeletedTimer.setDescription('CGNAT Flows deleted due to timer.')
bCgnatAuthFlowDeletedSessionEnded = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthFlowDeletedSessionEnded.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthFlowDeletedSessionEnded.setDescription('CGNAT Flows deleted due to session ended.')
bCgnatAuthFlowDeletedSubClear = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthFlowDeletedSubClear.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthFlowDeletedSubClear.setDescription('CGNAT Flow delete due to clearing subescriber.')
bCgnatAuthNatFlowDelErrSubIdMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthNatFlowDelErrSubIdMismatch.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthNatFlowDelErrSubIdMismatch.setDescription('CGNAT Flow delete due to subscriber ID mismatch.')
bCgnatAuthNatFlowDelErrValidFlagNotSet = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthNatFlowDelErrValidFlagNotSet.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthNatFlowDelErrValidFlagNotSet.setDescription('Flow delete error due to valid flag not set.')
bCgnatAuthIcmpPortUnreachableSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthIcmpPortUnreachableSent.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthIcmpPortUnreachableSent.setDescription('ICMP Port unreachable sent.')
bCgnatAuthPortsNotAvailableDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthPortsNotAvailableDrop.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthPortsNotAvailableDrop.setDescription('Packets dropped due to port not available.')
bCgnatAuthUnsupportedPrivatePortDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 1, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthUnsupportedPrivatePortDropCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthUnsupportedPrivatePortDropCount.setDescription('Unsupported Private port drop count.')
bCgnatUnauthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2), )
if mibBuilder.loadTexts: bCgnatUnauthStatsTable.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthStatsTable.setDescription('A list of CGNAT statistics for unauthenticated subscribers.')
bCgnatUnauthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1), ).setIndexNames((0, "BENU-CGNAT-STATS-MIB", "bCgnatUnauthStatsIndex"))
if mibBuilder.loadTexts: bCgnatUnauthStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthStatsEntry.setDescription('A logical row in the bCgnatUnauthStatsTable.')
bCgnatUnauthStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: bCgnatUnauthStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthStatsIndex.setDescription('A number uniquely identifying this row in the CGNAT statistics table.')
bCgnatUnauthProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthProfileName.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthProfileName.setDescription('The name of the CGNAT profile.')
bCgnatUnauthDomainPublicIpZeroCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthDomainPublicIpZeroCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthDomainPublicIpZeroCount.setDescription('Domain Public IP as zero count.')
bCgnatUnauthDomainNoFreePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthDomainNoFreePortCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthDomainNoFreePortCount.setDescription('Domain no free port count.')
bCgnatUnauthFlowAddSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthFlowAddSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthFlowAddSuccessCount.setDescription('Flow add success count.')
bCgnatUnauthFlowAddFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthFlowAddFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthFlowAddFailureCount.setDescription('Flow add failure count.')
bCgnatUnauthTimerAllocFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthTimerAllocFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthTimerAllocFailureCount.setDescription('Timer allocation failure count.')
bCgnatUnauthFlowDeleteSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthFlowDeleteSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthFlowDeleteSuccessCount.setDescription('Flow delete success count.')
bCgnatUnauthFlowDeleteFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthFlowDeleteFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthFlowDeleteFailureCount.setDescription('Flow delete failure count.')
bCgnatUnauthUnsupportedL4DropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthUnsupportedL4DropCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthUnsupportedL4DropCount.setDescription('Unsupported L4 Protocol packets drop count.')
bCgnatUnauthNatflowSyncFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthNatflowSyncFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthNatflowSyncFailureCount.setDescription('NAT Flow sync failure count.')
bCgnatUnauthIcmpIdAllocSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthIcmpIdAllocSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthIcmpIdAllocSuccessCount.setDescription('ICMP ID Allocation success count.')
bCgnatUnauthTcpPortAllocSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthTcpPortAllocSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthTcpPortAllocSuccessCount.setDescription('TCP port allocation success count.')
bCgnatUnauthUdpPortAllocSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthUdpPortAllocSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthUdpPortAllocSuccessCount.setDescription('UDP port allocation success count.')
bCgnatUnauthIcmpIdAllocFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthIcmpIdAllocFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthIcmpIdAllocFailureCount.setDescription('ICMP ID Allocation failure count.')
bCgnatUnauthTcpPortAllocFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthTcpPortAllocFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthTcpPortAllocFailureCount.setDescription('TCP Port allocation falire count.')
bCgnatUnauthUdpPortAllocFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthUdpPortAllocFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthUdpPortAllocFailureCount.setDescription('UDP Port allocation failure count.')
bCgnatUnauthIcmpIdReleaseSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthIcmpIdReleaseSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthIcmpIdReleaseSuccessCount.setDescription('ICMP ID release success count.')
bCgnatUnauthTcpPortReleaseSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthTcpPortReleaseSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthTcpPortReleaseSuccessCount.setDescription('TCP Port release success count.')
bCgnatUnauthUdpPortReleaseSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthUdpPortReleaseSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthUdpPortReleaseSuccessCount.setDescription('UDP Port release success count.')
bCgnatUnauthIcmpIdReleaseFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthIcmpIdReleaseFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthIcmpIdReleaseFailureCount.setDescription('ICMP Id release failure count.')
bCgnatUnauthTcpPortReleaseFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthTcpPortReleaseFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthTcpPortReleaseFailureCount.setDescription('TCP Port release failure count.')
bCgnatUnauthUdpPortReleaseFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthUdpPortReleaseFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthUdpPortReleaseFailureCount.setDescription('UDP port release failure count.')
bCgnatUnauthMaxCgnatPortsExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthMaxCgnatPortsExceeded.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthMaxCgnatPortsExceeded.setDescription('Maximum CGNAT Ports exceeded count.')
bCgnatUnauthMaxIcmpIdsExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthMaxIcmpIdsExceeded.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthMaxIcmpIdsExceeded.setDescription('Maximum ICMP Id exceeded count.')
bCgnatUnauthFlowDeleteRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthFlowDeleteRcvd.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthFlowDeleteRcvd.setDescription('CGNAT Flow delete received count.')
bCgnatUnauthFlowDeleteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthFlowDeleteSent.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthFlowDeleteSent.setDescription('CGNAT Flow delete sent count.')
bCgnatUnauthFlowDeleteFindFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthFlowDeleteFindFailure.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthFlowDeleteFindFailure.setDescription('CGNAT Flow delete find failure count.')
bCgnatUnauthDnsFlowAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthDnsFlowAlloc.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthDnsFlowAlloc.setDescription('DNS Flow allocation count.')
bCgnatUnauthDnsFlowRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthDnsFlowRelease.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthDnsFlowRelease.setDescription('DNS Flow release count.')
bCgnatUnauthDnsFlowAllocSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthDnsFlowAllocSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthDnsFlowAllocSuccessCount.setDescription('DNS Flow allocation success count.')
bCgnatUnauthDnsFlowReleaseSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthDnsFlowReleaseSuccessCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthDnsFlowReleaseSuccessCount.setDescription('DNS Flow release success count.')
bCgnatUnauthDnsFlowAllocFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthDnsFlowAllocFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthDnsFlowAllocFailureCount.setDescription('DNS Flow allocation failure count.')
bCgnatUnauthDnsFlowReleaseFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthDnsFlowReleaseFailureCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthDnsFlowReleaseFailureCount.setDescription('DNS Flow release failure count.')
bCgnatUnauthPortsThresholdExceededSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthPortsThresholdExceededSent.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthPortsThresholdExceededSent.setDescription('Port threshold exceeded sent count.')
bCgnatUnauthPortsThresholdExceededRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthPortsThresholdExceededRcvd.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthPortsThresholdExceededRcvd.setDescription('Port threshold exceeded received count.')
bCgnatUnauthPortsThresholdExceededInt = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthPortsThresholdExceededInt.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthPortsThresholdExceededInt.setDescription('Port threshold exceeded interrupt count.')
bCgnatUnauthPortsThresholdExceededErr = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthPortsThresholdExceededErr.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthPortsThresholdExceededErr.setDescription('Port threshold exceeded error count.')
bCgnatUnauthUnsupportedActionIdRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthUnsupportedActionIdRcvd.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthUnsupportedActionIdRcvd.setDescription('Unsupported action Id received count.')
bCgnatUnauthNonTcpSynPortAllocDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthNonTcpSynPortAllocDrop.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthNonTcpSynPortAllocDrop.setDescription('Non TCP SYN Port allocation count.')
bCgnatUnauthFlowDeletedTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthFlowDeletedTimer.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthFlowDeletedTimer.setDescription('CGNAT Flows deleted due to timer.')
bCgnatUnauthFlowDeletedSessionEnded = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthFlowDeletedSessionEnded.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthFlowDeletedSessionEnded.setDescription('CGNAT Flows deleted due to session ended.')
bCgnatUnauthFlowDeletedSubClear = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthFlowDeletedSubClear.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthFlowDeletedSubClear.setDescription('CGNAT Flow delete due to clearing subescriber.')
bCgnatUnauthNatFlowDelErrSubIdMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthNatFlowDelErrSubIdMismatch.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthNatFlowDelErrSubIdMismatch.setDescription('CGNAT Flow delete due to subscriber ID mismatch.')
bCgnatUnauthNatFlowDelErrValidFlagNotSet = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthNatFlowDelErrValidFlagNotSet.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthNatFlowDelErrValidFlagNotSet.setDescription('Flow delete error due to valid flag not set.')
bCgnatUnauthIcmpPortUnreachableSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthIcmpPortUnreachableSent.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthIcmpPortUnreachableSent.setDescription('ICMP Port unreachable sent.')
bCgnatUnauthPortsNotAvailableDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthPortsNotAvailableDrop.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthPortsNotAvailableDrop.setDescription('Packets dropped due to port not available.')
bCgnatUnauthUnsupportedPrivatePortDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 2, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatUnauthUnsupportedPrivatePortDropCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatUnauthUnsupportedPrivatePortDropCount.setDescription('Unsupported Private port drop count.')
bCgnatAuthPortUtilTable = MibTable((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 3), )
if mibBuilder.loadTexts: bCgnatAuthPortUtilTable.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthPortUtilTable.setDescription('A list of CGNAT statistics for each authenticated subscriber that\n      has crossed port utilization threshold.')
bCgnatAuthPortUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 3, 1), ).setIndexNames((0, "BENU-CGNAT-STATS-MIB", "bCgnatAuthPortUtilIndex"))
if mibBuilder.loadTexts: bCgnatAuthPortUtilEntry.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthPortUtilEntry.setDescription('A logical row in the bCgnatAuthPortUtilTable.')
bCgnatAuthPortUtilIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bCgnatAuthPortUtilIndex.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthPortUtilIndex.setDescription('The Port utilization table index of the CGNAT subscriber\n       for which the current ports in use has crossed the\n       configured high water mark.')
bCgnatAuthSubscriberMac = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthSubscriberMac.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthSubscriberMac.setDescription('The MAC address of the authenticated CGNAT subscriber\n       for which the current ports in use has crossed the\n       configured high water mark.')
bCgnatAuthSubscriberPortsFree = MibTableColumn((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthSubscriberPortsFree.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthSubscriberPortsFree.setDescription('Number of free ports for the authenticated CGNAT subscriber\n       for which the current ports in use has crossed the\n       configured high water mark.')
bCgnatAuthPortRisingThresholdCrossedSubCount = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bCgnatAuthPortRisingThresholdCrossedSubCount.setStatus('current')
if mibBuilder.loadTexts: bCgnatAuthPortRisingThresholdCrossedSubCount.setDescription('The count of the total number of authenticated CGNAT subscribers\n      whose port usage is above the configured rising threshold.')
bDslitePortBlockRisingThresholdCrossedTunCount = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDslitePortBlockRisingThresholdCrossedTunCount.setStatus('current')
if mibBuilder.loadTexts: bDslitePortBlockRisingThresholdCrossedTunCount.setDescription('The count of the total number of DS-Lite tunnels\n      whose port blocks usage is above the configured rising threshold.')
bCgnatSubscriberMac = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 2, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bCgnatSubscriberMac.setStatus('current')
if mibBuilder.loadTexts: bCgnatSubscriberMac.setDescription('MAC address of the subscriber.')
bCgnatTotalPortBlocksPerSubscriber = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 2, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bCgnatTotalPortBlocksPerSubscriber.setStatus('current')
if mibBuilder.loadTexts: bCgnatTotalPortBlocksPerSubscriber.setDescription('Number of port blocks available for the authenticated CGNAT subscriber.')
bCgnatPortBlocksUsedHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 2, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bCgnatPortBlocksUsedHighThreshold.setStatus('current')
if mibBuilder.loadTexts: bCgnatPortBlocksUsedHighThreshold.setDescription('The high threshold for the number of used CGNAT port blocks by authenticated subscribers.\n        If the number of used port blocks exceeds this value, \n        a bCgnatPortBlocksUsedHighThresholdReached event\n        will be generated. No more bCgnatPortBlocksUsedHighThresholdReached \n        events will be generated until the value of the number of\n        used CGNAT port blocks becomes equal to or less than\n        the value of bCgnatPortBlocksUsedLowThreshold. The ratio of this\n        value to the total number of port blocks is reported as percentage in\n        this object.\n        Units: Percentage in the range 0 - 100.')
bCgnatPortBlocksUsedLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 2, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bCgnatPortBlocksUsedLowThreshold.setStatus('current')
if mibBuilder.loadTexts: bCgnatPortBlocksUsedLowThreshold.setDescription('The low threshold for the number of used CGNAT port blocks by authenticated subscribers.\n        If a bCgnatPortBlocksUsedHighThresholdReached \n        event had previously been generated, and if the number of \n        used port blocks equals to or falls below this value, a \n        bCgnatPortBlocksUsedLowThresholdReached event will be generated.\n        No more bCgnatPortBlocksUsedLowThreshold events will be\n        generated until the value of the number of used CGNAT Port\n        blocks exceeds bCgnatPortBlocksUsedHighThresholdReached and a\n        bCgnatPortBlocksUsedHighThresholdReached is first generated.\n        The ratio of this value to the total number of port blocks is\n        reported as percentage in this object.\n        Units: Percentage in the range 0 - 100.')
bCgnatThresholdTunnelId = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 2, 5), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bCgnatThresholdTunnelId.setStatus('current')
if mibBuilder.loadTexts: bCgnatThresholdTunnelId.setDescription('The Id of the CGNAT Tunnel using tunnel port blocks,\n       for which the current ports in use has crossed the\n       configured high water mark.')
bCgnatEvenPortsForTunnel = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 2, 6), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bCgnatEvenPortsForTunnel.setStatus('current')
if mibBuilder.loadTexts: bCgnatEvenPortsForTunnel.setDescription('Number of even free ports available for the tunnel\n       for which the current ports in use has crossed the\n       configured high/low water mark.')
bCgnatOddPortsForTunnel = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 2, 7), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bCgnatOddPortsForTunnel.setStatus('current')
if mibBuilder.loadTexts: bCgnatOddPortsForTunnel.setDescription('Number of odd free ports available for the tunnel\n       for which the current ports in use has crossed the\n       configured high/low water mark.')
bCgnatPortParity = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 2, 8), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bCgnatPortParity.setStatus('current')
if mibBuilder.loadTexts: bCgnatPortParity.setDescription('Port parity which hit the high/low watermark, 1 for odd port and 2 for Even')
bCgnatTunnelPortBlocksUsedHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 2, 9), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bCgnatTunnelPortBlocksUsedHighThreshold.setStatus('current')
if mibBuilder.loadTexts: bCgnatTunnelPortBlocksUsedHighThreshold.setDescription('The high threshold for the number of used CGNAT port by a Dslite Tunnel.\n        If the number of used ports in the last port block allocated for the tunnel exceeds this value, \n        a bCgnatTunnelPortsUsedHighThresholdReached event\n        will be generated. No more bCgnatTunnelPortBlocksUsedHighThresholdReached \n        events will be generated until the value of the total number of\n        CGNAT available ports becomes equal to or less than half of the \n        the value of bCgnatTunnelPortsUsedHighThreshold. The ratio of this\n        value to the total number of ports is reported as percentage in\n        this object.\n        Units: Percentage in the range 0 - 100.')
bCgnatTunnelPortBlocksUsedLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 2, 10), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bCgnatTunnelPortBlocksUsedLowThreshold.setStatus('current')
if mibBuilder.loadTexts: bCgnatTunnelPortBlocksUsedLowThreshold.setDescription('The Low threshold for the number of used CGNAT port by a Dslite Tunnel.\n        If the total number of free ports from all the port blocks allocated for the tunnel exceeds this value, \n        a bCgnatTunnelPortsUsedLowThresholdReached event\n        will be generated. No more bCgnatTunnelPortBlocksUsedLowThresholdReached \n        events will be generated until a bCgnatTunnelPortBlocksUsedHighThresholdReached is generated.\n        Units: Percentage in the range 0 - 100.')
bCgnatPortBlocksUsedHighThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 0, 1)).setObjects(("BENU-CGNAT-STATS-MIB", "bCgnatSubscriberMac"), ("BENU-CGNAT-STATS-MIB", "bCgnatTotalPortBlocksPerSubscriber"), ("BENU-CGNAT-STATS-MIB", "bCgnatPortBlocksUsedHighThreshold"))
if mibBuilder.loadTexts: bCgnatPortBlocksUsedHighThresholdReached.setStatus('current')
if mibBuilder.loadTexts: bCgnatPortBlocksUsedHighThresholdReached.setDescription('This notification signifies that the current number of \n        used CGNAT port blocks used for an authenticated subscriber has risen above \n        the value of  bCgnatPortBlocksUsedHighThreshold.')
bCgnatPortBlocksUsedLowThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 0, 2)).setObjects(("BENU-CGNAT-STATS-MIB", "bCgnatSubscriberMac"), ("BENU-CGNAT-STATS-MIB", "bCgnatTotalPortBlocksPerSubscriber"), ("BENU-CGNAT-STATS-MIB", "bCgnatPortBlocksUsedLowThreshold"))
if mibBuilder.loadTexts: bCgnatPortBlocksUsedLowThresholdReached.setStatus('current')
if mibBuilder.loadTexts: bCgnatPortBlocksUsedLowThresholdReached.setDescription('This notification signifies that the current number of \n        used CGNAT Port blocks for an authenticated subscriber has fallen below the value of \n        bCgnatPortBlocksUsedLowThreshold.')
bCgnatTunnelPortBlocksUsedHighThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 0, 3)).setObjects(("BENU-CGNAT-STATS-MIB", "bCgnatThresholdTunnelId"), ("BENU-CGNAT-STATS-MIB", "bCgnatEvenPortsForTunnel"), ("BENU-CGNAT-STATS-MIB", "bCgnatOddPortsForTunnel"), ("BENU-CGNAT-STATS-MIB", "bCgnatPortParity"), ("BENU-CGNAT-STATS-MIB", "bCgnatTunnelPortBlocksUsedHighThreshold"))
if mibBuilder.loadTexts: bCgnatTunnelPortBlocksUsedHighThresholdReached.setStatus('current')
if mibBuilder.loadTexts: bCgnatTunnelPortBlocksUsedHighThresholdReached.setDescription('This notification signifies that the current number of \n        used CGNAT port blocks used for a Tunnel has risen above \n        the value of  bCgnatTunnelPortBlocksUsedHighThreshold.')
bCgnatTunnelPortBlocksUsedLowThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 39406, 2, 1, 9, 0, 4)).setObjects(("BENU-CGNAT-STATS-MIB", "bCgnatThresholdTunnelId"), ("BENU-CGNAT-STATS-MIB", "bCgnatEvenPortsForTunnel"), ("BENU-CGNAT-STATS-MIB", "bCgnatOddPortsForTunnel"), ("BENU-CGNAT-STATS-MIB", "bCgnatPortParity"), ("BENU-CGNAT-STATS-MIB", "bCgnatTunnelPortBlocksUsedLowThreshold"))
if mibBuilder.loadTexts: bCgnatTunnelPortBlocksUsedLowThresholdReached.setStatus('current')
if mibBuilder.loadTexts: bCgnatTunnelPortBlocksUsedLowThresholdReached.setDescription('This notification signifies that the current number of \n        used CGNAT port blocks used for a Tunnel has fallen below \n        the value of  bCgnatTunnelPortBlocksUsedLowThreshold.')
mibBuilder.exportSymbols("BENU-CGNAT-STATS-MIB", bCgnatUnauthDnsFlowAllocFailureCount=bCgnatUnauthDnsFlowAllocFailureCount, bCgnatUnauthProfileName=bCgnatUnauthProfileName, bCgnatAuthFlowAddSuccessCount=bCgnatAuthFlowAddSuccessCount, bCgnatUnauthNonTcpSynPortAllocDrop=bCgnatUnauthNonTcpSynPortAllocDrop, bCgnatAuthDomainPublicIpZeroCount=bCgnatAuthDomainPublicIpZeroCount, bCgnatUnauthFlowDeleteRcvd=bCgnatUnauthFlowDeleteRcvd, bCgnatUnauthUdpPortAllocFailureCount=bCgnatUnauthUdpPortAllocFailureCount, bCgnatAuthUnsupportedL4DropCount=bCgnatAuthUnsupportedL4DropCount, bCgnatAuthNatFlowDelErrSubIdMismatch=bCgnatAuthNatFlowDelErrSubIdMismatch, bCgnatUnauthTimerAllocFailureCount=bCgnatUnauthTimerAllocFailureCount, bCgnatUnauthIcmpPortUnreachableSent=bCgnatUnauthIcmpPortUnreachableSent, bCgnatAuthUnsupportedActionIdRcvd=bCgnatAuthUnsupportedActionIdRcvd, bCgnatAuthPortRisingThresholdCrossedSubCount=bCgnatAuthPortRisingThresholdCrossedSubCount, bCgnatUnauthTcpPortAllocFailureCount=bCgnatUnauthTcpPortAllocFailureCount, bCgnatAuthStatsTable=bCgnatAuthStatsTable, bCgnatUnauthNatflowSyncFailureCount=bCgnatUnauthNatflowSyncFailureCount, bCgnatAuthProfileName=bCgnatAuthProfileName, bCgnatAuthDnsFlowAlloc=bCgnatAuthDnsFlowAlloc, bCgnatTunnelPortBlocksUsedHighThreshold=bCgnatTunnelPortBlocksUsedHighThreshold, bCgnatAuthDnsFlowReleaseFailureCount=bCgnatAuthDnsFlowReleaseFailureCount, bCgnatAuthStatsEntry=bCgnatAuthStatsEntry, bCgnatUnauthFlowDeletedSubClear=bCgnatUnauthFlowDeletedSubClear, bCgnatUnauthDomainPublicIpZeroCount=bCgnatUnauthDomainPublicIpZeroCount, bCgnatUnauthFlowDeleteFailureCount=bCgnatUnauthFlowDeleteFailureCount, bCgnatUnauthDnsFlowAlloc=bCgnatUnauthDnsFlowAlloc, bCgnatAuthIcmpIdReleaseFailureCount=bCgnatAuthIcmpIdReleaseFailureCount, bCgnatAuthIcmpIdReleaseSuccessCount=bCgnatAuthIcmpIdReleaseSuccessCount, bCgnatUnauthPortsThresholdExceededErr=bCgnatUnauthPortsThresholdExceededErr, bCgnatUnauthUdpPortReleaseFailureCount=bCgnatUnauthUdpPortReleaseFailureCount, bCgnatAuthFlowDeleteSuccessCount=bCgnatAuthFlowDeleteSuccessCount, bCgnatMIBObjects=bCgnatMIBObjects, bCgnatAuthUdpPortReleaseFailureCount=bCgnatAuthUdpPortReleaseFailureCount, bCgnatAuthFlowDeleteRcvd=bCgnatAuthFlowDeleteRcvd, bCgnatAuthUdpPortAllocFailureCount=bCgnatAuthUdpPortAllocFailureCount, bCgnatAuthFlowDeletedTimer=bCgnatAuthFlowDeletedTimer, bCgnatAuthIcmpPortUnreachableSent=bCgnatAuthIcmpPortUnreachableSent, bCgnatUnauthPortsNotAvailableDrop=bCgnatUnauthPortsNotAvailableDrop, bCgnatUnauthIcmpIdAllocFailureCount=bCgnatUnauthIcmpIdAllocFailureCount, bCgnatUnauthFlowDeleteFindFailure=bCgnatUnauthFlowDeleteFindFailure, bCgnatUnauthStatsTable=bCgnatUnauthStatsTable, bCgnatUnauthPortsThresholdExceededSent=bCgnatUnauthPortsThresholdExceededSent, bCgnatAuthFlowDeleteFindFailure=bCgnatAuthFlowDeleteFindFailure, bCgnatUnauthFlowDeleteSent=bCgnatUnauthFlowDeleteSent, bCgnatUnauthPortsThresholdExceededRcvd=bCgnatUnauthPortsThresholdExceededRcvd, bCgnatAuthSubscriberPortsFree=bCgnatAuthSubscriberPortsFree, bCgnatUnauthDnsFlowAllocSuccessCount=bCgnatUnauthDnsFlowAllocSuccessCount, bDslitePortBlockRisingThresholdCrossedTunCount=bDslitePortBlockRisingThresholdCrossedTunCount, bCgnatNotifObjects=bCgnatNotifObjects, bCgnatUnauthMaxIcmpIdsExceeded=bCgnatUnauthMaxIcmpIdsExceeded, bCgnatAuthDomainNoFreePortCount=bCgnatAuthDomainNoFreePortCount, bCgnatUnauthStatsEntry=bCgnatUnauthStatsEntry, bCgnatUnauthFlowAddSuccessCount=bCgnatUnauthFlowAddSuccessCount, bCgnatTunnelPortBlocksUsedHighThresholdReached=bCgnatTunnelPortBlocksUsedHighThresholdReached, bCgnatPortBlocksUsedHighThresholdReached=bCgnatPortBlocksUsedHighThresholdReached, bCgnatAuthPortsThresholdExceededInt=bCgnatAuthPortsThresholdExceededInt, bCgnatUnauthIcmpIdReleaseSuccessCount=bCgnatUnauthIcmpIdReleaseSuccessCount, bCgnatOddPortsForTunnel=bCgnatOddPortsForTunnel, bCgnatUnauthStatsIndex=bCgnatUnauthStatsIndex, bCgnatAuthTimerAllocFailureCount=bCgnatAuthTimerAllocFailureCount, bCgnatAuthPortsThresholdExceededSent=bCgnatAuthPortsThresholdExceededSent, bCgnatAuthDnsFlowReleaseSuccessCount=bCgnatAuthDnsFlowReleaseSuccessCount, bCgnatUnauthDnsFlowRelease=bCgnatUnauthDnsFlowRelease, bCgnatAuthPortsThresholdExceededErr=bCgnatAuthPortsThresholdExceededErr, bCgnatPortParity=bCgnatPortParity, bCgnatNotifications=bCgnatNotifications, bCgnatAuthNonTcpSynPortAllocDrop=bCgnatAuthNonTcpSynPortAllocDrop, bCgnatUnauthDnsFlowReleaseSuccessCount=bCgnatUnauthDnsFlowReleaseSuccessCount, bCgnatSubscriberMac=bCgnatSubscriberMac, bCgnatUnauthUdpPortReleaseSuccessCount=bCgnatUnauthUdpPortReleaseSuccessCount, bCgnatAuthIcmpIdAllocSuccessCount=bCgnatAuthIcmpIdAllocSuccessCount, bCgnatUnauthFlowDeletedSessionEnded=bCgnatUnauthFlowDeletedSessionEnded, bCgnatAuthFlowDeleteFailureCount=bCgnatAuthFlowDeleteFailureCount, bCgnatUnauthNatFlowDelErrSubIdMismatch=bCgnatUnauthNatFlowDelErrSubIdMismatch, bCgnatAuthUdpPortReleaseSuccessCount=bCgnatAuthUdpPortReleaseSuccessCount, bCgnatUnauthTcpPortReleaseFailureCount=bCgnatUnauthTcpPortReleaseFailureCount, bCgnatAuthUdpPortAllocSuccessCount=bCgnatAuthUdpPortAllocSuccessCount, bCgnatAuthFlowAddFailureCount=bCgnatAuthFlowAddFailureCount, bCgnatAuthFlowDeletedSessionEnded=bCgnatAuthFlowDeletedSessionEnded, bCgnatAuthPortsThresholdExceededRcvd=bCgnatAuthPortsThresholdExceededRcvd, bCgnatUnauthUdpPortAllocSuccessCount=bCgnatUnauthUdpPortAllocSuccessCount, bCgnatTotalPortBlocksPerSubscriber=bCgnatTotalPortBlocksPerSubscriber, benuCgnatStatsMIB=benuCgnatStatsMIB, bCgnatUnauthTcpPortReleaseSuccessCount=bCgnatUnauthTcpPortReleaseSuccessCount, bCgnatAuthFlowDeletedSubClear=bCgnatAuthFlowDeletedSubClear, bCgnatUnauthFlowAddFailureCount=bCgnatUnauthFlowAddFailureCount, bCgnatAuthStatsIndex=bCgnatAuthStatsIndex, bCgnatUnauthFlowDeletedTimer=bCgnatUnauthFlowDeletedTimer, bCgnatUnauthTcpPortAllocSuccessCount=bCgnatUnauthTcpPortAllocSuccessCount, bCgnatUnauthFlowDeleteSuccessCount=bCgnatUnauthFlowDeleteSuccessCount, bCgnatUnauthIcmpIdAllocSuccessCount=bCgnatUnauthIcmpIdAllocSuccessCount, bCgnatUnauthMaxCgnatPortsExceeded=bCgnatUnauthMaxCgnatPortsExceeded, bCgnatUnauthUnsupportedActionIdRcvd=bCgnatUnauthUnsupportedActionIdRcvd, bCgnatAuthDnsFlowRelease=bCgnatAuthDnsFlowRelease, bCgnatAuthTcpPortReleaseFailureCount=bCgnatAuthTcpPortReleaseFailureCount, bCgnatAuthMaxCgnatPortsExceeded=bCgnatAuthMaxCgnatPortsExceeded, bCgnatThresholdTunnelId=bCgnatThresholdTunnelId, bCgnatAuthFlowDeleteSent=bCgnatAuthFlowDeleteSent, bCgnatUnauthPortsThresholdExceededInt=bCgnatUnauthPortsThresholdExceededInt, bCgnatPortBlocksUsedHighThreshold=bCgnatPortBlocksUsedHighThreshold, bCgnatUnauthDomainNoFreePortCount=bCgnatUnauthDomainNoFreePortCount, bCgnatUnauthIcmpIdReleaseFailureCount=bCgnatUnauthIcmpIdReleaseFailureCount, bCgnatAuthDnsFlowAllocSuccessCount=bCgnatAuthDnsFlowAllocSuccessCount, bCgnatAuthNatFlowDelErrValidFlagNotSet=bCgnatAuthNatFlowDelErrValidFlagNotSet, bCgnatAuthMaxIcmpIdsExceeded=bCgnatAuthMaxIcmpIdsExceeded, bCgnatAuthSubscriberMac=bCgnatAuthSubscriberMac, bCgnatAuthIcmpIdAllocFailureCount=bCgnatAuthIcmpIdAllocFailureCount, bCgnatUnauthNatFlowDelErrValidFlagNotSet=bCgnatUnauthNatFlowDelErrValidFlagNotSet, bCgnatAuthTcpPortAllocFailureCount=bCgnatAuthTcpPortAllocFailureCount, bCgnatPortBlocksUsedLowThreshold=bCgnatPortBlocksUsedLowThreshold, bCgnatUnauthUnsupportedPrivatePortDropCount=bCgnatUnauthUnsupportedPrivatePortDropCount, bCgnatAuthTcpPortReleaseSuccessCount=bCgnatAuthTcpPortReleaseSuccessCount, bCgnatAuthPortUtilEntry=bCgnatAuthPortUtilEntry, bCgnatPortBlocksUsedLowThresholdReached=bCgnatPortBlocksUsedLowThresholdReached, PYSNMP_MODULE_ID=benuCgnatStatsMIB, bCgnatAuthNatflowSyncFailureCount=bCgnatAuthNatflowSyncFailureCount, bCgnatTunnelPortBlocksUsedLowThresholdReached=bCgnatTunnelPortBlocksUsedLowThresholdReached, bCgnatUnauthDnsFlowReleaseFailureCount=bCgnatUnauthDnsFlowReleaseFailureCount, bCgnatAuthUnsupportedPrivatePortDropCount=bCgnatAuthUnsupportedPrivatePortDropCount, bCgnatAuthPortUtilTable=bCgnatAuthPortUtilTable, bCgnatAuthPortUtilIndex=bCgnatAuthPortUtilIndex, bCgnatAuthPortsNotAvailableDrop=bCgnatAuthPortsNotAvailableDrop, bCgnatUnauthUnsupportedL4DropCount=bCgnatUnauthUnsupportedL4DropCount, bCgnatEvenPortsForTunnel=bCgnatEvenPortsForTunnel, bCgnatAuthTcpPortAllocSuccessCount=bCgnatAuthTcpPortAllocSuccessCount, bCgnatTunnelPortBlocksUsedLowThreshold=bCgnatTunnelPortBlocksUsedLowThreshold, bCgnatAuthDnsFlowAllocFailureCount=bCgnatAuthDnsFlowAllocFailureCount)
