#
# PySNMP MIB module MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/citrix/SDX-MIB-SMIV2-MIB
# Produced by pysmi-1.1.12 at Tue Jun 25 14:09:41 2024
# On host fv-az837-278 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, NotificationType, enterprises, ObjectIdentity, Integer32, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, TimeTicks, ModuleIdentity, MibIdentifier, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "enterprises", "ObjectIdentity", "Integer32", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "TimeTicks", "ModuleIdentity", "MibIdentifier", "iso", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
netScaler = ModuleIdentity((1, 3, 6, 1, 4, 1, 5951))
if mibBuilder.loadTexts: netScaler.setLastUpdated('201312050000Z')
if mibBuilder.loadTexts: netScaler.setOrganization('Citrix Systems, Inc.')
if mibBuilder.loadTexts: netScaler.setContactInfo('Citrix Technical Assistance Center\n\t\t\tPostal: Citrix Systems, Inc.\n\t\t\t\t851 West Cypress Creek Road\n\t\t\t\tFort Lauderdale, Florida  33309\n\t\t\t\tUnited States\n\t\t\tTel: +1-800-4-CITRIX (+1-800-424-8749)\n\t\t\tE-mail: customercare@citrix.com')
if mibBuilder.loadTexts: netScaler.setDescription('The enterprise specific MIB for NetScaler Management and Analytics System.')
sdxRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 6))
sdxEventGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 6, 1))
systemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 6, 2))
systemPlatform = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPlatform.setStatus('current')
if mibBuilder.loadTexts: systemPlatform.setDescription('Platform')
systemProduct = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemProduct.setStatus('current')
if mibBuilder.loadTexts: systemProduct.setDescription('Product Name')
systemBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBuildNumber.setStatus('current')
if mibBuilder.loadTexts: systemBuildNumber.setDescription('Build Number')
systemSvmIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSvmIPAddressType.setStatus('current')
if mibBuilder.loadTexts: systemSvmIPAddressType.setDescription('Type of systemSvmIPAddress')
systemSvmIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSvmIPAddress.setStatus('current')
if mibBuilder.loadTexts: systemSvmIPAddress.setDescription('Management Service IP Address')
systemXenIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemXenIPAddressType.setStatus('current')
if mibBuilder.loadTexts: systemXenIPAddressType.setDescription('Type of systemXenIPAddress')
systemXenIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemXenIPAddress.setStatus('current')
if mibBuilder.loadTexts: systemXenIPAddress.setDescription('XenServer IP Address')
systemNetmaskType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNetmaskType.setStatus('current')
if mibBuilder.loadTexts: systemNetmaskType.setDescription('Type of systemNetmask')
systemNetmask = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNetmask.setStatus('current')
if mibBuilder.loadTexts: systemNetmask.setDescription('Netmask')
systemGatewayType = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemGatewayType.setStatus('current')
if mibBuilder.loadTexts: systemGatewayType.setDescription('Type of systemGateway')
systemGateway = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemGateway.setStatus('current')
if mibBuilder.loadTexts: systemGateway.setDescription('Gateway ')
systemNetworkInterface = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNetworkInterface.setStatus('current')
if mibBuilder.loadTexts: systemNetworkInterface.setDescription('Interface on which management needs to be enabled')
systemDns = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDns.setStatus('current')
if mibBuilder.loadTexts: systemDns.setDescription('DNS Server')
systemSysId = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSysId.setStatus('current')
if mibBuilder.loadTexts: systemSysId.setDescription('System Id')
systemSerial = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSerial.setStatus('current')
if mibBuilder.loadTexts: systemSerial.setDescription('Serial Number')
systemCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCurrentTime.setStatus('current')
if mibBuilder.loadTexts: systemCurrentTime.setDescription('Current Time')
systemUptime = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUptime.setStatus('current')
if mibBuilder.loadTexts: systemUptime.setDescription('Uptime')
systemBiosVersion = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBiosVersion.setStatus('current')
if mibBuilder.loadTexts: systemBiosVersion.setDescription('BIOS Version')
systemMaxThroughput = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMaxThroughput.setStatus('current')
if mibBuilder.loadTexts: systemMaxThroughput.setDescription('Maximum Throughput in Mbps')
systemAvailableThroughput = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAvailableThroughput.setStatus('current')
if mibBuilder.loadTexts: systemAvailableThroughput.setDescription('Available Throughput in Mbps')
systemHostId = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHostId.setStatus('current')
if mibBuilder.loadTexts: systemHostId.setDescription('Host Id')
systemCustomID = MibScalar((1, 3, 6, 1, 4, 1, 5951, 6, 2, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCustomID.setStatus('current')
if mibBuilder.loadTexts: systemCustomID.setDescription('Custom identification number for appliance')
sysHealthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000))
hardwareResourceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1), )
if mibBuilder.loadTexts: hardwareResourceTable.setStatus('current')
if mibBuilder.loadTexts: hardwareResourceTable.setDescription('hardwareResourcetable')
hardwareResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1), ).setIndexNames((0, "MIB", "hardwareResourceName"), (0, "MIB", "hardwareResourceHostIPAddressType"), (0, "MIB", "hardwareResourceHostIPAddress"))
if mibBuilder.loadTexts: hardwareResourceEntry.setStatus('current')
if mibBuilder.loadTexts: hardwareResourceEntry.setDescription('...')
hardwareResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareResourceName.setStatus('current')
if mibBuilder.loadTexts: hardwareResourceName.setDescription('Resource name')
hardwareResourceHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareResourceHostIPAddressType.setStatus('current')
if mibBuilder.loadTexts: hardwareResourceHostIPAddressType.setDescription('Type of hardwareResourceHostIPAddress')
hardwareResourceHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareResourceHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: hardwareResourceHostIPAddress.setDescription('Host IP Address')
hardwareResourceCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareResourceCurrentValue.setStatus('current')
if mibBuilder.loadTexts: hardwareResourceCurrentValue.setDescription('Current value of the resource')
hardwareResourceExpectedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareResourceExpectedValue.setStatus('current')
if mibBuilder.loadTexts: hardwareResourceExpectedValue.setDescription('Expected value of the resource')
hardwareResourceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareResourceUnit.setStatus('current')
if mibBuilder.loadTexts: hardwareResourceUnit.setDescription('Measurement unit for the resource')
hardwareResourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareResourceStatus.setStatus('current')
if mibBuilder.loadTexts: hardwareResourceStatus.setDescription('Health status of the resource - OK/ERROR')
softwareResourceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2), )
if mibBuilder.loadTexts: softwareResourceTable.setStatus('current')
if mibBuilder.loadTexts: softwareResourceTable.setDescription('softwareResourcetable')
softwareResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1), ).setIndexNames((0, "MIB", "softwareResourceName"), (0, "MIB", "softwareResourceHostIPAddressType"), (0, "MIB", "softwareResourceHostIPAddress"))
if mibBuilder.loadTexts: softwareResourceEntry.setStatus('current')
if mibBuilder.loadTexts: softwareResourceEntry.setDescription('...')
softwareResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareResourceName.setStatus('current')
if mibBuilder.loadTexts: softwareResourceName.setDescription('Resource name')
softwareResourceHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareResourceHostIPAddressType.setStatus('current')
if mibBuilder.loadTexts: softwareResourceHostIPAddressType.setDescription('Type of softwareResourceHostIPAddress')
softwareResourceHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareResourceHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: softwareResourceHostIPAddress.setDescription('Host IP Address')
softwareResourceCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareResourceCurrentValue.setStatus('current')
if mibBuilder.loadTexts: softwareResourceCurrentValue.setDescription('Current value of the resource')
softwareResourceExpectedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareResourceExpectedValue.setStatus('current')
if mibBuilder.loadTexts: softwareResourceExpectedValue.setDescription('Expected value of the resource')
softwareResourceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareResourceUnit.setStatus('current')
if mibBuilder.loadTexts: softwareResourceUnit.setDescription('Measurement unit for the resource')
softwareResourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareResourceStatus.setStatus('current')
if mibBuilder.loadTexts: softwareResourceStatus.setDescription('Health status of the resource - OK/ERROR')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3), )
if mibBuilder.loadTexts: diskTable.setStatus('current')
if mibBuilder.loadTexts: diskTable.setDescription('disktable')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1), ).setIndexNames((0, "MIB", "diskName"), (0, "MIB", "diskHostIPAddressType"), (0, "MIB", "diskHostIPAddress"))
if mibBuilder.loadTexts: diskEntry.setStatus('current')
if mibBuilder.loadTexts: diskEntry.setDescription('...')
diskName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskName.setStatus('current')
if mibBuilder.loadTexts: diskName.setDescription('Name of the Disk')
diskHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskHostIPAddressType.setStatus('current')
if mibBuilder.loadTexts: diskHostIPAddressType.setDescription('Type of diskHostIPAddress')
diskHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: diskHostIPAddress.setDescription('Host IP Address')
diskTransactionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTransactionRate.setStatus('current')
if mibBuilder.loadTexts: diskTransactionRate.setDescription('Transactions per second')
diskBlockReadRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskBlockReadRate.setStatus('current')
if mibBuilder.loadTexts: diskBlockReadRate.setDescription('Blocks read per second')
diskBlockWriteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskBlockWriteRate.setStatus('current')
if mibBuilder.loadTexts: diskBlockWriteRate.setDescription('Blocks written per second')
diskTotalBlocksRead = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalBlocksRead.setStatus('current')
if mibBuilder.loadTexts: diskTotalBlocksRead.setDescription('Total blocks read')
diskTotalBlocksWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalBlocksWritten.setStatus('current')
if mibBuilder.loadTexts: diskTotalBlocksWritten.setDescription('Total blocks written')
diskUtilized = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskUtilized.setStatus('current')
if mibBuilder.loadTexts: diskUtilized.setDescription('Utilization of the disk (bytes)')
diskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSize.setStatus('current')
if mibBuilder.loadTexts: diskSize.setDescription('Size of the disk (bytes)')
diskBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 3, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskBayNumber.setStatus('current')
if mibBuilder.loadTexts: diskBayNumber.setDescription('Bay number')
srTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4), )
if mibBuilder.loadTexts: srTable.setStatus('current')
if mibBuilder.loadTexts: srTable.setDescription('srtable')
srEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1), ).setIndexNames((0, "MIB", "srName"), (0, "MIB", "srBayNumber"), (0, "MIB", "srHostIPAddressType"), (0, "MIB", "srHostIPAddress"))
if mibBuilder.loadTexts: srEntry.setStatus('current')
if mibBuilder.loadTexts: srEntry.setDescription('...')
srName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srName.setStatus('current')
if mibBuilder.loadTexts: srName.setDescription('Name of the storage repository')
srBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srBayNumber.setStatus('current')
if mibBuilder.loadTexts: srBayNumber.setDescription('Bay number')
srHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srHostIPAddressType.setStatus('current')
if mibBuilder.loadTexts: srHostIPAddressType.setDescription('Type of srHostIPAddress')
srHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: srHostIPAddress.setDescription('Host IP Address')
srUtilized = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srUtilized.setStatus('current')
if mibBuilder.loadTexts: srUtilized.setDescription('Physical utilization of the storage repository')
srSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srSize.setStatus('current')
if mibBuilder.loadTexts: srSize.setDescription('Physical size of the storage repository')
srStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srStatus.setStatus('current')
if mibBuilder.loadTexts: srStatus.setDescription('Status of the storage repository - OK/ERROR')
interfaceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5), )
if mibBuilder.loadTexts: interfaceTable.setStatus('current')
if mibBuilder.loadTexts: interfaceTable.setDescription('interfacetable')
interfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1), ).setIndexNames((0, "MIB", "interfaceMappedPort"), (0, "MIB", "interfaceHostIPAddressType"), (0, "MIB", "interfaceHostIPAddress"))
if mibBuilder.loadTexts: interfaceEntry.setStatus('current')
if mibBuilder.loadTexts: interfaceEntry.setDescription('...')
interfacePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacePort.setStatus('current')
if mibBuilder.loadTexts: interfacePort.setDescription('Port Name Ex: 10/1')
interfaceHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceHostIPAddressType.setStatus('current')
if mibBuilder.loadTexts: interfaceHostIPAddressType.setDescription('Type of interfaceHostIPAddress')
interfaceHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: interfaceHostIPAddress.setDescription('Host IP Address')
interfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceState.setStatus('current')
if mibBuilder.loadTexts: interfaceState.setDescription('State of the Interface - UP/DOWN')
interfaceRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxPackets.setStatus('current')
if mibBuilder.loadTexts: interfaceRxPackets.setDescription('Received packets')
interfaceTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxPackets.setStatus('current')
if mibBuilder.loadTexts: interfaceTxPackets.setDescription('Transmitted packets')
interfaceRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxBytes.setStatus('current')
if mibBuilder.loadTexts: interfaceRxBytes.setDescription('Received bytes')
interfaceTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxBytes.setStatus('current')
if mibBuilder.loadTexts: interfaceTxBytes.setDescription('Transmitted bytes')
interfaceRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxErrors.setStatus('current')
if mibBuilder.loadTexts: interfaceRxErrors.setDescription('Receiving errors')
interfaceTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxErrors.setStatus('current')
if mibBuilder.loadTexts: interfaceTxErrors.setDescription('Transmission errors')
interfaceVfTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceVfTotal.setStatus('current')
if mibBuilder.loadTexts: interfaceVfTotal.setDescription('Total Virtual Functions')
interfaceVfAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceVfAssigned.setStatus('current')
if mibBuilder.loadTexts: interfaceVfAssigned.setDescription('Assigned Virtual Functions')
interfaceMappedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 2, 1000, 5, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceMappedPort.setStatus('current')
if mibBuilder.loadTexts: interfaceMappedPort.setDescription('Mapped Port Name Ex: eth0')
deviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5951, 6, 3))
xenTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1), )
if mibBuilder.loadTexts: xenTable.setStatus('current')
if mibBuilder.loadTexts: xenTable.setDescription('xentable')
xenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1), ).setIndexNames((0, "MIB", "xenIpAddressType"), (0, "MIB", "xenIpAddress"))
if mibBuilder.loadTexts: xenEntry.setStatus('current')
if mibBuilder.loadTexts: xenEntry.setDescription('...')
xenIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenIpAddressType.setStatus('current')
if mibBuilder.loadTexts: xenIpAddressType.setDescription('Type of xenIpAddress')
xenIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenIpAddress.setStatus('current')
if mibBuilder.loadTexts: xenIpAddress.setDescription('IP Address for this managed device')
xenHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenHostname.setStatus('current')
if mibBuilder.loadTexts: xenHostname.setDescription('Assign hostname to managed device, if this is not provided, name will be set as host name ')
xenDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenDescription.setStatus('current')
if mibBuilder.loadTexts: xenDescription.setDescription('Description of managed device')
xenVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenVersion.setStatus('current')
if mibBuilder.loadTexts: xenVersion.setDescription('Device Version')
xenUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenUuid.setStatus('current')
if mibBuilder.loadTexts: xenUuid.setDescription('UUID of host')
xenNumberOfCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenNumberOfCPU.setStatus('current')
if mibBuilder.loadTexts: xenNumberOfCPU.setDescription('Number of total CPU of host')
xenCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenCpuUsage.setStatus('current')
if mibBuilder.loadTexts: xenCpuUsage.setDescription('CPU Usage (%) of host')
xenMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: xenMemoryTotal.setDescription('Total memory of host in MB')
xenMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenMemoryFree.setStatus('current')
if mibBuilder.loadTexts: xenMemoryFree.setDescription('Free memory available (MB) in host')
xenMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: xenMemoryUsage.setDescription('Memory Usage (%) of host')
xenTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenTx.setStatus('current')
if mibBuilder.loadTexts: xenTx.setDescription('Out Throughput (Mbps) of host')
xenRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenRx.setStatus('current')
if mibBuilder.loadTexts: xenRx.setDescription('In Throughput (Mbps) of host')
xenUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenUptime.setStatus('current')
if mibBuilder.loadTexts: xenUptime.setDescription('Uptime of device')
xenSslCoresTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenSslCoresTotal.setStatus('current')
if mibBuilder.loadTexts: xenSslCoresTotal.setDescription('Total SSL Cores available in host')
xenIscsiIQN = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenIscsiIQN.setStatus('current')
if mibBuilder.loadTexts: xenIscsiIQN.setDescription('iSCSI IQN')
xenEdition = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenEdition.setStatus('current')
if mibBuilder.loadTexts: xenEdition.setDescription('XenServer Edition')
xenExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenExpiry.setStatus('current')
if mibBuilder.loadTexts: xenExpiry.setDescription('XenServer Expiry')
xenProductCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenProductCode.setStatus('current')
if mibBuilder.loadTexts: xenProductCode.setDescription('XenServer Product Code')
xenSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenSerialNumber.setStatus('current')
if mibBuilder.loadTexts: xenSerialNumber.setDescription('Device Serial Number')
xenVersionLong = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenVersionLong.setStatus('current')
if mibBuilder.loadTexts: xenVersionLong.setDescription('XenServer Version (full text)')
xenVersionShort = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenVersionShort.setStatus('current')
if mibBuilder.loadTexts: xenVersionShort.setDescription('XenServer Version')
xenBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenBuildNumber.setStatus('current')
if mibBuilder.loadTexts: xenBuildNumber.setDescription('XenServer Build Number')
xenBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 1, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xenBuildDate.setStatus('current')
if mibBuilder.loadTexts: xenBuildDate.setDescription('XenServer Build Date')
netscalerTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2), )
if mibBuilder.loadTexts: netscalerTable.setStatus('current')
if mibBuilder.loadTexts: netscalerTable.setDescription('netscalertable')
netscalerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1), ).setIndexNames((0, "MIB", "nsIpAddressType"), (0, "MIB", "nsIpAddress"), (0, "MIB", "nsHostIPAddressType"), (0, "MIB", "nsHostIPAddress"))
if mibBuilder.loadTexts: netscalerEntry.setStatus('current')
if mibBuilder.loadTexts: netscalerEntry.setDescription('...')
nsIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpAddressType.setStatus('current')
if mibBuilder.loadTexts: nsIpAddressType.setDescription('Type of nsIpAddress')
nsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpAddress.setStatus('current')
if mibBuilder.loadTexts: nsIpAddress.setDescription('IP Address for this managed device')
nsHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHostIPAddressType.setStatus('current')
if mibBuilder.loadTexts: nsHostIPAddressType.setDescription('Type of nsHostIPAddress')
nsHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: nsHostIPAddress.setDescription('Host IPAddress where VM is provisioned')
nsProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsProfileName.setStatus('current')
if mibBuilder.loadTexts: nsProfileName.setDescription('Device Profile Name that is attached with this managed device')
nsName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsName.setStatus('current')
if mibBuilder.loadTexts: nsName.setDescription('Name of managed device')
nsNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNetmaskType.setStatus('current')
if mibBuilder.loadTexts: nsNetmaskType.setDescription('Type of nsNetmask')
nsNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNetmask.setStatus('current')
if mibBuilder.loadTexts: nsNetmask.setDescription('Netmask of managed device')
nsGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsGatewayType.setStatus('current')
if mibBuilder.loadTexts: nsGatewayType.setDescription('Type of nsGateway')
nsGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsGateway.setStatus('current')
if mibBuilder.loadTexts: nsGateway.setDescription('Default Gateway of managed device')
nsHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHostname.setStatus('current')
if mibBuilder.loadTexts: nsHostname.setDescription('Assign hostname to managed device, if this is not provided, name will be set as host name ')
nsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsDescription.setStatus('current')
if mibBuilder.loadTexts: nsDescription.setDescription('Description of managed device')
nsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVersion.setStatus('current')
if mibBuilder.loadTexts: nsVersion.setDescription('Device Version')
nsUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsUuid.setStatus('current')
if mibBuilder.loadTexts: nsUuid.setDescription('UUID of VM Instance')
nsInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsInstanceState.setStatus('current')
if mibBuilder.loadTexts: nsInstanceState.setDescription('State of device, UP only if device accessible')
nsVirtualFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVirtualFunctions.setStatus('current')
if mibBuilder.loadTexts: nsVirtualFunctions.setDescription('Virtual Functions assigned to VM Instance')
nsSslVirtualFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSslVirtualFunctions.setStatus('current')
if mibBuilder.loadTexts: nsSslVirtualFunctions.setDescription('SSL Virtual Functions assigned to VM Instance')
nsVmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVmState.setStatus('current')
if mibBuilder.loadTexts: nsVmState.setDescription('State of Virtual Machine (Running | Halted)')
nsNumberOfCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfCPU.setStatus('current')
if mibBuilder.loadTexts: nsNumberOfCPU.setDescription('Number of CPU that is assigned to VM Instance')
nsVmMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVmMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: nsVmMemoryTotal.setDescription('Total Memory of VM Instance in MB')
nsUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsUptime.setStatus('current')
if mibBuilder.loadTexts: nsUptime.setDescription('Uptime of device')
nsNumberOfSSLCores = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfSSLCores.setStatus('current')
if mibBuilder.loadTexts: nsNumberOfSSLCores.setDescription('Assign number of ssl virtual functions to VM Instance')
nsCpuCoreMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCpuCoreMgmt.setStatus('current')
if mibBuilder.loadTexts: nsCpuCoreMgmt.setDescription('Management CPU cores assigned to VM Instance')
nsCpuCorePE = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsCpuCorePE.setStatus('current')
if mibBuilder.loadTexts: nsCpuCorePE.setDescription('Packet Engine cores assigned to VM Instance')
nsVmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVmDescription.setStatus('current')
if mibBuilder.loadTexts: nsVmDescription.setDescription('Description')
nsThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsThroughput.setStatus('current')
if mibBuilder.loadTexts: nsThroughput.setDescription('Assign throughput in Mbps to VM Instance')
nsNumberOfCores = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfCores.setStatus('current')
if mibBuilder.loadTexts: nsNumberOfCores.setDescription('Number of cores that are assigned to VM Instance')
nsNsCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsCPUUsage.setStatus('current')
if mibBuilder.loadTexts: nsNsCPUUsage.setDescription('CPU Usage (%) of NetScaler Instance')
nsNsMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: nsNsMemoryUsage.setDescription('Memory Usage (%)')
nsNsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsTx.setStatus('current')
if mibBuilder.loadTexts: nsNsTx.setDescription('Out Throughput of NetScaler Instance in Mbps')
nsNsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsRx.setStatus('current')
if mibBuilder.loadTexts: nsNsRx.setDescription('In Throughput of NetScaler Instance in Mbps')
nsHttpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHttpReq.setStatus('current')
if mibBuilder.loadTexts: nsHttpReq.setDescription('HTTP Requests/second')
nsUpsince = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsUpsince.setStatus('current')
if mibBuilder.loadTexts: nsUpsince.setDescription('Upsince of managed device')
nsLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsLicense.setStatus('current')
if mibBuilder.loadTexts: nsLicense.setDescription('Feature License for NetScaler Instance, needs to be set while provisioning (standard, enterprise, platinum)')
nsHaMasterState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaMasterState.setStatus('current')
if mibBuilder.loadTexts: nsHaMasterState.setDescription('Master State (Primary/Secondary)')
nsHaIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 42), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaIPAddressType.setStatus('current')
if mibBuilder.loadTexts: nsHaIPAddressType.setDescription('Type of nsHaIPAddress')
nsHaIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 43), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaIPAddress.setStatus('current')
if mibBuilder.loadTexts: nsHaIPAddress.setDescription('Peer IP Address')
nsNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNodeState.setStatus('current')
if mibBuilder.loadTexts: nsNodeState.setDescription('Node State of NetScaler Instance')
nsHaSync = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsHaSync.setStatus('current')
if mibBuilder.loadTexts: nsHaSync.setDescription('HA Synchronization State')
nsPps = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPps.setStatus('current')
if mibBuilder.loadTexts: nsPps.setDescription('Assign packets per seconds to NetScaler Instance')
nsNumberOfSslCoresUp = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumberOfSslCoresUp.setStatus('current')
if mibBuilder.loadTexts: nsNumberOfSslCoresUp.setDescription('Number of SSL Cores Up')
nsIfOby1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 48), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfOby1.setStatus('current')
if mibBuilder.loadTexts: nsIfOby1.setDescription('Network 0/1 on VM Instance')
nsIf0by2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIf0by2.setStatus('current')
if mibBuilder.loadTexts: nsIf0by2.setDescription('Network 0/2 on VM Instance')
nsNsVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsVLANId.setStatus('current')
if mibBuilder.loadTexts: nsNsVLANId.setDescription('VLAN Id')
nsNsVLANTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNsVLANTagged.setStatus('current')
if mibBuilder.loadTexts: nsNsVLANTagged.setDescription('NSVLAN Tagged')
nsVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVlanType.setStatus('current')
if mibBuilder.loadTexts: nsVlanType.setDescription('VLAN Type, NS or L2 VLAN')
cloudBridgeInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3), )
if mibBuilder.loadTexts: cloudBridgeInstanceTable.setStatus('current')
if mibBuilder.loadTexts: cloudBridgeInstanceTable.setDescription('cloudBridgeInstancetable')
cloudBridgeInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1), ).setIndexNames((0, "MIB", "cbIpAddressType"), (0, "MIB", "cbIpAddress"), (0, "MIB", "cbHostIPAddressType"), (0, "MIB", "cbHostIPAddress"))
if mibBuilder.loadTexts: cloudBridgeInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: cloudBridgeInstanceEntry.setDescription('...')
cbIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cbIpAddressType.setDescription('Type of cbIpAddress')
cbIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbIpAddress.setStatus('current')
if mibBuilder.loadTexts: cbIpAddress.setDescription('IP Address for this managed device')
cbHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbHostIPAddressType.setStatus('current')
if mibBuilder.loadTexts: cbHostIPAddressType.setDescription('Type of cbHostIPAddress')
cbHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: cbHostIPAddress.setDescription('Host IPAddress where VM is provisioned')
cbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbProfileName.setStatus('current')
if mibBuilder.loadTexts: cbProfileName.setDescription('Device Profile Name that is attached with this managed device')
cbName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbName.setStatus('current')
if mibBuilder.loadTexts: cbName.setDescription('Name of managed device')
cbNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNetmaskType.setStatus('current')
if mibBuilder.loadTexts: cbNetmaskType.setDescription('Type of cbNetmask')
cbNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNetmask.setStatus('current')
if mibBuilder.loadTexts: cbNetmask.setDescription('Netmask of managed device')
cbGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbGatewayType.setStatus('current')
if mibBuilder.loadTexts: cbGatewayType.setDescription('Type of cbGateway')
cbGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbGateway.setStatus('current')
if mibBuilder.loadTexts: cbGateway.setDescription('Default Gateway of managed device')
cbHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbHostname.setStatus('current')
if mibBuilder.loadTexts: cbHostname.setDescription('Assign hostname to managed device, if this is not provided, name will be set as host name ')
cbDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbDescription.setStatus('current')
if mibBuilder.loadTexts: cbDescription.setDescription('Description of managed device')
cbVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVersion.setStatus('current')
if mibBuilder.loadTexts: cbVersion.setDescription('Device Version')
cbInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbInstanceState.setStatus('current')
if mibBuilder.loadTexts: cbInstanceState.setDescription('State of device, UP only if device accessible')
cbUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbUuid.setStatus('current')
if mibBuilder.loadTexts: cbUuid.setDescription('UUID of VM Instance')
cbVirtualFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVirtualFunctions.setStatus('current')
if mibBuilder.loadTexts: cbVirtualFunctions.setDescription('Virtual Functions assigned to VM Instance')
cbVmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmState.setStatus('current')
if mibBuilder.loadTexts: cbVmState.setDescription('State of Virtual Machine (Running | Halted)')
cbNumberOfCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNumberOfCPU.setStatus('current')
if mibBuilder.loadTexts: cbNumberOfCPU.setDescription('Number of CPU that is assigned to VM Instance')
cbVmCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmCPUUsage.setStatus('current')
if mibBuilder.loadTexts: cbVmCPUUsage.setDescription('CPU Usage (%) of VM Instance')
cbVmMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: cbVmMemoryTotal.setDescription('Total Memory of VM Instance in MB')
cbVmMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmMemoryFree.setStatus('current')
if mibBuilder.loadTexts: cbVmMemoryFree.setDescription('Free Memory (MB) available in VM Instance')
cbVmMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbVmMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: cbVmMemoryUsage.setDescription('Memory Usage (%) of VM Instance')
cbUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbUptime.setStatus('current')
if mibBuilder.loadTexts: cbUptime.setDescription('Uptime of device')
cbDiskAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbDiskAllocation.setStatus('current')
if mibBuilder.loadTexts: cbDiskAllocation.setDescription('Disk allocation for VM Instance')
cbAPAIPADDRESSType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 47), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAIPADDRESSType.setStatus('current')
if mibBuilder.loadTexts: cbAPAIPADDRESSType.setDescription('Type of cbAPAIPADDRESS')
cbAPAIPADDRESS = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 48), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAIPADDRESS.setStatus('current')
if mibBuilder.loadTexts: cbAPAIPADDRESS.setDescription('aPA IP Address')
cbAPANetMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 49), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPANetMaskType.setStatus('current')
if mibBuilder.loadTexts: cbAPANetMaskType.setDescription('Type of cbAPANetMask')
cbAPANetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 50), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPANetMask.setStatus('current')
if mibBuilder.loadTexts: cbAPANetMask.setDescription('aPA Netmask')
cbAPAGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 51), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAGatewayType.setStatus('current')
if mibBuilder.loadTexts: cbAPAGatewayType.setDescription('Type of cbAPAGateway')
cbAPAGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 52), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAPAGateway.setStatus('current')
if mibBuilder.loadTexts: cbAPAGateway.setDescription('aPA Gateway')
cbPluginIPADDRESSType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 53), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbPluginIPADDRESSType.setStatus('current')
if mibBuilder.loadTexts: cbPluginIPADDRESSType.setDescription('Type of cbPluginIPADDRESS')
cbPluginIPADDRESS = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 54), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbPluginIPADDRESS.setStatus('current')
if mibBuilder.loadTexts: cbPluginIPADDRESS.setDescription('Plugin IP Address')
cbMgmtIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 57), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbMgmtIPAddressType.setStatus('current')
if mibBuilder.loadTexts: cbMgmtIPAddressType.setDescription('Type of cbMgmtIPAddress')
cbMgmtIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 3, 1, 58), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbMgmtIPAddress.setStatus('current')
if mibBuilder.loadTexts: cbMgmtIPAddress.setDescription('Management IP Address for this Managed Device')
cloudBridgeAcceleratorTable = MibTable((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4), )
if mibBuilder.loadTexts: cloudBridgeAcceleratorTable.setStatus('current')
if mibBuilder.loadTexts: cloudBridgeAcceleratorTable.setDescription('cloudBridgeAcceleratortable')
cloudBridgeAcceleratorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1), ).setIndexNames((0, "MIB", "cbAcceleratorIpAddressType"), (0, "MIB", "cbAcceleratorIpAddress"), (0, "MIB", "cbAcceleratorHostIPAddressType"), (0, "MIB", "cbAcceleratorHostIPAddress"))
if mibBuilder.loadTexts: cloudBridgeAcceleratorEntry.setStatus('current')
if mibBuilder.loadTexts: cloudBridgeAcceleratorEntry.setDescription('...')
cbAcceleratorIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorIpAddressType.setDescription('Type of cbAcceleratorIpAddress')
cbAcceleratorIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorIpAddress.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorIpAddress.setDescription('IP Address for this managed device')
cbAcceleratorHostIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorHostIPAddressType.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorHostIPAddressType.setDescription('Type of cbAcceleratorHostIPAddress')
cbAcceleratorHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorHostIPAddress.setDescription('Host IPAddress where VM is provisioned')
cbAcceleratorProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorProfileName.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorProfileName.setDescription('Device Profile Name that is attached with this managed device')
cbAcceleratorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorName.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorName.setDescription('Name of managed device')
cbAcceleratorNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorNetmaskType.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorNetmaskType.setDescription('Type of cbAcceleratorNetmask')
cbAcceleratorNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorNetmask.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorNetmask.setDescription('Netmask of managed device')
cbAcceleratorGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorGatewayType.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorGatewayType.setDescription('Type of cbAcceleratorGateway')
cbAcceleratorGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorGateway.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorGateway.setDescription('Default Gateway of managed device')
cbAcceleratorHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorHostname.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorHostname.setDescription('Assign hostname to managed device, if this is not provided, name will be set as host name ')
cbAcceleratorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorDescription.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorDescription.setDescription('Description of managed device')
cbAcceleratorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVersion.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorVersion.setDescription('Device Version')
cbAcceleratorInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorInstanceState.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorInstanceState.setDescription('State of device, UP only if device accessible')
cbAcceleratorUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorUuid.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorUuid.setDescription('UUID of VM Instance')
cbAcceleratorVmState = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmState.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorVmState.setDescription('State of Virtual Machine (Running | Halted)')
cbAcceleratorNumberOfCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorNumberOfCPU.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorNumberOfCPU.setDescription('Number of CPU that is assigned to VM Instance')
cbAcceleratorVmCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmCPUUsage.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorVmCPUUsage.setDescription('CPU Usage (%) of VM Instance')
cbAcceleratorVmMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorVmMemoryTotal.setDescription('Total Memory of VM Instance in MB')
cbAcceleratorVmMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmMemoryFree.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorVmMemoryFree.setDescription('Free Memory (MB) available in VM Instance')
cbAcceleratorVmMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorVmMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorVmMemoryUsage.setDescription('Memory Usage (%) of VM Instance')
cbAcceleratorUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorUptime.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorUptime.setDescription('Uptime of device')
cbAcceleratorIpList = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorIpList.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorIpList.setDescription('Specify the list of CloudBridge IPs for which this device will act as a CloudBridge Accelerator.')
cbAcceleratorMgmtIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 38), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorMgmtIPAddressType.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorMgmtIPAddressType.setDescription('Type of cbAcceleratorMgmtIPAddress')
cbAcceleratorMgmtIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5951, 6, 3, 4, 1, 39), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbAcceleratorMgmtIPAddress.setStatus('current')
if mibBuilder.loadTexts: cbAcceleratorMgmtIPAddress.setDescription('Management IP Address for this CloudBridge Accelerator Instance')
mibBuilder.exportSymbols("MIB", xenUuid=xenUuid, systemAvailableThroughput=systemAvailableThroughput, xenExpiry=xenExpiry, diskBlockWriteRate=diskBlockWriteRate, nsNumberOfSSLCores=nsNumberOfSSLCores, nsNumberOfCPU=nsNumberOfCPU, interfaceRxPackets=interfaceRxPackets, srName=srName, nsUuid=nsUuid, diskHostIPAddress=diskHostIPAddress, systemSvmIPAddressType=systemSvmIPAddressType, cbUuid=cbUuid, softwareResourceHostIPAddressType=softwareResourceHostIPAddressType, cbAcceleratorNetmask=cbAcceleratorNetmask, softwareResourceExpectedValue=softwareResourceExpectedValue, cbUptime=cbUptime, hardwareResourceHostIPAddressType=hardwareResourceHostIPAddressType, xenEdition=xenEdition, interfaceRxErrors=interfaceRxErrors, nsNodeState=nsNodeState, cbAcceleratorVmMemoryUsage=cbAcceleratorVmMemoryUsage, cbAcceleratorMgmtIPAddressType=cbAcceleratorMgmtIPAddressType, cbName=cbName, systemGateway=systemGateway, diskBayNumber=diskBayNumber, hardwareResourceTable=hardwareResourceTable, systemNetmaskType=systemNetmaskType, hardwareResourceExpectedValue=hardwareResourceExpectedValue, systemSysId=systemSysId, softwareResourceUnit=softwareResourceUnit, cbGatewayType=cbGatewayType, systemGatewayType=systemGatewayType, systemNetworkInterface=systemNetworkInterface, cbMgmtIPAddress=cbMgmtIPAddress, cbAcceleratorInstanceState=cbAcceleratorInstanceState, nsProfileName=nsProfileName, systemDns=systemDns, nsName=nsName, xenVersionLong=xenVersionLong, cbAcceleratorVersion=cbAcceleratorVersion, systemCustomID=systemCustomID, nsNetmaskType=nsNetmaskType, cbAPAIPADDRESS=cbAPAIPADDRESS, cbAPANetMaskType=cbAPANetMaskType, cbAcceleratorMgmtIPAddress=cbAcceleratorMgmtIPAddress, cbAPANetMask=cbAPANetMask, nsGateway=nsGateway, nsVmState=nsVmState, srBayNumber=srBayNumber, cbDiskAllocation=cbDiskAllocation, diskUtilized=diskUtilized, nsVersion=nsVersion, systemNetmask=systemNetmask, systemUptime=systemUptime, diskBlockReadRate=diskBlockReadRate, diskSize=diskSize, sdxRoot=sdxRoot, systemBiosVersion=systemBiosVersion, cbAPAGatewayType=cbAPAGatewayType, cbGateway=cbGateway, sysHealthGroup=sysHealthGroup, xenDescription=xenDescription, nsDescription=nsDescription, deviceGroup=deviceGroup, netScaler=netScaler, cbVmMemoryUsage=cbVmMemoryUsage, interfaceTxBytes=interfaceTxBytes, cbAcceleratorProfileName=cbAcceleratorProfileName, netscalerTable=netscalerTable, nsThroughput=nsThroughput, cbAcceleratorIpAddress=cbAcceleratorIpAddress, nsHaIPAddress=nsHaIPAddress, cloudBridgeAcceleratorEntry=cloudBridgeAcceleratorEntry, cbAcceleratorDescription=cbAcceleratorDescription, cbVersion=cbVersion, nsUptime=nsUptime, nsNumberOfCores=nsNumberOfCores, srHostIPAddressType=srHostIPAddressType, nsHaIPAddressType=nsHaIPAddressType, cbAcceleratorGatewayType=cbAcceleratorGatewayType, cbAcceleratorVmCPUUsage=cbAcceleratorVmCPUUsage, interfaceRxBytes=interfaceRxBytes, cbAcceleratorHostname=cbAcceleratorHostname, diskTransactionRate=diskTransactionRate, cbAcceleratorName=cbAcceleratorName, cbAcceleratorIpList=cbAcceleratorIpList, cbVmCPUUsage=cbVmCPUUsage, diskTotalBlocksRead=diskTotalBlocksRead, nsNsTx=nsNsTx, nsNsRx=nsNsRx, interfaceTable=interfaceTable, nsIfOby1=nsIfOby1, cbHostIPAddress=cbHostIPAddress, cbHostname=cbHostname, cbAPAGateway=cbAPAGateway, diskEntry=diskEntry, cbIpAddress=cbIpAddress, cbNetmask=cbNetmask, cbAcceleratorVmMemoryFree=cbAcceleratorVmMemoryFree, interfacePort=interfacePort, cbVmMemoryFree=cbVmMemoryFree, xenEntry=xenEntry, cbAcceleratorVmState=cbAcceleratorVmState, systemMaxThroughput=systemMaxThroughput, nsLicense=nsLicense, systemSvmIPAddress=systemSvmIPAddress, xenProductCode=xenProductCode, softwareResourceTable=softwareResourceTable, cloudBridgeInstanceEntry=cloudBridgeInstanceEntry, systemXenIPAddress=systemXenIPAddress, interfaceMappedPort=interfaceMappedPort, hardwareResourceHostIPAddress=hardwareResourceHostIPAddress, netscalerEntry=netscalerEntry, cbAPAIPADDRESSType=cbAPAIPADDRESSType, interfaceTxPackets=interfaceTxPackets, interfaceTxErrors=interfaceTxErrors, srEntry=srEntry, srStatus=srStatus, xenBuildDate=xenBuildDate, nsCpuCoreMgmt=nsCpuCoreMgmt, cbHostIPAddressType=cbHostIPAddressType, cbNumberOfCPU=cbNumberOfCPU, cbVmMemoryTotal=cbVmMemoryTotal, xenSerialNumber=xenSerialNumber, interfaceEntry=interfaceEntry, nsGatewayType=nsGatewayType, nsUpsince=nsUpsince, nsNsVLANId=nsNsVLANId, cbAcceleratorGateway=cbAcceleratorGateway, cbMgmtIPAddressType=cbMgmtIPAddressType, xenBuildNumber=xenBuildNumber, hardwareResourceStatus=hardwareResourceStatus, cbAcceleratorUuid=cbAcceleratorUuid, hardwareResourceName=hardwareResourceName, hardwareResourceUnit=hardwareResourceUnit, srHostIPAddress=srHostIPAddress, nsNsMemoryUsage=nsNsMemoryUsage, cbInstanceState=cbInstanceState, cbAcceleratorNumberOfCPU=cbAcceleratorNumberOfCPU, cbProfileName=cbProfileName, nsNetmask=nsNetmask, nsHostIPAddress=nsHostIPAddress, srSize=srSize, softwareResourceEntry=softwareResourceEntry, nsHttpReq=nsHttpReq, xenVersion=xenVersion, nsVmDescription=nsVmDescription, nsNumberOfSslCoresUp=nsNumberOfSslCoresUp, xenMemoryUsage=xenMemoryUsage, cbNetmaskType=cbNetmaskType, sdxEventGroup=sdxEventGroup, nsVirtualFunctions=nsVirtualFunctions, PYSNMP_MODULE_ID=netScaler, softwareResourceHostIPAddress=softwareResourceHostIPAddress, interfaceHostIPAddressType=interfaceHostIPAddressType, systemHostId=systemHostId, xenIpAddress=xenIpAddress, nsHaMasterState=nsHaMasterState, nsIpAddress=nsIpAddress, cbVirtualFunctions=cbVirtualFunctions, diskName=diskName, cbAcceleratorHostIPAddressType=cbAcceleratorHostIPAddressType, cbPluginIPADDRESSType=cbPluginIPADDRESSType, xenNumberOfCPU=xenNumberOfCPU, nsNsCPUUsage=nsNsCPUUsage, nsNsVLANTagged=nsNsVLANTagged, diskTable=diskTable, xenIpAddressType=xenIpAddressType, nsCpuCorePE=nsCpuCorePE, systemCurrentTime=systemCurrentTime, softwareResourceName=softwareResourceName, xenUptime=xenUptime, xenSslCoresTotal=xenSslCoresTotal, nsSslVirtualFunctions=nsSslVirtualFunctions, hardwareResourceEntry=hardwareResourceEntry, nsPps=nsPps, nsVlanType=nsVlanType, cbAcceleratorVmMemoryTotal=cbAcceleratorVmMemoryTotal, nsIf0by2=nsIf0by2, interfaceHostIPAddress=interfaceHostIPAddress, systemSerial=systemSerial, cbAcceleratorUptime=cbAcceleratorUptime, xenTable=xenTable, cbPluginIPADDRESS=cbPluginIPADDRESS, systemProduct=systemProduct, xenHostname=xenHostname, xenRx=xenRx, nsHostIPAddressType=nsHostIPAddressType, cbAcceleratorHostIPAddress=cbAcceleratorHostIPAddress, nsVmMemoryTotal=nsVmMemoryTotal, srTable=srTable, cbAcceleratorNetmaskType=cbAcceleratorNetmaskType, interfaceVfTotal=interfaceVfTotal, xenMemoryTotal=xenMemoryTotal, nsIpAddressType=nsIpAddressType, cloudBridgeInstanceTable=cloudBridgeInstanceTable, xenVersionShort=xenVersionShort, diskTotalBlocksWritten=diskTotalBlocksWritten, nsInstanceState=nsInstanceState, cbIpAddressType=cbIpAddressType, srUtilized=srUtilized, softwareResourceCurrentValue=softwareResourceCurrentValue, xenCpuUsage=xenCpuUsage, systemGroup=systemGroup, diskHostIPAddressType=diskHostIPAddressType, interfaceVfAssigned=interfaceVfAssigned, xenIscsiIQN=xenIscsiIQN, interfaceState=interfaceState, cbAcceleratorIpAddressType=cbAcceleratorIpAddressType, cloudBridgeAcceleratorTable=cloudBridgeAcceleratorTable, nsHostname=nsHostname, cbDescription=cbDescription, xenTx=xenTx, hardwareResourceCurrentValue=hardwareResourceCurrentValue, systemXenIPAddressType=systemXenIPAddressType, xenMemoryFree=xenMemoryFree, systemPlatform=systemPlatform, nsHaSync=nsHaSync, softwareResourceStatus=softwareResourceStatus, cbVmState=cbVmState, systemBuildNumber=systemBuildNumber)
