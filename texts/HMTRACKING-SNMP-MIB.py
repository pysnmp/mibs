#
# PySNMP MIB module HMTRACKING-SNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hirschmann/hmtracking.mib
# Produced by pysmi-1.1.12 at Wed May 29 07:18:08 2024
# On host fv-az1114-382 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
hmConfiguration, = mibBuilder.importSymbols("HMPRIV-MGMT-SNMP-MIB", "hmConfiguration")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, ModuleIdentity, Integer32, Counter32, NotificationType, Counter64, IpAddress, ObjectIdentity, Bits, Gauge32, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "ModuleIdentity", "Integer32", "Counter32", "NotificationType", "Counter64", "IpAddress", "ObjectIdentity", "Bits", "Gauge32", "MibIdentifier", "Unsigned32")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
hmTracking = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 14, 15))
hmTracking.setRevisions(('2007-09-13 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hmTracking.setRevisionsDescriptions(('First release in SMIv2',))
if mibBuilder.loadTexts: hmTracking.setLastUpdated('200709131200Z')
if mibBuilder.loadTexts: hmTracking.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hmTracking.setContactInfo('Customer Support\r\n           Postal: \r\n           Hirschmann Automation and Control GmbH\r\n           Stuttgarter Str. 45-51\r\n           72654 Neckartenzlingen\r\n           Germany\r\n           Tel: +49 7127 14 1981\r\n           Web: http://www.hicomcenter.com/\r\n           E-Mail: hicomcenter@hirschmann.com')
if mibBuilder.loadTexts: hmTracking.setDescription('The Hirschmann Private Tracking MIB definitions for Platform devices.')
hmTrackingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 15, 1))
hmTrackingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1), )
if mibBuilder.loadTexts: hmTrackingTable.setStatus('current')
if mibBuilder.loadTexts: hmTrackingTable.setDescription('This table contains variables to define\r\n                                 an entry in the Hirschmann Tracking database.')
hmTrackingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1), ).setIndexNames((0, "HMTRACKING-SNMP-MIB", "hmTrackId"))
if mibBuilder.loadTexts: hmTrackingEntry.setStatus('current')
if mibBuilder.loadTexts: hmTrackingEntry.setDescription('The entry of the hmTrackingTable.')
hmTrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTrackId.setStatus('current')
if mibBuilder.loadTexts: hmTrackId.setDescription('The id of an object being tracked.')
hmTrackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 2), RowStatus().clone('notReady')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmTrackRowStatus.setStatus('current')
if mibBuilder.loadTexts: hmTrackRowStatus.setDescription('Defines the status of the Tracking database entry.\r\n                \t\t\t\t Set to createAndWait(5) to create a new row.\r\n                \t\t\t\t Set to destroy(6) to delete an entry.\r\n                \t\t\t\t Set to notInService(2) to change an entry.\r\n                \t\t\t\t Reads as active(1) if the tracked object exists and is trackable,\r\n                \t\t\t\t notReady(3) otherwise.')
hmTrackType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("interface", 2), ("ping", 3), ("logical", 4))).clone('undefined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrackType.setStatus('current')
if mibBuilder.loadTexts: hmTrackType.setDescription('The kind of an object being tracked.')
hmTrackState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTrackState.setStatus('current')
if mibBuilder.loadTexts: hmTrackState.setDescription('Shows if the tracked object is currently UP or DOWN.')
hmTrackNumberOfChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTrackNumberOfChanges.setStatus('current')
if mibBuilder.loadTexts: hmTrackNumberOfChanges.setDescription('The number of state changes after an object being\r\n\t\t\t\t\t\t\t\ttracked, entered its operational state.\r\n\t\t\t\t\t\t\t\tIf the current state was entered prior to the last\r\n                      \t\t\tre-initialization of the local network management\r\n                      \t\t\tsubsystem, then this object contains a zero\r\n                      \t\t\tvalue.')
hmTrackTimeSinceLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTrackTimeSinceLastChange.setStatus('current')
if mibBuilder.loadTexts: hmTrackTimeSinceLastChange.setDescription('The time difference to the last state change of an object being\r\n                      \t\t\ttracked (in hundredths of a second).\r\n                      \t\t\tIf the current state was entered prior to the last\r\n                      \t\t\tre-initialization of the local network management\r\n                      \t\t\tsubsystem, then this object contains a zero\r\n                      \t\t\tvalue.')
hmTrackIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrackIfNumber.setStatus('current')
if mibBuilder.loadTexts: hmTrackIfNumber.setDescription('The number of the interface being tracked.\r\n                \t\t\t\t The number of the interface to send ping\r\n                \t\t\t\t packets. For ping objects the value 65535\r\n                \t\t\t\t is used to show that no valid interface\r\n                \t\t\t\t number has been set. It cannot be written.')
hmTrackIfLinkUpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrackIfLinkUpDelay.setStatus('current')
if mibBuilder.loadTexts: hmTrackIfLinkUpDelay.setDescription('If a link-up recovers within this delay,\r\n\t\t\t\t\t\t\t\tthe tracked object is not considered as up.')
hmTrackIfLinkDownDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrackIfLinkDownDelay.setStatus('current')
if mibBuilder.loadTexts: hmTrackIfLinkDownDelay.setDescription('If a link-down recovers within this delay,\r\n\t\t\t\t\t\t\t\tthe tracked object is not considered as down.')
hmTrackPingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrackPingIpAddress.setStatus('current')
if mibBuilder.loadTexts: hmTrackPingIpAddress.setDescription('The IP address of the router being monitored.')
hmTrackPingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrackPingInterval.setStatus('current')
if mibBuilder.loadTexts: hmTrackPingInterval.setDescription('The number of seconds between the pings to the\r\n\t\t\t\t\t\t\t\ttarget IP address.')
hmTrackPingMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrackPingMiss.setStatus('current')
if mibBuilder.loadTexts: hmTrackPingMiss.setDescription('This specifies the number of consecutive ping\r\n\t\t\t\t\t\t\t\tmisses until the tracked object is considered\r\n\t\t\t\t\t\t\t\tto be down.')
hmTrackPingSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrackPingSuccess.setStatus('current')
if mibBuilder.loadTexts: hmTrackPingSuccess.setDescription('This specifies the number of consecutive ping\r\n\t\t\t\t\t\t\t\tsuccesses until the tracked object is considered\r\n\t\t\t\t\t\t\t\tto be up.')
hmTrackPingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(100)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrackPingTimeout.setStatus('current')
if mibBuilder.loadTexts: hmTrackPingTimeout.setDescription('This specifies the timeout in milliseconds for\r\n                \t\t\t\t a ping reply. After the timeout the ping reply\r\n                \t\t\t\t is considered as lost.')
hmTrackPingTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrackPingTTL.setStatus('current')
if mibBuilder.loadTexts: hmTrackPingTTL.setDescription('This specifies the time to live for a ping request\r\n                \t\t\t\t packet.')
hmTrackPingBestRouteIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 16), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTrackPingBestRouteIfNumber.setStatus('current')
if mibBuilder.loadTexts: hmTrackPingBestRouteIfNumber.setDescription('This shows the number of the interface which\r\n                \t\t\t\t belongs to the best route. The interface number\r\n                \t\t\t\t is zero if the best route is not used to send\r\n                \t\t\t\t ping packets.')
hmTrackLogicalOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("and", 1), ("or", 2))).clone('or')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrackLogicalOperator.setStatus('current')
if mibBuilder.loadTexts: hmTrackLogicalOperator.setDescription('Defines the logical operation performed on the instances')
hmTrackSendStateChangeTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrackSendStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: hmTrackSendStateChangeTrap.setDescription('Enables or disables the sending of a trap when hmTrackState changes')
hmTrackingApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 2), )
if mibBuilder.loadTexts: hmTrackingApplicationTable.setStatus('current')
if mibBuilder.loadTexts: hmTrackingApplicationTable.setDescription('This table contains information about registered\r\n                \t\t\t\t applications, for each object being tracked.')
hmTrackingApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 2, 1), ).setIndexNames((0, "HMTRACKING-SNMP-MIB", "hmTrackId"), (0, "HMTRACKING-SNMP-MIB", "hmTrackAppId"))
if mibBuilder.loadTexts: hmTrackingApplicationEntry.setStatus('current')
if mibBuilder.loadTexts: hmTrackingApplicationEntry.setDescription('The entry of the hmTrackingApplicationTable.')
hmTrackAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: hmTrackAppId.setStatus('current')
if mibBuilder.loadTexts: hmTrackAppId.setDescription('The id of an application which tracks an object.')
hmTrackAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTrackAppName.setStatus('current')
if mibBuilder.loadTexts: hmTrackAppName.setDescription('The name of the registered application.')
hmTrackLogicalInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 3), )
if mibBuilder.loadTexts: hmTrackLogicalInstanceTable.setStatus('current')
if mibBuilder.loadTexts: hmTrackLogicalInstanceTable.setDescription('This table contains information the tracking\r\n                \t\t\t\t instances that are combined into a logical\r\n                \t\t\t\t tracking instance.')
hmTrackLogicalInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 3, 1), ).setIndexNames((0, "HMTRACKING-SNMP-MIB", "hmTrackId"), (0, "HMTRACKING-SNMP-MIB", "hmTrackLogicalInstanceId"))
if mibBuilder.loadTexts: hmTrackLogicalInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: hmTrackLogicalInstanceEntry.setDescription('The entry of the hmTrackLogicalInstanceTable.')
hmTrackLogicalInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: hmTrackLogicalInstanceId.setStatus('current')
if mibBuilder.loadTexts: hmTrackLogicalInstanceId.setDescription('The id of an object that is a member of the logical tracking object.')
hmTrackLogicInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 3, 1, 3), RowStatus().clone('notReady')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmTrackLogicInstRowStatus.setStatus('current')
if mibBuilder.loadTexts: hmTrackLogicInstRowStatus.setDescription('Defines the status of the Logic Tracking member entry.\r\n                \t\t\t\t Set to createAndGo(4) to create a new row.\r\n                \t\t\t\t Set to destroy(6) to delete an entry.\r\n                \t\t\t\t Reads as active(1) if the row exists.')
hmTrackEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 0))
if mibBuilder.loadTexts: hmTrackEvent.setStatus('current')
if mibBuilder.loadTexts: hmTrackEvent.setDescription('The events of hmTrackEvent.')
hmTrackStatusChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 15, 1, 0, 1)).setObjects(("HMTRACKING-SNMP-MIB", "hmTrackId"), ("HMTRACKING-SNMP-MIB", "hmTrackRowStatus"), ("HMTRACKING-SNMP-MIB", "hmTrackState"))
if mibBuilder.loadTexts: hmTrackStatusChangeEvent.setStatus('current')
if mibBuilder.loadTexts: hmTrackStatusChangeEvent.setDescription('Sent when the state of a tracking instance changes between up and down.')
mibBuilder.exportSymbols("HMTRACKING-SNMP-MIB", hmTrackingEntry=hmTrackingEntry, hmTrackLogicalInstanceTable=hmTrackLogicalInstanceTable, hmTrackAppName=hmTrackAppName, hmTracking=hmTracking, hmTrackLogicalOperator=hmTrackLogicalOperator, hmTrackLogicInstRowStatus=hmTrackLogicInstRowStatus, hmTrackPingInterval=hmTrackPingInterval, hmTrackPingIpAddress=hmTrackPingIpAddress, hmTrackNumberOfChanges=hmTrackNumberOfChanges, hmTrackingGroup=hmTrackingGroup, hmTrackingTable=hmTrackingTable, hmTrackRowStatus=hmTrackRowStatus, hmTrackPingMiss=hmTrackPingMiss, hmTrackingApplicationTable=hmTrackingApplicationTable, hmTrackPingSuccess=hmTrackPingSuccess, hmTrackAppId=hmTrackAppId, hmTrackId=hmTrackId, hmTrackLogicalInstanceId=hmTrackLogicalInstanceId, hmTrackingApplicationEntry=hmTrackingApplicationEntry, hmTrackIfLinkUpDelay=hmTrackIfLinkUpDelay, hmTrackPingTimeout=hmTrackPingTimeout, hmTrackPingTTL=hmTrackPingTTL, hmTrackStatusChangeEvent=hmTrackStatusChangeEvent, hmTrackPingBestRouteIfNumber=hmTrackPingBestRouteIfNumber, hmTrackIfLinkDownDelay=hmTrackIfLinkDownDelay, hmTrackLogicalInstanceEntry=hmTrackLogicalInstanceEntry, hmTrackEvent=hmTrackEvent, hmTrackIfNumber=hmTrackIfNumber, hmTrackSendStateChangeTrap=hmTrackSendStateChangeTrap, PYSNMP_MODULE_ID=hmTracking, hmTrackTimeSinceLastChange=hmTrackTimeSinceLastChange, hmTrackType=hmTrackType, hmTrackState=hmTrackState)
