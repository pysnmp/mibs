#
# PySNMP MIB module ARRIS-C3-TFTPD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arris/ARRIS-C3-TFTPD-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 11:10:05 2024
# On host fv-az1493-704 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
cmtsC3, = mibBuilder.importSymbols("ARRIS-MIB", "cmtsC3")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, TimeTicks, Gauge32, Unsigned32, ObjectIdentity, Counter32, ModuleIdentity, Integer32, Bits, IpAddress, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Gauge32", "Unsigned32", "ObjectIdentity", "Counter32", "ModuleIdentity", "Integer32", "Bits", "IpAddress", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
cmtsC3TFTPDMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9))
if mibBuilder.loadTexts: cmtsC3TFTPDMIB.setLastUpdated('200403300000Z')
if mibBuilder.loadTexts: cmtsC3TFTPDMIB.setOrganization('Arris International')
if mibBuilder.loadTexts: cmtsC3TFTPDMIB.setContactInfo('   Network Management\n                Postal: Arris International.\n                        4400 Cork Airport Business Park\n                        Cork Airport, Kinsale Road\n                        Cork, Ireland.\n                Tel:    +353 21 7305 800\n                Fax:    +353 21 4321 972')
if mibBuilder.loadTexts: cmtsC3TFTPDMIB.setDescription('This MIB manages the TFTP server on the Arris CMTS C3')
dcxTFTPDObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1))
dcxTFTPDServerState = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxTFTPDServerState.setStatus('current')
if mibBuilder.loadTexts: dcxTFTPDServerState.setDescription('Specifies whether the TFTP server is running and accepting requests (active), or not\n\t\t    running (inactive).')
dcxTFTPDCurrentDirectory = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxTFTPDCurrentDirectory.setStatus('current')
if mibBuilder.loadTexts: dcxTFTPDCurrentDirectory.setDescription('This is the directory that files are being retrieved from on the CMTS.')
dcxTFTPDIpVerification = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxTFTPDIpVerification.setStatus('current')
if mibBuilder.loadTexts: dcxTFTPDIpVerification.setDescription('Specifies whether IP Address verification is enabled or not.  When IP Address verification\n            is enabled, TFTP requests will only be accepted from IP Addresses from cable modems that the\n            CMTS recognizes.')
dcxTFTPDClearCache = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcxTFTPDClearCache.setStatus('current')
if mibBuilder.loadTexts: dcxTFTPDClearCache.setDescription('When set to true, the TFTP server cache will be cleared.  This should be done if you overwrite\n            a file in the TFTP directory, in order to ensure that the new file will be used.  Reading this\n            value always returns false.')
dcxTFTPDReadRequests = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDReadRequests.setStatus('current')
if mibBuilder.loadTexts: dcxTFTPDReadRequests.setDescription('Number of TFTP read requests that have been made in total.')
dcxTFTPDReadRequestsDropped = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDReadRequestsDropped.setStatus('current')
if mibBuilder.loadTexts: dcxTFTPDReadRequestsDropped.setDescription('Number of TFTP read requests that were dropped by the CMTS.  Requests could be dropped for a few reasons, for example, being invalid, or IP verification failing.')
dcxTFTPDReadRequestsFailed = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDReadRequestsFailed.setStatus('current')
if mibBuilder.loadTexts: dcxTFTPDReadRequestsFailed.setDescription('Number of TFTP read requests that failed.  This is ususally due to either an error during the file transfer.')
dcxTFTPDReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDReadBytes.setStatus('current')
if mibBuilder.loadTexts: dcxTFTPDReadBytes.setDescription('Number of bytes successfully transferred by the TFTP server on read requests.  This includes only completely transferred files.')
dcxTFTPDWriteRequests = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDWriteRequests.setStatus('current')
if mibBuilder.loadTexts: dcxTFTPDWriteRequests.setDescription('Number of TFTP write requests that have been made in total.')
dcxTFTPDWriteRequestsDropped = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDWriteRequestsDropped.setStatus('current')
if mibBuilder.loadTexts: dcxTFTPDWriteRequestsDropped.setDescription('Number of TFTP write requests that were dropped by the CMTS.  Requests could be dropped for a few reasons, for example, being invalid, or IP verification failing.')
dcxTFTPDWriteRequestsFailed = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDWriteRequestsFailed.setStatus('current')
if mibBuilder.loadTexts: dcxTFTPDWriteRequestsFailed.setDescription('Number of TFTP write requests that failed.  This is ususally due to either an error during the file transfer.')
dcxTFTPDWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 4115, 1, 4, 3, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcxTFTPDWriteBytes.setStatus('current')
if mibBuilder.loadTexts: dcxTFTPDWriteBytes.setDescription('Number of bytes successfully transferred by the TFTP server on write requests.  This includes only completely transferred files.')
mibBuilder.exportSymbols("ARRIS-C3-TFTPD-MIB", dcxTFTPDWriteRequestsFailed=dcxTFTPDWriteRequestsFailed, dcxTFTPDServerState=dcxTFTPDServerState, dcxTFTPDCurrentDirectory=dcxTFTPDCurrentDirectory, dcxTFTPDReadRequestsDropped=dcxTFTPDReadRequestsDropped, dcxTFTPDWriteRequests=dcxTFTPDWriteRequests, dcxTFTPDClearCache=dcxTFTPDClearCache, cmtsC3TFTPDMIB=cmtsC3TFTPDMIB, dcxTFTPDWriteBytes=dcxTFTPDWriteBytes, PYSNMP_MODULE_ID=cmtsC3TFTPDMIB, dcxTFTPDReadRequestsFailed=dcxTFTPDReadRequestsFailed, dcxTFTPDReadRequests=dcxTFTPDReadRequests, dcxTFTPDObjects=dcxTFTPDObjects, dcxTFTPDIpVerification=dcxTFTPDIpVerification, dcxTFTPDWriteRequestsDropped=dcxTFTPDWriteRequestsDropped, dcxTFTPDReadBytes=dcxTFTPDReadBytes)
