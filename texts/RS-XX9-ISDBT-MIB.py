#
# PySNMP MIB module RS-XX9-ISDBT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-ISDBT-MIB
# Produced by pysmi-1.1.12 at Mon Oct  7 02:58:10 2024
# On host fv-az775-99 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
commonNotificationAlarmClass, = mibBuilder.importSymbols("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass")
rsXx9MibModule, rsXx9IsdbT = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9MibModule", "rsXx9IsdbT")
NotificationPriority, IndexTransmitter, IndexAB, NotificationMask, SwitchOnOff, NotificationClass, NotificationState = mibBuilder.importSymbols("RS-XX9-TC-MIB", "NotificationPriority", "IndexTransmitter", "IndexAB", "NotificationMask", "SwitchOnOff", "NotificationClass", "NotificationState")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, Gauge32, ModuleIdentity, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, ObjectIdentity, IpAddress, Bits, Unsigned32, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "ModuleIdentity", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "ObjectIdentity", "IpAddress", "Bits", "Unsigned32", "NotificationType", "Counter64")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
rsXx9IsdbtMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 8))
rsXx9IsdbtMibModule.setRevisions(('2015-06-03 15:00', '2014-12-22 16:00', '2014-03-25 16:00', '2012-05-14 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsXx9IsdbtMibModule.setRevisionsDescriptions(('add isdbtOutStatusEwbsActFlag', 'updated description texts\n                ', 'Initial release.\n                added isdbtNitRestampingTable', 'Preliminary release.',))
if mibBuilder.loadTexts: rsXx9IsdbtMibModule.setLastUpdated('201506031500Z')
if mibBuilder.loadTexts: rsXx9IsdbtMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
if mibBuilder.loadTexts: rsXx9IsdbtMibModule.setContactInfo('Rohde & Schwarz GmbH & Co. KG\n                Broadcasting Division\n                \n                Muehldorfstrasse 15\n                81671 Munich\n                Germany\n                \n                customersupport@rohde-schwarz.com')
if mibBuilder.loadTexts: rsXx9IsdbtMibModule.setDescription('This MIB defines ISDB-T specific objects\n                of XX9000 transmitting systems from Rohde & Schwarz.\n                \n                The following MIBs are related to this:\n                - RS-COMMON-MIB         - mandatory for this MIB\n                - RS-XX9-SMI-MIB        - mandatory for this MIB\n                - RS-XX9-TC-MIB         - mandatory for this MIB\n                - RS-XX9-COMMON-MIB     - mandatory for this MIB')
class IsdbtMode(TextualConvention, Integer32):
    description = 'Selects the FFT size:\n                mode1(2) - 2048 carriers\n                mode2(3) - 4096 carriers\n                mode3(4) - 8192 carriers'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4))
    namedValues = NamedValues(("mode1", 2), ("mode2", 3), ("mode3", 4))

class IsdbtGuardInterval(TextualConvention, Integer32):
    description = 'The Guard Interval determines the time span between signals\n                for multicarrier modulation, in which no information is transmitted.\n                The larger the time span is, the lower the risk of interference\n                and the lower the data transfer rate.\n                The values are a fraction of the symbol period.\n                Ideally, you select a value that is larger than the channel spread. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("oneDiv32", 1), ("oneDiv16", 2), ("oneDiv8", 3), ("oneDiv4", 4))

class IsdbtLayer(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("a", 1), ("b", 2), ("c", 3))

class IsdbtConstellation(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))
    namedValues = NamedValues(("dqpsk", 2), ("qpsk", 3), ("qam16", 4), ("qam64", 5))

class IsdbtCodeRate(TextualConvention, Integer32):
    description = 'The coderate sets the ratio between payload\n                and error correction information.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4, 6, 7))
    namedValues = NamedValues(("oneHalf", 1), ("twoThird", 3), ("threeFourth", 4), ("fiveSixth", 6), ("sevenEighth", 7))

class IsdbtNitRestampingSource(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("bts", 1), ("manual", 2))

rsXx9IsdbtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 0))
isdbtIIP = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationPriority"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationState"))
if mibBuilder.loadTexts: isdbtIIP.setStatus('current')
if mibBuilder.loadTexts: isdbtIIP.setDescription('Shows whether ISDB-T information packets (IIP) with the appropriate ID\n                are present in the transport stream\n                Possible values:\n                off(2)     - isdbtCfgCoderSettingsSource is manual(2)\n                fault(3)   - the input data does not contain a IIP\n                warning(4) - no SFN info\n                ok(5)      - IIP found\n                \n                Notification class: warning')
isdbtFrameCounter = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationPriority"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationState"))
if mibBuilder.loadTexts: isdbtFrameCounter.setStatus('current')
if mibBuilder.loadTexts: isdbtFrameCounter.setDescription('Shows the correctness of TSPs.\n                \n                Possible values:\n                off(2)\n                warning(4) - incorrect or missing TSP detected\n                ok(5)\n                \n                Notification class: warning')
isdbtEquipmentId = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 0, 3)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationPriority"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationState"))
if mibBuilder.loadTexts: isdbtEquipmentId.setStatus('current')
if mibBuilder.loadTexts: isdbtEquipmentId.setDescription('Shows the existence of SFN information matching the\n                selected equipment ID.\n                \n                Possible values:\n                off(2)     - isdbtLocalizationEquipmentControl is off(2)\n                             or isdbtCfgCoderSettingsSource is manual(2)\n                warning(4) - no matching SFN information\n                ok(5)\n                \n                Notification class: warning')
isdbtManualConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 0, 4)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationPriority"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationState"))
if mibBuilder.loadTexts: isdbtManualConfiguration.setStatus('current')
if mibBuilder.loadTexts: isdbtManualConfiguration.setDescription('Indicates whether the configured ISDB-T configuration\n                is consistent and valid over all three layers.\n                If an error is displayed, check whether the sum of all\n                segments over the three layers is exactly 13.\n                \n                Possible values:\n                off(2)     - \n                warning(4) - not valid\n                ok(5)      - valid\n                \n                Notification class: warning')
isdbtActiveConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 0, 5)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationPriority"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationState"))
if mibBuilder.loadTexts: isdbtActiveConfiguration.setStatus('current')
if mibBuilder.loadTexts: isdbtActiveConfiguration.setDescription('Indicates whether the active ISDB-T configuration\n                is consistent and valid over all three layers.\n                If an error is displayed, check whether the sum of all\n                segments over the three layers is exactly 13.\n                \n                Possible values:\n                off(2)     - \n                warning(4) - not valid\n                ok(5)      - valid\n                \n                Notification class: warning')
isdbtTest = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 0, 6)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationPriority"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationState"))
if mibBuilder.loadTexts: isdbtTest.setStatus('current')
if mibBuilder.loadTexts: isdbtTest.setDescription('Possible values:\n                off(2)     - no test signal generation\n                warning(4) - test signal generation is activated\n                \n                Notification class: warning')
rsXx9IsdbtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1))
isdbtStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1))
isdbtStatusNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1), )
if mibBuilder.loadTexts: isdbtStatusNotificationTable.setStatus('current')
if mibBuilder.loadTexts: isdbtStatusNotificationTable.setDescription('The context information/configuration for the\n                ISDB-T status notifications.')
isdbtStatusNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1), ).setIndexNames((0, "RS-XX9-ISDBT-MIB", "isdbtStatusNotificationTxIdx"), (0, "RS-XX9-ISDBT-MIB", "isdbtStatusNotificationExcIdx"), (0, "RS-XX9-ISDBT-MIB", "isdbtStatusNotificationIdx"))
if mibBuilder.loadTexts: isdbtStatusNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: isdbtStatusNotificationEntry.setDescription('An entry in the isdbtStatusNotificationTable.')
isdbtStatusNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: isdbtStatusNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: isdbtStatusNotificationTxIdx.setDescription('The transmitter index.')
isdbtStatusNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: isdbtStatusNotificationExcIdx.setStatus('current')
if mibBuilder.loadTexts: isdbtStatusNotificationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
isdbtStatusNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: isdbtStatusNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: isdbtStatusNotificationIdx.setDescription('The notification number as below rsXx9IsdbtNotifications.\n                This is a helper column and therefore not-accessible.')
isdbtStatusNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("isdbtIIP", 1), ("isdbtFrameCounter", 2), ("isdbtEquipmentId", 3), ("isdbtManualConfiguration", 4), ("isdbtActiveConfiguration", 5), ("isdbtTest", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtStatusNotificationName.setStatus('current')
if mibBuilder.loadTexts: isdbtStatusNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9IsdbtNotifications.')
isdbtStatusNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtStatusNotificationMask.setStatus('current')
if mibBuilder.loadTexts: isdbtStatusNotificationMask.setDescription('See TextualConvention for details.')
isdbtStatusNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtStatusNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: isdbtStatusNotificationPriority.setDescription('See TextualConvention for details.')
isdbtStatusNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtStatusNotificationState.setStatus('current')
if mibBuilder.loadTexts: isdbtStatusNotificationState.setDescription('See TextualConvention for details.')
isdbtStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 2), )
if mibBuilder.loadTexts: isdbtStateTable.setStatus('current')
if mibBuilder.loadTexts: isdbtStateTable.setDescription('ISDB-T state values.')
isdbtStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 2, 1), ).setIndexNames((0, "RS-XX9-ISDBT-MIB", "isdbtStatusNotificationTxIdx"), (0, "RS-XX9-ISDBT-MIB", "isdbtStatusNotificationExcIdx"))
if mibBuilder.loadTexts: isdbtStateEntry.setStatus('current')
if mibBuilder.loadTexts: isdbtStateEntry.setDescription('An entry in the isdbtStateTable.')
isdbtStTxDelayOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 1, 2, 1, 1), Integer32()).setUnits('1/10 micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtStTxDelayOffset.setStatus('current')
if mibBuilder.loadTexts: isdbtStTxDelayOffset.setDescription('Transmitting time shift compared to other\n                transmitters in the ISDB-T network.')
isdbtSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2))
isdbtConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1), )
if mibBuilder.loadTexts: isdbtConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: isdbtConfigurationTable.setDescription('ISDB-T configuration.')
isdbtConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1, 1), ).setIndexNames((0, "RS-XX9-ISDBT-MIB", "isdbtCfgTxIdx"), (0, "RS-XX9-ISDBT-MIB", "isdbtCfgExcIdx"))
if mibBuilder.loadTexts: isdbtConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: isdbtConfigurationEntry.setDescription('An entry in the isdbtConfigurationTable.')
isdbtCfgTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: isdbtCfgTxIdx.setStatus('current')
if mibBuilder.loadTexts: isdbtCfgTxIdx.setDescription('The transmitter index.')
isdbtCfgExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: isdbtCfgExcIdx.setStatus('current')
if mibBuilder.loadTexts: isdbtCfgExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
isdbtCfgNetworkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mfn", 1), ("dynamicSfn", 2), ("staticSfn", 3), ("automatic", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtCfgNetworkMode.setStatus('current')
if mibBuilder.loadTexts: isdbtCfgNetworkMode.setDescription('It can be switched between Single Frequency Networks and\n                Multiple Frequency Networks.')
isdbtCfgCoderSettingsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iip", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtCfgCoderSettingsSource.setStatus('current')
if mibBuilder.loadTexts: isdbtCfgCoderSettingsSource.setDescription('Selects the source for the TMCC (Transmission and Multiplexing\n                Configuration Control) input parameter for the ISDB-T coder.\n                \n                iip(1)    - parameters are read out of the IIP in the transmission\n                manual(2) - parameters are configured in the transmitter')
isdbtCfgIipID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtCfgIipID.setStatus('current')
if mibBuilder.loadTexts: isdbtCfgIipID.setDescription('PID (packet ID) number for the IIP (ISDB-T information packet)\n                in the input data stream.\n                Requirement is that isdbtCfgCoderSettingsSource is iip(1).')
isdbtCfgBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7))).clone(namedValues=NamedValues(("mhz6", 5), ("mhz7", 6), ("mhz8", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtCfgBandwidth.setStatus('current')
if mibBuilder.loadTexts: isdbtCfgBandwidth.setDescription('Description.')
isdbtLocalizationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 2), )
if mibBuilder.loadTexts: isdbtLocalizationTable.setStatus('current')
if mibBuilder.loadTexts: isdbtLocalizationTable.setDescription('ISDB-T localization.')
isdbtLocalizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 2, 1), )
isdbtConfigurationEntry.registerAugmentions(("RS-XX9-ISDBT-MIB", "isdbtLocalizationEntry"))
isdbtLocalizationEntry.setIndexNames(*isdbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: isdbtLocalizationEntry.setStatus('current')
if mibBuilder.loadTexts: isdbtLocalizationEntry.setDescription('An entry in the isdbtLocalizationTable.')
isdbtLocalizationEquipmentControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 2, 1, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtLocalizationEquipmentControl.setStatus('current')
if mibBuilder.loadTexts: isdbtLocalizationEquipmentControl.setDescription('Activates or deactivates the device ID.\n                This way transmitter-specific settings may be configured via\n                the ISDB-T information packet present in the transport stream.\n                Operation is possible if isdbtCfgCoderSettingsSource is iip(1).')
isdbtLocalizationEquipmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtLocalizationEquipmentID.setStatus('current')
if mibBuilder.loadTexts: isdbtLocalizationEquipmentID.setDescription('A unique device ID, to be able to reference special settings\n                of the IIP (ISDB-T information packet). ')
isdbtTmccTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 3), )
if mibBuilder.loadTexts: isdbtTmccTable.setStatus('current')
if mibBuilder.loadTexts: isdbtTmccTable.setDescription('TMCC (transmission and multiplexing configuration control) configuration.')
isdbtTmccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 3, 1), )
isdbtConfigurationEntry.registerAugmentions(("RS-XX9-ISDBT-MIB", "isdbtTmccEntry"))
isdbtTmccEntry.setIndexNames(*isdbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: isdbtTmccEntry.setStatus('current')
if mibBuilder.loadTexts: isdbtTmccEntry.setDescription('An entry in the isdbtTmccTable.')
isdbtTmccNext = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("active", 2), ("automatic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccNext.setStatus('current')
if mibBuilder.loadTexts: isdbtTmccNext.setDescription('Transmission and Multiplexing Configuration Control:\n                off(1)       - all TMCC NEXT is set to unused.\n                active(2)    - the TMCC NEXT contains the active coder setup.\n                automatic(3) - the TMCC NEXT follows the IIP TMCC NEXT signalisation\n                               if available and used for coder source, otherwise the\n                               active coder setup is used.')
isdbtTmccMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 3, 1, 2), IsdbtMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccMode.setStatus('current')
if mibBuilder.loadTexts: isdbtTmccMode.setDescription('see textual convention')
isdbtTmccGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 3, 1, 3), IsdbtGuardInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccGuardInterval.setStatus('current')
if mibBuilder.loadTexts: isdbtTmccGuardInterval.setDescription('see textual convention')
isdbtTmccPartialReception = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 3, 1, 4), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccPartialReception.setStatus('current')
if mibBuilder.loadTexts: isdbtTmccPartialReception.setDescription("If layer A for mobile reception is to be used (1-segment receiver),\n                set 'Partial Reception' to on(1).\n                In this case, segment 0 is arranged in the band center.\n                The value can be entered manually and is used for TMCC NEXT\n                (transmission and multiplexing configuration control NEXT)\n                if isdbtTmccNext is set to active(2).")
isdbtTmccLayerTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 4), )
if mibBuilder.loadTexts: isdbtTmccLayerTable.setStatus('current')
if mibBuilder.loadTexts: isdbtTmccLayerTable.setDescription('TMCC layer configuration.')
isdbtTmccLayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 4, 1), ).setIndexNames((0, "RS-XX9-ISDBT-MIB", "isdbtCfgTxIdx"), (0, "RS-XX9-ISDBT-MIB", "isdbtCfgExcIdx"), (0, "RS-XX9-ISDBT-MIB", "isdbtTmccLayerIdx"))
if mibBuilder.loadTexts: isdbtTmccLayerEntry.setStatus('current')
if mibBuilder.loadTexts: isdbtTmccLayerEntry.setDescription('An entry in the isdbtTmccLayerTable.')
isdbtTmccLayerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 4, 1, 3), IsdbtLayer())
if mibBuilder.loadTexts: isdbtTmccLayerIdx.setStatus('current')
if mibBuilder.loadTexts: isdbtTmccLayerIdx.setDescription('TMCC layer index.')
isdbtTmccLayerSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccLayerSegments.setStatus('current')
if mibBuilder.loadTexts: isdbtTmccLayerSegments.setDescription('Number of segments used for the layer concerned.\n                The allocation of segments to the layers is subject to conditions:\n                0 - layer is deactivated.\n                For layer A, 0 is not permitted.\n                For layer B, 0 is possible only if layer C also has 0 segments.\n                The sum of all the segments from all the active layers must always be 13.\n                The segments can be distributed over 1, 2 or 3 layers.\n                An allocation of 1 single segment is possible only for layer A.\n                This is only allowed if isdbtTmccPartialReception is on(1).\n                The remaining 12 segments can be distributed over layers B and C\n                according to the above rules.')
isdbtTmccLayerConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 4, 1, 5), IsdbtConstellation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccLayerConstellation.setStatus('current')
if mibBuilder.loadTexts: isdbtTmccLayerConstellation.setDescription('Configure the modulation format with this parameter.\n                qpsk(3)  - is very fail-safe, but has only a small data rate.\n                qam64(5) - can transmit very large data rates if you expect faults\n                           on the transmission link.\n                qam16(4) - is a compromise between the two other setting values.\n                The value can be entered manually and is used for TMCC NEXT\n                (transmission and multiplexing configuration control NEXT)\n                if isdbtTmccNext is set to active(2).')
isdbtTmccLayerCodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 4, 1, 6), IsdbtCodeRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccLayerCodeRate.setStatus('current')
if mibBuilder.loadTexts: isdbtTmccLayerCodeRate.setDescription('see textual convention.')
isdbtTmccLayerTimeInterleaver = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTmccLayerTimeInterleaver.setStatus('current')
if mibBuilder.loadTexts: isdbtTmccLayerTimeInterleaver.setDescription('To reduce the susceptibility to faults when there is noise,\n                the time interleaver mixes the user data in a data block.\n                0, 1, 2, 4, 8, and 16 can be selected as conversion length.\n                0 means that no conversion take place,\n                16 corresponds to the highest degree of conversion.\n                This offers the greatest protection, but also the greatest latency.\n                The value can be entered manually and is used for TMCC NEXT\n                (transmission and multiplexing configuration control NEXT)\n                if isdbtTmccNext is set to active(2).')
isdbtTestTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 5), )
if mibBuilder.loadTexts: isdbtTestTable.setStatus('current')
if mibBuilder.loadTexts: isdbtTestTable.setDescription('Configures the test mode of the exciter.')
isdbtTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 5, 1), )
isdbtConfigurationEntry.registerAugmentions(("RS-XX9-ISDBT-MIB", "isdbtTestEntry"))
isdbtTestEntry.setIndexNames(*isdbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: isdbtTestEntry.setStatus('current')
if mibBuilder.loadTexts: isdbtTestEntry.setDescription('An entry in the isdbtTestTable.')
isdbtTestGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 5, 1, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTestGeneration.setStatus('obsolete')
if mibBuilder.loadTexts: isdbtTestGeneration.setDescription('Switches test signal generation on or off.')
isdbtTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("testMode0", 4), ("testMode1", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtTestMode.setStatus('current')
if mibBuilder.loadTexts: isdbtTestMode.setDescription('off(1)       - no test mode\n                testMode0(4) - For activating a test sequence with three layers,\n                            ISDB-T mode 1 and guard interval 1/4.\n                            Layer A: 1 segment,  DQPSK, code rate 1/2, time interleaver: 0\n                            Layer B: 7 segments, 16QAM, code rate 7/8, time interleaver: 0\n                            Layer C: 5 segments, 64QAM, code rate 2/3, time interleaver: 0\n                testMode1(5) - For activating a test sequence with one layer,\n                            ISDB-T mode 1 and guard interval 1/4.\n                            Layer A: 13 segments, QPSK, code rate 1/2, time interleaver: 0')
isdbtNitRestampingTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6), )
if mibBuilder.loadTexts: isdbtNitRestampingTable.setStatus('current')
if mibBuilder.loadTexts: isdbtNitRestampingTable.setDescription('Description.')
isdbtNitRestampingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1), )
isdbtConfigurationEntry.registerAugmentions(("RS-XX9-ISDBT-MIB", "isdbtNitRestampingEntry"))
isdbtNitRestampingEntry.setIndexNames(*isdbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: isdbtNitRestampingEntry.setStatus('current')
if mibBuilder.loadTexts: isdbtNitRestampingEntry.setDescription('Description.')
isdbtNitNetworkIdSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 1), IsdbtNitRestampingSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitNetworkIdSource.setStatus('current')
if mibBuilder.loadTexts: isdbtNitNetworkIdSource.setDescription('This allows to enable the localization of the network id using a manual setup.')
isdbtNitManualNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitManualNetworkId.setStatus('current')
if mibBuilder.loadTexts: isdbtNitManualNetworkId.setDescription('This is a label to identify the network. Localization is done within each NIT.\n                Only valid, if isdbtNitNetworkIdSource is set to manual(2).\n                ')
isdbtNitTransportStreamIdSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 3), IsdbtNitRestampingSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitTransportStreamIdSource.setStatus('current')
if mibBuilder.loadTexts: isdbtNitTransportStreamIdSource.setDescription('This allows to enable the localization of the transport stream id using a manual setup.')
isdbtNitTransportManualStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitTransportManualStreamId.setStatus('current')
if mibBuilder.loadTexts: isdbtNitTransportManualStreamId.setDescription('This is a label to identify the transport stream from any other multiplex within the delivery system. Localization is done within each NIT, PAT, SDT, EIT, RST, PCAT and LDT.\n                Only valid, if isdbtNitTransportStreamIdSource is set to manual(2).\n                ')
isdbtNitAreaCodeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 5), IsdbtNitRestampingSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitAreaCodeSource.setStatus('current')
if mibBuilder.loadTexts: isdbtNitAreaCodeSource.setDescription('This allows to enable the localization of the area code using a manual setup.')
isdbtNitManualAreaCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitManualAreaCode.setStatus('current')
if mibBuilder.loadTexts: isdbtNitManualAreaCode.setDescription('This is the service area code from terrestrial delivery system descriptor. Localization is done within each NIT.\n                Only valid, if isdbtNitAreaCodeSource is set to manual(2).\n                ')
isdbtNitFrequencySource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 7), IsdbtNitRestampingSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitFrequencySource.setStatus('current')
if mibBuilder.loadTexts: isdbtNitFrequencySource.setDescription('This allows to enable the localization of the frequency using a manual setup.')
isdbtNitManualFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('1/7 MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitManualFrequency.setStatus('current')
if mibBuilder.loadTexts: isdbtNitManualFrequency.setDescription('This is the first frequency within the list of frequencies from terrestrial delivery system descriptor. Localization is done within each NIT.\n                Only valid, if isdbtNitFrequencySource is set to manual(2).\n                ')
isdbtNitVirtualChannelSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 9), IsdbtNitRestampingSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitVirtualChannelSource.setStatus('current')
if mibBuilder.loadTexts: isdbtNitVirtualChannelSource.setDescription('This allows to enable the localization of the virtual channel using a manual setup.')
isdbtNitManualVirtualChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 2, 6, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdbtNitManualVirtualChannel.setStatus('current')
if mibBuilder.loadTexts: isdbtNitManualVirtualChannel.setDescription("This indicates the recommended remote control key number to which the TS shall be assigned. This is also known as 'virtual channel'. Localization is done within each NIT.\n                Only valid, if isdbtNitVirtualChannelSource is set to manual(2).")
isdbtOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3))
isdbtOutTmccTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 3), )
if mibBuilder.loadTexts: isdbtOutTmccTable.setStatus('current')
if mibBuilder.loadTexts: isdbtOutTmccTable.setDescription('TMCC (transmission and multiplexing configuration control)\n                current values.')
isdbtOutTmccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 3, 1), )
isdbtConfigurationEntry.registerAugmentions(("RS-XX9-ISDBT-MIB", "isdbtOutTmccEntry"))
isdbtOutTmccEntry.setIndexNames(*isdbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: isdbtOutTmccEntry.setStatus('current')
if mibBuilder.loadTexts: isdbtOutTmccEntry.setDescription('An entry in the isdbtOutTmccTable.')
isdbtOutTmccMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 3, 1, 2), IsdbtMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutTmccMode.setStatus('current')
if mibBuilder.loadTexts: isdbtOutTmccMode.setDescription('see textual convention')
isdbtOutTmccGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 3, 1, 3), IsdbtGuardInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutTmccGuardInterval.setStatus('current')
if mibBuilder.loadTexts: isdbtOutTmccGuardInterval.setDescription('see textual convention')
isdbtOutTmccPartialReception = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutTmccPartialReception.setStatus('current')
if mibBuilder.loadTexts: isdbtOutTmccPartialReception.setDescription('Description.')
isdbtOutTmccLayerTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 4), )
if mibBuilder.loadTexts: isdbtOutTmccLayerTable.setStatus('current')
if mibBuilder.loadTexts: isdbtOutTmccLayerTable.setDescription('TMCC layer current values.')
isdbtOutTmccLayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 4, 1), )
isdbtTmccLayerEntry.registerAugmentions(("RS-XX9-ISDBT-MIB", "isdbtOutTmccLayerEntry"))
isdbtOutTmccLayerEntry.setIndexNames(*isdbtTmccLayerEntry.getIndexNames())
if mibBuilder.loadTexts: isdbtOutTmccLayerEntry.setStatus('current')
if mibBuilder.loadTexts: isdbtOutTmccLayerEntry.setDescription('An entry in the isdbtOutTmccLayerTable.')
isdbtOutTmccLayerSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutTmccLayerSegments.setStatus('current')
if mibBuilder.loadTexts: isdbtOutTmccLayerSegments.setDescription('Number of segments manually set for layer.')
isdbtOutTmccLayerConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 4, 1, 5), IsdbtConstellation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutTmccLayerConstellation.setStatus('current')
if mibBuilder.loadTexts: isdbtOutTmccLayerConstellation.setDescription('Description.')
isdbtOutTmccLayerCodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 4, 1, 6), IsdbtCodeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutTmccLayerCodeRate.setStatus('current')
if mibBuilder.loadTexts: isdbtOutTmccLayerCodeRate.setDescription('see textual convention.')
isdbtOutTmccLayerTimeInterleaver = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutTmccLayerTimeInterleaver.setStatus('current')
if mibBuilder.loadTexts: isdbtOutTmccLayerTimeInterleaver.setDescription('Time interleaver used in layer.\n                Value 0 means no interleaving.')
isdbtOutStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 5), )
if mibBuilder.loadTexts: isdbtOutStatusTable.setStatus('current')
if mibBuilder.loadTexts: isdbtOutStatusTable.setDescription('Description.')
isdbtOutStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 5, 1), )
isdbtConfigurationEntry.registerAugmentions(("RS-XX9-ISDBT-MIB", "isdbtOutStatusEntry"))
isdbtOutStatusEntry.setIndexNames(*isdbtConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: isdbtOutStatusEntry.setStatus('current')
if mibBuilder.loadTexts: isdbtOutStatusEntry.setDescription('Description.')
isdbtOutStatusEwbsActFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("flagOff", 2), ("flagOn", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdbtOutStatusEwbsActFlag.setStatus('current')
if mibBuilder.loadTexts: isdbtOutStatusEwbsActFlag.setDescription("Indicates the status of the transmitted EWBS-Flag (EWBS=Emergency Warning Broadcast System).\n                \n                notAvailable(1): 'Switch On' information can not be detected in IIP (ISDB-T Information Packet).\n                flagOff(2): IIP contains 'Switch On' = Off.\n                flagOn(3): IIP contains 'Switch On' = On.\n                ")
rsXx9IsdbtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 2))
rsXx9IsdbtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 2, 1))
isdbtBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 2, 1, 1)).setObjects(("RS-XX9-ISDBT-MIB", "isdbtObjBasic"), ("RS-XX9-ISDBT-MIB", "isdbtNotifyBasic"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isdbtBasicCompliance = isdbtBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: isdbtBasicCompliance.setDescription('The compliance statement for XX9000 ISDB-T exciters.')
rsXx9IsdbtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 2, 2))
isdbtObjBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 2, 2, 1)).setObjects(("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationName"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationMask"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationPriority"), ("RS-XX9-ISDBT-MIB", "isdbtStatusNotificationState"), ("RS-XX9-ISDBT-MIB", "isdbtCfgNetworkMode"), ("RS-XX9-ISDBT-MIB", "isdbtCfgCoderSettingsSource"), ("RS-XX9-ISDBT-MIB", "isdbtCfgIipID"), ("RS-XX9-ISDBT-MIB", "isdbtLocalizationEquipmentControl"), ("RS-XX9-ISDBT-MIB", "isdbtLocalizationEquipmentID"), ("RS-XX9-ISDBT-MIB", "isdbtCfgBandwidth"), ("RS-XX9-ISDBT-MIB", "isdbtStTxDelayOffset"), ("RS-XX9-ISDBT-MIB", "isdbtNitManualVirtualChannel"), ("RS-XX9-ISDBT-MIB", "isdbtNitVirtualChannelSource"), ("RS-XX9-ISDBT-MIB", "isdbtNitManualFrequency"), ("RS-XX9-ISDBT-MIB", "isdbtNitFrequencySource"), ("RS-XX9-ISDBT-MIB", "isdbtNitManualAreaCode"), ("RS-XX9-ISDBT-MIB", "isdbtNitAreaCodeSource"), ("RS-XX9-ISDBT-MIB", "isdbtNitTransportManualStreamId"), ("RS-XX9-ISDBT-MIB", "isdbtNitTransportStreamIdSource"), ("RS-XX9-ISDBT-MIB", "isdbtNitManualNetworkId"), ("RS-XX9-ISDBT-MIB", "isdbtNitNetworkIdSource"), ("RS-XX9-ISDBT-MIB", "isdbtOutStatusEwbsActFlag"), ("RS-XX9-ISDBT-MIB", "isdbtTestMode"), ("RS-XX9-ISDBT-MIB", "isdbtTmccNext"), ("RS-XX9-ISDBT-MIB", "isdbtTmccMode"), ("RS-XX9-ISDBT-MIB", "isdbtTmccGuardInterval"), ("RS-XX9-ISDBT-MIB", "isdbtTmccPartialReception"), ("RS-XX9-ISDBT-MIB", "isdbtTmccLayerSegments"), ("RS-XX9-ISDBT-MIB", "isdbtTmccLayerConstellation"), ("RS-XX9-ISDBT-MIB", "isdbtTmccLayerCodeRate"), ("RS-XX9-ISDBT-MIB", "isdbtTmccLayerTimeInterleaver"), ("RS-XX9-ISDBT-MIB", "isdbtOutTmccMode"), ("RS-XX9-ISDBT-MIB", "isdbtOutTmccGuardInterval"), ("RS-XX9-ISDBT-MIB", "isdbtOutTmccPartialReception"), ("RS-XX9-ISDBT-MIB", "isdbtOutTmccLayerSegments"), ("RS-XX9-ISDBT-MIB", "isdbtOutTmccLayerConstellation"), ("RS-XX9-ISDBT-MIB", "isdbtOutTmccLayerCodeRate"), ("RS-XX9-ISDBT-MIB", "isdbtOutTmccLayerTimeInterleaver"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isdbtObjBasic = isdbtObjBasic.setStatus('current')
if mibBuilder.loadTexts: isdbtObjBasic.setDescription('Basic objects group.')
isdbtNotifyBasic = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 2, 2, 2)).setObjects(("RS-XX9-ISDBT-MIB", "isdbtIIP"), ("RS-XX9-ISDBT-MIB", "isdbtFrameCounter"), ("RS-XX9-ISDBT-MIB", "isdbtEquipmentId"), ("RS-XX9-ISDBT-MIB", "isdbtManualConfiguration"), ("RS-XX9-ISDBT-MIB", "isdbtActiveConfiguration"), ("RS-XX9-ISDBT-MIB", "isdbtTest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isdbtNotifyBasic = isdbtNotifyBasic.setStatus('current')
if mibBuilder.loadTexts: isdbtNotifyBasic.setDescription('Basic notifications group.')
isdbtObjObsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 8, 2, 2, 3)).setObjects(("RS-XX9-ISDBT-MIB", "isdbtTestGeneration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isdbtObjObsoleted = isdbtObjObsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: isdbtObjObsoleted.setDescription('Description.')
mibBuilder.exportSymbols("RS-XX9-ISDBT-MIB", isdbtStatusNotificationMask=isdbtStatusNotificationMask, isdbtLocalizationEntry=isdbtLocalizationEntry, isdbtOutTmccEntry=isdbtOutTmccEntry, rsXx9IsdbtNotifications=rsXx9IsdbtNotifications, isdbtTmccPartialReception=isdbtTmccPartialReception, isdbtNotifyBasic=isdbtNotifyBasic, isdbtManualConfiguration=isdbtManualConfiguration, isdbtOutStatusEwbsActFlag=isdbtOutStatusEwbsActFlag, isdbtTmccLayerTable=isdbtTmccLayerTable, isdbtTmccLayerTimeInterleaver=isdbtTmccLayerTimeInterleaver, isdbtStateTable=isdbtStateTable, isdbtNitManualAreaCode=isdbtNitManualAreaCode, IsdbtCodeRate=IsdbtCodeRate, IsdbtNitRestampingSource=IsdbtNitRestampingSource, isdbtNitManualFrequency=isdbtNitManualFrequency, isdbtOutTmccPartialReception=isdbtOutTmccPartialReception, isdbtBasicCompliance=isdbtBasicCompliance, isdbtTestEntry=isdbtTestEntry, isdbtTmccTable=isdbtTmccTable, isdbtObjBasic=isdbtObjBasic, isdbtStatusNotificationState=isdbtStatusNotificationState, isdbtTmccMode=isdbtTmccMode, IsdbtGuardInterval=IsdbtGuardInterval, isdbtNitManualVirtualChannel=isdbtNitManualVirtualChannel, rsXx9IsdbtCompliances=rsXx9IsdbtCompliances, rsXx9IsdbtObjects=rsXx9IsdbtObjects, isdbtCfgBandwidth=isdbtCfgBandwidth, isdbtStatusNotificationTable=isdbtStatusNotificationTable, isdbtConfigurationTable=isdbtConfigurationTable, isdbtTestMode=isdbtTestMode, isdbtStatusNotificationEntry=isdbtStatusNotificationEntry, isdbtSetup=isdbtSetup, isdbtTmccLayerConstellation=isdbtTmccLayerConstellation, isdbtTmccLayerIdx=isdbtTmccLayerIdx, isdbtOutput=isdbtOutput, PYSNMP_MODULE_ID=rsXx9IsdbtMibModule, isdbtStTxDelayOffset=isdbtStTxDelayOffset, isdbtEquipmentId=isdbtEquipmentId, isdbtActiveConfiguration=isdbtActiveConfiguration, isdbtStateEntry=isdbtStateEntry, isdbtOutTmccMode=isdbtOutTmccMode, isdbtTmccEntry=isdbtTmccEntry, isdbtLocalizationEquipmentID=isdbtLocalizationEquipmentID, isdbtNitRestampingTable=isdbtNitRestampingTable, isdbtTestGeneration=isdbtTestGeneration, isdbtStatusNotificationTxIdx=isdbtStatusNotificationTxIdx, isdbtOutTmccLayerConstellation=isdbtOutTmccLayerConstellation, isdbtOutStatusEntry=isdbtOutStatusEntry, isdbtNitVirtualChannelSource=isdbtNitVirtualChannelSource, isdbtNitFrequencySource=isdbtNitFrequencySource, rsXx9IsdbtGroups=rsXx9IsdbtGroups, isdbtStatusNotificationIdx=isdbtStatusNotificationIdx, isdbtCfgExcIdx=isdbtCfgExcIdx, isdbtNitTransportManualStreamId=isdbtNitTransportManualStreamId, isdbtLocalizationEquipmentControl=isdbtLocalizationEquipmentControl, isdbtOutTmccTable=isdbtOutTmccTable, isdbtNitTransportStreamIdSource=isdbtNitTransportStreamIdSource, isdbtTmccLayerCodeRate=isdbtTmccLayerCodeRate, isdbtTestTable=isdbtTestTable, isdbtCfgNetworkMode=isdbtCfgNetworkMode, isdbtOutTmccLayerTimeInterleaver=isdbtOutTmccLayerTimeInterleaver, isdbtTmccLayerSegments=isdbtTmccLayerSegments, isdbtOutTmccGuardInterval=isdbtOutTmccGuardInterval, isdbtCfgTxIdx=isdbtCfgTxIdx, isdbtFrameCounter=isdbtFrameCounter, isdbtTest=isdbtTest, isdbtConfigurationEntry=isdbtConfigurationEntry, isdbtOutTmccLayerCodeRate=isdbtOutTmccLayerCodeRate, rsXx9IsdbtMibModule=rsXx9IsdbtMibModule, isdbtStatusNotificationName=isdbtStatusNotificationName, isdbtNitAreaCodeSource=isdbtNitAreaCodeSource, rsXx9IsdbtConformance=rsXx9IsdbtConformance, isdbtStatusNotificationExcIdx=isdbtStatusNotificationExcIdx, isdbtLocalizationTable=isdbtLocalizationTable, IsdbtMode=IsdbtMode, IsdbtLayer=IsdbtLayer, isdbtIIP=isdbtIIP, isdbtOutStatusTable=isdbtOutStatusTable, isdbtNitNetworkIdSource=isdbtNitNetworkIdSource, isdbtTmccLayerEntry=isdbtTmccLayerEntry, isdbtObjObsoleted=isdbtObjObsoleted, isdbtCfgIipID=isdbtCfgIipID, isdbtOutTmccLayerEntry=isdbtOutTmccLayerEntry, isdbtOutTmccLayerSegments=isdbtOutTmccLayerSegments, isdbtStatus=isdbtStatus, isdbtNitRestampingEntry=isdbtNitRestampingEntry, IsdbtConstellation=IsdbtConstellation, isdbtNitManualNetworkId=isdbtNitManualNetworkId, isdbtTmccNext=isdbtTmccNext, isdbtTmccGuardInterval=isdbtTmccGuardInterval, isdbtStatusNotificationPriority=isdbtStatusNotificationPriority, isdbtOutTmccLayerTable=isdbtOutTmccLayerTable, isdbtCfgCoderSettingsSource=isdbtCfgCoderSettingsSource)
