#
# PySNMP MIB module AT-ENVMONv2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/allied/AT-ENVMONv2-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 09:39:05 2024
# On host fv-az566-8 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
DisplayStringUnsized, = mibBuilder.importSymbols("AT-SMI-MIB", "DisplayStringUnsized")
sysinfo, = mibBuilder.importSymbols("AT-SYSINFO-MIB", "sysinfo")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, TimeTicks, Bits, iso, ObjectIdentity, Integer32, Counter64, ModuleIdentity, MibIdentifier, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "TimeTicks", "Bits", "iso", "ObjectIdentity", "Integer32", "Counter64", "ModuleIdentity", "MibIdentifier", "NotificationType", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
atEnvMonv2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12))
atEnvMonv2.setRevisions(('2016-10-30 00:00', '2016-06-28 00:00', '2014-06-07 00:00', '2014-06-06 00:00', '2014-03-31 00:00', '2012-09-21 00:00', '2010-09-15 00:00', '2010-09-07 00:00', '2010-06-14 04:50', '2010-05-24 01:19', '2010-01-15 00:39', '2008-11-26 00:00', '2008-09-24 00:00', '2008-02-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: atEnvMonv2.setRevisionsDescriptions(('Swapped external PSU status failed/good states', 'Added support for level 1 and level 2 critical temperature events.', 'Additions for Industrial Ethernet support (i.e. contact input, contact output, external PSU status).', 'Added more descriptions to FanStackMemberId, VoltageStackMemberId,\n                TemperatureStackMemberId, PsbHostStackMemberId, PsbSensorStackMemberId,\n                and FaultLedStackMemberId.', 'Added support for critical temperature events', 'Added chassis switch (e.g. SBx8100) descriptions to stack-related MIB objects', 'Add atEnvMonv2PsbSensorReading field to atEnvMonv2PsbSensorEntry', 'Generic syntax tidy up', 'MIB revision history dates in descriptions updated.', 'OID of atEnvMonv2Traps reverted to 5 but deprecated. Added atEnvMonv2Notifications', 'Changed the OID value of atEnvMonv2Traps from 5 to 0 to meet RFC 3584 3.1', 'Removed recently added MIB objects that went against the\n                original intent of the environment monitoring MIB.', 'Appended v2 to all object names to clarify\n                version number of this mib.', 'Initial Revision',))
if mibBuilder.loadTexts: atEnvMonv2.setLastUpdated('201610300000Z')
if mibBuilder.loadTexts: atEnvMonv2.setOrganization('Allied Telesis, Inc')
if mibBuilder.loadTexts: atEnvMonv2.setContactInfo('http://www.alliedtelesis.com')
if mibBuilder.loadTexts: atEnvMonv2.setDescription('The AT Environment Monitoring v2 MIB for managing and\n                reporting data relating to voltage rails, fan speeds,\n                temperature sensors and power supply units.')
class AtEnvMonv2PsbSensorType(TextualConvention, Integer32):
    description = 'Indicates the type of a Power Supply Bay Device sensor.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("psbSensorTypeInvalid", 0), ("fanSpeedDiscrete", 1), ("temperatureDiscrete", 2), ("voltageDiscrete", 3))

atEnvMonv2Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0))
atEnvMonv2FanAlarmSetNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 1)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2FanStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanDescription"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanLowerThreshold"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanCurrentSpeed"))
if mibBuilder.loadTexts: atEnvMonv2FanAlarmSetNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FanAlarmSetNotify.setDescription('A notification generated when the monitored speed of a fan\n                drops below its lower threshold.')
atEnvMonv2FanAlarmClearedNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 2)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2FanStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanDescription"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanLowerThreshold"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanCurrentSpeed"))
if mibBuilder.loadTexts: atEnvMonv2FanAlarmClearedNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FanAlarmClearedNotify.setDescription('A notification generated when the monitored speed of a fan\n                returns to an acceptable value, the fan\n                having previously been in an alarm condition.')
atEnvMonv2VoltAlarmSetNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 3)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2VoltageStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageDescription"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageUpperThreshold"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageLowerThreshold"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageCurrent"))
if mibBuilder.loadTexts: atEnvMonv2VoltAlarmSetNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2VoltAlarmSetNotify.setDescription('A notification generated when the voltage of a monitored\n                voltage rail goes out of tolerance, either by\n                dropping below its lower threshold, or exceeding\n                its upper threshold.')
atEnvMonv2VoltAlarmClearedNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 4)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2VoltageStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageDescription"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageUpperThreshold"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageLowerThreshold"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageCurrent"))
if mibBuilder.loadTexts: atEnvMonv2VoltAlarmClearedNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2VoltAlarmClearedNotify.setDescription('A notification generated when the voltage of a monitored\n                voltage rail returns to an acceptable value,\n                having previously been in an alarm condition.')
atEnvMonv2TempAlarmSetNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 5)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureDescription"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureUpperThreshold"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureCurrent"))
if mibBuilder.loadTexts: atEnvMonv2TempAlarmSetNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TempAlarmSetNotify.setDescription('A notification generated when a monitored temperature\n                exceeds its upper threshold.')
atEnvMonv2TempAlarmClearedNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 6)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureDescription"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureUpperThreshold"))
if mibBuilder.loadTexts: atEnvMonv2TempAlarmClearedNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TempAlarmClearedNotify.setDescription('A notification generated when a monitored temperature\n                returns to an acceptable value, having\n                previously been in an alarm condition.')
atEnvMonv2PsbAlarmSetNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 7)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorType"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorDescription"))
if mibBuilder.loadTexts: atEnvMonv2PsbAlarmSetNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbAlarmSetNotify.setDescription('A notification generated when a monitored parameter of\n                a power supply bay device goes out of\n                tolerance.')
atEnvMonv2PsbAlarmClearedNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 8)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorType"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorDescription"))
if mibBuilder.loadTexts: atEnvMonv2PsbAlarmClearedNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbAlarmClearedNotify.setDescription('A notification generated when a monitored parameter of\n                a power supply bay device returns to an\n                acceptable value, having previously been\n                in an alarm condition.')
atEnvMonv2ContactInputOpenNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 9)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2ContactInputStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2ContactInputBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2ContactInputIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2ContactInputDescription"))
if mibBuilder.loadTexts: atEnvMonv2ContactInputOpenNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactInputOpenNotify.setDescription('A notification generated when a monitored contact input opens.')
atEnvMonv2ContactInputCloseNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 10)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2ContactInputStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2ContactInputBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2ContactInputIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2ContactInputDescription"))
if mibBuilder.loadTexts: atEnvMonv2ContactInputCloseNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactInputCloseNotify.setDescription('A notification generated when a monitored contact input closes.')
atEnvMonv2ExternalPSUAlarmSetNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 11)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2ExternalPSUStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2ExternalPSUBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2ExternalPSUIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2ExternalPSUDescription"))
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUAlarmSetNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUAlarmSetNotify.setDescription('A notification generated when supply potential of \n                a monitored external power supply is not present.')
atEnvMonv2ExternalPSUAlarmClearedNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 12)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2ExternalPSUStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2ExternalPSUBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2ExternalPSUIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2ExternalPSUDescription"))
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUAlarmClearedNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUAlarmClearedNotify.setDescription('A notification generated when supply potential of\n                a monitored external power supply returns to an\n                acceptable value, having previously been in an\n                alarm condition.')
atEnvMonv2TempCriticalSetNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 13)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureStackMemberId"))
if mibBuilder.loadTexts: atEnvMonv2TempCriticalSetNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TempCriticalSetNotify.setDescription('A notification generated when a monitored temperature\n                exceeds its upper threshold.')
atEnvMonv2TempCriticalClearedNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 14)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureStackMemberId"))
if mibBuilder.loadTexts: atEnvMonv2TempCriticalClearedNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TempCriticalClearedNotify.setDescription('A notification generated when a monitored temperature\n                returns to an acceptable value, having\n                previously been in an alarm condition.')
atEnvMonv2TempCriticalLevel1SetNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 15)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureStackMemberId"))
if mibBuilder.loadTexts: atEnvMonv2TempCriticalLevel1SetNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TempCriticalLevel1SetNotify.setDescription('A notification generated when a monitored temperature\n                exceeds the level 1 threshold.')
atEnvMonv2TempCriticalLevel1ClearedNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 16)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureStackMemberId"))
if mibBuilder.loadTexts: atEnvMonv2TempCriticalLevel1ClearedNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TempCriticalLevel1ClearedNotify.setDescription('A notification generated when a monitored temperature\n                returns to an acceptable value, having previously been in\n                critical temperature level 1 condition.')
atEnvMonv2TempCriticalLevel2SetNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 17)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureStackMemberId"))
if mibBuilder.loadTexts: atEnvMonv2TempCriticalLevel2SetNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TempCriticalLevel2SetNotify.setDescription('A notification generated when a monitored temperature\n                exceeds the level 2 threshold.')
atEnvMonv2TempCriticalLevel2ClearedNotify = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 0, 18)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureStackMemberId"))
if mibBuilder.loadTexts: atEnvMonv2TempCriticalLevel2ClearedNotify.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TempCriticalLevel2ClearedNotify.setDescription('A notification generated when a monitored temperature\n                returns to an acceptable value, having previously been in\n                critical temperature level 2 condition.')
atEnvMonv2FanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 1), )
if mibBuilder.loadTexts: atEnvMonv2FanTable.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FanTable.setDescription('A table of information about fans installed in the device\n                that have their fan speeds monitored by environment\n                monitoring hardware.')
atEnvMonv2FanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 1, 1), ).setIndexNames((0, "AT-ENVMONv2-MIB", "atEnvMonv2FanStackMemberId"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2FanBoardIndex"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2FanIndex"))
if mibBuilder.loadTexts: atEnvMonv2FanEntry.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FanEntry.setDescription('The description, current speed, lower threshold speed and\n                current status of a fan.')
atEnvMonv2FanStackMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2FanStackMemberId.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FanStackMemberId.setDescription('The index of the stack member hosting this fan. For a chassis\n                switch, it corresponds to the card ID of the controller that\n                is monitoring the chassis hardware, e.g. 5 or 6. In a VCStack\n                Plus, the second chassis uses controller IDs 17 or 18. Refer\n                to chassisMappingTable for more details.')
atEnvMonv2FanBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2FanBoardIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FanBoardIndex.setDescription('The index of the board hosting this fan in the board table.')
atEnvMonv2FanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2FanIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FanIndex.setDescription('The numeric identifier of this fan on its host board.')
atEnvMonv2FanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 1, 1, 4), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2FanDescription.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FanDescription.setDescription('The description of this fan.')
atEnvMonv2FanCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2FanCurrentSpeed.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FanCurrentSpeed.setDescription('The current speed of this fan in revolutions per\n                minute.')
atEnvMonv2FanLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2FanLowerThreshold.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FanLowerThreshold.setDescription('The minimum acceptable speed of the fan in revolutions\n                per minute.')
atEnvMonv2FanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("good", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2FanStatus.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FanStatus.setDescription("An indication of whether this fan is currently in an\n                alarm condition. A value of 'failed(1)' indicates that its\n                current speed is too low, 'good(2)' indicates that the\n                current speed is acceptable.")
atEnvMonv2VoltageTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 2), )
if mibBuilder.loadTexts: atEnvMonv2VoltageTable.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2VoltageTable.setDescription('A table of information about voltage rails in the device\n                that are monitored by environment monitoring hardware.')
atEnvMonv2VoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 2, 1), ).setIndexNames((0, "AT-ENVMONv2-MIB", "atEnvMonv2VoltageStackMemberId"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2VoltageBoardIndex"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2VoltageIndex"))
if mibBuilder.loadTexts: atEnvMonv2VoltageEntry.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2VoltageEntry.setDescription('The description, current value, upper & lower threshold\n                settings and current status of a voltage rail.')
atEnvMonv2VoltageStackMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2VoltageStackMemberId.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2VoltageStackMemberId.setDescription('The index of the stack member hosting this voltage sensor. For\n                a chassis switch, it corresponds to the card ID of the controller\n                that is monitoring the chassis hardware, e.g. 5 or 6. In a VCStack\n                Plus, the second chassis uses controller IDs 17 or 18. Refer to\n                chassisMappingTable for more details.')
atEnvMonv2VoltageBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2VoltageBoardIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2VoltageBoardIndex.setDescription('The index of the board hosting this voltage sensor in the board table.')
atEnvMonv2VoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2VoltageIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2VoltageIndex.setDescription('The numeric identifier of this voltage rail on its host board.')
atEnvMonv2VoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 2, 1, 4), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2VoltageDescription.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2VoltageDescription.setDescription('The description of this voltage rail.')
atEnvMonv2VoltageCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2VoltageCurrent.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2VoltageCurrent.setDescription('The current reading of this voltage rail in millivolts.')
atEnvMonv2VoltageUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2VoltageUpperThreshold.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2VoltageUpperThreshold.setDescription('The maximum acceptable reading of this voltage rail in millivolts.')
atEnvMonv2VoltageLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2VoltageLowerThreshold.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2VoltageLowerThreshold.setDescription('The minimum acceptable reading of this voltage rail in millivolts.')
atEnvMonv2VoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfRange", 1), ("inRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2VoltageStatus.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2VoltageStatus.setDescription("An indication of whether this voltage rail is currently\n                in an alarm condition. A value of 'outOfRange' indicates that\n                its current reading is outside its threshold range,\n                'inRange' indicates that the current reading is acceptable.")
atEnvMonv2TemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 3), )
if mibBuilder.loadTexts: atEnvMonv2TemperatureTable.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TemperatureTable.setDescription('A table of information about temperature sensors in the device\n                that are monitored by environment monitoring hardware.')
atEnvMonv2TemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 3, 1), ).setIndexNames((0, "AT-ENVMONv2-MIB", "atEnvMonv2TemperatureStackMemberId"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2TemperatureBoardIndex"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2TemperatureIndex"))
if mibBuilder.loadTexts: atEnvMonv2TemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TemperatureEntry.setDescription('The description, current value, upper threshold setting\n                and current status of a temperature sensor.')
atEnvMonv2TemperatureStackMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2TemperatureStackMemberId.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TemperatureStackMemberId.setDescription('The index of the stack member hosting this temperature sensor. For\n                a chassis switch, it corresponds to the card ID of the controller\n                that is monitoring the chassis hardware, e.g. 5 or 6. In a VCStack\n                Plus, the second chassis uses controller IDs 17 or 18. Refer to\n                chassisMappingTable for more details.')
atEnvMonv2TemperatureBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2TemperatureBoardIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TemperatureBoardIndex.setDescription('The index of the board hosting this temperature sensor in the board table.')
atEnvMonv2TemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2TemperatureIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TemperatureIndex.setDescription('The numeric identifier of this temperature sensor on its host board.')
atEnvMonv2TemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 3, 1, 4), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2TemperatureDescription.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TemperatureDescription.setDescription('The description of this temperature sensor.')
atEnvMonv2TemperatureCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2TemperatureCurrent.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TemperatureCurrent.setDescription('The current reading of this temperature sensor in tenths of a degree Celsius.')
atEnvMonv2TemperatureUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2TemperatureUpperThreshold.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TemperatureUpperThreshold.setDescription('The maximum acceptable reading of this temperature\n                sensor in tenths of a degree Celsius.')
atEnvMonv2TemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfRange", 1), ("inRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2TemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2TemperatureStatus.setDescription("An indication of whether this temperature sensor is\n                currently in an alarm condition. A value of 'outOfRange'\n                indicates that its current reading is outside its threshold\n                range, 'inRange' indicates that the current reading is\n                acceptable.")
atEnvMonv2PsbObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4))
atEnvMonv2PsbTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 1), )
if mibBuilder.loadTexts: atEnvMonv2PsbTable.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbTable.setDescription('A table of information about power supply bays in the system and\n                any devices that are installed.')
atEnvMonv2PsbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 1, 1), ).setIndexNames((0, "AT-ENVMONv2-MIB", "atEnvMonv2PsbHostStackMemberId"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2PsbHostBoardIndex"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2PsbHostSlotIndex"))
if mibBuilder.loadTexts: atEnvMonv2PsbEntry.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbEntry.setDescription('The description and current status of a power supply\n                bay device.')
atEnvMonv2PsbHostStackMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2PsbHostStackMemberId.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbHostStackMemberId.setDescription('The index of the stack member hosting this power supply bay. For\n                a chassis switch, it corresponds to the card ID of the controller\n                that is monitoring the chassis hardware, e.g. 5 or 6. In a VCStack\n                Plus, the second chassis uses controller IDs 17 or 18. Refer to\n                chassisMappingTable for more details.')
atEnvMonv2PsbHostBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2PsbHostBoardIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbHostBoardIndex.setDescription('The index of the board hosting this power supply bay in the board table.')
atEnvMonv2PsbHostSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2PsbHostSlotIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbHostSlotIndex.setDescription('The index of this power supply bay on its host board.\n                This index is fixed for each slot, on each type of board.')
atEnvMonv2PsbHeldBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2PsbHeldBoardIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbHeldBoardIndex.setDescription('The index of a board installed in this power supply bay.\n                This value corresponds to atEnvMonv2PsbSensorBoardIndex for\n                each sensor on this board. A value of 0 indicates that a\n                board is is either not present or not supported.')
atEnvMonv2PsbHeldBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2PsbHeldBoardId.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbHeldBoardId.setDescription('The type of board installed in this power supply bay. The\n                values of this object are taken from the pprXxx object IDs\n                under the boards sub-tree in the parent MIB. A value of 0\n                indicates that a board is either not present or not\n                supported.')
atEnvMonv2PsbDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 1, 1, 6), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2PsbDescription.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbDescription.setDescription('The description of this power supply bay.')
atEnvMonv2PsbSensorTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 2), )
if mibBuilder.loadTexts: atEnvMonv2PsbSensorTable.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbSensorTable.setDescription('A table of information about environment monitoring sensors\n                on devices installed in power supply bays.')
atEnvMonv2PsbSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 2, 1), ).setIndexNames((0, "AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorStackMemberId"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorBoardIndex"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorIndex"))
if mibBuilder.loadTexts: atEnvMonv2PsbSensorEntry.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbSensorEntry.setDescription('The description and current status of a device installed\n                in a power supply bay.')
atEnvMonv2PsbSensorStackMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2PsbSensorStackMemberId.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbSensorStackMemberId.setDescription('The index of the stack member hosting this sensor. For a\n                chassis switch, it corresponds to the card ID of the controller\n                that is monitoring the chassis hardware, e.g. 5 or 6. In a VCStack\n                Plus, the second chassis uses controller IDs 17 or 18. Refer to\n                chassisMappingTable for more details.')
atEnvMonv2PsbSensorBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2PsbSensorBoardIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbSensorBoardIndex.setDescription('The index of the board hosting this sensor in the board table.')
atEnvMonv2PsbSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2PsbSensorIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbSensorIndex.setDescription('The index of this power supply bay environmental sensor on\n                its host board.')
atEnvMonv2PsbSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 2, 1, 4), AtEnvMonv2PsbSensorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2PsbSensorType.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbSensorType.setDescription('The type of environmental variable this sensor detects.')
atEnvMonv2PsbSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 2, 1, 5), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2PsbSensorDescription.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbSensorDescription.setDescription('The description of this power supply bay environmental sensor.')
atEnvMonv2PsbSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("good", 2), ("notPowered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2PsbSensorStatus.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbSensorStatus.setDescription("An indication of whether this environmental sensor is currently\n                in an alarm condition. A value of 'failed(1)' indicates that\n                the device is in a failure condition, 'good(2)' indicates that\n                the device is functioning normally.")
atEnvMonv2PsbSensorReading = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2PsbSensorReading.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2PsbSensorReading.setDescription("An indication of whether this environmental sensor is\n                currently reading a value for the monitored device. A value\n                of 'no' indicates that there is no current reading, 'yes' indicates\n                that the monitored device is supplying a reading.")
atEnvMonv2Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 5))
atEnvMonv2FanAlarmSetEvent = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 5, 1)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2FanStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanDescription"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanLowerThreshold"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanCurrentSpeed"))
if mibBuilder.loadTexts: atEnvMonv2FanAlarmSetEvent.setStatus('deprecated')
if mibBuilder.loadTexts: atEnvMonv2FanAlarmSetEvent.setDescription('A trap generated when the monitored speed of a fan\n                drops below its lower threshold.')
atEnvMonv2FanAlarmClearedEvent = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 5, 2)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2FanStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanDescription"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanLowerThreshold"), ("AT-ENVMONv2-MIB", "atEnvMonv2FanCurrentSpeed"))
if mibBuilder.loadTexts: atEnvMonv2FanAlarmClearedEvent.setStatus('deprecated')
if mibBuilder.loadTexts: atEnvMonv2FanAlarmClearedEvent.setDescription('A trap generated when the monitored speed of a fan\n                returns to an acceptable value, the fan\n                having previously been in an alarm condition.')
atEnvMonv2VoltAlarmSetEvent = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 5, 3)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2VoltageStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageDescription"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageUpperThreshold"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageLowerThreshold"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageCurrent"))
if mibBuilder.loadTexts: atEnvMonv2VoltAlarmSetEvent.setStatus('deprecated')
if mibBuilder.loadTexts: atEnvMonv2VoltAlarmSetEvent.setDescription('A trap generated when the voltage of a monitored\n                voltage rail goes out of tolerance, either by\n                dropping below its lower threshold, or exceeding\n                its upper threshold.')
atEnvMonv2VoltAlarmClearedEvent = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 5, 4)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2VoltageStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageDescription"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageUpperThreshold"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageLowerThreshold"), ("AT-ENVMONv2-MIB", "atEnvMonv2VoltageCurrent"))
if mibBuilder.loadTexts: atEnvMonv2VoltAlarmClearedEvent.setStatus('deprecated')
if mibBuilder.loadTexts: atEnvMonv2VoltAlarmClearedEvent.setDescription('A trap generated when the voltage of a monitored\n                voltage rail returns to an acceptable value,\n                having previously been in an alarm condition.')
atEnvMonv2TempAlarmSetEvent = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 5, 5)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureDescription"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureUpperThreshold"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureCurrent"))
if mibBuilder.loadTexts: atEnvMonv2TempAlarmSetEvent.setStatus('deprecated')
if mibBuilder.loadTexts: atEnvMonv2TempAlarmSetEvent.setDescription('A trap generated when a monitored temperature\n                exceeds its upper threshold.')
atEnvMonv2TempAlarmClearedEvent = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 5, 6)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureDescription"), ("AT-ENVMONv2-MIB", "atEnvMonv2TemperatureUpperThreshold"))
if mibBuilder.loadTexts: atEnvMonv2TempAlarmClearedEvent.setStatus('deprecated')
if mibBuilder.loadTexts: atEnvMonv2TempAlarmClearedEvent.setDescription('A trap generated when a monitored temperature\n                returns to an acceptable value, having\n                previously been in an alarm condition.')
atEnvMonv2PsbAlarmSetEvent = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 5, 7)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorType"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorDescription"))
if mibBuilder.loadTexts: atEnvMonv2PsbAlarmSetEvent.setStatus('deprecated')
if mibBuilder.loadTexts: atEnvMonv2PsbAlarmSetEvent.setDescription('A trap generated when a monitored parameter of\n                a power supply bay device goes out of\n                tolerance.')
atEnvMonv2PsbAlarmClearedEvent = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 5, 8)).setObjects(("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorStackMemberId"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorBoardIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorIndex"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorType"), ("AT-ENVMONv2-MIB", "atEnvMonv2PsbSensorDescription"))
if mibBuilder.loadTexts: atEnvMonv2PsbAlarmClearedEvent.setStatus('deprecated')
if mibBuilder.loadTexts: atEnvMonv2PsbAlarmClearedEvent.setDescription('A trap generated when a monitored parameter of\n                a power supply bay device returns to an\n                acceptable value, having previously been\n                in an alarm condition.')
atEnvMonv2FaultLedTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 6), )
if mibBuilder.loadTexts: atEnvMonv2FaultLedTable.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FaultLedTable.setDescription('A table of information detailing any LED fault indications on\n                the device.')
atEnvMonv2FaultLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 6, 1), ).setIndexNames((0, "AT-ENVMONv2-MIB", "atEnvMonv2FaultLedStackMemberId"))
if mibBuilder.loadTexts: atEnvMonv2FaultLedEntry.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FaultLedEntry.setDescription('An entry pertaining to a given fault LED.')
atEnvMonv2FaultLedStackMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2FaultLedStackMemberId.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FaultLedStackMemberId.setDescription('The index of the stack member hosting this fault LED. For a\n                chassis switch, it corresponds to the card ID of the controller\n                that is monitoring the chassis hardware, e.g. 5 or 6. In a VCStack\n                Plus, the second chassis uses controller IDs 17 or 18. Refer to\n                chassisMappingTable for more details.')
atEnvMonv2FaultLed1Flash = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("heatsinkFanFailure", 1), ("noFault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2FaultLed1Flash.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FaultLed1Flash.setDescription('This object indicates whether a fault LED is currently showing\n                a system failure by flashing once. It indicates that one or\n                more heatsink fans have failed, or are operating below the\n                recommended speed.')
atEnvMonv2FaultLed2Flashes = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chassisFanFailure", 1), ("noFault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2FaultLed2Flashes.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FaultLed2Flashes.setDescription('This object indicates whether a fault LED is currently showing\n                a system failure by flashing twice. It indicates that one or\n                both of the chassis fans are not installed, or the fans are\n                operating below the recommended speed.')
atEnvMonv2FaultLed3Flashes = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sensorFailure", 1), ("noFault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2FaultLed3Flashes.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FaultLed3Flashes.setDescription('This object indicates whether a fault LED is currently showing\n                a system failure by flashing three times. It indicates that the\n                ability to monitor temperature or fans has failed.')
atEnvMonv2FaultLed4Flashes = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("xemInitialisationFailure", 1), ("noFault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2FaultLed4Flashes.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FaultLed4Flashes.setDescription('This object indicates whether a fault LED is currently showing\n                a system failure by flashing four times. It indicates that an\n                XEM failed to initialise or is incompatible.')
atEnvMonv2FaultLed5Flashes = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("noFault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2FaultLed5Flashes.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FaultLed5Flashes.setDescription('This object indicates whether a fault LED is currently showing\n                a system failure by flashing five times. This flashing\n                sequence is not currently in use.')
atEnvMonv2FaultLed6Flashes = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("temperatureFailure", 1), ("noFault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2FaultLed6Flashes.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2FaultLed6Flashes.setDescription("This object indicates whether a fault LED is currently showing\n                a system failure by flashing six times. It indicates that the\n                device's temperature has exceeded the recommended threshold.")
atEnvMonv2ContactInputTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 7), )
if mibBuilder.loadTexts: atEnvMonv2ContactInputTable.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactInputTable.setDescription('A table of information about contact inputs available in the\n                device that are monitored by environment monitoring hardware.')
atEnvMonv2ContactInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 7, 1), ).setIndexNames((0, "AT-ENVMONv2-MIB", "atEnvMonv2ContactInputStackMemberId"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2ContactInputBoardIndex"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2ContactInputIndex"))
if mibBuilder.loadTexts: atEnvMonv2ContactInputEntry.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactInputEntry.setDescription('The description and current state of a contact input.')
atEnvMonv2ContactInputStackMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2ContactInputStackMemberId.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactInputStackMemberId.setDescription('The index of the stack member hosting this contact input.')
atEnvMonv2ContactInputBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2ContactInputBoardIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactInputBoardIndex.setDescription('The index of the board hosting this contact input in the board table.')
atEnvMonv2ContactInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2ContactInputIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactInputIndex.setDescription('The numeric identifier of this contact input on its host board.')
atEnvMonv2ContactInputDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 7, 1, 4), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2ContactInputDescription.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactInputDescription.setDescription('The description of this contact input.')
atEnvMonv2ContactInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2ContactInputState.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactInputState.setDescription('An indication of whether this contact input is currently\n                open or closed.')
atEnvMonv2ContactOutputTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 8), )
if mibBuilder.loadTexts: atEnvMonv2ContactOutputTable.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactOutputTable.setDescription('A table of information about contact outputs available in the\n                device that are managed by environment monitoring hardware.')
atEnvMonv2ContactOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 8, 1), ).setIndexNames((0, "AT-ENVMONv2-MIB", "atEnvMonv2ContactOutputStackMemberId"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2ContactOutputBoardIndex"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2ContactOutputIndex"))
if mibBuilder.loadTexts: atEnvMonv2ContactOutputEntry.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactOutputEntry.setDescription('The description and current state of a contact output.')
atEnvMonv2ContactOutputStackMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2ContactOutputStackMemberId.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactOutputStackMemberId.setDescription('The index of the stack member hosting this contact output.')
atEnvMonv2ContactOutputBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2ContactOutputBoardIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactOutputBoardIndex.setDescription('The index of the board hosting this contact output in the board table.')
atEnvMonv2ContactOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2ContactOutputIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactOutputIndex.setDescription('The numeric identifier of this contact output on its host board.')
atEnvMonv2ContactOutputDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 8, 1, 4), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2ContactOutputDescription.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactOutputDescription.setDescription('The description of this contact output.')
atEnvMonv2ContactOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2ContactOutputState.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ContactOutputState.setDescription('An indication of whether this contact output is currently\n                open or closed.')
atEnvMonv2ExternalPSUTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 9), )
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUTable.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUTable.setDescription('Table of external PSU status.')
atEnvMonv2ExternalPSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 9, 1), ).setIndexNames((0, "AT-ENVMONv2-MIB", "atEnvMonv2ExternalPSUStackMemberId"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2ExternalPSUBoardIndex"), (0, "AT-ENVMONv2-MIB", "atEnvMonv2ExternalPSUIndex"))
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUEntry.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUEntry.setDescription('The description and current status of an external power supply.')
atEnvMonv2ExternalPSUStackMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUStackMemberId.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUStackMemberId.setDescription('The index of the stack member hosting this external PSU.')
atEnvMonv2ExternalPSUBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUBoardIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUBoardIndex.setDescription('The index of the board hosting this external PSU in the board table.')
atEnvMonv2ExternalPSUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUIndex.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUIndex.setDescription('The numeric identifier of this external PSU on its host board.')
atEnvMonv2ExternalPSUDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 9, 1, 4), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUDescription.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUDescription.setDescription('The description of this external PSU.')
atEnvMonv2ExternalPSUState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 12, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("good", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUState.setStatus('current')
if mibBuilder.loadTexts: atEnvMonv2ExternalPSUState.setDescription("An indication of whether the supply potential of the external power\n                supply is present or not. A value of 'failed(1)' indicates that\n                no power is being received on this input, 'good(2)' indicates that\n                this input is receiving power from the external power supply.")
mibBuilder.exportSymbols("AT-ENVMONv2-MIB", AtEnvMonv2PsbSensorType=AtEnvMonv2PsbSensorType, atEnvMonv2TemperatureDescription=atEnvMonv2TemperatureDescription, atEnvMonv2ExternalPSUDescription=atEnvMonv2ExternalPSUDescription, atEnvMonv2PsbSensorTable=atEnvMonv2PsbSensorTable, atEnvMonv2VoltageStackMemberId=atEnvMonv2VoltageStackMemberId, atEnvMonv2FaultLedStackMemberId=atEnvMonv2FaultLedStackMemberId, atEnvMonv2VoltageEntry=atEnvMonv2VoltageEntry, atEnvMonv2FanAlarmSetNotify=atEnvMonv2FanAlarmSetNotify, atEnvMonv2PsbSensorEntry=atEnvMonv2PsbSensorEntry, atEnvMonv2TempCriticalLevel1ClearedNotify=atEnvMonv2TempCriticalLevel1ClearedNotify, atEnvMonv2ContactInputIndex=atEnvMonv2ContactInputIndex, atEnvMonv2VoltAlarmClearedEvent=atEnvMonv2VoltAlarmClearedEvent, atEnvMonv2TemperatureIndex=atEnvMonv2TemperatureIndex, atEnvMonv2ExternalPSUAlarmSetNotify=atEnvMonv2ExternalPSUAlarmSetNotify, atEnvMonv2ContactOutputState=atEnvMonv2ContactOutputState, atEnvMonv2VoltageLowerThreshold=atEnvMonv2VoltageLowerThreshold, atEnvMonv2PsbSensorType=atEnvMonv2PsbSensorType, atEnvMonv2Notifications=atEnvMonv2Notifications, atEnvMonv2PsbAlarmClearedNotify=atEnvMonv2PsbAlarmClearedNotify, atEnvMonv2ContactOutputEntry=atEnvMonv2ContactOutputEntry, atEnvMonv2FanTable=atEnvMonv2FanTable, atEnvMonv2PsbDescription=atEnvMonv2PsbDescription, atEnvMonv2FaultLedEntry=atEnvMonv2FaultLedEntry, atEnvMonv2TemperatureCurrent=atEnvMonv2TemperatureCurrent, atEnvMonv2PsbSensorIndex=atEnvMonv2PsbSensorIndex, atEnvMonv2ContactOutputTable=atEnvMonv2ContactOutputTable, atEnvMonv2FaultLed3Flashes=atEnvMonv2FaultLed3Flashes, atEnvMonv2ExternalPSUState=atEnvMonv2ExternalPSUState, atEnvMonv2FanAlarmClearedEvent=atEnvMonv2FanAlarmClearedEvent, atEnvMonv2FanAlarmClearedNotify=atEnvMonv2FanAlarmClearedNotify, atEnvMonv2FaultLed1Flash=atEnvMonv2FaultLed1Flash, atEnvMonv2TempAlarmSetNotify=atEnvMonv2TempAlarmSetNotify, atEnvMonv2FanCurrentSpeed=atEnvMonv2FanCurrentSpeed, atEnvMonv2PsbAlarmClearedEvent=atEnvMonv2PsbAlarmClearedEvent, atEnvMonv2TempCriticalSetNotify=atEnvMonv2TempCriticalSetNotify, atEnvMonv2FanDescription=atEnvMonv2FanDescription, atEnvMonv2VoltAlarmSetNotify=atEnvMonv2VoltAlarmSetNotify, atEnvMonv2TemperatureStackMemberId=atEnvMonv2TemperatureStackMemberId, atEnvMonv2PsbSensorStatus=atEnvMonv2PsbSensorStatus, atEnvMonv2VoltAlarmClearedNotify=atEnvMonv2VoltAlarmClearedNotify, atEnvMonv2PsbObjects=atEnvMonv2PsbObjects, atEnvMonv2ContactOutputStackMemberId=atEnvMonv2ContactOutputStackMemberId, atEnvMonv2TempAlarmClearedNotify=atEnvMonv2TempAlarmClearedNotify, atEnvMonv2FanEntry=atEnvMonv2FanEntry, atEnvMonv2PsbTable=atEnvMonv2PsbTable, atEnvMonv2ContactInputStackMemberId=atEnvMonv2ContactInputStackMemberId, atEnvMonv2ExternalPSUBoardIndex=atEnvMonv2ExternalPSUBoardIndex, atEnvMonv2TemperatureEntry=atEnvMonv2TemperatureEntry, atEnvMonv2VoltageDescription=atEnvMonv2VoltageDescription, atEnvMonv2ContactInputState=atEnvMonv2ContactInputState, atEnvMonv2FanBoardIndex=atEnvMonv2FanBoardIndex, atEnvMonv2PsbHostSlotIndex=atEnvMonv2PsbHostSlotIndex, atEnvMonv2TemperatureStatus=atEnvMonv2TemperatureStatus, atEnvMonv2PsbHostStackMemberId=atEnvMonv2PsbHostStackMemberId, atEnvMonv2FanStackMemberId=atEnvMonv2FanStackMemberId, atEnvMonv2FanLowerThreshold=atEnvMonv2FanLowerThreshold, atEnvMonv2FaultLed2Flashes=atEnvMonv2FaultLed2Flashes, atEnvMonv2ContactInputTable=atEnvMonv2ContactInputTable, atEnvMonv2PsbEntry=atEnvMonv2PsbEntry, atEnvMonv2VoltageStatus=atEnvMonv2VoltageStatus, atEnvMonv2FaultLedTable=atEnvMonv2FaultLedTable, atEnvMonv2TempCriticalLevel1SetNotify=atEnvMonv2TempCriticalLevel1SetNotify, atEnvMonv2TempAlarmSetEvent=atEnvMonv2TempAlarmSetEvent, atEnvMonv2FanAlarmSetEvent=atEnvMonv2FanAlarmSetEvent, atEnvMonv2ContactOutputBoardIndex=atEnvMonv2ContactOutputBoardIndex, atEnvMonv2TemperatureUpperThreshold=atEnvMonv2TemperatureUpperThreshold, atEnvMonv2PsbHostBoardIndex=atEnvMonv2PsbHostBoardIndex, atEnvMonv2ExternalPSUAlarmClearedNotify=atEnvMonv2ExternalPSUAlarmClearedNotify, atEnvMonv2VoltageTable=atEnvMonv2VoltageTable, atEnvMonv2VoltageCurrent=atEnvMonv2VoltageCurrent, atEnvMonv2PsbSensorDescription=atEnvMonv2PsbSensorDescription, atEnvMonv2FaultLed5Flashes=atEnvMonv2FaultLed5Flashes, atEnvMonv2TemperatureBoardIndex=atEnvMonv2TemperatureBoardIndex, atEnvMonv2VoltageIndex=atEnvMonv2VoltageIndex, atEnvMonv2FaultLed6Flashes=atEnvMonv2FaultLed6Flashes, atEnvMonv2PsbHeldBoardIndex=atEnvMonv2PsbHeldBoardIndex, atEnvMonv2TempCriticalLevel2SetNotify=atEnvMonv2TempCriticalLevel2SetNotify, atEnvMonv2ContactInputCloseNotify=atEnvMonv2ContactInputCloseNotify, atEnvMonv2VoltageUpperThreshold=atEnvMonv2VoltageUpperThreshold, atEnvMonv2TemperatureTable=atEnvMonv2TemperatureTable, atEnvMonv2PsbAlarmSetNotify=atEnvMonv2PsbAlarmSetNotify, atEnvMonv2ExternalPSUStackMemberId=atEnvMonv2ExternalPSUStackMemberId, atEnvMonv2ContactInputOpenNotify=atEnvMonv2ContactInputOpenNotify, atEnvMonv2TempAlarmClearedEvent=atEnvMonv2TempAlarmClearedEvent, atEnvMonv2ExternalPSUEntry=atEnvMonv2ExternalPSUEntry, atEnvMonv2PsbAlarmSetEvent=atEnvMonv2PsbAlarmSetEvent, atEnvMonv2ContactOutputIndex=atEnvMonv2ContactOutputIndex, atEnvMonv2ContactOutputDescription=atEnvMonv2ContactOutputDescription, atEnvMonv2FanStatus=atEnvMonv2FanStatus, atEnvMonv2PsbSensorStackMemberId=atEnvMonv2PsbSensorStackMemberId, atEnvMonv2PsbHeldBoardId=atEnvMonv2PsbHeldBoardId, atEnvMonv2ExternalPSUTable=atEnvMonv2ExternalPSUTable, atEnvMonv2ContactInputBoardIndex=atEnvMonv2ContactInputBoardIndex, atEnvMonv2PsbSensorReading=atEnvMonv2PsbSensorReading, atEnvMonv2ContactInputEntry=atEnvMonv2ContactInputEntry, atEnvMonv2=atEnvMonv2, PYSNMP_MODULE_ID=atEnvMonv2, atEnvMonv2FanIndex=atEnvMonv2FanIndex, atEnvMonv2ExternalPSUIndex=atEnvMonv2ExternalPSUIndex, atEnvMonv2VoltAlarmSetEvent=atEnvMonv2VoltAlarmSetEvent, atEnvMonv2VoltageBoardIndex=atEnvMonv2VoltageBoardIndex, atEnvMonv2TempCriticalLevel2ClearedNotify=atEnvMonv2TempCriticalLevel2ClearedNotify, atEnvMonv2ContactInputDescription=atEnvMonv2ContactInputDescription, atEnvMonv2PsbSensorBoardIndex=atEnvMonv2PsbSensorBoardIndex, atEnvMonv2Traps=atEnvMonv2Traps, atEnvMonv2FaultLed4Flashes=atEnvMonv2FaultLed4Flashes, atEnvMonv2TempCriticalClearedNotify=atEnvMonv2TempCriticalClearedNotify)
