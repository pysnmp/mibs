#
# PySNMP MIB module PM8ECCMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/schneider/PM8ECCMIB
# Produced by pysmi-1.1.12 at Tue May 28 11:52:12 2024
# On host fv-az665-912 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ObjectIdentity, MibIdentifier, IpAddress, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, Counter32, Unsigned32, iso, enterprises, Bits, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "MibIdentifier", "IpAddress", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "Counter32", "Unsigned32", "iso", "enterprises", "Bits", "Counter64", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class AlarmType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(10, 11, 12, 20, 21, 51, 52, 53, 54, 55, 60, 61, 70, 80, 90, 100, 101, 102, 103, 104, 105, 1280))
    namedValues = NamedValues(("overValue", 10), ("overPower", 11), ("overReversePower", 12), ("underValue", 20), ("underPower", 21), ("phaseRotationReversal", 51), ("phaseLossVoltage", 52), ("phaseLossCurrent", 53), ("powerFactorLeading", 54), ("powerFactorLagging", 55), ("digitalInputOFFtoON", 60), ("digitalInputONtoOFF", 61), ("unaryEvent", 70), ("voltageOrCurrentSwell", 80), ("voltageOrCurrentSag", 90), ("combinatorialAND", 100), ("combinatorialNAND", 101), ("combinatorialOR", 102), ("combinatorialNOR", 103), ("combinatorialXOR", 104), ("combinatorialNOT", 105), ("diagnostic", 1280))

class IOPointType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("digitalInput", 1), ("digitalOutput", 2), ("analogInput", 3), ("analogOutput", 4))

class IOPointLabel(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class AlarmLabel(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

schneiderElectric = MibIdentifier((1, 3, 6, 1, 4, 1, 3833))
transparentFactoryEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1))
equipmentProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7))
tfProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255))
ecc = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15))
pm8ecc = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1))
metering = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1))
systemWiringTypeTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 1), )
if mibBuilder.loadTexts: systemWiringTypeTable.setStatus('mandatory')
if mibBuilder.loadTexts: systemWiringTypeTable.setDescription('The wiring system type of the host meter.')
systemWiringTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 1, 1), ).setIndexNames((0, "PM8ECCMIB", "swtIndex"))
if mibBuilder.loadTexts: systemWiringTypeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: systemWiringTypeEntry.setDescription('Host Meter System Wiring Type')
swtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swtIndex.setDescription('System Wiring Type Table Index')
swtWiringType = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(11, 11), ValueRangeConstraint(12, 12), ValueRangeConstraint(30, 30), ValueRangeConstraint(31, 31), ValueRangeConstraint(32, 32), ValueRangeConstraint(40, 40), ValueRangeConstraint(42, 42), ValueRangeConstraint(44, 44), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swtWiringType.setStatus('mandatory')
if mibBuilder.loadTexts: swtWiringType.setDescription("Single Phase Line to Neutral 2 Wire 1CT 1PT is\n                            '10' Single Phase Line to Line 2 Wire 1CT 1PT\n                            is '11' Single Phase 3-Wire 3 wire 2CT 2PT is\n                            '12' Three Phase 3 Wire 2CT 2PT is '30' Three\n                            Phase 3 Wire 3CT 2PT is '31' Three Phase 3 Wire\n                            1CT 2PT is '32' Three Phase 4 Wire 3CT 3PT is\n                            '40' Three Phase 4 Wire 3CT 2PT is '42' Three\n                            Phase 4 Wire 1CT 3PT is '44'")
loadCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 2), )
if mibBuilder.loadTexts: loadCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: loadCurrentTable.setDescription('Host Meter Load Current Table')
loadCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 2, 1), ).setIndexNames((0, "PM8ECCMIB", "lcIndex"))
if mibBuilder.loadTexts: loadCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: loadCurrentEntry.setDescription('Host Meter Load Current Table')
lcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lcIndex.setDescription('Load Current Table Index')
lcIa = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcIa.setStatus('mandatory')
if mibBuilder.loadTexts: lcIa.setDescription('Host Meter Load Current Phase A Units = A (Amps)')
lcIb = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcIb.setStatus('mandatory')
if mibBuilder.loadTexts: lcIb.setDescription('Host Meter Load Current Phase B Units = A (Amps)')
lcIc = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcIc.setStatus('mandatory')
if mibBuilder.loadTexts: lcIc.setDescription('Host Meter Load Current Phase C Units = A (Amps)')
lcIAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcIAvg.setStatus('mandatory')
if mibBuilder.loadTexts: lcIAvg.setDescription('Host Meter Load Current 3 Phase Average Units\n                            = A (Amps)')
powerTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 3), )
if mibBuilder.loadTexts: powerTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerTable.setDescription('Host Meter Power Table')
powerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 3, 1), ).setIndexNames((0, "PM8ECCMIB", "pIndex"))
if mibBuilder.loadTexts: powerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerEntry.setDescription('Host Meter Power Table')
pIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pIndex.setDescription('Power Table Index')
pReal = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pReal.setStatus('mandatory')
if mibBuilder.loadTexts: pReal.setDescription('Host Meter Real Power Units = kW')
pReactive = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pReactive.setStatus('mandatory')
if mibBuilder.loadTexts: pReactive.setDescription('Host Meter Reactive Power Units = kVAR')
pApparent = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pApparent.setStatus('mandatory')
if mibBuilder.loadTexts: pApparent.setDescription('Host Meter Apparent Power Units = kVA')
powerFactorTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 4), )
if mibBuilder.loadTexts: powerFactorTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerFactorTable.setDescription('Host Meter Power Factor Table')
powerFactorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 4, 1), ).setIndexNames((0, "PM8ECCMIB", "pfIndex"))
if mibBuilder.loadTexts: powerFactorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerFactorEntry.setDescription('Host Meter Power Factor Table')
pfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pfIndex.setDescription('Power Factor Table Index')
pfPowerFactorTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfPowerFactorTotal.setStatus('mandatory')
if mibBuilder.loadTexts: pfPowerFactorTotal.setDescription('Host Meter 3 Phase Total Power Factor')
pfPowerFactorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pfPowerFactorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: pfPowerFactorDescription.setDescription('Describes the current power factor Lead/Lag for\n                            IEEE mode Cap/Ind for IEC mode')
voltageTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5), )
if mibBuilder.loadTexts: voltageTable.setStatus('mandatory')
if mibBuilder.loadTexts: voltageTable.setDescription('Host Meter Voltage Table')
voltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1), ).setIndexNames((0, "PM8ECCMIB", "vIndex"))
if mibBuilder.loadTexts: voltageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: voltageEntry.setDescription('Host Meter Voltage Table')
vIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vIndex.setDescription('Voltage Table Index')
vVab = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVab.setStatus('mandatory')
if mibBuilder.loadTexts: vVab.setDescription('Host Meter Voltage Line A to Line B Units = V\n                            (Volts)')
vVbc = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVbc.setStatus('mandatory')
if mibBuilder.loadTexts: vVbc.setDescription('Host Meter Voltage Line B to Line C Units = V\n                            (Volts)')
vVca = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVca.setStatus('mandatory')
if mibBuilder.loadTexts: vVca.setDescription('Host Meter Voltage Line C to Line A Units = V\n                            (Volts)')
vVllAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVllAvg.setStatus('mandatory')
if mibBuilder.loadTexts: vVllAvg.setDescription('Host Meter Voltage Line to Line Average Voltage\n                            Units = V (Volts)')
vVan = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVan.setStatus('mandatory')
if mibBuilder.loadTexts: vVan.setDescription('Host Meter Voltage Line A to Neutral Units = V\n                            (Volts)')
vVbn = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVbn.setStatus('mandatory')
if mibBuilder.loadTexts: vVbn.setDescription('Host Meter Voltage Line B to Neutral Units = V\n                            (Volts)')
vVcn = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVcn.setStatus('mandatory')
if mibBuilder.loadTexts: vVcn.setDescription('Host Meter Voltage Line C to Neutral Units = V\n                            (Volts)')
vVlnAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 5, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vVlnAvg.setStatus('mandatory')
if mibBuilder.loadTexts: vVlnAvg.setDescription('Host Meter Voltage Line to Neutral 3 Phase Average\n                            Units = V (Volts)')
frequencyTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 6), )
if mibBuilder.loadTexts: frequencyTable.setStatus('mandatory')
if mibBuilder.loadTexts: frequencyTable.setDescription('Host Meter Frequency Table')
frequencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 6, 1), ).setIndexNames((0, "PM8ECCMIB", "fIndex"))
if mibBuilder.loadTexts: frequencyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frequencyEntry.setDescription('Host Meter Frequency Table')
fIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fIndex.setDescription('Frequency Table Index')
fFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: fFrequency.setDescription('Host Meter Frequency Units = Hz')
currentDemandTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7), )
if mibBuilder.loadTexts: currentDemandTable.setStatus('mandatory')
if mibBuilder.loadTexts: currentDemandTable.setDescription('Host Meter Current Demand Table')
currentDemandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1), ).setIndexNames((0, "PM8ECCMIB", "cdPhase"), (0, "PM8ECCMIB", "cdIndex"))
if mibBuilder.loadTexts: currentDemandEntry.setStatus('mandatory')
if mibBuilder.loadTexts: currentDemandEntry.setDescription('Host Meter Current Demand Table')
cdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cdIndex.setDescription('Demand Current Table Index')
cdPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdPhase.setStatus('mandatory')
if mibBuilder.loadTexts: cdPhase.setDescription('Host Meter Current Demand Phase Name')
cdPresentCurrentDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdPresentCurrentDemand.setStatus('mandatory')
if mibBuilder.loadTexts: cdPresentCurrentDemand.setDescription('Host Meter Present Demand Current Units = A (Amps)')
cdPeakCurrentDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdPeakCurrentDemand.setStatus('mandatory')
if mibBuilder.loadTexts: cdPeakCurrentDemand.setDescription('Host Meter Peak Current Demand Units = A (Amps)')
cdLastCurrentDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdLastCurrentDemand.setStatus('mandatory')
if mibBuilder.loadTexts: cdLastCurrentDemand.setDescription('Host Meter Current Demand Last Interval Units\n                            = A (Amps)')
cdPeakDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdPeakDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: cdPeakDateTime.setDescription('Host Meter Peak Current Demand Date and Time')
cdResetDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdResetDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: cdResetDateTime.setDescription('Host Meter Date and Time of Demand Current Reset')
cdPhaseEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("currentPhaseA", 1), ("currentPhaseB", 2), ("currentPhaseC", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdPhaseEnum.setStatus('mandatory')
if mibBuilder.loadTexts: cdPhaseEnum.setDescription('Host Meter Current Demand Phase')
powerDemandTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8), )
if mibBuilder.loadTexts: powerDemandTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerDemandTable.setDescription('Host Meter Power Demand')
powerDemandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1), ).setIndexNames((0, "PM8ECCMIB", "pdComponent"), (0, "PM8ECCMIB", "pdIndex"))
if mibBuilder.loadTexts: powerDemandEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerDemandEntry.setDescription('Host Meter Power Demand Table')
pdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pdIndex.setDescription('Power Demand Table Index')
pdComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdComponent.setStatus('mandatory')
if mibBuilder.loadTexts: pdComponent.setDescription('Host Meter Power Demand Component Units: Real\n                            = kW Reacitve = kVAR Apparent = kVA')
pdPresentPowerDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdPresentPowerDemand.setStatus('mandatory')
if mibBuilder.loadTexts: pdPresentPowerDemand.setDescription('Host Meter Present Demand Power')
pdPeakPowerDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdPeakPowerDemand.setStatus('mandatory')
if mibBuilder.loadTexts: pdPeakPowerDemand.setDescription('Host Meter Peak Power Demand')
pdLastPowerDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdLastPowerDemand.setStatus('mandatory')
if mibBuilder.loadTexts: pdLastPowerDemand.setDescription('Host Meter Power Demand Last Interval')
pdPeakDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdPeakDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: pdPeakDateTime.setDescription('Host Meter Peak Power Demand Date and Time')
pdResetDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdResetDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: pdResetDateTime.setDescription('Host Meter Date and Time of Power Demand Reset')
pdComponentEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("realPower", 1), ("reactivePower", 2), ("apparentPower", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdComponentEnum.setStatus('mandatory')
if mibBuilder.loadTexts: pdComponentEnum.setDescription('Host Meter Power Demand Component')
energyTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9), )
if mibBuilder.loadTexts: energyTable.setStatus('mandatory')
if mibBuilder.loadTexts: energyTable.setDescription('Host Meter Energy Table')
energyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1), ).setIndexNames((0, "PM8ECCMIB", "eIndex"))
if mibBuilder.loadTexts: energyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: energyEntry.setDescription('Host Meter Energy Table')
eIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eIndex.setStatus('mandatory')
if mibBuilder.loadTexts: eIndex.setDescription('Energy Table Index')
eRealEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRealEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: eRealEnergy.setDescription('Host Meter Real Energy Units = Wh')
eDateTimeRealEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eDateTimeRealEnergyReset.setStatus('mandatory')
if mibBuilder.loadTexts: eDateTimeRealEnergyReset.setDescription('Host Meter Date and Time Real Energy Accumulation\n                            was reset')
eReactiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eReactiveEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: eReactiveEnergy.setDescription('Host Meter Reactive Energy Units = VARh')
eDateTimeReactiveEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eDateTimeReactiveEnergyReset.setStatus('mandatory')
if mibBuilder.loadTexts: eDateTimeReactiveEnergyReset.setDescription('Host Meter Date and Time Reative Energy Accumulation\n                            was reset')
eApparentEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eApparentEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: eApparentEnergy.setDescription('Host Meter Apparent Energy Units = VAh')
eDateTimeApparentEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 1, 9, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eDateTimeApparentEnergyReset.setStatus('mandatory')
if mibBuilder.loadTexts: eDateTimeApparentEnergyReset.setDescription('Host Meter Date and Time Reactive Energy Accumulation\n                            was reset')
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2))
alarmConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1), )
if mibBuilder.loadTexts: alarmConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: alarmConfigurationTable.setDescription('Displays the current configuration of the Host\n                            Meter On-board alarms')
alarmConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1), ).setIndexNames((0, "PM8ECCMIB", "acIndex"), (0, "PM8ECCMIB", "acPosition"))
if mibBuilder.loadTexts: alarmConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alarmConfigurationEntry.setDescription('Contains configuration information for the Host\n                            Meter On-board Alarms')
acIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acIndex.setDescription('Alarm Configuration Table Index')
acPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 74))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPosition.setStatus('mandatory')
if mibBuilder.loadTexts: acPosition.setDescription('Indicates the position of the alarm. 1 - 74')
acAlarmLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 3), AlarmLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAlarmLabel.setStatus('mandatory')
if mibBuilder.loadTexts: acAlarmLabel.setDescription('The name of the alarm (user configurable)')
acEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: acEnabled.setDescription('Indicates whether the alarm is enabled or not.\n                            0 = Disabled 255 = Enabled')
acStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acStatus.setStatus('mandatory')
if mibBuilder.loadTexts: acStatus.setDescription('Indicates whether the alarm is active. 0 = Inactive\n                            1 = Active')
acCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acCounter.setStatus('mandatory')
if mibBuilder.loadTexts: acCounter.setDescription('Indicates the number of times the alarm has been\n                            activated. Note: This counter resets at 32767')
acPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPriority.setStatus('mandatory')
if mibBuilder.loadTexts: acPriority.setDescription('The priority of the alarm. 0 = No Priority 1 =\n                            Low Priority 2 = Medium Priority 3 = High Priority')
acType = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 8), AlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acType.setStatus('mandatory')
if mibBuilder.loadTexts: acType.setDescription('Indicates the type of the alarm.')
acAlarmList1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAlarmList1.setStatus('mandatory')
if mibBuilder.loadTexts: acAlarmList1.setDescription('Used for combinatorial type alarms - The position\n                            of the first alarm that is used to evaluate the\n                            alarm state.')
acAlarmList2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAlarmList2.setStatus('mandatory')
if mibBuilder.loadTexts: acAlarmList2.setDescription('Used for combinatorial type alarms - The position\n                            of the second alarm that is used to evaluate\n                            the alarm state.')
acAlarmList3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAlarmList3.setStatus('mandatory')
if mibBuilder.loadTexts: acAlarmList3.setDescription('Used for combinatorial type alarms - The position\n                            of the third alarm that is used to evaluate the\n                            alarm state.')
acAlarmList4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAlarmList4.setStatus('mandatory')
if mibBuilder.loadTexts: acAlarmList4.setDescription('Used for combinatorial type alarms - The position\n                            of the fourth alarm that is used to evaluate\n                            the alarm state.')
alarmSummaryBitmapsTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2), )
if mibBuilder.loadTexts: alarmSummaryBitmapsTable.setStatus('mandatory')
if mibBuilder.loadTexts: alarmSummaryBitmapsTable.setDescription('Indicates the state of the Host Meter On-Board\n                            Alarms')
alarmSummaryBitmapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2, 1), ).setIndexNames((0, "PM8ECCMIB", "alSumIndex"))
if mibBuilder.loadTexts: alarmSummaryBitmapsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alarmSummaryBitmapsEntry.setDescription('Indicates the status of the Host Meter On-Board\n                            Alarms')
alSumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSumIndex.setStatus('mandatory')
if mibBuilder.loadTexts: alSumIndex.setDescription('Alarm Summary Bitmap Table Index')
alSumAlarms1to16 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSumAlarms1to16.setStatus('mandatory')
if mibBuilder.loadTexts: alSumAlarms1to16.setDescription('Indicates the status of Alarms 1 - 16 (16-bits,\n                            bit-0 = Alarm 1)')
alSumAlarms17to32 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSumAlarms17to32.setStatus('mandatory')
if mibBuilder.loadTexts: alSumAlarms17to32.setDescription('Indicates the status of Alarms 17 - 32 (16-bits,\n                            bit-0 = Alarm 17)')
alSumAlarms33to48 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSumAlarms33to48.setStatus('mandatory')
if mibBuilder.loadTexts: alSumAlarms33to48.setDescription('Indicates the status of Alarms 33 - 48 (16-bits,\n                            bit-0 = Alarm 33)')
alSumAlarms49to64 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSumAlarms49to64.setStatus('mandatory')
if mibBuilder.loadTexts: alSumAlarms49to64.setDescription('Indicates the status of Alarms 49 - 64 (16-bits,\n                            bit-0 = Alarm 49)')
alSumAlarms65to74 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSumAlarms65to74.setStatus('mandatory')
if mibBuilder.loadTexts: alSumAlarms65to74.setDescription('Indicates the status of Alarms 65 - 74 (16-bits,\n                            bit-0 = Alarm 65, bit-9 = Alarm 74)')
alarmCountersTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 3), )
if mibBuilder.loadTexts: alarmCountersTable.setStatus('mandatory')
if mibBuilder.loadTexts: alarmCountersTable.setDescription('Host Meter On-Board Alarm Counters')
alarmCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 3, 1), ).setIndexNames((0, "PM8ECCMIB", "alCntAlarmPosition"), (0, "PM8ECCMIB", "alCntIndex"))
if mibBuilder.loadTexts: alarmCountersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alarmCountersEntry.setDescription('Host Meter On-Board Alarm Counters')
alCntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alCntIndex.setStatus('mandatory')
if mibBuilder.loadTexts: alCntIndex.setDescription('Alarm Counters Table Index')
alCntAlarmPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 74))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alCntAlarmPosition.setStatus('mandatory')
if mibBuilder.loadTexts: alCntAlarmPosition.setDescription('The Host Meter Alarm Position')
alCntCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alCntCount.setStatus('mandatory')
if mibBuilder.loadTexts: alCntCount.setDescription('The number of times the Host Meter On-Board alarm\n                            has transitioned from an inactive state to an\n                            active state')
io = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3))
ioOptionIDTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 1), )
if mibBuilder.loadTexts: ioOptionIDTable.setStatus('mandatory')
if mibBuilder.loadTexts: ioOptionIDTable.setDescription('I/O Option Module Installed on the Host Meter')
ioOptionIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 1, 1), ).setIndexNames((0, "PM8ECCMIB", "ioIDIndex"))
if mibBuilder.loadTexts: ioOptionIDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ioOptionIDEntry.setDescription('I/O Option Card Installed On-board the Host Meter')
ioIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ioIDIndex.setDescription('I/O Installed Option ID Table Index')
ioIDInstalledOptionSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 1), ("io-22", 2), ("io-26", 3), ("io-2222", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioIDInstalledOptionSlot1.setStatus('mandatory')
if mibBuilder.loadTexts: ioIDInstalledOptionSlot1.setDescription('0 = Not Installed 1 = Unused 2 = IO22 3 = IO26\n                            4 = IO 2222')
ioIDInstalledOptionSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 1), ("io-22", 2), ("io-26", 3), ("io-2222", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioIDInstalledOptionSlot2.setStatus('mandatory')
if mibBuilder.loadTexts: ioIDInstalledOptionSlot2.setDescription('0 = Not Installed 1 = Unused 2 = IO22 3 = IO26\n                            4 = IO 2222')
ioConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2), )
if mibBuilder.loadTexts: ioConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: ioConfigurationTable.setDescription('Displays the current I/O configuration for each\n                            I/O point')
ioConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1), ).setIndexNames((0, "PM8ECCMIB", "iocIndex"), (0, "PM8ECCMIB", "iocPointNumber"))
if mibBuilder.loadTexts: ioConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ioConfigurationEntry.setDescription('Contains configuration information for the Host\n                            Meter On-board I/O')
iocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocIndex.setStatus('mandatory')
if mibBuilder.loadTexts: iocIndex.setDescription('I/O Configuration Table Index')
iocPointNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocPointNumber.setStatus('mandatory')
if mibBuilder.loadTexts: iocPointNumber.setDescription('The point number for this I/O Point')
iocLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 3), IOPointLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocLabel.setStatus('mandatory')
if mibBuilder.loadTexts: iocLabel.setDescription('The name of the I/O Point (user configurable)')
iocStateOrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocStateOrValue.setStatus('mandatory')
if mibBuilder.loadTexts: iocStateOrValue.setDescription('Displays the current value for the I/O Point Digial\n                            I/O: 1 = Active or 0 = Inactive\n                            \n                            Analog I/O: Scaled input/output value')
iocPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 5), IOPointType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocPointType.setStatus('mandatory')
if mibBuilder.loadTexts: iocPointType.setDescription('The type of I/O at this point')
iocMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocMode.setStatus('mandatory')
if mibBuilder.loadTexts: iocMode.setDescription('For Digital Inputs and Outputs this object is\n                            always 0 indicating Discrete.\n                            \n                            For Analog Inputs and Outputs this object indicates\n                            the range of analog I/O values (used without\n                            units) 0 = 0  1 1 = 0  5 2 = 0  10 3 = 0 \n                            20 4 = 1  5 5 = 4  20 6 = -5  5 7 = -10 \n                            10 8 = -100  100 9 = User defined (values default\n                            to 0)')
iocType = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocType.setStatus('mandatory')
if mibBuilder.loadTexts: iocType.setDescription('For Digital Inputs this object indicates input\n                            type 1 = Unused 2 = AC/DC\n                            \n                            For Digital Outputs this object indicates output\n                            type 1 = solid state relay 2 = electromechanical\n                            relay\n                            \n                            For Analog Inputs and Outputs this object indicates\n                            the digital resolution of the I/O hardware. 0\n                            = 8-Bit, unipolar 1 = 10-Bit, unipolar 2 = 12-Bit,\n                            unipolar 3 = 14-Bit, unipolar 4 = 16-Bit, unipolar\n                            5 = 16-Bit, bipolar with sign 6 = reserved 7\n                            = reserved 8 = Resolution for IO2222 Voltage\n                            range 0 - 4000 9 = Resolution for IO2222 Current\n                            range 800 - 4000')
iocCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: iocCount.setStatus('mandatory')
if mibBuilder.loadTexts: iocCount.setDescription('Number of times digital I/O point has transitioned\n                            from OFF to ON')
ioStatusBitmapsTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 3), )
if mibBuilder.loadTexts: ioStatusBitmapsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ioStatusBitmapsTable.setDescription('Host Meter I/O Status Bitmaps')
ioStatusBitmapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 3, 1), ).setIndexNames((0, "PM8ECCMIB", "ioStatIndex"))
if mibBuilder.loadTexts: ioStatusBitmapsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ioStatusBitmapsEntry.setDescription('Host Meter On-Board I/O Status Bitmaps')
ioStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ioStatIndex.setDescription('I/O Summary Bitmaps Table Index')
ioStatSummaryBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioStatSummaryBitmap.setStatus('mandatory')
if mibBuilder.loadTexts: ioStatSummaryBitmap.setDescription('Indicates the Status of the Host Meter I/O Points\n                            Bit-0 = I/O Point 1 Bit-1 = I/O Point 2 ... Bit-17\n                            = I/O Point 18')
meterSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4))
meterIdentificationTable = MibTable((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4, 1), )
if mibBuilder.loadTexts: meterIdentificationTable.setStatus('mandatory')
if mibBuilder.loadTexts: meterIdentificationTable.setDescription('Host Meter Identification')
meterIdentificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4, 1, 1), ).setIndexNames((0, "PM8ECCMIB", "midIndex"))
if mibBuilder.loadTexts: meterIdentificationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: meterIdentificationEntry.setDescription('Host Meter Identification')
midIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: midIndex.setStatus('mandatory')
if mibBuilder.loadTexts: midIndex.setDescription('Meter Identification Table Index')
midSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: midSerialNumber.setDescription('Host meter 32 bit Serial Number')
midFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: midFirmwareVersion.setDescription('Host Meter Firmware Version')
midModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midModelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: midModelNumber.setDescription('Host Meter Model Number')
midDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 4, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: midDeviceName.setDescription('Host Meter Label plus Nameplate')
trapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 5))
alarmDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 5, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDateAndTime.setStatus('mandatory')
if mibBuilder.loadTexts: alarmDateAndTime.setDescription('The Date and Time of the alarm state change.')
alarmLabel = MibScalar((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 5, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLabel.setStatus('mandatory')
if mibBuilder.loadTexts: alarmLabel.setDescription('The Descriptive Label given to the alarm')
alarmState = MibScalar((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 5, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmState.setStatus('mandatory')
if mibBuilder.loadTexts: alarmState.setDescription('The state of the Alarm - pickup, dropout, unary,\n                            diagnostic')
alarmValue = MibScalar((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmValue.setStatus('mandatory')
if mibBuilder.loadTexts: alarmValue.setDescription('The value of the alarm when it changed state.')
alarmPriority = MibScalar((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highPriority", 1), ("mediumPriority", 2), ("lowPriority", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPriority.setStatus('mandatory')
if mibBuilder.loadTexts: alarmPriority.setDescription('The priority defined for the alarm.')
mibVersion = MibScalar((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibVersion.setDescription('This is the current version of the MIB')
pm8OnBoardAlarmP1 = NotificationType((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1) + (0,1)).setObjects(("PM8ECCMIB", "alarmDateAndTime"), ("PM8ECCMIB", "alarmLabel"), ("PM8ECCMIB", "alarmState"), ("PM8ECCMIB", "alarmValue"), ("PM8ECCMIB", "alarmPriority"))
if mibBuilder.loadTexts: pm8OnBoardAlarmP1.setDescription('Indicates the Host Meter On-Board Alarm system has\n                             detected a state change of an enabled alarm with a\n                             priority of 1')
pm8OnBoardAlarmP2 = NotificationType((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1) + (0,2)).setObjects(("PM8ECCMIB", "alarmDateAndTime"), ("PM8ECCMIB", "alarmLabel"), ("PM8ECCMIB", "alarmState"), ("PM8ECCMIB", "alarmValue"), ("PM8ECCMIB", "alarmPriority"))
if mibBuilder.loadTexts: pm8OnBoardAlarmP2.setDescription('Indicates the Host Meter On-Board Alarm system has\n                             detected a state change of an enabled alarm with a\n                             priority of 2')
pm8OnBoardAlarmP3 = NotificationType((1, 3, 6, 1, 4, 1, 3833, 1, 7, 255, 15, 1) + (0,3)).setObjects(("PM8ECCMIB", "alarmDateAndTime"), ("PM8ECCMIB", "alarmLabel"), ("PM8ECCMIB", "alarmState"), ("PM8ECCMIB", "alarmValue"), ("PM8ECCMIB", "alarmPriority"))
if mibBuilder.loadTexts: pm8OnBoardAlarmP3.setDescription('Indicates the Host Meter On-Board Alarm system has\n                             detected a state change of an enabled alarm with a\n                             priority of 3')
mibBuilder.exportSymbols("PM8ECCMIB", ioIDInstalledOptionSlot2=ioIDInstalledOptionSlot2, eRealEnergy=eRealEnergy, meterSystem=meterSystem, fFrequency=fFrequency, alCntIndex=alCntIndex, vVcn=vVcn, powerDemandTable=powerDemandTable, alarmSummaryBitmapsEntry=alarmSummaryBitmapsEntry, lcIAvg=lcIAvg, ioOptionIDTable=ioOptionIDTable, lcIc=lcIc, ioIDIndex=ioIDIndex, alCntAlarmPosition=alCntAlarmPosition, acPosition=acPosition, vVlnAvg=vVlnAvg, transparentFactoryEthernet=transparentFactoryEthernet, ioIDInstalledOptionSlot1=ioIDInstalledOptionSlot1, midFirmwareVersion=midFirmwareVersion, cdResetDateTime=cdResetDateTime, systemWiringTypeTable=systemWiringTypeTable, vVbn=vVbn, AlarmLabel=AlarmLabel, eApparentEnergy=eApparentEnergy, equipmentProfile=equipmentProfile, pReal=pReal, mibVersion=mibVersion, ioStatSummaryBitmap=ioStatSummaryBitmap, alarms=alarms, AlarmType=AlarmType, midSerialNumber=midSerialNumber, cdLastCurrentDemand=cdLastCurrentDemand, pm8OnBoardAlarmP2=pm8OnBoardAlarmP2, acAlarmList2=acAlarmList2, alarmConfigurationEntry=alarmConfigurationEntry, IOPointLabel=IOPointLabel, pReactive=pReactive, ioStatIndex=ioStatIndex, iocIndex=iocIndex, loadCurrentTable=loadCurrentTable, ioConfigurationTable=ioConfigurationTable, currentDemandEntry=currentDemandEntry, alSumAlarms17to32=alSumAlarms17to32, iocCount=iocCount, alarmCountersEntry=alarmCountersEntry, pm8OnBoardAlarmP1=pm8OnBoardAlarmP1, pfPowerFactorTotal=pfPowerFactorTotal, midDeviceName=midDeviceName, acIndex=acIndex, iocMode=iocMode, powerFactorEntry=powerFactorEntry, pm8ecc=pm8ecc, cdIndex=cdIndex, vVan=vVan, frequencyEntry=frequencyEntry, meterIdentificationEntry=meterIdentificationEntry, iocType=iocType, energyTable=energyTable, ioStatusBitmapsEntry=ioStatusBitmapsEntry, pdPresentPowerDemand=pdPresentPowerDemand, fIndex=fIndex, systemWiringTypeEntry=systemWiringTypeEntry, voltageEntry=voltageEntry, IOPointType=IOPointType, acStatus=acStatus, ioConfigurationEntry=ioConfigurationEntry, eDateTimeReactiveEnergyReset=eDateTimeReactiveEnergyReset, pdComponentEnum=pdComponentEnum, alSumAlarms33to48=alSumAlarms33to48, iocLabel=iocLabel, voltageTable=voltageTable, metering=metering, lcIa=lcIa, eDateTimeRealEnergyReset=eDateTimeRealEnergyReset, io=io, alSumAlarms49to64=alSumAlarms49to64, alarmCountersTable=alarmCountersTable, vVab=vVab, acPriority=acPriority, iocPointNumber=iocPointNumber, cdPhaseEnum=cdPhaseEnum, acAlarmList1=acAlarmList1, iocPointType=iocPointType, alarmPriority=alarmPriority, trapVariables=trapVariables, pdResetDateTime=pdResetDateTime, tfProducts=tfProducts, acAlarmList3=acAlarmList3, alSumAlarms65to74=alSumAlarms65to74, alCntCount=alCntCount, schneiderElectric=schneiderElectric, vVllAvg=vVllAvg, midIndex=midIndex, lcIb=lcIb, eIndex=eIndex, vVca=vVca, cdPeakCurrentDemand=cdPeakCurrentDemand, ecc=ecc, pfPowerFactorDescription=pfPowerFactorDescription, acEnabled=acEnabled, cdPresentCurrentDemand=cdPresentCurrentDemand, powerTable=powerTable, acType=acType, pdPeakDateTime=pdPeakDateTime, powerEntry=powerEntry, powerDemandEntry=powerDemandEntry, meterIdentificationTable=meterIdentificationTable, acCounter=acCounter, alSumIndex=alSumIndex, cdPeakDateTime=cdPeakDateTime, alarmLabel=alarmLabel, alarmDateAndTime=alarmDateAndTime, alarmValue=alarmValue, acAlarmList4=acAlarmList4, pdComponent=pdComponent, pm8OnBoardAlarmP3=pm8OnBoardAlarmP3, energyEntry=energyEntry, eReactiveEnergy=eReactiveEnergy, swtIndex=swtIndex, vIndex=vIndex, loadCurrentEntry=loadCurrentEntry, pApparent=pApparent, cdPhase=cdPhase, alSumAlarms1to16=alSumAlarms1to16, midModelNumber=midModelNumber, pIndex=pIndex, ioOptionIDEntry=ioOptionIDEntry, pdIndex=pdIndex, pdLastPowerDemand=pdLastPowerDemand, vVbc=vVbc, powerFactorTable=powerFactorTable, pfIndex=pfIndex, frequencyTable=frequencyTable, lcIndex=lcIndex, alarmState=alarmState, swtWiringType=swtWiringType, currentDemandTable=currentDemandTable, eDateTimeApparentEnergyReset=eDateTimeApparentEnergyReset, alarmSummaryBitmapsTable=alarmSummaryBitmapsTable, pdPeakPowerDemand=pdPeakPowerDemand, acAlarmLabel=acAlarmLabel, iocStateOrValue=iocStateOrValue, alarmConfigurationTable=alarmConfigurationTable, ioStatusBitmapsTable=ioStatusBitmapsTable)
