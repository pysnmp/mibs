#
# PySNMP MIB module CM-ALARM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/CM-ALARM-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:54:44 2024
# On host fv-az1205-935 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
TrapAlarmSeverity, fsp150cm = mibBuilder.importSymbols("ADVA-MIB", "TrapAlarmSeverity", "fsp150cm")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
neIndex, slotIndex, shelfIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "neIndex", "slotIndex", "shelfIndex")
cmEthernetNetPortIndex, cmEthernetAccPortIndex = mibBuilder.importSymbols("CM-FACILITY-MIB", "cmEthernetNetPortIndex", "cmEthernetAccPortIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, Unsigned32, Gauge32, iso, TimeTicks, ObjectIdentity, NotificationType, IpAddress, MibIdentifier, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "Gauge32", "iso", "TimeTicks", "ObjectIdentity", "NotificationType", "IpAddress", "MibIdentifier", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits")
DisplayString, TruthValue, VariablePointer, DateAndTime, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "VariablePointer", "DateAndTime", "TextualConvention", "TimeStamp")
cmAlarmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6))
cmAlarmMIB.setRevisions(('2020-03-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cmAlarmMIB.setRevisionsDescriptions(('\n            Notes from release 202003010000Z\n               (1) Added new literal to CmAlarmEntityType\n                   l3ptpport(234)\n\t\t   \n            Notes from release 202002200000Z\n               (1) added new TEXTUAL-CONVENTION to CmConditionType\n                   - invalid-syscfg\n                   \n            Notes from release 202001300000Z\n               (1) Added new literals to CmConditionType\n                   - spoofing-pps\n                   - spoofing-loc\n           \n            Notes from release 202001140000Z\n               (1) Added new literals to CmConditionType\n                   - jamming\n                   - spoofing\n           \n            Notes from release 201911240000Z\n               (1) Added new literals to CmConditionType\n                    invalidsymkeypeering(401),                           \n                    auto-asymmetry-delay-fail(402),    \n                    no-certificate(403),              \n                    certificate-expired-soon(404),    \n                    bpvc(405),                        \n                    crcf(406),                        \n                    oofc(407),                        \n                    psuinputfail1(408),               \n                    psuinputfail2(409)                \n\n\n            Notes from release 201909130000Z\n               (1) Added new literals to CmAlarmEntityType\n                   - irig-card\n                   - irg-port-group\n            Notes from release 201908140000Z\n               (1) add ed new literals to CmAlarmEntityType.\n                   - oneru-xg120pro-sh-shelf,\n                   - eth-xg-120pro-sh-card\n\n            Notes from release 201907080000Z,\n               (1) Added new TEXTUAL-CONVENTION to CmConditionType\n                   - jamming, spoofing\n\t\t   \n\t    Notes from release 201903070000Z\n               (1) Added new literals to CmAlarmEntityType.\n                   - oneru-xg118proac-sh-shelf,\n                   - eth-xg-118proac-sh-card\n\n                   \n            Notes from release 201903050000Z\n               (1) Added new literals to CmAlarmEntityType.\n                   - ntp-clock\n               (2) Added new literals to CmConditionType\n                   local-cooling-fail\n\n            Notes from release 201809240000Z\n               (1) Added new literals to CmAlarmEntityType.\n                   - oneru-xg118pro-sh-shelf,\n                   - eth-xg-118pro-sh-card\n\n            Notes from release 201804190000Z\n               (1) Added new literals to CmAlarmEntityType.\n                   - oneru-xg116pro-h-shelf,\n                   - eth-xg-116pro-h-card\n\n            Notes from release 201802020000Z\n               (1) Added new literals to CmConditionType.\n               (2) Added new literals to CmAlarmEntityType.\n                   \n            Notes from release 201708220000Z\n               (1) CmAlarmEntityType: Added literals \n                   oneru-osa5430-shelf, eth-csm-card, threeru-osa5440-shelf\n                   \n            Notes from release 201703170000Z\n               (1) CmConditionType: Added literals gatewayNotReachable, pdop-mask-cross\n               \n            Notes from release 201703080000Z\n               (1) CmConditionType: Added literals pps-not-generated, min-sat-1-thrshld-crossed, min-sat-2-thrshld-crossed\n               \n             Notes from release 201612190000Z\n\n               (1) CmConditionType: Added literals bmcaError, freeze, gpsFwUpgrade           \n               (2) CmAlarmEntityType: Added literals osa-ge-4s, elpgroup\n\n             Notes from release 201605240000Z\n               (1) added ge112proVm device (selves and cards) to CmAlarmEntityType \n\n             Notes from release 201603150000Z\n               (1) added ge114proVm devices (H/CH/SCH/ selves and cards) to CmAlarmEntityType \n               (2) added server-card to CmAlarmEntityType\n\n             Notes from release 201512210000Z\n               (1) Added new literal to CmConditionType (Release 8.1CC - XG210),\n                   erpRingSegmentation\n                   \n             Notes from release 201502040000Z\n               (1) added oneru-xg210c-shelf, eth-xg-210c-card, ge-8sc-cc to CmAlarmEntityType\n               (2) added macSecKeyExchangeFail, macSecPasswordMissing, macSecRamCleared, \n                   noRouteResources to CmConditionType\n\n             Notes from release 201502010000Z\n             (i) Added literals to CmAlarmEntityType (Release 7.1sp - OSA5411),\n                 oneru-osa5411-shelf, eth-osa5411-card\n            \n             Notes from release 201408280000Z\n             (i) Added new literal trafficResourceLimitExceeded to CmConditionType\n             \n             Notes from release 201407180000Z,\n             (i) Added new CmLoopbackType literals,\n                 oduAis, opuAis, otuAis, otnProtMsmtch, otnProtPrtclFail, oduBdi,\n                 otuBdi, lossCharSync, berHigh, laserFail, laserCurrentAbnormal,\n                 oduLock, autoShutdown, localFault, otuLof, otuLom, oduOci, opuPlm,\n                 oduSd, otuSd, opuSf, optPowerHighRx, optPowerLowRx, optPowerHighTx,\n                 optPowerLowTx, oduTim, otuTim\n\n             (ii) Added new CmAlarmEntityType literals,\n                  oneru-otn210-shelf, eth-otn-210-card\n\n             Notes from release 201404170000Z\n             (i) Added new literal xfpWaveLengthMismatch to CmConditionType\n             \n             Notes from release 201205170000Z\n             (i) Alarm Entity Types for PWE3, PTP\n             (ii) Condition Types for PWE3, PTP, ELMI\n\n             Notes from release 201112070000Z\n             (i) Added f3EnvAlarmInputTable with objects \n                 f3EnvAlarmInputIndex, f3EnvAlarmInputDescr, f3EnvAlarmInputCondType,\n                 f3EnvAlarmInputNotifCode, f3EnvAlarmInputMode\n\n             Notes from release 201012140000Z\n             (i) Added objects cmAlmTestAlarmEntity, cmAlmTestAlarmAction\n\n             Notes from release 201010270000Z\n             (i) Added objects cmSysAlmAdditionalInfoObject, cmSysAlmAdditionalInfoName,\n                 cmSysCondAdditionalInfoObject, cmSysCondAdditionalInfoName\n             (ii) Added objects cmNetworkElementAlmAdditionalInfoObject, \n                  cmNetworkElementAlmAdditionalInfoName,\n                  cmNetworkElementCondAdditionalInfoObject, \n                  cmNetworkElementCondAdditionalInfoName\n\n             Notes from release 201006070000Z\n             Added literals to CmConditionType TC (Release 4.3CC - GE201),\n                 syncreflck, syncreffrc, syncrefman,\n                 syncrefwtr, syncrefsw, lcpfail, lcploopback,\n                 authservernotreachable, excessiveinterrupts\n             Added literals to CmAlarmEntityType TC (Release 4.3CC - GE201),\n                 oneru-ge201-shelf, eth-ge-201-card, oneru-ge201se-shelf,\n                 eth-ge-201se-card\n\n            Notes from release 200903160000Z\n             This release is applicable to the FSP150CC Release 4.1 \n             devices GE101 and GE206.\n             (1)Textual Convention CmAlarmEntityType is updated with additional \n                enumeration literals,\n                  1ru-h1-shelf, 1ru-f1-shelf, eth-ge-101-card, eth-ge-206-card,\n                  cfmmep, sync, bitsinport, bitsoutport\n             (2)Textual Convention CmConditionType is updated with additional \n                enumeration literals,\n                 crossconnectccm, erroneousccm, someremotemepccm, somemacstatus,\n                 somerdi, ais, syncref, esmcfail, qlmismatch, freqoff, los, lof,\n                 qlsqlch, frngsync, fstsync, hldovrsync, losloc, wtr, allsyncref,\n                 qlinvalid, snmpdghostunresolved, snmpdghostresourcesbusy, \n                 bwexceedednegspeed, shaperbtd, sfpnonqualified,\n                 avghldovrfrqnotrdy\n             (3)Added new objects cmSysAlmObject, cmSysAlmObjectName,\n                cmSysCondObject, cmSysCondObjectName\n\n             Notes from release 200803030000Z,\n             (1)MIB version ready for release FSP150CM 3.1.',))
if mibBuilder.loadTexts: cmAlarmMIB.setLastUpdated('202003010000Z')
if mibBuilder.loadTexts: cmAlarmMIB.setOrganization('ADVA Optical Networking SE')
if mibBuilder.loadTexts: cmAlarmMIB.setContactInfo('Web URL: http://adva.com/\n        E-mail:  support@adva.com\n        Postal:  ADVA Optical Networking SE\n             Campus Martinsried\n             Fraunhoferstrasse 9a\n             82152 Martinsried/Munich\n             Germany\n        Phone: +49 089 89 06 65 0\n        Fax:  +49 089 89 06 65 199 ')
if mibBuilder.loadTexts: cmAlarmMIB.setDescription('This module defines the Alarm Monitoring MIB definitions \n             used by the F3 (FSP150CM/CC) product lines.  \n             Copyright (C) ADVA.')
alarmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1))
alarmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 2))
alarmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 3))
class CmServiceEffect(TextualConvention, Integer32):
    description = 'Indicates whether a condition is service affecting or not.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("nonServiceAffecting", 1), ("serviceAffecting", 2))

class CmLocation(TextualConvention, Integer32):
    description = 'Identifies the location associated with the particular information.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("none", 0), ("both", 1), ("farEnd", 2), ("nearEnd", 3), ("notApplicable", 4))

class CmDirection(TextualConvention, Integer32):
    description = 'Specifies the direction associated with the particular information.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 0), ("bidirectional", 1), ("bothDirections", 2), ("notApplicable", 3), ("receiveDirectionOnly", 4), ("transmitDirectionOnly", 5), ("uniDirectional", 6))

class CmConditionType(TextualConvention, Integer32):
    description = 'Identifies the type of condition or alarm being reported.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422))
    namedValues = NamedValues(("none", 0), ("acoopr", 1), ("hwinitedsysboot", 2), ("userinitednemireboot", 3), ("userinitedsysboot", 4), ("userinitedsysbootdefaultdb", 5), ("userinitedsysbootdbrestore", 6), ("userinitedsysrebootswact", 7), ("sysrecoveryfailed", 8), ("primntpsvrFailed", 9), ("bckupntpsvrFailed", 10), ("swdl-ftip", 11), ("swdl-ftfail", 12), ("swdl-ftpass", 13), ("swdl-instip", 14), ("swdl-instfail", 15), ("swdl-instpass", 16), ("swdl-actip", 17), ("swdl-actfail", 18), ("swdl-actpass", 19), ("swdl-valip", 20), ("swdl-valfail", 21), ("swdl-valpass", 22), ("db-ftip", 23), ("db-ftfail", 24), ("db-ftpass", 25), ("ctneqpt", 26), ("eqptflt", 27), ("forced", 28), ("lockout", 29), ("manualswitch", 30), ("wkswtopr", 31), ("wkswbk", 32), ("mismatch", 33), ("psu1fail", 34), ("psu2fail", 35), ("eqptremoved", 36), ("autonegunknown", 37), ("dyinggasp", 38), ("efmfail", 39), ("efmrce", 40), ("efmrld", 41), ("efmrls", 42), ("lnkdeactivated", 43), ("lnkdownunisolated", 44), ("lnkdowncablefault", 45), ("lnkdowncableremoved", 46), ("lnkdownautonegfailed", 47), ("lnkdownlpbkfault", 48), ("lnkdowncabletestfault", 49), ("lnkdown", 50), ("rfi", 51), ("rxjabber", 52), ("sfpmismatch", 53), ("sfpremoved", 54), ("sfptxfault", 55), ("sfpinserted", 56), ("fan-a", 57), ("fan-b", 58), ("overtemp", 59), ("undertemp", 60), ("overvoltage", 61), ("undervoltage", 62), ("shelfrmvd", 63), ("rmtefmlpbkfail", 64), ("inpwrflt", 65), ("crossconnectccm", 66), ("erroneousccm", 67), ("someremotemepccm", 68), ("somemacstatus", 69), ("somerdi", 70), ("ais", 71), ("syncref", 72), ("esmcfail", 73), ("qlmismatch", 74), ("freqoff", 75), ("los", 76), ("lof", 77), ("qlsqlch", 78), ("frngsync", 79), ("fstsync", 80), ("hldovrsync", 81), ("losloc", 82), ("wtr", 83), ("allsyncref", 84), ("qlinvalid", 85), ("snmpdghostunresolved", 86), ("snmpdghostresourcesbusy", 87), ("bwexceedednegspeed", 88), ("shaperbtd", 89), ("sfpnonqualified", 90), ("avghldovrfrqnotrdy", 91), ("lnkdownmasterslavecfg", 92), ("pwrnoinputunitfault", 93), ("ipaddrconflict", 94), ("nomoreresources", 95), ("syncreflck", 96), ("syncreffrc", 97), ("syncrefman", 98), ("syncrefwtr", 99), ("syncrefsw", 100), ("lcpfail", 101), ("lcploopback", 102), ("authservernotreachable", 103), ("excessiveinterrupts", 104), ("dbdowngradeip", 105), ("testalarm", 106), ("gen-filexfer-ip", 107), ("gen-filexfer-fail", 108), ("gen-filexfer-pass", 109), ("gen-oper-ip", 110), ("gen-oper-fail", 111), ("gen-oper-pass", 112), ("trafficfail", 113), ("clockfail", 114), ("rdncyswitchover", 115), ("rdncyswvermismatch", 116), ("rdncyoutofsync", 117), ("rdncylockout", 118), ("rdncymaintenance", 119), ("xfptxfault", 120), ("xfpmismatch", 121), ("xfpnonqualified", 122), ("xfpremoved", 123), ("xfpinserted", 124), ("lagmbrfail", 125), ("swdl-proip", 126), ("swdl-propass", 127), ("swdl-profail", 128), ("db-proip", 129), ("db-propass", 130), ("db-profail", 131), ("swdl-rvtip", 132), ("swdl-rvtpass", 133), ("swdl-rvtfail", 134), ("db-corruption", 135), ("bpmismatch", 136), ("popr-oovar", 137), ("popr-oorange", 138), ("popr-genfail", 139), ("popr-sfpnqual", 140), ("popr-rta", 141), ("modemmea", 142), ("modemnonqualified", 143), ("modemremoved", 144), ("nosimcard", 145), ("env-genfail", 146), ("env-misc", 147), ("env-batterydischarge", 148), ("env-batteryfail", 149), ("env-coolingfanfail", 150), ("env-enginefail", 151), ("env-fusefail", 152), ("env-hightemp", 153), ("env-intrusion", 154), ("env-lowbatteryvoltage", 155), ("env-lowtemp", 156), ("env-opendoor", 157), ("env-powerfail", 158), ("intctneqpt", 159), ("syncnotready", 160), ("vcgfail", 161), ("loa", 162), ("plct", 163), ("tlct", 164), ("plcr", 165), ("tlcr", 166), ("sqnc", 167), ("ais-l", 168), ("rfi-l", 169), ("rei-l", 170), ("exc-l", 171), ("deg-l", 172), ("tim-s", 173), ("ais-p", 174), ("lop-p", 175), ("tim-p", 176), ("uneq-p", 177), ("plm-p", 178), ("lom-p", 179), ("exc-p", 180), ("deg-p", 181), ("rei-p", 182), ("rfi-p", 183), ("lcascrc", 184), ("sqm", 185), ("lom", 186), ("gidmismatch", 187), ("mnd", 188), ("ais-v", 189), ("lop-v", 190), ("tim-v", 191), ("uneq-v", 192), ("plm-v", 193), ("exc-v", 194), ("deg-v", 195), ("rei-v", 196), ("rfi-v", 197), ("rmtinitlpbk", 198), ("rai", 199), ("rei", 200), ("idle", 201), ("csf", 202), ("gfplfd", 203), ("gfpuplmismatch", 204), ("gfpexhmismatch", 205), ("vcat-lom", 206), ("fragileecc", 207), ("elmi-seqnummismatch", 208), ("elmi-notoper", 209), ("pw-rlofs", 210), ("pw-lof", 211), ("pw-latefrm", 212), ("pw-jbovrn", 213), ("allsoocsfailed", 214), ("tsholdoverfrqnotready", 215), ("tsfreerun", 216), ("tsholdover", 217), ("ptsflossofsync", 218), ("ptsflossofannounce", 219), ("ptsfunusable", 220), ("unresolvedsatop", 221), ("rdi-v", 222), ("autonegBypass", 223), ("forcedOffline", 224), ("hwcfginconsistent", 225), ("sjmtiemaskcross", 226), ("sjoffsetfail", 227), ("sjnotimelock", 228), ("sjnofreqlock", 229), ("sjmtiemargincross", 230), ("sjtestreferencefail", 231), ("sjtestsourcefail", 232), ("sjtestnotimestamp", 233), ("sjtestnomessages", 234), ("gpsantennafail", 235), ("ampNoPeer", 236), ("ampProvFail", 237), ("ampCfgFail", 238), ("ltpFailure", 239), ("ltpInprogress", 240), ("pse-power-threshold-exceeded", 241), ("pse-power-fail", 242), ("pse-poweroff-overcurrent", 243), ("pse-poweroff-overvoltage", 244), ("pse-poweroff-overload", 245), ("pse-poweroff-overtemp", 246), ("pse-poweroff-short", 247), ("erpFoPPM", 248), ("erpFoPTO", 249), ("erpBlockPort0RPL", 250), ("erpBlockPort0SF", 251), ("erpBlockPort0MS", 252), ("erpBlockPort0FS", 253), ("erpBlockPort0WTR", 254)) + NamedValues(("erpBlockPort1RPL", 255), ("erpBlockPort1SF", 256), ("erpBlockPort1MS", 257), ("erpBlockPort1FS", 258), ("erpBlockPort1WTR", 259), ("ipv6addr-conflict", 260), ("macAddrlearntblFull", 261), ("timeClockNotLocked", 262), ("timeNotTraceAble", 263), ("timeFreqNotTraceAble", 264), ("timeHoldOver", 265), ("timeFreqLock", 266), ("timeRefLock", 267), ("timeRefUnavailable", 268), ("timeRefDegraded", 269), ("timeRefFrc", 270), ("tsTimeFrun", 271), ("tsTimeHoldOver", 272), ("timeRefUnavailableWTR", 273), ("timeRefDegradedWTR", 274), ("rmtInitSat", 275), ("lldpRemoteTblChg", 276), ("soocLck", 277), ("ampProvSuccess", 278), ("ampCfgSuccess", 279), ("soocSW", 280), ("soocWTR", 281), ("sjtealert", 282), ("dataExportFtpFail", 283), ("xfpWaveLengthMismatch", 284), ("cpmrUpgrading", 285), ("beaconLightFailure", 286), ("manualSwitchClear", 287), ("loopbackActive", 288), ("loopbackRequest", 289), ("trafficResourceLimitExceeded", 290), ("oduAis", 291), ("opuAis", 292), ("otuAis", 293), ("otnProtMsmtch", 294), ("otnProtPrtclFail", 295), ("oduBdi", 296), ("otuBdi", 297), ("lossCharSync", 298), ("berHigh", 299), ("laserFail", 300), ("laserCurrentAbnormal", 301), ("oduLock", 302), ("autoShutdown", 303), ("localFault", 304), ("otuLof", 305), ("otuLom", 306), ("oduOci", 307), ("opuPlm", 308), ("oduSd", 309), ("otuSd", 310), ("opuSf", 311), ("optPowerHighRx", 312), ("optPowerLowRx", 313), ("optPowerHighTx", 314), ("optPowerLowTx", 315), ("oduTim", 316), ("otuTim", 317), ("sjConstTeThrshld", 318), ("sjInstTeThrshld", 319), ("timeRefSW", 320), ("aadcfailed", 321), ("ptpfreqfrun", 322), ("ptptimefrun", 323), ("ptpfreqhldovr", 324), ("ptptimehldovr", 325), ("ptptimenottraceable", 326), ("ptpfreqnottraceable", 327), ("synctimeout", 328), ("announcetimeout", 329), ("delayresptimeout", 330), ("multiplepeers", 331), ("wrongdomain", 332), ("nosatellitercv", 333), ("trafficipifoutage", 334), ("ptpportstatechanged", 335), ("physicalSelfLpbk", 336), ("cfCardRWFail", 337), ("maxexpectedslaves", 338), ("external-alarm", 339), ("maskcrossed", 340), ("oof", 341), ("signalfail", 342), ("timenottai", 343), ("perffuncfailure", 344), ("ptpportnotoper", 345), ("leapsecondexpected", 346), ("keyExchangeFail", 347), ("keyExchangeAuthPasswordMissing", 348), ("secureRamCleared", 349), ("noRouteResources", 350), ("tamperSwitchOpen", 351), ("bfdSessionDown", 352), ("destinationUnresolved", 353), ("sjmaxtethrshld", 354), ("trafficArpTableFull", 355), ("erpRingSegmentation", 356), ("gpsrcvrfail", 357), ("noActiveRoute", 358), ("vxlanDMac2DIPTableFull", 359), ("bwExceedLagMemberPortSpeed", 360), ("greRemoteUnreachable", 361), ("bweexceedsportspeed", 362), ("servicediscarded", 363), ("bmcaError", 364), ("freeze", 365), ("gpsFwUpgrade", 366), ("storageWearout", 367), ("pps-not-generated", 368), ("min-sat-1-thrshld-crossed", 369), ("min-sat-2-thrshld-crossed", 370), ("gatewayNotReachable", 371), ("pdop-mask-cross", 372), ("nc-initInProgress", 373), ("primaryNtpSvr-auth-failed", 374), ("backupNtpSvr-auth-failed", 375), ("clock-class-mismatch", 376), ("hpg-switch-force", 377), ("hpg-switch-lockout", 378), ("hpg-switch-to-3gpp-path", 379), ("hpg-switch-to-fixed-path", 380), ("bgp-linkdown", 381), ("ospf-neighbour-lost", 382), ("traffic-ndptable-full", 383), ("dup-link-local-address", 384), ("dup-unicast-address", 385), ("ztp-failed", 386), ("ztp-in-progress", 387), ("nc-runningConfigLocked", 388), ("pwrnoinput2", 389), ("keyExchangeStopped", 390), ("security-error", 391), ("pppoe-connection-failed", 392), ("no-ipv6route-resource", 393), ("sfp-firmware-revision-mismatch", 394), ("vrrp-new-master", 395), ("nontpkeys", 396), ("timesrcunavailable", 397), ("syncsrcunavailable", 398), ("local-cooling-fail", 399), ("jamming", 400), ("spoofing", 401), ("httpsSslCertExpiryPending", 402), ("httpsSslCertExpired", 403), ("srgb-collision", 404), ("sid-collision", 405), ("sr-index-out-of-range", 406), ("novalidsymkeybroadcast", 407), ("patch-panel-mismatch", 408), ("fan-fail", 409), ("invalidsymkeypeering", 410), ("auto-asymmetry-delay-fail", 411), ("no-certificate", 412), ("certificate-expired-soon", 413), ("bpvc", 414), ("crcf", 415), ("oofc", 416), ("psuinputfail1", 417), ("psuinputfail2", 418), ("time-clock-degraded-system-time", 419), ("spoofing-pps", 420), ("spoofing-loc", 421), ("invalid-syscfg", 422))

class CmConditionDescr(TextualConvention, OctetString):
    description = 'A detailed text description of the condition or alarm being reported.\n\n        This string may contain any printable ASCII character.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 64)

class CmAlarmEntityType(TextualConvention, Integer32):
    description = 'Identifies the type of alarm entity types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234))
    namedValues = NamedValues(("system", 1), ("hubshelf", 2), ("cpmrshelf", 3), ("eth-10-100-1000-ntucard", 4), ("eth-cpmr-card", 5), ("nemi-card", 6), ("scu-card", 7), ("fan", 8), ("powersupply", 9), ("accessport", 10), ("networkport", 11), ("oneru-ge101-shelf", 12), ("oneru-ge206-shelf", 13), ("eth-ge-101-card", 14), ("eth-ge-206-card", 15), ("cfmmep", 16), ("sync", 17), ("bitsinport", 18), ("bitsoutport", 19), ("cfmqosshaper", 20), ("dcnport", 21), ("oneru-ge201-shelf", 22), ("eth-ge-201-card", 23), ("oneru-ge201se-shelf", 24), ("eth-ge-201se-card", 25), ("oneru-ge206f-shelf", 26), ("eth-ge-206f-card", 27), ("lag", 28), ("eth-1-10gcard", 29), ("redundancygroup", 30), ("protectiongroup", 31), ("stucard", 32), ("ethertrafficport", 33), ("eth-10-gecard", 34), ("swf-140gcard", 35), ("aggregationshelf", 36), ("sticard", 37), ("amicard", 38), ("usb3gmodem", 39), ("oneru-ge112-shelf", 40), ("eth-ge-112-card", 41), ("oneru-ge114-shelf", 42), ("eth-ge-114-card", 43), ("oneru-ge206v-shelf", 44), ("eth-ge-206v-card", 45), ("ge-4e-cc", 46), ("ge-4s-cc", 47), ("oneru-xg210-shelf", 48), ("eth-xg-210-card", 49), ("xg-1x-cc", 50), ("xg-1s-cc", 51), ("scu-t-card", 52), ("eth-10-100-1000-ntecard", 53), ("slot", 54), ("ocnstmport", 55), ("e1t1port", 56), ("stsvcpath", 57), ("vtvcpath", 58), ("vcg", 59), ("e3t3port", 60), ("vc4", 61), ("vc3", 62), ("vc12", 63), ("sts3c", 64), ("sts1", 65), ("vt15", 66), ("t3", 67), ("e3", 68), ("t1", 69), ("e1", 70), ("stm1-4-et", 71), ("eotdmtrafficport", 72), ("pwe3-ocnstm-card", 73), ("pwe3-e1t1-card", 74), ("satop", 75), ("telecom-slave", 76), ("sooc", 77), ("eth-1-10ghcard", 78), ("eth-10-gehcard", 79), ("port-10mhz", 80), ("ppsport", 81), ("timeofdayport", 82), ("oneru-t1804-shelf", 83), ("eth-t1804-card", 84), ("oneru-t3204-shelf", 85), ("eth-t3204-card", 86), ("eotdmnetworkport", 87), ("oneru-syncprobe-shelf", 88), ("eth-ge-syncprobe-card", 89), ("sj-clockprobe", 90), ("sj-ptpclockprobe", 91), ("sj-ptpnetworkprobe", 92), ("gps-receiverport", 93), ("ampConfig", 94), ("ge-8s-cc", 95), ("oneru-ge114h-shelf", 96), ("eth-ge-114h-card", 97), ("oneru-ge114ph-shelf", 98), ("eth-ge-114ph-card", 99), ("psegroup", 100), ("pseport", 101), ("erpGroup", 102), ("eth-fe-36e-card", 103), ("mpflow", 104), ("oneru-ge114sh-shelf", 105), ("eth-ge-114sh-card", 106), ("oneru-ge114s-shelf", 107), ("eth-ge-114s-card", 108), ("timeclock", 109), ("satResponderSession", 110), ("stu-h-card", 111), ("sti-h-card", 112), ("ge-8e-cc", 113), ("oneru-otn210-shelf", 114), ("eth-otn-210-card", 115), ("ptpclock", 116), ("ptpport", 117), ("oneru-osa5411-shelf", 118), ("eth-osa5411-card", 119), ("oneru-ge112pro-shelf", 120), ("eth-ge-112pro-card", 121), ("oneru-ge112pro-m-shelf", 122), ("eth-ge-112pro-m-card", 123), ("oneru-ge114pro-shelf", 124), ("eth-ge-114pro-card", 125), ("oneru-ge114pro-c-shelf", 126), ("eth-ge-114pro-c-card", 127), ("oneru-ge114pro-sh-shelf", 128), ("eth-ge-114pro-sh-card", 129), ("oneru-ge114pro-csh-shelf", 130), ("eth-ge-114pro-csh-card", 131), ("connectGuardFlow", 132), ("trafficIpIF", 133), ("vrf", 134), ("oneru-ge114pro-he-shelf", 135), ("eth-ge-114pro-he-card", 136), ("oneru-ge112pro-h-shelf", 137), ("eth-ge-112pro-h-card", 138), ("dhcpRelayAgent", 139), ("oneru-xg210c-shelf", 140), ("eth-xg-210c-card", 141), ("ge-8sc-cc", 142), ("oneru-osa5420-shelf", 143), ("eth-osa5420-card", 144), ("oneru-osa5421-shelf", 145), ("eth-osa5421-card", 146), ("mci", 147), ("bits-x16", 148), ("bfdSession", 149), ("eomplsPw", 150), ("oneru-ge114g-shelf", 151), ("eth-ge-114g-card", 152), ("wifidongleport", 153), ("oneru-ge114proVm-h-shelf", 154), ("eth-ge-114proVm-h-card", 155), ("oneru-ge114proVm-ch-shelf", 156), ("eth-ge-114proVm-ch-card", 157), ("oneru-ge114proVm-csh-shelf", 158), ("eth-ge-114proVm-csh-card", 159), ("server-card", 160), ("oneru-xg116pro-shelf", 161), ("eth-xg-116pro-card", 162), ("oneru-xg120pro-shelf", 163), ("eth-xg-120pro-card", 164), ("pps-x16", 165), ("clk-x16", 166), ("todandpps-x16", 167), ("vxlanSegment", 168), ("vtep", 169), ("ge101pro-shelf", 170), ("eth-ge-101pro-card", 171), ("greTunnel", 172), ("go102pro-s-shelf", 173), ("go102pro-sp-shelf", 174), ("onru-cx101pro-30a-shelf", 175), ("onru-cx102pro-30a-shelf", 176), ("eth-go102pro-s-card", 177), ("eth-go102pro-sp-card", 178), ("eth-cx101pro-30a-card", 179), ("eth-cx102pro-30a-card", 180), ("osa-ge-4s", 181), ("elpgroup", 182), ("oneru-ge112proVm-shelf", 183), ("eth-ge-112proVm-card", 184), ("hybrid-path-group", 191), ("ge102pro-h-shelf", 192), ("eth-ge-102pro-h-card", 193), ("ge102pro-efmh-shelf", 194), ("eth-ge-102pro-efmh-card", 195), ("traffic-bgprouter-peer", 196), ("traffic-ipv6-interface", 197), ("oneru-xg116pro-h-shelf", 198), ("eth-xg-116pro-h-card", 199), ("go102pro-sm-shelf", 200), ("eth-go102pro-sm-card", 201), ("vrrp-router", 202), ("ru1-osa5430-shelf", 203), ("eth-csm-osa-card", 204), ("ru3-osa5440-shelf", 205), ("eth-osa5440-card", 206), ("aux-osa", 207), ("bits-x16-enhanced", 208), ("osa-ge-4s-protected", 209), ("syncprotectiongroup", 210), ("timeclockprotectiongroup", 211), ("mciprotectiongroup", 212), ("oneru-xg118pro-sh-shelf", 213), ("eth-xg-118pro-sh-card", 214), ("ntp-clock", 215), ("oneru-xg118proac-sh-shelf", 216), ("eth-xg-118proac-sh-card", 217), ("oneru-ge114proVm-sh-shelf", 218), ("eth-ge-114proVm-sh-card", 219), ("oneru-ge104-shelf", 220), ("eth-ge-104-card", 221), ("segment-routing", 222), ("oneru-xg120pro-sh-shelf", 223), ("eth-xg-120pro-sh-card", 224), ("irig-card", 225), ("irig-port-group", 226), ("nci", 227), ("ru1-osa5422-shelf", 228), ("ru1-softsync-shelf", 229), ("eth-osa5422-card", 230), ("eth-softsync-card", 231), ("mb-gnss-card", 232), ("composite-clock-card", 233), ("l3ptpport", 234))

class CmCondEffectType(TextualConvention, Integer32):
    description = 'Identifies the type of condition effect types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("sc", 1), ("tc", 2), ("cl", 3))

class TestAlarmAction(TextualConvention, Integer32):
    description = 'Whether to raise/clear a test alarm.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("raise", 1), ("clear", 2))

class EnvAlarmInputMode(TextualConvention, Integer32):
    description = 'Identifies the environmental alarm input modes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("alarmopen", 2), ("alarmclosed", 3))

cmAlarmScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 1))
cmAlmLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlmLastChange.setStatus('current')
if mibBuilder.loadTexts: cmAlmLastChange.setDescription('A snapshot of the value of sysUpTime when the alarm situation\n            last changed on the node (ie. there was a raise or clear).\n\n            This value is reset to zero when the agent initializes.')
cmAlmIndex = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlmIndex.setStatus('current')
if mibBuilder.loadTexts: cmAlmIndex.setDescription('This value is assigned globally and sequentially to each new\n             trap that is sent from the device.  \n\n             When this value reaches a maximum of 65535, it is wrapped to\n             the value 1.')
cmAlmTestAlarmEntity = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 1, 3), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAlmTestAlarmEntity.setStatus('current')
if mibBuilder.loadTexts: cmAlmTestAlarmEntity.setDescription('This object is used to specify the entity for which \n             the test alarm is raised/cleared. This entity can be\n             OID of a card(unit) or a port (Ethernet Access or Ethernet\n             Network).\n             The test alarm is the trap cmNetworkElementAlmTrap with\n             condition type as testalarm.\n             If not specified, the value of this object is 0.0.')
cmAlmTestAlarmAction = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 1, 4), TestAlarmAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAlmTestAlarmAction.setStatus('current')
if mibBuilder.loadTexts: cmAlmTestAlarmAction.setDescription('This object can be used to raise/clear the testalarm\n             on the entity specified by cmAlmTestAlarmEntity.')
cmSysAlmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 2), )
if mibBuilder.loadTexts: cmSysAlmTable.setStatus('current')
if mibBuilder.loadTexts: cmSysAlmTable.setDescription('A list of entries corresponding to the standing conditions\n             that exist at the system level. \n\n            Entries cannot be created in this table by management\n            application action.')
cmSysAlmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 2, 1), ).setIndexNames((0, "CM-ALARM-MIB", "cmAlmIndex"))
if mibBuilder.loadTexts: cmSysAlmEntry.setStatus('current')
if mibBuilder.loadTexts: cmSysAlmEntry.setDescription('An entry containing information applicable to a particular\n             condition.')
cmSysAlmNotifCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 2, 1, 1), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysAlmNotifCode.setStatus('current')
if mibBuilder.loadTexts: cmSysAlmNotifCode.setDescription('This object identifies the severity of the condition.')
cmSysAlmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 2, 1, 2), CmConditionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysAlmType.setStatus('current')
if mibBuilder.loadTexts: cmSysAlmType.setDescription('This object identifies the type of the condition.')
cmSysAlmSrvEff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 2, 1, 3), CmServiceEffect()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysAlmSrvEff.setStatus('current')
if mibBuilder.loadTexts: cmSysAlmSrvEff.setDescription('This object identifies whether the condition is service affecting\n         or not.')
cmSysAlmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysAlmTime.setStatus('current')
if mibBuilder.loadTexts: cmSysAlmTime.setDescription('This object contains the system time when the condition occurred.')
cmSysAlmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 2, 1, 5), CmLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysAlmLocation.setStatus('current')
if mibBuilder.loadTexts: cmSysAlmLocation.setDescription('This object identifies the location of the condition. The value\n         none(0) should be used if location is not applicable.')
cmSysAlmDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 2, 1, 6), CmDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysAlmDirection.setStatus('current')
if mibBuilder.loadTexts: cmSysAlmDirection.setDescription('This object identifies the direction of the condition. The value\n         none(0) should be used if direction is not applicable.')
cmSysAlmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 2, 1, 7), CmConditionDescr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysAlmDescr.setStatus('current')
if mibBuilder.loadTexts: cmSysAlmDescr.setDescription('This object contains a text description of the condition.')
cmSysAlmObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 2, 1, 8), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysAlmObject.setStatus('current')
if mibBuilder.loadTexts: cmSysAlmObject.setDescription('OID of the actual object that raised the alarm.')
cmSysAlmObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysAlmObjectName.setStatus('current')
if mibBuilder.loadTexts: cmSysAlmObjectName.setDescription('Symbolic name of the managed object to which the condition\n         pertains.')
cmSysAlmAdditionalInfoObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 2, 1, 10), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysAlmAdditionalInfoObject.setStatus('current')
if mibBuilder.loadTexts: cmSysAlmAdditionalInfoObject.setDescription('This object provides OID of associated entity that caused the alarm.\n          If there is no associated entity, this value is 0.0.')
cmSysAlmAdditionalInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysAlmAdditionalInfoName.setStatus('current')
if mibBuilder.loadTexts: cmSysAlmAdditionalInfoName.setDescription('This object provides name of the associated entity to which the \n          alarm pertains.  If there is no such entity, this value is empty.')
cmSysCondTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 3), )
if mibBuilder.loadTexts: cmSysCondTable.setStatus('current')
if mibBuilder.loadTexts: cmSysCondTable.setDescription('A list of entries corresponding to the standing conditions\n             that exist at the system level. \n\n            Entries cannot be created in this table by management\n            application action.')
cmSysCondEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 3, 1), ).setIndexNames((0, "CM-ALARM-MIB", "cmSysCondIndex"))
if mibBuilder.loadTexts: cmSysCondEntry.setStatus('current')
if mibBuilder.loadTexts: cmSysCondEntry.setDescription('An entry containing information applicable to a particular\n             condition.')
cmSysCondIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysCondIndex.setStatus('current')
if mibBuilder.loadTexts: cmSysCondIndex.setDescription('An integer index value used to uniquely identify\n           a standing condition at the system level.')
cmSysCondNotifCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 3, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysCondNotifCode.setStatus('current')
if mibBuilder.loadTexts: cmSysCondNotifCode.setDescription('This object identifies the severity of the condition.')
cmSysCondType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 3, 1, 3), CmConditionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysCondType.setStatus('current')
if mibBuilder.loadTexts: cmSysCondType.setDescription('This object identifies the type of the condition.')
cmSysCondSrvEff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 3, 1, 4), CmServiceEffect()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysCondSrvEff.setStatus('current')
if mibBuilder.loadTexts: cmSysCondSrvEff.setDescription('This object identifies whether the condition is service affecting\n         or not.')
cmSysCondTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysCondTime.setStatus('current')
if mibBuilder.loadTexts: cmSysCondTime.setDescription('This object contains the system time when the condition occurred.')
cmSysCondLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 3, 1, 6), CmLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysCondLocation.setStatus('current')
if mibBuilder.loadTexts: cmSysCondLocation.setDescription('This object identifies the location of the condition. The value\n         none(0) should be used if location is not applicable.')
cmSysCondDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 3, 1, 7), CmDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysCondDirection.setStatus('current')
if mibBuilder.loadTexts: cmSysCondDirection.setDescription('This object identifies the direction of the condition. The value\n         none(0) should be used if direction is not applicable.')
cmSysCondDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 3, 1, 8), CmConditionDescr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysCondDescr.setStatus('current')
if mibBuilder.loadTexts: cmSysCondDescr.setDescription('This object contains a text description of the condition.')
cmSysCondEffType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 3, 1, 9), CmCondEffectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysCondEffType.setStatus('current')
if mibBuilder.loadTexts: cmSysCondEffType.setDescription('This object contains the condition effect type.')
cmSysCondObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 3, 1, 10), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysCondObject.setStatus('current')
if mibBuilder.loadTexts: cmSysCondObject.setDescription('OID of the actual object that raised the condition.')
cmSysCondObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysCondObjectName.setStatus('current')
if mibBuilder.loadTexts: cmSysCondObjectName.setDescription('Symbolic name of the managed object to which the condition\n         pertains.')
cmSysCondAdditionalInfoObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 3, 1, 12), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysCondAdditionalInfoObject.setStatus('current')
if mibBuilder.loadTexts: cmSysCondAdditionalInfoObject.setDescription('This object provides OID of associated entity that caused \n          the condition.  If there is no associated entity, this value is 0.0.')
cmSysCondAdditionalInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysCondAdditionalInfoName.setStatus('current')
if mibBuilder.loadTexts: cmSysCondAdditionalInfoName.setDescription('This object provides name of the associated entity to which the \n          condition pertains.  If there is no such entity, this value is empty.')
cmNetworkElementAlmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 4), )
if mibBuilder.loadTexts: cmNetworkElementAlmTable.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementAlmTable.setDescription('A list of entries corresponding to the standing conditions\n             that exist at the system level. \n\n            Entries cannot be created in this table by management\n            application action.')
cmNetworkElementAlmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ALARM-MIB", "cmAlmIndex"))
if mibBuilder.loadTexts: cmNetworkElementAlmEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementAlmEntry.setDescription('An entry containing information applicable to a particular\n             condition.')
cmNetworkElementAlmNotifCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 4, 1, 1), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementAlmNotifCode.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementAlmNotifCode.setDescription('This object identifies the severity of the condition.')
cmNetworkElementAlmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 4, 1, 2), CmConditionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementAlmType.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementAlmType.setDescription('This object identifies the type of the condition.')
cmNetworkElementAlmSrvEff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 4, 1, 3), CmServiceEffect()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementAlmSrvEff.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementAlmSrvEff.setDescription('This object identifies whether the condition is service affecting\n         or not.')
cmNetworkElementAlmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 4, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementAlmTime.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementAlmTime.setDescription('This object contains the system time when the condition occurred.')
cmNetworkElementAlmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 4, 1, 5), CmLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementAlmLocation.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementAlmLocation.setDescription('This object identifies the location of the condition. The value\n         none(0) should be used if location is not applicable.')
cmNetworkElementAlmDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 4, 1, 6), CmDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementAlmDirection.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementAlmDirection.setDescription('This object identifies the direction of the condition. The value\n         none(0) should be used if direction is not applicable.')
cmNetworkElementAlmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 4, 1, 7), CmConditionDescr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementAlmDescr.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementAlmDescr.setDescription('This object contains a text description of the condition.')
cmNetworkElementAlmObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 4, 1, 8), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementAlmObject.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementAlmObject.setDescription('OID of the actual object that raised the alarm.')
cmNetworkElementAlmObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementAlmObjectName.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementAlmObjectName.setDescription('Symbolic name of the managed object to which the condition\n         pertains.\n\n         This object can be any interface on this device or the system\n         object.  If this is an interface, this name will be same\n         as ifName (IF-MIB).')
cmNetworkElementAlmAdditionalInfoObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 4, 1, 10), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementAlmAdditionalInfoObject.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementAlmAdditionalInfoObject.setDescription('This object provides OID of associated entity that caused the alarm.\n          If there is no associated entity, this value is 0.0.')
cmNetworkElementAlmAdditionalInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementAlmAdditionalInfoName.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementAlmAdditionalInfoName.setDescription('This object provides name of the associated entity to which the \n          alarm pertains.  If there is no such entity, this value is empty.')
cmNetworkElementCondTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 5), )
if mibBuilder.loadTexts: cmNetworkElementCondTable.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementCondTable.setDescription('A list of entries corresponding to the standing conditions\n             that exist at the system level. \n\n            Entries cannot be created in this table by management\n            application action.')
cmNetworkElementCondEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ALARM-MIB", "cmNetworkElementCondIndex"))
if mibBuilder.loadTexts: cmNetworkElementCondEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementCondEntry.setDescription('An entry containing information applicable to a particular\n             condition.')
cmNetworkElementCondIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementCondIndex.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementCondIndex.setDescription('An integer index value used to uniquely identify\n           a standing condition at a  Network Element level.')
cmNetworkElementCondNotifCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 5, 1, 2), TrapAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementCondNotifCode.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementCondNotifCode.setDescription('This object identifies the severity of the condition.')
cmNetworkElementCondType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 5, 1, 3), CmConditionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementCondType.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementCondType.setDescription('This object identifies the type of the condition.')
cmNetworkElementCondSrvEff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 5, 1, 4), CmServiceEffect()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementCondSrvEff.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementCondSrvEff.setDescription('This object identifies whether the condition is service affecting\n         or not.')
cmNetworkElementCondTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 5, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementCondTime.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementCondTime.setDescription('This object contains the system time when the condition occurred.')
cmNetworkElementCondLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 5, 1, 6), CmLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementCondLocation.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementCondLocation.setDescription('This object identifies the location of the condition. The value\n         none(0) should be used if location is not applicable.')
cmNetworkElementCondDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 5, 1, 7), CmDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementCondDirection.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementCondDirection.setDescription('This object identifies the direction of the condition. The value\n         none(0) should be used if direction is not applicable.')
cmNetworkElementCondDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 5, 1, 8), CmConditionDescr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementCondDescr.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementCondDescr.setDescription('This object contains a text description of the condition.')
cmNetworkElementCondObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 5, 1, 9), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementCondObject.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementCondObject.setDescription('Symbolic name of the managed object to which the condition\n         pertains.\n\n         This object can be any interface on this device or the system\n         object.  If this is an interface, this name will be same\n         as ifName (IF-MIB).')
cmNetworkElementCondObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementCondObjectName.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementCondObjectName.setDescription('Symbolic name of the managed object to which the condition\n         pertains.\n\n         This object can be any interface on this device or the system\n         object.  If this is an interface, this name will be same\n         as ifName (IF-MIB).')
cmNetworkElementCondEffType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 5, 1, 11), CmCondEffectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementCondEffType.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementCondEffType.setDescription('This object contains the condition effect type.')
cmNetworkElementCondAdditionalInfoObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 5, 1, 12), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementCondAdditionalInfoObject.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementCondAdditionalInfoObject.setDescription('This object provides OID of associated entity that caused the alarm.\n          If there is no associated entity, this value is 0.0.')
cmNetworkElementCondAdditionalInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetworkElementCondAdditionalInfoName.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementCondAdditionalInfoName.setDescription('This object provides name of the associated entity to which the \n          alarm pertains.  If there is no such entity, this value is empty.')
cmAlarmSeverityAssignmentTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 6), )
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentTable.setStatus('current')
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentTable.setDescription('A list of configurable alarm severity assignment entries for\n         Enterprise MIB Alarm Conditions.')
cmAlarmSeverityAssignmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 6, 1), ).setIndexNames((0, "CM-ALARM-MIB", "cmAlarmSeverityAssignmentEntityType"), (0, "CM-ALARM-MIB", "cmAlarmSeverityAssignmentCondType"), (0, "CM-ALARM-MIB", "cmAlarmSeverityAssignmentSrvEff"))
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentEntry.setStatus('current')
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentEntry.setDescription('A list of parameters that set up the alarm severity assignment profiles.')
cmAlarmSeverityAssignmentEntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 6, 1, 1), CmAlarmEntityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentEntityType.setStatus('current')
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentEntityType.setDescription('Alarm Severity Assignment Entity Type.')
cmAlarmSeverityAssignmentCondType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 6, 1, 2), CmConditionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentCondType.setStatus('current')
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentCondType.setDescription('This object identifies the type of the condition.')
cmAlarmSeverityAssignmentSrvEff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 6, 1, 3), CmServiceEffect()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentSrvEff.setStatus('current')
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentSrvEff.setDescription('This object identifies whether the condition is service affecting\n          or not.')
cmAlarmSeverityAssignmentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 6, 1, 4), CmLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentLocation.setStatus('current')
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentLocation.setDescription('This object identifies the location of the condition. The value\n         none(0) is used if location is not applicable.')
cmAlarmSeverityAssignmentNotifCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 6, 1, 5), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentNotifCode.setStatus('current')
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentNotifCode.setDescription('This object allows configuration of the severity of the condition.')
cmAlarmSeverityAssignmentDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 6, 1, 6), CmDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentDirection.setStatus('current')
if mibBuilder.loadTexts: cmAlarmSeverityAssignmentDirection.setDescription('This object identifies the direction of the condition. The value\n         none(0) should be used if direction is not applicable.')
f3EnvAlarmInputTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 7), )
if mibBuilder.loadTexts: f3EnvAlarmInputTable.setStatus('current')
if mibBuilder.loadTexts: f3EnvAlarmInputTable.setDescription('A list of configurable Environmental Alarm Inputs.')
f3EnvAlarmInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ALARM-MIB", "f3EnvAlarmInputIndex"))
if mibBuilder.loadTexts: f3EnvAlarmInputEntry.setStatus('current')
if mibBuilder.loadTexts: f3EnvAlarmInputEntry.setDescription('A list of parameters to manage the the environmental alarm inputs.')
f3EnvAlarmInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: f3EnvAlarmInputIndex.setStatus('current')
if mibBuilder.loadTexts: f3EnvAlarmInputIndex.setDescription('Unique index for each environmental alarm input.')
f3EnvAlarmInputDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EnvAlarmInputDescr.setStatus('current')
if mibBuilder.loadTexts: f3EnvAlarmInputDescr.setDescription('This object allows SNMP management entities to provide description to the\n          environmental alarm inputs.')
f3EnvAlarmInputCondType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 7, 1, 3), CmConditionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EnvAlarmInputCondType.setStatus('current')
if mibBuilder.loadTexts: f3EnvAlarmInputCondType.setDescription('This object allows SNMP management entities to provide the environmental alarm\n          condition associated with the environmental alarm input.')
f3EnvAlarmInputNotifCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 7, 1, 4), TrapAlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EnvAlarmInputNotifCode.setStatus('current')
if mibBuilder.loadTexts: f3EnvAlarmInputNotifCode.setDescription('This object allows SNMP management entities to provide the notification code\n          for the environmental alarm input.')
f3EnvAlarmInputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 7, 1, 5), EnvAlarmInputMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EnvAlarmInputMode.setStatus('current')
if mibBuilder.loadTexts: f3EnvAlarmInputMode.setDescription("This object allows specification of the environmental alarm input mode.\n          When 'disabled', environmental alarms are not raised.  Value of 'alarmopen' \n          allows alarm to be raised when environmental alarm dry contacts are opened.\n          Value of 'alarmclosed' allows alarm to be raised when environmental alarm dry \n          contacts are closed.")
f3EnvAlarmInputAlmHoldOffEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 1, 7, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EnvAlarmInputAlmHoldOffEnabled.setStatus('current')
if mibBuilder.loadTexts: f3EnvAlarmInputAlmHoldOffEnabled.setDescription("This object allows enabling/disabling of alarm hold off for this environmental\n          alarm.  When 'disabled', the standard alarm hold off (2.5seconds) does not hold, i.e.\n          alarms are raised immediately when conditions happen.")
cmSysAlmTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 2, 1)).setObjects(("CM-ALARM-MIB", "cmAlmIndex"), ("CM-ALARM-MIB", "cmSysAlmNotifCode"), ("CM-ALARM-MIB", "cmSysAlmType"), ("CM-ALARM-MIB", "cmSysAlmSrvEff"), ("CM-ALARM-MIB", "cmSysAlmTime"), ("CM-ALARM-MIB", "cmSysAlmLocation"), ("CM-ALARM-MIB", "cmSysAlmDirection"), ("CM-ALARM-MIB", "cmSysAlmDescr"), ("CM-ALARM-MIB", "cmSysAlmObject"), ("CM-ALARM-MIB", "cmSysAlmObjectName"), ("CM-ALARM-MIB", "cmSysAlmAdditionalInfoObject"), ("CM-ALARM-MIB", "cmSysAlmAdditionalInfoName"))
if mibBuilder.loadTexts: cmSysAlmTrap.setStatus('current')
if mibBuilder.loadTexts: cmSysAlmTrap.setDescription('This trap is sent each time an alarm condition is raised and\n             inserted into to the cmSysAlmTable. \n             It is also sent each time an\n             alarm condition is cleared and removed from the \n             cmSysAlmTable.')
cmNetworkElementAlmTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 2, 2)).setObjects(("CM-ALARM-MIB", "cmAlmIndex"), ("CM-ALARM-MIB", "cmNetworkElementAlmNotifCode"), ("CM-ALARM-MIB", "cmNetworkElementAlmType"), ("CM-ALARM-MIB", "cmNetworkElementAlmSrvEff"), ("CM-ALARM-MIB", "cmNetworkElementAlmTime"), ("CM-ALARM-MIB", "cmNetworkElementAlmLocation"), ("CM-ALARM-MIB", "cmNetworkElementAlmDirection"), ("CM-ALARM-MIB", "cmNetworkElementAlmDescr"), ("CM-ALARM-MIB", "cmNetworkElementAlmObject"), ("CM-ALARM-MIB", "cmNetworkElementAlmObjectName"), ("CM-ALARM-MIB", "cmNetworkElementAlmAdditionalInfoObject"), ("CM-ALARM-MIB", "cmNetworkElementAlmAdditionalInfoName"))
if mibBuilder.loadTexts: cmNetworkElementAlmTrap.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementAlmTrap.setDescription('This trap is sent each time an alarm condition is raised and\n             inserted into to the cmNetworkElementAlmTable. \n             It is also sent each time an\n             alarm condition is cleared and removed from the \n             cmNetworkElementAlmTable.')
cmSysEvent = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 2, 3)).setObjects(("CM-ALARM-MIB", "cmAlmIndex"), ("CM-ALARM-MIB", "cmSysCondType"), ("CM-ALARM-MIB", "cmSysCondTime"), ("CM-ALARM-MIB", "cmSysCondLocation"), ("CM-ALARM-MIB", "cmSysCondDirection"), ("CM-ALARM-MIB", "cmSysCondDescr"), ("CM-ALARM-MIB", "cmSysCondEffType"), ("CM-ALARM-MIB", "cmSysCondObject"), ("CM-ALARM-MIB", "cmSysCondObjectName"), ("CM-ALARM-MIB", "cmSysCondAdditionalInfoObject"), ("CM-ALARM-MIB", "cmSysCondAdditionalInfoName"))
if mibBuilder.loadTexts: cmSysEvent.setStatus('current')
if mibBuilder.loadTexts: cmSysEvent.setDescription('This trap is sent each time an event condition is raised and\n             inserted into to the cmSysCondTable. \n             It is also sent each time an\n             event condition is cleared and removed from the \n             cmSysCondTable. Standing conditions/transient conditions\n             are reported using this notification.')
cmNetworkElementEvent = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 2, 4)).setObjects(("CM-ALARM-MIB", "cmAlmIndex"), ("CM-ALARM-MIB", "cmNetworkElementCondType"), ("CM-ALARM-MIB", "cmNetworkElementCondTime"), ("CM-ALARM-MIB", "cmNetworkElementCondLocation"), ("CM-ALARM-MIB", "cmNetworkElementCondDirection"), ("CM-ALARM-MIB", "cmNetworkElementCondDescr"), ("CM-ALARM-MIB", "cmNetworkElementCondObject"), ("CM-ALARM-MIB", "cmNetworkElementCondObjectName"), ("CM-ALARM-MIB", "cmNetworkElementCondEffType"), ("CM-ALARM-MIB", "cmNetworkElementCondAdditionalInfoObject"), ("CM-ALARM-MIB", "cmNetworkElementCondAdditionalInfoName"))
if mibBuilder.loadTexts: cmNetworkElementEvent.setStatus('current')
if mibBuilder.loadTexts: cmNetworkElementEvent.setDescription('This trap is sent each time an event condition is raised and\n             inserted into to the cmNetworkElementCondTable. \n             It is also sent each time an\n             event condition is cleared and removed from the \n             cmNetworkElementCondTable. Standing conditions/transient conditions\n             are reported using this notification.')
cmAlmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 3, 1))
cmAlmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 3, 2))
cmAlmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 3, 1, 1)).setObjects(("CM-ALARM-MIB", "cmAlmObjectGroup"), ("CM-ALARM-MIB", "cmAlmNotifGroup"), ("CM-ALARM-MIB", "f3EnvAlarmInputGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmAlmCompliance = cmAlmCompliance.setStatus('current')
if mibBuilder.loadTexts: cmAlmCompliance.setDescription('Describes the requirements for conformance to the Alarm\n             Condition Services.')
cmAlmObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 3, 2, 1)).setObjects(("CM-ALARM-MIB", "cmAlmLastChange"), ("CM-ALARM-MIB", "cmAlmIndex"), ("CM-ALARM-MIB", "cmAlmTestAlarmEntity"), ("CM-ALARM-MIB", "cmAlmTestAlarmAction"), ("CM-ALARM-MIB", "cmSysAlmNotifCode"), ("CM-ALARM-MIB", "cmSysAlmType"), ("CM-ALARM-MIB", "cmSysAlmSrvEff"), ("CM-ALARM-MIB", "cmSysAlmTime"), ("CM-ALARM-MIB", "cmSysAlmLocation"), ("CM-ALARM-MIB", "cmSysAlmDirection"), ("CM-ALARM-MIB", "cmSysAlmDescr"), ("CM-ALARM-MIB", "cmSysAlmObject"), ("CM-ALARM-MIB", "cmSysAlmObjectName"), ("CM-ALARM-MIB", "cmSysAlmAdditionalInfoObject"), ("CM-ALARM-MIB", "cmSysAlmAdditionalInfoName"), ("CM-ALARM-MIB", "cmSysCondIndex"), ("CM-ALARM-MIB", "cmSysCondNotifCode"), ("CM-ALARM-MIB", "cmSysCondType"), ("CM-ALARM-MIB", "cmSysCondSrvEff"), ("CM-ALARM-MIB", "cmSysCondTime"), ("CM-ALARM-MIB", "cmSysCondLocation"), ("CM-ALARM-MIB", "cmSysCondDirection"), ("CM-ALARM-MIB", "cmSysCondDescr"), ("CM-ALARM-MIB", "cmSysCondEffType"), ("CM-ALARM-MIB", "cmSysCondObject"), ("CM-ALARM-MIB", "cmSysCondObjectName"), ("CM-ALARM-MIB", "cmSysCondAdditionalInfoObject"), ("CM-ALARM-MIB", "cmSysCondAdditionalInfoName"), ("CM-ALARM-MIB", "cmNetworkElementAlmNotifCode"), ("CM-ALARM-MIB", "cmNetworkElementAlmType"), ("CM-ALARM-MIB", "cmNetworkElementAlmSrvEff"), ("CM-ALARM-MIB", "cmNetworkElementAlmTime"), ("CM-ALARM-MIB", "cmNetworkElementAlmLocation"), ("CM-ALARM-MIB", "cmNetworkElementAlmDirection"), ("CM-ALARM-MIB", "cmNetworkElementAlmDescr"), ("CM-ALARM-MIB", "cmNetworkElementAlmObject"), ("CM-ALARM-MIB", "cmNetworkElementAlmObjectName"), ("CM-ALARM-MIB", "cmNetworkElementAlmAdditionalInfoObject"), ("CM-ALARM-MIB", "cmNetworkElementAlmAdditionalInfoName"), ("CM-ALARM-MIB", "cmNetworkElementCondIndex"), ("CM-ALARM-MIB", "cmNetworkElementCondNotifCode"), ("CM-ALARM-MIB", "cmNetworkElementCondType"), ("CM-ALARM-MIB", "cmNetworkElementCondSrvEff"), ("CM-ALARM-MIB", "cmNetworkElementCondTime"), ("CM-ALARM-MIB", "cmNetworkElementCondLocation"), ("CM-ALARM-MIB", "cmNetworkElementCondDirection"), ("CM-ALARM-MIB", "cmNetworkElementCondDescr"), ("CM-ALARM-MIB", "cmNetworkElementCondObject"), ("CM-ALARM-MIB", "cmNetworkElementCondObjectName"), ("CM-ALARM-MIB", "cmNetworkElementCondEffType"), ("CM-ALARM-MIB", "cmNetworkElementCondAdditionalInfoObject"), ("CM-ALARM-MIB", "cmNetworkElementCondAdditionalInfoName"), ("CM-ALARM-MIB", "cmAlarmSeverityAssignmentEntityType"), ("CM-ALARM-MIB", "cmAlarmSeverityAssignmentCondType"), ("CM-ALARM-MIB", "cmAlarmSeverityAssignmentSrvEff"), ("CM-ALARM-MIB", "cmAlarmSeverityAssignmentLocation"), ("CM-ALARM-MIB", "cmAlarmSeverityAssignmentNotifCode"), ("CM-ALARM-MIB", "cmAlarmSeverityAssignmentDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmAlmObjectGroup = cmAlmObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cmAlmObjectGroup.setDescription('A collection of objects used to manage the Alarm\n             conditions/threshold Services.')
cmAlmNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 3, 2, 2)).setObjects(("CM-ALARM-MIB", "cmSysAlmTrap"), ("CM-ALARM-MIB", "cmNetworkElementAlmTrap"), ("CM-ALARM-MIB", "cmSysEvent"), ("CM-ALARM-MIB", "cmNetworkElementEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmAlmNotifGroup = cmAlmNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cmAlmNotifGroup.setDescription('A collection of notifications related to alarm\n             conditions/threshold Services.')
f3EnvAlarmInputGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 6, 3, 2, 3)).setObjects(("CM-ALARM-MIB", "f3EnvAlarmInputIndex"), ("CM-ALARM-MIB", "f3EnvAlarmInputDescr"), ("CM-ALARM-MIB", "f3EnvAlarmInputCondType"), ("CM-ALARM-MIB", "f3EnvAlarmInputNotifCode"), ("CM-ALARM-MIB", "f3EnvAlarmInputMode"), ("CM-ALARM-MIB", "f3EnvAlarmInputAlmHoldOffEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3EnvAlarmInputGroup = f3EnvAlarmInputGroup.setStatus('current')
if mibBuilder.loadTexts: f3EnvAlarmInputGroup.setDescription('A collection of objects related to environmental alarm\n             inputs.')
mibBuilder.exportSymbols("CM-ALARM-MIB", cmNetworkElementAlmType=cmNetworkElementAlmType, cmSysAlmAdditionalInfoObject=cmSysAlmAdditionalInfoObject, cmNetworkElementAlmTrap=cmNetworkElementAlmTrap, cmNetworkElementEvent=cmNetworkElementEvent, CmConditionDescr=CmConditionDescr, cmSysAlmDirection=cmSysAlmDirection, cmNetworkElementCondIndex=cmNetworkElementCondIndex, cmNetworkElementCondNotifCode=cmNetworkElementCondNotifCode, cmSysCondDescr=cmSysCondDescr, cmAlarmSeverityAssignmentEntry=cmAlarmSeverityAssignmentEntry, cmAlmGroups=cmAlmGroups, alarmNotifications=alarmNotifications, cmSysCondNotifCode=cmSysCondNotifCode, cmNetworkElementCondAdditionalInfoName=cmNetworkElementCondAdditionalInfoName, cmSysAlmType=cmSysAlmType, cmAlarmSeverityAssignmentEntityType=cmAlarmSeverityAssignmentEntityType, cmSysCondTime=cmSysCondTime, cmNetworkElementCondDirection=cmNetworkElementCondDirection, cmNetworkElementAlmLocation=cmNetworkElementAlmLocation, f3EnvAlarmInputMode=f3EnvAlarmInputMode, cmNetworkElementAlmTime=cmNetworkElementAlmTime, cmAlmCompliances=cmAlmCompliances, cmSysCondObject=cmSysCondObject, cmSysAlmAdditionalInfoName=cmSysAlmAdditionalInfoName, f3EnvAlarmInputEntry=f3EnvAlarmInputEntry, cmSysCondSrvEff=cmSysCondSrvEff, cmNetworkElementAlmAdditionalInfoObject=cmNetworkElementAlmAdditionalInfoObject, CmServiceEffect=CmServiceEffect, cmSysAlmObject=cmSysAlmObject, cmSysCondTable=cmSysCondTable, cmNetworkElementCondTable=cmNetworkElementCondTable, cmNetworkElementAlmNotifCode=cmNetworkElementAlmNotifCode, cmSysAlmTime=cmSysAlmTime, cmAlmTestAlarmAction=cmAlmTestAlarmAction, CmCondEffectType=CmCondEffectType, alarmConformance=alarmConformance, f3EnvAlarmInputAlmHoldOffEnabled=f3EnvAlarmInputAlmHoldOffEnabled, cmAlarmSeverityAssignmentLocation=cmAlarmSeverityAssignmentLocation, cmSysCondEffType=cmSysCondEffType, cmSysCondObjectName=cmSysCondObjectName, cmNetworkElementAlmObjectName=cmNetworkElementAlmObjectName, cmNetworkElementAlmEntry=cmNetworkElementAlmEntry, cmSysAlmNotifCode=cmSysAlmNotifCode, cmSysAlmLocation=cmSysAlmLocation, cmAlarmSeverityAssignmentCondType=cmAlarmSeverityAssignmentCondType, cmSysAlmEntry=cmSysAlmEntry, cmNetworkElementCondEntry=cmNetworkElementCondEntry, cmAlarmScalars=cmAlarmScalars, EnvAlarmInputMode=EnvAlarmInputMode, CmConditionType=CmConditionType, cmAlarmMIB=cmAlarmMIB, cmAlmTestAlarmEntity=cmAlmTestAlarmEntity, cmSysCondType=cmSysCondType, cmSysCondAdditionalInfoObject=cmSysCondAdditionalInfoObject, cmNetworkElementCondTime=cmNetworkElementCondTime, f3EnvAlarmInputIndex=f3EnvAlarmInputIndex, cmAlmIndex=cmAlmIndex, cmNetworkElementCondObjectName=cmNetworkElementCondObjectName, cmAlmNotifGroup=cmAlmNotifGroup, alarmObjects=alarmObjects, cmNetworkElementAlmDescr=cmNetworkElementAlmDescr, cmNetworkElementAlmSrvEff=cmNetworkElementAlmSrvEff, cmAlarmSeverityAssignmentTable=cmAlarmSeverityAssignmentTable, f3EnvAlarmInputTable=f3EnvAlarmInputTable, cmSysCondLocation=cmSysCondLocation, f3EnvAlarmInputDescr=f3EnvAlarmInputDescr, cmSysAlmTable=cmSysAlmTable, f3EnvAlarmInputGroup=f3EnvAlarmInputGroup, cmNetworkElementCondEffType=cmNetworkElementCondEffType, PYSNMP_MODULE_ID=cmAlarmMIB, cmNetworkElementAlmDirection=cmNetworkElementAlmDirection, cmSysCondAdditionalInfoName=cmSysCondAdditionalInfoName, cmSysAlmSrvEff=cmSysAlmSrvEff, cmAlarmSeverityAssignmentDirection=cmAlarmSeverityAssignmentDirection, cmAlmCompliance=cmAlmCompliance, TestAlarmAction=TestAlarmAction, cmNetworkElementAlmTable=cmNetworkElementAlmTable, cmSysAlmObjectName=cmSysAlmObjectName, cmSysAlmTrap=cmSysAlmTrap, CmAlarmEntityType=CmAlarmEntityType, cmNetworkElementCondAdditionalInfoObject=cmNetworkElementCondAdditionalInfoObject, cmSysCondIndex=cmSysCondIndex, CmDirection=CmDirection, f3EnvAlarmInputCondType=f3EnvAlarmInputCondType, cmNetworkElementAlmObject=cmNetworkElementAlmObject, cmSysEvent=cmSysEvent, cmSysCondDirection=cmSysCondDirection, cmNetworkElementCondLocation=cmNetworkElementCondLocation, cmSysAlmDescr=cmSysAlmDescr, cmNetworkElementCondObject=cmNetworkElementCondObject, cmNetworkElementCondType=cmNetworkElementCondType, cmSysCondEntry=cmSysCondEntry, cmAlarmSeverityAssignmentNotifCode=cmAlarmSeverityAssignmentNotifCode, CmLocation=CmLocation, cmNetworkElementCondSrvEff=cmNetworkElementCondSrvEff, cmAlarmSeverityAssignmentSrvEff=cmAlarmSeverityAssignmentSrvEff, cmNetworkElementAlmAdditionalInfoName=cmNetworkElementAlmAdditionalInfoName, cmAlmObjectGroup=cmAlmObjectGroup, cmAlmLastChange=cmAlmLastChange, f3EnvAlarmInputNotifCode=f3EnvAlarmInputNotifCode, cmNetworkElementCondDescr=cmNetworkElementCondDescr)
